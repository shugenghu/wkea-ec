import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, buildMockModuleProps, buildMockRequest, msdyn365Commerce } from '@msdyn365-commerce/core';
import * as React from 'react';
import ReactDOM from 'react-dom';
import DefaultPageSummary from '../default-page-summary/default-page-summary';
const mockConfig = {
    title: 'Page Title',
    keywords: 'page, keywords, test',
    faviconUrl: 'https://example.com/myicon.ico',
    sharingImage: { src: 'www.example.com/test.jpg' }
};
const mockConfigWithDescription = {
    title: 'Page Title',
    description: 'Page Description',
    keywords: 'page, keywords, test',
    faviconUrl: 'https://example.com/myicon.ico',
    sharingImage: { src: 'www.example.com/test.jpg' }
};
const mockData = {};
mockData.pageSummary = wrapInResolvedAsyncResult({
    title: mockConfig.title,
    description: 'data description',
    keywords: mockConfig.keywords,
    sharingImageUrl: mockConfig.sharingImage && mockConfig.sharingImage.src,
    canonicalUrl: 'https://www.contoso.com/store',
    faviconUrl: mockConfig.faviconUrl
});
const mockDataWithoutDescription = {};
mockDataWithoutDescription.pageSummary = wrapInResolvedAsyncResult({
    title: mockConfig.title
});
const mockActions = {};
const mockIsBrowser = jest.spyOn(msdyn365Commerce, 'isBrowser', 'get');
beforeEach(() => {
    mockIsBrowser.mockReturnValue(false);
});
describe('DefaultPageSummary', () => {
    let moduleProps;
    let mockCoreContext;
    beforeAll(() => {
        moduleProps = buildMockModuleProps(mockData, mockActions, mockConfig);
        mockCoreContext = buildMockCoreContext({
            request: buildMockRequest({
                canonicalUrl: 'https://www.contoso.com/store',
                app: {
                    platform: {
                        pageTitlePrefix: 'Fabrikam-'
                    }
                }
            })
        });
    });
    const container = document.createElement('div');
    it('validates if default-page-summary renders properly', (done) => {
        ReactDOM.render(React.createElement(DefaultPageSummary, Object.assign({}, moduleProps)), container);
        expect(document.getElementsByTagName('title')[0].innerHTML).toEqual('Page Title');
        expect(document.getElementsByTagName('meta')[0].content).toEqual('data description');
        expect(document.getElementsByTagName('meta')[1].content).toEqual('page, keywords, test');
        expect(document.querySelector('link[rel=\'shortcut icon\']')).toBeTruthy();
        expect(document.querySelector('link[rel=\'shortcut icon\']').getAttribute('href')).toEqual('https://example.com/myicon.ico');
        expect(document.querySelector('link[rel=\'canonical\']')).toBeTruthy();
        expect(document.querySelector('link[rel=\'canonical\']').getAttribute('href')).toEqual('https://www.contoso.com/store');
        done();
    });
    it('validates if default-page-summary overrides with config property if provided', (done) => {
        const modulePropsWithConfigDescription = buildMockModuleProps(mockData, mockActions, mockConfigWithDescription, mockCoreContext);
        ReactDOM.render(React.createElement(DefaultPageSummary, Object.assign({}, modulePropsWithConfigDescription)), container);
        expect(document.querySelectorAll('meta[name=\'description\']')[0].getAttribute('content')).toEqual('Page Description');
        done();
    });
    it('validates if default-page-summary renders no description when not provided from data or config', (done) => {
        const modulePropsWithoutDescription = buildMockModuleProps(mockDataWithoutDescription, mockActions, mockConfig, mockCoreContext);
        ReactDOM.render(React.createElement(DefaultPageSummary, Object.assign({}, modulePropsWithoutDescription)), container);
        expect(document.getElementsByTagName('title')[0].innerHTML).toEqual('Fabrikam-Page Title');
        expect(document.querySelectorAll('meta[name=\'description\']').length).toEqual(0);
        expect(document.querySelectorAll('meta[property=\'og:title\']')[0].getAttribute('content')).toEqual('Fabrikam-Page Title');
        done();
    });
    it('validates if default-page-summary page title is not modified when disablePageTitlePrefixSuffix is enabled', (done) => {
        const modulePropsWithoutDescription = buildMockModuleProps(mockDataWithoutDescription, mockActions, {
            ...mockConfig,
            ignoreTitleSuffixPrefix: true
        }, mockCoreContext);
        ReactDOM.render(React.createElement(DefaultPageSummary, Object.assign({}, modulePropsWithoutDescription)), container);
        expect(document.getElementsByTagName('title')[0].innerHTML).toEqual('Page Title');
        done();
    });
});
//# sourceMappingURL=default-page-summary.test.js.map