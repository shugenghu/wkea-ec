import * as React from 'react';
import { HtmlHeadInclude } from '@msdyn365-commerce/core';
class DefaultPageSummary extends React.PureComponent {
    render() {
        if (this.props.data.pageSummary.result === undefined) {
            throw new Error('PageSummaryData input to page-summary is undefined. Unable to generate page-summary');
        }
        let { data: { pageSummary: { result: { title, description, keywords, sharingImageUrl, faviconUrl } } }, } = this.props;
        const { config, context, data: { pageSummary: { result: { canonicalUrl } } }, } = this.props;
        title = config.title || title;
        description = config.description || description;
        keywords = config.keywords || keywords;
        sharingImageUrl = (config.sharingImage && config.sharingImage.src) || sharingImageUrl;
        faviconUrl = config.faviconUrl || faviconUrl;
        const pageTitle = this._constructPageTitle(title, context && context.request && context.request.app);
        return (React.createElement(React.Fragment, null,
            React.createElement(HtmlHeadInclude, null,
                pageTitle && React.createElement("title", null, pageTitle),
                description && React.createElement("meta", { name: 'description', content: description }),
                keywords && React.createElement("meta", { name: 'keywords', content: keywords }),
                canonicalUrl && React.createElement("link", { rel: 'canonical', href: canonicalUrl }),
                faviconUrl && React.createElement("link", { rel: 'shortcut icon', href: faviconUrl })),
            !config.disableOgTags && this._renderOgTags(pageTitle, description, sharingImageUrl),
            !config.disableTwitterTags && this._renderTwitterTags(pageTitle, description, sharingImageUrl)));
    }
    _renderOgTags(title, description, sharingImageUrl) {
        return (React.createElement(HtmlHeadInclude, null,
            title && React.createElement("meta", { property: 'og:title', content: title }),
            description && React.createElement("meta", { property: 'og:description', content: description }),
            sharingImageUrl && React.createElement("meta", { property: 'og:image', content: sharingImageUrl }),
            React.createElement("meta", { property: 'og:type', content: 'website' })));
    }
    _renderTwitterTags(title, description, sharingImageUrl) {
        return (React.createElement(HtmlHeadInclude, null,
            title && React.createElement("meta", { name: 'twitter:title', content: title }),
            description && React.createElement("meta", { name: 'twitter:description', content: description }),
            sharingImageUrl && React.createElement("meta", { name: 'twitter:image', content: sharingImageUrl }),
            React.createElement("meta", { name: 'twitter:card', content: 'summary' })));
    }
    _constructPageTitle(title, app) {
        if (!title) {
            title = '';
        }
        const moduleConfig = this.props.config;
        if (moduleConfig && moduleConfig.ignoreTitleSuffixPrefix) {
            return title;
        }
        const appConfig = app && app.platform;
        if (appConfig) {
            if (appConfig.pageTitlePrefix) {
                title = appConfig.pageTitlePrefix + title;
            }
            if (appConfig.pageTitleSuffix) {
                title = title + appConfig.pageTitleSuffix;
            }
        }
        return title;
    }
}
export default DefaultPageSummary;
//# sourceMappingURL=default-page-summary.js.map