import { buildCacheKeyWithUrlTokens, getList, ListInput } from '@msdyn365-commerce-modules/retail-actions';
import { createObservableDataAction } from '@msdyn365-commerce/core';
export class ListPageSummaryInput {
    constructor(config, requestContext) {
        this.getCacheObjectType = () => 'ListPageSummary';
        this.getCacheKey = () => buildCacheKeyWithUrlTokens('ListPageSummary', this.requestContext);
        this.dataCacheType = () => 'request';
        this.config = config || {};
        this.requestContext = requestContext;
    }
}
function getSubListUrl(listName, sitePath) {
    if (!listName) {
        return '';
    }
    if (!sitePath) {
        return `/${listName}.l`;
    }
    return `${sitePath}/${listName}.l`;
}
function getSubListItem(item, sitePathOfRequest) {
    const imageList = getImages(item.fields.content.images);
    const sublistHref = getSubListUrl(item.fields._name, sitePathOfRequest);
    return {
        Title: item.fields.content.title,
        Description: item.fields.content.description,
        ShortDescription: item.fields.content.shortDescription,
        BackgroundColor: item.fields.content.backgroundColor,
        ForegroundColor: item.fields.content.foregroundColor,
        Href: sublistHref,
        Images: imageList
    };
}
function getSitePath(inputData) {
    return inputData && inputData.requestContext && inputData.requestContext.sitePath ? inputData.requestContext.sitePath : '';
}
function getItemsPerPage(inputData) {
    if (!inputData || !inputData.config || !inputData.config.itemsPerPage) {
        return 50;
    }
    const result = Number(inputData.config.itemsPerPage);
    if (isNaN(result)) {
        return 50;
    }
    return result;
}
function getSkipCount(inputData) {
    return inputData && inputData.requestContext && inputData.requestContext.query && inputData.requestContext.query.skipCount
        ? Number(inputData.requestContext.query.skipCount)
        : 0;
}
function getImages(images) {
    const resultImageList = [];
    if (!images) {
        return resultImageList;
    }
    images.forEach(item => {
        if (item && item.image && item.image.href) {
            const imageItem = {
                href: item.image.href,
                altText: item.image.altText,
                title: item.image.title,
                width: item.image.width,
                height: item.image.height
            };
            resultImageList.push(imageItem);
        }
    });
    return resultImageList;
}
function getInputListData(inputData) {
    let listData = !inputData || !inputData.requestContext || !inputData.requestContext.pageData ? null : inputData.requestContext.pageData.list;
    if (!inputData ||
        !inputData.requestContext ||
        !inputData.requestContext.pageData ||
        !inputData.requestContext.pageData.list ||
        !inputData.requestContext.pageData.list.content ||
        !inputData.requestContext.pageData.list.content.items ||
        !inputData.requestContext.pageData.list.content.title ||
        !inputData.requestContext.pageData.list._id) {
        if (!inputData ||
            !inputData.data ||
            !inputData.data.list ||
            !inputData.data.list.content ||
            !inputData.data.list.content.items ||
            !inputData.data.list.content.title ||
            !inputData.data.list._id) {
            console.error('data is not well defined for list action input');
            throw new Error('data is not well defined for list action input');
        }
        listData = inputData.data.list;
    }
    return listData;
}
const createGetListInput = (inputData) => {
    const listData = getInputListData(inputData);
    const listItems = [];
    let productList = [];
    const parentImageList = getImages(listData.content.images);
    const itemsPerPage = getItemsPerPage(inputData);
    const skipCount = getSkipCount(inputData);
    const productItems = [];
    const sum = skipCount + itemsPerPage;
    for (let index = skipCount; index < listData.content.items.length && index < sum; index++) {
        const item = listData.content.items[index];
        if (item.type === "list") {
            if (!item.fields || !item.fields.content || !item.fields.content.title) {
                console.error(`sublist item fields, content or title missing in list ${listData._id}`);
                continue;
            }
            if (!(productList.length === 0)) {
                const clonedList = [...productList];
                listItems.push(clonedList);
                productList = [];
            }
            listItems.push(getSubListItem(item, getSitePath(inputData)));
        }
        if (item.type === "product") {
            if (!item.fields || !item.fields.recordId) {
                console.error(`product item missing recordId in list ${listData._id}`);
                continue;
            }
            const productItem = {
                RecordId: item.fields.recordId,
                CatalogId: item.fields.catalogId || '0'
            };
            productList.push(productItem);
            productItems.push(productItem);
        }
    }
    if (!(productList.length === 0)) {
        listItems.push(productList);
    }
    return new ListInput(listData._id, listData.content.title, listData.content.description, listData.content.shortDescription, listData.content.backgroundColor, listData.content.foregroundColor, parentImageList, listItems, productItems, listData.content.items.length, itemsPerPage, skipCount);
};
const action = async (input, context) => {
    const { config } = input;
    let listData;
    try {
        listData = await getList(createGetListInput(context), context);
    }
    catch (e) {
    }
    if (listData && listData.Title) {
        return {
            title: listData.Title,
            description: listData.Description
        };
    }
    else if (config) {
        return {
            title: config.title,
            description: config.description
        };
    }
    else {
        return {};
    }
};
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/page-summary/list-page-summary',
    action: action,
    input: (args) => {
        return new ListPageSummaryInput(args.config, args.requestContext);
    }
});
//# sourceMappingURL=list-page-summary.action.js.map