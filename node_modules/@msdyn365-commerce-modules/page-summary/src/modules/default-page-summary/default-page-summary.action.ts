/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { buildCacheKeyWithUrlTokens } from '@msdyn365-commerce-modules/retail-actions';
import {
    CacheType,
    createObservableDataAction,
    IAction,
    IActionContext,
    IActionInput,
    ICreateActionContext,
    IRequestContext
} from '@msdyn365-commerce/core';
import { IDefaultPageSummaryConfig } from './default-page-summary.props.autogenerated';

export interface IPageSummaryData {
    title?: string;
    description?: string;
    keywords?: string;
    sharingImageUrl?: string;
    canonicalUrl?: string;
    faviconUrl?: string;
}

/** Page Summary Input */
export class PageSummaryInput implements IActionInput {
    public requestContext: IRequestContext;
    public config: IDefaultPageSummaryConfig;

    constructor(config: IDefaultPageSummaryConfig, requestContext: IRequestContext) {
        this.config = config || {};
        this.requestContext = requestContext;
    }

    public getCacheObjectType = (): string => 'PageSummary';
    public getCacheKey = (): string => `${buildCacheKeyWithUrlTokens('PageSummary', this.requestContext)}-${this.config.title}`;
    public dataCacheType = (): CacheType => 'request';
}

const action = async (input: PageSummaryInput, context: IActionContext): Promise<IPageSummaryData> => {
    const { config } = input;
    return {
        title: config && config.title,
        description: config && config.description,
        keywords: config && config.keywords,
        sharingImageUrl: config && config.sharingImage && config.sharingImage.src,
        canonicalUrl: context.requestContext && context.requestContext.canonicalUrl,
        faviconUrl: config && config.faviconUrl
    };
};

export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/page-summary/default-page-summary',
    action: <IAction<IPageSummaryData>>action,
    input: (args: ICreateActionContext) => {
        return new PageSummaryInput(<IDefaultPageSummaryConfig>args.config, args.requestContext);
    }
});
