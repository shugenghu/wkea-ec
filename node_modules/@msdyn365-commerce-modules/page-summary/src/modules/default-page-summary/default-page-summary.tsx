/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

import { HtmlHeadInclude, IAny, IGeneric } from '@msdyn365-commerce/core';
import { IDefaultPageSummaryData } from './default-page-summary.data';
import { IDefaultPageSummaryProps } from './default-page-summary.props.autogenerated';

/**
 *
 * DefaultPageSummaryMetadata component
 * @extends {React.PureComponent<DefaultPageSummaryProps>}
 */
class DefaultPageSummary extends React.PureComponent<IDefaultPageSummaryProps<IDefaultPageSummaryData>> {
    public render(): JSX.Element {
        if (this.props.data.pageSummary.result === undefined) {
            throw new Error('PageSummaryData input to page-summary is undefined. Unable to generate page-summary');
        }
        let {
            data: {
                pageSummary: {
                    result: { title, description, keywords, sharingImageUrl, faviconUrl }
                }
            },
        } = this.props;

        const {
            config,
            context,
            data: {
                pageSummary: {
                    result: { canonicalUrl }
                }
            },
        } = this.props;

        // Override values coming from data action if config values are provided
        title = config.title || title;
        description = config.description || description;
        keywords = config.keywords || keywords;
        sharingImageUrl = (config.sharingImage && config.sharingImage.src) || sharingImageUrl;
        faviconUrl = config.faviconUrl || faviconUrl;

        const pageTitle = this._constructPageTitle(title, context && context.request && context.request.app);
        return (
            <React.Fragment>
                <HtmlHeadInclude>
                    {pageTitle && <title>{pageTitle}</title>}
                    {description && <meta name='description' content={description} />}
                    {keywords && <meta name='keywords' content={keywords} />}
                    {canonicalUrl && <link rel='canonical' href={canonicalUrl} />}
                    {faviconUrl && <link rel='shortcut icon' href={faviconUrl} />}
                </HtmlHeadInclude>
                {!config.disableOgTags && this._renderOgTags(pageTitle, description, sharingImageUrl)}
                {!config.disableTwitterTags && this._renderTwitterTags(pageTitle, description, sharingImageUrl)}
            </React.Fragment>
        );
    }

    private _renderOgTags(title: string | undefined, description: string | undefined, sharingImageUrl: string | undefined): JSX.Element {
        return (
            <HtmlHeadInclude>
                {title && <meta property='og:title' content={title} />}
                {description && <meta property='og:description' content={description} />}
                {sharingImageUrl && <meta property='og:image' content={sharingImageUrl} />}
                <meta property='og:type' content='website' />
            </HtmlHeadInclude>
        );
    }

    private _renderTwitterTags(
        title: string | undefined,
        description: string | undefined,
        sharingImageUrl: string | undefined
    ): JSX.Element {
        return (
            <HtmlHeadInclude>
                {title && <meta name='twitter:title' content={title} />}
                {description && <meta name='twitter:description' content={description} />}
                {sharingImageUrl && <meta name='twitter:image' content={sharingImageUrl} />}
                {<meta name='twitter:card' content='summary' />}
            </HtmlHeadInclude>
        );
    }

    private _constructPageTitle(title: string | undefined, app: IGeneric<IAny>): string | undefined {
        if(!title) {
            title = '';
        }

        const moduleConfig = this.props.config;
        if (moduleConfig && moduleConfig.ignoreTitleSuffixPrefix) {
            return title;
        }

        const appConfig = app && app.platform;
        if (appConfig) {
            if (appConfig.pageTitlePrefix) {
                title = (appConfig.pageTitlePrefix as string) + title;
            }
            if (appConfig.pageTitleSuffix) {
                title = title + (appConfig.pageTitleSuffix as string);
            }
        }

        return title;
    }
}

export default DefaultPageSummary;
