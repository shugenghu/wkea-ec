/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, buildMockModuleProps, buildMockRequest, ICoreContext, msdyn365Commerce } from '@msdyn365-commerce/core';
/// <reference types="jest" />

// tslint:disable-next-line:no-unused-variable
import * as React from 'react';
import ReactDOM from 'react-dom';

import DefaultPageSummary from '../default-page-summary/default-page-summary';
import { IDefaultPageSummaryData } from '../default-page-summary/default-page-summary.data';
import { IDefaultPageSummaryConfig, IDefaultPageSummaryProps } from '../default-page-summary/default-page-summary.props.autogenerated';
import { IPageSummaryData } from '../IPageSummaryData';

const mockConfig: IDefaultPageSummaryConfig = {
    title: 'Page Title',
    keywords: 'page, keywords, test',
    faviconUrl: 'https://example.com/myicon.ico',
    sharingImage: {src: 'www.example.com/test.jpg' }
};

const mockConfigWithDescription: IDefaultPageSummaryConfig = {
    title: 'Page Title',
    description: 'Page Description',
    keywords: 'page, keywords, test',
    faviconUrl: 'https://example.com/myicon.ico',
    sharingImage: {src: 'www.example.com/test.jpg' }
};

const mockData: Partial<IDefaultPageSummaryData> = {};

mockData.pageSummary = wrapInResolvedAsyncResult({
    title: mockConfig.title,
    description: 'data description',
    keywords: mockConfig.keywords,
    sharingImageUrl: mockConfig.sharingImage && mockConfig.sharingImage.src,
    canonicalUrl: 'https://www.contoso.com/store',
    faviconUrl: mockConfig.faviconUrl
} as IPageSummaryData);

const mockDataWithoutDescription: Partial<IDefaultPageSummaryData> = {};

mockDataWithoutDescription.pageSummary = wrapInResolvedAsyncResult({
    title: mockConfig.title
} as IPageSummaryData);

const mockActions = {};

const mockIsBrowser = jest.spyOn(msdyn365Commerce, 'isBrowser', 'get');

beforeEach(() => {
    // set isBrower to false to render HtmlHeadInclude component on server side
    mockIsBrowser.mockReturnValue(false);
});

describe('DefaultPageSummary', () => {
    let moduleProps: IDefaultPageSummaryProps<IDefaultPageSummaryData>;
    // tslint:disable-next-line: no-any
    let mockCoreContext: ICoreContext<any>;
    beforeAll(() => {
        moduleProps = buildMockModuleProps(mockData, mockActions, mockConfig) as IDefaultPageSummaryProps<IDefaultPageSummaryData>;
        mockCoreContext = buildMockCoreContext({
            request:  buildMockRequest({
                canonicalUrl: 'https://www.contoso.com/store',
                app: {
                    platform: {
                        pageTitlePrefix: 'Fabrikam-'
                    }
                }
            })
        });
    });
    const container = document.createElement('div');

    // tslint:disable-next-line:no-any
    it('validates if default-page-summary renders properly', (done: any) => {
        ReactDOM.render(<DefaultPageSummary {...moduleProps} />, container);

        expect(document.getElementsByTagName('title')[0].innerHTML).toEqual('Page Title');
        expect(document.getElementsByTagName('meta')[0].content).toEqual('data description');
        expect(document.getElementsByTagName('meta')[1].content).toEqual('page, keywords, test');

        expect(document.querySelector('link[rel=\'shortcut icon\']')).toBeTruthy();
        // @ts-ignore: complains that the object might be null, if it is null then this test will throw and fail so its fine
        expect(document.querySelector('link[rel=\'shortcut icon\']').getAttribute('href')).toEqual('https://example.com/myicon.ico');

        expect(document.querySelector('link[rel=\'canonical\']')).toBeTruthy();
        // @ts-ignore: complains that the object might be null, if it is null then this test will throw and fail so its fine
        expect(document.querySelector('link[rel=\'canonical\']').getAttribute('href')).toEqual('https://www.contoso.com/store');
        done();
    });

    // tslint:disable-next-line:no-any
    it('validates if default-page-summary overrides with config property if provided', (done: any) => {
        const modulePropsWithConfigDescription = buildMockModuleProps(
            mockData,
            mockActions,
            mockConfigWithDescription,
            mockCoreContext
        ) as IDefaultPageSummaryProps<IDefaultPageSummaryData>;
        ReactDOM.render(<DefaultPageSummary {...modulePropsWithConfigDescription} />, container);

        expect(document.querySelectorAll('meta[name=\'description\']')[0].getAttribute('content')).toEqual('Page Description');
        done();
    });

    // tslint:disable-next-line:no-any
    it('validates if default-page-summary renders no description when not provided from data or config', (done: any) => {
        const modulePropsWithoutDescription = buildMockModuleProps(
            mockDataWithoutDescription,
            mockActions,
            mockConfig,
            mockCoreContext
        ) as IDefaultPageSummaryProps<IDefaultPageSummaryData>;

        ReactDOM.render(<DefaultPageSummary {...modulePropsWithoutDescription} />, container);

        expect(document.getElementsByTagName('title')[0].innerHTML).toEqual('Fabrikam-Page Title');
        expect(document.querySelectorAll('meta[name=\'description\']').length).toEqual(0);
        expect(document.querySelectorAll('meta[property=\'og:title\']')[0].getAttribute('content')).toEqual('Fabrikam-Page Title');
        done();
    });

    // tslint:disable-next-line:no-any
    it('validates if default-page-summary page title is not modified when disablePageTitlePrefixSuffix is enabled', (done: any) => {
        const modulePropsWithoutDescription = buildMockModuleProps(
            mockDataWithoutDescription,
            mockActions,
            {
                ...mockConfig,
                ignoreTitleSuffixPrefix: true
            },
            mockCoreContext
        ) as IDefaultPageSummaryProps<IDefaultPageSummaryData>;

        ReactDOM.render(<DefaultPageSummary {...modulePropsWithoutDescription} />, container);

        expect(document.getElementsByTagName('title')[0].innerHTML).toEqual('Page Title');
        done();
    });
});
