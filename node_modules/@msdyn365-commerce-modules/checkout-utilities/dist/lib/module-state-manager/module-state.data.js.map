{"version":3,"file":"module-state.data.js","sourceRoot":"","sources":["../../../src/module-state-manager/module-state.data.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Status type\n */\nexport type statusType =\n    /**\n     * Ready status\n     * When module has selected items or it is in a finalized stage\n     */\n    | 'ready'\n\n    /**\n     * Updating status\n     * When module is under contruction or in the middle of an activity\n     */\n    | 'updating'\n\n    /**\n     * Pending status\n     * When module is in loading statge or waiting for a request to come back\n     */\n    | 'pending'\n\n    /**\n     * skipped status\n     * When trying skip the module\n     */\n    | 'skipped'\n\n    /**\n     * Disabled status\n     * When module is disable for it is not work for the current business flow\n     * or it is not necessary\n     * or it should be hidden from the current UI\n     */\n    | 'disabled';\n\n/**\n * ModuleState interface\n */\nexport interface IModuleState {\n    /**\n     * @friendlyName ID\n     * @description ID of the module\n     */\n    id: string;\n\n    /**\n     * @friendlyName Type name\n     * @description Type name of the module\n     */\n    typeName: string;\n\n    /**\n     * @friendlyName Status\n     * @description Moudle's current status\n     */\n    status?: statusType;\n\n    /**\n     * @friendlyName Has initialized\n     * @description Module has been initialized and reday for consuming\n     */\n    hasInitialized: boolean;\n\n    /**\n     * @friendlyName Has error\n     * @description Module has error\n     */\n    hasError: boolean;\n\n    /**\n     * @friendlyName Is required\n     * @description Module is one of the required step in order to complete certain business flow\n     */\n    isRequired: boolean;\n\n    /**\n     * @friendlyName Is Cancellable\n     * @description Module allow cancel operation\n     */\n    isCancellable: boolean;\n\n    /**\n     * @friendlyName Is SubmitContainer\n     * @description Module will force container to submit \n     */\n    isSubmitContainer: boolean;\n\n    /**\n     * @friendlyName Child IDs\n     * @description List of the IDs of the child modules\n     */\n    childIds: string[];\n\n    /**\n     * @friendlyName OnSubmit method\n     * @description Method for submitting a form or trigger a save/add function\n     */\n    onSubmit?(): void;\n\n    /**\n     * @friendlyName OnEdit method\n     * @description Method for making module to a editable stage\n     */\n    onEdit?(): void;\n\n    /**\n     * @friendlyName OnCancel method\n     * @description Method for cancel current activity and covnert it back to its previous stage\n     */\n    onCancel?(): void;\n\n    /**\n     * @friendlyName onContainerReady method\n     * @description Method for submitting a form or trigger when container is ready\n     */\n    onContainerReady?(): void;\n}\n\n/**\n * ModuleStates interface\n */\nexport interface IModuleStates {\n    [id: string]: IModuleState;\n}\n\nexport interface IRegisterMethods {\n    onSubmit?(): void;\n    onEdit?(): void;\n    onCancel?(): void;\n    onContainerReady?(): void;\n}\n\n/**\n * ModuleStateManger interface\n */\nexport interface IModuleStateManager extends IModuleState {\n    /**\n     * @friendlyName ID\n     * @description ID of the module\n     */\n    id: string;\n\n    /**\n     * @friendlyName Is ready\n     * @description Module is in ready status\n     */\n    isReady: boolean;\n\n    /**\n     * @friendlyName Is updating\n     * @description Module is in updating status\n     */\n    isUpdating: boolean;\n\n    /**\n     * @friendlyName Is ready\n     * @description Module is in pending status\n     */\n    isPending: boolean;\n\n    /**\n     * @friendlyName Is skipped\n     * @description Module is in skipped status\n     */\n    isSkipped: boolean;\n\n    /**\n     * @friendlyName Is disabled\n     * @description Module is in disabled status\n     */\n    isDisabled: boolean;\n\n    /**\n     * @friendlyName Is cancel allowed\n     * @description Module allow cancel operation\n     */\n    isCancelAllowed: boolean;\n\n    /**\n     * @friendlyName Is cancel allowed\n     * @description Module allow cancel operation\n     */\n    shouldSubmitContainer: boolean;\n\n    /**\n     * @friendlyName Has module state\n     * @description Module is using module state manager\n     */\n    hasModuleState: boolean;\n\n    /**\n     * @friendlyName Has external submit group\n     * @description Module will have external submit group as it's parent has set enableControl to true\n     */\n    hasExternalSubmitGroup: boolean;\n\n    /**\n     * @friendlyName init method\n     * @description Set module state to initialized\n     */\n    init(options?: Partial<IModuleState>): void;\n\n    /**\n     * @friendlyName setIsRequired method\n     * @description Make it a required module\n     */\n    setIsRequired(value: boolean): void;\n\n    /**\n     * @friendlyName setIsCancellable method\n     * @description Make it cancellable module\n     */\n    setIsCancellable(value: boolean): void;\n\n    /**\n     * @friendlyName setIsSubmitContainer method\n     * @description Module will force container to submit \n     */\n    setIsSubmitContainer(value: boolean): void;\n\n    /**\n     * @friendlyName setHasError method\n     * @description Set it has error\n     */\n    setHasError(value: boolean): void;\n\n    /**\n     * @friendlyName onReady method\n     * @description Set module status to ready\n     */\n    onReady(): void;\n\n    /**\n     * @friendlyName onUpdating method\n     * @description Set module status to updating\n     */\n    onUpdating(): void;\n\n    /**\n     * @friendlyName onPending method\n     * @description Set module status to pending\n     */\n    onPending(): void;\n\n    /**\n     * @friendlyName onSkip method\n     * @description Set module status to skipped\n     */\n    onSkip(): void;\n\n    /**\n     * @friendlyName onDisable method\n     * @description Set module status to dsiabled\n     */\n    onDisable(): void;\n\n    /**\n     * @friendlyName getModule method\n     * @description Get module state by provided module ID\n     */\n    getModule(id: string): IModuleStateManager;\n\n    /**\n     * @friendlyName IModuleStateManager method\n     * @description Get module state by provided module typeName\n     */\n    getModuleByTypeName(typeName: string): IModuleStateManager;\n}\n\n/**\n * ModuleState props interface\n */\nexport interface IModuleStateProps {\n    moduleState: IModuleStateManager;\n}"]}