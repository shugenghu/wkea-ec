{"version":3,"file":"with-module-state.js","sourceRoot":"","sources":["../../../src/module-state-manager/with-module-state.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IModule } from '@msdyn365-commerce/core';\nimport isMatch from 'lodash/isMatch';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\nimport { getModuleStates, updateModuleStates } from './module-state';\nimport { IModuleState, IModuleStateManager, IModuleStateProps, IModuleStates } from './module-state.data';\n\nexport interface IProps extends IModule, IModuleStateProps {\n    enableControl?: boolean;\n}\n\nconst withModuleState = <P extends IProps>(WrappedComponent: React.ComponentType<P>): React.ComponentType<P> => {\n    /**\n     *\n     * ModuleState component\n     * @extends {React.Component<P>}\n     */\n    @observer\n    class ModuleState extends React.Component<P> {\n        constructor(props: P) {\n            super(props);\n            this.initializeState();\n        }\n\n        public render(): JSX.Element | null {\n            const { id } = this.props;\n            return <WrappedComponent {...this.props} moduleState={this.getModuleStateManager(id)} />;\n        }\n\n        private initializeState = (): void => {\n            const { id, typeName, context } = this.props;\n            const states = getModuleStates(context.actionContext);\n            if (!states) {\n                this.props.telemetry.error('withModuleState initializeState() - states not found');\n                return;\n            }\n\n            if (states[id]) {\n                // state has been initialized\n                return;\n            }\n\n            updateModuleStates(\n                {\n                    ...states,\n                    [id]: {\n                        id,\n                        typeName,\n                        hasInitialized: false,\n                        hasError: false,\n                        isRequired: true,\n                        isCancellable: true,\n                        isSubmitContainer: false,\n                        status: undefined,\n                        childIds: []\n                    }\n                },\n                context.actionContext\n            );\n        };\n\n        /**\n         * GetModuleStateManager\n         * Get module state manager by id\n         */\n        private getModuleStateManager = (id: string): IModuleStateManager => {\n            const moduleState = this.get()[id];\n            return {\n                ...moduleState,\n                hasInitialized: this.validate(id, { hasInitialized: true }, true), // All has initialized is initialized\n                hasError: this.validate(id, { hasError: true }), // Partial has error is error\n                isReady: this.validate(id, { status: 'ready' }, true, true), // All ready is ready (exclued disabled and skipped)\n                isUpdating: this.validate(id, { status: 'updating' }), // Partial updating is updating\n                isPending: this.validate(id, { status: 'pending' }), // Partial pending is pending\n                isSkipped: this.validate(id, { status: 'skipped' }, true, true), // All skipped is skipped (exclued disabled)\n                isDisabled: this.validate(id, { status: 'disabled' }, true), // All disabled is disabled\n                isCancelAllowed: this.validate(id, { isCancellable: true }, true, true), // Partial not allowed is not allowed\n                shouldSubmitContainer: this.validate(id, { isSubmitContainer: true }), // Partial submit is submit.\n                hasExternalSubmitGroup: this.hasExternalSubmitGroup(),\n                hasModuleState: this.hasModuleState(id),\n                setIsRequired: (value: boolean): void => this.update(id, { isRequired: value }),\n                setIsCancellable: (value: boolean): void => this.update(id, { isCancellable: value }),\n                setIsSubmitContainer: (value: boolean): void => this.update(id, { isSubmitContainer: value }),\n                setHasError: (value: boolean): void => this.update(id, { hasError: value }),\n                onReady: (): void => this.update(id, { status: 'ready' }),\n                onUpdating: (): void => this.update(id, { status: 'updating' }),\n                onPending: (): void => this.update(id, { status: 'pending' }),\n                onSkip: (): void => this.update(id, { status: 'skipped' }),\n                onDisable: (): void => this.update(id, { status: 'disabled' }),\n                getModule: (moduleId: string): IModuleStateManager => this.getModuleStateManager(moduleId),\n                getModuleByTypeName: (typeName: string): IModuleStateManager => this.getModuleStateManagerByTypeName(typeName),\n                init: (options?: Partial<IModuleState>): void => {\n                    if (moduleState.hasInitialized) {\n                        // state has been initialized\n                        return;\n                    }\n                    this.update(id, {\n                        hasInitialized: true,\n                        ...options\n                    });\n                }\n            };\n        };\n\n        /**\n         * GetModuleStateManagerByTypeName\n         * Get module state manager by type name\n         */\n        private getModuleStateManagerByTypeName = (typeName: string): IModuleStateManager => {\n            const moduleStates = getModuleStates(this.props.context.actionContext);\n            const moduleState = Object.values(moduleStates).find(_moduleState => _moduleState.typeName === typeName);\n            return this.getModuleStateManager((moduleState && moduleState.id) || '');\n        };\n\n        /**\n         * Get\n         * Get all module states\n         */\n        private get = (): IModuleStates => {\n            return getModuleStates(this.props.context.actionContext);\n        };\n\n        /**\n         * Update\n         * Update module state\n         */\n        private update = (id: string, value: Partial<IModuleState>): void => {\n            // console.log('withModuleState - update', id, value);\n            const modules = this.get();\n            if (!modules[id]) {\n                this.props.telemetry.error(`withModuleState update() - Module state with id ${id} is not found.`);\n                return;\n            }\n            modules[id] = {\n                ...modules[id],\n                ...value\n            };\n        };\n\n        private _validateLeaf = (id: string, source: Partial<IModuleState>): boolean => {\n            const modules = this.get();\n            const module = modules[id];\n            if (!module) {\n                return false;\n            }\n            return isMatch(module, source);\n        };\n\n        private _validateContainer = (\n            id: string,\n            source: Partial<IModuleState>,\n            allMatched?: boolean,\n            skipSkippableItem?: boolean\n        ): boolean => {\n            const modules = this.get();\n            const module = modules[id];\n            if (!module) {\n                // module doesn't has module state\n                return !!allMatched;\n            }\n\n            if (skipSkippableItem && (module.status === 'disabled' || module.status === 'skipped')) {\n                // Skip disabled or skipped modules\n                return !!allMatched;\n            }\n\n            // It is leaf module\n            if (!module.childIds || !module.childIds.length) {\n                return this._validateLeaf(id, source);\n            }\n\n            // It is container module\n            const method = allMatched ? 'every' : 'some';\n            return module.childIds[method](childId => this._validateContainer(childId, source, allMatched, skipSkippableItem));\n        };\n\n        /**\n         * Validate\n         * Validate current module and all its child module match the provided condition\n         */\n        private validate = (id: string, source: Partial<IModuleState>, allMatched?: boolean, skipSkippableItem?: boolean): boolean => {\n            const modules = this.get();\n            const module = modules[id];\n            if (!module) {\n                return false;\n            }\n\n            // It is leaf module\n            if (!module.childIds || !module.childIds.length) {\n                return this._validateLeaf(id, source);\n            }\n\n            // It is container module\n            return this._validateContainer(id, source, allMatched, skipSkippableItem);\n        };\n\n        /**\n         * hasExternalSubmitGroup\n         * Module will use external submit group\n         */\n        private hasExternalSubmitGroup = (): boolean => {\n            return !!this.props.enableControl;\n        };\n\n        /**\n         * hasModuleState\n         * Module is using module state manager\n         */\n        private hasModuleState = (id: string): boolean => {\n            const modules = this.get();\n            const module = modules[id];\n            return !!module;\n        };\n    }\n\n    return ModuleState;\n};\n\nexport default withModuleState;"]}