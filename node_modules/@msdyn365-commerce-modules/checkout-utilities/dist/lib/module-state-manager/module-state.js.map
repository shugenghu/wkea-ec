{"version":3,"file":"module-state.js","sourceRoot":"","sources":["../../../src/module-state-manager/module-state.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAKhG;;GAEG;AACH;IAAA;QACW,gBAAW,GAAG,cAAM,OAAA,aAAa,EAAb,CAAa,CAAC;QAClC,uBAAkB,GAAG,cAAM,OAAA,aAAa,EAAb,CAAa,CAAC;QACzC,kBAAa,GAAG,cAAiB,OAAA,MAAM,EAAN,CAAM,CAAC;IACnD,CAAC;IAAD,2BAAC;AAAD,CAAC,AAJD,IAIC;;AAED,MAAM,UAAU,eAAe,CAAC,GAAmB;IAC/C,IAAM,QAAQ,GAAG,IAAI,oBAAoB,EAAE,CAAC;IAE5C,aAAa;IACb,IAAI,YAAY,GAAkB,GAAG,CAAC,GAAG,CAAgB,QAAQ,CAAC,kBAAkB,EAAE,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;IAChH,IAAI,YAAY,EAAE;QACd,OAAO,YAAY,CAAC;KACvB;IACD,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IACzB,YAAY,GAAkB,GAAG,CAAC,GAAG,CAAgB,QAAQ,CAAC,kBAAkB,EAAE,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;IAC5G,OAAO,YAAY,CAAC;AACxB,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,KAAoB,EAAE,GAAmB;IACxE,IAAM,QAAQ,GAAG,IAAI,oBAAoB,EAAE,CAAC;IAC5C,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAChC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CacheType, IActionContext, IActionInput } from '@msdyn365-commerce/core';\nimport { IModuleStates } from './module-state.data';\n\n/**\n * GetModulesInput\n */\nexport class ModuleStatesCacheKey implements IActionInput {\n    public getCacheKey = () => 'ModuleState';\n    public getCacheObjectType = () => 'ModuleState';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nexport function getModuleStates(ctx: IActionContext): IModuleStates {\n    const cacheKey = new ModuleStatesCacheKey();\n\n    // @ts-ignore\n    let moduleStates = <IModuleStates>ctx.get<IModuleStates>(cacheKey.getCacheObjectType(), cacheKey.getCacheKey());\n    if (moduleStates) {\n        return moduleStates;\n    }\n    ctx.update(cacheKey, {});\n    moduleStates = <IModuleStates>ctx.get<IModuleStates>(cacheKey.getCacheObjectType(), cacheKey.getCacheKey());\n    return moduleStates;\n}\n\nexport function updateModuleStates(value: IModuleStates, ctx: IActionContext): void {\n    const cacheKey = new ModuleStatesCacheKey();\n    ctx.update(cacheKey, value);\n}\n"]}