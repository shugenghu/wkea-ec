/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { __assign, __decorate, __extends, __metadata } from "tslib";
import isMatch from 'lodash/isMatch';
import { observer } from 'mobx-react';
import * as React from 'react';
import { getModuleStates, updateModuleStates } from './module-state';
var withModuleState = function (WrappedComponent) {
    /**
     *
     * ModuleState component
     * @extends {React.Component<P>}
     */
    var ModuleState = /** @class */ (function (_super) {
        __extends(ModuleState, _super);
        function ModuleState(props) {
            var _this = _super.call(this, props) || this;
            _this.initializeState = function () {
                var _a;
                var _b = _this.props, id = _b.id, typeName = _b.typeName, context = _b.context;
                var states = getModuleStates(context.actionContext);
                if (!states) {
                    _this.props.telemetry.error('withModuleState initializeState() - states not found');
                    return;
                }
                if (states[id]) {
                    // state has been initialized
                    return;
                }
                updateModuleStates(__assign(__assign({}, states), (_a = {}, _a[id] = {
                    id: id,
                    typeName: typeName,
                    hasInitialized: false,
                    hasError: false,
                    isRequired: true,
                    isCancellable: true,
                    isSubmitContainer: false,
                    status: undefined,
                    childIds: []
                }, _a)), context.actionContext);
            };
            /**
             * GetModuleStateManager
             * Get module state manager by id
             */
            _this.getModuleStateManager = function (id) {
                var moduleState = _this.get()[id];
                return __assign(__assign({}, moduleState), { hasInitialized: _this.validate(id, { hasInitialized: true }, true), hasError: _this.validate(id, { hasError: true }), isReady: _this.validate(id, { status: 'ready' }, true, true), isUpdating: _this.validate(id, { status: 'updating' }), isPending: _this.validate(id, { status: 'pending' }), isSkipped: _this.validate(id, { status: 'skipped' }, true, true), isDisabled: _this.validate(id, { status: 'disabled' }, true), isCancelAllowed: _this.validate(id, { isCancellable: true }, true, true), shouldSubmitContainer: _this.validate(id, { isSubmitContainer: true }), hasExternalSubmitGroup: _this.hasExternalSubmitGroup(), hasModuleState: _this.hasModuleState(id), setIsRequired: function (value) { return _this.update(id, { isRequired: value }); }, setIsCancellable: function (value) { return _this.update(id, { isCancellable: value }); }, setIsSubmitContainer: function (value) { return _this.update(id, { isSubmitContainer: value }); }, setHasError: function (value) { return _this.update(id, { hasError: value }); }, onReady: function () { return _this.update(id, { status: 'ready' }); }, onUpdating: function () { return _this.update(id, { status: 'updating' }); }, onPending: function () { return _this.update(id, { status: 'pending' }); }, onSkip: function () { return _this.update(id, { status: 'skipped' }); }, onDisable: function () { return _this.update(id, { status: 'disabled' }); }, getModule: function (moduleId) { return _this.getModuleStateManager(moduleId); }, getModuleByTypeName: function (typeName) { return _this.getModuleStateManagerByTypeName(typeName); }, init: function (options) {
                        if (moduleState.hasInitialized) {
                            // state has been initialized
                            return;
                        }
                        _this.update(id, __assign({ hasInitialized: true }, options));
                    } });
            };
            /**
             * GetModuleStateManagerByTypeName
             * Get module state manager by type name
             */
            _this.getModuleStateManagerByTypeName = function (typeName) {
                var moduleStates = getModuleStates(_this.props.context.actionContext);
                var moduleState = Object.values(moduleStates).find(function (_moduleState) { return _moduleState.typeName === typeName; });
                return _this.getModuleStateManager((moduleState && moduleState.id) || '');
            };
            /**
             * Get
             * Get all module states
             */
            _this.get = function () {
                return getModuleStates(_this.props.context.actionContext);
            };
            /**
             * Update
             * Update module state
             */
            _this.update = function (id, value) {
                // console.log('withModuleState - update', id, value);
                var modules = _this.get();
                if (!modules[id]) {
                    _this.props.telemetry.error("withModuleState update() - Module state with id " + id + " is not found.");
                    return;
                }
                modules[id] = __assign(__assign({}, modules[id]), value);
            };
            _this._validateLeaf = function (id, source) {
                var modules = _this.get();
                var module = modules[id];
                if (!module) {
                    return false;
                }
                return isMatch(module, source);
            };
            _this._validateContainer = function (id, source, allMatched, skipSkippableItem) {
                var modules = _this.get();
                var module = modules[id];
                if (!module) {
                    // module doesn't has module state
                    return !!allMatched;
                }
                if (skipSkippableItem && (module.status === 'disabled' || module.status === 'skipped')) {
                    // Skip disabled or skipped modules
                    return !!allMatched;
                }
                // It is leaf module
                if (!module.childIds || !module.childIds.length) {
                    return _this._validateLeaf(id, source);
                }
                // It is container module
                var method = allMatched ? 'every' : 'some';
                return module.childIds[method](function (childId) { return _this._validateContainer(childId, source, allMatched, skipSkippableItem); });
            };
            /**
             * Validate
             * Validate current module and all its child module match the provided condition
             */
            _this.validate = function (id, source, allMatched, skipSkippableItem) {
                var modules = _this.get();
                var module = modules[id];
                if (!module) {
                    return false;
                }
                // It is leaf module
                if (!module.childIds || !module.childIds.length) {
                    return _this._validateLeaf(id, source);
                }
                // It is container module
                return _this._validateContainer(id, source, allMatched, skipSkippableItem);
            };
            /**
             * hasExternalSubmitGroup
             * Module will use external submit group
             */
            _this.hasExternalSubmitGroup = function () {
                return !!_this.props.enableControl;
            };
            /**
             * hasModuleState
             * Module is using module state manager
             */
            _this.hasModuleState = function (id) {
                var modules = _this.get();
                var module = modules[id];
                return !!module;
            };
            _this.initializeState();
            return _this;
        }
        ModuleState.prototype.render = function () {
            var id = this.props.id;
            return React.createElement(WrappedComponent, __assign({}, this.props, { moduleState: this.getModuleStateManager(id) }));
        };
        ModuleState = __decorate([
            observer,
            __metadata("design:paramtypes", [Object])
        ], ModuleState);
        return ModuleState;
    }(React.Component));
    return ModuleState;
};
export default withModuleState;
//# sourceMappingURL=with-module-state.js.map