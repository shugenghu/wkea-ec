import 'jest';
import { Address, GiftCard, TenderLine, TokenizedPaymentCard } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { CheckoutState } from '../checkout-state';

describe('CheckoutState', () => {
    beforeEach(() => jest.resetModules());

    it('guestCheckoutEmail has default value and can be updated', () => {
        const checkoutState = new CheckoutState();

        expect(checkoutState.guestCheckoutEmail).toEqual('');
        checkoutState.updateGuestCheckoutEmail('example@test.com');
        expect(checkoutState.guestCheckoutEmail).toEqual('example@test.com');
    });

    it('billingAddress has default value and can be updated', () => {
        const checkoutState = new CheckoutState();

        const newAddress: Address = {};

        expect(checkoutState.billingAddress).toEqual(undefined);
        checkoutState.updateBillingAddress(newAddress);
        expect(checkoutState.billingAddress).toEqual(newAddress);
    });

    it('shippingAddress has default value and can be updated', () => {
        const checkoutState = new CheckoutState();

        const newAddress: Address = {};

        expect(checkoutState.shippingAddress).toEqual(undefined);
        checkoutState.updateShippingAddress(newAddress);
        expect(checkoutState.shippingAddress).toEqual(newAddress);
    });

    it('cardPrefix has default value and can be updated', () => {
        const checkoutState = new CheckoutState();

        expect(checkoutState.cardPrefix).toEqual(undefined);
        checkoutState.updateCardPrefix('A1');
        expect(checkoutState.cardPrefix).toEqual('A1');
    });

    it('loyaltyAmount has default value and can be updated', () => {
        const checkoutState = new CheckoutState();

        expect(checkoutState.loyaltyAmount).toEqual(0);
        checkoutState.updateLoyaltyAmount(9000);
        expect(checkoutState.loyaltyAmount).toEqual(9000);
    });

    it('loyaltyCardNumber has default value and can be updated', () => {
        const checkoutState = new CheckoutState();

        expect(checkoutState.loyaltyCardNumber).toEqual(undefined);
        checkoutState.updateLoyaltyCardNumber('10000000');
        expect(checkoutState.loyaltyCardNumber).toEqual('10000000');
    });

    it('tenderLine has default value and can be updated', () => {
        const checkoutState = new CheckoutState();

        const newTenderLine: TenderLine = {};

        expect(checkoutState.tenderLine).toEqual(undefined);
        checkoutState.updateTenderLine(newTenderLine);
        expect(checkoutState.tenderLine).toEqual(newTenderLine);
    });

    it('tokenizedPaymentCart has default value and can be updated', () => {
        const checkoutState = new CheckoutState();

        const newTokenizedPaymentCard: TokenizedPaymentCard = {};

        expect(checkoutState.tokenizedPaymentCard).toEqual(undefined);
        checkoutState.updateTokenizedPaymentCard(newTokenizedPaymentCard);
        expect(checkoutState.tokenizedPaymentCard).toEqual(newTokenizedPaymentCard);
    });

    it('giftCards starts out as empty', () => {
        const checkoutState = new CheckoutState();

        expect(checkoutState.giftCards).toEqual([]);
    });

    it('giftCards can be added', () => {
        const checkoutState = new CheckoutState();

        const newGiftCard: GiftCard = { Id: '1' };
        checkoutState.addGiftCard(newGiftCard);
        expect(checkoutState.giftCards).toContainEqual(newGiftCard);

        const anotherNewGiftCard: GiftCard = { Id: '2' };
        checkoutState.addGiftCard(anotherNewGiftCard);
        expect(checkoutState.giftCards).toContainEqual(newGiftCard);
        expect(checkoutState.giftCards).toContainEqual(anotherNewGiftCard);
    });

    it('giftCards can be removed', () => {
        const checkoutState = new CheckoutState();

        const giftCard1: GiftCard = { Id: '1' };
        const giftCard2: GiftCard = { Id: '2' };
        const giftCard3: GiftCard = { Id: '3' };

        // @ts-ignore: initializing test data
        checkoutState['_giftCards'] = [giftCard1, giftCard2, giftCard3, giftCard1];

        checkoutState.removeGiftCard('1');
        checkoutState.removeGiftCard('2');

        expect(checkoutState.giftCards).not.toContainEqual(giftCard1);
        expect(checkoutState.giftCards).not.toContainEqual(giftCard2);
        expect(checkoutState.giftCards).toContainEqual(giftCard3);
    });
});
