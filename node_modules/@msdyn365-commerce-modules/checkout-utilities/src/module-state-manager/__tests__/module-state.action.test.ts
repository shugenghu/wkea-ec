/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import 'jest';
import { getModuleStates, ModuleStatesCacheKey, updateModuleStates } from '../module-state';

describe('CheckoutState.ModuleStates', () => {
    xit('updates module state', () => {
        const actionContext = {
            update: jest.fn(),
            requestCache: {
                get: jest.fn()
            }
        };
        const value = {};
        // @ts-ignore: Bug 21409223
        updateModuleStates(value, actionContext);
        // The context update is called once
        expect(actionContext.update.mock.calls.length).toBe(1);
        expect(actionContext.update.mock.calls[0][0] instanceof ModuleStatesCacheKey).toBe(true);
        expect(actionContext.update.mock.calls[0][1]).toBe(value);
    });

    xit('gets module state', () => {
        const actionContext = {
            update: jest.fn(),
            requestCache: {
                get: jest.fn().mockReturnValueOnce({ item: { id: 'mock-id' } })
            }
        };
        // @ts-ignore: Bug 21409223
        const result = getModuleStates(actionContext);
        expect(result).toEqual({ id: 'mock-id' });
        // The context update is not called
        expect(actionContext.update.mock.calls.length).toBe(0);
    });

    xit('gets module state and create an new module state when no state found', () => {
        const actionContext = {
            update: jest.fn(),
            requestCache: {
                get: jest
                    .fn()
                    .mockReturnValueOnce(null)
                    .mockReturnValueOnce({ item: {} })
            }
        };
        // @ts-ignore: Bug 21409223
        const result = getModuleStates(actionContext);
        expect(result).toEqual({});
        // The context update is called once
        expect(actionContext.update.mock.calls.length).toBe(1);
        expect(actionContext.update.mock.calls[0][0] instanceof ModuleStatesCacheKey).toBe(true);
        expect(actionContext.update.mock.calls[0][1]).toEqual({});
    });
});
