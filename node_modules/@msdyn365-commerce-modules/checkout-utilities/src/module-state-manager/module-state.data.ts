/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Status type
 */
export type statusType =
    /**
     * Ready status
     * When module has selected items or it is in a finalized stage
     */
    | 'ready'

    /**
     * Updating status
     * When module is under contruction or in the middle of an activity
     */
    | 'updating'

    /**
     * Pending status
     * When module is in loading statge or waiting for a request to come back
     */
    | 'pending'

    /**
     * skipped status
     * When trying skip the module
     */
    | 'skipped'

    /**
     * Disabled status
     * When module is disable for it is not work for the current business flow
     * or it is not necessary
     * or it should be hidden from the current UI
     */
    | 'disabled';

/**
 * ModuleState interface
 */
export interface IModuleState {
    /**
     * @friendlyName ID
     * @description ID of the module
     */
    id: string;

    /**
     * @friendlyName Type name
     * @description Type name of the module
     */
    typeName: string;

    /**
     * @friendlyName Status
     * @description Moudle's current status
     */
    status?: statusType;

    /**
     * @friendlyName Has initialized
     * @description Module has been initialized and reday for consuming
     */
    hasInitialized: boolean;

    /**
     * @friendlyName Has error
     * @description Module has error
     */
    hasError: boolean;

    /**
     * @friendlyName Is required
     * @description Module is one of the required step in order to complete certain business flow
     */
    isRequired: boolean;

    /**
     * @friendlyName Is Cancellable
     * @description Module allow cancel operation
     */
    isCancellable: boolean;

    /**
     * @friendlyName Is SubmitContainer
     * @description Module will force container to submit 
     */
    isSubmitContainer: boolean;

    /**
     * @friendlyName Child IDs
     * @description List of the IDs of the child modules
     */
    childIds: string[];

    /**
     * @friendlyName OnSubmit method
     * @description Method for submitting a form or trigger a save/add function
     */
    onSubmit?(): void;

    /**
     * @friendlyName OnEdit method
     * @description Method for making module to a editable stage
     */
    onEdit?(): void;

    /**
     * @friendlyName OnCancel method
     * @description Method for cancel current activity and covnert it back to its previous stage
     */
    onCancel?(): void;

    /**
     * @friendlyName onContainerReady method
     * @description Method for submitting a form or trigger when container is ready
     */
    onContainerReady?(): void;
}

/**
 * ModuleStates interface
 */
export interface IModuleStates {
    [id: string]: IModuleState;
}

export interface IRegisterMethods {
    onSubmit?(): void;
    onEdit?(): void;
    onCancel?(): void;
    onContainerReady?(): void;
}

/**
 * ModuleStateManger interface
 */
export interface IModuleStateManager extends IModuleState {
    /**
     * @friendlyName ID
     * @description ID of the module
     */
    id: string;

    /**
     * @friendlyName Is ready
     * @description Module is in ready status
     */
    isReady: boolean;

    /**
     * @friendlyName Is updating
     * @description Module is in updating status
     */
    isUpdating: boolean;

    /**
     * @friendlyName Is ready
     * @description Module is in pending status
     */
    isPending: boolean;

    /**
     * @friendlyName Is skipped
     * @description Module is in skipped status
     */
    isSkipped: boolean;

    /**
     * @friendlyName Is disabled
     * @description Module is in disabled status
     */
    isDisabled: boolean;

    /**
     * @friendlyName Is cancel allowed
     * @description Module allow cancel operation
     */
    isCancelAllowed: boolean;

    /**
     * @friendlyName Is cancel allowed
     * @description Module allow cancel operation
     */
    shouldSubmitContainer: boolean;

    /**
     * @friendlyName Has module state
     * @description Module is using module state manager
     */
    hasModuleState: boolean;

    /**
     * @friendlyName Has external submit group
     * @description Module will have external submit group as it's parent has set enableControl to true
     */
    hasExternalSubmitGroup: boolean;

    /**
     * @friendlyName init method
     * @description Set module state to initialized
     */
    init(options?: Partial<IModuleState>): void;

    /**
     * @friendlyName setIsRequired method
     * @description Make it a required module
     */
    setIsRequired(value: boolean): void;

    /**
     * @friendlyName setIsCancellable method
     * @description Make it cancellable module
     */
    setIsCancellable(value: boolean): void;

    /**
     * @friendlyName setIsSubmitContainer method
     * @description Module will force container to submit 
     */
    setIsSubmitContainer(value: boolean): void;

    /**
     * @friendlyName setHasError method
     * @description Set it has error
     */
    setHasError(value: boolean): void;

    /**
     * @friendlyName onReady method
     * @description Set module status to ready
     */
    onReady(): void;

    /**
     * @friendlyName onUpdating method
     * @description Set module status to updating
     */
    onUpdating(): void;

    /**
     * @friendlyName onPending method
     * @description Set module status to pending
     */
    onPending(): void;

    /**
     * @friendlyName onSkip method
     * @description Set module status to skipped
     */
    onSkip(): void;

    /**
     * @friendlyName onDisable method
     * @description Set module status to dsiabled
     */
    onDisable(): void;

    /**
     * @friendlyName getModule method
     * @description Get module state by provided module ID
     */
    getModule(id: string): IModuleStateManager;

    /**
     * @friendlyName IModuleStateManager method
     * @description Get module state by provided module typeName
     */
    getModuleByTypeName(typeName: string): IModuleStateManager;
}

/**
 * ModuleState props interface
 */
export interface IModuleStateProps {
    moduleState: IModuleStateManager;
}