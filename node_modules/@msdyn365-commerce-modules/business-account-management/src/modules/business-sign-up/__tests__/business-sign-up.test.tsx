import * as React from 'react';

import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import BusinessSignUp, { IFormItem, InputID, InputType } from '../business-sign-up';
import { HeadingTag, IBusinessSignUpConfig, IBusinessSignUpProps, IBusinessSignUpResources } from '../business-sign-up.props.autogenerated';
import BusinesSignUpView from '../business-sign-up.view';

const mockConfig: IBusinessSignUpConfig = {
    heading: {
        tag: HeadingTag.h2,
        text: 'Business Sign up Form'
    },
    disclaimer: '<p>This is a test disclaimer...</p>',
    confirmationLink: {
        linkText: 'See details.',
        linkUrl: {
            destinationUrl: '#'
        },
        ariaLabel: 'See details',
        openInNewTab: false
    }
};

const mockAddress = {
    AddressTypeValue: 8,
    State: 'WA',
    ThreeLetterISORegionName: 'USA',
    Street: '91900 Jefferson St',
    City: 'Seattle',
    ZipCode: '98122'
};

const mockAddressInput: IFormItem = {
    id: InputID.Address,
    type: InputType.Address,
    label: 'Company Address',
    value: '',
    isRequired: false,
    customClass: 'width-100',
    address: mockAddress
};

// @ts-ignore
const mockResources: IBusinessSignUpResources = {
    firstNameLabel: 'First Name',
    firstNameMaxLength: '20',
    lastNameLabel: 'Last Name',
    lastNameMaxLength: '20',
    emailAddressLabel: 'Email Address',
    signUpButtonText: 'Sign up',
    signUpButtonArialabel: 'Sign up',
    cancelButtonText: 'Cancel',
    cancelButtonArialabel: 'Cancel',
    requiredFieldMissingSummaryError: 'A required field is missing. Please fill out all required fields and try again.',
    requiredFieldMissingError: 'This information is required.',
    fieldIncorrectError: 'One or more fields are filled out incorrectly. Please check your entries and try again.',
    partialAddressErrorMessage: 'Please complete the rest of the address fields as we do not accept a partial address.'
};

const mockFormItems: IFormItem[] = [
    {
        id: InputID.FirstName,
        type: InputType.Text,
        label: mockResources.firstNameLabel,
        value: '',
        isRequired: true,
        customClass: 'width-25'
    },
    {
        id: InputID.LastName,
        type: InputType.Text,
        label: mockResources.lastNameLabel,
        value: '',
        isRequired: true,
        customClass: 'width-25'
    },
    {
        id: InputID.Email,
        type: InputType.Email,
        label: mockResources.emailAddressLabel,
        value: '',
        isRequired: true,
        pattern: '^[a-zA-Z0-9.!#$%&\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$',
        customClass: 'width-50'
    },
    {
        id: InputID.CompanyName,
        type: InputType.Text,
        label: mockResources.companyLabel,
        value: '',
        isRequired: true,
        customClass: 'width-50'
    },
    {
        id: InputID.Department,
        type: InputType.Text,
        label: mockResources.departmentLabel,
        value: '',
        isRequired: false,
        customClass: 'width-50'
    },
    {
        id: InputID.JobTitle,
        type: InputType.Text,
        label: mockResources.jobTitleLabel,
        value: '',
        isRequired: false,
        customClass: 'width-50'
    },
    {
        id: InputID.Size,
        type: InputType.Text,
        label: mockResources.companySizeLabel,
        value: '',
        isRequired: false,
        customClass: 'width-50'
    }
];

const mockSlots = {
    addressSlot: [(<div>Mock Address Component</div>)]
};

const mockActions = {};

describe('BusinessSignUp', () => {
    it('renders correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,
            resources: mockResources,
            slots: mockSlots,
            // @ts-ignore
            renderView: BusinesSignUpView
        } as IBusinessSignUpProps<IBusinessSignUpConfig>;

        const component = render(<BusinessSignUp {...moduleProps}/>);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly without address slot', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,
            resources: mockResources,
            // @ts-ignore
            BusinesSignUpView
        } as IBusinessSignUpProps<IBusinessSignUpConfig>;

        const component = render(<BusinessSignUp {...moduleProps}/>);
        expect(component).toMatchSnapshot();
    });

    it('testing onInputChange', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,
            resources: mockResources,
            // @ts-ignore
            renderView: BusinesSignUpView
        } as IBusinessSignUpProps<IBusinessSignUpConfig>;

        const component = mount(<BusinessSignUp {...moduleProps}/>);

        // get first inputField and gets id
        const inputFields = component.find('input');
        const textInputField = inputFields.first();
        const elementId = textInputField.props().id!;

        // simultes inputting 'foo' into the elementId input field
        textInputField.simulate('change', { target: { value: 'foo', id: `${elementId}` }});
    });

    it('testing isFormReady', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,
            resources: mockResources,
            // @ts-ignore
            renderView: BusinesSignUpView
        } as IBusinessSignUpProps<IBusinessSignUpConfig>;

        const component = mount(<BusinessSignUp {...moduleProps}/>);
        const inputFields = component.find('input');

        // add valid inputs
        inputFields.forEach(input => {
            const elementId = input.props().id;
            switch(elementId) {
                case 'CompanyEmail':
                    input.simulate('change', { target: { value: 'test@email.com', id: `${elementId}` }});
                    break;
                case 'CompanySize':
                    input.simulate('change', { target: { value: '10', id: `${elementId}` }});
                    break;
                case 'CompanyAddress':
                    input.simulate('change', { target: { address: mockAddress, id: `${elementId}` }});
                    break;
                default:
                    input.simulate('change', { target: { value: 'test value', id: `${elementId}` }});
            }
        });
        expect(component.state('isReady')).toBeTruthy();

        // add INVALID inputs
        inputFields.forEach(input => {
            const elementId = input.props().id;

            switch(elementId) {
                case 'CompanyEmail':
                    input.simulate('change', { target: { value: 'test', id: `${elementId}` }});
                    break;
                case 'CompanySize':
                    input.simulate('change', { target: { value: 'abc', id: `${elementId}` }});
                    break;
                default:
                    input.simulate('change', { target: { value: 'test value', id: `${elementId}` }});
            }
        });
        expect(component.state('isReady')).toBeFalsy();
    });

    it('testing onSubmit', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,
            resources: mockResources,
            // @ts-ignore
            renderView: BusinesSignUpView
        } as IBusinessSignUpProps<IBusinessSignUpConfig>;

        const component = mount(<BusinessSignUp {...moduleProps}/>);
        const inputFields = component.find('input');

        // add valid inputs
        inputFields.forEach(input => {
            const elementId = input.props().id;
            switch(elementId) {
                case 'CompanyEmail':
                    input.simulate('change', { target: { value: 'test@email.com', id: `${elementId}` }});
                    break;
                case 'ComapanySize':
                    input.simulate('change', { target: { value: '10', id: `${elementId}` }});
                    break;
                default:
                    input.simulate('change', { target: { value: 'test value', id: `${elementId}` }});
            }
        });
        expect(component.state('isReady')).toBeTruthy();
        const newFormItems: IFormItem[] = component.state('formItems');
        newFormItems.push(mockAddressInput);
        component.setState({
            formItems: newFormItems
        });
        expect(newFormItems).toMatchSnapshot();
        const submitButton = component.find('a.ms-business-sign-up__create-button').first();
        submitButton.simulate('click');
    });

    it('testing onCancel', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,
            resources: mockResources,
            // @ts-ignore
            renderView: BusinesSignUpView
        } as IBusinessSignUpProps<IBusinessSignUpConfig>;

        const component = mount(<BusinessSignUp {...moduleProps} formItems={mockFormItems}/>);
        const inputFields = component.find('input');

        // add valid inputs
        inputFields.forEach(input => {
            input.simulate('change', { target: { value: 'test', id: `${input.props().id}` }});
        });

        // set all values to test
        const beforeFormItems: IFormItem[] = component.state('formItems');
        beforeFormItems.forEach(formItem => {
            try {
                expect(formItem.value).toBe('test');
            } catch {
                throw new Error(`${formItem.id} IS THROWING THE ERROR`);
            }
        });
        component.setState({
            formItems: beforeFormItems
        });

        // click on the cancel button
        const cancelButton = component.find('button.ms-business-sign-up__cancel-button').first();
        cancelButton.simulate('click');

        // make sure that all values are empty
        const afterFormItems: IFormItem[] = component.state('formItems');
        afterFormItems.forEach(formItem => {
            try {
                expect(formItem.value).toBe('');
            } catch {
                throw new Error(`${formItem.id} IS THROWING THE ERROR`);
            }
        });
    });

    it('testing errors render', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,
            resources: mockResources,
            // @ts-ignore
            renderView: BusinesSignUpView
        } as IBusinessSignUpProps<IBusinessSignUpConfig>;

        const wrapper = mount(<BusinessSignUp {...moduleProps}/>);
        const component = wrapper.instance() as BusinessSignUp;
        component.setState({
            hasSubmitErrors: true
        });

        // @ts-ignore
        const formComponent = component._renderForm();
        expect(formComponent.errorMessage[0]).not.toBeFalsy();
    });
});