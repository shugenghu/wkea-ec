import * as React from 'react';
import { getTelemetryObject, Heading } from '@msdyn365-commerce-modules/utilities';
import { getUrlSync, RichTextComponent } from '@msdyn365-commerce/core';
import { createProspectAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';
import classnames from 'classnames';
import { SignUpButton, SignUpError, SignUpInput, SignUpLabel } from './components';
export var InputType;
(function (InputType) {
    InputType["Text"] = "text";
    InputType["Address"] = "address";
    InputType["Email"] = "email";
    InputType["TextArea"] = "textarea";
})(InputType || (InputType = {}));
export var InputID;
(function (InputID) {
    InputID["FirstName"] = "FirstName";
    InputID["LastName"] = "LastName";
    InputID["Email"] = "CompanyEmail";
    InputID["CompanyName"] = "CompanyName";
    InputID["Address"] = "CompanyAddress";
    InputID["JobTitle"] = "JobTitle";
    InputID["Size"] = "CompanySize";
    InputID["Department"] = "Department";
    InputID["Comment"] = "Comment";
})(InputID || (InputID = {}));
export const renderInputSection = (inputs, className, needToReset, onInputChange, showErrors, addressForm, updateAddress) => {
    return inputs.map((element, index) => {
        const { id, type, label, maxChars, isRequired, pattern, customClass, value } = element;
        const baseSignUpItem = {
            wrapper: {
                className: classnames(className, `${className}-${id}`, customClass)
            },
            id: id,
            label: React.createElement(SignUpLabel, Object.assign({}, { id, forId: id, className, text: label })),
            errorMessage: React.createElement(SignUpError, Object.assign({}, { className: className, type: 'item' })),
        };
        if (type === InputType.Address) {
            if (addressForm) {
                baseSignUpItem.isAddressInput = true;
                baseSignUpItem.input = (React.createElement(React.Fragment, null, React.cloneElement(addressForm, { updateForm: updateAddress, hasError: showErrors, isRequired: isRequired === undefined ? false : isRequired, resetAddress: needToReset })));
            }
            else {
                inputs.splice(index, 1);
            }
        }
        else {
            baseSignUpItem.input = (React.createElement(SignUpInput, Object.assign({}, {
                id: id,
                type: type,
                value: value,
                maxLength: maxChars,
                pattern: pattern,
                className: className,
                isRequired: isRequired === undefined ? false : isRequired,
                onChange: onInputChange
            })));
        }
        return baseSignUpItem;
    });
};
class BusinessSignUp extends React.Component {
    constructor(props) {
        super(props);
        this.BusinessSignUpDefaultInputs = [
            {
                id: InputID.FirstName,
                type: InputType.Text,
                label: this.props.resources.firstNameLabel,
                value: '',
                isRequired: true,
                customClass: 'width-25'
            },
            {
                id: InputID.LastName,
                type: InputType.Text,
                label: this.props.resources.lastNameLabel,
                value: '',
                isRequired: true,
                customClass: 'width-25'
            },
            {
                id: InputID.Email,
                type: InputType.Email,
                label: this.props.resources.emailAddressLabel,
                value: '',
                isRequired: true,
                pattern: '^[a-zA-Z0-9.!#$%&\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$',
                customClass: 'width-50'
            },
            {
                id: InputID.CompanyName,
                type: InputType.Text,
                label: this.props.resources.companyLabel,
                value: '',
                isRequired: true,
                customClass: 'width-50'
            },
            {
                id: InputID.Department,
                type: InputType.Text,
                label: this.props.resources.departmentLabel,
                value: '',
                isRequired: false,
                customClass: 'width-50'
            },
            {
                id: InputID.JobTitle,
                type: InputType.Text,
                label: this.props.resources.jobTitleLabel,
                value: '',
                isRequired: false,
                customClass: 'width-50'
            },
            {
                id: InputID.Size,
                type: InputType.Text,
                label: this.props.resources.companySizeLabel,
                value: '',
                isRequired: false,
                customClass: 'width-50'
            },
            {
                id: InputID.Address,
                type: InputType.Address,
                label: this.props.resources.companyAddressLabel,
                value: '',
                isRequired: false,
                customClass: 'width-100'
            },
            {
                id: InputID.Comment,
                type: InputType.TextArea,
                label: this.props.resources.commentLabel,
                value: '',
                isRequired: false,
                customClass: 'width-100'
            }
        ];
        this.moduleClassName = 'ms-business-sign-up';
        this.needsToReset = false;
        this._onInputChange = (event) => {
            const newForm = this.state.formItems;
            newForm.forEach(item => {
                if (item.id === event.target.id) {
                    item.value = event.target.value;
                }
            });
            this.setState({
                isReady: this._isFormReady(),
                formItems: newForm,
                hasSubmitErrors: false
            });
        };
        this._onAddressChange = (errors, currentAddress) => {
            const newForm = this.state.formItems;
            const addressItem = newForm.find((item) => {
                return item.type === InputType.Address;
            });
            if (addressItem) {
                addressItem.address = currentAddress;
                this.setState({
                    isReady: this._isFormReady(),
                    formItems: newForm,
                    addressHasErrors: errors,
                    showAddressErrors: false
                });
            }
        };
        this._isFormReady = () => {
            const { formItems } = this.state;
            for (let i = 0; i < formItems.length; i++) {
                const currentInput = formItems[i];
                if (currentInput.isRequired) {
                    if (currentInput.type === InputType.Address) {
                        if (this.state.addressHasErrors) {
                            return false;
                        }
                    }
                    else {
                        if (currentInput.value === undefined || currentInput.value === '') {
                            return false;
                        }
                    }
                }
                if (currentInput.pattern !== undefined && currentInput.value.match(formItems[i].pattern) === null) {
                    return false;
                }
            }
            return true;
        };
        this._onSubmit = (event) => {
            if (this.state.addressHasErrors) {
                this.setState({
                    showAddressErrors: true
                });
                event.preventDefault();
                return;
            }
            const { context } = this.props;
            const firstName = this._getItem(InputID.FirstName);
            const lastName = this._getItem(InputID.LastName);
            const companyName = this._getItem(InputID.CompanyName);
            const companyEmail = this._getItem(InputID.Email);
            const companyAddress = this._getItem(InputID.Address, true);
            const jobTitle = this._getItem(InputID.JobTitle);
            const department = this._getItem(InputID.Department);
            const companySize = this._getItem(InputID.Size);
            const comments = this._getItem(InputID.Comment);
            if (companyEmail && companyEmail.value && companyAddress && companyAddress.address) {
                companyAddress.address.Email = companyEmail.value;
            }
            const newPartner = {
                FirstName: firstName && firstName.value,
                LastName: lastName && lastName.value,
                CompanyName: companyName && companyName.value,
                Address: companyAddress && companyAddress.address && companyAddress.address,
                JobTitle: jobTitle && jobTitle.value,
                Department: department && department.value,
                CompanySize: companySize && parseInt(companySize.value, 10) || 0,
                Comments: comments && comments.value,
            };
            createProspectAsync({ callerContext: context.actionContext }, newPartner)
                .catch(() => {
                this.setState({
                    hasSubmitErrors: true,
                    isReady: false
                });
            });
        };
        this._onCancel = () => {
            const cleanForm = this.state.formItems;
            cleanForm.forEach(input => { input.value = ''; });
            this.needsToReset = true;
            this.setState({
                isReady: false,
                formItems: cleanForm,
                addressHasErrors: true,
                showAddressErrors: false,
                hasSubmitErrors: false
            });
        };
        this._getItem = (id, isAddress = false) => {
            if (isAddress) {
                return this.state.formItems.find((item) => { return item.id === id && item.address; });
            }
            return this.state.formItems.find((item) => { return item.id === id && item.value !== ''; });
        };
        this.state = {
            isReady: false,
            formItems: this.props.formItems || this.BusinessSignUpDefaultInputs,
            addressHasErrors: false,
            showAddressErrors: false,
            hasSubmitErrors: false
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    render() {
        const { config } = this.props;
        const { formItems } = this.state;
        const { className, heading } = config;
        const viewProps = {
            ...this.props,
            businessSignUp: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, className)
            },
            ContainerWrapper: {
                className: `${this.moduleClassName}__container`
            },
            heading: React.createElement(Heading, Object.assign({ className: `${this.moduleClassName}__heading` }, heading)),
            businessSignUpForm: this._renderForm(),
            formItems: formItems
        };
        return this.props.renderView(viewProps);
    }
    _renderForm() {
        const { config, resources, slots } = this.props;
        const { showAddressErrors, hasSubmitErrors, isReady, formItems } = this.state;
        const { signUpButtonArialabel, signUpButtonText, cancelButtonArialabel, cancelButtonText, errorMessage, partialAddressErrorMessage } = resources;
        const addressForm = slots && slots.addressSlot && slots.addressSlot.length > 0 && slots.addressSlot[0] || undefined;
        const successPageURL = config.confirmationLink && config.confirmationLink.linkUrl && config.confirmationLink.linkUrl.destinationUrl || getUrlSync('home', this.props.context.actionContext);
        const form = {
            FormWrapper: {
                className: `${this.moduleClassName}__form `
            },
            items: renderInputSection(formItems, `${this.moduleClassName}__form-item`, this.needsToReset, this._onInputChange, showAddressErrors, addressForm, this._onAddressChange),
            buttons: [
                React.createElement(SignUpButton, { key: 'continue', id: 'continue', className: `${this.moduleClassName}__create-button`, link: successPageURL, ariaLabel: signUpButtonArialabel, text: signUpButtonText, disabled: !isReady, onClick: this._onSubmit, telemetryContent: this.telemetryContent }),
                React.createElement(SignUpButton, { key: 'cancel', id: 'cancel', className: `${this.moduleClassName}__cancel-button`, ariaLabel: cancelButtonArialabel, text: cancelButtonText, onClick: this._onCancel, telemetryContent: this.telemetryContent })
            ],
            errorMessage: [
                hasSubmitErrors && React.createElement(SignUpError, { key: 'error', id: 'error', className: this.moduleClassName, message: errorMessage }),
                showAddressErrors && React.createElement(SignUpError, { key: 'error', id: 'error', className: this.moduleClassName, message: partialAddressErrorMessage })
            ],
            disclaimer: config.disclaimer && React.createElement(RichTextComponent, { className: `${this.moduleClassName}__disclaimer`, text: config.disclaimer }),
        };
        if (this.needsToReset) {
            this.needsToReset = false;
        }
        return form;
    }
}
export default BusinessSignUp;
//# sourceMappingURL=business-sign-up.js.map