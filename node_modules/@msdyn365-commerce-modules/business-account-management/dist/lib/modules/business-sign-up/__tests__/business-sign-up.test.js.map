{"version":3,"file":"business-sign-up.test.js","sourceRoot":"./src/","sources":["modules/business-sign-up/__tests__/business-sign-up.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { buildMockModuleProps } from '@msdyn365-commerce/core';\nimport { mount, render } from 'enzyme';\nimport BusinessSignUp, { IFormItem, InputID, InputType } from '../business-sign-up';\nimport { HeadingTag, IBusinessSignUpConfig, IBusinessSignUpProps, IBusinessSignUpResources } from '../business-sign-up.props.autogenerated';\nimport BusinesSignUpView from '../business-sign-up.view';\n\nconst mockConfig: IBusinessSignUpConfig = {\n    heading: {\n        tag: HeadingTag.h2,\n        text: 'Business Sign up Form'\n    },\n    disclaimer: '<p>This is a test disclaimer...</p>',\n    confirmationLink: {\n        linkText: 'See details.',\n        linkUrl: {\n            destinationUrl: '#'\n        },\n        ariaLabel: 'See details',\n        openInNewTab: false\n    }\n};\n\nconst mockAddress = {\n    AddressTypeValue: 8,\n    State: 'WA',\n    ThreeLetterISORegionName: 'USA',\n    Street: '91900 Jefferson St',\n    City: 'Seattle',\n    ZipCode: '98122'\n};\n\nconst mockAddressInput: IFormItem = {\n    id: InputID.Address,\n    type: InputType.Address,\n    label: 'Company Address',\n    value: '',\n    isRequired: false,\n    customClass: 'width-100',\n    address: mockAddress\n};\n\n// @ts-ignore\nconst mockResources: IBusinessSignUpResources = {\n    firstNameLabel: 'First Name',\n    firstNameMaxLength: '20',\n    lastNameLabel: 'Last Name',\n    lastNameMaxLength: '20',\n    emailAddressLabel: 'Email Address',\n    signUpButtonText: 'Sign up',\n    signUpButtonArialabel: 'Sign up',\n    cancelButtonText: 'Cancel',\n    cancelButtonArialabel: 'Cancel',\n    requiredFieldMissingSummaryError: 'A required field is missing. Please fill out all required fields and try again.',\n    requiredFieldMissingError: 'This information is required.',\n    fieldIncorrectError: 'One or more fields are filled out incorrectly. Please check your entries and try again.',\n    partialAddressErrorMessage: 'Please complete the rest of the address fields as we do not accept a partial address.'\n};\n\nconst mockFormItems: IFormItem[] = [\n    {\n        id: InputID.FirstName,\n        type: InputType.Text,\n        label: mockResources.firstNameLabel,\n        value: '',\n        isRequired: true,\n        customClass: 'width-25'\n    },\n    {\n        id: InputID.LastName,\n        type: InputType.Text,\n        label: mockResources.lastNameLabel,\n        value: '',\n        isRequired: true,\n        customClass: 'width-25'\n    },\n    {\n        id: InputID.Email,\n        type: InputType.Email,\n        label: mockResources.emailAddressLabel,\n        value: '',\n        isRequired: true,\n        pattern: '^[a-zA-Z0-9.!#$%&\\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$',\n        customClass: 'width-50'\n    },\n    {\n        id: InputID.CompanyName,\n        type: InputType.Text,\n        label: mockResources.companyLabel,\n        value: '',\n        isRequired: true,\n        customClass: 'width-50'\n    },\n    {\n        id: InputID.Department,\n        type: InputType.Text,\n        label: mockResources.departmentLabel,\n        value: '',\n        isRequired: false,\n        customClass: 'width-50'\n    },\n    {\n        id: InputID.JobTitle,\n        type: InputType.Text,\n        label: mockResources.jobTitleLabel,\n        value: '',\n        isRequired: false,\n        customClass: 'width-50'\n    },\n    {\n        id: InputID.Size,\n        type: InputType.Text,\n        label: mockResources.companySizeLabel,\n        value: '',\n        isRequired: false,\n        customClass: 'width-50'\n    }\n];\n\nconst mockSlots = {\n    addressSlot: [(<div>Mock Address Component</div>)]\n};\n\nconst mockActions = {};\n\ndescribe('BusinessSignUp', () => {\n    it('renders correctly', () => {\n        const moduleProps = {\n            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,\n            resources: mockResources,\n            slots: mockSlots,\n            // @ts-ignore\n            renderView: BusinesSignUpView\n        } as IBusinessSignUpProps<IBusinessSignUpConfig>;\n\n        const component = render(<BusinessSignUp {...moduleProps}/>);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly without address slot', () => {\n        const moduleProps = {\n            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,\n            resources: mockResources,\n            // @ts-ignore\n            BusinesSignUpView\n        } as IBusinessSignUpProps<IBusinessSignUpConfig>;\n\n        const component = render(<BusinessSignUp {...moduleProps}/>);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('testing onInputChange', () => {\n        const moduleProps = {\n            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: BusinesSignUpView\n        } as IBusinessSignUpProps<IBusinessSignUpConfig>;\n\n        const component = mount(<BusinessSignUp {...moduleProps}/>);\n\n        // get first inputField and gets id\n        const inputFields = component.find('input');\n        const textInputField = inputFields.first();\n        const elementId = textInputField.props().id!;\n\n        // simultes inputting 'foo' into the elementId input field\n        textInputField.simulate('change', { target: { value: 'foo', id: `${elementId}` }});\n    });\n\n    it('testing isFormReady', () => {\n        const moduleProps = {\n            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: BusinesSignUpView\n        } as IBusinessSignUpProps<IBusinessSignUpConfig>;\n\n        const component = mount(<BusinessSignUp {...moduleProps}/>);\n        const inputFields = component.find('input');\n\n        // add valid inputs\n        inputFields.forEach(input => {\n            const elementId = input.props().id;\n            switch(elementId) {\n                case 'CompanyEmail':\n                    input.simulate('change', { target: { value: 'test@email.com', id: `${elementId}` }});\n                    break;\n                case 'CompanySize':\n                    input.simulate('change', { target: { value: '10', id: `${elementId}` }});\n                    break;\n                case 'CompanyAddress':\n                    input.simulate('change', { target: { address: mockAddress, id: `${elementId}` }});\n                    break;\n                default:\n                    input.simulate('change', { target: { value: 'test value', id: `${elementId}` }});\n            }\n        });\n        expect(component.state('isReady')).toBeTruthy();\n\n        // add INVALID inputs\n        inputFields.forEach(input => {\n            const elementId = input.props().id;\n\n            switch(elementId) {\n                case 'CompanyEmail':\n                    input.simulate('change', { target: { value: 'test', id: `${elementId}` }});\n                    break;\n                case 'CompanySize':\n                    input.simulate('change', { target: { value: 'abc', id: `${elementId}` }});\n                    break;\n                default:\n                    input.simulate('change', { target: { value: 'test value', id: `${elementId}` }});\n            }\n        });\n        expect(component.state('isReady')).toBeFalsy();\n    });\n\n    it('testing onSubmit', () => {\n        const moduleProps = {\n            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: BusinesSignUpView\n        } as IBusinessSignUpProps<IBusinessSignUpConfig>;\n\n        const component = mount(<BusinessSignUp {...moduleProps}/>);\n        const inputFields = component.find('input');\n\n        // add valid inputs\n        inputFields.forEach(input => {\n            const elementId = input.props().id;\n            switch(elementId) {\n                case 'CompanyEmail':\n                    input.simulate('change', { target: { value: 'test@email.com', id: `${elementId}` }});\n                    break;\n                case 'ComapanySize':\n                    input.simulate('change', { target: { value: '10', id: `${elementId}` }});\n                    break;\n                default:\n                    input.simulate('change', { target: { value: 'test value', id: `${elementId}` }});\n            }\n        });\n        expect(component.state('isReady')).toBeTruthy();\n        const newFormItems: IFormItem[] = component.state('formItems');\n        newFormItems.push(mockAddressInput);\n        component.setState({\n            formItems: newFormItems\n        });\n        expect(newFormItems).toMatchSnapshot();\n        const submitButton = component.find('a.ms-business-sign-up__create-button').first();\n        submitButton.simulate('click');\n    });\n\n    it('testing onCancel', () => {\n        const moduleProps = {\n            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: BusinesSignUpView\n        } as IBusinessSignUpProps<IBusinessSignUpConfig>;\n\n        const component = mount(<BusinessSignUp {...moduleProps} formItems={mockFormItems}/>);\n        const inputFields = component.find('input');\n\n        // add valid inputs\n        inputFields.forEach(input => {\n            input.simulate('change', { target: { value: 'test', id: `${input.props().id}` }});\n        });\n\n        // set all values to test\n        const beforeFormItems: IFormItem[] = component.state('formItems');\n        beforeFormItems.forEach(formItem => {\n            try {\n                expect(formItem.value).toBe('test');\n            } catch {\n                throw new Error(`${formItem.id} IS THROWING THE ERROR`);\n            }\n        });\n        component.setState({\n            formItems: beforeFormItems\n        });\n\n        // click on the cancel button\n        const cancelButton = component.find('button.ms-business-sign-up__cancel-button').first();\n        cancelButton.simulate('click');\n\n        // make sure that all values are empty\n        const afterFormItems: IFormItem[] = component.state('formItems');\n        afterFormItems.forEach(formItem => {\n            try {\n                expect(formItem.value).toBe('');\n            } catch {\n                throw new Error(`${formItem.id} IS THROWING THE ERROR`);\n            }\n        });\n    });\n\n    it('testing errors render', () => {\n        const moduleProps = {\n            ...buildMockModuleProps({}, mockActions, mockConfig) as IBusinessSignUpProps<IBusinessSignUpConfig>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: BusinesSignUpView\n        } as IBusinessSignUpProps<IBusinessSignUpConfig>;\n\n        const wrapper = mount(<BusinessSignUp {...moduleProps}/>);\n        const component = wrapper.instance() as BusinessSignUp;\n        component.setState({\n            hasSubmitErrors: true\n        });\n\n        // @ts-ignore\n        const formComponent = component._renderForm();\n        expect(formComponent.errorMessage[0]).not.toBeFalsy();\n    });\n});"]}