/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { ControlledDrawer, getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { IDrawerState } from '@msdyn365-commerce-modules/utilities/dist/types/drawer/Drawer';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { createAccordionStateInput } from '../../data-actions/accordion-state-data-action';
import { interactionStyle } from '../accordion/accordion.props.autogenerated';
import { IAccordionItemData } from './accordion-item.data';
import {IAccordionItemProps } from './accordion-item.props.autogenerated';

export interface IAccordionItemViewProps {
    AccordionItemContainer: IModuleProps;
    drawer: INodeProps;
    accordionSlots: INodeProps;
    AccordionItemContent: INodeProps;
    className: string;
}

export interface IAccordionItemExtentedProps extends IAccordionItemProps<IAccordionItemData> {
    interactionStyle?: interactionStyle;
}

/**
 *
 * AccordionItem component
 * @extends {React.Component<IAccordionItemExtentedProps>}
 */
@observer
class AccordionItem extends React.Component<IAccordionItemExtentedProps> {

    private moduleClassName: string = 'ms-accordion-item';
    private telemetryContent?: ITelemetryContent;

    constructor(props: IAccordionItemProps<IAccordionItemData>) {
        super(props);
        this._onToggle = this._onToggle.bind(this);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public render(): JSX.Element {
        const {slots, renderView, config, data } = this.props;
        const accordionExpandedStateResult = data && data.accordionExpandedState && data.accordionExpandedState.result;
        const expanded = accordionExpandedStateResult && accordionExpandedStateResult.isAllExpanded === undefined ?
        data && config.isExpandedOnInitialLoad :
        (accordionExpandedStateResult && accordionExpandedStateResult.isAllExpanded);
        const viewProps = {
            ... this.props,
            AccordionItemContainer: {
                moduleProps: this.props,
                className:  classnames(this.moduleClassName, config.className)
            },
            AccordionItemContent: {
                className: 'ms-accordion-item-content',
            },
            drawer:{
                tag: ControlledDrawer,
                className: `${this.moduleClassName}__drawer`,
                toggleButtonText: (config.accordionItemTitle && config.accordionItemTitle) || '',
                collapseProps: {isOpen: expanded},
                onToggle: this._onToggle,
                onTextChange: this.handleHeadingChange,
                requestContext: this.props.context.request,
                telemetryContent: this.telemetryContent
            },
            accordionSlots: slots,
        };
        return renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.accordionItemTitle = event.target.value;

    private _onToggle(state: IDrawerState): void {
        if(!state.isOpen && this.props.interactionStyle === interactionStyle.ExpandOneItemOnly) {
            const accordionState = { isAllExpanded: false };
            this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
        }
    }

}
export default AccordionItem;