/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps} from '@msdyn365-commerce/core';
/// <reference types="jest" />

// tslint:disable-next-line:no-unused-variable
import { mount, render } from 'enzyme';
import * as React from 'react';
import { IAccordionExpandedState } from '../../../data-actions/accordion-state';
import { interactionStyle } from '../../accordion/accordion.props.autogenerated';
import AccordionItem, { IAccordionItemExtentedProps } from '../accordion-item';
import { IAccordionItemData } from '../accordion-item.data';
import {
  IAccordionItemConfig
} from '../accordion-item.props.autogenerated';
import AccordionItemView from '../accordion-item.view';

const mockData: IAccordionItemData = {
  accordionExpandedState: wrapInResolvedAsyncResult({ isAllExpanded: false } as IAccordionExpandedState)
};

const mockDataWithExpandedTrue: IAccordionItemData = {
  accordionExpandedState: wrapInResolvedAsyncResult({ isAllExpanded: true } as IAccordionExpandedState)
};

const mockConfig: IAccordionItemConfig = {
  accordionItemTitle: 'Accordion Item Title',
  isExpandedOnInitialLoad: false,
  className: ''
};

const mockConfig1: IAccordionItemConfig = {
  accordionItemTitle: '',
  isExpandedOnInitialLoad: true,
  className: 'ms-accordion-item-content'
};

const myReactNodeChild1: React.ReactNode = 'whatever child module 1';
const slots = {
  accordionItemContent: [myReactNodeChild1]
        };

const mockActions = {};

describe('AccordionItem', () => {
  it('renders correctly', () => {
    let moduleProps: IAccordionItemExtentedProps;
    moduleProps = {
      slots: slots,
       ...buildMockModuleProps(mockData, mockActions, mockConfig) as IAccordionItemExtentedProps,
       // @ts-ignore
       renderView: AccordionItemView
    };
    moduleProps.interactionStyle = interactionStyle.ExpandOneItemOnly;
    const component = render(<AccordionItem {...moduleProps} />);
    expect(component).toMatchSnapshot();
  });
});

describe('AccordionItemWithourDataAction', () => {
  it('renders correctly', () => {
    let moduleProps: IAccordionItemExtentedProps;
    moduleProps = {
      slots: slots,
       ...buildMockModuleProps(mockActions, mockConfig1) as IAccordionItemExtentedProps,
       // @ts-ignore
       renderView: AccordionItemView
    };
    moduleProps.interactionStyle = interactionStyle.Independent;
    const component = render(<AccordionItem {...moduleProps} />);
    expect(component).toMatchSnapshot();
  });
});

describe('AccordionItemWithExapnded', () => {
  let moduleProps: IAccordionItemExtentedProps;

  it('renders correctly', () => {
    moduleProps = {
      slots: slots,
       ...buildMockModuleProps(mockDataWithExpandedTrue, mockActions, mockConfig1) as IAccordionItemExtentedProps,
       // @ts-ignore
       renderView: AccordionItemView
    };
    moduleProps.interactionStyle = interactionStyle.Independent;
    const component = render(<AccordionItem {...moduleProps} />);
    expect(component).toMatchSnapshot();
  });
});

describe('AccordionItem on Toggle click check', () => {
  let moduleProps: IAccordionItemExtentedProps;
  beforeAll(() => {
    moduleProps = {
      slots: slots,
       ...buildMockModuleProps(mockData, mockActions, mockConfig) as IAccordionItemExtentedProps,
      // @ts-ignore
      renderView: AccordionItemView
    };
  });
  it('renders correctly', () => {
    moduleProps.interactionStyle = interactionStyle.Independent;
    const wrapper = mount((<AccordionItem {...moduleProps} />));
    const buttons = wrapper.find('button');
    expect(buttons.length).toBe(1);
    const toggle = buttons.first();
    toggle.simulate('click');

    wrapper.unmount();
  });
});