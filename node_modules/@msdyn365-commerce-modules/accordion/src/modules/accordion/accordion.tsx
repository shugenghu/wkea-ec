/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getPayloadObject, getTelemetryAttributes, getTelemetryObject, IModuleProps, INodeProps, IPayLoad, ITelemetryContent, NodeTag, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { createAccordionStateInput } from '../../data-actions/accordion-state-data-action';
import { IAccordionData } from './accordion.data';
import { IAccordionProps } from './accordion.props.autogenerated';

/**
 *
 * Accordion component
 * @extends {React.PureComponent<IAccordionProps<IAccordionData>>}
 */

export interface ICallToActionProps {
  link: INodeProps[];
}

export interface IAccordionViewProps extends IAccordionProps<{}> {
  heading?: React.ReactNode;
  AccordionContainer: IModuleProps;
  HeaderSection: INodeProps;
  HeadingWrapper: INodeProps;
  accordianButtonsContainer: INodeProps;
  accordionButtons: React.ReactNode;
  accordionItemContainer: INodeProps;
  accordionItems: React.ReactNode;
}

/**
 *
 * Accordion component
 * @extends {React.Component<IAccordionProps<IAccordionData>>}
 */
@observer
class Accordion extends React.Component<IAccordionProps<IAccordionData>> {

  private telemetryContent?: ITelemetryContent;
  private payLoad: IPayLoad;

  constructor(props: IAccordionProps<IAccordionData>) {
    super(props);
    this._onExpandAll = this._onExpandAll.bind(this);
    this._onCollapseAll = this._onCollapseAll.bind(this);
    this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    this.payLoad = getPayloadObject('click', this.telemetryContent, '');
  }
  public render(): JSX.Element {

    const { slots } = this.props;
    const { heading, className } = this.props.config;
    const headingComponent = heading && heading.text && (
      <Msdyn365.Text
        className='ms-accordion-header-section__heading'
        tag={heading.tag || 'h1'}
        text={heading.text}
        editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}
      />
    );

    const accordionViewProps = {
      ...this.props,
      AccordionContainer: {
        moduleProps: this.props,
        className: classnames('ms-accordion', className)
      },
      HeaderSection: { className: 'ms-accordion-header-section' },
      HeadingWrapper: { className: 'ms-accordion-header-section-container' },
      heading: headingComponent,
      config: this.props && this.props.config,
      accordianButtonsContainer: {
        tag: 'div' as NodeTag,
        className: 'ms-accordion-header-section-toggle-button-container',
      },
      accordionButtons: this._renderAccordionButton(),
      accordionItemContainer: {
        tag: 'div' as NodeTag,
        className: 'ms-accordion-item-section',
      },
      accordionItems: slots && slots.accordionItems && slots.accordionItems.length > 0 && slots.accordionItems.map((item: React.ReactNode, index: number) => this._getAccordionItem(item, index))
    };
    return this.props.renderView(accordionViewProps) as React.ReactElement;
  }

  public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;

  private _renderAccordionButton(): React.ReactNode | null {
    const { config, resources } = this.props;
    this.payLoad.contentAction.etext = TelemetryConstant.ExpandAll;
    const attributeExpandAll = getTelemetryAttributes(this.telemetryContent!, this.payLoad);
    this.payLoad.contentAction.etext = TelemetryConstant.CollapseAll;
    const attributeCollapseAll = getTelemetryAttributes(this.telemetryContent!, this.payLoad);
    if (!config.showToggleAll) {
      this.props.context.telemetry.error('Accordian button content is empty, module wont render');
      return null;
    }
    return (
      <>
        <button className='ms-accordion_ExpandAll' onClick={this._onExpandAll} {...attributeExpandAll}>
          {resources.expandAllText}
        </button>
        &nbsp;{ resources.toggleAllSeparator}&nbsp;
        <button className='ms-accordion_CollapseAll' onClick={this._onCollapseAll} {...attributeCollapseAll}>
          {resources.collapseAllText}
        </button>
      </>
    );
  }

  private _onExpandAll(): void {
    const accordionState = { isAllExpanded: true };
    this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
  }

  private _onCollapseAll(): void {
    const accordionState = { isAllExpanded: false };
    this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
  }

  private _getAccordionItem(item: React.ReactNode, index: number): React.ReactNode {
    return (
      <React.Fragment key={index}>
        {React.cloneElement(item as React.ReactElement, { interactionStyle: this.props.config.interactionStyle })}
      </React.Fragment>
    );
  }

}

export default Accordion;
