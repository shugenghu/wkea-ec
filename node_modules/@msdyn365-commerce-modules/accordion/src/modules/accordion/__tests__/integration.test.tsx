import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps} from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import { IAccordionExpandedState } from '../../../data-actions/accordion-state';
import Accordion from '../accordion';
import { IAccordionData } from '../accordion.data';
import {
    HeadingTag,
    IAccordionConfig,
    IAccordionProps,
    IAccordionResources,
    interactionStyle
} from '../accordion.props.autogenerated';
import accordionView from '../accordion.view';

const mockAccordionData: IAccordionData = {
    accordionExpandedState: wrapInResolvedAsyncResult({
        isAllExpanded: true
    } as IAccordionExpandedState)
};

const mockConfigWithFlipper: IAccordionConfig = {
    heading: {
        text: 'Mock heading 1',
        tag: HeadingTag.h1
        },
    showToggleAll: true,
    interactionStyle: interactionStyle.Independent,
    className: 'accordion'
};

// const myReactNodeChild1: React.ReactNode = 'whatever child module 1';
// const myReactNodeChild2: React.ReactNode = 'whatever child module 2';
// const slots = {
//                 accordionItems: [myReactNodeChild1, myReactNodeChild2]
//             };

const mockConfig2: IAccordionConfig = {
    heading: {
        text: 'Mock heading 1',
        tag: HeadingTag.h1
        },
    showToggleAll: false,
    interactionStyle: interactionStyle.ExpandOneItemOnly,
    className: 'accordion'
};

const mockResource: IAccordionResources = {
    collapseAllText: 'close all',
    expandAllText: 'open all',
    toggleAllSeparator: '|'
};

const mockActions = {};

describe('Accordion integration tests', () => {
  it('renders correctly', ()=> {
        const moduleProps: IAccordionProps<IAccordionData> = {
            // slots: slots,
        ...buildMockModuleProps(mockAccordionData, mockActions, mockConfigWithFlipper) as IAccordionProps<IAccordionData>, resources: mockResource,
            // @ts-ignore
            renderView: accordionView
        };

        const component = render(<Accordion {...moduleProps}/>);
        expect(component).toMatchSnapshot();
  });

  it('renders correctly with showToggleAll set to false', ()=> {
        const moduleProps: IAccordionProps<IAccordionData> = {
        ...buildMockModuleProps(mockAccordionData, mockActions, mockConfig2) as IAccordionProps<IAccordionData>, resources: mockResource,
            // @ts-ignore
            renderView: accordionView
        };

        const component = render(<Accordion {...moduleProps}/>);
        expect(component).toMatchSnapshot();
    });

  it('should fire exapand & collapse events', ()=> {
        const moduleProps: IAccordionProps<IAccordionData> = {
        // slots: slots,
        ...buildMockModuleProps(mockAccordionData, mockActions, mockConfigWithFlipper) as IAccordionProps<IAccordionData>,
         resources: mockResource,
            // @ts-ignore
         renderView: accordionView
        };

        const wrapper = mount((<Accordion {...moduleProps}/>));
        const buttons = wrapper.find('button');
        expect(buttons.length).toBe(2);
        const collapseAll = buttons.first();
        const expandAll = buttons.last();

        expandAll.simulate('click');
        collapseAll.simulate('click');

        wrapper.unmount();
    });
});