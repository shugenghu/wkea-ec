import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import AccordionItem from '../accordion-item';
import AccordionItemView from '../accordion-item.view';
const mockData = {
    accordionExpandedState: wrapInResolvedAsyncResult({ isAllExpanded: false })
};
const mockDataWithExpandedTrue = {
    accordionExpandedState: wrapInResolvedAsyncResult({ isAllExpanded: true })
};
const mockConfig = {
    accordionItemTitle: 'Accordion Item Title',
    isExpandedOnInitialLoad: false,
    className: ''
};
const mockConfig1 = {
    accordionItemTitle: '',
    isExpandedOnInitialLoad: true,
    className: 'ms-accordion-item-content'
};
const myReactNodeChild1 = 'whatever child module 1';
const slots = {
    accordionItemContent: [myReactNodeChild1]
};
const mockActions = {};
describe('AccordionItem', () => {
    it('renders correctly', () => {
        let moduleProps;
        moduleProps = {
            slots: slots,
            ...buildMockModuleProps(mockData, mockActions, mockConfig),
            renderView: AccordionItemView
        };
        moduleProps.interactionStyle = "ExpandOneItemOnly";
        const component = render(React.createElement(AccordionItem, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('AccordionItemWithourDataAction', () => {
    it('renders correctly', () => {
        let moduleProps;
        moduleProps = {
            slots: slots,
            ...buildMockModuleProps(mockActions, mockConfig1),
            renderView: AccordionItemView
        };
        moduleProps.interactionStyle = "Independent";
        const component = render(React.createElement(AccordionItem, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('AccordionItemWithExapnded', () => {
    let moduleProps;
    it('renders correctly', () => {
        moduleProps = {
            slots: slots,
            ...buildMockModuleProps(mockDataWithExpandedTrue, mockActions, mockConfig1),
            renderView: AccordionItemView
        };
        moduleProps.interactionStyle = "Independent";
        const component = render(React.createElement(AccordionItem, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('AccordionItem on Toggle click check', () => {
    let moduleProps;
    beforeAll(() => {
        moduleProps = {
            slots: slots,
            ...buildMockModuleProps(mockData, mockActions, mockConfig),
            renderView: AccordionItemView
        };
    });
    it('renders correctly', () => {
        moduleProps.interactionStyle = "Independent";
        const wrapper = mount((React.createElement(AccordionItem, Object.assign({}, moduleProps))));
        const buttons = wrapper.find('button');
        expect(buttons.length).toBe(1);
        const toggle = buttons.first();
        toggle.simulate('click');
        wrapper.unmount();
    });
});
//# sourceMappingURL=integration.test.js.map