import { __decorate } from "tslib";
import { ControlledDrawer, getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { createAccordionStateInput } from '../../data-actions/accordion-state-data-action';
let AccordionItem = class AccordionItem extends React.Component {
    constructor(props) {
        super(props);
        this.moduleClassName = 'ms-accordion-item';
        this.handleHeadingChange = (event) => this.props.config.accordionItemTitle = event.target.value;
        this._onToggle = this._onToggle.bind(this);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    render() {
        const { slots, renderView, config, data } = this.props;
        const accordionExpandedStateResult = data && data.accordionExpandedState && data.accordionExpandedState.result;
        const expanded = accordionExpandedStateResult && accordionExpandedStateResult.isAllExpanded === undefined ?
            data && config.isExpandedOnInitialLoad :
            (accordionExpandedStateResult && accordionExpandedStateResult.isAllExpanded);
        const viewProps = {
            ...this.props,
            AccordionItemContainer: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            AccordionItemContent: {
                className: 'ms-accordion-item-content',
            },
            drawer: {
                tag: ControlledDrawer,
                className: `${this.moduleClassName}__drawer`,
                toggleButtonText: (config.accordionItemTitle && config.accordionItemTitle) || '',
                collapseProps: { isOpen: expanded },
                onToggle: this._onToggle,
                onTextChange: this.handleHeadingChange,
                requestContext: this.props.context.request,
                telemetryContent: this.telemetryContent
            },
            accordionSlots: slots,
        };
        return renderView(viewProps);
    }
    _onToggle(state) {
        if (!state.isOpen && this.props.interactionStyle === "ExpandOneItemOnly") {
            const accordionState = { isAllExpanded: false };
            this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
        }
    }
};
AccordionItem = __decorate([
    observer
], AccordionItem);
export default AccordionItem;
//# sourceMappingURL=accordion-item.js.map