{"version":3,"file":"accordion.js","sourceRoot":"./src/","sources":["modules/accordion/accordion.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getPayloadObject, getTelemetryAttributes, getTelemetryObject, IModuleProps, INodeProps, IPayLoad, ITelemetryContent, NodeTag, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport classnames from 'classnames';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\nimport { createAccordionStateInput } from '../../data-actions/accordion-state-data-action';\nimport { IAccordionData } from './accordion.data';\nimport { IAccordionProps } from './accordion.props.autogenerated';\n\n/**\n *\n * Accordion component\n * @extends {React.PureComponent<IAccordionProps<IAccordionData>>}\n */\n\nexport interface ICallToActionProps {\n  link: INodeProps[];\n}\n\nexport interface IAccordionViewProps extends IAccordionProps<{}> {\n  heading?: React.ReactNode;\n  AccordionContainer: IModuleProps;\n  HeaderSection: INodeProps;\n  HeadingWrapper: INodeProps;\n  accordianButtonsContainer: INodeProps;\n  accordionButtons: React.ReactNode;\n  accordionItemContainer: INodeProps;\n  accordionItems: React.ReactNode;\n}\n\n/**\n *\n * Accordion component\n * @extends {React.Component<IAccordionProps<IAccordionData>>}\n */\n@observer\nclass Accordion extends React.Component<IAccordionProps<IAccordionData>> {\n\n  private telemetryContent?: ITelemetryContent;\n  private payLoad: IPayLoad;\n\n  constructor(props: IAccordionProps<IAccordionData>) {\n    super(props);\n    this._onExpandAll = this._onExpandAll.bind(this);\n    this._onCollapseAll = this._onCollapseAll.bind(this);\n    this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    this.payLoad = getPayloadObject('click', this.telemetryContent, '');\n  }\n  public render(): JSX.Element {\n\n    const { slots } = this.props;\n    const { heading, className } = this.props.config;\n    const headingComponent = heading && heading.text && (\n      <Msdyn365.Text\n        className='ms-accordion-header-section__heading'\n        tag={heading.tag || 'h1'}\n        text={heading.text}\n        editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}\n      />\n    );\n\n    const accordionViewProps = {\n      ...this.props,\n      AccordionContainer: {\n        moduleProps: this.props,\n        className: classnames('ms-accordion', className)\n      },\n      HeaderSection: { className: 'ms-accordion-header-section' },\n      HeadingWrapper: { className: 'ms-accordion-header-section-container' },\n      heading: headingComponent,\n      config: this.props && this.props.config,\n      accordianButtonsContainer: {\n        tag: 'div' as NodeTag,\n        className: 'ms-accordion-header-section-toggle-button-container',\n      },\n      accordionButtons: this._renderAccordionButton(),\n      accordionItemContainer: {\n        tag: 'div' as NodeTag,\n        className: 'ms-accordion-item-section',\n      },\n      accordionItems: slots && slots.accordionItems && slots.accordionItems.length > 0 && slots.accordionItems.map((item: React.ReactNode, index: number) => this._getAccordionItem(item, index))\n    };\n    return this.props.renderView(accordionViewProps) as React.ReactElement;\n  }\n\n  public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;\n\n  private _renderAccordionButton(): React.ReactNode | null {\n    const { config, resources } = this.props;\n    this.payLoad.contentAction.etext = TelemetryConstant.ExpandAll;\n    const attributeExpandAll = getTelemetryAttributes(this.telemetryContent!, this.payLoad);\n    this.payLoad.contentAction.etext = TelemetryConstant.CollapseAll;\n    const attributeCollapseAll = getTelemetryAttributes(this.telemetryContent!, this.payLoad);\n    if (!config.showToggleAll) {\n      this.props.context.telemetry.error('Accordian button content is empty, module wont render');\n      return null;\n    }\n    return (\n      <>\n        <button className='ms-accordion_ExpandAll' onClick={this._onExpandAll} {...attributeExpandAll}>\n          {resources.expandAllText}\n        </button>\n        &nbsp;{ resources.toggleAllSeparator}&nbsp;\n        <button className='ms-accordion_CollapseAll' onClick={this._onCollapseAll} {...attributeCollapseAll}>\n          {resources.collapseAllText}\n        </button>\n      </>\n    );\n  }\n\n  private _onExpandAll(): void {\n    const accordionState = { isAllExpanded: true };\n    this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);\n  }\n\n  private _onCollapseAll(): void {\n    const accordionState = { isAllExpanded: false };\n    this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);\n  }\n\n  private _getAccordionItem(item: React.ReactNode, index: number): React.ReactNode {\n    return (\n      <React.Fragment key={index}>\n        {React.cloneElement(item as React.ReactElement, { interactionStyle: this.props.config.interactionStyle })}\n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default Accordion;\n"]}