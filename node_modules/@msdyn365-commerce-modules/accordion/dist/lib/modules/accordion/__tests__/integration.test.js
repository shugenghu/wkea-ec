import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import Accordion from '../accordion';
import accordionView from '../accordion.view';
const mockAccordionData = {
    accordionExpandedState: wrapInResolvedAsyncResult({
        isAllExpanded: true
    })
};
const mockConfigWithFlipper = {
    heading: {
        text: 'Mock heading 1',
        tag: "h1"
    },
    showToggleAll: true,
    interactionStyle: "Independent",
    className: 'accordion'
};
const mockConfig2 = {
    heading: {
        text: 'Mock heading 1',
        tag: "h1"
    },
    showToggleAll: false,
    interactionStyle: "ExpandOneItemOnly",
    className: 'accordion'
};
const mockResource = {
    collapseAllText: 'close all',
    expandAllText: 'open all',
    toggleAllSeparator: '|'
};
const mockActions = {};
describe('Accordion integration tests', () => {
    it('renders correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockAccordionData, mockActions, mockConfigWithFlipper), resources: mockResource,
            renderView: accordionView
        };
        const component = render(React.createElement(Accordion, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with showToggleAll set to false', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockAccordionData, mockActions, mockConfig2), resources: mockResource,
            renderView: accordionView
        };
        const component = render(React.createElement(Accordion, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('should fire exapand & collapse events', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockAccordionData, mockActions, mockConfigWithFlipper),
            resources: mockResource,
            renderView: accordionView
        };
        const wrapper = mount((React.createElement(Accordion, Object.assign({}, moduleProps))));
        const buttons = wrapper.find('button');
        expect(buttons.length).toBe(2);
        const collapseAll = buttons.first();
        const expandAll = buttons.last();
        expandAll.simulate('click');
        collapseAll.simulate('click');
        wrapper.unmount();
    });
});
//# sourceMappingURL=integration.test.js.map