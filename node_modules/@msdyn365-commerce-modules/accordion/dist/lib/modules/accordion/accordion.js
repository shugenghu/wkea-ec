import { __decorate } from "tslib";
import { getPayloadObject, getTelemetryAttributes, getTelemetryObject, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { createAccordionStateInput } from '../../data-actions/accordion-state-data-action';
let Accordion = class Accordion extends React.Component {
    constructor(props) {
        super(props);
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this._onExpandAll = this._onExpandAll.bind(this);
        this._onCollapseAll = this._onCollapseAll.bind(this);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this.payLoad = getPayloadObject('click', this.telemetryContent, '');
    }
    render() {
        const { slots } = this.props;
        const { heading, className } = this.props.config;
        const headingComponent = heading && heading.text && (React.createElement(Msdyn365.Text, { className: 'ms-accordion-header-section__heading', tag: heading.tag || 'h1', text: heading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } }));
        const accordionViewProps = {
            ...this.props,
            AccordionContainer: {
                moduleProps: this.props,
                className: classnames('ms-accordion', className)
            },
            HeaderSection: { className: 'ms-accordion-header-section' },
            HeadingWrapper: { className: 'ms-accordion-header-section-container' },
            heading: headingComponent,
            config: this.props && this.props.config,
            accordianButtonsContainer: {
                tag: 'div',
                className: 'ms-accordion-header-section-toggle-button-container',
            },
            accordionButtons: this._renderAccordionButton(),
            accordionItemContainer: {
                tag: 'div',
                className: 'ms-accordion-item-section',
            },
            accordionItems: slots && slots.accordionItems && slots.accordionItems.length > 0 && slots.accordionItems.map((item, index) => this._getAccordionItem(item, index))
        };
        return this.props.renderView(accordionViewProps);
    }
    _renderAccordionButton() {
        const { config, resources } = this.props;
        this.payLoad.contentAction.etext = TelemetryConstant.ExpandAll;
        const attributeExpandAll = getTelemetryAttributes(this.telemetryContent, this.payLoad);
        this.payLoad.contentAction.etext = TelemetryConstant.CollapseAll;
        const attributeCollapseAll = getTelemetryAttributes(this.telemetryContent, this.payLoad);
        if (!config.showToggleAll) {
            this.props.context.telemetry.error('Accordian button content is empty, module wont render');
            return null;
        }
        return (React.createElement(React.Fragment, null,
            React.createElement("button", Object.assign({ className: 'ms-accordion_ExpandAll', onClick: this._onExpandAll }, attributeExpandAll), resources.expandAllText),
            "\u00A0",
            resources.toggleAllSeparator,
            "\u00A0",
            React.createElement("button", Object.assign({ className: 'ms-accordion_CollapseAll', onClick: this._onCollapseAll }, attributeCollapseAll), resources.collapseAllText)));
    }
    _onExpandAll() {
        const accordionState = { isAllExpanded: true };
        this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
    }
    _onCollapseAll() {
        const accordionState = { isAllExpanded: false };
        this.props.context.actionContext.update(createAccordionStateInput(accordionState), accordionState);
    }
    _getAccordionItem(item, index) {
        return (React.createElement(React.Fragment, { key: index }, React.cloneElement(item, { interactionStyle: this.props.config.interactionStyle })));
    }
};
Accordion = __decorate([
    observer
], Accordion);
export default Accordion;
//# sourceMappingURL=accordion.js.map