/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import classnames from 'classnames';
import { computed, observable, reaction, set } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { IModuleStateProps, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo } from '@msdyn365-commerce/retail-proxy';

import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemType } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import { AddressOperation, AddressType, IAddressResource, IAddressResponse } from '../../common/address-module.data';
import { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';
import { AddressSelect, IAddressSelectProps } from '../../common/components/address-select';
import { AddressShow, IAddressShowProps } from '../../common/components/address-show';
import { ICheckoutShippingAddressData } from './checkout-shipping-address.data';
import { ICheckoutShippingAddressProps } from './checkout-shipping-address.props.autogenerated';

export interface ICheckoutAddressProps extends ICheckoutShippingAddressProps<ICheckoutShippingAddressData>, IModuleStateProps { }

export interface ICheckoutShippingAddressViewState {
    isShowAddress: boolean;
    isShowAddresList: boolean;
    isShowAddOrUpdateAddress: boolean;
}

export interface ICheckoutShippingAddressViewProps extends ICheckoutAddressProps {
    className: string;
    currentOperation: AddressOperation;
    selectedAddress?: Address;
    addUpdateAddress: Address;
    addressListSelectedAddress: Address;
    countryRegionId: string;
    stateProvinceInfo?: StateProvinceInfo[];
    customerAddresses: Address[];
    validationError: object;
    addressActionResponse?: IAddressResponse;
    viewState: ICheckoutShippingAddressViewState;
    CheckoutShippingAddress: IModuleProps;
    isUpdating: boolean;
    hasError: boolean;
    showAddress: IAddressShowProps;
    showAddressSelect: IAddressSelectProps;
    showAddOrUpdateAddress: IAddressAddUpdateProps;
}

/**
 *
 * Address component
 * @extends {React.Component<ICheckoutShippingAddressProps<ICheckoutShippingAddressData>>}
 */
// @ts-ignore
@withModuleState
@observer
class CheckoutShippingAddress extends React.Component<ICheckoutAddressProps> {
    @observable private currentOperation: AddressOperation;
    @observable private selectedAddress?: Address;
    @observable private addUpdateAddress: Address;
    @observable private countryRegionId: string = 'USA';
    @observable private stateProvinceInfo?: StateProvinceInfo[];
    @observable private customerAddresses: Address[];
    @observable private validationError: object;
    @observable private addressActionResponse?: IAddressResponse;
    @observable private isUpdating?: boolean;
    @observable private hasError?: boolean;
    @observable private addressListSelectedAddress: Address = {};

    private addressCommon: AddressCommon;
    private addressFormat: AddressFormat;
    private countryRegions: CountryRegionInfo[];
    private addressPurposes: AddressPurpose[];
    private resources: IAddressResource;
    private defaultAddressType: number = 6; // Default to Home
    private telemetryContent?: ITelemetryContent;

    constructor(props: ICheckoutAddressProps) {
        super(props);
        const { context, data, resources, telemetry } = this.props;

        this.addUpdateAddress = {};
        this.resources = resources;
        this.currentOperation = AddressOperation.List;
        this.countryRegions = data.countryRegions.result || [];
        this.addressPurposes = data.addressPurposes.result || [];
        this.customerAddresses = data.address.result || [];
        this.stateProvinceInfo = data.countryStates.result || [];
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);
        this.validationError = {};
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public componentDidMount(): void {
        this.props.data.checkout.then(() => {
            this._setDefaultCountryRegionId();
            this._initModuleState();
        });

        reaction(
            () => this.countryRegionId,
            () => this._getStateProvinces()
        );

        reaction(
            () => this.currentOperation,
            () => {
                this._getStateProvinces();
            }
        );
    }

    public render(): JSX.Element | null {
        if (!this._canShip()) {
            return null;
        }

        const { renderView, config } = this.props;

        const viewProps = {
            ...this.props,
            currentOperation: this.currentOperation,
            selectedAddress: this.selectedAddress,
            addUpdateAddress: this.addUpdateAddress,
            addressListSelectedAddress: this.addressListSelectedAddress,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            customerAddresses: this.customerAddresses,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            isUpdating: this.isUpdating,
            hasError: this.hasError,
            className: config.className,
            viewState: {
                isShowAddress: this.currentOperation === AddressOperation.Show && this.selectedAddress,
                isShowAddresList: this.currentOperation === AddressOperation.List && this.customerAddresses.length > 0,
                isShowAddOrUpdateAddress:
                    this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update
            },
            CheckoutShippingAddress: {
                moduleProps: this.props,
                className: classnames('ms-checkout-shipping-address', config.className)
            },
            showAddress: this._renderShowAddress(),
            showAddressSelect: this._renderSelectAddress(),
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()
        };

        return renderView(viewProps) as React.ReactElement;
    }

    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {
        const addressFormat = this.currentOperation === AddressOperation.Add && this.addressCommon.isAuthenticatedFlow() ? this.addressFormat : this.addressFormat;
        return AddressAddUpdate({
            isUpdating: this.isUpdating,
            resources: this.resources,
            addressType: AddressType.Shipping,
            addressFormat: addressFormat.getAddressFormat(this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId),
            defaultCountryRegionId: this.countryRegionId,
            defaultAddressType: this.defaultAddressType,
            selectedAddress: this.addUpdateAddress,
            validationError: this.validationError,
            hasError: this.hasError,
            addressActionResponse: this.addressActionResponse,
            telemetryContent: this.telemetryContent,
            dropdownDisplayData: addressFormat.getPrefilledAddressDropdownData(
                this.resources.addressStateDefaultSelectionText,
                this.stateProvinceInfo
            ),
            onInputChange: this._onAddressAddUpdateInputChange,
            onDropdownChange: this._onAddressAddUpdateDropdownChange,
            hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,
            onSave: this.onSubmit,
            // tslint:disable-next-line: no-empty
            onCancel: !this.selectedAddress && !this.addressCommon.isAuthenticatedFlow() ? () => { } : this._resetView
        });
    };

    private _renderSelectAddress = (): IAddressSelectProps => {
        return AddressSelect({
            addressFormat: this.addressFormat,
            addresses: this.customerAddresses,
            resources: this.resources,
            addressPurposes: this.addressPurposes,
            selectedAddress: this.addressListSelectedAddress,
            onAddressOptionChange: this._onAddressOptionChange,
            hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,
            telemetryContent: this.telemetryContent,
            onAddAddress: this._goToAddAddress,
            onSave: this._onSelectAddress,
            // tslint:disable-next-line: no-empty
            onCancel: !this.selectedAddress ? () => { } : this._resetView
        });
    };

    private _renderShowAddress(): IAddressShowProps | null {
        if (this.selectedAddress) {
            return AddressShow({
                address: this.selectedAddress,
                addressFormat: this.addressFormat.getAddressFormat(this.selectedAddress.ThreeLetterISORegionName || ''),
                addressPurposes: this.addressPurposes
            });
        }

        return null;
    }

    private _onAddressOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const addressRecordId = event.currentTarget.value;
        const selectedAddress = this.customerAddresses.find(address => (address.RecordId || '').toString() === addressRecordId);
        if (selectedAddress) {
            this.addressListSelectedAddress = selectedAddress;
        }
    };

    private onAddressAddUpdate = (name: string, value: string | boolean) => {
        set(this.addUpdateAddress, { [name]: value });
        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);
    };

    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        if (event.target.type === 'checkbox') {
            this.onAddressAddUpdate(event.target.name, event.target.checked);
        } else {
            const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
            this.onAddressAddUpdate(event.target.name, value);
        }
    };

    private _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {
        this.onAddressAddUpdate(event.target.name, event.target.value);

        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
            this._onCountryChange(event.target.value);
        }
    };

    private _onAddressAddUpdateSubmit = (): void => {
        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
            return;
        }

        let response: Promise<IAddressResponse>;
        if (this.addressCommon.isAuthenticatedFlow()) {
            response =
                this.currentOperation === AddressOperation.Update
                    ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress)
                    : this.addressCommon.addCustomerAddress(this.addUpdateAddress);
        } else {
            response = Promise.resolve({ address: this.addUpdateAddress });
        }

        this.isUpdating = true;
        this._updateModuleState();

        response.then(
            (result: IAddressResponse) => {
                this.isUpdating = false;

                if (result.address) {
                    this.hasError = false;
                    this._onAddOrUpdateSuccess(result);
                } else {
                    this.hasError = true;
                    this.addressActionResponse = result;
                    this._updateModuleState();
                }
            },
            () => {
                this.hasError = true;
                this.isUpdating = false;
                this._updateModuleState();
            }
        );
    };

    private _onCountryChange = (countryRegionId: string) => {
        this.countryRegionId = countryRegionId;
        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });
    };

    private _getAddressFormatExcludeList = (): AddressItemType[] => {
        const { config } = this.props;
        const addressFormatExcludeList: AddressItemType[] = [];

        if (!config.showAddressType) {
            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);
        }

        addressFormatExcludeList.push(AddressItemType.IsPrimary);

        return addressFormatExcludeList;
    }

    private _getStateProvinces = (): void => {
        if (
            !this.countryRegionId ||
            !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)
        ) {
            return;
        }

        // tslint:disable-next-line:no-floating-promises
        this.addressCommon.getStateProvinces(this.countryRegionId).then((result: StateProvinceInfo[]) => {
            const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);
            // Reset state if selected state not found in the list.
            if (!stateInfo) {
                set(this.addUpdateAddress, { ['State']: '' });
            }

            this.stateProvinceInfo = result;
        });
    };

    private _setDefaultCountryRegionId(): void {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;

        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);
    }

    private _getDefaultAddress = (): Address | undefined => {
        if (this.customerAddresses) {
            const primaryAddress = this.customerAddresses.find((address: Address) => address.IsPrimary);
            return primaryAddress || (this.customerAddresses.length > 0 ? this.customerAddresses[0] : undefined);
        }
        return undefined;
    };

    private _initModuleState = (): void => {
        this.props.moduleState.init({
            status: this._canShip() ? 'updating' : 'disabled',
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onSubmit: this.onSubmit
        });

        if (this._canShip()) {
            const defaultAddress = this._getShippingAddressFromCartLines() || this._getDefaultAddress();
            if (defaultAddress) {
                this._updateCurrentOperation(AddressOperation.Show, defaultAddress);
                this._setShippingAddress(defaultAddress);
                this._updateModuleState();
            } else {
                this._updateCurrentOperation(AddressOperation.Add);
            }
        }
    };

    private onSubmit = (): void => {
        switch (this.currentOperation) {
            case AddressOperation.Add:
            case AddressOperation.Update:
                this._onAddressAddUpdateSubmit();
                break;
            case AddressOperation.List:
                this._onSelectAddress();
                break;
            default:
                this.props.telemetry.error('Invalid operation');
        }
    };

    private onCancel = (): void => {
        switch (this.currentOperation) {
            case AddressOperation.Add:
            case AddressOperation.Update:
                if (!(!this.selectedAddress && !this.addressCommon.isAuthenticatedFlow())) {
                    this._resetView();
                }

                break;
            case AddressOperation.List:
                if (this.selectedAddress) {
                    this._resetView();
                }
                break;
            default:
                this.props.telemetry.error('Invalid operation');
        }
    };

    private onEdit = (): void => {
        if (this.addressCommon.isAuthenticatedFlow() && this.shippingAddress) {
            this._updateCurrentOperation(AddressOperation.List, this.shippingAddress);
        } else if (this.shippingAddress) {
            this._updateCurrentOperation(AddressOperation.Update, this.shippingAddress);
        }

        this._updateModuleState();
    };

    private _getShippingAddressFromCartLines = (): Address | undefined => {
        const { request } = this.props.context;
        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;

        const cartLines = ((this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart.CartLines) || []).filter(
            cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine
        );

        if (cartLines && cartLines.length > 0) {
            return cartLines[0].ShippingAddress;
        }

        return undefined;
    };

    private _canShip = (): boolean => {
        const { checkout } = this.props.data;
        const { request } = this.props.context;
        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;
        if (!checkout.result || !request.channel || checkout.result.checkoutCart.isEmpty) {
            return false;
        }
        // @ts-ignore: Type-checker not realizing above request.channel check
        return checkout.result.checkoutCart.cart.CartLines.some(cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine);
    };

    private _onSelectAddress = () => {
        this._updateCurrentOperation(AddressOperation.Show, this.addressListSelectedAddress);
        this._setShippingAddress(this.addressListSelectedAddress);
        this._updateModuleState();
    };

    private _goToAddAddress = () => {
        this._setDefaultCountryRegionId();
        this._updateCurrentOperation(AddressOperation.Add);
    };

    private _onAddOrUpdateSuccess = (response: IAddressResponse) => {
        if (response.customerAddresses) {
            this.customerAddresses = response.customerAddresses;
        }

        if (response.address) {
            this._updateCurrentOperation(AddressOperation.Show, response.address);
            this._setShippingAddress(response.address);
            this._updateModuleState();
        }
    };

    private _setShippingAddress = (address: Address): void => {
        if (this.props.data.checkout.result) {
            const newShippingAddress = { ...address };

            if (address.ThreeLetterISORegionName && !newShippingAddress.TwoLetterISORegionName) {
                newShippingAddress.TwoLetterISORegionName = this.addressFormat.getTwoLetterISORegionName(address.ThreeLetterISORegionName);
            }

            // tslint:disable-next-line:no-floating-promises
            this.props.data.checkout.result.updateShippingAddress({ newShippingAddress });
        }
    };

    @computed get shippingAddress(): Address | undefined {
        return this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress;
    }

    private _resetView = (): void => {
        switch (this.currentOperation) {
            case AddressOperation.Add:
            case AddressOperation.Update:
                this._updateCurrentOperation(
                    this.addressCommon.isAuthenticatedFlow() ? AddressOperation.List : AddressOperation.Show,
                    this.shippingAddress
                );
                break;
            default:
                this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);
        }
        this._updateModuleState();
    };

    private _updateCurrentOperation = (operation: AddressOperation, selectedAddress?: Address) => {
        this.currentOperation = operation;
        this.selectedAddress = selectedAddress;

        if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {
            this.addUpdateAddress = { ...this.selectedAddress } || {};
            set(this.addUpdateAddress, {
                ['ThreeLetterISORegionName']: this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId
            });
            set(this.addUpdateAddress, {
                ['AddressTypeValue']: this.addUpdateAddress.AddressTypeValue || this.defaultAddressType
            });
        } else if (this.currentOperation === AddressOperation.List) {
            this.addressListSelectedAddress = { ...this.selectedAddress } || {};
        }
    };

    private _updateModuleState = () => {
        if (this.currentOperation === AddressOperation.Show) {
            this.props.moduleState.onReady();
        } else if (this.isUpdating) {
            this.props.moduleState.onPending();
        } else {
            this.props.moduleState.onUpdating();
        }
    };
}

export default CheckoutShippingAddress;
