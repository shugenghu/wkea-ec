/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as React from 'react';

import { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo } from '@msdyn365-commerce/retail-proxy';
import classnames from 'classnames';
import { observable, set } from 'mobx';
import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemDisplayType, AddressItemType, AddressValidationRuleType, IAddressItem } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import { AddressOperation, AddressType, IAddressResource, IAddressResponse } from '../../common/address-module.data';
import { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';
import { IBusinessAccountAddressData } from './business-account-address.data';
import { IBusinessAccountAddressProps } from './business-account-address.props.autogenerated';

export interface IBusinessAccountAddressExtendedProps extends IBusinessAccountAddressProps<IBusinessAccountAddressData> {
    hasError: boolean;
    isRequired: boolean;
    resetAddress: boolean;
    updateForm(errors: boolean, currentAddress?: Address): void;
}

export interface IBusinessAccountAddressState {
    countryId?: string;
    states?: StateProvinceInfo[];
}

export interface IBusinessAccountAddressViewProps {
    className: string;
    currentOperation: AddressOperation;
    selectedAddress?: Address;
    addUpdateAddress: Address;
    addressListSelectedAddress: Address;
    countryRegionId: string;
    stateProvinceInfo?: StateProvinceInfo[];
    customerAddresses: Address[];
    validationError: object;
    addressActionResponse?: IAddressResponse;
    BusinessAccountAddress: IModuleProps;
    isUpdating: boolean;
    hasError: boolean;
    showAddOrUpdateAddress: IAddressAddUpdateProps;
}

/**
 *
 * Address component
 * @extends {React.Component<IBusinessAccountAddressProps<IBusinessAccountAddressData>, IBusinessAccountAddressState>}
 */
class BusinessAccountAddress extends React.Component<IBusinessAccountAddressExtendedProps, IBusinessAccountAddressState> {
    @observable private addUpdateAddress: Address;
    @observable private countryRegionId: string = 'USA';
    @observable private stateProvinceInfo?: StateProvinceInfo[];
    @observable private validationError: object;

    private addressActionResponse?: IAddressResponse;
    private isUpdating?: boolean;
    private addressCommon: AddressCommon;
    private addressFormat: AddressFormat;
    private countryRegions: CountryRegionInfo[];
    private addressPurposes: AddressPurpose[];
    private resources: IAddressResource;
    private defaultAddressType: number = 8; // Default to Business
    private excludedList: AddressItemType[] = [AddressItemType.Name, AddressItemType.AddressTypeValue, AddressItemType.IsPrimary]; // Default to hiding Name and AddressType inputs
    private telemetryContent: ITelemetryContent;

    constructor(props: IBusinessAccountAddressExtendedProps) {
        super(props);

        const { context, data, resources, telemetry } = this.props;
        this.addUpdateAddress = {};
        this.resources = resources;
        this.countryRegions = data.countryRegions.result || [];
        this.addressPurposes = data.addressPurposes.result || [];
        this.stateProvinceInfo = data.countryStates.result || [];
        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, props.isRequired ? undefined : []), this.addressPurposes);
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.validationError = {};
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public componentDidMount(): void {
        this._setDefaultCountryRegionId();
    }

    public render(): JSX.Element | null {
        const { renderView, config, hasError, resetAddress } = this.props;

        // business-sign-up will pass this flag when cancel button is clicked
        if (resetAddress) {
            this._resetAddressFields();
        }

        const viewProps = {
            ...this.props,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            hasError: hasError,
            className: config.className,
            BusinessAccountAddress: {
                moduleProps: this.props,
                className: classnames('ms-business-account-address', config.className)
            },
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()
        };

        return renderView(viewProps) as React.ReactElement;
    }

    public _resetAddressFields = () => {
        const addressFormat = this.addressFormat.getAddressFormat(this.countryRegionId);

        addressFormat.map(addressFormatItem => {
            switch (addressFormatItem.displayType) {
                case AddressItemDisplayType.Input:
                    this.addUpdateAddress[addressFormatItem.name] = '';
                    break;
                case AddressItemDisplayType.Checkbox:
                    this.addUpdateAddress[addressFormatItem.name] = false;
                    break;
                default:
                    switch(addressFormatItem.type) {
                        case AddressItemType.ThreeLetterISORegionName:
                            this.addUpdateAddress[addressFormatItem.name] = this.countryRegionId;
                            break;
                        case AddressItemType.AddressTypeValue:
                            this.addUpdateAddress[addressFormatItem.name] = this.defaultAddressType;
                            break;
                        case AddressItemType.State:
                            this.addUpdateAddress[addressFormatItem.name] = '';
                            break;
                        default:
                            this.addUpdateAddress[addressFormatItem.name] = undefined;
                    }
            }
        });
    }

    // set validationError and hasError to hide error messages since in the B2B
    // request form, no errors would visually show since user wont be able to submit
    // until form is filled and correct
    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {
        return AddressAddUpdate({
            isUpdating: this.isUpdating,
            resources: this.resources,
            addressType: AddressType.Company,
            addressFormat: this.addressFormat.getAddressFormat(this.countryRegionId),
            defaultCountryRegionId: this.countryRegionId,
            defaultAddressType: this.defaultAddressType,
            selectedAddress: this.addUpdateAddress,
            validationError: this.validationError,
            hasError: this.props.hasError,
            addressActionResponse: this.addressActionResponse,
            telemetryContent: this.telemetryContent,
            dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(
                this.resources.addressStateDefaultSelectionText,
                this.stateProvinceInfo
            ),
            onInputChange: this._onAddressAddUpdateInputChange,
            onDropdownChange: this._onAddressAddUpdateDropdownChange
        });
    };
    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        this._updateAddress(event.target.name, event.target.value);
    };

    private _onAddressAddUpdateDropdownChange = async (event: React.ChangeEvent<HTMLSelectElement>): Promise<void> => {
        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
            await this._updateCountryRegionId(event.target.value);
        } else {
            this._updateAddress(event.target.name, event.target.value);
        }
    };

    private _updateAddress = (name: string, value: string | number) => {
        const { updateForm, isRequired, resources } = this.props;
        let cleanValue = value;
        if (typeof(value) === 'string') {
            cleanValue = (value || '').replace(new RegExp('[<>]', 'gi'), '');
        }
        set(this.addUpdateAddress, { [name]: cleanValue });

        if (this._isEmpty()) {
            if (isRequired) {
                updateForm(true, undefined);
            } else {
                // reset addressFormat as if address was NOT a required field
                this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, []), this.addressPurposes);
                updateForm(false, this.addUpdateAddress);
            }
        } else {
            // get new addressFormat as if address was a required field
            this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, undefined), this.addressPurposes);
            // verify with new rules
            if (this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
                updateForm(false, this.addUpdateAddress);
            } else {
                updateForm(true, undefined);
            }
        }
    };

    // walk through array and check if valued is defined or value is not an empty string
    private _isEmpty = () => {
        const addressFormat = this.addressFormat.getAddressFormat(this.countryRegionId);
        for (let i = 0; i < addressFormat.length; i ++) {
            const addressFormatItem = addressFormat[i];
            if (addressFormatItem.type !== AddressItemType.ThreeLetterISORegionName || this._isInputRequired(addressFormatItem)) {
                const addressItemValue = this.addUpdateAddress[addressFormatItem.name];

                // check each input field, if value is defined and not an empty string --> address is not empty
                if (addressItemValue || (addressItemValue && addressItemValue !== '')) {
                    return false;
                }
            }
        }

        return true;
    }

    private _isInputRequired = (addressFormatItem: IAddressItem): boolean => {
        if (addressFormatItem === null || !addressFormatItem.validationRules || addressFormatItem.validationRules.length === 0) {
            return false;
        }

        for (const validationRule of addressFormatItem.validationRules) {
            if (validationRule.type === AddressValidationRuleType.Required) {
                return false;
            }
        }

        return true;
    }

    private _setDefaultCountryRegionId(): void {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;

        // tslint:disable: no-floating-promises
        this._updateCountryRegionId(this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market));

        // set default AddressType
        set(this.addUpdateAddress, { AddressTypeValue: this.defaultAddressType });
    }

    private _updateCountryRegionId = async (value: string) => {
        this.countryRegionId = value;

        await this.addressCommon.getStateProvinces(this.countryRegionId).then((result: StateProvinceInfo[]) => {
            const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);
            // Reset state if selected state not found in the list.
            if (!stateInfo) {
                this._updateAddress('State', '');
            }

            this.stateProvinceInfo = result;
        });

        this._updateAddress('ThreeLetterISORegionName', this.countryRegionId);
    }
}

export default BusinessAccountAddress;
