
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import classnames from 'classnames';
import { observable, reaction, set } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import {
    Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo
} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';

import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemType } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import {
    AddressOperation, AddressType, IAddressResource, IAddressResponse
} from '../../common/address-module.data';
import { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';
import { AddressList, IAddressListProps } from '../../common/components/address-list';
import { IAccountManagementAddressData } from './account-management-address.data';
import { IAccountManagementAddressProps } from './account-management-address.props.autogenerated';

export interface IAccountManagementAddressViewState {
    isShowAddresList: boolean;
    isShowAddOrUpdateAddress: boolean;
}

export interface IAccountManagementAddressViewProps extends React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>> {
    className: string;
    currentOperation: AddressOperation;
    selectedAddress?: Address;
    addUpdateAddress: Address;
    countryRegionId: string;
    stateProvinceInfo?: StateProvinceInfo[];
    customerAddresses: Address[];
    validationError: object;
    addressActionResponse?: IAddressResponse;
    viewState: IAccountManagementAddressViewState;
    AccountAddressManagement: IModuleProps;
    isUpdating: boolean;
    showAddressList: IAddressListProps;
    showAddOrUpdateAddress: IAddressAddUpdateProps;
}

/**
 *
 * Address component
 * @extends {React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>>}
 */
@observer
class AccountManagementAddress extends React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>> {
    @observable private currentOperation: AddressOperation;
    @observable private selectedAddress?: Address;
    @observable private countryRegionId: string = 'USA';
    @observable private stateProvinceInfo?: StateProvinceInfo[];
    @observable private customerAddresses: Address[];
    @observable private addUpdateAddress: Address;
    @observable private validationError: object;
    @observable private addressActionResponse?: IAddressResponse;
    @observable private isUpdating?: boolean;
    @observable private hasError?: boolean;

    private addressCommon: AddressCommon;
    private addressFormat: AddressFormat;
    private countryRegions: CountryRegionInfo[];
    private addressPurposes: AddressPurpose[];
    private resources: IAddressResource;
    private defaultAddressType: number = 6; // Default to Home
    private telemetryContent: ITelemetryContent;

    constructor(props: IAccountManagementAddressProps<IAccountManagementAddressData>) {
        super(props);
        const { context, data, resources, telemetry } = this.props;

        this.resources = resources;
        this.currentOperation = AddressOperation.List;
        this.countryRegions = data.countryRegions.result || [];
        this.addressPurposes = data.addressPurposes.result || [];
        this.customerAddresses = data.address.result || [];
        this.addUpdateAddress = {};
        this.validationError = {};
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public componentDidMount(): void {
        this.props.data.countryRegions.then(() => {
            this._setDefaultCountryRegionId();
        });

        reaction(
            () => this.countryRegionId,
            () => this._getStateProvinces()
        );

        reaction(
            () => this.currentOperation,
            () => {
                this._getStateProvinces();
            }
        );
    }

    public render(): JSX.Element {
        const { renderView, config } = this.props;

        const viewProps = {
            ...this.props,
            currentOperation: this.currentOperation,
            selectedAddress: this.selectedAddress,
            addUpdateAddress: this.addUpdateAddress,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            customerAddresses: this.customerAddresses,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            isUpdating: this.isUpdating,
            hasError: this.hasError,
            className: config.className,
            viewState: {
                isShowAddresList: this.currentOperation === AddressOperation.List,
                isShowAddOrUpdateAddress: this.currentOperation !== AddressOperation.List,
            },
            AccountAddressManagement: {
                moduleProps: this.props,
                className: classnames('ms-account-management-address', config.className)
            },
            showAddressList: this._renderListAddress(),
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()
        };

        return renderView(viewProps) as React.ReactElement;
    }

    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {
        return AddressAddUpdate(
            {
                isUpdating: this.isUpdating,
                resources: this.resources,
                addressType: AddressType.Shipping,
                addressFormat: this.addressFormat.getAddressFormat((this.addUpdateAddress.ThreeLetterISORegionName) || this.countryRegionId),
                defaultCountryRegionId: this.countryRegionId,
                defaultAddressType: this.defaultAddressType,
                selectedAddress: this.addUpdateAddress,
                validationError: this.validationError,
                addressActionResponse: this.addressActionResponse,
                dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),
                telemetryContent: this.telemetryContent,
                onInputChange: this._onAddressAddUpdateInputChange,
                onDropdownChange: this._onAddressAddUpdateDropdownChange,
                onSave: this._onAddressAddUpdateSubmit,
                onCancel: this._resetView
            }
        );
    }

    private _renderListAddress = (): IAddressListProps => {
        const { config } = this.props;

        return AddressList(
            {
                isUpdating: this.isUpdating,
                selectedAddress: this.selectedAddress,
                addressFormat: this.addressFormat,
                addresses: this.customerAddresses,
                addressPurposes: this.addressPurposes,
                resources: this.resources,
                heading: config.heading,
                primaryAddressSectionHeading: config.primaryAddressSectionHeading,
                otherAddressSectionHeading: config.otherAddressSectionHeading,
                contextRequest: this.props.context.request,
                telemetryContent: this.telemetryContent,
                onEditAddress: this._goToEditAddress,
                onRemoveAddress: this._onRemoveAddress,
                onAddAddress: this._goToAddAddress,
                onUpdatePrimaryAddress: this._onSubmitUpdatePrimaryAddress
            }
        );
    };

    private onAddressAddUpdate = (name: string, value: string | boolean | number) => {
        set(this.addUpdateAddress, { [name]: value });
        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);
    }

    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        if (event.target.type === 'checkbox') {
            this.onAddressAddUpdate(event.target.name, event.target.checked);
        } else {
            const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
            this.onAddressAddUpdate(event.target.name, value);
        }
    }

    private _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {
        if (event.target.name === AddressItemType[AddressItemType.AddressTypeValue]) {
            this.onAddressAddUpdate(event.target.name, +event.target.value);
        } else {
            this.onAddressAddUpdate(event.target.name, event.target.value);
        }
        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
            this._onCountryChange(event.target.value);
        }
    }

    private _onAddressUpdate = (response: Promise<IAddressResponse>, onSuccess: (response: IAddressResponse) => void): void => {

        this.isUpdating = true;
        response.then(
            (result: IAddressResponse) => {
                if (result.address) {
                    this.hasError = false;
                    onSuccess(result);
                } else {
                    this.hasError = true;
                    this.addressActionResponse = result;
                }
                this.isUpdating = false;
            },
            () => {
                this.hasError = true;
                this.isUpdating = false;
            }
        );
    }

    private _onAddressAddUpdateSubmit = (): void => {
        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
            return;
        }
        let response: Promise<IAddressResponse>;
        if (this.addressCommon.isAuthenticatedFlow()) {
            response = this.currentOperation === AddressOperation.Update ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress) : this.addressCommon.addCustomerAddress(this.addUpdateAddress);
        } else {
            response = Promise.resolve({ address: this.addUpdateAddress });
        }

        this._onAddressUpdate(response, this._onAddOrUpdateSuccess);
    }

    private _onCountryChange = (countryRegionId: string) => {
        this.countryRegionId = countryRegionId;
        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });
    }

    private _getAddressFormatExcludeList = (): AddressItemType[] => {
        const { config } = this.props;
        const addressFormatExcludeList: AddressItemType[] = [];

        if (!config.showAddressType) {
            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);
        }

        addressFormatExcludeList.push(AddressItemType.IsPrimary);

        return addressFormatExcludeList;
    }

    private _getStateProvinces = (): void => {
        if (!this.countryRegionId || !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)) {
            return;
        }

        // tslint:disable-next-line:no-floating-promises
        this.addressCommon.getStateProvinces(this.countryRegionId).then(
            (result: StateProvinceInfo[]) => {
                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);
                // Reset state if selected state not found in the list.
                if (!stateInfo) {
                    set(this.addUpdateAddress, { ['State']: '' });
                }
                this.stateProvinceInfo = result;
            });
    }

    private _setDefaultCountryRegionId(): void {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;

        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);
    }

    private _updateCurrentOperation = (operation: AddressOperation) => {
        this.currentOperation = operation;
    }

    private _onSubmitUpdatePrimaryAddress = (address: Address): void => {
        this.selectedAddress = address;
        const response = this.addressCommon.updateCustomerPrimaryAddress(address);
        this._onAddressUpdate(response, this._onUpdatePrimaryAddressSuccess);
    }

    private _goToEditAddress = (address: Address): void => {
        this.addUpdateAddress = { ...address };
        this.countryRegionId = this.addUpdateAddress.ThreeLetterISORegionName || 'USA';
        this._updateCurrentOperation(AddressOperation.Update);
    }

    private _onRemoveAddress = (address: Address): void => {
        address.Deactivate = true;
        const response = this.addressCommon.updateCustomerAddress(address);
        this._onAddressUpdate(response, this._onAddOrUpdateSuccess);
    }

    private _goToAddAddress = (): void => {
        this.addUpdateAddress = {};
        this._setDefaultCountryRegionId();
        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: this.countryRegionId });
        set(this.addUpdateAddress, { ['AddressTypeValue']: this.defaultAddressType });
        this._setDefaultCountryRegionId();
        this._updateCurrentOperation(AddressOperation.Add);
    }

    private _onAddOrUpdateSuccess = (response: IAddressResponse): void => {
        if (response.customerAddresses) {
            this.customerAddresses = response.customerAddresses;
        }
        this._resetView();
    }

    private _onUpdatePrimaryAddressSuccess = (response: IAddressResponse): void => {
        if (response.customerAddresses) {
            this.customerAddresses = response.customerAddresses;
        }
    }

    private _resetView = (): void => {
        this.selectedAddress = undefined;
        this._updateCurrentOperation(AddressOperation.List);
    }
}

export default AccountManagementAddress;