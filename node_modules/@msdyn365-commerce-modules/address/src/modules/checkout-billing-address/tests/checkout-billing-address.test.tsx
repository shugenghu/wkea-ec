/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as React from 'react';
import * as renderer from 'react-test-renderer';

import {
  buildHydratedMockActionContext, buildMockModuleProps, ICultureInfoFormatter, IRequestContext
} from '@msdyn365-commerce/core';
import { ICheckoutState } from '@msdyn365-commerce/global-state';
import {
  AddressPurpose, AsyncResult, CountryRegionInfo, StateProvinceInfo
} from '@msdyn365-commerce/retail-proxy';
// @ts-ignore: Import is used below, but not recognized by compiler
import {
  getCountryRegionsByLanguageIdAsync
} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';

import MockTelemetry from '../../../common/__mocks__/MockTelemetry';
import CheckoutBillingAddress, { IProps } from '../checkout-billing-address';
import { ICheckoutBillingAddressData } from '../checkout-billing-address.data';
import { ICheckoutBillingAddressResources } from '../checkout-billing-address.props.autogenerated';

const mockData: ICheckoutBillingAddressData = {
  // @ts-ignore only mock partial data
  checkout: AsyncResult.resolve({
    checkoutCart: {
      cart: {
        Id: '123',
        CartLines: [
          {
            DeliveryMode: '60'
          }
        ]
      }
    }
  }) as AsyncResult<ICheckoutState>,
  countryRegions: AsyncResult.resolve([] as CountryRegionInfo[]),
  countryStates: AsyncResult.resolve([] as StateProvinceInfo[]),
  addressPurposes: AsyncResult.resolve([] as AddressPurpose[]),
};

const mockConfig = {};

const mockResources: ICheckoutBillingAddressResources = {
  addressBillingAddressHeading: 'Billing address',
  addressSameAsShippingAddressAriaLabel: 'Same as shipping address',
  addressSameAsShippingAddressText: 'Same as shipping address',
  addressAddButtonText: 'Add address',
  addressAddButtonAriaLabel: 'Add address',
  addressPrimaryButtonText: 'Set as primary address',
  addressPrimaryButtonAriaLabel: 'Set {addressName} address as your primary address',
  addressEditButtonText: 'Edit',
  addressEditButtonAriaLabel: 'Edit {addressName} address',
  addressRemoveButtonText: 'Remove',
  addressRemoveButtonAriaLabel: 'Remove {addressName} address',
  addressSaveButtonText: 'Save',
  addressSaveButtonAriaLabel: 'Save',
  addressCancelButtonText: 'Cancel',
  addressCancelButtonAriaLabel: 'Cancel',
  addressStateDefaultSelectionText: 'Select state',
  addressNameLabel: 'Name',
  addressNameRequiredErrorMessage: 'Name is required',
  addressPhoneLabel: 'Phone',
  addressPhoneRequiredErrorMessage: 'Phone is required',
  addressZipCodeLabel: 'Zip code',
  addressZipCodeRequiredErrorMessage: 'Zip code is required',
  addressCityLabel: 'City',
  addressCityRequiredErrorMessage: 'City is required',
  addressCountyLabel: 'County',
  addressCountyRequiredErrorMessage: 'County is required',
  addressStateLabel: 'State',
  addressStateRequiredErrorMessage: 'State is required',
  addressThreeLetterISORegionNameLabel: 'Country',
  addressThreeLetterISORegionNameRequiredErrorMessage: 'Country is required',
  addressStreetLabel: 'Street',
  addressStreetRequiredErrorMessage: 'Street is required',
  addressDistrictLabel: 'District',
  addressDistrictRequiredErrorMessage: 'District is required',
  addressStreetNumberLabel: 'Street number',
  addressStreetNumberRequiredErrorMessage: 'Street number is required',
  addressBuildingComplimentLabel: 'Building compliment',
  addressBuildingComplimentRequiredErrorMessage: 'Building compliment is required',
  addressPostboxLabel: 'Post box',
  addressPostboxRequiredErrorMessage: 'Post box is required',
  addressHouseRULabel: 'House',
  addressHouseRURequiredErrorMessage: 'House is required',
  addressFlatRULabel: 'Flat',
  addressFlatRURequiredErrorMessage: 'Flat is required',
  addressCountryOKSMCodeRULabel: 'Countryoksmcode',
  addressCountryOKSMCodeRURequiredErrorMessage: 'Countryoksmcode field is required',
  addressErrorMessageTitle: 'Error message',
  addressGenericErrorMessage: 'Something went wrong. Please try again later',
  addressEmptyListAddressMessage: 'No addresses are present. Please add one.',
  addressAddressTypeValueLabel: 'Address type'
};

const mockActions = {};

describe('CheckoutBillingAddress', () => {
  let moduleProps: IProps;
  beforeAll(() => {
    const mockContext = {
      actionContext: buildHydratedMockActionContext(),
      app: {},
      telemetry: new MockTelemetry(),
      request: {
        url: {
          staticCdnUrl: 'testOriginUrl'
        },
        channel: {
          PickupDeliveryModeCode: '70',
          ChannelCountryRegionISOCode: 'US'
        }
      } as IRequestContext,
      cultureFormatter: {} as ICultureInfoFormatter
    };
    moduleProps = { ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as IProps, resources: mockResources };

    // @ts-ignore
    getCountryRegionsByLanguageIdAsync = jest.fn().mockImplementation((input, ctx) => {
      return new Promise((resolve, reject) => {
        resolve([]);
      });
    });
  });

  xit('renders correctly', () => {
    const component: renderer.ReactTestRenderer = renderer.create(
      <CheckoutBillingAddress {...moduleProps} />
    );
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
});
