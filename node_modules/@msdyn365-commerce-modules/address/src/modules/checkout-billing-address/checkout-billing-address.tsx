/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import classnames from 'classnames';
import { computed, observable, reaction, set } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { IModuleStateProps, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import {
    Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo
} from '@msdyn365-commerce/retail-proxy';

import { IGiftCardExtend } from '@msdyn365-commerce/global-state';
import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemType } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import {
    AddressOperation, AddressType, IAddressResource, IAddressResponse
} from '../../common/address-module.data';
import { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';
import AddressBillingCheckoxComponent from '../../common/components/address-billing-checkbox';
import AddressBillingHeadingComponent from '../../common/components/address-billing-heading';
import { AddressShow, IAddressShowProps } from '../../common/components/address-show';
import { ICheckoutBillingAddressData } from './checkout-billing-address.data';
import { ICheckoutBillingAddressProps } from './checkout-billing-address.props.autogenerated';

export interface IProps extends ICheckoutBillingAddressProps<ICheckoutBillingAddressData>, IModuleStateProps { }

export interface ICheckoutBillingAddressViewState {
    isShowAddress: boolean;
    isShowAddOrUpdateAddress: boolean;
    isShowSameAsShippingCheckbox: boolean;
}

export interface ICheckoutBillingAddressViewProps extends IProps {
    className: string;
    currentOperation: AddressOperation;
    selectedAddress?: Address;
    addUpdateAddress: Address;
    countryRegionId: string;
    stateProvinceInfo?: StateProvinceInfo[];
    validationError: object;
    addressActionResponse?: IAddressResponse;
    viewState: ICheckoutBillingAddressViewState;
    CheckoutBillingAddress: IModuleProps;
    sameAsShippingCheckbox: React.ReactNode;
    heading: React.ReactNode;
    showAddress: IAddressShowProps;
    showAddOrUpdateAddress: IAddressAddUpdateProps;
}

/**
 *
 * CheckoutBillingAddress component
 * @extends {React.PureComponent<ICheckoutBillingAddressProps<ICheckoutBillingAddressData>>}
 */
// @ts-ignore
@withModuleState
@observer
class CheckoutBillingAddress extends React.Component<IProps> {

    @observable private currentOperation: AddressOperation;
    @observable private isBillingAddressSameAsShipping: boolean;
    @observable private selectedAddress?: Address;
    @observable private addUpdateAddress: Address;
    @observable private countryRegionId: string = 'USA';
    @observable private stateProvinceInfo?: StateProvinceInfo[];
    @observable private validationError: object;
    @observable private addressActionResponse?: IAddressResponse;

    private addressCommon: AddressCommon;
    private addressFormat: AddressFormat;
    private countryRegions: CountryRegionInfo[];
    private addressPurposes: AddressPurpose[];
    private resources: IAddressResource;
    private defaultAddressType: number = 6; // Default to Home
    // private addRenderRef: React.RefObject<AddressAdd>;
    private telemetryContent?: ITelemetryContent;

    constructor(props: IProps) {
        super(props);
        const { context, data, resources, telemetry } = this.props;

        this.addUpdateAddress = {};
        this.validationError = {};
        this.isBillingAddressSameAsShipping = false;
        this.resources = resources;
        this.currentOperation = AddressOperation.List;
        this.addressPurposes = data.addressPurposes.result || [];
        this.countryRegions = data.countryRegions.result || [];
        this.stateProvinceInfo = data.countryStates.result || [];
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
        // this.addRenderRef = React.createRef();
    }

    public componentDidMount(): void {
        this.props.data.checkout.then(() => {
            this._setDefaultCountryRegionId();
            this._initModuleState();
        });

        reaction(
            () => this.countryRegionId,
            () => this._getStateProvinces()
        );

        reaction(
            () => this.currentOperation,
            () => {
                this._getStateProvinces();
            }
        );

        reaction(
            () => this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress,
            shippingAddress => {
                if (this.props.moduleState.isUpdating) {
                    if (shippingAddress && this.isBillingAddressSameAsShipping) {
                        this.isBillingAddressSameAsShipping = true;
                        this._updateCurrentOperation(AddressOperation.Show, shippingAddress);
                    } else if (shippingAddress && this.isBillingAddressSameAsShipping) {
                        this._updateCurrentOperation(AddressOperation.Show, shippingAddress);
                    }
                }
            }
        );

        reaction(
            () => this.isBillingAddressRequried,
            isBillingAddressRequried => {
                if (isBillingAddressRequried) {
                    if (this.props.moduleState.isDisabled) {
                        this.onEdit();
                    }
                } else {
                    // tslint:disable-next-line:no-floating-promises
                    this.props.data.checkout.result?.removeBillingAddress({});
                    this.props.moduleState.onDisable();
                }
            }
        );
    }

    public render(): JSX.Element | null {
        if (!(this.isBillingAddressRequried)) {
            return null;
        }

        const { resources } = this.props;

        const { renderView, config } = this.props;

        const viewProps = {
            ...this.props,
            currentOperation: this.currentOperation,
            selectedAddress: this.selectedAddress,
            addUpdateAddress: this.addUpdateAddress,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            className: config.className,
            viewState: {
                isShowAddress: this.selectedAddress && this.currentOperation === AddressOperation.Show,
                isShowAddOrUpdateAddress: this.currentOperation !== AddressOperation.Show,
                isShowSameAsShippingCheckbox: this.isCartContainsItemsForShipping && this.props.moduleState.isUpdating
            },
            CheckoutBillingAddress: {
                moduleProps: this.props,
                className: classnames('ms-checkout-billing-address', config.className)
            },
            heading: <AddressBillingHeadingComponent {...{ text: resources.addressBillingAddressHeading }} />,
            // tslint:disable-next-line: max-line-length
            sameAsShippingCheckbox: (
                <AddressBillingCheckoxComponent
                    {
                    ...{
                        isChecked: this.isBillingAddressSameAsShipping,
                        type: 'checkbox',
                        value: 'true',
                        ariaLabel: resources.addressSameAsShippingAddressAriaLabel,
                        text: resources.addressSameAsShippingAddressText,
                        telemetryContent: this.telemetryContent,
                        onChange:
                            this._onBillingAddressSameAsShippingChange
                    }
                    }
                />
            ),
            showAddress: this._renderShowAddress(),
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()
        };

        return renderView(viewProps) as React.ReactElement;
    }

    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {
        return AddressAddUpdate(
            {
                resources: this.resources,
                addressType: AddressType.Billing,
                addressFormat: this.addressFormat.getAddressFormat((this.addUpdateAddress.ThreeLetterISORegionName) || this.countryRegionId),
                defaultCountryRegionId: this.countryRegionId,
                defaultAddressType: this.defaultAddressType,
                selectedAddress: this.addUpdateAddress,
                validationError: this.validationError,
                addressActionResponse: this.addressActionResponse,
                dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),
                telemetryContent: this.telemetryContent,
                onInputChange: this._onAddressAddUpdateInputChange,
                onDropdownChange: this._onAddressAddUpdateDropdownChange,
                hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,
                onSave: this._onSubmitAddress,
                onCancel: this._resetView
            }
        );
    }

    private _renderShowAddress(): IAddressShowProps | null {
        if (this.selectedAddress) {
            return AddressShow({ address: this.selectedAddress, addressFormat: this.addressFormat.getAddressFormat(this.selectedAddress.ThreeLetterISORegionName || ''), addressPurposes: this.addressPurposes });
        }

        return null;
    }

    private _onCountryChange = (countryRegionId: string) => {
        this.countryRegionId = countryRegionId;
        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });
    }

    private _getAddressFormatExcludeList = (): AddressItemType[] => {
        const { config } = this.props;
        const addressFormatExcludeList: AddressItemType[] = [];

        if (!config.showAddressType) {
            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);
        }

        addressFormatExcludeList.push(AddressItemType.IsPrimary);

        return addressFormatExcludeList;
    }

    private onAddressAddUpdate = (name: string, value: string) => {
        set(this.addUpdateAddress, { [name]: value });
        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);
    }

    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
        this.onAddressAddUpdate(event.target.name, value);
    }

    private _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {
        this.onAddressAddUpdate(event.target.name, event.target.value);

        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
            this._onCountryChange(event.target.value);
        }
    }

    private _getStateProvinces = (): void => {
        if (!this.countryRegionId || !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)) {
            return;
        }

        // tslint:disable-next-line:no-floating-promises
        this.addressCommon.getStateProvinces(this.countryRegionId).then(
            (result: StateProvinceInfo[]) => {
                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);
                // Reset state if selected state not found in the list.
                if (!stateInfo) {
                    set(this.addUpdateAddress, { ['State']: '' });
                }
                this.stateProvinceInfo = result;
            });
    }

    private _initModuleState = (): void => {
        this.props.moduleState.init({
            status: this.isBillingAddressRequried ? 'updating' : 'disabled',
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onSubmit: this.onSubmit
        });

        const { billingAddress, isBillingAddressSameAsShippingAddress } = this.props.data.checkout.result || {};

        if (this.isBillingAddressRequried) {
            if (billingAddress) {
                this.isBillingAddressSameAsShipping = isBillingAddressSameAsShippingAddress || false;
                this._updateCurrentOperation(AddressOperation.Show, billingAddress);
                this._updateModuleState();
            } else if (this.isCartContainsItemsForShipping) {
                this.isBillingAddressSameAsShipping = true;
                this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);
            } else {
                this.isBillingAddressSameAsShipping = false;
                this._updateCurrentOperation(AddressOperation.Add);
            }
        }
    }

    private _setDefaultCountryRegionId(): void {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;

        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);
    }

    private _onBillingAddressSameAsShippingChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        this.isBillingAddressSameAsShipping = event.currentTarget.checked;

        if (this.isBillingAddressSameAsShipping && this.shippingAddress) {
            this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);
        } else {
            this._updateCurrentOperation(AddressOperation.Add, this.billingAddress);
        }
    }

    @computed get isCartContainsItemsForShipping(): boolean {
        const { request } = this.props.context;

        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;

        return ((this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart.CartLines) || []).some(
            cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine
        );
    }

    @computed get billingAddress(): Address | undefined {
        return this.props.data.checkout.result && this.props.data.checkout.result.billingAddress;
    }

    @computed get shippingAddress(): Address | undefined {
        return this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress;
    }

    @computed get getLoyaltyAmount(): number {
        const checkoutState = this.props.data.checkout.result;
        return checkoutState && checkoutState.loyaltyAmount ? checkoutState.loyaltyAmount : 0;
    }

    @computed get getGiftCardTotalAmount(): number {
        const checkoutState = this.props.data.checkout.result;
        if (!checkoutState || !checkoutState.giftCardExtends) {
            return 0;
        }
        return checkoutState.giftCardExtends.reduce(
            (count: number, giftCard: IGiftCardExtend) => {
                return count + (giftCard.Balance || 0);
            },
            0);
    }

    @computed get shouldPaidByCard(): boolean {
        const {
            data: {
                checkout
            },
            config
        } = this.props;
        if (!checkout.result) {
            return false;
        }

        const checkoutResult = checkout.result;
        const cart = checkoutResult.checkoutCart.cart;
        if (!cart || !cart.CartLines || !cart.CartLines.length) {
            return false;
        }

        const { paymentTenderType, tokenizedPaymentCard } = checkoutResult;
        const isPaidByOtherPaymentSource = config.paymenTenderType !== paymentTenderType && tokenizedPaymentCard;

        // Use payment card when it is not free or gift card balance + Loyalty amount can not cover the total amount
        const amountDue = (cart.TotalAmount || 0) - this.getGiftCardTotalAmount - this.getLoyaltyAmount;

        return amountDue > 0 && !isPaidByOtherPaymentSource;
    }

    @computed get isBillingAddressRequried(): boolean {
        return this.shouldPaidByCard;
    }

    private _onSubmitAddress = (): void => {
        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
            this.props.moduleState.setHasError(true);
            return;
        }

        this._setBillingAddress(this.addUpdateAddress);
        this._updateCurrentOperation(AddressOperation.Show, this.addUpdateAddress);
        this._updateModuleState();
    };

    private onSubmit = (): void => {
        switch (this.currentOperation) {
            case AddressOperation.Add:
            case AddressOperation.Update:
                this._onSubmitAddress();
                break;
            case AddressOperation.Show:
                if (this.selectedAddress) {
                    this._setBillingAddress(this.selectedAddress);
                    this._updateCurrentOperation(AddressOperation.Show, this.selectedAddress);
                    this._updateModuleState();
                }
                break;
            default:
                this.props.telemetry.error('Invalid operation');
        }
    };

    private onCancel = (): void => {
        switch (this.currentOperation) {
            case AddressOperation.Add:
            case AddressOperation.Update:
                this._resetView();
                break;
            case AddressOperation.Show:
                // @ts-ignore: Compiler not reconizing property form extending class
                this._resetView();
                break;
            default:
                this.props.telemetry.error('Invalid operation');
        }
    };

    private onEdit = (): void => {
        if (this.isBillingAddressSameAsShipping && this.shippingAddress && this.isCartContainsItemsForShipping) {
            this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);
        } else {
            this._updateCurrentOperation(AddressOperation.Add, this.billingAddress);
        }
        this.props.moduleState.onUpdating();
    }

    private _setBillingAddress = (address: Address): void => {
        if (this.props.data.checkout.result) {
            const newBillingAddress = { ...address };

            if (address.ThreeLetterISORegionName && !newBillingAddress.TwoLetterISORegionName) {
                newBillingAddress.TwoLetterISORegionName = this.addressFormat.getTwoLetterISORegionName(address.ThreeLetterISORegionName);
            }

            // tslint:disable-next-line:no-floating-promises
            this.props.data.checkout.result.updateBillingAddress({ newBillingAddress, additionalProperties: { isBillingAddressSameAsShippingAddress: this.isBillingAddressSameAsShipping } });
        }
    }

    private _resetView = () => {
        this._updateCurrentOperation(AddressOperation.Show, this.billingAddress);
        this._updateModuleState();
    }

    private _updateCurrentOperation = (operation: AddressOperation, selectedAddress?: Address) => {
        this.currentOperation = operation;
        this.selectedAddress = selectedAddress;

        if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {
            this.addUpdateAddress = { ...this.selectedAddress } || {};
            set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId });
            set(this.addUpdateAddress, { ['AddressTypeValue']: this.addUpdateAddress.AddressTypeValue || this.defaultAddressType });
        }
    }

    private _updateModuleState = () => {
        if (this.currentOperation === AddressOperation.Show) {
            this.props.moduleState.onReady();
        } else {
            this.props.moduleState.onUpdating();
        }
    }
}

export default CheckoutBillingAddress;