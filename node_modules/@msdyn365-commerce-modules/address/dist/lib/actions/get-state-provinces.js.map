{"version":3,"file":"get-state-provinces.js","sourceRoot":"./src/","sources":["actions/get-state-provinces.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,2CAA2C,CAAC;AAC1E,OAAO,EACQ,0BAA0B,EACxC,MAAM,yBAAyB,CAAC;AACjC,OAAO,EACH,sBAAsB,EACzB,MAAM,+EAA+E,CAAC;AAMvF,MAAM,OAAO,sBAAsB;IAI/B,YAAY,eAAuB,EAAE,WAAiC;QAK/D,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,IAAI,CAAC,eAAe,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACjG,uBAAkB,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC;QAC/C,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAN9C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,KAA6B,EAAE,GAAmB;IAC3F,OAAO,sBAAsB,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,eAAe,CAAC,CAAC;AAC1G,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,MAAM,EAAgC,sBAAsB;CAC/D,CAAC,CAAC","sourcesContent":["import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICommerceApiSettings\n} from '@msdyn365-commerce/core';\nimport {\n    getStateProvincesAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport { StateProvinceInfo } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\n/**\n * Input class for get state provinces data action\n */\nexport class GetStateProvincesInput implements IActionInput {\n    public countryRegionId: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(countryRegionId: string, apiSettings: ICommerceApiSettings) {\n        this.countryRegionId = countryRegionId;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`StateProvinceInfo-${this.countryRegionId}`, this.apiSettings);\n    public getCacheObjectType = () => 'StateProvinceInfo';\n    public dataCacheType = (): CacheType => 'request';\n}\n\nexport async function getStateProvinceAction(input: GetStateProvincesInput, ctx: IActionContext): Promise<StateProvinceInfo[]> {\n    return getStateProvincesAsync({ callerContext: ctx, queryResultSettings: {} }, input.countryRegionId);\n}\n\nexport default createObservableDataAction({\n    action: <IAction<StateProvinceInfo[]>>getStateProvinceAction\n});\n"]}