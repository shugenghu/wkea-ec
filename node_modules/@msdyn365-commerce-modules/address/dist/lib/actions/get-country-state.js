import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';
import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getCountryRegionsAction, GetCountryRegionsInput } from './get-country-regions';
import { getStateProvinceAction, GetStateProvincesInput } from './get-state-provinces';
export class GetCountryStateInput {
    constructor(locale, apiSettings) {
        this.getCacheKey = () => buildCacheKey(`CountryStateInfo-${this.locale}`, this.apiSettings);
        this.getCacheObjectType = () => 'StateProvinceInfo';
        this.dataCacheType = () => 'request';
        this.locale = locale;
        this.apiSettings = apiSettings;
    }
}
const createInput = (inputData) => {
    const { locale, apiSettings } = inputData.requestContext;
    if (!(inputData.requestContext && locale)) {
        throw new Error('Unable to create country regions input.  Locale is not provided.');
    }
    return new GetCountryStateInput(locale, apiSettings);
};
export async function getCountryStateAction(input, ctx) {
    const countryInput = new GetCountryRegionsInput(input.locale, input.apiSettings);
    const countryRegionsInfo = await getCountryRegionsAction(countryInput, ctx);
    const channelConfiguration = ctx.requestContext.channel;
    const marketISOCode = channelConfiguration && channelConfiguration.ChannelCountryRegionISOCode || 'US';
    const currentCountryRegion = countryRegionsInfo.find(countryRegion => (countryRegion.ISOCode || '') === marketISOCode);
    const countryRegionId = (currentCountryRegion && currentCountryRegion.CountryRegionId) || 'USA';
    const stateInput = new GetStateProvincesInput(countryRegionId, input.apiSettings);
    return getStateProvinceAction(stateInput, ctx);
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/address/get-country-state',
    action: getCountryStateAction,
    input: createInput
});
//# sourceMappingURL=get-country-state.js.map