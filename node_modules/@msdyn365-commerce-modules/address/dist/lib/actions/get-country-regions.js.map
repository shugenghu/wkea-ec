{"version":3,"file":"get-country-regions.js","sourceRoot":"./src/","sources":["actions/get-country-regions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,2CAA2C,CAAC;AAC1E,OAAO,EACQ,0BAA0B,EAExC,MAAM,yBAAyB,CAAC;AACjC,OAAO,EACH,kCAAkC,EACrC,MAAM,+EAA+E,CAAC;AAMvF,MAAM,OAAO,sBAAsB;IAI/B,YAAY,MAAc,EAAE,WAAiC;QAKtD,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACxF,uBAAkB,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC;QAC/C,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAN9C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAKD,MAAM,WAAW,GAAG,CAAC,SAA+C,EAA0B,EAAE;IAC5F,IAAI,CAAC,CAAC,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;QAChE,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;KACvF;IAED,OAAO,IAAI,sBAAsB,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC7G,CAAC,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,KAA6B,EAAE,GAAmB;IAC5F,OAAO,kCAAkC,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;AAC7G,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,MAAM,EAAgC,uBAAuB;IAC7D,KAAK,EAAE,WAAW;CACrB,CAAC,CAAC","sourcesContent":["import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny,\n    ICommerceApiSettings, ICreateActionContext, IGeneric\n} from '@msdyn365-commerce/core';\nimport {\n    getCountryRegionsByLanguageIdAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport { CountryRegionInfo } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\n/**\n * Input class for get country regions data action\n */\nexport class GetCountryRegionsInput implements IActionInput {\n    public locale: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(locale: string, apiSettings: ICommerceApiSettings) {\n        this.locale = locale;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`CountryRegionInfo-${this.locale}`, this.apiSettings);\n    public getCacheObjectType = () => 'CountryRegionInfo';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetCountryRegionsInput => {\n    if (!(inputData.requestContext && inputData.requestContext.locale)) {\n        throw new Error('Unable to create country regions input.  Locale is not provided.');\n    }\n\n    return new GetCountryRegionsInput(inputData.requestContext.locale, inputData.requestContext.apiSettings);\n};\n\nexport async function getCountryRegionsAction(input: GetCountryRegionsInput, ctx: IActionContext): Promise<CountryRegionInfo[]> {\n    return getCountryRegionsByLanguageIdAsync({ callerContext: ctx, queryResultSettings: {} }, input.locale);\n}\n\nexport default createObservableDataAction({\n    action: <IAction<CountryRegionInfo[]>>getCountryRegionsAction,\n    input: createInput\n});\n"]}