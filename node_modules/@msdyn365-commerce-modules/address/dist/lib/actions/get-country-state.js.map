{"version":3,"file":"get-country-state.js","sourceRoot":"./src/","sources":["actions/get-country-state.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,2CAA2C,CAAC;AAC1E,OAAO,EACQ,0BAA0B,EAExC,MAAM,yBAAyB,CAAC;AAKjC,OAAO,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,MAAM,uBAAuB,CAAC;AACxF,OAAO,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,MAAM,uBAAuB,CAAC;AAKvF,MAAM,OAAO,oBAAoB;IAI7B,YAAY,MAAc,EAAE,WAAiC;QAKtD,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,oBAAoB,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACvF,uBAAkB,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC;QAC/C,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAN9C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAKD,MAAM,WAAW,GAAG,CAAC,SAA+C,EAAwB,EAAE;IAC1F,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,SAAS,CAAC,cAAc,CAAC;IACzD,IAAI,CAAC,CAAC,SAAS,CAAC,cAAc,IAAI,MAAM,CAAC,EAAE;QACvC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;KACvF;IACD,OAAO,IAAI,oBAAoB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,KAA2B,EAAE,GAAmB;IACxF,MAAM,YAAY,GAAG,IAAI,sBAAsB,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;IACjF,MAAM,kBAAkB,GAAG,MAAM,uBAAuB,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IAE5E,MAAM,oBAAoB,GAAG,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC;IAExD,MAAM,aAAa,GAAG,oBAAoB,IAAI,oBAAoB,CAAC,2BAA2B,IAAI,IAAI,CAAC;IACvG,MAAM,oBAAoB,GAAG,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,OAAO,IAAI,EAAE,CAAC,KAAK,aAAa,CAAC,CAAC;IACvH,MAAM,eAAe,GAAG,CAAC,oBAAoB,IAAI,oBAAoB,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC;IAEhG,MAAM,UAAU,GAAG,IAAI,sBAAsB,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;IAClF,OAAO,sBAAsB,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACnD,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,sDAAsD;IAC1D,MAAM,EAAgC,qBAAqB;IAC3D,KAAK,EAAE,WAAW;CACrB,CAAC,CAAC","sourcesContent":["import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny,\n    ICommerceApiSettings, ICreateActionContext, IGeneric\n} from '@msdyn365-commerce/core';\nimport {\n    CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getCountryRegionsAction, GetCountryRegionsInput } from './get-country-regions';\nimport { getStateProvinceAction, GetStateProvincesInput } from './get-state-provinces';\n\n/**\n * Input class for get country regions data action\n */\nexport class GetCountryStateInput implements IActionInput {\n    public locale: string;\n    public apiSettings: ICommerceApiSettings;\n\n    constructor(locale: string, apiSettings: ICommerceApiSettings) {\n        this.locale = locale;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`CountryStateInfo-${this.locale}`, this.apiSettings);\n    public getCacheObjectType = () => 'StateProvinceInfo';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetCountryStateInput => {\n    const { locale, apiSettings } = inputData.requestContext;\n    if (!(inputData.requestContext && locale)) {\n        throw new Error('Unable to create country regions input.  Locale is not provided.');\n    }\n    return new GetCountryStateInput(locale, apiSettings);\n};\n\nexport async function getCountryStateAction(input: GetCountryStateInput, ctx: IActionContext): Promise<StateProvinceInfo[]> {\n    const countryInput = new GetCountryRegionsInput(input.locale, input.apiSettings);\n    const countryRegionsInfo = await getCountryRegionsAction(countryInput, ctx);\n\n    const channelConfiguration = ctx.requestContext.channel;\n\n    const marketISOCode = channelConfiguration && channelConfiguration.ChannelCountryRegionISOCode || 'US';\n    const currentCountryRegion = countryRegionsInfo.find(countryRegion => (countryRegion.ISOCode || '') === marketISOCode);\n    const countryRegionId = (currentCountryRegion && currentCountryRegion.CountryRegionId) || 'USA';\n\n    const stateInput = new GetStateProvincesInput(countryRegionId, input.apiSettings);\n    return getStateProvinceAction(stateInput, ctx);\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/address/get-country-state',\n    action: <IAction<CountryRegionInfo[]>>getCountryStateAction,\n    input: createInput\n});"]}