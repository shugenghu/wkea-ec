{"version":3,"file":"address-common.js","sourceRoot":"./src/","sources":["common/address-common.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    addAddress, AddressManagementInput, updateAddress, updatePrimaryAddress\n} from '@msdyn365-commerce-modules/retail-actions';\nimport { IActionInput, ICoreContext, IObservableAction, ITelemetry } from '@msdyn365-commerce/core';\nimport {\n    Address, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getStateProvinceAction, GetStateProvincesInput } from '../actions/get-state-provinces';\nimport { IAddressResource, IAddressResponse } from './address-module.data';\n\n/**\n *\n * Address common\n */\nexport class AddressCommon {\n\n    private context: ICoreContext;\n    private resources: IAddressResource;\n    private telemetry: ITelemetry;\n\n    constructor(context: ICoreContext, resources: IAddressResource, telemetry: ITelemetry) {\n        this.context = context;\n        this.resources = resources;\n        this.telemetry = telemetry;\n    }\n\n    public getDefaultCountryRegionId = (countryRegionId: string, countryRegions: CountryRegionInfo[], market?: string): string => {\n        const marketISOCode = market || 'US';\n        const currentCountryRegion = countryRegions.find(countryRegion => (countryRegion.ISOCode || '') === marketISOCode);\n        return (currentCountryRegion && currentCountryRegion.CountryRegionId) || countryRegionId;\n    }\n\n    public parseRetailException = (resources: IAddressResource): IAddressResponse => {\n        return {\n            errorTitle: resources.addressErrorMessageTitle,\n            errorMessage: resources.addressGenericErrorMessage\n        };\n    }\n\n    public isAuthenticatedFlow = (): boolean => {\n        return this.context.request.user.isAuthenticated;\n    }\n\n    public getStateProvinces = async (countryRegionId: string): Promise<StateProvinceInfo[]> => {\n        let response: StateProvinceInfo[] = [];\n        if (this.context && this.context.actionContext) {\n            try {\n                const input = new GetStateProvincesInput(countryRegionId, this.context.request.apiSettings);\n                response = await getStateProvinceAction(input, this.context.actionContext);\n            } catch (error) {\n                if (this.telemetry) {\n                    this.telemetry.error(`Error encountered ${error}`);\n                    this.telemetry.debug('Unable to get state provinces');\n                }\n            }\n        }\n        return Promise.resolve(response);\n    }\n\n    public addCustomerAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(addAddress, address);\n    };\n\n    public updateCustomerAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(updateAddress, address);\n    };\n\n    public updateCustomerPrimaryAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(updatePrimaryAddress, address);\n    };\n\n    private submitCustomerAddress = (addressAction: IObservableAction<Address[]>, address: Address): Promise<IAddressResponse> => {\n        address.AddressTypeValue = address.AddressTypeValue || 7; // 7 sets it to HOME by default\n\n        const input = new AddressManagementInput(address);\n        return this.execAddressAction(addressAction, input, address);\n    };\n\n    private execAddressAction = async (addressAction: IObservableAction<Address[]>, input: IActionInput | IActionInput[], address: Address): Promise<IAddressResponse> => {\n        let response: IAddressResponse = {};\n\n        if (this.context && this.context.actionContext) {\n            try {\n                const addresses = await addressAction(input, this.context.actionContext);\n                if (addresses.length > 0) {\n                    response.address = address.RecordId ? address : addresses[addresses.length - 1];\n                }\n                response.customerAddresses = addresses;\n            } catch (error) {\n                if (this.telemetry) {\n                    this.telemetry.error(`Error encountered ${error}`);\n                    this.telemetry.debug('Unable to exec address action');\n                }\n                response = this.parseRetailException(this.resources);\n            }\n        }\n        return Promise.resolve(response);\n    };\n}\n"]}