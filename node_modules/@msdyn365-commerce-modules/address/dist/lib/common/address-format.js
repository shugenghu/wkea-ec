import { get, set } from 'mobx';
import { AddressItemType } from './address-format.data';
export class AddressFormat {
    constructor(countryRegionsInfo, addressMetaData, addressPurposes) {
        this.getPrefilledAddressDropdownData = (stateDefaultSelectionText, stateProvinceInfo) => {
            const defaultStateText = {
                key: '',
                value: stateDefaultSelectionText
            };
            const dropdownData = {};
            dropdownData[AddressItemType[AddressItemType.ThreeLetterISORegionName]] = this.getCountryFormat();
            dropdownData[AddressItemType[AddressItemType.State]] = this.getStateFormat(stateProvinceInfo);
            dropdownData[AddressItemType[AddressItemType.State]].unshift(defaultStateText);
            dropdownData[AddressItemType[AddressItemType.AddressTypeValue]] = this.getAddressTypeFormat();
            return dropdownData;
        };
        this.getTwoLetterISORegionName = (countryRegionId) => {
            const countryRegionInfo = this._getCountryRegionInfo(countryRegionId);
            return countryRegionInfo.ISOCode;
        };
        this.validateAddressFormat = (address, validationError, countryRegionId, propertyName) => {
            let isValid = true;
            let validationtor;
            const addressFormat = this.getAddressFormat((address.ThreeLetterISORegionName) || countryRegionId);
            addressFormat.forEach(addressFormatItem => {
                if (!propertyName || (propertyName && addressFormatItem.name === propertyName)) {
                    validationtor = this._inputValidation(addressFormatItem, validationError, address);
                    if (validationtor !== undefined) {
                        isValid = validationtor;
                    }
                }
            });
            return isValid;
        };
        this._validateRegEx = (address, propertyName, validationRule) => {
            if (validationRule.regEx && validationRule.regEx.length > 0) {
                const regex = new RegExp(validationRule.regEx);
                return regex.test(get(address, propertyName) || '');
            }
            return true;
        };
        this.countryRegionsInfo = countryRegionsInfo;
        this.addressMetaData = addressMetaData;
        this.addressPurposes = addressPurposes;
    }
    getAddressFormat(countryRegionId) {
        const countryRegionInfo = this._getCountryRegionInfo(countryRegionId);
        if (countryRegionInfo) {
            return this._getAddressDisplayFormat(countryRegionInfo);
        }
        return [];
    }
    getCountryFormat() {
        return (this.countryRegionsInfo || []).map(countryRegion => {
            return {
                key: countryRegion.CountryRegionId,
                value: countryRegion.ShortName
            };
        });
    }
    getStateFormat(stateProvinceInfo) {
        return (stateProvinceInfo || []).map(state => {
            return {
                key: state.StateId,
                value: state.StateName
            };
        });
    }
    getAddressTypeFormat() {
        return (this.addressPurposes || []).map(addressPurpose => {
            return {
                key: addressPurpose.AddressType,
                value: addressPurpose.Name
            };
        });
    }
    _inputValidation(addressFormatItem, validationError, address) {
        set(validationError, { [addressFormatItem.name]: null });
        for (const validationRule of (addressFormatItem.validationRules || [])) {
            if (!this._validateRegEx(address, addressFormatItem.name, validationRule)) {
                set(validationError, { [addressFormatItem.name]: validationRule.message });
                return false;
            }
        }
        return undefined;
    }
    _getCountryRegionInfo(countryRegionId) {
        return (this.countryRegionsInfo || []).find(countryRegion => {
            return ((countryRegion.CountryRegionId || '').toLowerCase() === countryRegionId.toLowerCase());
        });
    }
    _getAddressDisplayFormat(countryRegionInfo) {
        const addressDisplayItem = [];
        if (countryRegionInfo && countryRegionInfo.AddressFormatLines) {
            const AddressTypeItem = this._extendAddressDisplayFormat(AddressItemType.AddressTypeValue, true);
            if (AddressTypeItem) {
                addressDisplayItem.push(AddressTypeItem);
            }
            const nameDisplayItem = this._extendAddressDisplayFormat(AddressItemType.Name, true);
            if (nameDisplayItem) {
                addressDisplayItem.push(nameDisplayItem);
            }
            countryRegionInfo.AddressFormatLines.forEach(formatLine => {
                if (formatLine.AddressComponentNameValue) {
                    const addressItem = this.addressMetaData.getItemFormat(formatLine.AddressComponentNameValue);
                    if (addressItem) {
                        addressItem.isNewLine = formatLine.NewLine || false;
                        addressDisplayItem.push(addressItem);
                    }
                }
            });
            const phoneDisplayItem = this._extendAddressDisplayFormat(AddressItemType.Phone, false);
            if (phoneDisplayItem) {
                addressDisplayItem.push(phoneDisplayItem);
            }
            const isPrimaryDisplayItem = this._extendAddressDisplayFormat(AddressItemType.IsPrimary, false);
            if (isPrimaryDisplayItem) {
                addressDisplayItem.push(isPrimaryDisplayItem);
            }
        }
        return addressDisplayItem;
    }
    _extendAddressDisplayFormat(type, isNewLine) {
        const addressItem = this.addressMetaData.getItemFormat(type);
        if (addressItem) {
            addressItem.isNewLine = isNewLine;
        }
        return addressItem;
    }
}
//# sourceMappingURL=address-format.js.map