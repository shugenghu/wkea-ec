{"version":3,"file":"address-format.js","sourceRoot":"./src/","sources":["common/address-format.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,MAAM,CAAC;AAMhC,OAAO,EACH,eAAe,EAClB,MAAM,uBAAuB,CAAC;AAO/B,MAAM,OAAO,aAAa;IAKtB,YAAY,kBAAuC,EAAE,eAAgC,EAAE,eAAiC;QAyCjH,oCAA+B,GAAG,CAAC,yBAAiC,EAAE,iBAAuC,EAAyB,EAAE;YAC3I,MAAM,gBAAgB,GAAG;gBACrB,GAAG,EAAE,EAAE;gBACP,KAAK,EAAE,yBAAyB;aACnC,CAAC;YACF,MAAM,YAAY,GAA0B,EAAE,CAAC;YAE/C,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,wBAAwB,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAClG,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAC9F,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAC/E,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAE9F,OAAO,YAAY,CAAC;QACxB,CAAC,CAAA;QAEM,8BAAyB,GAAG,CAAC,eAAuB,EAAsB,EAAE;YAC/E,MAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;YAEtE,OAAO,iBAAkB,CAAC,OAAO,CAAC;QACtC,CAAC,CAAA;QAEM,0BAAqB,GAAG,CAAC,OAAgB,EAAE,eAAwB,EAAE,eAAuB,EAAE,YAAqB,EAAW,EAAE;YACnI,IAAI,OAAO,GAAY,IAAI,CAAC;YAC5B,IAAI,aAAa,CAAC;YAClB,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,IAAI,eAAe,CAAC,CAAC;YAEnG,aAAa,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;gBACtC,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,IAAI,iBAAiB,CAAC,IAAI,KAAK,YAAY,CAAC,EAAE;oBAC5E,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;oBACnF,IAAI,aAAa,KAAK,SAAS,EAAE;wBAC7B,OAAO,GAAG,aAAa,CAAC;qBAC3B;iBACJ;YACL,CAAC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACnB,CAAC,CAAA;QAWO,mBAAc,GAAG,CAAC,OAAgB,EAAE,YAAoB,EAAE,cAAsC,EAAW,EAAE;YACjH,IAAI,cAAc,CAAC,KAAK,IAAI,cAAc,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzD,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;gBAC/C,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;aACvD;YACD,OAAO,IAAI,CAAC;QAChB,CAAC,CAAA;QA7FG,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;IAEM,gBAAgB,CAAC,eAAuB;QAC3C,MAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;QACtE,IAAI,iBAAiB,EAAE;YACnB,OAAO,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;SAC3D;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,gBAAgB;QACnB,OAAO,CAAC,IAAI,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;YACvD,OAAO;gBACH,GAAG,EAAE,aAAa,CAAC,eAAe;gBAClC,KAAK,EAAE,aAAa,CAAC,SAAS;aACjC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,cAAc,CAAC,iBAAuC;QACzD,OAAO,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACzC,OAAO;gBACH,GAAG,EAAE,KAAK,CAAC,OAAO;gBAClB,KAAK,EAAE,KAAK,CAAC,SAAS;aACzB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oBAAoB;QACvB,OAAO,CAAC,IAAI,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;YACrD,OAAO;gBACH,GAAG,EAAE,cAAc,CAAC,WAAW;gBAC/B,KAAK,EAAE,cAAc,CAAC,IAAI;aAC7B,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAuCO,gBAAgB,CAAC,iBAA+B,EAAE,eAAwB,EAAE,OAAgB;QAChG,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;QACzD,KAAK,MAAM,cAAc,IAAI,CAAC,iBAAiB,CAAC,eAAe,IAAI,EAAE,CAAC,EAAE;YACpE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,iBAAiB,CAAC,IAAI,EAAE,cAAc,CAAC,EAAE;gBACvE,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC3E,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IASO,qBAAqB,CAAC,eAAuB;QACjD,OAAO,CAAC,IAAI,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YACxD,OAAO,CAAC,CAAC,aAAa,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,KAAK,eAAe,CAAC,WAAW,EAAE,CAAC,CAAC;QACnG,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,wBAAwB,CAAC,iBAAoC;QACjE,MAAM,kBAAkB,GAAmB,EAAE,CAAC;QAE9C,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,kBAAkB,EAAE;YAC3D,MAAM,eAAe,GAAG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YACjG,IAAI,eAAe,EAAE;gBACjB,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAC5C;YAED,MAAM,eAAe,GAAG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrF,IAAI,eAAe,EAAE;gBACjB,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAC5C;YAED,iBAAiB,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBACtD,IAAI,UAAU,CAAC,yBAAyB,EAAE;oBACtC,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC;oBAC7F,IAAI,WAAW,EAAE;wBACb,WAAW,CAAC,SAAS,GAAG,UAAU,CAAC,OAAO,IAAI,KAAK,CAAC;wBACpD,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;qBACxC;iBACJ;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACxF,IAAI,gBAAgB,EAAE;gBAClB,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aAC7C;YAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAChG,IAAI,oBAAoB,EAAE;gBACtB,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;aACjD;SACJ;QAED,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IAEO,2BAA2B,CAAC,IAAqB,EAAE,SAAkB;QACzE,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,WAAW,EAAE;YACb,WAAW,CAAC,SAAS,GAAG,SAAS,CAAC;SACrC;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;CACJ","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { get, set } from 'mobx';\n\nimport {\n    Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport {\n    AddressItemType, IAddressDropdownsData, IAddressItem, IAddressValidationRule\n} from './address-format.data';\nimport { AddressMetaData } from './address-meta-data';\n\n/**\n *\n * Retail Service Address format parser\n */\nexport class AddressFormat {\n    private countryRegionsInfo?: CountryRegionInfo[];\n    private addressPurposes?: AddressPurpose[];\n    private addressMetaData: AddressMetaData;\n\n    constructor(countryRegionsInfo: CountryRegionInfo[], addressMetaData: AddressMetaData, addressPurposes: AddressPurpose[]) {\n        this.countryRegionsInfo = countryRegionsInfo;\n        this.addressMetaData = addressMetaData;\n        this.addressPurposes = addressPurposes;\n    }\n\n    public getAddressFormat(countryRegionId: string): IAddressItem[] {\n        const countryRegionInfo = this._getCountryRegionInfo(countryRegionId);\n        if (countryRegionInfo) {\n            return this._getAddressDisplayFormat(countryRegionInfo);\n        }\n        return [];\n    }\n\n    public getCountryFormat(): { key?: string; value?: string }[] {\n        return (this.countryRegionsInfo || []).map(countryRegion => {\n            return {\n                key: countryRegion.CountryRegionId,\n                value: countryRegion.ShortName\n            };\n        });\n    }\n\n    public getStateFormat(stateProvinceInfo?: StateProvinceInfo[]): { key?: string; value?: string }[] {\n        return (stateProvinceInfo || []).map(state => {\n            return {\n                key: state.StateId,\n                value: state.StateName\n            };\n        });\n    }\n\n    public getAddressTypeFormat(): { key?: number; value?: string }[] {\n        return (this.addressPurposes || []).map(addressPurpose => {\n            return {\n                key: addressPurpose.AddressType,\n                value: addressPurpose.Name\n            };\n        });\n    }\n\n    public getPrefilledAddressDropdownData = (stateDefaultSelectionText: string, stateProvinceInfo?: StateProvinceInfo[]): IAddressDropdownsData => {\n        const defaultStateText = {\n            key: '',\n            value: stateDefaultSelectionText\n        };\n        const dropdownData: IAddressDropdownsData = {};\n\n        dropdownData[AddressItemType[AddressItemType.ThreeLetterISORegionName]] = this.getCountryFormat();\n        dropdownData[AddressItemType[AddressItemType.State]] = this.getStateFormat(stateProvinceInfo);\n        dropdownData[AddressItemType[AddressItemType.State]].unshift(defaultStateText);\n        dropdownData[AddressItemType[AddressItemType.AddressTypeValue]] = this.getAddressTypeFormat();\n\n        return dropdownData;\n    }\n\n    public getTwoLetterISORegionName = (countryRegionId: string): string | undefined => {\n        const countryRegionInfo = this._getCountryRegionInfo(countryRegionId);\n\n        return countryRegionInfo!.ISOCode;\n    }\n\n    public validateAddressFormat = (address: Address, validationError: Address, countryRegionId: string, propertyName?: string): boolean => {\n        let isValid: boolean = true;\n        let validationtor;\n        const addressFormat = this.getAddressFormat((address.ThreeLetterISORegionName) || countryRegionId);\n\n        addressFormat.forEach(addressFormatItem => {\n            if (!propertyName || (propertyName && addressFormatItem.name === propertyName)) {\n                validationtor = this._inputValidation(addressFormatItem, validationError, address);\n                if (validationtor !== undefined) {\n                    isValid = validationtor;\n                }\n            }\n        });\n\n        return isValid;\n    }\n    private _inputValidation(addressFormatItem: IAddressItem, validationError: Address, address: Address): boolean | undefined {\n        set(validationError, { [addressFormatItem.name]: null });\n        for (const validationRule of (addressFormatItem.validationRules || [])) {\n            if (!this._validateRegEx(address, addressFormatItem.name, validationRule)) {\n                set(validationError, { [addressFormatItem.name]: validationRule.message });\n                return false;\n            }\n        }\n        return undefined;\n    }\n    private _validateRegEx = (address: Address, propertyName: string, validationRule: IAddressValidationRule): boolean => {\n        if (validationRule.regEx && validationRule.regEx.length > 0) {\n            const regex = new RegExp(validationRule.regEx);\n            return regex.test(get(address, propertyName) || '');\n        }\n        return true;\n    }\n\n    private _getCountryRegionInfo(countryRegionId: string): CountryRegionInfo | undefined {\n        return (this.countryRegionsInfo || []).find(countryRegion => {\n            return ((countryRegion.CountryRegionId || '').toLowerCase() === countryRegionId.toLowerCase());\n        });\n    }\n\n    private _getAddressDisplayFormat(countryRegionInfo: CountryRegionInfo): IAddressItem[] {\n        const addressDisplayItem: IAddressItem[] = [];\n\n        if (countryRegionInfo && countryRegionInfo.AddressFormatLines) {\n            const AddressTypeItem = this._extendAddressDisplayFormat(AddressItemType.AddressTypeValue, true);\n            if (AddressTypeItem) {\n                addressDisplayItem.push(AddressTypeItem);\n            }\n\n            const nameDisplayItem = this._extendAddressDisplayFormat(AddressItemType.Name, true);\n            if (nameDisplayItem) {\n                addressDisplayItem.push(nameDisplayItem);\n            }\n\n            countryRegionInfo.AddressFormatLines.forEach(formatLine => {\n                if (formatLine.AddressComponentNameValue) {\n                    const addressItem = this.addressMetaData.getItemFormat(formatLine.AddressComponentNameValue);\n                    if (addressItem) {\n                        addressItem.isNewLine = formatLine.NewLine || false;\n                        addressDisplayItem.push(addressItem);\n                    }\n                }\n            });\n\n            const phoneDisplayItem = this._extendAddressDisplayFormat(AddressItemType.Phone, false);\n            if (phoneDisplayItem) {\n                addressDisplayItem.push(phoneDisplayItem);\n            }\n\n            const isPrimaryDisplayItem = this._extendAddressDisplayFormat(AddressItemType.IsPrimary, false);\n            if (isPrimaryDisplayItem) {\n                addressDisplayItem.push(isPrimaryDisplayItem);\n            }\n        }\n\n        return addressDisplayItem;\n    }\n\n    private _extendAddressDisplayFormat(type: AddressItemType, isNewLine: boolean): IAddressItem | undefined {\n        const addressItem = this.addressMetaData.getItemFormat(type);\n        if (addressItem) {\n            addressItem.isNewLine = isNewLine;\n        }\n        return addressItem;\n    }\n}\n"]}