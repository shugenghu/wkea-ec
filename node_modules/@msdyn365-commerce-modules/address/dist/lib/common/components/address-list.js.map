{"version":3,"file":"address-list.js","sourceRoot":"./src/","sources":["common/components/address-list.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport classname from 'classnames';\nimport * as React from 'react';\n\nimport { Heading as HeadingData } from '@msdyn365-commerce-modules/data-types';\nimport { Heading, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { Address, AddressPurpose } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { AddressFormat } from '../../common/address-format';\nimport { IAddressResource, IAddressResponse } from '../../common/address-module.data';\nimport AddressButtonComponent from './address-button';\nimport AddressErrorMessageComponent from './address-error-message';\nimport AddressErrorTitleComponent from './address-error-title';\nimport { AddressShow, IAddressShowProps } from './address-show';\n\nexport interface IAddressListError {\n    Error: INodeProps;\n    isShowError: boolean;\n    title: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IAddressListItem {\n    Item: INodeProps;\n    key: number;\n    error: IAddressListError;\n    showItems: IAddressShowProps;\n    isShowPrimaryButton: boolean;\n    primaryButton: React.ReactNode;\n    editButton: React.ReactNode;\n    removeButton: React.ReactNode;\n}\n\nexport interface IAddressList {\n    List: INodeProps;\n    isShowList: boolean;\n    heading: React.ReactNode;\n    items: IAddressListItem[];\n}\n\nexport interface IAddressListProps {\n    ListAddress: INodeProps;\n    heading: React.ReactNode;\n    isShowEmptyListMessage: boolean;\n    emptyListMessage: React.ReactNode;\n    addButton: React.ReactNode;\n    primaryAddressList: IAddressList;\n    otherAddressList: IAddressList;\n}\n\nexport interface IAddressListInputProps {\n    isUpdating?: boolean;\n    selectedAddress?: Address;\n    addressFormat: AddressFormat;\n    addresses: Address[];\n    addressPurposes: AddressPurpose[];\n    heading?: HeadingData;\n    primaryAddressSectionHeading?: HeadingData;\n    otherAddressSectionHeading?: HeadingData;\n    addressActionResponse?: IAddressResponse;\n    resources: IAddressResource;\n    contextRequest: Msdyn365.IRequestContext;\n    telemetryContent?: ITelemetryContent;\n    onAddAddress(): void;\n    onEditAddress(address?: Address): void;\n    onRemoveAddress(address?: Address): void;\n    onUpdatePrimaryAddress(address: Address): void;\n}\n\nconst getButtonAriaLabel = (ariaLabel: string, addressName?: string): string => {\n    return ariaLabel.replace('{addressName}', addressName || '');\n};\n\nconst getAddressList = (className: string, addresses: Address[], showPrimaryButton: boolean, props: IAddressListInputProps, heading?: HeadingData): IAddressList => {\n    const { resources, isUpdating, addressActionResponse, selectedAddress, addressFormat, onEditAddress, onRemoveAddress, onUpdatePrimaryAddress, addressPurposes, telemetryContent } = props;\n    const { errorTitle = null, errorMessage = null } = addressActionResponse || {};\n\n    return {\n        List: { className: className },\n        isShowList: addresses.length > 0,\n        heading: heading && <Heading className={`${className}-heading`} {...heading} />,\n        items: addresses.map((address: Address): IAddressListItem => {\n            const isSelectedAddress = selectedAddress && selectedAddress.RecordId === address.RecordId;\n            const isShowError = isSelectedAddress && errorTitle && errorMessage;\n            return {\n                Item: { className: `${className}-list` },\n                key: address.RecordId || 0,\n                showItems: AddressShow({ addressFormat: addressFormat.getAddressFormat(address.ThreeLetterISORegionName || ''), address: address, addressPurposes: addressPurposes }),\n                error: {\n                    Error: { className: `${className}-error` },\n                    isShowError: isShowError ? true : false,\n                    title: <AddressErrorTitleComponent {...{ title: errorTitle || '' }} />,\n                    message: <AddressErrorMessageComponent {...{ message: errorMessage || '' }} />\n                },\n                isShowPrimaryButton: showPrimaryButton,\n\n                primaryButton: (\n                    <AddressButtonComponent\n                        {\n                        ...{\n                            className: classname('msc-address-list__button-primary msc-btn', { 'msc-address-list__button-updating': isUpdating && isSelectedAddress }),\n                            disabled: isUpdating,\n                            text: resources.addressPrimaryButtonText,\n                            ariaLabel: getButtonAriaLabel(resources.addressPrimaryButtonAriaLabel, address.Name),\n                            telemetryContent: telemetryContent,\n                            onClick: () => { onUpdatePrimaryAddress(address); }\n                        }\n                        }\n                    />\n                ),\n                editButton: (\n                    <AddressButtonComponent\n                        {\n                        ...{\n                            className: 'msc-address-list__button-edit',\n                            disabled: isUpdating,\n                            text: resources.addressEditButtonText,\n                            ariaLabel: getButtonAriaLabel(resources.addressEditButtonAriaLabel, address.Name),\n                            telemetryContent: telemetryContent,\n                            onClick: () => { onEditAddress(address); }\n                        }\n                        }\n                    />\n                ),\n                removeButton: (\n                    <AddressButtonComponent\n                        {\n                        ...{\n                            className: 'msc-address-list__button-remove',\n                            disabled: isUpdating,\n                            text: resources.addressRemoveButtonText,\n                            ariaLabel: getButtonAriaLabel(resources.addressRemoveButtonAriaLabel, address.Name),\n                            telemetryContent: telemetryContent,\n                            onClick: () => { onRemoveAddress(address); }\n                        }\n                        }\n                    />\n                )\n            };\n        })\n    };\n};\n\nconst getPrimaryAddressList = (props: IAddressListInputProps): IAddressList => {\n    const { addresses, primaryAddressSectionHeading } = props;\n    const primaryAddresses = addresses.filter((address: Address) => address.IsPrimary);\n    return getAddressList('msc-address-list__primary', primaryAddresses, false, props, primaryAddressSectionHeading);\n};\n\nconst getOtherAddressList = (props: IAddressListInputProps): IAddressList => {\n    const { addresses, otherAddressSectionHeading } = props;\n    const otherAddresses = addresses.filter((address: Address) => !address.IsPrimary);\n    return getAddressList('msc-address-list__primary', otherAddresses, true, props, otherAddressSectionHeading);\n};\n\nexport const AddressList = (props: IAddressListInputProps): IAddressListProps => {\n    const { addresses, heading, resources, onAddAddress, telemetryContent } = props;\n    const handleLineItemHeadingChange = (event: Msdyn365.ContentEditableEvent) => {\n        heading!.text = event.target.value;\n    };\n    const headingComponent = heading && heading.text && (\n        <Msdyn365.Text\n          className='msc-address-list__heading'\n          tag={heading.headingTag || 'h2'}\n          text={heading.text}\n          editProps = {{onEdit: handleLineItemHeadingChange, requestContext: props.contextRequest}}\n        />\n      );\n\n    return {\n        ListAddress: { className: 'ms-address-list' },\n        heading: headingComponent,\n        isShowEmptyListMessage: addresses.length === 0,\n        emptyListMessage: <p className='msc-address-list__add-empty'>{resources.addressEmptyListAddressMessage}</p>,\n        addButton: (\n            <AddressButtonComponent\n                {\n                ...{\n                    className: 'msc-address-list__button-add msc-btn',\n                    text: resources.addressAddButtonText,\n                    ariaLabel: resources.addressAddButtonAriaLabel,\n                    telemetryContent: telemetryContent,\n                    onClick: onAddAddress\n                }\n                }\n            />\n        ),\n        primaryAddressList: getPrimaryAddressList(props),\n        otherAddressList: getOtherAddressList(props)\n    };\n};\n"]}