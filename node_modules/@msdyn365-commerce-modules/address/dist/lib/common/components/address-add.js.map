{"version":3,"file":"address-add.js","sourceRoot":"./src/","sources":["common/components/address-add.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classname from 'classnames';\nimport { get } from 'mobx';\nimport * as React from 'react';\n\nimport { Heading as HeadingData } from '@msdyn365-commerce-modules/data-types';\nimport { Heading, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { Address } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { AddressType, IAddressResource, IAddressResponse } from '../../common/address-module.data';\nimport {\n    AddressItemDisplayType, AddressItemType, AddressValidationRuleType, IAddressDropdownsData,\n    IAddressItem, IAddressValidationRule\n} from '../address-format.data';\nimport AddressAlertComponent from './address-alert';\nimport AddressButtonComponent from './address-button';\nimport AdressCheckboxComponent from './address-checkbox';\nimport AdressDropdownComponent from './address-dropdown';\nimport AddressErrorMessageComponent from './address-error-message';\nimport AddressErrorTitleComponent from './address-error-title';\nimport AddressInputComponent from './address-input';\nimport AddressLabelComponent from './address-label';\n\nexport interface IAddressAddInputProps {\n    isUpdating?: boolean;\n    hasError?: boolean;\n    hasExternalSubmitGroup?: boolean;\n    addressType: AddressType;\n    addressFormat: IAddressItem[];\n    defaultCountryRegionId: string;\n    defaultAddressType: number;\n    selectedAddress?: Address;\n    dropdownDisplayData: IAddressDropdownsData;\n    resources: IAddressResource;\n    addressActionResponse?: IAddressResponse;\n    addAddressHeading?: HeadingData;\n    editAddressHeading?: HeadingData;\n    validationError?: object;\n    telemetryContent?: ITelemetryContent;\n    onInputChange(event: React.ChangeEvent<HTMLInputElement>): void;\n    onDropdownChange(event: React.ChangeEvent<HTMLSelectElement>): void;\n    onSave?(): void;\n    onCancel?(): void;\n}\n\nexport interface IAddressError {\n    AddressError: INodeProps;\n    title: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IAddressAddItem {\n    key: string;\n    AddressItem: INodeProps;\n    label: React.ReactNode;\n    alert: React.ReactNode;\n    input: React.ReactNode;\n}\n\nexport interface IAddressAddUpdateProps {\n    AddressForm: INodeProps;\n    heading: React.ReactNode;\n    items: IAddressAddItem[];\n    hasError: boolean;\n    error: IAddressError;\n    isShowSaveButton: boolean;\n    saveButton: React.ReactNode;\n    isShowCancelButton: boolean;\n    cancelButton: React.ReactNode;\n}\n\nconst getRequriedAttribute = (validationRules?: IAddressValidationRule[]): object => {\n    const requriedRule = (validationRules || []).find(validationRule => {\n        return validationRule.type === AddressValidationRuleType.Required;\n    });\n\n    return requriedRule ? { 'aria-required': true } : {};\n};\n\nconst getAddessItems = (selectedAddress: Address, props: IAddressAddInputProps): IAddressAddItem[] => {\n    const { addressFormat, addressType, dropdownDisplayData, defaultCountryRegionId, defaultAddressType, validationError = {}, onInputChange, onDropdownChange } = props;\n\n    // @ts-ignore\n    return addressFormat.map((addressFormatItem, index) => {\n        const elementId = `${addressType.toLowerCase()}_address${addressFormatItem.name.toLowerCase()}`;\n        const errorMessage = get(validationError, addressFormatItem.name);\n        const className = classname('msc-address-form__item', `msc-address-form__item-${addressFormatItem.name.toLowerCase()}`, { 'msc-address-form__item-newline': addressFormatItem.isNewLine, 'address-form__item-invalid': errorMessage });\n        let input;\n\n        if (addressFormatItem.displayType === AddressItemDisplayType.Input) {\n            input = (\n                <AddressInputComponent\n                    {\n                    ...{\n                        id: elementId,\n                        name: addressFormatItem.name,\n                        className: 'msc-address-form',\n                        type: 'text',\n                        autoFocus: index === 0,\n                        value: selectedAddress[addressFormatItem.name],\n                        maxLength: addressFormatItem.maxLength,\n                        onChange: onInputChange,\n                        additionalAddributes: getRequriedAttribute(addressFormatItem.validationRules)\n                    }\n                    }\n                />\n            );\n        } else if (addressFormatItem.displayType === AddressItemDisplayType.Checkbox) {\n            input = (\n                <AdressCheckboxComponent\n                    {\n                    ...{\n                        id: elementId,\n                        name: addressFormatItem.name,\n                        className: 'msc-address-form',\n                        type: 'checkbox',\n                        autoFocus: index === 0,\n                        isChecked: selectedAddress[addressFormatItem.name],\n                        onChange: onInputChange,\n                        additionalAddributes: getRequriedAttribute(addressFormatItem.validationRules)\n                    }\n                    }\n                />\n            );\n        } else {\n            const displayData = dropdownDisplayData[addressFormatItem.name];\n            let selectedValue = selectedAddress[addressFormatItem.name];\n\n            if (addressFormatItem.type === AddressItemType.ThreeLetterISORegionName) {\n                selectedValue = selectedValue || defaultCountryRegionId;\n            }\n\n            if (addressFormatItem.type === AddressItemType.AddressTypeValue) {\n                selectedValue = selectedValue || defaultAddressType;\n            }\n\n            input = (\n                <AdressDropdownComponent\n                    {\n                    ...{\n                        id: elementId,\n                        name: addressFormatItem.name,\n                        className: 'msc-address-form',\n                        value: selectedValue,\n                        displayData: displayData,\n                        onChange: onDropdownChange,\n                        additionalAddributes: getRequriedAttribute(addressFormatItem.validationRules)\n                    }\n                    }\n                />\n            );\n        }\n\n        return {\n            key: addressFormatItem.name,\n            AddressItem: { className: className },\n            label: <AddressLabelComponent {...{ id: elementId, text: addressFormatItem.label }} />,\n            alert: <AddressAlertComponent {...{ message: errorMessage }} />,\n            input: input\n        };\n    });\n};\n\nexport const AddressAddUpdate = (props: IAddressAddInputProps): IAddressAddUpdateProps => {\n    const { editAddressHeading, addAddressHeading, selectedAddress = {}, resources, hasError, onCancel, onSave, hasExternalSubmitGroup, isUpdating, addressActionResponse, telemetryContent } = props;\n    const heading = selectedAddress.RecordId ? editAddressHeading : addAddressHeading;\n\n    return {\n        AddressForm: { className: 'msc-address-form' },\n        heading: heading && <Heading className='msc-address-form__heading' {...heading} />,\n        items: getAddessItems(selectedAddress, props),\n        isShowSaveButton: !hasExternalSubmitGroup,\n        saveButton: onSave && (\n            <AddressButtonComponent\n                {\n                ...{\n                    className: classname('msc-address-form__button-save msc-btn', { 'msc-address-form__button-updating': isUpdating }),\n                    text: resources.addressSaveButtonText,\n                    ariaLabel: resources.addressSaveButtonAriaLabel,\n                    disabled: isUpdating,\n                    onClick: onSave,\n                    telemetryContent: telemetryContent\n                }\n                }\n            />\n        ),\n        isShowCancelButton: !hasExternalSubmitGroup,\n        cancelButton: onCancel && (\n            <AddressButtonComponent\n                {\n                ...{\n                    className: 'msc-address-form__button-cancel msc-btn',\n                    text: resources.addressCancelButtonText,\n                    ariaLabel: resources.addressCancelButtonAriaLabel,\n                    onClick: onCancel,\n                    telemetryContent: telemetryContent\n                }\n                }\n            />\n        ),\n        hasError: hasError || false,\n        error: {\n            AddressError: { className: 'msc-address-form__error' },\n            title: addressActionResponse && addressActionResponse.errorTitle && <AddressErrorTitleComponent {...{ title: addressActionResponse.errorTitle || '' }} />,\n            message: addressActionResponse && addressActionResponse.errorMessage && <AddressErrorMessageComponent {...{ message: addressActionResponse.errorMessage || '' }} />\n        }\n    };\n};"]}