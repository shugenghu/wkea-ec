import * as Msdyn365 from '@msdyn365-commerce/core';
import classname from 'classnames';
import * as React from 'react';
import { Heading } from '@msdyn365-commerce-modules/utilities';
import AddressButtonComponent from './address-button';
import AddressErrorMessageComponent from './address-error-message';
import AddressErrorTitleComponent from './address-error-title';
import { AddressShow } from './address-show';
const getButtonAriaLabel = (ariaLabel, addressName) => {
    return ariaLabel.replace('{addressName}', addressName || '');
};
const getAddressList = (className, addresses, showPrimaryButton, props, heading) => {
    const { resources, isUpdating, addressActionResponse, selectedAddress, addressFormat, onEditAddress, onRemoveAddress, onUpdatePrimaryAddress, addressPurposes, telemetryContent } = props;
    const { errorTitle = null, errorMessage = null } = addressActionResponse || {};
    return {
        List: { className: className },
        isShowList: addresses.length > 0,
        heading: heading && React.createElement(Heading, Object.assign({ className: `${className}-heading` }, heading)),
        items: addresses.map((address) => {
            const isSelectedAddress = selectedAddress && selectedAddress.RecordId === address.RecordId;
            const isShowError = isSelectedAddress && errorTitle && errorMessage;
            return {
                Item: { className: `${className}-list` },
                key: address.RecordId || 0,
                showItems: AddressShow({ addressFormat: addressFormat.getAddressFormat(address.ThreeLetterISORegionName || ''), address: address, addressPurposes: addressPurposes }),
                error: {
                    Error: { className: `${className}-error` },
                    isShowError: isShowError ? true : false,
                    title: React.createElement(AddressErrorTitleComponent, Object.assign({}, { title: errorTitle || '' })),
                    message: React.createElement(AddressErrorMessageComponent, Object.assign({}, { message: errorMessage || '' }))
                },
                isShowPrimaryButton: showPrimaryButton,
                primaryButton: (React.createElement(AddressButtonComponent, Object.assign({}, {
                    className: classname('msc-address-list__button-primary msc-btn', { 'msc-address-list__button-updating': isUpdating && isSelectedAddress }),
                    disabled: isUpdating,
                    text: resources.addressPrimaryButtonText,
                    ariaLabel: getButtonAriaLabel(resources.addressPrimaryButtonAriaLabel, address.Name),
                    telemetryContent: telemetryContent,
                    onClick: () => { onUpdatePrimaryAddress(address); }
                }))),
                editButton: (React.createElement(AddressButtonComponent, Object.assign({}, {
                    className: 'msc-address-list__button-edit',
                    disabled: isUpdating,
                    text: resources.addressEditButtonText,
                    ariaLabel: getButtonAriaLabel(resources.addressEditButtonAriaLabel, address.Name),
                    telemetryContent: telemetryContent,
                    onClick: () => { onEditAddress(address); }
                }))),
                removeButton: (React.createElement(AddressButtonComponent, Object.assign({}, {
                    className: 'msc-address-list__button-remove',
                    disabled: isUpdating,
                    text: resources.addressRemoveButtonText,
                    ariaLabel: getButtonAriaLabel(resources.addressRemoveButtonAriaLabel, address.Name),
                    telemetryContent: telemetryContent,
                    onClick: () => { onRemoveAddress(address); }
                })))
            };
        })
    };
};
const getPrimaryAddressList = (props) => {
    const { addresses, primaryAddressSectionHeading } = props;
    const primaryAddresses = addresses.filter((address) => address.IsPrimary);
    return getAddressList('msc-address-list__primary', primaryAddresses, false, props, primaryAddressSectionHeading);
};
const getOtherAddressList = (props) => {
    const { addresses, otherAddressSectionHeading } = props;
    const otherAddresses = addresses.filter((address) => !address.IsPrimary);
    return getAddressList('msc-address-list__primary', otherAddresses, true, props, otherAddressSectionHeading);
};
export const AddressList = (props) => {
    const { addresses, heading, resources, onAddAddress, telemetryContent } = props;
    const handleLineItemHeadingChange = (event) => {
        heading.text = event.target.value;
    };
    const headingComponent = heading && heading.text && (React.createElement(Msdyn365.Text, { className: 'msc-address-list__heading', tag: heading.headingTag || 'h2', text: heading.text, editProps: { onEdit: handleLineItemHeadingChange, requestContext: props.contextRequest } }));
    return {
        ListAddress: { className: 'ms-address-list' },
        heading: headingComponent,
        isShowEmptyListMessage: addresses.length === 0,
        emptyListMessage: React.createElement("p", { className: 'msc-address-list__add-empty' }, resources.addressEmptyListAddressMessage),
        addButton: (React.createElement(AddressButtonComponent, Object.assign({}, {
            className: 'msc-address-list__button-add msc-btn',
            text: resources.addressAddButtonText,
            ariaLabel: resources.addressAddButtonAriaLabel,
            telemetryContent: telemetryContent,
            onClick: onAddAddress
        }))),
        primaryAddressList: getPrimaryAddressList(props),
        otherAddressList: getOtherAddressList(props)
    };
};
//# sourceMappingURL=address-list.js.map