import classname from 'classnames';
import { get } from 'mobx';
import * as React from 'react';
import { Heading } from '@msdyn365-commerce-modules/utilities';
import { AddressItemDisplayType, AddressItemType, AddressValidationRuleType } from '../address-format.data';
import AddressAlertComponent from './address-alert';
import AddressButtonComponent from './address-button';
import AdressCheckboxComponent from './address-checkbox';
import AdressDropdownComponent from './address-dropdown';
import AddressErrorMessageComponent from './address-error-message';
import AddressErrorTitleComponent from './address-error-title';
import AddressInputComponent from './address-input';
import AddressLabelComponent from './address-label';
const getRequriedAttribute = (validationRules) => {
    const requriedRule = (validationRules || []).find(validationRule => {
        return validationRule.type === AddressValidationRuleType.Required;
    });
    return requriedRule ? { 'aria-required': true } : {};
};
const getAddessItems = (selectedAddress, props) => {
    const { addressFormat, addressType, dropdownDisplayData, defaultCountryRegionId, defaultAddressType, validationError = {}, onInputChange, onDropdownChange } = props;
    return addressFormat.map((addressFormatItem, index) => {
        const elementId = `${addressType.toLowerCase()}_address${addressFormatItem.name.toLowerCase()}`;
        const errorMessage = get(validationError, addressFormatItem.name);
        const className = classname('msc-address-form__item', `msc-address-form__item-${addressFormatItem.name.toLowerCase()}`, { 'msc-address-form__item-newline': addressFormatItem.isNewLine, 'address-form__item-invalid': errorMessage });
        let input;
        if (addressFormatItem.displayType === AddressItemDisplayType.Input) {
            input = (React.createElement(AddressInputComponent, Object.assign({}, {
                id: elementId,
                name: addressFormatItem.name,
                className: 'msc-address-form',
                type: 'text',
                autoFocus: index === 0,
                value: selectedAddress[addressFormatItem.name],
                maxLength: addressFormatItem.maxLength,
                onChange: onInputChange,
                additionalAddributes: getRequriedAttribute(addressFormatItem.validationRules)
            })));
        }
        else if (addressFormatItem.displayType === AddressItemDisplayType.Checkbox) {
            input = (React.createElement(AdressCheckboxComponent, Object.assign({}, {
                id: elementId,
                name: addressFormatItem.name,
                className: 'msc-address-form',
                type: 'checkbox',
                autoFocus: index === 0,
                isChecked: selectedAddress[addressFormatItem.name],
                onChange: onInputChange,
                additionalAddributes: getRequriedAttribute(addressFormatItem.validationRules)
            })));
        }
        else {
            const displayData = dropdownDisplayData[addressFormatItem.name];
            let selectedValue = selectedAddress[addressFormatItem.name];
            if (addressFormatItem.type === AddressItemType.ThreeLetterISORegionName) {
                selectedValue = selectedValue || defaultCountryRegionId;
            }
            if (addressFormatItem.type === AddressItemType.AddressTypeValue) {
                selectedValue = selectedValue || defaultAddressType;
            }
            input = (React.createElement(AdressDropdownComponent, Object.assign({}, {
                id: elementId,
                name: addressFormatItem.name,
                className: 'msc-address-form',
                value: selectedValue,
                displayData: displayData,
                onChange: onDropdownChange,
                additionalAddributes: getRequriedAttribute(addressFormatItem.validationRules)
            })));
        }
        return {
            key: addressFormatItem.name,
            AddressItem: { className: className },
            label: React.createElement(AddressLabelComponent, Object.assign({}, { id: elementId, text: addressFormatItem.label })),
            alert: React.createElement(AddressAlertComponent, Object.assign({}, { message: errorMessage })),
            input: input
        };
    });
};
export const AddressAddUpdate = (props) => {
    const { editAddressHeading, addAddressHeading, selectedAddress = {}, resources, hasError, onCancel, onSave, hasExternalSubmitGroup, isUpdating, addressActionResponse, telemetryContent } = props;
    const heading = selectedAddress.RecordId ? editAddressHeading : addAddressHeading;
    return {
        AddressForm: { className: 'msc-address-form' },
        heading: heading && React.createElement(Heading, Object.assign({ className: 'msc-address-form__heading' }, heading)),
        items: getAddessItems(selectedAddress, props),
        isShowSaveButton: !hasExternalSubmitGroup,
        saveButton: onSave && (React.createElement(AddressButtonComponent, Object.assign({}, {
            className: classname('msc-address-form__button-save msc-btn', { 'msc-address-form__button-updating': isUpdating }),
            text: resources.addressSaveButtonText,
            ariaLabel: resources.addressSaveButtonAriaLabel,
            disabled: isUpdating,
            onClick: onSave,
            telemetryContent: telemetryContent
        }))),
        isShowCancelButton: !hasExternalSubmitGroup,
        cancelButton: onCancel && (React.createElement(AddressButtonComponent, Object.assign({}, {
            className: 'msc-address-form__button-cancel msc-btn',
            text: resources.addressCancelButtonText,
            ariaLabel: resources.addressCancelButtonAriaLabel,
            onClick: onCancel,
            telemetryContent: telemetryContent
        }))),
        hasError: hasError || false,
        error: {
            AddressError: { className: 'msc-address-form__error' },
            title: addressActionResponse && addressActionResponse.errorTitle && React.createElement(AddressErrorTitleComponent, Object.assign({}, { title: addressActionResponse.errorTitle || '' })),
            message: addressActionResponse && addressActionResponse.errorMessage && React.createElement(AddressErrorMessageComponent, Object.assign({}, { message: addressActionResponse.errorMessage || '' }))
        }
    };
};
//# sourceMappingURL=address-add.js.map