import { addAddress, AddressManagementInput, updateAddress, updatePrimaryAddress } from '@msdyn365-commerce-modules/retail-actions';
import { getStateProvinceAction, GetStateProvincesInput } from '../actions/get-state-provinces';
export class AddressCommon {
    constructor(context, resources, telemetry) {
        this.getDefaultCountryRegionId = (countryRegionId, countryRegions, market) => {
            const marketISOCode = market || 'US';
            const currentCountryRegion = countryRegions.find(countryRegion => (countryRegion.ISOCode || '') === marketISOCode);
            return (currentCountryRegion && currentCountryRegion.CountryRegionId) || countryRegionId;
        };
        this.parseRetailException = (resources) => {
            return {
                errorTitle: resources.addressErrorMessageTitle,
                errorMessage: resources.addressGenericErrorMessage
            };
        };
        this.isAuthenticatedFlow = () => {
            return this.context.request.user.isAuthenticated;
        };
        this.getStateProvinces = async (countryRegionId) => {
            let response = [];
            if (this.context && this.context.actionContext) {
                try {
                    const input = new GetStateProvincesInput(countryRegionId, this.context.request.apiSettings);
                    response = await getStateProvinceAction(input, this.context.actionContext);
                }
                catch (error) {
                    if (this.telemetry) {
                        this.telemetry.error(`Error encountered ${error}`);
                        this.telemetry.debug('Unable to get state provinces');
                    }
                }
            }
            return Promise.resolve(response);
        };
        this.addCustomerAddress = (address) => {
            return this.submitCustomerAddress(addAddress, address);
        };
        this.updateCustomerAddress = (address) => {
            return this.submitCustomerAddress(updateAddress, address);
        };
        this.updateCustomerPrimaryAddress = (address) => {
            return this.submitCustomerAddress(updatePrimaryAddress, address);
        };
        this.submitCustomerAddress = (addressAction, address) => {
            address.AddressTypeValue = address.AddressTypeValue || 7;
            const input = new AddressManagementInput(address);
            return this.execAddressAction(addressAction, input, address);
        };
        this.execAddressAction = async (addressAction, input, address) => {
            let response = {};
            if (this.context && this.context.actionContext) {
                try {
                    const addresses = await addressAction(input, this.context.actionContext);
                    if (addresses.length > 0) {
                        response.address = address.RecordId ? address : addresses[addresses.length - 1];
                    }
                    response.customerAddresses = addresses;
                }
                catch (error) {
                    if (this.telemetry) {
                        this.telemetry.error(`Error encountered ${error}`);
                        this.telemetry.debug('Unable to exec address action');
                    }
                    response = this.parseRetailException(this.resources);
                }
            }
            return Promise.resolve(response);
        };
        this.context = context;
        this.resources = resources;
        this.telemetry = telemetry;
    }
}
//# sourceMappingURL=address-common.js.map