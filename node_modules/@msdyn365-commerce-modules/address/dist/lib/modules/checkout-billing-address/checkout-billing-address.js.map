{"version":3,"file":"checkout-billing-address.js","sourceRoot":"./src/","sources":["modules/checkout-billing-address/checkout-billing-address.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { computed, observable, reaction, set } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport { IModuleStateProps, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';\nimport { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport {\n    Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy';\n\nimport { IGiftCardExtend } from '@msdyn365-commerce/global-state';\nimport { AddressCommon } from '../../common/address-common';\nimport { AddressFormat } from '../../common/address-format';\nimport { AddressItemType } from '../../common/address-format.data';\nimport { AddressMetaData } from '../../common/address-meta-data';\nimport {\n    AddressOperation, AddressType, IAddressResource, IAddressResponse\n} from '../../common/address-module.data';\nimport { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';\nimport AddressBillingCheckoxComponent from '../../common/components/address-billing-checkbox';\nimport AddressBillingHeadingComponent from '../../common/components/address-billing-heading';\nimport { AddressShow, IAddressShowProps } from '../../common/components/address-show';\nimport { ICheckoutBillingAddressData } from './checkout-billing-address.data';\nimport { ICheckoutBillingAddressProps } from './checkout-billing-address.props.autogenerated';\n\nexport interface IProps extends ICheckoutBillingAddressProps<ICheckoutBillingAddressData>, IModuleStateProps { }\n\nexport interface ICheckoutBillingAddressViewState {\n    isShowAddress: boolean;\n    isShowAddOrUpdateAddress: boolean;\n    isShowSameAsShippingCheckbox: boolean;\n}\n\nexport interface ICheckoutBillingAddressViewProps extends IProps {\n    className: string;\n    currentOperation: AddressOperation;\n    selectedAddress?: Address;\n    addUpdateAddress: Address;\n    countryRegionId: string;\n    stateProvinceInfo?: StateProvinceInfo[];\n    validationError: object;\n    addressActionResponse?: IAddressResponse;\n    viewState: ICheckoutBillingAddressViewState;\n    CheckoutBillingAddress: IModuleProps;\n    sameAsShippingCheckbox: React.ReactNode;\n    heading: React.ReactNode;\n    showAddress: IAddressShowProps;\n    showAddOrUpdateAddress: IAddressAddUpdateProps;\n}\n\n/**\n *\n * CheckoutBillingAddress component\n * @extends {React.PureComponent<ICheckoutBillingAddressProps<ICheckoutBillingAddressData>>}\n */\n// @ts-ignore\n@withModuleState\n@observer\nclass CheckoutBillingAddress extends React.Component<IProps> {\n\n    @observable private currentOperation: AddressOperation;\n    @observable private isBillingAddressSameAsShipping: boolean;\n    @observable private selectedAddress?: Address;\n    @observable private addUpdateAddress: Address;\n    @observable private countryRegionId: string = 'USA';\n    @observable private stateProvinceInfo?: StateProvinceInfo[];\n    @observable private validationError: object;\n    @observable private addressActionResponse?: IAddressResponse;\n\n    private addressCommon: AddressCommon;\n    private addressFormat: AddressFormat;\n    private countryRegions: CountryRegionInfo[];\n    private addressPurposes: AddressPurpose[];\n    private resources: IAddressResource;\n    private defaultAddressType: number = 6; // Default to Home\n    // private addRenderRef: React.RefObject<AddressAdd>;\n    private telemetryContent?: ITelemetryContent;\n\n    constructor(props: IProps) {\n        super(props);\n        const { context, data, resources, telemetry } = this.props;\n\n        this.addUpdateAddress = {};\n        this.validationError = {};\n        this.isBillingAddressSameAsShipping = false;\n        this.resources = resources;\n        this.currentOperation = AddressOperation.List;\n        this.addressPurposes = data.addressPurposes.result || [];\n        this.countryRegions = data.countryRegions.result || [];\n        this.stateProvinceInfo = data.countryStates.result || [];\n        this.addressCommon = new AddressCommon(context, resources, telemetry);\n        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n        // this.addRenderRef = React.createRef();\n    }\n\n    public componentDidMount(): void {\n        this.props.data.checkout.then(() => {\n            this._setDefaultCountryRegionId();\n            this._initModuleState();\n        });\n\n        reaction(\n            () => this.countryRegionId,\n            () => this._getStateProvinces()\n        );\n\n        reaction(\n            () => this.currentOperation,\n            () => {\n                this._getStateProvinces();\n            }\n        );\n\n        reaction(\n            () => this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress,\n            shippingAddress => {\n                if (this.props.moduleState.isUpdating) {\n                    if (shippingAddress && this.isBillingAddressSameAsShipping) {\n                        this.isBillingAddressSameAsShipping = true;\n                        this._updateCurrentOperation(AddressOperation.Show, shippingAddress);\n                    } else if (shippingAddress && this.isBillingAddressSameAsShipping) {\n                        this._updateCurrentOperation(AddressOperation.Show, shippingAddress);\n                    }\n                }\n            }\n        );\n\n        reaction(\n            () => this.isBillingAddressRequried,\n            isBillingAddressRequried => {\n                if (isBillingAddressRequried) {\n                    if (this.props.moduleState.isDisabled) {\n                        this.onEdit();\n                    }\n                } else {\n                    // tslint:disable-next-line:no-floating-promises\n                    this.props.data.checkout.result?.removeBillingAddress({});\n                    this.props.moduleState.onDisable();\n                }\n            }\n        );\n    }\n\n    public render(): JSX.Element | null {\n        if (!(this.isBillingAddressRequried)) {\n            return null;\n        }\n\n        const { resources } = this.props;\n\n        const { renderView, config } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            currentOperation: this.currentOperation,\n            selectedAddress: this.selectedAddress,\n            addUpdateAddress: this.addUpdateAddress,\n            countryRegionId: this.countryRegionId,\n            stateProvinceInfo: this.stateProvinceInfo,\n            validationError: this.validationError,\n            addressActionResponse: this.addressActionResponse,\n            className: config.className,\n            viewState: {\n                isShowAddress: this.selectedAddress && this.currentOperation === AddressOperation.Show,\n                isShowAddOrUpdateAddress: this.currentOperation !== AddressOperation.Show,\n                isShowSameAsShippingCheckbox: this.isCartContainsItemsForShipping && this.props.moduleState.isUpdating\n            },\n            CheckoutBillingAddress: {\n                moduleProps: this.props,\n                className: classnames('ms-checkout-billing-address', config.className)\n            },\n            heading: <AddressBillingHeadingComponent {...{ text: resources.addressBillingAddressHeading }} />,\n            // tslint:disable-next-line: max-line-length\n            sameAsShippingCheckbox: (\n                <AddressBillingCheckoxComponent\n                    {\n                    ...{\n                        isChecked: this.isBillingAddressSameAsShipping,\n                        type: 'checkbox',\n                        value: 'true',\n                        ariaLabel: resources.addressSameAsShippingAddressAriaLabel,\n                        text: resources.addressSameAsShippingAddressText,\n                        telemetryContent: this.telemetryContent,\n                        onChange:\n                            this._onBillingAddressSameAsShippingChange\n                    }\n                    }\n                />\n            ),\n            showAddress: this._renderShowAddress(),\n            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()\n        };\n\n        return renderView(viewProps) as React.ReactElement;\n    }\n\n    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {\n        return AddressAddUpdate(\n            {\n                resources: this.resources,\n                addressType: AddressType.Billing,\n                addressFormat: this.addressFormat.getAddressFormat((this.addUpdateAddress.ThreeLetterISORegionName) || this.countryRegionId),\n                defaultCountryRegionId: this.countryRegionId,\n                defaultAddressType: this.defaultAddressType,\n                selectedAddress: this.addUpdateAddress,\n                validationError: this.validationError,\n                addressActionResponse: this.addressActionResponse,\n                dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),\n                telemetryContent: this.telemetryContent,\n                onInputChange: this._onAddressAddUpdateInputChange,\n                onDropdownChange: this._onAddressAddUpdateDropdownChange,\n                hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,\n                onSave: this._onSubmitAddress,\n                onCancel: this._resetView\n            }\n        );\n    }\n\n    private _renderShowAddress(): IAddressShowProps | null {\n        if (this.selectedAddress) {\n            return AddressShow({ address: this.selectedAddress, addressFormat: this.addressFormat.getAddressFormat(this.selectedAddress.ThreeLetterISORegionName || ''), addressPurposes: this.addressPurposes });\n        }\n\n        return null;\n    }\n\n    private _onCountryChange = (countryRegionId: string) => {\n        this.countryRegionId = countryRegionId;\n        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });\n    }\n\n    private _getAddressFormatExcludeList = (): AddressItemType[] => {\n        const { config } = this.props;\n        const addressFormatExcludeList: AddressItemType[] = [];\n\n        if (!config.showAddressType) {\n            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);\n        }\n\n        addressFormatExcludeList.push(AddressItemType.IsPrimary);\n\n        return addressFormatExcludeList;\n    }\n\n    private onAddressAddUpdate = (name: string, value: string) => {\n        set(this.addUpdateAddress, { [name]: value });\n        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);\n    }\n\n    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');\n        this.onAddressAddUpdate(event.target.name, value);\n    }\n\n    private _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.onAddressAddUpdate(event.target.name, event.target.value);\n\n        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {\n            this._onCountryChange(event.target.value);\n        }\n    }\n\n    private _getStateProvinces = (): void => {\n        if (!this.countryRegionId || !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)) {\n            return;\n        }\n\n        // tslint:disable-next-line:no-floating-promises\n        this.addressCommon.getStateProvinces(this.countryRegionId).then(\n            (result: StateProvinceInfo[]) => {\n                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);\n                // Reset state if selected state not found in the list.\n                if (!stateInfo) {\n                    set(this.addUpdateAddress, { ['State']: '' });\n                }\n                this.stateProvinceInfo = result;\n            });\n    }\n\n    private _initModuleState = (): void => {\n        this.props.moduleState.init({\n            status: this.isBillingAddressRequried ? 'updating' : 'disabled',\n            onEdit: this.onEdit,\n            onCancel: this.onCancel,\n            onSubmit: this.onSubmit\n        });\n\n        const { billingAddress, isBillingAddressSameAsShippingAddress } = this.props.data.checkout.result || {};\n\n        if (this.isBillingAddressRequried) {\n            if (billingAddress) {\n                this.isBillingAddressSameAsShipping = isBillingAddressSameAsShippingAddress || false;\n                this._updateCurrentOperation(AddressOperation.Show, billingAddress);\n                this._updateModuleState();\n            } else if (this.isCartContainsItemsForShipping) {\n                this.isBillingAddressSameAsShipping = true;\n                this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);\n            } else {\n                this.isBillingAddressSameAsShipping = false;\n                this._updateCurrentOperation(AddressOperation.Add);\n            }\n        }\n    }\n\n    private _setDefaultCountryRegionId(): void {\n        const { request } = this.props.context;\n        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;\n\n        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);\n    }\n\n    private _onBillingAddressSameAsShippingChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.isBillingAddressSameAsShipping = event.currentTarget.checked;\n\n        if (this.isBillingAddressSameAsShipping && this.shippingAddress) {\n            this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);\n        } else {\n            this._updateCurrentOperation(AddressOperation.Add, this.billingAddress);\n        }\n    }\n\n    @computed get isCartContainsItemsForShipping(): boolean {\n        const { request } = this.props.context;\n\n        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;\n\n        return ((this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart.CartLines) || []).some(\n            cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine\n        );\n    }\n\n    @computed get billingAddress(): Address | undefined {\n        return this.props.data.checkout.result && this.props.data.checkout.result.billingAddress;\n    }\n\n    @computed get shippingAddress(): Address | undefined {\n        return this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress;\n    }\n\n    @computed get getLoyaltyAmount(): number {\n        const checkoutState = this.props.data.checkout.result;\n        return checkoutState && checkoutState.loyaltyAmount ? checkoutState.loyaltyAmount : 0;\n    }\n\n    @computed get getGiftCardTotalAmount(): number {\n        const checkoutState = this.props.data.checkout.result;\n        if (!checkoutState || !checkoutState.giftCardExtends) {\n            return 0;\n        }\n        return checkoutState.giftCardExtends.reduce(\n            (count: number, giftCard: IGiftCardExtend) => {\n                return count + (giftCard.Balance || 0);\n            },\n            0);\n    }\n\n    @computed get shouldPaidByCard(): boolean {\n        const {\n            data: {\n                checkout\n            },\n            config\n        } = this.props;\n        if (!checkout.result) {\n            return false;\n        }\n\n        const checkoutResult = checkout.result;\n        const cart = checkoutResult.checkoutCart.cart;\n        if (!cart || !cart.CartLines || !cart.CartLines.length) {\n            return false;\n        }\n\n        const { paymentTenderType, tokenizedPaymentCard } = checkoutResult;\n        const isPaidByOtherPaymentSource = config.paymenTenderType !== paymentTenderType && tokenizedPaymentCard;\n\n        // Use payment card when it is not free or gift card balance + Loyalty amount can not cover the total amount\n        const amountDue = (cart.TotalAmount || 0) - this.getGiftCardTotalAmount - this.getLoyaltyAmount;\n\n        return amountDue > 0 && !isPaidByOtherPaymentSource;\n    }\n\n    @computed get isBillingAddressRequried(): boolean {\n        return this.shouldPaidByCard;\n    }\n\n    private _onSubmitAddress = (): void => {\n        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {\n            this.props.moduleState.setHasError(true);\n            return;\n        }\n\n        this._setBillingAddress(this.addUpdateAddress);\n        this._updateCurrentOperation(AddressOperation.Show, this.addUpdateAddress);\n        this._updateModuleState();\n    };\n\n    private onSubmit = (): void => {\n        switch (this.currentOperation) {\n            case AddressOperation.Add:\n            case AddressOperation.Update:\n                this._onSubmitAddress();\n                break;\n            case AddressOperation.Show:\n                if (this.selectedAddress) {\n                    this._setBillingAddress(this.selectedAddress);\n                    this._updateCurrentOperation(AddressOperation.Show, this.selectedAddress);\n                    this._updateModuleState();\n                }\n                break;\n            default:\n                this.props.telemetry.error('Invalid operation');\n        }\n    };\n\n    private onCancel = (): void => {\n        switch (this.currentOperation) {\n            case AddressOperation.Add:\n            case AddressOperation.Update:\n                this._resetView();\n                break;\n            case AddressOperation.Show:\n                // @ts-ignore: Compiler not reconizing property form extending class\n                this._resetView();\n                break;\n            default:\n                this.props.telemetry.error('Invalid operation');\n        }\n    };\n\n    private onEdit = (): void => {\n        if (this.isBillingAddressSameAsShipping && this.shippingAddress && this.isCartContainsItemsForShipping) {\n            this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);\n        } else {\n            this._updateCurrentOperation(AddressOperation.Add, this.billingAddress);\n        }\n        this.props.moduleState.onUpdating();\n    }\n\n    private _setBillingAddress = (address: Address): void => {\n        if (this.props.data.checkout.result) {\n            const newBillingAddress = { ...address };\n\n            if (address.ThreeLetterISORegionName && !newBillingAddress.TwoLetterISORegionName) {\n                newBillingAddress.TwoLetterISORegionName = this.addressFormat.getTwoLetterISORegionName(address.ThreeLetterISORegionName);\n            }\n\n            // tslint:disable-next-line:no-floating-promises\n            this.props.data.checkout.result.updateBillingAddress({ newBillingAddress, additionalProperties: { isBillingAddressSameAsShippingAddress: this.isBillingAddressSameAsShipping } });\n        }\n    }\n\n    private _resetView = () => {\n        this._updateCurrentOperation(AddressOperation.Show, this.billingAddress);\n        this._updateModuleState();\n    }\n\n    private _updateCurrentOperation = (operation: AddressOperation, selectedAddress?: Address) => {\n        this.currentOperation = operation;\n        this.selectedAddress = selectedAddress;\n\n        if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {\n            this.addUpdateAddress = { ...this.selectedAddress } || {};\n            set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId });\n            set(this.addUpdateAddress, { ['AddressTypeValue']: this.addUpdateAddress.AddressTypeValue || this.defaultAddressType });\n        }\n    }\n\n    private _updateModuleState = () => {\n        if (this.currentOperation === AddressOperation.Show) {\n            this.props.moduleState.onReady();\n        } else {\n            this.props.moduleState.onUpdating();\n        }\n    }\n}\n\nexport default CheckoutBillingAddress;"]}