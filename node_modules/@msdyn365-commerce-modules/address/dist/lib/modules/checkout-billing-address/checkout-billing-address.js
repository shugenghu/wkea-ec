import { __decorate } from "tslib";
import classnames from 'classnames';
import { computed, observable, reaction, set } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemType } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import { AddressOperation, AddressType } from '../../common/address-module.data';
import { AddressAddUpdate } from '../../common/components/address-add';
import AddressBillingCheckoxComponent from '../../common/components/address-billing-checkbox';
import AddressBillingHeadingComponent from '../../common/components/address-billing-heading';
import { AddressShow } from '../../common/components/address-show';
let CheckoutBillingAddress = class CheckoutBillingAddress extends React.Component {
    constructor(props) {
        super(props);
        this.countryRegionId = 'USA';
        this.defaultAddressType = 6;
        this._renderAddOrUpdateAddress = () => {
            return AddressAddUpdate({
                resources: this.resources,
                addressType: AddressType.Billing,
                addressFormat: this.addressFormat.getAddressFormat((this.addUpdateAddress.ThreeLetterISORegionName) || this.countryRegionId),
                defaultCountryRegionId: this.countryRegionId,
                defaultAddressType: this.defaultAddressType,
                selectedAddress: this.addUpdateAddress,
                validationError: this.validationError,
                addressActionResponse: this.addressActionResponse,
                dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),
                telemetryContent: this.telemetryContent,
                onInputChange: this._onAddressAddUpdateInputChange,
                onDropdownChange: this._onAddressAddUpdateDropdownChange,
                hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,
                onSave: this._onSubmitAddress,
                onCancel: this._resetView
            });
        };
        this._onCountryChange = (countryRegionId) => {
            this.countryRegionId = countryRegionId;
            set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });
        };
        this._getAddressFormatExcludeList = () => {
            const { config } = this.props;
            const addressFormatExcludeList = [];
            if (!config.showAddressType) {
                addressFormatExcludeList.push(AddressItemType.AddressTypeValue);
            }
            addressFormatExcludeList.push(AddressItemType.IsPrimary);
            return addressFormatExcludeList;
        };
        this.onAddressAddUpdate = (name, value) => {
            set(this.addUpdateAddress, { [name]: value });
            this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);
        };
        this._onAddressAddUpdateInputChange = (event) => {
            const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
            this.onAddressAddUpdate(event.target.name, value);
        };
        this._onAddressAddUpdateDropdownChange = (event) => {
            this.onAddressAddUpdate(event.target.name, event.target.value);
            if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
                this._onCountryChange(event.target.value);
            }
        };
        this._getStateProvinces = () => {
            if (!this.countryRegionId || !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)) {
                return;
            }
            this.addressCommon.getStateProvinces(this.countryRegionId).then((result) => {
                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);
                if (!stateInfo) {
                    set(this.addUpdateAddress, { ['State']: '' });
                }
                this.stateProvinceInfo = result;
            });
        };
        this._initModuleState = () => {
            this.props.moduleState.init({
                status: this.isBillingAddressRequried ? 'updating' : 'disabled',
                onEdit: this.onEdit,
                onCancel: this.onCancel,
                onSubmit: this.onSubmit
            });
            const { billingAddress, isBillingAddressSameAsShippingAddress } = this.props.data.checkout.result || {};
            if (this.isBillingAddressRequried) {
                if (billingAddress) {
                    this.isBillingAddressSameAsShipping = isBillingAddressSameAsShippingAddress || false;
                    this._updateCurrentOperation(AddressOperation.Show, billingAddress);
                    this._updateModuleState();
                }
                else if (this.isCartContainsItemsForShipping) {
                    this.isBillingAddressSameAsShipping = true;
                    this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);
                }
                else {
                    this.isBillingAddressSameAsShipping = false;
                    this._updateCurrentOperation(AddressOperation.Add);
                }
            }
        };
        this._onBillingAddressSameAsShippingChange = (event) => {
            this.isBillingAddressSameAsShipping = event.currentTarget.checked;
            if (this.isBillingAddressSameAsShipping && this.shippingAddress) {
                this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);
            }
            else {
                this._updateCurrentOperation(AddressOperation.Add, this.billingAddress);
            }
        };
        this._onSubmitAddress = () => {
            if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
                this.props.moduleState.setHasError(true);
                return;
            }
            this._setBillingAddress(this.addUpdateAddress);
            this._updateCurrentOperation(AddressOperation.Show, this.addUpdateAddress);
            this._updateModuleState();
        };
        this.onSubmit = () => {
            switch (this.currentOperation) {
                case AddressOperation.Add:
                case AddressOperation.Update:
                    this._onSubmitAddress();
                    break;
                case AddressOperation.Show:
                    if (this.selectedAddress) {
                        this._setBillingAddress(this.selectedAddress);
                        this._updateCurrentOperation(AddressOperation.Show, this.selectedAddress);
                        this._updateModuleState();
                    }
                    break;
                default:
                    this.props.telemetry.error('Invalid operation');
            }
        };
        this.onCancel = () => {
            switch (this.currentOperation) {
                case AddressOperation.Add:
                case AddressOperation.Update:
                    this._resetView();
                    break;
                case AddressOperation.Show:
                    this._resetView();
                    break;
                default:
                    this.props.telemetry.error('Invalid operation');
            }
        };
        this.onEdit = () => {
            if (this.isBillingAddressSameAsShipping && this.shippingAddress && this.isCartContainsItemsForShipping) {
                this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);
            }
            else {
                this._updateCurrentOperation(AddressOperation.Add, this.billingAddress);
            }
            this.props.moduleState.onUpdating();
        };
        this._setBillingAddress = (address) => {
            if (this.props.data.checkout.result) {
                const newBillingAddress = { ...address };
                if (address.ThreeLetterISORegionName && !newBillingAddress.TwoLetterISORegionName) {
                    newBillingAddress.TwoLetterISORegionName = this.addressFormat.getTwoLetterISORegionName(address.ThreeLetterISORegionName);
                }
                this.props.data.checkout.result.updateBillingAddress({ newBillingAddress, additionalProperties: { isBillingAddressSameAsShippingAddress: this.isBillingAddressSameAsShipping } });
            }
        };
        this._resetView = () => {
            this._updateCurrentOperation(AddressOperation.Show, this.billingAddress);
            this._updateModuleState();
        };
        this._updateCurrentOperation = (operation, selectedAddress) => {
            this.currentOperation = operation;
            this.selectedAddress = selectedAddress;
            if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {
                this.addUpdateAddress = { ...this.selectedAddress } || {};
                set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId });
                set(this.addUpdateAddress, { ['AddressTypeValue']: this.addUpdateAddress.AddressTypeValue || this.defaultAddressType });
            }
        };
        this._updateModuleState = () => {
            if (this.currentOperation === AddressOperation.Show) {
                this.props.moduleState.onReady();
            }
            else {
                this.props.moduleState.onUpdating();
            }
        };
        const { context, data, resources, telemetry } = this.props;
        this.addUpdateAddress = {};
        this.validationError = {};
        this.isBillingAddressSameAsShipping = false;
        this.resources = resources;
        this.currentOperation = AddressOperation.List;
        this.addressPurposes = data.addressPurposes.result || [];
        this.countryRegions = data.countryRegions.result || [];
        this.stateProvinceInfo = data.countryStates.result || [];
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        this.props.data.checkout.then(() => {
            this._setDefaultCountryRegionId();
            this._initModuleState();
        });
        reaction(() => this.countryRegionId, () => this._getStateProvinces());
        reaction(() => this.currentOperation, () => {
            this._getStateProvinces();
        });
        reaction(() => this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress, shippingAddress => {
            if (this.props.moduleState.isUpdating) {
                if (shippingAddress && this.isBillingAddressSameAsShipping) {
                    this.isBillingAddressSameAsShipping = true;
                    this._updateCurrentOperation(AddressOperation.Show, shippingAddress);
                }
                else if (shippingAddress && this.isBillingAddressSameAsShipping) {
                    this._updateCurrentOperation(AddressOperation.Show, shippingAddress);
                }
            }
        });
        reaction(() => this.isBillingAddressRequried, isBillingAddressRequried => {
            if (isBillingAddressRequried) {
                if (this.props.moduleState.isDisabled) {
                    this.onEdit();
                }
            }
            else {
                this.props.data.checkout.result?.removeBillingAddress({});
                this.props.moduleState.onDisable();
            }
        });
    }
    render() {
        if (!(this.isBillingAddressRequried)) {
            return null;
        }
        const { resources } = this.props;
        const { renderView, config } = this.props;
        const viewProps = {
            ...this.props,
            currentOperation: this.currentOperation,
            selectedAddress: this.selectedAddress,
            addUpdateAddress: this.addUpdateAddress,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            className: config.className,
            viewState: {
                isShowAddress: this.selectedAddress && this.currentOperation === AddressOperation.Show,
                isShowAddOrUpdateAddress: this.currentOperation !== AddressOperation.Show,
                isShowSameAsShippingCheckbox: this.isCartContainsItemsForShipping && this.props.moduleState.isUpdating
            },
            CheckoutBillingAddress: {
                moduleProps: this.props,
                className: classnames('ms-checkout-billing-address', config.className)
            },
            heading: React.createElement(AddressBillingHeadingComponent, Object.assign({}, { text: resources.addressBillingAddressHeading })),
            sameAsShippingCheckbox: (React.createElement(AddressBillingCheckoxComponent, Object.assign({}, {
                isChecked: this.isBillingAddressSameAsShipping,
                type: 'checkbox',
                value: 'true',
                ariaLabel: resources.addressSameAsShippingAddressAriaLabel,
                text: resources.addressSameAsShippingAddressText,
                telemetryContent: this.telemetryContent,
                onChange: this._onBillingAddressSameAsShippingChange
            }))),
            showAddress: this._renderShowAddress(),
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()
        };
        return renderView(viewProps);
    }
    _renderShowAddress() {
        if (this.selectedAddress) {
            return AddressShow({ address: this.selectedAddress, addressFormat: this.addressFormat.getAddressFormat(this.selectedAddress.ThreeLetterISORegionName || ''), addressPurposes: this.addressPurposes });
        }
        return null;
    }
    _setDefaultCountryRegionId() {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;
        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);
    }
    get isCartContainsItemsForShipping() {
        const { request } = this.props.context;
        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;
        return ((this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart.CartLines) || []).some(cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine);
    }
    get billingAddress() {
        return this.props.data.checkout.result && this.props.data.checkout.result.billingAddress;
    }
    get shippingAddress() {
        return this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress;
    }
    get getLoyaltyAmount() {
        const checkoutState = this.props.data.checkout.result;
        return checkoutState && checkoutState.loyaltyAmount ? checkoutState.loyaltyAmount : 0;
    }
    get getGiftCardTotalAmount() {
        const checkoutState = this.props.data.checkout.result;
        if (!checkoutState || !checkoutState.giftCardExtends) {
            return 0;
        }
        return checkoutState.giftCardExtends.reduce((count, giftCard) => {
            return count + (giftCard.Balance || 0);
        }, 0);
    }
    get shouldPaidByCard() {
        const { data: { checkout }, config } = this.props;
        if (!checkout.result) {
            return false;
        }
        const checkoutResult = checkout.result;
        const cart = checkoutResult.checkoutCart.cart;
        if (!cart || !cart.CartLines || !cart.CartLines.length) {
            return false;
        }
        const { paymentTenderType, tokenizedPaymentCard } = checkoutResult;
        const isPaidByOtherPaymentSource = config.paymenTenderType !== paymentTenderType && tokenizedPaymentCard;
        const amountDue = (cart.TotalAmount || 0) - this.getGiftCardTotalAmount - this.getLoyaltyAmount;
        return amountDue > 0 && !isPaidByOtherPaymentSource;
    }
    get isBillingAddressRequried() {
        return this.shouldPaidByCard;
    }
};
__decorate([
    observable
], CheckoutBillingAddress.prototype, "currentOperation", void 0);
__decorate([
    observable
], CheckoutBillingAddress.prototype, "isBillingAddressSameAsShipping", void 0);
__decorate([
    observable
], CheckoutBillingAddress.prototype, "selectedAddress", void 0);
__decorate([
    observable
], CheckoutBillingAddress.prototype, "addUpdateAddress", void 0);
__decorate([
    observable
], CheckoutBillingAddress.prototype, "countryRegionId", void 0);
__decorate([
    observable
], CheckoutBillingAddress.prototype, "stateProvinceInfo", void 0);
__decorate([
    observable
], CheckoutBillingAddress.prototype, "validationError", void 0);
__decorate([
    observable
], CheckoutBillingAddress.prototype, "addressActionResponse", void 0);
__decorate([
    computed
], CheckoutBillingAddress.prototype, "isCartContainsItemsForShipping", null);
__decorate([
    computed
], CheckoutBillingAddress.prototype, "billingAddress", null);
__decorate([
    computed
], CheckoutBillingAddress.prototype, "shippingAddress", null);
__decorate([
    computed
], CheckoutBillingAddress.prototype, "getLoyaltyAmount", null);
__decorate([
    computed
], CheckoutBillingAddress.prototype, "getGiftCardTotalAmount", null);
__decorate([
    computed
], CheckoutBillingAddress.prototype, "shouldPaidByCard", null);
__decorate([
    computed
], CheckoutBillingAddress.prototype, "isBillingAddressRequried", null);
CheckoutBillingAddress = __decorate([
    withModuleState,
    observer
], CheckoutBillingAddress);
export default CheckoutBillingAddress;
//# sourceMappingURL=checkout-billing-address.js.map