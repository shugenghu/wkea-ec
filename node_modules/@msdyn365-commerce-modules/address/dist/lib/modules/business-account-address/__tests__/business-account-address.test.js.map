{"version":3,"file":"business-account-address.test.js","sourceRoot":"./src/","sources":["modules/business-account-address/__tests__/business-account-address.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\n\nimport { buildHydratedMockActionContext, buildMockModuleProps, ICultureInfoFormatter, IRequestContext } from '@msdyn365-commerce/core';\nimport { Address, AddressPurpose, AsyncResult, CountryRegionInfo, StateProvinceInfo } from '@msdyn365-commerce/retail-proxy';\n// @ts-ignore: Import is used below, but not recognized by compiler\nimport { getCountryRegionsByLanguageIdAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport { render } from 'enzyme';\nimport mockCountryRegions from '../../../common/__mocks__/country-regions';\nimport MockTelemetry from '../../../common/__mocks__/MockTelemetry';\nimport BusinessAccountAddress from '../business-account-address';\nimport { IBusinessAccountAddressData } from '../business-account-address.data';\nimport { IBusinessAccountAddressProps, IBusinessAccountAddressResources } from '../business-account-address.props.autogenerated';\nimport renderView from '../business-account-address.view';\n\nconst mockData: IBusinessAccountAddressData = {\n    // @ts-ignore\n    countryRegions: {\n        status: 'SUCCESS',\n        result: mockCountryRegions as CountryRegionInfo[]\n    },\n    countryStates: AsyncResult.resolve([] as StateProvinceInfo[]),\n    addressPurposes: AsyncResult.resolve([] as AddressPurpose[])\n};\n\nconst mockUpdateForm = (errors: boolean, fakeAddress?: Address): void => {\n    return;\n};\n\nconst mockConfig = {};\n\nconst mockResources: IBusinessAccountAddressResources = {\n    addressAddButtonText: 'Add address',\n    addressAddButtonAriaLabel: 'Add address',\n    addressPrimaryButtonText: 'Set as primary address',\n    addressPrimaryButtonAriaLabel: 'Set {addressName} address as your primary address',\n    addressEditButtonText: 'Edit',\n    addressEditButtonAriaLabel: 'Edit {addressName} address',\n    addressRemoveButtonText: 'Remove',\n    addressRemoveButtonAriaLabel: 'Remove {addressName} address',\n    addressSaveButtonText: 'Save',\n    addressSaveButtonAriaLabel: 'Save',\n    addressCancelButtonText: 'Cancel',\n    addressCancelButtonAriaLabel: 'Cancel',\n    addressStateDefaultSelectionText: 'Select state',\n    addressNameLabel: 'Name *',\n    addressNameLabelOptional: 'Name',\n    addressNameRequiredErrorMessage: 'Name is required',\n    addressPhoneLabel: 'Phone *',\n    addressPhoneRequiredErrorMessage: 'Phone is required',\n    addressZipCodeLabel: 'Zip code *',\n    addressZipCodeLabelOptional: 'Zip code',\n    addressZipCodeRequiredErrorMessage: 'Zip code is required',\n    addressCityLabel: 'City *',\n    addressCityLabelOptional: 'City',\n    addressCityRequiredErrorMessage: 'City is required',\n    addressCountyLabel: 'County *',\n    addressCountyLabelOptional: 'County',\n    addressCountyRequiredErrorMessage: 'County is required',\n    addressStateLabel: 'State *',\n    addressStateLabelOptional: 'State',\n    addressStateRequiredErrorMessage: 'State is required',\n    addressThreeLetterISORegionNameLabel: 'Country *',\n    addressThreeLetterISORegionNameLabelOptional: 'Country',\n    addressThreeLetterISORegionNameRequiredErrorMessage: 'Country is required',\n    addressStreetLabel: 'Street *',\n    addressStreetLabelOptional: 'Street',\n    addressStreetRequiredErrorMessage: 'Street is required',\n    addressDistrictLabel: 'District ',\n    addressDistrictRequiredErrorMessage: 'District is required',\n    addressStreetNumberLabel: 'Street number',\n    addressStreetNumberRequiredErrorMessage: 'Street number is required',\n    addressBuildingComplimentLabel: 'Building compliment',\n    addressBuildingComplimentRequiredErrorMessage: 'Building compliment is required',\n    addressPostboxLabel: 'Post box',\n    addressPostboxRequiredErrorMessage: 'Post box is required',\n    addressHouseRULabel: 'House',\n    addressHouseRURequiredErrorMessage: 'House is required',\n    addressFlatRULabel: 'Flat',\n    addressFlatRURequiredErrorMessage: 'Flat is required',\n    addressCountryOKSMCodeRULabel: 'Countryoksmcode',\n    addressCountryOKSMCodeRURequiredErrorMessage: 'Countryoksmcode field is required',\n    addressErrorMessageTitle: 'Error message',\n    addressGenericErrorMessage: 'Something went wrong. Please try again later',\n    addressEmptyListAddressMessage: 'No addresses are present. Please add one.',\n    addressAddressTypeValueLabel: 'Address type *',\n    addressAddressTypeValueLabelOptional: 'Address type'\n};\n\nconst mockActions = {};\n\ndescribe('Business Account Address', () => {\n    let moduleProps: IBusinessAccountAddressProps<IBusinessAccountAddressData>;\n\n    beforeAll(() => {\n        const mockContext = {\n            actionContext: buildHydratedMockActionContext(),\n            app: {},\n            telemetry: new MockTelemetry(),\n            request: {\n                url: {\n                    staticCdnUrl: 'testOriginUrl'\n                },\n                channel: {\n                    PickupDeliveryModeCode: '70',\n                    ChannelCountryRegionISOCode: 'US'\n                  }\n            } as IRequestContext,\n            cultureFormatter: {} as ICultureInfoFormatter\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as IBusinessAccountAddressProps<IBusinessAccountAddressData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView\n        };\n    });\n\n    it('renders correctly', async () => {\n        const component = render(<BusinessAccountAddress {...moduleProps} updateForm={mockUpdateForm} hasError={false} isRequired={false} resetAddress={false}/>);\n        expect(component).toMatchSnapshot();\n    });\n});\n"]}