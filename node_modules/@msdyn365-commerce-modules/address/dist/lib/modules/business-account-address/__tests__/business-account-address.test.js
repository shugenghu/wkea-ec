import * as React from 'react';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { AsyncResult } from '@msdyn365-commerce/retail-proxy';
import { render } from 'enzyme';
import mockCountryRegions from '../../../common/__mocks__/country-regions';
import MockTelemetry from '../../../common/__mocks__/MockTelemetry';
import BusinessAccountAddress from '../business-account-address';
import renderView from '../business-account-address.view';
const mockData = {
    countryRegions: {
        status: 'SUCCESS',
        result: mockCountryRegions
    },
    countryStates: AsyncResult.resolve([]),
    addressPurposes: AsyncResult.resolve([])
};
const mockUpdateForm = (errors, fakeAddress) => {
    return;
};
const mockConfig = {};
const mockResources = {
    addressAddButtonText: 'Add address',
    addressAddButtonAriaLabel: 'Add address',
    addressPrimaryButtonText: 'Set as primary address',
    addressPrimaryButtonAriaLabel: 'Set {addressName} address as your primary address',
    addressEditButtonText: 'Edit',
    addressEditButtonAriaLabel: 'Edit {addressName} address',
    addressRemoveButtonText: 'Remove',
    addressRemoveButtonAriaLabel: 'Remove {addressName} address',
    addressSaveButtonText: 'Save',
    addressSaveButtonAriaLabel: 'Save',
    addressCancelButtonText: 'Cancel',
    addressCancelButtonAriaLabel: 'Cancel',
    addressStateDefaultSelectionText: 'Select state',
    addressNameLabel: 'Name *',
    addressNameLabelOptional: 'Name',
    addressNameRequiredErrorMessage: 'Name is required',
    addressPhoneLabel: 'Phone *',
    addressPhoneRequiredErrorMessage: 'Phone is required',
    addressZipCodeLabel: 'Zip code *',
    addressZipCodeLabelOptional: 'Zip code',
    addressZipCodeRequiredErrorMessage: 'Zip code is required',
    addressCityLabel: 'City *',
    addressCityLabelOptional: 'City',
    addressCityRequiredErrorMessage: 'City is required',
    addressCountyLabel: 'County *',
    addressCountyLabelOptional: 'County',
    addressCountyRequiredErrorMessage: 'County is required',
    addressStateLabel: 'State *',
    addressStateLabelOptional: 'State',
    addressStateRequiredErrorMessage: 'State is required',
    addressThreeLetterISORegionNameLabel: 'Country *',
    addressThreeLetterISORegionNameLabelOptional: 'Country',
    addressThreeLetterISORegionNameRequiredErrorMessage: 'Country is required',
    addressStreetLabel: 'Street *',
    addressStreetLabelOptional: 'Street',
    addressStreetRequiredErrorMessage: 'Street is required',
    addressDistrictLabel: 'District ',
    addressDistrictRequiredErrorMessage: 'District is required',
    addressStreetNumberLabel: 'Street number',
    addressStreetNumberRequiredErrorMessage: 'Street number is required',
    addressBuildingComplimentLabel: 'Building compliment',
    addressBuildingComplimentRequiredErrorMessage: 'Building compliment is required',
    addressPostboxLabel: 'Post box',
    addressPostboxRequiredErrorMessage: 'Post box is required',
    addressHouseRULabel: 'House',
    addressHouseRURequiredErrorMessage: 'House is required',
    addressFlatRULabel: 'Flat',
    addressFlatRURequiredErrorMessage: 'Flat is required',
    addressCountryOKSMCodeRULabel: 'Countryoksmcode',
    addressCountryOKSMCodeRURequiredErrorMessage: 'Countryoksmcode field is required',
    addressErrorMessageTitle: 'Error message',
    addressGenericErrorMessage: 'Something went wrong. Please try again later',
    addressEmptyListAddressMessage: 'No addresses are present. Please add one.',
    addressAddressTypeValueLabel: 'Address type *',
    addressAddressTypeValueLabelOptional: 'Address type'
};
const mockActions = {};
describe('Business Account Address', () => {
    let moduleProps;
    beforeAll(() => {
        const mockContext = {
            actionContext: buildHydratedMockActionContext(),
            app: {},
            telemetry: new MockTelemetry(),
            request: {
                url: {
                    staticCdnUrl: 'testOriginUrl'
                },
                channel: {
                    PickupDeliveryModeCode: '70',
                    ChannelCountryRegionISOCode: 'US'
                }
            },
            cultureFormatter: {}
        };
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView
        };
    });
    it('renders correctly', async () => {
        const component = render(React.createElement(BusinessAccountAddress, Object.assign({}, moduleProps, { updateForm: mockUpdateForm, hasError: false, isRequired: false, resetAddress: false })));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=business-account-address.test.js.map