{"version":3,"file":"business-account-address.js","sourceRoot":"./src/","sources":["modules/business-account-address/business-account-address.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\n\nimport { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo } from '@msdyn365-commerce/retail-proxy';\nimport classnames from 'classnames';\nimport { observable, set } from 'mobx';\nimport { AddressCommon } from '../../common/address-common';\nimport { AddressFormat } from '../../common/address-format';\nimport { AddressItemDisplayType, AddressItemType, AddressValidationRuleType, IAddressItem } from '../../common/address-format.data';\nimport { AddressMetaData } from '../../common/address-meta-data';\nimport { AddressOperation, AddressType, IAddressResource, IAddressResponse } from '../../common/address-module.data';\nimport { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';\nimport { IBusinessAccountAddressData } from './business-account-address.data';\nimport { IBusinessAccountAddressProps } from './business-account-address.props.autogenerated';\n\nexport interface IBusinessAccountAddressExtendedProps extends IBusinessAccountAddressProps<IBusinessAccountAddressData> {\n    hasError: boolean;\n    isRequired: boolean;\n    resetAddress: boolean;\n    updateForm(errors: boolean, currentAddress?: Address): void;\n}\n\nexport interface IBusinessAccountAddressState {\n    countryId?: string;\n    states?: StateProvinceInfo[];\n}\n\nexport interface IBusinessAccountAddressViewProps {\n    className: string;\n    currentOperation: AddressOperation;\n    selectedAddress?: Address;\n    addUpdateAddress: Address;\n    addressListSelectedAddress: Address;\n    countryRegionId: string;\n    stateProvinceInfo?: StateProvinceInfo[];\n    customerAddresses: Address[];\n    validationError: object;\n    addressActionResponse?: IAddressResponse;\n    BusinessAccountAddress: IModuleProps;\n    isUpdating: boolean;\n    hasError: boolean;\n    showAddOrUpdateAddress: IAddressAddUpdateProps;\n}\n\n/**\n *\n * Address component\n * @extends {React.Component<IBusinessAccountAddressProps<IBusinessAccountAddressData>, IBusinessAccountAddressState>}\n */\nclass BusinessAccountAddress extends React.Component<IBusinessAccountAddressExtendedProps, IBusinessAccountAddressState> {\n    @observable private addUpdateAddress: Address;\n    @observable private countryRegionId: string = 'USA';\n    @observable private stateProvinceInfo?: StateProvinceInfo[];\n    @observable private validationError: object;\n\n    private addressActionResponse?: IAddressResponse;\n    private isUpdating?: boolean;\n    private addressCommon: AddressCommon;\n    private addressFormat: AddressFormat;\n    private countryRegions: CountryRegionInfo[];\n    private addressPurposes: AddressPurpose[];\n    private resources: IAddressResource;\n    private defaultAddressType: number = 8; // Default to Business\n    private excludedList: AddressItemType[] = [AddressItemType.Name, AddressItemType.AddressTypeValue, AddressItemType.IsPrimary]; // Default to hiding Name and AddressType inputs\n    private telemetryContent: ITelemetryContent;\n\n    constructor(props: IBusinessAccountAddressExtendedProps) {\n        super(props);\n\n        const { context, data, resources, telemetry } = this.props;\n        this.addUpdateAddress = {};\n        this.resources = resources;\n        this.countryRegions = data.countryRegions.result || [];\n        this.addressPurposes = data.addressPurposes.result || [];\n        this.stateProvinceInfo = data.countryStates.result || [];\n        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, props.isRequired ? undefined : []), this.addressPurposes);\n        this.addressCommon = new AddressCommon(context, resources, telemetry);\n        this.validationError = {};\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this._setDefaultCountryRegionId();\n    }\n\n    public render(): JSX.Element | null {\n        const { renderView, config, hasError, resetAddress } = this.props;\n\n        // business-sign-up will pass this flag when cancel button is clicked\n        if (resetAddress) {\n            this._resetAddressFields();\n        }\n\n        const viewProps = {\n            ...this.props,\n            countryRegionId: this.countryRegionId,\n            stateProvinceInfo: this.stateProvinceInfo,\n            validationError: this.validationError,\n            addressActionResponse: this.addressActionResponse,\n            hasError: hasError,\n            className: config.className,\n            BusinessAccountAddress: {\n                moduleProps: this.props,\n                className: classnames('ms-business-account-address', config.className)\n            },\n            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()\n        };\n\n        return renderView(viewProps) as React.ReactElement;\n    }\n\n    public _resetAddressFields = () => {\n        const addressFormat = this.addressFormat.getAddressFormat(this.countryRegionId);\n\n        addressFormat.map(addressFormatItem => {\n            switch (addressFormatItem.displayType) {\n                case AddressItemDisplayType.Input:\n                    this.addUpdateAddress[addressFormatItem.name] = '';\n                    break;\n                case AddressItemDisplayType.Checkbox:\n                    this.addUpdateAddress[addressFormatItem.name] = false;\n                    break;\n                default:\n                    switch(addressFormatItem.type) {\n                        case AddressItemType.ThreeLetterISORegionName:\n                            this.addUpdateAddress[addressFormatItem.name] = this.countryRegionId;\n                            break;\n                        case AddressItemType.AddressTypeValue:\n                            this.addUpdateAddress[addressFormatItem.name] = this.defaultAddressType;\n                            break;\n                        case AddressItemType.State:\n                            this.addUpdateAddress[addressFormatItem.name] = '';\n                            break;\n                        default:\n                            this.addUpdateAddress[addressFormatItem.name] = undefined;\n                    }\n            }\n        });\n    }\n\n    // set validationError and hasError to hide error messages since in the B2B\n    // request form, no errors would visually show since user wont be able to submit\n    // until form is filled and correct\n    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {\n        return AddressAddUpdate({\n            isUpdating: this.isUpdating,\n            resources: this.resources,\n            addressType: AddressType.Company,\n            addressFormat: this.addressFormat.getAddressFormat(this.countryRegionId),\n            defaultCountryRegionId: this.countryRegionId,\n            defaultAddressType: this.defaultAddressType,\n            selectedAddress: this.addUpdateAddress,\n            validationError: this.validationError,\n            hasError: this.props.hasError,\n            addressActionResponse: this.addressActionResponse,\n            telemetryContent: this.telemetryContent,\n            dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(\n                this.resources.addressStateDefaultSelectionText,\n                this.stateProvinceInfo\n            ),\n            onInputChange: this._onAddressAddUpdateInputChange,\n            onDropdownChange: this._onAddressAddUpdateDropdownChange\n        });\n    };\n    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this._updateAddress(event.target.name, event.target.value);\n    };\n\n    private _onAddressAddUpdateDropdownChange = async (event: React.ChangeEvent<HTMLSelectElement>): Promise<void> => {\n        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {\n            await this._updateCountryRegionId(event.target.value);\n        } else {\n            this._updateAddress(event.target.name, event.target.value);\n        }\n    };\n\n    private _updateAddress = (name: string, value: string | number) => {\n        const { updateForm, isRequired, resources } = this.props;\n        let cleanValue = value;\n        if (typeof(value) === 'string') {\n            cleanValue = (value || '').replace(new RegExp('[<>]', 'gi'), '');\n        }\n        set(this.addUpdateAddress, { [name]: cleanValue });\n\n        if (this._isEmpty()) {\n            if (isRequired) {\n                updateForm(true, undefined);\n            } else {\n                // reset addressFormat as if address was NOT a required field\n                this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, []), this.addressPurposes);\n                updateForm(false, this.addUpdateAddress);\n            }\n        } else {\n            // get new addressFormat as if address was a required field\n            this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, undefined), this.addressPurposes);\n            // verify with new rules\n            if (this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {\n                updateForm(false, this.addUpdateAddress);\n            } else {\n                updateForm(true, undefined);\n            }\n        }\n    };\n\n    // walk through array and check if valued is defined or value is not an empty string\n    private _isEmpty = () => {\n        const addressFormat = this.addressFormat.getAddressFormat(this.countryRegionId);\n        for (let i = 0; i < addressFormat.length; i ++) {\n            const addressFormatItem = addressFormat[i];\n            if (addressFormatItem.type !== AddressItemType.ThreeLetterISORegionName || this._isInputRequired(addressFormatItem)) {\n                const addressItemValue = this.addUpdateAddress[addressFormatItem.name];\n\n                // check each input field, if value is defined and not an empty string --> address is not empty\n                if (addressItemValue || (addressItemValue && addressItemValue !== '')) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private _isInputRequired = (addressFormatItem: IAddressItem): boolean => {\n        if (addressFormatItem === null || !addressFormatItem.validationRules || addressFormatItem.validationRules.length === 0) {\n            return false;\n        }\n\n        for (const validationRule of addressFormatItem.validationRules) {\n            if (validationRule.type === AddressValidationRuleType.Required) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private _setDefaultCountryRegionId(): void {\n        const { request } = this.props.context;\n        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;\n\n        // tslint:disable: no-floating-promises\n        this._updateCountryRegionId(this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market));\n\n        // set default AddressType\n        set(this.addUpdateAddress, { AddressTypeValue: this.defaultAddressType });\n    }\n\n    private _updateCountryRegionId = async (value: string) => {\n        this.countryRegionId = value;\n\n        await this.addressCommon.getStateProvinces(this.countryRegionId).then((result: StateProvinceInfo[]) => {\n            const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);\n            // Reset state if selected state not found in the list.\n            if (!stateInfo) {\n                this._updateAddress('State', '');\n            }\n\n            this.stateProvinceInfo = result;\n        });\n\n        this._updateAddress('ThreeLetterISORegionName', this.countryRegionId);\n    }\n}\n\nexport default BusinessAccountAddress;\n"]}