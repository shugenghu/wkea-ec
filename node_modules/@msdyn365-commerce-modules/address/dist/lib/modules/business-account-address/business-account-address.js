import { __decorate } from "tslib";
import * as React from 'react';
import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { observable, set } from 'mobx';
import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemDisplayType, AddressItemType, AddressValidationRuleType } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import { AddressType } from '../../common/address-module.data';
import { AddressAddUpdate } from '../../common/components/address-add';
class BusinessAccountAddress extends React.Component {
    constructor(props) {
        super(props);
        this.countryRegionId = 'USA';
        this.defaultAddressType = 8;
        this.excludedList = [AddressItemType.Name, AddressItemType.AddressTypeValue, AddressItemType.IsPrimary];
        this._resetAddressFields = () => {
            const addressFormat = this.addressFormat.getAddressFormat(this.countryRegionId);
            addressFormat.map(addressFormatItem => {
                switch (addressFormatItem.displayType) {
                    case AddressItemDisplayType.Input:
                        this.addUpdateAddress[addressFormatItem.name] = '';
                        break;
                    case AddressItemDisplayType.Checkbox:
                        this.addUpdateAddress[addressFormatItem.name] = false;
                        break;
                    default:
                        switch (addressFormatItem.type) {
                            case AddressItemType.ThreeLetterISORegionName:
                                this.addUpdateAddress[addressFormatItem.name] = this.countryRegionId;
                                break;
                            case AddressItemType.AddressTypeValue:
                                this.addUpdateAddress[addressFormatItem.name] = this.defaultAddressType;
                                break;
                            case AddressItemType.State:
                                this.addUpdateAddress[addressFormatItem.name] = '';
                                break;
                            default:
                                this.addUpdateAddress[addressFormatItem.name] = undefined;
                        }
                }
            });
        };
        this._renderAddOrUpdateAddress = () => {
            return AddressAddUpdate({
                isUpdating: this.isUpdating,
                resources: this.resources,
                addressType: AddressType.Company,
                addressFormat: this.addressFormat.getAddressFormat(this.countryRegionId),
                defaultCountryRegionId: this.countryRegionId,
                defaultAddressType: this.defaultAddressType,
                selectedAddress: this.addUpdateAddress,
                validationError: this.validationError,
                hasError: this.props.hasError,
                addressActionResponse: this.addressActionResponse,
                telemetryContent: this.telemetryContent,
                dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),
                onInputChange: this._onAddressAddUpdateInputChange,
                onDropdownChange: this._onAddressAddUpdateDropdownChange
            });
        };
        this._onAddressAddUpdateInputChange = (event) => {
            this._updateAddress(event.target.name, event.target.value);
        };
        this._onAddressAddUpdateDropdownChange = async (event) => {
            if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
                await this._updateCountryRegionId(event.target.value);
            }
            else {
                this._updateAddress(event.target.name, event.target.value);
            }
        };
        this._updateAddress = (name, value) => {
            const { updateForm, isRequired, resources } = this.props;
            let cleanValue = value;
            if (typeof (value) === 'string') {
                cleanValue = (value || '').replace(new RegExp('[<>]', 'gi'), '');
            }
            set(this.addUpdateAddress, { [name]: cleanValue });
            if (this._isEmpty()) {
                if (isRequired) {
                    updateForm(true, undefined);
                }
                else {
                    this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, []), this.addressPurposes);
                    updateForm(false, this.addUpdateAddress);
                }
            }
            else {
                this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, undefined), this.addressPurposes);
                if (this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
                    updateForm(false, this.addUpdateAddress);
                }
                else {
                    updateForm(true, undefined);
                }
            }
        };
        this._isEmpty = () => {
            const addressFormat = this.addressFormat.getAddressFormat(this.countryRegionId);
            for (let i = 0; i < addressFormat.length; i++) {
                const addressFormatItem = addressFormat[i];
                if (addressFormatItem.type !== AddressItemType.ThreeLetterISORegionName || this._isInputRequired(addressFormatItem)) {
                    const addressItemValue = this.addUpdateAddress[addressFormatItem.name];
                    if (addressItemValue || (addressItemValue && addressItemValue !== '')) {
                        return false;
                    }
                }
            }
            return true;
        };
        this._isInputRequired = (addressFormatItem) => {
            if (addressFormatItem === null || !addressFormatItem.validationRules || addressFormatItem.validationRules.length === 0) {
                return false;
            }
            for (const validationRule of addressFormatItem.validationRules) {
                if (validationRule.type === AddressValidationRuleType.Required) {
                    return false;
                }
            }
            return true;
        };
        this._updateCountryRegionId = async (value) => {
            this.countryRegionId = value;
            await this.addressCommon.getStateProvinces(this.countryRegionId).then((result) => {
                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);
                if (!stateInfo) {
                    this._updateAddress('State', '');
                }
                this.stateProvinceInfo = result;
            });
            this._updateAddress('ThreeLetterISORegionName', this.countryRegionId);
        };
        const { context, data, resources, telemetry } = this.props;
        this.addUpdateAddress = {};
        this.resources = resources;
        this.countryRegions = data.countryRegions.result || [];
        this.addressPurposes = data.addressPurposes.result || [];
        this.stateProvinceInfo = data.countryStates.result || [];
        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, props.isRequired ? undefined : []), this.addressPurposes);
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.validationError = {};
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        this._setDefaultCountryRegionId();
    }
    render() {
        const { renderView, config, hasError, resetAddress } = this.props;
        if (resetAddress) {
            this._resetAddressFields();
        }
        const viewProps = {
            ...this.props,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            hasError: hasError,
            className: config.className,
            BusinessAccountAddress: {
                moduleProps: this.props,
                className: classnames('ms-business-account-address', config.className)
            },
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()
        };
        return renderView(viewProps);
    }
    _setDefaultCountryRegionId() {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;
        this._updateCountryRegionId(this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market));
        set(this.addUpdateAddress, { AddressTypeValue: this.defaultAddressType });
    }
}
__decorate([
    observable
], BusinessAccountAddress.prototype, "addUpdateAddress", void 0);
__decorate([
    observable
], BusinessAccountAddress.prototype, "countryRegionId", void 0);
__decorate([
    observable
], BusinessAccountAddress.prototype, "stateProvinceInfo", void 0);
__decorate([
    observable
], BusinessAccountAddress.prototype, "validationError", void 0);
export default BusinessAccountAddress;
//# sourceMappingURL=business-account-address.js.map