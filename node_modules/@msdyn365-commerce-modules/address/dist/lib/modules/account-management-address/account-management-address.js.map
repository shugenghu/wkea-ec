{"version":3,"file":"account-management-address.js","sourceRoot":"./src/","sources":["modules/account-management-address/account-management-address.tsx"],"names":[],"mappings":"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","sourcesContent":["\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { observable, reaction, set } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport {\n    Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { AddressCommon } from '../../common/address-common';\nimport { AddressFormat } from '../../common/address-format';\nimport { AddressItemType } from '../../common/address-format.data';\nimport { AddressMetaData } from '../../common/address-meta-data';\nimport {\n    AddressOperation, AddressType, IAddressResource, IAddressResponse\n} from '../../common/address-module.data';\nimport { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';\nimport { AddressList, IAddressListProps } from '../../common/components/address-list';\nimport { IAccountManagementAddressData } from './account-management-address.data';\nimport { IAccountManagementAddressProps } from './account-management-address.props.autogenerated';\n\nexport interface IAccountManagementAddressViewState {\n    isShowAddresList: boolean;\n    isShowAddOrUpdateAddress: boolean;\n}\n\nexport interface IAccountManagementAddressViewProps extends React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>> {\n    className: string;\n    currentOperation: AddressOperation;\n    selectedAddress?: Address;\n    addUpdateAddress: Address;\n    countryRegionId: string;\n    stateProvinceInfo?: StateProvinceInfo[];\n    customerAddresses: Address[];\n    validationError: object;\n    addressActionResponse?: IAddressResponse;\n    viewState: IAccountManagementAddressViewState;\n    AccountAddressManagement: IModuleProps;\n    isUpdating: boolean;\n    showAddressList: IAddressListProps;\n    showAddOrUpdateAddress: IAddressAddUpdateProps;\n}\n\n/**\n *\n * Address component\n * @extends {React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>>}\n */\n@observer\nclass AccountManagementAddress extends React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>> {\n    @observable private currentOperation: AddressOperation;\n    @observable private selectedAddress?: Address;\n    @observable private countryRegionId: string = 'USA';\n    @observable private stateProvinceInfo?: StateProvinceInfo[];\n    @observable private customerAddresses: Address[];\n    @observable private addUpdateAddress: Address;\n    @observable private validationError: object;\n    @observable private addressActionResponse?: IAddressResponse;\n    @observable private isUpdating?: boolean;\n    @observable private hasError?: boolean;\n\n    private addressCommon: AddressCommon;\n    private addressFormat: AddressFormat;\n    private countryRegions: CountryRegionInfo[];\n    private addressPurposes: AddressPurpose[];\n    private resources: IAddressResource;\n    private defaultAddressType: number = 6; // Default to Home\n    private telemetryContent: ITelemetryContent;\n\n    constructor(props: IAccountManagementAddressProps<IAccountManagementAddressData>) {\n        super(props);\n        const { context, data, resources, telemetry } = this.props;\n\n        this.resources = resources;\n        this.currentOperation = AddressOperation.List;\n        this.countryRegions = data.countryRegions.result || [];\n        this.addressPurposes = data.addressPurposes.result || [];\n        this.customerAddresses = data.address.result || [];\n        this.addUpdateAddress = {};\n        this.validationError = {};\n        this.addressCommon = new AddressCommon(context, resources, telemetry);\n        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this.props.data.countryRegions.then(() => {\n            this._setDefaultCountryRegionId();\n        });\n\n        reaction(\n            () => this.countryRegionId,\n            () => this._getStateProvinces()\n        );\n\n        reaction(\n            () => this.currentOperation,\n            () => {\n                this._getStateProvinces();\n            }\n        );\n    }\n\n    public render(): JSX.Element {\n        const { renderView, config } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            currentOperation: this.currentOperation,\n            selectedAddress: this.selectedAddress,\n            addUpdateAddress: this.addUpdateAddress,\n            countryRegionId: this.countryRegionId,\n            stateProvinceInfo: this.stateProvinceInfo,\n            customerAddresses: this.customerAddresses,\n            validationError: this.validationError,\n            addressActionResponse: this.addressActionResponse,\n            isUpdating: this.isUpdating,\n            hasError: this.hasError,\n            className: config.className,\n            viewState: {\n                isShowAddresList: this.currentOperation === AddressOperation.List,\n                isShowAddOrUpdateAddress: this.currentOperation !== AddressOperation.List,\n            },\n            AccountAddressManagement: {\n                moduleProps: this.props,\n                className: classnames('ms-account-management-address', config.className)\n            },\n            showAddressList: this._renderListAddress(),\n            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()\n        };\n\n        return renderView(viewProps) as React.ReactElement;\n    }\n\n    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {\n        return AddressAddUpdate(\n            {\n                isUpdating: this.isUpdating,\n                resources: this.resources,\n                addressType: AddressType.Shipping,\n                addressFormat: this.addressFormat.getAddressFormat((this.addUpdateAddress.ThreeLetterISORegionName) || this.countryRegionId),\n                defaultCountryRegionId: this.countryRegionId,\n                defaultAddressType: this.defaultAddressType,\n                selectedAddress: this.addUpdateAddress,\n                validationError: this.validationError,\n                addressActionResponse: this.addressActionResponse,\n                dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),\n                telemetryContent: this.telemetryContent,\n                onInputChange: this._onAddressAddUpdateInputChange,\n                onDropdownChange: this._onAddressAddUpdateDropdownChange,\n                onSave: this._onAddressAddUpdateSubmit,\n                onCancel: this._resetView\n            }\n        );\n    }\n\n    private _renderListAddress = (): IAddressListProps => {\n        const { config } = this.props;\n\n        return AddressList(\n            {\n                isUpdating: this.isUpdating,\n                selectedAddress: this.selectedAddress,\n                addressFormat: this.addressFormat,\n                addresses: this.customerAddresses,\n                addressPurposes: this.addressPurposes,\n                resources: this.resources,\n                heading: config.heading,\n                primaryAddressSectionHeading: config.primaryAddressSectionHeading,\n                otherAddressSectionHeading: config.otherAddressSectionHeading,\n                contextRequest: this.props.context.request,\n                telemetryContent: this.telemetryContent,\n                onEditAddress: this._goToEditAddress,\n                onRemoveAddress: this._onRemoveAddress,\n                onAddAddress: this._goToAddAddress,\n                onUpdatePrimaryAddress: this._onSubmitUpdatePrimaryAddress\n            }\n        );\n    };\n\n    private onAddressAddUpdate = (name: string, value: string | boolean | number) => {\n        set(this.addUpdateAddress, { [name]: value });\n        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);\n    }\n\n    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        if (event.target.type === 'checkbox') {\n            this.onAddressAddUpdate(event.target.name, event.target.checked);\n        } else {\n            const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');\n            this.onAddressAddUpdate(event.target.name, value);\n        }\n    }\n\n    private _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        if (event.target.name === AddressItemType[AddressItemType.AddressTypeValue]) {\n            this.onAddressAddUpdate(event.target.name, +event.target.value);\n        } else {\n            this.onAddressAddUpdate(event.target.name, event.target.value);\n        }\n        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {\n            this._onCountryChange(event.target.value);\n        }\n    }\n\n    private _onAddressUpdate = (response: Promise<IAddressResponse>, onSuccess: (response: IAddressResponse) => void): void => {\n\n        this.isUpdating = true;\n        response.then(\n            (result: IAddressResponse) => {\n                if (result.address) {\n                    this.hasError = false;\n                    onSuccess(result);\n                } else {\n                    this.hasError = true;\n                    this.addressActionResponse = result;\n                }\n                this.isUpdating = false;\n            },\n            () => {\n                this.hasError = true;\n                this.isUpdating = false;\n            }\n        );\n    }\n\n    private _onAddressAddUpdateSubmit = (): void => {\n        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {\n            return;\n        }\n        let response: Promise<IAddressResponse>;\n        if (this.addressCommon.isAuthenticatedFlow()) {\n            response = this.currentOperation === AddressOperation.Update ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress) : this.addressCommon.addCustomerAddress(this.addUpdateAddress);\n        } else {\n            response = Promise.resolve({ address: this.addUpdateAddress });\n        }\n\n        this._onAddressUpdate(response, this._onAddOrUpdateSuccess);\n    }\n\n    private _onCountryChange = (countryRegionId: string) => {\n        this.countryRegionId = countryRegionId;\n        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });\n    }\n\n    private _getAddressFormatExcludeList = (): AddressItemType[] => {\n        const { config } = this.props;\n        const addressFormatExcludeList: AddressItemType[] = [];\n\n        if (!config.showAddressType) {\n            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);\n        }\n\n        addressFormatExcludeList.push(AddressItemType.IsPrimary);\n\n        return addressFormatExcludeList;\n    }\n\n    private _getStateProvinces = (): void => {\n        if (!this.countryRegionId || !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)) {\n            return;\n        }\n\n        // tslint:disable-next-line:no-floating-promises\n        this.addressCommon.getStateProvinces(this.countryRegionId).then(\n            (result: StateProvinceInfo[]) => {\n                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);\n                // Reset state if selected state not found in the list.\n                if (!stateInfo) {\n                    set(this.addUpdateAddress, { ['State']: '' });\n                }\n                this.stateProvinceInfo = result;\n            });\n    }\n\n    private _setDefaultCountryRegionId(): void {\n        const { request } = this.props.context;\n        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;\n\n        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);\n    }\n\n    private _updateCurrentOperation = (operation: AddressOperation) => {\n        this.currentOperation = operation;\n    }\n\n    private _onSubmitUpdatePrimaryAddress = (address: Address): void => {\n        this.selectedAddress = address;\n        const response = this.addressCommon.updateCustomerPrimaryAddress(address);\n        this._onAddressUpdate(response, this._onUpdatePrimaryAddressSuccess);\n    }\n\n    private _goToEditAddress = (address: Address): void => {\n        this.addUpdateAddress = { ...address };\n        this.countryRegionId = this.addUpdateAddress.ThreeLetterISORegionName || 'USA';\n        this._updateCurrentOperation(AddressOperation.Update);\n    }\n\n    private _onRemoveAddress = (address: Address): void => {\n        address.Deactivate = true;\n        const response = this.addressCommon.updateCustomerAddress(address);\n        this._onAddressUpdate(response, this._onAddOrUpdateSuccess);\n    }\n\n    private _goToAddAddress = (): void => {\n        this.addUpdateAddress = {};\n        this._setDefaultCountryRegionId();\n        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: this.countryRegionId });\n        set(this.addUpdateAddress, { ['AddressTypeValue']: this.defaultAddressType });\n        this._setDefaultCountryRegionId();\n        this._updateCurrentOperation(AddressOperation.Add);\n    }\n\n    private _onAddOrUpdateSuccess = (response: IAddressResponse): void => {\n        if (response.customerAddresses) {\n            this.customerAddresses = response.customerAddresses;\n        }\n        this._resetView();\n    }\n\n    private _onUpdatePrimaryAddressSuccess = (response: IAddressResponse): void => {\n        if (response.customerAddresses) {\n            this.customerAddresses = response.customerAddresses;\n        }\n    }\n\n    private _resetView = (): void => {\n        this.selectedAddress = undefined;\n        this._updateCurrentOperation(AddressOperation.List);\n    }\n}\n\nexport default AccountManagementAddress;"]}