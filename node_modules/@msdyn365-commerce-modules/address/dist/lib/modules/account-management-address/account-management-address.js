import { __decorate } from "tslib";
import classnames from 'classnames';
import { observable, reaction, set } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemType } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import { AddressOperation, AddressType } from '../../common/address-module.data';
import { AddressAddUpdate } from '../../common/components/address-add';
import { AddressList } from '../../common/components/address-list';
let AccountManagementAddress = class AccountManagementAddress extends React.Component {
    constructor(props) {
        super(props);
        this.countryRegionId = 'USA';
        this.defaultAddressType = 6;
        this._renderAddOrUpdateAddress = () => {
            return AddressAddUpdate({
                isUpdating: this.isUpdating,
                resources: this.resources,
                addressType: AddressType.Shipping,
                addressFormat: this.addressFormat.getAddressFormat((this.addUpdateAddress.ThreeLetterISORegionName) || this.countryRegionId),
                defaultCountryRegionId: this.countryRegionId,
                defaultAddressType: this.defaultAddressType,
                selectedAddress: this.addUpdateAddress,
                validationError: this.validationError,
                addressActionResponse: this.addressActionResponse,
                dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),
                telemetryContent: this.telemetryContent,
                onInputChange: this._onAddressAddUpdateInputChange,
                onDropdownChange: this._onAddressAddUpdateDropdownChange,
                onSave: this._onAddressAddUpdateSubmit,
                onCancel: this._resetView
            });
        };
        this._renderListAddress = () => {
            const { config } = this.props;
            return AddressList({
                isUpdating: this.isUpdating,
                selectedAddress: this.selectedAddress,
                addressFormat: this.addressFormat,
                addresses: this.customerAddresses,
                addressPurposes: this.addressPurposes,
                resources: this.resources,
                heading: config.heading,
                primaryAddressSectionHeading: config.primaryAddressSectionHeading,
                otherAddressSectionHeading: config.otherAddressSectionHeading,
                contextRequest: this.props.context.request,
                telemetryContent: this.telemetryContent,
                onEditAddress: this._goToEditAddress,
                onRemoveAddress: this._onRemoveAddress,
                onAddAddress: this._goToAddAddress,
                onUpdatePrimaryAddress: this._onSubmitUpdatePrimaryAddress
            });
        };
        this.onAddressAddUpdate = (name, value) => {
            set(this.addUpdateAddress, { [name]: value });
            this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);
        };
        this._onAddressAddUpdateInputChange = (event) => {
            if (event.target.type === 'checkbox') {
                this.onAddressAddUpdate(event.target.name, event.target.checked);
            }
            else {
                const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
                this.onAddressAddUpdate(event.target.name, value);
            }
        };
        this._onAddressAddUpdateDropdownChange = (event) => {
            if (event.target.name === AddressItemType[AddressItemType.AddressTypeValue]) {
                this.onAddressAddUpdate(event.target.name, +event.target.value);
            }
            else {
                this.onAddressAddUpdate(event.target.name, event.target.value);
            }
            if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
                this._onCountryChange(event.target.value);
            }
        };
        this._onAddressUpdate = (response, onSuccess) => {
            this.isUpdating = true;
            response.then((result) => {
                if (result.address) {
                    this.hasError = false;
                    onSuccess(result);
                }
                else {
                    this.hasError = true;
                    this.addressActionResponse = result;
                }
                this.isUpdating = false;
            }, () => {
                this.hasError = true;
                this.isUpdating = false;
            });
        };
        this._onAddressAddUpdateSubmit = () => {
            if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
                return;
            }
            let response;
            if (this.addressCommon.isAuthenticatedFlow()) {
                response = this.currentOperation === AddressOperation.Update ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress) : this.addressCommon.addCustomerAddress(this.addUpdateAddress);
            }
            else {
                response = Promise.resolve({ address: this.addUpdateAddress });
            }
            this._onAddressUpdate(response, this._onAddOrUpdateSuccess);
        };
        this._onCountryChange = (countryRegionId) => {
            this.countryRegionId = countryRegionId;
            set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });
        };
        this._getAddressFormatExcludeList = () => {
            const { config } = this.props;
            const addressFormatExcludeList = [];
            if (!config.showAddressType) {
                addressFormatExcludeList.push(AddressItemType.AddressTypeValue);
            }
            addressFormatExcludeList.push(AddressItemType.IsPrimary);
            return addressFormatExcludeList;
        };
        this._getStateProvinces = () => {
            if (!this.countryRegionId || !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)) {
                return;
            }
            this.addressCommon.getStateProvinces(this.countryRegionId).then((result) => {
                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);
                if (!stateInfo) {
                    set(this.addUpdateAddress, { ['State']: '' });
                }
                this.stateProvinceInfo = result;
            });
        };
        this._updateCurrentOperation = (operation) => {
            this.currentOperation = operation;
        };
        this._onSubmitUpdatePrimaryAddress = (address) => {
            this.selectedAddress = address;
            const response = this.addressCommon.updateCustomerPrimaryAddress(address);
            this._onAddressUpdate(response, this._onUpdatePrimaryAddressSuccess);
        };
        this._goToEditAddress = (address) => {
            this.addUpdateAddress = { ...address };
            this.countryRegionId = this.addUpdateAddress.ThreeLetterISORegionName || 'USA';
            this._updateCurrentOperation(AddressOperation.Update);
        };
        this._onRemoveAddress = (address) => {
            address.Deactivate = true;
            const response = this.addressCommon.updateCustomerAddress(address);
            this._onAddressUpdate(response, this._onAddOrUpdateSuccess);
        };
        this._goToAddAddress = () => {
            this.addUpdateAddress = {};
            this._setDefaultCountryRegionId();
            set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: this.countryRegionId });
            set(this.addUpdateAddress, { ['AddressTypeValue']: this.defaultAddressType });
            this._setDefaultCountryRegionId();
            this._updateCurrentOperation(AddressOperation.Add);
        };
        this._onAddOrUpdateSuccess = (response) => {
            if (response.customerAddresses) {
                this.customerAddresses = response.customerAddresses;
            }
            this._resetView();
        };
        this._onUpdatePrimaryAddressSuccess = (response) => {
            if (response.customerAddresses) {
                this.customerAddresses = response.customerAddresses;
            }
        };
        this._resetView = () => {
            this.selectedAddress = undefined;
            this._updateCurrentOperation(AddressOperation.List);
        };
        const { context, data, resources, telemetry } = this.props;
        this.resources = resources;
        this.currentOperation = AddressOperation.List;
        this.countryRegions = data.countryRegions.result || [];
        this.addressPurposes = data.addressPurposes.result || [];
        this.customerAddresses = data.address.result || [];
        this.addUpdateAddress = {};
        this.validationError = {};
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        this.props.data.countryRegions.then(() => {
            this._setDefaultCountryRegionId();
        });
        reaction(() => this.countryRegionId, () => this._getStateProvinces());
        reaction(() => this.currentOperation, () => {
            this._getStateProvinces();
        });
    }
    render() {
        const { renderView, config } = this.props;
        const viewProps = {
            ...this.props,
            currentOperation: this.currentOperation,
            selectedAddress: this.selectedAddress,
            addUpdateAddress: this.addUpdateAddress,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            customerAddresses: this.customerAddresses,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            isUpdating: this.isUpdating,
            hasError: this.hasError,
            className: config.className,
            viewState: {
                isShowAddresList: this.currentOperation === AddressOperation.List,
                isShowAddOrUpdateAddress: this.currentOperation !== AddressOperation.List,
            },
            AccountAddressManagement: {
                moduleProps: this.props,
                className: classnames('ms-account-management-address', config.className)
            },
            showAddressList: this._renderListAddress(),
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()
        };
        return renderView(viewProps);
    }
    _setDefaultCountryRegionId() {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;
        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);
    }
};
__decorate([
    observable
], AccountManagementAddress.prototype, "currentOperation", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "selectedAddress", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "countryRegionId", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "stateProvinceInfo", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "customerAddresses", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "addUpdateAddress", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "validationError", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "addressActionResponse", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "isUpdating", void 0);
__decorate([
    observable
], AccountManagementAddress.prototype, "hasError", void 0);
AccountManagementAddress = __decorate([
    observer
], AccountManagementAddress);
export default AccountManagementAddress;
//# sourceMappingURL=account-management-address.js.map