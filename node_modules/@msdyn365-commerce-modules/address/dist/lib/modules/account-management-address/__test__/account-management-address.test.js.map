{"version":3,"file":"account-management-address.test.js","sourceRoot":"./src/","sources":["modules/account-management-address/__test__/account-management-address.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport * as renderer from 'react-test-renderer';\n\nimport {\n    buildMockModuleProps, ICultureInfoFormatter, IRequestContext\n} from '@msdyn365-commerce/core';\nimport { Address, AddressPurpose, AsyncResult, CountryRegionInfo } from '@msdyn365-commerce/retail-proxy';\n\nimport mockActionContext from '../../../common/__mocks__/action-context';\nimport MockTelemetry from '../../../common/__mocks__/MockTelemetry';\nimport AccountManagementAddress from '../account-management-address';\nimport { IAccountManagementAddressData } from '../account-management-address.data';\nimport {\n    AddAddressHeadingTag, EditAddressHeadingTag, HeadingTag, IAccountManagementAddressConfig,\n    IAccountManagementAddressProps, IAccountManagementAddressResources,\n    OtherAddressSectionHeadingTag, PrimaryAddressSectionHeadingTag\n} from '../account-management-address.props.autogenerated';\n\nconst mockData: IAccountManagementAddressData = {\n    address: AsyncResult.resolve([] as Address[]),\n    countryRegions: AsyncResult.resolve([] as CountryRegionInfo[]),\n    addressPurposes: AsyncResult.resolve([] as AddressPurpose[])\n};\n\nconst mockConfig: IAccountManagementAddressConfig = {\n    heading: {\n        text: 'Address',\n        tag: HeadingTag.h1\n    },\n    primaryAddressSectionHeading: {\n        text: 'Address',\n        tag: PrimaryAddressSectionHeadingTag.h2\n    },\n    otherAddressSectionHeading: {\n        text: 'Address',\n        tag: OtherAddressSectionHeadingTag.h2\n    },\n    addAddressHeading: {\n        text: 'Address',\n        tag: AddAddressHeadingTag.h1\n    },\n    editAddressHeading: {\n        text: 'Address',\n        tag: EditAddressHeadingTag.h1\n    }\n};\n\nconst mockResources: IAccountManagementAddressResources = {\n    addressAddButtonText: 'Add address',\n    addressAddButtonAriaLabel: 'Add address',\n    addressPrimaryButtonText: 'Set as primary address',\n    addressPrimaryButtonAriaLabel: 'Set {addressName} address as your primary address',\n    addressEditButtonText: 'Edit',\n    addressEditButtonAriaLabel: 'Edit {addressName} address',\n    addressRemoveButtonText: 'Remove',\n    addressRemoveButtonAriaLabel: 'Remove {addressName} address',\n    addressSaveButtonText: 'Save',\n    addressSaveButtonAriaLabel: 'Save',\n    addressCancelButtonText: 'Cancel',\n    addressCancelButtonAriaLabel: 'Cancel',\n    addressStateDefaultSelectionText: 'Select state',\n    addressNameLabel: 'Name',\n    addressNameRequiredErrorMessage: 'Name is required',\n    addressPhoneLabel: 'Phone',\n    addressPhoneRequiredErrorMessage: 'Phone is required',\n    addressZipCodeLabel: 'Zip code',\n    addressZipCodeRequiredErrorMessage: 'Zip code is required',\n    addressCityLabel: 'City',\n    addressCityRequiredErrorMessage: 'City is required',\n    addressCountyLabel: 'County',\n    addressCountyRequiredErrorMessage: 'County is required',\n    addressStateLabel: 'State',\n    addressStateRequiredErrorMessage: 'State is required',\n    addressThreeLetterISORegionNameLabel: 'Country',\n    addressThreeLetterISORegionNameRequiredErrorMessage: 'Country is required',\n    addressStreetLabel: 'Street',\n    addressStreetRequiredErrorMessage: 'Street is required',\n    addressDistrictLabel: 'District',\n    addressDistrictRequiredErrorMessage: 'District is required',\n    addressStreetNumberLabel: 'Street number',\n    addressStreetNumberRequiredErrorMessage: 'Street number is required',\n    addressBuildingComplimentLabel: 'Building compliment',\n    addressBuildingComplimentRequiredErrorMessage: 'Building compliment is required',\n    addressPostboxLabel: 'Post box',\n    addressPostboxRequiredErrorMessage: 'Post box is required',\n    addressHouseRULabel: 'House',\n    addressHouseRURequiredErrorMessage: 'House is required',\n    addressFlatRULabel: 'Flat',\n    addressFlatRURequiredErrorMessage: 'Flat is required',\n    addressCountryOKSMCodeRULabel: 'Countryoksmcode',\n    addressCountryOKSMCodeRURequiredErrorMessage: 'Countryoksmcode field is required',\n    addressErrorMessageTitle: 'Error message',\n    addressGenericErrorMessage: 'Something went wrong. Please try again later',\n    addressEmptyListAddressMessage: 'No addresses are present. Please add one.',\n    addressIsPrimaryLabel: 'Set as primary account',\n    addressAddressTypeValueLabel: 'Address type'\n};\n\nconst mockActions = {};\n\ndescribe('Account Management Address', () => {\n    let moduleProps: IAccountManagementAddressProps<IAccountManagementAddressData>;\n    beforeAll(() => {\n        moduleProps = { ...buildMockModuleProps(mockData, mockActions, mockConfig) as IAccountManagementAddressProps<IAccountManagementAddressData>, resources: mockResources };\n        moduleProps.context = {\n            actionContext: mockActionContext,\n            app: {},\n            telemetry: new MockTelemetry(),\n            request: {\n                url: {\n                    staticCdnUrl: 'testOriginUrl'\n                },\n                channel: {\n                    PickupDeliveryModeCode: '70',\n                    ChannelCountryRegionISOCode: 'US'\n                  }\n            } as IRequestContext,\n            cultureFormatter: {} as ICultureInfoFormatter\n        };\n    });\n    it('renders correctly', async () => {\n        const component: renderer.ReactTestRenderer = renderer.create(\n            <AccountManagementAddress {...moduleProps} />\n        );\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});"]}