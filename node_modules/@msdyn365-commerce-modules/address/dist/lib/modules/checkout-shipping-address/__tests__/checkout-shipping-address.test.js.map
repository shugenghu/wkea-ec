{"version":3,"file":"checkout-shipping-address.test.js","sourceRoot":"./src/","sources":["modules/checkout-shipping-address/__tests__/checkout-shipping-address.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport * as renderer from 'react-test-renderer';\n\nimport {\n    buildHydratedMockActionContext, buildMockModuleProps, ICultureInfoFormatter, IRequestContext\n} from '@msdyn365-commerce/core';\nimport { ICheckoutState } from '@msdyn365-commerce/global-state';\nimport {\n    Address, AddressPurpose, AsyncResult, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy';\n// @ts-ignore: Import is used below, but not recognized by compiler\nimport {\n    getCountryRegionsByLanguageIdAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\nimport MockTelemetry from '../../../common/__mocks__/MockTelemetry';\nimport CheckoutShippingAddress, { ICheckoutAddressProps } from '../checkout-shipping-address';\nimport { ICheckoutShippingAddressData } from '../checkout-shipping-address.data';\nimport {\n    ICheckoutShippingAddressResources\n} from '../checkout-shipping-address.props.autogenerated';\n\nconst mockData: ICheckoutShippingAddressData = {\n    // @ts-ignore only mock partial data\n    checkout: AsyncResult.resolve({\n        checkoutCart: {\n            cart: {\n                Id: '123',\n                CartLines: [\n                    {\n                        DeliveryMode: '60'\n                    }\n                ]\n            }\n        }\n    }) as AsyncResult<ICheckoutState>,\n    address: AsyncResult.resolve([] as Address[]),\n    countryRegions: AsyncResult.resolve([] as CountryRegionInfo[]),\n    addressPurposes: AsyncResult.resolve([] as AddressPurpose[]),\n    countryStates: AsyncResult.resolve([] as StateProvinceInfo[])\n};\n\nconst mockConfig = {};\n\nconst mockResources: ICheckoutShippingAddressResources = {\n    addressAddButtonText: 'Add address',\n    addressAddButtonAriaLabel: 'Add address',\n    addressPrimaryButtonText: 'Set as primary address',\n    addressPrimaryButtonAriaLabel: 'Set {addressName} address as your primary address',\n    addressEditButtonText: 'Edit',\n    addressEditButtonAriaLabel: 'Edit {addressName} address',\n    addressRemoveButtonText: 'Remove',\n    addressRemoveButtonAriaLabel: 'Remove {addressName} address',\n    addressSaveButtonText: 'Save',\n    addressSaveButtonAriaLabel: 'Save',\n    addressCancelButtonText: 'Cancel',\n    addressCancelButtonAriaLabel: 'Cancel',\n    addressStateDefaultSelectionText: 'Select state',\n    addressNameLabel: 'Name',\n    addressNameRequiredErrorMessage: 'Name is required',\n    addressPhoneLabel: 'Phone',\n    addressPhoneRequiredErrorMessage: 'Phone is required',\n    addressZipCodeLabel: 'Zip code',\n    addressZipCodeRequiredErrorMessage: 'Zip code is required',\n    addressCityLabel: 'City',\n    addressCityRequiredErrorMessage: 'City is required',\n    addressCountyLabel: 'County',\n    addressCountyRequiredErrorMessage: 'County is required',\n    addressStateLabel: 'State',\n    addressStateRequiredErrorMessage: 'State is required',\n    addressThreeLetterISORegionNameLabel: 'Country',\n    addressThreeLetterISORegionNameRequiredErrorMessage: 'Country is required',\n    addressStreetLabel: 'Street',\n    addressStreetRequiredErrorMessage: 'Street is required',\n    addressDistrictLabel: 'District',\n    addressDistrictRequiredErrorMessage: 'District is required',\n    addressStreetNumberLabel: 'Street number',\n    addressStreetNumberRequiredErrorMessage: 'Street number is required',\n    addressBuildingComplimentLabel: 'Building compliment',\n    addressBuildingComplimentRequiredErrorMessage: 'Building compliment is required',\n    addressPostboxLabel: 'Post box',\n    addressPostboxRequiredErrorMessage: 'Post box is required',\n    addressHouseRULabel: 'House',\n    addressHouseRURequiredErrorMessage: 'House is required',\n    addressFlatRULabel: 'Flat',\n    addressFlatRURequiredErrorMessage: 'Flat is required',\n    addressCountryOKSMCodeRULabel: 'Countryoksmcode',\n    addressCountryOKSMCodeRURequiredErrorMessage: 'Countryoksmcode field is required',\n    addressErrorMessageTitle: 'Error message',\n    addressGenericErrorMessage: 'Something went wrong. Please try again later',\n    addressEmptyListAddressMessage: 'No addresses are present. Please add one.',\n    addressIsPrimaryLabel: 'Set as primary address',\n    addressAddressTypeValueLabel: 'Address type'\n};\n\nconst mockActions = {};\n\ndescribe('Checkout Address', () => {\n    let moduleProps: ICheckoutAddressProps;\n    beforeAll(() => {\n        const mockContext = {\n            actionContext: buildHydratedMockActionContext(),\n            app: {},\n            telemetry: new MockTelemetry(),\n            request: {\n                url: {\n                    staticCdnUrl: 'testOriginUrl'\n                },\n                channel: {\n                    PickupDeliveryModeCode: '70',\n                    ChannelCountryRegionISOCode: 'US'\n                  }\n            } as IRequestContext,\n            cultureFormatter: {} as ICultureInfoFormatter\n        };\n        moduleProps = { ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutAddressProps, resources: mockResources };\n\n        // @ts-ignore\n        getCountryRegionsByLanguageIdAsync = jest.fn().mockImplementation((input, ctx) => {\n            return new Promise((resolve, reject) => {\n                resolve([]);\n            });\n        });\n    });\n\n    xit('renders correctly', async () => {\n        const component: renderer.ReactTestRenderer = renderer.create(\n            <CheckoutShippingAddress {...moduleProps} />\n        );\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n"]}