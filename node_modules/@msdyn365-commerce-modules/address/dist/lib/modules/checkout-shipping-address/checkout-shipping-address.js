import { __decorate } from "tslib";
import classnames from 'classnames';
import { computed, observable, reaction, set } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemType } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import { AddressOperation, AddressType } from '../../common/address-module.data';
import { AddressAddUpdate } from '../../common/components/address-add';
import { AddressSelect } from '../../common/components/address-select';
import { AddressShow } from '../../common/components/address-show';
let CheckoutShippingAddress = class CheckoutShippingAddress extends React.Component {
    constructor(props) {
        super(props);
        this.countryRegionId = 'USA';
        this.addressListSelectedAddress = {};
        this.defaultAddressType = 6;
        this._renderAddOrUpdateAddress = () => {
            const addressFormat = this.currentOperation === AddressOperation.Add && this.addressCommon.isAuthenticatedFlow() ? this.addressFormat : this.addressFormat;
            return AddressAddUpdate({
                isUpdating: this.isUpdating,
                resources: this.resources,
                addressType: AddressType.Shipping,
                addressFormat: addressFormat.getAddressFormat(this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId),
                defaultCountryRegionId: this.countryRegionId,
                defaultAddressType: this.defaultAddressType,
                selectedAddress: this.addUpdateAddress,
                validationError: this.validationError,
                hasError: this.hasError,
                addressActionResponse: this.addressActionResponse,
                telemetryContent: this.telemetryContent,
                dropdownDisplayData: addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),
                onInputChange: this._onAddressAddUpdateInputChange,
                onDropdownChange: this._onAddressAddUpdateDropdownChange,
                hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,
                onSave: this.onSubmit,
                onCancel: !this.selectedAddress && !this.addressCommon.isAuthenticatedFlow() ? () => { } : this._resetView
            });
        };
        this._renderSelectAddress = () => {
            return AddressSelect({
                addressFormat: this.addressFormat,
                addresses: this.customerAddresses,
                resources: this.resources,
                addressPurposes: this.addressPurposes,
                selectedAddress: this.addressListSelectedAddress,
                onAddressOptionChange: this._onAddressOptionChange,
                hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,
                telemetryContent: this.telemetryContent,
                onAddAddress: this._goToAddAddress,
                onSave: this._onSelectAddress,
                onCancel: !this.selectedAddress ? () => { } : this._resetView
            });
        };
        this._onAddressOptionChange = (event) => {
            const addressRecordId = event.currentTarget.value;
            const selectedAddress = this.customerAddresses.find(address => (address.RecordId || '').toString() === addressRecordId);
            if (selectedAddress) {
                this.addressListSelectedAddress = selectedAddress;
            }
        };
        this.onAddressAddUpdate = (name, value) => {
            set(this.addUpdateAddress, { [name]: value });
            this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);
        };
        this._onAddressAddUpdateInputChange = (event) => {
            if (event.target.type === 'checkbox') {
                this.onAddressAddUpdate(event.target.name, event.target.checked);
            }
            else {
                const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
                this.onAddressAddUpdate(event.target.name, value);
            }
        };
        this._onAddressAddUpdateDropdownChange = (event) => {
            this.onAddressAddUpdate(event.target.name, event.target.value);
            if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
                this._onCountryChange(event.target.value);
            }
        };
        this._onAddressAddUpdateSubmit = () => {
            if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
                return;
            }
            let response;
            if (this.addressCommon.isAuthenticatedFlow()) {
                response =
                    this.currentOperation === AddressOperation.Update
                        ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress)
                        : this.addressCommon.addCustomerAddress(this.addUpdateAddress);
            }
            else {
                response = Promise.resolve({ address: this.addUpdateAddress });
            }
            this.isUpdating = true;
            this._updateModuleState();
            response.then((result) => {
                this.isUpdating = false;
                if (result.address) {
                    this.hasError = false;
                    this._onAddOrUpdateSuccess(result);
                }
                else {
                    this.hasError = true;
                    this.addressActionResponse = result;
                    this._updateModuleState();
                }
            }, () => {
                this.hasError = true;
                this.isUpdating = false;
                this._updateModuleState();
            });
        };
        this._onCountryChange = (countryRegionId) => {
            this.countryRegionId = countryRegionId;
            set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });
        };
        this._getAddressFormatExcludeList = () => {
            const { config } = this.props;
            const addressFormatExcludeList = [];
            if (!config.showAddressType) {
                addressFormatExcludeList.push(AddressItemType.AddressTypeValue);
            }
            addressFormatExcludeList.push(AddressItemType.IsPrimary);
            return addressFormatExcludeList;
        };
        this._getStateProvinces = () => {
            if (!this.countryRegionId ||
                !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)) {
                return;
            }
            this.addressCommon.getStateProvinces(this.countryRegionId).then((result) => {
                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);
                if (!stateInfo) {
                    set(this.addUpdateAddress, { ['State']: '' });
                }
                this.stateProvinceInfo = result;
            });
        };
        this._getDefaultAddress = () => {
            if (this.customerAddresses) {
                const primaryAddress = this.customerAddresses.find((address) => address.IsPrimary);
                return primaryAddress || (this.customerAddresses.length > 0 ? this.customerAddresses[0] : undefined);
            }
            return undefined;
        };
        this._initModuleState = () => {
            this.props.moduleState.init({
                status: this._canShip() ? 'updating' : 'disabled',
                onEdit: this.onEdit,
                onCancel: this.onCancel,
                onSubmit: this.onSubmit
            });
            if (this._canShip()) {
                const defaultAddress = this._getShippingAddressFromCartLines() || this._getDefaultAddress();
                if (defaultAddress) {
                    this._updateCurrentOperation(AddressOperation.Show, defaultAddress);
                    this._setShippingAddress(defaultAddress);
                    this._updateModuleState();
                }
                else {
                    this._updateCurrentOperation(AddressOperation.Add);
                }
            }
        };
        this.onSubmit = () => {
            switch (this.currentOperation) {
                case AddressOperation.Add:
                case AddressOperation.Update:
                    this._onAddressAddUpdateSubmit();
                    break;
                case AddressOperation.List:
                    this._onSelectAddress();
                    break;
                default:
                    this.props.telemetry.error('Invalid operation');
            }
        };
        this.onCancel = () => {
            switch (this.currentOperation) {
                case AddressOperation.Add:
                case AddressOperation.Update:
                    if (!(!this.selectedAddress && !this.addressCommon.isAuthenticatedFlow())) {
                        this._resetView();
                    }
                    break;
                case AddressOperation.List:
                    if (this.selectedAddress) {
                        this._resetView();
                    }
                    break;
                default:
                    this.props.telemetry.error('Invalid operation');
            }
        };
        this.onEdit = () => {
            if (this.addressCommon.isAuthenticatedFlow() && this.shippingAddress) {
                this._updateCurrentOperation(AddressOperation.List, this.shippingAddress);
            }
            else if (this.shippingAddress) {
                this._updateCurrentOperation(AddressOperation.Update, this.shippingAddress);
            }
            this._updateModuleState();
        };
        this._getShippingAddressFromCartLines = () => {
            const { request } = this.props.context;
            const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;
            const cartLines = ((this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart.CartLines) || []).filter(cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine);
            if (cartLines && cartLines.length > 0) {
                return cartLines[0].ShippingAddress;
            }
            return undefined;
        };
        this._canShip = () => {
            const { checkout } = this.props.data;
            const { request } = this.props.context;
            const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;
            if (!checkout.result || !request.channel || checkout.result.checkoutCart.isEmpty) {
                return false;
            }
            return checkout.result.checkoutCart.cart.CartLines.some(cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine);
        };
        this._onSelectAddress = () => {
            this._updateCurrentOperation(AddressOperation.Show, this.addressListSelectedAddress);
            this._setShippingAddress(this.addressListSelectedAddress);
            this._updateModuleState();
        };
        this._goToAddAddress = () => {
            this._setDefaultCountryRegionId();
            this._updateCurrentOperation(AddressOperation.Add);
        };
        this._onAddOrUpdateSuccess = (response) => {
            if (response.customerAddresses) {
                this.customerAddresses = response.customerAddresses;
            }
            if (response.address) {
                this._updateCurrentOperation(AddressOperation.Show, response.address);
                this._setShippingAddress(response.address);
                this._updateModuleState();
            }
        };
        this._setShippingAddress = (address) => {
            if (this.props.data.checkout.result) {
                const newShippingAddress = { ...address };
                if (address.ThreeLetterISORegionName && !newShippingAddress.TwoLetterISORegionName) {
                    newShippingAddress.TwoLetterISORegionName = this.addressFormat.getTwoLetterISORegionName(address.ThreeLetterISORegionName);
                }
                this.props.data.checkout.result.updateShippingAddress({ newShippingAddress });
            }
        };
        this._resetView = () => {
            switch (this.currentOperation) {
                case AddressOperation.Add:
                case AddressOperation.Update:
                    this._updateCurrentOperation(this.addressCommon.isAuthenticatedFlow() ? AddressOperation.List : AddressOperation.Show, this.shippingAddress);
                    break;
                default:
                    this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);
            }
            this._updateModuleState();
        };
        this._updateCurrentOperation = (operation, selectedAddress) => {
            this.currentOperation = operation;
            this.selectedAddress = selectedAddress;
            if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {
                this.addUpdateAddress = { ...this.selectedAddress } || {};
                set(this.addUpdateAddress, {
                    ['ThreeLetterISORegionName']: this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId
                });
                set(this.addUpdateAddress, {
                    ['AddressTypeValue']: this.addUpdateAddress.AddressTypeValue || this.defaultAddressType
                });
            }
            else if (this.currentOperation === AddressOperation.List) {
                this.addressListSelectedAddress = { ...this.selectedAddress } || {};
            }
        };
        this._updateModuleState = () => {
            if (this.currentOperation === AddressOperation.Show) {
                this.props.moduleState.onReady();
            }
            else if (this.isUpdating) {
                this.props.moduleState.onPending();
            }
            else {
                this.props.moduleState.onUpdating();
            }
        };
        const { context, data, resources, telemetry } = this.props;
        this.addUpdateAddress = {};
        this.resources = resources;
        this.currentOperation = AddressOperation.List;
        this.countryRegions = data.countryRegions.result || [];
        this.addressPurposes = data.addressPurposes.result || [];
        this.customerAddresses = data.address.result || [];
        this.stateProvinceInfo = data.countryStates.result || [];
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);
        this.validationError = {};
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        this.props.data.checkout.then(() => {
            this._setDefaultCountryRegionId();
            this._initModuleState();
        });
        reaction(() => this.countryRegionId, () => this._getStateProvinces());
        reaction(() => this.currentOperation, () => {
            this._getStateProvinces();
        });
    }
    render() {
        if (!this._canShip()) {
            return null;
        }
        const { renderView, config } = this.props;
        const viewProps = {
            ...this.props,
            currentOperation: this.currentOperation,
            selectedAddress: this.selectedAddress,
            addUpdateAddress: this.addUpdateAddress,
            addressListSelectedAddress: this.addressListSelectedAddress,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            customerAddresses: this.customerAddresses,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            isUpdating: this.isUpdating,
            hasError: this.hasError,
            className: config.className,
            viewState: {
                isShowAddress: this.currentOperation === AddressOperation.Show && this.selectedAddress,
                isShowAddresList: this.currentOperation === AddressOperation.List && this.customerAddresses.length > 0,
                isShowAddOrUpdateAddress: this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update
            },
            CheckoutShippingAddress: {
                moduleProps: this.props,
                className: classnames('ms-checkout-shipping-address', config.className)
            },
            showAddress: this._renderShowAddress(),
            showAddressSelect: this._renderSelectAddress(),
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()
        };
        return renderView(viewProps);
    }
    _renderShowAddress() {
        if (this.selectedAddress) {
            return AddressShow({
                address: this.selectedAddress,
                addressFormat: this.addressFormat.getAddressFormat(this.selectedAddress.ThreeLetterISORegionName || ''),
                addressPurposes: this.addressPurposes
            });
        }
        return null;
    }
    _setDefaultCountryRegionId() {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;
        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);
    }
    get shippingAddress() {
        return this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress;
    }
};
__decorate([
    observable
], CheckoutShippingAddress.prototype, "currentOperation", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "selectedAddress", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "addUpdateAddress", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "countryRegionId", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "stateProvinceInfo", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "customerAddresses", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "validationError", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "addressActionResponse", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "isUpdating", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "hasError", void 0);
__decorate([
    observable
], CheckoutShippingAddress.prototype, "addressListSelectedAddress", void 0);
__decorate([
    computed
], CheckoutShippingAddress.prototype, "shippingAddress", null);
CheckoutShippingAddress = __decorate([
    withModuleState,
    observer
], CheckoutShippingAddress);
export default CheckoutShippingAddress;
//# sourceMappingURL=checkout-shipping-address.js.map