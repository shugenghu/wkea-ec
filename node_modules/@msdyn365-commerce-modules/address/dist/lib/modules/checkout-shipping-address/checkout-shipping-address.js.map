{"version":3,"file":"checkout-shipping-address.js","sourceRoot":"./src/","sources":["modules/checkout-shipping-address/checkout-shipping-address.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { computed, observable, reaction, set } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport { IModuleStateProps, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';\nimport { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo } from '@msdyn365-commerce/retail-proxy';\n\nimport { AddressCommon } from '../../common/address-common';\nimport { AddressFormat } from '../../common/address-format';\nimport { AddressItemType } from '../../common/address-format.data';\nimport { AddressMetaData } from '../../common/address-meta-data';\nimport { AddressOperation, AddressType, IAddressResource, IAddressResponse } from '../../common/address-module.data';\nimport { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';\nimport { AddressSelect, IAddressSelectProps } from '../../common/components/address-select';\nimport { AddressShow, IAddressShowProps } from '../../common/components/address-show';\nimport { ICheckoutShippingAddressData } from './checkout-shipping-address.data';\nimport { ICheckoutShippingAddressProps } from './checkout-shipping-address.props.autogenerated';\n\nexport interface ICheckoutAddressProps extends ICheckoutShippingAddressProps<ICheckoutShippingAddressData>, IModuleStateProps { }\n\nexport interface ICheckoutShippingAddressViewState {\n    isShowAddress: boolean;\n    isShowAddresList: boolean;\n    isShowAddOrUpdateAddress: boolean;\n}\n\nexport interface ICheckoutShippingAddressViewProps extends ICheckoutAddressProps {\n    className: string;\n    currentOperation: AddressOperation;\n    selectedAddress?: Address;\n    addUpdateAddress: Address;\n    addressListSelectedAddress: Address;\n    countryRegionId: string;\n    stateProvinceInfo?: StateProvinceInfo[];\n    customerAddresses: Address[];\n    validationError: object;\n    addressActionResponse?: IAddressResponse;\n    viewState: ICheckoutShippingAddressViewState;\n    CheckoutShippingAddress: IModuleProps;\n    isUpdating: boolean;\n    hasError: boolean;\n    showAddress: IAddressShowProps;\n    showAddressSelect: IAddressSelectProps;\n    showAddOrUpdateAddress: IAddressAddUpdateProps;\n}\n\n/**\n *\n * Address component\n * @extends {React.Component<ICheckoutShippingAddressProps<ICheckoutShippingAddressData>>}\n */\n// @ts-ignore\n@withModuleState\n@observer\nclass CheckoutShippingAddress extends React.Component<ICheckoutAddressProps> {\n    @observable private currentOperation: AddressOperation;\n    @observable private selectedAddress?: Address;\n    @observable private addUpdateAddress: Address;\n    @observable private countryRegionId: string = 'USA';\n    @observable private stateProvinceInfo?: StateProvinceInfo[];\n    @observable private customerAddresses: Address[];\n    @observable private validationError: object;\n    @observable private addressActionResponse?: IAddressResponse;\n    @observable private isUpdating?: boolean;\n    @observable private hasError?: boolean;\n    @observable private addressListSelectedAddress: Address = {};\n\n    private addressCommon: AddressCommon;\n    private addressFormat: AddressFormat;\n    private countryRegions: CountryRegionInfo[];\n    private addressPurposes: AddressPurpose[];\n    private resources: IAddressResource;\n    private defaultAddressType: number = 6; // Default to Home\n    private telemetryContent?: ITelemetryContent;\n\n    constructor(props: ICheckoutAddressProps) {\n        super(props);\n        const { context, data, resources, telemetry } = this.props;\n\n        this.addUpdateAddress = {};\n        this.resources = resources;\n        this.currentOperation = AddressOperation.List;\n        this.countryRegions = data.countryRegions.result || [];\n        this.addressPurposes = data.addressPurposes.result || [];\n        this.customerAddresses = data.address.result || [];\n        this.stateProvinceInfo = data.countryStates.result || [];\n        this.addressCommon = new AddressCommon(context, resources, telemetry);\n        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);\n        this.validationError = {};\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this.props.data.checkout.then(() => {\n            this._setDefaultCountryRegionId();\n            this._initModuleState();\n        });\n\n        reaction(\n            () => this.countryRegionId,\n            () => this._getStateProvinces()\n        );\n\n        reaction(\n            () => this.currentOperation,\n            () => {\n                this._getStateProvinces();\n            }\n        );\n    }\n\n    public render(): JSX.Element | null {\n        if (!this._canShip()) {\n            return null;\n        }\n\n        const { renderView, config } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            currentOperation: this.currentOperation,\n            selectedAddress: this.selectedAddress,\n            addUpdateAddress: this.addUpdateAddress,\n            addressListSelectedAddress: this.addressListSelectedAddress,\n            countryRegionId: this.countryRegionId,\n            stateProvinceInfo: this.stateProvinceInfo,\n            customerAddresses: this.customerAddresses,\n            validationError: this.validationError,\n            addressActionResponse: this.addressActionResponse,\n            isUpdating: this.isUpdating,\n            hasError: this.hasError,\n            className: config.className,\n            viewState: {\n                isShowAddress: this.currentOperation === AddressOperation.Show && this.selectedAddress,\n                isShowAddresList: this.currentOperation === AddressOperation.List && this.customerAddresses.length > 0,\n                isShowAddOrUpdateAddress:\n                    this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update\n            },\n            CheckoutShippingAddress: {\n                moduleProps: this.props,\n                className: classnames('ms-checkout-shipping-address', config.className)\n            },\n            showAddress: this._renderShowAddress(),\n            showAddressSelect: this._renderSelectAddress(),\n            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()\n        };\n\n        return renderView(viewProps) as React.ReactElement;\n    }\n\n    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {\n        const addressFormat = this.currentOperation === AddressOperation.Add && this.addressCommon.isAuthenticatedFlow() ? this.addressFormat : this.addressFormat;\n        return AddressAddUpdate({\n            isUpdating: this.isUpdating,\n            resources: this.resources,\n            addressType: AddressType.Shipping,\n            addressFormat: addressFormat.getAddressFormat(this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId),\n            defaultCountryRegionId: this.countryRegionId,\n            defaultAddressType: this.defaultAddressType,\n            selectedAddress: this.addUpdateAddress,\n            validationError: this.validationError,\n            hasError: this.hasError,\n            addressActionResponse: this.addressActionResponse,\n            telemetryContent: this.telemetryContent,\n            dropdownDisplayData: addressFormat.getPrefilledAddressDropdownData(\n                this.resources.addressStateDefaultSelectionText,\n                this.stateProvinceInfo\n            ),\n            onInputChange: this._onAddressAddUpdateInputChange,\n            onDropdownChange: this._onAddressAddUpdateDropdownChange,\n            hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,\n            onSave: this.onSubmit,\n            // tslint:disable-next-line: no-empty\n            onCancel: !this.selectedAddress && !this.addressCommon.isAuthenticatedFlow() ? () => { } : this._resetView\n        });\n    };\n\n    private _renderSelectAddress = (): IAddressSelectProps => {\n        return AddressSelect({\n            addressFormat: this.addressFormat,\n            addresses: this.customerAddresses,\n            resources: this.resources,\n            addressPurposes: this.addressPurposes,\n            selectedAddress: this.addressListSelectedAddress,\n            onAddressOptionChange: this._onAddressOptionChange,\n            hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,\n            telemetryContent: this.telemetryContent,\n            onAddAddress: this._goToAddAddress,\n            onSave: this._onSelectAddress,\n            // tslint:disable-next-line: no-empty\n            onCancel: !this.selectedAddress ? () => { } : this._resetView\n        });\n    };\n\n    private _renderShowAddress(): IAddressShowProps | null {\n        if (this.selectedAddress) {\n            return AddressShow({\n                address: this.selectedAddress,\n                addressFormat: this.addressFormat.getAddressFormat(this.selectedAddress.ThreeLetterISORegionName || ''),\n                addressPurposes: this.addressPurposes\n            });\n        }\n\n        return null;\n    }\n\n    private _onAddressOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const addressRecordId = event.currentTarget.value;\n        const selectedAddress = this.customerAddresses.find(address => (address.RecordId || '').toString() === addressRecordId);\n        if (selectedAddress) {\n            this.addressListSelectedAddress = selectedAddress;\n        }\n    };\n\n    private onAddressAddUpdate = (name: string, value: string | boolean) => {\n        set(this.addUpdateAddress, { [name]: value });\n        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);\n    };\n\n    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        if (event.target.type === 'checkbox') {\n            this.onAddressAddUpdate(event.target.name, event.target.checked);\n        } else {\n            const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');\n            this.onAddressAddUpdate(event.target.name, value);\n        }\n    };\n\n    private _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.onAddressAddUpdate(event.target.name, event.target.value);\n\n        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {\n            this._onCountryChange(event.target.value);\n        }\n    };\n\n    private _onAddressAddUpdateSubmit = (): void => {\n        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {\n            return;\n        }\n\n        let response: Promise<IAddressResponse>;\n        if (this.addressCommon.isAuthenticatedFlow()) {\n            response =\n                this.currentOperation === AddressOperation.Update\n                    ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress)\n                    : this.addressCommon.addCustomerAddress(this.addUpdateAddress);\n        } else {\n            response = Promise.resolve({ address: this.addUpdateAddress });\n        }\n\n        this.isUpdating = true;\n        this._updateModuleState();\n\n        response.then(\n            (result: IAddressResponse) => {\n                this.isUpdating = false;\n\n                if (result.address) {\n                    this.hasError = false;\n                    this._onAddOrUpdateSuccess(result);\n                } else {\n                    this.hasError = true;\n                    this.addressActionResponse = result;\n                    this._updateModuleState();\n                }\n            },\n            () => {\n                this.hasError = true;\n                this.isUpdating = false;\n                this._updateModuleState();\n            }\n        );\n    };\n\n    private _onCountryChange = (countryRegionId: string) => {\n        this.countryRegionId = countryRegionId;\n        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });\n    };\n\n    private _getAddressFormatExcludeList = (): AddressItemType[] => {\n        const { config } = this.props;\n        const addressFormatExcludeList: AddressItemType[] = [];\n\n        if (!config.showAddressType) {\n            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);\n        }\n\n        addressFormatExcludeList.push(AddressItemType.IsPrimary);\n\n        return addressFormatExcludeList;\n    }\n\n    private _getStateProvinces = (): void => {\n        if (\n            !this.countryRegionId ||\n            !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)\n        ) {\n            return;\n        }\n\n        // tslint:disable-next-line:no-floating-promises\n        this.addressCommon.getStateProvinces(this.countryRegionId).then((result: StateProvinceInfo[]) => {\n            const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);\n            // Reset state if selected state not found in the list.\n            if (!stateInfo) {\n                set(this.addUpdateAddress, { ['State']: '' });\n            }\n\n            this.stateProvinceInfo = result;\n        });\n    };\n\n    private _setDefaultCountryRegionId(): void {\n        const { request } = this.props.context;\n        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;\n\n        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);\n    }\n\n    private _getDefaultAddress = (): Address | undefined => {\n        if (this.customerAddresses) {\n            const primaryAddress = this.customerAddresses.find((address: Address) => address.IsPrimary);\n            return primaryAddress || (this.customerAddresses.length > 0 ? this.customerAddresses[0] : undefined);\n        }\n        return undefined;\n    };\n\n    private _initModuleState = (): void => {\n        this.props.moduleState.init({\n            status: this._canShip() ? 'updating' : 'disabled',\n            onEdit: this.onEdit,\n            onCancel: this.onCancel,\n            onSubmit: this.onSubmit\n        });\n\n        if (this._canShip()) {\n            const defaultAddress = this._getShippingAddressFromCartLines() || this._getDefaultAddress();\n            if (defaultAddress) {\n                this._updateCurrentOperation(AddressOperation.Show, defaultAddress);\n                this._setShippingAddress(defaultAddress);\n                this._updateModuleState();\n            } else {\n                this._updateCurrentOperation(AddressOperation.Add);\n            }\n        }\n    };\n\n    private onSubmit = (): void => {\n        switch (this.currentOperation) {\n            case AddressOperation.Add:\n            case AddressOperation.Update:\n                this._onAddressAddUpdateSubmit();\n                break;\n            case AddressOperation.List:\n                this._onSelectAddress();\n                break;\n            default:\n                this.props.telemetry.error('Invalid operation');\n        }\n    };\n\n    private onCancel = (): void => {\n        switch (this.currentOperation) {\n            case AddressOperation.Add:\n            case AddressOperation.Update:\n                if (!(!this.selectedAddress && !this.addressCommon.isAuthenticatedFlow())) {\n                    this._resetView();\n                }\n\n                break;\n            case AddressOperation.List:\n                if (this.selectedAddress) {\n                    this._resetView();\n                }\n                break;\n            default:\n                this.props.telemetry.error('Invalid operation');\n        }\n    };\n\n    private onEdit = (): void => {\n        if (this.addressCommon.isAuthenticatedFlow() && this.shippingAddress) {\n            this._updateCurrentOperation(AddressOperation.List, this.shippingAddress);\n        } else if (this.shippingAddress) {\n            this._updateCurrentOperation(AddressOperation.Update, this.shippingAddress);\n        }\n\n        this._updateModuleState();\n    };\n\n    private _getShippingAddressFromCartLines = (): Address | undefined => {\n        const { request } = this.props.context;\n        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;\n\n        const cartLines = ((this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart.CartLines) || []).filter(\n            cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine\n        );\n\n        if (cartLines && cartLines.length > 0) {\n            return cartLines[0].ShippingAddress;\n        }\n\n        return undefined;\n    };\n\n    private _canShip = (): boolean => {\n        const { checkout } = this.props.data;\n        const { request } = this.props.context;\n        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;\n        if (!checkout.result || !request.channel || checkout.result.checkoutCart.isEmpty) {\n            return false;\n        }\n        // @ts-ignore: Type-checker not realizing above request.channel check\n        return checkout.result.checkoutCart.cart.CartLines.some(cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine);\n    };\n\n    private _onSelectAddress = () => {\n        this._updateCurrentOperation(AddressOperation.Show, this.addressListSelectedAddress);\n        this._setShippingAddress(this.addressListSelectedAddress);\n        this._updateModuleState();\n    };\n\n    private _goToAddAddress = () => {\n        this._setDefaultCountryRegionId();\n        this._updateCurrentOperation(AddressOperation.Add);\n    };\n\n    private _onAddOrUpdateSuccess = (response: IAddressResponse) => {\n        if (response.customerAddresses) {\n            this.customerAddresses = response.customerAddresses;\n        }\n\n        if (response.address) {\n            this._updateCurrentOperation(AddressOperation.Show, response.address);\n            this._setShippingAddress(response.address);\n            this._updateModuleState();\n        }\n    };\n\n    private _setShippingAddress = (address: Address): void => {\n        if (this.props.data.checkout.result) {\n            const newShippingAddress = { ...address };\n\n            if (address.ThreeLetterISORegionName && !newShippingAddress.TwoLetterISORegionName) {\n                newShippingAddress.TwoLetterISORegionName = this.addressFormat.getTwoLetterISORegionName(address.ThreeLetterISORegionName);\n            }\n\n            // tslint:disable-next-line:no-floating-promises\n            this.props.data.checkout.result.updateShippingAddress({ newShippingAddress });\n        }\n    };\n\n    @computed get shippingAddress(): Address | undefined {\n        return this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress;\n    }\n\n    private _resetView = (): void => {\n        switch (this.currentOperation) {\n            case AddressOperation.Add:\n            case AddressOperation.Update:\n                this._updateCurrentOperation(\n                    this.addressCommon.isAuthenticatedFlow() ? AddressOperation.List : AddressOperation.Show,\n                    this.shippingAddress\n                );\n                break;\n            default:\n                this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);\n        }\n        this._updateModuleState();\n    };\n\n    private _updateCurrentOperation = (operation: AddressOperation, selectedAddress?: Address) => {\n        this.currentOperation = operation;\n        this.selectedAddress = selectedAddress;\n\n        if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {\n            this.addUpdateAddress = { ...this.selectedAddress } || {};\n            set(this.addUpdateAddress, {\n                ['ThreeLetterISORegionName']: this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId\n            });\n            set(this.addUpdateAddress, {\n                ['AddressTypeValue']: this.addUpdateAddress.AddressTypeValue || this.defaultAddressType\n            });\n        } else if (this.currentOperation === AddressOperation.List) {\n            this.addressListSelectedAddress = { ...this.selectedAddress } || {};\n        }\n    };\n\n    private _updateModuleState = () => {\n        if (this.currentOperation === AddressOperation.Show) {\n            this.props.moduleState.onReady();\n        } else if (this.isUpdating) {\n            this.props.moduleState.onPending();\n        } else {\n            this.props.moduleState.onUpdating();\n        }\n    };\n}\n\nexport default CheckoutShippingAddress;\n"]}