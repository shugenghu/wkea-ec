import * as React from 'react';
import { getGiftCardAsync, getTenderTypesAsync, resolveCardTypesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import classname from 'classnames';
import { OPERATIONS } from '../checkout';
import { getForm } from './components/get-form';
import { getItem } from './components/get-item';
export class GiftCardBalanceCheck extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            isFetchingGiftCard: false,
            errorMessage: '',
            giftCardNumber: '',
            giftCardPin: '',
            giftCardExp: ''
        };
        this.inputRef = React.createRef();
        this.inputPinRef = React.createRef();
        this.inputExpRef = React.createRef();
        this._isEnabled = () => {
            if (!this.props.context.request.user.isAuthenticated && this.props.context.app.config.giftCardSupported !== "external") {
                return false;
            }
            return true;
        };
        this._getFormattedPrice = (price = 0, currencyCode = 'USD') => {
            return this.props.context.cultureFormatter.formatCurrency(price, currencyCode);
        };
        this._enterGiftCardNumber = (giftCardNumber) => {
            this.setState({
                giftCardNumber
            });
            this._clearError();
        };
        this._enterGiftCardPin = (giftCardPin) => {
            this.setState({
                giftCardPin
            });
            this._clearError();
        };
        this._enterGiftCardExp = (giftCardExp) => {
            this.setState({
                giftCardExp
            });
            this._clearError();
        };
        this._clearError = () => {
            this.setState({
                errorMessage: ''
            });
        };
        this._setError = (errorMessage) => {
            this.props.telemetry.error('Error', errorMessage);
            this.props.telemetry.debug('Error', errorMessage);
            this.setState({
                errorMessage
            });
        };
        this._applyGiftCard = async () => {
            if (this.state.isFetchingGiftCard) {
                return;
            }
            this.setState({
                isFetchingGiftCard: true
            });
            const giftCardNumber = this.state.giftCardNumber.trim();
            const giftCardPin = this.state.giftCardPin.trim();
            const giftCardExp = this.state.giftCardExp.trim();
            const giftCardTypes = await this._getGiftCardTypes(giftCardNumber);
            const giftCardType = giftCardTypes && giftCardTypes[0];
            const isPinRequired = giftCardType && giftCardType.IsPinRequired;
            const isExpRequired = giftCardType && giftCardType.IsExpirationDateRequired;
            const tenderTypeId = giftCardType && giftCardType.PaymentMethodId;
            const giftCard = await this._getGiftCard(giftCardNumber, giftCardPin, giftCardExp, isPinRequired, isExpRequired, tenderTypeId);
            if (giftCard) {
                this._clearError();
                this.setState({
                    giftCardNumber: '',
                    giftCardPin: '',
                    giftCardExp: '',
                    isFetchingGiftCard: false,
                    giftCard: giftCard
                });
                return Promise.resolve();
            }
            else {
                const input = this.inputRef && this.inputRef.current && this.inputRef.current.focus && this.inputRef.current;
                input && input.focus();
                this.setState({
                    isFetchingGiftCard: false,
                    giftCard: undefined
                });
            }
        };
        this._findGiftcardTenderTypes = (tenderTypes, operationId, giftcardType) => {
            let matchedTenderTypes;
            switch (giftcardType) {
                case "internal":
                    matchedTenderTypes = tenderTypes.filter(tenderType => (tenderType.OperationId === operationId && tenderType.ConnectorId === ''));
                    break;
                case "external":
                    matchedTenderTypes = tenderTypes.filter(tenderType => (tenderType.OperationId === operationId && tenderType.ConnectorId !== ''));
                    break;
                default:
                    throw new Error('Invalid gift card type');
            }
            if (matchedTenderTypes) {
                return matchedTenderTypes.map(tenderType => tenderType.TenderTypeId || '');
            }
            return;
        };
        this._getGiftCard = async (giftCardNumber, giftCardPin, giftCardExp, isPinRequired, isExpRequired, tenderTypeId) => {
            const { resources: { invalidCardTypeError, noBalanceError, invalidCardInfoError, noCardPinError, noCardExpError } } = this.props;
            const supportedGiftCardType = this.props.context.app.config.giftCardSupported;
            if (!tenderTypeId) {
                return undefined;
            }
            const tenderTypes = await getTenderTypesAsync({ callerContext: this.props.context.actionContext, queryResultSettings: {} }).catch(error => {
                throw error;
            });
            if (!tenderTypes) {
                throw new Error('Fail to get gift card tender line');
            }
            const internalGiftcardTenderTypes = this._findGiftcardTenderTypes(tenderTypes, OPERATIONS.PayGiftCertificate, "internal");
            const externalGiftcardTenderTypes = this._findGiftcardTenderTypes(tenderTypes, OPERATIONS.PayGiftCertificate, "external");
            switch (supportedGiftCardType) {
                case undefined:
                case "internal":
                    if (!internalGiftcardTenderTypes?.includes(tenderTypeId)) {
                        this._setError(invalidCardTypeError);
                        return undefined;
                    }
                    break;
                case "external":
                    if (!externalGiftcardTenderTypes?.includes(tenderTypeId)) {
                        this._setError(invalidCardTypeError);
                        return undefined;
                    }
                    break;
                case "both":
                    if (!internalGiftcardTenderTypes?.includes(tenderTypeId) && !externalGiftcardTenderTypes?.includes(tenderTypeId)) {
                        this._setError(invalidCardTypeError);
                        return undefined;
                    }
                    break;
                default:
                    throw new Error('Unsupported gift card type');
            }
            if (!this.props.context.request.user.isAuthenticated && internalGiftcardTenderTypes?.includes(tenderTypeId)) {
                this._setError(invalidCardTypeError);
                return undefined;
            }
            if (isPinRequired && giftCardPin === '') {
                this._setError(noCardPinError);
                return undefined;
            }
            if (isExpRequired && giftCardExp === '') {
                this._setError(noCardExpError);
                return undefined;
            }
            const month = parseInt(giftCardExp.split('/')[0], 10);
            const year = parseInt(giftCardExp.split('/')[1], 10);
            return getGiftCardAsync({ callerContext: this.props.context.actionContext }, giftCardNumber, tenderTypeId, giftCardPin, month, year)
                .then(activeGiftCard => {
                if (!activeGiftCard.Balance || activeGiftCard.Balance === 0) {
                    this._setError(noBalanceError);
                    return;
                }
                return activeGiftCard;
            })
                .catch(error => {
                this._setError(invalidCardInfoError);
                return undefined;
            });
        };
        this._getGiftCardTypes = async (giftCardNumber) => {
            const { resources: { emptyInputError, invalidCodeError }, } = this.props;
            if (!giftCardNumber) {
                this._setError(emptyInputError);
                return undefined;
            }
            const GIFTCARDTYPE = 7;
            return resolveCardTypesAsync({ callerContext: this.props.context.actionContext }, giftCardNumber, GIFTCARDTYPE)
                .then(giftCardTypes => {
                if (!giftCardTypes || giftCardTypes.length === 0 || giftCardTypes[0] === undefined) {
                    this._setError(invalidCodeError);
                    return;
                }
                return giftCardTypes;
            })
                .catch(error => {
                this._setError(invalidCodeError);
                return undefined;
            });
        };
    }
    render() {
        const { config: { className, showAdditionalFields }, resources } = this.props;
        const { errorMessage, giftCardNumber, giftCardPin, giftCardExp } = this.state;
        const supportedGiftCardType = this.props.context.app.config.giftCardSupported;
        if (!this._isEnabled()) {
            this.props.context.telemetry.error('Gift card balance check is not supported, module wont render');
            return null;
        }
        const supportExternalGiftCard = supportedGiftCardType === "internal" ? false : true;
        const moduleClassName = classname('ms-gift-card-balance-check', className);
        const viewProps = {
            ...this.props,
            ...this.state,
            className: moduleClassName,
            giftCardBalanceCheckProps: { moduleProps: this.props, className: moduleClassName },
            enterGiftCardNumber: this._enterGiftCardNumber,
            enterGiftCardPin: this._enterGiftCardPin,
            enterGiftCardExp: this._enterGiftCardExp,
            applyGiftCard: this._applyGiftCard,
            form: getForm({
                errorMessage,
                giftCardNumber,
                giftCardPin,
                giftCardExp,
                inputRef: this.inputRef,
                inputPinRef: this.inputPinRef,
                inputExpRef: this.inputExpRef,
                resources,
                supportExternalGiftCard,
                additionalFields: showAdditionalFields,
                onEnterGiftCardNumber: this._enterGiftCardNumber,
                onEnterGiftCardPin: this._enterGiftCardPin,
                onEnterGiftCardExp: this._enterGiftCardExp,
                onApplyGiftCard: this._applyGiftCard
            }),
            item: this.state.giftCard && getItem({
                giftCard: this.state.giftCard,
                getFormattedPrice: this._getFormattedPrice,
                resources
            })
        };
        return this.props.renderView(viewProps);
    }
}
export default GiftCardBalanceCheck;
//# sourceMappingURL=gift-card-balance-check.js.map