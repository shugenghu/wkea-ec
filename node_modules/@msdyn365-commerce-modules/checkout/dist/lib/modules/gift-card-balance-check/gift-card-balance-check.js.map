{"version":3,"file":"gift-card-balance-check.js","sourceRoot":"./src/","sources":["modules/gift-card-balance-check/gift-card-balance-check.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { IModuleProps } from '@msdyn365-commerce-modules/utilities';\nimport { getGiftCardAsync, getTenderTypesAsync, resolveCardTypesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport {\n    CardType, CardTypeInfo, GiftCard, RetailOperation, TenderType\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport classname from 'classnames';\nimport { OPERATIONS } from '../checkout';\nimport { getForm, IForm } from './components/get-form';\nimport { getItem, IItem } from './components/get-item';\nimport { IGiftCardBalanceCheckProps } from './gift-card-balance-check.props.autogenerated';\n\ninterface IGiftCardBalanceCheckState {\n    isFetchingGiftCard: boolean;\n    errorMessage: string;\n    giftCardNumber: string;\n    giftCardPin: string;\n    giftCardExp: string;\n    giftCard?: GiftCard;\n}\n\nconst enum SupportedGiftCardType {\n    Internal = 'internal',\n    External = 'external',\n    Both = 'both'\n}\n\nexport interface IGiftCardBalanceCheckModuleProps extends IGiftCardBalanceCheckProps<{}> { }\n\nexport interface IGiftCardBalanceCheckViewProps extends IGiftCardBalanceCheckProps<{}>, IGiftCardBalanceCheckState {\n    className?: string;\n\n    form: IForm;\n    item?: IItem;\n\n    giftCardBalanceCheckProps: IModuleProps;\n\n    enterGiftCardNumber?(giftCardNumber: string): void;\n    enterGiftCardPin?(giftCardPin: string): void;\n    enterGiftCardExp?(giftCardExp: string): void;\n    applyGiftCard?(): void;\n}\n\n/**\n *\n * GiftCardBalanceCheck component\n * @extends {React.Component<IGiftCardBalanceCheckModuleProps, IGiftCardBalanceCheckState>}\n */\nexport class GiftCardBalanceCheck extends React.Component<IGiftCardBalanceCheckModuleProps, IGiftCardBalanceCheckState> {\n    public state: IGiftCardBalanceCheckState = {\n        isFetchingGiftCard: false,\n        errorMessage: '',\n        giftCardNumber: '',\n        giftCardPin: '',\n        giftCardExp: ''\n    };\n\n    private inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n    private inputPinRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n    private inputExpRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n    public render(): JSX.Element | null {\n        const {\n            config: { className, showAdditionalFields },\n            resources\n        } = this.props;\n        const { errorMessage, giftCardNumber, giftCardPin, giftCardExp } = this.state;\n\n        const supportedGiftCardType = this.props.context.app.config.giftCardSupported;\n\n        if (!this._isEnabled()) {\n            this.props.context.telemetry.error('Gift card balance check is not supported, module wont render');\n            return null;\n        }\n\n        const supportExternalGiftCard = supportedGiftCardType === SupportedGiftCardType.Internal ? false : true;\n\n        const moduleClassName = classname('ms-gift-card-balance-check', className);\n\n        const viewProps: IGiftCardBalanceCheckViewProps = {\n            ...this.props,\n            ...this.state,\n            className: moduleClassName,\n            giftCardBalanceCheckProps: { moduleProps: this.props, className: moduleClassName },\n\n            enterGiftCardNumber: this._enterGiftCardNumber,\n            enterGiftCardPin: this._enterGiftCardPin,\n            enterGiftCardExp: this._enterGiftCardExp,\n            applyGiftCard: this._applyGiftCard,\n\n            form: getForm({\n                errorMessage,\n                giftCardNumber,\n                giftCardPin,\n                giftCardExp,\n                inputRef: this.inputRef,\n                inputPinRef: this.inputPinRef,\n                inputExpRef: this.inputExpRef,\n                resources,\n                supportExternalGiftCard,\n                additionalFields: showAdditionalFields,\n                onEnterGiftCardNumber: this._enterGiftCardNumber,\n                onEnterGiftCardPin: this._enterGiftCardPin,\n                onEnterGiftCardExp: this._enterGiftCardExp,\n                onApplyGiftCard: this._applyGiftCard\n            }),\n            item: this.state.giftCard && getItem({\n                giftCard: this.state.giftCard,\n                getFormattedPrice: this._getFormattedPrice,\n                resources\n            })\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    private _isEnabled = (): boolean => {\n        if (!this.props.context.request.user.isAuthenticated && this.props.context.app.config.giftCardSupported !== SupportedGiftCardType.External) {\n            return false;\n        }\n        return true;\n    };\n\n    private _getFormattedPrice = (price: number = 0, currencyCode: string = 'USD'): string => {\n        return this.props.context.cultureFormatter.formatCurrency(price, currencyCode);\n    };\n\n    private _enterGiftCardNumber = (giftCardNumber: string): void => {\n        this.setState({\n            giftCardNumber\n        });\n        this._clearError();\n    }\n\n    private _enterGiftCardPin = (giftCardPin: string): void => {\n        this.setState({\n            giftCardPin\n        });\n        this._clearError();\n    };\n\n    private _enterGiftCardExp = (giftCardExp: string): void => {\n        this.setState({\n            giftCardExp\n        });\n        this._clearError();\n    };\n\n    private _clearError = (): void => {\n        this.setState({\n            errorMessage: ''\n        });\n    };\n\n    private _setError = (errorMessage: string): void => {\n        this.props.telemetry.error('Error', errorMessage);\n        this.props.telemetry.debug('Error', errorMessage);\n        this.setState({\n            errorMessage\n        });\n    };\n\n    private _applyGiftCard = async (): Promise<void> => {\n        if (this.state.isFetchingGiftCard) {\n            return;\n        }\n        this.setState({\n            isFetchingGiftCard: true\n        });\n\n        const giftCardNumber = this.state.giftCardNumber.trim();\n        const giftCardPin = this.state.giftCardPin.trim();\n        const giftCardExp = this.state.giftCardExp.trim();\n\n        const giftCardTypes = await this._getGiftCardTypes(giftCardNumber);\n        const giftCardType = giftCardTypes && giftCardTypes[0];\n        const isPinRequired = giftCardType && giftCardType.IsPinRequired;\n        const isExpRequired = giftCardType && giftCardType.IsExpirationDateRequired;\n        const tenderTypeId = giftCardType && giftCardType.PaymentMethodId;\n        const giftCard = await this._getGiftCard(giftCardNumber, giftCardPin, giftCardExp, isPinRequired, isExpRequired, tenderTypeId);\n\n        if (giftCard) {\n            this._clearError();\n            this.setState({\n                giftCardNumber: '',\n                giftCardPin: '',\n                giftCardExp: '',\n                isFetchingGiftCard: false,\n                giftCard: giftCard\n            });\n            return Promise.resolve();\n        } else {\n            const input =\n                this.inputRef && this.inputRef.current && this.inputRef.current.focus && (this.inputRef.current as HTMLElement);\n            input && input.focus();\n            this.setState({\n                isFetchingGiftCard: false,\n                giftCard: undefined\n            });\n        }\n    };\n\n    private _findGiftcardTenderTypes = (tenderTypes: TenderType[], operationId: RetailOperation, giftcardType: string): string[] | undefined => {\n        let matchedTenderTypes: TenderType[] | undefined;\n\n        switch (giftcardType) {\n            case SupportedGiftCardType.Internal:\n                matchedTenderTypes = tenderTypes.filter(tenderType => (tenderType.OperationId === operationId && tenderType.ConnectorId === ''));\n                break;\n            case SupportedGiftCardType.External:\n                matchedTenderTypes = tenderTypes.filter(tenderType => (tenderType.OperationId === operationId && tenderType.ConnectorId !== ''));\n                break;\n            default:\n                throw new Error('Invalid gift card type');\n        }\n\n        if (matchedTenderTypes) {\n            return matchedTenderTypes.map(tenderType => tenderType.TenderTypeId || '');\n        }\n        return;\n    };\n\n    private _getGiftCard = async (giftCardNumber: string, giftCardPin: string, giftCardExp: string, isPinRequired: boolean | undefined, isExpRequired: boolean | undefined, tenderTypeId: string | undefined): Promise<GiftCard | undefined> => {\n        const {\n            resources: { invalidCardTypeError, noBalanceError, invalidCardInfoError, noCardPinError, noCardExpError }\n        } = this.props;\n\n        const supportedGiftCardType = this.props.context.app.config.giftCardSupported;\n\n        if (!tenderTypeId) {\n            return undefined;\n        }\n\n        const tenderTypes = await getTenderTypesAsync({ callerContext: this.props.context.actionContext, queryResultSettings: {} }).catch(error => {\n            throw error;\n        });\n\n        if (!tenderTypes) {\n            throw new Error('Fail to get gift card tender line');\n        }\n\n        const internalGiftcardTenderTypes = this._findGiftcardTenderTypes(tenderTypes, OPERATIONS.PayGiftCertificate, SupportedGiftCardType.Internal);\n        const externalGiftcardTenderTypes = this._findGiftcardTenderTypes(tenderTypes, OPERATIONS.PayGiftCertificate, SupportedGiftCardType.External);\n\n        switch (supportedGiftCardType) {\n            case undefined:\n            case SupportedGiftCardType.Internal:\n                if (!internalGiftcardTenderTypes?.includes(tenderTypeId)) {\n                    this._setError(invalidCardTypeError);\n                    return undefined;\n                }\n                break;\n            case SupportedGiftCardType.External:\n                if (!externalGiftcardTenderTypes?.includes(tenderTypeId)) {\n                    this._setError(invalidCardTypeError);\n                    return undefined;\n                }\n                break;\n            case SupportedGiftCardType.Both:\n                if (!internalGiftcardTenderTypes?.includes(tenderTypeId) && !externalGiftcardTenderTypes?.includes(tenderTypeId)) {\n                    this._setError(invalidCardTypeError);\n                    return undefined;\n                }\n                break;\n            default:\n                throw new Error('Unsupported gift card type');\n        }\n\n        if (!this.props.context.request.user.isAuthenticated && internalGiftcardTenderTypes?.includes(tenderTypeId)) {\n            this._setError(invalidCardTypeError);\n            return undefined;\n        }\n\n        if (isPinRequired && giftCardPin === '') {\n            this._setError(noCardPinError);\n            return undefined;\n        }\n\n        if (isExpRequired && giftCardExp === '') {\n            this._setError(noCardExpError);\n            return undefined;\n        }\n\n        const month = parseInt(giftCardExp.split('/')[0], 10);\n        const year = parseInt(giftCardExp.split('/')[1], 10);\n\n        return getGiftCardAsync({ callerContext: this.props.context.actionContext }, giftCardNumber, tenderTypeId, giftCardPin, month, year)\n            .then(activeGiftCard => {\n                if (!activeGiftCard.Balance || activeGiftCard.Balance === 0) {\n                    this._setError(noBalanceError);\n                    return;\n                }\n                return activeGiftCard;\n            })\n            .catch(error => {\n                this._setError(invalidCardInfoError);\n                return undefined;\n            });\n    };\n\n    private _getGiftCardTypes = async (giftCardNumber: string): Promise<CardTypeInfo[] | undefined> => {\n        const {\n            resources: { emptyInputError, invalidCodeError },\n        } = this.props;\n\n        if (!giftCardNumber) {\n            this._setError(emptyInputError);\n            return undefined;\n        }\n\n        const GIFTCARDTYPE =  7 as CardType.GiftCard; // This is a workaround. ts-jest doesn't support 'const enum'\n        return resolveCardTypesAsync({ callerContext: this.props.context.actionContext }, giftCardNumber, GIFTCARDTYPE)\n            .then(giftCardTypes => {\n                if (!giftCardTypes || giftCardTypes.length === 0 || giftCardTypes[0] === undefined) {\n                    this._setError(invalidCodeError);\n                    return;\n                }\n                return giftCardTypes;\n            })\n            .catch(error => {\n                this._setError(invalidCodeError);\n                return undefined;\n            });\n    };\n}\n\nexport default GiftCardBalanceCheck;\n"]}