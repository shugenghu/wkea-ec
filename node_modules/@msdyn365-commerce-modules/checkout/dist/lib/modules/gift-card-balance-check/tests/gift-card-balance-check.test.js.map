{"version":3,"file":"gift-card-balance-check.test.js","sourceRoot":"./src/","sources":["modules/gift-card-balance-check/tests/gift-card-balance-check.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// tslint:disable-next-line:no-unused-variable\n// @ts-ignore\nimport { mount, render, shallow } from 'enzyme';\nimport * as React from 'react';\n\nimport {\n    buildHydratedMockActionContext,\n    buildMockModuleProps,\n    IActionContext,\n    IAny,\n    ICoreContext,\n    IGeneric\n} from '@msdyn365-commerce/core';\nimport { IGiftCardExtend } from '@msdyn365-commerce/global-state';\n// @ts-ignore\nimport { AsyncResult, CardTypeInfo, Cart } from '@msdyn365-commerce/retail-proxy';\n// @ts-ignore\nimport GiftCardBalanceCheck, { IGiftCardBalanceCheckModuleProps, IGiftCardBalanceCheckViewProps } from '../gift-card-balance-check';\n\nimport * as StoreOperationsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport { TenderType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n// @ts-ignore\nimport { IGiftCardBalanceCheckConfig, IGiftCardBalanceCheckProps, IGiftCardBalanceCheckResources, showAdditionalFields } from '../gift-card-balance-check.props.autogenerated';\nimport View from '../gift-card-balance-check.view';\n\njest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');\n\nlet mockInternalGiftCardTypes: CardTypeInfo[];\nlet mockExternalGiftCardTypes: CardTypeInfo[];\nlet mockGiftCard: IGiftCardExtend;\nlet mockGiftCardEmpty: IGiftCardExtend;\nlet mockConfig: IGiftCardBalanceCheckConfig;\nlet mockContext: ICoreContext;\nlet mockActions: IGeneric<IAny>;\nlet actionContext: IActionContext;\nlet mockResources: IGiftCardBalanceCheckResources;\nlet mockTenderTypes: TenderType[];\n\ndescribe('GiftCardBalanceCheck', () => {\n    // tslint:disable-next-line:max-func-body-length\n    beforeEach(() => {\n        mockInternalGiftCardTypes = [\n            {\n                IsPinRequired: false,\n                IsExpirationDateRequired: false,\n                PaymentMethodId: '13'\n            }\n        ];\n\n        mockExternalGiftCardTypes = [\n            {\n                IsPinRequired: true,\n                IsExpirationDateRequired: false,\n                PaymentMethodId: '12'\n            }\n        ];\n\n        mockGiftCard = {\n            Id: 'abc',\n            Balance: 100,\n            BalanceCurrencyCode: 'USD',\n            BalanceInCardCurrency: 100,\n            CardCurrencyCode: 'USD'\n        };\n\n        mockGiftCardEmpty = {\n            Id: 'empty',\n            Balance: 0,\n            BalanceCurrencyCode: 'USD',\n            BalanceInCardCurrency: 0,\n            CardCurrencyCode: 'USD'\n        };\n\n        mockActions = {};\n\n        actionContext = buildHydratedMockActionContext();\n\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'internal'\n                }\n            }\n        };\n\n        mockConfig = {\n            showAdditionalFields: showAdditionalFields.pinAndExpirationDate\n        };\n\n        mockResources = {\n            emptyInputError: 'Please enterd a gift card number',\n            invalidCodeError: 'Invalid gift card code entered',\n            invalidCardInfoError: 'Invalid gift card information entered',\n            invalidCardTypeError: 'The gift card type is not suported',\n            noCardPinError: 'Gift card PIN is required',\n            noCardExpError: 'Gift card expiration date is required',\n            noBalanceError: 'Gift card has no balance left',\n            giftCardFormLabel: 'Gift card',\n            giftCardNumberLabel: 'Gift card number',\n            giftCardPinLabel: 'PIN',\n            giftCardExpLabel: 'Expiration date',\n            giftCardAlertLabel: 'You gift card may or may not include these fields',\n            balanceCheckButton: 'Balance check',\n            giftCardAvailableBalanceLabel: 'Available balance',\n            giftCardPinPlaceholderText: 'PIN',\n            giftCardExpPlaceholderText: 'MM/YYYY',\n            enteredGiftCardLabel: 'Gift card ending in'\n        };\n\n        mockTenderTypes = [\n            {\n                OperationId: 214,\n                ConnectorId: 'Adyen',\n                TenderTypeId: '12'\n            },\n            {\n                OperationId: 214,\n                ConnectorId: '',\n                TenderTypeId: '13'\n            },\n            {\n                OperationId: 214,\n                ConnectorId: '',\n                TenderTypeId: '8'\n            },\n        ] as TenderType[];\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {\n            return Promise.resolve(mockInternalGiftCardTypes);\n        });\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.getGiftCardAsync.mockImplementation((context, id, typeId, pin, month, year) => {\n            if (id === 'abc') {\n                return Promise.resolve(mockGiftCard);\n            } else if (id === 'empty') {\n                return Promise.resolve(mockGiftCardEmpty);\n            }\n            return Promise.reject(new Error('Not found'));\n        });\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.getTenderTypesAsync.mockImplementation(async () => mockTenderTypes);\n    });\n\n    it('renders correctly for auth user when support internal gift card', () => {\n        let moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n        // @ts-ignore\n        let wrapper  = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-pin-fields').exists()).toBe(false);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-exp-fields').exists()).toBe(false);\n\n        // module config only show pin\n        mockConfig = {\n            showAdditionalFields: showAdditionalFields.pin\n        };\n\n        moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        wrapper  = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-pin-fields').exists()).toBe(false);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-exp-fields').exists()).toBe(false);\n    });\n\n    it('renders correctly for auth user when support external gift card', () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'external'\n                }\n            }\n        };\n\n        let moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n         // @ts-ignore\n        let wrapper  = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-pin-fields').exists()).toBe(true);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-exp-fields').exists()).toBe(true);\n\n         // module config only show pin\n        mockConfig = {\n            showAdditionalFields: showAdditionalFields.pin\n        };\n        moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        wrapper  = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-pin-fields').exists()).toBe(true);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-exp-fields').exists()).toBe(false);\n    });\n\n    it('renders correctly for auth user when support both gift card', () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'both'\n                }\n            }\n        };\n\n        let moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n        // @ts-ignore\n        let wrapper  = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-pin-fields').exists()).toBe(true);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-exp-fields').exists()).toBe(true);\n\n        // module config only show pin\n        mockConfig = {\n            showAdditionalFields: showAdditionalFields.pin\n        };\n        moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        wrapper  = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-pin-fields').exists()).toBe(true);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-exp-fields').exists()).toBe(false);\n    });\n\n    it('renders correctly for guest when support internal gift card', () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: false,\n                    token: ''\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'internal'\n                }\n            }\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n        // @ts-ignore\n        const wrapper = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper).toEqual({});\n    });\n\n    it('renders correctly for guest when support external gift card', () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: false,\n                    token: ''\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'external'\n                }\n            }\n        };\n\n        let moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n         // @ts-ignore\n        let wrapper  = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-pin-fields').exists()).toBe(true);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-exp-fields').exists()).toBe(true);\n\n         // module config only show pin\n        mockConfig = {\n            showAdditionalFields: showAdditionalFields.pin\n        };\n        moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        wrapper  = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-pin-fields').exists()).toBe(true);\n        expect(wrapper.find('.ms-gift-card-balance-check__input-exp-fields').exists()).toBe(false);\n    });\n\n    it('renders correctly for guest when support both gift card', () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: false,\n                    token: ''\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'both'\n                }\n            }\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n        // @ts-ignore\n        const wrapper = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        expect(wrapper).toEqual({});\n    });\n\n    it('disables the apply button when input is empty', () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'both'\n                }\n            }\n        };\n\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = mount(shallow(<GiftCardBalanceCheck {...moduleProps} />).get(0));\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        expect(button.is('[disabled]')).toBe(true);\n    });\n\n    it('shows error when apply an invalid gift card number', async () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'both'\n                }\n            }\n        };\n\n        // @ts-ignore: mockContext\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'xxx';\n        // @ts-ignore\n        const component = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        const input = component.find('input.ms-gift-card-balance-check__input-text');\n\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        button.simulate('click');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe(mockResources.invalidCardInfoError);\n                // unmount after complete state update\n                component.unmount();\n            });\n    });\n\n    it('shows error for empty input', async () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'both'\n                }\n            }\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = shallow(<GiftCardBalanceCheck {...moduleProps} />);\n        const instance = component.instance();\n\n        // test empty input\n        // @ts-ignore\n        instance._applyGiftCard();\n        expect(component.state('errorMessage')).toBe('Please enterd a gift card number');\n    });\n\n    it('handles empty gift card', async () => {\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'both'\n                }\n            }\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        const input = component.find('input.ms-gift-card-balance-check__input-text');\n\n        // test empty card\n        input.simulate('change', {\n            target: {\n                value: 'empty'\n            }\n        });\n        button.simulate('click');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('Gift card has no balance left');\n                component.unmount();\n            });\n    });\n\n    // tslint:disable-next-line:max-func-body-length\n    it('handle if resolveCardTypes return empty', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {\n            return Promise.resolve([]);\n        });\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'abc';\n        // @ts-ignore\n        const component = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        const input = component.find('input.ms-gift-card-balance-check__input-text');\n\n        // And apply 'abc'\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('isFetchingGiftCard')).toBe(false);\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        button.simulate('click');\n        expect(component.state('errorMessage')).toBe('');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                component.update();\n                expect(StoreOperationsDataActions.getTenderTypesAsync).not.toBeCalled();\n                expect(component.state('errorMessage')).toBe('Invalid gift card code entered');\n            });\n    });\n\n    // tslint:disable-next-line:max-func-body-length\n    it('handle config support external when add an internal gift card', async () => {\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'external'\n                }\n            }\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'abc';\n        // @ts-ignore\n        const component = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        const input = component.find('input.ms-gift-card-balance-check__input-text');\n\n        // And apply 'abc'\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('isFetchingGiftCard')).toBe(false);\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        button.simulate('click');\n        expect(component.state('errorMessage')).toBe('');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                component.update();\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('The gift card type is not suported');\n            });\n    });\n\n    // tslint:disable-next-line:max-func-body-length\n    it('handle config support internal when add an external gift card', async () => {\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'internal'\n                }\n            }\n        };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {\n            return Promise.resolve(mockExternalGiftCardTypes);\n        });\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'abc';\n        // @ts-ignore\n        const component = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        const input = component.find('input.ms-gift-card-balance-check__input-text');\n\n        // And apply 'abc'\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('isFetchingGiftCard')).toBe(false);\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        button.simulate('click');\n        expect(component.state('errorMessage')).toBe('');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                component.update();\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('The gift card type is not suported');\n            });\n    });\n\n    // tslint:disable-next-line:max-func-body-length\n    it('handle config support both when add an external gift card', async () => {\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'both'\n                }\n            }\n        };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {\n            return Promise.resolve(mockExternalGiftCardTypes);\n        });\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'abc';\n        // @ts-ignore\n        const component = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        const input = component.find('input.ms-gift-card-balance-check__input-text');\n\n        // And apply 'abc'\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('isFetchingGiftCard')).toBe(false);\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        button.simulate('click');\n        expect(component.state('errorMessage')).toBe('');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                component.update();\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('Gift card PIN is required');\n            });\n    });\n\n        // tslint:disable-next-line:max-func-body-length\n    it('handle config support both when add an external gift card with pin and date', async () => {\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'both'\n                }\n            }\n        };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {\n            return Promise.resolve(mockExternalGiftCardTypes);\n        });\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'abc';\n        // @ts-ignore\n        const component = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        const input = component.find('input.ms-gift-card-balance-check__input-text');\n        const pinInput = component.find('input.ms-gift-card-balance-check__input-pin-text');\n        const expInput = component.find('input.ms-gift-card-balance-check__input-exp-text');\n\n        button.simulate('click');\n        // And apply 'abc'\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        pinInput.simulate('change', {\n            target: {\n                value: '1111'\n            }\n        });\n        expInput.simulate('change', {\n            target: {\n                value: '10/20'\n            }\n        });\n\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('isFetchingGiftCard')).toBe(false);\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        expect(component.state('giftCardPin')).toBe('1111');\n        expect(component.state('giftCardExp')).toBe('10/20');\n\n        button.simulate('click');\n        expect(component.state('errorMessage')).toBe('');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                component.update();\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('');\n            });\n    });\n\n    // tslint:disable-next-line:max-func-body-length\n    it('handle config support external when guest add an internal gift card', async () => {\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: false,\n                    token: ''\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'external'\n                }\n            }\n        };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {\n            return Promise.resolve(mockInternalGiftCardTypes);\n        });\n\n        const moduleProps = {\n            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as IGiftCardBalanceCheckModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'abc';\n        // @ts-ignore\n        const component = mount(<GiftCardBalanceCheck {...moduleProps} />);\n        debugger;\n        const button = component.find('button.ms-gift-card-balance-check__btn-apply');\n        const input = component.find('input.ms-gift-card-balance-check__input-text');\n\n        // And apply 'abc'\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('isFetchingGiftCard')).toBe(false);\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        button.simulate('click');\n        expect(component.state('errorMessage')).toBe('');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                component.update();\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('The gift card type is not suported');\n            });\n    });\n\n    afterEach(() => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.getGiftCardAsync.mockReset();\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.getTenderTypesAsync.mockReset();\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockReset();\n    });\n\n    afterAll(() => {\n        jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');\n    });\n});\n"]}