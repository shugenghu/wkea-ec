import { shallow } from 'enzyme';
import * as React from 'react';
import { getForm } from '../../components/get-form';
import { Form as GiftCardForm } from '../../gift-card-balance-check.view';
import { mockResources } from '../__mock__';
const mockData = {
    errorMessage: '',
    giftCardNumber: '',
    giftCardPin: '',
    giftCardExp: '',
    resources: mockResources,
    onEnterGiftCardNumber: jest.fn(),
    onEnterGiftCardPin: jest.fn(),
    onEnterGiftCardExp: jest.fn(),
    onApplyGiftCard: jest.fn()
};
describe('GiftCardBalanceCheck unit tests - GiftCardForm', () => {
    it('renders correctly - empty form', () => {
        const mockProps = getForm(mockData);
        const component = shallow(React.createElement(GiftCardForm, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
        const input = component.find('input.ms-gift-card-balance-check__input-text');
        const event = { target: { value: '' } };
        input.simulate('change', event);
        expect(mockData.onEnterGiftCardNumber).toBeCalled();
    });
    it('renders correctly - with value', () => {
        const mockProps = getForm({
            ...mockData,
            giftCardNumber: '000'
        });
        const component = shallow(React.createElement(GiftCardForm, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly - with error', () => {
        const mockProps = getForm({
            ...mockData,
            errorMessage: 'Some error message'
        });
        const component = shallow(React.createElement(GiftCardForm, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=gift-card-balance-check-form.test.js.map