{"version":3,"file":"checkout-guest-profile.test.js","sourceRoot":"./src/","sources":["modules/checkout-guest-profile/__tests__/checkout-guest-profile.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\n\nimport { buildHydratedMockActionContext, buildMockModuleProps, IActionContext, ICoreContext } from '@msdyn365-commerce/core';\nimport { ICheckoutState } from '@msdyn365-commerce/global-state';\nimport { AsyncResult } from '@msdyn365-commerce/retail-proxy';\nimport { mount, render, shallow } from 'enzyme';\nimport CheckoutGuestProfile, { ICheckoutGuestProfileModuleProps } from '../checkout-guest-profile';\nimport { ICheckoutGuestProfileData } from '../checkout-guest-profile.data';\nimport { ICheckoutGuestProfileConfig, ICheckoutGuestProfileResources } from '../checkout-guest-profile.props.autogenerated';\nimport renderView from '../checkout-guest-profile.view';\n\nconst mockConfig: ICheckoutGuestProfileConfig = {};\n\nconst mockResources: ICheckoutGuestProfileResources = {\n    emailLabel: 'Email address for order questions',\n    emailErrortext: 'Please enter a valid email',\n    saveBtnLabel: 'Save',\n    editBtnLabel: 'Change',\n    cancelBtnLabel: 'Cancel'\n};\n\nlet mockData: ICheckoutGuestProfileData;\n\nlet mockContext: ICoreContext;\n\ndescribe('CheckoutGuestProfile', () => {\n    let moduleProps: ICheckoutGuestProfileModuleProps;\n    let actionContext: IActionContext;\n    beforeEach(() => {\n        mockData = {\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    guestCheckoutEmail: '',\n                    updateGuestCheckoutEmail: input => {\n                        // @ts-ignore\n                        mockData.checkout.result!.guestCheckoutEmail = input.newGuestCheckoutEmail;\n                    },\n                    checkoutCart: {\n                        cart: {}\n                    }\n                }\n            } as AsyncResult<ICheckoutState>\n        };\n\n        actionContext = buildHydratedMockActionContext();\n    });\n\n    describe('Auth user', () => {\n        beforeEach(() => {\n            mockContext = {\n                actionContext,\n                // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n                request: {\n                    // @ts-ignore: optOutWebActivityTracking\n                    user: {\n                        token: 'asdf',\n                        isAuthenticated: true,\n                        emailAddress: 'test@outlook.com'\n                    }\n                }\n            };\n            moduleProps = {\n                ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutGuestProfileModuleProps),\n                resources: mockResources,\n                // @ts-ignore\n                renderView\n            };\n        });\n\n        it('renders correctly', () => {\n            const component = render(<CheckoutGuestProfile {...moduleProps} />);\n            expect(component).toMatchSnapshot();\n        });\n\n        it('shows account email address', async () => {\n            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));\n            const inputElements = component.getDOMNode().getElementsByTagName('input');\n            expect(component.state('email')).toBe('test@outlook.com');\n            expect(inputElements[0].value).toBe('test@outlook.com');\n\n            // tslint:disable-next-line\n            await new Promise(resolve => setTimeout(resolve, 0));\n\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);\n            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);\n\n            component.unmount();\n        });\n    });\n\n    describe('Guest user', () => {\n        beforeEach(() => {\n            // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n            mockContext = {\n                actionContext\n            };\n            moduleProps = {\n                ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutGuestProfileModuleProps),\n                resources: mockResources\n            };\n        });\n\n        it('renders correctly', () => {\n            const component = render(<CheckoutGuestProfile {...moduleProps} />);\n            expect(component).toMatchSnapshot();\n        });\n\n        it('has no error when initial with empty email', () => {\n            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));\n\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);\n            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);\n\n            // @ts-ignore\n            component.instance().onSubmit();\n\n            // It shows error after click save button for empty email\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(true);\n            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);\n\n            component.unmount();\n        });\n\n        it('has no error when email is valid', () => {\n            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));\n\n            // @ts-ignore\n            component.instance().onChange('email@email.com');\n\n            expect(component.state('email')).toBe('email@email.com');\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);\n            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);\n\n            // @ts-ignore\n            component.instance().onSubmit();\n\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);\n            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);\n\n            component.unmount();\n        });\n\n        it('has no error when email type - test@test.co.in is valid', () => {\n            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));\n\n            // @ts-ignore\n            component.instance().onChange('test@email.co.in');\n\n            expect(component.state('email')).toBe('test@email.co.in');\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);\n            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);\n\n            // @ts-ignore\n            component.instance().onSubmit();\n\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);\n            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);\n\n            component.unmount();\n        });\n\n        it('has error when email is not valid', () => {\n            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));\n\n            // @ts-ignore\n            component.instance().onChange('email@email');\n            // @ts-ignore\n            component.instance().onSubmit();\n\n            expect(component.state('email')).toBe('email@email');\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(true);\n            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);\n\n            component.unmount();\n        });\n    });\n\n    describe('Checkout cart', () => {\n        beforeEach(() => {\n            // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n            mockContext = {\n                actionContext\n            };\n            mockData = {\n                checkout: {\n                    status: 'SUCCESS',\n                    result: {\n                        guestCheckoutEmail: '',\n                        updateGuestCheckoutEmail: input => {\n                            // @ts-ignore\n                            mockData.checkout.result!.guestCheckoutEmail = input.newGuestCheckoutEmail;\n                        },\n                        checkoutCart: {\n                            cart: {\n                                ReceiptEmail: 'test@outlook.com'\n                            }\n                        }\n                    }\n                } as AsyncResult<ICheckoutState>\n            };\n            moduleProps = {\n                ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutGuestProfileModuleProps),\n                resources: mockResources,\n                // @ts-ignore\n                renderView\n            };\n        });\n\n        it('shows email address saved in cart', async () => {\n            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));\n\n            // tslint:disable-next-line\n            await new Promise(resolve => setTimeout(resolve, 0));\n\n            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);\n            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);\n\n            component.unmount();\n        });\n    });\n});\n"]}