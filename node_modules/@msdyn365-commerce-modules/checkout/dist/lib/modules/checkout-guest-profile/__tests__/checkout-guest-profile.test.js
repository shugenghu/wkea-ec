import * as React from 'react';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, render, shallow } from 'enzyme';
import CheckoutGuestProfile from '../checkout-guest-profile';
import renderView from '../checkout-guest-profile.view';
const mockConfig = {};
const mockResources = {
    emailLabel: 'Email address for order questions',
    emailErrortext: 'Please enter a valid email',
    saveBtnLabel: 'Save',
    editBtnLabel: 'Change',
    cancelBtnLabel: 'Cancel'
};
let mockData;
let mockContext;
describe('CheckoutGuestProfile', () => {
    let moduleProps;
    let actionContext;
    beforeEach(() => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    guestCheckoutEmail: '',
                    updateGuestCheckoutEmail: input => {
                        mockData.checkout.result.guestCheckoutEmail = input.newGuestCheckoutEmail;
                    },
                    checkoutCart: {
                        cart: {}
                    }
                }
            }
        };
        actionContext = buildHydratedMockActionContext();
    });
    describe('Auth user', () => {
        beforeEach(() => {
            mockContext = {
                actionContext,
                request: {
                    user: {
                        token: 'asdf',
                        isAuthenticated: true,
                        emailAddress: 'test@outlook.com'
                    }
                }
            };
            moduleProps = {
                ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
                resources: mockResources,
                renderView
            };
        });
        it('renders correctly', () => {
            const component = render(React.createElement(CheckoutGuestProfile, Object.assign({}, moduleProps)));
            expect(component).toMatchSnapshot();
        });
        it('shows account email address', async () => {
            const component = mount(shallow(React.createElement(CheckoutGuestProfile, Object.assign({}, moduleProps))).get(0));
            const inputElements = component.getDOMNode().getElementsByTagName('input');
            expect(component.state('email')).toBe('test@outlook.com');
            expect(inputElements[0].value).toBe('test@outlook.com');
            await new Promise(resolve => setTimeout(resolve, 0));
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);
            component.unmount();
        });
    });
    describe('Guest user', () => {
        beforeEach(() => {
            mockContext = {
                actionContext
            };
            moduleProps = {
                ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
                resources: mockResources
            };
        });
        it('renders correctly', () => {
            const component = render(React.createElement(CheckoutGuestProfile, Object.assign({}, moduleProps)));
            expect(component).toMatchSnapshot();
        });
        it('has no error when initial with empty email', () => {
            const component = mount(shallow(React.createElement(CheckoutGuestProfile, Object.assign({}, moduleProps))).get(0));
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);
            component.instance().onSubmit();
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(true);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);
            component.unmount();
        });
        it('has no error when email is valid', () => {
            const component = mount(shallow(React.createElement(CheckoutGuestProfile, Object.assign({}, moduleProps))).get(0));
            component.instance().onChange('email@email.com');
            expect(component.state('email')).toBe('email@email.com');
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);
            component.instance().onSubmit();
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);
            component.unmount();
        });
        it('has no error when email type - test@test.co.in is valid', () => {
            const component = mount(shallow(React.createElement(CheckoutGuestProfile, Object.assign({}, moduleProps))).get(0));
            component.instance().onChange('test@email.co.in');
            expect(component.state('email')).toBe('test@email.co.in');
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);
            component.instance().onSubmit();
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);
            component.unmount();
        });
        it('has error when email is not valid', () => {
            const component = mount(shallow(React.createElement(CheckoutGuestProfile, Object.assign({}, moduleProps))).get(0));
            component.instance().onChange('email@email');
            component.instance().onSubmit();
            expect(component.state('email')).toBe('email@email');
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(true);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);
            component.unmount();
        });
    });
    describe('Checkout cart', () => {
        beforeEach(() => {
            mockContext = {
                actionContext
            };
            mockData = {
                checkout: {
                    status: 'SUCCESS',
                    result: {
                        guestCheckoutEmail: '',
                        updateGuestCheckoutEmail: input => {
                            mockData.checkout.result.guestCheckoutEmail = input.newGuestCheckoutEmail;
                        },
                        checkoutCart: {
                            cart: {
                                ReceiptEmail: 'test@outlook.com'
                            }
                        }
                    }
                }
            };
            moduleProps = {
                ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
                resources: mockResources,
                renderView
            };
        });
        it('shows email address saved in cart', async () => {
            const component = mount(shallow(React.createElement(CheckoutGuestProfile, Object.assign({}, moduleProps))).get(0));
            await new Promise(resolve => setTimeout(resolve, 0));
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);
            component.unmount();
        });
    });
});
//# sourceMappingURL=checkout-guest-profile.test.js.map