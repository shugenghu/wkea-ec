import { __decorate } from "tslib";
import { withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import classnames from 'classnames';
import { computed, when } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import getAddContactInfo from './components/get-add-contact-info';
import getShowContactInfo from './components/get-show-contact-info';
export * from './components/get-add-contact-info';
export * from './components/get-show-contact-info';
let CheckoutGuestProfile = class CheckoutGuestProfile extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            email: (this.props.context &&
                this.props.context.request &&
                this.props.context.request.user &&
                this.props.context.request.user.isAuthenticated &&
                this.props.context.request.user.emailAddress) ||
                ''
        };
        this.inputRef = React.createRef();
        this.init = async () => {
            const emailOnCart = this.props.data.checkout.result?.checkoutCart.cart.ReceiptEmail;
            const email = emailOnCart || this.state.email;
            if (email) {
                await this.updateGuestProfile(email);
            }
            const isEmailValid = this.isEmailValid(email);
            this.props.moduleState.init({
                onEdit: this.onEdit,
                onCancel: this.onCancel,
                onSubmit: this.onSubmit,
                status: email && isEmailValid ? 'ready' : 'updating',
                hasError: !!email && !isEmailValid
            });
        };
        this.onChange = (rowEmail) => {
            const email = (rowEmail || '').replace(new RegExp('[<>]', 'gi'), '');
            this.setState({ email });
            if (this.props.moduleState.hasError) {
                this.props.moduleState.setHasError(false);
            }
        };
        this.isEmailValid = (email) => {
            const regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return regex.test(email);
        };
        this.updateGuestProfile = async (newGuestCheckoutEmail) => {
            if (this.props.data.checkout.result) {
                await this.props.data.checkout.result.updateGuestCheckoutEmail({ newGuestCheckoutEmail });
                this.setState({ email: newGuestCheckoutEmail });
            }
        };
        this.onEdit = () => {
            this.props.moduleState.onUpdating();
        };
        this.onSubmit = async () => {
            const { email } = this.state;
            const isValid = this.isEmailValid(email);
            if (!isValid) {
                this.props.moduleState.setHasError(true);
                const input = this.inputRef && this.inputRef.current && this.inputRef.current.focus && this.inputRef.current;
                input && input.focus();
            }
            else {
                this.props.moduleState.onReady();
                await this.updateGuestProfile(email);
            }
        };
        this.onCancel = () => {
            if (!this.props.data.checkout.result) {
                return;
            }
            const email = this.props.data.checkout.result.guestCheckoutEmail;
            if (!email) {
                this.props.moduleState.onUpdating();
                return;
            }
            else {
                this.setState({
                    email
                });
                this.props.moduleState.setHasError(false);
                this.props.moduleState.onReady();
            }
        };
    }
    get isDataReady() {
        return (this.props.data.checkout.result && this.props.data.checkout.status) === 'SUCCESS';
    }
    componentDidMount() {
        when(() => this.isDataReady, async () => {
            await this.init();
        });
    }
    render() {
        const { config: { className }, resources, moduleState: { isReady, hasError, hasExternalSubmitGroup } } = this.props;
        const email = (this.props.data.checkout.result && this.props.data.checkout.result.guestCheckoutEmail) || '';
        const viewProps = {
            ...this.props,
            ...this.state,
            onChange: this.onChange,
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onSubmit: this.onSubmit,
            moduleProps: {
                moduleProps: this.props,
                className: classnames('ms-checkout-guest-profile', className, isReady ? 'show' : 'add')
            },
            showContactInfo: isReady
                ? getShowContactInfo({
                    canEdit: !hasExternalSubmitGroup,
                    email,
                    resources,
                    onEdit: this.onEdit
                })
                : undefined,
            addContactInfo: !isReady
                ? getAddContactInfo({
                    email: this.state.email,
                    hasError,
                    resources,
                    inputRef: this.inputRef,
                    onChange: this.onChange,
                    canSubmit: !hasExternalSubmitGroup,
                    onSubmit: this.onSubmit,
                    canCancel: !hasExternalSubmitGroup && !!email,
                    onCancel: this.onCancel
                })
                : undefined
        };
        return this.props.renderView(viewProps);
    }
};
__decorate([
    computed
], CheckoutGuestProfile.prototype, "isDataReady", null);
CheckoutGuestProfile = __decorate([
    withModuleState,
    observer
], CheckoutGuestProfile);
export default CheckoutGuestProfile;
//# sourceMappingURL=checkout-guest-profile.js.map