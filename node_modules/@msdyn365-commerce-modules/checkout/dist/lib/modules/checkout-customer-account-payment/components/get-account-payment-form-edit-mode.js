import { Alert, Button } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
export const getAccountPaymentFormEditMode = (options) => {
    const { resources, onAddPayment, amount, onChangePaymentAmount, maxAmount, customer, customerCreatedDate, availableCredit, showCreditLimit, errorMessage, onToggleCreditSection, creditSectionIsExpanded, orderTotal, excessCredit, onRemovePayment, appliedAmount } = options;
    const { addPaymentButtonLabel, inputAmountLabel, inputAmountAriaLabel, customerSinceLabel, accountCreditLabel, creditDetailsSectionLabel, orderTotalLabel, availableCreditLabel, creditExcessLabel, appliedCustomerAccountPaymentLabel, removeCustomerAccountPaymentLabel } = resources;
    const inputLabel = (React.createElement("span", { id: 'ms-checkout-customer-account__label', className: 'ms-checkout-customer-account__input-label' }, inputAmountLabel));
    const onAddAccountPayment = async (e) => {
        e.preventDefault();
        await onAddPayment();
    };
    const formProps = {
        className: 'ms-checkout-customer-account__form-edit',
        onSubmit: onAddAccountPayment,
        tag: 'form'
    };
    const addPaymentButton = (React.createElement(Button, { className: 'ms-checkout-customer-account__btn-pay', onClick: onAddAccountPayment, disabled: (amount > maxAmount) || (amount < 0) }, addPaymentButtonLabel));
    const onChangeAmount = (e) => {
        const value = parseFloat(e.target.value || '0');
        onChangePaymentAmount(value);
    };
    const inputAmount = (React.createElement("input", { type: 'number', className: 'ms-checkout-customer-account__input-amount form-control', value: amount, onInput: onChangeAmount, "aria-label": inputAmountAriaLabel, "aria-valuemin": 0, "aria-valuemax": maxAmount, "aria-valuenow": amount, min: 0, max: maxAmount }));
    const customerName = (React.createElement("div", { className: 'ms-checkout-customer-account__account-name' }, customer?.Name));
    const customerAccountNumber = (React.createElement("div", { className: 'ms-checkout-customer-account__account-number' },
        '#',
        customer?.AccountNumber));
    const customerSince = (React.createElement("div", { className: 'ms-checkout-customer-account__customer-since' },
        customerSinceLabel,
        customerCreatedDate));
    const accountCredit = (React.createElement(React.Fragment, null,
        React.createElement("span", { className: 'ms-checkout-customer-account__account-credit-label' }, accountCreditLabel),
        showCreditLimit && React.createElement("span", { className: 'ms-checkout-customer-account__account-credit' }, availableCredit),
        React.createElement("span", { className: creditSectionIsExpanded ? 'ms-checkout-customer-account__account-credit-toggle-up' : 'ms-checkout-customer-account__account-credit-toggle-down', onClick: onToggleCreditSection, role: 'button' })));
    const accountDetails = (creditSectionIsExpanded ?
        (React.createElement("div", { className: 'ms-checkout-customer-account__credit-details-section' },
            React.createElement(React.Fragment, null,
                React.createElement("div", { className: 'ms-checkout-customer-account__account-credit-current-order-preview' },
                    React.createElement("span", { className: 'ms-checkout-customer-account__account-credit-current-order-icon' }),
                    React.createElement("span", { className: 'ms-checkout-customer-account__account-credit-current-order-preview-label' }, creditDetailsSectionLabel))),
            React.createElement("div", { className: 'ms-checkout-customer-account__available-credit-section' },
                React.createElement("span", { className: 'ms-checkout-customer-account__available-credit-label' }, availableCreditLabel),
                React.createElement("span", { className: 'ms-checkout-customer-account__available-credit' }, availableCredit)),
            React.createElement("div", { className: 'ms-checkout-customer-account__order-total-section' },
                React.createElement("span", { className: 'ms-checkout-customer-account__order-total-label' }, orderTotalLabel),
                React.createElement("span", { className: 'ms-checkout-customer-account__order-total' }, orderTotal)),
            React.createElement("div", { className: 'ms-checkout-customer-account__excess-credit-section' },
                React.createElement("span", { className: 'ms-checkout-customer-account__excess-credit-label' }, creditExcessLabel),
                React.createElement("span", { className: 'ms-checkout-customer-account__excess-credit' }, excessCredit)))) : undefined);
    const alert = (React.createElement(Alert, { tag: 'span', id: 'ms-checkout-customer-account__error', className: 'ms-checkout-customer-account__input-error', role: 'alert', assertive: false, fade: false, includeAlertClass: false, isOpen: !!errorMessage }, errorMessage));
    const appliedLine = (appliedAmount ?
        (React.createElement("div", { className: 'ms-checkout-customer-account__applied-line' },
            React.createElement("span", { className: 'ms-checkout-customer-account__applied-label' }, appliedCustomerAccountPaymentLabel),
            React.createElement("span", { className: 'ms-checkout-customer-account__applied-amount' }, appliedAmount),
            React.createElement("a", { className: 'ms-checkout-customer-account__remove', onClick: onRemovePayment, role: 'button' }, removeCustomerAccountPaymentLabel))) : undefined);
    const bottomBorder = (React.createElement("div", { className: 'ms-checkout-customer-account__bottom-border' }));
    return {
        formProps,
        inputLabel,
        inputAmount,
        addPaymentButton,
        customerName,
        customerAccountNumber,
        customerSince,
        accountCredit,
        alert,
        accountDetails,
        appliedLine,
        bottomBorder
    };
};
//# sourceMappingURL=get-account-payment-form-edit-mode.js.map