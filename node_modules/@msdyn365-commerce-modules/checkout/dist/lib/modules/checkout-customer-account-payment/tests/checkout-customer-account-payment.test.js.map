{"version":3,"file":"checkout-customer-account-payment.test.js","sourceRoot":"./src/","sources":["modules/checkout-customer-account-payment/tests/checkout-customer-account-payment.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------\n */\n/// <reference types=\"jest\" />\nimport { IModuleStateManager, updateModuleStates } from '@msdyn365-commerce-modules/checkout-utilities';\nimport { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';\nimport { buildHydratedMockActionContext, buildMockModuleProps, buildMockRequest, IRequestContextUser } from '@msdyn365-commerce/core';\nimport { ICheckoutState } from '@msdyn365-commerce/global-state';\nimport { Cart, Customer, CustomerBalances } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport * as React from 'react';\nimport * as renderer from 'react-test-renderer';\nimport CheckoutCustomerAccountPayment, { ICheckoutCustomerAccountPaymentViewProps } from '../checkout-customer-account-payment';\nimport { ICheckoutCustomerAccountPaymentData } from '../checkout-customer-account-payment.data';\nimport { ICheckoutCustomerAccountPaymentResources } from '../checkout-customer-account-payment.props.autogenerated';\n\nconst mockCart = {\n    Id: 'jWvjTh2wyxWnopUGQmzpkGoQVuu5pUh6',\n    TotalAmount: 479.25,\n    CartLines: [\n        {\n            LineId: '2',\n            ProductId: 2,\n            Quantity: 2,\n            Price: 300,\n            ExtendedPrice: 450,\n            TaxAmount: 29.25,\n            ItemTaxGroupId: 'RP',\n            TotalAmount: 479.25,\n            NetAmountWithoutTax: 450,\n            NetPrice: 600,\n            DiscountAmountWithoutTax: 150,\n            DiscountAmount: 150\n        }\n    ]\n} as Cart;\n\n// @ts-ignore partial class\nlet mockCheckoutState: ICheckoutState = {\n    // @ts-ignore partial class\n    checkoutCart: {\n        cart: mockCart\n    },\n    loyaltyAmount: 50\n};\n\n// @ts-ignore partial class\nconst mockReadyModuleStates = {\n    mock_id: {\n        id: 'mock-id',\n        init: jest.fn(),\n        hasModuleState: true,\n        hasExternalSubmitGroup: true,\n        hasError: false,\n        hasInitialized: true,\n        isReady: true,\n        isUpdating: false,\n        isDisabled: false,\n        onEdit: jest.fn(),\n        onSubmit: jest.fn(),\n        onCancel: jest.fn(),\n        setHasError: jest.fn(),\n        status: 'Ready'\n    }\n};\n\n// @ts-ignore partial class\nconst mockEditModuleState: IModuleStateManager = {\n    id: 'mock-id',\n    init: jest.fn(),\n    hasModuleState: true,\n    hasExternalSubmitGroup: true,\n    hasError: false,\n    hasInitialized: true,\n    isReady: false,\n    isUpdating: true,\n    isDisabled: false,\n    onEdit: jest.fn(),\n    onSubmit: jest.fn(),\n    onCancel: jest.fn(),\n    setHasError: jest.fn()\n};\n\nconst mockCustomer: Customer = {\n    AccountNumber: '005221',\n    Name: 'Will Havelin',\n    MandatoryCreditLimit: true,\n    AllowOnAccountPayment: true\n};\n\nconst mockCustomer2: Customer = {\n    AccountNumber: '005221',\n    Name: 'Will Havelin',\n    MandatoryCreditLimit: false,\n    AllowOnAccountPayment: true\n};\n\nconst mockCreditBalances: CustomerBalances = {\n    Balance: 0,\n    PendingBalance: 0,\n    CreditLimit: 100,\n    InvoiceAccountBalance: 0,\n    InvoiceAccountCreditLimit: 100,\n    InvoiceAccountPendingBalance: 0\n};\n\nconst mockData: ICheckoutCustomerAccountPaymentData = {\n    checkout: wrapInResolvedAsyncResult(mockCheckoutState),\n    customerInformation: wrapInResolvedAsyncResult(mockCustomer),\n    creditBalances: wrapInResolvedAsyncResult(mockCreditBalances)\n};\n\nconst mockData2: ICheckoutCustomerAccountPaymentData = {\n    checkout: wrapInResolvedAsyncResult(mockCheckoutState),\n    customerInformation: wrapInResolvedAsyncResult(mockCustomer2),\n    creditBalances: wrapInResolvedAsyncResult(mockCreditBalances)\n};\n\n// @ts-ignore partial class\nconst mockTelemetry: ITelemetery = {\n    information: jest.fn()\n};\n\nconst mockUser: IRequestContextUser = {customerAccountNumber: '005221', isAuthenticated: true, token: '', optOutWebActivityTracking: false};\nconst plaftormWithFeature = {enableCustomerAccoutPayment: 'all'};\nconst appWithFeature = {plaftorm: plaftormWithFeature};\nconst mockRequestWithFeature = buildMockRequest({user: mockUser, app: appWithFeature });\n\nconst mockActionContextWithFeature = buildHydratedMockActionContext({requestContext: mockRequestWithFeature});\n\nconst mockActionContextWithoutFeature = buildHydratedMockActionContext({telemetry: mockTelemetry});\n\n// @ts-ignore\nconst mockContextWithFeature: ICoreContext = {\n    actionContext: mockActionContextWithFeature,\n    cultureFormatter: {\n        formatCurrency: jest.fn((price, _foo) => `$${price}`)\n    },\n    request: {\n        locale: 'en-us',\n        user: {\n            isAuthenticated: true,\n            customerAccountNumber: '005221'\n        },\n        channel: {\n            Currency: 'USD'\n        }\n    },\n    telemetry: mockTelemetry\n};\n\n// @ts-ignore\nconst mockContextWithoutFeature: ICoreContext = {\n    actionContext: mockActionContextWithoutFeature,\n    cultureFormatter: {\n        formatCurrency: jest.fn((price, _foo) => `$${price}`)\n    },\n    request: {\n        locale: 'en-us',\n        user: {\n            isAuthenticated: true,\n            customerAccountNumber: '005221'\n        },\n        channel: {\n            Currency: 'USD'\n        }\n    },\n    telemetry: mockTelemetry\n};\n\nconst mockResources: ICheckoutCustomerAccountPaymentResources = {\n    addPaymentButtonLabel: 'Pay with customer account',\n    inputAmountLabel: 'Customer account payment',\n    inputAmountAriaLabel: 'amount to pay',\n    customerSinceLabel: 'Customer since',\n    accountCreditLabel: 'account credit',\n    inputAmountSummaryLabel: 'Account balance',\n    invalidAmountMessage: 'Invalid amount',\n    creditDetailsSectionLabel: 'Current order preview',\n    availableCreditLabel: 'Total available credit',\n    orderTotalLabel: 'Current order total',\n    creditExcessLabel: 'Excess credit',\n    appliedCustomerAccountPaymentLabel: 'Applied:',\n    removeCustomerAccountPaymentLabel: 'Remove'\n};\n\nconst mockActions = {};\n\ndescribe('CheckoutCustomerAccountPayment', () => {\n    beforeEach(() => {\n        mockCheckoutState = {\n            // @ts-ignore partial class\n            checkoutCart: {\n                cart: mockCart\n            },\n            loyaltyAmount: 50\n        };\n    });\n\n    it('renders correctly when feature disabled', () => {\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, {}, mockContextWithoutFeature) as ICheckoutCustomerAccountPaymentViewProps),\n            resources: mockResources\n        };\n        moduleProps.context = mockContextWithoutFeature;\n        moduleProps.id = 'mock_id';\n\n        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it('renders correctly when feature enabled in edit mode', () => {\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, {}, mockContextWithFeature) as ICheckoutCustomerAccountPaymentViewProps),\n            resources: mockResources\n        };\n        moduleProps.context = mockContextWithFeature;\n\n        // @ts-ignore: Using partial for testing\n        updateModuleStates({mockEditModuleState}, moduleProps.context.actionContext);\n\n        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it('renders correctly when feature enabled in edit mode when credit limit is optional', () => {\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData2, mockActions, {}, mockContextWithFeature) as ICheckoutCustomerAccountPaymentViewProps),\n            resources: mockResources\n        };\n        moduleProps.context = mockContextWithFeature;\n\n        // @ts-ignore: Using partial for testing\n        updateModuleStates({mockEditModuleState}, moduleProps.context.actionContext);\n\n        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);\n        component;\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it('renders correctly when feature enabled in view mode', () => {\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, {}, mockContextWithFeature) as ICheckoutCustomerAccountPaymentViewProps),\n            resources: mockResources\n        };\n        moduleProps.context = mockContextWithFeature;\n\n        // @ts-ignore: Using partial for testing\n        updateModuleStates(mockReadyModuleStates, moduleProps.context.actionContext);\n\n        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it('renders correctly (as in does not render) when there is no cart', () => {\n\n        mockCheckoutState = {\n            // @ts-ignore partial class\n            checkoutCart: {\n            }\n        };\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, {}, mockContextWithFeature) as ICheckoutCustomerAccountPaymentViewProps),\n            resources: mockResources\n        };\n        moduleProps.context = mockContextWithFeature;\n\n        // @ts-ignore: Using partial for testing\n        updateModuleStates({mockEditModuleState}, moduleProps.context.actionContext);\n\n        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n"]}