import { mount, shallow } from 'enzyme';
import * as React from 'react';
import { EditForm } from '../../checkout-customer-account-payment.view';
import { getAccountPaymentFormEditMode } from '../../components';
const mockResources = {
    addPaymentButtonLabel: 'test',
    inputAmountLabel: 'test2',
    inputAmountAriaLabel: 'test3',
    customerSinceLabel: 'test4',
    accountCreditLabel: 'test5',
    inputAmountSummaryLabel: 'test6',
    invalidAmountMessage: 'test7',
    orderTotalLabel: 'test8',
    creditExcessLabel: 'test9',
    availableCreditLabel: 'test10',
    creditDetailsSectionLabel: 'test11',
    appliedCustomerAccountPaymentLabel: 'test12',
    removeCustomerAccountPaymentLabel: 'test13'
};
describe('Checkout customer account payment unit tests', () => {
    beforeEach(() => {
        jest.resetAllMocks();
    });
    it('Clicking pay calls the add payment amount function ', () => {
        const mockOptions = {
            amount: 199,
            onChangePaymentAmount: jest.fn(),
            onAddPayment: jest.fn(),
            resources: mockResources,
            maxAmount: 200,
            customer: { Name: 'Test Name', AccountNumber: '1968' },
            customerCreatedDate: '01/01/1970',
            availableCredit: '$50.00',
            showCreditLimit: true,
            errorMessage: '',
            onToggleCreditSection: jest.fn(),
            creditSectionIsExpanded: false,
            orderTotal: '$60',
            excessCredit: '-$10',
            onRemovePayment: jest.fn(),
            appliedAmount: '$20'
        };
        const form = getAccountPaymentFormEditMode(mockOptions);
        const component = mount(React.createElement(EditForm, Object.assign({}, form)));
        const button = component.find('.ms-checkout-customer-account__btn-pay').first();
        button.simulate('click');
        expect(mockOptions.onAddPayment).toBeCalled();
    });
    it('Changing the amount calls the on change payment amount function ', () => {
        const mockOptions = {
            amount: 199,
            onAddPayment: jest.fn(),
            onChangePaymentAmount: jest.fn(),
            resources: mockResources,
            maxAmount: 200,
            customer: { Name: 'Test Name', AccountNumber: '1968' },
            customerCreatedDate: '01/01/1970',
            availableCredit: '$50.00',
            showCreditLimit: true,
            errorMessage: '',
            onToggleCreditSection: jest.fn(),
            creditSectionIsExpanded: false,
            orderTotal: '$60',
            excessCredit: '-$10',
            onRemovePayment: jest.fn(),
            appliedAmount: '$20'
        };
        const form = getAccountPaymentFormEditMode(mockOptions);
        const component = shallow(React.createElement(EditForm, Object.assign({}, form)));
        const input = component.find('input.ms-checkout-customer-account__input-amount');
        const event = { target: { value: 11 } };
        input.simulate('input', event);
        expect(mockOptions.onChangePaymentAmount).toBeCalledWith(11);
    });
    it('If show credit limit is false, credit limit should not be shown', () => {
        const mockOptions = {
            amount: 199,
            onAddPayment: jest.fn(),
            onChangePaymentAmount: jest.fn(),
            resources: mockResources,
            maxAmount: 200,
            customer: { Name: 'Test Name', AccountNumber: '1968' },
            customerCreatedDate: '01/01/1970',
            availableCredit: '$50',
            showCreditLimit: false,
            errorMessage: '',
            onToggleCreditSection: jest.fn(),
            creditSectionIsExpanded: false,
            orderTotal: '$60',
            excessCredit: '-$10',
            onRemovePayment: jest.fn(),
            appliedAmount: '$20'
        };
        const form = getAccountPaymentFormEditMode(mockOptions);
        const component = shallow(React.createElement(EditForm, Object.assign({}, form)));
        const creditComponent = component.find('input.ms-checkout-customer-account__account-credit');
        expect(creditComponent).toMatchSnapshot();
    });
    it('If show credit limit is true, credit limit should be shown', () => {
        const mockOptions = {
            amount: 199,
            onAddPayment: jest.fn(),
            onChangePaymentAmount: jest.fn(),
            resources: mockResources,
            maxAmount: 200,
            customer: { Name: 'Test Name', AccountNumber: '1968' },
            customerCreatedDate: '01/01/1970',
            availableCredit: '$40.50',
            showCreditLimit: true,
            errorMessage: '',
            onToggleCreditSection: jest.fn(),
            creditSectionIsExpanded: false,
            orderTotal: '$60',
            excessCredit: '-$20',
            onRemovePayment: jest.fn(),
            appliedAmount: '$20'
        };
        const form = getAccountPaymentFormEditMode(mockOptions);
        const component = shallow(React.createElement(EditForm, Object.assign({}, form)));
        const creditComponent = component.find('input.ms-checkout-customer-account__account-credit');
        expect(creditComponent).toMatchSnapshot();
    });
    it('Clicking remove calls the remove payment amount function ', () => {
        const mockOptions = {
            amount: 199,
            onChangePaymentAmount: jest.fn(),
            onAddPayment: jest.fn(),
            resources: mockResources,
            maxAmount: 200,
            customer: { Name: 'Test Name', AccountNumber: '1968' },
            customerCreatedDate: '01/01/1970',
            availableCredit: '$50.00',
            showCreditLimit: true,
            errorMessage: '',
            onToggleCreditSection: jest.fn(),
            creditSectionIsExpanded: false,
            orderTotal: '$60',
            excessCredit: '-$10',
            onRemovePayment: jest.fn(),
            appliedAmount: '$20'
        };
        const form = getAccountPaymentFormEditMode(mockOptions);
        const component = mount(React.createElement(EditForm, Object.assign({}, form)));
        const button = component.find('.ms-checkout-customer-account__remove').first();
        button.simulate('click');
        expect(mockOptions.onRemovePayment).toBeCalled();
    });
    it('Clicking toggle expands the credit details section ', () => {
        const mockOptions = {
            amount: 199,
            onChangePaymentAmount: jest.fn(),
            onAddPayment: jest.fn(),
            resources: mockResources,
            maxAmount: 200,
            customer: { Name: 'Test Name', AccountNumber: '1968' },
            customerCreatedDate: '01/01/1970',
            availableCredit: '$50.00',
            showCreditLimit: true,
            errorMessage: '',
            onToggleCreditSection: jest.fn(),
            creditSectionIsExpanded: false,
            orderTotal: '$60',
            excessCredit: '-$10',
            onRemovePayment: jest.fn(),
            appliedAmount: '$20'
        };
        const form = getAccountPaymentFormEditMode(mockOptions);
        const component = mount(React.createElement(EditForm, Object.assign({}, form)));
        const button = component.find('.ms-checkout-customer-account__account-credit-toggle-down').first();
        button.simulate('click');
        expect(mockOptions.onToggleCreditSection).toBeCalled();
    });
});
//# sourceMappingURL=checkout-customer-account-payment.test.js.map