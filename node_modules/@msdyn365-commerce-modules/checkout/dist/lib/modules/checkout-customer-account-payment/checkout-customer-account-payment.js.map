{"version":3,"file":"checkout-customer-account-payment.js","sourceRoot":"./src/","sources":["modules/checkout-customer-account-payment/checkout-customer-account-payment.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { IModuleStateManager, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';\nimport { IModuleProps } from '@msdyn365-commerce-modules/utilities';\nimport { CustomerBalances } from '@msdyn365-commerce/retail-proxy';\nimport classnames from 'classnames';\nimport get from 'lodash/get';\nimport { computed, reaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { ICheckoutCustomerAccountPaymentData } from './checkout-customer-account-payment.data';\nimport { ICheckoutCustomerAccountPaymentProps } from './checkout-customer-account-payment.props.autogenerated';\nimport { getAccountPaymentFormEditMode, IAccountPaymentEditViewForm } from './components/get-account-payment-form-edit-mode';\nimport { getAccountPaymentFormSummaryMode, IAccountPaymentSummaryViewForm } from './components/get-account-payment-form-summary-mode';\n\nexport interface ICheckoutCustomerAccountPaymentViewProps extends ICheckoutCustomerAccountPaymentProps<ICheckoutCustomerAccountPaymentData> {\n    checkoutCustomerAccount: IModuleProps;\n    summaryView: IAccountPaymentSummaryViewForm;\n    editView: IAccountPaymentEditViewForm;\n    moduleState: IModuleStateManager;\n}\n\nexport interface ICheckoutCustomerAccountPaymentState {\n    paymentAmount: number;\n    isCreditSectionExpanded: boolean;\n}\n\n/**\n *\n * CheckoutCustomerAccount component\n * @extends {React.Component<ICheckoutCustomerAccountPaymentProps<ICheckoutCustomerAccountPaymentData>>}\n */\n// @ts-ignore\n@withModuleState\n@observer\nexport class CheckoutCustomerAccountPayment extends React.Component<ICheckoutCustomerAccountPaymentViewProps, ICheckoutCustomerAccountPaymentState> {\n\n    @computed get isCustomerAccountPaymentEnabled(): boolean {\n        const customerInfo = get(this.props, 'data.customerInformation.result');\n        const platform = get(this.props, 'context.request.app.platform');\n\n        return customerInfo &&\n        customerInfo.AllowOnAccountPayment === true &&\n        platform &&\n        (platform.enableCustomerAccountPayment === 'all' ||\n        (platform.enableCustomerAccountPayment === 'b2b' && customerInfo.IsB2b === true) ||\n        (platform.enableCustomerAccountPayment === 'b2c' && customerInfo.IsB2b === false));\n    }\n\n    @computed get getLoyaltyAmount(): number {\n        const checkoutState = this.props.data.checkout.result;\n        if (!checkoutState || !checkoutState.loyaltyAmount) {\n            return 0;\n        }\n        return checkoutState.loyaltyAmount;\n    }\n\n    @computed get getGiftCardAmount(): number {\n        const checkoutState = this.props.data.checkout.result;\n        if (!checkoutState || !checkoutState.giftCards || checkoutState.giftCards.length === 0) {\n            return 0;\n        }\n\n        let giftCardAmount: number = 0;\n        checkoutState.giftCards.forEach(giftCard => {\n                giftCardAmount += (giftCard.Balance || 0);\n            });\n\n        return giftCardAmount;\n    }\n\n    @computed get maxPaymentAmount(): number {\n        const cart = this.props.data.checkout.result ? this.props.data.checkout.result.checkoutCart.cart : undefined;\n        if (!cart) {\n            return 0;\n        }\n        // Use customer account after gift card and loyalty.\n        const amountDue = Math.max(0, (cart.TotalAmount || 0) - this.getLoyaltyAmount - this.getGiftCardAmount);\n\n        // if the user has a mandatory credit limit, then the max amount must not be more than that\n        if (this.props.data.customerInformation?.result?.MandatoryCreditLimit) {\n            return Math.min(this.getAvailableCredit(this.props.data.creditBalances?.result), amountDue);\n        } else {\n            return amountDue;\n        }\n    }\n\n    @computed get errorMessage(): string | undefined {\n        if (this.state.paymentAmount > this.maxPaymentAmount || this.state.paymentAmount < 0) {\n            return this.props.resources.invalidAmountMessage;\n        }\n\n        return undefined;\n    }\n\n    @computed get currencyCode(): string | undefined {\n        return get(this.props, 'context.request.channel.Currency');\n    }\n\n    @computed get availableCredit(): number {\n        const creditBalances = get(this.props, 'data.creditBalances.result');\n\n        return creditBalances ? this.getAvailableCredit(creditBalances) : 0;\n    }\n\n    @computed get orderTotal(): number {\n        const orderTotal = get(this.props, 'data.checkout.result.checkoutCart.cart.TotalAmount');\n\n        return orderTotal ? orderTotal : 0;\n    }\n\n    @computed get formattedExcessCredit(): string | undefined {\n        const excessCredit = this.availableCredit - this.orderTotal;\n        return excessCredit < 0 ? this.props.context.cultureFormatter.formatCurrency(excessCredit, this.currencyCode) : undefined;\n    }\n\n    private baseClassName: string = 'ms-checkout-customer-account';\n    public constructor(props: ICheckoutCustomerAccountPaymentViewProps) {\n        super(props);\n        this.state = {paymentAmount: this.maxPaymentAmount, isCreditSectionExpanded: false};\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.init();\n\n        // when the cart.TotalAmount gets updated (like if selecting the delivery option adds a charge) we need to update the amount based on the new total amount.\n        reaction(\n            () => this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart && this.props.data.checkout.result.checkoutCart.cart.TotalAmount,\n            totalAmount => {\n                this.updateMaxAmount(this.maxPaymentAmount);\n            }\n        );\n    }\n\n    public render(): JSX.Element | null {\n        const customerInfo = this.props.data.customerInformation.result;\n\n        if (!this.isCustomerAccountPaymentEnabled) {\n            this.props.context.telemetry.information('customer account payments will not display, because the feature is disabled or not enabled for this type of customer');\n            return null;\n        }\n\n        const checkoutState = this.props.data.checkout.result;\n        const cart =  checkoutState ? checkoutState.checkoutCart.cart : undefined;\n\n        const creditBalances = this.props.data.creditBalances.result;\n\n        if (!cart) {\n            return null;\n        }\n        const resources = this.props.resources;\n        const locale = get(this.props, 'context.request.locale') || 'en-us';\n\n        const customerSinceDate = new Date(customerInfo?.CreatedDateTime || 0).toLocaleDateString(locale);\n\n        const props = {\n            ...this.props,\n            checkoutCustomerAccount: {\n            moduleProps: this.props,\n            className: classnames(\n                this.baseClassName\n            )},\n            editView: getAccountPaymentFormEditMode({\n                onAddPayment: this.addPayment,\n                resources,\n                amount: this.state.paymentAmount,\n                onChangePaymentAmount: this.onChangePaymentAmount,\n                maxAmount: this.maxPaymentAmount,\n                customer: customerInfo,\n                customerCreatedDate: customerSinceDate,\n                availableCredit: this.props.context.cultureFormatter.formatCurrency(this.getAvailableCredit(creditBalances), this.currencyCode),\n                showCreditLimit: customerInfo?.MandatoryCreditLimit || false,\n                errorMessage: this.errorMessage,\n                onToggleCreditSection: this.toggleCreditSection,\n                creditSectionIsExpanded: this.state.isCreditSectionExpanded,\n                orderTotal: this.props.context.cultureFormatter.formatCurrency(this.orderTotal, this.currencyCode),\n                excessCredit: this.formattedExcessCredit,\n                onRemovePayment: this.removePayment,\n                appliedAmount: checkoutState && checkoutState.customerAccountAmount > 0 ? this.props.context.cultureFormatter.formatCurrency(checkoutState.customerAccountAmount, this.currencyCode) : undefined\n            }),\n            summaryView: getAccountPaymentFormSummaryMode({\n                resources,\n                amount: this.state.paymentAmount,\n                appliedAmount: checkoutState && checkoutState.customerAccountAmount > 0 ? this.props.context.cultureFormatter.formatCurrency(checkoutState.customerAccountAmount, this.currencyCode) : undefined\n            })\n        };\n\n        return this.props.renderView(props) as React.ReactElement;\n    }\n\n    private getAvailableCredit = (creditBalances: CustomerBalances | undefined) => {\n        if (!creditBalances) {\n            return 0;\n        }\n        return creditBalances.CreditLimit - creditBalances.Balance - creditBalances.PendingBalance;\n    };\n\n    private addPayment = async (): Promise<void> => {\n        const checkoutState = this.props.data.checkout.result;\n\n        if (!checkoutState) {\n            this.props.context.telemetry.error('checkout state not found');\n            return;\n        }\n\n        await checkoutState.updateCustomerAccountAmount({ newAmount: this.state.paymentAmount });\n        this.props.context.telemetry.information('customer account payment amount updated');\n    }\n\n    private toggleCreditSection = (): void => {\n        this.setState({\n            isCreditSectionExpanded: !this.state.isCreditSectionExpanded\n        });\n    };\n\n    private init = async(): Promise<void> => {\n        this.props.moduleState.init({\n            onCancel: this.handleCancelOrSubmit,\n            onSubmit: this.handleCancelOrSubmit,\n            onEdit: this.onEdit\n        });\n\n        if (this.props.data.checkout.result && this.props.data.checkout.result.customerAccountAmount !== 0) {\n            this.props.moduleState.onReady();\n        }\n    }\n\n    private onChangePaymentAmount =(newAmount: number): void => {\n        this.setState({\n            paymentAmount: newAmount\n        });\n    };\n\n    private updateMaxAmount =(newAmount: number): void => {\n\n        // if the user has already set an amount, we should not override that in the UI because it will be confusing.\n        if (this.props.data.checkout.result && this.props.data.checkout.result.customerAccountAmount === 0) {\n            this.setState({\n                // We should never allow a negative amount.\n                paymentAmount: Math.max(0, newAmount)\n            });\n        }\n    };\n\n    private onEdit = (): void => {\n        this.props.moduleState.onUpdating();\n    };\n\n    private handleCancelOrSubmit = () => {\n        const checkoutState = this.props.data.checkout.result;\n        if (checkoutState && checkoutState.customerAccountAmount > 0) {\n            this.props.moduleState.onReady();\n        } else {\n            // Skip the module\n            this.props.moduleState.onSkip();\n        }\n    };\n\n    private removePayment = async (): Promise<void> => {\n        const checkoutState = this.props.data.checkout.result;\n\n        if (!checkoutState) {\n            this.props.context.telemetry.error('checkout state not found');\n            return;\n        }\n\n        this.setState({\n            paymentAmount: 0\n        });\n\n        await checkoutState.updateCustomerAccountAmount({ newAmount: 0});\n        this.props.context.telemetry.information('customer account payment removed');\n    }\n}\n\nexport default CheckoutCustomerAccountPayment;\n"]}