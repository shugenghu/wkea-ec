{"version":3,"file":"iframe.test.js","sourceRoot":"./src/","sources":["modules/checkout-payment-instrument/tests/unit/iframe.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// tslint:disable-next-line:no-unused-variable\nimport { mount, shallow } from 'enzyme';\nimport * as React from 'react';\nimport IframeComponent, { IPaymentFrameElementProps, POST_MESSAGE_NAME } from '../../components/iframe';\nimport { paymentConnectorSubmitMessage } from '../../payment-instrument-message';\n\nconst mockPaymentAcceptPageContent = '<!DOCTYPE html><html><head></head><body>Mock Payment Connector</body></html>';\nconst mockSourceUrl = 'https://www.example.com/acceptPageUrl';\nconst mockCSS = '.body {}';\n\nlet mockIframeRef: React.RefObject<HTMLIFrameElement>;\nlet mockProps: IPaymentFrameElementProps;\n\nconst mockEventMap = {};\nwindow.addEventListener = jest.fn((event, cb) => {\n    mockEventMap[event] = cb;\n});\n\ndescribe('Checkout payment instrument unit tests - Iframe', () => {\n    beforeEach(() => {\n        mockIframeRef = {\n            // @ts-ignore mock partial data\n            current: {\n                // @ts-ignore mock partial data\n                contentWindow: {\n                    postMessage: jest.fn()\n                },\n                contentDocument: {\n                    open: jest.fn(),\n                    write: jest.fn(),\n                    close: jest.fn(),\n                    // @ts-ignore mock partial data\n                    head: {\n                        appendChild: jest.fn()\n                    }\n                }\n            }\n        };\n\n        mockProps = {\n            className: 'mock-class',\n            iframeAriaLabel: 'mock airea label',\n            height: 500,\n            onIFrameMessage: jest.fn()\n        };\n    });\n\n    it('renders correctly', () => {\n        mockProps = {\n            ...mockProps,\n            displayContent: mockPaymentAcceptPageContent,\n            requestUrlOrigin: mockSourceUrl,\n            css: mockCSS\n        };\n        const component = shallow(<IframeComponent {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('calls onIFrameMessage on post message event', () => {\n        mockProps = {\n            ...mockProps,\n            requestUrlOrigin: mockSourceUrl\n        };\n        const mockEvent = { origin: 'https://www.example.com/acceptPageUrl' };\n        const component = mount(<IframeComponent {...mockProps} />);\n        mockEventMap[POST_MESSAGE_NAME](mockEvent);\n        expect(mockProps.onIFrameMessage).toBeCalledWith(mockEvent);\n        component.unmount();\n    });\n\n    it('will not call onIFrameMessage on post message event when orign does not match sourceUrl', () => {\n        mockProps = {\n            ...mockProps,\n            sourceUrl: mockSourceUrl\n        };\n        const mockEvent = { origin: 'www.test.com' };\n        const component = mount(<IframeComponent {...mockProps} />);\n        mockEventMap[POST_MESSAGE_NAME](mockEvent);\n        expect(mockProps.onIFrameMessage).not.toBeCalled();\n        component.unmount();\n    });\n\n    it('will not onIFrameMessage on post message event when origin does not match serverPageUrl', () => {\n        mockProps = {\n            ...mockProps,\n            requestUrlOrigin: mockSourceUrl\n        };\n        const mockEvent = { origin: 'www.test.com' };\n        const component = mount(<IframeComponent {...mockProps} />);\n        mockEventMap[POST_MESSAGE_NAME](mockEvent);\n        expect(mockProps.onIFrameMessage).not.toBeCalled();\n        component.unmount();\n    });\n\n    it('calls postMessage and send submit post message', () => {\n        const component = mount(<IframeComponent {...mockProps} />);\n        const iframeInstance = component.instance() as IframeComponent;\n        const message = paymentConnectorSubmitMessage();\n\n        // @ts-ignore private property\n        iframeInstance.iframeRef = mockIframeRef;\n        iframeInstance.postMessage(message);\n\n        // @ts-ignore private property\n        expect(iframeInstance.iframeRef.current.contentWindow.postMessage).toBeCalledWith(\n            message.message,\n            message.targetOrigin\n        );\n\n        component.unmount();\n    });\n});"]}