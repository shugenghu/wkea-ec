import { mount, shallow } from 'enzyme';
import * as React from 'react';
import IframeComponent, { POST_MESSAGE_NAME } from '../../components/iframe';
import { paymentConnectorSubmitMessage } from '../../payment-instrument-message';
const mockPaymentAcceptPageContent = '<!DOCTYPE html><html><head></head><body>Mock Payment Connector</body></html>';
const mockSourceUrl = 'https://www.example.com/acceptPageUrl';
const mockCSS = '.body {}';
let mockIframeRef;
let mockProps;
const mockEventMap = {};
window.addEventListener = jest.fn((event, cb) => {
    mockEventMap[event] = cb;
});
describe('Checkout payment instrument unit tests - Iframe', () => {
    beforeEach(() => {
        mockIframeRef = {
            current: {
                contentWindow: {
                    postMessage: jest.fn()
                },
                contentDocument: {
                    open: jest.fn(),
                    write: jest.fn(),
                    close: jest.fn(),
                    head: {
                        appendChild: jest.fn()
                    }
                }
            }
        };
        mockProps = {
            className: 'mock-class',
            iframeAriaLabel: 'mock airea label',
            height: 500,
            onIFrameMessage: jest.fn()
        };
    });
    it('renders correctly', () => {
        mockProps = {
            ...mockProps,
            displayContent: mockPaymentAcceptPageContent,
            requestUrlOrigin: mockSourceUrl,
            css: mockCSS
        };
        const component = shallow(React.createElement(IframeComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('calls onIFrameMessage on post message event', () => {
        mockProps = {
            ...mockProps,
            requestUrlOrigin: mockSourceUrl
        };
        const mockEvent = { origin: 'https://www.example.com/acceptPageUrl' };
        const component = mount(React.createElement(IframeComponent, Object.assign({}, mockProps)));
        mockEventMap[POST_MESSAGE_NAME](mockEvent);
        expect(mockProps.onIFrameMessage).toBeCalledWith(mockEvent);
        component.unmount();
    });
    it('will not call onIFrameMessage on post message event when orign does not match sourceUrl', () => {
        mockProps = {
            ...mockProps,
            sourceUrl: mockSourceUrl
        };
        const mockEvent = { origin: 'www.test.com' };
        const component = mount(React.createElement(IframeComponent, Object.assign({}, mockProps)));
        mockEventMap[POST_MESSAGE_NAME](mockEvent);
        expect(mockProps.onIFrameMessage).not.toBeCalled();
        component.unmount();
    });
    it('will not onIFrameMessage on post message event when origin does not match serverPageUrl', () => {
        mockProps = {
            ...mockProps,
            requestUrlOrigin: mockSourceUrl
        };
        const mockEvent = { origin: 'www.test.com' };
        const component = mount(React.createElement(IframeComponent, Object.assign({}, mockProps)));
        mockEventMap[POST_MESSAGE_NAME](mockEvent);
        expect(mockProps.onIFrameMessage).not.toBeCalled();
        component.unmount();
    });
    it('calls postMessage and send submit post message', () => {
        const component = mount(React.createElement(IframeComponent, Object.assign({}, mockProps)));
        const iframeInstance = component.instance();
        const message = paymentConnectorSubmitMessage();
        iframeInstance.iframeRef = mockIframeRef;
        iframeInstance.postMessage(message);
        expect(iframeInstance.iframeRef.current.contentWindow.postMessage).toBeCalledWith(message.message, message.targetOrigin);
        component.unmount();
    });
});
//# sourceMappingURL=iframe.test.js.map