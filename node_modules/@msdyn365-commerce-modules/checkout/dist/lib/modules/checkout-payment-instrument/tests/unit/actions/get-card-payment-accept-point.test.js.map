{"version":3,"file":"get-card-payment-accept-point.test.js","sourceRoot":"./src/","sources":["modules/checkout-payment-instrument/tests/unit/actions/get-card-payment-accept-point.test.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,WAAW,MAAM,iCAAiC,CAAC;AAC/D,OAAO,KAAK,gBAAgB,MAAM,qEAAqE,CAAC;AACxG,OAAO,EACH,oCAAoC,EACpC,+BAA+B,EAC/B,8BAA8B,EACjC,MAAM,gDAAgD,CAAC;AAExD,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;AAC7C,IAAI,CAAC,IAAI,CAAC,qEAAqE,CAAC,CAAC;AAEjF,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAC3B,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAE3B,QAAQ,CAAC,uDAAuD,EAAE,GAAG,EAAE;IACnE,UAAU,CAAC,GAAG,EAAE;QACZ,iBAAiB,GAAG;YAChB,YAAY,EAAE;gBACV,IAAI,EAAE;oBACF,EAAE,EAAE,QAAQ;oBACZ,SAAS,EAAE;wBACP;4BACI,MAAM,EAAE,QAAQ;4BAChB,SAAS,EAAE,KAAK;yBACnB;wBACD;4BACI,MAAM,EAAE,QAAQ;yBACnB;qBACJ;iBACJ;aACJ;SACJ,CAAC;QAEF,iBAAiB,GAAG;YAChB,WAAW,EAAE;gBACT,SAAS,EAAE,YAAY;gBACvB,SAAS,EAAE,YAAY;aAC1B;YACD,SAAS,EAAE;gBACP,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;aACvB;YACD,cAAc,EAAE;gBACZ,WAAW,EAAE,EAAE;gBACf,GAAG,EAAE;oBACD,UAAU,EAAE,0BAA0B;iBACzC;aACJ;SACJ,CAAC;QAGF,WAAW,CAAC,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAC/G,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAG,EAAE;QACV,IAAI,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,2CAA2C,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACrB,MAAM,SAAS,GAAG;YACd,WAAW,EAAE;gBACT,SAAS,EAAE,YAAY;gBACvB,SAAS,EAAE,YAAY;aAC1B;YACD,gBAAgB,EAAE,YAAY;SACjC,CAAC;QAGF,MAAM,KAAK,GAAG,IAAI,8BAA8B,CAAC,SAAS,CAAC,CAAC;QAC5D,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;QACzG,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAClE,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC7B,MAAM,SAAS,GAAG;YACd,MAAM,EAAE,EAAE;YACV,cAAc,EAAE;gBACZ,WAAW,EAAE;oBACT,SAAS,EAAE,YAAY;oBACvB,SAAS,EAAE,YAAY;iBAC1B;aACJ;SACJ,CAAC;QAEF,MAAM,KAAK,GAAG,oCAAoC,CAAC,SAAS,CAAC,CAAC;QAC9D,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,2DAA2D,CAAC,CAAC;QAC9F,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAClE,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC7C,MAAM,SAAS,GAAG;YACd,MAAM,EAAE;gBACJ,kBAAkB,EAAE,IAAI;aAC3B;YACD,cAAc,EAAE;gBACZ,WAAW,EAAE;oBACT,SAAS,EAAE,YAAY;oBACvB,SAAS,EAAE,YAAY;iBAC1B;aACJ;SACJ,CAAC;QAEF,MAAM,KAAK,GAAG,oCAAoC,CAAC,SAAS,CAAC,CAAC;QAC9D,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,2DAA2D,CAAC,CAAC;QAC9F,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAClE,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,uBAAuB,GAAG;YAC5B,aAAa,EAAE,MAAM;YACrB,iBAAiB,EAAE,SAAS;SAC/B,CAAC;QAEF,MAAM,SAAS,GAAG;YACd,MAAM,EAAE;gBACJ,kBAAkB,EAAE,KAAK;aAC5B;YACD,cAAc,EAAE;gBACZ,WAAW,EAAE,EAAE;aAClB;SACJ,CAAC;QAGF,gBAAgB,CAAC,8BAA8B,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;QAGpI,MAAM,+BAA+B,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC5E,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,uBAAuB,GAAG;YAC5B,aAAa,EAAE,MAAM;YACrB,iBAAiB,EAAE,SAAS;SAC/B,CAAC;QAGF,gBAAgB,CAAC,8BAA8B,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;QAGpI,MAAM,+BAA+B,CAAC,EAAE,kBAAkB,EAAE,IAAI,EAAE,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC/F,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAE3C,WAAW,CAAC,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEhG,IAAI;YAEA,MAAM,+BAA+B,CAAC,EAAE,kBAAkB,EAAE,KAAK,EAAE,EAAE,iBAAiB,CAAC,CAAC;SAC3F;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;SAC3B;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QAElC,WAAW,CAAC,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAClC,GAAG,EAAE,CACD,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAC5B,OAAO,CAAC;YACJ,YAAY,EAAE;gBACV,IAAI,EAAE;oBACF,EAAE,EAAE,QAAQ;oBACZ,SAAS,EAAE,EAAE;iBAChB;aACJ;SACJ,CAAC,CACL,CACR,CAAC;QAEF,IAAI;YAEA,MAAM,+BAA+B,CAAC,EAAE,kBAAkB,EAAE,KAAK,EAAE,EAAE,iBAAiB,CAAC,CAAC;SAC3F;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;SAC3B;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAC9B,IAAI;YAEA,MAAM,+BAA+B,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;SAClE;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;SAC3B;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAE1D,gBAAgB,CAAC,8BAA8B,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACnH,IAAI;YAEA,MAAM,+BAA+B,CAAC,EAAE,kBAAkB,EAAE,KAAK,EAAE,EAAE,iBAAiB,CAAC,CAAC;SAC3F;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;SAC3B;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QAEnD,gBAAgB,CAAC,8BAA8B,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAE/G,IAAI;YAEA,MAAM,+BAA+B,CAAC,EAAE,kBAAkB,EAAE,KAAK,EAAE,EAAE,iBAAiB,CAAC,CAAC;SAC3F;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;SAC3B;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import * as globalState from '@msdyn365-commerce/global-state';\nimport * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport {\n    createCheckoutPaymentInstrumentInput,\n    getCardPaymentAcceptPointAction,\n    GetCardPaymentAcceptPointInput\n} from '../../../actions/get-card-payment-accept-point';\n\njest.mock('@msdyn365-commerce/global-state');\njest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n\nlet mockCheckoutState = {};\nlet mockActionContext = {};\n\ndescribe('Checkout unit tests - getCardPaymentAcceptPointAction', () => {\n    beforeEach(() => {\n        mockCheckoutState = {\n            checkoutCart: {\n                cart: {\n                    Id: 'cart_1',\n                    CartLines: [\n                        {\n                            LineId: 'line_1',\n                            ProductId: 'p_1'\n                        },\n                        {\n                            LineId: 'line_2'\n                        }\n                    ]\n                }\n            }\n        };\n\n        mockActionContext = {\n            apiSettings: {\n                channelId: 'channel-id',\n                catalogId: 'catalog-id'\n            },\n            telemetry: {\n                exception: jest.fn()\n            },\n            requestContext: {\n                apiSettings: {},\n                url: {\n                    requestUrl: 'https://www.example.com/'\n                }\n            }\n        };\n\n        // @ts-ignore mock partial data action\n        globalState.getCheckoutState = jest.fn(() => new Promise((resolve, reject) => resolve(mockCheckoutState)));\n    });\n\n    afterEach(() => {\n        jest.resetAllMocks();\n    });\n\n    afterAll(() => {\n        jest.unmock('@msdyn365-commerce/global-state');\n        jest.unmock('@msdyn365-commerce-modules/retail-actions');\n    });\n\n    it('creates input', () => {\n        const inputData = {\n            apiSettings: {\n                channelId: 'channel-id',\n                catalogId: 'catalog-id'\n            },\n            paymenTenderType: 'tendertype'\n        };\n\n        // @ts-ignore mock partial data\n        const input = new GetCardPaymentAcceptPointInput(inputData);\n        expect(input.getCacheKey()).toBe('CardPaymentAcceptPoint-tendertype-chanId:channel-id-catId:catalog-id');\n        expect(input.getCacheObjectType()).toBe('CardPaymentAcceptPoint');\n        expect(input.dataCacheType()).toBe('none');\n    });\n\n    it('creates input on load', () => {\n        const inputData = {\n            config: {},\n            requestContext: {\n                apiSettings: {\n                    channelId: 'channel-id',\n                    catalogId: 'catalog-id'\n                }\n            }\n        };\n        // @ts-ignore mock partial data\n        const input = createCheckoutPaymentInstrumentInput(inputData);\n        expect(input.getCacheKey()).toBe('CardPaymentAcceptPoint-chanId:channel-id-catId:catalog-id');\n        expect(input.getCacheObjectType()).toBe('CardPaymentAcceptPoint');\n        expect(input.dataCacheType()).toBe('none');\n    });\n\n    it('creates input with showBillingAddress', () => {\n        const inputData = {\n            config: {\n                showBillingAddress: true\n            },\n            requestContext: {\n                apiSettings: {\n                    channelId: 'channel-id',\n                    catalogId: 'catalog-id'\n                }\n            }\n        };\n        // @ts-ignore mock partial data\n        const input = createCheckoutPaymentInstrumentInput(inputData);\n        expect(input.getCacheKey()).toBe('CardPaymentAcceptPoint-chanId:channel-id-catId:catalog-id');\n        expect(input.getCacheObjectType()).toBe('CardPaymentAcceptPoint');\n        expect(input.dataCacheType()).toBe('none');\n    });\n\n    it('gets payment accept points', async () => {\n        const mockPaymentAcceptPoints = {\n            AcceptPageUrl: '/url',\n            AcceptPageContent: '<html/>'\n        };\n\n        const inputData = {\n            config: {\n                showBillingAddress: false\n            },\n            requestContext: {\n                apiSettings: {}\n            }\n        };\n\n        // @ts-ignore mock partial data action\n        CartsDataActions.getCardPaymentAcceptPointAsync = jest.fn(() => new Promise((resolve, reject) => resolve(mockPaymentAcceptPoints)));\n\n        // @ts-ignore mock partial data action\n        await getCardPaymentAcceptPointAction(inputData, mockActionContext).then(data => {\n            expect(data).toMatchObject(mockPaymentAcceptPoints);\n        });\n    });\n\n    it('handles showBillingAddress is true', async () => {\n        const mockPaymentAcceptPoints = {\n            AcceptPageUrl: '/url',\n            AcceptPageContent: '<html/>'\n        };\n\n        // @ts-ignore mock partial data action\n        CartsDataActions.getCardPaymentAcceptPointAsync = jest.fn(() => new Promise((resolve, reject) => resolve(mockPaymentAcceptPoints)));\n\n        // @ts-ignore mock partial data action\n        await getCardPaymentAcceptPointAction({ showBillingAddress: true }, mockActionContext).then(data => {\n            expect(data).toMatchObject(mockPaymentAcceptPoints);\n        });\n    });\n\n    it('handles getCheckoutState fail', async () => {\n        // @ts-ignore mock partial data action\n        globalState.getCheckoutState = jest.fn(() => new Promise((resolve, reject) => reject('error')));\n\n        try {\n            // @ts-ignore mock partial data action\n            await getCardPaymentAcceptPointAction({ showBillingAddress: false }, mockActionContext);\n        } catch (e) {\n            expect(e).toBeDefined();\n        }\n    });\n\n    it('handles no cart line', async () => {\n        // @ts-ignore mock partial data action\n        globalState.getCheckoutState = jest.fn(\n            () =>\n                new Promise((resolve, reject) =>\n                    resolve({\n                        checkoutCart: {\n                            cart: {\n                                Id: 'cart_1',\n                                CartLines: []\n                            }\n                        }\n                    })\n                )\n        );\n\n        try {\n            // @ts-ignore mock partial data action\n            await getCardPaymentAcceptPointAction({ showBillingAddress: false }, mockActionContext);\n        } catch (e) {\n            expect(e).toBeDefined();\n        }\n    });\n\n    it('handles no input', async () => {\n        try {\n            // @ts-ignore mock partial data action\n            await getCardPaymentAcceptPointAction(null, mockActionContext);\n        } catch (e) {\n            expect(e).toBeDefined();\n        }\n    });\n\n    it('handles getCardPaymentAcceptPointAsync fails', async () => {\n        // @ts-ignore mock partial data action\n        CartsDataActions.getCardPaymentAcceptPointAsync = jest.fn(() => new Promise((resolve, reject) => reject('Error')));\n        try {\n            // @ts-ignore mock partial data action\n            await getCardPaymentAcceptPointAction({ showBillingAddress: false }, mockActionContext);\n        } catch (e) {\n            expect(e).toBeDefined();\n        }\n    });\n\n    it('handles invalid payment accept points', async () => {\n        // @ts-ignore mock partial data action\n        CartsDataActions.getCardPaymentAcceptPointAsync = jest.fn(() => new Promise((resolve, reject) => resolve({})));\n\n        try {\n            // @ts-ignore mock partial data action\n            await getCardPaymentAcceptPointAction({ showBillingAddress: false }, mockActionContext);\n        } catch (e) {\n            expect(e).toBeDefined();\n        }\n    });\n});\n"]}