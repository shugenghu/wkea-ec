{"version":3,"file":"checkout-payment-instrument.test.js","sourceRoot":"./src/","sources":["modules/checkout-payment-instrument/tests/checkout-payment-instrument.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { updateModuleStates } from '@msdyn365-commerce-modules/checkout-utilities';\nimport { buildHydratedMockActionContext, buildMockModuleProps, IActionContext, ICoreContext, ICultureInfoFormatter, IRequestContext, ITelemetry } from '@msdyn365-commerce/core';\nimport { ICheckoutState } from '@msdyn365-commerce/global-state';\nimport { AsyncResult, CardPaymentAcceptPoint, CartLine } from '@msdyn365-commerce/retail-proxy';\nimport * as cartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { mount, shallow } from 'enzyme';\n// tslint:disable-next-line:no-unused-variable\nimport * as React from 'react';\nimport { CheckoutPaymentInstrument, ICheckoutPaymentInstrumentModuleProps } from '../checkout-payment-instrument';\nimport { ICheckoutPaymentInstrumentData } from '../checkout-payment-instrument.data';\nimport { ICheckoutPaymentInstrumentConfig } from '../checkout-payment-instrument.props.autogenerated';\nimport View from '../checkout-payment-instrument.view';\nimport { mockResources, testPaymentAcceptPageContent, testTenderLine, testTokenizedPaymentCard } from './__mock__';\n\njest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n\nconst mockConfig: ICheckoutPaymentInstrumentConfig = {};\nconst mockActions = {};\nlet mockData: ICheckoutPaymentInstrumentData;\nlet mockContext: ICoreContext;\nlet actionContext: IActionContext;\n\ndescribe('CheckoutPaymentInstrument', () => {\n    beforeEach(() => {\n        actionContext = buildHydratedMockActionContext();\n        // The following context is not saved in a global variable cause weirdly if that's done it would cause waitForDomChange to timeout\n        mockContext = {\n            actionContext,\n            // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n            app: {},\n            telemetry: {} as ITelemetry,\n            request: {\n                url: {\n                    staticCdnUrl: 'testOriginUrl'\n                },\n                channel: {\n                    PickupDeliveryModeCode: '60'\n                }\n            } as IRequestContext,\n            cultureFormatter: {} as ICultureInfoFormatter\n        };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        cartsDataActions.getCardPaymentAcceptPointAsync.mockImplementation(() => {\n            return Promise.resolve({\n                AcceptPageUrl: '',\n                AcceptPageContent: testPaymentAcceptPageContent\n            });\n        });\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        cartsDataActions.retrieveCardPaymentAcceptResultAsync.mockImplementation(() => {\n            return Promise.resolve({ TenderLine: testTenderLine, TokenizedPaymentCard: testTokenizedPaymentCard });\n        });\n\n        // @ts-ignore:\n        window.MutationObserver = undefined;\n    });\n\n    it('shows error', async () => {\n        mockData = {\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: {\n                            Id: 'edRKhnNDLp1pAvVeH1yNvaRwI7BARzoW',\n                            TotalAmount: 100,\n                            CartLines: [\n                                {\n                                    DeliveryMode: '60'\n                                }\n                            ] as CartLine[]\n                        }\n                    }\n                }\n            } as AsyncResult<ICheckoutState>,\n            cardPaymentAcceptPoint: {\n                status: 'SUCCESS',\n                result: {\n                    AcceptPageUrl: '',\n                    AcceptPageContent: testPaymentAcceptPageContent\n                }\n            } as AsyncResult<CardPaymentAcceptPoint>\n        };\n\n        const mockModuleStates = {\n            test_id: {\n                id: 'test_id',\n                hasInitialized: true,\n                hasError: true,\n                status: 'updating'\n            }\n        };\n        // @ts-ignore: Using partial for testing\n        updateModuleStates(mockModuleStates, actionContext);\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutPaymentInstrumentModuleProps),\n            visibilityObserver: { isVisible: true },\n            resources: mockResources,\n            renderView: View\n        };\n        moduleProps.id = 'test_id';\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutPaymentInstrument {...moduleProps} />).get(0));\n        component.setState({\n            isVisible: true,\n            isFetchingPaymentConnector: false,\n            errorMessage: 'Error Message'\n        });\n        return Promise.resolve(component).then(() => {\n            expect(component.render()).toMatchSnapshot();\n            component.unmount();\n        });\n    });\n\n    it('shows add PI form', async () => {\n        mockData = {\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: {\n                            Id: 'edRKhnNDLp1pAvVeH1yNvaRwI7BARzoW',\n                            TotalAmount: 100,\n                            CartLines: [\n                                {\n                                    DeliveryMode: '60'\n                                }\n                            ] as CartLine[]\n                        }\n                    }\n                }\n            } as AsyncResult<ICheckoutState>,\n            cardPaymentAcceptPoint: {\n                status: 'SUCCESS',\n                result: {\n                    AcceptPageUrl: '',\n                    AcceptPageContent: testPaymentAcceptPageContent\n                }\n            } as AsyncResult<CardPaymentAcceptPoint>\n        };\n\n        const mockModuleStates = {\n            test_id: {\n                id: 'test_id',\n                hasInitialized: true,\n                status: 'updating'\n            }\n        };\n        // @ts-ignore: Using partial for testing\n        updateModuleStates(mockModuleStates, actionContext);\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutPaymentInstrumentModuleProps),\n            visibilityObserver: { isVisible: true },\n            resources: mockResources,\n            renderView: View\n        };\n        moduleProps.id = 'test_id';\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutPaymentInstrument {...moduleProps} />).get(0));\n        component.setState({\n            isVisible: true,\n            isFetchingPaymentConnector: false,\n            acceptPageContent: testPaymentAcceptPageContent\n        });\n        return Promise.resolve(component).then(() => {\n            expect(component.render()).toMatchSnapshot();\n            component.unmount();\n        });\n    });\n\n    it('shows PI information', async () => {\n        mockData = {\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: {\n                            Id: 'edRKhnNDLp1pAvVeH1yNvaRwI7BARzoW',\n                            TotalAmount: 100,\n                            CartLines: [\n                                {\n                                    DeliveryMode: '60'\n                                }\n                            ] as CartLine[]\n                        }\n                    },\n                    tokenizedPaymentCard: testTokenizedPaymentCard,\n                    tenderLine: testTenderLine\n                }\n            } as AsyncResult<ICheckoutState>,\n            cardPaymentAcceptPoint: {\n                status: 'SUCCESS',\n                result: {\n                    AcceptPageUrl: '',\n                    AcceptPageContent: testPaymentAcceptPageContent\n                }\n            } as AsyncResult<CardPaymentAcceptPoint>\n        };\n\n        const mockModuleStates = {\n            test_id: {\n                id: 'test_id',\n                hasInitialized: true,\n                status: 'ready'\n            }\n        };\n\n        // @ts-ignore: Using partial for testing\n        updateModuleStates(mockModuleStates, actionContext);\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutPaymentInstrumentModuleProps),\n            visibilityObserver: { isVisible: true },\n            resources: mockResources,\n            renderView: View\n        };\n        moduleProps.id = 'test_id';\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutPaymentInstrument {...moduleProps} />).get(0));\n        component.setState({\n            isFetchingPaymentConnector: false\n        });\n\n        return Promise.resolve(component).then(() => {\n            expect(component.render()).toMatchSnapshot();\n            component.unmount();\n        });\n    });\n\n    it('will not init without cart', () => {\n        mockData = {\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: {}\n                    }\n                }\n            } as AsyncResult<ICheckoutState>,\n            cardPaymentAcceptPoint: {\n                status: 'SUCCESS',\n                result: {\n                    AcceptPageUrl: '',\n                    AcceptPageContent: testPaymentAcceptPageContent\n                }\n            } as AsyncResult<CardPaymentAcceptPoint>\n        };\n\n        const contextWithoutChannel = mockContext;\n        // @ts-ignore partial mock\n        contextWithoutChannel.request.channel = {};\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, contextWithoutChannel) as ICheckoutPaymentInstrumentModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutPaymentInstrument {...moduleProps} />).get(0));\n        return Promise.resolve(component).then(() => {\n            expect(cartsDataActions.getCardPaymentAcceptPointAsync).not.toBeCalled();\n            component.unmount();\n        });\n    });\n\n    it('will not init when cart TotalAmount is 0', () => {\n        mockData = {\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: {\n                            Id: 'edRKhnNDLp1pAvVeH1yNvaRwI7BARzoW',\n                            TotalAmount: 0,\n                            CartLines: [] as CartLine[]\n                        }\n                    }\n                }\n            } as AsyncResult<ICheckoutState>,\n            cardPaymentAcceptPoint: {\n                status: 'SUCCESS',\n                result: {\n                    AcceptPageUrl: '',\n                    AcceptPageContent: testPaymentAcceptPageContent\n                }\n            } as AsyncResult<CardPaymentAcceptPoint>\n        };\n\n        const contextWithoutChannel = mockContext;\n        // @ts-ignore partial mock\n        contextWithoutChannel.request.channel = {};\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, contextWithoutChannel) as ICheckoutPaymentInstrumentModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutPaymentInstrument {...moduleProps} />).get(0));\n        return Promise.resolve(component).then(() => {\n            expect(cartsDataActions.getCardPaymentAcceptPointAsync).not.toBeCalled();\n            component.unmount();\n        });\n    });\n\n    afterEach(() => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        cartsDataActions.getCardPaymentAcceptPointAsync.mockReset();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        cartsDataActions.retrieveCardPaymentAcceptResultAsync.mockReset();\n    });\n\n    afterAll(() => {\n        jest.unmock('../checkout-payment-instrument.action.ts');\n        jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n    });\n});\n"]}