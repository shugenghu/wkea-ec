{"version":3,"file":"payment-information.test.js","sourceRoot":"./src/","sources":["modules/checkout-payment-instrument/tests/unit/payment-information.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// tslint:disable-next-line:no-unused-variable\nimport { shallow } from 'enzyme';\nimport * as React from 'react';\nimport PaymentInformationComponent, { IPaymentInformationProps } from '../../components/payment-information';\nimport { mockResources, testTokenizedPaymentCard } from '../__mock__';\n\ndescribe('Checkout payment instrument unit tests - Error', () => {\n    it('renders correctly', () => {\n        const mockProps: IPaymentInformationProps = {\n            resources: mockResources,\n            tokenizedPaymentCard: testTokenizedPaymentCard\n        };\n        const component = shallow(<PaymentInformationComponent {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly if ExpirationMonth is 0 ', () => {\n        const mockProps: IPaymentInformationProps = {\n            resources: mockResources,\n            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ ExpirationMonth: 0 } }\n        };\n        const component = shallow(<PaymentInformationComponent {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly if ExpirationYear is 0 ', () => {\n        const mockProps: IPaymentInformationProps = {\n            resources: mockResources,\n            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ ExpirationYear: 0 } }\n        };\n        const component = shallow(<PaymentInformationComponent {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly if ExpirationMonth and ExpirationYear is 0 ', () => {\n        const mockProps: IPaymentInformationProps = {\n            resources: mockResources,\n            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ ExpirationMonth: 0, ExpirationYear: 0 } }\n        };\n        const component = shallow(<PaymentInformationComponent {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly if CardTypeId is provided ', () => {\n        const mockProps: IPaymentInformationProps = {\n            resources: mockResources,\n            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ CardTypeId: 'VISA' } }\n        };\n        const component = shallow(<PaymentInformationComponent {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly if MaskedCardNumber is not a valid number', () => {\n        const mockProps: IPaymentInformationProps = {\n            resources: mockResources,\n            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ CardTokenInfo: { MaskedCardNumber: 'test@test.com' } } }\n        };\n        const component = shallow(<PaymentInformationComponent {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});\n"]}