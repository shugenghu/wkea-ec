import { updateModuleStates } from '@msdyn365-commerce-modules/checkout-utilities';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import * as cartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import { mount, shallow } from 'enzyme';
import * as React from 'react';
import { CheckoutPaymentInstrument } from '../checkout-payment-instrument';
import View from '../checkout-payment-instrument.view';
import { mockResources, testPaymentAcceptPageContent, testTenderLine, testTokenizedPaymentCard } from './__mock__';
jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
const mockConfig = {};
const mockActions = {};
let mockData;
let mockContext;
let actionContext;
describe('CheckoutPaymentInstrument', () => {
    beforeEach(() => {
        actionContext = buildHydratedMockActionContext();
        mockContext = {
            actionContext,
            app: {},
            telemetry: {},
            request: {
                url: {
                    staticCdnUrl: 'testOriginUrl'
                },
                channel: {
                    PickupDeliveryModeCode: '60'
                }
            },
            cultureFormatter: {}
        };
        cartsDataActions.getCardPaymentAcceptPointAsync.mockImplementation(() => {
            return Promise.resolve({
                AcceptPageUrl: '',
                AcceptPageContent: testPaymentAcceptPageContent
            });
        });
        cartsDataActions.retrieveCardPaymentAcceptResultAsync.mockImplementation(() => {
            return Promise.resolve({ TenderLine: testTenderLine, TokenizedPaymentCard: testTokenizedPaymentCard });
        });
        window.MutationObserver = undefined;
    });
    it('shows error', async () => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: {
                            Id: 'edRKhnNDLp1pAvVeH1yNvaRwI7BARzoW',
                            TotalAmount: 100,
                            CartLines: [
                                {
                                    DeliveryMode: '60'
                                }
                            ]
                        }
                    }
                }
            },
            cardPaymentAcceptPoint: {
                status: 'SUCCESS',
                result: {
                    AcceptPageUrl: '',
                    AcceptPageContent: testPaymentAcceptPageContent
                }
            }
        };
        const mockModuleStates = {
            test_id: {
                id: 'test_id',
                hasInitialized: true,
                hasError: true,
                status: 'updating'
            }
        };
        updateModuleStates(mockModuleStates, actionContext);
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            visibilityObserver: { isVisible: true },
            resources: mockResources,
            renderView: View
        };
        moduleProps.id = 'test_id';
        const component = mount(shallow(React.createElement(CheckoutPaymentInstrument, Object.assign({}, moduleProps))).get(0));
        component.setState({
            isVisible: true,
            isFetchingPaymentConnector: false,
            errorMessage: 'Error Message'
        });
        return Promise.resolve(component).then(() => {
            expect(component.render()).toMatchSnapshot();
            component.unmount();
        });
    });
    it('shows add PI form', async () => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: {
                            Id: 'edRKhnNDLp1pAvVeH1yNvaRwI7BARzoW',
                            TotalAmount: 100,
                            CartLines: [
                                {
                                    DeliveryMode: '60'
                                }
                            ]
                        }
                    }
                }
            },
            cardPaymentAcceptPoint: {
                status: 'SUCCESS',
                result: {
                    AcceptPageUrl: '',
                    AcceptPageContent: testPaymentAcceptPageContent
                }
            }
        };
        const mockModuleStates = {
            test_id: {
                id: 'test_id',
                hasInitialized: true,
                status: 'updating'
            }
        };
        updateModuleStates(mockModuleStates, actionContext);
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            visibilityObserver: { isVisible: true },
            resources: mockResources,
            renderView: View
        };
        moduleProps.id = 'test_id';
        const component = mount(shallow(React.createElement(CheckoutPaymentInstrument, Object.assign({}, moduleProps))).get(0));
        component.setState({
            isVisible: true,
            isFetchingPaymentConnector: false,
            acceptPageContent: testPaymentAcceptPageContent
        });
        return Promise.resolve(component).then(() => {
            expect(component.render()).toMatchSnapshot();
            component.unmount();
        });
    });
    it('shows PI information', async () => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: {
                            Id: 'edRKhnNDLp1pAvVeH1yNvaRwI7BARzoW',
                            TotalAmount: 100,
                            CartLines: [
                                {
                                    DeliveryMode: '60'
                                }
                            ]
                        }
                    },
                    tokenizedPaymentCard: testTokenizedPaymentCard,
                    tenderLine: testTenderLine
                }
            },
            cardPaymentAcceptPoint: {
                status: 'SUCCESS',
                result: {
                    AcceptPageUrl: '',
                    AcceptPageContent: testPaymentAcceptPageContent
                }
            }
        };
        const mockModuleStates = {
            test_id: {
                id: 'test_id',
                hasInitialized: true,
                status: 'ready'
            }
        };
        updateModuleStates(mockModuleStates, actionContext);
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            visibilityObserver: { isVisible: true },
            resources: mockResources,
            renderView: View
        };
        moduleProps.id = 'test_id';
        const component = mount(shallow(React.createElement(CheckoutPaymentInstrument, Object.assign({}, moduleProps))).get(0));
        component.setState({
            isFetchingPaymentConnector: false
        });
        return Promise.resolve(component).then(() => {
            expect(component.render()).toMatchSnapshot();
            component.unmount();
        });
    });
    it('will not init without cart', () => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: {}
                    }
                }
            },
            cardPaymentAcceptPoint: {
                status: 'SUCCESS',
                result: {
                    AcceptPageUrl: '',
                    AcceptPageContent: testPaymentAcceptPageContent
                }
            }
        };
        const contextWithoutChannel = mockContext;
        contextWithoutChannel.request.channel = {};
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, contextWithoutChannel),
            resources: mockResources,
            renderView: View
        };
        const component = mount(shallow(React.createElement(CheckoutPaymentInstrument, Object.assign({}, moduleProps))).get(0));
        return Promise.resolve(component).then(() => {
            expect(cartsDataActions.getCardPaymentAcceptPointAsync).not.toBeCalled();
            component.unmount();
        });
    });
    it('will not init when cart TotalAmount is 0', () => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: {
                            Id: 'edRKhnNDLp1pAvVeH1yNvaRwI7BARzoW',
                            TotalAmount: 0,
                            CartLines: []
                        }
                    }
                }
            },
            cardPaymentAcceptPoint: {
                status: 'SUCCESS',
                result: {
                    AcceptPageUrl: '',
                    AcceptPageContent: testPaymentAcceptPageContent
                }
            }
        };
        const contextWithoutChannel = mockContext;
        contextWithoutChannel.request.channel = {};
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, contextWithoutChannel),
            resources: mockResources,
            renderView: View
        };
        const component = mount(shallow(React.createElement(CheckoutPaymentInstrument, Object.assign({}, moduleProps))).get(0));
        return Promise.resolve(component).then(() => {
            expect(cartsDataActions.getCardPaymentAcceptPointAsync).not.toBeCalled();
            component.unmount();
        });
    });
    afterEach(() => {
        cartsDataActions.getCardPaymentAcceptPointAsync.mockReset();
        cartsDataActions.retrieveCardPaymentAcceptResultAsync.mockReset();
    });
    afterAll(() => {
        jest.unmock('../checkout-payment-instrument.action.ts');
        jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });
});
//# sourceMappingURL=checkout-payment-instrument.test.js.map