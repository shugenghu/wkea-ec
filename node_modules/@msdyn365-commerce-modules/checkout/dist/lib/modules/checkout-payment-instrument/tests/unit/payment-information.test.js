import { shallow } from 'enzyme';
import * as React from 'react';
import PaymentInformationComponent from '../../components/payment-information';
import { mockResources, testTokenizedPaymentCard } from '../__mock__';
describe('Checkout payment instrument unit tests - Error', () => {
    it('renders correctly', () => {
        const mockProps = {
            resources: mockResources,
            tokenizedPaymentCard: testTokenizedPaymentCard
        };
        const component = shallow(React.createElement(PaymentInformationComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly if ExpirationMonth is 0 ', () => {
        const mockProps = {
            resources: mockResources,
            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ ExpirationMonth: 0 } }
        };
        const component = shallow(React.createElement(PaymentInformationComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly if ExpirationYear is 0 ', () => {
        const mockProps = {
            resources: mockResources,
            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ ExpirationYear: 0 } }
        };
        const component = shallow(React.createElement(PaymentInformationComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly if ExpirationMonth and ExpirationYear is 0 ', () => {
        const mockProps = {
            resources: mockResources,
            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ ExpirationMonth: 0, ExpirationYear: 0 } }
        };
        const component = shallow(React.createElement(PaymentInformationComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly if CardTypeId is provided ', () => {
        const mockProps = {
            resources: mockResources,
            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ CardTypeId: 'VISA' } }
        };
        const component = shallow(React.createElement(PaymentInformationComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly if MaskedCardNumber is not a valid number', () => {
        const mockProps = {
            resources: mockResources,
            tokenizedPaymentCard: { ...testTokenizedPaymentCard, ...{ CardTokenInfo: { MaskedCardNumber: 'test@test.com' } } }
        };
        const component = shallow(React.createElement(PaymentInformationComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=payment-information.test.js.map