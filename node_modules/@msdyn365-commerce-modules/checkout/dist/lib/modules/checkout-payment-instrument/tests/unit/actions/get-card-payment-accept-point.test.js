import * as globalState from '@msdyn365-commerce/global-state';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import { createCheckoutPaymentInstrumentInput, getCardPaymentAcceptPointAction, GetCardPaymentAcceptPointInput } from '../../../actions/get-card-payment-accept-point';
jest.mock('@msdyn365-commerce/global-state');
jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
let mockCheckoutState = {};
let mockActionContext = {};
describe('Checkout unit tests - getCardPaymentAcceptPointAction', () => {
    beforeEach(() => {
        mockCheckoutState = {
            checkoutCart: {
                cart: {
                    Id: 'cart_1',
                    CartLines: [
                        {
                            LineId: 'line_1',
                            ProductId: 'p_1'
                        },
                        {
                            LineId: 'line_2'
                        }
                    ]
                }
            }
        };
        mockActionContext = {
            apiSettings: {
                channelId: 'channel-id',
                catalogId: 'catalog-id'
            },
            telemetry: {
                exception: jest.fn()
            },
            requestContext: {
                apiSettings: {},
                url: {
                    requestUrl: 'https://www.example.com/'
                }
            }
        };
        globalState.getCheckoutState = jest.fn(() => new Promise((resolve, reject) => resolve(mockCheckoutState)));
    });
    afterEach(() => {
        jest.resetAllMocks();
    });
    afterAll(() => {
        jest.unmock('@msdyn365-commerce/global-state');
        jest.unmock('@msdyn365-commerce-modules/retail-actions');
    });
    it('creates input', () => {
        const inputData = {
            apiSettings: {
                channelId: 'channel-id',
                catalogId: 'catalog-id'
            },
            paymenTenderType: 'tendertype'
        };
        const input = new GetCardPaymentAcceptPointInput(inputData);
        expect(input.getCacheKey()).toBe('CardPaymentAcceptPoint-tendertype-chanId:channel-id-catId:catalog-id');
        expect(input.getCacheObjectType()).toBe('CardPaymentAcceptPoint');
        expect(input.dataCacheType()).toBe('none');
    });
    it('creates input on load', () => {
        const inputData = {
            config: {},
            requestContext: {
                apiSettings: {
                    channelId: 'channel-id',
                    catalogId: 'catalog-id'
                }
            }
        };
        const input = createCheckoutPaymentInstrumentInput(inputData);
        expect(input.getCacheKey()).toBe('CardPaymentAcceptPoint-chanId:channel-id-catId:catalog-id');
        expect(input.getCacheObjectType()).toBe('CardPaymentAcceptPoint');
        expect(input.dataCacheType()).toBe('none');
    });
    it('creates input with showBillingAddress', () => {
        const inputData = {
            config: {
                showBillingAddress: true
            },
            requestContext: {
                apiSettings: {
                    channelId: 'channel-id',
                    catalogId: 'catalog-id'
                }
            }
        };
        const input = createCheckoutPaymentInstrumentInput(inputData);
        expect(input.getCacheKey()).toBe('CardPaymentAcceptPoint-chanId:channel-id-catId:catalog-id');
        expect(input.getCacheObjectType()).toBe('CardPaymentAcceptPoint');
        expect(input.dataCacheType()).toBe('none');
    });
    it('gets payment accept points', async () => {
        const mockPaymentAcceptPoints = {
            AcceptPageUrl: '/url',
            AcceptPageContent: '<html/>'
        };
        const inputData = {
            config: {
                showBillingAddress: false
            },
            requestContext: {
                apiSettings: {}
            }
        };
        CartsDataActions.getCardPaymentAcceptPointAsync = jest.fn(() => new Promise((resolve, reject) => resolve(mockPaymentAcceptPoints)));
        await getCardPaymentAcceptPointAction(inputData, mockActionContext).then(data => {
            expect(data).toMatchObject(mockPaymentAcceptPoints);
        });
    });
    it('handles showBillingAddress is true', async () => {
        const mockPaymentAcceptPoints = {
            AcceptPageUrl: '/url',
            AcceptPageContent: '<html/>'
        };
        CartsDataActions.getCardPaymentAcceptPointAsync = jest.fn(() => new Promise((resolve, reject) => resolve(mockPaymentAcceptPoints)));
        await getCardPaymentAcceptPointAction({ showBillingAddress: true }, mockActionContext).then(data => {
            expect(data).toMatchObject(mockPaymentAcceptPoints);
        });
    });
    it('handles getCheckoutState fail', async () => {
        globalState.getCheckoutState = jest.fn(() => new Promise((resolve, reject) => reject('error')));
        try {
            await getCardPaymentAcceptPointAction({ showBillingAddress: false }, mockActionContext);
        }
        catch (e) {
            expect(e).toBeDefined();
        }
    });
    it('handles no cart line', async () => {
        globalState.getCheckoutState = jest.fn(() => new Promise((resolve, reject) => resolve({
            checkoutCart: {
                cart: {
                    Id: 'cart_1',
                    CartLines: []
                }
            }
        })));
        try {
            await getCardPaymentAcceptPointAction({ showBillingAddress: false }, mockActionContext);
        }
        catch (e) {
            expect(e).toBeDefined();
        }
    });
    it('handles no input', async () => {
        try {
            await getCardPaymentAcceptPointAction(null, mockActionContext);
        }
        catch (e) {
            expect(e).toBeDefined();
        }
    });
    it('handles getCardPaymentAcceptPointAsync fails', async () => {
        CartsDataActions.getCardPaymentAcceptPointAsync = jest.fn(() => new Promise((resolve, reject) => reject('Error')));
        try {
            await getCardPaymentAcceptPointAction({ showBillingAddress: false }, mockActionContext);
        }
        catch (e) {
            expect(e).toBeDefined();
        }
    });
    it('handles invalid payment accept points', async () => {
        CartsDataActions.getCardPaymentAcceptPointAsync = jest.fn(() => new Promise((resolve, reject) => resolve({})));
        try {
            await getCardPaymentAcceptPointAction({ showBillingAddress: false }, mockActionContext);
        }
        catch (e) {
            expect(e).toBeDefined();
        }
    });
});
//# sourceMappingURL=get-card-payment-accept-point.test.js.map