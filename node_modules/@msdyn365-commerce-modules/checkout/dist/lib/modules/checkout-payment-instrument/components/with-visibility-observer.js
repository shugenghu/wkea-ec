import * as React from 'react';
const withVisibilyObserver = (WrappedComponent) => {
    class VisibilyObserver extends React.Component {
        constructor() {
            super(...arguments);
            this.state = {
                isVisible: false,
                errorMessage: '',
                observer: undefined
            };
            this.selfRef = React.createRef();
            this.initMutationObserver = () => {
                const targetNode = document.getElementsByTagName('body') && document.getElementsByTagName('body')[0];
                if (!targetNode) {
                    this.setState({
                        errorMessage: 'No body element found'
                    });
                    return;
                }
                if (!MutationObserver) {
                    this.setState({
                        errorMessage: 'MutationObserver is not supported'
                    });
                    return;
                }
                const config = { attributes: true, childList: true, subtree: true };
                const _observer = new MutationObserver(() => this.handleVisibilityChange());
                _observer.observe(targetNode, config);
                this.setState({
                    observer: _observer
                });
            };
            this.stopMutationObserver = () => {
                this.state.observer && this.state.observer.disconnect();
            };
            this.handleVisibilityChange = () => {
                const isVisible = !!this.selfRef.current && this.selfRef.current.offsetWidth > 0 && this.selfRef.current.offsetHeight > 0;
                if (!this.state.isVisible && isVisible) {
                    this.setState({
                        isVisible
                    });
                    this.stopMutationObserver();
                }
            };
        }
        componentDidMount() {
            this.initMutationObserver();
        }
        componentWillUnmount() {
            this.stopMutationObserver();
        }
        render() {
            return (React.createElement("div", { className: 'ms-checkout-payment-instrument__mutation-observer', ref: this.selfRef },
                React.createElement(WrappedComponent, Object.assign({}, this.props, { visibilityObserver: this.state }))));
        }
    }
    return VisibilyObserver;
};
export default withVisibilyObserver;
//# sourceMappingURL=with-visibility-observer.js.map