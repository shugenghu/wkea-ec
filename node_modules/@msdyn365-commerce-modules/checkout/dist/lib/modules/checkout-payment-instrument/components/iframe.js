import classnames from 'classnames';
import * as React from 'react';
export const POST_MESSAGE_NAME = 'message';
const getHostName = (url = '') => {
    return (url.indexOf('//') > -1 ? url.split('/')[2] : url.split('/')[0]).toLowerCase();
};
class IPaymentFrameElement extends React.PureComponent {
    constructor(props) {
        super(props);
        this.postMessage = (params) => {
            if (this.iframeRef &&
                this.iframeRef.current &&
                this.iframeRef.current.contentWindow &&
                this.iframeRef.current.contentWindow.postMessage) {
                this.iframeRef.current.contentWindow.postMessage(params.message, params.targetOrigin);
            }
        };
        this.onEvent = (event) => {
            const { sourceUrl, onIFrameMessage, requestUrlOrigin, messageOrigin } = this.props;
            const sourceHost = getHostName(sourceUrl);
            const eventHost = getHostName(event.origin);
            const requestHost = getHostName(requestUrlOrigin);
            const messageHost = getHostName(messageOrigin);
            if (!onIFrameMessage ||
                (sourceUrl && !(sourceHost === eventHost || requestHost === eventHost || messageHost === eventHost)) ||
                (!sourceUrl && !(requestHost === eventHost || messageHost === eventHost))) {
                return;
            }
            return onIFrameMessage(event);
        };
        this.updateContentDocument = () => {
            const { displayContent, sourceUrl, css } = this.props;
            if (!sourceUrl && displayContent && this.iframeRef && this.iframeRef.current) {
                const innerDocument = this.iframeRef.current.contentDocument;
                if (innerDocument) {
                    innerDocument.open();
                    innerDocument.write(displayContent);
                    if (css) {
                        const style = document.createElement('style');
                        const cssNote = document.createTextNode(css);
                        style.type = 'text/css';
                        style.appendChild(cssNote);
                        innerDocument.head.appendChild(style);
                    }
                    innerDocument.close();
                }
            }
        };
        this.iframeRef = React.createRef();
    }
    componentDidMount() {
        window.addEventListener(POST_MESSAGE_NAME, this.onEvent);
        this.updateContentDocument();
    }
    componentDidUpdate(prevProps) {
        if (prevProps.displayContent !== this.props.displayContent) {
            this.updateContentDocument();
        }
    }
    componentWillUnmount() {
        window.removeEventListener(POST_MESSAGE_NAME, this.onEvent);
    }
    render() {
        const { sourceUrl, className, iframeAriaLabel, height } = this.props;
        return (React.createElement("iframe", { className: classnames('checkout-payment-instrument__iframe', className), "aria-label": iframeAriaLabel, src: sourceUrl, ref: this.iframeRef, height: height, sandbox: 'allow-scripts allow-forms allow-same-origin allow-popups' }));
    }
}
export default IPaymentFrameElement;
//# sourceMappingURL=iframe.js.map