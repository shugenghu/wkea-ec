{"version":3,"file":"checkout-terms-and-conditions.view.test.js","sourceRoot":"./src/","sources":["modules/checkout-terms-and-conditions/__tests__/checkout-terms-and-conditions.view.test.tsx"],"names":[],"mappings":"AAKA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAG/D,OAAO,8BAA8B,MAAM,uCAAuC,CAAC;AAEnF,MAAM,WAAW,GAAyC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAyC,CAAC;AAE/H,MAAM,SAAS,GAAG;IACd,GAAG,WAAW;IACd,eAAe,EAAE,KAAK;IACtB,gBAAgB,EAAE,EAAE;IACpB,SAAS,EAAE;QACP,OAAO,EAAE,KAAK;QACd,gBAAgB,EAAE,KAAK;QACvB,gBAAgB,EAAE,KAAK;QACvB,kBAAkB,EAAE,KAAK;KAC5B;IACD,0BAA0B,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,EAAE;IACrE,yBAAyB,EAAE;QACvB,2BAA2B,EAAE,EAAE,SAAS,EAAE,2CAA2C,EAAE;QACvF,QAAQ,EAAE,GAAG;QACb,WAAW,EAAE,sCAAsC;KACtD;IACD,YAAY,EAAE;QACV,KAAK,EAAE,EAAE,SAAS,EAAE,iBAAiB,EAAE;QACvC,KAAK,EAAE,SAAS;QAChB,OAAO,EAAE,iBAAiB;KAC7B;IACD,UAAU,EAAE,cAAc;IAC1B,UAAU,EAAE,cAAc;IAC1B,YAAY,EAAE,gBAAgB;IAC9B,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;IACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;IACjB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;IACnB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;CACtB,CAAC;AAEF,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IAC/C,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACzB,MAAM,SAAS,GAAG,EAAE,GAAG,SAAS,CAAC,SAAS,EAAE,CAAC;QAC7C,SAAS,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAClC,SAAS,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAClC,SAAS,CAAC,kBAAkB,GAAG,IAAI,CAAC;QACpC,MAAM,QAAQ,GAAG,EAAE,GAAG,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC;QAEpD,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,8BAA8B,oBAAK,QAAQ,EAAI,CAAC,CAAC;QAC3E,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC7B,MAAM,SAAS,GAAG,EAAE,GAAG,SAAS,CAAC,SAAS,EAAE,CAAC;QAC7C,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;QACzB,MAAM,QAAQ,GAAG,EAAE,GAAG,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC;QAEpD,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,8BAA8B,oBAAK,QAAQ,EAAI,CAAC,CAAC;QAC3E,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { render } from 'enzyme';\nimport * as React from 'react';\n\n// tslint:disable-next-line:no-unused-variable\nimport { buildMockModuleProps } from '@msdyn365-commerce/core';\n\nimport { ICheckoutTermsAndConditionsProps } from '../checkout-terms-and-conditions.props.autogenerated';\nimport CheckoutTermsAndConditionsView from '../checkout-terms-and-conditions.view';\n\nconst moduleProps: ICheckoutTermsAndConditionsProps<{}> = buildMockModuleProps({}, {}) as ICheckoutTermsAndConditionsProps<{}>;\n\nconst mockProps = {\n    ...moduleProps,\n    isTermsAccepted: false,\n    errorMessageData: '',\n    viewState: {\n        isError: false,\n        isShowSaveButton: false,\n        isShowEditButton: false,\n        isShowCancelButton: false\n    },\n    checkoutTermsAndConditions: { moduleProps, className: 'mock-module' },\n    termsAndConditionsContent: {\n        termsAndConditionAcceptance: { className: 'mock-node-terms-and-conditions-acceptance' },\n        checkBox: '1',\n        description: '{deliveryOptionSelected-description}',\n    },\n    errorMessage: {\n        error: { className: 'mock-node-Error' },\n        title: '{title}',\n        message: '{error-message}'\n    },\n    saveButton: '{saveButton}',\n    editButton: '{editButton}',\n    cancelButton: '{cancelButton}',\n    onSave: jest.fn(),\n    onEdit: jest.fn(),\n    onCancel: jest.fn(),\n    onChange: jest.fn()\n};\n\ndescribe('CheckoutTermsAndConditions - View', () => {\n    it('renders correctly', () => {\n        const viewState = { ...mockProps.viewState };\n        viewState.isShowSaveButton = true;\n        viewState.isShowEditButton = true;\n        viewState.isShowCancelButton = true;\n        const newProps = { ...mockProps, ...{ viewState } };\n\n        const component = render(<CheckoutTermsAndConditionsView {...newProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders error message', () => {\n        const viewState = { ...mockProps.viewState };\n        viewState.isError = true;\n        const newProps = { ...mockProps, ...{ viewState } };\n\n        const component = render(<CheckoutTermsAndConditionsView {...newProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});\n"]}