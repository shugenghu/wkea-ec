import { mount, render, shallow } from 'enzyme';
import * as React from 'react';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import CheckoutTermsAndConditions from '../checkout-terms-and-conditions';
import renderView from '../checkout-terms-and-conditions.view';
const mockConfig = {
    showCheckbox: true,
    showControlButtons: true,
    description: '<span>T&C<span>'
};
const mockResources = {
    errorMessageTitle: 'Error message',
    errorMessage: 'Please accept terms and conditions',
    saveBtnLabel: 'Save',
    editBtnLabel: 'Change',
    cancelBtnLabel: 'Cancel',
    saveBtnAriaLabel: 'Save',
    editBtnAriaLabel: 'Change',
    cancelBtnAriaLabel: 'Cancel',
};
let mockData;
const actionContext = buildHydratedMockActionContext();
const mockContext = {
    actionContext: actionContext,
    request: {}
};
const mockModuleState = {};
let moduleProps;
describe('CheckoutTermsAndConditions', () => {
    beforeEach(() => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    isTermsAndConditionAccepted: undefined,
                    updateTermsAndConditionsAcceptance: input => {
                        mockData.checkout.result.isTermsAndConditionAccepted = input.newIsTermsAndConditionAccepted;
                    },
                    checkoutCart: {
                        cart: {}
                    }
                }
            }
        };
    });
    it('Render correctly', () => {
        const newMockConfig = { ...mockConfig };
        moduleProps = {
            ...buildMockModuleProps({}, {}, newMockConfig, mockContext),
            renderView: renderView,
            resources: mockResources,
            data: mockData,
            moduleState: mockModuleState
        };
        const component = render(React.createElement(CheckoutTermsAndConditions, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('Render without buttons', () => {
        const newMockConfig = { ...mockConfig };
        newMockConfig.showControlButtons = false;
        moduleProps = {
            ...buildMockModuleProps({}, {}, newMockConfig, mockContext),
            renderView: renderView,
            resources: mockResources,
            data: mockData,
            moduleState: mockModuleState
        };
        const component = render(React.createElement(CheckoutTermsAndConditions, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('Render without checkbox', () => {
        const newMockConfig = { ...mockConfig };
        newMockConfig.showCheckbox = false;
        moduleProps = {
            ...buildMockModuleProps({}, {}, newMockConfig, mockContext),
            renderView: renderView,
            resources: mockResources,
            data: mockData,
            moduleState: mockModuleState
        };
        const component = render(React.createElement(CheckoutTermsAndConditions, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('Set initial data correctly', () => {
        const newMockConfig = { ...mockConfig };
        moduleProps = {
            ...buildMockModuleProps({ ...mockData }, {}, newMockConfig, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            moduleState: mockModuleState
        };
        const component = mount(React.createElement(CheckoutTermsAndConditions, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const data = component.childAt(0).props().data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeFalsy();
        component.unmount();
    });
    it('Set initial data correctly if checkbox is not enabled', () => {
        const newMockConfig = { ...mockConfig };
        newMockConfig.showCheckbox = false;
        moduleProps = {
            ...buildMockModuleProps({ ...mockData }, {}, newMockConfig, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            moduleState: mockModuleState
        };
        const component = mount(React.createElement(CheckoutTermsAndConditions, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const data = component.childAt(0).props().data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeTruthy();
        component.unmount();
    });
    it('Set isTermsAndConditionAccepted on submit', () => {
        const newMockConfig = { ...mockConfig };
        moduleProps = {
            ...buildMockModuleProps({ ...mockData }, {}, newMockConfig, mockContext),
            renderView: renderView,
            resources: mockResources,
            moduleState: mockModuleState
        };
        const component = mount(shallow(React.createElement(CheckoutTermsAndConditions, Object.assign({}, moduleProps))).get(0));
        const componentInstance = component.instance();
        let data = componentInstance.props.data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeFalsy();
        const checkbox = component.find('.ms-checkout-terms-and-conditions__input-checkbox').first();
        checkbox.simulate('change', {
            target: {
                checked: true
            }
        });
        componentInstance.onSubmit();
        data = componentInstance.props.data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeTruthy();
        component.unmount();
    });
    it('AutoSave isTermsAndConditionAccepted on change', () => {
        const newMockConfig = { ...mockConfig };
        newMockConfig.showControlButtons = false;
        moduleProps = {
            ...buildMockModuleProps({ ...mockData }, {}, newMockConfig, mockContext),
            renderView: renderView,
            resources: mockResources,
            moduleState: mockModuleState
        };
        const component = mount(shallow(React.createElement(CheckoutTermsAndConditions, Object.assign({}, moduleProps))).get(0));
        const componentInstance = component.instance();
        let data = componentInstance.props.data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeFalsy();
        const checkbox = component.find('.ms-checkout-terms-and-conditions__input-checkbox').first();
        checkbox.simulate('change', {
            target: {
                checked: true
            }
        });
        data = componentInstance.props.data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeTruthy();
        component.unmount();
    });
});
//# sourceMappingURL=checkout-terms-and-conditions.test.js.map