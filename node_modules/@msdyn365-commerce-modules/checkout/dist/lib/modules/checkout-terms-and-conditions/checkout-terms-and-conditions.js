import { __decorate } from "tslib";
import classname from 'classnames';
import { action, computed, observable, reaction, when } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { Button, getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import * as MsDyn365 from '@msdyn365-commerce/core';
import CheckboxComponent from './components/checkout-terms-and-conditions.check-box';
import ErrorMessageComponent from './components/checkout-terms-and-conditions.error-message';
import ErrorTitleComponent from './components/checkout-terms-and-conditions.error-title';
let CheckoutTermsAndConditions = class CheckoutTermsAndConditions extends React.Component {
    constructor(props) {
        super(props);
        this.isTermsAccepted = true;
        this.getTermsAndConditions = () => {
            const { moduleState: { isReady }, config: { showCheckbox, description } } = this.props;
            const isDisabled = isReady && !this.isAutoSave;
            const isTermsAndConditionAccepted = this.isTermsAccepted;
            return {
                termsAndConditionAcceptance: { className: 'ms-checkout-terms-and-conditions__container' },
                checkBox: showCheckbox && React.createElement(CheckboxComponent, Object.assign({}, { isChecked: isTermsAndConditionAccepted, disabled: isDisabled, onChange: this.onChange, id: this.props.id, telemetryContent: this.telemetryContent })),
                description: React.createElement(MsDyn365.RichTextComponent, { text: description })
            };
        };
        this.init = async () => {
            const { data, config: { showCheckbox } } = this.props;
            if (data.checkout.result?.isTermsAndConditionAccepted || !showCheckbox) {
                await this.updateTermsAndConditionsAcceptance(true);
                this.isTermsAccepted = true;
            }
            else if (showCheckbox) {
                await this.updateTermsAndConditionsAcceptance(false);
                this.isTermsAccepted = false;
            }
            this.props.moduleState.init({
                onEdit: this.onEdit,
                onCancel: this.onCancel,
                onSubmit: this.onSubmit,
                status: this.isTermsAccepted ? 'ready' : 'updating'
            });
        };
        this.getErrorMessage = () => {
            const { errorMessageTitle } = this.props.resources;
            return {
                error: { tag: 'div', className: 'ms-checkout-terms-and-conditions__error', role: 'alert', 'aria-live': 'assertive' },
                title: React.createElement(ErrorTitleComponent, Object.assign({}, { title: errorMessageTitle })),
                message: React.createElement(ErrorMessageComponent, Object.assign({}, { message: this.errorMessage }))
            };
        };
        this.getCancelButton = () => {
            const { cancelBtnLabel = 'Cancel', cancelBtnAriaLabel } = this.props.resources;
            return (React.createElement(Button, { className: 'ms-checkout-terms-and-conditions__button-cancel', title: cancelBtnLabel, "aria-label": cancelBtnAriaLabel, color: 'secondary', onClick: this.onCancel }, cancelBtnLabel));
        };
        this.getSaveButton = () => {
            const { saveBtnLabel = 'Save', saveBtnAriaLabel } = this.props.resources;
            return (React.createElement(Button, { className: 'ms-checkout-terms-and-conditions__button-save', title: saveBtnLabel, "aria-label": saveBtnAriaLabel, color: 'primary', onClick: this.onSubmit }, saveBtnLabel));
        };
        this.getEditButton = () => {
            const { editBtnLabel = 'Change', editBtnAriaLabel } = this.props.resources;
            return (React.createElement(Button, { className: 'ms-checkout-terms-and-conditions__button-edit', title: editBtnLabel, "aria-label": editBtnAriaLabel, color: 'primary', onClick: this.onEdit }, editBtnLabel));
        };
        this.onEdit = () => {
            this.onUpdating();
        };
        this.onSubmit = async () => {
            if (!this.isTermsAccepted) {
                if (this.isAutoSave) {
                    await this.updateTermsAndConditionsAcceptance(this.isTermsAccepted);
                }
                else {
                    this.setError(this.props.resources.errorMessage);
                    this.props.moduleState.setHasError(true);
                }
            }
            else {
                this.clearError();
                await this.updateTermsAndConditionsAcceptance(this.isTermsAccepted);
                this.props.moduleState.onReady();
            }
        };
        this.onUpdating = () => {
            this.props.moduleState.onUpdating();
        };
        this.setError = (errorMessage) => {
            this.props.telemetry.error(errorMessage);
            this.props.moduleState.setHasError(true);
            this.props.moduleState.onUpdating();
            this.errorMessage = errorMessage;
        };
        this.onCancel = () => {
            if (!this.props.data.checkout.result) {
                return;
            }
            const isTermsAccepted = this.props.data.checkout.result.isTermsAndConditionAccepted;
            if (!isTermsAccepted) {
                this.props.moduleState.onUpdating();
                return;
            }
            else {
                this.isTermsAccepted = true;
                this.props.moduleState.setHasError(false);
                this.props.moduleState.onReady();
            }
        };
        this.updateTermsAndConditionsAcceptance = async (isTermsAccepted) => {
            if (this.props.data.checkout.result) {
                await this.props.data.checkout.result.updateTermsAndConditionsAcceptance({ newIsTermsAndConditionAccepted: isTermsAccepted });
            }
        };
        this.clearError = () => {
            this.props.moduleState.setHasError(false);
            this.errorMessage = undefined;
        };
        this.onChange = async (event) => {
            const checked = event.target.checked;
            this.isTermsAccepted = checked;
            if (this.isAutoSave) {
                await this.onSubmit();
            }
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    get isDataReady() {
        return (this.props.data.checkout.result && this.props.data.checkout.status) === 'SUCCESS';
    }
    get isShowButtons() {
        const { showControlButtons } = this.props.config;
        return !this.props.moduleState.hasExternalSubmitGroup && (showControlButtons || false);
    }
    get isAutoSave() {
        const { showControlButtons } = this.props.config;
        return !this.props.moduleState.hasExternalSubmitGroup && !showControlButtons;
    }
    get defaultTermsAndConditionAcceptedValue() {
        const { showCheckbox } = this.props.config;
        return showCheckbox ? false : true;
    }
    async componentDidMount() {
        when(() => this.isDataReady, async () => {
            await this.init();
        });
        reaction(() => this.props.data.checkout.result && this.props.data.checkout.result.isTermsAndConditionAccepted, async () => {
            this.isTermsAccepted = this.props.data.checkout.result?.isTermsAndConditionAccepted || this.defaultTermsAndConditionAcceptedValue;
        });
    }
    render() {
        const { moduleState: { isReady, hasError }, config: { className } } = this.props;
        const isTermsAndConditionAccepted = this.props.data.checkout.result?.isTermsAndConditionAccepted;
        const isError = hasError;
        const isShowContent = !isReady;
        const isShowSelected = !hasError && isReady;
        const viewProps = {
            ...this.props,
            ...this.state,
            isTermsAccepted: this.isTermsAccepted,
            errorMessageData: this.errorMessage,
            viewState: {
                isError: isError,
                isShowSaveButton: isShowContent && this.isShowButtons,
                isShowEditButton: isShowSelected && this.isShowButtons,
                isShowCancelButton: isShowContent && this.isShowButtons && isTermsAndConditionAccepted,
            },
            checkoutTermsAndConditions: {
                moduleProps: this.props,
                className: classname('ms-checkout-terms-and-conditions', className)
            },
            termsAndConditionsContent: this.getTermsAndConditions(),
            errorMessage: this.getErrorMessage(),
            saveButton: this.getSaveButton(),
            editButton: this.getEditButton(),
            cancelButton: this.getCancelButton(),
            onSave: this.onSubmit,
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onChange: this.onChange
        };
        return this.props.renderView(viewProps);
    }
};
__decorate([
    observable
], CheckoutTermsAndConditions.prototype, "isTermsAccepted", void 0);
__decorate([
    observable
], CheckoutTermsAndConditions.prototype, "errorMessage", void 0);
__decorate([
    computed
], CheckoutTermsAndConditions.prototype, "isDataReady", null);
__decorate([
    computed
], CheckoutTermsAndConditions.prototype, "isShowButtons", null);
__decorate([
    computed
], CheckoutTermsAndConditions.prototype, "isAutoSave", null);
__decorate([
    computed
], CheckoutTermsAndConditions.prototype, "defaultTermsAndConditionAcceptedValue", null);
__decorate([
    action
], CheckoutTermsAndConditions.prototype, "init", void 0);
CheckoutTermsAndConditions = __decorate([
    withModuleState,
    observer
], CheckoutTermsAndConditions);
export default CheckoutTermsAndConditions;
//# sourceMappingURL=checkout-terms-and-conditions.js.map