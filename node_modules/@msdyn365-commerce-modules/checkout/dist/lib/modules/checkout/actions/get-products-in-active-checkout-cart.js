import { getSimpleProducts, ProductInput } from '@msdyn365-commerce-modules/retail-actions';
import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getCheckoutState } from '@msdyn365-commerce/global-state';
export class ActiveCheckoutCartProductsInput {
    constructor() {
        this.getCacheKey = () => 'ActiveCheckoutCartProducts';
        this.getCacheObjectType = () => 'ActiveCheckoutCartProducts';
        this.dataCacheType = () => 'none';
    }
}
export const createInput = () => {
    return new ActiveCheckoutCartProductsInput();
};
export async function getActiveCheckoutCartProductsAction(input, ctx) {
    if (!input) {
        ctx.telemetry.exception(new Error('[getActiveCheckoutCartWithProducts]No valid Input was provided, failing'));
        throw new Error('[getActiveCheckoutCartWithProducts]No valid Input was provided, failing');
    }
    const checkoutState = await getCheckoutState(ctx);
    const cart = checkoutState.checkoutCart.cart;
    if (cart && cart.CartLines && cart.CartLines.length) {
        return getSimpleProducts(cart.CartLines.map(cartLine => {
            if (cartLine.ProductId) {
                return new ProductInput(cartLine.ProductId, ctx.requestContext.apiSettings);
            }
            return undefined;
        }).filter(Boolean), ctx)
            .then(products => {
            if (products) {
                return products;
            }
            else {
                return [];
            }
        })
            .catch(error => {
            ctx.telemetry.exception(error);
            throw new Error('[getActiveCheckoutCartWithProdcuts]Unable to hydrate cart with product information');
        });
    }
    return [];
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/checkout/get-products-in-active-checkout-cart',
    action: getActiveCheckoutCartProductsAction,
    input: createInput
});
//# sourceMappingURL=get-products-in-active-checkout-cart.js.map