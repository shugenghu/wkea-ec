import { Button, getPayloadObject, getTelemetryAttributes, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import classname from 'classnames';
import * as React from 'react';
import ReactDOM from 'react-dom';
class CheckoutGuidedCard extends React.PureComponent {
    constructor(props) {
        super(props);
        this.editButtonRef = React.createRef();
        this.formCardRef = React.createRef();
        this.renderFooder = () => {
            const { isVisted, isReady, isSubmitting, isCancelAllowed, hasControlGroup, onCancel, onSubmit, resource } = this.props;
            const { saveBtnLabel, cancelBtnLabel, saveAndContinueBtnLabel } = resource;
            const canSubmit = !isReady && onSubmit;
            const canCancel = !isReady && isVisted && isCancelAllowed && onCancel;
            if (!hasControlGroup || (!canSubmit && !canCancel)) {
                return null;
            }
            this.payLoad.contentAction.etext = isVisted ? TelemetryConstant.Save : TelemetryConstant.SaveContinue;
            const saveBtnAttributes = getTelemetryAttributes(this.props.telemetryContent, this.payLoad);
            this.payLoad.contentAction.etext = TelemetryConstant.Cancel;
            const cancelBtnAttributes = getTelemetryAttributes(this.props.telemetryContent, this.payLoad);
            return (React.createElement("div", { className: 'ms-checkout__guided-card-footer' },
                canSubmit && (React.createElement(Button, Object.assign({ className: classname('ms-checkout__guided-card-btn-save', { 'is-submitting': isSubmitting }), title: isVisted ? saveBtnLabel : saveAndContinueBtnLabel, color: 'primary', disabled: isSubmitting, onClick: onSubmit }, saveBtnAttributes), isVisted && isCancelAllowed ? saveBtnLabel : saveAndContinueBtnLabel)),
                canCancel && (React.createElement(Button, Object.assign({ className: 'ms-checkout__guided-card-btn-cancel', title: cancelBtnLabel, color: 'secondary', onClick: onCancel }, cancelBtnAttributes), cancelBtnLabel))));
        };
        this.focusOnFirstFocusableElement = () => {
            const node = ReactDOM.findDOMNode(this);
            const focussableElements = `
             a:not([disabled]),
             button:not([disabled]),
             input[type=submit]:not([disabled]),
             input[type=checkbox]:not([disabled]),
             input[type=text]:not([disabled]),
             input[type=radio]:not([disabled]),
             input[type=password]:not([disabled]),
             select:not([disabled]),
             textarea:not([disabled]),
             [tabindex]:not([disabled]):not([tabindex="-1"])
         `;
            const child = node && node.querySelector && node.querySelector(focussableElements);
            child && child.focus && child.focus();
        };
        this.focusOnEditButton = () => {
            const editButton = this.editButtonRef &&
                this.editButtonRef.current &&
                this.editButtonRef.current.focus &&
                this.editButtonRef.current;
            editButton && editButton.focus();
        };
        this.scrollToTitle = () => {
            const formCard = this.props.isMobile && this.formCardRef && this.formCardRef.current && this.formCardRef.current;
            formCard && formCard.scrollIntoView();
        };
        this.getTitle = () => {
            const { step, title } = this.props;
            const { headingTag: Tag = 'h2', text = '' } = title || {};
            return (React.createElement(Tag, { className: 'ms-checkout__guided-card-title' },
                React.createElement("span", { className: 'ms-checkout__guided-card-title-step' },
                    step + 1,
                    ". "),
                text && React.createElement("span", { className: 'ms-checkout__guided-card-title-text' }, text)));
        };
        this.payLoad = getPayloadObject('click', props.telemetryContent, '');
    }
    componentDidUpdate(prevProps) {
        const { isActive, isReady, onNext, isVisted, onEdit } = this.props;
        if (isActive && isReady) {
            onNext();
        }
        const prevCanEdit = prevProps.isReady && prevProps.isVisted && !!prevProps.onEdit;
        const canEdit = isReady && isVisted && !!onEdit;
        if (!prevCanEdit && canEdit) {
            this.focusOnEditButton();
            this.scrollToTitle();
        }
        if (prevProps.isReady && !isReady) {
            this.focusOnFirstFocusableElement();
        }
    }
    render() {
        const { title, disabled, isExpanded, isActive, isVisted, children, isReady, isPending, isUpdating, hasInitialized, hasControlGroup, onEdit, resource } = this.props;
        const { changeBtnLabel } = resource;
        this.payLoad.contentAction.etext = TelemetryConstant.CheckoutChange;
        const changeBtnAttributes = getTelemetryAttributes(this.props.telemetryContent, this.payLoad);
        const canEdit = hasControlGroup && isReady && isVisted && onEdit;
        return (React.createElement("div", { className: classname('ms-checkout__guided-card', {
                active: isActive,
                expanded: isExpanded,
                closed: !isExpanded,
                visted: isVisted,
                hidden: disabled,
                initialized: hasInitialized,
                disabled: disabled,
                ready: isReady,
                pending: isPending,
                updating: isUpdating
            }), ref: this.formCardRef },
            React.createElement("div", { className: 'ms-checkout__guided-card-header' },
                this.getTitle(),
                canEdit && (React.createElement(Button, Object.assign({ innerRef: this.editButtonRef, className: 'ms-checkout__guided-card-btn-edit', title: changeBtnLabel, color: 'link', onClick: onEdit, "aria-label": title && title.text ? `${changeBtnLabel} ${title.text}` : '' }, changeBtnAttributes), changeBtnLabel))),
            React.createElement("div", { className: classname('ms-checkout__guided-card-body', {
                    hidden: !isExpanded
                }) },
                React.createElement("div", { className: 'ms-checkout__guided-card-content' }, children),
                this.renderFooder())));
    }
}
export default CheckoutGuidedCard;
//# sourceMappingURL=guided-card.js.map