import { __decorate } from "tslib";
import get from 'lodash/get';
import { observer } from 'mobx-react';
import * as React from 'react';
import GuidedCard from '../components/guided-card';
let CheckoutGuidedForm = class CheckoutGuidedForm extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            currentStep: 0
        };
        this.getEnabledModules = () => {
            const { moduleState: { childIds, getModule } } = this.props;
            return childIds.filter((childId) => {
                const state = getModule(childId);
                return !!state && !state.isDisabled;
            });
        };
        this.getStep = (id) => {
            return this.getEnabledModules().indexOf(id);
        };
        this.getId = (item) => {
            return get(item, 'props.id') || '';
        };
        this.getHeading = (item) => {
            return get(item, 'props.config.heading') || '';
        };
        this.isExpanded = (step) => {
            if (this.props.isEditor) {
                return true;
            }
            return step > -1 && step <= this.state.currentStep;
        };
        this.isActive = (step) => {
            return step === this.state.currentStep;
        };
        this.isVisted = (step) => {
            return step > -1 && step < this.state.currentStep;
        };
        this.onNext = () => {
            this.setState({
                currentStep: this.state.currentStep + 1
            });
        };
    }
    componentDidMount() {
        const childIds = this.props.items.map((item) => get(item, 'props.id'));
        this.props.moduleState.init({ childIds });
    }
    render() {
        const { moduleState, items, resource } = this.props;
        if (!items || !moduleState) {
            return null;
        }
        return (React.createElement("div", { className: 'ms-checkout__guided-form' }, items.map((item) => {
            const childId = this.getId(item);
            const step = this.getStep(childId);
            const title = this.getHeading(item);
            const state = this.props.moduleState.getModule(childId);
            const { isReady, isPending, isUpdating, isDisabled, isCancelAllowed, onEdit, onCancel, onSubmit, hasModuleState, hasInitialized } = state || {};
            return (React.createElement(GuidedCard, { key: childId, step: step, title: title, resource: resource, disabled: !hasModuleState || isDisabled, isActive: this.isActive(step), isVisted: this.isVisted(step), isExpanded: this.isExpanded(step), isSubmitting: isPending, isMobile: this.props.isMobile, isPending: isPending, isUpdating: isUpdating, hasInitialized: hasInitialized, isReady: isReady, isCancelAllowed: isCancelAllowed, onSubmit: onSubmit, onCancel: onCancel, onEdit: onEdit, onNext: this.onNext, hasControlGroup: !this.props.disableGuidedCheckoutFlow && hasInitialized, telemetryContent: this.props.telemetryContent }, React.cloneElement(item, { enableControl: true })));
        })));
    }
};
CheckoutGuidedForm = __decorate([
    observer
], CheckoutGuidedForm);
export default CheckoutGuidedForm;
//# sourceMappingURL=guided-form.js.map