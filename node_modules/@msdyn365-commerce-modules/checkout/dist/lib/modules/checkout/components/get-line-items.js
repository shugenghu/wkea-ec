import { getProductUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { Button, getPayloadObject, getTelemetryAttributes, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { CartLineItemComponent } from '@msdyn365-commerce/components';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import get from 'lodash/get';
import * as React from 'react';
export const getLineItems = (input, telemetryContent) => {
    const pickupDeliveryModeCode = get(input, 'context.request.channel.PickupDeliveryModeCode');
    const _getDeliveryLocation = (cartLine) => {
        const orgUnitLocations = get(input, 'data.orgUnitLocations.result');
        if (!cartLine.FulfillmentStoreId || !orgUnitLocations) {
            return '';
        }
        const locationMatch = (orgUnitLocations || []).find((location) => {
            return location.OrgUnitNumber === cartLine.FulfillmentStoreId;
        });
        return locationMatch && locationMatch.OrgUnitName;
    };
    const _getProduct = (productId) => {
        const products = get(input, 'data.products.result') || [];
        return products.find((_product) => {
            return productId === _product.RecordId;
        });
    };
    const _getLineItemComponent = (cartLine) => {
        const product = cartLine.ProductId && _getProduct(cartLine.ProductId);
        const { id, typeName, context, config: { imageSettings, showShippingChargesForLineItems }, resources: { quantityDisplayString, productDimensionTypeColor, productDimensionTypeSize, productDimensionTypeStyle, configString, inputQuantityAriaLabel, discountStringText, shippingCharges, }, context: { request: { gridSettings } } } = input;
        if (!product) {
            return;
        }
        return (React.createElement(CartLineItemComponent, { id: id, typeName: typeName, context: context, resources: {
                sizeString: productDimensionTypeSize,
                colorString: productDimensionTypeColor,
                styleString: productDimensionTypeStyle,
                quantityDisplayString,
                configString,
                inputQuantityAriaLabel,
                discountStringText,
                originalPriceText: '',
                currentPriceText: '',
                shippingChargesText: shippingCharges,
            }, isQuantityEditable: false, imageSettings: imageSettings, gridSettings: gridSettings, productUrl: getProductUrlSync(product, context.actionContext, undefined), primaryImageUrl: product.PrimaryImageUrl, data: {
                cartLine: cartLine,
                product: product
            }, showShippingChargesForLineItems: showShippingChargesForLineItems, telemetryContent: telemetryContent }));
    };
    const _getPickUpAtStoreComponents = (pickupDeliveryLocation) => {
        const { resources: { pickUpAtStoreWithLocationText } } = input;
        return {
            PickUpAtStore: { className: 'ms-checkout__pick-up-at-store' },
            label: React.createElement("span", { className: 'ms-checkout__store-label' }, pickUpAtStoreWithLocationText),
            location: React.createElement("div", { className: 'ms-checkout__store-location' }, pickupDeliveryLocation)
        };
    };
    const _getLineItemsComponents = (items) => {
        return items.map(cartLine => {
            const pickupDeliveryLocation = _getDeliveryLocation(cartLine);
            const isPickUp = (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode === pickupDeliveryModeCode : false;
            return {
                LineId: cartLine.LineId || '',
                LineItem: { className: 'ms-checkout__line-item' },
                item: _getLineItemComponent(cartLine),
                pickUpAtStore: isPickUp ? _getPickUpAtStoreComponents(pickupDeliveryLocation) : undefined
            };
        });
    };
    const _getGroupTitleComponent = (count, type) => {
        const { resources: { itemLabel, itemsLabel, inStorePickUpLabel, shippingCountCheckoutLineItem } } = input;
        const suffix = count > 1 ? itemsLabel : itemLabel;
        const title = type === 'ship' ? shippingCountCheckoutLineItem : inStorePickUpLabel;
        return title.replace('{count}', count.toString()).replace('{suffix}', suffix);
    };
    const _countItems = (items) => {
        return items.reduce((count, item) => {
            return count + (item.Quantity || 0);
        }, 0);
    };
    const _filterItemsByDiliveryType = (type) => {
        const cart = get(input, 'data.checkout.result.checkoutCart.cart');
        return type === 'ship'
            ? cart.CartLines.filter((cartLine) => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine)
            : cart.CartLines.filter((cartLine) => cartLine.DeliveryMode === pickupDeliveryModeCode);
    };
    const _getLineItemsByDeliveryType = (type) => {
        if ((pickupDeliveryModeCode === '' || pickupDeliveryModeCode === undefined) && type === 'pickup') {
            return;
        }
        const items = _filterItemsByDiliveryType(type);
        if (items.length === 0) {
            return undefined;
        }
        const count = _countItems(items);
        const title = _getGroupTitleComponent(count, type);
        return {
            LineItemDeliveryGroup: { className: classnames('ms-checkout__line-items-delivery-group', type) },
            LineItemList: { className: 'ms-checkout__line-items-list' },
            heading: React.createElement("div", { className: 'ms-checkout__line-items-group-title' }, title),
            lineItems: _getLineItemsComponents(items)
        };
    };
    const _getLineItems = () => {
        const { context, config: { lineItemsHeading }, data: { products }, resources: { editCartText } } = input;
        const payLoad = getPayloadObject('click', telemetryContent, TelemetryConstant.EditCart);
        const attribute = getTelemetryAttributes(telemetryContent, payLoad);
        const cart = get(input, 'data.checkout.result.checkoutCart.cart');
        if (!cart || !cart.CartLines || !cart.CartLines.length || !products) {
            return undefined;
        }
        return {
            LineItems: { className: 'ms-checkout__line-items' },
            Header: { className: 'ms-checkout__line-items-header' },
            heading: lineItemsHeading && lineItemsHeading.text && (React.createElement(Msdyn365.Text, Object.assign({ className: 'ms-checkout__line-items-heading' }, lineItemsHeading, { tag: lineItemsHeading.tag || 'h2', text: lineItemsHeading.text, editProps: { onEdit: handleLineItemHeadingChange, requestContext: context.request } }))),
            editLink: (React.createElement(Button, Object.assign({ className: 'ms-checkout__line-items-edit-cart-link', title: editCartText, color: 'link', href: Msdyn365.getUrlSync('cart', context.actionContext) || '' }, attribute), editCartText)),
            itemsForPickup: _getLineItemsByDeliveryType('pickup'),
            itemsForShip: _getLineItemsByDeliveryType('ship')
        };
    };
    const handleLineItemHeadingChange = (event) => {
        const { config: { lineItemsHeading } } = input;
        lineItemsHeading.text = event.target.value;
    };
    return _getLineItems();
};
//# sourceMappingURL=get-line-items.js.map