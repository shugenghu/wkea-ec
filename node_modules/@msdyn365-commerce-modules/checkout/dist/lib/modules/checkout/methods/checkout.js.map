{"version":3,"file":"checkout.js","sourceRoot":"./src/","sources":["modules/checkout/methods/checkout.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { getCheckoutState } from '@msdyn365-commerce/global-state';\nimport { checkoutAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport {\n    getTenderTypesAsync, resolveCardTypesAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport {\n    Address, CardType, CartTenderLine, RetailOperation, SalesOrder, TenderType, TokenizedPaymentCard\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nexport const OPERATIONS = {\n    PayCard: 201,\n    PayGiftCertificate: 214,\n    PayLoyalty: 207,\n    PayCustomerAccount: 202\n};\n\nconst getCardTypeId = async (ctx: IActionContext, cardPrefix: string = ''): Promise<string | undefined> => {\n    try {\n        const response = await resolveCardTypesAsync({ callerContext: ctx }, cardPrefix, CardType.Unknown);\n        if (response && response.length > 0) {\n            return response[0].TypeId;\n        }\n    } catch (error) {\n        ctx.telemetry.error('Call to resolveCardTypesAsync failed.', error);\n    }\n    return undefined;\n};\n\nconst findTenderIdTypeByOperationId = (tenderTypes: TenderType[], operationId: RetailOperation): string | undefined => {\n    const matchedTenderType = tenderTypes.find(tenderType => tenderType.OperationId === operationId);\n    if (matchedTenderType) {\n        return matchedTenderType.TenderTypeId;\n    }\n    return;\n};\n\nconst roundNumber = (value: number) => Number(value.toFixed(2));\n\nasync function getLoyaltyTenderLine(\n    ctx: IActionContext,\n    LoyaltyCardId: string,\n    Amount: number = 0,\n    Currency: string = 'USD'\n): Promise<CartTenderLine> {\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    if (!tenderTypes) {\n        throw new Error('Fail to get gift card tender line');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayLoyalty);\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        LoyaltyCardId\n    };\n}\n\nasync function getGiftCardTenderLine(\n    ctx: IActionContext,\n    GiftCardId: string = '',\n    Amount: number = 0,\n    Currency: string = 'USD',\n    tenderTypeId?: string,\n    giftCardPin?: string,\n    giftCardExpirationYear?: number,\n    giftCardExpirationMonth?: number\n): Promise<CartTenderLine> {\n    let TenderTypeId = tenderTypeId;\n\n    if (!TenderTypeId) {\n        const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n            throw error;\n        });\n        if (!tenderTypes) {\n            throw new Error('Fail to get gift card tender line');\n        }\n        TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayGiftCertificate);\n    }\n\n    const GiftCardPin = giftCardPin;\n    const GiftCardExpirationYear = giftCardExpirationYear;\n    const GiftCardExpirationMonth = giftCardExpirationMonth;\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        GiftCardId,\n        GiftCardPin,\n        GiftCardExpirationYear,\n        GiftCardExpirationMonth\n    };\n}\n\nasync function getCreditCardTenderLine(\n    ctx: IActionContext,\n    tokenizedPaymentCard: TokenizedPaymentCard,\n    cardPrefix: string = '',\n    Amount: number = 0,\n    Currency: string = 'USD',\n    billingAddress?: Address\n): Promise<CartTenderLine> {\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    let cartTypeId = tokenizedPaymentCard.CardTypeId;\n\n    if (!cartTypeId) {\n        cartTypeId = await getCardTypeId(ctx, cardPrefix);\n    }\n\n    if (!tenderTypes) {\n        throw new Error('Fail to get card tender type');\n    }\n\n    if (!cartTypeId) {\n        throw new Error('Fail to get card type id');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayCard);\n    const cardTenderLine: CartTenderLine = {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        Amount,\n        TenderTypeId,\n        CardTypeId: cartTypeId\n    };\n    cardTenderLine.TokenizedPaymentCard = {\n        ...tokenizedPaymentCard,\n        CardTypeId: cartTypeId,\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.TokenizedPaymentCard',\n        House: tokenizedPaymentCard.House || 'N/A',\n        ...(tokenizedPaymentCard.CardTokenInfo && {\n            CardTokenInfo: {\n                ...tokenizedPaymentCard.CardTokenInfo,\n                // @ts-ignore\n                // tslint:disable-next-line:prefer-type-cast\n                '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CardTokenInfo'\n            }\n        }),\n        ...(billingAddress && {\n            Phone: billingAddress.Phone,\n            Country: billingAddress.ThreeLetterISORegionName,\n            Address1: billingAddress.Street,\n            City: billingAddress.City,\n            State: billingAddress.State,\n            Zip: billingAddress.ZipCode\n        })\n    };\n\n    return cardTenderLine;\n}\n\nasync function createCustomerAccountTenderLine(\n    ctx: IActionContext,\n    Amount: number,\n    Currency: string = 'USD',\n): Promise<CartTenderLine> {\n    const CustomerId = null;\n    if (!ctx.requestContext.user.isAuthenticated) {\n       ctx.telemetry.error('A customer id is required to pay with customer account');\n    }\n\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    if (!tenderTypes) {\n        ctx.telemetry.error('No tender types found for this channel');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayCustomerAccount);\n    if (!TenderTypeId) {\n        ctx.telemetry.error('No customer account tender type');\n    }\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        // @ts-ignore\n        CustomerId\n    };\n}\n\n// tslint:disable-next-line:max-func-body-length\nexport default async (ctx: IActionContext): Promise<SalesOrder> => {\n    const checkoutState = await getCheckoutState(ctx).catch(error => {\n        throw error;\n    });\n\n    const cartState = checkoutState.checkoutCart;\n\n    const channelConfiguration = ctx.requestContext.channel;\n\n    if (!cartState || !Object.keys(cartState).length || !checkoutState || !channelConfiguration) {\n        throw new Error('Fail to placeOrder');\n    }\n\n    const {\n        giftCardExtends,\n        tokenizedPaymentCard,\n        cardPrefix,\n        guestCheckoutEmail,\n        billingAddress,\n        loyaltyAmount\n    } = checkoutState;\n    const { Currency } = channelConfiguration;\n\n    let amountDue = cartState.cart.AmountDue || 0;\n    let cartTenderLines;\n    const getTenderLinePromises = [];\n    const loyaltyCardNumber = cartState.cart.LoyaltyCardId;\n\n    // Pay by loyalty first\n    if (loyaltyAmount && loyaltyCardNumber) {\n        const chargedAmount = roundNumber(Math.min(loyaltyAmount, amountDue));\n        const loyaltyTenderLinePromise = getLoyaltyTenderLine(ctx, loyaltyCardNumber, chargedAmount, Currency);\n        getTenderLinePromises.push(loyaltyTenderLinePromise);\n        amountDue = roundNumber(amountDue - chargedAmount);\n    }\n\n    // Then by gift card\n    if (giftCardExtends && giftCardExtends.length) {\n        giftCardExtends.some(giftCardExtend => {\n            if (giftCardExtend.Balance && amountDue > 0) {\n                const chargedAmount = roundNumber(Math.min(giftCardExtend.Balance, amountDue));\n                const tenderTypeId = giftCardExtend.TenderTypeId;\n                const giftCardPin = giftCardExtend.Pin;\n                const giftCardExpirationYear = giftCardExtend.ExpirationDate ? parseInt(giftCardExtend.ExpirationDate?.split('/')[1], 10) : undefined;\n                const giftCardExpirationMonth = giftCardExtend.ExpirationDate ? parseInt(giftCardExtend.ExpirationDate?.split('/')[0], 10) : undefined;\n                const creditCardTenderLinePromise = getGiftCardTenderLine(ctx, giftCardExtend.Id, chargedAmount, Currency, tenderTypeId, giftCardPin, giftCardExpirationYear, giftCardExpirationMonth);\n                getTenderLinePromises.push(creditCardTenderLinePromise);\n                amountDue = roundNumber(amountDue - chargedAmount);\n            }\n            return amountDue === 0;\n        });\n    }\n\n    // Then by customer account\n    if (checkoutState.customerAccountAmount > 0) {\n            const chargedAmount = roundNumber(Math.min(checkoutState.customerAccountAmount, amountDue));\n            const customerAccountTenderLinePromise = createCustomerAccountTenderLine(ctx, chargedAmount, Currency);\n            getTenderLinePromises.push(customerAccountTenderLinePromise);\n            amountDue = roundNumber(amountDue - chargedAmount);\n    }\n\n    // Pay the rest by credit card\n    if (amountDue > 0) {\n        if (!tokenizedPaymentCard) {\n            throw new Error('Fail to placeOrder: no token found');\n        }\n        const creditCardTenderLinePromise = getCreditCardTenderLine(\n            ctx,\n            tokenizedPaymentCard,\n            cardPrefix,\n            amountDue,\n            Currency,\n            billingAddress\n        );\n        getTenderLinePromises.push(creditCardTenderLinePromise);\n    }\n\n    if (getTenderLinePromises.length > 0) {\n        // When payment methods is required\n        cartTenderLines = await Promise.all(getTenderLinePromises).catch(error => {\n            throw error;\n        });\n\n        if (!cartTenderLines || !cartTenderLines.length) {\n            throw new Error('Fail to placeOrder: fail to get cart tender lines');\n        }\n    }\n\n    // Proceed checkout\n    const salesOrder = await checkoutAsync(\n        { callerContext: ctx, bypassCache: 'get' },\n        cartState.cart.Id,\n        guestCheckoutEmail,\n        // @ts-ignore fields tokenizedPaymentCard and receiptNumberSequence are optional\n        undefined,\n        undefined,\n        cartTenderLines || null,\n        cartState.cart.Version\n        // @ts-ignore\n    ).catch(error => {\n        throw error;\n    });\n\n    if (!salesOrder) {\n        throw new Error('Fail to placeOrder: fail to checkout');\n    }\n\n    return salesOrder;\n};\n"]}