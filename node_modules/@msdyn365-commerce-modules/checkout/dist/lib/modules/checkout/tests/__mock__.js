import { buildHydratedMockActionContext } from '@msdyn365-commerce/core';
const PICKUP_DELIVERY_MODE_CODE = '77';
export const actionContext = buildHydratedMockActionContext();
export const mockContext = {
    actionContext: actionContext,
    request: {
        cookies: {
            isConsentGiven: () => true
        },
        channel: {
            PickupDeliveryModeCode: PICKUP_DELIVERY_MODE_CODE
        }
    }
};
export const mockConfig = {
    checkoutHeading: {
        text: 'Checkout',
        headingTag: 'h1'
    },
    lineItemsHeading: {
        text: 'Shopping bag',
        headingTag: 'h2'
    },
    orderSummaryHeading: {
        text: 'Order summary',
        headingTag: 'h2'
    },
    width: 'container',
    className: 'mock-class'
};
export const mockResources = {
    checkoutStepTitleFormat: '{stepNumber}. {stepTitle}',
    saveBtnLabel: 'Save',
    changeBtnLabel: 'Change',
    cancelBtnLabel: 'Cancel',
    saveAndContinueBtnLabel: 'Save & continue',
    genericErrorMessage: 'Something went wrong, please try again.',
    checkoutOutOfStockErrorMessage: 'Some of the items do not have enough stock. Please adjust the quantity in your cart.',
    cookieConsentRequiredMessage: 'Cookie consent required to load this content. See cookie banner on the page for more details.',
    backToShopping: 'Back to shopping',
    placeOrderText: 'Place order',
    productDimensionTypeColor: 'Color',
    productDimensionTypeSize: 'Size',
    productDimensionTypeStyle: 'Style',
    discountStringText: 'Savings',
    discountOffStringText: 'off',
    itemLabel: 'item',
    itemsLabel: 'items',
    inStorePickUpLabel: 'In-store pickup ({count} {suffix})',
    shippingCountCheckoutLineItem: 'Shipping ({count} {suffix})',
    pickUpAtStoreWithLocationText: 'Pick up in a store',
    quantityDisplayString: 'Quantity',
    editCartText: 'Edit cart',
    configString: 'Configuration',
    subTotalLabel: 'Subtotal',
    shippingLabel: 'Shipping',
    freeText: 'FREE',
    taxLabel: 'Tax',
    loyaltyLabel: 'Loyalty',
    giftcardLabel: 'Gift card',
    totalAmountLabel: 'Total amount',
    totalSavingsLabel: 'Total savings',
    orderTotalLabel: 'Order total',
    totalDiscountsLabel: 'Total discounts',
    toBeCalculatedText: 'To be calculated',
    inputQuantityAriaLabel: 'quantity input',
    otherCharges: 'Other charges',
    shippingCharges: 'Shipping charges'
};
export const mockChannelConfiguration = {
    Currency: 'USD',
    PickupDeliveryModeCode: PICKUP_DELIVERY_MODE_CODE
};
export const mockCheckoutCart = {
    Id: 'cN6mfMjzVw7lBTQMdrwsQh~lKaU4XXbF',
    AmountDue: 100,
    TotalAmount: 100,
    CartLines: [
        {
            LineId: '574208bdcf744390adf75d460d5339bb',
            Quantity: 2,
            ProductId: 2
        }
    ],
    LoyaltyCardId: 'ABC',
    Version: 123
};
export const mockEmptyCart = {
    Id: 'cN6mfMjzVw7lBTQMdrwsQh~lKaU4XXbF',
    AmountDue: 0,
    TotalAmount: 0,
    CartLines: [],
    Version: 123
};
export const mockCheckoutCartWithShipItem = {
    Id: 'cN6mfMjzVw7lBTQMdrwsQh~lKaU4XXbF',
    AmountDue: 100,
    TotalAmount: 100,
    CartLines: [
        {
            LineId: '574208bdcf744390adf75d460d5339bb',
            DeliveryMode: '99',
            Quantity: 2,
            ShippingAddress: {
                City: 'Redmond'
            },
            ProductId: 2
        }
    ],
    Version: 123
};
export const mockCheckoutCartWithPickupItem = {
    Id: 'cN6mfMjzVw7lBTQMdrwsQh~lKaU4XXbF',
    AmountDue: 100,
    TotalAmount: 100,
    CartLines: [
        {
            LineId: '574208bdcf744390adf75d460d5339bb',
            DeliveryMode: PICKUP_DELIVERY_MODE_CODE,
            FulfillmentStoreId: 'SEATTLE',
            Quantity: 1,
            ProductId: 2
        }
    ],
    Version: 123
};
export const mockCheckoutCartWithFreeItem = {
    Id: 'cN6mfMjzVw7lBTQMdrwsQh~lKaU4XXbF',
    AmountDue: 0,
    TotalAmount: 0,
    CartLines: [
        {
            LineId: '574208bdcf744390adf75d460d5339bb',
            Quantity: 1,
            ProductId: 2
        }
    ],
    Version: 123
};
export const mockCheckoutCartWithMultiDeliveryModeItems = {
    Id: 'cN6mfMjzVw7lBTQMdrwsQh~lKaU4XXbF',
    AmountDue: 100,
    TotalAmount: 100,
    CartLines: [
        {
            LineId: '574208bdcf744390adf75d460d5339bb',
            Quantity: 1,
            DeliveryMode: '99',
            ShippingAddress: {
                City: 'Redmond'
            },
            ProductId: 2
        },
        {
            LineId: '574208bdc15413460d5339bb12313245',
            Quantity: 1,
            DeliveryMode: PICKUP_DELIVERY_MODE_CODE,
            FulfillmentStoreId: 'SEATTLE',
            ProductId: 2
        },
        {
            LineId: '574208bdcf744390adf75d460d5339bb',
            Quantity: 1,
            DeliveryMode: PICKUP_DELIVERY_MODE_CODE,
            FulfillmentStoreId: 'SEATTLE',
            ProductId: 2
        }
    ],
    Version: 123
};
export const mockProduct = {
    RecordId: 2,
    Name: 'Surface Pen Tips',
    ProductTypeValue: 0,
    BasePrice: 300,
    Price: 300,
    AdjustedPrice: 300,
    PrimaryImageUrl: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/search?fileName=/Products%2F81307_000_001.png'
};
export const mockOrgUnitLocations = [
    {
        OrgUnitNumber: 'SEATTLE',
        OrgUnitName: 'Seattle'
    }
];
export const mockSalesOrder = {
    Id: 'cN6mfMjzVw7lBTQMdrwsQh~lKaU4XXbF',
    ChannelReferenceId: '123TESET'
};
export const mockActiveCart = {
    Id: 'gB8DCi6AK3mzMavh08C4P18wFDbEEyto',
    CartLines: [
        {
            LineId: '574208bdcf744390adf75d460d5339bb'
        }
    ],
    Version: 123
};
export const mockTokenizedPaymentCard = {
    NameOnCard: 'John',
    CardTypeId: 'VISA'
};
export const mockShippingAddress = {
    City: 'Redmond'
};
export const mockReceiptEmail = 'receipt@test.com';
export const mockGiftCardA = {
    Id: '123-456-111',
    Balance: 60,
    TenderTypeId: '12',
    Pin: '1111',
    ExpirationDate: '10/2020'
};
export const mockGiftCardB = {
    Id: '123-456-222',
    Balance: 50,
    TenderTypeId: '8'
};
export const mockGiftCardC = {
    Id: '123-456-333',
    Balance: 10,
    TenderTypeId: '8'
};
export const mockCheckoutState = {
    giftCards: [],
    cardPrefix: '4111',
    tokenizedPaymentCard: undefined,
    shippingAddress: undefined,
    billingAddress: {
        City: 'Seattle'
    },
    guestCheckoutEmail: ''
};
export const mockGiftCardCheckoutState = {
    giftCards: [],
    cardPrefix: '4111',
    tokenizedPaymentCard: undefined,
    shippingAddress: undefined,
    billingAddress: {
        City: 'Seattle'
    },
    guestCheckoutEmail: '',
    tenderLine: { TenderTypeId: '12' },
};
export const mockTenderTypes = [
    {
        Function: 0,
        TenderTypeId: '1',
        Name: 'Cash',
        OperationId: 200,
        OperationName: 'Pay cash',
        ChangeTenderTypeId: '',
        AboveMinimumChangeAmount: 0,
        AboveMinimumChangeTenderTypeId: '',
        OpenDrawer: false,
        UseSignatureCaptureDevice: false,
        MinimumSignatureCaptureAmount: 0,
        IsOvertenderAllowed: false,
        IsUndertenderAllowed: true,
        MaximumOvertenderAmount: 0,
        MaximumUndertenderAmount: 0,
        MaximumAmountPerTransaction: 0,
        MaximumAmountPerLine: 0,
        MinimumAmountPerTransaction: 0,
        MinimumAmountPerLine: 0,
        RoundOff: 0,
        CountingRequired: 0,
        TakenToBank: 0,
        TakenToSafe: 0,
        ConnectorId: '',
        GiftCardItem: '',
        GiftCardCashoutOutThreshold: 0,
        ChangeLineOnReceipt: '',
        HideCardInputDetails: false,
        CashDrawerLimitEnabled: false,
        CashDrawerLimit: 0,
        RestrictReturnsWithoutReceipt: false,
        ExtensionProperties: []
    },
    {
        Function: 1,
        TenderTypeId: '3',
        Name: 'Cards',
        OperationId: 201,
        OperationName: 'Pay card',
        ChangeTenderTypeId: '',
        AboveMinimumChangeAmount: 0,
        AboveMinimumChangeTenderTypeId: '',
        OpenDrawer: false,
        UseSignatureCaptureDevice: false,
        MinimumSignatureCaptureAmount: 0,
        IsOvertenderAllowed: false,
        IsUndertenderAllowed: true,
        MaximumOvertenderAmount: 0,
        MaximumUndertenderAmount: 0,
        MaximumAmountPerTransaction: 0,
        MaximumAmountPerLine: 0,
        MinimumAmountPerTransaction: 0,
        MinimumAmountPerLine: 0,
        RoundOff: 0,
        CountingRequired: 0,
        TakenToBank: 0,
        TakenToSafe: 0,
        ConnectorId: '',
        GiftCardItem: '',
        GiftCardCashoutOutThreshold: 0,
        ChangeLineOnReceipt: '',
        HideCardInputDetails: false,
        CashDrawerLimitEnabled: false,
        CashDrawerLimit: 0,
        RestrictReturnsWithoutReceipt: false,
        ExtensionProperties: []
    },
    {
        ExtensionProperties: [],
        Function: 0,
        TenderTypeId: '8',
        Name: 'Gift Card',
        OperationId: 214,
        OperationName: 'Pay gift card',
        ChangeTenderTypeId: '',
        AboveMinimumChangeAmount: 0,
        AboveMinimumChangeTenderTypeId: '',
        OpenDrawer: false,
        UseSignatureCaptureDevice: false,
        MinimumSignatureCaptureAmount: 0,
        IsOvertenderAllowed: false,
        IsUndertenderAllowed: true,
        MaximumOvertenderAmount: 0,
        MaximumUndertenderAmount: 0,
        MaximumAmountPerTransaction: 0,
        MaximumAmountPerLine: 0,
        MinimumAmountPerTransaction: 0,
        MinimumAmountPerLine: 0,
        RoundOff: 0,
        CountingRequired: 0,
        TakenToBank: 0,
        TakenToSafe: 0,
        ConnectorId: '',
        GiftCardItem: '',
        GiftCardCashoutOutThreshold: 0,
        ChangeLineOnReceipt: '',
        HideCardInputDetails: false,
        CashDrawerLimitEnabled: false,
        CashDrawerLimit: 0,
        RestrictReturnsWithoutReceipt: false
    },
    {
        Function: 1,
        TenderTypeId: '10',
        Name: 'Loyalty Cards',
        OperationId: 207,
        OperationName: 'Pay loyalty card',
        ChangeTenderTypeId: '',
        AboveMinimumChangeAmount: 0,
        AboveMinimumChangeTenderTypeId: '',
        OpenDrawer: false,
        UseSignatureCaptureDevice: false,
        MinimumSignatureCaptureAmount: 0,
        IsOvertenderAllowed: false,
        IsUndertenderAllowed: true,
        MaximumOvertenderAmount: 0,
        MaximumUndertenderAmount: 0,
        MaximumAmountPerTransaction: 0,
        MaximumAmountPerLine: 0,
        MinimumAmountPerTransaction: 0,
        MinimumAmountPerLine: 0,
        RoundOff: 0,
        CountingRequired: 0,
        TakenToBank: 0,
        TakenToSafe: 0,
        ConnectorId: '',
        GiftCardItem: '',
        GiftCardCashoutOutThreshold: 0,
        ChangeLineOnReceipt: '',
        HideCardInputDetails: false,
        CashDrawerLimitEnabled: false,
        CashDrawerLimit: 0,
        RestrictReturnsWithoutReceipt: false,
        ExtensionProperties: []
    }
];
export const mockCardTypes = [
    {
        RecordId: 5637144576,
        TypeId: 'AMEXPRESS',
        Name: 'American Express',
        PaymentMethodId: '3',
        CardTypeValue: 0,
        Issuer: 'Credit provider',
        NumberFrom: '37',
        NumberTo: '37',
        CashBackLimit: 0,
        AllowManualInput: true,
        CheckModulus: false,
        ExtensionProperties: []
    },
    {
        RecordId: 5637144577,
        TypeId: 'EUROCARD',
        Name: 'EuroCard',
        PaymentMethodId: '3',
        CardTypeValue: 0,
        Issuer: 'Credit provider',
        NumberFrom: '4511',
        NumberTo: '4512',
        CashBackLimit: 0,
        AllowManualInput: true,
        CheckModulus: false,
        ExtensionProperties: []
    },
    {
        RecordId: 5637144578,
        TypeId: 'LOYALTY',
        Name: 'Loyalty Card',
        PaymentMethodId: '10',
        CardTypeValue: 2,
        Issuer: 'US Loyalty',
        NumberFrom: '100000',
        NumberTo: '200000',
        CashBackLimit: 0,
        AllowManualInput: false,
        CheckModulus: false,
        ExtensionProperties: []
    },
    {
        RecordId: 5637144579,
        TypeId: 'MAESTRO',
        Name: 'Maestro',
        PaymentMethodId: '3',
        CardTypeValue: 1,
        Issuer: 'Debit provider',
        NumberFrom: '56',
        NumberTo: '56',
        CashBackLimit: 0,
        AllowManualInput: true,
        CheckModulus: false,
        ExtensionProperties: []
    },
    {
        RecordId: 5637144580,
        TypeId: 'MASTER',
        Name: 'Mastercard',
        PaymentMethodId: '3',
        CardTypeValue: 0,
        Issuer: 'Credit provider',
        NumberFrom: '5',
        NumberTo: '5',
        CashBackLimit: 0,
        AllowManualInput: true,
        CheckModulus: false,
        ExtensionProperties: []
    },
    {
        RecordId: 5637144584,
        TypeId: 'VISA',
        Name: 'Visa Card',
        PaymentMethodId: '3',
        CardTypeValue: 0,
        Issuer: 'Credit provider',
        NumberFrom: '4',
        NumberTo: '4',
        CashBackLimit: 0,
        AllowManualInput: true,
        CheckModulus: false,
        ExtensionProperties: []
    },
    {
        RecordId: 5637144585,
        TypeId: 'VISA',
        Name: 'Visa Card',
        PaymentMethodId: '3',
        CardTypeValue: 0,
        Issuer: 'Credit provider',
        NumberFrom: '4507',
        NumberTo: '4508',
        CashBackLimit: 0,
        AllowManualInput: true,
        CheckModulus: false,
        ExtensionProperties: []
    },
    {
        RecordId: 5637144590,
        TypeId: 'VISAELEC',
        Name: 'Visa Electron',
        PaymentMethodId: '3',
        CardTypeValue: 1,
        Issuer: 'Debit provider',
        NumberFrom: '5802',
        NumberTo: '5803',
        CashBackLimit: 0,
        AllowManualInput: true,
        CheckModulus: false,
        ExtensionProperties: []
    }
];
export const mockResolvedCardTypes = [
    {
        RecordId: 5637144585,
        TypeId: 'VISA',
        Name: 'Visa Card',
        PaymentMethodId: '3',
        CardTypeValue: 0,
        Issuer: 'Credit provider',
        NumberFrom: '4507',
        NumberTo: '4508',
        CashBackLimit: 0,
        AllowManualInput: true,
        CheckModulus: false,
        ExtensionProperties: []
    }
];
export const getMockData = (cart, products, orgUnitLocations) => {
    return {
        checkout: {
            status: 'SUCCESS',
            result: {
                checkoutCart: {
                    cart
                }
            }
        },
        products: {
            status: 'SUCCESS',
            result: products
        },
        orgUnitLocations: {
            status: 'SUCCESS',
            result: orgUnitLocations
        }
    };
};
//# sourceMappingURL=__mock__.js.map