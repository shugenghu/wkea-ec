import * as GlobalStateActions from '@msdyn365-commerce/global-state';
import emptyActiveCartAction from '../../methods/empty-active-cart';
import { mockActiveCart, mockCheckoutCart } from '../__mock__';
jest.mock('@msdyn365-commerce/global-state');
let mockActionContext;
let mockCartState;
let mockCheckoutState;
describe('CheckoutPlaceOrder', () => {
    describe('emptyActiveCartAction', () => {
        beforeEach(() => {
            mockActionContext = {
                update: jest.fn(),
                requestContext: {
                    apiSettings: {}
                }
            };
            mockCartState = {
                cart: mockActiveCart,
                removeCartLines: jest.fn(),
                removeAllPromoCodes: jest.fn()
            };
            mockCheckoutState = {
                checkoutCart: {
                    cart: mockCheckoutCart
                },
                removeCheckoutCartId: jest.fn()
            };
            GlobalStateActions.getCartState.mockImplementation(async () => mockCartState);
            GlobalStateActions.getCheckoutState.mockImplementation(async () => mockCheckoutState);
        });
        it('emptys the active cart', async () => {
            await emptyActiveCartAction(mockActionContext);
            expect(mockCheckoutState.removeCheckoutCartId).toBeCalled();
            expect(mockCartState.removeCartLines).toBeCalledWith(expect.objectContaining({
                cartLineIds: [mockCheckoutCart.CartLines && mockCheckoutCart.CartLines[0].LineId]
            }));
        });
        it('throws error when no cart found', async () => {
            mockCartState = {
                ...mockCartState,
                cart: undefined
            };
            GlobalStateActions.getCartState.mockImplementation(async () => mockCartState);
            try {
                await emptyActiveCartAction(mockActionContext);
            }
            catch (e) {
                expect(e).toBeDefined();
            }
        });
        it('throws error when getCartState throws error', async () => {
            mockCartState = {
                ...mockCartState,
                cart: undefined
            };
            GlobalStateActions.getCartState.mockImplementation(async () => Promise.reject({}));
            try {
                await emptyActiveCartAction(mockActionContext);
            }
            catch (e) {
                expect(e).toBeDefined();
            }
        });
        it('throws error when no checkoutCart found', async () => {
            mockCheckoutState = {
                ...mockCheckoutState,
                checkoutCart: undefined
            };
            GlobalStateActions.getCheckoutState.mockImplementation(async () => mockCheckoutState);
            try {
                await emptyActiveCartAction(mockActionContext);
            }
            catch (e) {
                expect(e).toBeDefined();
            }
        });
        afterEach(() => {
            GlobalStateActions.getCartState.mockReset();
            GlobalStateActions.getCheckoutState.mockReset();
            mockActionContext.update.mockReset();
        });
        afterAll(() => {
            jest.unmock('@msdyn365-commerce/global-state');
        });
    });
});
//# sourceMappingURL=empty-active-cart.test.js.map