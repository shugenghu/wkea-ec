import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import Checkout from '../checkout';
import renderView from '../checkout.view';
import { actionContext, getMockData, mockCheckoutCart, mockConfig, mockContext, mockEmptyCart, mockResources } from './__mock__';
const mockSlots = {
    checkoutInformation: [],
    orderConfirmation: []
};
describe('Checkout', () => {
    it('renders correctly when cart is loading', () => {
        const mockData = {
            checkout: {
                status: 'LOADING'
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            slots: mockSlots,
            renderView
        };
        const component = render(React.createElement(Checkout, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly when it failed to fetch cart', () => {
        const mockData = {
            checkout: {
                status: 'FAILED'
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            slots: mockSlots,
            renderView
        };
        const component = render(React.createElement(Checkout, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly when it get an empty cart object', () => {
        const mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: {}
                    }
                }
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            slots: mockSlots,
            renderView
        };
        const component = render(React.createElement(Checkout, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly when it get an empty cart', () => {
        const mockData = getMockData(mockEmptyCart);
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            slots: mockSlots,
            renderView
        };
        const component = render(React.createElement(Checkout, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly when it get a valid cart', () => {
        const mockData = getMockData(mockCheckoutCart);
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            slots: mockSlots,
            renderView
        };
        const component = render(React.createElement(Checkout, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly when consent is not given', () => {
        const mockData = getMockData(mockCheckoutCart);
        const _mockContext = {
            actionContext,
            request: {
                cookies: {
                    isConsentGiven: () => false
                }
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, _mockContext),
            resources: mockResources,
            slots: mockSlots,
            renderView
        };
        const component = render(React.createElement(Checkout, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=checkout.test.js.map