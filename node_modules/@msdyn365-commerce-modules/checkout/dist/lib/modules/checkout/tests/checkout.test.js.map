{"version":3,"file":"checkout.test.js","sourceRoot":"./src/","sources":["modules/checkout/tests/checkout.test.tsx"],"names":[],"mappings":"AAIA,OAAO,EAAE,oBAAoB,EAAiC,MAAM,yBAAyB,CAAC;AAG9F,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,QAAkC,MAAM,aAAa,CAAC;AAC7D,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAEjI,MAAM,SAAS,GAAG;IACd,mBAAmB,EAAE,EAAE;IACvB,iBAAiB,EAAE,EAAE;CACxB,CAAC;AAEF,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACtB,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAC9C,MAAM,QAAQ,GAAG;YACb,QAAQ,EAAE;gBACN,MAAM,EAAE,SAAS;aACW;SACnC,CAAC;QACF,MAAM,WAAW,GAAG;YAChB,GAAI,oBAAoB,CAAC,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,WAAW,CAA0B;YACxF,SAAS,EAAE,aAAa;YACxB,KAAK,EAAE,SAAS;YAChB,UAAU;SACb,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,QAAQ,oBAAK,WAAW,EAAI,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACtD,MAAM,QAAQ,GAAG;YACb,QAAQ,EAAE;gBACN,MAAM,EAAE,QAAQ;aACY;SACnC,CAAC;QACF,MAAM,WAAW,GAAG;YAChB,GAAI,oBAAoB,CAAC,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,WAAW,CAA0B;YACxF,SAAS,EAAE,aAAa;YACxB,KAAK,EAAE,SAAS;YAChB,UAAU;SACb,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,QAAQ,oBAAK,WAAW,EAAI,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC1D,MAAM,QAAQ,GAAG;YACb,QAAQ,EAAE;gBACN,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE;oBACJ,YAAY,EAAE;wBACV,IAAI,EAAE,EAAE;qBACX;iBACJ;aAC2B;SACnC,CAAC;QACF,MAAM,WAAW,GAAG;YAChB,GAAI,oBAAoB,CAAC,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,WAAW,CAA0B;YACxF,SAAS,EAAE,aAAa;YACxB,KAAK,EAAE,SAAS;YAChB,UAAU;SACb,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,QAAQ,oBAAK,WAAW,EAAI,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACnD,MAAM,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC,CAAC;QAC5C,MAAM,WAAW,GAAG;YAChB,GAAI,oBAAoB,CAAC,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,WAAW,CAA0B;YACxF,SAAS,EAAE,aAAa;YACxB,KAAK,EAAE,SAAS;YAChB,UAAU;SACb,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,QAAQ,oBAAK,WAAW,EAAI,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QAClD,MAAM,QAAQ,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAG;YAChB,GAAI,oBAAoB,CAAC,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,WAAW,CAA0B;YACxF,SAAS,EAAE,aAAa;YACxB,KAAK,EAAE,SAAS;YAChB,UAAU;SACb,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,QAAQ,oBAAK,WAAW,EAAI,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACnD,MAAM,QAAQ,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAE/C,MAAM,YAAY,GAAiB;YAC/B,aAAa;YACb,OAAO,EAAE;gBACL,OAAO,EAAE;oBACL,cAAc,EAAE,GAAG,EAAE,CAAC,KAAK;iBAC9B;aACe;SACvB,CAAC;QACF,MAAM,WAAW,GAAG;YAChB,GAAI,oBAAoB,CAAC,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,YAAY,CAA0B;YACzF,SAAS,EAAE,aAAa;YACxB,KAAK,EAAE,SAAS;YAChB,UAAU;SACb,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,QAAQ,oBAAK,WAAW,EAAI,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { buildMockModuleProps, ICoreContext, IRequestContext } from '@msdyn365-commerce/core';\nimport { ICheckoutState } from '@msdyn365-commerce/global-state';\nimport { AsyncResult } from '@msdyn365-commerce/retail-proxy';\nimport { render } from 'enzyme';\n// tslint:disable-next-line:no-unused-variable\nimport * as React from 'react';\nimport Checkout, { ICheckoutModuleProps } from '../checkout';\nimport renderView from '../checkout.view';\nimport { actionContext, getMockData, mockCheckoutCart, mockConfig, mockContext, mockEmptyCart, mockResources } from './__mock__';\n\nconst mockSlots = {\n    checkoutInformation: [],\n    orderConfirmation: []\n};\n\ndescribe('Checkout', () => {\n    it('renders correctly when cart is loading', () => {\n        const mockData = {\n            checkout: {\n                status: 'LOADING'\n            } as AsyncResult<ICheckoutState>\n        };\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutModuleProps),\n            resources: mockResources,\n            slots: mockSlots,\n            renderView\n        };\n        // @ts-ignore mock partial data\n        const component = render(<Checkout {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly when it failed to fetch cart', () => {\n        const mockData = {\n            checkout: {\n                status: 'FAILED'\n            } as AsyncResult<ICheckoutState>\n        };\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutModuleProps),\n            resources: mockResources,\n            slots: mockSlots,\n            renderView\n        };\n        // @ts-ignore mock patial data\n        const component = render(<Checkout {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly when it get an empty cart object', () => {\n        const mockData = {\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: {}\n                    }\n                }\n            } as AsyncResult<ICheckoutState>\n        };\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutModuleProps),\n            resources: mockResources,\n            slots: mockSlots,\n            renderView\n        };\n        // @ts-ignore mock patial data\n        const component = render(<Checkout {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly when it get an empty cart', () => {\n        const mockData = getMockData(mockEmptyCart);\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutModuleProps),\n            resources: mockResources,\n            slots: mockSlots,\n            renderView\n        };\n        // @ts-ignore mock patial data\n        const component = render(<Checkout {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly when it get a valid cart', () => {\n        const mockData = getMockData(mockCheckoutCart);\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutModuleProps),\n            resources: mockResources,\n            slots: mockSlots,\n            renderView\n        };\n        // @ts-ignore mock patial data\n        const component = render(<Checkout {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly when consent is not given', () => {\n        const mockData = getMockData(mockCheckoutCart);\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        const _mockContext: ICoreContext = {\n            actionContext,\n            request: {\n                cookies: {\n                    isConsentGiven: () => false\n                }\n            } as IRequestContext\n        };\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, _mockContext) as ICheckoutModuleProps),\n            resources: mockResources,\n            slots: mockSlots,\n            renderView\n        };\n        // @ts-ignore mock patial data\n        const component = render(<Checkout {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});\n"]}