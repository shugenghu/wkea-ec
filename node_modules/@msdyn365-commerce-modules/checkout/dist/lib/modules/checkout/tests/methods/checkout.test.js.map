{"version":3,"file":"checkout.test.js","sourceRoot":"./src/","sources":["modules/checkout/tests/methods/checkout.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { buildHydratedMockActionContext, IActionContext } from '@msdyn365-commerce/core';\nimport * as GlobalStateActions from '@msdyn365-commerce/global-state';\nimport * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport * as OrgUnitsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport * as StoreOperationsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport placeOrderAction from '../../methods/checkout';\nimport {\n    mockChannelConfiguration,\n    mockCheckoutCart,\n    mockCheckoutCartWithFreeItem,\n    mockCheckoutState,\n    mockGiftCardA,\n    mockGiftCardB,\n    mockGiftCardC,\n    mockGiftCardCheckoutState,\n    mockReceiptEmail,\n    mockResolvedCardTypes,\n    mockSalesOrder,\n    mockTenderTypes,\n    mockTokenizedPaymentCard\n} from '../__mock__';\n\njest.mock('@msdyn365-commerce/global-state');\njest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g');\njest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');\njest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n\nlet mockActionContext: IActionContext;\nlet mockCheckoutStateWithCart: GlobalStateActions.ICheckoutState;\n\ndescribe('CheckoutPlaceOrder', () => {\n    describe('placeOrderAction', () => {\n        beforeEach(() => {\n            // @ts-ignore: Using partial for testing\n            mockActionContext = buildHydratedMockActionContext({});\n            mockActionContext.requestContext.channel = mockChannelConfiguration;\n\n            // @ts-ignore: Using partial for testing\n            mockCheckoutStateWithCart = {\n                ...mockCheckoutState,\n                // @ts-ignore: Using partial for testing\n                checkoutCart: {\n                    cart: mockCheckoutCart,\n                    updateLoyaltyCardId: jest.fn()\n                }\n            };\n\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation(async () => mockResolvedCardTypes);\n\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            StoreOperationsDataActions.getTenderTypesAsync.mockImplementation(async () => mockTenderTypes);\n\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            CartsDataActions.checkoutAsync.mockImplementation(async () => mockSalesOrder);\n        });\n\n        it('places order with only credit card when credit card is the only payment method', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutStateWithCart,\n                    guestCheckoutEmail: mockReceiptEmail,\n                    tokenizedPaymentCard: mockTokenizedPaymentCard\n                })\n            );\n\n            // @ts-ignore: Using partial for testing\n            const salesOrder = await placeOrderAction(mockActionContext).catch(error => {\n                throw error;\n            });\n            expect(salesOrder).toEqual(mockSalesOrder);\n\n            expect(CartsDataActions.checkoutAsync).toBeCalledWith(\n                { callerContext: mockActionContext, bypassCache: 'get' },\n                mockCheckoutCart.Id,\n                mockReceiptEmail,\n                undefined,\n                undefined,\n                [\n                    {\n                        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n                        'Amount@odata.type': '#Decimal',\n                        Amount: 100,\n                        CardTypeId: 'VISA',\n                        Currency: 'USD',\n                        TenderTypeId: '3',\n                        TokenizedPaymentCard: {\n                            '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.TokenizedPaymentCard',\n                            CardTypeId: 'VISA',\n                            NameOnCard: 'John',\n                            Address1: undefined,\n                            Country: undefined,\n                            Phone: undefined,\n                            State: undefined,\n                            Zip: undefined,\n                            House: 'N/A',\n                            City: 'Seattle'\n                        }\n                    }\n                ],\n                mockCheckoutCart.Version\n            );\n        });\n\n        it('places order with loyalty card', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutStateWithCart,\n                    guestCheckoutEmail: mockReceiptEmail,\n                    loyaltyAmount: 300,\n                    tokenizedPaymentCard: null,\n                    giftCardExtends: []\n                })\n            );\n\n            // @ts-ignore: Using partial for testing\n            const salesOrder = await placeOrderAction(mockActionContext).catch(error => {\n                throw error;\n            });\n            expect(salesOrder).toEqual(mockSalesOrder);\n\n            expect(CartsDataActions.checkoutAsync).toBeCalledWith(\n                { callerContext: mockActionContext, bypassCache: 'get' },\n                mockCheckoutCart.Id,\n                mockReceiptEmail,\n                undefined,\n                undefined,\n                [\n                    {\n                        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n                        'Amount@odata.type': '#Decimal',\n                        Amount: 100,\n                        Currency: 'USD',\n                        LoyaltyCardId: 'ABC',\n                        TenderTypeId: '10'\n                    }\n                ],\n                mockCheckoutCart.Version\n            );\n        });\n\n        it('places order with gift card when gift card balance can cover the order total amount', async () => {\n            mockCheckoutStateWithCart = {\n                ...mockGiftCardCheckoutState,\n                // @ts-ignore: Using partial for testing\n                checkoutCart: {\n                    cart: mockCheckoutCart,\n                    updateLoyaltyCardId: jest.fn()\n                }\n            };\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutStateWithCart,\n                    guestCheckoutEmail: mockReceiptEmail,\n                    tokenizedPaymentCard: mockTokenizedPaymentCard,\n                    giftCardExtends: [mockGiftCardA, mockGiftCardB, mockGiftCardC]\n                })\n            );\n\n            // @ts-ignore: Using partial for testing\n            const salesOrder = await placeOrderAction(mockActionContext).catch(error => {\n                throw error;\n            });\n            expect(salesOrder).toEqual(mockSalesOrder);\n\n            expect(CartsDataActions.checkoutAsync).toBeCalledWith(\n                { callerContext: mockActionContext, bypassCache: 'get' },\n                mockCheckoutCart.Id,\n                mockReceiptEmail,\n                undefined,\n                undefined,\n                [\n                    {\n                        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n                        'Amount@odata.type': '#Decimal',\n                        Amount: 60,\n                        Currency: 'USD',\n                        GiftCardExpirationMonth: 10,\n                        GiftCardExpirationYear: 2020,\n                        GiftCardId: '123-456-111',\n                        GiftCardPin: '1111',\n                        TenderTypeId: '12'\n                    },\n                    {\n                        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n                        'Amount@odata.type': '#Decimal',\n                        Amount: 40,\n                        Currency: 'USD',\n                        GiftCardExpirationMonth: undefined,\n                        GiftCardExpirationYear: undefined,\n                        GiftCardId: '123-456-222',\n                        GiftCardPin: undefined,\n                        TenderTypeId: '8'\n                    }\n                ],\n                mockCheckoutCart.Version\n            );\n        });\n\n        it('places order with gift card and credit card when gift card balbance cannot cover the order total amount', async () => {\n            mockCheckoutStateWithCart = {\n                ...mockGiftCardCheckoutState,\n                // @ts-ignore: Using partial for testing\n                checkoutCart: {\n                    cart: mockCheckoutCart,\n                    updateLoyaltyCardId: jest.fn()\n                }\n            };\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutStateWithCart,\n                    guestCheckoutEmail: mockReceiptEmail,\n                    tokenizedPaymentCard: mockTokenizedPaymentCard,\n                    giftCardExtends: [mockGiftCardA]\n                })\n            );\n\n            // @ts-ignore: Using partial for testing\n            const salesOrder = await placeOrderAction(mockActionContext).catch(error => {\n                throw error;\n            });\n            expect(salesOrder).toEqual(mockSalesOrder);\n\n            expect(CartsDataActions.checkoutAsync).toBeCalledWith(\n                { callerContext: mockActionContext, bypassCache: 'get' },\n                mockCheckoutCart.Id,\n                mockReceiptEmail,\n                undefined,\n                undefined,\n                [\n                    {\n                        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n                        'Amount@odata.type': '#Decimal',\n                        Amount: 60,\n                        Currency: 'USD',\n                        GiftCardExpirationMonth: 10,\n                        GiftCardExpirationYear: 2020,\n                        GiftCardId: '123-456-111',\n                        GiftCardPin: '1111',\n                        TenderTypeId: '12'\n                    },\n                    {\n                        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n                        'Amount@odata.type': '#Decimal',\n                        Amount: 40,\n                        CardTypeId: 'VISA',\n                        Currency: 'USD',\n                        TenderTypeId: '3',\n                        TokenizedPaymentCard: {\n                            '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.TokenizedPaymentCard',\n                            CardTypeId: 'VISA',\n                            NameOnCard: 'John',\n                            House: 'N/A',\n                            Address1: undefined,\n                            Country: undefined,\n                            Phone: undefined,\n                            State: undefined,\n                            Zip: undefined,\n                            City: 'Seattle'\n                        }\n                    }\n                ],\n                mockCheckoutCart.Version\n            );\n        });\n\n        it('place order without payment method when amount due is 0', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutState,\n                    guestCheckoutEmail: mockReceiptEmail,\n                    checkoutCart: {\n                        cart: mockCheckoutCartWithFreeItem\n                    }\n                })\n            );\n\n            // @ts-ignore: Using partial for testing\n            const salesOrder = await placeOrderAction(mockActionContext).catch(error => {\n                throw error;\n            });\n            expect(salesOrder).toEqual(mockSalesOrder);\n\n            expect(CartsDataActions.checkoutAsync).toBeCalledWith(\n                { callerContext: mockActionContext, bypassCache: 'get' },\n                mockCheckoutCartWithFreeItem.Id,\n                mockReceiptEmail,\n                undefined,\n                undefined,\n                null,\n                mockCheckoutCartWithFreeItem.Version\n            );\n        });\n\n        it('place order without payment method when amount due is 0 and payment method is provided', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutState,\n                    guestCheckoutEmail: mockReceiptEmail,\n                    tokenizedPaymentCard: mockTokenizedPaymentCard,\n                    giftCardExtends: [mockGiftCardA],\n                    checkoutCart: {\n                        cart: mockCheckoutCartWithFreeItem\n                    }\n                })\n            );\n\n            // @ts-ignore: Using partial for testing\n            const salesOrder = await placeOrderAction(mockActionContext).catch(error => {\n                throw error;\n            });\n            expect(salesOrder).toEqual(mockSalesOrder);\n\n            expect(CartsDataActions.checkoutAsync).toBeCalledWith(\n                { callerContext: mockActionContext, bypassCache: 'get' },\n                mockCheckoutCartWithFreeItem.Id,\n                mockReceiptEmail,\n                undefined,\n                undefined,\n                null,\n                mockCheckoutCartWithFreeItem.Version\n            );\n        });\n\n        it('throw error when no tokenizedPaymentCard provided', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutStateWithCart,\n                    tokenizedPaymentCard: null\n                })\n            );\n\n            // @ts-ignore: Using partial for testing\n            const salesOrder = await placeOrderAction(mockActionContext).catch(error => {\n                expect(error).toBeDefined();\n            });\n        });\n\n        it('throw error when no tokenizedPaymentCard provided', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutStateWithCart,\n                    tokenizedPaymentCard: null\n                })\n            );\n\n            // @ts-ignore: Using partial for testing\n            await placeOrderAction(mockActionContext).catch(error => {\n                expect(error).toBeDefined();\n            });\n        });\n\n        it('throw error when checkout fail', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            GlobalStateActions.getCheckoutState.mockImplementation(() =>\n                Promise.resolve({\n                    ...mockCheckoutStateWithCart,\n                    guestCheckoutEmail: mockReceiptEmail,\n                    tokenizedPaymentCard: mockTokenizedPaymentCard\n                })\n            );\n\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            CartsDataActions.checkoutAsync.mockImplementation(async () => {\n                throw new Error();\n            });\n\n            // @ts-ignore: Using partial for testing\n            await placeOrderAction(mockActionContext).catch(error => {\n                expect(error).toBeDefined();\n            });\n        });\n\n        afterEach(() => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            OrgUnitsDataActions.getOrgUnitConfigurationAsync.mockReset();\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            StoreOperationsDataActions.getCardTypesAsync.mockReset();\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            StoreOperationsDataActions.getTenderTypesAsync.mockReset();\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            CartsDataActions.checkoutAsync.mockReset();\n        });\n\n        afterAll(() => {\n            jest.unmock('@msdyn365-commerce/global-state');\n            jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g');\n            jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');\n            jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n        });\n    });\n});\n"]}