import * as retailActions from '@msdyn365-commerce-modules/retail-actions';
import * as globalState from '@msdyn365-commerce/global-state';
import { ActiveCheckoutCartProductsInput, createInput, getActiveCheckoutCartProductsAction } from '../../actions/get-products-in-active-checkout-cart';
jest.mock('@msdyn365-commerce/global-state');
jest.mock('@msdyn365-commerce-modules/retail-actions');
let mockCheckoutState = {};
let mockProduct = {};
let mockProducts = {};
let mockActionContext = {};
describe('Checkout unit tests - getActiveCheckoutCartProductsAction', () => {
    beforeEach(() => {
        mockCheckoutState = {
            checkoutCart: {
                cart: {
                    Id: 'cart_1',
                    CartLines: [
                        {
                            LineId: 'line_1',
                            ProductId: 'p_1'
                        },
                        {
                            LineId: 'line_2'
                        }
                    ]
                }
            }
        };
        mockProduct = {
            RecordId: 'p_1'
        };
        mockProducts = [mockProduct];
        mockActionContext = {
            telemetry: {
                exception: jest.fn()
            },
            requestContext: {
                apiSettings: {}
            }
        };
        globalState.getCheckoutState = jest.fn(() => new Promise((resolve, reject) => resolve(mockCheckoutState)));
        retailActions.getSimpleProducts = jest.fn(() => new Promise((resolve, reject) => resolve(mockProducts)));
    });
    afterEach(() => {
        jest.resetAllMocks();
    });
    afterAll(() => {
        jest.unmock('@msdyn365-commerce/global-state');
        jest.unmock('@msdyn365-commerce-modules/retail-actions');
    });
    it('creates input', () => {
        const input = new ActiveCheckoutCartProductsInput();
        expect(input.getCacheKey()).toBe('ActiveCheckoutCartProducts');
        expect(input.getCacheObjectType()).toBe('ActiveCheckoutCartProducts');
        expect(input.dataCacheType()).toBe('none');
    });
    it('creates input', () => {
        const input = createInput();
        expect(input.getCacheKey()).toBe('ActiveCheckoutCartProducts');
        expect(input.getCacheObjectType()).toBe('ActiveCheckoutCartProducts');
        expect(input.dataCacheType()).toBe('none');
    });
    it('gets products', async () => {
        await getActiveCheckoutCartProductsAction(new ActiveCheckoutCartProductsInput(), mockActionContext).then(data => {
            expect(data).toMatchObject(mockProducts);
        });
    });
    it('cannot find valid cart', async () => {
        mockCheckoutState = {
            checkoutCart: {}
        };
        globalState.getCheckoutState = jest.fn(() => new Promise((resolve, reject) => resolve(mockCheckoutState)));
        await getActiveCheckoutCartProductsAction(new ActiveCheckoutCartProductsInput(), mockActionContext).then(data => {
            expect(data).toMatchObject([]);
        });
    });
    it('handles empty cart', async () => {
        mockCheckoutState = {
            checkoutCart: {
                cart: {
                    Id: 'cart_1',
                    CartLines: []
                }
            }
        };
        globalState.getCheckoutState = jest.fn(() => new Promise((resolve, reject) => resolve(mockCheckoutState)));
        await getActiveCheckoutCartProductsAction(new ActiveCheckoutCartProductsInput(), mockActionContext).then(data => {
            expect(data).toMatchObject([]);
        });
    });
    it('cannot find product', async () => {
        retailActions.getSimpleProducts = jest.fn(() => new Promise((resolve, reject) => resolve(null)));
        await getActiveCheckoutCartProductsAction(new ActiveCheckoutCartProductsInput(), mockActionContext).then(data => {
            expect(data).toMatchObject([]);
        });
    });
    it('throws error with invalid input', async () => {
        try {
            await getActiveCheckoutCartProductsAction(null, mockActionContext);
        }
        catch (e) {
            expect(e).toBeDefined();
        }
    });
    it('handles error from getSimpleProducts', async () => {
        retailActions.getSimpleProducts = jest.fn(() => new Promise((resolve, reject) => reject('error')));
        try {
            await getActiveCheckoutCartProductsAction(new ActiveCheckoutCartProductsInput(), mockActionContext);
        }
        catch (e) {
            expect(e).toBeDefined();
        }
    });
});
//# sourceMappingURL=get-products-in-active-cart.test.js.map