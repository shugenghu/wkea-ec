import { __decorate } from "tslib";
import { withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import classname from 'classnames';
import get from 'lodash/get';
import { reaction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import LoadingComponent from './components/loading';
let CheckoutPlainContainer = class CheckoutPlainContainer extends React.Component {
    constructor() {
        super(...arguments);
        this.getItems = () => {
            const { slots } = this.props;
            return (slots && slots.primary && slots.primary.length && slots.primary) || [];
        };
        this.getActiveChildModuleStates = () => {
            const { childIds, getModule } = this.props.moduleState;
            return childIds
                .map(getModule)
                .filter((state) => !!state && !state.isDisabled && state.hasModuleState);
        };
        this.clearError = () => {
            this.getActiveChildModuleStates().forEach(state => {
                state.hasError && state.setHasError(false);
            });
        };
        this.onSubmit = () => {
            this.clearError();
            this.getActiveChildModuleStates().forEach(state => {
                !state.isReady && state.onSubmit && state.onSubmit();
            });
        };
        this.onCancel = () => {
            this.clearError();
            this.getActiveChildModuleStates().forEach(state => {
                !state.isReady && state.onCancel && state.onCancel();
            });
        };
        this.onEdit = () => {
            this.getActiveChildModuleStates().forEach(state => {
                (state.isReady || state.isSkipped) && state.onEdit && state.onEdit();
            });
        };
        this.onContainerReady = () => {
            this.getActiveChildModuleStates().forEach(state => {
                state.isReady && state.onContainerReady && state.onContainerReady();
            });
        };
    }
    componentDidMount() {
        const items = this.getItems();
        const childIds = items.map((item) => get(item, 'props.id'));
        this.props.moduleState.init({
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onSubmit: this.onSubmit,
            childIds
        });
        reaction(() => this.props.moduleState.isReady, () => {
            this.onContainerReady();
        });
        reaction(() => this.props.moduleState.shouldSubmitContainer, () => {
            this.onSubmit();
        });
    }
    componentDidUpdate() {
        if (!this.props.moduleState.hasExternalSubmitGroup) {
            return;
        }
        const { childIds, hasError, getModule } = this.props.moduleState;
        const hasReadyItems = childIds.some((childId) => {
            const state = getModule(childId);
            return !!state && state.isReady;
        });
        if (hasReadyItems && hasError) {
            this.onEdit();
        }
    }
    render() {
        const { enableControl, moduleState, config: { width } } = this.props;
        const items = this.getItems();
        if (!items.length) {
            this.props.context.telemetry.error('Checkout section content is empty, module wont render');
            return null;
        }
        const moduleClassName = classname('ms-checkout-section-container', {
            'has-initialized': moduleState.hasInitialized,
            'is-ready': moduleState.isReady,
            'is-updating': !moduleState.isReady,
            container: width === 'container',
            'col-12 fullwidth': width === 'fluid'
        }, this.props.config.className);
        const viewProps = {
            ...this.props,
            className: moduleClassName,
            checkoutPlainContainerProps: {
                moduleProps: this.props,
                className: moduleClassName
            },
            items: items.map((item) => {
                const childId = get(item, 'props.id');
                const state = moduleState.getModule(childId);
                const hidden = state.hasModuleState && (!state.hasInitialized || state.isDisabled || state.isSkipped);
                return {
                    id: childId,
                    loading: state.hasModuleState && !state.hasInitialized && React.createElement(LoadingComponent, null),
                    itemProps: {
                        'data-type-name': state.typeName,
                        className: classname('ms-checkout-section-container__item', {
                            hidden: hidden,
                            initialized: state.hasInitialized,
                            disabled: state.isDisabled,
                            skipped: state.isSkipped,
                            ready: state.isReady,
                            updating: state.isUpdating,
                            pending: state.isPending
                        })
                    },
                    item: React.cloneElement(item, { enableControl })
                };
            })
        };
        return this.props.renderView(viewProps);
    }
};
CheckoutPlainContainer = __decorate([
    observer
], CheckoutPlainContainer);
export { CheckoutPlainContainer };
export default withModuleState(CheckoutPlainContainer);
//# sourceMappingURL=checkout-section-container.js.map