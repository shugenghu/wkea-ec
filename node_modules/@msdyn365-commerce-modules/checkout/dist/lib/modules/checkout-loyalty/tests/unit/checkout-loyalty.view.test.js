import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import CheckoutLoyaltyView from '../../checkout-loyalty.view';
const moduleProps = buildMockModuleProps({}, {});
const mockProps = {
    ...moduleProps,
    viewState: {
        isShowLoyalty: false,
        isShowAddLoyalty: false
    },
    checkoutLoyalty: { moduleProps, className: 'mock-module' },
    showLoyalty: {
        heading: '{heading}',
        coveredAmountText: '{coveredAmountText}',
        amount: '{amount}'
    },
    addLoyalty: {
        heading: '{heading}',
        drawer: {
            className: `mock-module__drawer`,
        },
        cardNumber: '{cardNumber}',
        coveredAmountText: '{coveredAmountText}',
        coveredAmount: '{coveredAmount}',
        rewardPoints: [
            {
                key: '1',
                checkoutLoyaltyRewardPoint: {
                    className: 'mock-module__program'
                },
                title: '{title}',
                availablePointsText: '{availablePointsText}',
                activePoints: '{activePoints}',
                expiringPointsText: '{expiringPointsText}',
                expiringPoints: '{expiringPoints}',
            }
        ],
        appliedLoyaltyAmountContainer: {
            className: 'mock-module__applied-amount'
        },
        loyaltyAmountContainer: {
            className: 'mock-module__amount'
        },
        loyaltyAmountLabel: '{loyaltyAmountLabel}',
        loyaltyAmountInput: '{loyaltyAmountInput}',
        loyaltyAmountApplyButton: '{loyaltyAmountApplyButton}',
        showAppliedAmount: false,
        loyaltyAmountAppliedText: '{loyaltyAmountAppliedText}',
        loyaltyAmountAppliedPrice: '{loyaltyAmountAppliedPrice}',
        loyaltyAmountRemoveButton: '{loyaltyAmountRemoveButton}'
    }
};
describe('CheckoutLoyalty unit tests - View', () => {
    it('renders correctly', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isShowLoyalty = true;
        const newProps = { ...mockProps, ...{ viewState } };
        const component = render(React.createElement(CheckoutLoyaltyView, Object.assign({}, newProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders add loyalty', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isShowAddLoyalty = true;
        const newProps = { ...mockProps, ...{ viewState } };
        const component = render(React.createElement(CheckoutLoyaltyView, Object.assign({}, newProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders add loyalty without applied amount', () => {
        const addLoyalty = { ...mockProps.addLoyalty };
        addLoyalty.showAppliedAmount = true;
        const newProps = { ...mockProps, ...{ addLoyalty } };
        const component = render(React.createElement(CheckoutLoyaltyView, Object.assign({}, newProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=checkout-loyalty.view.test.js.map