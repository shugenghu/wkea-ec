import { Alert, Button } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';
export const getForm = (options) => {
    const { errorMessage, inputRef, inputPinRef, inputExpRef, giftCardNumber, giftCardPin, giftCardExp, onEnterGiftCardNumber, onEnterGiftCardPin, onEnterGiftCardExp, onApplyGiftCard, supportExternalGiftCard, additionalFields, resources: { applyGiftCardButton, giftCardFormLabel, giftCardNumberLabel, giftCardPinLabel, giftCardExpLabel, giftCardAlertLabel, giftCardPinPlaceholderText, giftCardExpPlaceholderText } } = options;
    const onApply = async (e) => {
        e.preventDefault();
        await onApplyGiftCard();
    };
    const onChangeNumber = (e) => {
        const value = (e.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
        onEnterGiftCardNumber(value);
    };
    const onChangePin = (e) => {
        const value = (e.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
        onEnterGiftCardPin(value);
    };
    const onChangeExp = (e) => {
        const value = (e.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
        onEnterGiftCardExp(value);
    };
    const formProps = {
        className: classnames('ms-checkout-gift-card__form', { 'is-invalid': !!errorMessage }),
        onSubmit: onApply,
        tag: 'form'
    };
    const label = (React.createElement("label", { id: 'ms-checkout-gift-card__label', className: 'ms-checkout-gift-card__input-label' }, giftCardFormLabel));
    const inputPinLabel = (React.createElement("label", { id: 'ms-checkout-gift-card__input-pin-label', className: 'ms-checkout-gift-card__input-pin-label' }, giftCardPinLabel));
    const inputExpLabel = (React.createElement("label", { id: 'ms-checkout-gift-card__input-exp-label', className: 'ms-checkout-gift-card__input-exp-label' }, giftCardExpLabel));
    const alertFieldLabel = (React.createElement("label", { id: 'ms-checkout-gift-card__input-alert', className: 'ms-checkout-gift-card__input-alert-label' }, giftCardAlertLabel));
    const alert = (React.createElement(Alert, { tag: 'span', id: 'ms-checkout-gift-card__error', className: 'ms-checkout-gift-card__input-error', role: 'alert', assertive: false, fade: false, includeAlertClass: false, isOpen: !!errorMessage }, errorMessage));
    const inputProps = {
        className: 'ms-checkout-gift-card__input-fields'
    };
    const inputNumProps = {
        className: 'ms-checkout-gift-card__input-num-fields'
    };
    const inputPinProps = {
        className: 'ms-checkout-gift-card__input-pin-fields'
    };
    const inputExpProps = {
        className: 'ms-checkout-gift-card__input-exp-fields'
    };
    const inputNumber = (React.createElement("input", { ref: inputRef, type: 'text', className: 'ms-checkout-gift-card__input-text form-control', "aria-label": giftCardNumberLabel, onChange: onChangeNumber, value: giftCardNumber, "aria-labelledby": 'ms-checkout-gift-card__label ms-checkout-gift-card__error' }));
    const inputPin = (React.createElement("input", { ref: inputPinRef, type: 'text', className: 'ms-checkout-gift-card__input-pin-text form-contol', "aria-label": giftCardPinLabel, placeholder: giftCardPinPlaceholderText, onChange: onChangePin, value: giftCardPin, "aria-labelledby": 'ms-checkout-gift-card__label ms-checkout-gift-card__error' }));
    const inputExp = (React.createElement("input", { ref: inputExpRef, type: 'text', className: 'ms-checkout-gift-card__input-exp-text form-contol', "aria-label": giftCardExpLabel, placeholder: giftCardExpPlaceholderText, onChange: onChangeExp, value: giftCardExp, "aria-labelledby": 'ms-checkout-gift-card__label ms-checkout-gift-card__error' }));
    const applyButton = (React.createElement(Button, { className: 'ms-checkout-gift-card__btn-apply', onClick: onApply, "aria-label": applyGiftCardButton, disabled: !giftCardNumber }, applyGiftCardButton));
    let showGiftCardPinInput = false;
    let showGiftCardExpInput = false;
    switch (additionalFields) {
        case "pin":
            showGiftCardPinInput = true;
            break;
        case "expirationDate":
            showGiftCardExpInput = true;
            break;
        case "pinAndExpirationDate":
            showGiftCardPinInput = true;
            showGiftCardExpInput = true;
            break;
        default:
    }
    return {
        formProps,
        label,
        inputPinLabel,
        inputExpLabel,
        alert,
        inputProps,
        inputNumProps,
        inputPinProps,
        inputExpProps,
        inputNumber,
        inputPin,
        inputExp,
        applyButton,
        supportExternalGiftCard,
        showGiftCardPinInput,
        showGiftCardExpInput,
        alertFieldLabel
    };
};
//# sourceMappingURL=get-form.js.map