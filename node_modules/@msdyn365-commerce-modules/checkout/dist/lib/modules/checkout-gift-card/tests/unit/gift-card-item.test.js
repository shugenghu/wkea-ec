import { shallow } from 'enzyme';
import * as React from 'react';
import { SelectedGiftCard as GiftCardItem } from '../../checkout-gift-card.view';
import { getItem } from '../../components/get-item';
import { mockGiftCard1, mockResources } from '../__mock__';
const mockData = {
    giftCard: mockGiftCard1,
    canRemove: true,
    getFormattedPrice: jest.fn(() => '$100'),
    onRemoveGiftCard: jest.fn(),
    resources: mockResources
};
describe('CheckoutGiftCard unit tests - GiftCardItem', () => {
    it('renders correctly it can remove gift card', () => {
        const mockProps = getItem({
            ...mockData,
            canRemove: true
        });
        const component = shallow(React.createElement(GiftCardItem, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
        const button = component.find('.ms-checkout-gift-card__btn-remove');
        button.simulate('click');
        expect(mockData.onRemoveGiftCard).toBeCalled();
    });
    it('renders correctly when it cannot remove gift card', () => {
        const mockProps = getItem({
            ...mockData,
            canRemove: false
        });
        const component = shallow(React.createElement(GiftCardItem, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('can handle Id undefined', () => {
        const mockProps = getItem({
            ...mockData,
            giftCard: {
                ...mockGiftCard1,
                Id: undefined
            },
            canRemove: false
        });
        expect(() => shallow(React.createElement(GiftCardItem, Object.assign({}, mockProps)))).not.toThrow();
    });
});
//# sourceMappingURL=gift-card-item.test.js.map