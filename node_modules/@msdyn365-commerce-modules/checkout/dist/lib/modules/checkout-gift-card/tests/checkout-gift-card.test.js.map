{"version":3,"file":"checkout-gift-card.test.js","sourceRoot":"./src/","sources":["modules/checkout-gift-card/tests/checkout-gift-card.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mount, render, shallow } from 'enzyme';\n// tslint:disable-next-line:no-unused-variable\nimport * as React from 'react';\n\nimport {\n    buildHydratedMockActionContext,\n    buildMockModuleProps,\n    IActionContext,\n    IAny,\n    ICoreContext,\n    IGeneric\n} from '@msdyn365-commerce/core';\nimport { ICheckoutState, IGiftCardExtend } from '@msdyn365-commerce/global-state';\nimport { AsyncResult, CardTypeInfo, Cart } from '@msdyn365-commerce/retail-proxy';\nimport * as StoreOperationsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport { TenderType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport CheckoutGiftCard, { CheckoutGiftCard as CheckoutGiftCardClass, ICheckoutGiftCardModuleProps } from '../checkout-gift-card';\nimport { ICheckoutGiftCardData } from '../checkout-gift-card.data';\nimport { ICheckoutGiftCardConfig, ICheckoutGiftCardResources, showAdditionalFields } from '../checkout-gift-card.props.autogenerated';\nimport View from '../checkout-gift-card.view';\n\njest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');\n\nlet mockCart: Cart;\nlet mockGiftCardTypes: CardTypeInfo[];\nlet mockGiftCard1: IGiftCardExtend;\nlet mockGiftCard2: IGiftCardExtend;\nlet mockGiftCardEmpty: IGiftCardExtend;\nlet mockData: ICheckoutGiftCardData;\nlet mockConfig: ICheckoutGiftCardConfig;\nlet mockContext: ICoreContext;\nlet mockActions: IGeneric<IAny>;\nlet actionContext: IActionContext;\nlet mockResources: ICheckoutGiftCardResources;\nlet mockTenderTypes: TenderType[];\n\ndescribe('CheckoutGiftCard', () => {\n    // tslint:disable-next-line:max-func-body-length\n    beforeEach(() => {\n        mockCart = {\n            Id: '123',\n            TotalAmount: 500\n        };\n\n        mockGiftCardTypes = [\n            {\n                IsPinRequired: false,\n                IsExpirationDateRequired: false,\n                PaymentMethodId: '13'\n            }\n        ];\n\n        mockGiftCard1 = {\n            Id: 'abc',\n            Balance: 100,\n            BalanceCurrencyCode: 'USD',\n            BalanceInCardCurrency: 100,\n            CardCurrencyCode: 'USD'\n        };\n\n        mockGiftCard2 = {\n            Id: 'efg',\n            Balance: 100,\n            BalanceCurrencyCode: 'USD',\n            BalanceInCardCurrency: 100,\n            CardCurrencyCode: 'USD'\n        };\n\n        mockGiftCardEmpty = {\n            Id: 'empty',\n            Balance: 0,\n            BalanceCurrencyCode: 'USD',\n            BalanceInCardCurrency: 0,\n            CardCurrencyCode: 'USD'\n        };\n\n        mockData = {\n            // @ts-ignore impartial mock\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    // @ts-ignore impartial mock\n                    checkoutCart: {\n                        cart: mockCart\n                    },\n                    giftCardExtends: [],\n                    addGiftCard: input => {\n                        // @ts-ignore impartial mock\n                        mockData.checkout.result.giftCardExtends = [input.giftCard, ...mockData.checkout.result.giftCardExtends];\n                    },\n                    updateTenderLine: input => {\n                        // @ts-ignore impartial mock\n                        mockData.checkout.result?.tenderLine = {TenderTypeId: '8'};\n                    },\n                    removeGiftCard: input => {\n                        // @ts-ignore impartial mock\n                        mockData.checkout.result.giftCardExtends = mockData.checkout.result.giftCardExtends.filter(\n                            giftCard => giftCard.Id !== input.giftCardNumber\n                        );\n                    },\n                    loyaltyAmount: 0\n                }\n            } as AsyncResult<ICheckoutState>\n        };\n\n        mockActions = {};\n\n        actionContext = buildHydratedMockActionContext();\n\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'internal'\n                }\n            }\n        };\n\n        mockConfig = {\n            showAdditionalFields: undefined\n        };\n\n        mockResources = {\n            emptyInputError: 'Please enterd a gift card number',\n            invalidCodeError: 'Invalid gift card code entered',\n            invalidCardInfoError: 'Invalid gift card information entered',\n            invalidCardTypeError: 'The gift card type is not suported',\n            noCardPinError: 'Gift card PIN is required',\n            noCardExpError: 'Gift card expiration date is required',\n            duplicatedCodeError: 'You already entered this gift card',\n            noBalanceError: 'Gift card has no balance left',\n            giftCardFormLabel: 'Gift card',\n            giftCardNumberLabel: 'Gift card number',\n            giftCardPinLabel: 'PIN',\n            giftCardExpLabel: 'Expiration date',\n            giftCardAlertLabel: 'You gift card may or may not include these fields',\n            removeGiftCardButton: 'Remove',\n            applyGiftCardButton: 'Apply',\n            enteredGiftCardLabel: 'Gift card ending in',\n            giftCardAvailableBalanceLabel: 'Available balance',\n            giftCardPinPlaceholderText: 'PIN',\n            giftCardExpPlaceholderText: 'MM/YYYY'\n        };\n\n        mockTenderTypes = [\n            {\n                OperationId: 214,\n                ConnectorId: 'Adyen',\n                TenderTypeId: '12'\n            },\n            {\n                OperationId: 214,\n                ConnectorId: '',\n                TenderTypeId: '13'\n            },\n            {\n                OperationId: 214,\n                ConnectorId: '',\n                TenderTypeId: '8'\n            },\n        ] as TenderType[];\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {\n            return Promise.resolve(mockGiftCardTypes);\n        });\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.getGiftCardAsync.mockImplementation((context, id, typeId, pin, month, year) => {\n            if (id === 'abc') {\n                return Promise.resolve(mockGiftCard1);\n            } else if (id === 'empty') {\n                return Promise.resolve(mockGiftCardEmpty);\n            }\n            return Promise.reject(new Error('Not found'));\n        });\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.getTenderTypesAsync.mockImplementation(async () => mockTenderTypes);\n    });\n\n    it('renders correctly for auth user', () => {\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<CheckoutGiftCard {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly for auth user with app setting support internal', () => {\n        const mockConfigExternalGiftCard = {\n            showAdditionalFields: showAdditionalFields.pinAndExpirationDate\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfigExternalGiftCard, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<CheckoutGiftCard {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly for auth user with app setting support external', () => {\n        const mockConfigExternalGiftCard = {\n            showAdditionalFields: showAdditionalFields.pinAndExpirationDate\n        };\n\n        mockContext = {\n            actionContext,\n            // @ts-ignore: Don't throw even though requestContext type is not correct\n            request: {\n                market: 'AB',\n                // @ts-ignore: optOutWebActivityTracking should not be required\n                user: {\n                    isAuthenticated: true,\n                    token: 'xxx'\n                }\n            },\n            // @ts-ignore: Using partial for testing\n            cultureFormatter: {\n                formatCurrency: jest.fn(price => `$${price}`)\n            },\n            app: {\n                config: {\n                    giftCardSupported: 'external'\n                }\n            }\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfigExternalGiftCard, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<CheckoutGiftCard {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly for guest user', () => {\n        mockContext.request.user.isAuthenticated = false;\n        mockContext.request.user.token = '';\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<CheckoutGiftCard {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with free cart', () => {\n        mockData = {\n            // @ts-ignore impartial mock\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    // @ts-ignore impartial mock\n                    checkoutCart: {\n                        cart: {\n                            Id: '123',\n                            TotalAmount: 0\n                        }\n                    }\n                }\n            } as AsyncResult<ICheckoutState>\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<CheckoutGiftCard {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with loyalty points', () => {\n        mockData = {\n            // @ts-ignore impartial mock\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    // @ts-ignore impartial mock\n                    checkoutCart: {\n                        cart: {\n                            Id: '123',\n                            TotalAmount: 100\n                        }\n                    },\n                    loyaltyAmount: 100\n                }\n            } as AsyncResult<ICheckoutState>\n        };\n\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<CheckoutGiftCard {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with gift cards entered', () => {\n        const mockDataWithGiftCards: ICheckoutGiftCardData = {\n            // @ts-ignore impartial mock\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: mockCart\n                    },\n                    giftCardExtends: [mockGiftCard1, mockGiftCard2]\n                }\n            } as AsyncResult<ICheckoutState>\n        };\n        const moduleProps = {\n            ...(buildMockModuleProps(mockDataWithGiftCards, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = render(<CheckoutGiftCard {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('disables the apply button when input is empty', () => {\n        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));\n        const button = component.find('button.ms-checkout-gift-card__btn-apply');\n        expect(button.is('[disabled]')).toBe(true);\n    });\n\n    it('renders correctly when ready', () => {\n        const mockDataWithGiftCards: ICheckoutGiftCardData = {\n            // @ts-ignore impartial mock\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: mockCart\n                    },\n                    giftCardExtends: [mockGiftCard1, mockGiftCard2]\n                }\n            } as AsyncResult<ICheckoutState>\n        };\n        const moduleProps = {\n            ...(buildMockModuleProps(mockDataWithGiftCards, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View,\n            moduleState: {\n                isReady: true,\n                init: jest.fn()\n            }\n        };\n        // @ts-ignore\n        const component = render(<CheckoutGiftCardClass {...moduleProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('shows error when apply an invalid gift card number', async () => {\n        // @ts-ignore: mockContext\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'xxx';\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));\n        const button = component.find('button.ms-checkout-gift-card__btn-apply');\n        const input = component.find('input.ms-checkout-gift-card__input-text');\n\n        // And apply 'abc'\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        button.simulate('click');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe(mockResources.invalidCardInfoError);\n                // unmount after complete state update\n                component.unmount();\n            });\n    });\n\n    it('shows error when apply a duplicate gift card number', () => {\n        const mockDataWithGiftCard: ICheckoutGiftCardData = {\n            // @ts-ignore impartial mock\n            checkout: {\n                status: 'SUCCESS',\n                result: {\n                    checkoutCart: {\n                        cart: mockCart\n                    },\n                    giftCardExtends: [mockGiftCard1]\n                }\n            } as AsyncResult<ICheckoutState>\n        };\n        const moduleProps = {\n            ...(buildMockModuleProps(\n                mockDataWithGiftCard,\n                mockActions,\n                mockConfig,\n                // @ts-ignore: mockContext\n                mockContext\n            ) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n\n        const giftCardNumber = 'abc';\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));\n        const button = component.find('button.ms-checkout-gift-card__btn-apply');\n        const input = component.find('input.ms-checkout-gift-card__input-text');\n\n        // And apply 'abc'\n        input.simulate('change', {\n            target: { value: giftCardNumber }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        button.simulate('click');\n\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        expect(component.state('errorMessage')).toBe(mockResources.duplicatedCodeError);\n        expect(StoreOperationsDataActions.getTenderTypesAsync).not.toBeCalled();\n    });\n\n    // tslint:disable-next-line:max-func-body-length\n    it('shows error for empty input', async () => {\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));\n        const instance = component.instance();\n\n        // test empty input\n        // @ts-ignore\n        instance.applyGiftCard();\n        expect(component.state('errorMessage')).toBe('Please enterd a gift card number');\n    });\n\n    it('handles empty gift card', async () => {\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));\n        const button = component.find('button.ms-checkout-gift-card__btn-apply');\n        const input = component.find('input.ms-checkout-gift-card__input-text');\n\n        // test empty card\n        input.simulate('change', {\n            target: {\n                value: 'empty'\n            }\n        });\n        button.simulate('click');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('Gift card has no balance left');\n                component.unmount();\n            });\n    });\n\n    it('handles invalid gift card', async () => {\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));\n        const button = component.find('button.ms-checkout-gift-card__btn-apply');\n        const input = component.find('input.ms-checkout-gift-card__input-text');\n\n        // test invalid card\n        input.simulate('change', {\n            target: {\n                value: 'aaa'\n            }\n        });\n        button.simulate('click');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('Invalid gift card information entered');\n                component.unmount();\n            });\n    });\n\n    // tslint:disable-next-line:max-func-body-length\n    it('adds a gift card when enters an valid gift card', async () => {\n        const moduleProps = {\n            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),\n            resources: mockResources,\n            renderView: View\n        };\n        const giftCardNumber = 'abc';\n        // @ts-ignore\n        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));\n        const button = component.find('button.ms-checkout-gift-card__btn-apply');\n        const input = component.find('input.ms-checkout-gift-card__input-text');\n        const instance = component.instance();\n\n        // @ts-ignore cover function\n        instance.onSubmit();\n\n        // And apply 'abc'\n        input.simulate('change', {\n            target: {\n                value: giftCardNumber\n            }\n        });\n        expect(component.state('errorMessage')).toBe('');\n        expect(component.state('isFetchingGiftCard')).toBe(false);\n        expect(component.state('giftCardNumber')).toBe(giftCardNumber);\n        button.simulate('click');\n        expect(component.state('errorMessage')).toBe('');\n\n        return Promise.resolve(component)\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => Promise.resolve(component))\n            .then(() => {\n                component.update();\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n                expect(component.state('errorMessage')).toBe('');\n                expect(component.text()).toContain('abc');\n                const giftCardItem = component.find('.ms-checkout-gift-card__item-text');\n                expect(giftCardItem.length).toBe(1);\n\n                // @ts-ignore cover function\n                instance.onSubmit();\n                // @ts-ignore cover function\n                instance.onEdit();\n                // @ts-ignore cover function\n                instance.onCancel();\n\n                // test duplicated card\n                input.simulate('change', {\n                    target: {\n                        value: giftCardNumber\n                    }\n                });\n                button.simulate('click');\n                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();\n\n                expect(component.state('errorMessage')).toBe('You already entered this gift card');\n            })\n            .then(() => {\n                // test remove gift card\n                // @ts-ignore\n                const spy = jest.spyOn(instance, 'removeGiftCard');\n                const removeButton = component.find('button.ms-checkout-gift-card__btn-remove');\n                removeButton.simulate('click');\n\n                // force update\n                input.simulate('change', {\n                    target: {\n                        value: 'empty'\n                    }\n                });\n                component.update();\n                const noGiftCardItem = component.find('.ms-checkout-gift-card__item-text');\n                expect(noGiftCardItem.length).toBe(0);\n\n                component.unmount();\n            });\n    });\n\n    afterEach(() => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.getGiftCardAsync.mockReset();\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.getTenderTypesAsync.mockReset();\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        StoreOperationsDataActions.resolveCardTypesAsync.mockReset();\n    });\n\n    afterAll(() => {\n        jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');\n    });\n});\n"]}