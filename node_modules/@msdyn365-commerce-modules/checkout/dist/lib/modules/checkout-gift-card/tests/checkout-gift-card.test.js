import { mount, render, shallow } from 'enzyme';
import * as React from 'react';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import * as StoreOperationsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import CheckoutGiftCard, { CheckoutGiftCard as CheckoutGiftCardClass } from '../checkout-gift-card';
import View from '../checkout-gift-card.view';
jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');
let mockCart;
let mockGiftCardTypes;
let mockGiftCard1;
let mockGiftCard2;
let mockGiftCardEmpty;
let mockData;
let mockConfig;
let mockContext;
let mockActions;
let actionContext;
let mockResources;
let mockTenderTypes;
describe('CheckoutGiftCard', () => {
    beforeEach(() => {
        mockCart = {
            Id: '123',
            TotalAmount: 500
        };
        mockGiftCardTypes = [
            {
                IsPinRequired: false,
                IsExpirationDateRequired: false,
                PaymentMethodId: '13'
            }
        ];
        mockGiftCard1 = {
            Id: 'abc',
            Balance: 100,
            BalanceCurrencyCode: 'USD',
            BalanceInCardCurrency: 100,
            CardCurrencyCode: 'USD'
        };
        mockGiftCard2 = {
            Id: 'efg',
            Balance: 100,
            BalanceCurrencyCode: 'USD',
            BalanceInCardCurrency: 100,
            CardCurrencyCode: 'USD'
        };
        mockGiftCardEmpty = {
            Id: 'empty',
            Balance: 0,
            BalanceCurrencyCode: 'USD',
            BalanceInCardCurrency: 0,
            CardCurrencyCode: 'USD'
        };
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: mockCart
                    },
                    giftCardExtends: [],
                    addGiftCard: input => {
                        mockData.checkout.result.giftCardExtends = [input.giftCard, ...mockData.checkout.result.giftCardExtends];
                    },
                    updateTenderLine: input => {
                        mockData.checkout.result?.tenderLine = { TenderTypeId: '8' };
                    },
                    removeGiftCard: input => {
                        mockData.checkout.result.giftCardExtends = mockData.checkout.result.giftCardExtends.filter(giftCard => giftCard.Id !== input.giftCardNumber);
                    },
                    loyaltyAmount: 0
                }
            }
        };
        mockActions = {};
        actionContext = buildHydratedMockActionContext();
        mockContext = {
            actionContext,
            request: {
                market: 'AB',
                user: {
                    isAuthenticated: true,
                    token: 'xxx'
                }
            },
            cultureFormatter: {
                formatCurrency: jest.fn(price => `$${price}`)
            },
            app: {
                config: {
                    giftCardSupported: 'internal'
                }
            }
        };
        mockConfig = {
            showAdditionalFields: undefined
        };
        mockResources = {
            emptyInputError: 'Please enterd a gift card number',
            invalidCodeError: 'Invalid gift card code entered',
            invalidCardInfoError: 'Invalid gift card information entered',
            invalidCardTypeError: 'The gift card type is not suported',
            noCardPinError: 'Gift card PIN is required',
            noCardExpError: 'Gift card expiration date is required',
            duplicatedCodeError: 'You already entered this gift card',
            noBalanceError: 'Gift card has no balance left',
            giftCardFormLabel: 'Gift card',
            giftCardNumberLabel: 'Gift card number',
            giftCardPinLabel: 'PIN',
            giftCardExpLabel: 'Expiration date',
            giftCardAlertLabel: 'You gift card may or may not include these fields',
            removeGiftCardButton: 'Remove',
            applyGiftCardButton: 'Apply',
            enteredGiftCardLabel: 'Gift card ending in',
            giftCardAvailableBalanceLabel: 'Available balance',
            giftCardPinPlaceholderText: 'PIN',
            giftCardExpPlaceholderText: 'MM/YYYY'
        };
        mockTenderTypes = [
            {
                OperationId: 214,
                ConnectorId: 'Adyen',
                TenderTypeId: '12'
            },
            {
                OperationId: 214,
                ConnectorId: '',
                TenderTypeId: '13'
            },
            {
                OperationId: 214,
                ConnectorId: '',
                TenderTypeId: '8'
            },
        ];
        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {
            return Promise.resolve(mockGiftCardTypes);
        });
        StoreOperationsDataActions.getGiftCardAsync.mockImplementation((context, id, typeId, pin, month, year) => {
            if (id === 'abc') {
                return Promise.resolve(mockGiftCard1);
            }
            else if (id === 'empty') {
                return Promise.resolve(mockGiftCardEmpty);
            }
            return Promise.reject(new Error('Not found'));
        });
        StoreOperationsDataActions.getTenderTypesAsync.mockImplementation(async () => mockTenderTypes);
    });
    it('renders correctly for auth user', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = render(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly for auth user with app setting support internal', () => {
        const mockConfigExternalGiftCard = {
            showAdditionalFields: "pinAndExpirationDate"
        };
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfigExternalGiftCard, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = render(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly for auth user with app setting support external', () => {
        const mockConfigExternalGiftCard = {
            showAdditionalFields: "pinAndExpirationDate"
        };
        mockContext = {
            actionContext,
            request: {
                market: 'AB',
                user: {
                    isAuthenticated: true,
                    token: 'xxx'
                }
            },
            cultureFormatter: {
                formatCurrency: jest.fn(price => `$${price}`)
            },
            app: {
                config: {
                    giftCardSupported: 'external'
                }
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfigExternalGiftCard, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = render(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly for guest user', () => {
        mockContext.request.user.isAuthenticated = false;
        mockContext.request.user.token = '';
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = render(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with free cart', () => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: {
                            Id: '123',
                            TotalAmount: 0
                        }
                    }
                }
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = render(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with loyalty points', () => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: {
                            Id: '123',
                            TotalAmount: 100
                        }
                    },
                    loyaltyAmount: 100
                }
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = render(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with gift cards entered', () => {
        const mockDataWithGiftCards = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: mockCart
                    },
                    giftCardExtends: [mockGiftCard1, mockGiftCard2]
                }
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockDataWithGiftCards, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = render(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('disables the apply button when input is empty', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = mount(shallow(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps))).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        expect(button.is('[disabled]')).toBe(true);
    });
    it('renders correctly when ready', () => {
        const mockDataWithGiftCards = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: mockCart
                    },
                    giftCardExtends: [mockGiftCard1, mockGiftCard2]
                }
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockDataWithGiftCards, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View,
            moduleState: {
                isReady: true,
                init: jest.fn()
            }
        };
        const component = render(React.createElement(CheckoutGiftCardClass, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('shows error when apply an invalid gift card number', async () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const giftCardNumber = 'xxx';
        const component = mount(shallow(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps))).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');
        input.simulate('change', {
            target: {
                value: giftCardNumber
            }
        });
        expect(component.state('errorMessage')).toBe('');
        expect(component.state('giftCardNumber')).toBe(giftCardNumber);
        button.simulate('click');
        return Promise.resolve(component)
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => {
            expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
            expect(component.state('errorMessage')).toBe(mockResources.invalidCardInfoError);
            component.unmount();
        });
    });
    it('shows error when apply a duplicate gift card number', () => {
        const mockDataWithGiftCard = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: mockCart
                    },
                    giftCardExtends: [mockGiftCard1]
                }
            }
        };
        const moduleProps = {
            ...buildMockModuleProps(mockDataWithGiftCard, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const giftCardNumber = 'abc';
        const component = mount(shallow(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps))).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');
        input.simulate('change', {
            target: { value: giftCardNumber }
        });
        expect(component.state('errorMessage')).toBe('');
        button.simulate('click');
        expect(component.state('giftCardNumber')).toBe(giftCardNumber);
        expect(component.state('errorMessage')).toBe(mockResources.duplicatedCodeError);
        expect(StoreOperationsDataActions.getTenderTypesAsync).not.toBeCalled();
    });
    it('shows error for empty input', async () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = mount(shallow(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps))).get(0));
        const instance = component.instance();
        instance.applyGiftCard();
        expect(component.state('errorMessage')).toBe('Please enterd a gift card number');
    });
    it('handles empty gift card', async () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = mount(shallow(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps))).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');
        input.simulate('change', {
            target: {
                value: 'empty'
            }
        });
        button.simulate('click');
        return Promise.resolve(component)
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => {
            expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
            expect(component.state('errorMessage')).toBe('Gift card has no balance left');
            component.unmount();
        });
    });
    it('handles invalid gift card', async () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const component = mount(shallow(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps))).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');
        input.simulate('change', {
            target: {
                value: 'aaa'
            }
        });
        button.simulate('click');
        return Promise.resolve(component)
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => {
            expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
            expect(component.state('errorMessage')).toBe('Invalid gift card information entered');
            component.unmount();
        });
    });
    it('adds a gift card when enters an valid gift card', async () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: View
        };
        const giftCardNumber = 'abc';
        const component = mount(shallow(React.createElement(CheckoutGiftCard, Object.assign({}, moduleProps))).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');
        const instance = component.instance();
        instance.onSubmit();
        input.simulate('change', {
            target: {
                value: giftCardNumber
            }
        });
        expect(component.state('errorMessage')).toBe('');
        expect(component.state('isFetchingGiftCard')).toBe(false);
        expect(component.state('giftCardNumber')).toBe(giftCardNumber);
        button.simulate('click');
        expect(component.state('errorMessage')).toBe('');
        return Promise.resolve(component)
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => {
            component.update();
            expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
            expect(component.state('errorMessage')).toBe('');
            expect(component.text()).toContain('abc');
            const giftCardItem = component.find('.ms-checkout-gift-card__item-text');
            expect(giftCardItem.length).toBe(1);
            instance.onSubmit();
            instance.onEdit();
            instance.onCancel();
            input.simulate('change', {
                target: {
                    value: giftCardNumber
                }
            });
            button.simulate('click');
            expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
            expect(component.state('errorMessage')).toBe('You already entered this gift card');
        })
            .then(() => {
            const spy = jest.spyOn(instance, 'removeGiftCard');
            const removeButton = component.find('button.ms-checkout-gift-card__btn-remove');
            removeButton.simulate('click');
            input.simulate('change', {
                target: {
                    value: 'empty'
                }
            });
            component.update();
            const noGiftCardItem = component.find('.ms-checkout-gift-card__item-text');
            expect(noGiftCardItem.length).toBe(0);
            component.unmount();
        });
    });
    afterEach(() => {
        StoreOperationsDataActions.getGiftCardAsync.mockReset();
        StoreOperationsDataActions.getTenderTypesAsync.mockReset();
        StoreOperationsDataActions.resolveCardTypesAsync.mockReset();
    });
    afterAll(() => {
        jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');
    });
});
//# sourceMappingURL=checkout-gift-card.test.js.map