{"version":3,"file":"view.test.js","sourceRoot":"./src/","sources":["modules/checkout-gift-card/tests/unit/view.test.tsx"],"names":[],"mappings":"AAMA,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,oBAAoB,MAAM,+BAA+B,CAAC;AAEjE,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;IAClD,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACzB,MAAM,WAAW,GAA+B,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAA+B,CAAC;QAC3G,MAAM,SAAS,GAAG;YACd,GAAG,WAAW;YACd,YAAY,EAAE,EAAE;YAChB,cAAc,EAAE,EAAE;YAClB,WAAW,EAAE,EAAE;YACf,WAAW,EAAE,EAAE;YACf,kBAAkB,EAAE,KAAK;YAEzB,SAAS,EAAE,YAAY;YACvB,qBAAqB,EAAE;gBACnB,WAAW;gBACX,SAAS,EAAE,aAAa;aAC3B;YACD,YAAY,EAAE;gBACV,KAAK,EAAE,SAAS;gBAChB,IAAI,EAAE;oBACF,SAAS,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE;oBAC1C,IAAI,EAAE;wBACF;4BACI,SAAS,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE;4BAC1C,gBAAgB,EAAE,oBAAoB;yBACzC;qBACJ;iBACJ;aACJ;YACD,WAAW,EAAE;gBACT,IAAI,EAAE;oBACF,SAAS,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE;oBAC1C,KAAK,EAAE,SAAS;oBAChB,aAAa,EAAE,iBAAiB;oBAChC,aAAa,EAAE,iBAAiB;oBAChC,eAAe,EAAE,mBAAmB;oBACpC,KAAK,EAAE,SAAS;oBAChB,UAAU,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE;oBAC3C,aAAa,EAAE,EAAE,SAAS,EAAE,yBAAyB,EAAE;oBACvD,aAAa,EAAE,EAAE,SAAS,EAAE,yBAAyB,EAAE;oBACvD,aAAa,EAAE,EAAE,SAAS,EAAE,yBAAyB,EAAE;oBACvD,WAAW,EAAE,eAAe;oBAC5B,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,YAAY;oBACtB,WAAW,EAAE,eAAe;oBAC5B,uBAAuB,EAAE,KAAK;oBAC9B,oBAAoB,EAAE,KAAK;oBAC3B,oBAAoB,EAAE,KAAK;iBAC9B;gBACD,IAAI,EAAE;oBACF,SAAS,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE;oBAC1C,IAAI,EAAE;wBACF;4BACI,SAAS,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE;4BAC1C,gBAAgB,EAAE,oBAAoB;4BACtC,YAAY,EAAE,gBAAgB;yBACjC;qBACJ;iBACJ;aACJ;SACJ,CAAC;QACF,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAC,oBAAoB,oBAAK,SAAS,EAAI,CAAC,CAAC;QAClE,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// tslint:disable-next-line:no-unused-variable\nimport { buildMockModuleProps } from '@msdyn365-commerce/core';\nimport { render } from 'enzyme';\nimport * as React from 'react';\nimport { ICheckoutGiftCardProps } from '../../checkout-gift-card.props.autogenerated';\nimport CheckoutGiftCardView from '../../checkout-gift-card.view';\n\ndescribe('Order confirmation unit tests - View', () => {\n    it('renders correctly', () => {\n        const moduleProps: ICheckoutGiftCardProps<{}> = buildMockModuleProps({}, {}) as ICheckoutGiftCardProps<{}>;\n        const mockProps = {\n            ...moduleProps,\n            errorMessage: '',\n            giftCardNumber: '',\n            giftCardPin: '',\n            giftCardExp: '',\n            isFetchingGiftCard: false,\n\n            className: 'mock class',\n            checkoutGiftCardProps: {\n                moduleProps,\n                className: 'mock-module'\n            },\n            showGiftCard: {\n                title: '{title}',\n                list: {\n                    listProps: { className: 'mock-node-list' },\n                    list: [\n                        {\n                            itemProps: { className: 'mock-node-item' },\n                            selectedGiftCard: '{selectedGiftCard}'\n                        }\n                    ]\n                }\n            },\n            addGiftCard: {\n                form: {\n                    formProps: { className: 'mock-node-form' },\n                    label: '{label}',\n                    inputPinLabel: '{inputPinLabel}',\n                    inputExpLabel: '{inputExpLabel}',\n                    alertFieldLabel: '{alertFieldLabel}',\n                    alert: '{alert}',\n                    inputProps: { className: 'mock-node-form' },\n                    inputNumProps: { className: 'mock-node-inputNum-form' },\n                    inputPinProps: { className: 'mock-node-inputPin-form' },\n                    inputExpProps: { className: 'mock-node-inputExp-form' },\n                    inputNumber: '{inputNumber}',\n                    inputPin: '{inputPin}',\n                    inputExp: '{inputExp}',\n                    applyButton: '{applyButton}',\n                    supportExternalGiftCard: false,\n                    showGiftCardPinInput: false,\n                    showGiftCardExpInput: false\n                },\n                list: {\n                    listProps: { className: 'mock-node-list' },\n                    list: [\n                        {\n                            itemProps: { className: 'mock-node-item' },\n                            selectedGiftCard: '{selectedGiftCard}',\n                            removeButton: '{removeButton}'\n                        }\n                    ]\n                }\n            }\n        };\n        const component = render(<CheckoutGiftCardView {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});\n"]}