import { __decorate } from "tslib";
import { withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { getGiftCardAsync, getTenderTypesAsync, resolveCardTypesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import classname from 'classnames';
import { computed, when } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { OPERATIONS } from '../checkout';
import { getForm } from './components/get-form';
import { getList } from './components/get-list';
import TitleCompoent from './components/title';
export * from './components/get-form';
export * from './components/get-item';
export * from './components/get-list';
let CheckoutGiftCard = class CheckoutGiftCard extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            isFetchingGiftCard: false,
            errorMessage: '',
            giftCardNumber: '',
            giftCardPin: '',
            giftCardExp: ''
        };
        this.inputRef = React.createRef();
        this.inputPinRef = React.createRef();
        this.inputExpRef = React.createRef();
        this.init = () => {
            this.props.moduleState.init({
                onEdit: this.onEdit,
                onCancel: this.onCancel,
                onSubmit: this.onSubmit,
                isRequired: false,
                ...(!this.isEnabled() && { status: 'disabled' })
            });
            const giftCards = this.props.data.checkout.result?.giftCardExtends;
            if (giftCards && giftCards.length > 0) {
                this.props.moduleState.onReady();
            }
            else if (this.isPaymentVerificationRedirection) {
                this.props.moduleState.onSkip();
            }
        };
        this.couldPaidByGiftCard = () => {
            const cart = this.props.data.checkout.result ? this.props.data.checkout.result.checkoutCart.cart : undefined;
            if (!cart) {
                return false;
            }
            return (cart.TotalAmount || 0) > 0;
        };
        this.isEnabled = () => {
            if (!this.props.context.request.user.isAuthenticated && this.props.context.app.config.giftCardSupported !== 'external') {
                return false;
            }
            return this.couldPaidByGiftCard();
        };
        this.onEdit = () => {
            this.props.moduleState.onUpdating();
        };
        this.onCancel = () => {
            this.handleCancelOrSubmit();
        };
        this.onSubmit = () => {
            this.handleCancelOrSubmit();
        };
        this.handleCancelOrSubmit = () => {
            if (this.hasSelectedItem) {
                this.props.moduleState.onReady();
            }
            else {
                this.props.moduleState.onSkip();
            }
        };
        this.getFormattedPrice = (price = 0, currencyCode = 'USD') => {
            return this.props.context.cultureFormatter.formatCurrency(price, currencyCode);
        };
        this.enterGiftCardNumber = (giftCardNumber) => {
            this.setState({
                giftCardNumber
            });
            this.clearError();
        };
        this.enterGiftCardPin = (giftCardPin) => {
            this.setState({
                giftCardPin
            });
            this.clearError();
        };
        this.enterGiftCardExp = (giftCardExp) => {
            this.setState({
                giftCardExp
            });
            this.clearError();
        };
        this.setError = (errorMessage) => {
            this.props.telemetry.error('Error', errorMessage);
            this.props.telemetry.debug('Error', errorMessage);
            this.props.moduleState.setHasError(true);
            this.setState({
                errorMessage
            });
        };
        this.clearError = () => {
            this.props.moduleState.setHasError(false);
            this.setState({
                errorMessage: ''
            });
        };
        this.removeGiftCard = async (giftCardNumber) => {
            const checkoutState = this.props.data.checkout.result;
            if (!checkoutState) {
                return;
            }
            await checkoutState.removeGiftCard({ giftCardNumber });
        };
        this.applyGiftCard = async () => {
            if (this.state.isFetchingGiftCard) {
                return;
            }
            this.setState({
                isFetchingGiftCard: true
            });
            const checkoutState = this.props.data.checkout.result;
            const giftCardNumber = this.state.giftCardNumber.trim();
            const giftCardPin = this.state.giftCardPin.trim();
            const giftCardExp = this.state.giftCardExp.trim();
            const giftCardTypes = await this.getGiftCardTypes(giftCardNumber);
            const giftCardType = giftCardTypes && giftCardTypes[0];
            const isPinRequired = giftCardType && giftCardType.IsPinRequired;
            const isExpRequired = giftCardType && giftCardType.IsExpirationDateRequired;
            const tenderTypeId = giftCardType && giftCardType.PaymentMethodId;
            const giftCard = await this.getGiftCard(giftCardNumber, giftCardPin, giftCardExp, isPinRequired, isExpRequired, tenderTypeId);
            if (checkoutState && giftCard) {
                await checkoutState.addGiftCard({ giftCard: giftCard, additionalProperties: { Pin: giftCardPin, ExpirationDate: giftCardExp, TenderTypeId: tenderTypeId } });
                this.clearError();
                this.setState({
                    giftCardNumber: '',
                    giftCardPin: '',
                    giftCardExp: '',
                    isFetchingGiftCard: false
                });
                return Promise.resolve();
            }
            else {
                const input = this.inputRef && this.inputRef.current && this.inputRef.current.focus && this.inputRef.current;
                input && input.focus();
                this.setState({
                    isFetchingGiftCard: false
                });
            }
        };
        this.findGiftcardTenderTypes = (tenderTypes, operationId, giftcardType) => {
            let matchedTenderTypes;
            switch (giftcardType) {
                case "internal":
                    matchedTenderTypes = tenderTypes.filter(tenderType => (tenderType.OperationId === operationId && tenderType.ConnectorId === ''));
                    break;
                case "external":
                    matchedTenderTypes = tenderTypes.filter(tenderType => (tenderType.OperationId === operationId && tenderType.ConnectorId !== ''));
                    break;
                default:
                    throw new Error('Invalid gift card type');
            }
            if (matchedTenderTypes) {
                return matchedTenderTypes.map(tenderType => tenderType.TenderTypeId || '');
            }
            return;
        };
        this.getGiftCard = async (giftCardNumber, giftCardPin, giftCardExp, isPinRequired, isExpRequired, tenderTypeId) => {
            const { resources: { noBalanceError, invalidCardInfoError, invalidCardTypeError, noCardPinError, noCardExpError } } = this.props;
            const supportedGiftCardType = this.props.context.app.config.giftCardSupported;
            if (!tenderTypeId) {
                return undefined;
            }
            const tenderTypes = await getTenderTypesAsync({ callerContext: this.props.context.actionContext, queryResultSettings: {} }).catch(error => {
                throw error;
            });
            if (!tenderTypes) {
                throw new Error('Fail to get gift card tender line');
            }
            const internalGiftcardTenderTypes = this.findGiftcardTenderTypes(tenderTypes, OPERATIONS.PayGiftCertificate, "internal");
            const externalGiftcardTenderTypes = this.findGiftcardTenderTypes(tenderTypes, OPERATIONS.PayGiftCertificate, "external");
            switch (supportedGiftCardType) {
                case undefined:
                case "internal":
                    if (!internalGiftcardTenderTypes?.includes(tenderTypeId)) {
                        this.setError(invalidCardTypeError);
                        return undefined;
                    }
                    break;
                case "external":
                    if (!externalGiftcardTenderTypes?.includes(tenderTypeId)) {
                        this.setError(invalidCardTypeError);
                        return undefined;
                    }
                    break;
                case "both":
                    if (!internalGiftcardTenderTypes?.includes(tenderTypeId) && !externalGiftcardTenderTypes?.includes(tenderTypeId)) {
                        this.setError(invalidCardTypeError);
                        return undefined;
                    }
                    break;
                default:
                    throw new Error('Unsupported gift card type');
            }
            if (isPinRequired && giftCardPin === '') {
                this.setError(noCardPinError);
                return undefined;
            }
            if (isExpRequired && giftCardExp === '') {
                this.setError(noCardExpError);
                return undefined;
            }
            const month = parseInt(giftCardExp.split('/')[0], 10);
            const year = parseInt(giftCardExp.split('/')[1], 10);
            return getGiftCardAsync({ callerContext: this.props.context.actionContext }, giftCardNumber, tenderTypeId, giftCardPin, month, year)
                .then(activeGiftCard => {
                if (!activeGiftCard.Balance || activeGiftCard.Balance === 0) {
                    this.setError(noBalanceError);
                    return;
                }
                return activeGiftCard;
            })
                .catch(error => {
                this.setError(invalidCardInfoError);
                return undefined;
            });
        };
        this.getGiftCardTypes = async (giftCardNumber) => {
            const { resources: { emptyInputError, duplicatedCodeError, invalidCodeError }, data: { checkout } } = this.props;
            if (!giftCardNumber) {
                this.setError(emptyInputError);
                return undefined;
            }
            const isDuplicated = checkout.result && checkout.result.giftCardExtends.some((card) => card.Id === giftCardNumber);
            if (isDuplicated) {
                this.setError(duplicatedCodeError);
                return undefined;
            }
            const GIFTCARDTYPE = 7;
            return resolveCardTypesAsync({ callerContext: this.props.context.actionContext }, giftCardNumber, GIFTCARDTYPE)
                .then(giftCardTypes => {
                if (!giftCardTypes || giftCardTypes.length === 0 || giftCardTypes[0] === undefined) {
                    this.setError(invalidCodeError);
                    return;
                }
                return giftCardTypes;
            })
                .catch(error => {
                this.setError(invalidCodeError);
                return undefined;
            });
        };
    }
    get isDataReady() {
        return (this.props.data.checkout.result && this.props.data.checkout.status) === 'SUCCESS';
    }
    get getLoyaltyAmount() {
        const checkoutState = this.props.data.checkout.result;
        if (!checkoutState || !checkoutState.loyaltyAmount) {
            return 0;
        }
        return checkoutState.loyaltyAmount;
    }
    get shouldPayGiftCard() {
        const cart = this.props.data.checkout.result ? this.props.data.checkout.result.checkoutCart.cart : undefined;
        if (!cart) {
            return false;
        }
        const amountDue = (cart.TotalAmount || 0) - this.getLoyaltyAmount;
        return amountDue > 0;
    }
    get hasSelectedItem() {
        const { data: { checkout } } = this.props;
        const giftCards = checkout.result && checkout.result.giftCardExtends;
        return !!giftCards && giftCards.length > 0;
    }
    get isPaymentVerificationRedirection() {
        const { requestFormData, query } = this.props.context.request;
        return (requestFormData && query && query.pv === '1') ? true : false;
    }
    componentDidMount() {
        when(() => this.isDataReady, () => {
            this.init();
        });
    }
    render() {
        const { moduleState: { isReady }, data: { checkout }, config: { className, showAdditionalFields }, resources } = this.props;
        const { errorMessage, giftCardNumber, giftCardPin, giftCardExp } = this.state;
        const giftCards = checkout.result && checkout.result.giftCardExtends;
        const additionalFields = showAdditionalFields;
        const supportedGiftCardType = this.props.context.app.config.giftCardSupported;
        if (!this.isEnabled() || (!this.shouldPayGiftCard && !isReady)) {
            this.props.context.telemetry.error('Checkout giftcard content is empty, module wont render');
            return null;
        }
        const supportExternalGiftCard = supportedGiftCardType === "internal" ? false : true;
        const moduleClassName = classname('ms-checkout-gift-card', className, isReady ? 'show' : 'add');
        const viewProps = {
            ...this.props,
            ...this.state,
            className: moduleClassName,
            checkoutGiftCardProps: { moduleProps: this.props, className: moduleClassName },
            couldPaidByGiftCard: this.couldPaidByGiftCard(),
            isEnabled: this.isEnabled(),
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onSubmit: this.onSubmit,
            enterGiftCardNumber: this.enterGiftCardNumber,
            enterGiftCardPin: this.enterGiftCardPin,
            enterGiftCardExp: this.enterGiftCardExp,
            removeGiftCard: this.removeGiftCard,
            applyGiftCard: this.applyGiftCard,
            showGiftCard: isReady
                ? {
                    title: React.createElement(TitleCompoent, { title: resources.giftCardFormLabel }),
                    list: getList({
                        canRemove: false,
                        getFormattedPrice: this.getFormattedPrice,
                        giftCards: giftCards && [...giftCards],
                        onRemoveGiftCard: this.removeGiftCard,
                        resources
                    })
                }
                : undefined,
            addGiftCard: !isReady
                ? {
                    form: getForm({
                        errorMessage,
                        giftCardNumber,
                        giftCardPin,
                        giftCardExp,
                        inputRef: this.inputRef,
                        inputPinRef: this.inputPinRef,
                        inputExpRef: this.inputExpRef,
                        resources,
                        onEnterGiftCardNumber: this.enterGiftCardNumber,
                        onEnterGiftCardPin: this.enterGiftCardPin,
                        onEnterGiftCardExp: this.enterGiftCardExp,
                        onApplyGiftCard: this.applyGiftCard,
                        supportExternalGiftCard,
                        additionalFields
                    }),
                    list: getList({
                        canRemove: true,
                        getFormattedPrice: this.getFormattedPrice,
                        giftCards: giftCards && [...giftCards],
                        onRemoveGiftCard: this.removeGiftCard,
                        resources
                    })
                }
                : undefined
        };
        return this.props.renderView(viewProps);
    }
};
__decorate([
    computed
], CheckoutGiftCard.prototype, "isDataReady", null);
__decorate([
    computed
], CheckoutGiftCard.prototype, "getLoyaltyAmount", null);
__decorate([
    computed
], CheckoutGiftCard.prototype, "shouldPayGiftCard", null);
__decorate([
    computed
], CheckoutGiftCard.prototype, "hasSelectedItem", null);
__decorate([
    computed
], CheckoutGiftCard.prototype, "isPaymentVerificationRedirection", null);
CheckoutGiftCard = __decorate([
    observer
], CheckoutGiftCard);
export { CheckoutGiftCard };
export default withModuleState(CheckoutGiftCard);
//# sourceMappingURL=checkout-gift-card.js.map