import { IModuleStateProps } from '@msdyn365-commerce-modules/checkout-utilities';
import { IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import * as React from 'react';
import { ICheckoutData } from './checkout.data';
import { ICheckoutHeadingData, ICheckoutProps } from './checkout.props.autogenerated';
import { ILineItems } from './components/get-line-items';
import { IOrderSummary } from './components/get-order-summary';
export * from './components/get-line-items';
export * from './components/get-order-summary';
interface ICheckoutState {
    errorMessage: string;
}
export interface ICheckoutViewProps extends ICheckoutProps<ICheckoutData> {
    className: string;
    canShow?: boolean;
    isEmptyCart?: boolean;
    isConsentGiven?: boolean;
    hasError?: boolean;
    cartStatus?: string;
    isMobile?: boolean;
    isEditorialMode?: boolean;
    backToShoppingUrl?: string;
    editCartLink?: string;
    hasSalesOrder: boolean;
    checkoutProps: IModuleProps;
    headerProps: INodeProps;
    bodyProps: INodeProps;
    mainProps: INodeProps;
    mainControlProps: INodeProps;
    sideProps: INodeProps;
    sideControlFirstProps: INodeProps;
    sideControlSecondProps: INodeProps;
    termsAndConditionsProps: INodeProps;
    guidedForm?: React.ReactNode;
    title?: React.ReactNode;
    loading?: React.ReactNode;
    alert?: React.ReactNode;
    orderSummary?: IOrderSummary;
    lineItems?: ILineItems;
    placeOrderButton?: React.ReactNode;
    termsAndConditions?: React.ReactNode;
    keepShoppingButton?: React.ReactNode;
    orderConfirmation?: React.ReactNode;
}
export interface ICheckoutModuleProps extends ICheckoutProps<ICheckoutData>, IModuleStateProps {
}
declare class Checkout extends React.Component<ICheckoutModuleProps> {
    get cartStatus(): Msdyn365.AsyncResultStatus;
    get isEmptyCart(): boolean;
    get hasError(): boolean;
    get isEditorialMode(): boolean;
    get canPlaceOrder(): boolean;
    state: ICheckoutState;
    private telemetryContent;
    componentDidMount(): void;
    render(): JSX.Element;
    renderMsdyn365Text(checkoutHeading: ICheckoutHeadingData): React.ReactNode;
    handleCheckoutHeadingChange: (event: Msdyn365.ContentEditableEvent) => string;
    private isLoading;
    private getSlotItems;
    private onPlaceOrder;
    private isOverMaxQuantity;
    private getActiveChildModuleStates;
    private onContainerReady;
}
export default Checkout;
