/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';
import {
    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput,
    ICommerceApiSettings, ICreateActionContext, isEmptyOrNullObject
} from '@msdyn365-commerce/core';
import { getCheckoutState, ICheckoutState } from '@msdyn365-commerce/global-state';
import {
    getCardPaymentAcceptPointAsync
} from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import {
    CardPaymentAcceptPoint
} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import get from 'lodash/get';

export interface IGetCardPaymentAcceptPointInput {
    showBillingAddress?: boolean;
    paymenTenderType?: string;
    apiSettings: ICommerceApiSettings;
}

/**
 * GetCardPaymentAcceptPointInput - Input for create GetCardPaymentAcceptPoint
 */
export class GetCardPaymentAcceptPointInput implements IActionInput {
    public showBillingAddress?: boolean;
    public paymenTenderType?: string;
    private apiSettings: ICommerceApiSettings;

    constructor(input: IGetCardPaymentAcceptPointInput) {
        this.showBillingAddress = input.showBillingAddress;
        this.paymenTenderType = input.paymenTenderType;
        this.apiSettings = input.apiSettings;
    }

    public getCacheKey = () => buildCacheKey(`CardPaymentAcceptPoint${this.paymenTenderType ? `-${this.paymenTenderType}` : ''}`, this.apiSettings);
    public getCacheObjectType = () => `CardPaymentAcceptPoint`;
    public dataCacheType = (): CacheType => 'none';
}

export const createCheckoutPaymentInstrumentInput = (inputData: ICreateActionContext) => {
    // @ts-ignore
    const { showBillingAddress, paymenTenderType } = inputData.config;
    const getCardPaymentAcceptPointInput = {
        showBillingAddres: showBillingAddress,
        paymenTenderType: paymenTenderType,
        apiSettings: inputData.requestContext.apiSettings
    };

    return new GetCardPaymentAcceptPointInput(getCardPaymentAcceptPointInput);
};

/**
 * Calls the Retail API and returns a cart object based on the passed GetCartInput
 */
export async function getCardPaymentAcceptPointAction(
    input: GetCardPaymentAcceptPointInput,
    ctx: IActionContext
): Promise<CardPaymentAcceptPoint> {
    // If no cart ID is provided in input, we need to create a cart object
    if (!input) {
        ctx.telemetry.exception(new Error('[getCardPaymentAcceptPointAction] No valid Input was provided, failing'));
        throw new Error('[getCardPaymentAcceptPointAction] No valid Input was provided, failing');
    }

    const { showBillingAddress, paymenTenderType } = input;
    const checkoutState: ICheckoutState = await getCheckoutState(ctx).catch((error: Error) => {
        ctx.telemetry.exception(error);
        throw error;
    });

    if (
        isEmptyOrNullObject(checkoutState) ||
        isEmptyOrNullObject(checkoutState.checkoutCart) ||
        isEmptyOrNullObject(checkoutState.checkoutCart.cart)
    ) {
        ctx.telemetry.exception(new Error('[getCardPaymentAcceptPointAction] Unable to get cart'));
        throw new Error('[getCardPaymentAcceptPointAction] Unable to get cart');
    }

    if (!checkoutState.checkoutCart.cart.CartLines || !checkoutState.checkoutCart.cart.CartLines.length) {
        ctx.telemetry.exception(new Error('[getCardPaymentAcceptPointAction] Cart is empty'));
        throw new Error('[getCardPaymentAcceptPointAction] Cart is empty');
    }

    const requestUrl =
        typeof ctx.requestContext.url.requestUrl === 'string'
            ? new URL(ctx.requestContext.url.requestUrl)
            : ctx.requestContext.url.requestUrl;
    const origin = get(window, 'location.origin') || requestUrl.origin;

    const cardPaymentAcceptSettings = {
        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CardPaymentAcceptSettings',
        HostPageOrigin: origin,
        AdaptorPath: `${origin}/Connectors/` || origin,
        CardPaymentEnabled: false,
        CardTokenizationEnabled: true,
        ...(!showBillingAddress && { HideBillingAddress: true }),
        ...(paymenTenderType && { TenderTypeId: paymenTenderType }),
        PaymentAmount: 0
    };

    return getCardPaymentAcceptPointAsync(
        { callerContext: ctx, bypassCache: 'get' },
        checkoutState.checkoutCart.cart.Id,
        cardPaymentAcceptSettings,
        []
    )
        .then(cardPaymentAcceptPoint => {
            if (!cardPaymentAcceptPoint.AcceptPageUrl && !cardPaymentAcceptPoint.AcceptPageContent) {
                throw new Error(
                    '[getCardPaymentAcceptPointAction] Payment Accept Page has neither return AcceptPageUrl nor AcceptPageContent in updatePaymentAcceptPageData'
                );
            }
            return cardPaymentAcceptPoint;
        })
        .catch(error => {
            ctx.telemetry.exception(error);
            ctx.telemetry.debug('Unable to get Card Payment Accept Point');
            throw error;
        });
}

export default createObservableDataAction({
    id: '@msdyn365-commerce/checkout-payment-instrument/get-card-payment-accept-point',
    action: <IAction<CardPaymentAcceptPoint>>getCardPaymentAcceptPointAction,
    input: createCheckoutPaymentInstrumentInput
});
