/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as React from 'react';

interface IVisibilyObserverState {
    isVisible?: boolean;
    errorMessage?: string;
    observer?: MutationObserver;
}

export interface IVisibilyObserverProps {
    visibilityObserver?: IVisibilyObserverState;
}

const withVisibilyObserver = <P extends IVisibilyObserverProps>(WrappedComponent: React.ComponentType<P>): React.ComponentType<P> => {
    /**
     *
     * VisibilyObserver component
     * @extends {React.Component<P>}
     */
    class VisibilyObserver extends React.Component<P> {
        public state: IVisibilyObserverState = {
            isVisible: false,
            errorMessage: '',
            observer: undefined
        };

        private selfRef: React.RefObject<HTMLDivElement> = React.createRef();

        public componentDidMount(): void {
            this.initMutationObserver();
        }

        public componentWillUnmount(): void {
            this.stopMutationObserver();
        }

        public render(): JSX.Element | null {
            return (
                <div className='ms-checkout-payment-instrument__mutation-observer' ref={this.selfRef}>
                    <WrappedComponent {...this.props} visibilityObserver={this.state} />
                </div>
            );
        }

        private initMutationObserver = (): void => {
            // Select the node that will be observed for mutations
            const targetNode = document.getElementsByTagName('body') && document.getElementsByTagName('body')[0];
            if (!targetNode) {
                this.setState({
                    errorMessage: 'No body element found'
                });
                return;
            }

            if (!MutationObserver) {
                this.setState({
                    errorMessage: 'MutationObserver is not supported'
                });
                return;
            }

            // Options for the observer (which mutations to observe)
            const config = { attributes: true, childList: true, subtree: true };

            // Create an observer instance linked to the callback function
            const _observer = new MutationObserver(() => this.handleVisibilityChange());
            _observer.observe(targetNode, config);

            this.setState({
                observer: _observer
            });
        };

        private stopMutationObserver = (): void => {
            this.state.observer && this.state.observer.disconnect();
        };

        private handleVisibilityChange = (): void => {
            // If module is visible or not
            const isVisible = !!this.selfRef.current && this.selfRef.current.offsetWidth > 0 && this.selfRef.current.offsetHeight > 0;
            if (!this.state.isVisible && isVisible) {
                this.setState({
                    isVisible
                });
                this.stopMutationObserver();
            }
        };
    }

    return VisibilyObserver;
};

export default withVisibilyObserver;
