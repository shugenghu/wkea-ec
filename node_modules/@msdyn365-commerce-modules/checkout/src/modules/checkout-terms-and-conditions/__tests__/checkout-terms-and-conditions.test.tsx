/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { mount, render, shallow } from 'enzyme';

import * as React from 'react';

import {
    buildHydratedMockActionContext, buildMockModuleProps, IActionContext, ICoreContext
} from '@msdyn365-commerce/core';
import { ICheckoutState } from '@msdyn365-commerce/global-state';
import { AsyncResult } from '@msdyn365-commerce/retail-proxy';

import CheckoutTermsAndConditions, {
    ICheckoutTermsAndConditionsModuleProps
} from '../checkout-terms-and-conditions';
import { ICheckoutTermsAndConditionsData } from '../checkout-terms-and-conditions.data';
import {
    ICheckoutTermsAndConditionsConfig, ICheckoutTermsAndConditionsResources
} from '../checkout-terms-and-conditions.props.autogenerated';
import renderView from '../checkout-terms-and-conditions.view';

const mockConfig: ICheckoutTermsAndConditionsConfig = {
    showCheckbox: true,
    showControlButtons: true,
    description: '<span>T&C<span>'
};

const mockResources: ICheckoutTermsAndConditionsResources = {
    errorMessageTitle: 'Error message',
    errorMessage: 'Please accept terms and conditions',
    saveBtnLabel: 'Save',
    editBtnLabel: 'Change',
    cancelBtnLabel: 'Cancel',
    saveBtnAriaLabel: 'Save',
    editBtnAriaLabel: 'Change',
    cancelBtnAriaLabel: 'Cancel',
};

let mockData: ICheckoutTermsAndConditionsData;

const actionContext: IActionContext = buildHydratedMockActionContext();

const mockContext: ICoreContext = {
    actionContext: actionContext,
    // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields
    request: {
        // @ts-ignore: optOutWebActivityTracking
    }
};

const mockModuleState = {};
let moduleProps: ICheckoutTermsAndConditionsModuleProps;

describe('CheckoutTermsAndConditions', () => {
    beforeEach(() => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    isTermsAndConditionAccepted: undefined,
                    updateTermsAndConditionsAcceptance: input => {
                        // @ts-ignore
                        mockData.checkout.result!.isTermsAndConditionAccepted = input.newIsTermsAndConditionAccepted;
                    },
                    checkoutCart: {
                        cart: {}
                    }
                }
            } as AsyncResult<ICheckoutState>
        };
    });

    it('Render correctly', () => {
        const newMockConfig = { ...mockConfig };
        moduleProps = {
            ...(buildMockModuleProps({}, {}, newMockConfig, mockContext) as ICheckoutTermsAndConditionsModuleProps),
            // @ts-ignore
            renderView: renderView,
            resources: mockResources,
            data: mockData,
            // @ts-ignore
            moduleState: mockModuleState
        };

        const component = render(<CheckoutTermsAndConditions {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('Render without buttons', () => {
        const newMockConfig = { ...mockConfig };
        newMockConfig.showControlButtons = false;
        moduleProps = {
            ...(buildMockModuleProps({}, {}, newMockConfig, mockContext) as ICheckoutTermsAndConditionsModuleProps),
            // @ts-ignore
            renderView: renderView,
            resources: mockResources,
            data: mockData,
            // @ts-ignore
            moduleState: mockModuleState
        };

        const component = render(<CheckoutTermsAndConditions {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('Render without checkbox', () => {
        const newMockConfig = { ...mockConfig };
        newMockConfig.showCheckbox = false;
        moduleProps = {
            ...(buildMockModuleProps({}, {}, newMockConfig, mockContext) as ICheckoutTermsAndConditionsModuleProps),
            // @ts-ignore
            renderView: renderView,
            resources: mockResources,
            data: mockData,
            // @ts-ignore
            moduleState: mockModuleState
        };

        const component = render(<CheckoutTermsAndConditions {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('Set initial data correctly', () => {
        const newMockConfig = { ...mockConfig };
        moduleProps = {
            ...(buildMockModuleProps({ ...mockData }, {}, newMockConfig, mockContext) as ICheckoutTermsAndConditionsModuleProps),
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; }),
            resources: mockResources,
            // @ts-ignore
            moduleState: mockModuleState
        };

        const component = mount(<CheckoutTermsAndConditions {...moduleProps} />);
        expect(moduleProps.renderView).toBeCalled();

        const data = component.childAt(0).props().data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeFalsy();

        component.unmount();
    });

    it('Set initial data correctly if checkbox is not enabled', () => {
        const newMockConfig = { ...mockConfig };
        newMockConfig.showCheckbox = false;
        moduleProps = {
            ...(buildMockModuleProps({ ...mockData }, {}, newMockConfig, mockContext) as ICheckoutTermsAndConditionsModuleProps),
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; }),
            resources: mockResources,
            // @ts-ignore
            moduleState: mockModuleState
        };

        const component = mount(<CheckoutTermsAndConditions {...moduleProps} />);
        expect(moduleProps.renderView).toBeCalled();

        const data = component.childAt(0).props().data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeTruthy();

        component.unmount();
    });

    it('Set isTermsAndConditionAccepted on submit', () => {
        const newMockConfig = { ...mockConfig };
        moduleProps = {
            ...(buildMockModuleProps({ ...mockData }, {}, newMockConfig, mockContext) as ICheckoutTermsAndConditionsModuleProps),
            // @ts-ignore
            renderView: renderView,
            resources: mockResources,
            // @ts-ignore
            moduleState: mockModuleState
        };

        const component = mount(shallow(<CheckoutTermsAndConditions {...moduleProps} />).get(0));

        const componentInstance = component.instance();

        // @ts-ignore
        let data = componentInstance.props.data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeFalsy();

        const checkbox = component.find('.ms-checkout-terms-and-conditions__input-checkbox').first();
        checkbox.simulate('change', {
            target: {
                checked: true
            }
        });

        // @ts-ignore
        componentInstance.onSubmit();

        // @ts-ignore
        data = componentInstance.props.data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeTruthy();

        component.unmount();
    });

    it('AutoSave isTermsAndConditionAccepted on change', () => {
        const newMockConfig = { ...mockConfig };
        newMockConfig.showControlButtons = false;

        moduleProps = {
            ...(buildMockModuleProps({ ...mockData }, {}, newMockConfig, mockContext) as ICheckoutTermsAndConditionsModuleProps),
            // @ts-ignore
            renderView: renderView,
            resources: mockResources,
            // @ts-ignore
            moduleState: mockModuleState
        };

        const component = mount(shallow(<CheckoutTermsAndConditions {...moduleProps} />).get(0));

        const componentInstance = component.instance();

        // @ts-ignore
        let data = componentInstance.props.data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeFalsy();

        const checkbox = component.find('.ms-checkout-terms-and-conditions__input-checkbox').first();
        checkbox.simulate('change', {
            target: {
                checked: true
            }
        });

        // @ts-ignore
        data = componentInstance.props.data;
        expect(data.checkout.result.isTermsAndConditionAccepted).toBeTruthy();

        component.unmount();
    });

});
