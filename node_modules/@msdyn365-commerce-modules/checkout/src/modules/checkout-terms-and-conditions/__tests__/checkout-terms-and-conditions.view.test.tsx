
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { render } from 'enzyme';
import * as React from 'react';

// tslint:disable-next-line:no-unused-variable
import { buildMockModuleProps } from '@msdyn365-commerce/core';

import { ICheckoutTermsAndConditionsProps } from '../checkout-terms-and-conditions.props.autogenerated';
import CheckoutTermsAndConditionsView from '../checkout-terms-and-conditions.view';

const moduleProps: ICheckoutTermsAndConditionsProps<{}> = buildMockModuleProps({}, {}) as ICheckoutTermsAndConditionsProps<{}>;

const mockProps = {
    ...moduleProps,
    isTermsAccepted: false,
    errorMessageData: '',
    viewState: {
        isError: false,
        isShowSaveButton: false,
        isShowEditButton: false,
        isShowCancelButton: false
    },
    checkoutTermsAndConditions: { moduleProps, className: 'mock-module' },
    termsAndConditionsContent: {
        termsAndConditionAcceptance: { className: 'mock-node-terms-and-conditions-acceptance' },
        checkBox: '1',
        description: '{deliveryOptionSelected-description}',
    },
    errorMessage: {
        error: { className: 'mock-node-Error' },
        title: '{title}',
        message: '{error-message}'
    },
    saveButton: '{saveButton}',
    editButton: '{editButton}',
    cancelButton: '{cancelButton}',
    onSave: jest.fn(),
    onEdit: jest.fn(),
    onCancel: jest.fn(),
    onChange: jest.fn()
};

describe('CheckoutTermsAndConditions - View', () => {
    it('renders correctly', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isShowSaveButton = true;
        viewState.isShowEditButton = true;
        viewState.isShowCancelButton = true;
        const newProps = { ...mockProps, ...{ viewState } };

        const component = render(<CheckoutTermsAndConditionsView {...newProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders error message', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isError = true;
        const newProps = { ...mockProps, ...{ viewState } };

        const component = render(<CheckoutTermsAndConditionsView {...newProps} />);
        expect(component).toMatchSnapshot();
    });
});
