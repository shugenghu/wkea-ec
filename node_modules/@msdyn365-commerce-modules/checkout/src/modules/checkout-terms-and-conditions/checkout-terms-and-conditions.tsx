/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import classname from 'classnames';
import { action, computed, observable, reaction, when } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { IModuleStateProps, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { Button, getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import * as MsDyn365 from '@msdyn365-commerce/core';

import { ICheckoutTermsAndConditionsData } from './checkout-terms-and-conditions.data';
import {
    ICheckoutTermsAndConditionsProps
} from './checkout-terms-and-conditions.props.autogenerated';
import CheckboxComponent from './components/checkout-terms-and-conditions.check-box';
import ErrorMessageComponent from './components/checkout-terms-and-conditions.error-message';
import ErrorTitleComponent from './components/checkout-terms-and-conditions.error-title';

export interface ICheckoutTermsAndConditionsModuleProps extends ICheckoutTermsAndConditionsProps<ICheckoutTermsAndConditionsData>, IModuleStateProps { }

export interface ICheckoutTermsAndConditions {
    termsAndConditionAcceptance: INodeProps;
    checkBox: React.ReactNode;
    description: React.ReactNode;
}

export interface ICheckoutTermsAndConditionsError {
    error: INodeProps;
    title: React.ReactNode;
    message: React.ReactNode;
}

export interface ICheckoutTermsAndConditionsViewState {
    isError: boolean;
    isShowSaveButton: boolean;
    isShowEditButton: boolean;
    isShowCancelButton: boolean;
}

export interface ICheckoutTermsAndConditionsViewProps extends ICheckoutTermsAndConditionsProps<{}> {
    checkoutTermsAndConditions: IModuleProps;
    isTermsAccepted: boolean;
    errorMessageData: string;
    viewState: ICheckoutTermsAndConditionsViewState;
    termsAndConditionsContent: ICheckoutTermsAndConditions;
    errorMessage?: ICheckoutTermsAndConditionsError;
    saveButton?: React.ReactNode;
    editButton?: React.ReactNode;
    cancelButton?: React.ReactNode;
    onChange(event: React.ChangeEvent<HTMLInputElement>): void;
    onSave(): void;
    onEdit(): void;
    onCancel(): void;
}

/**
 *
 * CheckoutTermsAndConditions component
 * @extends {React.Component<ICheckoutTermsAndConditionsProps<ICheckoutTermsAndConditionsData>>}
 */
// @ts-ignore
@withModuleState
@observer
class CheckoutTermsAndConditions extends React.Component<ICheckoutTermsAndConditionsModuleProps> {
    private telemetryContent: ITelemetryContent;
    @observable private isTermsAccepted: boolean = true;
    @observable private errorMessage?: string;

    constructor(props: ICheckoutTermsAndConditionsModuleProps) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    @computed get isDataReady(): boolean {
        return (this.props.data.checkout.result && this.props.data.checkout.status) === 'SUCCESS';
    }

    @computed get isShowButtons(): boolean {
        const { showControlButtons } = this.props.config;
        return !this.props.moduleState.hasExternalSubmitGroup && (showControlButtons || false);
    }

    @computed get isAutoSave(): boolean {
        const { showControlButtons } = this.props.config;
        return !this.props.moduleState.hasExternalSubmitGroup && !showControlButtons;
    }

    @computed get defaultTermsAndConditionAcceptedValue(): boolean {
        const { showCheckbox } = this.props.config;
        return showCheckbox ? false : true;
    }

    public async componentDidMount(): Promise<void> {
        // @ts-ignore: Compiler not reconizing condition check for function params
        when(
            () => this.isDataReady,
            async () => {
                await this.init();
            }
        );

        reaction(
            () => this.props.data.checkout.result && this.props.data.checkout.result.isTermsAndConditionAccepted,
            async () => {
                this.isTermsAccepted = this.props.data.checkout.result?.isTermsAndConditionAccepted || this.defaultTermsAndConditionAcceptedValue;
            }
        );
    }

    public render(): JSX.Element | null {
        const {
            moduleState: { isReady, hasError },
            config: { className }
        } = this.props;
        const isTermsAndConditionAccepted = this.props.data.checkout.result?.isTermsAndConditionAccepted;
        const isError = hasError;
        const isShowContent = !isReady;
        const isShowSelected = !hasError && isReady;

        const viewProps = {
            ...this.props,
            ...this.state,
            isTermsAccepted: this.isTermsAccepted,
            errorMessageData: this.errorMessage,
            viewState: {
                isError: isError,
                isShowSaveButton: isShowContent && this.isShowButtons,
                isShowEditButton: isShowSelected && this.isShowButtons,
                isShowCancelButton: isShowContent && this.isShowButtons && isTermsAndConditionAccepted,
            },
            checkoutTermsAndConditions: {
                moduleProps: this.props,
                className: classname('ms-checkout-terms-and-conditions', className)
            },
            termsAndConditionsContent: this.getTermsAndConditions(),
            errorMessage: this.getErrorMessage(),
            saveButton: this.getSaveButton(),
            editButton: this.getEditButton(),
            cancelButton: this.getCancelButton(),
            onSave: this.onSubmit,
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onChange: this.onChange
        };
        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private getTermsAndConditions = (): ICheckoutTermsAndConditions => {
        const {
            moduleState: { isReady },
            config: { showCheckbox, description }
        } = this.props;
        const isDisabled = isReady && !this.isAutoSave;
        const isTermsAndConditionAccepted = this.isTermsAccepted;

        return {
            termsAndConditionAcceptance: { className: 'ms-checkout-terms-and-conditions__container' },
            checkBox: showCheckbox && <CheckboxComponent {...{ isChecked: isTermsAndConditionAccepted, disabled: isDisabled, onChange: this.onChange, id: this.props.id, telemetryContent: this.telemetryContent }} />,
            description: <MsDyn365.RichTextComponent text={description} />
        };
    }

    @action
    private init = async (): Promise<void> => {
        const {
            data,
            config: { showCheckbox }
        } = this.props;

        if (data.checkout.result?.isTermsAndConditionAccepted || !showCheckbox) {
            await this.updateTermsAndConditionsAcceptance(true);
            this.isTermsAccepted = true;
        } else if (showCheckbox) {
            await this.updateTermsAndConditionsAcceptance(false);
            this.isTermsAccepted = false;
        }

        this.props.moduleState.init({
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onSubmit: this.onSubmit,
            status: this.isTermsAccepted ? 'ready' : 'updating'
        });
    };

    private getErrorMessage = (): ICheckoutTermsAndConditionsError => {
        const { errorMessageTitle } = this.props.resources;
        return {
            error: { tag: 'div', className: 'ms-checkout-terms-and-conditions__error', role: 'alert', 'aria-live': 'assertive' },
            title: <ErrorTitleComponent {...{ title: errorMessageTitle }} />,
            message: <ErrorMessageComponent {...{ message: this.errorMessage }} />
        };
    };

    private getCancelButton = (): React.ReactNode => {
        const { cancelBtnLabel = 'Cancel', cancelBtnAriaLabel } = this.props.resources;
        return (
            <Button
                className='ms-checkout-terms-and-conditions__button-cancel'
                title={cancelBtnLabel}
                aria-label={cancelBtnAriaLabel}
                color='secondary'
                onClick={this.onCancel}
            >
                {cancelBtnLabel}
            </Button>
        );
    };

    private getSaveButton = (): React.ReactNode => {
        const { saveBtnLabel = 'Save', saveBtnAriaLabel } = this.props.resources;
        return (
            <Button
                className='ms-checkout-terms-and-conditions__button-save'
                title={saveBtnLabel}
                aria-label={saveBtnAriaLabel}
                color='primary'
                onClick={this.onSubmit}
            >
                {saveBtnLabel}
            </Button>
        );
    };

    private getEditButton = (): React.ReactNode => {
        const { editBtnLabel = 'Change', editBtnAriaLabel } = this.props.resources;
        return (
            <Button
                className='ms-checkout-terms-and-conditions__button-edit'
                title={editBtnLabel}
                aria-label={editBtnAriaLabel}
                color='primary'
                onClick={this.onEdit}
            >
                {editBtnLabel}
            </Button>
        );
    };

    private onEdit = (): void => {
        this.onUpdating();
    };

    private onSubmit = async (): Promise<void> => {
        if (!this.isTermsAccepted) {
            if (this.isAutoSave) {
                await this.updateTermsAndConditionsAcceptance(this.isTermsAccepted);
            } else {
                this.setError(this.props.resources.errorMessage);
                this.props.moduleState.setHasError(true);
            }
        } else {
            this.clearError();
            await this.updateTermsAndConditionsAcceptance(this.isTermsAccepted);
            this.props.moduleState.onReady();
        }
    };

    private onUpdating = () => {
        this.props.moduleState.onUpdating();
    };

    private setError = (errorMessage: string): void => {
        this.props.telemetry.error(errorMessage);
        this.props.moduleState.setHasError(true);
        this.props.moduleState.onUpdating();
        this.errorMessage = errorMessage;
    };

    private onCancel = (): void => {
        // Reset to the saved value
        if (!this.props.data.checkout.result) {
            return;
        }

        const isTermsAccepted = this.props.data.checkout.result.isTermsAndConditionAccepted;
        if (!isTermsAccepted) {
            // It has no saved email, set to status updating and request user to fill the email form
            this.props.moduleState.onUpdating();
            return;
        } else {
            // It has saved email, set to status ready
            this.isTermsAccepted = true;
            this.props.moduleState.setHasError(false);
            this.props.moduleState.onReady();
        }
    };

    private updateTermsAndConditionsAcceptance = async (isTermsAccepted: boolean): Promise<void> => {
        if (this.props.data.checkout.result) {
            await this.props.data.checkout.result.updateTermsAndConditionsAcceptance({ newIsTermsAndConditionAccepted: isTermsAccepted });
        }
    };

    private clearError = (): void => {
        this.props.moduleState.setHasError(false);
        this.errorMessage = undefined;
    };

    private onChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const checked = event.target.checked;
        this.isTermsAccepted = checked;
        if (this.isAutoSave) {
            await this.onSubmit();
        }
    };

}

export default CheckoutTermsAndConditions;
