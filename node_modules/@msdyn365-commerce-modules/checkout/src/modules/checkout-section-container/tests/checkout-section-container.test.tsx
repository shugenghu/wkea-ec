/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildHydratedMockActionContext, buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';
import { render, shallow } from 'enzyme';
/// <reference types="jest" />
// tslint:disable-next-line:no-unused-variable
import * as React from 'react';
import CheckoutPlainContainerWithState, { CheckoutPlainContainer, ICheckoutSectionContainerModuleProps } from '../checkout-section-container';
import { ICheckoutSectionContainerConfig } from '../checkout-section-container.props.autogenerated';
import View from '../checkout-section-container.view';

const mockConfig: ICheckoutSectionContainerConfig = {};
const mockActions = {};
let mockContext: ICoreContext;
const MockItem: React.FC<{ id: string }> = ({ id }) => <>{`{${id}}`}</>;
const mockSlot1 = <MockItem id='item_1' />;
const mockSlot2 = <MockItem id='item_2' />;
let mockModuleState = {};
let moduleProps: ICheckoutSectionContainerModuleProps;
let mockItem1State = {};
let mockItem2State = {};

describe('CheckoutPlainContainer', () => {
    beforeEach(() => {
        mockItem1State = {
            hasModuleState: true,
            isReady: true,
            isDisabled: false,
            onEdit: jest.fn(),
            onSubmit: jest.fn(),
            onCancel: jest.fn(),
            setHasError: jest.fn()
        };
        mockItem2State = {
            hasModuleState: true,
            isReady: true,
            isDisabled: false,
            onEdit: jest.fn(),
            onSubmit: jest.fn(),
            onCancel: jest.fn(),
            setHasError: jest.fn()
        };

        mockModuleState = {
            childIds: ['item_1', 'item_2'],
            init: jest.fn(),
            hasModuleState: true,
            hasExternalSubmitGroup: true,
            hasError: false,
            hasInitialized: true,
            isReady: true,
            getModule: jest.fn(id => {
                if (id === 'item_1') {
                    return mockItem1State;
                } else if (id === 'item_2') {
                    return mockItem2State;
                }
                return;
            })
        };

        // @ts-ignore
        mockContext = {
            actionContext: buildHydratedMockActionContext()
        };

        moduleProps = {
            ...(buildMockModuleProps({}, mockActions, mockConfig, mockContext) as ICheckoutSectionContainerModuleProps),
            // @ts-ignore
            renderView: View,
            slots: {
                primary: [mockSlot1, mockSlot2]
            },
            enableControl: true,
            // @ts-ignore
            moduleState: mockModuleState
        };
    });

    it('has slot items', () => {
        const component = render(<CheckoutPlainContainerWithState {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('has no slot item', () => {
        moduleProps = {
            ...moduleProps,
            // @ts-ignore
            slots: undefined
        };
        const component = render(<CheckoutPlainContainerWithState {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('has non initialized item', () => {
        mockItem1State = {
            ...mockItem1State,
            hasInitialized: false
        };
        const component = render(<CheckoutPlainContainer {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('has disabled item', () => {
        mockItem1State = {
            ...mockItem1State,
            isDisabled: true
        };
        const component = render(<CheckoutPlainContainer {...moduleProps} />);
        expect(component.find('.ms-checkout-section-container__item').hasClass('hidden')).toBe(true);
    });

    it('onSubmit', () => {
        mockItem1State = {
            ...mockItem1State,
            isReady: false
        };
        // @ts-ignore
        const component = shallow(<CheckoutPlainContainer {...moduleProps} />);
        // @ts-ignore
        component.instance().onSubmit();
        // @ts-ignore
        expect(mockItem1State.onSubmit).toBeCalled();
        // @ts-ignore
        expect(mockItem2State.onSubmit).not.toBeCalled();
    });

    it('onCancel', () => {
        mockItem1State = {
            ...mockItem1State,
            isReady: false
        };
        // @ts-ignore
        const component = shallow(<CheckoutPlainContainer {...moduleProps} />);
        // @ts-ignore
        component.instance().onCancel();
        // @ts-ignore
        expect(mockItem1State.onCancel).toBeCalled();
        // @ts-ignore
        expect(mockItem2State.onCancel).not.toBeCalled();
    });

    it('onEdit', () => {
        // @ts-ignore
        const component = shallow(<CheckoutPlainContainer {...moduleProps} />);
        // @ts-ignore
        component.instance().onEdit();
        // @ts-ignore
        expect(mockItem1State.onEdit).toBeCalled();
        // @ts-ignore
        expect(mockItem2State.onEdit).toBeCalled();
    });

    it('componentDidUpdate', () => {
        mockModuleState = {
            ...mockModuleState,
            hasError: true
        };

        moduleProps = {
            ...moduleProps,
            // @ts-ignore
            moduleState: mockModuleState
        };

        // @ts-ignore
        const component = shallow(<CheckoutPlainContainer {...moduleProps} />);
        // @ts-ignore
        component.instance().componentDidUpdate();
        // @ts-ignore
        expect(mockItem1State.onEdit).toBeCalled();
        // @ts-ignore
        expect(mockItem2State.onEdit).toBeCalled();
    });
});
