
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { render } from 'enzyme';
import * as React from 'react';

// tslint:disable-next-line:no-unused-variable
import { buildMockModuleProps } from '@msdyn365-commerce/core';

import { ICheckoutDeliveryOptionsProps } from '../../checkout-delivery-options.props.autogenerated';
import CheckoutDeliveryOptionsView from '../../checkout-delivery-options.view';

const moduleProps: ICheckoutDeliveryOptionsProps<{}> = buildMockModuleProps({}, {}) as ICheckoutDeliveryOptionsProps<{}>;

const mockProps = {
    ...moduleProps,
    selectedItemId: '',
    deliveryOptionsData: [],
    isLoading: false,
    errorMessageData: '',
    viewState: {
        isLoading: false,
        isError: false,
        isShowList: false,
        isShowSelected: false,
        isShowSaveButton: false,
        isShowEditButton: false,
        isShowCancelButton: false
    },
    CheckoutDeliveryOptions: { moduleProps, className: 'mock-module' },
    deliveryOptions: {
        DeliveryOptionsList: { className: 'mock-node-DeliveryOptionsList' },
        list: [{
            DeliveryOption: { className: 'mock-node-DeliveryOption' },
            code: '1',
            radioButton: '{deliveryOptions-radioButton}',
            description: '{deliveryOptions-description}',
            price: '{deliveryOptions-price}'
        }]
    },
    deliveryOptionSelected: {
        DeliveryOption: { className: 'mock-node-DeliveryOption' },
        code: '1',
        description: '{deliveryOptionSelected-description}',
        price: '{deliveryOptionSelected-price}'
    },
    errorMessage: {
        Error: { className: 'mock-node-Error' },
        title: '{error-title}',
        message: '{error-message}'
    },
    waiting: '{waiting}',
    saveButton: '{saveButton}',
    editButton: '{editButton}',
    cancelButton: '{cancelButton}',
    onSave: jest.fn(),
    onEdit: jest.fn(),
    onCancel: jest.fn(),
    onDeliveryOptionChange: jest.fn()
};

describe('CheckoutDeliveryOptions unit tests - View', () => {
    it('renders correctly loading message', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isLoading = true;
        const newProps = { ...mockProps, ...{ viewState } };

        const component = render(<CheckoutDeliveryOptionsView {...newProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly error message', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isError = true;
        const newProps = { ...mockProps, ...{ viewState } };

        const component = render(<CheckoutDeliveryOptionsView {...newProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly list', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isShowList = true;
        const newProps = { ...mockProps, ...{ viewState } };

        const component = render(<CheckoutDeliveryOptionsView {...newProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly selected options', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isShowSelected = true;
        const newProps = { ...mockProps, ...{ viewState } };

        const component = render(<CheckoutDeliveryOptionsView {...newProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly buttons', () => {
        const viewState = { ...mockProps.viewState };
        viewState.isShowSaveButton = true;
        viewState.isShowEditButton = true;
        viewState.isShowCancelButton = true;
        const newProps = { ...mockProps, ...{ viewState } };

        const component = render(<CheckoutDeliveryOptionsView {...newProps} />);
        expect(component).toMatchSnapshot();
    });
});
