/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getProductUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { Button, getPayloadObject, getTelemetryAttributes, INodeProps, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { CartLineItemComponent } from '@msdyn365-commerce/components';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { CartLine, OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import classnames from 'classnames';
import get from 'lodash/get';
import * as React from 'react';
import { ICheckoutData } from '../checkout.data';
import { ICheckoutProps } from '../checkout.props.autogenerated';

type deliveryType = 'pickup' | 'ship';

export interface IPickUpAtStore {
    PickUpAtStore: INodeProps;
    label: React.ReactNode;
    location: React.ReactNode;
}

export interface ILineItem {
    LineId: string;
    LineItem: INodeProps;
    item?: React.ReactNode;
    pickUpAtStore?: IPickUpAtStore;
}

export interface ILineItemDeliveryGroup {
    LineItemDeliveryGroup: INodeProps;
    LineItemList: INodeProps;
    heading: React.ReactNode;
    lineItems: ILineItem[];
}

export interface ILineItems {
    LineItems: INodeProps;
    Header: INodeProps;
    heading: React.ReactNode;
    editLink: React.ReactNode;
    itemsForPickup?: ILineItemDeliveryGroup;
    itemsForShip?: ILineItemDeliveryGroup;
}

// tslint:disable-next-line:max-func-body-length
export const getLineItems = (input: ICheckoutProps<ICheckoutData>, telemetryContent?: ITelemetryContent): ILineItems | undefined => {
    const pickupDeliveryModeCode = get(input, 'context.request.channel.PickupDeliveryModeCode');
    const _getDeliveryLocation = (cartLine: CartLine): string => {
        const orgUnitLocations = get(input, 'data.orgUnitLocations.result');
        if (!cartLine.FulfillmentStoreId || !orgUnitLocations) {
            return '';
        }

        const locationMatch = (orgUnitLocations || []).find((location: OrgUnitLocation): boolean => {
            return location.OrgUnitNumber === cartLine.FulfillmentStoreId;
        });

        return locationMatch && locationMatch.OrgUnitName;
    };

    const _getProduct = (productId: number): SimpleProduct | undefined => {
        const products = get(input, 'data.products.result') || [];
        return products.find((_product: SimpleProduct) => {
            return productId === _product.RecordId;
        });
    };

    const _getLineItemComponent = (cartLine: CartLine): JSX.Element | undefined => {
        const product = cartLine.ProductId && _getProduct(cartLine.ProductId);
        const {
            id,
            typeName,
            context,
            config: { imageSettings, showShippingChargesForLineItems },
            resources: {
                quantityDisplayString,
                productDimensionTypeColor,
                productDimensionTypeSize,
                productDimensionTypeStyle,
                configString,
                inputQuantityAriaLabel,
                discountStringText,
                shippingCharges,
            },
            context: {
                request: { gridSettings }
            }
        } = input;

        if (!product) {
            return;
        }

        return (
            <CartLineItemComponent
                id={id}
                typeName={typeName}
                context={context}
                resources={{
                    sizeString: productDimensionTypeSize,
                    colorString: productDimensionTypeColor,
                    styleString: productDimensionTypeStyle,
                    quantityDisplayString,
                    configString,
                    inputQuantityAriaLabel,
                    discountStringText,
                    originalPriceText:'',
                    currentPriceText:'',
                    shippingChargesText: shippingCharges,
                }}
                isQuantityEditable={false}
                imageSettings={imageSettings!}
                gridSettings={gridSettings!}
                productUrl={getProductUrlSync(product, context.actionContext, undefined)}
                primaryImageUrl={product.PrimaryImageUrl}
                data={{
                    cartLine: cartLine,
                    product: product
                }}
                showShippingChargesForLineItems = {showShippingChargesForLineItems}
                telemetryContent = {telemetryContent}
            />
        );
    };

    const _getPickUpAtStoreComponents = (pickupDeliveryLocation: string): IPickUpAtStore => {
        const {
            resources: { pickUpAtStoreWithLocationText }
        } = input;

        return {
            PickUpAtStore: { className: 'ms-checkout__pick-up-at-store' },
            label: <span className='ms-checkout__store-label'>{pickUpAtStoreWithLocationText}</span>,
            location: <div className='ms-checkout__store-location'>{pickupDeliveryLocation}</div>
        };
    };

    const _getLineItemsComponents = (items: CartLine[]): ILineItem[] => {
        return items.map(cartLine => {
            const pickupDeliveryLocation = _getDeliveryLocation(cartLine);
            const isPickUp = (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode === pickupDeliveryModeCode : false;
            return {
                LineId: cartLine.LineId || '',
                LineItem: { className: 'ms-checkout__line-item' },
                item: _getLineItemComponent(cartLine),
                pickUpAtStore: isPickUp ? _getPickUpAtStoreComponents(pickupDeliveryLocation) : undefined
            };
        });
    };

    const _getGroupTitleComponent = (count: number, type: deliveryType): string => {
        const {
            resources: {
                itemLabel,
                itemsLabel,
                inStorePickUpLabel,
                shippingCountCheckoutLineItem
            }
        } = input;

        const suffix = count > 1 ? itemsLabel : itemLabel;
        const title = type === 'ship' ? shippingCountCheckoutLineItem : inStorePickUpLabel;
        return title.replace('{count}', count.toString()).replace('{suffix}', suffix);
    };

    const _countItems = (items: CartLine[]): number => {
        return items.reduce((count, item) => {
            return count + (item.Quantity || 0);
            // tslint:disable-next-line:align
        }, 0);
    };

    const _filterItemsByDiliveryType = (type: deliveryType): CartLine[] => {
        const cart = get(input, 'data.checkout.result.checkoutCart.cart');
        return type === 'ship'
            ? cart.CartLines.filter((cartLine: CartLine) => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine)
            : cart.CartLines.filter((cartLine: CartLine) => cartLine.DeliveryMode === pickupDeliveryModeCode);
    };

    const _getLineItemsByDeliveryType = (type: deliveryType): ILineItemDeliveryGroup | undefined => {
        if ((pickupDeliveryModeCode === '' || pickupDeliveryModeCode === undefined) && type === 'pickup') {
            return;
        }

        const items = _filterItemsByDiliveryType(type);

        if (items.length === 0) {
            return undefined;
        }

        const count = _countItems(items);
        const title = _getGroupTitleComponent(count, type);

        return {
            LineItemDeliveryGroup: { className: classnames('ms-checkout__line-items-delivery-group', type) },
            LineItemList: { className: 'ms-checkout__line-items-list' },
            heading: <div className='ms-checkout__line-items-group-title'>{title}</div>,
            lineItems: _getLineItemsComponents(items)
        };
    };

    const _getLineItems = (): ILineItems | undefined => {
        const {
            context,
            config: { lineItemsHeading },
            data: { products },
            resources: { editCartText }
        } = input;

        const payLoad = getPayloadObject('click', telemetryContent!, TelemetryConstant.EditCart);
        const attribute = getTelemetryAttributes(telemetryContent!, payLoad);
        const cart = get(input, 'data.checkout.result.checkoutCart.cart');

        if (!cart || !cart.CartLines || !cart.CartLines.length || !products) {
            return undefined;
        }

        return {
            LineItems: { className: 'ms-checkout__line-items' },
            Header: { className: 'ms-checkout__line-items-header' },
            heading: lineItemsHeading && lineItemsHeading.text && (
                <Msdyn365.Text
                    className='ms-checkout__line-items-heading'
                    {...lineItemsHeading}
                    tag={lineItemsHeading.tag || 'h2'}
                    text={lineItemsHeading.text}
                    editProps={{ onEdit: handleLineItemHeadingChange, requestContext: context.request }}
                />
            ),
            editLink: (
                <Button
                    className='ms-checkout__line-items-edit-cart-link'
                    title={editCartText}
                    color='link'
                    href={Msdyn365.getUrlSync('cart', context.actionContext) || ''}
                    {...attribute}
                >
                    {editCartText}
                </Button>
            ),
            itemsForPickup: _getLineItemsByDeliveryType('pickup'),
            itemsForShip: _getLineItemsByDeliveryType('ship')
        };
    };

    const handleLineItemHeadingChange = (event: Msdyn365.ContentEditableEvent) => {
        const {
            config: { lineItemsHeading }
        } = input;
        lineItemsHeading!.text = event.target.value;
    };

    return _getLineItems();
};
