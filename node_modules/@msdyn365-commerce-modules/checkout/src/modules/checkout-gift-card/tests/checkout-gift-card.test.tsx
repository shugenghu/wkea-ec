/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { mount, render, shallow } from 'enzyme';
// tslint:disable-next-line:no-unused-variable
import * as React from 'react';

import {
    buildHydratedMockActionContext,
    buildMockModuleProps,
    IActionContext,
    IAny,
    ICoreContext,
    IGeneric
} from '@msdyn365-commerce/core';
import { ICheckoutState, IGiftCardExtend } from '@msdyn365-commerce/global-state';
import { AsyncResult, CardTypeInfo, Cart } from '@msdyn365-commerce/retail-proxy';
import * as StoreOperationsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import { TenderType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';

import CheckoutGiftCard, { CheckoutGiftCard as CheckoutGiftCardClass, ICheckoutGiftCardModuleProps } from '../checkout-gift-card';
import { ICheckoutGiftCardData } from '../checkout-gift-card.data';
import { ICheckoutGiftCardConfig, ICheckoutGiftCardResources, showAdditionalFields } from '../checkout-gift-card.props.autogenerated';
import View from '../checkout-gift-card.view';

jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');

let mockCart: Cart;
let mockGiftCardTypes: CardTypeInfo[];
let mockGiftCard1: IGiftCardExtend;
let mockGiftCard2: IGiftCardExtend;
let mockGiftCardEmpty: IGiftCardExtend;
let mockData: ICheckoutGiftCardData;
let mockConfig: ICheckoutGiftCardConfig;
let mockContext: ICoreContext;
let mockActions: IGeneric<IAny>;
let actionContext: IActionContext;
let mockResources: ICheckoutGiftCardResources;
let mockTenderTypes: TenderType[];

describe('CheckoutGiftCard', () => {
    // tslint:disable-next-line:max-func-body-length
    beforeEach(() => {
        mockCart = {
            Id: '123',
            TotalAmount: 500
        };

        mockGiftCardTypes = [
            {
                IsPinRequired: false,
                IsExpirationDateRequired: false,
                PaymentMethodId: '13'
            }
        ];

        mockGiftCard1 = {
            Id: 'abc',
            Balance: 100,
            BalanceCurrencyCode: 'USD',
            BalanceInCardCurrency: 100,
            CardCurrencyCode: 'USD'
        };

        mockGiftCard2 = {
            Id: 'efg',
            Balance: 100,
            BalanceCurrencyCode: 'USD',
            BalanceInCardCurrency: 100,
            CardCurrencyCode: 'USD'
        };

        mockGiftCardEmpty = {
            Id: 'empty',
            Balance: 0,
            BalanceCurrencyCode: 'USD',
            BalanceInCardCurrency: 0,
            CardCurrencyCode: 'USD'
        };

        mockData = {
            // @ts-ignore impartial mock
            checkout: {
                status: 'SUCCESS',
                result: {
                    // @ts-ignore impartial mock
                    checkoutCart: {
                        cart: mockCart
                    },
                    giftCardExtends: [],
                    addGiftCard: input => {
                        // @ts-ignore impartial mock
                        mockData.checkout.result.giftCardExtends = [input.giftCard, ...mockData.checkout.result.giftCardExtends];
                    },
                    updateTenderLine: input => {
                        // @ts-ignore impartial mock
                        mockData.checkout.result?.tenderLine = {TenderTypeId: '8'};
                    },
                    removeGiftCard: input => {
                        // @ts-ignore impartial mock
                        mockData.checkout.result.giftCardExtends = mockData.checkout.result.giftCardExtends.filter(
                            giftCard => giftCard.Id !== input.giftCardNumber
                        );
                    },
                    loyaltyAmount: 0
                }
            } as AsyncResult<ICheckoutState>
        };

        mockActions = {};

        actionContext = buildHydratedMockActionContext();

        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields
        mockContext = {
            actionContext,
            // @ts-ignore: Don't throw even though requestContext type is not correct
            request: {
                market: 'AB',
                // @ts-ignore: optOutWebActivityTracking should not be required
                user: {
                    isAuthenticated: true,
                    token: 'xxx'
                }
            },
            // @ts-ignore: Using partial for testing
            cultureFormatter: {
                formatCurrency: jest.fn(price => `$${price}`)
            },
            app: {
                config: {
                    giftCardSupported: 'internal'
                }
            }
        };

        mockConfig = {
            showAdditionalFields: undefined
        };

        mockResources = {
            emptyInputError: 'Please enterd a gift card number',
            invalidCodeError: 'Invalid gift card code entered',
            invalidCardInfoError: 'Invalid gift card information entered',
            invalidCardTypeError: 'The gift card type is not suported',
            noCardPinError: 'Gift card PIN is required',
            noCardExpError: 'Gift card expiration date is required',
            duplicatedCodeError: 'You already entered this gift card',
            noBalanceError: 'Gift card has no balance left',
            giftCardFormLabel: 'Gift card',
            giftCardNumberLabel: 'Gift card number',
            giftCardPinLabel: 'PIN',
            giftCardExpLabel: 'Expiration date',
            giftCardAlertLabel: 'You gift card may or may not include these fields',
            removeGiftCardButton: 'Remove',
            applyGiftCardButton: 'Apply',
            enteredGiftCardLabel: 'Gift card ending in',
            giftCardAvailableBalanceLabel: 'Available balance',
            giftCardPinPlaceholderText: 'PIN',
            giftCardExpPlaceholderText: 'MM/YYYY'
        };

        mockTenderTypes = [
            {
                OperationId: 214,
                ConnectorId: 'Adyen',
                TenderTypeId: '12'
            },
            {
                OperationId: 214,
                ConnectorId: '',
                TenderTypeId: '13'
            },
            {
                OperationId: 214,
                ConnectorId: '',
                TenderTypeId: '8'
            },
        ] as TenderType[];

        // @ts-ignore: Jest Mocking Confuses TS Complier
        StoreOperationsDataActions.resolveCardTypesAsync.mockImplementation((context, id) => {
            return Promise.resolve(mockGiftCardTypes);
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        StoreOperationsDataActions.getGiftCardAsync.mockImplementation((context, id, typeId, pin, month, year) => {
            if (id === 'abc') {
                return Promise.resolve(mockGiftCard1);
            } else if (id === 'empty') {
                return Promise.resolve(mockGiftCardEmpty);
            }
            return Promise.reject(new Error('Not found'));
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        StoreOperationsDataActions.getTenderTypesAsync.mockImplementation(async () => mockTenderTypes);
    });

    it('renders correctly for auth user', () => {
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = render(<CheckoutGiftCard {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly for auth user with app setting support internal', () => {
        const mockConfigExternalGiftCard = {
            showAdditionalFields: showAdditionalFields.pinAndExpirationDate
        };

        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfigExternalGiftCard, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = render(<CheckoutGiftCard {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly for auth user with app setting support external', () => {
        const mockConfigExternalGiftCard = {
            showAdditionalFields: showAdditionalFields.pinAndExpirationDate
        };

        mockContext = {
            actionContext,
            // @ts-ignore: Don't throw even though requestContext type is not correct
            request: {
                market: 'AB',
                // @ts-ignore: optOutWebActivityTracking should not be required
                user: {
                    isAuthenticated: true,
                    token: 'xxx'
                }
            },
            // @ts-ignore: Using partial for testing
            cultureFormatter: {
                formatCurrency: jest.fn(price => `$${price}`)
            },
            app: {
                config: {
                    giftCardSupported: 'external'
                }
            }
        };

        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfigExternalGiftCard, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = render(<CheckoutGiftCard {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly for guest user', () => {
        mockContext.request.user.isAuthenticated = false;
        mockContext.request.user.token = '';
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = render(<CheckoutGiftCard {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with free cart', () => {
        mockData = {
            // @ts-ignore impartial mock
            checkout: {
                status: 'SUCCESS',
                result: {
                    // @ts-ignore impartial mock
                    checkoutCart: {
                        cart: {
                            Id: '123',
                            TotalAmount: 0
                        }
                    }
                }
            } as AsyncResult<ICheckoutState>
        };

        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = render(<CheckoutGiftCard {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with loyalty points', () => {
        mockData = {
            // @ts-ignore impartial mock
            checkout: {
                status: 'SUCCESS',
                result: {
                    // @ts-ignore impartial mock
                    checkoutCart: {
                        cart: {
                            Id: '123',
                            TotalAmount: 100
                        }
                    },
                    loyaltyAmount: 100
                }
            } as AsyncResult<ICheckoutState>
        };

        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = render(<CheckoutGiftCard {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with gift cards entered', () => {
        const mockDataWithGiftCards: ICheckoutGiftCardData = {
            // @ts-ignore impartial mock
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: mockCart
                    },
                    giftCardExtends: [mockGiftCard1, mockGiftCard2]
                }
            } as AsyncResult<ICheckoutState>
        };
        const moduleProps = {
            ...(buildMockModuleProps(mockDataWithGiftCards, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = render(<CheckoutGiftCard {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('disables the apply button when input is empty', () => {
        // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        expect(button.is('[disabled]')).toBe(true);
    });

    it('renders correctly when ready', () => {
        const mockDataWithGiftCards: ICheckoutGiftCardData = {
            // @ts-ignore impartial mock
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: mockCart
                    },
                    giftCardExtends: [mockGiftCard1, mockGiftCard2]
                }
            } as AsyncResult<ICheckoutState>
        };
        const moduleProps = {
            ...(buildMockModuleProps(mockDataWithGiftCards, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View,
            moduleState: {
                isReady: true,
                init: jest.fn()
            }
        };
        // @ts-ignore
        const component = render(<CheckoutGiftCardClass {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('shows error when apply an invalid gift card number', async () => {
        // @ts-ignore: mockContext
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        const giftCardNumber = 'xxx';
        // @ts-ignore
        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');

        // And apply 'abc'
        input.simulate('change', {
            target: {
                value: giftCardNumber
            }
        });
        expect(component.state('errorMessage')).toBe('');
        expect(component.state('giftCardNumber')).toBe(giftCardNumber);
        button.simulate('click');

        return Promise.resolve(component)
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => {
                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
                expect(component.state('errorMessage')).toBe(mockResources.invalidCardInfoError);
                // unmount after complete state update
                component.unmount();
            });
    });

    it('shows error when apply a duplicate gift card number', () => {
        const mockDataWithGiftCard: ICheckoutGiftCardData = {
            // @ts-ignore impartial mock
            checkout: {
                status: 'SUCCESS',
                result: {
                    checkoutCart: {
                        cart: mockCart
                    },
                    giftCardExtends: [mockGiftCard1]
                }
            } as AsyncResult<ICheckoutState>
        };
        const moduleProps = {
            ...(buildMockModuleProps(
                mockDataWithGiftCard,
                mockActions,
                mockConfig,
                // @ts-ignore: mockContext
                mockContext
            ) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };

        const giftCardNumber = 'abc';
        // @ts-ignore
        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');

        // And apply 'abc'
        input.simulate('change', {
            target: { value: giftCardNumber }
        });
        expect(component.state('errorMessage')).toBe('');
        button.simulate('click');

        expect(component.state('giftCardNumber')).toBe(giftCardNumber);
        expect(component.state('errorMessage')).toBe(mockResources.duplicatedCodeError);
        expect(StoreOperationsDataActions.getTenderTypesAsync).not.toBeCalled();
    });

    // tslint:disable-next-line:max-func-body-length
    it('shows error for empty input', async () => {
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));
        const instance = component.instance();

        // test empty input
        // @ts-ignore
        instance.applyGiftCard();
        expect(component.state('errorMessage')).toBe('Please enterd a gift card number');
    });

    it('handles empty gift card', async () => {
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');

        // test empty card
        input.simulate('change', {
            target: {
                value: 'empty'
            }
        });
        button.simulate('click');

        return Promise.resolve(component)
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => {
                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
                expect(component.state('errorMessage')).toBe('Gift card has no balance left');
                component.unmount();
            });
    });

    it('handles invalid gift card', async () => {
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        // @ts-ignore
        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');

        // test invalid card
        input.simulate('change', {
            target: {
                value: 'aaa'
            }
        });
        button.simulate('click');

        return Promise.resolve(component)
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => {
                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
                expect(component.state('errorMessage')).toBe('Invalid gift card information entered');
                component.unmount();
            });
    });

    // tslint:disable-next-line:max-func-body-length
    it('adds a gift card when enters an valid gift card', async () => {
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ICheckoutGiftCardModuleProps),
            resources: mockResources,
            renderView: View
        };
        const giftCardNumber = 'abc';
        // @ts-ignore
        const component = mount(shallow(<CheckoutGiftCard {...moduleProps} />).get(0));
        const button = component.find('button.ms-checkout-gift-card__btn-apply');
        const input = component.find('input.ms-checkout-gift-card__input-text');
        const instance = component.instance();

        // @ts-ignore cover function
        instance.onSubmit();

        // And apply 'abc'
        input.simulate('change', {
            target: {
                value: giftCardNumber
            }
        });
        expect(component.state('errorMessage')).toBe('');
        expect(component.state('isFetchingGiftCard')).toBe(false);
        expect(component.state('giftCardNumber')).toBe(giftCardNumber);
        button.simulate('click');
        expect(component.state('errorMessage')).toBe('');

        return Promise.resolve(component)
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => Promise.resolve(component))
            .then(() => {
                component.update();
                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();
                expect(component.state('errorMessage')).toBe('');
                expect(component.text()).toContain('abc');
                const giftCardItem = component.find('.ms-checkout-gift-card__item-text');
                expect(giftCardItem.length).toBe(1);

                // @ts-ignore cover function
                instance.onSubmit();
                // @ts-ignore cover function
                instance.onEdit();
                // @ts-ignore cover function
                instance.onCancel();

                // test duplicated card
                input.simulate('change', {
                    target: {
                        value: giftCardNumber
                    }
                });
                button.simulate('click');
                expect(StoreOperationsDataActions.getTenderTypesAsync).toBeCalled();

                expect(component.state('errorMessage')).toBe('You already entered this gift card');
            })
            .then(() => {
                // test remove gift card
                // @ts-ignore
                const spy = jest.spyOn(instance, 'removeGiftCard');
                const removeButton = component.find('button.ms-checkout-gift-card__btn-remove');
                removeButton.simulate('click');

                // force update
                input.simulate('change', {
                    target: {
                        value: 'empty'
                    }
                });
                component.update();
                const noGiftCardItem = component.find('.ms-checkout-gift-card__item-text');
                expect(noGiftCardItem.length).toBe(0);

                component.unmount();
            });
    });

    afterEach(() => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        StoreOperationsDataActions.getGiftCardAsync.mockReset();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        StoreOperationsDataActions.getTenderTypesAsync.mockReset();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        StoreOperationsDataActions.resolveCardTypesAsync.mockReset();
    });

    afterAll(() => {
        jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');
    });
});
