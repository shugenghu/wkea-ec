/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as React from 'react';

import { buildHydratedMockActionContext, buildMockModuleProps, IActionContext, ICoreContext } from '@msdyn365-commerce/core';
import { ICheckoutState } from '@msdyn365-commerce/global-state';
import { AsyncResult } from '@msdyn365-commerce/retail-proxy';
import { mount, render, shallow } from 'enzyme';
import CheckoutGuestProfile, { ICheckoutGuestProfileModuleProps } from '../checkout-guest-profile';
import { ICheckoutGuestProfileData } from '../checkout-guest-profile.data';
import { ICheckoutGuestProfileConfig, ICheckoutGuestProfileResources } from '../checkout-guest-profile.props.autogenerated';
import renderView from '../checkout-guest-profile.view';

const mockConfig: ICheckoutGuestProfileConfig = {};

const mockResources: ICheckoutGuestProfileResources = {
    emailLabel: 'Email address for order questions',
    emailErrortext: 'Please enter a valid email',
    saveBtnLabel: 'Save',
    editBtnLabel: 'Change',
    cancelBtnLabel: 'Cancel'
};

let mockData: ICheckoutGuestProfileData;

let mockContext: ICoreContext;

describe('CheckoutGuestProfile', () => {
    let moduleProps: ICheckoutGuestProfileModuleProps;
    let actionContext: IActionContext;
    beforeEach(() => {
        mockData = {
            checkout: {
                status: 'SUCCESS',
                result: {
                    guestCheckoutEmail: '',
                    updateGuestCheckoutEmail: input => {
                        // @ts-ignore
                        mockData.checkout.result!.guestCheckoutEmail = input.newGuestCheckoutEmail;
                    },
                    checkoutCart: {
                        cart: {}
                    }
                }
            } as AsyncResult<ICheckoutState>
        };

        actionContext = buildHydratedMockActionContext();
    });

    describe('Auth user', () => {
        beforeEach(() => {
            mockContext = {
                actionContext,
                // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields
                request: {
                    // @ts-ignore: optOutWebActivityTracking
                    user: {
                        token: 'asdf',
                        isAuthenticated: true,
                        emailAddress: 'test@outlook.com'
                    }
                }
            };
            moduleProps = {
                ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutGuestProfileModuleProps),
                resources: mockResources,
                // @ts-ignore
                renderView
            };
        });

        it('renders correctly', () => {
            const component = render(<CheckoutGuestProfile {...moduleProps} />);
            expect(component).toMatchSnapshot();
        });

        it('shows account email address', async () => {
            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));
            const inputElements = component.getDOMNode().getElementsByTagName('input');
            expect(component.state('email')).toBe('test@outlook.com');
            expect(inputElements[0].value).toBe('test@outlook.com');

            // tslint:disable-next-line
            await new Promise(resolve => setTimeout(resolve, 0));

            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);

            component.unmount();
        });
    });

    describe('Guest user', () => {
        beforeEach(() => {
            // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields
            mockContext = {
                actionContext
            };
            moduleProps = {
                ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutGuestProfileModuleProps),
                resources: mockResources
            };
        });

        it('renders correctly', () => {
            const component = render(<CheckoutGuestProfile {...moduleProps} />);
            expect(component).toMatchSnapshot();
        });

        it('has no error when initial with empty email', () => {
            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));

            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);

            // @ts-ignore
            component.instance().onSubmit();

            // It shows error after click save button for empty email
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(true);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);

            component.unmount();
        });

        it('has no error when email is valid', () => {
            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));

            // @ts-ignore
            component.instance().onChange('email@email.com');

            expect(component.state('email')).toBe('email@email.com');
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);

            // @ts-ignore
            component.instance().onSubmit();

            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);

            component.unmount();
        });

        it('has no error when email type - test@test.co.in is valid', () => {
            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));

            // @ts-ignore
            component.instance().onChange('test@email.co.in');

            expect(component.state('email')).toBe('test@email.co.in');
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);

            // @ts-ignore
            component.instance().onSubmit();

            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);

            component.unmount();
        });

        it('has error when email is not valid', () => {
            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));

            // @ts-ignore
            component.instance().onChange('email@email');
            // @ts-ignore
            component.instance().onSubmit();

            expect(component.state('email')).toBe('email@email');
            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(true);
            expect(component.props().moduleState.getModule(moduleProps.id).isUpdating).toBe(true);

            component.unmount();
        });
    });

    describe('Checkout cart', () => {
        beforeEach(() => {
            // @ts-ignore: we only need to mock the actionContext, ignore the rest required fields
            mockContext = {
                actionContext
            };
            mockData = {
                checkout: {
                    status: 'SUCCESS',
                    result: {
                        guestCheckoutEmail: '',
                        updateGuestCheckoutEmail: input => {
                            // @ts-ignore
                            mockData.checkout.result!.guestCheckoutEmail = input.newGuestCheckoutEmail;
                        },
                        checkoutCart: {
                            cart: {
                                ReceiptEmail: 'test@outlook.com'
                            }
                        }
                    }
                } as AsyncResult<ICheckoutState>
            };
            moduleProps = {
                ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ICheckoutGuestProfileModuleProps),
                resources: mockResources,
                // @ts-ignore
                renderView
            };
        });

        it('shows email address saved in cart', async () => {
            const component = mount(shallow(<CheckoutGuestProfile {...moduleProps} />).get(0));

            // tslint:disable-next-line
            await new Promise(resolve => setTimeout(resolve, 0));

            expect(component.props().moduleState.getModule(moduleProps.id).hasError).toBe(false);
            expect(component.props().moduleState.getModule(moduleProps.id).isReady).toBe(true);

            component.unmount();
        });
    });
});
