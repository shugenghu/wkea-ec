/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------
 */
/// <reference types="jest" />
import { IModuleStateManager, updateModuleStates } from '@msdyn365-commerce-modules/checkout-utilities';
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockModuleProps, buildMockRequest, IRequestContextUser } from '@msdyn365-commerce/core';
import { ICheckoutState } from '@msdyn365-commerce/global-state';
import { Cart, Customer, CustomerBalances } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import * as React from 'react';
import * as renderer from 'react-test-renderer';
import CheckoutCustomerAccountPayment, { ICheckoutCustomerAccountPaymentViewProps } from '../checkout-customer-account-payment';
import { ICheckoutCustomerAccountPaymentData } from '../checkout-customer-account-payment.data';
import { ICheckoutCustomerAccountPaymentResources } from '../checkout-customer-account-payment.props.autogenerated';

const mockCart = {
    Id: 'jWvjTh2wyxWnopUGQmzpkGoQVuu5pUh6',
    TotalAmount: 479.25,
    CartLines: [
        {
            LineId: '2',
            ProductId: 2,
            Quantity: 2,
            Price: 300,
            ExtendedPrice: 450,
            TaxAmount: 29.25,
            ItemTaxGroupId: 'RP',
            TotalAmount: 479.25,
            NetAmountWithoutTax: 450,
            NetPrice: 600,
            DiscountAmountWithoutTax: 150,
            DiscountAmount: 150
        }
    ]
} as Cart;

// @ts-ignore partial class
let mockCheckoutState: ICheckoutState = {
    // @ts-ignore partial class
    checkoutCart: {
        cart: mockCart
    },
    loyaltyAmount: 50
};

// @ts-ignore partial class
const mockReadyModuleStates = {
    mock_id: {
        id: 'mock-id',
        init: jest.fn(),
        hasModuleState: true,
        hasExternalSubmitGroup: true,
        hasError: false,
        hasInitialized: true,
        isReady: true,
        isUpdating: false,
        isDisabled: false,
        onEdit: jest.fn(),
        onSubmit: jest.fn(),
        onCancel: jest.fn(),
        setHasError: jest.fn(),
        status: 'Ready'
    }
};

// @ts-ignore partial class
const mockEditModuleState: IModuleStateManager = {
    id: 'mock-id',
    init: jest.fn(),
    hasModuleState: true,
    hasExternalSubmitGroup: true,
    hasError: false,
    hasInitialized: true,
    isReady: false,
    isUpdating: true,
    isDisabled: false,
    onEdit: jest.fn(),
    onSubmit: jest.fn(),
    onCancel: jest.fn(),
    setHasError: jest.fn()
};

const mockCustomer: Customer = {
    AccountNumber: '005221',
    Name: 'Will Havelin',
    MandatoryCreditLimit: true,
    AllowOnAccountPayment: true
};

const mockCustomer2: Customer = {
    AccountNumber: '005221',
    Name: 'Will Havelin',
    MandatoryCreditLimit: false,
    AllowOnAccountPayment: true
};

const mockCreditBalances: CustomerBalances = {
    Balance: 0,
    PendingBalance: 0,
    CreditLimit: 100,
    InvoiceAccountBalance: 0,
    InvoiceAccountCreditLimit: 100,
    InvoiceAccountPendingBalance: 0
};

const mockData: ICheckoutCustomerAccountPaymentData = {
    checkout: wrapInResolvedAsyncResult(mockCheckoutState),
    customerInformation: wrapInResolvedAsyncResult(mockCustomer),
    creditBalances: wrapInResolvedAsyncResult(mockCreditBalances)
};

const mockData2: ICheckoutCustomerAccountPaymentData = {
    checkout: wrapInResolvedAsyncResult(mockCheckoutState),
    customerInformation: wrapInResolvedAsyncResult(mockCustomer2),
    creditBalances: wrapInResolvedAsyncResult(mockCreditBalances)
};

// @ts-ignore partial class
const mockTelemetry: ITelemetery = {
    information: jest.fn()
};

const mockUser: IRequestContextUser = {customerAccountNumber: '005221', isAuthenticated: true, token: '', optOutWebActivityTracking: false};
const plaftormWithFeature = {enableCustomerAccoutPayment: 'all'};
const appWithFeature = {plaftorm: plaftormWithFeature};
const mockRequestWithFeature = buildMockRequest({user: mockUser, app: appWithFeature });

const mockActionContextWithFeature = buildHydratedMockActionContext({requestContext: mockRequestWithFeature});

const mockActionContextWithoutFeature = buildHydratedMockActionContext({telemetry: mockTelemetry});

// @ts-ignore
const mockContextWithFeature: ICoreContext = {
    actionContext: mockActionContextWithFeature,
    cultureFormatter: {
        formatCurrency: jest.fn((price, _foo) => `$${price}`)
    },
    request: {
        locale: 'en-us',
        user: {
            isAuthenticated: true,
            customerAccountNumber: '005221'
        },
        channel: {
            Currency: 'USD'
        }
    },
    telemetry: mockTelemetry
};

// @ts-ignore
const mockContextWithoutFeature: ICoreContext = {
    actionContext: mockActionContextWithoutFeature,
    cultureFormatter: {
        formatCurrency: jest.fn((price, _foo) => `$${price}`)
    },
    request: {
        locale: 'en-us',
        user: {
            isAuthenticated: true,
            customerAccountNumber: '005221'
        },
        channel: {
            Currency: 'USD'
        }
    },
    telemetry: mockTelemetry
};

const mockResources: ICheckoutCustomerAccountPaymentResources = {
    addPaymentButtonLabel: 'Pay with customer account',
    inputAmountLabel: 'Customer account payment',
    inputAmountAriaLabel: 'amount to pay',
    customerSinceLabel: 'Customer since',
    accountCreditLabel: 'account credit',
    inputAmountSummaryLabel: 'Account balance',
    invalidAmountMessage: 'Invalid amount',
    creditDetailsSectionLabel: 'Current order preview',
    availableCreditLabel: 'Total available credit',
    orderTotalLabel: 'Current order total',
    creditExcessLabel: 'Excess credit',
    appliedCustomerAccountPaymentLabel: 'Applied:',
    removeCustomerAccountPaymentLabel: 'Remove'
};

const mockActions = {};

describe('CheckoutCustomerAccountPayment', () => {
    beforeEach(() => {
        mockCheckoutState = {
            // @ts-ignore partial class
            checkoutCart: {
                cart: mockCart
            },
            loyaltyAmount: 50
        };
    });

    it('renders correctly when feature disabled', () => {

        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, {}, mockContextWithoutFeature) as ICheckoutCustomerAccountPaymentViewProps),
            resources: mockResources
        };
        moduleProps.context = mockContextWithoutFeature;
        moduleProps.id = 'mock_id';

        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('renders correctly when feature enabled in edit mode', () => {
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, {}, mockContextWithFeature) as ICheckoutCustomerAccountPaymentViewProps),
            resources: mockResources
        };
        moduleProps.context = mockContextWithFeature;

        // @ts-ignore: Using partial for testing
        updateModuleStates({mockEditModuleState}, moduleProps.context.actionContext);

        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('renders correctly when feature enabled in edit mode when credit limit is optional', () => {
        const moduleProps = {
            ...(buildMockModuleProps(mockData2, mockActions, {}, mockContextWithFeature) as ICheckoutCustomerAccountPaymentViewProps),
            resources: mockResources
        };
        moduleProps.context = mockContextWithFeature;

        // @ts-ignore: Using partial for testing
        updateModuleStates({mockEditModuleState}, moduleProps.context.actionContext);

        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);
        component;
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('renders correctly when feature enabled in view mode', () => {
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, {}, mockContextWithFeature) as ICheckoutCustomerAccountPaymentViewProps),
            resources: mockResources
        };
        moduleProps.context = mockContextWithFeature;

        // @ts-ignore: Using partial for testing
        updateModuleStates(mockReadyModuleStates, moduleProps.context.actionContext);

        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('renders correctly (as in does not render) when there is no cart', () => {

        mockCheckoutState = {
            // @ts-ignore partial class
            checkoutCart: {
            }
        };
        const moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, {}, mockContextWithFeature) as ICheckoutCustomerAccountPaymentViewProps),
            resources: mockResources
        };
        moduleProps.context = mockContextWithFeature;

        // @ts-ignore: Using partial for testing
        updateModuleStates({mockEditModuleState}, moduleProps.context.actionContext);

        const component: renderer.ReactTestRenderer = renderer.create(<CheckoutCustomerAccountPayment {...moduleProps} />);
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
});
