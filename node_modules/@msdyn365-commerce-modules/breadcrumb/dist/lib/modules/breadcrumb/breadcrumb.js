import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import MsDyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';
import { Link } from './components/link';
import { Separator } from './components/separator';
class Breadcrumb extends React.PureComponent {
    constructor() {
        super(...arguments);
        this._pageType = this.props.context.request.urlTokens.pageType;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this._getRootLink = () => {
            const { root } = this.props.config;
            if (!root || !root.linkUrl || !root.linkUrl.destinationUrl) {
                this.props.context.telemetry.error('BreadCrumb link url content is empty, link wont render');
                return null;
            }
            return (React.createElement(Link, { text: root.linkText, ariaLabel: root.ariaLabel || root.linkText, href: root.linkUrl && root.linkUrl.destinationUrl, index: '1', className: 'ms-breadcrumb_link', telemetryContent: this.telemetryContent }));
        };
        this._getCustomBreadcrumbLinks = (itemPosition) => {
            const { links } = this.props.config;
            if (!links || !(links.length > 0)) {
                this.props.context.telemetry.error('BreadCrumb links content is empty, links wont render');
                return null;
            }
            return (links.map((value, index) => {
                itemPosition++;
                return (React.createElement(Link, { key: index, text: value.linkText, ariaLabel: value.ariaLabel || value.linkText, href: value.linkUrl && value.linkUrl.destinationUrl, index: { itemPosition }.toString(), className: 'ms-breadcrumb_link', telemetryContent: this.telemetryContent }));
            }));
        };
        this._getCategoryHierarchy = (itemPosition) => {
            const { data } = this.props;
            const categoryHierarchy = data.categoryHierarchy.result;
            if (!categoryHierarchy) {
                this.props.context.telemetry.error('Category Hierarchy content is empty, module wont render');
                return null;
            }
            return (categoryHierarchy.map((value, index) => {
                itemPosition++;
                return (React.createElement(Link, { key: index, text: value.Name, ariaLabel: value.Name, href: value.Url, index: itemPosition.toString(), className: 'ms-breadcrumb_link', noclick: index === categoryHierarchy.length - 1, telemetryContent: this.telemetryContent }));
            }));
        };
        this._getPDPLinks = (itemPosition) => {
            const { data, config } = this.props;
            const categoryHierarchy = data.categoryPaths.result;
            const product = data.product.result;
            const url = this.props.context.request.url.requestUrl.href;
            if (!categoryHierarchy) {
                this.props.context.telemetry.error('Category path content is empty for the product');
                return null;
            }
            const links = [];
            categoryHierarchy.map((value, index) => {
                itemPosition++;
                links.push(React.createElement(Link, { key: index, text: value.Name, ariaLabel: value.Name, href: value.Url, index: itemPosition.toString(), className: 'ms-breadcrumb_link', telemetryContent: this.telemetryContent }));
            });
            if (product && !config.hideProductName) {
                itemPosition++;
                links.push(React.createElement(Link, { text: product.Name, ariaLabel: product.Name, href: url, index: itemPosition.toString(), noclick: true, className: 'ms-breadcrumb_link', telemetryContent: this.telemetryContent }));
            }
            return links;
        };
        this._goBack = () => {
            window.history.back();
        };
        this._getPDPBackButton = () => {
            const isBackAllowed = this.props.context && this.props.context.request && this.props.context.request.query && this.props.context.request.query.back;
            if (MsDyn365.isBrowser && (!isBackAllowed || document.referrer === '' || window.history.length < 2)) {
                return null;
            }
            return (React.createElement("a", { className: 'ms-breadcrumb-back-button', role: 'button', href: 'javascript:void(0);', onClick: this._goBack, "aria-label": this.props.resources.backToResultsText }, this.props.resources.backToResultsText));
        };
    }
    render() {
        const { className } = this.props.config;
        let rootLink = null;
        let breadcrumbLinks = null;
        let backButtonComponent = null;
        rootLink = this._getRootLink();
        const itemPosition = rootLink ? 1 : 0;
        if (this._pageType === 'Category') {
            breadcrumbLinks = this._getCustomBreadcrumbLinks(itemPosition);
            if (!breadcrumbLinks) {
                breadcrumbLinks = this._getCategoryHierarchy(itemPosition);
            }
        }
        else if (this._pageType === 'Product') {
            breadcrumbLinks = this._getCustomBreadcrumbLinks(itemPosition);
            if (!breadcrumbLinks) {
                const breaCrumbType = this.props.context.app.config.breadcrumbType;
                if (breaCrumbType === 'category') {
                    breadcrumbLinks = this._getPDPLinks(itemPosition);
                }
                if (breaCrumbType === 'categoryAndBack') {
                    backButtonComponent = this._getPDPBackButton();
                    breadcrumbLinks = this._getPDPLinks(itemPosition);
                }
                if (breaCrumbType === 'back') {
                    backButtonComponent = this._getPDPBackButton();
                    if (backButtonComponent === null) {
                        breadcrumbLinks = this._getPDPLinks(itemPosition);
                    }
                }
            }
        }
        else {
            breadcrumbLinks = this._getCustomBreadcrumbLinks(itemPosition);
        }
        const linkSeparator = React.createElement(Separator, { separator: '/' });
        const breadcrumbViewProps = {
            ...this.props,
            BreadcrumbContainer: {
                moduleProps: this.props,
                className: classnames('ms-breadcrumb', className),
                tag: 'nav',
                role: 'navigation',
            },
            BreadcrumbList: {
                tag: 'ol',
                className: 'ms-breadcrumb_list'
            },
            BreadcrumbListItem: {
                tag: 'li',
                className: 'ms-breadcrumb_item'
            },
            root: rootLink,
            links: breadcrumbLinks,
            backButton: backButtonComponent,
            separator: linkSeparator
        };
        return this.props.renderView(breadcrumbViewProps);
    }
}
export default Breadcrumb;
//# sourceMappingURL=breadcrumb.js.map