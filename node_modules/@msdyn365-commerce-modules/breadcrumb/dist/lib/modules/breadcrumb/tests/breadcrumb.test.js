import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import Breadcrumb from '../breadcrumb';
import BreadCrumbView from '../breadcrumb.view';
const mockConfig = {
    root: {
        linkText: 'Home',
        linkUrl: {
            destinationUrl: 'https://mocktest'
        },
        ariaLabel: 'Mock aria label'
    },
    links: [
        {
            linkText: 'My account',
            linkUrl: {
                destinationUrl: 'https://mocktest'
            },
            ariaLabel: 'Mock aria label'
        },
        {
            linkText: 'Order history',
            linkUrl: {
                destinationUrl: 'https://mocktest'
            },
            ariaLabel: 'Mock aria label'
        },
    ]
};
const mockConfigWithOnlyRoot = {
    root: {
        linkText: 'Home',
        linkUrl: {
            destinationUrl: 'https://mocktest'
        },
        ariaLabel: 'Mock aria label'
    }
};
const mockResources = {
    backToResultsText: 'Back'
};
const mockContext = {
    app: {
        config: {}
    },
    request: {
        user: {
            isAuthenticated: true
        },
        urlTokens: {
            locale: 'en-us',
            categories: [
                'fashion-sunglasses'
            ],
            pageType: 'Category'
        },
    }
};
const mockContextPdp = {
    app: {
        config: {
            breadcrumbType: 'category'
        }
    },
    request: {
        user: {
            isAuthenticated: true
        },
        urlTokens: {
            locale: 'en-us',
            categories: [
                'fashion-sunglasses'
            ],
            pageType: 'Product'
        },
    }
};
const mockData = {
    categoryHierarchy: {
        status: 'SUCCESS',
        result: undefined
    },
    categoryPaths: {
        status: 'FAILED',
        result: undefined,
    },
    product: {
        status: 'FAILED',
        result: undefined,
    },
};
describe('Breadcrumb integration tests', () => {
    it('renders correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig),
            resources: mockResources,
            renderView: BreadCrumbView
        };
        const component = render(React.createElement(Breadcrumb, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('Breadcrumb integration tests', () => {
    it('renders correctly with only root', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfigWithOnlyRoot),
            resources: mockResources,
            renderView: BreadCrumbView
        };
        const component = render(React.createElement(Breadcrumb, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('Breadcrumb module unit tests', () => {
    let moduleProps;
    it('renders as expected when on category page', () => {
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                categoryHierarchy: {
                    status: 'SUCCESS',
                    result: [{
                            RecordId: 68719478038,
                            Name: 'Womenswear',
                            Url: '/modern/fabrikam-fashion/womenswear/68719478038.c'
                        },
                        {
                            RecordId: 68719478056,
                            Name: 'Dresses',
                            Url: '/modern/fabrikam-fashion/womenswear/dresses/68719478056.c'
                        },
                    ],
                },
            }, {}, {}, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources
        };
        const result = mount(React.createElement(Breadcrumb, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toBeDefined();
        expect(viewProps.links).toBeTruthy();
    });
    it('renders as expected when on product page', () => {
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                categoryPaths: {
                    status: 'SUCCESS',
                    result: [{
                            Name: 'Womenswear',
                            Url: '/modern/fabrikam-fashion/womenswear/68719478038.c'
                        },
                        {
                            Name: 'Dresses',
                            Url: '/modern/fabrikam-fashion/womenswear/dresses/68719478056.c'
                        },
                    ],
                },
            }, {}, {}, mockContextPdp),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources
        };
        const result = mount(React.createElement(Breadcrumb, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toBeDefined();
        expect(viewProps.links).toBeTruthy();
    });
});
//# sourceMappingURL=breadcrumb.test.js.map