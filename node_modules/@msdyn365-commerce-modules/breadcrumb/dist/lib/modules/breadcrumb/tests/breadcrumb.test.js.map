{"version":3,"file":"breadcrumb.test.js","sourceRoot":"./src/","sources":["modules/breadcrumb/tests/breadcrumb.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncResult, buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';\n/// <reference types=\"jest\" />\n\n// tslint:disable-next-line:no-unused-variable\nimport { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';\nimport { ICategoryUrl } from '@msdyn365-commerce/core-internal/dist/types/interfaces/ICategoryPathInterfaces';\nimport { SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { mount, render } from 'enzyme';\nimport * as React from 'react';\nimport Breadcrumb, { IBreadcrumbViewProps } from '../breadcrumb';\nimport { IBreadcrumbData } from '../breadcrumb.data';\nimport {\n  IBreadcrumbConfig,\n  IBreadcrumbProps\n} from '../breadcrumb.props.autogenerated';\nimport BreadCrumbView from '../breadcrumb.view';\n\nconst mockConfig: IBreadcrumbConfig = {\n  root:{\n    linkText: 'Home',\n    linkUrl:\n    {\n        destinationUrl: 'https://mocktest'\n    },\n    ariaLabel: 'Mock aria label'\n  },\n  links:[\n    {\n      linkText: 'My account',\n      linkUrl:\n      {\n          destinationUrl: 'https://mocktest'\n      },\n      ariaLabel: 'Mock aria label'\n    },\n    {\n      linkText: 'Order history',\n      linkUrl:\n      {\n          destinationUrl: 'https://mocktest'\n      },\n      ariaLabel: 'Mock aria label'\n    },\n  ]\n};\n\nconst mockConfigWithOnlyRoot: IBreadcrumbConfig = {\n  root:{\n    linkText: 'Home',\n    linkUrl:\n    {\n        destinationUrl: 'https://mocktest'\n    },\n    ariaLabel: 'Mock aria label'\n  }\n};\n\nconst mockResources = {\n  backToResultsText:'Back'\n};\n\nconst mockContext: ICoreContext  = {\n  app: {\n      config: {  }\n    },\n  request:{\n      // @ts-ignore partial mock\n      user:{\n          isAuthenticated: true\n      },\n      urlTokens: {\n        locale: 'en-us',\n        categories: [\n          'fashion-sunglasses'\n        ],\n        pageType:'Category'\n    },\n\n  }\n};\n\nconst mockContextPdp: ICoreContext  = {\n  app: {\n      config: {\n        breadcrumbType: 'category'\n       }\n    },\n  request:{\n      // @ts-ignore partial mock\n      user:{\n          isAuthenticated: true\n      },\n      urlTokens: {\n        locale: 'en-us',\n        categories: [\n          'fashion-sunglasses'\n        ],\n        pageType:'Product'\n    },\n\n  }\n};\n\nconst mockData: IBreadcrumbData = {\n  categoryHierarchy: {\n      status: 'SUCCESS',\n      result: undefined\n  } as AsyncResult<CategoryHierarchy[]>,\n  categoryPaths: {\n      status: 'FAILED',\n      result: undefined,\n  } as AsyncResult<ICategoryUrl[]>,\n\n  product: {\n    status: 'FAILED',\n    result: undefined,\n} as AsyncResult<SimpleProduct>,\n\n};\n\ndescribe('Breadcrumb integration tests', () => {\n  it('renders correctly', () => {\n      const moduleProps: IBreadcrumbProps<IBreadcrumbData> = {\n          ...buildMockModuleProps({}, {}, mockConfig),\n          resources: mockResources,\n          // @ts-ignore\n          renderView: BreadCrumbView\n      };\n      const component = render(<Breadcrumb {...moduleProps} />);\n      expect(component).toMatchSnapshot();\n  });\n});\n\ndescribe('Breadcrumb integration tests', () => {\n  it('renders correctly with only root', () => {\n      const moduleProps: IBreadcrumbProps<IBreadcrumbData> = {\n          ...buildMockModuleProps({}, {}, mockConfigWithOnlyRoot),\n          resources: mockResources,\n          // @ts-ignore\n          renderView: BreadCrumbView\n      };\n      const component = render(<Breadcrumb {...moduleProps} />);\n      expect(component).toMatchSnapshot();\n  });\n});\n\ndescribe('Breadcrumb module unit tests', () => {\n  let moduleProps: IBreadcrumbProps<IBreadcrumbData>;\n\n  it('renders as expected when on category page', () => {\n      moduleProps = {\n           // @ts-ignore\n          ...buildMockModuleProps(\n              {\n                  ...mockData,\n                  categoryHierarchy: {\n                      status: 'SUCCESS',\n                      result: [{\n                        RecordId: 68719478038,\n                        Name: 'Womenswear',\n                        Url: '/modern/fabrikam-fashion/womenswear/68719478038.c'\n\n                      },\n                      {\n                        RecordId: 68719478056,\n                        Name: 'Dresses',\n                        Url: '/modern/fabrikam-fashion/womenswear/dresses/68719478056.c'\n\n                      },\n                    ],\n                  } as AsyncResult<CategoryHierarchy[]>,\n                  // @ts-ignore\n              },\n              {},\n              {},\n              mockContext,\n          ) as IBreadcrumbProps<IBreadcrumbData>,\n          // @ts-ignore\n          renderView: jest.fn(props => { return <div props={props} />;}),\n          resources: mockResources\n      };\n\n      const result = mount(<Breadcrumb {...moduleProps} />);\n\n      expect(moduleProps.renderView).toBeCalled();\n\n      const viewProps: IBreadcrumbViewProps = result.childAt(0).props().props;\n      expect(viewProps).toBeDefined();\n\n      expect(viewProps).toBeDefined();\n      expect(viewProps.links).toBeTruthy();\n  });\n  it('renders as expected when on product page', () => {\n    moduleProps = {\n         // @ts-ignore\n        ...buildMockModuleProps(\n            {\n                ...mockData,\n                categoryPaths: {\n                    status: 'SUCCESS',\n                    result: [{\n                      Name: 'Womenswear',\n                      Url: '/modern/fabrikam-fashion/womenswear/68719478038.c'\n\n                    },\n                    {\n                      Name: 'Dresses',\n                      Url: '/modern/fabrikam-fashion/womenswear/dresses/68719478056.c'\n                    },\n                  ],\n                } as AsyncResult<ICategoryUrl[]>,\n                // @ts-ignore\n            },\n            {},\n            {},\n            mockContextPdp,\n        ) as IBreadcrumbProps<IBreadcrumbData>,\n        // @ts-ignore\n        renderView: jest.fn(props => { return <div props={props} />;}),\n        resources: mockResources\n    };\n\n    const result = mount(<Breadcrumb {...moduleProps} />);\n\n    expect(moduleProps.renderView).toBeCalled();\n\n    const viewProps: IBreadcrumbViewProps = result.childAt(0).props().props;\n    expect(viewProps).toBeDefined();\n\n    expect(viewProps).toBeDefined();\n    expect(viewProps.links).toBeTruthy();\n});\n});\n"]}