/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { AsyncResult, buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';
/// <reference types="jest" />

// tslint:disable-next-line:no-unused-variable
import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';
import { ICategoryUrl } from '@msdyn365-commerce/core-internal/dist/types/interfaces/ICategoryPathInterfaces';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { mount, render } from 'enzyme';
import * as React from 'react';
import Breadcrumb, { IBreadcrumbViewProps } from '../breadcrumb';
import { IBreadcrumbData } from '../breadcrumb.data';
import {
  IBreadcrumbConfig,
  IBreadcrumbProps
} from '../breadcrumb.props.autogenerated';
import BreadCrumbView from '../breadcrumb.view';

const mockConfig: IBreadcrumbConfig = {
  root:{
    linkText: 'Home',
    linkUrl:
    {
        destinationUrl: 'https://mocktest'
    },
    ariaLabel: 'Mock aria label'
  },
  links:[
    {
      linkText: 'My account',
      linkUrl:
      {
          destinationUrl: 'https://mocktest'
      },
      ariaLabel: 'Mock aria label'
    },
    {
      linkText: 'Order history',
      linkUrl:
      {
          destinationUrl: 'https://mocktest'
      },
      ariaLabel: 'Mock aria label'
    },
  ]
};

const mockConfigWithOnlyRoot: IBreadcrumbConfig = {
  root:{
    linkText: 'Home',
    linkUrl:
    {
        destinationUrl: 'https://mocktest'
    },
    ariaLabel: 'Mock aria label'
  }
};

const mockResources = {
  backToResultsText:'Back'
};

const mockContext: ICoreContext  = {
  app: {
      config: {  }
    },
  request:{
      // @ts-ignore partial mock
      user:{
          isAuthenticated: true
      },
      urlTokens: {
        locale: 'en-us',
        categories: [
          'fashion-sunglasses'
        ],
        pageType:'Category'
    },

  }
};

const mockContextPdp: ICoreContext  = {
  app: {
      config: {
        breadcrumbType: 'category'
       }
    },
  request:{
      // @ts-ignore partial mock
      user:{
          isAuthenticated: true
      },
      urlTokens: {
        locale: 'en-us',
        categories: [
          'fashion-sunglasses'
        ],
        pageType:'Product'
    },

  }
};

const mockData: IBreadcrumbData = {
  categoryHierarchy: {
      status: 'SUCCESS',
      result: undefined
  } as AsyncResult<CategoryHierarchy[]>,
  categoryPaths: {
      status: 'FAILED',
      result: undefined,
  } as AsyncResult<ICategoryUrl[]>,

  product: {
    status: 'FAILED',
    result: undefined,
} as AsyncResult<SimpleProduct>,

};

describe('Breadcrumb integration tests', () => {
  it('renders correctly', () => {
      const moduleProps: IBreadcrumbProps<IBreadcrumbData> = {
          ...buildMockModuleProps({}, {}, mockConfig),
          resources: mockResources,
          // @ts-ignore
          renderView: BreadCrumbView
      };
      const component = render(<Breadcrumb {...moduleProps} />);
      expect(component).toMatchSnapshot();
  });
});

describe('Breadcrumb integration tests', () => {
  it('renders correctly with only root', () => {
      const moduleProps: IBreadcrumbProps<IBreadcrumbData> = {
          ...buildMockModuleProps({}, {}, mockConfigWithOnlyRoot),
          resources: mockResources,
          // @ts-ignore
          renderView: BreadCrumbView
      };
      const component = render(<Breadcrumb {...moduleProps} />);
      expect(component).toMatchSnapshot();
  });
});

describe('Breadcrumb module unit tests', () => {
  let moduleProps: IBreadcrumbProps<IBreadcrumbData>;

  it('renders as expected when on category page', () => {
      moduleProps = {
           // @ts-ignore
          ...buildMockModuleProps(
              {
                  ...mockData,
                  categoryHierarchy: {
                      status: 'SUCCESS',
                      result: [{
                        RecordId: 68719478038,
                        Name: 'Womenswear',
                        Url: '/modern/fabrikam-fashion/womenswear/68719478038.c'

                      },
                      {
                        RecordId: 68719478056,
                        Name: 'Dresses',
                        Url: '/modern/fabrikam-fashion/womenswear/dresses/68719478056.c'

                      },
                    ],
                  } as AsyncResult<CategoryHierarchy[]>,
                  // @ts-ignore
              },
              {},
              {},
              mockContext,
          ) as IBreadcrumbProps<IBreadcrumbData>,
          // @ts-ignore
          renderView: jest.fn(props => { return <div props={props} />;}),
          resources: mockResources
      };

      const result = mount(<Breadcrumb {...moduleProps} />);

      expect(moduleProps.renderView).toBeCalled();

      const viewProps: IBreadcrumbViewProps = result.childAt(0).props().props;
      expect(viewProps).toBeDefined();

      expect(viewProps).toBeDefined();
      expect(viewProps.links).toBeTruthy();
  });
  it('renders as expected when on product page', () => {
    moduleProps = {
         // @ts-ignore
        ...buildMockModuleProps(
            {
                ...mockData,
                categoryPaths: {
                    status: 'SUCCESS',
                    result: [{
                      Name: 'Womenswear',
                      Url: '/modern/fabrikam-fashion/womenswear/68719478038.c'

                    },
                    {
                      Name: 'Dresses',
                      Url: '/modern/fabrikam-fashion/womenswear/dresses/68719478056.c'
                    },
                  ],
                } as AsyncResult<ICategoryUrl[]>,
                // @ts-ignore
            },
            {},
            {},
            mockContextPdp,
        ) as IBreadcrumbProps<IBreadcrumbData>,
        // @ts-ignore
        renderView: jest.fn(props => { return <div props={props} />;}),
        resources: mockResources
    };

    const result = mount(<Breadcrumb {...moduleProps} />);

    expect(moduleProps.renderView).toBeCalled();

    const viewProps: IBreadcrumbViewProps = result.childAt(0).props().props;
    expect(viewProps).toBeDefined();

    expect(viewProps).toBeDefined();
    expect(viewProps.links).toBeTruthy();
});
});
