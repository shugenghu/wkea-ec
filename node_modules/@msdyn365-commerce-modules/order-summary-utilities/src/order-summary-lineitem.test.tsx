/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import {OrderSummary} from './order-summary-lineitem';

describe('Order Summary', () => {
    const mockCoreContext = buildMockCoreContext({});

    it('renders all lineitems correctly with discount', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: 27,
            TaxAmount: 2.7,
            DiscountAmountWithoutTax: 3,
            TotalAmount: 25,
            Id: '123'
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            },
            // @ts-ignore
            checkoutState: {}
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);
        const totalDiscounts = render(orderSummary.totalDiscounts as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
        expect(totalDiscounts).toMatchSnapshot();
    });

    it('renders all lineitems correctly without discount', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: 27,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123'
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });

    it('renders all lineitems correctly with freetext', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: 0,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123'
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });

    it('renders all lineitems correctly with yetToBeCalculated', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: 0,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123'
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });

    it('renders all lineitems correctly with $0', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: 0,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123'
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });

    it('renders all lineitems correctly with chargelines', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: 0,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123',
            ChargeLines: [
                {
                    ChargeCode: 'FREIGHT',
                    Value: 20
                }
            ]
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });

    it('renders all lineitems correctly with not applicable', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: 0,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123',
            ChargeLines: [
                {
                    ChargeCode: 'FREIGHT',
                    Value: 20
                }
            ]
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });

    it('renders all lineitems correctly with to be calculated', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: undefined,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123',
            ChargeLines: [
                {
                    ChargeCode: 'FREIGHT',
                    Value: 20
                }
            ]
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            toBeCalculatedText: 'to be calculated',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });

    it('renders all lineitems correctly with checkoutState', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: undefined,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123',
            ChargeLines: [
                {
                    ChargeCode: 'FREIGHT',
                    Value: 20
                }
            ]
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            toBeCalculatedText: 'to be calculated',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '60'
            },
            // @ts-ignore
            checkoutState: {
                giftCardExtends: [
                    {
                        Balance: 5
                    }
                ],
                loyaltyAmount: 15
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });

    it('renders all lineitems correctly with shipping', () => {
        const cart = {
            Quantity: 1,
            NetAmountWithoutTax: 25,
            NetPrice: undefined,
            TaxAmount: 2.7,
            TotalAmount: 25,
            Id: '123',
            CartLines:[
                {
                    ItemId: '1234',
                    DeliveryMode: '60'
                }
            ],
            ChargeLines: [
                {
                    ChargeCode: 'FREIGHT',
                    Value: 20,
                    IsShipping: true,
                    CalculatedAmount: 20
                }
            ]
        };
        const orderSummary =  OrderSummary({
            cart:cart,
            subTotalLabel:'subtotal',
            shippingLabel:'estimated shipping',
            taxLabel:'estimated tax',
            orderTotalLabel:'order total',
            totalDiscountsLabel:'total discounts',
            context:mockCoreContext,
            id:'123',
            typeName:'order summary',
            toBeCalculatedText: 'to be calculated',
            // @ts-ignore
            channelConfiguration: {
                PickupDeliveryModeCode: '62'
            },
            // @ts-ignore
            checkoutState: {
                giftCardExtends: [
                    {
                        Balance: 5
                    }
                ],
                loyaltyAmount: 15
            }
        });

        const orderSubtotal = render(orderSummary.subtotal as React.ReactElement);
        const estimatedShipping = render(orderSummary.shipping as React.ReactElement);
        const estimatedTax = render(orderSummary.tax as React.ReactElement);
        const orderTotal = render(orderSummary.orderTotal as React.ReactElement);

        expect(orderSubtotal).toMatchSnapshot();
        expect(estimatedShipping).toMatchSnapshot();
        expect(estimatedTax).toMatchSnapshot();
        expect(orderTotal).toMatchSnapshot();
    });
});