/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { PriceComponent } from '@msdyn365-commerce/components';
import { ICoreContext, ITelemetry } from '@msdyn365-commerce/core';
import { ICheckoutState, IGiftCardExtend } from '@msdyn365-commerce/global-state';
import { Cart, ChannelConfiguration } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';

export interface IOrderSummaryProps {
    subTotalLabel: string;
    shippingLabel: string;
    otherChargeLabel: string;
    taxLabel: string;
    orderTotalLabel: string;
    loyaltyLabel?:string;
    giftcardLabel?:string;
    totalDiscountsLabel: string;
    context: ICoreContext;
    telemetry: ITelemetry;
    cart: Cart;
    channelConfiguration: ChannelConfiguration;
    id: string;
    typeName: string;
    freeText?:string;
    toBeCalculatedText?: string;
    checkoutState?: ICheckoutState;
}

export interface IOrderSummaryLines {
    subtotal: React.ReactNode;
    shipping?: React.ReactNode;
    otherCharge?: React.ReactNode;
    tax: React.ReactNode;
    orderTotal: React.ReactNode;
    totalDiscounts?: React.ReactNode;
    giftCard?:React.ReactNode;
    loyalty?: React.ReactNode;
}

interface IOrderSummaryLineProps {
    label: string;
    context: ICoreContext;
    telemetry: ITelemetry;
    price?: number;
    freeText?:string;
    toBeCalculatedText?: string;
    id: string;
    typeName: string;
    cssLabel: string;
}

interface IShippingOrderLine {
    cart: Cart;
    channelConfiguration: ChannelConfiguration;
    canShip?: boolean;
    hasDeliveryMethod?: boolean;
    hasShippingMethod?: boolean;
    freightFee?: number;
}

const OrderSummaryLine: React.FC<IOrderSummaryLineProps> = ({
    price,
    label,
    context,
    id,
    typeName,
    toBeCalculatedText,
    freeText,
    cssLabel
}) => {
    return(
        <p className={`msc-order-summary__line-${cssLabel}`}>
            <span className='msc-order-summary__label'>{label}</span>
            {price || price === 0 ? (
                <PriceComponent
                    data={{
                        price: {CustomerContextualPrice: price}
                    }}
                    freePriceText={freeText}
                    context={context}
                    id={id}
                    typeName={typeName}
                    className={'msc-order-summary__value'}
                />
            ) : (
                <span className='msc-order-summary__value'>{toBeCalculatedText}</span>
            )}
        </p>
    );
};

const _buildOrderSummarySection = (
    props: IOrderSummaryProps,
    price: number | undefined,
    label: string,
    cssLabel: string
    ):React.ReactNode => {
    return (
        <OrderSummaryLine
            price = { price }
            label = { label }
            context = { props.context }
            id = { props.id }
            typeName = { props.typeName }
            toBeCalculatedText = { props.toBeCalculatedText }
            freeText = { props.freeText }
            telemetry = {props.telemetry}
            cssLabel = {cssLabel}
        />
    );
};

const _computedLoyaltyAmount = (checkoutState: ICheckoutState): number => {
    return (checkoutState && checkoutState.loyaltyAmount) || 0;
};

const _computeGiftCardAmount = (checkoutState: ICheckoutState, cart: Cart): number => {

    const giftCardCounter = (count: number, giftCard: IGiftCardExtend) => {
        return count + (giftCard.Balance || 0);
    };
    const giftCardTotalValue = (checkoutState.giftCardExtends || []).reduce(giftCardCounter, 0);
    const amount = (cart.TotalAmount || 0) - _computedLoyaltyAmount(checkoutState);
    return Math.min(giftCardTotalValue, amount);
};

const getDeliveryConfiguration = (cart: Cart, channelConfiguration: ChannelConfiguration):IShippingOrderLine =>  {

    const pickupDeliveryModeCode = channelConfiguration && channelConfiguration.PickupDeliveryModeCode;
    const cartLines = cart.CartLines || [];
    const deliveryModes = cartLines.map(cartLine => cartLine.DeliveryMode);

    const freightFee = cart.ShippingChargeAmount;
    const canShip = deliveryModes.some(deliveryMode => (deliveryMode !== '' && (deliveryMode === pickupDeliveryModeCode)) ? false : true);
    const hasDeliveryMethod = deliveryModes.some(deliveryMode => !!deliveryMode);
    const hasShippingMethod = deliveryModes.some(deliveryMode => !!deliveryMode && deliveryMode !== pickupDeliveryModeCode);
    return {
        canShip,
        hasDeliveryMethod,
        hasShippingMethod,
        freightFee
    } as IShippingOrderLine;
};

export const OrderSummary = (props: IOrderSummaryProps) => {
    const { NetPrice, TaxAmount, DiscountAmountWithoutTax = 0, TotalAmount, OtherChargeAmount } = props.cart;
    const { canShip, hasDeliveryMethod, hasShippingMethod, freightFee } = getDeliveryConfiguration(props.cart, props.channelConfiguration);
    const reactNodes:IOrderSummaryLines = {
        subtotal: _buildOrderSummarySection(props, NetPrice, props.subTotalLabel, 'net-price'),
        tax: _buildOrderSummarySection(props, hasDeliveryMethod ? TaxAmount: undefined, props.taxLabel, 'tax-amount'),
        orderTotal: _buildOrderSummarySection(props, TotalAmount, props.orderTotalLabel, 'total'),
        otherCharge: OtherChargeAmount && _buildOrderSummarySection(props, OtherChargeAmount, props.otherChargeLabel, 'other-charges') || undefined,
    };

    if(canShip) {
        reactNodes.shipping =_buildOrderSummarySection(props, hasShippingMethod ? freightFee : undefined, props.shippingLabel, 'shipping');
    }
    if(props.checkoutState) {
        const giftCardAmount = _computeGiftCardAmount(props.checkoutState, props.cart);
        const loyaltyAmount = _computedLoyaltyAmount(props.checkoutState);
        const totalAmountAfterGiftCard = (TotalAmount || 0) - giftCardAmount - loyaltyAmount;

        if(loyaltyAmount > 0) {
            reactNodes.loyalty = _buildOrderSummarySection(props, -loyaltyAmount, props.loyaltyLabel || 'Loyalty amount', 'loyalty');
        }

        if(giftCardAmount > 0) {
            reactNodes.giftCard = _buildOrderSummarySection(props, -giftCardAmount, props.giftcardLabel || 'Gift card amount', 'gift-card');
        }

        reactNodes.orderTotal = _buildOrderSummarySection({...props, freeText: undefined }, totalAmountAfterGiftCard, props.orderTotalLabel, 'total');
    }

    if(DiscountAmountWithoutTax > 0) {
        reactNodes.totalDiscounts = _buildOrderSummarySection(props, -DiscountAmountWithoutTax, props.totalDiscountsLabel, 'total-discounts');
    }

    return reactNodes;
};