/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { PriceComponent } from '@msdyn365-commerce/components';
import * as React from 'react';
const OrderSummaryLine = ({ price, label, context, id, typeName, toBeCalculatedText, freeText, cssLabel }) => {
    return (React.createElement("p", { className: `msc-order-summary__line-${cssLabel}` },
        React.createElement("span", { className: 'msc-order-summary__label' }, label),
        price || price === 0 ? (React.createElement(PriceComponent, { data: {
                price: { CustomerContextualPrice: price }
            }, freePriceText: freeText, context: context, id: id, typeName: typeName, className: 'msc-order-summary__value' })) : (React.createElement("span", { className: 'msc-order-summary__value' }, toBeCalculatedText))));
};
const _buildOrderSummarySection = (props, price, label, cssLabel) => {
    return (React.createElement(OrderSummaryLine, { price: price, label: label, context: props.context, id: props.id, typeName: props.typeName, toBeCalculatedText: props.toBeCalculatedText, freeText: props.freeText, telemetry: props.telemetry, cssLabel: cssLabel }));
};
const _computedLoyaltyAmount = (checkoutState) => {
    return (checkoutState && checkoutState.loyaltyAmount) || 0;
};
const _computeGiftCardAmount = (checkoutState, cart) => {
    const giftCardCounter = (count, giftCard) => {
        return count + (giftCard.Balance || 0);
    };
    const giftCardTotalValue = (checkoutState.giftCardExtends || []).reduce(giftCardCounter, 0);
    const amount = (cart.TotalAmount || 0) - _computedLoyaltyAmount(checkoutState);
    return Math.min(giftCardTotalValue, amount);
};
const getDeliveryConfiguration = (cart, channelConfiguration) => {
    const pickupDeliveryModeCode = channelConfiguration && channelConfiguration.PickupDeliveryModeCode;
    const cartLines = cart.CartLines || [];
    const deliveryModes = cartLines.map(cartLine => cartLine.DeliveryMode);
    const freightFee = cart.ShippingChargeAmount;
    const canShip = deliveryModes.some(deliveryMode => (deliveryMode !== '' && (deliveryMode === pickupDeliveryModeCode)) ? false : true);
    const hasDeliveryMethod = deliveryModes.some(deliveryMode => !!deliveryMode);
    const hasShippingMethod = deliveryModes.some(deliveryMode => !!deliveryMode && deliveryMode !== pickupDeliveryModeCode);
    return {
        canShip,
        hasDeliveryMethod,
        hasShippingMethod,
        freightFee
    };
};
export const OrderSummary = (props) => {
    const { NetPrice, TaxAmount, DiscountAmountWithoutTax = 0, TotalAmount, OtherChargeAmount } = props.cart;
    const { canShip, hasDeliveryMethod, hasShippingMethod, freightFee } = getDeliveryConfiguration(props.cart, props.channelConfiguration);
    const reactNodes = {
        subtotal: _buildOrderSummarySection(props, NetPrice, props.subTotalLabel, 'net-price'),
        tax: _buildOrderSummarySection(props, hasDeliveryMethod ? TaxAmount : undefined, props.taxLabel, 'tax-amount'),
        orderTotal: _buildOrderSummarySection(props, TotalAmount, props.orderTotalLabel, 'total'),
        otherCharge: OtherChargeAmount && _buildOrderSummarySection(props, OtherChargeAmount, props.otherChargeLabel, 'other-charges') || undefined,
    };
    if (canShip) {
        reactNodes.shipping = _buildOrderSummarySection(props, hasShippingMethod ? freightFee : undefined, props.shippingLabel, 'shipping');
    }
    if (props.checkoutState) {
        const giftCardAmount = _computeGiftCardAmount(props.checkoutState, props.cart);
        const loyaltyAmount = _computedLoyaltyAmount(props.checkoutState);
        const totalAmountAfterGiftCard = (TotalAmount || 0) - giftCardAmount - loyaltyAmount;
        if (loyaltyAmount > 0) {
            reactNodes.loyalty = _buildOrderSummarySection(props, -loyaltyAmount, props.loyaltyLabel || 'Loyalty amount', 'loyalty');
        }
        if (giftCardAmount > 0) {
            reactNodes.giftCard = _buildOrderSummarySection(props, -giftCardAmount, props.giftcardLabel || 'Gift card amount', 'gift-card');
        }
        reactNodes.orderTotal = _buildOrderSummarySection({ ...props, freeText: undefined }, totalAmountAfterGiftCard, props.orderTotalLabel, 'total');
    }
    if (DiscountAmountWithoutTax > 0) {
        reactNodes.totalDiscounts = _buildOrderSummarySection(props, -DiscountAmountWithoutTax, props.totalDiscountsLabel, 'total-discounts');
    }
    return reactNodes;
};
//# sourceMappingURL=order-summary-lineitem.js.map