import { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';
import { mount, render} from 'enzyme';
import * as React from 'react';
import { ReviewConcernCategory } from '../../../actions/inputs/report-review-concern-input';
import {IReportReviewModalProps, IReportReviewModalResources, ReportReviewModal } from '../components/report-review-modal';

describe('Report review modal', () => {
    let mockCoreContext: ICoreContext;

    let onRadioChange: () => void;
    let onReportToggle: () => void;
    let reportReview: () => void;
    const buttonRef = React.createRef<HTMLButtonElement>();

    const resources: IReportReviewModalResources = {
        reportConcernText: 'Report',
        feedbackThankYouText: 'Thanks for your feedback',
        reportModalMessage: '',
        reportSubmittedMessage: 'We have received your feedback. One of our staff members will look into this review soon.',
        reportSpamText: 'Contains spam or advertising',
        offensiveContentText: 'Contains offensive content',
        profanityContentText: 'Contains profanity',
        okReportReviewText: 'Ok',
        cancelReportReviewText: 'Cancel',
        reportReviewButtonText: 'Report',
        errorMessageText: 'Something went wrong, please try again',
    };

    let props: IReportReviewModalProps;

    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({});
        //   mockCoreContext.actionContext.requestContext.apiSettings.rnr = {id: 'rnrId', url: 'rnrUrl'};
        onRadioChange = jest.fn();
        onReportToggle = jest.fn();
        reportReview = jest.fn();

        props = {
            isOpen: true,
            returnRef: buttonRef,
            reportedKey: ReviewConcernCategory.SpamAdvertising,
            resources: resources,
            context:  mockCoreContext,
            onRadioChange: onRadioChange,
            onModalToggle: onReportToggle,
            reportReview: reportReview,
            hasError: false
        };
    });

    it('Renders the report modal as expected when modal toggle is open', () => {
        const reportModal = ReportReviewModal(props);
        expect(reportModal.modal).toMatchSnapshot();
        expect(reportModal.modalHeader).toMatchSnapshot();
        expect(reportModal.modalBody).toMatchSnapshot();
        expect(reportModal.modalFooter).toMatchSnapshot();
        expect(render(reportModal.header)).toMatchSnapshot();
        expect(render(reportModal.headerSubmitted)).toMatchSnapshot();
        expect(render(reportModal.cancelButton)).toMatchSnapshot();
        expect(render(reportModal.submitButton)).toMatchSnapshot();
        expect(render(reportModal.succesfulButton)).toMatchSnapshot();
        expect(render(reportModal.reportMessage)).toMatchSnapshot();
        expect(render(reportModal.reportSubmittedMessage)).toMatchSnapshot();
        expect(render(reportModal.radioButtons)).toMatchSnapshot();
    });

    it('Renders the report modal as expected when modal is closed', () => {
        props.isOpen = false;
        const reportModal = ReportReviewModal(props);
        expect(reportModal.modal).toMatchSnapshot();
        expect(reportModal.modalHeader).toMatchSnapshot();
        expect(reportModal.modalBody).toMatchSnapshot();
        expect(reportModal.modalFooter).toMatchSnapshot();
        expect(render(reportModal.header)).toMatchSnapshot();
        expect(render(reportModal.headerSubmitted)).toMatchSnapshot();
        expect(render(reportModal.cancelButton)).toMatchSnapshot();
        expect(render(reportModal.submitButton)).toMatchSnapshot();
        expect(render(reportModal.succesfulButton)).toMatchSnapshot();
        expect(render(reportModal.reportMessage)).toMatchSnapshot();
        expect(render(reportModal.reportSubmittedMessage)).toMatchSnapshot();
        expect(render(reportModal.radioButtons)).toMatchSnapshot();
    });

    it('calls the report action', () => {
        const reportModal = ReportReviewModal(props);
        const wrapper = mount(reportModal.submitButton);
        wrapper.simulate('click');
        expect(reportReview).toHaveBeenCalled();
    });

    it('calls the on radio change action', () => {
        const reportModal = ReportReviewModal(props);
        const wrapper = mount(reportModal.radioButtons);
        const radio = wrapper.find('input').at(1);
        radio.simulate('change');
        expect(onRadioChange).toHaveBeenCalled();
    });

    it('calls the onModalToggle', () => {
        const reportModal = ReportReviewModal(props);
        const wrapper = mount(reportModal.cancelButton);
        wrapper.simulate('click');
        expect(onReportToggle).toHaveBeenCalled();
    });
});