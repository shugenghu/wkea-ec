/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
jest.mock('../../../actions/report-review-concern', () => ({
    __esModule: true, // this property makes it work
    default: jest.fn().mockImplementation(() => Promise.resolve('myReviewId'))
}));
jest.mock('../../../actions/submit-helpfulness-vote', () => ({
    __esModule: true, // this property makes it work
    default: jest.fn().mockImplementation(() => Promise.resolve('myReviewId'))
}));
import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';
import * as GetProductReviews from '../../../actions/get-product-reviews';

import { RatingsSummary, Review, Reviews } from '@msdyn365-commerce/commerce-entities';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { AsyncResult, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import {mount} from 'enzyme';
import * as React from 'react';
import { ReviewConcernCategory } from '../../../actions/inputs/report-review-concern-input';
import { IRatingsReviewsState } from '../../../actions/ratings-reviews-state-data-action';
import ReviewsList, {IReviewsListViewProps} from '../reviews-list';
import { IReviewsListData } from '../reviews-list.data';
import {
    IReviewsListConfig,
    IReviewsListProps,
    IReviewsListResources
} from '../reviews-list.props.autogenerated';

const flushPromises = () => new Promise(setImmediate);
const mockActionContext = buildHydratedMockActionContext();
// @ts-ignore
mockActionContext.requestContext.apiSettings = {rnr: {id: 'rnrId', url: 'rnrUrl'}};

const ratingsSummary = RetailActions.wrapInResolvedAsyncResult({
    tenantId: 'ATenant',
    productId: '1234',
    market: 'US',
    averageRating: 3.5,
    totalRatingsCount: 200,
    reviewsCount: 2,
    star5Count: 50,
    star4Count: 45,
    star3Count: 5,
    star2Count: 10,
    star1Count: 90,
    star5ReviewCount: 1,
    star4ReviewCount: 0,
    star3ReviewCount: 0,
    star2ReviewCount: 0,
    star1ReviewCount: 1
} as RatingsSummary);

let mockData: IReviewsListData;

const mockConfig: IReviewsListConfig = {
    reviewsShownOnEachPage: 1
};

const resources: IReviewsListResources = {
    nextButtonText: 'Next',
    previousButtonText: 'Previous',
    pageReviewCountText: 'Showing {0}-{1} out of {2} reviews',
    pageReviewAriaLabel: 'Show {0}-{1} out of {2} reviews',
    publisherResponseBadgeText: '{0} responded on {1}',
    mostHelpfulSortOptionText: 'Most helpful',
    mostRecentSortOptionText: 'Most recent',
    highestRatedSortOptionText: 'Highest rated',
    lowestRatedSortOptionText: 'Lowest rated',
    fiveStarFilterByOptionText: '5 stars',
    fourStarFilterByOptionText: '4 stars',
    threeStarFilterByOptionText: '3 stars',
    twoStarFilterByOptionText: '2 stars',
    oneStarFilterByOptionText: '1 star',
    allRatinsFilterByOptionText: 'All ratings',
    filterByDropdownText: 'Filter by:',
    sortByDropdownText: 'Sort by:',
    noReviewsMessage: 'No one has reviewed this product yet.',
    noReviewsWithSelectedFilterMessage: 'Showing 0 reviews.',
    wasReviewHelpfulText: 'Was this helpful?',
    yesButtonText: 'Yes',
    noButtonText: 'No',
    cancelReportReviewText: 'Cancel',
    okReportReviewText: 'Ok',
    feedbackThankYouText: 'Thank you for your feedback.',
    profanityContentText: 'Contains profanity',
    offensiveContentText: 'Contains offensive content',
    reportSpamText: 'Contains spam or advertising',
    feedbackErrorText: 'Something went wrong. Please try again.',
    reportConcernText: 'Report a concern:',
    reviewRatingNarratorText: 'User Rating: {0} out of 5',
    editReviewCardText: 'Edit',
    reportedText: 'reported',
    reportModalMessage: 'message',
    reportSubmittedMessage: 'sucesfully submitted, we are taking a look',
    privacyPolicyTextFormat: 'By clicking submit, you accept our {0}.',
    privacyPolicyTitle: 'Privacy Policy',
    reviewTextLabel: 'Review',
    reviewTitleLabel: 'Title',
    selectRatingAriaLabel: 'Set ratings as {0} out of {1} stars',
    selectRatingLabel: 'Choose a rating',
    writeReviewModalTitle: 'Write a review',
    editReviewModalTitle: 'Edit your review',
    discardReviewButtonText: 'Discard',
    errorMessageText: 'Something went wrong, please try again',
    submitReviewButtonText: 'Submit',
    reportReviewButtonText: 'Report',
    averageRatingAriaLabel: '{0} stars, {1}'
};

const mockActions = {};

// @ts-ignore
// tslint:disable-next-line:no-any
const mockAuthenticatedContextNotSignedIn: ICoreContext<any> = {
    // @ts-ignore
    request: {
        user: {
            token: 'Dummy token',
            isAuthenticated: false
        }
    },
    app: {
      config:{
     }
    },
    actionContext: mockActionContext
};

// @ts-ignore
// tslint:disable-next-line:no-any
const mockAuthenticatedContextSignedIn: ICoreContext<any> = {
    // @ts-ignore
    request: {
        user: {
            token: 'Dummy token',
            isAuthenticated: true
        }
    },
    app: {
      config:{
     }
    },
    actionContext: mockActionContext
};

describe('Reviews list - ContainsReviewsAndDoesntHaveNextButton', () => {
    let moduleProps: IReviewsListProps<IReviewsListData>;
    beforeAll(() => {
        mockData = {
            userReview: RetailActions.wrapInResolvedAsyncResult<Review>({rating: 4, title: 'my title', reviewText: 'my text'}),
            ratingsSummary: ratingsSummary,
            product: RetailActions.wrapInResolvedAsyncResult<SimpleProduct>(undefined),
            ratingsReviewsState: RetailActions.wrapInResolvedAsyncResult<IRatingsReviewsState>(undefined),
            reviewsList: AsyncResult.resolve({
                items: [
                    {
                        reviewId: 'Review-1',
                        productId: 'product1',
                        userName: 'user1',
                        rating: 3.5,
                        market: 'US',
                        locale: 'en',
                        thoughtfulnessScore: 0,
                        helpfulPositive: 50,
                        helpfulNegative: 10,
                        reviewText:
                            'Lorem ipsum dolor sit amet, cu fugit copiosae quo, nam illud docendi iudicabit ex. ' +
                            'Menandri expetendis dissentiunt ut per, mea cu error adipiscing. At solum causae bonorum vis, pri dictas praesent ut, inermis suavitate expetendis quo at. ' +
                            'Per ea eruditi indoctum omittantur, sea ad exerci salutandi laboramus. Dico noluisse maiestatis in vel.',
                        title: 'Some title to test reviews card layout',
                        submittedDateTime: new Date('2019-03-04T19:52:10.044Z'),
                        isTakenDown: false,
                        violationsFound: false,
                        userResponse: {
                            responseId: 'Response-1',
                            reviewId: 'Review-1',
                            responderName: 'Microsoft Store',
                            responseText:
                                'Hi there, Thanks you for taking the time to leave a review. Let us know how your experience at the Microsoft Store goes. If you have any other questions feel free to reach out to us on Twitter @Surface.',
                            isTakenDown: false,
                            violationsFound: false,
                            market: 'US',
                            locale: 'en',
                            submittedDateTime: new Date('2019-03-05T14:02:55.070Z'),
                            isPublic: true
                        },
                        isPublished: true,
                        isRevised: false,
                        updatedSinceResponse: false
                    },
                    {
                        reviewId: 'Review-2',
                        productId: 'product1',
                        userName: 'user1',
                        rating: 2,
                        market: 'US',
                        locale: 'en',
                        thoughtfulnessScore: 0,
                        helpfulPositive: 50,
                        helpfulNegative: 10,
                        reviewText:
                            'Lorem ipsum dolor sit amet, cu fugit copiosae quo, nam illud docendi iudicabit ex. ' +
                            'Menandri expetendis dissentiunt ut per, mea cu error adipiscing. At solum causae bonorum vis, pri dictas praesent ut, inermis suavitate expetendis quo at. ' +
                            'Per ea eruditi indoctum omittantur, sea ad exerci salutandi laboramus. Dico noluisse maiestatis in vel.',
                        title: 'Some title to test reviews card layout',
                        submittedDateTime: new Date('2019-03-04T19:52:10.044Z'),
                        isTakenDown: false,
                        violationsFound: false,
                        userResponse: {
                            responseId: 'Response-2',
                            reviewId: 'Review-2',
                            responderName: 'Microsoft Store',
                            responseText:
                                'Hi there, Thanks you for taking the time to leave a review. Let us know how your experience at the Microsoft Store goes. If you have any other questions feel free to reach out to us on Twitter @Surface.',
                            isTakenDown: false,
                            violationsFound: false,
                            market: 'US',
                            locale: 'en',
                            submittedDateTime: new Date('2019-03-05T14:02:55.070Z'),
                            isPublic: true
                        },
                        isPublished: true,
                        isRevised: false,
                        updatedSinceResponse: false
                    }
                ],
                pagingInfo: {
                    continuousToken: 'continuousToken',
                    totalItems: 2
                }
            } as Reviews)
        };
        // @ts-ignore
        moduleProps = {...buildMockModuleProps(mockData, mockActions, mockConfig, mockAuthenticatedContextSignedIn) as IReviewsListProps<IReviewsListData>, resources:resources, renderView: jest.fn(props => { return <div props={props} />;})};
    });
    it('renders correctly', async () => {
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        expect(moduleProps.renderView).toBeCalled();
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps.reviewModal).toBeTruthy();
        expect(viewProps.reportReviewModal).toBeTruthy();
        expect(viewProps.sortByDropdown).toBeTruthy();
        expect(viewProps.filterByDropdown).toBeTruthy();
        expect(viewProps.averageRating).toBeTruthy();
        expect(viewProps.reviewCount).toBeTruthy();
        expect(viewProps.reviewCards).toBeTruthy();
        expect(viewProps.pageControls).toBeTruthy();
        expect(viewProps.noReviewsMessage).toBeTruthy();
        expect(viewProps.noReviewsWithFilterMessage).toBeTruthy();
        expect(viewProps.refineReviewsProps).toEqual({className: 'ms-reviews-list__refiners'});
        expect(viewProps.reviewsListProps).toEqual({className: 'ms-reviews-list__reviews'});

        component.unmount();
    });

    it('does not render average rating when ratigns summary is undefined', async () => {
        // @ts-ignore
        moduleProps.data.ratingsSummary = {result: undefined};
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        expect(moduleProps.renderView).toBeCalled();
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.sortByDropdown).toBeTruthy();
        expect(viewProps.averageRating).not.toBeTruthy();
        component.unmount();
    });

    it('onTitleChange set the state properly', async () => {
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        const input = mount(viewProps.reviewModal.titleInput);
        const changeEvent = {
            target: { value: 'foo' }
        };
        input.simulate('change', changeEvent);
        expect(component.state('userReviewTitle')).toBe('foo');
        input.unmount();
        component.unmount();
    });

    it('onTextChange set the state properly', async () => {
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        const input = mount(viewProps.reviewModal.textInput);
        const changeEvent = {
            target: { value: 'foo' }
        };
        input.simulate('change', changeEvent);
        expect(component.state('userReviewText')).toBe('foo');
        input.unmount();
        component.unmount();
    });

    it('onRatingsChange set the state properly', async () => {
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        const rating = mount(viewProps.reviewModal.rating);
        const input = rating.find('input');
        const changeEvent = {
            target: { value: 5 }
        };
        input.simulate('change', changeEvent);
        expect(component.state('userReviewRating')).toBe(5);
        rating.unmount();
        component.unmount();
    });

    it('toggleReviewModal will reset the modal inputs to the user review when opened', async () => {
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        component.setState({userReviewText: 'foo', userReviewTitle: 'troo', userReviewRating: 2});
        const button = mount(viewProps.userReview!.edit as React.ReactElement);
        button.simulate('click');
        expect(component.state('isReviewModalOpen')).toBe(true);
        expect(component.state('userReviewText')).toBe('my text');
        expect(component.state('userReviewTitle')).toBe('my title');
        expect(component.state('userReviewRating')).toBe(4);
        const cancel = mount(viewProps.reviewModal.cancelButton);
        cancel.simulate('click');
        expect(component.state('isReviewModalOpen')).toBe(false);
        cancel.unmount();
        button.unmount();
        component.unmount();
    });

    it('open/close report review modal', async () => {
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        component.setState({reported: true, reportedKey: 'foo'});
        const button = mount(viewProps.reviewCards[0].report as React.ReactElement);
        button.simulate('click');
        expect(component.state('isReportModalOpen')).toBe(true);
        expect(component.state('reportingReviewId')).toBe('Review-1');
        expect(component.state('reported')).toBe(false);
        expect(component.state('reportedKey')).toBe(ReviewConcernCategory.SpamAdvertising);
        const cancel = mount(viewProps.reportReviewModal.cancelButton);
        cancel.simulate('click');
        expect(component.state('isReportModalOpen')).toBe(false);
        cancel.unmount();
        button.unmount();
        component.unmount();
    });

    it ('reporting reviews add it to reportedReviews state', async () => {
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        component.setState({reportingReviewId: 'foo'});
        const reportbutton = mount(viewProps.reportReviewModal.submitButton);
        reportbutton.simulate('click');
        await flushPromises();
        expect(component.state('reportedReviews')).toEqual(['foo']);
        reportbutton.unmount();
        component.unmount();
    });

    it ('Upvoting/downvoting a review properly updates the state', async () => {
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        const card1 = viewProps.reviewCards[0];
        const card2 = viewProps.reviewCards[1];
        const like = mount(card1.like);
        const dislike1 = mount(card1.dislike);
        const dislike2 = mount(card2.dislike);
        like.simulate('click');
        await flushPromises();
        expect(component.state('votedReviews')).toEqual([{reviewId: 'Review-1', approved: true}]);
        dislike2.simulate('click');
        await flushPromises();
        expect(component.state('votedReviews')).toEqual([{reviewId: 'Review-1', approved: true}, {reviewId: 'Review-2', approved: false}]);
        dislike1.simulate('click');
        await flushPromises();
        expect(component.state('votedReviews')).toEqual([{reviewId: 'Review-1', approved: false}, {reviewId: 'Review-2', approved: false}]);
        like.unmount();
        dislike1.unmount();
        dislike2.unmount();
        component.unmount();
    });

    it ('Changing sorting updates the reviews', async () => {
        jest.spyOn(RetailActions, 'getSelectedProductIdFromActionInput').mockImplementation(() => 'foo');
        const mockReviewsResult = {items: [], pagingInfo: {totalItems: 300}};
        jest.spyOn(GetProductReviews, 'getReviewsForGivenProduct').mockImplementation(() => Promise.resolve(mockReviewsResult));
        const component = mount(<ReviewsList {...moduleProps} />);
        await moduleProps.data.reviewsList;
        const viewProps: IReviewsListViewProps = component.childAt(0).props().props;
        const sortBy = mount(viewProps.sortByDropdown as React.ReactElement);
        const select = sortBy.find('select');
        select.simulate('change', {currentTarget: {selectedOptions: [{index: 2}]}});
        await flushPromises();

        expect(component.state('currentPage')).toBe(1);
        expect(component.state('listOfReviews')).toEqual([]);
        expect(component.state('reviewsCount')).toBe(300);
        expect(component.state('isFilterApplied')).toBe(false);
        sortBy.unmount();
        component.unmount();
    });
});