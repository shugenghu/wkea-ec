/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getRnrAuthEndpointId, getRnrEndpointId, getRnrPartnerId, getSelectedProductIdFromActionInput } from '@msdyn365-commerce-modules/retail-actions';
import { format, getTelemetryObject, ILabeledDropdownOnChangeNotification, ILabeledDropdownOption, IModuleProps, INodeProps, ITelemetryContent, LabeledDropdown } from '@msdyn365-commerce-modules/utilities';
import { Review } from '@msdyn365-commerce/commerce-entities';
import { RatingComponent } from '@msdyn365-commerce/components';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import classname from 'classnames';
import { reaction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { getReviewsForGivenProduct } from '../../actions/get-product-reviews';
import { GetProductReviewsInput } from '../../actions/inputs/get-product-reviews-input';
import { ReportReviewConcernInput, ReviewConcernCategory } from '../../actions/inputs/report-review-concern-input';
import { SubmitHelpfulnessVoteInput } from '../../actions/inputs/submit-helpfulness-vote-input';
import reportReviewConcern from '../../actions/report-review-concern';
import submitHelpfulnessVote from '../../actions/submit-helpfulness-vote';
import { IReviewModalViewProps, ReviewModal, submitReview } from '../../common/review-modal';
import { IRnrKeyValuePair, IRnrOrderByKeyValuePair } from '../../common/rnrInterface';
import { PageControls, ReviewCount } from './components/components';
import { IReportReviewModalViewProps, ReportReviewModal } from './components/report-review-modal';
import { IReviewCardViewProps, ReviewCard } from './components/review-card';
import { IReviewsListData } from './reviews-list.data';
import { IReviewsListProps } from './reviews-list.props.autogenerated';

export interface IReviewsListState {
    skipItems: number;
    listOfReviews: Review[];
    currentPage: number;
    reviewsCount: number;
    showSpinner: boolean;
    isFilterApplied: boolean;
    selectedSortByOption: ILabeledDropdownOption;
    selectedFilterByOption: ILabeledDropdownOption;
    userReviewRating: number;
    userReviewTitle: string;
    userReviewText: string;
    isReviewModalOpen: boolean;
    hasReviewError: boolean;
    isReportModalOpen: boolean;
    hasReportError: boolean;
    reportingReviewId: string;
    reportedKey: string;
    reported: boolean;
    reportedReviews: string[];
    votedReviews: {reviewId: string; approved: boolean}[];
}

export interface IReviewsListCallbacks {
    toggleModal(): void;
    updateReviewTitle(title: string): void;
    updateReviewText(text: string): void;
    updateRating(rating: number): void;
    onReviewSubmitted(isSuccessful: boolean): void;
    submitReview(product: SimpleProduct, title: string, text: string, rating: number, context: Msdyn365.ICoreContext, userReview?: Review, onReviewSubmission?: (isSuccessful: boolean) => void): void;
    updateReviewHelpfulnessVote(reviewId: string, isHelpful: boolean): void;
    toggleReportModal(reviewId: string): void;
    reportReview(reviewId: string, reportedKey: string): void;
    updateSortByDropdown(notification: ILabeledDropdownOnChangeNotification): void;
    updateFilterByDropdown(notification: ILabeledDropdownOnChangeNotification): void;
    updateReviews(skipItems: number, selectedSortByOption: ILabeledDropdownOption, selectedFilterByOption: ILabeledDropdownOption, currentPage: number, isFilterApplied: boolean): void;
}

export interface IReviewsListViewProps extends IReviewsListProps<IReviewsListData> {
    state: IReviewsListState;
    className: string;
    callbacks: IReviewsListCallbacks;
    moduleProps: IModuleProps;
    reviewModal: IReviewModalViewProps;
    reportReviewModal: IReportReviewModalViewProps;
    sortByDropdown: React.ReactNode;
    filterByDropdown: React.ReactNode;
    averageRating: React.ReactNode;
    reviewCount: React.ReactElement;
    refineReviewsProps: INodeProps;
    reviewsListProps: INodeProps;
    reviewCards: IReviewCardViewProps[];
    userReview?: IReviewCardViewProps;
    pageControls: React.ReactNode;
    noReviewsMessage: React.ReactElement;
    noReviewsWithFilterMessage: React.ReactElement;
    heading: React.ReactNode;
    sortByOptions: IRnrOrderByKeyValuePair[];
    filterByOptions: IRnrOrderByKeyValuePair[];
}

/**
 *
 * ReviewsList component
 * @extends {React.Component<IReviewsListProps<IReviewsListData>, IReviewsListState>}
 */
@observer
class ReviewsList extends React.Component<IReviewsListProps<IReviewsListData>, IReviewsListState> {
    public sortByDropdownOptions: IRnrOrderByKeyValuePair[] = [
        { key: 'MostHelpful', value: this.props.resources.mostHelpfulSortOptionText },
        { key: 'MostRecent', value: this.props.resources.mostRecentSortOptionText },
        { key: 'HighestRating', value: this.props.resources.highestRatedSortOptionText },
        { key: 'LowestRating', value: this.props.resources.lowestRatedSortOptionText }
    ];

    public filterByDropdownOptions: IRnrKeyValuePair[] = [
        { key: '1;2;3;4;5', value: this.props.resources.allRatinsFilterByOptionText },
        { key: '5', value: this.props.resources.fiveStarFilterByOptionText },
        { key: '4', value: this.props.resources.fourStarFilterByOptionText },
        { key: '3', value: this.props.resources.threeStarFilterByOptionText },
        { key: '2', value: this.props.resources.twoStarFilterByOptionText },
        { key: '1', value: this.props.resources.oneStarFilterByOptionText }
    ];

    private _userReviewModalToggle: React.RefObject<HTMLButtonElement>;
    private _userReportModalToggle: React.RefObject<HTMLButtonElement>;
    private telemetryContent?: ITelemetryContent;

    constructor(props: IReviewsListProps<IReviewsListData>) {
        super(props);
        const {userReview: {result: userReview}} = this.props.data;

        this.state = {
            skipItems: 0,
            reviewsCount: 0,
            listOfReviews: [],
            currentPage: 1,
            showSpinner: false,
            isFilterApplied: false,
            selectedSortByOption: this.sortByDropdownOptions[0],
            selectedFilterByOption: this.filterByDropdownOptions[0],
            userReviewRating: userReview ? userReview.rating : 0,
            userReviewText: userReview ? userReview.reviewText : '',
            userReviewTitle: userReview ? userReview.title : '',
            isReviewModalOpen: false,
            hasReviewError: false,
            isReportModalOpen: false,
            hasReportError: false,
            reported: false,
            reportedKey: ReviewConcernCategory.SpamAdvertising,
            reportingReviewId: '',
            reportedReviews: [],
            votedReviews: []
        };

        this._userReviewModalToggle = React.createRef<HTMLButtonElement>();
        this._userReportModalToggle = React.createRef<HTMLButtonElement>();
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public componentDidMount(): void {
        this.props.data.reviewsList.then((reviewsList) => {
            if (
                reviewsList &&
                reviewsList.pagingInfo &&
                reviewsList.pagingInfo.totalItems &&
                reviewsList.items &&
                reviewsList.items.length > 0
            ) {
                this.setState({
                    listOfReviews: reviewsList.items,
                    reviewsCount: reviewsList.pagingInfo.totalItems,
                });
            }
        });

        reaction(
            () => this.props.data.ratingsReviewsState.result && this.props.data.ratingsReviewsState.result.filterKey,
            async (filterKey: string | undefined) => {
                const filterKeyValue = Number(filterKey);
                const dropdownItemsCount = this.filterByDropdownOptions.length;
                if (
                    !!filterKey &&
                    !isNaN(filterKeyValue) &&
                    filterKeyValue < dropdownItemsCount
                ) {
                    const filterByOption = this.filterByDropdownOptions.find((option: IRnrKeyValuePair) => option.key === filterKey);
                    if (!filterByOption) {
                        this.props.telemetry.warning(`[reviews-list] cannot find filter with key ${filterKey}`);
                    } else {
                        await this.updateReviews(0, this.state.selectedSortByOption, filterByOption, 1, true);
                        const selectedIndex = dropdownItemsCount - filterKeyValue;
                        this.setState({
                            selectedFilterByOption: this.filterByDropdownOptions[selectedIndex]
                        });
                    }
                }
            }
        );
    }

    public render(): JSX.Element | null {
        const {className, heading, reviewsShownOnEachPage} = this.props.config;
        const {currentPage, reviewsCount, selectedFilterByOption, selectedSortByOption } = this.state;
        const { ratingsSummary: { result: ratingsSummary } } = this.props.data;
        const resources = this.props.resources;
        const completeClass = classname('ms-reviews-list', className);
        const viewProps: IReviewsListViewProps = {
            ...this.props,
            state: this.state,
            className: completeClass,
            moduleProps: {
                moduleProps: this.props,
                className: completeClass
            },
            callbacks: this.reviewsListCallbacks,
            reviewModal: this._userReviewModal(),
            reportReviewModal: this._reportReviewModal(),
            filterByDropdown: (
                                <LabeledDropdown
                                    labelText={resources.filterByDropdownText}
                                    dropdownId='reviewsListFilterBy'
                                    dropdownOptions={this.filterByDropdownOptions}
                                    selectedOption={selectedFilterByOption}
                                    onSelectOption={this.updateFilterByDropdown}
                                    controlledByParent={true}
                                />
            ),
            sortByDropdown: <LabeledDropdown labelText={resources.sortByDropdownText} dropdownId='reviewsListSortBy' dropdownOptions={this.sortByDropdownOptions} selectedOption={selectedSortByOption} onSelectOption={this.updateSortByDropdown}/>,
            averageRating: ratingsSummary && (
                <RatingComponent
                    avgRating={ratingsSummary.averageRating || 0}
                    readOnly={true}
                    ariaLabel={format(resources.averageRatingAriaLabel, ratingsSummary.averageRating, '5')}
                    ratingCount={`${ratingsSummary.reviewsCount}`}
                    data={{}}
                    context={this.props.context}
                    id={this.props.id}
                    typeName={this.props.typeName}
                />
            ),
            reviewCount: <ReviewCount resources={{...this.props.resources}} currentPage={currentPage} reviewsCount={reviewsCount} reviewsShownOnEachPage={reviewsShownOnEachPage}/>,
            refineReviewsProps: {className: 'ms-reviews-list__refiners'},
            reviewsListProps: {className: 'ms-reviews-list__reviews'},
            reviewCards: this._reviewCards(this.state.listOfReviews),
            userReview: this._userReview(),
            pageControls: (
                        <PageControls
                            resources={{...this.props.resources}}
                            currentPage={currentPage}
                            reviewsShownOnEachPage={reviewsShownOnEachPage}
                            selectedSortByOption={selectedSortByOption}
                            selectedFilterByOption={selectedFilterByOption}
                            updateReviews={this.updateReviews}
                            reviewsCount={reviewsCount}
                            telemetryContent={this.telemetryContent}
                        />),
            noReviewsMessage: <span className='ms-reviews-list__empty-message' aria-live='polite'>{resources.noReviewsMessage}</span>,
            noReviewsWithFilterMessage: <span className='ms-reviews-list__filter-message' aria-live='polite'>{resources.noReviewsWithSelectedFilterMessage}</span>,
            heading: heading && (
                <Msdyn365.Text
                    className='ms-reviews-list__heading'
                    tag={heading.tag || 'h2'}
                    text={heading.text}
                    editProps={{onEdit:this.handleHeadingChange, requestContext: this.props.context.request}}
                />
            ),
            sortByOptions: this.sortByDropdownOptions,
            filterByOptions: this.filterByDropdownOptions
        } as IReviewsListViewProps;

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;

    private _userReview = () => {
        const userReview = this.props.data.userReview.result;

        return userReview && this._reviewCard(userReview, true);
    }

    private _reviewCards = (reviewList: Review[]) => {
        const userReview = this.props.data.userReview.result;
        const reviewElements: IReviewCardViewProps[] = [];

        for (const review of reviewList) {
            if (!review.isTakenDown && review.isPublished && userReview ? review.reviewId !== userReview.reviewId : true) {
                reviewElements.push(this._reviewCard(review, false));
            }
        }
        return reviewElements;
    };

    private _reviewCard = (review: Review, userReview: boolean): IReviewCardViewProps => {
        return ReviewCard({
            review: review,
            resources: {...this.props.resources},
            context:  this.props.context,
            isUserReview: userReview,
            parentId: this.props.id,
            parentType: this.props.typeName,
            reportedReviews: this.state.reportedReviews,
            returnRef: this._userReportModalToggle,
            reportedReviewId: this.state.reportingReviewId,
            toggleWriteReviewModal: this._toggleReviewModal,
            toggleReportReviewModal: this._onReportModalOpen,
            updateReviewHelpfulness: this.updateReviewHelpfulnessVote,
            votedReviews: this.state.votedReviews
        });
    }

    private _userReviewModal = (): IReviewModalViewProps => {
        return ReviewModal({
            userReview: this.props.data.userReview.result,
            product: this.props.data.product.result,
            resources: {...this.props.resources},
            context: this.props.context,
            parentId: this.props.id,
            parentType: this.props.typeName,
            isOpen: this.state.isReviewModalOpen,
            rating: this.state.userReviewRating,
            reviewTitle: this.state.userReviewTitle,
            reviewText: this.state.userReviewText,
            onModalToggle: this._toggleReviewModal,
            onTitleChange: this._onTitleChange,
            onTextChange: this._onTextChange,
            onRatingChange: this._onRatingChange,
            onReviewComplete: this._onReviewComplete,
            renderContextId: 'writeReview-list',
            returnRef: this._userReviewModalToggle,
            hasError: this.state.hasReviewError
        });
    }

    private _onTitleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        this.reviewsListCallbacks.updateReviewTitle(event.target.value);
    }

    private _onTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {
        this.reviewsListCallbacks.updateReviewText(event.target.value);
    }

    private _onRatingChange = (value: number): void => {
        this.reviewsListCallbacks.updateRating(value);
    }

    private _toggleReviewModal = (): void => {
        const userReview = this.props.data.userReview.result;
        if (this.state.isReviewModalOpen) {
            this.setState({isReviewModalOpen: false, hasReviewError: false});

        } else {
            this.setState({
                isReviewModalOpen: true,
                userReviewText: userReview!.reviewText,
                userReviewTitle: userReview!.title,
                userReviewRating: userReview!.rating
            });
        }
    }

    private _onReviewComplete = (isSuccess: boolean): void => {
        if (isSuccess) {
            this.setState({isReviewModalOpen: false, hasReviewError: false});
        } else {
            this.setState({hasReviewError: true});
        }
    }

    private _reportReviewModal = () => {
        return ReportReviewModal({
            resources: {...this.props.resources},
            context:  this.props.context,
            isOpen: this.state.isReportModalOpen,
            returnRef: this._userReportModalToggle,
            reportedKey: this.state.reportedKey,
            onModalToggle: this._onReportModalClose,
            onRadioChange: this._onRadioChange,
            reportReview: this._reportReview,
            hasError: this.state.hasReportError,
            telemetryContent: this.telemetryContent
        });
    }

    private _onReportModalOpen = (reviewId: string) => {
        this.setState({isReportModalOpen: true, reportingReviewId: reviewId, reported: false, reportedKey: ReviewConcernCategory.SpamAdvertising});
    }

    private _onReportModalClose = () => {
        this.setState({isReportModalOpen: false, hasReportError: false});
    }

    private _onRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        this.setState({reportedKey: event.currentTarget.getAttribute('data-key') || ''});
    }

    private _reportReviewCallback = (reviewId: string, reportedKey: string) => {
        reportReviewConcern(
            new ReportReviewConcernInput(
                reviewId,
                getRnrPartnerId(this.props.context.actionContext),
                this.props.context.request.locale,
                reportedKey,
                this.getUserToken(this.props.context.request),
                getRnrAuthEndpointId(this.props.context.actionContext)
            ),
            this.props.context.actionContext
        ).then(_value => {
            const reportedReview = this.state.reportedReviews;
            reportedReview.push(reviewId);
            this.setState({reported: true, reportedReviews: reportedReview, hasReportError: false});
        }).catch(_value => {
            this.setState({hasReportError: true});
        });
    }

    private _reportReview = () => {
        this._reportReviewCallback(this.state.reportingReviewId, this.state.reportedKey);
    }

    private updateSortByDropdown = async (notification: ILabeledDropdownOnChangeNotification) => {
        await this.updateReviews(0, notification.selectedOption, this.state.selectedFilterByOption, 1, this.state.isFilterApplied);
    };

    private updateFilterByDropdown = async (notification: ILabeledDropdownOnChangeNotification) => {
        await this.updateReviews(0, this.state.selectedSortByOption, notification.selectedOption, 1, true);
    };

    private updateReviews = async (
        skipItems: number | 0,
        selectedSortByOption: ILabeledDropdownOption,
        selectedFilterByOption: ILabeledDropdownOption,
        currentPage: number,
        isFilterApplied: boolean
    ) => {
        // @ts-ignore
        const productId = getSelectedProductIdFromActionInput(this.props.context.actionContext);
        if (productId === undefined) {
            return;
        }
        const result = await getReviewsForGivenProduct(
            // Task #211227597 Remove this hardcoded values.
            new GetProductReviewsInput(
                productId,
                getRnrPartnerId(this.props.context.actionContext),
                this.props.context.request.locale,
                getRnrEndpointId(this.props.context.actionContext),
                selectedSortByOption.key,
                selectedFilterByOption.key,
                skipItems < 0 ? 0 : skipItems
            ),
            this.props.context.actionContext
        );
        if (result && result.items && result.pagingInfo && result.pagingInfo.totalItems !== undefined) {
            this.setState({
                currentPage: currentPage,
                listOfReviews: result.items,
                selectedSortByOption,
                selectedFilterByOption,
                reviewsCount: result.pagingInfo.totalItems,
                isFilterApplied: isFilterApplied
            });
        }
    };

    private _updateVoteUi = (reviewId: string, isHelpful: boolean): void => {
        let alreadyExists = false;
        let list = this.state.votedReviews.map((review) => {
            if(review.reviewId === reviewId) {
                review.approved = isHelpful;
                alreadyExists = true;
            }
            return review;
        });

        if (!alreadyExists) {
            list = list.concat({reviewId: reviewId, approved: isHelpful});
        }

        this.setState({votedReviews: list});
    }

    private updateReviewHelpfulnessVote = (reviewId: string, isHelpful: boolean): void => {
        submitHelpfulnessVote(
            new SubmitHelpfulnessVoteInput(
                reviewId,
                getRnrPartnerId(this.props.context.actionContext),
                this.props.context.request.locale,
                isHelpful,
                this.getUserToken(this.props.context.request),
                getRnrAuthEndpointId(this.props.context.actionContext)
            ),
            this.props.context.actionContext
        ).then(() => {
            this._updateVoteUi(reviewId, isHelpful);
        });
    };

    private getUserToken = (context: Msdyn365.IRequestContext): string => {
        return context && context.user && context.user.token;
    };

    // tslint:disable-next-line
    private reviewsListCallbacks: IReviewsListCallbacks = {
        updateReviewTitle: (title: string): void => {
            this.setState({userReviewTitle: title});
        },
        updateReviewText: (text: string): void => {
            this.setState({userReviewText: text});
        },
        updateRating: (rating: number): void => {
            this.setState({userReviewRating: rating});
        },
        onReviewSubmitted: (isSuccessful: boolean): void => {
            if (isSuccessful) {
                this.setState({isReviewModalOpen: false, hasReviewError: false});
            } else {
                this.setState({hasReviewError: true});
            }
        },
        submitReview: submitReview,
        toggleModal: this._toggleReviewModal,
        updateReviewHelpfulnessVote: this.updateReviewHelpfulnessVote,
        toggleReportModal: (reviewId: string): void => {
            this.state.isReportModalOpen? this._onReportModalOpen(reviewId) : this._onReportModalClose();
        },
        reportReview: this._reportReviewCallback,
        updateFilterByDropdown: this.updateFilterByDropdown,
        updateSortByDropdown: this.updateSortByDropdown,
        updateReviews: this.updateReviews
    };
}

export default ReviewsList;
