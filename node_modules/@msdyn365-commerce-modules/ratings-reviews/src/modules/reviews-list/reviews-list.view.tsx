import {  IModuleProps, Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
import {IReviewModalViewProps} from '../../common/review-modal';
import {IReportReviewModalViewProps} from './components/report-review-modal';
import {IReviewCardViewProps} from './components/review-card';
import { IReviewsListState, IReviewsListViewProps } from './reviews-list';

const ReviewsListview: React.FC<IReviewsListViewProps> = props => {
    const {
        averageRating,
        filterByDropdown,
        heading,
        moduleProps,
        noReviewsMessage,
        noReviewsWithFilterMessage,
        pageControls,
        refineReviewsProps,
        reportReviewModal,
        reviewsListProps,
        reviewCards,
        reviewCount,
        reviewModal,
        sortByDropdown,
        state,
        userReview
    } = props;

    if (!userReview && reviewCards.length === 0 && !state.isFilterApplied) {
        return  <Module {...moduleProps}>{noReviewsMessage}</Module>;
    }

    return (
        <Module {...moduleProps}>
            {heading}
            {averageRating}
            {reviewCount}
            <Node {...refineReviewsProps} >
                {sortByDropdown}
                {filterByDropdown}
            </Node>
            <Node {...reviewsListProps}>
                {userReview && buildReviewCard(userReview)}
                {reviewCards.map(review => {
                    return buildReviewCard(review);
                })}
            </Node>
            { reviewCards.length === 0 && state.isFilterApplied && noReviewsWithFilterMessage}
            {pageControls}
            {createReviewModal(reviewModal, moduleProps)}
            {createReportModal(reportReviewModal, state)}
        </Module>
    );
};

const buildReviewCard = (props: IReviewCardViewProps) => {
    return (
        <Node {...props.cardProps}>
            <Node {...props.headerProps}>
                {props.rating}
                {props.name}
            </Node>
            <Node {...props.cardBodyProps}>
                <Node {...props.reviewProps}>
                    {props.reviewTitle}
                    {props.date}
                    {props.reviewText}
                </Node>
                <Node {...props.responseProps}>
                    {props.responseName}
                    {props.responseDate}
                    {props.responseText}
                </Node>
                <Node {...props.controlsProps}>
                    {props.ratingHelpfulLabel}
                    {props.like}
                    {props.dislike}
                    {props.edit}
                    {props.report}
                </Node>
            </Node>
        </Node>
    );
};

const createReviewModal = (props: IReviewModalViewProps, moduleProps: IModuleProps): JSX.Element => {
    return (
        <Module {...props.modal} {...moduleProps}>
            {props.modalHeader}
            <Node {...props.modalBody}>
                <Node {...props.form}>
                    <Node {...props.inputRow}>
                        {props.rating}
                        {props.ratingLabel}
                    </Node>
                    <Node {...props.inputRow}>
                        {props.titleLabel}
                        {props.titleInput}
                    </Node>
                    <Node {...props.inputRow}>
                        {props.textLabel}
                        {props.textInput}
                    </Node>
                    {props.privacyPolicyUrl}
                    {props.error}
                </Node>
            </Node>
            <Node {...props.modalFooter}>
                {props.submitButton}
                {props.cancelButton}
            </Node>
        </Module>
    );
};

const createReportModal = (props: IReportReviewModalViewProps, state: IReviewsListState): JSX.Element => {
    return (
        <Node {...props.modal}>
            <Node {...props.modalHeader}>
                {state.reported ? props.headerSubmitted : props.header}
            </Node>
            <Node {...props.modalBody}>
                {state.reported ? props.reportSubmittedMessage : [props.reportMessage, props.radioButtons, props.error]}
            </Node>
            <Node {...props.modalFooter}>
                {state.reported ? props.succesfulButton : [props.submitButton, props.cancelButton]}
            </Node>
        </Node>
    );
};

export default ReviewsListview;