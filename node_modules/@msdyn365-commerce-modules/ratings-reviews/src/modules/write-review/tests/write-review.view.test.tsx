/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { Review } from '@msdyn365-commerce/commerce-entities';
import { buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';

import {  SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { render } from 'enzyme';
import * as React from 'react';
import { IWriteReviewCallbacks, IWriteReviewData, IWriteReviewProps, IWriteReviewState, IWriteReviewViewProps, WriteReviewView } from '../';

const emptyMockData: IWriteReviewData = {
    product: wrapInResolvedAsyncResult<SimpleProduct>({RecordId: 44} as SimpleProduct),
    userReview: wrapInResolvedAsyncResult<Review>(undefined)
};

const reviewModal = {
    modal: { className: 'modal'},
    modalHeader: <div className='modalHeader'/>,
    modalFooter: { className: 'modalFooter'},
    modalBody: { className: 'modalBody'},
    cancelButton: <button>cancelButton</button>,
    submitButton: <button>submitButton</button>,
    rating: <div>rating</div>,
    ratingLabel: <div>ratingLabel</div>,
    titleInput: <input className='titleInput'/>,
    titleLabel: <div>titleLabel</div>,
    textInput: <input className='textInput'/>,
    textLabel: <div>textLabel</div>,
    privacyPolicyUrl: <div>privacyPolicyUrl</div>,
    form: { className: 'modalForm'},
    inputRow: { className: 'inputRow'},
    error: <div>error</div>
};

const callBacks: IWriteReviewCallbacks = {
    updateReviewTitle: jest.fn(),
    updateReviewText: jest.fn(),
    updateRating: jest.fn(),
    onReviewSubmitted: jest.fn(),
    submitReview: jest.fn(),
    toggleModal: jest.fn()
};

let mockProps: IWriteReviewViewProps;

describe('Write Review unit tests - View', () => {
    it('renders correctly', () => {
        const moduleProps: IWriteReviewProps<IWriteReviewState> = buildMockModuleProps({}, {}) as IWriteReviewProps<IWriteReviewState>;
        mockProps = {
            ...moduleProps,
            className: 'className',
            state: {
                rating: 4,
                reviewTitle: 'ffff',
                reviewText: 'wwwwwwwwwwwwwwwwwwwwwww',
                isReviewModalOpen: false,hasReviewError: false
            },
            callbacks: callBacks,
            data: emptyMockData,
            moduleProps: {
                moduleProps: moduleProps,
                className: 'className'
            },
            signInMessage: <div>signInMessage</div>,
            signInButton: <div>signInButton</div>,
            modalToggle: <div>modalToggle</div>,
            reviewModal: reviewModal,
            heading: <h1>Heading</h1>
        };
        const component = render(<WriteReviewView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly for authenticated users', () => {
        const mockContext = buildMockCoreContext({});
        mockContext.request.user.isAuthenticated = true;
        const moduleProps: IWriteReviewProps<IWriteReviewState> = buildMockModuleProps({}, {}, {}, mockContext) as IWriteReviewProps<IWriteReviewState>;
        mockProps = {
            ...moduleProps,
            className: 'className',
            state: {
                rating: 4,
                reviewTitle: 'ffff',
                reviewText: 'wwwwwwwwwwwwwwwwwwwwwww',
                isReviewModalOpen: false,
                hasReviewError: false
            },
            callbacks: callBacks,
            data: emptyMockData,
            moduleProps: {
                moduleProps: moduleProps,
                className: 'className'
            },
            signInMessage: <div>signInMessage</div>,
            signInButton: <div>signInButton</div>,
            modalToggle: <div>modalToggle</div>,
            reviewModal: reviewModal,
            heading: <h1>Heading</h1>
        };
        const component = render(<WriteReviewView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly for successfully submitted reviews', () => {
        const mockContext = buildMockCoreContext({});
        mockContext.request.user.isAuthenticated = true;
        const moduleProps: IWriteReviewProps<IWriteReviewState> = buildMockModuleProps({}, {}, {}, mockContext) as IWriteReviewProps<IWriteReviewState>;
        mockProps = {
            ...moduleProps,
            className: 'className',
            state: {
                rating: 4,
                reviewTitle: 'ffff',
                reviewText: 'wwwwwwwwwwwwwwwwwwwwwww',
                isReviewModalOpen: false,
                hasReviewError: false
            },
            callbacks: callBacks,
            data: emptyMockData,
            moduleProps: {
                moduleProps: moduleProps,
                className: 'className'
            },
            signInMessage: <div>signInMessage</div>,
            signInButton: <div>signInButton</div>,
            modalToggle: <div>modalToggle</div>,
            reviewModal: reviewModal,
            heading: <h1>Heading</h1>
        };
        const component = render(<WriteReviewView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});