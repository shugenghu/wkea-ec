/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
jest.mock('../../../actions/submit-user-review', () => ({
  __esModule: true, // this property makes it work
  default: jest.fn().mockImplementation(() => Promise.resolve('myReviewId'))
}));
import { buildMockActionContext, buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import * as React from 'react';
import { IWriteReviewConfig, IWriteReviewData, IWriteReviewProps, IWriteReviewResources, IWriteReviewViewProps, WriteReview } from '..';

import {  SimpleProduct } from '@msdyn365-commerce/retail-proxy';

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { Review } from '@msdyn365-commerce/commerce-entities';

const mockActionContext = buildMockActionContext();
mockActionContext.requestContext.apiSettings.rnr = {id: 'rnrId', url: 'rnrUrl', proxyUrl: ''};
const flushPromises = () => new Promise(setImmediate);

const emptyMockData: IWriteReviewData = {
    product: wrapInResolvedAsyncResult<SimpleProduct>(undefined),
    userReview: wrapInResolvedAsyncResult<Review>(undefined)
};

const nopReviewMockData: IWriteReviewData = {
    product: wrapInResolvedAsyncResult<SimpleProduct>({RecordId: 4444} as SimpleProduct),
    userReview: wrapInResolvedAsyncResult<Review>(undefined)
};

const updateReviewMockData: IWriteReviewData = {
    product: wrapInResolvedAsyncResult<SimpleProduct>({RecordId: 4444} as SimpleProduct),
    userReview: wrapInResolvedAsyncResult({
      reviewId: 'Review-1',
      productId: 'product1',
      userName: 'user1',
      rating: 3,
      market: 'US',
      locale: 'en',
      thoughtfulnessScore: 0,
      helpfulPositive: 50,
      helpfulNegative: 10,
      reviewText:
          'Lorem ipsum dolor sit amet, cu fugit copiosae quo, nam illud docendi iudicabit ex. ' +
          'Menandri expetendis dissentiunt ut per, mea cu error adipiscing. At solum causae bonorum vis, pri dictas praesent ut, inermis suavitate expetendis quo at. ' +
          'Per ea eruditi indoctum omittantur, sea ad exerci salutandi laboramus. Dico noluisse maiestatis in vel.',
      title: 'Some title to test reviews card layout',
      submittedDateTime: new Date('2019-03-04T19:52:10.044Z'),
      isTakenDown: true,
      violationsFound: false,
      isPublished: true,
      isRevised: false,
      updatedSinceResponse: false
    } as Review)
};

const mockConfig: IWriteReviewConfig = {
};

const mockResources: IWriteReviewResources = {
  signInAriaLabel: 'To Rate and review, sign in',
  signInLabel: 'Sign In',
  reviewButtonLabel: 'review this product',
  privacyPolicyTextFormat: 'By clicking submit, you accept our {0}.',
  privacyPolicyTitle: 'Privacy Policy',
  reviewTextLabel: 'Review',
  reviewTitleLabel: 'Title',
  selectRatingAriaLabel: 'Set ratings as {0} out of {1} stars',
  selectRatingLabel: 'Choose a rating',
  writeReviewModalTitle: 'Write a review',
  editReviewModalTitle: 'Edit your review',
  discardReviewButtonText: 'Discard',
  errorMessageText: 'Something went wrong, please try again',
  submitReviewButtonText: 'Submit',
  editReviewButtonText: 'Edit',
  signInMessage: 'Please sign in to rate and review.',
};

const mockActions = {};

// @ts-ignore
// tslint:disable-next-line:no-any
const mockAuthenticatedContext: ICoreContext<any> = {
  // @ts-ignore
  request: {
    // @ts-ignore: optOutWebActivityTracking should not be required
    user: {
        token: 'Dummy token',
        isAuthenticated: true
    }
  },
  app: {
    config:{
   }
  },
  actionContext: mockActionContext
};

// @ts-ignore
// tslint:disable-next-line:no-any
const mockUnauthenticatedContext: ICoreContext<any> = {
  // @ts-ignore
  request: {
    user: {
        token: '',
        isAuthenticated: false,
        optOutWebActivityTracking: false
    }
  },
  app: {
    config:{
   }
  },
  actionContext: mockActionContext
};

describe('WriteReview', () => {
  let moduleProps: IWriteReviewProps<IWriteReviewData>;
  beforeAll(() => {
    // @ts-ignore
    moduleProps = {...buildMockModuleProps(updateReviewMockData, mockActions, mockConfig, mockAuthenticatedContext) as IWriteReviewProps<IWriteReviewData>,resources:mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
  });

  it('renders correctly when product is not present', () => {
    // @ts-ignore
    moduleProps = {...buildMockModuleProps(emptyMockData, mockActions, mockConfig, mockAuthenticatedContext) as IWriteReviewProps<IWriteReviewData>,resources:mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
    const component = mount(<WriteReview {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IWriteReviewViewProps = component.childAt(0).props().props;
    expect(viewProps).toBeDefined();

    expect(viewProps.signInMessage).toBeTruthy();
    expect(viewProps.signInButton).toBeTruthy();
    expect(viewProps.modalToggle).not.toBeTruthy();
    expect(viewProps.reviewModal).toBeTruthy();
    component.unmount();
  });

  it('renders correctly when product is not present', () => {
    // @ts-ignore
    moduleProps = {...buildMockModuleProps(updateReviewMockData, mockActions, mockConfig, mockAuthenticatedContext) as IWriteReviewProps<IWriteReviewData>,resources:mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
    const component = mount(<WriteReview {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IWriteReviewViewProps = component.childAt(0).props().props;
    expect(viewProps).toBeDefined();

    expect(viewProps.signInMessage).toBeTruthy();
    expect(viewProps.signInButton).toBeTruthy();
    expect(viewProps.modalToggle).toBeTruthy();
    expect(viewProps.reviewModal).toBeTruthy();
    component.unmount();
  });

  it('Updates the review title state', () => {
    // @ts-ignore
    moduleProps = {...buildMockModuleProps(updateReviewMockData, mockActions, mockConfig, mockAuthenticatedContext) as IWriteReviewProps<IWriteReviewData>,resources:mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
    const component = mount(<WriteReview {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IWriteReviewViewProps = component.childAt(0).props().props;
    const changeEvent = {
      target: { value: 'foo' }
    };
    const input = mount(viewProps.reviewModal.titleInput);
    input.simulate('change', changeEvent);
    expect(component.state('reviewTitle')).toBe('foo');
    input.unmount();
    component.unmount();
  });

  it('Updates the review text state', () => {
    const component = mount(<WriteReview {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IWriteReviewViewProps = component.childAt(0).props().props;
    const changeEvent = {
      target: { value: 'foo' }
    };
    const input = mount(viewProps.reviewModal.textInput);
    input.simulate('change', changeEvent);
    expect(component.state('reviewText')).toBe('foo');
    input.unmount();
    component.unmount();
  });

  it('Toggles the review modal', () => {
    const component = mount(<WriteReview {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IWriteReviewViewProps = component.childAt(0).props().props;
    const input = mount(viewProps.modalToggle as React.ReactElement);
    input.simulate('click');
    expect(component.state('isReviewModalOpen')).toBe(true);
    input.simulate('click');
    expect(component.state('isReviewModalOpen')).toBe(false);
    input.unmount();
    component.unmount();
  });

  it('Clears the data in state if there is no user review upon opening', () => {
    // @ts-ignore
    moduleProps = {...buildMockModuleProps(nopReviewMockData, mockActions, mockConfig, mockAuthenticatedContext) as IWriteReviewProps<IWriteReviewData>,resources:mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
    const component = mount(<WriteReview {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IWriteReviewViewProps = component.childAt(0).props().props;
    // tslint:disable-next-line: no-any
    const input = mount(viewProps.modalToggle as any as React.ReactElement);
    input.simulate('click');
    expect(component.state('isReviewModalOpen')).toBe(true);
    expect(component.state('reviewText')).toBe('');
    expect(component.state('reviewTitle')).toBe('');
    expect(component.state('rating')).toBe(0);
    input.unmount();
    component.unmount();
  });

  it('Closes the modal upon submitting', async () => {
    // @ts-ignore
    moduleProps = {...buildMockModuleProps(updateReviewMockData, mockActions, mockConfig, mockAuthenticatedContext) as IWriteReviewProps<IWriteReviewData>,resources:mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
    const component = mount(<WriteReview {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IWriteReviewViewProps = component.childAt(0).props().props;
    // tslint:disable-next-line: no-any
    const input = mount(viewProps.reviewModal.submitButton);
    input.simulate('click');
    await flushPromises();
    expect(component.state('isReviewModalOpen')).toBe(false);
    input.unmount();
  });
});