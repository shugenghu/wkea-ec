/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { Review } from '@msdyn365-commerce/commerce-entities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import classnames from 'classnames';
import React from 'react';
import { IReviewModalViewProps, ReviewModal, submitReview } from '../../common/review-modal';
import { TOGGLE_REVIEW_MODAL_BUTTON_ID } from '../../common/rnrInterface';
import { ModalToggle, SignInButton, SignInMessage } from './components/components';
import { IWriteReviewData } from './write-review.data';
import { IWriteReviewProps } from './write-review.props.autogenerated';

export interface IWriteReviewCallbacks {
    toggleModal(): void;
    updateReviewTitle(title: string): void;
    updateReviewText(text: string): void;
    updateRating(rating: number): void;
    onReviewSubmitted(isSuccessful: boolean): void;
    submitReview(product: SimpleProduct, title: string, text: string, rating: number, context: Msdyn365.ICoreContext, userReview?: Review, onReviewSubmission?: (isSuccessful: boolean) => void): void;
}

export interface IWriteReviewState {
    rating: number;
    reviewTitle: string;
    reviewText: string;
    isReviewModalOpen: boolean;
    hasReviewError: boolean;
}

export interface IWriteReviewViewProps extends IWriteReviewProps<IWriteReviewData> {
    state: IWriteReviewState;
    className: string;
    callbacks: IWriteReviewCallbacks;
    signInMessage: React.ReactNode;
    signInButton: React.ReactNode;
    modalToggle: React.ReactNode;
    reviewModal: IReviewModalViewProps;
    moduleProps: IModuleProps;
    heading: React.ReactNode;
}

/**
 * This module is enables user's to leave ratings and reviews on a specific product
 * WriteReview module
 * @extends {React.PureComponent<IWriteReviewProps<IWriteReviewData>>}
 */
class WriteReview extends React.PureComponent<IWriteReviewProps<IWriteReviewData>, IWriteReviewState> {
    private _modalToggleRef: React.RefObject<HTMLButtonElement> | undefined;
    private telemetryContent: ITelemetryContent;

    public constructor(props: IWriteReviewProps<IWriteReviewData>) {
        super(props);
        const {userReview: {result: userReview}} = this.props.data;
        this._toggleReviewModal = this._toggleReviewModal.bind(this);
        this._modalToggleRef = React.createRef<HTMLButtonElement>();
        const rating = userReview ? userReview.rating : 0;
        const reviewTitle = userReview ? userReview.title : '';
        const reviewText = userReview ? userReview.reviewText : '';

        this.state = {
            isReviewModalOpen: false,
            rating: rating,
            reviewTitle: reviewTitle,
            reviewText: reviewText,
            hasReviewError: false
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public render(): JSX.Element {
        const { resources } = this.props;
        const { className, heading } = this.props.config;
        const {product: {result: product}, userReview: {result: userReview}} = this.props.data;

        const userInfo = this.props.context && this.props.context.request && this.props.context.request.user;
        const completeClass = classnames('ms-write-review', className);
        const viewProps = {
            ...this.props,
            state: this.state,
            className: completeClass,
            moduleProps: {
                moduleProps: this.props,
                className: completeClass,
                id: null
            },
            callbacks: this.writeReviewCallbacks,
            signInMessage: <SignInMessage text={resources.signInMessage}/>,
            signInButton: <SignInButton text={resources.signInLabel} ariaLabel={resources.signInAriaLabel} href={userInfo.signInUrl!} telemetryContent={this.telemetryContent}/>,
            modalToggle: product && (
                        <ModalToggle
                            text={userReview? resources.editReviewButtonText : resources.reviewButtonLabel}
                            ariaLabel={resources.reviewButtonLabel}
                            innerRef={this._modalToggleRef}
                            onClick={this._toggleReviewModal}
                            id={TOGGLE_REVIEW_MODAL_BUTTON_ID}
                            telemetryContent={this.telemetryContent}
                        />
            ),
            reviewModal: this._buildUserReviewModal(),
            heading: heading && heading.text && (
                <Msdyn365.Text
                    className='ms-write-review__heading'
                    tag={heading.tag || 'h2'}
                    text={heading.text}
                    editProps={{onEdit:this.handleHeadingChange, requestContext: this.props.context.request}}
                />
            )
        } as IWriteReviewViewProps;

        return this.props.renderView(viewProps) as React.ReactElement;
    }
    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;

    private _onTitleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        this.writeReviewCallbacks.updateReviewTitle(event.target.value);
    }

    private _onTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {
        this.writeReviewCallbacks.updateReviewText(event.target.value);
    }

    private _onRatingChange = (value: number): void => {
        this.writeReviewCallbacks.updateRating(value);
    }

    private _toggleReviewModal  = (): void => {
        const userReview = this.props.data.userReview.result;
        if (this.state.isReviewModalOpen) {
            this.setState({isReviewModalOpen: false, hasReviewError: false});
        } else {
            if(userReview) {
                this.setState({
                    isReviewModalOpen: true,
                    reviewText: userReview.reviewText,
                    reviewTitle: userReview.title,
                    rating: userReview.rating
                });
            } else {
                this.setState({
                    isReviewModalOpen: true,
                    reviewText:  '',
                    reviewTitle:  '',
                    rating:  0
                });
            }
        }
    }

    /**
     * This method builds the user review modal
     * @param config The module config
     */
    private _buildUserReviewModal(): IReviewModalViewProps {
        return ReviewModal({
            userReview: this.props.data.userReview.result,
            product: this.props.data.product.result,
            resources: {...this.props.resources},
            context: this.props.context,
            parentId: this.props.id,
            parentType: this.props.typeName,
            isOpen: this.state.isReviewModalOpen,
            rating: this.state.rating,
            reviewTitle: this.state.reviewTitle,
            reviewText: this.state.reviewText,
            onModalToggle: this._toggleReviewModal,
            onTitleChange: this._onTitleChange,
            onTextChange: this._onTextChange,
            onRatingChange: this._onRatingChange,
            onReviewComplete: this.writeReviewCallbacks.onReviewSubmitted,
            renderContextId: 'writeReview',
            returnRef: this._modalToggleRef,
            hasError: this.state.hasReviewError,
            telemetryContent: this.telemetryContent
        });
    }

    // tslint:disable-next-line
    private writeReviewCallbacks: IWriteReviewCallbacks = {
        toggleModal: this._toggleReviewModal,
        updateReviewTitle: (title: string): void => {
            this.setState({reviewTitle: title});
        },
        updateReviewText: (text: string): void => {
            this.setState({reviewText: text});
        },
        updateRating: (rating: number): void => {
            this.setState({rating: rating});
        },
        onReviewSubmitted: (isSuccessful: boolean): void => {
            if (isSuccessful) {
                this.setState({isReviewModalOpen: false, hasReviewError: false});
            } else {
                this.setState({hasReviewError: true});
            }
        },
        submitReview: submitReview
    };
}

export default WriteReview;
