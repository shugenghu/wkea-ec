/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { RatingsSummary } from '@msdyn365-commerce/commerce-entities';
import { buildMockCoreContext, buildMockModuleProps} from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import * as React from 'react';
import RatingsHistogram, {IRatingsHistogramViewProps} from '../ratings-histogram';
import { IRatingsHistogramData } from '../ratings-histogram.data';
import {
  IRatingsHistogramProps,
  IRatingsHistogramResources
} from '../ratings-histogram.props.autogenerated';

const emptyMockData: Partial<IRatingsHistogramData> = {
  ratingsSummary: wrapInResolvedAsyncResult<RatingsSummary>(undefined)
};

const mockData: Partial<IRatingsHistogramData> = {
  ratingsSummary: wrapInResolvedAsyncResult({
    tenantId: 'ATenant',
    productId: '1234',
    market: 'US',
    averageRating: 3.5,
    totalRatingsCount: 200,
    reviewsCount: 2,
    star5Count: 50,
    star4Count: 45,
    star3Count: 5,
    star2Count: 10,
    star1Count: 90,
    star5ReviewCount: 1,
    star4ReviewCount: 0,
    star3ReviewCount: 0,
    star2ReviewCount: 0,
    star1ReviewCount: 1
  } as RatingsSummary)
};

const mockResources: IRatingsHistogramResources = {
  barItemAriaLabel: '{0} stars, {1}%',
  averageRatingAriaLabel: '{0} stars, {1}',
  ratingCountAriaLabel: '{0} users rated this product.',
  ratingReviewText: 'review',
  ratingReviewsText: 'reviews'
};

// @ts-ignore
const mockContext: ICoreContext<{}> = {
  request: {
    market: 'en-us'
  }
};

const mockActions = {};

describe('EmptyRatingsHistogram', () => {
  let moduleProps: IRatingsHistogramProps<IRatingsHistogramData>;
  beforeAll(() => {
      // @ts-ignore
    moduleProps = {...buildMockModuleProps(emptyMockData, mockActions, {}, mockContext) as IRatingsHistogramProps<IRatingsHistogramData>,resources:mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
  });

  it('renders correctly', () => {
    const component = mount(<RatingsHistogram {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IRatingsHistogramViewProps = component.childAt(0).props().props;
    expect(viewProps).toBeDefined();
    expect(viewProps.histogramItems).toEqual([]);
    expect(viewProps.heading).not.toBeTruthy();
    expect(viewProps.averageRating).not.toBeTruthy();
    expect(viewProps.histogramProps).toEqual({className: 'ms-ratings-histogram__histogram'});
    component.unmount();
  });
});

describe('RatingsHistogram', () => {
  let moduleProps: IRatingsHistogramProps<IRatingsHistogramData>;
  const context = buildMockCoreContext({});

  beforeAll(() => {
    // @ts-ignore
    moduleProps = {...buildMockModuleProps(mockData, mockActions, {heading: {tag: '<h2>', text: 'heading'}}), context: context, resources:mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
  });
  it('renders correctly', () => {
    const component = mount(<RatingsHistogram {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IRatingsHistogramViewProps = component.childAt(0).props().props;
    expect(viewProps).toBeDefined();
    expect(viewProps.histogramItems).toBeTruthy();
    expect(viewProps.histogramItems).not.toEqual([]);
    expect(viewProps.heading).toBeTruthy();
    expect(viewProps.averageRating).toBeTruthy();
    expect(viewProps.histogramProps).toEqual({className: 'ms-ratings-histogram__histogram'});
    component.unmount();
  });

  it('Calls actionContext update', async () => {
    const flushPromises = () => new Promise(setImmediate);
    spyOn(context.actionContext, 'update');
    const component = mount(<RatingsHistogram {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: IRatingsHistogramViewProps = component.childAt(0).props().props;
    const button = <button {...viewProps.histogramItems[1].buttonProps}/>;
    const mountedButton = mount(button);
    mountedButton.simulate('click');
    await flushPromises();
    expect(context.actionContext.update).toHaveBeenCalled();
  });
});