{"version":3,"file":"get-product-reviews-input.js","sourceRoot":"./src/","sources":["actions/inputs/get-product-reviews-input.ts"],"names":[],"mappings":"AAoBA,MAAM,OAAO,sBAAsB;IAmD/B,YACI,SAAiB,EACjB,QAAgB,EAChB,gBAAwB,EACxB,eAAuB,EACvB,UAAkB,aAAa,EAC/B,cAAsB,EAAE,EACxB,YAAoB,CAAC,EACrB,WAAmB,EAAE,EACrB,YAA2B,IAAI,EAC/B,cAA6B,IAAI;QAgB9B,gBAAW,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;QACzJ,uBAAkB,GAAG,GAAG,EAAE,CAAC,eAAe,CAAC;QAC3C,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAhB9C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAGzC,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;CAKJ","sourcesContent":["import { CacheType, IActionInput } from '@msdyn365-commerce/core';\n\nexport type OrderBy =\n    | 'None'\n    | 'MostRecent'\n    | 'Oldest'\n    | 'HighestRating'\n    | 'LowestRating'\n    | 'MostHelpful'\n    | 'LeastHelpful'\n    | 'MostAsked'\n    | 'MostAnswered'\n    | 'LeastConcerns'\n    | 'MostConcerns'\n    | 'ReviewerNameAsc'\n    | 'ReviewerNameDesc';\n\n/**\n * ReviewsGetRatingsSummary Input Action\n */\nexport class GetProductReviewsInput implements IActionInput {\n    /**\n     * The Id representing the product to get the reviews for.\n     */\n    public productId: string;\n\n    /**\n     * The ID representing the tenant.\n     */\n    public tenantId: string;\n\n    /**\n     * The market for which to get the reviews from.\n     */\n    public localeListFilter: string;\n\n    /**\n     * Number of reviews to be shown on each page.\n     */\n    public pageSize: number;\n\n    /**\n     * Order in which reviews to be shown.\n     */\n    public orderBy: string;\n\n    /**\n     * Need to set this value if reviews need to be filtered with specific star rating .\n     */\n    public starFilters?: string;\n\n    /**\n     * Need to set this value if we need to skip few reviews.\n     */\n    public skipItems: number;\n\n    /**\n     * The continuation token\n     */\n    public pageToken: string | null;\n\n    /**\n     * Selects which data sources to use to retrieve data\n     */\n    public dataSources: string | null;\n\n    /**\n     * The ratings and reviews service endpoint\n     */\n    public serviceEndpoint: string;\n\n    constructor(\n        productId: string,\n        tenantId: string,\n        localeListFilter: string,\n        serviceEndpoint: string,\n        orderBy: string = 'MostHelpful',\n        starFilters: string = '',\n        skipItems: number = 0,\n        pageSize: number = 10,\n        pageToken: string | null = null,\n        dataSources: string | null = null\n    ) {\n        this.productId = productId;\n        this.tenantId = tenantId;\n        this.localeListFilter = localeListFilter;\n        // Max page size which Rnr API supports is 25.\n        // Hence if config has page size more than 25, we'll default it to 25.\n        this.pageSize = pageSize > 25 ? 25 : pageSize;\n        this.orderBy = orderBy;\n        this.starFilters = starFilters;\n        this.skipItems = skipItems;\n        this.pageToken = pageToken;\n        this.dataSources = dataSources;\n        this.serviceEndpoint = serviceEndpoint;\n    }\n\n    public getCacheKey = () => `${this.productId}-${this.tenantId}-${this.localeListFilter}-${this.pageSize}-${this.orderBy}-${this.starFilters}-${this.skipItems}`;\n    public getCacheObjectType = () => 'ProductReview';\n    public dataCacheType = (): CacheType => 'request';\n}\n"]}