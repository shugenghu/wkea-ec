import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import * as React from 'react';
import RatingsHistogram from '../ratings-histogram';
const emptyMockData = {
    ratingsSummary: wrapInResolvedAsyncResult(undefined)
};
const mockData = {
    ratingsSummary: wrapInResolvedAsyncResult({
        tenantId: 'ATenant',
        productId: '1234',
        market: 'US',
        averageRating: 3.5,
        totalRatingsCount: 200,
        reviewsCount: 2,
        star5Count: 50,
        star4Count: 45,
        star3Count: 5,
        star2Count: 10,
        star1Count: 90,
        star5ReviewCount: 1,
        star4ReviewCount: 0,
        star3ReviewCount: 0,
        star2ReviewCount: 0,
        star1ReviewCount: 1
    })
};
const mockResources = {
    barItemAriaLabel: '{0} stars, {1}%',
    averageRatingAriaLabel: '{0} stars, {1}',
    ratingCountAriaLabel: '{0} users rated this product.',
    ratingReviewText: 'review',
    ratingReviewsText: 'reviews'
};
const mockContext = {
    request: {
        market: 'en-us'
    }
};
const mockActions = {};
describe('EmptyRatingsHistogram', () => {
    let moduleProps;
    beforeAll(() => {
        moduleProps = { ...buildMockModuleProps(emptyMockData, mockActions, {}, mockContext), resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
    });
    it('renders correctly', () => {
        const component = mount(React.createElement(RatingsHistogram, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.histogramItems).toEqual([]);
        expect(viewProps.heading).not.toBeTruthy();
        expect(viewProps.averageRating).not.toBeTruthy();
        expect(viewProps.histogramProps).toEqual({ className: 'ms-ratings-histogram__histogram' });
        component.unmount();
    });
});
describe('RatingsHistogram', () => {
    let moduleProps;
    const context = buildMockCoreContext({});
    beforeAll(() => {
        moduleProps = { ...buildMockModuleProps(mockData, mockActions, { heading: { tag: '<h2>', text: 'heading' } }), context: context, resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
    });
    it('renders correctly', () => {
        const component = mount(React.createElement(RatingsHistogram, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.histogramItems).toBeTruthy();
        expect(viewProps.histogramItems).not.toEqual([]);
        expect(viewProps.heading).toBeTruthy();
        expect(viewProps.averageRating).toBeTruthy();
        expect(viewProps.histogramProps).toEqual({ className: 'ms-ratings-histogram__histogram' });
        component.unmount();
    });
    it('Calls actionContext update', async () => {
        const flushPromises = () => new Promise(setImmediate);
        spyOn(context.actionContext, 'update');
        const component = mount(React.createElement(RatingsHistogram, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const button = React.createElement("button", Object.assign({}, viewProps.histogramItems[1].buttonProps));
        const mountedButton = mount(button);
        mountedButton.simulate('click');
        await flushPromises();
        expect(context.actionContext.update).toHaveBeenCalled();
    });
});
//# sourceMappingURL=ratings-histogram.test.js.map