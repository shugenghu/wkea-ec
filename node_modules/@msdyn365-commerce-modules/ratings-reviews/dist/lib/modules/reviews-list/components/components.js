import { format, getPayloadObject, getTelemetryAttributes, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
export const ReviewCount = (props) => {
    const { currentPage, resources, reviewsCount, reviewsShownOnEachPage } = props;
    return (React.createElement("span", { "aria-live": 'polite', className: 'sr-only' }, format(resources.pageReviewCountText, _getReviewStartNumber(currentPage, reviewsShownOnEachPage), _getReviewEndNumber(currentPage, reviewsCount, reviewsShownOnEachPage), reviewsCount)));
};
export const PageControls = (props) => {
    const { currentPage, resources, reviewsCount, reviewsShownOnEachPage } = props;
    const previousPageClick = () => { return _getPreviousPageData(props); };
    const nextPageClick = () => { return _getNextPageData(props); };
    const payLoad = getPayloadObject('click', props.telemetryContent, TelemetryConstant.Next);
    const nextAttribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    payLoad.contentAction.etext = TelemetryConstant.Previous;
    const previousAttribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    return (React.createElement("div", { className: 'ms-reviews-list__page-controls' },
        _hasPreviousPage(currentPage) && (React.createElement("button", Object.assign({ onClick: previousPageClick, className: 'ms-reviews-list__previous', "aria-label": _paginationAriaLabel(resources.pageReviewAriaLabel, currentPage, reviewsCount, reviewsShownOnEachPage, false) }, previousAttribute), resources.previousButtonText)),
        _hasNextPage(currentPage, reviewsCount, reviewsShownOnEachPage) && (React.createElement("button", Object.assign({ onClick: nextPageClick, className: 'ms-reviews-list__next', "aria-label": _paginationAriaLabel(resources.pageReviewAriaLabel, currentPage, reviewsCount, reviewsShownOnEachPage, true) }, nextAttribute), resources.nextButtonText))));
};
const _hasPreviousPage = (currentPage) => {
    return currentPage > 1;
};
const _hasNextPage = (currentPage, reviewsCount, reviewsShownOnEachPage) => {
    return _getPagesCount(reviewsCount, reviewsShownOnEachPage) > currentPage;
};
const _getReviewsShown = (reviewsShownOnEachPage) => {
    return Math.min(25, reviewsShownOnEachPage);
};
const _getPagesCount = (reviewsCount, reviewsShownOnEachPage) => {
    return Math.ceil(reviewsCount / _getReviewsShown(reviewsShownOnEachPage));
};
const _paginationAriaLabel = (pageReviewAriaLabel, currentPage, reviewsCount, reviewsShownOnEachPage, isNextPage, page) => {
    const pageModifier = isNextPage ? 1 : -1;
    return format(pageReviewAriaLabel, _getReviewStartNumber(currentPage, reviewsShownOnEachPage, currentPage + pageModifier), _getReviewEndNumber(currentPage, reviewsCount, reviewsShownOnEachPage, currentPage + pageModifier), reviewsCount);
};
const _getReviewStartNumber = (currentPage, reviewsShownOnEachPage, page) => {
    return ((page || currentPage) - 1) * _getReviewsShown(reviewsShownOnEachPage) + 1;
};
const _getReviewEndNumber = (currentPage, reviewsCount, reviewsShownOnEachPage, page) => {
    const pageUsed = page || currentPage;
    const pageReviewCount = pageUsed * _getReviewsShown(reviewsShownOnEachPage);
    return pageReviewCount < reviewsCount ? pageReviewCount : reviewsCount;
};
const _getPreviousPageData = async (props) => {
    await props.updateReviews(_getReviewStartNumber(props.currentPage, props.reviewsShownOnEachPage) - 1 - _getReviewsShown(props.reviewsShownOnEachPage), props.selectedSortByOption, props.selectedFilterByOption, props.currentPage - 1, false);
};
const _getNextPageData = async (props) => {
    await props.updateReviews(_getReviewEndNumber(props.currentPage, props.reviewsCount, props.reviewsShownOnEachPage), props.selectedSortByOption, props.selectedFilterByOption, props.currentPage + 1, false);
};
//# sourceMappingURL=components.js.map