import { Button, format } from '@msdyn365-commerce-modules/utilities';
import { RatingComponent } from '@msdyn365-commerce/components';
import React from 'react';
import { TOGGLE_EDIT_MODAL_BUTTON_CARD_ID } from '../../../common/rnrInterface';
export const ReviewCard = (props) => {
    const className = props.isUserReview ? 'ms-reviews-list__card ms-reviews-list__user-review' : 'ms-reviews-list__card';
    return {
        cardProps: { className: className, key: props.review.reviewId },
        name: React.createElement("p", { className: 'ms-reviews-list__name' }, props.review.userName),
        rating: rating(props),
        date: React.createElement("p", { className: 'ms-reviews-list__date' }, renderDate(props, props.review.submittedDateTime)),
        reviewTitle: React.createElement("h4", { className: 'ms-reviews-list__title' }, props.review.title),
        reviewText: React.createElement("p", { className: 'ms-reviews-list__text' }, props.review.reviewText),
        ratingHelpfulLabel: React.createElement("p", { className: 'ms-reviews-list__helpful' }, props.resources.wasReviewHelpfulText),
        like: voteHelpfulButton(props, true),
        dislike: voteHelpfulButton(props, false),
        edit: editButton(props),
        report: reportToggle(props),
        responseName: props.review.userResponse ? React.createElement("p", { className: 'ms-reviews-list__response-name' }, props.review.userResponse.responderName) : undefined,
        responseText: props.review.userResponse ? React.createElement("p", { className: 'ms-reviews-list__response-text' }, props.review.userResponse.responseText) : undefined,
        responseDate: props.review.userResponse ? React.createElement("p", { className: 'ms-reviews-list__response-date' }, renderDate(props, props.review.userResponse.submittedDateTime)) : undefined,
        cardBodyProps: { className: 'ms-reviews-list__card-body' },
        responseProps: { className: 'ms-reviews-list__response' },
        reviewProps: { className: 'ms-reviews-list__review' },
        controlsProps: { className: 'ms-reviews-list__card-controls' },
        headerProps: { className: 'ms-reviews-list__card-header' }
    };
};
const rating = (props) => {
    return (React.createElement(RatingComponent, { readOnly: true, avgRating: props.review.rating, ariaLabel: format(props.resources.reviewRatingNarratorText || '', props.review.rating, '5'), context: props.context, className: 'ms-reviews-list__rating', id: props.parentId, typeName: props.parentType, data: {} }));
};
const isVotedFor = (props, isHelpful) => {
    for (let i = 0; i < props.votedReviews.length; i++) {
        if (props.votedReviews[i].reviewId === props.review.reviewId) {
            return props.votedReviews[i].approved === isHelpful;
        }
    }
    return false;
};
const voteHelpfulButton = (props, isHelpful) => {
    const isVoted = isVotedFor(props, isHelpful);
    const isDisabled = props.isUserReview || isVoted ? 'disabled' : '';
    let className = isHelpful ? 'ms-reviews-list__like' : 'ms-reviews-list__dislike';
    className = `${className} ${isDisabled}`;
    const label = isHelpful ? props.resources.yesButtonText : props.resources.noButtonText;
    let voteCount = (isHelpful ? props.review.helpfulPositive : props.review.helpfulNegative) || 0;
    voteCount = isVoted ? voteCount + 1 : voteCount;
    const title = `(${voteCount})`;
    const user = props.context.request.user;
    const onClickMethod = () => { props.updateReviewHelpfulness(props.review.reviewId, isHelpful); };
    const onClick = isDisabled ? undefined : onClickMethod;
    if (user.isAuthenticated) {
        return React.createElement(Button, { "aria-label": label, className: className, title: title, onClick: onClick }, title);
    }
    return React.createElement(Button, { href: user.signInUrl, "aria-label": label, className: className, title: title, tag: 'a' }, title);
};
const editButton = (props) => {
    if (props.isUserReview) {
        return React.createElement(Button, { id: TOGGLE_EDIT_MODAL_BUTTON_CARD_ID, className: 'ms-reviews-list__edit', onClick: props.toggleWriteReviewModal }, props.resources.editReviewCardText);
    }
    return undefined;
};
const renderDate = (props, date) => {
    if (!date) {
        return '';
    }
    try {
        return new Intl.DateTimeFormat(props.context.request.locale, { month: 'long', day: 'numeric', year: 'numeric' }).format(new Date(date));
    }
    catch {
        return date;
    }
};
const reportToggle = (props) => {
    const user = props.context.request.user;
    if (props.isUserReview) {
        return undefined;
    }
    else if (!user.isAuthenticated) {
        return React.createElement(Button, { href: user.signInUrl, className: 'ms-reviews-list__report', tag: 'a' },
            " ",
            props.resources.reportConcernText);
    }
    if (props.reportedReviews.indexOf(props.review.reviewId) > -1) {
        return React.createElement("p", { className: 'ms-reviews-list__reported' }, props.resources.reportedText);
    }
    const ref = props.review.reviewId === props.reportedReviewId ? props.returnRef : undefined;
    const onClick = () => { props.toggleReportReviewModal(props.review.reviewId); };
    return React.createElement(Button, { className: 'ms-reviews-list__report', onClick: onClick, innerRef: ref }, props.resources.reportConcernText);
};
//# sourceMappingURL=review-card.js.map