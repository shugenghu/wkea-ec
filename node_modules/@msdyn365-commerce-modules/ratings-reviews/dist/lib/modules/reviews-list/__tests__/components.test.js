import { mount, render } from 'enzyme';
import * as React from 'react';
import { PageControls, ReviewCount } from '../components/components';
describe('reviews list components', () => {
    it('ReviewCount', () => {
        const resources = { pageReviewCountText: 'Showing {0}-{1} out of {2} reviews' };
        const component = render(React.createElement(ReviewCount, { resources: resources, currentPage: 2, reviewsCount: 130, reviewsShownOnEachPage: 10 }));
        expect(component).toMatchSnapshot();
    });
    describe('PageControls', () => {
        const resources = { previousButtonText: 'Previous', nextButtonText: 'Next', pageReviewAriaLabel: 'Show {0}-{1} out of {2} reviews' };
        const sortBy = { key: 'foo', value: 'bar' };
        const filterBy = { key: 'troo', value: 'moo' };
        let update = jest.fn();
        const flushPromises = () => new Promise(setImmediate);
        it('When there is a next and previos page', () => {
            const component = render(React.createElement(PageControls, { resources: resources, currentPage: 2, reviewsCount: 130, reviewsShownOnEachPage: 10, selectedSortByOption: sortBy, selectedFilterByOption: filterBy, updateReviews: update }));
            expect(component).toMatchSnapshot();
        });
        it('When there is no prevous page', () => {
            const component = render(React.createElement(PageControls, { resources: resources, currentPage: 1, reviewsCount: 130, reviewsShownOnEachPage: 10, selectedSortByOption: sortBy, selectedFilterByOption: filterBy, updateReviews: update }));
            expect(component).toMatchSnapshot();
        });
        it('When there is no next page', () => {
            const component = render(React.createElement(PageControls, { resources: resources, currentPage: 3, reviewsCount: 30, reviewsShownOnEachPage: 10, selectedSortByOption: sortBy, selectedFilterByOption: filterBy, updateReviews: update }));
            expect(component).toMatchSnapshot();
        });
        it('When there is one page', () => {
            const component = render(React.createElement(PageControls, { resources: resources, currentPage: 1, reviewsCount: 5, reviewsShownOnEachPage: 10, selectedSortByOption: sortBy, selectedFilterByOption: filterBy, updateReviews: update }));
            expect(component).toMatchSnapshot();
        });
        it('Calls update reviews when previous page is clicked', async () => {
            update = jest.fn();
            const component = mount(React.createElement(PageControls, { resources: resources, currentPage: 2, reviewsCount: 125, reviewsShownOnEachPage: 10, selectedSortByOption: sortBy, selectedFilterByOption: filterBy, updateReviews: update }));
            const prev = component.find('button').at(0);
            prev.simulate('click');
            await flushPromises();
            component.unmount();
        });
        it('Calls update reviews when next page is clicked', async () => {
            update = jest.fn();
            const component = mount(React.createElement(PageControls, { resources: resources, currentPage: 2, reviewsCount: 130, reviewsShownOnEachPage: 10, selectedSortByOption: sortBy, selectedFilterByOption: filterBy, updateReviews: update }));
            const prev = component.find('button').at(1);
            prev.simulate('click');
            await flushPromises();
            component.unmount();
        });
    });
});
//# sourceMappingURL=components.test.js.map