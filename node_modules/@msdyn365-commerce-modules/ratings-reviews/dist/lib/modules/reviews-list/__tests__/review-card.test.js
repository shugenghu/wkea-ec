import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import { ReviewCard } from '../components/review-card';
describe('Review card', () => {
    let mockCoreContext;
    let onEditToggle;
    let onReportToggle;
    let updateHelpfullness;
    const resources = {
        wasReviewHelpfulText: 'Was this review helpful?',
        yesButtonText: 'Like this review',
        noButtonText: 'DislikeThisReview',
        editReviewCardText: 'Edit',
        reportedText: 'Reported',
        reportConcernText: 'Report',
        reviewRatingNarratorText: 'User Rating: {0} out of 5',
    };
    const review = {
        reviewId: 'Review-1',
        productId: 'product1',
        userName: 'user1',
        rating: 3.5,
        market: 'US',
        locale: 'en',
        thoughtfulnessScore: 0,
        helpfulPositive: 50,
        helpfulNegative: 10,
        reviewText: 'Lorem ipsum dolor sit amet, cu fugit copiosae quo, nam illud docendi iudicabit ex. ' +
            'Menandri expetendis dissentiunt ut per, mea cu error adipiscing. At solum causae bonorum vis, pri dictas praesent ut, inermis suavitate expetendis quo at. ' +
            'Per ea eruditi indoctum omittantur, sea ad exerci salutandi laboramus. Dico noluisse maiestatis in vel.',
        title: 'Some title to test reviews card layout',
        submittedDateTime: new Date('2019-03-04T19:52:10.044Z'),
        isTakenDown: false,
        violationsFound: false,
        isPublished: true,
        isRevised: false,
        updatedSinceResponse: false
    };
    const reviewWithResponder = {
        reviewId: 'Review-1',
        productId: 'product1',
        userName: 'user1',
        rating: 3.5,
        market: 'US',
        locale: 'en',
        thoughtfulnessScore: 0,
        helpfulPositive: 50,
        helpfulNegative: 10,
        reviewText: 'Lorem ipsum dolor sit amet, cu fugit copiosae quo, nam illud docendi iudicabit ex. ' +
            'Menandri expetendis dissentiunt ut per, mea cu error adipiscing. At solum causae bonorum vis, pri dictas praesent ut, inermis suavitate expetendis quo at. ' +
            'Per ea eruditi indoctum omittantur, sea ad exerci salutandi laboramus. Dico noluisse maiestatis in vel.',
        title: 'Some title to test reviews card layout',
        submittedDateTime: new Date('2019-03-04T19:52:10.044Z'),
        isTakenDown: false,
        violationsFound: false,
        userResponse: {
            responseId: 'Response-1',
            reviewId: 'Review-1',
            responderName: 'Microsoft Store',
            responseText: 'Hi there, Thanks you for taking the time to leave a review. Let us know how your experience at the Microsoft Store goes. If you have any other questions feel free to reach out to us on Twitter @Surface.',
            isTakenDown: false,
            violationsFound: false,
            market: 'US',
            locale: 'en',
            submittedDateTime: new Date('2019-03-05T14:02:55.070Z'),
            isPublic: true
        },
        isPublished: true,
        isRevised: false,
        updatedSinceResponse: false
    };
    let props;
    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({});
        onEditToggle = jest.fn();
        onReportToggle = jest.fn();
        updateHelpfullness = jest.fn();
        props = {
            review: review,
            resources: resources,
            context: mockCoreContext,
            isUserReview: false,
            parentId: 'foo',
            parentType: 'bar',
            toggleWriteReviewModal: onEditToggle,
            toggleReportReviewModal: onReportToggle,
            updateReviewHelpfulness: updateHelpfullness,
            reportedReviewId: 'foo',
            returnRef: React.createRef(),
            reportedReviews: [],
            votedReviews: []
        };
    });
    it('Returns the review card for unAuthenticated users correctly', () => {
        const card = ReviewCard(props);
        expect(card.cardProps).toMatchSnapshot();
        expect(render(card.name)).toMatchSnapshot();
        expect(render(card.rating)).toMatchSnapshot();
        expect(render(card.date)).toMatchSnapshot();
        expect(render(card.reviewTitle)).toMatchSnapshot();
        expect(render(card.reviewText)).toMatchSnapshot();
        expect(render(card.ratingHelpfulLabel)).toMatchSnapshot();
        expect(render(card.like)).toMatchSnapshot();
        expect(render(card.dislike)).toMatchSnapshot();
        expect(card.edit).not.toBeDefined();
        expect(render(card.report)).toMatchSnapshot();
        expect(card.responseName).not.toBeDefined();
        expect(card.responseText).not.toBeDefined();
        expect(card.cardBodyProps).toMatchSnapshot();
        expect(card.responseProps).toMatchSnapshot();
        expect(card.reviewProps).toMatchSnapshot();
        expect(card.controlsProps).toMatchSnapshot();
    });
    it('Returns the review card for authenticated users correctly', () => {
        props.context.request.user.isAuthenticated = true;
        const card = ReviewCard(props);
        expect(card.cardProps).toMatchSnapshot();
        expect(render(card.name)).toMatchSnapshot();
        expect(render(card.rating)).toMatchSnapshot();
        expect(render(card.date)).toMatchSnapshot();
        expect(render(card.reviewTitle)).toMatchSnapshot();
        expect(render(card.reviewText)).toMatchSnapshot();
        expect(render(card.ratingHelpfulLabel)).toMatchSnapshot();
        expect(render(card.like)).toMatchSnapshot();
        expect(render(card.dislike)).toMatchSnapshot();
        expect(card.edit).not.toBeDefined();
        expect(render(card.report)).toMatchSnapshot();
        expect(card.responseName).not.toBeDefined();
        expect(card.responseText).not.toBeDefined();
        expect(card.cardBodyProps).toMatchSnapshot();
        expect(card.responseProps).toMatchSnapshot();
        expect(card.reviewProps).toMatchSnapshot();
        expect(card.controlsProps).toMatchSnapshot();
    });
    it('Returns the review card for user reviews correctly', () => {
        props.context.request.user.isAuthenticated = true;
        props.isUserReview = true;
        const card = ReviewCard(props);
        expect(card.cardProps).toMatchSnapshot();
        expect(render(card.name)).toMatchSnapshot();
        expect(render(card.rating)).toMatchSnapshot();
        expect(render(card.date)).toMatchSnapshot();
        expect(render(card.reviewTitle)).toMatchSnapshot();
        expect(render(card.reviewText)).toMatchSnapshot();
        expect(render(card.ratingHelpfulLabel)).toMatchSnapshot();
        expect(render(card.like)).toMatchSnapshot();
        expect(render(card.dislike)).toMatchSnapshot();
        expect(card.report).not.toBeDefined();
        expect(render(card.edit)).toMatchSnapshot();
        expect(card.responseName).not.toBeDefined();
        expect(card.responseText).not.toBeDefined();
        expect(card.cardBodyProps).toMatchSnapshot();
        expect(card.responseProps).toMatchSnapshot();
        expect(card.reviewProps).toMatchSnapshot();
        expect(card.controlsProps).toMatchSnapshot();
    });
    it('Returns the review card with responses correctly', () => {
        props.review = reviewWithResponder;
        const card = ReviewCard(props);
        expect(card.cardProps).toMatchSnapshot();
        expect(render(card.name)).toMatchSnapshot();
        expect(render(card.rating)).toMatchSnapshot();
        expect(render(card.date)).toMatchSnapshot();
        expect(render(card.reviewTitle)).toMatchSnapshot();
        expect(render(card.reviewText)).toMatchSnapshot();
        expect(render(card.ratingHelpfulLabel)).toMatchSnapshot();
        expect(render(card.like)).toMatchSnapshot();
        expect(render(card.dislike)).toMatchSnapshot();
        expect(card.edit).not.toBeDefined();
        expect(render(card.report)).toMatchSnapshot();
        expect(render(card.responseName)).toMatchSnapshot();
        expect(render(card.responseText)).toMatchSnapshot();
        expect(card.cardBodyProps).toMatchSnapshot();
        expect(card.responseProps).toMatchSnapshot();
        expect(card.reviewProps).toMatchSnapshot();
        expect(card.controlsProps).toMatchSnapshot();
    });
    it('handles imprpoper dates', () => {
        props.review = reviewWithResponder;
        props.review.submittedDateTime = 'foo';
        let card = ReviewCard(props);
        let date = mount(card.date);
        expect(date.getDOMNode().textContent).toBe('foo');
        date.unmount();
        props.review.submittedDateTime = undefined;
        card = ReviewCard(props);
        date = mount(card.date);
        expect(date.getDOMNode().textContent).toBe('');
        date.unmount();
    });
});
//# sourceMappingURL=review-card.test.js.map