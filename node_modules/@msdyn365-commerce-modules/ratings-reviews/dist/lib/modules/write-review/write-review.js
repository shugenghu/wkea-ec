import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import React from 'react';
import { ReviewModal, submitReview } from '../../common/review-modal';
import { TOGGLE_REVIEW_MODAL_BUTTON_ID } from '../../common/rnrInterface';
import { ModalToggle, SignInButton, SignInMessage } from './components/components';
class WriteReview extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this._onTitleChange = (event) => {
            this.writeReviewCallbacks.updateReviewTitle(event.target.value);
        };
        this._onTextChange = (event) => {
            this.writeReviewCallbacks.updateReviewText(event.target.value);
        };
        this._onRatingChange = (value) => {
            this.writeReviewCallbacks.updateRating(value);
        };
        this._toggleReviewModal = () => {
            const userReview = this.props.data.userReview.result;
            if (this.state.isReviewModalOpen) {
                this.setState({ isReviewModalOpen: false, hasReviewError: false });
            }
            else {
                if (userReview) {
                    this.setState({
                        isReviewModalOpen: true,
                        reviewText: userReview.reviewText,
                        reviewTitle: userReview.title,
                        rating: userReview.rating
                    });
                }
                else {
                    this.setState({
                        isReviewModalOpen: true,
                        reviewText: '',
                        reviewTitle: '',
                        rating: 0
                    });
                }
            }
        };
        this.writeReviewCallbacks = {
            toggleModal: this._toggleReviewModal,
            updateReviewTitle: (title) => {
                this.setState({ reviewTitle: title });
            },
            updateReviewText: (text) => {
                this.setState({ reviewText: text });
            },
            updateRating: (rating) => {
                this.setState({ rating: rating });
            },
            onReviewSubmitted: (isSuccessful) => {
                if (isSuccessful) {
                    this.setState({ isReviewModalOpen: false, hasReviewError: false });
                }
                else {
                    this.setState({ hasReviewError: true });
                }
            },
            submitReview: submitReview
        };
        const { userReview: { result: userReview } } = this.props.data;
        this._toggleReviewModal = this._toggleReviewModal.bind(this);
        this._modalToggleRef = React.createRef();
        const rating = userReview ? userReview.rating : 0;
        const reviewTitle = userReview ? userReview.title : '';
        const reviewText = userReview ? userReview.reviewText : '';
        this.state = {
            isReviewModalOpen: false,
            rating: rating,
            reviewTitle: reviewTitle,
            reviewText: reviewText,
            hasReviewError: false
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    render() {
        const { resources } = this.props;
        const { className, heading } = this.props.config;
        const { product: { result: product }, userReview: { result: userReview } } = this.props.data;
        const userInfo = this.props.context && this.props.context.request && this.props.context.request.user;
        const completeClass = classnames('ms-write-review', className);
        const viewProps = {
            ...this.props,
            state: this.state,
            className: completeClass,
            moduleProps: {
                moduleProps: this.props,
                className: completeClass,
                id: null
            },
            callbacks: this.writeReviewCallbacks,
            signInMessage: React.createElement(SignInMessage, { text: resources.signInMessage }),
            signInButton: React.createElement(SignInButton, { text: resources.signInLabel, ariaLabel: resources.signInAriaLabel, href: userInfo.signInUrl, telemetryContent: this.telemetryContent }),
            modalToggle: product && (React.createElement(ModalToggle, { text: userReview ? resources.editReviewButtonText : resources.reviewButtonLabel, ariaLabel: resources.reviewButtonLabel, innerRef: this._modalToggleRef, onClick: this._toggleReviewModal, id: TOGGLE_REVIEW_MODAL_BUTTON_ID, telemetryContent: this.telemetryContent })),
            reviewModal: this._buildUserReviewModal(),
            heading: heading && heading.text && (React.createElement(Msdyn365.Text, { className: 'ms-write-review__heading', tag: heading.tag || 'h2', text: heading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } }))
        };
        return this.props.renderView(viewProps);
    }
    _buildUserReviewModal() {
        return ReviewModal({
            userReview: this.props.data.userReview.result,
            product: this.props.data.product.result,
            resources: { ...this.props.resources },
            context: this.props.context,
            parentId: this.props.id,
            parentType: this.props.typeName,
            isOpen: this.state.isReviewModalOpen,
            rating: this.state.rating,
            reviewTitle: this.state.reviewTitle,
            reviewText: this.state.reviewText,
            onModalToggle: this._toggleReviewModal,
            onTitleChange: this._onTitleChange,
            onTextChange: this._onTextChange,
            onRatingChange: this._onRatingChange,
            onReviewComplete: this.writeReviewCallbacks.onReviewSubmitted,
            renderContextId: 'writeReview',
            returnRef: this._modalToggleRef,
            hasError: this.state.hasReviewError,
            telemetryContent: this.telemetryContent
        });
    }
}
export default WriteReview;
//# sourceMappingURL=write-review.js.map