import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import { WriteReviewView } from '../';
const emptyMockData = {
    product: wrapInResolvedAsyncResult({ RecordId: 44 }),
    userReview: wrapInResolvedAsyncResult(undefined)
};
const reviewModal = {
    modal: { className: 'modal' },
    modalHeader: React.createElement("div", { className: 'modalHeader' }),
    modalFooter: { className: 'modalFooter' },
    modalBody: { className: 'modalBody' },
    cancelButton: React.createElement("button", null, "cancelButton"),
    submitButton: React.createElement("button", null, "submitButton"),
    rating: React.createElement("div", null, "rating"),
    ratingLabel: React.createElement("div", null, "ratingLabel"),
    titleInput: React.createElement("input", { className: 'titleInput' }),
    titleLabel: React.createElement("div", null, "titleLabel"),
    textInput: React.createElement("input", { className: 'textInput' }),
    textLabel: React.createElement("div", null, "textLabel"),
    privacyPolicyUrl: React.createElement("div", null, "privacyPolicyUrl"),
    form: { className: 'modalForm' },
    inputRow: { className: 'inputRow' },
    error: React.createElement("div", null, "error")
};
const callBacks = {
    updateReviewTitle: jest.fn(),
    updateReviewText: jest.fn(),
    updateRating: jest.fn(),
    onReviewSubmitted: jest.fn(),
    submitReview: jest.fn(),
    toggleModal: jest.fn()
};
let mockProps;
describe('Write Review unit tests - View', () => {
    it('renders correctly', () => {
        const moduleProps = buildMockModuleProps({}, {});
        mockProps = {
            ...moduleProps,
            className: 'className',
            state: {
                rating: 4,
                reviewTitle: 'ffff',
                reviewText: 'wwwwwwwwwwwwwwwwwwwwwww',
                isReviewModalOpen: false, hasReviewError: false
            },
            callbacks: callBacks,
            data: emptyMockData,
            moduleProps: {
                moduleProps: moduleProps,
                className: 'className'
            },
            signInMessage: React.createElement("div", null, "signInMessage"),
            signInButton: React.createElement("div", null, "signInButton"),
            modalToggle: React.createElement("div", null, "modalToggle"),
            reviewModal: reviewModal,
            heading: React.createElement("h1", null, "Heading")
        };
        const component = render(React.createElement(WriteReviewView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly for authenticated users', () => {
        const mockContext = buildMockCoreContext({});
        mockContext.request.user.isAuthenticated = true;
        const moduleProps = buildMockModuleProps({}, {}, {}, mockContext);
        mockProps = {
            ...moduleProps,
            className: 'className',
            state: {
                rating: 4,
                reviewTitle: 'ffff',
                reviewText: 'wwwwwwwwwwwwwwwwwwwwwww',
                isReviewModalOpen: false,
                hasReviewError: false
            },
            callbacks: callBacks,
            data: emptyMockData,
            moduleProps: {
                moduleProps: moduleProps,
                className: 'className'
            },
            signInMessage: React.createElement("div", null, "signInMessage"),
            signInButton: React.createElement("div", null, "signInButton"),
            modalToggle: React.createElement("div", null, "modalToggle"),
            reviewModal: reviewModal,
            heading: React.createElement("h1", null, "Heading")
        };
        const component = render(React.createElement(WriteReviewView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly for successfully submitted reviews', () => {
        const mockContext = buildMockCoreContext({});
        mockContext.request.user.isAuthenticated = true;
        const moduleProps = buildMockModuleProps({}, {}, {}, mockContext);
        mockProps = {
            ...moduleProps,
            className: 'className',
            state: {
                rating: 4,
                reviewTitle: 'ffff',
                reviewText: 'wwwwwwwwwwwwwwwwwwwwwww',
                isReviewModalOpen: false,
                hasReviewError: false
            },
            callbacks: callBacks,
            data: emptyMockData,
            moduleProps: {
                moduleProps: moduleProps,
                className: 'className'
            },
            signInMessage: React.createElement("div", null, "signInMessage"),
            signInButton: React.createElement("div", null, "signInButton"),
            modalToggle: React.createElement("div", null, "modalToggle"),
            reviewModal: reviewModal,
            heading: React.createElement("h1", null, "Heading")
        };
        const component = render(React.createElement(WriteReviewView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=write-review.view.test.js.map