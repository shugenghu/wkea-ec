jest.mock('../../../actions/submit-user-review', () => ({
    __esModule: true,
    default: jest.fn().mockImplementation(() => Promise.resolve('myReviewId'))
}));
import { buildMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import * as React from 'react';
import { WriteReview } from '..';
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
const mockActionContext = buildMockActionContext();
mockActionContext.requestContext.apiSettings.rnr = { id: 'rnrId', url: 'rnrUrl', proxyUrl: '' };
const flushPromises = () => new Promise(setImmediate);
const emptyMockData = {
    product: wrapInResolvedAsyncResult(undefined),
    userReview: wrapInResolvedAsyncResult(undefined)
};
const nopReviewMockData = {
    product: wrapInResolvedAsyncResult({ RecordId: 4444 }),
    userReview: wrapInResolvedAsyncResult(undefined)
};
const updateReviewMockData = {
    product: wrapInResolvedAsyncResult({ RecordId: 4444 }),
    userReview: wrapInResolvedAsyncResult({
        reviewId: 'Review-1',
        productId: 'product1',
        userName: 'user1',
        rating: 3,
        market: 'US',
        locale: 'en',
        thoughtfulnessScore: 0,
        helpfulPositive: 50,
        helpfulNegative: 10,
        reviewText: 'Lorem ipsum dolor sit amet, cu fugit copiosae quo, nam illud docendi iudicabit ex. ' +
            'Menandri expetendis dissentiunt ut per, mea cu error adipiscing. At solum causae bonorum vis, pri dictas praesent ut, inermis suavitate expetendis quo at. ' +
            'Per ea eruditi indoctum omittantur, sea ad exerci salutandi laboramus. Dico noluisse maiestatis in vel.',
        title: 'Some title to test reviews card layout',
        submittedDateTime: new Date('2019-03-04T19:52:10.044Z'),
        isTakenDown: true,
        violationsFound: false,
        isPublished: true,
        isRevised: false,
        updatedSinceResponse: false
    })
};
const mockConfig = {};
const mockResources = {
    signInAriaLabel: 'To Rate and review, sign in',
    signInLabel: 'Sign In',
    reviewButtonLabel: 'review this product',
    privacyPolicyTextFormat: 'By clicking submit, you accept our {0}.',
    privacyPolicyTitle: 'Privacy Policy',
    reviewTextLabel: 'Review',
    reviewTitleLabel: 'Title',
    selectRatingAriaLabel: 'Set ratings as {0} out of {1} stars',
    selectRatingLabel: 'Choose a rating',
    writeReviewModalTitle: 'Write a review',
    editReviewModalTitle: 'Edit your review',
    discardReviewButtonText: 'Discard',
    errorMessageText: 'Something went wrong, please try again',
    submitReviewButtonText: 'Submit',
    editReviewButtonText: 'Edit',
    signInMessage: 'Please sign in to rate and review.',
};
const mockActions = {};
const mockAuthenticatedContext = {
    request: {
        user: {
            token: 'Dummy token',
            isAuthenticated: true
        }
    },
    app: {
        config: {}
    },
    actionContext: mockActionContext
};
const mockUnauthenticatedContext = {
    request: {
        user: {
            token: '',
            isAuthenticated: false,
            optOutWebActivityTracking: false
        }
    },
    app: {
        config: {}
    },
    actionContext: mockActionContext
};
describe('WriteReview', () => {
    let moduleProps;
    beforeAll(() => {
        moduleProps = { ...buildMockModuleProps(updateReviewMockData, mockActions, mockConfig, mockAuthenticatedContext), resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
    });
    it('renders correctly when product is not present', () => {
        moduleProps = { ...buildMockModuleProps(emptyMockData, mockActions, mockConfig, mockAuthenticatedContext), resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        const component = mount(React.createElement(WriteReview, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.signInMessage).toBeTruthy();
        expect(viewProps.signInButton).toBeTruthy();
        expect(viewProps.modalToggle).not.toBeTruthy();
        expect(viewProps.reviewModal).toBeTruthy();
        component.unmount();
    });
    it('renders correctly when product is not present', () => {
        moduleProps = { ...buildMockModuleProps(updateReviewMockData, mockActions, mockConfig, mockAuthenticatedContext), resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        const component = mount(React.createElement(WriteReview, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.signInMessage).toBeTruthy();
        expect(viewProps.signInButton).toBeTruthy();
        expect(viewProps.modalToggle).toBeTruthy();
        expect(viewProps.reviewModal).toBeTruthy();
        component.unmount();
    });
    it('Updates the review title state', () => {
        moduleProps = { ...buildMockModuleProps(updateReviewMockData, mockActions, mockConfig, mockAuthenticatedContext), resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        const component = mount(React.createElement(WriteReview, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const changeEvent = {
            target: { value: 'foo' }
        };
        const input = mount(viewProps.reviewModal.titleInput);
        input.simulate('change', changeEvent);
        expect(component.state('reviewTitle')).toBe('foo');
        input.unmount();
        component.unmount();
    });
    it('Updates the review text state', () => {
        const component = mount(React.createElement(WriteReview, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const changeEvent = {
            target: { value: 'foo' }
        };
        const input = mount(viewProps.reviewModal.textInput);
        input.simulate('change', changeEvent);
        expect(component.state('reviewText')).toBe('foo');
        input.unmount();
        component.unmount();
    });
    it('Toggles the review modal', () => {
        const component = mount(React.createElement(WriteReview, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const input = mount(viewProps.modalToggle);
        input.simulate('click');
        expect(component.state('isReviewModalOpen')).toBe(true);
        input.simulate('click');
        expect(component.state('isReviewModalOpen')).toBe(false);
        input.unmount();
        component.unmount();
    });
    it('Clears the data in state if there is no user review upon opening', () => {
        moduleProps = { ...buildMockModuleProps(nopReviewMockData, mockActions, mockConfig, mockAuthenticatedContext), resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        const component = mount(React.createElement(WriteReview, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const input = mount(viewProps.modalToggle);
        input.simulate('click');
        expect(component.state('isReviewModalOpen')).toBe(true);
        expect(component.state('reviewText')).toBe('');
        expect(component.state('reviewTitle')).toBe('');
        expect(component.state('rating')).toBe(0);
        input.unmount();
        component.unmount();
    });
    it('Closes the modal upon submitting', async () => {
        moduleProps = { ...buildMockModuleProps(updateReviewMockData, mockActions, mockConfig, mockAuthenticatedContext), resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        const component = mount(React.createElement(WriteReview, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const input = mount(viewProps.reviewModal.submitButton);
        input.simulate('click');
        await flushPromises();
        expect(component.state('isReviewModalOpen')).toBe(false);
        input.unmount();
    });
});
//# sourceMappingURL=write-review.test.js.map