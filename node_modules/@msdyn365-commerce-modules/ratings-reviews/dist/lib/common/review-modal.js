import React from 'react';
import { getRnrAuthEndpointId, getRnrPartnerId } from '@msdyn365-commerce-modules/retail-actions';
import { Alert, Button, getPayloadObject, getTelemetryAttributes, Modal, ModalBody, ModalFooter, ModalHeader, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { RatingComponent } from '@msdyn365-commerce/components';
import { getUrlSync } from '@msdyn365-commerce/core';
import { GetUserReviewInput } from '../actions/inputs/get-user-review-input';
import { SubmitUserReviewInput } from '../actions/inputs/submit-user-review-input';
import submitUserReview from '../actions/submit-user-review';
export const ReviewModal = (props) => {
    const onClickSubmit = () => { return onSubmit(props); };
    const payLoad = getPayloadObject('click', props.telemetryContent, TelemetryConstant.SubmitReview);
    const submitButtonAttribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    payLoad.contentAction.etext = TelemetryConstant.Cancel;
    const cancelButtonAttribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    return {
        modal: { tag: Modal, className: 'ms-review-modal', toggle: props.onModalToggle, applicationNode: 'renderPage', isOpen: props.isOpen, returnFocusRef: props.returnRef },
        modalHeader: modalHeaderNode(props),
        modalFooter: { tag: ModalFooter, className: 'ms-review-modal-footer' },
        modalBody: { tag: ModalBody, className: 'ms-review-modal-body' },
        cancelButton: React.createElement(Button, Object.assign({ className: 'ms-review-modal-cancel', onClick: props.onModalToggle }, submitButtonAttribute), props.resources.discardReviewButtonText),
        submitButton: React.createElement(Button, Object.assign({ className: 'ms-review-modal-submit', onClick: onClickSubmit }, cancelButtonAttribute, { disabled: submitDisabled(props) }), props.resources.submitReviewButtonText),
        rating: ratingsInput(props),
        ratingLabel: ratingsLabel(props),
        titleInput: titleInput(props),
        titleLabel: titleLabel(props),
        textInput: textInput(props),
        textLabel: textLabel(props),
        privacyPolicyUrl: privacyPolicyLink(props),
        form: { tag: 'form', className: 'ms-review-modal-form', autoComplete: 'off' },
        inputRow: { tag: 'div', className: 'ms-review-modal-row', autoComplete: 'off' },
        error: React.createElement(Alert, { className: 'ms-review-modal-error', isOpen: props.hasError, color: 'danger' }, props.resources.errorMessageText)
    };
};
const modalHeaderNode = (props) => {
    return (React.createElement(ModalHeader, { toggle: props.onModalToggle, className: 'ms-review-modal-header' }, props.userReview && props.userReview.reviewId ? props.resources.editReviewModalTitle : props.resources.writeReviewModalTitle));
};
const submitDisabled = (props) => {
    return !props.rating || !stripWhiteSpacesFromString(props.reviewText) || !stripWhiteSpacesFromString(props.reviewTitle);
};
const ratingsInput = (props) => {
    return (React.createElement(RatingComponent, { readOnly: false, avgRating: 0, ariaLabel: props.resources.selectRatingAriaLabel, initialRating: props.rating, context: props.context, id: props.parentId, typeName: props.parentType, data: {}, key: 'ratings', onChange: props.onRatingChange }));
};
const ratingsLabel = (props) => {
    return React.createElement("label", { className: 'ms-review-modal-rating-label', key: 'ratingsLabel' },
        props.resources.selectRatingLabel,
        "*");
};
const titleInput = (props) => {
    const maxLength = props.context.app.config.reviewTitleMaxLength;
    return (React.createElement("input", { maxLength: maxLength, id: `reviewTitle-${props.renderContextId}`, onChange: props.onTitleChange, value: props.reviewTitle, "aria-required": 'true', className: 'ms-review-modal-title' }));
};
const titleLabel = (props) => {
    return React.createElement("label", { className: 'ms-review-modal-title-label', htmlFor: `reviewTitle-${props.renderContextId}` }, props.resources.reviewTitleLabel);
};
const reviewTextWidth = 50;
const textInput = (props) => {
    const maxLength = props.context.app.config.reviewTextMaxLength;
    return (React.createElement("textarea", { maxLength: maxLength, className: 'ms-review-modal-text', id: `reviewTextArea-${props.renderContextId}`, onChange: props.onTextChange, rows: maxLength / reviewTextWidth, value: props.reviewText, "aria-required": 'true' }));
};
const textLabel = (props) => {
    return React.createElement("label", { htmlFor: `reviewTextArea-${props.renderContextId}`, className: 'ms-review-modal-text-label' }, props.resources.reviewTextLabel);
};
const privacyPolicyLink = (props) => {
    const policyTextBlocks = props.resources.privacyPolicyTextFormat.split('{0}');
    const isSeparatorAtStart = props.resources.privacyPolicyTextFormat.startsWith('{0}');
    const isSeparatorAtEnd = props.resources.privacyPolicyTextFormat.endsWith('{0}');
    const privacyPolicyUrl = getUrlSync('rnrPrivacyPolicy', props.context.actionContext);
    const payLoad = getPayloadObject('click', props.telemetryContent, TelemetryConstant.PrivacyPolicy);
    const privacyPolicyAttribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    return (React.createElement("p", { className: 'ms-review-modal-policy' },
        isSeparatorAtStart ? '' : policyTextBlocks[0],
        React.createElement("a", Object.assign({ href: privacyPolicyUrl, target: '_blank', className: 'msc-link' }, privacyPolicyAttribute), props.resources.privacyPolicyTitle),
        isSeparatorAtEnd ? '' : isSeparatorAtStart ? policyTextBlocks[0] : policyTextBlocks[1]));
};
const onSubmit = (props) => {
    if (props.product) {
        submitReview(props.product, props.reviewTitle, props.reviewText, props.rating, props.context, props.userReview, props.onReviewComplete);
    }
};
const stripWhiteSpacesFromString = (text) => {
    return text
        .replace(new RegExp('\\r?\\n|\\r+', 'g'), ' ')
        .replace(new RegExp('\\s+', 'g'), ' ')
        .trim();
};
export const submitReview = (product, title, text, rating, context, userReview, onReviewSubmission) => {
    const { request } = context;
    const { user } = request;
    if (user && request) {
        const input = new SubmitUserReviewInput(product.RecordId.toString(), getRnrPartnerId(context.actionContext), request.apiSettings.channelId.toString(), request.locale, {
            productName: product && product.Name,
            rating: rating,
            reviewText: stripWhiteSpacesFromString(text),
            title: stripWhiteSpacesFromString(title),
            userEmail: user.emailAddress,
            userName: user.name
        }, request.user.token, getRnrAuthEndpointId(context.actionContext));
        submitUserReview(input, context.actionContext).then(reviewId => {
            const review = !!reviewId ? {
                rating: rating,
                title: stripWhiteSpacesFromString(title),
                reviewText: stripWhiteSpacesFromString(text),
                submittedDateTime: new Date(),
                helpfulPositive: userReview ? userReview.helpfulPositive : 0,
                helpfulNegative: userReview ? userReview.helpfulNegative : 0,
                reviewId: reviewId,
                userName: request.user.firstName || request.user.name
            } : userReview;
            const getReviewInput = new GetUserReviewInput(input.productId, input.tenantId, input.authorization, input.serviceEndpoint);
            context.actionContext.update(getReviewInput, review);
            if (onReviewSubmission) {
                onReviewSubmission(!!reviewId);
            }
        }).catch(() => {
            const productId = product.RecordId;
            context.telemetry.error(`Failed to submit review for product with recordId: ${productId}`);
            context.telemetry.debug(`Failed to submit review for product with recordId: ${productId}`);
            if (onReviewSubmission) {
                onReviewSubmission(false);
            }
        });
    }
};
//# sourceMappingURL=review-modal.js.map