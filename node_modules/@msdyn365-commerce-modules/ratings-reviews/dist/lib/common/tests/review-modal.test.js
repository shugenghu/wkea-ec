const mockSubmit = jest.fn().mockImplementation((input) => {
    return input.productId !== '111' ? Promise.resolve('myReviewId') : Promise.reject('myReviewId');
});
jest.mock('../../actions/submit-user-review', () => ({
    __esModule: true,
    default: mockSubmit
}));
import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import { ReviewModal } from '../review-modal';
describe('Review modal', () => {
    let mockCoreContext;
    const modalToggleRef = React.createRef();
    const flushPromises = () => new Promise(setImmediate);
    let onToggle;
    let onRatingChange;
    let onTitleChange;
    let onTextChange;
    let onReviewComplete;
    const resources = {
        privacyPolicyTextFormat: 'By clicking submit, you accept our {0}.',
        privacyPolicyTitle: 'Privacy Policy',
        reviewTextLabel: 'Review',
        reviewTitleLabel: 'Title',
        selectRatingAriaLabel: 'Set ratings as {0} out of {1} stars',
        selectRatingLabel: 'Choose a rating',
        writeReviewModalTitle: 'Write a review',
        editReviewModalTitle: 'Edit your review',
        discardReviewButtonText: 'Discard',
        errorMessageText: 'Something went wrong, please try again',
        submitReviewButtonText: 'Submit'
    };
    let props;
    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({});
        mockCoreContext.app = { config: { reviewTextMaxLength: 500, reviewTitleMaxLength: 50 } };
        mockCoreContext.actionContext.requestContext.apiSettings.rnr = { id: 'rnrId', url: 'rnrUrl', proxyUrl: '' };
        onToggle = jest.fn();
        onRatingChange = jest.fn();
        onTitleChange = jest.fn();
        onTextChange = jest.fn();
        onReviewComplete = jest.fn();
        props = {
            userReview: undefined,
            product: { RecordId: 333 },
            renderContextId: 'mycontext',
            resources: resources,
            context: mockCoreContext,
            parentId: 'foo',
            parentType: 'fooType',
            isOpen: true,
            rating: 4,
            reviewTitle: 'foo',
            reviewText: 'troo',
            returnRef: modalToggleRef,
            onModalToggle: onToggle,
            onTitleChange: onTitleChange,
            onTextChange: onTextChange,
            onRatingChange: onRatingChange,
            onReviewComplete: onReviewComplete,
            hasError: false
        };
    });
    it('The review modal snapshots return as expected', () => {
        const modal = ReviewModal(props);
        expect(modal.modal).toMatchSnapshot();
        expect(render(modal.modalHeader)).toMatchSnapshot();
        expect(modal.modalFooter).toMatchSnapshot();
        expect(modal.modalBody).toMatchSnapshot();
        expect(render(modal.cancelButton)).toMatchSnapshot();
        expect(render(modal.submitButton)).toMatchSnapshot();
        expect(render(modal.rating)).toMatchSnapshot();
        expect(render(modal.ratingLabel)).toMatchSnapshot();
        expect(render(modal.titleInput)).toMatchSnapshot();
        expect(render(modal.titleLabel)).toMatchSnapshot();
        expect(render(modal.textInput)).toMatchSnapshot();
        expect(render(modal.textLabel)).toMatchSnapshot();
        expect(render(modal.privacyPolicyUrl)).toMatchSnapshot();
        expect(modal.form).toMatchSnapshot();
        expect(modal.inputRow).toMatchSnapshot();
    });
    it('Changing the title input calls the onTitleChange callback', () => {
        const modal = ReviewModal(props);
        const title = mount(modal.titleInput);
        title.simulate('change');
        expect(onTitleChange).toHaveBeenCalled();
    });
    it('Changing the text input calls the onTextChange callback', () => {
        const modal = ReviewModal(props);
        const title = mount(modal.textInput);
        title.simulate('change');
        expect(onTextChange).toHaveBeenCalled();
    });
    it('clicking the submit button submits the review', async () => {
        const modal = ReviewModal(props);
        const submit = mount(modal.submitButton);
        submit.simulate('click');
        await flushPromises();
        expect(onReviewComplete).toHaveBeenCalledWith(true);
    });
    it('clicking the submit doesn ot throw when onReviewComplete is not provided', async () => {
        props.onReviewComplete = undefined;
        const modal = ReviewModal(props);
        const submit = mount(modal.submitButton);
        submit.simulate('click');
        await flushPromises();
        expect(onReviewComplete).not.toHaveBeenCalled();
    });
    it('clicking the submit button calls onReviewComplete when it fails', async () => {
        props.product.RecordId = 111;
        const modal = ReviewModal(props);
        const submit = mount(modal.submitButton);
        submit.simulate('click');
        await flushPromises();
        expect(onReviewComplete).toHaveBeenCalledWith(false);
    });
    it('clicking the submit doesn ot throw when onReviewComplete is not provided', async () => {
        props.product.RecordId = 111;
        props.onReviewComplete = undefined;
        const modal = ReviewModal(props);
        const submit = mount(modal.submitButton);
        submit.simulate('click');
        await flushPromises();
        expect(onReviewComplete).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=review-modal.test.js.map