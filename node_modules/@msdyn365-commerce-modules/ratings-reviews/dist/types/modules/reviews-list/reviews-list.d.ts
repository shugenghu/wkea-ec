import { ILabeledDropdownOnChangeNotification, ILabeledDropdownOption, IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import { Review } from '@msdyn365-commerce/commerce-entities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { IReviewModalViewProps } from '../../common/review-modal';
import { IRnrKeyValuePair, IRnrOrderByKeyValuePair } from '../../common/rnrInterface';
import { IReportReviewModalViewProps } from './components/report-review-modal';
import { IReviewCardViewProps } from './components/review-card';
import { IReviewsListData } from './reviews-list.data';
import { IReviewsListProps } from './reviews-list.props.autogenerated';
export interface IReviewsListState {
    skipItems: number;
    listOfReviews: Review[];
    currentPage: number;
    reviewsCount: number;
    showSpinner: boolean;
    isFilterApplied: boolean;
    selectedSortByOption: ILabeledDropdownOption;
    selectedFilterByOption: ILabeledDropdownOption;
    userReviewRating: number;
    userReviewTitle: string;
    userReviewText: string;
    isReviewModalOpen: boolean;
    hasReviewError: boolean;
    isReportModalOpen: boolean;
    hasReportError: boolean;
    reportingReviewId: string;
    reportedKey: string;
    reported: boolean;
    reportedReviews: string[];
    votedReviews: {
        reviewId: string;
        approved: boolean;
    }[];
}
export interface IReviewsListCallbacks {
    toggleModal(): void;
    updateReviewTitle(title: string): void;
    updateReviewText(text: string): void;
    updateRating(rating: number): void;
    onReviewSubmitted(isSuccessful: boolean): void;
    submitReview(product: SimpleProduct, title: string, text: string, rating: number, context: Msdyn365.ICoreContext, userReview?: Review, onReviewSubmission?: (isSuccessful: boolean) => void): void;
    updateReviewHelpfulnessVote(reviewId: string, isHelpful: boolean): void;
    toggleReportModal(reviewId: string): void;
    reportReview(reviewId: string, reportedKey: string): void;
    updateSortByDropdown(notification: ILabeledDropdownOnChangeNotification): void;
    updateFilterByDropdown(notification: ILabeledDropdownOnChangeNotification): void;
    updateReviews(skipItems: number, selectedSortByOption: ILabeledDropdownOption, selectedFilterByOption: ILabeledDropdownOption, currentPage: number, isFilterApplied: boolean): void;
}
export interface IReviewsListViewProps extends IReviewsListProps<IReviewsListData> {
    state: IReviewsListState;
    className: string;
    callbacks: IReviewsListCallbacks;
    moduleProps: IModuleProps;
    reviewModal: IReviewModalViewProps;
    reportReviewModal: IReportReviewModalViewProps;
    sortByDropdown: React.ReactNode;
    filterByDropdown: React.ReactNode;
    averageRating: React.ReactNode;
    reviewCount: React.ReactElement;
    refineReviewsProps: INodeProps;
    reviewsListProps: INodeProps;
    reviewCards: IReviewCardViewProps[];
    userReview?: IReviewCardViewProps;
    pageControls: React.ReactNode;
    noReviewsMessage: React.ReactElement;
    noReviewsWithFilterMessage: React.ReactElement;
    heading: React.ReactNode;
    sortByOptions: IRnrOrderByKeyValuePair[];
    filterByOptions: IRnrOrderByKeyValuePair[];
}
declare class ReviewsList extends React.Component<IReviewsListProps<IReviewsListData>, IReviewsListState> {
    sortByDropdownOptions: IRnrOrderByKeyValuePair[];
    filterByDropdownOptions: IRnrKeyValuePair[];
    private _userReviewModalToggle;
    private _userReportModalToggle;
    private telemetryContent?;
    constructor(props: IReviewsListProps<IReviewsListData>);
    componentDidMount(): void;
    render(): JSX.Element | null;
    handleHeadingChange: (event: Msdyn365.ContentEditableEvent) => string;
    private _userReview;
    private _reviewCards;
    private _reviewCard;
    private _userReviewModal;
    private _onTitleChange;
    private _onTextChange;
    private _onRatingChange;
    private _toggleReviewModal;
    private _onReviewComplete;
    private _reportReviewModal;
    private _onReportModalOpen;
    private _onReportModalClose;
    private _onRadioChange;
    private _reportReviewCallback;
    private _reportReview;
    private updateSortByDropdown;
    private updateFilterByDropdown;
    private updateReviews;
    private _updateVoteUi;
    private updateReviewHelpfulnessVote;
    private getUserToken;
    private reviewsListCallbacks;
}
export default ReviewsList;
