import React from 'react';
import { INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { Review } from '@msdyn365-commerce/commerce-entities';
import { IAny, ICoreContext, IGeneric } from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
export interface IReviewModalProps {
    userReview?: Review;
    product?: SimpleProduct;
    renderContextId: string;
    resources: IReviewModalResources;
    context: ICoreContext<IGeneric<IAny>>;
    parentId: string;
    parentType: string;
    isOpen: boolean;
    rating: number;
    reviewTitle: string;
    reviewText: string;
    returnRef: React.RefObject<HTMLButtonElement> | undefined;
    hasError: boolean;
    telemetryContent?: ITelemetryContent;
    onModalToggle(): void;
    onTitleChange(event: React.ChangeEvent<HTMLInputElement>): void;
    onTextChange(event: React.ChangeEvent<HTMLTextAreaElement>): void;
    onRatingChange(value: number): void;
    onReviewComplete?(isSuccess: boolean): void;
}
export interface IReviewModalResources {
    selectRatingAriaLabel: string;
    selectRatingLabel: string;
    reviewTitleLabel: string;
    reviewTextLabel: string;
    privacyPolicyTitle: string;
    privacyPolicyTextFormat: string;
    writeReviewModalTitle: string;
    editReviewModalTitle: string;
    submitReviewButtonText: string;
    discardReviewButtonText: string;
    errorMessageText: string;
}
export interface IReviewModalViewProps {
    modal: INodeProps;
    modalHeader: React.ReactElement;
    modalFooter: INodeProps;
    modalBody: INodeProps;
    cancelButton: React.ReactElement;
    submitButton: React.ReactElement;
    rating: React.ReactElement;
    ratingLabel: React.ReactElement;
    titleInput: React.ReactElement;
    titleLabel: React.ReactElement;
    textInput: React.ReactElement;
    textLabel: React.ReactElement;
    privacyPolicyUrl: React.ReactElement;
    form: INodeProps;
    inputRow: INodeProps;
    error: React.ReactElement;
}
export declare const ReviewModal: (props: IReviewModalProps) => IReviewModalViewProps;
export declare const submitReview: (product: SimpleProduct, title: string, text: string, rating: number, context: ICoreContext<{}>, userReview?: Review | undefined, onReviewSubmission?: ((isSuccessful: boolean) => void) | undefined) => void;
