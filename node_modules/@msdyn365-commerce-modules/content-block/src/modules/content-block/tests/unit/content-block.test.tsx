/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { buildMockModuleProps, buildMockRequest } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
// tslint:disable-next-line:no-unused-variable
import * as React from 'react';
import { actionableRegion, ContentBlockModule, HeadingTag, IContentBlockConfig, IContentBlockProps } from '../../../..';

const mockConfig: IContentBlockConfig = {
    heading:{
        text:'Micheal Hill',
        tag: HeadingTag.h2
      },
      paragraph:'We think about you and the reasons behind your purchase – designing timeless pieces that bring out your best.',
      image:{
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsS'
      },
      links:[
        {
        linkText: 'Shop now',
        linkUrl:
        {
            destinationUrl: 'https://mocktest'
        },
        ariaLabel: 'Mock aria label'
      }
      ],
      className:'',
      imageLink:
      {
        destinationUrl: '/modern/storefaq'
      },
      actionableRegion:actionableRegion.imageAndLinks,
      imageAriaLabel:'image aria label'
};

const mockConfig2: IContentBlockConfig = {
    heading:{
        text:'Micheal Hill',
        tag: HeadingTag.h2
      },
      paragraph:'We think about you and the reasons behind your purchase – designing timeless pieces that bring out your best.',
      image:{
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsS'
      },
      links:[
        {
        linkText: 'Shop now',
        linkUrl:
        {
            destinationUrl: 'https://mocktest'
        },
        ariaLabel: 'Mock aria label'
      }
      ],
      className:'',
      actionableRegion:actionableRegion.linksOnly,
      imageAriaLabel:'image aria label'
};

// @ts-ignore
const mockRequest: IRequestContext = buildMockRequest();
// @ts-ignore
const mockContext: ICoreContext = {
    request: mockRequest
};

describe('Content block unit tests - Container', () => {
    let moduleProps: IContentBlockProps<{}>;
    it('renders correctly with anchor', () => {
        // @ts-ignore
        moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig, mockContext) as IContentBlockProps<{}>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />;}),
        };

        const result = mount(<ContentBlockModule {...moduleProps} />);
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect (viewProps.image).toBeTruthy();
        expect (viewProps.text).toBeTruthy();
        expect (viewProps.title).toBeTruthy();
        expect (viewProps.links).toBeTruthy();
    });
});

describe('Content block unit tests - Container', () => {
    let moduleProps: IContentBlockProps<{}>;
    it('renders correctly without anchor', () => {
        // @ts-ignore
        moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig2, mockContext) as IContentBlockProps<{}>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />;}),
        };

        const result = mount(<ContentBlockModule {...moduleProps} />);
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect (viewProps.image).toBeTruthy();
        expect (viewProps.text).toBeTruthy();
        expect (viewProps.title).toBeTruthy();
        expect (viewProps.links).toBeTruthy();
    });
});