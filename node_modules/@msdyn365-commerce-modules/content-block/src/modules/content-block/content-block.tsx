/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';
import LinksComponent from './components/links';
import { actionableRegion as region, IContentBlockProps } from './content-block.props.autogenerated';

export interface IContentBlockViewProps extends IContentBlockProps<{}> {
  title?: React.ReactNode;
  text?: React.ReactNode;
  image?: React.ReactNode;
  links?: React.ReactNode;
  className?: string;
  contentBlockContainer: IModuleProps;
  imageContainer: INodeProps;
  detailsContainer: INodeProps;
  contentBlockAnchorTag?: INodeProps;
  imageLink?: string;
  imageAriaLabel?: string;
}
/**
 *
 * ContentCard component
 * @extends {React.PureComponent<IContentBlockProps{}>}
 */

class ContentBlock extends React.PureComponent<IContentBlockProps<{}>> {
 private telemetryContent: ITelemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,
                                                                  this.props.friendlyName,
                                                                  this.props.telemetry);
 public render(): JSX.Element | null {
    const {
      heading,
      paragraph,
      image,
      links,
      className,
      imageAriaLabel
    } = this.props.config;
    const contentBlockTitle = heading && (
      <Msdyn365.Text
        className='ms-content-block__title'
        tag={heading.tag || 'h1'}
        text={heading.text}
        editProps={{onEdit: this.handleTextChange, requestContext:this.props.context.request}}
      />
    );
    const imageProps = {
      gridSettings: this.props.context.request.gridSettings || {},
      imageSettings: image && image.imageSettings,
    };
    const contentBlockLinks = links && links.length > 0 && (
      <LinksComponent {...{ links: links, onTextChange: this.handleLinkTextChange, requestContext: this.props.context.request, telemetryContent: this.telemetryContent }} />
    );
    const contentBlockText = paragraph && (
      <Msdyn365.RichTextComponent
        text={paragraph}
        className='ms-content-block__text'
        editProps={{onEdit: this.handleParagraphChange, requestContext: this.props.context.request}}
      />
    );
    const contentBlockImage = image && (
      <Msdyn365.Image {...image} {...imageProps} editProps ={{key:this.props.config.image || {}, requestContext: this.props.context.request}}/>
    );

    if (
      !contentBlockTitle &&
      !contentBlockText &&
      !contentBlockImage &&
      !contentBlockLinks
    ) {
      this.props.context.telemetry.error(
        'Content block content is empty, module wont render.'
      );
      return null;
    }

    const contentBlockviewProps = {
      ...this.props,
      title: contentBlockTitle,
      text: contentBlockText,
      image: contentBlockImage,
      links: contentBlockLinks,
      moduleClass: this.props.config.className,
      contentBlockContainer: {
        moduleProps: this.props,
        className: classnames('ms-content-block', className),
      },
      imageContainer: { className: 'ms-content-block__image' },
      detailsContainer: { className: 'ms-content-block__details' },
      contentBlockAnchorTag: {
        tag: 'a',
        className: 'ms-content-block__link',
        role: 'link',
      },
      imageLink: this._getImageLink(),
      imageAriaLabel
    };

    return this.props.renderView(contentBlockviewProps) as React.ReactElement;
  }
  public handleTextChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;
  public handleParagraphChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.paragraph = event.target.value;
  /* Handle link text change*/
  public handleLinkTextChange = (linkIndex: number) => (event: Msdyn365.ContentEditableEvent) => {
    if(this.props.config.links && this.props.config.links[linkIndex]) {
      this.props.config.links[linkIndex].linkText = event.target.value;
    }
  };
  private _getImageLink(): string | null {
    const { imageLink, links, actionableRegion } = this.props.config;
    if (actionableRegion === region.imageAndLinks) {
      if (imageLink && imageLink.destinationUrl) {
        return imageLink.destinationUrl;
      } else if (links && links.length && links[0].linkUrl) {
        return links[0].linkUrl.destinationUrl;
      } else {
        return null;
      }
    } else {
        return null;
    }
  }
}

export default ContentBlock;
