import { buildMockModuleProps, buildMockRequest } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import * as React from 'react';
import { ContentBlockModule } from '../../../..';
const mockConfig = {
    heading: {
        text: 'Micheal Hill',
        tag: "h2"
    },
    paragraph: 'We think about you and the reasons behind your purchase – designing timeless pieces that bring out your best.',
    image: {
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsS'
    },
    links: [
        {
            linkText: 'Shop now',
            linkUrl: {
                destinationUrl: 'https://mocktest'
            },
            ariaLabel: 'Mock aria label'
        }
    ],
    className: '',
    imageLink: {
        destinationUrl: '/modern/storefaq'
    },
    actionableRegion: "imageAndLinks",
    imageAriaLabel: 'image aria label'
};
const mockConfig2 = {
    heading: {
        text: 'Micheal Hill',
        tag: "h2"
    },
    paragraph: 'We think about you and the reasons behind your purchase – designing timeless pieces that bring out your best.',
    image: {
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsS'
    },
    links: [
        {
            linkText: 'Shop now',
            linkUrl: {
                destinationUrl: 'https://mocktest'
            },
            ariaLabel: 'Mock aria label'
        }
    ],
    className: '',
    actionableRegion: "linksOnly",
    imageAriaLabel: 'image aria label'
};
const mockRequest = buildMockRequest();
const mockContext = {
    request: mockRequest
};
describe('Content block unit tests - Container', () => {
    let moduleProps;
    it('renders correctly with anchor', () => {
        moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
        };
        const result = mount(React.createElement(ContentBlockModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.image).toBeTruthy();
        expect(viewProps.text).toBeTruthy();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.links).toBeTruthy();
    });
});
describe('Content block unit tests - Container', () => {
    let moduleProps;
    it('renders correctly without anchor', () => {
        moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig2, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
        };
        const result = mount(React.createElement(ContentBlockModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.image).toBeTruthy();
        expect(viewProps.text).toBeTruthy();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.links).toBeTruthy();
    });
});
//# sourceMappingURL=content-block.test.js.map