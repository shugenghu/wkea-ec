import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';
import LinksComponent from './components/links';
class ContentBlock extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this.handleTextChange = (event) => this.props.config.heading.text = event.target.value;
        this.handleParagraphChange = (event) => this.props.config.paragraph = event.target.value;
        this.handleLinkTextChange = (linkIndex) => (event) => {
            if (this.props.config.links && this.props.config.links[linkIndex]) {
                this.props.config.links[linkIndex].linkText = event.target.value;
            }
        };
    }
    render() {
        const { heading, paragraph, image, links, className, imageAriaLabel } = this.props.config;
        const contentBlockTitle = heading && (React.createElement(Msdyn365.Text, { className: 'ms-content-block__title', tag: heading.tag || 'h1', text: heading.text, editProps: { onEdit: this.handleTextChange, requestContext: this.props.context.request } }));
        const imageProps = {
            gridSettings: this.props.context.request.gridSettings || {},
            imageSettings: image && image.imageSettings,
        };
        const contentBlockLinks = links && links.length > 0 && (React.createElement(LinksComponent, Object.assign({}, { links: links, onTextChange: this.handleLinkTextChange, requestContext: this.props.context.request, telemetryContent: this.telemetryContent })));
        const contentBlockText = paragraph && (React.createElement(Msdyn365.RichTextComponent, { text: paragraph, className: 'ms-content-block__text', editProps: { onEdit: this.handleParagraphChange, requestContext: this.props.context.request } }));
        const contentBlockImage = image && (React.createElement(Msdyn365.Image, Object.assign({}, image, imageProps, { editProps: { key: this.props.config.image || {}, requestContext: this.props.context.request } })));
        if (!contentBlockTitle &&
            !contentBlockText &&
            !contentBlockImage &&
            !contentBlockLinks) {
            this.props.context.telemetry.error('Content block content is empty, module wont render.');
            return null;
        }
        const contentBlockviewProps = {
            ...this.props,
            title: contentBlockTitle,
            text: contentBlockText,
            image: contentBlockImage,
            links: contentBlockLinks,
            moduleClass: this.props.config.className,
            contentBlockContainer: {
                moduleProps: this.props,
                className: classnames('ms-content-block', className),
            },
            imageContainer: { className: 'ms-content-block__image' },
            detailsContainer: { className: 'ms-content-block__details' },
            contentBlockAnchorTag: {
                tag: 'a',
                className: 'ms-content-block__link',
                role: 'link',
            },
            imageLink: this._getImageLink(),
            imageAriaLabel
        };
        return this.props.renderView(contentBlockviewProps);
    }
    _getImageLink() {
        const { imageLink, links, actionableRegion } = this.props.config;
        if (actionableRegion === "imageAndLinks") {
            if (imageLink && imageLink.destinationUrl) {
                return imageLink.destinationUrl;
            }
            else if (links && links.length && links[0].linkUrl) {
                return links[0].linkUrl.destinationUrl;
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
    }
}
export default ContentBlock;
//# sourceMappingURL=content-block.js.map