import classnames from 'classnames';
import * as React from 'react';
import { Collapse, Drawer, Module, Node } from '@msdyn365-commerce-modules/utilities';
const headerView = props => {
    const { HeaderTag, HeaderContainer, HeaderTopBarContainer, Divider, } = props;
    return (React.createElement(Module, Object.assign({}, HeaderTag),
        React.createElement(Node, Object.assign({}, HeaderContainer),
            React.createElement(Node, Object.assign({}, HeaderTopBarContainer),
                props.navIcon,
                props.logo,
                _renderReactFragment(props.search),
                _renderAccountBlock(props, false),
                props.wishListIconDesktop,
                React.createElement(Node, Object.assign({}, Divider)),
                props.cartIcon,
                _renderReactFragment(props.siteOptions)),
            _renderCollapseMenu(props),
            React.createElement(Node, { className: 'ms-header__desktop-view' }, _renderReactFragment(props.menuBar)))));
};
function _renderCollapseMenu(props) {
    const { Divider, MobileMenuLinksContainer, mobileMenuCollapsed } = props;
    return (React.createElement(Collapse, { className: 'ms-header__collapsible-hamburger', isOpen: !mobileMenuCollapsed },
        React.createElement(Node, Object.assign({}, MobileMenuLinksContainer),
            _renderReactFragment(props.search),
            _renderMobileAccountBlock(props, true),
            props.wishListIconMobile),
        React.createElement(Node, Object.assign({}, Divider)),
        _renderReactFragment(props.menuBar)));
}
const renderCustomerName = (accountInformation) => {
    const customer = accountInformation && accountInformation.result;
    return (React.createElement(React.Fragment, null, customer ? customer.FirstName || customer.Name : ''));
};
function _renderMobileAccountBlock(props, renderForMobile) {
    const { AccountInfoDropdownParentContainer, signOutLink, signInLink, data, accountLinks } = props;
    if (AccountInfoDropdownParentContainer) {
        const accountClassName = classnames('ms-header__drawer', AccountInfoDropdownParentContainer.className, renderForMobile ? 'account-mobile' : 'account-desktop');
        if (accountLinks) {
            return (React.createElement(Drawer, { className: accountClassName, openGlyph: 'ms-header__drawer-open', closeGlyph: 'ms-header__drawer-close', glyphPlacement: 'end', toggleButtonText: renderCustomerName(data.accountInformation) },
                React.createElement("div", null,
                    accountLinks ? accountLinks.map((link) => link) : false,
                    signOutLink)));
        }
        else if (signInLink) {
            return (React.createElement(Node, Object.assign({}, AccountInfoDropdownParentContainer, { className: accountClassName }), signInLink));
        }
    }
    return null;
}
function _renderAccountBlock(props, renderForMobile) {
    const { AccountInfoDropdownParentContainer, AccountInfoDropdownPopoverConentContainer, accountInfoDropdownButton, signOutLink, signInLink, accountLinks, } = props;
    if (AccountInfoDropdownParentContainer) {
        const accountClassName = classnames(AccountInfoDropdownParentContainer.className, renderForMobile ? 'account-mobile' : 'account-desktop');
        if (AccountInfoDropdownPopoverConentContainer) {
            return (React.createElement(Node, Object.assign({}, AccountInfoDropdownParentContainer, { className: accountClassName }),
                accountInfoDropdownButton,
                React.createElement(Node, Object.assign({}, AccountInfoDropdownPopoverConentContainer),
                    accountLinks ? accountLinks.map((link) => link) : false,
                    signOutLink)));
        }
        else if (signInLink) {
            return (React.createElement(Node, Object.assign({}, AccountInfoDropdownParentContainer, { className: accountClassName }), signInLink));
        }
    }
    return null;
}
function _renderReactFragment(items) {
    return (React.createElement(React.Fragment, null, items && items.length
        ? items.map((slot, index) => {
            return React.createElement(React.Fragment, { key: index }, slot);
        })
        : null));
}
export default headerView;
//# sourceMappingURL=header.view.js.map