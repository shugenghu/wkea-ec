import * as React from 'react';
import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import { Quantity } from '../utilities/quantity';
const BuyboxView = props => {
    const { ModuleProps, MediaGalleryContainerProps, ProductInfoContainerProps, addToCart, addToOrderTemplate, addToWishlist, telemetryContent, configure, description, findInStore, quantity, price, title, rating, callbacks, state, resources, inventoryLabel, shopSimilarLook } = props;
    return (React.createElement(Module, Object.assign({}, ModuleProps),
        React.createElement(Node, Object.assign({}, MediaGalleryContainerProps), props.mediaGallery),
        React.createElement(Node, Object.assign({}, ProductInfoContainerProps),
            title,
            price,
            description,
            _renderTextBlock(props.slots.textBlocks),
            rating,
            configure && _renderConfigure(configure),
            quantity && _renderQuantity(quantity, callbacks, props, state, resources, telemetryContent),
            inventoryLabel,
            _renderCartAndActions(addToCart, addToOrderTemplate, addToWishlist),
            findInStore && _renderFindInStore(findInStore),
            _renderSocialShare(props.slots && props.slots?.socialShare),
            shopSimilarLook && _renderShopSimilarLook(shopSimilarLook))));
};
const _renderTextBlock = (textBlocks) => {
    if (!textBlocks || textBlocks.length === 0) {
        return undefined;
    }
    return (React.createElement(React.Fragment, null, textBlocks[0]));
};
const _renderSocialShare = (socialShare) => {
    if (!socialShare || socialShare.length === 0) {
        return undefined;
    }
    return (React.createElement(React.Fragment, null, socialShare[0]));
};
const _renderCartAndActions = (addToCart, addToOrderTemplate, addToWishlist) => {
    if (!addToCart && !addToWishlist) {
        return undefined;
    }
    return (React.createElement("div", { className: 'product-add-to-cart' },
        addToCart && addToCart.errorBlock,
        addToOrderTemplate && addToOrderTemplate.errorBlock,
        addToWishlist && addToWishlist.errorBlock,
        React.createElement("div", { className: 'buttons' },
            addToCart && addToCart.button,
            addToOrderTemplate && addToOrderTemplate.button,
            addToWishlist && addToWishlist.button)));
};
const _renderConfigure = (configure) => {
    const { ContainerProps, dropdowns } = configure;
    return (React.createElement(Node, Object.assign({}, ContainerProps), dropdowns.map(_renderConfigureDropdown)));
};
const _renderConfigureDropdown = (dropdown) => {
    const { ContainerProps, LabelContainerProps, heading, errors, select } = dropdown;
    return (React.createElement(Node, Object.assign({}, ContainerProps),
        React.createElement(Node, Object.assign({}, LabelContainerProps),
            heading,
            errors),
        select));
};
const _renderFindInStore = (findInStore) => {
    const { ContainerProps, storeSelector, heading, description, errors, button, modal } = findInStore;
    return (React.createElement(Node, Object.assign({}, ContainerProps),
        storeSelector,
        heading,
        description,
        errors,
        button,
        modal));
};
const _renderQuantity = (quantityComponent, callbacks, props, state, extentionResources, telemetryContent) => {
    const { ContainerProps, LabelContainerProps, heading, errors } = quantityComponent;
    const { resources, context: { app: { config: { maxQuantityForCartLineItem } } } } = props;
    const { quantity, } = state;
    const onChange = (newValue) => {
        if (callbacks.updateQuantity) {
            callbacks.updateQuantity(newValue);
        }
    };
    return (React.createElement(Node, Object.assign({}, ContainerProps),
        React.createElement(Node, Object.assign({}, LabelContainerProps),
            heading,
            errors),
        React.createElement(Quantity, { id: 'ms-buybox__product-quantity-input', max: maxQuantityForCartLineItem || 10, currentCount: quantity, onChange: onChange, inputQuantityAriaLabel: resources.inputQuantityAriaLabel, decrementButtonAriaLabel: extentionResources.decrementButtonAriaLabel, incrementButtonAriaLabel: extentionResources.incrementButtonAriaLabel, telemetryContent: telemetryContent })));
};
const _renderShopSimilarLook = (shopSimilarItem) => {
    const { ContainerProps, errors, input } = shopSimilarItem;
    return (React.createElement(Node, Object.assign({}, ContainerProps),
        errors,
        input));
};
export default BuyboxView;
//# sourceMappingURL=buybox.view.js.map