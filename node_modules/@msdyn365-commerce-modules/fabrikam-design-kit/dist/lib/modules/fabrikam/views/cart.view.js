import * as React from 'react';
import { Button, getPayloadObject, getTelemetryAttributes, Node, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
const CartView = (props) => (React.createElement("div", Object.assign({ className: props.className, id: props.id }, props.renderModuleAttributes(props)),
    props.title,
    React.createElement(Node, Object.assign({}, props.CartlinesWrapper), _renderCartlines(props.cartlines, props.resources, props.storeSelector, props.backToShoppingButton, props.waitingComponent, props.cartLoadingStatus, props.cartDataResult, props.telemetryContent)),
    props.orderSummaryHeading &&
        React.createElement(Node, Object.assign({}, props.OrderSummaryWrapper),
            props.orderSummaryHeading,
            _renderOrderSummarylines(props.orderSummaryLineitems, props.OrderSummaryItems, props),
            _renderErrorBlock(props.OrderSummaryErrors),
            props.checkoutAsSignInUserButton,
            props.checkoutAsGuestButton,
            props.backToShoppingButton,
            props.createTemplateFromCartButton),
    props.storeSelector));
const _renderCartlines = (cartLines, resources, storeSelector, backToShoppingButton, waitingComponent, cartLoadingStatus, cartDataResult, telemetryContent) => {
    const { emptyCartText } = resources;
    if (cartLoadingStatus) {
        return React.createElement(React.Fragment, null, cartLoadingStatus);
    }
    if (cartLines) {
        return cartLines.map((cartLine, index) => {
            return (React.createElement("div", { className: 'msc-cart-lines-item', key: index },
                cartLine.cartline,
                _renderBOPISBlock(cartLine, resources, storeSelector, telemetryContent),
                cartLine.addToOrderTemplate ? (React.createElement("div", { className: 'msc-cart-line__extra-actions' },
                    cartLine.addToOrderTemplate,
                    cartLine.addToWishlist,
                    cartLine.remove)) : (React.createElement(React.Fragment, null,
                    cartLine.addToWishlist,
                    cartLine.remove))));
        });
    }
    else {
        return (cartDataResult ?
            (React.createElement("div", { className: 'msc-cart__empty-cart' },
                React.createElement("p", { className: 'msc-cart-line' }, emptyCartText),
                backToShoppingButton)) : React.createElement(React.Fragment, null, waitingComponent));
    }
};
const _renderBOPISBlock = (cartLine, resources, storeSelector, telemetryContent) => {
    if (!cartLine.pickUpInStore || !storeSelector) {
        return null;
    }
    const { shipInsteadDisplayText, shipToAddressDisplayText, pickItUpDisplayText, pickUpAtStoreWithLocationText, changeStoreDisplayText } = resources;
    const isBopisSelected = cartLine.pickUpInStore.isBopisSelected;
    const toggleBopis = (event) => { return cartLine.pickUpInStore && cartLine.pickUpInStore.callbacks.toggleBopis(!isBopisSelected); };
    const changeStore = (event) => { return cartLine.pickUpInStore && cartLine.pickUpInStore.callbacks.toggleBopis(true); };
    const payLoad = getPayloadObject('click', telemetryContent, TelemetryConstant.PickupInStore);
    const puckUpinStoreAttribute = getTelemetryAttributes(telemetryContent, payLoad);
    return (React.createElement(Node, Object.assign({}, cartLine.pickUpInStore.ContainerProps),
        React.createElement("div", { className: 'msc-cart-line__bopis-method' }, isBopisSelected ? React.createElement("span", { className: 'pick-up' }, pickUpAtStoreWithLocationText) : React.createElement("span", { className: 'ship' }, shipToAddressDisplayText)),
        isBopisSelected &&
            React.createElement("div", { className: 'msc-cart-line__bopis-fullfilment' },
                React.createElement("span", { className: 'msc-cart-line__bopis-fullfilment-store' }, cartLine.pickUpInStore.orgUnitName),
                React.createElement(Button, { className: 'msc-cart-line__bopis-changestore', onClick: changeStore }, changeStoreDisplayText)),
        React.createElement(Button, Object.assign({ className: 'msc-cart-line__bopis-btn' }, puckUpinStoreAttribute, { onClick: toggleBopis }), isBopisSelected ? shipInsteadDisplayText : pickItUpDisplayText)));
};
const _renderErrorBlock = (errorData) => {
    if (!errorData || errorData.errors.length === 0) {
        return null;
    }
    return (React.createElement(Node, Object.assign({}, errorData.Wrapper),
        errorData.header,
        errorData.errors));
};
const _renderOrderSummarylines = (orderSummaryLines, OrderSummaryItems, props) => {
    if (!orderSummaryLines) {
        return null;
    }
    return (React.createElement(Node, Object.assign({}, OrderSummaryItems),
        props.promoCode,
        orderSummaryLines.subtotal,
        orderSummaryLines.shipping,
        orderSummaryLines.otherCharge,
        orderSummaryLines.tax,
        orderSummaryLines.totalDiscounts ? orderSummaryLines.totalDiscounts : null,
        orderSummaryLines.orderTotal));
};
export default CartView;
//# sourceMappingURL=cart.view.js.map