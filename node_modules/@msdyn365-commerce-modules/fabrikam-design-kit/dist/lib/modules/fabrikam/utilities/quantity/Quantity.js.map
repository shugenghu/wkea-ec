{"version":3,"file":"Quantity.js","sourceRoot":"./src/","sources":["modules/fabrikam/utilities/quantity/Quantity.tsx"],"names":[],"mappings":"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","sourcesContent":["import { getPayloadObject, getTelemetryAttributes, IPayLoad, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';\nimport { debounce } from 'lodash';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\nimport { IQuantityProps } from './Quantity.props';\n\ninterface IQuantityState {\n    currentInput: number;\n    isUpdateing: boolean;\n}\n/**\n * Quantity Component - This component is used to add or remove quantity\n */\n@observer\nexport default class Quantity extends React.PureComponent<IQuantityProps, IQuantityState> {\n    public static defaultProps: Partial<IQuantityProps> = {\n        min: 1,\n        decrementGlyphClass: 'fas fa-minus',\n        incrementGlyphClass: 'fas fa-plus'\n    };\n\n    private inputRef: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>();\n    private payLoad: IPayLoad;\n\n    constructor(props: IQuantityProps) {\n        super(props);\n        this.state = { currentInput: props.currentCount || 1, isUpdateing: false };\n        this._onIncrement = this._onIncrement.bind(this);\n        this._onDecrement = this._onDecrement.bind(this);\n        this._handleChange = this._handleChange.bind(this);\n        this.payLoad = getPayloadObject('click', this.props.telemetryContent!, '');\n    }\n\n    public componentDidUpdate(): void {\n        if (this.props.disabled && !this.state.isUpdateing) {\n            this.setState({ isUpdateing: true });\n        }\n\n        if (!this.props.disabled && this.state.isUpdateing) {\n            this.setState({ currentInput: this.props.currentCount || 1, isUpdateing: false });\n        }\n    }\n\n    public render(): JSX.Element {\n        const glyphMinusClassName: string = `${this.props.decrementGlyphClass!} quantity__controls-glyph`;\n        const glyphPlusClassName: string = `${this.props.incrementGlyphClass!} quantity__controls-glyph`;\n        const disabled = this.state.currentInput === this.props.min;\n        const incDisabled = this.state.currentInput === this.props.max;\n        const currentValue = this.state.currentInput;\n        this.payLoad.contentAction.etext = TelemetryConstant.DecrementQuantity;\n        const decrementAttributes = getTelemetryAttributes(this.props.telemetryContent!, this.payLoad);\n        this.payLoad.contentAction.etext = TelemetryConstant.IncrementQuantity;\n        const incrementAttributes = getTelemetryAttributes(this.props.telemetryContent!, this.payLoad);let extraClass = '';\n        if(disabled) {\n            // The quantity has reached its boundaries (max or min)\n            extraClass ='disabled';\n\n        } else if(this.props.disabled) {\n            // this.props.disabled shows if the state is not succeded yet\n            extraClass = 'transition';\n        }\n        let extraClassInc = '';\n        if(incDisabled) {\n            // The quantity has reached its boundaries (max or min)\n            extraClassInc ='disabled';\n        } else if(this.props.disabled) {\n            // this.props.disabled shows if the state is not succeded yet\n            extraClassInc = 'transition';\n        }\n        return (\n            <>\n                <div className='quantity' id={this.props.id}>\n                    <button\n                        disabled={this.props.disabled || disabled}\n                        title= {disabled ? '' : this.props.decrementButtonAriaLabel}\n                        className={`decrement quantity__controls ${extraClass}`}\n                        onClick={this._onDecrement}\n                        aria-hidden={true}\n                        aria-label={`${this.props.decrementButtonAriaLabel}`}\n                        tabIndex={-1}\n                        color={'secondary'}\n                        {...decrementAttributes}\n                    >\n                        <span className={glyphMinusClassName} />\n                    </button>\n                    <input\n                        type='number'\n                        className='quantity-input'\n                        pattern='[0-9]*'\n                        value={this.state.currentInput}\n                        onChange={this._handleChange}\n                        onBlur={this._validateMin}\n                        aria-live='polite'\n                        aria-label={`${this.props.inputQuantityAriaLabel}`}\n                        role='spinbutton'\n                        aria-valuemin={this.props.min}\n                        aria-valuemax={this.props.max}\n                        aria-valuenow={currentValue}\n                        ref={this.inputRef}\n                        disabled={this.props.disabled}\n                    />\n                    <button\n                        disabled={this.props.disabled || incDisabled}\n                        title={incDisabled ? '' : this.props.incrementButtonAriaLabel}\n                        className={`increment quantity__controls ${extraClassInc}`}\n                        onClick={this._onIncrement}\n                        aria-hidden={true}\n                        aria-label={`${this.props.incrementButtonAriaLabel}`}\n                        tabIndex={-1}\n                        color={'secondary'}\n                        {...incrementAttributes}\n                    >\n                        <span className={glyphPlusClassName} />\n                    </button>\n                </div>\n            </>\n        );\n    }\n\n    private _onIncrement(): void {\n        let invokeCallback = false;\n        const currQuantity = this.state.currentInput;\n        let updatedQuantity: number;\n\n        if (currQuantity < this.props.max) {\n            invokeCallback = true;\n            updatedQuantity = currQuantity + 1 ;\n        } else {\n            invokeCallback = false;\n            updatedQuantity = this.props.max;\n        }\n\n        this.setState({ currentInput: updatedQuantity });\n\n        invokeCallback && this.props.onChange && this.props.onChange(updatedQuantity);\n    }\n\n    private _onDecrement(): void {\n        let invokeCallback = false;\n        const currQuantity = this.state.currentInput;\n        let updatedQuantity: number;\n\n        if (currQuantity > 1) {\n            invokeCallback = true;\n            updatedQuantity = currQuantity - 1;\n        } else {\n            invokeCallback = false;\n            updatedQuantity = 1;\n        }\n\n        this.setState({ currentInput: updatedQuantity });\n\n        invokeCallback && this.props.onChange && this.props.onChange(updatedQuantity);\n    }\n\n    private _handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n        const currentValue = parseInt((e.target.value), 10);\n        const minValue = this.props.min === undefined ? 1 : this.props.min;\n        const inputElement = this.inputRef && this.inputRef.current && this.inputRef.current instanceof HTMLInputElement && this.inputRef.current;\n\n        if (currentValue > this.props.max) {\n            this.setState(\n                { currentInput: this.props.max },\n                () => {\n                    debounce(\n                        () => {\n                            this.props.onChange && this.props.onChange(this.state.currentInput);\n                        },\n                        200)();\n                }\n            );\n        } else {\n                this.setState(\n                    { currentInput: currentValue },\n                    () => {\n                        debounce(\n                            () => {\n                                if(!isNaN(this.state.currentInput) && !(this.state.currentInput < minValue)) {\n                                    this.props.onChange && this.props.onChange(this.state.currentInput);\n\n                                    if (inputElement) {\n                                        inputElement.setAttribute('aria-valuenow', currentValue.toString());\n                                        inputElement.setAttribute('value', currentValue.toString());\n                                    }\n                                }\n                            },\n                            200)();\n                    }\n                );\n        }\n    }\n\n    private _validateMin = (): void => {\n        const minValue = this.props.min === undefined ? 1 : this.props.min;\n        if(isNaN(this.state.currentInput) || (this.state.currentInput < minValue)) {\n            this.setState({ currentInput: minValue }, () => { this.props.onChange && this.props.onChange(this.state.currentInput); });\n        } else {\n            this.props.onChange && this.props.onChange(this.state.currentInput);\n        }\n    }\n}"]}