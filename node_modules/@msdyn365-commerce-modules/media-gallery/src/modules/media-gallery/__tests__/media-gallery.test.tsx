/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { KeyCodes } from '@msdyn365-commerce-modules/utilities';
import { ICarouselProps } from '@msdyn365-commerce/components';
import { buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';
import { AsyncResult, MediaLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { mount } from 'enzyme';
import { observable } from 'mobx';
import * as React from 'react';
import { imageZoom, IMediaGalleryConfig, IMediaGalleryData, IMediaGalleryProps, IMediaGalleryResources, MediaGallery } from '../../..';
import { IMediaGalleryState, IMediaGalleryViewProps } from '../media-gallery';
import { imageSource } from '../media-gallery.props.autogenerated';
import * as Utils from '../utils';

const mockData: IMediaGalleryData = {
    product: {
        status: 'FAILED',
        result: undefined
    } as AsyncResult<SimpleProduct>,
    mediaLocations: [{
        url: 'FAILED',
    }] as unknown as AsyncResult<MediaLocation[]>,
};

const mockConfig: IMediaGalleryConfig = {
    imageZoom: imageZoom.inline
};

const mockConfig1: IMediaGalleryConfig = {
    className: 'media-gallery',
    imageZoom: imageZoom.container,
    imageSource: imageSource.productId,
    productId: '1234',
    images: [{ src: '201', altText: 'Image 1' },
    { src: 'fail', altText: 'Image 2' },]
};

const mockResources: IMediaGalleryResources = {
    nextScreenshotFlipperText: 'Next',
    previousScreenshotFlipperText: 'Previous',
    fullScreenTitleText: 'fullscreen'
};

const mockContext: ICoreContext = {
    // @ts-ignore impartial mock
    request: {
        // @ts-ignore impartial mock
        gridSettings: undefined
    }
};

describe('MediaGallery', () => {
    it('renders correctly when no product', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const result = mount(<MediaGallery {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();

        const viewProps: IMediaGalleryViewProps = result.childAt(0).props().props;

        expect(viewProps).toBeDefined();
    });
    it('loads state when product exists', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });

        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'SUCCESS',
                        result: {
                            RecordId: 10,
                            PrimaryImageUrl: 'image.png'
                        }
                    }
                },
                {},
                mockConfig1,
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const result = mount(<MediaGallery {...moduleProps} />);

        await new Promise(setImmediate);

        result.update();

        const state: IMediaGalleryState = result.state() as IMediaGalleryState;

        expect(state.mediaGalleryItems).toBeDefined();
        expect(state.mediaGalleryItems!.length).toEqual(2);
        expect(state.mediaGalleryItems).toEqual(
            [{ src: '201', altText: 'Image 1' },
            { src: 'fail', altText: 'Image 2' }]);
    });

    it('loads state when full view mode', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });

        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'SUCCESS',
                        result: {
                            RecordId: 10,
                            PrimaryImageUrl: 'image.png'
                        }
                    }
                },
                {},
                {
                    className: 'media-gallery',
                    allowFullScreen:true
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const result = mount(<MediaGallery {...moduleProps} />);

        await new Promise(setImmediate);

        result.update();

        const state: IMediaGalleryState = result.state() as IMediaGalleryState;

        expect(state.mediaGalleryItems).toBeDefined();
        expect(state.mediaGalleryItems!.length).toEqual(3);
        expect(state.mediaGalleryItems).toEqual(expect.arrayContaining([
            expect.objectContaining({ src: 'image_a.png', altText: 'Image A' }),
            expect.objectContaining({ src: 'image_b.png', altText: 'Image B' }),
            expect.objectContaining({ src: 'image_c.png', altText: 'Image C' })
        ]));
    });
    it('Click full image view on slider.', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'SUCCESS',
                        result: {
                            RecordId: 10,
                            PrimaryImageUrl: 'image.png'
                        }
                    }
                },
                {},
                {
                    className: 'media-gallery',
                    allowFullScreen:true
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const wrapper = mount(
            <MediaGallery {...moduleProps} />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const viewProps = wrapper.childAt(0).props().props;
        const parentElement = mount(viewProps.CarouselProps.items[0] as React.ReactElement);
        expect(() => {
            parentElement.find('.ms-fullscreen-section a').simulate('click');
        }).not.toThrow();
        wrapper.update();
    });

    it('loads state when no product exists', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });

        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'FAILED',
                        result: undefined
                    }
                },
                {},
                {
                    className: 'media-gallery',
                    galleryImageSettings: {}
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const result = mount(<MediaGallery {...moduleProps} />);

        await new Promise(setImmediate);

        result.update();

        const state: IMediaGalleryState = result.state() as IMediaGalleryState;

        expect(state.mediaGalleryItems).toEqual([]);
    });

    it('loads and updates state when product changes', async () => {
        const observeableMockData = observable({
            ...mockData,
            product: {
                status: 'FAILED',
                result: undefined
            } as AsyncResult<SimpleProduct>
        }) as IMediaGalleryData;

        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });

        const moduleProps = {
            ...buildMockModuleProps(
                observeableMockData,
                {},
                {
                    className: 'media-gallery',
                    galleryImageSettings: {}
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const result = mount(<MediaGallery {...moduleProps} />);

        await new Promise(setImmediate);

        // No product, shouldn't try to get images
        expect(Utils.getValidProductImages).not.toBeCalled();

        const state1: IMediaGalleryState = result.state() as IMediaGalleryState;
        expect(state1.mediaGalleryItems).toEqual([]);

        observeableMockData.product = {
            status: 'SUCCESS',
            result: {
                RecordId: 10,
                PrimaryImageUrl: 'image.png'
            }
        } as AsyncResult<SimpleProduct>;

        await new Promise(setImmediate);

        expect(Utils.getValidProductImages).toBeCalled();

        const state2: IMediaGalleryState = result.state() as IMediaGalleryState;
        expect(state2.mediaGalleryItems).toBeDefined();
        expect(state2.mediaGalleryItems!.length).toEqual(3);
        expect(state2.mediaGalleryItems).toEqual(expect.arrayContaining([
            expect.objectContaining({ src: 'image_a.png', altText: 'Image A' }),
            expect.objectContaining({ src: 'image_b.png', altText: 'Image B' }),
            expect.objectContaining({ src: 'image_c.png', altText: 'Image C' })
        ]));

        observeableMockData.product = {
            status: 'FAILED',
            result: undefined
        } as AsyncResult<SimpleProduct>;

        await new Promise(setImmediate);

        const state3: IMediaGalleryState = result.state() as IMediaGalleryState;
        expect(state3.mediaGalleryItems).toEqual([]);
    });

    it('next/previous callbacks work', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });

        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'SUCCESS',
                        result: {
                            RecordId: 10,
                            PrimaryImageUrl: 'image.png'
                        }
                    }
                },
                {},
                {
                    className: 'media-gallery',
                    galleryImageSettings: {}
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const result = mount(<MediaGallery {...moduleProps} />);

        await new Promise(setImmediate);

        result.update();

        const viewProps = result.childAt(0).props().props as IMediaGalleryViewProps;

        const carouselProps: ICarouselProps = viewProps.CarouselProps as ICarouselProps;

        // @ts-ignore
        expect(result.state().activeIndex).toEqual(0);
        carouselProps.next();
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(1);
        carouselProps.next();
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(2);
        carouselProps.next();
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(0);
        carouselProps.previous();
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(2);
        carouselProps.previous();
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(1);
        carouselProps.previous();
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(0);
    });

    it('onExiting/onExited callbacks work', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });

        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'SUCCESS',
                        result: {
                            RecordId: 10,
                            PrimaryImageUrl: 'image.png'
                        }
                    }
                },
                {},
                {
                    className: 'media-gallery',
                    galleryImageSettings: {}
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const result = mount(<MediaGallery {...moduleProps} />);

        await new Promise(setImmediate);

        result.update();

        const viewProps = result.childAt(0).props().props as IMediaGalleryViewProps;

        const carouselProps: ICarouselProps = viewProps.CarouselProps as ICarouselProps;

        // @ts-ignore
        expect(result.state().animating).toEqual(false);

        // @ts-ignore
        carouselProps.handleOnExiting({});

        // @ts-ignore
        expect(result.state().animating).toEqual(true);

        // @ts-ignore
        carouselProps.handleOnExited({});

        // @ts-ignore
        expect(result.state().animating).toEqual(false);
    });

    it('thumbnail click events work', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });

        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'SUCCESS',
                        result: {
                            RecordId: 10,
                            PrimaryImageUrl: 'image.png'
                        }
                    }
                },
                {},
                {
                    imageZoom: '',
                    className: 'media-gallery',
                    galleryImageSettings: {}
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const result = mount(<MediaGallery {...moduleProps} />);

        await new Promise(setImmediate);

        result.update();

        const viewProps = result.childAt(0).props().props as IMediaGalleryViewProps;

        const carouselItemContainerProps1 = viewProps.Thumbnails.items![0].ThumbnailItemContainerProps;
        const carouselItemContainerProps2 = viewProps.Thumbnails.items![1].ThumbnailItemContainerProps;
        const carouselItemContainerProps3 = viewProps.Thumbnails.items![2].ThumbnailItemContainerProps;

        // @ts-ignore
        expect(result.state().activeIndex).toEqual(0);

        // Click on item 3 will set index to 2
        carouselItemContainerProps3.onClick({ preventDefault: jest.fn() });
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(2);

        // Shift key down on item 2 won't set index
        carouselItemContainerProps2.onKeyDown({ which: KeyCodes.Shift, preventDefault: jest.fn() });
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(2);

        // Enter key down on item 2 will set index
        carouselItemContainerProps2.onKeyDown({ which: KeyCodes.Enter, preventDefault: jest.fn() });
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(1);

        // Space key down on item 1 will set index
        carouselItemContainerProps1.onKeyDown({ which: KeyCodes.Space, preventDefault: jest.fn() });
        // @ts-ignore
        expect(result.state().activeIndex).toEqual(0);
    });
    it('Mouse move event for image container on inline', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'SUCCESS',
                        result: {
                            RecordId: 10,
                            PrimaryImageUrl: 'image.png'
                        }
                    }
                },
                {},
                {
                    imageZoom: 'inline',
                    className: 'media-gallery',
                    dataScale: '1.8',
                    galleryImageSettings: {}
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const wrapper = mount(
            <MediaGallery {...moduleProps} />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        await new Promise(setImmediate);
        wrapper.update();
        const viewProps = wrapper.childAt(0).props().props;
        const parentElement = mount(viewProps.CarouselProps.items[0] as React.ReactElement);

        expect(() => {
            parentElement.find('img.ms-inline-zoom__zoomedImg').simulate('mousemove');
        }).not.toThrow();
        wrapper.update();

        expect(() => {
            parentElement.find('img.ms-media-gallery__item').simulate('mouseover');
        }).not.toThrow();
        wrapper.update();

        expect(() => {
            parentElement.find('img.ms-inline-zoom__zoomedImg').simulate('mouseout');
        }).not.toThrow();
        wrapper.update();
    });
    it('Mouse move event for image container on zoom', async () => {
        // @ts-ignore
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps(
                {
                    ...mockData,
                    product: {
                        status: 'SUCCESS',
                        result: {
                            RecordId: 10,
                            PrimaryImageUrl: 'image.png'
                        }
                    }
                },
                {},
                {
                    className: 'media-gallery',
                    imageZoom: 'container',
                    dataScale: '1.5',
                    galleryImageSettings: {}
                },
                // @ts-ignore impartial mock
                {
                    ...mockContext,
                    // @ts-ignore impartial mock
                    request: {
                        gridSettings: { lg: { w: 1599 } }
                    }

                }) as IMediaGalleryProps<IMediaGalleryData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; })
        };

        const wrapper = mount(
            <MediaGallery {...moduleProps} />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const mediaGallery = wrapper.instance() as MediaGallery;
        mediaGallery.setState({
            isImageZoomed: true
        });
        const viewProps = wrapper.childAt(0).props().props;
        const parentElement = mount(viewProps.CarouselProps.items[0] as React.ReactElement);

        expect(() => {
            parentElement.find('.ms-containerZoom__zoom-lens').simulate('mousemove');
        }).not.toThrow();
        wrapper.update();

        expect(() => {
            parentElement.find('.ms-containerZoom__zoom-lens').simulate('mouseout');
        }).not.toThrow();
        wrapper.update();
    });
});
