import classnames from 'classnames';
import { reaction } from 'mobx';
import * as React from 'react';
import { Carousel } from '@msdyn365-commerce/components';
import { ImagefullView, inlineZoomImageOnHover, inlineZoomImageOnMouseMove, inlineZoomImageOnMouseOut, inlineZoomInit, onContainerZoomInit, onMouseMoveLensContainer, onMouseOutLensContainer, onMouseOverImageContainer, removeInlineZoomStyle, SingleSlideCarousel } from '@msdyn365-commerce-modules/utilities';
import { Image } from '@msdyn365-commerce/core';
import { getValidProductImages, validateProductImages } from './utils';
class MediaGallery extends React.Component {
    constructor(props) {
        super(props);
        this._inlineZoomDivRef = new Map();
        this.defaultGalleryImageSettings = {
            viewports: {
                xs: { q: 'w=767&h=767&m=8', w: 0, h: 0 },
                sm: { q: 'w=600&h=600&m=8', w: 0, h: 0 },
                md: { q: 'w=600&h=772&m=8', w: 0, h: 0 },
                lg: { q: 'h=772&m=8', w: 0, h: 0 }
            },
            lazyload: true
        };
        this.defaultThumbnailImageSettings = {
            viewports: {
                xs: { q: 'w=100&m=8', w: 100, h: 0 },
                lg: { q: 'w=100&m=8', w: 100, h: 0 }
            },
            lazyload: true
        };
        this.onExiting = () => {
            this.setState({ animating: true });
        };
        this.onExited = () => {
            this.setState({ animating: false });
        };
        this.next = () => {
            if (this.isLastItem() === undefined) {
                return;
            }
            const nextIndex = this.isLastItem() ? 0 : this.state.activeIndex + 1;
            this.goToIndex(nextIndex);
        };
        this.previous = () => {
            const nextIndex = this.isFirstItem()
                ? this.state.mediaGalleryItems
                    ? this.state.mediaGalleryItems.length - 1
                    : 0
                : this.state.activeIndex - 1;
            this.goToIndex(nextIndex);
        };
        this.goToIndex = (index) => {
            if (this.state.animating) {
                return;
            }
            this.setState({ activeIndex: index });
        };
        this._getCarouselItem = (image, index) => (React.createElement(Image, Object.assign({ className: 'ms-media-gallery__item' }, image, { gridSettings: this.props.context.request.gridSettings, imageSettings: this.props.config.galleryImageSettings || this.defaultGalleryImageSettings, loadFailureBehavior: 'default', role: 'tabpanel', id: `${this.props.id}__carousel-item__${index}` })));
        this._getThumbnailItem = (image, index, modifiedActiveIndex) => {
            const classes = classnames('ms-media-gallery__thumbnail-item', modifiedActiveIndex === index ? 'ms-media-gallery__thumbnail-item-active' : '');
            return {
                ThumbnailItemContainerProps: {
                    tag: 'li',
                    className: classes,
                    role: 'tab',
                    tabIndex: 0,
                    key: index,
                    'aria-label': image.altText,
                    'aria-selected': modifiedActiveIndex === index,
                    'aria-controls': `${this.props.id}__carousel-item__${index}`,
                    onClick: this._generateOnThumbnailClick(index),
                    onKeyDown: this._generateOnThumbnailKeyDown(index)
                },
                Picture: (React.createElement(Image, Object.assign({ className: 'ms-media-gallery__thumbnail' }, image, { gridSettings: this.props.context.request.gridSettings, imageSettings: this.props.config.thumbnailImageSettings || this.defaultThumbnailImageSettings, loadFailureBehavior: 'default' })))
            };
        };
        this._generateOnThumbnailKeyDown = (index) => {
            return (event) => {
                if (event.which === 13 || event.which === 32) {
                    event.preventDefault();
                    this.goToIndex(index);
                }
            };
        };
        this._generateOnThumbnailClick = (index) => {
            return (event) => {
                event.preventDefault();
                this.goToIndex(index);
            };
        };
        this.isFirstItem = () => this.state.activeIndex === 0;
        this.isLastItem = () => this.state.mediaGalleryItems && this.state.activeIndex === this.state.mediaGalleryItems.length - 1;
        this.openModalDialog = () => {
            this._toggleModal();
        };
        this.imageModalSlider = (ZoomView) => {
            const { data: { product: { result: product } }, resources } = this.props;
            let mediaGalleryItems = this.state.mediaGalleryItems;
            if (!mediaGalleryItems && product) {
                mediaGalleryItems = [this._mapProductToImageData(product)];
            }
            const carouselprops = {
                tag: Carousel,
                className: 'ms-media-gallery__carousel',
                items: mediaGalleryItems &&
                    mediaGalleryItems.map((item, index) => this._renderCarouselItemImageView(ZoomView, item, index)),
                activeIndex: this.state.activeIndex,
                next: this.next,
                previous: this.previous,
                interval: false,
                directionTextPrev: resources.previousScreenshotFlipperText,
                directionTextNext: resources.nextScreenshotFlipperText,
                onIndicatorsClickHandler: this.goToIndex,
                showPaginationTooltip: true,
                hideIndicator: true,
                handleOnExited: this.onExited,
                handleOnExiting: this.onExiting,
            };
            const carousel = React.createElement(Carousel, Object.assign({}, carouselprops));
            const imageModalSliderProps = {
                modalIsOpen: this.state.modalIsOpen,
                ontoggle: this._toggleModal,
                galleryCarousel: carousel
            };
            return ImagefullView(imageModalSliderProps);
        };
        this._toggleModal = this._toggleModal.bind(this);
        this.state = { activeIndex: 0, animating: false, mediaGalleryItems: undefined, isImageZoomed: false, modalIsOpen: false };
        this._onImageMouseOut = this._onImageMouseOut.bind(this);
        this._inlineZoomImageOnHover = this._inlineZoomImageOnHover.bind(this);
        this._onInlineImageClick = this._onInlineImageClick.bind(this);
        this._onContainerZoomImageClick = this._onContainerZoomImageClick.bind(this);
        this._onMouseOutLensContainer = this._onMouseOutLensContainer.bind(this);
    }
    async componentDidMount() {
        const source = this.props.config.imageSource || "pageContext";
        const curatedImage = this.props.config.images || [];
        if (source === "pageContext") {
            reaction(() => (this.props.data.product.result ? this.props.data.product.result.RecordId : null), async () => {
                if (this.props.data.product.result) {
                    const images = await getValidProductImages(this.props.data.product.result.RecordId, +this.props.context.request.apiSettings.channelId, this.props.context.actionContext, this.props.config.thumbnailImageSettings || this.defaultThumbnailImageSettings);
                    this.setState({
                        mediaGalleryItems: [...images, ...curatedImage]
                    });
                }
                else {
                    this.setState({
                        mediaGalleryItems: [...curatedImage]
                    });
                }
            });
        }
        if (source === "productId" && this.props.data.mediaLocations.result) {
            const images = await validateProductImages(this.props.data.mediaLocations.result, this.props.context.actionContext, this.props.config.thumbnailImageSettings || this.defaultThumbnailImageSettings);
            this.setState({
                mediaGalleryItems: [...images, ...curatedImage]
            });
        }
        else if (source === "pageContext" && this.props.data.product.result) {
            const images = await getValidProductImages(this.props.data.product.result.RecordId, +this.props.context.request.apiSettings.channelId, this.props.context.actionContext, this.props.config.thumbnailImageSettings || this.defaultThumbnailImageSettings);
            this.setState({
                mediaGalleryItems: [...images, ...curatedImage]
            });
        }
        else {
            this.setState({
                mediaGalleryItems: [...curatedImage]
            });
        }
    }
    render() {
        const { data: { product: { result: product }, }, id, config, resources } = this.props;
        const mediaGalleryItems = this.state.mediaGalleryItems;
        const { className, showPaginationTooltip } = config;
        const imgSource = config.imageSource || "pageContext";
        if (!mediaGalleryItems && imgSource === "pageContext" && product) {
            this.setState({ mediaGalleryItems: [this._mapProductToImageData(product), ...config.images || []] });
        }
        const isVertical = config.thumbnailsOrientation === "vertical";
        const allowFullscreen = config.allowFullScreen || false;
        const zoomViewMode = config.imageZoom === "inline"
            ? "inline"
            : config.imageZoom === "container"
                ? "container"
                : '';
        const zoomView = allowFullscreen ? 'fullscreen' : zoomViewMode;
        const viewProps = {
            ...this.props,
            state: this.state,
            MediaGallery: {
                moduleProps: this.props,
                className: classnames(`ms-media-gallery ${isVertical ? 'vertical' : ''}`, className)
            },
            Modal: allowFullscreen ? this.imageModalSlider(zoomViewMode) : null,
            CarouselProps: {
                tag: Carousel,
                className: 'ms-media-gallery__carousel',
                items: mediaGalleryItems &&
                    mediaGalleryItems.map((item, index) => this._renderCarouselItemImageView(zoomView, item, index)),
                activeIndex: this.state.activeIndex,
                next: this.next,
                previous: this.previous,
                interval: false,
                directionTextPrev: resources.previousScreenshotFlipperText,
                directionTextNext: resources.nextScreenshotFlipperText,
                onIndicatorsClickHandler: this.goToIndex,
                showPaginationTooltip: showPaginationTooltip === true,
                handleOnExited: this.onExited,
                handleOnExiting: this.onExiting
            },
            Thumbnails: {
                ThumbnailsContainerProps: { className: 'ms-media-gallery__thumbnails-container' },
                SingleSlideCarouselComponentProps: {
                    tag: SingleSlideCarousel,
                    className: 'ms-media-gallery__thumbnails',
                    vertical: isVertical,
                    flipperPrevLabel: resources.previousScreenshotFlipperText,
                    flipperNextLabel: resources.nextScreenshotFlipperText,
                    parentId: id,
                    useTabList: true
                },
                items: mediaGalleryItems &&
                    mediaGalleryItems.map((item, index) => this._getThumbnailItem(item, index, this.state.activeIndex))
            }
        };
        return this.props.renderView(viewProps);
    }
    _renderCarouselItemImageView(zoomView, image, index) {
        if (zoomView === 'container') {
            return this._renderImageInContainerOnZoom(image, index);
        }
        else if (zoomView === 'inline') {
            return this._renderImageInlineOnZoom(image, index);
        }
        else if (zoomView === 'fullscreen') {
            return this._renderImageFullScreenOnZoom(image, index);
        }
        else {
            return React.createElement(React.Fragment, null, this._getCarouselItem(image, index));
        }
    }
    _renderImageInlineOnZoom(image, index) {
        return (React.createElement("div", { className: `ms-inline-zoom ${this.state.isImageZoomed ? 'zoomed' : ''}`, ref: divRef => this._inlineZoomDivRef.set(index, divRef), "data-scale": this.props.config.dataScale },
            React.createElement(Image, Object.assign({ className: 'ms-media-gallery__item' }, image, { gridSettings: this.props.context.request.gridSettings, imageSettings: this.props.config.galleryImageSettings || this.defaultGalleryImageSettings, loadFailureBehavior: 'default', role: 'tabpanel', onClick: this._onInlineImageClick, onMouseOver: this.state.isImageZoomed && this._inlineZoomImageOnHover || undefined, id: `${this.props.id}__carousel-item__${index}` })),
            React.createElement(Image, Object.assign({ role: 'presentation', className: 'ms-inline-zoom__zoomedImg' }, image, { onClick: this._onImageMouseOut, gridSettings: this.props.context.request.gridSettings, imageSettings: this.props.config.galleryImageSettings || this.defaultGalleryImageSettings, loadFailureBehavior: 'default', id: `${this.props.id}__zoom__${index}`, onMouseMove: this.state.isImageZoomed && inlineZoomImageOnMouseMove || undefined }))));
    }
    _inlineZoomImageOnHover(event) {
        inlineZoomImageOnHover(event, this.props.config.dataScale);
    }
    _onInlineImageClick(event) {
        if (window.innerWidth <= 768) {
            return;
        }
        inlineZoomInit(event, this.props.config.dataScale);
        this.setState({
            isImageZoomed: true
        });
    }
    _onImageMouseOut(event) {
        inlineZoomImageOnMouseOut(event);
        this.setState({
            isImageZoomed: false
        });
    }
    _onContainerZoomImageClick(event) {
        if (window.innerWidth <= 768) {
            return;
        }
        onContainerZoomInit(event);
        this.setState({
            isImageZoomed: true
        });
    }
    _onMouseOutLensContainer(event) {
        onMouseOutLensContainer(event);
        this.setState({
            isImageZoomed: false
        });
    }
    _renderImageInContainerOnZoom(image, index) {
        return (React.createElement("div", { className: 'ms-containerZoom__container' },
            React.createElement("div", { className: 'ms-containerZoom__zoom-lens', role: 'presentation', onMouseOut: this._onMouseOutLensContainer, onClick: this._onMouseOutLensContainer, onMouseMove: this.state.isImageZoomed && onMouseMoveLensContainer || undefined }),
            React.createElement(Image, Object.assign({ className: 'ms-media-gallery__item' }, image, { gridSettings: this.props.context.request.gridSettings, onClick: this._onContainerZoomImageClick, imageSettings: this.props.config.galleryImageSettings || this.defaultGalleryImageSettings, loadFailureBehavior: 'default', onMouseOver: this.state.isImageZoomed && onMouseOverImageContainer || undefined, id: `${this.props.id}__carousel-item__${index}` }))));
    }
    _renderImageFullScreenOnZoom(image, index) {
        return (React.createElement("div", { className: 'ms-fullscreen-section' },
            React.createElement(Image, Object.assign({ className: 'ms-media-gallery__item' }, image, { gridSettings: this.props.context.request.gridSettings, imageSettings: this.props.config.galleryImageSettings || this.defaultGalleryImageSettings, loadFailureBehavior: 'default', role: 'tabpanel' })),
            React.createElement("div", { className: 'ms-fullscreen-section__overlay' },
                React.createElement("a", { href: 'javascript:void(0);', title: this.props.resources.fullScreenTitleText, role: 'button', onClick: this.openModalDialog, className: 'ms-fullscreen-section__magnifying-glass-icon' }))));
    }
    _mapProductToImageData(product) {
        return {
            src: product.PrimaryImageUrl || ''
        };
    }
    _toggleModal() {
        if (this.state.modalIsOpen) {
            const parentDiv = this._inlineZoomDivRef.get(this.state.activeIndex);
            if (parentDiv && parentDiv.children && parentDiv.children.length >= 2) {
                const image = parentDiv.children[1].querySelector('img');
                if (image) {
                    image.removeAttribute('style');
                }
            }
            this.setState({
                isImageZoomed: false
            });
        }
        this.setState({
            isImageZoomed: false,
            modalIsOpen: !this.state.modalIsOpen
        });
        removeInlineZoomStyle();
    }
}
export default MediaGallery;
//# sourceMappingURL=media-gallery.js.map