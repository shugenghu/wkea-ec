{"version":3,"file":"get-valid-product-images.test.js","sourceRoot":"./src/","sources":["modules/media-gallery/__tests__/get-valid-product-images.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';\nimport { buildHydratedMockActionContext } from '@msdyn365-commerce/core';\nimport { getValidProductImages, validateProductImages } from '../utils';\n\ninterface IReturnObj {\n    open(): void;\n    send(): void;\n}\n\nconst mockImageSettings = {\n    lazyload: true,\n    viewports: {\n        xs: { w: 132, h: 28, q: 'w=132&h=28&q=60&m=6' },\n        lg: { w: 160, h: 48, q: 'w=160&h=48&q=60&m=6' }\n    }\n};\n\ndescribe('getValidProductImages', () => {\n    // @ts-ignore\n    function createMockXMLHttpRequest(): XMLHttpRequest {\n        let urlParam: string = '';\n\n        const returnObj = {\n            open: jest.fn(),\n            send: jest.fn()\n        } as IReturnObj;\n\n        const open = jest.fn().mockImplementation((method, url) => {\n            urlParam = url;\n        });\n\n        const send = jest.fn().mockImplementation(() => {\n            if (urlParam === '200' || urlParam === '201' || urlParam === '404') {\n                if (urlParam === '404') {\n                    // @ts-ignore\n                    returnObj.status = 404;\n                }\n                if (urlParam === '200') {\n                    // @ts-ignore\n                    returnObj.status = 200;\n                }\n                if (urlParam === '201') {\n                    // @ts-ignore\n                    returnObj.status = 201;\n                }\n                // @ts-ignore\n                returnObj.onload();\n            } else if (urlParam === 'throw') {\n                throw new Error('fail');\n            } else {\n                // @ts-ignore\n                returnObj.onerror();\n            }\n        });\n\n        returnObj.open = open;\n        returnObj.send = send;\n\n        // @ts-ignore\n        return returnObj;\n    }\n\n    it('Returns empty if getMediaLocationsForSelectedVariant returns empty', async () => {\n        // @ts-ignore\n        RetailActions.getMediaLocationsForSelectedVariant = jest.fn().mockResolvedValue(undefined);\n\n        const result = await getValidProductImages(0, 0, buildHydratedMockActionContext(), mockImageSettings);\n\n        expect(result).toEqual([]);\n    });\n\n    it('Returns empty if getMediaLocationsForSelectedVariant throws', async () => {\n        // @ts-ignore\n        RetailActions.getMediaLocationsForSelectedVariant = jest.fn().mockRejectedValue('FAIL');\n\n        const result = await getValidProductImages(0, 0, buildHydratedMockActionContext(), mockImageSettings);\n\n        expect(result).toEqual([]);\n    });\n\n    it('Filters returned results to make sure they actually exist', async () => {\n        // @ts-ignore\n        window.XMLHttpRequest = jest.fn(createMockXMLHttpRequest);\n\n        // @ts-ignore\n        RetailActions.getMediaLocationsForSelectedVariant = jest.fn().mockResolvedValue([\n            { Uri: '201', AltText: 'Image 1' },\n            { Uri: 'fail', AltText: 'Image 2' },\n            { Uri: '200', AltText: 'Image 3' },\n            { Uri: undefined, AltText: undefined },\n            { Uri: 'throw', AltText: 'Image 5' },\n            { Uri: '404', AltText: 'Image 6' }\n        ]);\n\n        const result = await getValidProductImages(0, 0, buildHydratedMockActionContext(), mockImageSettings);\n\n        expect(result.length).toEqual(0);\n        expect(result).toEqual([]);\n    });\n\n    it('Filters returned results to make sure they actually exist', async () => {\n        // @ts-ignore\n        window.XMLHttpRequest = jest.fn(createMockXMLHttpRequest);\n\n        const result = await validateProductImages([\n            { Uri: '201', AltText: 'Image 1' },\n            { Uri: 'fail', AltText: 'Image 2' },\n            { Uri: '200', AltText: 'Image 3' },\n            { Uri: undefined, AltText: undefined },\n            { Uri: 'throw', AltText: 'Image 5' },\n            { Uri: '404', AltText: 'Image 6' }\n        ],                                         buildHydratedMockActionContext(), mockImageSettings);\n\n        expect(result.length).toEqual(0);\n        expect(result).toEqual([]);\n    });\n});"]}