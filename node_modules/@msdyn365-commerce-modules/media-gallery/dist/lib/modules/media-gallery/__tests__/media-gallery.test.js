import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import { observable } from 'mobx';
import * as React from 'react';
import { MediaGallery } from '../../..';
import * as Utils from '../utils';
const mockData = {
    product: {
        status: 'FAILED',
        result: undefined
    },
    mediaLocations: [{
            url: 'FAILED',
        }],
};
const mockConfig = {
    imageZoom: "inline"
};
const mockConfig1 = {
    className: 'media-gallery',
    imageZoom: "container",
    imageSource: "productId",
    productId: '1234',
    images: [{ src: '201', altText: 'Image 1' },
        { src: 'fail', altText: 'Image 2' },]
};
const mockResources = {
    nextScreenshotFlipperText: 'Next',
    previousScreenshotFlipperText: 'Previous',
    fullScreenTitleText: 'fullscreen'
};
const mockContext = {
    request: {
        gridSettings: undefined
    }
};
describe('MediaGallery', () => {
    it('renders correctly when no product', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
    });
    it('loads state when product exists', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        RecordId: 10,
                        PrimaryImageUrl: 'image.png'
                    }
                }
            }, {}, mockConfig1, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)));
        await new Promise(setImmediate);
        result.update();
        const state = result.state();
        expect(state.mediaGalleryItems).toBeDefined();
        expect(state.mediaGalleryItems.length).toEqual(2);
        expect(state.mediaGalleryItems).toEqual([{ src: '201', altText: 'Image 1' },
            { src: 'fail', altText: 'Image 2' }]);
    });
    it('loads state when full view mode', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        RecordId: 10,
                        PrimaryImageUrl: 'image.png'
                    }
                }
            }, {}, {
                className: 'media-gallery',
                allowFullScreen: true
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)));
        await new Promise(setImmediate);
        result.update();
        const state = result.state();
        expect(state.mediaGalleryItems).toBeDefined();
        expect(state.mediaGalleryItems.length).toEqual(3);
        expect(state.mediaGalleryItems).toEqual(expect.arrayContaining([
            expect.objectContaining({ src: 'image_a.png', altText: 'Image A' }),
            expect.objectContaining({ src: 'image_b.png', altText: 'Image B' }),
            expect.objectContaining({ src: 'image_c.png', altText: 'Image C' })
        ]));
    });
    it('Click full image view on slider.', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        RecordId: 10,
                        PrimaryImageUrl: 'image.png'
                    }
                }
            }, {}, {
                className: 'media-gallery',
                allowFullScreen: true
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const wrapper = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)), { attachTo: document.body.firstElementChild });
        const viewProps = wrapper.childAt(0).props().props;
        const parentElement = mount(viewProps.CarouselProps.items[0]);
        expect(() => {
            parentElement.find('.ms-fullscreen-section a').simulate('click');
        }).not.toThrow();
        wrapper.update();
    });
    it('loads state when no product exists', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'FAILED',
                    result: undefined
                }
            }, {}, {
                className: 'media-gallery',
                galleryImageSettings: {}
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)));
        await new Promise(setImmediate);
        result.update();
        const state = result.state();
        expect(state.mediaGalleryItems).toEqual([]);
    });
    it('loads and updates state when product changes', async () => {
        const observeableMockData = observable({
            ...mockData,
            product: {
                status: 'FAILED',
                result: undefined
            }
        });
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps(observeableMockData, {}, {
                className: 'media-gallery',
                galleryImageSettings: {}
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)));
        await new Promise(setImmediate);
        expect(Utils.getValidProductImages).not.toBeCalled();
        const state1 = result.state();
        expect(state1.mediaGalleryItems).toEqual([]);
        observeableMockData.product = {
            status: 'SUCCESS',
            result: {
                RecordId: 10,
                PrimaryImageUrl: 'image.png'
            }
        };
        await new Promise(setImmediate);
        expect(Utils.getValidProductImages).toBeCalled();
        const state2 = result.state();
        expect(state2.mediaGalleryItems).toBeDefined();
        expect(state2.mediaGalleryItems.length).toEqual(3);
        expect(state2.mediaGalleryItems).toEqual(expect.arrayContaining([
            expect.objectContaining({ src: 'image_a.png', altText: 'Image A' }),
            expect.objectContaining({ src: 'image_b.png', altText: 'Image B' }),
            expect.objectContaining({ src: 'image_c.png', altText: 'Image C' })
        ]));
        observeableMockData.product = {
            status: 'FAILED',
            result: undefined
        };
        await new Promise(setImmediate);
        const state3 = result.state();
        expect(state3.mediaGalleryItems).toEqual([]);
    });
    it('next/previous callbacks work', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        RecordId: 10,
                        PrimaryImageUrl: 'image.png'
                    }
                }
            }, {}, {
                className: 'media-gallery',
                galleryImageSettings: {}
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)));
        await new Promise(setImmediate);
        result.update();
        const viewProps = result.childAt(0).props().props;
        const carouselProps = viewProps.CarouselProps;
        expect(result.state().activeIndex).toEqual(0);
        carouselProps.next();
        expect(result.state().activeIndex).toEqual(1);
        carouselProps.next();
        expect(result.state().activeIndex).toEqual(2);
        carouselProps.next();
        expect(result.state().activeIndex).toEqual(0);
        carouselProps.previous();
        expect(result.state().activeIndex).toEqual(2);
        carouselProps.previous();
        expect(result.state().activeIndex).toEqual(1);
        carouselProps.previous();
        expect(result.state().activeIndex).toEqual(0);
    });
    it('onExiting/onExited callbacks work', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        RecordId: 10,
                        PrimaryImageUrl: 'image.png'
                    }
                }
            }, {}, {
                className: 'media-gallery',
                galleryImageSettings: {}
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)));
        await new Promise(setImmediate);
        result.update();
        const viewProps = result.childAt(0).props().props;
        const carouselProps = viewProps.CarouselProps;
        expect(result.state().animating).toEqual(false);
        carouselProps.handleOnExiting({});
        expect(result.state().animating).toEqual(true);
        carouselProps.handleOnExited({});
        expect(result.state().animating).toEqual(false);
    });
    it('thumbnail click events work', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        RecordId: 10,
                        PrimaryImageUrl: 'image.png'
                    }
                }
            }, {}, {
                imageZoom: '',
                className: 'media-gallery',
                galleryImageSettings: {}
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)));
        await new Promise(setImmediate);
        result.update();
        const viewProps = result.childAt(0).props().props;
        const carouselItemContainerProps1 = viewProps.Thumbnails.items[0].ThumbnailItemContainerProps;
        const carouselItemContainerProps2 = viewProps.Thumbnails.items[1].ThumbnailItemContainerProps;
        const carouselItemContainerProps3 = viewProps.Thumbnails.items[2].ThumbnailItemContainerProps;
        expect(result.state().activeIndex).toEqual(0);
        carouselItemContainerProps3.onClick({ preventDefault: jest.fn() });
        expect(result.state().activeIndex).toEqual(2);
        carouselItemContainerProps2.onKeyDown({ which: 16, preventDefault: jest.fn() });
        expect(result.state().activeIndex).toEqual(2);
        carouselItemContainerProps2.onKeyDown({ which: 13, preventDefault: jest.fn() });
        expect(result.state().activeIndex).toEqual(1);
        carouselItemContainerProps1.onKeyDown({ which: 32, preventDefault: jest.fn() });
        expect(result.state().activeIndex).toEqual(0);
    });
    it('Mouse move event for image container on inline', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        RecordId: 10,
                        PrimaryImageUrl: 'image.png'
                    }
                }
            }, {}, {
                imageZoom: 'inline',
                className: 'media-gallery',
                dataScale: '1.8',
                galleryImageSettings: {}
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const wrapper = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)), { attachTo: document.body.firstElementChild });
        await new Promise(setImmediate);
        wrapper.update();
        const viewProps = wrapper.childAt(0).props().props;
        const parentElement = mount(viewProps.CarouselProps.items[0]);
        expect(() => {
            parentElement.find('img.ms-inline-zoom__zoomedImg').simulate('mousemove');
        }).not.toThrow();
        wrapper.update();
        expect(() => {
            parentElement.find('img.ms-media-gallery__item').simulate('mouseover');
        }).not.toThrow();
        wrapper.update();
        expect(() => {
            parentElement.find('img.ms-inline-zoom__zoomedImg').simulate('mouseout');
        }).not.toThrow();
        wrapper.update();
    });
    it('Mouse move event for image container on zoom', async () => {
        Utils.getValidProductImages = jest.fn().mockImplementation(args => {
            return [
                {
                    src: 'image_a.png',
                    altText: 'Image A'
                },
                {
                    src: 'image_b.png',
                    altText: 'Image B'
                },
                {
                    src: 'image_c.png',
                    altText: 'Image C'
                }
            ];
        });
        const moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        RecordId: 10,
                        PrimaryImageUrl: 'image.png'
                    }
                }
            }, {}, {
                className: 'media-gallery',
                imageZoom: 'container',
                dataScale: '1.5',
                galleryImageSettings: {}
            }, {
                ...mockContext,
                request: {
                    gridSettings: { lg: { w: 1599 } }
                }
            }),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const wrapper = mount(React.createElement(MediaGallery, Object.assign({}, moduleProps)), { attachTo: document.body.firstElementChild });
        const mediaGallery = wrapper.instance();
        mediaGallery.setState({
            isImageZoomed: true
        });
        const viewProps = wrapper.childAt(0).props().props;
        const parentElement = mount(viewProps.CarouselProps.items[0]);
        expect(() => {
            parentElement.find('.ms-containerZoom__zoom-lens').simulate('mousemove');
        }).not.toThrow();
        wrapper.update();
        expect(() => {
            parentElement.find('.ms-containerZoom__zoom-lens').simulate('mouseout');
        }).not.toThrow();
        wrapper.update();
    });
});
//# sourceMappingURL=media-gallery.test.js.map