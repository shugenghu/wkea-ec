{"version":3,"file":"media-gallery.test.js","sourceRoot":"./src/","sources":["modules/media-gallery/__tests__/media-gallery.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCodes } from '@msdyn365-commerce-modules/utilities';\nimport { ICarouselProps } from '@msdyn365-commerce/components';\nimport { buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';\nimport { AsyncResult, MediaLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { mount } from 'enzyme';\nimport { observable } from 'mobx';\nimport * as React from 'react';\nimport { imageZoom, IMediaGalleryConfig, IMediaGalleryData, IMediaGalleryProps, IMediaGalleryResources, MediaGallery } from '../../..';\nimport { IMediaGalleryState, IMediaGalleryViewProps } from '../media-gallery';\nimport { imageSource } from '../media-gallery.props.autogenerated';\nimport * as Utils from '../utils';\n\nconst mockData: IMediaGalleryData = {\n    product: {\n        status: 'FAILED',\n        result: undefined\n    } as AsyncResult<SimpleProduct>,\n    mediaLocations: [{\n        url: 'FAILED',\n    }] as unknown as AsyncResult<MediaLocation[]>,\n};\n\nconst mockConfig: IMediaGalleryConfig = {\n    imageZoom: imageZoom.inline\n};\n\nconst mockConfig1: IMediaGalleryConfig = {\n    className: 'media-gallery',\n    imageZoom: imageZoom.container,\n    imageSource: imageSource.productId,\n    productId: '1234',\n    images: [{ src: '201', altText: 'Image 1' },\n    { src: 'fail', altText: 'Image 2' },]\n};\n\nconst mockResources: IMediaGalleryResources = {\n    nextScreenshotFlipperText: 'Next',\n    previousScreenshotFlipperText: 'Previous',\n    fullScreenTitleText: 'fullscreen'\n};\n\nconst mockContext: ICoreContext = {\n    // @ts-ignore impartial mock\n    request: {\n        // @ts-ignore impartial mock\n        gridSettings: undefined\n    }\n};\n\ndescribe('MediaGallery', () => {\n    it('renders correctly when no product', () => {\n        const moduleProps = {\n            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<MediaGallery {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IMediaGalleryViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n    });\n    it('loads state when product exists', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            RecordId: 10,\n                            PrimaryImageUrl: 'image.png'\n                        }\n                    }\n                },\n                {},\n                mockConfig1,\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<MediaGallery {...moduleProps} />);\n\n        await new Promise(setImmediate);\n\n        result.update();\n\n        const state: IMediaGalleryState = result.state() as IMediaGalleryState;\n\n        expect(state.mediaGalleryItems).toBeDefined();\n        expect(state.mediaGalleryItems!.length).toEqual(2);\n        expect(state.mediaGalleryItems).toEqual(\n            [{ src: '201', altText: 'Image 1' },\n            { src: 'fail', altText: 'Image 2' }]);\n    });\n\n    it('loads state when full view mode', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            RecordId: 10,\n                            PrimaryImageUrl: 'image.png'\n                        }\n                    }\n                },\n                {},\n                {\n                    className: 'media-gallery',\n                    allowFullScreen:true\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<MediaGallery {...moduleProps} />);\n\n        await new Promise(setImmediate);\n\n        result.update();\n\n        const state: IMediaGalleryState = result.state() as IMediaGalleryState;\n\n        expect(state.mediaGalleryItems).toBeDefined();\n        expect(state.mediaGalleryItems!.length).toEqual(3);\n        expect(state.mediaGalleryItems).toEqual(expect.arrayContaining([\n            expect.objectContaining({ src: 'image_a.png', altText: 'Image A' }),\n            expect.objectContaining({ src: 'image_b.png', altText: 'Image B' }),\n            expect.objectContaining({ src: 'image_c.png', altText: 'Image C' })\n        ]));\n    });\n    it('Click full image view on slider.', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            RecordId: 10,\n                            PrimaryImageUrl: 'image.png'\n                        }\n                    }\n                },\n                {},\n                {\n                    className: 'media-gallery',\n                    allowFullScreen:true\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const wrapper = mount(\n            <MediaGallery {...moduleProps} />,\n            { attachTo: document.body.firstElementChild as HTMLElement }\n        );\n        const viewProps = wrapper.childAt(0).props().props;\n        const parentElement = mount(viewProps.CarouselProps.items[0] as React.ReactElement);\n        expect(() => {\n            parentElement.find('.ms-fullscreen-section a').simulate('click');\n        }).not.toThrow();\n        wrapper.update();\n    });\n\n    it('loads state when no product exists', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'FAILED',\n                        result: undefined\n                    }\n                },\n                {},\n                {\n                    className: 'media-gallery',\n                    galleryImageSettings: {}\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<MediaGallery {...moduleProps} />);\n\n        await new Promise(setImmediate);\n\n        result.update();\n\n        const state: IMediaGalleryState = result.state() as IMediaGalleryState;\n\n        expect(state.mediaGalleryItems).toEqual([]);\n    });\n\n    it('loads and updates state when product changes', async () => {\n        const observeableMockData = observable({\n            ...mockData,\n            product: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<SimpleProduct>\n        }) as IMediaGalleryData;\n\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n\n        const moduleProps = {\n            ...buildMockModuleProps(\n                observeableMockData,\n                {},\n                {\n                    className: 'media-gallery',\n                    galleryImageSettings: {}\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<MediaGallery {...moduleProps} />);\n\n        await new Promise(setImmediate);\n\n        // No product, shouldn't try to get images\n        expect(Utils.getValidProductImages).not.toBeCalled();\n\n        const state1: IMediaGalleryState = result.state() as IMediaGalleryState;\n        expect(state1.mediaGalleryItems).toEqual([]);\n\n        observeableMockData.product = {\n            status: 'SUCCESS',\n            result: {\n                RecordId: 10,\n                PrimaryImageUrl: 'image.png'\n            }\n        } as AsyncResult<SimpleProduct>;\n\n        await new Promise(setImmediate);\n\n        expect(Utils.getValidProductImages).toBeCalled();\n\n        const state2: IMediaGalleryState = result.state() as IMediaGalleryState;\n        expect(state2.mediaGalleryItems).toBeDefined();\n        expect(state2.mediaGalleryItems!.length).toEqual(3);\n        expect(state2.mediaGalleryItems).toEqual(expect.arrayContaining([\n            expect.objectContaining({ src: 'image_a.png', altText: 'Image A' }),\n            expect.objectContaining({ src: 'image_b.png', altText: 'Image B' }),\n            expect.objectContaining({ src: 'image_c.png', altText: 'Image C' })\n        ]));\n\n        observeableMockData.product = {\n            status: 'FAILED',\n            result: undefined\n        } as AsyncResult<SimpleProduct>;\n\n        await new Promise(setImmediate);\n\n        const state3: IMediaGalleryState = result.state() as IMediaGalleryState;\n        expect(state3.mediaGalleryItems).toEqual([]);\n    });\n\n    it('next/previous callbacks work', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            RecordId: 10,\n                            PrimaryImageUrl: 'image.png'\n                        }\n                    }\n                },\n                {},\n                {\n                    className: 'media-gallery',\n                    galleryImageSettings: {}\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<MediaGallery {...moduleProps} />);\n\n        await new Promise(setImmediate);\n\n        result.update();\n\n        const viewProps = result.childAt(0).props().props as IMediaGalleryViewProps;\n\n        const carouselProps: ICarouselProps = viewProps.CarouselProps as ICarouselProps;\n\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(0);\n        carouselProps.next();\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(1);\n        carouselProps.next();\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(2);\n        carouselProps.next();\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(0);\n        carouselProps.previous();\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(2);\n        carouselProps.previous();\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(1);\n        carouselProps.previous();\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(0);\n    });\n\n    it('onExiting/onExited callbacks work', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            RecordId: 10,\n                            PrimaryImageUrl: 'image.png'\n                        }\n                    }\n                },\n                {},\n                {\n                    className: 'media-gallery',\n                    galleryImageSettings: {}\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<MediaGallery {...moduleProps} />);\n\n        await new Promise(setImmediate);\n\n        result.update();\n\n        const viewProps = result.childAt(0).props().props as IMediaGalleryViewProps;\n\n        const carouselProps: ICarouselProps = viewProps.CarouselProps as ICarouselProps;\n\n        // @ts-ignore\n        expect(result.state().animating).toEqual(false);\n\n        // @ts-ignore\n        carouselProps.handleOnExiting({});\n\n        // @ts-ignore\n        expect(result.state().animating).toEqual(true);\n\n        // @ts-ignore\n        carouselProps.handleOnExited({});\n\n        // @ts-ignore\n        expect(result.state().animating).toEqual(false);\n    });\n\n    it('thumbnail click events work', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            RecordId: 10,\n                            PrimaryImageUrl: 'image.png'\n                        }\n                    }\n                },\n                {},\n                {\n                    imageZoom: '',\n                    className: 'media-gallery',\n                    galleryImageSettings: {}\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<MediaGallery {...moduleProps} />);\n\n        await new Promise(setImmediate);\n\n        result.update();\n\n        const viewProps = result.childAt(0).props().props as IMediaGalleryViewProps;\n\n        const carouselItemContainerProps1 = viewProps.Thumbnails.items![0].ThumbnailItemContainerProps;\n        const carouselItemContainerProps2 = viewProps.Thumbnails.items![1].ThumbnailItemContainerProps;\n        const carouselItemContainerProps3 = viewProps.Thumbnails.items![2].ThumbnailItemContainerProps;\n\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(0);\n\n        // Click on item 3 will set index to 2\n        carouselItemContainerProps3.onClick({ preventDefault: jest.fn() });\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(2);\n\n        // Shift key down on item 2 won't set index\n        carouselItemContainerProps2.onKeyDown({ which: KeyCodes.Shift, preventDefault: jest.fn() });\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(2);\n\n        // Enter key down on item 2 will set index\n        carouselItemContainerProps2.onKeyDown({ which: KeyCodes.Enter, preventDefault: jest.fn() });\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(1);\n\n        // Space key down on item 1 will set index\n        carouselItemContainerProps1.onKeyDown({ which: KeyCodes.Space, preventDefault: jest.fn() });\n        // @ts-ignore\n        expect(result.state().activeIndex).toEqual(0);\n    });\n    it('Mouse move event for image container on inline', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            RecordId: 10,\n                            PrimaryImageUrl: 'image.png'\n                        }\n                    }\n                },\n                {},\n                {\n                    imageZoom: 'inline',\n                    className: 'media-gallery',\n                    dataScale: '1.8',\n                    galleryImageSettings: {}\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const wrapper = mount(\n            <MediaGallery {...moduleProps} />,\n            { attachTo: document.body.firstElementChild as HTMLElement }\n        );\n        await new Promise(setImmediate);\n        wrapper.update();\n        const viewProps = wrapper.childAt(0).props().props;\n        const parentElement = mount(viewProps.CarouselProps.items[0] as React.ReactElement);\n\n        expect(() => {\n            parentElement.find('img.ms-inline-zoom__zoomedImg').simulate('mousemove');\n        }).not.toThrow();\n        wrapper.update();\n\n        expect(() => {\n            parentElement.find('img.ms-media-gallery__item').simulate('mouseover');\n        }).not.toThrow();\n        wrapper.update();\n\n        expect(() => {\n            parentElement.find('img.ms-inline-zoom__zoomedImg').simulate('mouseout');\n        }).not.toThrow();\n        wrapper.update();\n    });\n    it('Mouse move event for image container on zoom', async () => {\n        // @ts-ignore\n        Utils.getValidProductImages = jest.fn().mockImplementation(args => {\n            return [\n                {\n                    src: 'image_a.png',\n                    altText: 'Image A'\n                },\n                {\n                    src: 'image_b.png',\n                    altText: 'Image B'\n                },\n                {\n                    src: 'image_c.png',\n                    altText: 'Image C'\n                }\n            ];\n        });\n        const moduleProps = {\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            RecordId: 10,\n                            PrimaryImageUrl: 'image.png'\n                        }\n                    }\n                },\n                {},\n                {\n                    className: 'media-gallery',\n                    imageZoom: 'container',\n                    dataScale: '1.5',\n                    galleryImageSettings: {}\n                },\n                // @ts-ignore impartial mock\n                {\n                    ...mockContext,\n                    // @ts-ignore impartial mock\n                    request: {\n                        gridSettings: { lg: { w: 1599 } }\n                    }\n\n                }) as IMediaGalleryProps<IMediaGalleryData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const wrapper = mount(\n            <MediaGallery {...moduleProps} />,\n            { attachTo: document.body.firstElementChild as HTMLElement }\n        );\n        const mediaGallery = wrapper.instance() as MediaGallery;\n        mediaGallery.setState({\n            isImageZoomed: true\n        });\n        const viewProps = wrapper.childAt(0).props().props;\n        const parentElement = mount(viewProps.CarouselProps.items[0] as React.ReactElement);\n\n        expect(() => {\n            parentElement.find('.ms-containerZoom__zoom-lens').simulate('mousemove');\n        }).not.toThrow();\n        wrapper.update();\n\n        expect(() => {\n            parentElement.find('.ms-containerZoom__zoom-lens').simulate('mouseout');\n        }).not.toThrow();\n        wrapper.update();\n    });\n});\n"]}