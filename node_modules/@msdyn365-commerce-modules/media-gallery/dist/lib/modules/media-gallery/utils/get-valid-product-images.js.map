{"version":3,"file":"get-valid-product-images.js","sourceRoot":"./src/","sources":["modules/media-gallery/utils/get-valid-product-images.ts"],"names":[],"mappings":"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","sourcesContent":["import { getMediaLocationsForSelectedVariant, MediaLocationsForSelectedVariantInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { IActionContext, IImageData, IImageSettings } from '@msdyn365-commerce/core';\nimport { MediaLocation } from '@msdyn365-commerce/retail-proxy';\n\nexport async function getValidProductImages(productId: number, channelId: number, actionContext: IActionContext, imageSettings: IImageSettings): Promise<IImageData[]> {\n    const actionInput = new MediaLocationsForSelectedVariantInput(\n        productId,\n        channelId,\n    );\n\n    return getMediaLocationsForSelectedVariant(actionInput, actionContext)\n        .then(mediaLocations => {\n            if (mediaLocations) {\n                return Promise.all(mediaLocations.map((mediaLocation) => validateMediaLocaionAsync(mediaLocation, imageSettings)))\n                    .then(pairs => {\n                        return pairs.filter(pair => pair[1]).map(pair => pair[0]);\n                    });\n            }\n\n            return [];\n        }).catch(error => {\n            actionContext.telemetry.exception(error);\n            actionContext.telemetry.debug('Unable to get Media Locations for Selected Variant');\n            return [];\n        });\n}\n\nexport async function validateProductImages(mediaLocations: MediaLocation[], actionContext: IActionContext, imageSettings: IImageSettings): Promise<IImageData[]> {\n    return Promise.all(mediaLocations.map((mediaLocation) => validateMediaLocaionAsync(mediaLocation, imageSettings)))\n        .then(pairs => {\n            return pairs.filter(pair => pair[1]).map(pair => pair[0]);\n        }).catch(error => {\n            actionContext.telemetry.exception(error);\n            actionContext.telemetry.debug('Unable to validate prodcut images');\n            return [];\n        });\n}\n\nasync function validateMediaLocaionAsync(mediaLocation: MediaLocation, imageSettings: IImageSettings): Promise<[IImageData, boolean]> {\n    const imageData = {\n        src: mediaLocation.Uri || '',\n        altText: mediaLocation.AltText || ''\n    };\n\n    const imageSettingsVal = ((imageSettings.viewports.lg!.q!).replace(/['\"]+/g, ''));\n\n    if (imageData.src === '') {\n        return [imageData, false];\n    }\n\n    const imageConcatVal = `${imageData.src}` + `&` + `${imageSettingsVal}`;\n\n    return new Promise<[IImageData, boolean]>((resolve) => {\n        try {\n            const http = new XMLHttpRequest();\n            http.open('HEAD', imageConcatVal, true);\n\n            http.onload = () => {\n                resolve([imageData, http.status === 200 || http.status === 201]);\n            };\n\n            http.onerror = () => {\n                resolve([imageData, false]);\n            };\n\n            http.send();\n        } catch (e) {\n            resolve([imageData, false]);\n        }\n    });\n}\n"]}