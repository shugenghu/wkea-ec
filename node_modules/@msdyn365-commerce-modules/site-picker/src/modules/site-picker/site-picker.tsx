/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { IModuleProps, INodeProps, KeyCodes, NodeTag } from '@msdyn365-commerce-modules/utilities';
import { IImageSettings, Image } from '@msdyn365-commerce/core';
import classnames from 'classnames';
import React from 'react';
import { ISitePickerConfig,ISitePickerProps } from './site-picker.props.autogenerated';

export interface ISitePickerViewProps extends ISitePickerProps<ISitePickerConfig> {
    SitePicker:IModuleProps;
    SitePickerMenu:INodeProps;
    SitePickerMenuSpan:INodeProps;
    SitePickerMenuList:INodeProps;
    SitePickerMenuListItem:INodeProps;
    SitePickerMenuListItemArray:React.ReactNode[] | undefined;
    siteOptionsState:boolean;
    renderSiteOptions():void;
    resetSiteOptionsState():void;
}
interface ISitePickerState {
    expandSiteOptions: boolean;
}

/**
 *
 * SitePicker component
 * @extends {React.PureComponent<ISitePickerProps<ISitePickerConfig>>}
 */
class SitePicker extends React.PureComponent<ISitePickerProps<ISitePickerConfig>,ISitePickerState> {
    private _cookieName: string = '_msdyn365___site_';
    private _cookieExpirationInSeconds: number = 5184000;
    private _sitePickerMenuNode: React.RefObject<HTMLUListElement>;
    private _sitePickerMenuButton: React.RefObject<HTMLButtonElement>;

    public constructor(props:ISitePickerViewProps) {
        super(props);
        this._handleChange = this._handleChange.bind(this);
        this._sitePickerMenuNode = React.createRef();
        this._sitePickerMenuButton = React.createRef();
        this._renderSiteOptions=this._renderSiteOptions.bind(this);
        this._resetSiteOptionsState=this._resetSiteOptionsState.bind(this);
        this._escFunction=this._escFunction.bind(this);
        this._handleOutsideClick=this._handleOutsideClick.bind(this);
        this.state= {
            expandSiteOptions:false
        };
    }
    public componentDidMount(): void {
        document?.addEventListener('keydown', (this._escFunction as unknown) as EventListener, false);
        document?.body?.addEventListener('mousedown',  this._handleOutsideClick);
    }
    public componentWillUnmount(): void {
        document?.removeEventListener('keydown', (this._escFunction as unknown) as EventListener, false);
        document?.body?.removeEventListener('mousedown', this._handleOutsideClick, false);
    }
    public render(): JSX.Element | null {
        const viewProps: ISitePickerViewProps = {
                ...this.props as ISitePickerProps<ISitePickerConfig>,
                SitePicker:{
                    moduleProps: this.props,
                    className: classnames('ms-site-picker',this.props.config.className),
                    tag:'div'
                },
                SitePickerMenu:{
                    tag: 'button' as NodeTag,
                className: 'ms-site-picker__button',
                'aria-label': this.props.config.heading?.text,
                'aria-expanded' : this.state.expandSiteOptions ? true : false,
                onClick:this.props,
                ref :this._sitePickerMenuButton
                },
                SitePickerMenuSpan:{
                    className:'ms-site-picker__span',
                    tag:'span'
                },
                SitePickerMenuList: {
                    className:'ms-site-picker__list',
                    role:'menu',
                    tag:'ul',
                    ref:this._sitePickerMenuNode
                },
                SitePickerMenuListItem: {
                    className:'ms-site-picker__list__item',
                    role:'presentation',
                    tag:'li',
                },
                SitePickerMenuListItemArray:this._renderSitePickerImage(),
                renderSiteOptions:this._renderSiteOptions,
                resetSiteOptionsState:this._resetSiteOptionsState,
                siteOptionsState:this.state.expandSiteOptions,
                };
        return this.props.renderView(viewProps);
    }
    private _renderSiteOptions():void {
        const expandSiteOptionsState=this.state.expandSiteOptions;
        this.setState({
            expandSiteOptions: !expandSiteOptionsState
          });
    }
    private _resetSiteOptionsState():void {
        this.setState({
            expandSiteOptions: false
          });
    }
    // tslint:disable-next-line: no-any
    private _escFunction = (event: any) => {
        const key = event.keyCode;
        if(this.state.expandSiteOptions) {
            switch (key) {
                case KeyCodes.Escape: {
                    setTimeout(() => {
                        const nextFocus = document && document.activeElement;
                        if ((this._sitePickerMenuButton?.current?.contains(nextFocus) || this._sitePickerMenuNode?.current?.contains(nextFocus))) {
                            this._resetSiteOptionsState();
                            this._sitePickerMenuButton?.current?.focus();
                        }
                    },         50);
                    break;
                }
                case KeyCodes.Tab: {
                    setTimeout(() => {
                    const nextFocus = document && document.activeElement;
                    if ((!this._sitePickerMenuButton?.current?.contains(nextFocus) && !this._sitePickerMenuNode?.current?.contains(nextFocus))) {
                        this._resetSiteOptionsState();
                    }
                },             50);
                    break;
                }
                default:
                    return;
            }
        }
    }

    // tslint:disable-next-line: no-any
    private _handleOutsideClick = (event:any) => {
        if((this._sitePickerMenuButton.current?.contains(event.target) && this.state.expandSiteOptions) ||
            (this._sitePickerMenuNode.current?.contains(event.target) && this.state.expandSiteOptions)) {
        return;
        } else {
            this._resetSiteOptionsState();
        }
    };
    private _handleChange(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>): void {
       e.preventDefault();
       if(e.currentTarget.href && e.currentTarget.href.length > 0 && window) {
           if (this.props.context.request.cookies.isConsentGiven()) {
            const cookieConfig =  {maxAge:this._cookieExpirationInSeconds};
            this.props.context.request.cookies.set(this._cookieName,e.currentTarget.href,cookieConfig);
           }
           window.location.assign(e.currentTarget.href);
       }
    }
    private  _renderSitePickerImage():React.ReactNode[] | undefined {
        const defaultImageSettings: IImageSettings = {
            viewports: {
                xs: { q: `w=48&h=48&m=6`, w: 0, h: 0 },
                lg: { q: `w=48&h=48&m=6`, w: 0, h: 0 },
                xl: { q: `w=48&h=48&m=6`, w: 0, h: 0 }
            },
            lazyload: true
        };
        const siteOptions=this.props.config.siteOptions && this.props.config.siteOptions ;
        return siteOptions && siteOptions.map((item, index) => {
            const image = item?.siteImage;
            const imageProps = {
            gridSettings: this.props.context.request.gridSettings!,
            imageSettings: image?.imageSettings || defaultImageSettings
        };
            return (
        <a
            key={index}
            className='ms-site-picker__list__item__link'
            tabIndex={0}
            href={item?.siteRedirectUrl?.destinationUrl}
            aria-label={item?.siteName}
            onClick={this._handleChange}
            role='menuitem'
        >
            <span className='ms-site-picker__list__item__text'>
                {item?.siteName}
            </span>
            <Image
                className='ms-site-picker__list__item__img'

                key={index}
                src={image?.src || ''}
                gridSettings={imageProps.gridSettings}
                imageSettings={imageProps.imageSettings}
                altText={image?.altText}
                loadFailureBehavior='hide'
            />
        </a>
        );
        }
        );
    }
}

export default SitePicker;