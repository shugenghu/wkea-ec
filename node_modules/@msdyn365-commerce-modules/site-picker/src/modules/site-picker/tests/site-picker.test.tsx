/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildMockRequest, IRequestContext } from '@msdyn365-commerce/core';
import { buildMockModuleProps} from '@msdyn365-commerce/core-internal';
/// <reference types="jest" />
import React from 'react';
import * as renderer from 'react-test-renderer';
import SitePicker, { ISitePickerViewProps } from '../site-picker';
import {
  HeadingTag,
  ISitePickerConfig,
  ISitePickerProps,
} from '../site-picker.props.autogenerated';

const mockConfig: ISitePickerConfig = {
  className: 'Mock-className',
  heading: {
    text: 'Site Picker',
    tag: HeadingTag.h2
  },
};

const mockActions = {};
const mockFn  = jest.fn();

describe('SitePicker', () => {
  const mockRequest: IRequestContext = buildMockRequest();
   // @ts-ignore
  const mockContext: ICoreContext = {
    requestContext: mockRequest,
    app: {
      config: {
        siteCookieName: '_msdyn365___site_'
      }
    }
};
  const  mockState=false;
  let mockProps: ISitePickerViewProps;
  let moduleProps: ISitePickerProps<ISitePickerConfig>;
  beforeAll(() => {
     moduleProps = buildMockModuleProps({},mockActions, mockConfig) as ISitePickerProps<ISitePickerConfig>;
     mockProps  = {
      ...moduleProps,
      SitePicker: {
            moduleProps:moduleProps,
            className: 'ms-site-picker',
            tag:'div'
            },
            SitePickerMenu: {
            className: 'ms-site-picker__button',
            tag:'button'
      },
      SitePickerMenuSpan:{
        className:'ms-site-picker__span',
        tag:'span'
    },
    SitePickerMenuList: {
        className:'ms-site-picker__list',
        role:'menu',
        tag:'ul'
    },
    SitePickerMenuListItem: {
        className:'ms-site-picker__list__item',
        role:'menu',
        tag:'li',
    },
    renderSiteOptions:mockFn,
    resetSiteOptionsState:mockFn,
    SitePickerMenuListItemArray:[],
    siteOptionsState:mockState
      };
  });
  it('renders correctly', () => {
    const component: renderer.ReactTestRenderer = renderer.create(
    <SitePicker {...mockProps} />);
    expect(mockProps).toBeDefined();
    expect(mockProps).toMatchSnapshot();
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
});
