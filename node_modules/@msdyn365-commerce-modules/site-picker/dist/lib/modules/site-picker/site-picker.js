import { Image } from '@msdyn365-commerce/core';
import classnames from 'classnames';
import React from 'react';
class SitePicker extends React.PureComponent {
    constructor(props) {
        super(props);
        this._cookieName = '_msdyn365___site_';
        this._cookieExpirationInSeconds = 5184000;
        this._escFunction = (event) => {
            const key = event.keyCode;
            if (this.state.expandSiteOptions) {
                switch (key) {
                    case 27: {
                        setTimeout(() => {
                            const nextFocus = document && document.activeElement;
                            if ((this._sitePickerMenuButton?.current?.contains(nextFocus) || this._sitePickerMenuNode?.current?.contains(nextFocus))) {
                                this._resetSiteOptionsState();
                                this._sitePickerMenuButton?.current?.focus();
                            }
                        }, 50);
                        break;
                    }
                    case 9: {
                        setTimeout(() => {
                            const nextFocus = document && document.activeElement;
                            if ((!this._sitePickerMenuButton?.current?.contains(nextFocus) && !this._sitePickerMenuNode?.current?.contains(nextFocus))) {
                                this._resetSiteOptionsState();
                            }
                        }, 50);
                        break;
                    }
                    default:
                        return;
                }
            }
        };
        this._handleOutsideClick = (event) => {
            if ((this._sitePickerMenuButton.current?.contains(event.target) && this.state.expandSiteOptions) ||
                (this._sitePickerMenuNode.current?.contains(event.target) && this.state.expandSiteOptions)) {
                return;
            }
            else {
                this._resetSiteOptionsState();
            }
        };
        this._handleChange = this._handleChange.bind(this);
        this._sitePickerMenuNode = React.createRef();
        this._sitePickerMenuButton = React.createRef();
        this._renderSiteOptions = this._renderSiteOptions.bind(this);
        this._resetSiteOptionsState = this._resetSiteOptionsState.bind(this);
        this._escFunction = this._escFunction.bind(this);
        this._handleOutsideClick = this._handleOutsideClick.bind(this);
        this.state = {
            expandSiteOptions: false
        };
    }
    componentDidMount() {
        document?.addEventListener('keydown', this._escFunction, false);
        document?.body?.addEventListener('mousedown', this._handleOutsideClick);
    }
    componentWillUnmount() {
        document?.removeEventListener('keydown', this._escFunction, false);
        document?.body?.removeEventListener('mousedown', this._handleOutsideClick, false);
    }
    render() {
        const viewProps = {
            ...this.props,
            SitePicker: {
                moduleProps: this.props,
                className: classnames('ms-site-picker', this.props.config.className),
                tag: 'div'
            },
            SitePickerMenu: {
                tag: 'button',
                className: 'ms-site-picker__button',
                'aria-label': this.props.config.heading?.text,
                'aria-expanded': this.state.expandSiteOptions ? true : false,
                onClick: this.props,
                ref: this._sitePickerMenuButton
            },
            SitePickerMenuSpan: {
                className: 'ms-site-picker__span',
                tag: 'span'
            },
            SitePickerMenuList: {
                className: 'ms-site-picker__list',
                role: 'menu',
                tag: 'ul',
                ref: this._sitePickerMenuNode
            },
            SitePickerMenuListItem: {
                className: 'ms-site-picker__list__item',
                role: 'presentation',
                tag: 'li',
            },
            SitePickerMenuListItemArray: this._renderSitePickerImage(),
            renderSiteOptions: this._renderSiteOptions,
            resetSiteOptionsState: this._resetSiteOptionsState,
            siteOptionsState: this.state.expandSiteOptions,
        };
        return this.props.renderView(viewProps);
    }
    _renderSiteOptions() {
        const expandSiteOptionsState = this.state.expandSiteOptions;
        this.setState({
            expandSiteOptions: !expandSiteOptionsState
        });
    }
    _resetSiteOptionsState() {
        this.setState({
            expandSiteOptions: false
        });
    }
    _handleChange(e) {
        e.preventDefault();
        if (e.currentTarget.href && e.currentTarget.href.length > 0 && window) {
            if (this.props.context.request.cookies.isConsentGiven()) {
                const cookieConfig = { maxAge: this._cookieExpirationInSeconds };
                this.props.context.request.cookies.set(this._cookieName, e.currentTarget.href, cookieConfig);
            }
            window.location.assign(e.currentTarget.href);
        }
    }
    _renderSitePickerImage() {
        const defaultImageSettings = {
            viewports: {
                xs: { q: `w=48&h=48&m=6`, w: 0, h: 0 },
                lg: { q: `w=48&h=48&m=6`, w: 0, h: 0 },
                xl: { q: `w=48&h=48&m=6`, w: 0, h: 0 }
            },
            lazyload: true
        };
        const siteOptions = this.props.config.siteOptions && this.props.config.siteOptions;
        return siteOptions && siteOptions.map((item, index) => {
            const image = item?.siteImage;
            const imageProps = {
                gridSettings: this.props.context.request.gridSettings,
                imageSettings: image?.imageSettings || defaultImageSettings
            };
            return (React.createElement("a", { key: index, className: 'ms-site-picker__list__item__link', tabIndex: 0, href: item?.siteRedirectUrl?.destinationUrl, "aria-label": item?.siteName, onClick: this._handleChange, role: 'menuitem' },
                React.createElement("span", { className: 'ms-site-picker__list__item__text' }, item?.siteName),
                React.createElement(Image, { className: 'ms-site-picker__list__item__img', key: index, src: image?.src || '', gridSettings: imageProps.gridSettings, imageSettings: imageProps.imageSettings, altText: image?.altText, loadFailureBehavior: 'hide' })));
        });
    }
}
export default SitePicker;
//# sourceMappingURL=site-picker.js.map