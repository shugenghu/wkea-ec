import { buildMockRequest } from '@msdyn365-commerce/core';
import { buildMockModuleProps } from '@msdyn365-commerce/core-internal';
import React from 'react';
import * as renderer from 'react-test-renderer';
import SitePicker from '../site-picker';
const mockConfig = {
    className: 'Mock-className',
    heading: {
        text: 'Site Picker',
        tag: "h2"
    },
};
const mockActions = {};
const mockFn = jest.fn();
describe('SitePicker', () => {
    const mockRequest = buildMockRequest();
    const mockContext = {
        requestContext: mockRequest,
        app: {
            config: {
                siteCookieName: '_msdyn365___site_'
            }
        }
    };
    const mockState = false;
    let mockProps;
    let moduleProps;
    beforeAll(() => {
        moduleProps = buildMockModuleProps({}, mockActions, mockConfig);
        mockProps = {
            ...moduleProps,
            SitePicker: {
                moduleProps: moduleProps,
                className: 'ms-site-picker',
                tag: 'div'
            },
            SitePickerMenu: {
                className: 'ms-site-picker__button',
                tag: 'button'
            },
            SitePickerMenuSpan: {
                className: 'ms-site-picker__span',
                tag: 'span'
            },
            SitePickerMenuList: {
                className: 'ms-site-picker__list',
                role: 'menu',
                tag: 'ul'
            },
            SitePickerMenuListItem: {
                className: 'ms-site-picker__list__item',
                role: 'menu',
                tag: 'li',
            },
            renderSiteOptions: mockFn,
            resetSiteOptionsState: mockFn,
            SitePickerMenuListItemArray: [],
            siteOptionsState: mockState
        };
    });
    it('renders correctly', () => {
        const component = renderer.create(React.createElement(SitePicker, Object.assign({}, mockProps)));
        expect(mockProps).toBeDefined();
        expect(mockProps).toMatchSnapshot();
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
});
//# sourceMappingURL=site-picker.test.js.map