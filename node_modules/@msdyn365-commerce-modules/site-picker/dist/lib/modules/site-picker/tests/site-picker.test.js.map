{"version":3,"file":"site-picker.test.js","sourceRoot":"./src/","sources":["modules/site-picker/tests/site-picker.test.tsx"],"names":[],"mappings":"AAKA,OAAO,EAAE,gBAAgB,EAAmB,MAAM,yBAAyB,CAAC;AAC5E,OAAO,EAAE,oBAAoB,EAAC,MAAM,kCAAkC,CAAC;AAEvE,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,UAAoC,MAAM,gBAAgB,CAAC;AAOlE,MAAM,UAAU,GAAsB;IACpC,SAAS,EAAE,gBAAgB;IAC3B,OAAO,EAAE;QACP,IAAI,EAAE,aAAa;QACnB,GAAG,MAAe;KACnB;CACF,CAAC;AAEF,MAAM,WAAW,GAAG,EAAE,CAAC;AACvB,MAAM,MAAM,GAAI,IAAI,CAAC,EAAE,EAAE,CAAC;AAE1B,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,MAAM,WAAW,GAAoB,gBAAgB,EAAE,CAAC;IAExD,MAAM,WAAW,GAAiB;QAChC,cAAc,EAAE,WAAW;QAC3B,GAAG,EAAE;YACH,MAAM,EAAE;gBACN,cAAc,EAAE,mBAAmB;aACpC;SACF;KACJ,CAAC;IACA,MAAO,SAAS,GAAC,KAAK,CAAC;IACvB,IAAI,SAA+B,CAAC;IACpC,IAAI,WAAgD,CAAC;IACrD,SAAS,CAAC,GAAG,EAAE;QACZ,WAAW,GAAG,oBAAoB,CAAC,EAAE,EAAC,WAAW,EAAE,UAAU,CAAwC,CAAC;QACtG,SAAS,GAAI;YACZ,GAAG,WAAW;YACd,UAAU,EAAE;gBACN,WAAW,EAAC,WAAW;gBACvB,SAAS,EAAE,gBAAgB;gBAC3B,GAAG,EAAC,KAAK;aACR;YACD,cAAc,EAAE;gBAChB,SAAS,EAAE,wBAAwB;gBACnC,GAAG,EAAC,QAAQ;aACjB;YACD,kBAAkB,EAAC;gBACjB,SAAS,EAAC,sBAAsB;gBAChC,GAAG,EAAC,MAAM;aACb;YACD,kBAAkB,EAAE;gBAChB,SAAS,EAAC,sBAAsB;gBAChC,IAAI,EAAC,MAAM;gBACX,GAAG,EAAC,IAAI;aACX;YACD,sBAAsB,EAAE;gBACpB,SAAS,EAAC,4BAA4B;gBACtC,IAAI,EAAC,MAAM;gBACX,GAAG,EAAC,IAAI;aACX;YACD,iBAAiB,EAAC,MAAM;YACxB,qBAAqB,EAAC,MAAM;YAC5B,2BAA2B,EAAC,EAAE;YAC9B,gBAAgB,EAAC,SAAS;SACvB,CAAC;IACN,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,SAAS,GAA+B,QAAQ,CAAC,MAAM,CAC7D,oBAAC,UAAU,oBAAK,SAAS,EAAI,CAAC,CAAC;QAC/B,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;QACpC,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { buildMockRequest, IRequestContext } from '@msdyn365-commerce/core';\nimport { buildMockModuleProps} from '@msdyn365-commerce/core-internal';\n/// <reference types=\"jest\" />\nimport React from 'react';\nimport * as renderer from 'react-test-renderer';\nimport SitePicker, { ISitePickerViewProps } from '../site-picker';\nimport {\n  HeadingTag,\n  ISitePickerConfig,\n  ISitePickerProps,\n} from '../site-picker.props.autogenerated';\n\nconst mockConfig: ISitePickerConfig = {\n  className: 'Mock-className',\n  heading: {\n    text: 'Site Picker',\n    tag: HeadingTag.h2\n  },\n};\n\nconst mockActions = {};\nconst mockFn  = jest.fn();\n\ndescribe('SitePicker', () => {\n  const mockRequest: IRequestContext = buildMockRequest();\n   // @ts-ignore\n  const mockContext: ICoreContext = {\n    requestContext: mockRequest,\n    app: {\n      config: {\n        siteCookieName: '_msdyn365___site_'\n      }\n    }\n};\n  const  mockState=false;\n  let mockProps: ISitePickerViewProps;\n  let moduleProps: ISitePickerProps<ISitePickerConfig>;\n  beforeAll(() => {\n     moduleProps = buildMockModuleProps({},mockActions, mockConfig) as ISitePickerProps<ISitePickerConfig>;\n     mockProps  = {\n      ...moduleProps,\n      SitePicker: {\n            moduleProps:moduleProps,\n            className: 'ms-site-picker',\n            tag:'div'\n            },\n            SitePickerMenu: {\n            className: 'ms-site-picker__button',\n            tag:'button'\n      },\n      SitePickerMenuSpan:{\n        className:'ms-site-picker__span',\n        tag:'span'\n    },\n    SitePickerMenuList: {\n        className:'ms-site-picker__list',\n        role:'menu',\n        tag:'ul'\n    },\n    SitePickerMenuListItem: {\n        className:'ms-site-picker__list__item',\n        role:'menu',\n        tag:'li',\n    },\n    renderSiteOptions:mockFn,\n    resetSiteOptionsState:mockFn,\n    SitePickerMenuListItemArray:[],\n    siteOptionsState:mockState\n      };\n  });\n  it('renders correctly', () => {\n    const component: renderer.ReactTestRenderer = renderer.create(\n    <SitePicker {...mockProps} />);\n    expect(mockProps).toBeDefined();\n    expect(mockProps).toMatchSnapshot();\n    const tree = component.toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n});\n"]}