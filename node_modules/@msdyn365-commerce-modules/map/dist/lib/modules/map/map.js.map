{"version":3,"file":"map.js","sourceRoot":"./src/","sources":["modules/map/map.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// tslint:disable:no-reference\n/// <reference path=\"types/MicrosoftMaps/Microsoft.Maps.All.d.ts\" />\n\nimport { IFullOrgUnitAvailability } from '@msdyn365-commerce-modules/retail-actions/dist/types/utilities/full-org-unit-availability';\nimport { IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport { OrgUnitLocation } from '@msdyn365-commerce/retail-proxy';\nimport classname from 'classnames';\nimport { observable, reaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport { IMapData } from './map.data';\nimport { IMapProps, IPushpinOptionsData } from './map.props.autogenerated';\n\nexport interface IHeader {\n    headerProps: INodeProps;\n    heading: React.ReactNode;\n}\n\nexport interface IMapViewProps extends IMapProps<IMapData> {\n    ModuleProps: IModuleProps;\n    Header: IHeader;\n    MapProps: INodeProps;\n    Map: Microsoft.Maps.Map | undefined;\n}\n\n/**\n *\n * Map component\n * @extends {React.Component<IMapProps<IMapData>>}\n */\n@observer\nclass Map extends React.Component<IMapProps<IMapData>> {\n    @observable public map: Microsoft.Maps.Map | undefined;\n    private mapRef: React.RefObject<HTMLElement> = React.createRef<HTMLElement>();\n\n    constructor(props: IMapProps<IMapData>) {\n        super(props);\n    }\n\n    public componentDidMount(): void {\n        const {\n            context: {\n                telemetry,\n                actionContext: {\n                    requestContext: {\n                        channel\n                    }\n                }\n            }\n        } = this.props;\n\n        if (channel && !channel.BingMapsApiKey) {\n            telemetry.error('BingMapsApiKey is missing.');\n            return;\n        }\n\n        if (channel && !channel.BingMapsEnabled) {\n            telemetry.error('Map is disabled from HQ.');\n            return;\n        }\n\n        reaction(\n            () => this.props.data.storeSelectorStateManager.result?.loadMapApi,\n            () => {\n                this.props.data.storeSelectorStateManager.result?.loadMapApi({\n                    key: channel?.BingMapsApiKey,\n                    lang: this.props.context?.actionContext?.requestContext?.channel?.ChannelCountryRegionISOCode,\n                    market: this.props.context?.actionContext?.requestContext?.channel?.DefaultLanguageId\n                });\n            }\n        );\n\n        reaction(\n            () => this.props.data.storeSelectorStateManager.result?.isMapApiLoaded,\n            () => {\n                this._initMap();\n            }\n        );\n\n        reaction(\n            () => {\n                return [this.props.data.storeSelectorStateManager.result?.context?.orgUnitStoreInformation,\n                this.props.data.storeSelectorStateManager.result?.selectedStoreLocationId,\n                this.map];\n            },\n            async () => {\n                this._updateMap();\n            }\n        );\n    }\n\n    public render(): JSX.Element | null {\n\n        const {\n            config: {\n                heading,\n                className\n            },\n            data: {\n                storeSelectorStateManager: { result: storeSelectorStateManager }\n            }\n        } = this.props;\n\n        const displayMap = storeSelectorStateManager?.listMapViewState?.displayMap;\n\n        const viewProps: IMapViewProps = {\n            ...this.props,\n            ModuleProps: {\n                tag: 'div',\n                moduleProps: this.props,\n                className: classname('ms-map', { show: displayMap }, className)\n            },\n            Header: {\n                headerProps: { className: 'ms-map__header' },\n                heading: heading && heading.text && (\n                    <Msdyn365.Text\n                        className='ms-map__heading'\n                        {...heading}\n                        tag={heading.tag || 'h2'}\n                        text={heading.text}\n                        editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}\n                    />\n                )\n            },\n            MapProps: {\n                tag: 'div',\n                className: 'ms-map__body',\n                ref: this.mapRef\n            },\n            Map: this.map\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;\n\n    private _initMap = () => {\n        const {\n            context: {\n                actionContext: {\n                    requestContext: {\n                        channel\n                    }\n                }\n            },\n            data: {\n                storeSelectorStateManager: { result: storeSelectorStateManager }\n            }\n        } = this.props;\n        if (storeSelectorStateManager?.isMapApiLoaded) {\n\n            this.map = new Microsoft.Maps.Map(this.mapRef.current as HTMLElement, {\n                credentials: channel?.BingMapsApiKey,\n                pushpinAccessible: true\n            });\n        }\n    }\n\n    private _updateMap = () => {\n        const pushpinOptions = this.props.config.pushpinOptions;\n        const storeSelectorStateManager = this.props.data.storeSelectorStateManager?.result;\n        const orgUnitStoreInformation = storeSelectorStateManager?.context?.orgUnitStoreInformation;\n        const selectedStoreLocationId = storeSelectorStateManager?.selectedStoreLocationId;\n\n        if (this.map && orgUnitStoreInformation) {\n            let mapLocation: OrgUnitLocation | undefined;\n            this.map.entities.clear();\n            const pushpins: Microsoft.Maps.IPrimitive[] = [];\n\n            orgUnitStoreInformation.map((unitStoreInfo: IFullOrgUnitAvailability, index: number) => {\n                const storeLocation = unitStoreInfo?.OrgUnitAvailability?.OrgUnitLocation;\n\n                if (storeLocation?.Latitude && storeLocation.Longitude) {\n                    const isSelectedLocation = selectedStoreLocationId === storeLocation.OrgUnitNumber;\n                    const options = this._getPushpinOptions(isSelectedLocation, index, pushpinOptions);\n                    const pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(storeLocation.Latitude, storeLocation.Longitude), options);\n\n                    Microsoft.Maps.Events.addHandler(pushpin, 'click', () => storeLocation.OrgUnitNumber && storeSelectorStateManager?.setSelectedStoreLocationId(storeLocation.OrgUnitNumber));\n\n                    isSelectedLocation ? pushpins.unshift(pushpin) : pushpins.push(pushpin);\n\n                    if (isSelectedLocation) {\n                        mapLocation = storeLocation;\n                    }\n                }\n            });\n\n            if (mapLocation) {\n                const currLocation = new Microsoft.Maps.Location(mapLocation.Latitude, mapLocation.Longitude);\n                this.map.setView({ center: currLocation });\n            } else {\n                // Create a LocationRect from array of pushpins and set the map view.\n                this.map.setView({\n                    bounds: Microsoft.Maps.LocationRect.fromShapes(pushpins)\n                });\n            }\n\n            this.map.setOptions({ pushpinAccessible: true });\n            this.map?.entities.push(pushpins);\n        }\n    }\n\n    private _getPushpinOptions = (isSelectedLocation: boolean, index: number, pushpinOptions?: IPushpinOptionsData) => {\n        const text = pushpinOptions?.showIndex ? (index + 1).toString() : undefined;\n\n        const size = pushpinOptions?.size || 1;\n        const color = isSelectedLocation ? pushpinOptions?.selectionColor || pushpinOptions?.color : pushpinOptions?.color;\n        const icon = this._getSvgIcon(size, color, text);\n\n        return {\n            // fallback if icon doesn't render properly\n            color: isSelectedLocation ? pushpinOptions?.selectionColor : pushpinOptions?.color,\n            icon: icon\n        };\n    }\n\n    private _getSvgIcon = (size: number, color?: string, text?: string) => {\n        const baseValue: number = 32;\n        return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${baseValue * size}\" height=\"${baseValue * size}\" viewBox=\"0 0 365 560\">\n                    <path fill=\"${color}\" d=\"M182.9,551.7c0,0.1,0.2,0.3,0.2,0.3S358.3,283,358.3,194.6c0-130.1-88.8-186.7-175.4-186.9 C96.3,7.9,7.5,64.5,7.5,194.6c0,88.4,175.3,357.4,175.3,357.4S182.9,551.7,182.9,551.7z\" />\n                    ${text ? `<text x=\"185\" y=\"280\" style=\"font-size:220px;fill:#ffffff;\" text-anchor=\"middle\">${text}</text>` : ''}\n                </svg>`;\n    }\n}\n\nexport default Map;\n"]}