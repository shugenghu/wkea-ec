import { __decorate } from "tslib";
import { Button, getPayloadObject, getTelemetryAttributes, getTelemetryObject, TelemetryConstant, UncontrolledTooltip } from '@msdyn365-commerce-modules/utilities';
import { CartIconComponent } from '@msdyn365-commerce/components';
import { getUrlSync, msdyn365Commerce, TelemetryEvent } from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { reaction } from 'mobx';
import { observer } from 'mobx-react';
import React from 'react';
import { FlyoutCartLineItems } from './components/flyout-cart-line-items';
import { getMiniCartData } from './utils/get-products-in-mini-cart';
let CartIcon = class CartIcon extends React.Component {
    constructor(props) {
        super(props);
        this._getImageSettings = (imageSettings) => {
            return imageSettings || {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            };
        };
        this._removeItemFromCartHandler = (cartlineToRemove) => {
            if (this.props.data.cart.result) {
                const input = {
                    cartLineIds: [cartlineToRemove.LineId.toString()]
                };
                this.props.data.cart.result.removeCartLines(input)
                    .catch((error) => {
                    this.props.telemetry.warning(error);
                    this.props.telemetry.debug('Unable to Remove Cart Line');
                });
            }
        };
        this.state = { miniCartData: {} };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        const payload = getPayloadObject(TelemetryEvent.CheckOut, this.telemetryContent, TelemetryConstant.Checkout);
        this.checkoutBySignInAttributes = getTelemetryAttributes(this.telemetryContent, payload);
        payload.contentAction.etext = TelemetryConstant.GuestCheckout;
        this.checkoutByGuestAttributes = getTelemetryAttributes(this.telemetryContent, payload);
        payload.contentAction.etext = TelemetryConstant.ViewShoppingBag;
        this.viewShoppingBagAttributes = getTelemetryAttributes(this.telemetryContent, payload);
    }
    async componentDidMount() {
        const context = this.props.context.actionContext;
        if (this.props.data.cart && this.props.data.cart.result && this.props.data.cart.result.cart.CartLines) {
            this.setState({
                miniCartData: await getMiniCartData(context)
            });
        }
        reaction(() => this.props.data.cart.result?.cart.CartLines, async () => {
            this.setState({
                miniCartData: await getMiniCartData(context)
            });
        });
        this.setState({
            orgUnitLocations: this.props.data.orgUnitLocations.result
        });
    }
    render() {
        const { id, typeName, data: { cart: { result: cart } }, config: { enableHoverCart }, context: { request: { user: { isAuthenticated, signInUrl } } }, context, resources } = this.props;
        const guestCheckoutUrl = getUrlSync('checkout', this.props.context.actionContext) || '';
        const cartUrl = getUrlSync('cart', this.props.context.actionContext) || '';
        const checkoutURL = this._getCheckoutURL(isAuthenticated, guestCheckoutUrl, signInUrl || '');
        const isCartEmpty = cart && cart.cart.CartLines && cart.cart.CartLines.length === 0;
        const cartLines = this._getCartLines();
        const hasErrors = cartLines ? cartLines.some(cartline => cartline.hasError) : false;
        const includeFlyout = this.props.data.cart.status === 'SUCCESS' && enableHoverCart;
        const cartSize = cartLines ? cartLines.length : 0;
        const goToCartButtonText = resources.goToCartButtonTitle.replace('{count}', cartSize.toString());
        const flyoutTitle = resources.flyoutTitle;
        const price = cart && cart.cart.TotalAmount || undefined;
        const priceString = price ? resources.totalPriceFormatString.replace('{price}', context.cultureFormatter.formatCurrency(price)) : '';
        const viewProps = {
            ...this.props,
            cartIcon: cart && (React.createElement(CartIconComponent, { cartLabel: resources.cartLabel, context: context, id: id, typeName: typeName, data: { cart: cart }, telemetryContent: this.telemetryContent })),
            cartlines: cartLines,
            FlyoutContainer: includeFlyout ? {
                tag: UncontrolledTooltip,
                placement: 'bottom-end',
                hideArrow: true,
                className: 'ms-cart-icon__flyout-container',
                trigger: 'hover focus',
                displayMode: 'FLYOUT',
                target: id
            } : undefined,
            CartlinesWrapper: {
                className: 'ms-cart-icon__cart-lines'
            },
            miniCartWrapper: {
                className: classnames('ms-cart-icon'),
                id: this.props.id
            },
            miniCartItemWrapper: {
                className: classnames('msc-cart-lines-item')
            },
            checkoutAsSignInUserButton: (!isCartEmpty) ?
                (React.createElement(Button, Object.assign({ disabled: hasErrors, className: 'ms-cart-icon__btn-checkout', href: checkoutURL, title: resources.checkoutButtonTitle }, this.checkoutBySignInAttributes), resources.checkoutButtonTitle)) : null,
            checkoutAsGuestButton: (!isCartEmpty && !isAuthenticated) ?
                (React.createElement(Button, Object.assign({ disabled: hasErrors, className: 'ms-cart-icon__btn-guestcheckout', href: guestCheckoutUrl, title: resources.guestCheckoutButtonTitle }, this.checkoutByGuestAttributes), resources.guestCheckoutButtonTitle)) : null,
            goToCartButton: (React.createElement(Button, Object.assign({ className: 'ms-cart-icon__btn-gotocart', href: cartUrl, title: goToCartButtonText }, this.viewShoppingBagAttributes), goToCartButtonText)),
            flyoutTitle: (React.createElement("span", { className: `ms-cart-icon__flyout-title` }, flyoutTitle)),
            totalPrice: (React.createElement("div", { className: `ms-cart-icon__subtotal` }, priceString))
        };
        return this.props.renderView(viewProps);
    }
    _getCheckoutURL(isAuthenticated, guestCheckoutUrl, signInUrl) {
        if (isAuthenticated) {
            return guestCheckoutUrl;
        }
        const absoluteUrlRegExp = new RegExp('^(?:[a-z]+:)?//', 'i');
        const isAbsoluteUrl = absoluteUrlRegExp.test(guestCheckoutUrl);
        let returnURL = guestCheckoutUrl;
        if (msdyn365Commerce.isBrowser && !isAbsoluteUrl) {
            returnURL = `${window.location.origin}${guestCheckoutUrl}`;
        }
        return `${signInUrl}${signInUrl.indexOf('?') === -1 ? '?' : '&'}ru=${returnURL}`;
    }
    _getCartLines() {
        const { data: { cart: { result: cart } }, context: { request: { channel: { PickupDeliveryModeCode } = { PickupDeliveryModeCode: undefined } } }, config: config, telemetry, resources } = this.props;
        const imageSettings = this._getImageSettings(config.imageSettings);
        return this.state.miniCartData.products && cart && cart.cart.CartLines && cart.cart.CartLines.length > 0 ?
            (FlyoutCartLineItems({
                cartlines: cart.cart.CartLines,
                products: this.state.miniCartData.products,
                productAvailabilites: this.state.miniCartData.productAvailabilites,
                productDeliveryOptions: this.state.miniCartData.deliveryOptions,
                imageSettings: imageSettings,
                outOfStockThreshold: this.props.context.app.config.outOfStockThreshold || 0,
                isStockCheckEnabled: this.props.context.app.config.enableStockCheck || false,
                maxCartlineQuantity: this.props.context.app.config.maxQuantityForCartLineItem,
                gridSettings: this.props.context.request.gridSettings,
                context: this.props.context,
                typeName: this.props.typeName,
                id: this.props.id,
                resources: {
                    sizeString: resources.productDimensionTypeSize,
                    colorString: resources.productDimensionTypeColor,
                    configString: resources.productDimensionTypeConfiguration,
                    styleString: resources.productDimensionTypeStyle,
                    quantityDisplayString: resources.quantityDisplayText,
                    inputQuantityAriaLabel: '',
                    discountStringText: '',
                    originalPriceText: '',
                    currentPriceText: '',
                    shippingChargesText: ''
                },
                telemetry: telemetry,
                removeButtonText: resources.removeCartButtonText,
                outOfStockText: '',
                outOfRangeOneText: '',
                outOfRangeFormatText: '',
                cartState: this.props.data.cart.result,
                orgUnitLocations: this.state.orgUnitLocations,
                removeItemClickHandler: this._removeItemFromCartHandler,
                pickupDeliveryModeCode: PickupDeliveryModeCode,
                telemetryContent: this.telemetryContent
            })) : null;
    }
};
CartIcon = __decorate([
    observer
], CartIcon);
export default CartIcon;
//# sourceMappingURL=cart-icon.js.map