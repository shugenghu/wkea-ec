{"version":3,"file":"get-products-in-mini-cart.js","sourceRoot":"./src/","sources":["modules/cart-icon/utils/get-products-in-mini-cart.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,2BAA2B,EAAE,iCAAiC,EAAE,kCAAkC,EAAgC,qCAAqC,EAAE,sCAAsC,EAAE,MAAM,2CAA2C,CAAC;AAErS,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAY/D,MAAM,CAAC,MAAM,WAAW,GAAG,GAAG,EAAE;IAC5B,OAAO,IAAI,uBAAuB,EAAE,CAAC;AACzC,CAAC,CAAC;AAKF,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,GAAmB;IACrD,MAAM,YAAY,GAAkB,EAAE,CAAC;IAEvC,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,CAAC;IAC1C,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;IAG5B,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;QACjD,MAAM,2BAA2B,CAC7B,IAAI,uBAAuB,EAAE,EAC7B,GAAG,CACN;aACI,IAAI,CAAC,QAAQ,CAAC,EAAE;YACb,IAAI,QAAQ,EAAE;gBACV,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACpC;QACL,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE;YACX,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEP,MAAM,iCAAiC,CACnC,IAAI,qCAAqC,CAAC,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,EACzE,GAAG,CACN;aACI,IAAI,CAAC,iBAAiB,CAAC,EAAE;YACtB,IAAI,iBAAiB,EAAE;gBACnB,YAAY,CAAC,oBAAoB,GAAI,iBAAiB,CAAC;aAC1D;QACL,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE;YACX,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEP,MAAM,kCAAkC,CACpC,IAAI,sCAAsC,CAAC,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,EAC1E,GAAG,CACN;aACI,IAAI,CAAC,eAAe,CAAC,EAAE;YACpB,IAAI,eAAe,EAAE;gBACjB,YAAY,CAAC,eAAe,GAAG,eAAe,CAAC;aAClD;QACL,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE;YACX,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;KACV;IAED,OAAO,YAAY,CAAC;AACxB,CAAC","sourcesContent":["import { ActiveCartProductsInput, getActiveCartProductsAction, getAvailabilitiesForCartLineItems, getDeliveryOptionsForCartLineItems, IProductInventoryInformation, ProductAvailabilitiesForCartLineItems, ProductDeliveryOptionsForCartLineItems } from '@msdyn365-commerce-modules/retail-actions';\nimport { IActionContext } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { ProductDeliveryOptions, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\n\n/**\n * IMiniCartData entity interface.\n */\nexport interface IMiniCartData {\n    products?: SimpleProduct[];\n    productAvailabilites?: IProductInventoryInformation[];\n    deliveryOptions?: ProductDeliveryOptions[];\n}\n\nexport const createInput = () => {\n    return new ActiveCartProductsInput();\n};\n\n/**\n * Calls the Retail API and returns a mini cart data\n */\nexport async function getMiniCartData(ctx: IActionContext): Promise<IMiniCartData> {\n    const miniCartData: IMiniCartData = {};\n\n    const cartState = await getCartState(ctx);\n    const cart = cartState.cart;\n\n    // If there are cart lines, make call to get products\n    if (cart && cart.CartLines && cart.CartLines.length) {\n        await getActiveCartProductsAction(\n            new ActiveCartProductsInput(),\n            ctx\n        )\n            .then(products => {\n                if (products) {\n                    miniCartData.products = products;\n                }\n            })\n            .catch(error => {\n                ctx.telemetry.exception(error);\n                throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');\n            });\n\n        await getAvailabilitiesForCartLineItems(\n            new ProductAvailabilitiesForCartLineItems(ctx.requestContext.apiSettings),\n            ctx\n        )\n            .then(availableQuantity => {\n                if (availableQuantity) {\n                    miniCartData.productAvailabilites =  availableQuantity;\n                }\n            })\n            .catch(error => {\n                ctx.telemetry.exception(error);\n                throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');\n            });\n\n        await getDeliveryOptionsForCartLineItems(\n            new ProductDeliveryOptionsForCartLineItems(ctx.requestContext.apiSettings),\n            ctx\n        )\n            .then(deliveryOptions => {\n                if (deliveryOptions) {\n                    miniCartData.deliveryOptions = deliveryOptions;\n                }\n            })\n            .catch(error => {\n                ctx.telemetry.exception(error);\n                throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');\n            });\n    }\n\n    return miniCartData;\n}"]}