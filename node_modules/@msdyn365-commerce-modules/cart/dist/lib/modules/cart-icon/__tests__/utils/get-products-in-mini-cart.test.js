import { buildHydratedMockActionContext } from '@msdyn365-commerce/core';
import * as GlobalStateActions from '@msdyn365-commerce/global-state';
import { createInput, getMiniCartData } from '../../utils/get-products-in-mini-cart';
jest.mock('@msdyn365-commerce/global-state');
let mockCartState;
let mockActionContext;
let mockCheckoutState;
const mockActiveCart = {
    Id: 'gB8DCi6AK3mzMavh08C4P18wFDbEEyto',
    CartLines: [
        {
            LineId: '574208bdcf744390adf75d460d5339bb'
        }
    ],
    Version: 123
};
const mockCheckoutCart = {
    Id: 'cN6mfMjzVw7lBTQMdrwsQh~lKaU4XXbF',
    AmountDue: 100,
    TotalAmount: 100,
    CartLines: [
        {
            LineId: '574208bdcf744390adf75d460d5339bb',
            Quantity: 2,
            ProductId: 2
        }
    ],
    LoyaltyCardId: 'ABC',
    Version: 123
};
describe('emptyActiveCartAction  ccc', () => {
    mockActionContext = buildHydratedMockActionContext({});
    mockCartState = {
        cart: mockActiveCart,
        removeCartLines: jest.fn(),
        removeAllPromoCodes: jest.fn()
    };
    mockCheckoutState = {
        checkoutCart: {
            cart: mockCheckoutCart
        },
        removeCheckoutCartId: jest.fn()
    };
    GlobalStateActions.getCartState.mockImplementation(async () => mockCartState);
    GlobalStateActions.getCheckoutState.mockImplementation(async () => mockCheckoutState);
    it('throws error when getMiniCartData throws error', async () => {
        createInput();
        try {
            await getMiniCartData(mockActionContext);
        }
        catch (e) {
            expect(e).toBeDefined();
        }
    });
});
//# sourceMappingURL=get-products-in-mini-cart.test.js.map