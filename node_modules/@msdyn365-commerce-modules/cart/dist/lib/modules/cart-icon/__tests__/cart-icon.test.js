import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, shallow } from 'enzyme';
import * as React from 'react';
import { mockResources } from '../__mocks__/mock-resources';
import CartIcon from '../cart-icon';
const mockContext = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            }
        },
        routes: {
            home: '/fedev',
            checkout: '/checkout'
        }
    },
    request: {
        user: {
            isAuthenticated: true
        },
        channel: {
            PickupDeliveryModeCode: '60',
        }
    },
};
const mockContextWithoutRoutes = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            },
            enableHoverCart: true
        }
    },
    request: {
        user: {
            isAuthenticated: false,
            signInUrl: 'https://xyz.com'
        },
    }
};
const mockData = {
    cart: {
        status: 'SUCCESS',
        result: undefined
    },
    orgUnitLocations: {
        status: 'FAILED',
        result: undefined,
    }
};
describe('Cart icon module snapshot tests', () => {
    let moduleProps;
    it('renders as expected when no cart present', () => {
        moduleProps = {
            ...buildMockModuleProps(mockData, {}, {}, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            slots: {
                storeSelector: []
            },
            resources: mockResources
        };
        const result = mount(React.createElement(CartIcon, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.cartlines).not.toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
    });
    it('renders as expected when getUrlSync return the correct URL', () => {
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                id: 'cart-icon',
                typeName: '{typeName}',
                products: {
                    status: 'SUCCESS',
                    result: [],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                }
                            ]
                        }
                    },
                }
            }, {}, {}, mockContextWithoutRoutes),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = mount(React.createElement(CartIcon, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toBeDefined();
        expect(viewProps.cartlines).toBeNull();
        expect(viewProps.checkoutAsGuestButton).toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
    });
});
describe('Cart module unit tests', () => {
    let moduleProps;
    it('when remove button it clicked it removes an item ', () => {
        const removeCartLinesSpy = jest.fn(() => new Promise(() => { return ''; }));
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [{
                            RecordId: 10,
                        },
                        {
                            RecordId: 20,
                        }
                    ],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                },
                                {
                                    ItemId: 20,
                                    LineId: 20,
                                    ProductId: 20
                                }
                            ]
                        },
                        removeCartLines: removeCartLinesSpy
                    },
                }
            }, {}, {}, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = shallow(React.createElement(CartIcon, Object.assign({}, moduleProps)));
        result.instance()._removeItemFromCartHandler({
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        });
        expect(removeCartLinesSpy).toHaveBeenCalled();
        result.instance().setState({ miniCartData: { products: [] } });
        result.update();
    });
});
//# sourceMappingURL=cart-icon.test.js.map