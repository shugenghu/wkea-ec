import * as React from 'react';
export const PickUpInStore = (props) => {
    const _onLocationChangedCallback = (orgUnitLocation, cartState, cartline) => {
        if (!cartState) {
            return Promise.resolve();
        }
        return cartState.updateCartLinePickupLocation({ cartLineId: cartline.LineId, location: orgUnitLocation })
            .then(result => {
            if (result.status === 'SUCCESS') {
            }
        })
            .catch(error => {
            return;
        });
    };
    const _toggleBOPIS = (isBopisSelected) => {
        const { storeSelectorStateManager, product, cartline, cartState } = props;
        if (isBopisSelected) {
            if (!storeSelectorStateManager) {
                return;
            }
            storeSelectorStateManager.openDialog({
                product,
                alreadySelectedLocation: {
                    OrgUnitNumber: cartline.FulfillmentStoreId
                },
                onLocationSelected: (orgUnitLocation) => {
                    return _onLocationChangedCallback(orgUnitLocation, cartState, cartline);
                }
            })
                .catch(error => {
                return;
            });
        }
        else {
            if (!cartState) {
                return;
            }
            cartline.DeliveryMode = '';
            cartline.FulfillmentStoreId = '';
            cartline.ShippingAddress = {};
            cartState.clearCartLinePickupLocation({ cartLineId: cartline.LineId })
                .then(result => {
                if (result.status === 'SUCCESS') {
                }
            })
                .catch(error => {
                return;
            });
        }
    };
    const _getOrgUnitName = (fulfillmentStoreId, orgUnitLocations) => {
        if (!orgUnitLocations || !fulfillmentStoreId || !(orgUnitLocations.length > 0)) {
            return '';
        }
        const foundLocation = orgUnitLocations.find(orgUnitLocation => {
            return orgUnitLocation.OrgUnitNumber === fulfillmentStoreId;
        });
        if (foundLocation) {
            return foundLocation.OrgUnitName;
        }
        else {
            return fulfillmentStoreId;
        }
    };
    const _renderShippingMethod = (cartLine, shipItText, pickupInStoretext, changeStoreText, orgUnitLocations) => {
        const orgUnitName = _getOrgUnitName(cartLine.FulfillmentStoreId, orgUnitLocations);
        const bopisSelected = cartLine.FulfillmentStoreId ? true : false;
        const toggleBOPIS = (isBopisSelected) => { return () => _toggleBOPIS(isBopisSelected); };
        return (React.createElement(React.Fragment, null,
            React.createElement("label", { className: 'msc-cart-line__bopis-shipping' },
                React.createElement("input", { id: `ms-cart-bopis-ship-option-${cartLine.LineId}`, type: 'radio', name: `shippingType ${cartLine.LineId}`, onChange: toggleBOPIS(false), value: shipItText, checked: !bopisSelected, "aria-checked": !bopisSelected, key: `${cartLine.LineId}-shipit` }),
                shipItText),
            React.createElement("label", { className: 'msc-cart-line__bopis-store-pickup' },
                React.createElement("input", { id: `ms-cart-bopis-pickup-option-${cartLine.LineId}`, type: 'radio', name: `shippingType ${cartLine.LineId}`, onChange: toggleBOPIS(true), value: pickupInStoretext, checked: bopisSelected, "aria-checked": bopisSelected, key: `${cartLine.LineId}-pickup` }),
                pickupInStoretext),
            cartLine.FulfillmentStoreId ? (React.createElement("div", { className: 'msc-cart-line__bopis__fullfilment' },
                React.createElement("span", { className: 'msc-cart-line__bopis__fullfilment-store' }, orgUnitName),
                React.createElement("button", { className: 'msc-cart-line__bopis-changestore btn', onClick: toggleBOPIS(true) }, changeStoreText))) : null));
    };
    if (!props.deliveryOptions ||
        !props.deliveryOptions.DeliveryOptions ||
        !props.pickupDeliveryModeCode ||
        !props.deliveryOptions.DeliveryOptions.find(option => option.Code === props.pickupDeliveryModeCode)) {
        return undefined;
    }
    return {
        callbacks: {
            toggleBopis: _toggleBOPIS
        },
        defaultComponent: _renderShippingMethod(props.cartline, props.shipitText, props.pickUpInStoreText, props.changeStoreText, props.orgUnitLocations),
        orgUnitName: _getOrgUnitName(props.cartline.FulfillmentStoreId, props.orgUnitLocations),
        isBopisSelected: props.cartline.FulfillmentStoreId ? true : false,
        ContainerProps: {
            className: 'msc-cart-line__bopis-container'
        }
    };
};
//# sourceMappingURL=cart-pick-up-in-store.js.map