{"version":3,"file":"cart-line-items.js","sourceRoot":"./src/","sources":["modules/cart/components/cart-line-items.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';\nimport { getProductUrlSync, IProductInventoryInformation, OrderTemplate } from '@msdyn365-commerce-modules/retail-actions';\nimport { Button, getPayloadObject, getTelemetryAttributes, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport {\n    AddToOrderTemplateComponent, AddToWishlistComponent, CartLineItemComponent,\n    IAddToOrderTemplateDialogResources, ICartlineResourceString, IDuplicateItemsWhenAddingToOrderTemplateDialogResources,\n    IItemAddedToOrderTemplateDialogResources, IOrderTemplateNameDialogResources, IWishlistActionSuccessResult } from '@msdyn365-commerce/components';\nimport { ICoreContext, IGridSettings, IImageSettings, ITelemetry, TelemetryEvent } from '@msdyn365-commerce/core';\nimport { ICartState } from '@msdyn365-commerce/global-state';\nimport { CartLine, CommerceList, Customer, OrgUnitLocation, ProductDeliveryOptions, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { ReleasedProductType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport * as React from 'react';\nimport { IPickUpInStoreViewProps, PickUpInStore } from './cart-pick-up-in-store';\n\nexport interface ICartLineItemsProps {\n    cartlines: CartLine[];\n    cartState: ICartState | undefined;\n    orgUnitLocations: OrgUnitLocation[] | undefined;\n    resources: ICartlineResourceString;\n    productAvailabilites: IProductInventoryInformation[] | undefined;\n    products: SimpleProduct[] | undefined;\n    productDeliveryOptions: ProductDeliveryOptions[] | undefined;\n    pickupDeliveryModeCode?: string;\n    /** GridSettings for the product image in cartline  */\n    gridSettings: IGridSettings;\n    /** ImageSettings for the product image in cartline  */\n    imageSettings: IImageSettings;\n    id: string;\n    typeName:string;\n    context: ICoreContext;\n    telemetry: ITelemetry;\n    removeButtonText: string;\n    addToWishlistButtonText: string;\n    removeFromWishlistButtonText: string;\n    shipItText: string;\n    pickitUpText: string;\n    changeStoreText: string;\n    outOfStockText: string;\n    outOfRangeOneText: string;\n    outOfRangeFormatText: string;\n    storeSelectorStateManager: IStoreSelectorStateManager | undefined;\n    isStockCheckEnabled: boolean;\n    wishlists: CommerceList[] | undefined;\n    defaultWishlistName: string;\n    maxCartlineQuantity: number;\n    includeErrors?: boolean;\n    showShippingChargesForLineItems?: boolean;\n    telemetryContent?: ITelemetryContent;\n\n    addToOrderTemplateDialogResources: IAddToOrderTemplateDialogResources;\n    createOrderTemplateDialogResources: IOrderTemplateNameDialogResources;\n    itemAddedToOrderTemplateDialogResources: IItemAddedToOrderTemplateDialogResources;\n    duplicateItemsWhenAddingToOrderTemplateDialogResources: IDuplicateItemsWhenAddingToOrderTemplateDialogResources;\n\n    addToOrderTemplateButtonText: string;\n    addToOrderTemplateMessage: string;\n    addItemToOrderTemplateError: string;\n    orderTemplates: OrderTemplate[] | undefined;\n    customerInformation: Customer | undefined;\n\n    removeItemClickHandler(cartlineToRemove: CartLine): void;\n    moveToWishlistSuccessHandler(result: IWishlistActionSuccessResult, cartlineId: CartLine): void;\n    updateCartLinesQuantitySuccessHandler(cartline: CartLine, quantity: number): void;\n}\n\nexport interface ICartlinesViewProps {\n    cartline: React.ReactNode;\n    pickUpInStore?: IPickUpInStoreViewProps;\n    remove: React.ReactNode;\n    addToWishlist: React.ReactNode | undefined;\n    addToOrderTemplate: React.ReactNode | undefined;\n\n    error?: string;\n\n    data?: {\n        product: SimpleProduct;\n        cartline: CartLine;\n    };\n}\n\nconst _getProduct = (productId: number | undefined, products: SimpleProduct[]): SimpleProduct | undefined => {\n    if (productId !== undefined && products) {\n        return products.find(product => {\n            return productId === product.RecordId;\n        });\n    }\n    return undefined;\n};\n\nconst _getCartItemMaxQuantity = (maxCartlineQuantity: number, isStockCheckEnabled: boolean, productAvailability?: IProductInventoryInformation) => {\n    if(isStockCheckEnabled) {\n        if(!productAvailability || !productAvailability.ProductAvailableQuantity || !productAvailability.IsProductAvailable || !productAvailability.ProductAvailableQuantity.AvailableQuantity) {\n            return 0;\n        }\n        return productAvailability.ProductAvailableQuantity.AvailableQuantity >= maxCartlineQuantity ? maxCartlineQuantity:productAvailability.ProductAvailableQuantity.AvailableQuantity;\n    }\n\n    return maxCartlineQuantity;\n};\n\nconst _getErrorMessage = (maxQuantity: number, currentQuantity: number, props: ICartLineItemsProps): string | undefined => {\n    if (maxQuantity <= 0) {\n        return props.outOfStockText;\n    } else if (maxQuantity < currentQuantity) {\n        if (maxQuantity === 1) {\n            return props.outOfRangeOneText;\n        } else {\n            return props.outOfRangeFormatText.replace('{numLeft}', maxQuantity.toString());\n        }\n    }\n\n    return undefined;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst _assembleNode = (cartline: CartLine, product: SimpleProduct, props:ICartLineItemsProps, index:number, foundProductAvailability?:IProductInventoryInformation, foundProductDeliveryOptions?:ProductDeliveryOptions): ICartlinesViewProps => {\n    const { imageSettings, gridSettings, id, typeName, context, resources, removeButtonText,\n        removeItemClickHandler, moveToWishlistSuccessHandler, addToOrderTemplateButtonText,\n        addToOrderTemplateDialogResources, createOrderTemplateDialogResources,\n        itemAddedToOrderTemplateDialogResources, duplicateItemsWhenAddingToOrderTemplateDialogResources,\n        addToWishlistButtonText, removeFromWishlistButtonText, orderTemplates, customerInformation,\n        wishlists, defaultWishlistName } = props;\n\n    const isAuthenticated = context.request.user.isAuthenticated;\n    const nameOfWishlist = wishlists && wishlists.length > 0 && wishlists[0].Name ? wishlists[0].Name : defaultWishlistName ;\n    const maxQuantity = _getCartItemMaxQuantity(props.maxCartlineQuantity, props.isStockCheckEnabled, foundProductAvailability);\n\n    // check if the product is service or not by product type\n    const PRODUCTASSERVICE = 2 as ReleasedProductType.Service;\n    const isServiceItem = product.ItemTypeValue === PRODUCTASSERVICE;\n\n    const errorMessage = props.includeErrors && !isServiceItem && props.isStockCheckEnabled ? _getErrorMessage(maxQuantity, cartline.Quantity!, props) : undefined;\n\n    const onRemoveClickHandler = (event: React.MouseEvent<HTMLElement>) => { removeItemClickHandler(cartline); };\n    const payload = getPayloadObject(TelemetryEvent.RemoveFromCart, props.telemetryContent!, removeButtonText, '');\n    const attributes = getTelemetryAttributes(props.telemetryContent!, payload);\n\n    const inventoryLbl =  foundProductAvailability?.StockLevelLabel;\n    const inventoryCode = foundProductAvailability? `ms-cart-line__inventory-code-${foundProductAvailability.StockLevelCode?.toLowerCase()}`:undefined;\n    return {\n        data: {\n            product: product,\n            cartline: cartline\n        },\n        error: errorMessage,\n        cartline: (\n            <CartLineItemComponent\n                    data={{\n                        cartLine: cartline,\n                        product: product\n                    }}\n                    currentQuantity = {cartline.Quantity!}\n                    maxQuantity = {maxQuantity}\n                    isOutOfStock = {(!isServiceItem && props.isStockCheckEnabled) ? (maxQuantity <= 0 ? true: false) : false}\n                    gridSettings={gridSettings}\n                    imageSettings={imageSettings}\n                    id={id}\n                    typeName={typeName}\n                    productUrl={getProductUrlSync(product, props.context.actionContext, undefined)}\n                    context={context}\n                    resources={resources}\n                    key={index}\n                    isQuantityEditable={true}\n                    quantityOnChange={props.updateCartLinesQuantitySuccessHandler}\n                    primaryImageUrl={product.PrimaryImageUrl}\n                    errorMessage={errorMessage}\n                    inventoryInformationLabel = {inventoryLbl}\n                    inventoryLabelClassName = {inventoryCode}\n                    isCartStateReady = {props.cartState?.status === 'READY'}\n                    showShippingChargesForLineItems = {props.showShippingChargesForLineItems}\n                    telemetryContent = {props.telemetryContent}\n            />),\n        pickUpInStore:(\n            PickUpInStore({\n                cartState: props.cartState,\n                cartline: cartline,\n                product: product,\n                shipitText: props.shipItText,\n                pickUpInStoreText: props.pickitUpText,\n                changeStoreText: props.changeStoreText,\n                storeSelectorStateManager: props.storeSelectorStateManager,\n                orgUnitLocations: props.orgUnitLocations,\n                deliveryOptions: foundProductDeliveryOptions,\n                pickupDeliveryModeCode: props.pickupDeliveryModeCode,\n            })\n        ),\n        remove: (\n            <Button\n                className='msc-cart-line__remove-item'\n                onClick={onRemoveClickHandler}\n                title={removeButtonText}\n                {...attributes}\n            >\n                {removeButtonText}\n            </Button>\n        ),\n        addToWishlist: (\n                isAuthenticated ? (\n                    <AddToWishlistComponent\n                        className = {'msc-cart-line__add-to-wishlist'}\n                        addToWishlistButtonText = {addToWishlistButtonText}\n                        removeFromWishlistButtonText = {removeFromWishlistButtonText}\n                        context = {context}\n                        id = {id}\n                        key = {cartline.LineId!}\n                        typeName={typeName}\n                        nameOfWishlist= {nameOfWishlist}\n                        cartline = {cartline}\n                        showButtonText = {true}\n                        showStatusMessage = {false}\n                        showRemoveButton = {false}\n                        showButtonTooltip = {false}\n                        data={{\n                            wishlists:wishlists,\n                            product:product\n                        }}\n                        onSuccess = {moveToWishlistSuccessHandler}\n                    />\n                ) :\n                undefined\n        ),\n        addToOrderTemplate: (\n                isAuthenticated && orderTemplates ? (\n                    <AddToOrderTemplateComponent\n                        className = {'msc-cart-line__add-to-order-template'}\n                        addToOrderTemplateButtonText={addToOrderTemplateButtonText}\n                        addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}\n                        createOrderTemplateDialogResources={createOrderTemplateDialogResources}\n                        itemAddedToOrderTemplateDialogResources={itemAddedToOrderTemplateDialogResources}\n                        duplicateItemsWhenAddingToOrderTemplateDialogResources={duplicateItemsWhenAddingToOrderTemplateDialogResources}\n                        data={{ product: product, quantity: cartline.Quantity || 1, orderTemplates: orderTemplates, customerInformation: customerInformation }}\n                        context={context}\n                        showButtonText = {true}\n                        showButtonTooltip = {false}\n                        id={id}\n                        typeName={typeName}\n                    />\n                ) :\n                undefined\n        )\n    };\n};\n\nconst _assembleCartlines = (cartlines: CartLine[], products: SimpleProduct[] | undefined, props: ICartLineItemsProps): ICartlinesViewProps[] | null => {\n    const reactNodes:ICartlinesViewProps[] = [];\n\n    if(!products || products.length === 0) {\n        props.context.telemetry.error('Products content is empty, module wont render');\n        return null;\n    }\n\n    cartlines.map((cartline, index) => {\n        const product = _getProduct(cartline.ProductId, products);\n        let foundProductAvailability;\n        if(props.productAvailabilites && props.productAvailabilites.length > 0) {\n            foundProductAvailability = props.productAvailabilites.find((productAvailability) => {\n                return productAvailability.ProductAvailableQuantity?.ProductId! === cartline.ProductId;\n            });\n        }\n        let foundProductDeliveryOption;\n        if(props.productDeliveryOptions && props.productDeliveryOptions.length > 0) {\n            foundProductDeliveryOption = props.productDeliveryOptions.find((deliveryOption) => {\n                return deliveryOption && deliveryOption.ProductId === cartline.ProductId;\n            });\n        }\n        if(product) {\n            reactNodes.push(_assembleNode(cartline, product, props, index, foundProductAvailability, foundProductDeliveryOption));\n        }\n    });\n\n    return reactNodes;\n};\n\n/**\n * CartLineItems component\n */\n\nexport const CartLineItems = (props: ICartLineItemsProps) => {\n    const { products, cartlines } = props;\n    return (\n        _assembleCartlines(cartlines, products, props)\n    );\n};"]}