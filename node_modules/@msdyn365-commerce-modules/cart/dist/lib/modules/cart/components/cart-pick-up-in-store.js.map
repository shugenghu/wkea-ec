{"version":3,"file":"cart-pick-up-in-store.js","sourceRoot":"./src/","sources":["modules/cart/components/cart-pick-up-in-store.tsx"],"names":[],"mappings":"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","sourcesContent":["import { IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';\nimport { INodeProps } from '@msdyn365-commerce-modules/utilities';\nimport { ICartState } from '@msdyn365-commerce/global-state';\nimport { CartLine, OrgUnitLocation, ProductDeliveryOptions, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport * as React from 'react';\n\nexport interface IPickUpInStoreViewProps {\n    callbacks: {\n        toggleBopis(isBopisSelected: boolean): void;\n    };\n    defaultComponent?: React.ReactNode;\n    orgUnitName?: string;\n    isBopisSelected: boolean;\n    ContainerProps: INodeProps;\n}\n\nexport interface IPickUpInStoreProps {\n    cartline: CartLine;\n    product: SimpleProduct;\n    shipitText: string;\n    pickUpInStoreText: string;\n    changeStoreText: string;\n    cartState: ICartState | undefined;\n    storeSelectorStateManager: IStoreSelectorStateManager | undefined;\n    orgUnitLocations?: OrgUnitLocation[] | undefined;\n    deliveryOptions?: ProductDeliveryOptions;\n    pickupDeliveryModeCode?: string;\n}\n\n// tslint:disable-next-line:max-func-body-length\nexport const PickUpInStore = (props: IPickUpInStoreProps): IPickUpInStoreViewProps | undefined => {\n    const _onLocationChangedCallback = (orgUnitLocation: OrgUnitLocation, cartState: ICartState | undefined, cartline: CartLine) => {\n        if(!cartState) {\n            return Promise.resolve();\n        }\n        return cartState.updateCartLinePickupLocation({cartLineId: cartline.LineId!, location: orgUnitLocation})\n            .then(result => {\n                if (result.status === 'SUCCESS') {\n                    // do something\n                }\n            })\n            .catch(error => {\n               return;\n            });\n    };\n\n    const _toggleBOPIS = (isBopisSelected: boolean) => {\n        const { storeSelectorStateManager, product, cartline, cartState } = props;\n\n        if(isBopisSelected) {\n            if(!storeSelectorStateManager) {\n                return;\n            }\n            storeSelectorStateManager.openDialog({\n                product,\n                alreadySelectedLocation: {\n                    OrgUnitNumber: cartline.FulfillmentStoreId\n                },\n                onLocationSelected: (orgUnitLocation) => {\n                    return _onLocationChangedCallback(orgUnitLocation, cartState, cartline);\n                }\n            })\n            .catch(error => {\n                return;\n            });\n        } else {\n            if(!cartState) {\n                return;\n            }\n            cartline.DeliveryMode = '';\n            cartline.FulfillmentStoreId = '';\n            cartline.ShippingAddress = {};\n            cartState.clearCartLinePickupLocation({cartLineId: cartline.LineId!})\n                .then(result => {\n                    if (result.status === 'SUCCESS') {\n                        // do something\n                    }\n                })\n                .catch(error => {\n                    return;\n                });\n        }\n    };\n\n    const _getOrgUnitName = (fulfillmentStoreId: string | undefined, orgUnitLocations: OrgUnitLocation[] | undefined) => {\n        if(!orgUnitLocations || !fulfillmentStoreId || !(orgUnitLocations.length > 0)) {\n            return '';\n        }\n\n        const foundLocation = orgUnitLocations.find(orgUnitLocation => {\n            return orgUnitLocation.OrgUnitNumber === fulfillmentStoreId;\n        });\n\n        if(foundLocation) {\n            return foundLocation.OrgUnitName;\n        } else {\n            return fulfillmentStoreId;\n        }\n    };\n\n    const _renderShippingMethod = (\n        cartLine: CartLine,\n        shipItText: string,\n        pickupInStoretext: string,\n        changeStoreText:string,\n        orgUnitLocations: OrgUnitLocation[] | undefined):JSX.Element => {\n\n        const orgUnitName = _getOrgUnitName(cartLine.FulfillmentStoreId, orgUnitLocations);\n        const bopisSelected = cartLine.FulfillmentStoreId ? true : false;\n\n        const toggleBOPIS = (isBopisSelected: boolean) => { return () => _toggleBOPIS(isBopisSelected); };\n\n        return (\n                <>\n                    <label className='msc-cart-line__bopis-shipping'>\n                        <input\n                            id={`ms-cart-bopis-ship-option-${cartLine.LineId}`}\n                            type='radio'\n                            name={`shippingType ${cartLine.LineId}`}\n                            onChange={toggleBOPIS(false)}\n                            value={shipItText}\n                            checked={!bopisSelected}\n                            aria-checked={!bopisSelected}\n                            key={`${cartLine.LineId}-shipit`}\n                        />\n                        {shipItText}\n                    </label>\n                    <label className='msc-cart-line__bopis-store-pickup'>\n                        <input\n                            id={`ms-cart-bopis-pickup-option-${cartLine.LineId}`}\n                            type='radio'\n                            name={`shippingType ${cartLine.LineId}`}\n                            onChange={toggleBOPIS(true)}\n                            value={pickupInStoretext}\n                            checked={bopisSelected}\n                            aria-checked={bopisSelected}\n                            key={`${cartLine.LineId}-pickup`}\n                        />\n                        {pickupInStoretext}\n                    </label>\n                    {\n                        cartLine.FulfillmentStoreId ? (\n                            <div className='msc-cart-line__bopis__fullfilment'>\n                                <span className='msc-cart-line__bopis__fullfilment-store'>{orgUnitName}</span>\n                                <button className='msc-cart-line__bopis-changestore btn' onClick={toggleBOPIS(true)}>{changeStoreText}</button>\n                            </div>\n                        ) : null\n                    }\n                </>\n        );\n    };\n\n    // If no delivery options present on the product, or none of the delivery options\n    // match the PickupDeliveryModeCode, that means the item cannot be used for BOPIS\n    if (!props.deliveryOptions ||\n        !props.deliveryOptions.DeliveryOptions ||\n        !props.pickupDeliveryModeCode ||\n        !props.deliveryOptions.DeliveryOptions.find(option => option.Code === props.pickupDeliveryModeCode)) {\n            return undefined;\n    }\n\n    return {\n        callbacks: {\n            toggleBopis: _toggleBOPIS\n        },\n        defaultComponent: _renderShippingMethod(props.cartline, props.shipitText, props.pickUpInStoreText, props.changeStoreText, props.orgUnitLocations),\n        orgUnitName: _getOrgUnitName(props.cartline.FulfillmentStoreId, props.orgUnitLocations),\n        isBopisSelected: props.cartline.FulfillmentStoreId ? true : false,\n        ContainerProps: {\n            className: 'msc-cart-line__bopis-container'\n        }\n    };\n};"]}