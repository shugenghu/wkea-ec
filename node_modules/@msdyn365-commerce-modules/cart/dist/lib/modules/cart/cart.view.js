import { Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
const _renderCartlines = (cartLines, cartEmptyText, CartlinesWrapper, storeSelector, backToShoppingButton, waitingComponent, cartLoadingStatus, cartDataResult) => {
    if (cartLoadingStatus) {
        return React.createElement(React.Fragment, null, cartLoadingStatus);
    }
    if (cartLines) {
        return cartLines.map((cartLine, index) => {
            return (React.createElement("div", { className: 'msc-cart-lines-item', key: index },
                cartLine.cartline,
                storeSelector && cartLine.pickUpInStore ?
                    React.createElement(Node, Object.assign({}, cartLine.pickUpInStore.ContainerProps), cartLine.pickUpInStore.defaultComponent) :
                    null,
                cartLine.addToOrderTemplate ? (React.createElement("div", { className: 'msc-cart-line__extra-actions' },
                    cartLine.remove,
                    cartLine.addToWishlist,
                    cartLine.addToOrderTemplate)) : (React.createElement(React.Fragment, null,
                    cartLine.remove,
                    cartLine.addToWishlist))));
        });
    }
    else {
        return (cartDataResult ?
            (React.createElement("div", { className: 'msc-cart__empty-cart' },
                React.createElement("p", { className: 'msc-cart-line' }, cartEmptyText),
                backToShoppingButton)) : React.createElement(React.Fragment, null, waitingComponent));
    }
};
const _renderErrorBlock = (errorData) => {
    if (!errorData || errorData.errors.length === 0) {
        return null;
    }
    return (React.createElement(Node, Object.assign({}, errorData.Wrapper),
        errorData.header,
        errorData.errors));
};
const _renderOrderSummarylines = (orderSummaryLines, OrderSummaryItems, props) => {
    if (!orderSummaryLines) {
        props.context.telemetry.error('OrderSummary content is empty, module wont render');
        return null;
    }
    return (React.createElement(Node, Object.assign({}, OrderSummaryItems),
        props.promoCode,
        orderSummaryLines.subtotal,
        orderSummaryLines.shipping,
        orderSummaryLines.otherCharge,
        orderSummaryLines.tax,
        orderSummaryLines.totalDiscounts ? orderSummaryLines.totalDiscounts : null,
        orderSummaryLines.orderTotal));
};
const CartView = (props) => (React.createElement("div", Object.assign({ className: props.className, id: props.id }, props.renderModuleAttributes(props)),
    props.title,
    React.createElement(Node, Object.assign({}, props.CartlinesWrapper), _renderCartlines(props.cartlines, props.resources.emptyCartText, props.CartlinesWrapper, props.storeSelector, props.backToShoppingButton, props.waitingComponent, props.cartLoadingStatus, props.cartDataResult)),
    props.orderSummaryHeading &&
        React.createElement(Node, Object.assign({}, props.OrderSummaryWrapper),
            props.orderSummaryHeading,
            _renderOrderSummarylines(props.orderSummaryLineitems, props.OrderSummaryItems, props),
            _renderErrorBlock(props.OrderSummaryErrors),
            props.checkoutAsSignInUserButton,
            props.checkoutAsGuestButton,
            props.backToShoppingButton,
            props.createTemplateFromCartButton),
    props.storeSelector));
export default CartView;
//# sourceMappingURL=cart.view.js.map