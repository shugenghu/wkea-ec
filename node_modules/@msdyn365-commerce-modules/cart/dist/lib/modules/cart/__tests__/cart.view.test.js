import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import CartView from '../cart.view';
describe('Cart view unit tests - View', () => {
    const mockResources = { emptyCartText: 'foo' };
    it('renders correctly with all attributes', () => {
        const moduleProps = buildMockModuleProps({}, {});
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            title: React.createElement("h1", null, "Cart"),
            storeSelector: '{storeSelector}',
            OrderSummaryErrors: {
                Wrapper: { className: 'node-class-Wrapper' },
                header: '{header}',
                errors: ['{}', '{}']
            },
            cartlines: [
                {
                    cartline: React.createElement("div", null, "cartline1"),
                    remove: React.createElement("button", null, "removecartline1"),
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        shippingMethod: React.createElement("div", null, "Shipped to you"),
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined
                },
                {
                    cartline: React.createElement("div", null, "cartline2"),
                    remove: React.createElement("button", null, "removecartline2"),
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        defaultComponent: React.createElement("div", null, "Shipped to you"),
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined
                }
            ],
            orderSummaryHeading: React.createElement("h2", null, "Order summary"),
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsSignInUserButton: React.createElement("button", null, "Checkout"),
            checkoutAsGuestButton: React.createElement("button", null, "Checkout as guest"),
            backToShoppingButton: React.createElement("button", null, "Back to shopping"),
            orderSummaryLineitems: {
                subtotal: React.createElement("span", null, "Subtotal"),
                shipping: React.createElement("span", null, "estimatedshipping"),
                tax: React.createElement("span", null, "estimatedtax"),
                orderTotal: React.createElement("span", null, "ordertotal"),
                totalDiscounts: React.createElement("span", null, "totalDiscounts")
            },
            promoCode: React.createElement("p", null, "promo code")
        };
        const component = render(React.createElement(CartView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with no cartlines', () => {
        const moduleProps = buildMockModuleProps({}, {});
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: React.createElement("h1", null, "Cart"),
            cartlines: undefined,
            orderSummaryHeading: React.createElement("h2", null, "Order summary"),
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: React.createElement("button", null, "Checkout as guest"),
            backToShoppingButton: React.createElement("button", null, "Back to shopping"),
            orderSummaryLineitems: {
                subtotal: React.createElement("span", null, "Subtotal"),
                shipping: React.createElement("span", null, "estimatedshipping"),
                tax: React.createElement("span", null, "estimatedtax"),
                orderTotal: React.createElement("span", null, "ordertotal"),
                totalDiscounts: React.createElement("span", null, "totalDiscounts")
            },
            promoCode: React.createElement("p", null, "promo code")
        };
        const component = render(React.createElement(CartView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with no orderSummary lines', () => {
        const moduleProps = buildMockModuleProps({}, {});
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: React.createElement("h1", null, "Cart"),
            cartlines: undefined,
            orderSummaryHeading: React.createElement("h2", null, "Order summary"),
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: React.createElement("button", null, "Checkout as guest"),
            backToShoppingButton: React.createElement("button", null, "Back to shopping"),
            orderSummaryLineitems: undefined,
            promoCode: React.createElement("p", null, "promo code")
        };
        const component = render(React.createElement(CartView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with no orderSummarylines with discount lines', () => {
        const moduleProps = buildMockModuleProps({}, {});
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: React.createElement("h1", null, "Cart"),
            cartlines: undefined,
            orderSummaryHeading: React.createElement("h2", null, "Order summary"),
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: React.createElement("button", null, "Checkout as guest"),
            backToShoppingButton: React.createElement("button", null, "Back to shopping"),
            orderSummaryLineitems: {
                subtotal: React.createElement("span", null, "Subtotal"),
                shipping: React.createElement("span", null, "estimatedshipping"),
                tax: React.createElement("span", null, "estimatedtax"),
                orderTotal: React.createElement("span", null, "ordertotal"),
                totalDiscounts: React.createElement("span", null, "totalDiscounts")
            },
            promoCode: React.createElement("p", null, "promo code")
        };
        const component = render(React.createElement(CartView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with no orderSummarylines without discount lines', () => {
        const moduleProps = buildMockModuleProps({}, {});
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: React.createElement("h1", null, "Cart"),
            cartlines: undefined,
            orderSummaryHeading: React.createElement("h2", null, "Order summary"),
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: React.createElement("button", null, "Checkout as guest"),
            backToShoppingButton: React.createElement("button", null, "Back to shopping"),
            orderSummaryLineitems: {
                subtotal: React.createElement("span", null, "Subtotal"),
                shipping: React.createElement("span", null, "estimatedshipping"),
                tax: React.createElement("span", null, "estimatedtax"),
                orderTotal: React.createElement("span", null, "ordertotal")
            },
            promoCode: React.createElement("p", null, "promo code")
        };
        const component = render(React.createElement(CartView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with loading message', () => {
        const moduleProps = buildMockModuleProps({}, {});
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            cartLoadingStatus: 'loading',
            title: React.createElement("h1", null, "Cart"),
            cartlines: undefined,
            orderSummaryHeading: React.createElement("h2", null, "Order summary"),
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: React.createElement("button", null, "Checkout as guest"),
            backToShoppingButton: React.createElement("button", null, "Back to shopping"),
            orderSummaryLineitems: {
                subtotal: React.createElement("span", null, "Subtotal"),
                shipping: React.createElement("span", null, "estimatedshipping"),
                tax: React.createElement("span", null, "estimatedtax"),
                orderTotal: React.createElement("span", null, "ordertotal")
            },
            promoCode: React.createElement("p", null, "promo code")
        };
        const component = render(React.createElement(CartView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with loading message', () => {
        const moduleProps = buildMockModuleProps({}, {});
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            cartDataResult: true,
            title: React.createElement("h1", null, "Cart"),
            cartlines: undefined,
            orderSummaryHeading: React.createElement("h2", null, "Order summary"),
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: React.createElement("button", null, "Checkout as guest"),
            backToShoppingButton: React.createElement("button", null, "Back to shopping"),
            orderSummaryLineitems: {
                subtotal: React.createElement("span", null, "Subtotal"),
                shipping: React.createElement("span", null, "estimatedshipping"),
                tax: React.createElement("span", null, "estimatedtax"),
                orderTotal: React.createElement("span", null, "ordertotal")
            },
            promoCode: React.createElement("p", null, "promo code")
        };
        const component = render(React.createElement(CartView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=cart.view.test.js.map