{"version":3,"file":"cart-pick-up-in-store.test.js","sourceRoot":"./src/","sources":["modules/cart/__tests__/cart-pick-up-in-store.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { IActionStatus } from '@msdyn365-commerce/global-state';\nimport { mount, render } from 'enzyme';\nimport * as React from 'react';\nimport { IPickUpInStoreProps, PickUpInStore } from '../components/cart-pick-up-in-store';\n\ndescribe('Cart pick up in store', () => {\n\n    it('renders correctly with a cartline which has already selected store', () => {\n\n        const pickUpInStoreProps: IPickUpInStoreProps = {\n            cartline: {\n                LineId: '10',\n                FulfillmentStoreId: '1'\n            },\n            // @ts-ignore\n            product: {\n                ItemId: '10',\n                RecordId: 10\n            },\n            shipitText: 'Ship it',\n            pickUpInStoreText: 'Select a store for pickup',\n            changeStoreText: 'Change store',\n            // @ts-ignore\n            cartState:{\n                cart:{\n                    Id: '12345',\n                    CartLines: [\n                        {\n                            LineId: '10',\n                            FulfillmentStoreId: '1'\n                        }\n                    ]\n                }\n            },\n            orgUnitLocations:[\n                {\n                    OrgUnitNumber: '1',\n                    OrgUnitName: 'Bellevue'\n                }\n            ],\n            // @ts-ignore\n            deliveryOptions: {\n                // @ts-ignore partial mock\n                DeliveryOptions: [\n                    // @ts-ignore partial mock\n                    {\n                        Code: '60'\n                    }\n                ]\n            },\n            pickupDeliveryModeCode: '60'\n\n        };\n\n        const pickUpInStore = PickUpInStore(pickUpInStoreProps);\n        const renderedComponent = render(<div>{pickUpInStore!.defaultComponent}</div>);\n        expect(renderedComponent).toMatchSnapshot();\n    });\n\n    it('renders correctly with a cartline which has already selected store but orgunitlocations is missing id', () => {\n\n        const pickUpInStoreProps: IPickUpInStoreProps = {\n            cartline: {\n                LineId: '10',\n                FulfillmentStoreId: 'Bellevue'\n            },\n            // @ts-ignore\n            product: {\n                ItemId: '10',\n                RecordId: 10\n            },\n            shipitText: 'Ship it',\n            pickUpInStoreText: 'Select a store for pickup',\n            changeStoreText: 'Change store',\n            // @ts-ignore\n            cartState:{\n                cart:{\n                    Id: '12345',\n                    CartLines: [\n                        {\n                            LineId: '10',\n                            FulfillmentStoreId: '2'\n                        }\n                    ]\n                }\n            },\n            orgUnitLocations:[\n                {\n                    OrgUnitNumber: '1',\n                    OrgUnitName: 'Bellevue'\n                }\n            ],\n            // @ts-ignore\n            deliveryOptions: {\n                // @ts-ignore partial mock\n                DeliveryOptions: [\n                    // @ts-ignore partial mock\n                    {\n                        Code: '60'\n                    }\n                ]\n            },\n            pickupDeliveryModeCode: '60'\n\n        };\n\n        const pickUpInStore = PickUpInStore(pickUpInStoreProps);\n        const renderedComponent = render(<div>{pickUpInStore!.defaultComponent}</div>);\n        expect(renderedComponent).toMatchSnapshot();\n    });\n\n    it('renders correctly with a cartline when no store is associated with it', () => {\n\n        const pickUpInStoreProps: IPickUpInStoreProps = {\n            cartline: {\n                LineId: '10'\n            },\n            // @ts-ignore\n            product: {\n                ItemId: '10',\n                RecordId: 10\n            },\n            shipitText: 'Ship it',\n            pickUpInStoreText: 'Select a store for pickup',\n            changeStoreText: 'Change store',\n            // @ts-ignore\n            cartState:{\n                cart:{\n                    Id: '12345',\n                    CartLines: [\n                        {\n                            LineId: '10',\n                            FulfillmentStoreId: '1'\n                        }\n                    ]\n                }\n            },\n            orgUnitLocations:[\n                {\n                    OrgUnitNumber: '1',\n                    OrgUnitName: 'Bellevue'\n                }\n            ],\n            // @ts-ignore\n            deliveryOptions: {\n                // @ts-ignore partial mock\n                DeliveryOptions: [\n                    // @ts-ignore partial mock\n                    {\n                        Code: '60'\n                    }\n                ]\n            },\n            pickupDeliveryModeCode: '60'\n\n        };\n\n        const pickUpInStore = PickUpInStore(pickUpInStoreProps);\n        const renderedComponent = render(<div>{pickUpInStore!.defaultComponent}</div>);\n        expect(renderedComponent).toMatchSnapshot();\n    });\n\n    it('calls update cartline pickup on selection of bopis', () => {\n        const spyUpdateCartLinePickupLocation = () => Promise.resolve({status: 'SUCCESS' as IActionStatus});\n\n        const pickUpInStoreProps: IPickUpInStoreProps = {\n            cartline: {\n                LineId: '10'\n            },\n            // @ts-ignore\n            product: {\n                ItemId: '10',\n                RecordId: 10\n            },\n            shipitText: 'Ship it',\n            pickUpInStoreText: 'Select a store for pickup',\n            changeStoreText: 'Change store',\n            // @ts-ignore\n            storeSelectorStateManager: {\n                openDialog: (input) => {\n                    return input.onLocationSelected({\n                        OrgUnitNumber: '1',\n                        OrgUnitName: 'Bellevue'\n                    }).then(() => {\n                        expect(spyUpdateCartLinePickupLocation).toHaveBeenCalled();\n                    });\n                }\n            },\n            // @ts-ignore\n            cartState:{\n                cart:{\n                    Id: '12345',\n                    CartLines: [\n                        {\n                            LineId: '10',\n                            FulfillmentStoreId: '1'\n                        }\n                    ]\n                },\n                updateCartLinePickupLocation: spyUpdateCartLinePickupLocation\n            },\n            orgUnitLocations:[\n                {\n                    OrgUnitNumber: '1',\n                    OrgUnitName: 'Bellevue'\n                }\n            ],\n            // @ts-ignore\n            deliveryOptions: {\n                DeliveryOptions: [\n                    // @ts-ignore partial mock\n                    {\n                        Code: '60'\n                    }\n                ]\n            },\n            pickupDeliveryModeCode: '60'\n\n        };\n\n        const pickUpInStore = PickUpInStore(pickUpInStoreProps);\n        const renderedComponent = mount(pickUpInStore!.defaultComponent as React.ReactElement);\n        renderedComponent.find('#ms-cart-bopis-pickup-option-10').simulate('change');\n    });\n\n    it('clears the previosly selected bopis on the cartline', () => {\n        const spyClearCartLinePickupLocation = jest.fn().mockImplementation(() => Promise.resolve({}));\n\n        const pickUpInStoreProps: IPickUpInStoreProps = {\n            cartline: {\n                LineId: '10',\n                FulfillmentStoreId: '1'\n            },\n            // @ts-ignore\n            product: {\n                ItemId: '10',\n                RecordId: 10\n            },\n            shipitText: 'Ship it',\n            pickUpInStoreText: 'Select a store for pickup',\n            changeStoreText: 'Change store',\n            // @ts-ignore\n            cartState:{\n                cart:{\n                    Id: '12345',\n                    CartLines: [\n                        {\n                            LineId: '10',\n                            FulfillmentStoreId: '1'\n                        }\n                    ]\n                },\n                clearCartLinePickupLocation: spyClearCartLinePickupLocation\n            },\n            orgUnitLocations:[\n                {\n                    OrgUnitNumber: '1',\n                    OrgUnitName: 'Bellevue'\n                }\n            ],\n            // @ts-ignore\n            deliveryOptions: {\n                // @ts-ignore partial mock\n                DeliveryOptions: [\n                    // @ts-ignore partial mock\n                    {\n                        Code: '60'\n                    }\n                ]\n            },\n            pickupDeliveryModeCode: '60'\n        };\n\n        const pickUpInStore = PickUpInStore(pickUpInStoreProps);\n        const renderedComponent = mount(pickUpInStore!.defaultComponent as React.ReactElement);\n        renderedComponent.find('#ms-cart-bopis-ship-option-10').simulate('change');\n        expect(spyClearCartLinePickupLocation).toHaveBeenCalled();\n    });\n});"]}