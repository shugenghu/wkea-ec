import { mount, render } from 'enzyme';
import * as React from 'react';
import { PickUpInStore } from '../components/cart-pick-up-in-store';
describe('Cart pick up in store', () => {
    it('renders correctly with a cartline which has already selected store', () => {
        const pickUpInStoreProps = {
            cartline: {
                LineId: '10',
                FulfillmentStoreId: '1'
            },
            product: {
                ItemId: '10',
                RecordId: 10
            },
            shipitText: 'Ship it',
            pickUpInStoreText: 'Select a store for pickup',
            changeStoreText: 'Change store',
            cartState: {
                cart: {
                    Id: '12345',
                    CartLines: [
                        {
                            LineId: '10',
                            FulfillmentStoreId: '1'
                        }
                    ]
                }
            },
            orgUnitLocations: [
                {
                    OrgUnitNumber: '1',
                    OrgUnitName: 'Bellevue'
                }
            ],
            deliveryOptions: {
                DeliveryOptions: [
                    {
                        Code: '60'
                    }
                ]
            },
            pickupDeliveryModeCode: '60'
        };
        const pickUpInStore = PickUpInStore(pickUpInStoreProps);
        const renderedComponent = render(React.createElement("div", null, pickUpInStore.defaultComponent));
        expect(renderedComponent).toMatchSnapshot();
    });
    it('renders correctly with a cartline which has already selected store but orgunitlocations is missing id', () => {
        const pickUpInStoreProps = {
            cartline: {
                LineId: '10',
                FulfillmentStoreId: 'Bellevue'
            },
            product: {
                ItemId: '10',
                RecordId: 10
            },
            shipitText: 'Ship it',
            pickUpInStoreText: 'Select a store for pickup',
            changeStoreText: 'Change store',
            cartState: {
                cart: {
                    Id: '12345',
                    CartLines: [
                        {
                            LineId: '10',
                            FulfillmentStoreId: '2'
                        }
                    ]
                }
            },
            orgUnitLocations: [
                {
                    OrgUnitNumber: '1',
                    OrgUnitName: 'Bellevue'
                }
            ],
            deliveryOptions: {
                DeliveryOptions: [
                    {
                        Code: '60'
                    }
                ]
            },
            pickupDeliveryModeCode: '60'
        };
        const pickUpInStore = PickUpInStore(pickUpInStoreProps);
        const renderedComponent = render(React.createElement("div", null, pickUpInStore.defaultComponent));
        expect(renderedComponent).toMatchSnapshot();
    });
    it('renders correctly with a cartline when no store is associated with it', () => {
        const pickUpInStoreProps = {
            cartline: {
                LineId: '10'
            },
            product: {
                ItemId: '10',
                RecordId: 10
            },
            shipitText: 'Ship it',
            pickUpInStoreText: 'Select a store for pickup',
            changeStoreText: 'Change store',
            cartState: {
                cart: {
                    Id: '12345',
                    CartLines: [
                        {
                            LineId: '10',
                            FulfillmentStoreId: '1'
                        }
                    ]
                }
            },
            orgUnitLocations: [
                {
                    OrgUnitNumber: '1',
                    OrgUnitName: 'Bellevue'
                }
            ],
            deliveryOptions: {
                DeliveryOptions: [
                    {
                        Code: '60'
                    }
                ]
            },
            pickupDeliveryModeCode: '60'
        };
        const pickUpInStore = PickUpInStore(pickUpInStoreProps);
        const renderedComponent = render(React.createElement("div", null, pickUpInStore.defaultComponent));
        expect(renderedComponent).toMatchSnapshot();
    });
    it('calls update cartline pickup on selection of bopis', () => {
        const spyUpdateCartLinePickupLocation = () => Promise.resolve({ status: 'SUCCESS' });
        const pickUpInStoreProps = {
            cartline: {
                LineId: '10'
            },
            product: {
                ItemId: '10',
                RecordId: 10
            },
            shipitText: 'Ship it',
            pickUpInStoreText: 'Select a store for pickup',
            changeStoreText: 'Change store',
            storeSelectorStateManager: {
                openDialog: (input) => {
                    return input.onLocationSelected({
                        OrgUnitNumber: '1',
                        OrgUnitName: 'Bellevue'
                    }).then(() => {
                        expect(spyUpdateCartLinePickupLocation).toHaveBeenCalled();
                    });
                }
            },
            cartState: {
                cart: {
                    Id: '12345',
                    CartLines: [
                        {
                            LineId: '10',
                            FulfillmentStoreId: '1'
                        }
                    ]
                },
                updateCartLinePickupLocation: spyUpdateCartLinePickupLocation
            },
            orgUnitLocations: [
                {
                    OrgUnitNumber: '1',
                    OrgUnitName: 'Bellevue'
                }
            ],
            deliveryOptions: {
                DeliveryOptions: [
                    {
                        Code: '60'
                    }
                ]
            },
            pickupDeliveryModeCode: '60'
        };
        const pickUpInStore = PickUpInStore(pickUpInStoreProps);
        const renderedComponent = mount(pickUpInStore.defaultComponent);
        renderedComponent.find('#ms-cart-bopis-pickup-option-10').simulate('change');
    });
    it('clears the previosly selected bopis on the cartline', () => {
        const spyClearCartLinePickupLocation = jest.fn().mockImplementation(() => Promise.resolve({}));
        const pickUpInStoreProps = {
            cartline: {
                LineId: '10',
                FulfillmentStoreId: '1'
            },
            product: {
                ItemId: '10',
                RecordId: 10
            },
            shipitText: 'Ship it',
            pickUpInStoreText: 'Select a store for pickup',
            changeStoreText: 'Change store',
            cartState: {
                cart: {
                    Id: '12345',
                    CartLines: [
                        {
                            LineId: '10',
                            FulfillmentStoreId: '1'
                        }
                    ]
                },
                clearCartLinePickupLocation: spyClearCartLinePickupLocation
            },
            orgUnitLocations: [
                {
                    OrgUnitNumber: '1',
                    OrgUnitName: 'Bellevue'
                }
            ],
            deliveryOptions: {
                DeliveryOptions: [
                    {
                        Code: '60'
                    }
                ]
            },
            pickupDeliveryModeCode: '60'
        };
        const pickUpInStore = PickUpInStore(pickUpInStoreProps);
        const renderedComponent = mount(pickUpInStore.defaultComponent);
        renderedComponent.find('#ms-cart-bopis-ship-option-10').simulate('change');
        expect(spyClearCartLinePickupLocation).toHaveBeenCalled();
    });
});
//# sourceMappingURL=cart-pick-up-in-store.test.js.map