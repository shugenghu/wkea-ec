import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, shallow } from 'enzyme';
import * as React from 'react';
import { mockResources } from '../__mocks__/mock-resources';
import Cart from '../cart';
import CartView from '../cart.view';
const mockContext = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            }
        },
        routes: {
            home: '/fedev',
            checkout: '/checkout'
        }
    },
    request: {
        user: {
            isAuthenticated: true
        },
        channel: {
            PickupDeliveryModeCode: '60'
        }
    }
};
const mockContextWithoutRoutes = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            }
        }
    },
    request: {
        channel: {
            PickupDeliveryModeCode: '60'
        }
    }
};
const mockCustomer = {
    AccountNumber: '004047',
    Name: 'Ilshat',
    MandatoryCreditLimit: true,
};
const mockData = {
    cart: {
        status: 'SUCCESS',
        result: undefined
    },
    products: {
        status: 'FAILED',
        result: undefined,
    },
    storeSelectorStateManager: {
        status: 'FAILED',
        result: undefined,
    },
    orgUnitLocations: {
        status: 'FAILED',
        result: undefined,
    },
    productAvailabilites: {
        status: 'FAILED',
        result: undefined,
    },
    wishlists: {
        status: 'FAILED',
        result: undefined,
    },
    wishlistItems: {
        status: 'FAILED',
        result: undefined,
    },
    deliveryOptions: {
        status: 'FAILED',
        result: undefined,
    },
    customerInformation: wrapInResolvedAsyncResult(mockCustomer),
    featureState: [{
            Name: 'Test',
            IsEnabled: false
        }],
    orderTemplates: {
        status: 'FAILED',
        result: undefined,
    }
};
describe('Cart module snapshot tests', () => {
    let moduleProps;
    it('renders as expected when no cart present', () => {
        moduleProps = {
            ...buildMockModuleProps(mockData, {}, {}, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            slots: {
                storeSelector: []
            },
            resources: mockResources
        };
        const result = mount(React.createElement(Cart, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).not.toBeTruthy();
        expect(viewProps.orderSummaryHeading).not.toBeTruthy();
        expect(viewProps.orderSummaryLineitems).not.toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });
    it('renders with order templates', () => {
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [{
                            RecordId: 10
                        }],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                }
                            ]
                        }
                    },
                },
                orderTemplates: {
                    status: 'SUCCESS',
                    result: [],
                },
                customerInformation: {
                    status: 'SUCCESS',
                    result: {
                        AccountNumber: 'account number',
                        IsB2b: true
                    },
                },
            }, {}, {}, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = mount(React.createElement(Cart, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeTruthy();
        expect(viewProps.cartlines.length).toBe(1);
        expect(viewProps.cartlines[0].addToOrderTemplate).toBeTruthy();
    });
    it('renders as expected when there are cartlines with no BOPIS', () => {
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [{
                            RecordId: 10
                        }],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                }
                            ]
                        }
                    },
                }
            }, {}, {}, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = mount(React.createElement(Cart, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeTruthy();
        expect(viewProps.orderSummaryHeading).toBeTruthy();
        expect(viewProps.orderSummaryLineitems).toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });
    it('renders as expected when there are cartlines with BOPIS', () => {
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [{
                            RecordId: 10
                        }],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    DeliveryMode: 60
                                }
                            ]
                        }
                    },
                }
            }, {}, {}, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            slots: {
                storeSelector: []
            },
        };
        const result = mount(React.createElement(Cart, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeTruthy();
        expect(viewProps.OrderSummaryWrapper).toBeTruthy();
        expect(viewProps.orderSummaryHeading).toBeTruthy();
        expect(viewProps.orderSummaryLineitems).toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });
    it('renders as expected when there are cartlines with no BOPIS', () => {
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                }
                            ]
                        }
                    },
                }
            }, {}, {}, mockContext),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = mount(React.createElement(Cart, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeNull();
        expect(viewProps.orderSummaryHeading).toBeTruthy();
        expect(viewProps.orderSummaryLineitems).toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });
    it('renders as expected when getUrlSync return the correct URL', () => {
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                }
                            ]
                        }
                    },
                }
            }, {}, {}, mockContextWithoutRoutes),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = mount(React.createElement(Cart, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeNull();
        expect(viewProps.orderSummaryHeading).toBeTruthy();
        expect(viewProps.orderSummaryLineitems).toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });
});
describe('Cart module unit tests', () => {
    let moduleProps;
    it('when an item is added to the wishlist it reemoves the item from the card if the itemId is passed', () => {
        const removeCartLinesSpy = jest.fn(() => new Promise(() => { return ''; }));
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [{
                            RecordId: 10,
                        },
                        {
                            RecordId: 20,
                        }
                    ],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                },
                                {
                                    ItemId: 20,
                                    LineId: 20,
                                    ProductId: 20
                                }
                            ]
                        },
                        removeCartLines: removeCartLinesSpy
                    },
                }
            }, {}, {}, mockContext),
            renderView: CartView,
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = shallow(React.createElement(Cart, Object.assign({}, moduleProps)));
        result.instance()._moveToWishlistSuccessHandler({ status: 'SUCCESS' }, {
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        });
    });
    it('when remove button it clicked it removes an item ', () => {
        const removeCartLinesSpy = jest.fn(() => new Promise(() => { return ''; }));
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [{
                            RecordId: 10,
                        },
                        {
                            RecordId: 20,
                        }
                    ],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                },
                                {
                                    ItemId: 20,
                                    LineId: 20,
                                    ProductId: 20
                                }
                            ]
                        },
                        removeCartLines: removeCartLinesSpy
                    },
                }
            }, {}, {}, mockContext),
            renderView: CartView,
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = shallow(React.createElement(Cart, Object.assign({}, moduleProps)));
        result.instance()._removeItemFromCartHandler({
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        });
        expect(removeCartLinesSpy).toHaveBeenCalled();
    });
    it('when updates quantity when the update quantity callback is called ', () => {
        const updateCartLineQuantitySpy = jest.fn(() => new Promise(() => { return ''; }));
        moduleProps = {
            ...buildMockModuleProps({
                ...mockData,
                products: {
                    status: 'SUCCESS',
                    result: [{
                            RecordId: 10,
                        },
                        {
                            RecordId: 20,
                        }
                    ],
                },
                cart: {
                    status: 'SUCCESS',
                    result: {
                        cart: {
                            Quantity: 1,
                            NetAmountWithoutTax: 25,
                            NetPrice: 27,
                            TaxAmount: 2.7,
                            TotalAmount: 25,
                            Id: '123',
                            ChargeLines: [
                                {
                                    ChargeCode: 'FREIGHT',
                                    Value: 20
                                }
                            ],
                            CartLines: [
                                {
                                    ItemId: 10,
                                    LineId: 10,
                                    ProductId: 10
                                },
                                {
                                    ItemId: 20,
                                    LineId: 20,
                                    ProductId: 20
                                }
                            ]
                        },
                        updateCartLineQuantity: updateCartLineQuantitySpy,
                    },
                }
            }, {}, {}, mockContext),
            renderView: CartView,
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };
        const result = shallow(React.createElement(Cart, Object.assign({}, moduleProps)));
        result.instance()._updateCartlineQuantity({
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        }, 5);
        expect(updateCartLineQuantitySpy).toHaveBeenCalled();
    });
});
//# sourceMappingURL=cart.test.js.map