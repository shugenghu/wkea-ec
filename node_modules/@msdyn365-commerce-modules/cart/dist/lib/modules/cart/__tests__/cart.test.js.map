{"version":3,"file":"cart.test.js","sourceRoot":"./src/","sources":["modules/cart/__tests__/cart.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';\nimport { IProductInventoryInformation, OrderTemplate, wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';\nimport { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';\nimport { ICartState } from '@msdyn365-commerce/global-state';\nimport { AsyncResult, CommerceList, FeatureState, OrgUnitLocation, ProductDeliveryOptions, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { Customer } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { mount, shallow } from 'enzyme';\nimport * as React from 'react';\nimport { mockResources } from '../__mocks__/mock-resources';\nimport Cart, { ICartViewProps } from '../cart';\nimport { ICartData } from '../cart.data';\nimport { ICartProps } from '../cart.props.autogenerated';\nimport CartView from '../cart.view';\n\n// @ts-ignore partial mock\nconst mockContext: ICoreContext = {\n    app: {\n        config: {\n            imageSettings: {\n                viewports: {\n                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },\n                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },\n                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }\n                },\n                lazyload: true\n            }\n        },\n        routes: {\n            home: '/fedev',\n            checkout: '/checkout'\n        }\n    },\n    request: {\n        // @ts-ignore partial mock\n        user: {\n            isAuthenticated: true\n        },\n        // @ts-ignore partial mock\n        channel: {\n            PickupDeliveryModeCode: '60'\n        }\n    }\n};\n\n// @ts-ignore partial mock\nconst mockContextWithoutRoutes: ICoreContext = {\n    app: {\n        config: {\n            imageSettings: {\n                viewports: {\n                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },\n                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },\n                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }\n                },\n                lazyload: true\n            }\n        }\n    },\n    request: {\n        // @ts-ignore partial mock\n        channel: {\n            PickupDeliveryModeCode: '60'\n        }\n    }\n};\n\nconst mockCustomer: Customer = {\n    AccountNumber: '004047',\n    Name: 'Ilshat',\n    MandatoryCreditLimit: true,\n};\n\nconst mockData: ICartData = {\n    cart: {\n        status: 'SUCCESS',\n        result: undefined\n    } as AsyncResult<ICartState>,\n    products: {\n        status: 'FAILED',\n        result: undefined,\n    } as AsyncResult<SimpleProduct[]>,\n    storeSelectorStateManager: {\n        status: 'FAILED',\n        result: undefined,\n    } as AsyncResult<IStoreSelectorStateManager>,\n    orgUnitLocations: {\n        status: 'FAILED',\n        result: undefined,\n    } as AsyncResult<OrgUnitLocation[]>,\n    productAvailabilites: {\n        status: 'FAILED',\n        result: undefined,\n    } as AsyncResult<IProductInventoryInformation[]>,\n    wishlists: {\n        status: 'FAILED',\n        result: undefined,\n    } as AsyncResult<CommerceList[]>,\n    wishlistItems: {\n        status: 'FAILED',\n        result: undefined,\n    } as AsyncResult<FullProduct[]>,\n    deliveryOptions: {\n        status: 'FAILED',\n        result: undefined,\n    } as AsyncResult<ProductDeliveryOptions[]>,\n    customerInformation: wrapInResolvedAsyncResult(mockCustomer),\n    featureState: [{\n        Name: 'Test',\n        IsEnabled: false\n    }] as unknown as AsyncResult<FeatureState[]>,\n    orderTemplates: {\n        status: 'FAILED',\n        result: undefined,\n    } as AsyncResult<OrderTemplate[]>\n};\n\ndescribe('Cart module snapshot tests', () => {\n    let moduleProps: ICartProps<ICartData>;\n\n    it('renders as expected when no cart present', () => {\n        moduleProps = {\n            ...buildMockModuleProps(mockData, {}, {}, mockContext) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; }),\n            slots: {\n                storeSelector: []\n            },\n            resources: mockResources\n        };\n\n        const result = mount(<Cart {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n        const viewProps: ICartViewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n        expect(viewProps.title).toBeTruthy();\n        expect(viewProps.cartlines).not.toBeTruthy();\n        expect(viewProps.orderSummaryHeading).not.toBeTruthy();\n        expect(viewProps.orderSummaryLineitems).not.toBeTruthy();\n        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();\n        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();\n        expect(viewProps.backToShoppingButton).toBeTruthy();\n    });\n\n    it('renders with order templates', () => {\n        moduleProps = {\n            // @ts-ignore\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    products: {\n                        status: 'SUCCESS',\n                        result: [{\n                            RecordId: 10\n                        }],\n                    } as AsyncResult<SimpleProduct[]>,\n                    // @ts-ignore\n                    cart: {\n                        status: 'SUCCESS',\n                        result: {\n                            cart: {\n                                Quantity: 1,\n                                NetAmountWithoutTax: 25,\n                                NetPrice: 27,\n                                TaxAmount: 2.7,\n                                TotalAmount: 25,\n                                Id: '123',\n                                ChargeLines: [\n                                    {\n                                        ChargeCode: 'FREIGHT',\n                                        Value: 20\n                                    }\n                                ],\n                                CartLines: [\n                                    {\n                                        ItemId: 10,\n                                        LineId: 10,\n                                        ProductId: 10\n                                    }\n                                ]\n                            }\n                        },\n                    } as AsyncResult<ICartState>,\n                    // @ts-ignore\n                    orderTemplates: {\n                        status: 'SUCCESS',\n                        result: [],\n                    } as AsyncResult<OrderTemplate[]>,\n                    // @ts-ignore\n                    customerInformation: {\n                        status: 'SUCCESS',\n                        result: {\n                            AccountNumber: 'account number',\n                            IsB2b: true\n                        },\n                    } as AsyncResult<Customer>,\n                },\n                {},\n                {},\n                mockContext,\n            ) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; }),\n            resources: mockResources,\n            slots: {\n                storeSelector: []\n            }\n        };\n\n        const result = mount(<Cart {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: ICartViewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps).toBeDefined();\n        expect(viewProps.title).toBeTruthy();\n        expect(viewProps.cartlines).toBeTruthy();\n        expect(viewProps.cartlines!.length).toBe(1);\n        expect(viewProps.cartlines![0].addToOrderTemplate).toBeTruthy();\n    });\n\n    it('renders as expected when there are cartlines with no BOPIS', () => {\n        moduleProps = {\n            // @ts-ignore\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    products: {\n                        status: 'SUCCESS',\n                        result: [{\n                            RecordId: 10\n                        }],\n                    } as AsyncResult<SimpleProduct[]>,\n                    // @ts-ignore\n                    cart: {\n                        status: 'SUCCESS',\n                        result: {\n                            cart: {\n                                Quantity: 1,\n                                NetAmountWithoutTax: 25,\n                                NetPrice: 27,\n                                TaxAmount: 2.7,\n                                TotalAmount: 25,\n                                Id: '123',\n                                ChargeLines: [\n                                    {\n                                        ChargeCode: 'FREIGHT',\n                                        Value: 20\n                                    }\n                                ],\n                                CartLines: [\n                                    {\n                                        ItemId: 10,\n                                        LineId: 10,\n                                        ProductId: 10\n                                    }\n                                ]\n                            }\n                        },\n                    } as AsyncResult<ICartState>\n                },\n                {},\n                {},\n                mockContext,\n            ) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; }),\n            resources: mockResources,\n            slots: {\n                storeSelector: []\n            }\n        };\n\n        const result = mount(<Cart {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: ICartViewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps).toBeDefined();\n        expect(viewProps.title).toBeTruthy();\n        expect(viewProps.cartlines).toBeTruthy();\n        expect(viewProps.orderSummaryHeading).toBeTruthy();\n        expect(viewProps.orderSummaryLineitems).toBeTruthy();\n        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();\n        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();\n        expect(viewProps.backToShoppingButton).toBeTruthy();\n    });\n\n    it('renders as expected when there are cartlines with BOPIS', () => {\n        moduleProps = {\n            // @ts-ignore\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    products: {\n                        status: 'SUCCESS',\n                        result: [{\n                            RecordId: 10\n                        }],\n                    } as AsyncResult<SimpleProduct[]>,\n                    // @ts-ignore\n                    cart: {\n                        status: 'SUCCESS',\n                        result: {\n                            cart: {\n                                Quantity: 1,\n                                NetAmountWithoutTax: 25,\n                                NetPrice: 27,\n                                TaxAmount: 2.7,\n                                TotalAmount: 25,\n                                Id: '123',\n                                ChargeLines: [\n                                    {\n                                        ChargeCode: 'FREIGHT',\n                                        Value: 20\n                                    }\n                                ],\n                                CartLines: [\n                                    {\n                                        ItemId: 10,\n                                        LineId: 10,\n                                        DeliveryMode: 60\n                                    }\n                                ]\n                            }\n                        },\n                    } as AsyncResult<ICartState>\n                },\n                {},\n                {},\n                mockContext\n            ) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; }),\n            resources: mockResources,\n            slots: {\n                storeSelector: []\n            },\n        };\n\n        const result = mount(<Cart {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: ICartViewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps).toBeDefined();\n        expect(viewProps.title).toBeTruthy();\n        expect(viewProps.cartlines).toBeTruthy();\n        expect(viewProps.OrderSummaryWrapper).toBeTruthy();\n        expect(viewProps.orderSummaryHeading).toBeTruthy();\n        expect(viewProps.orderSummaryLineitems).toBeTruthy();\n        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();\n        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();\n        expect(viewProps.backToShoppingButton).toBeTruthy();\n    });\n\n    it('renders as expected when there are cartlines with no BOPIS', () => {\n        moduleProps = {\n            // @ts-ignore\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    // @ts-ignore\n                    products: {\n                        status: 'SUCCESS',\n                        result: [],\n                    } as AsyncResult<SimpleProduct[]>,\n                    // @ts-ignore\n                    cart: {\n                        status: 'SUCCESS',\n                        result: {\n                            cart: {\n                                Quantity: 1,\n                                NetAmountWithoutTax: 25,\n                                NetPrice: 27,\n                                TaxAmount: 2.7,\n                                TotalAmount: 25,\n                                Id: '123',\n                                ChargeLines: [\n                                    {\n                                        ChargeCode: 'FREIGHT',\n                                        Value: 20\n                                    }\n                                ],\n                                CartLines: [\n                                    {\n                                        ItemId: 10,\n                                        LineId: 10,\n                                        ProductId: 10\n                                    }\n                                ]\n                            }\n                        },\n                    } as AsyncResult<ICartState>\n                },\n                {},\n                {},\n                mockContext\n            ) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; }),\n            resources: mockResources,\n            slots: {\n                storeSelector: []\n            }\n        };\n\n        const result = mount(<Cart {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: ICartViewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps).toBeDefined();\n        expect(viewProps.title).toBeTruthy();\n        expect(viewProps.cartlines).toBeNull();\n        expect(viewProps.orderSummaryHeading).toBeTruthy();\n        expect(viewProps.orderSummaryLineitems).toBeTruthy();\n        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();\n        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();\n        expect(viewProps.backToShoppingButton).toBeTruthy();\n    });\n\n    it('renders as expected when getUrlSync return the correct URL', () => {\n        moduleProps = {\n            // @ts-ignore\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    // @ts-ignore\n                    products: {\n                        status: 'SUCCESS',\n                        result: [],\n                    } as AsyncResult<SimpleProduct[]>,\n                    // @ts-ignore\n                    cart: {\n                        status: 'SUCCESS',\n                        result: {\n                            cart: {\n                                Quantity: 1,\n                                NetAmountWithoutTax: 25,\n                                NetPrice: 27,\n                                TaxAmount: 2.7,\n                                TotalAmount: 25,\n                                Id: '123',\n                                ChargeLines: [\n                                    {\n                                        ChargeCode: 'FREIGHT',\n                                        Value: 20\n                                    }\n                                ],\n                                CartLines: [\n                                    {\n                                        ItemId: 10,\n                                        LineId: 10,\n                                        ProductId: 10\n                                    }\n                                ]\n                            }\n                        },\n                    } as AsyncResult<ICartState>\n                },\n                {},\n                {},\n                mockContextWithoutRoutes\n            ) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; }),\n            resources: mockResources,\n            slots: {\n                storeSelector: []\n            }\n        };\n\n        const result = mount(<Cart {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: ICartViewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps).toBeDefined();\n        expect(viewProps.title).toBeTruthy();\n        expect(viewProps.cartlines).toBeNull();\n        expect(viewProps.orderSummaryHeading).toBeTruthy();\n        expect(viewProps.orderSummaryLineitems).toBeTruthy();\n        expect(viewProps.checkoutAsGuestButton).toBeTruthy();\n        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();\n        expect(viewProps.backToShoppingButton).toBeTruthy();\n    });\n});\n\ndescribe('Cart module unit tests', () => {\n    let moduleProps: ICartProps<ICartData>;\n\n    it('when an item is added to the wishlist it reemoves the item from the card if the itemId is passed', () => {\n        // tslint:disable-next-line:promise-must-complete\n        const removeCartLinesSpy = jest.fn(() => new Promise(() => { return ''; }));\n        moduleProps = {\n            // @ts-ignore\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    // @ts-ignore\n                    products: {\n                        status: 'SUCCESS',\n                        result: [{\n                            RecordId: 10,\n                        },\n                        {\n                            RecordId: 20,\n                        }\n                        ],\n                    } as AsyncResult<SimpleProduct[]>,\n                    // @ts-ignore\n                    cart: {\n                        status: 'SUCCESS',\n                        result: {\n                            cart: {\n                                Quantity: 1,\n                                NetAmountWithoutTax: 25,\n                                NetPrice: 27,\n                                TaxAmount: 2.7,\n                                TotalAmount: 25,\n                                Id: '123',\n                                ChargeLines: [\n                                    {\n                                        ChargeCode: 'FREIGHT',\n                                        Value: 20\n                                    }\n                                ],\n                                CartLines: [\n                                    {\n                                        ItemId: 10,\n                                        LineId: 10,\n                                        ProductId: 10\n                                    },\n                                    {\n                                        ItemId: 20,\n                                        LineId: 20,\n                                        ProductId: 20\n                                    }\n                                ]\n                            },\n                            removeCartLines: removeCartLinesSpy\n                        },\n                    } as AsyncResult<ICartState>\n                },\n                {},\n                {},\n                mockContext\n            ) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: CartView,\n            resources: mockResources,\n            slots: {\n                storeSelector: []\n            }\n        };\n\n        const result = shallow(<Cart {...moduleProps} />);\n        // @ts-ignore\n        result.instance()._moveToWishlistSuccessHandler({ status: 'SUCCESS' }, {\n            ItemId: 10,\n            LineId: 10,\n            ProductId: 10\n        });\n\n    });\n\n    it('when remove button it clicked it removes an item ', () => {\n        // tslint:disable-next-line:promise-must-complete\n        const removeCartLinesSpy = jest.fn(() => new Promise(() => { return ''; }));\n        moduleProps = {\n            // @ts-ignore\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    // @ts-ignore\n                    products: {\n                        status: 'SUCCESS',\n                        result: [{\n                            RecordId: 10,\n                        },\n                        {\n                            RecordId: 20,\n                        }\n                        ],\n                    } as AsyncResult<SimpleProduct[]>,\n                    // @ts-ignore\n                    cart: {\n                        status: 'SUCCESS',\n                        result: {\n                            cart: {\n                                Quantity: 1,\n                                NetAmountWithoutTax: 25,\n                                NetPrice: 27,\n                                TaxAmount: 2.7,\n                                TotalAmount: 25,\n                                Id: '123',\n                                ChargeLines: [\n                                    {\n                                        ChargeCode: 'FREIGHT',\n                                        Value: 20\n                                    }\n                                ],\n                                CartLines: [\n                                    {\n                                        ItemId: 10,\n                                        LineId: 10,\n                                        ProductId: 10\n                                    },\n                                    {\n                                        ItemId: 20,\n                                        LineId: 20,\n                                        ProductId: 20\n                                    }\n                                ]\n                            },\n                            removeCartLines: removeCartLinesSpy\n                        },\n                    } as AsyncResult<ICartState>\n                },\n                {},\n                {},\n                mockContext\n            ) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: CartView,\n            resources: mockResources,\n            slots: {\n                storeSelector: []\n            }\n        };\n\n        const result = shallow(<Cart {...moduleProps} />);\n        // @ts-ignore\n        result.instance()._removeItemFromCartHandler({\n            ItemId: 10,\n            LineId: 10,\n            ProductId: 10\n        });\n\n        expect(removeCartLinesSpy).toHaveBeenCalled();\n    });\n\n    it('when updates quantity when the update quantity callback is called ', () => {\n        // tslint:disable-next-line:promise-must-complete\n        const updateCartLineQuantitySpy = jest.fn(() => new Promise(() => { return ''; }));\n        moduleProps = {\n            // @ts-ignore\n            ...buildMockModuleProps(\n                {\n                    ...mockData,\n                    // @ts-ignore\n                    products: {\n                        status: 'SUCCESS',\n                        result: [{\n                            RecordId: 10,\n                        },\n                        {\n                            RecordId: 20,\n                        }\n                        ],\n                    } as AsyncResult<SimpleProduct[]>,\n                    // @ts-ignore\n                    cart: {\n                        status: 'SUCCESS',\n                        result: {\n                            cart: {\n                                Quantity: 1,\n                                NetAmountWithoutTax: 25,\n                                NetPrice: 27,\n                                TaxAmount: 2.7,\n                                TotalAmount: 25,\n                                Id: '123',\n                                ChargeLines: [\n                                    {\n                                        ChargeCode: 'FREIGHT',\n                                        Value: 20\n                                    }\n                                ],\n                                CartLines: [\n                                    {\n                                        ItemId: 10,\n                                        LineId: 10,\n                                        ProductId: 10\n                                    },\n                                    {\n                                        ItemId: 20,\n                                        LineId: 20,\n                                        ProductId: 20\n                                    }\n                                ]\n                            },\n                            updateCartLineQuantity: updateCartLineQuantitySpy,\n                        },\n                    } as AsyncResult<ICartState>\n                },\n                {},\n                {},\n                mockContext\n            ) as ICartProps<ICartData>,\n            // @ts-ignore\n            renderView: CartView,\n            resources: mockResources,\n            slots: {\n                storeSelector: []\n            }\n        };\n\n        const result = shallow(<Cart {...moduleProps} />);\n        // @ts-ignore\n        result.instance()._updateCartlineQuantity({\n            ItemId: 10,\n            LineId: 10,\n            ProductId: 10\n        },                                        5);\n\n        expect(updateCartLineQuantitySpy).toHaveBeenCalled();\n    });\n});"]}