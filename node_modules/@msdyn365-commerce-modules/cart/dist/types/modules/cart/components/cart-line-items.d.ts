import { IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';
import { IProductInventoryInformation, OrderTemplate } from '@msdyn365-commerce-modules/retail-actions';
import { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { IAddToOrderTemplateDialogResources, ICartlineResourceString, IDuplicateItemsWhenAddingToOrderTemplateDialogResources, IItemAddedToOrderTemplateDialogResources, IOrderTemplateNameDialogResources, IWishlistActionSuccessResult } from '@msdyn365-commerce/components';
import { ICoreContext, IGridSettings, IImageSettings, ITelemetry } from '@msdyn365-commerce/core';
import { ICartState } from '@msdyn365-commerce/global-state';
import { CartLine, CommerceList, Customer, OrgUnitLocation, ProductDeliveryOptions, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { IPickUpInStoreViewProps } from './cart-pick-up-in-store';
export interface ICartLineItemsProps {
    cartlines: CartLine[];
    cartState: ICartState | undefined;
    orgUnitLocations: OrgUnitLocation[] | undefined;
    resources: ICartlineResourceString;
    productAvailabilites: IProductInventoryInformation[] | undefined;
    products: SimpleProduct[] | undefined;
    productDeliveryOptions: ProductDeliveryOptions[] | undefined;
    pickupDeliveryModeCode?: string;
    gridSettings: IGridSettings;
    imageSettings: IImageSettings;
    id: string;
    typeName: string;
    context: ICoreContext;
    telemetry: ITelemetry;
    removeButtonText: string;
    addToWishlistButtonText: string;
    removeFromWishlistButtonText: string;
    shipItText: string;
    pickitUpText: string;
    changeStoreText: string;
    outOfStockText: string;
    outOfRangeOneText: string;
    outOfRangeFormatText: string;
    storeSelectorStateManager: IStoreSelectorStateManager | undefined;
    isStockCheckEnabled: boolean;
    wishlists: CommerceList[] | undefined;
    defaultWishlistName: string;
    maxCartlineQuantity: number;
    includeErrors?: boolean;
    showShippingChargesForLineItems?: boolean;
    telemetryContent?: ITelemetryContent;
    addToOrderTemplateDialogResources: IAddToOrderTemplateDialogResources;
    createOrderTemplateDialogResources: IOrderTemplateNameDialogResources;
    itemAddedToOrderTemplateDialogResources: IItemAddedToOrderTemplateDialogResources;
    duplicateItemsWhenAddingToOrderTemplateDialogResources: IDuplicateItemsWhenAddingToOrderTemplateDialogResources;
    addToOrderTemplateButtonText: string;
    addToOrderTemplateMessage: string;
    addItemToOrderTemplateError: string;
    orderTemplates: OrderTemplate[] | undefined;
    customerInformation: Customer | undefined;
    removeItemClickHandler(cartlineToRemove: CartLine): void;
    moveToWishlistSuccessHandler(result: IWishlistActionSuccessResult, cartlineId: CartLine): void;
    updateCartLinesQuantitySuccessHandler(cartline: CartLine, quantity: number): void;
}
export interface ICartlinesViewProps {
    cartline: React.ReactNode;
    pickUpInStore?: IPickUpInStoreViewProps;
    remove: React.ReactNode;
    addToWishlist: React.ReactNode | undefined;
    addToOrderTemplate: React.ReactNode | undefined;
    error?: string;
    data?: {
        product: SimpleProduct;
        cartline: CartLine;
    };
}
export declare const CartLineItems: (props: ICartLineItemsProps) => ICartlinesViewProps[] | null;
