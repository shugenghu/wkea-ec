/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import { ICartViewProps } from '../cart';
import { ICartResources } from '../cart.props.autogenerated';
import CartView from '../cart.view';

describe('Cart view unit tests - View', () => {
    const mockResources = { emptyCartText: 'foo'} as ICartResources;
    it('renders correctly with all attributes', () => {
        const moduleProps: ICartViewProps= buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            title: <h1>Cart</h1>,
            storeSelector :'{storeSelector}',
            OrderSummaryErrors:{
                Wrapper:{className: 'node-class-Wrapper' },
                header:'{header}',
                errors:['{}','{}']
            },
            cartlines:[
                {
                    cartline: <div>cartline1</div>,
                    remove: <button>removecartline1</button>,
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        shippingMethod: <div>Shipped to you</div>,
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined
                },
                {
                    cartline: <div>cartline2</div>,
                    remove: <button>removecartline2</button>,
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        defaultComponent: <div>Shipped to you</div>,
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined
                }
            ],
            orderSummaryHeading: <h2>Order summary</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsSignInUserButton: <button>Checkout</button>,
            checkoutAsGuestButton: <button>Checkout as guest</button>,
            backToShoppingButton: <button>Back to shopping</button>,
            orderSummaryLineitems:{
                subtotal: <span>Subtotal</span>,
                shipping: <span>estimatedshipping</span>,
                tax: <span>estimatedtax</span>,
                orderTotal: <span>ordertotal</span>,
                totalDiscounts:<span>totalDiscounts</span>
            },
            promoCode: <p>promo code</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no cartlines', () => {
        const moduleProps: ICartViewProps= buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: <h1>Cart</h1>,
            cartlines: undefined,
            orderSummaryHeading: <h2>Order summary</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>Checkout as guest</button>,
            backToShoppingButton: <button>Back to shopping</button>,
            orderSummaryLineitems:{
                subtotal: <span>Subtotal</span>,
                shipping: <span>estimatedshipping</span>,
                tax: <span>estimatedtax</span>,
                orderTotal: <span>ordertotal</span>,
                totalDiscounts:<span>totalDiscounts</span>
            },
            promoCode: <p>promo code</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no orderSummary lines', () => {
        const moduleProps: ICartViewProps= buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: <h1>Cart</h1>,
            cartlines: undefined,
            orderSummaryHeading: <h2>Order summary</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>Checkout as guest</button>,
            backToShoppingButton: <button>Back to shopping</button>,
            orderSummaryLineitems:undefined,
            promoCode: <p>promo code</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no orderSummarylines with discount lines', () => {
        const moduleProps: ICartViewProps= buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: <h1>Cart</h1>,
            cartlines: undefined,
            orderSummaryHeading: <h2>Order summary</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>Checkout as guest</button>,
            backToShoppingButton: <button>Back to shopping</button>,
            orderSummaryLineitems:{
                subtotal: <span>Subtotal</span>,
                shipping: <span>estimatedshipping</span>,
                tax: <span>estimatedtax</span>,
                orderTotal: <span>ordertotal</span>,
                totalDiscounts:<span>totalDiscounts</span>
            },
            promoCode: <p>promo code</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no orderSummarylines without discount lines', () => {
        const moduleProps: ICartViewProps= buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: <h1>Cart</h1>,
            cartlines: undefined,
            orderSummaryHeading: <h2>Order summary</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>Checkout as guest</button>,
            backToShoppingButton: <button>Back to shopping</button>,
            orderSummaryLineitems:{
                subtotal: <span>Subtotal</span>,
                shipping: <span>estimatedshipping</span>,
                tax: <span>estimatedtax</span>,
                orderTotal: <span>ordertotal</span>
            },
            promoCode: <p>promo code</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with loading message', () => {
        const moduleProps: ICartViewProps= buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            cartLoadingStatus:'loading',
            title: <h1>Cart</h1>,
            cartlines: undefined,
            orderSummaryHeading: <h2>Order summary</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>Checkout as guest</button>,
            backToShoppingButton: <button>Back to shopping</button>,
            orderSummaryLineitems:{
                subtotal: <span>Subtotal</span>,
                shipping: <span>estimatedshipping</span>,
                tax: <span>estimatedtax</span>,
                orderTotal: <span>ordertotal</span>
            },
            promoCode: <p>promo code</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with loading message', () => {
        const moduleProps: ICartViewProps= buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            cartDataResult:true,
            title: <h1>Cart</h1>,
            cartlines: undefined,
            orderSummaryHeading: <h2>Order summary</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>Checkout as guest</button>,
            backToShoppingButton: <button>Back to shopping</button>,
            orderSummaryLineitems:{
                subtotal: <span>Subtotal</span>,
                shipping: <span>estimatedshipping</span>,
                tax: <span>estimatedtax</span>,
                orderTotal: <span>ordertotal</span>
            },
            promoCode: <p>promo code</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

});
