/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';
import { IProductInventoryInformation, OrderTemplate, wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { FullProduct } from '@msdyn365-commerce/commerce-entities';
import { buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';
import { ICartState } from '@msdyn365-commerce/global-state';
import { AsyncResult, CommerceList, FeatureState, OrgUnitLocation, ProductDeliveryOptions, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { Customer } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { mount, shallow } from 'enzyme';
import * as React from 'react';
import { mockResources } from '../__mocks__/mock-resources';
import Cart, { ICartViewProps } from '../cart';
import { ICartData } from '../cart.data';
import { ICartProps } from '../cart.props.autogenerated';
import CartView from '../cart.view';

// @ts-ignore partial mock
const mockContext: ICoreContext = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            }
        },
        routes: {
            home: '/fedev',
            checkout: '/checkout'
        }
    },
    request: {
        // @ts-ignore partial mock
        user: {
            isAuthenticated: true
        },
        // @ts-ignore partial mock
        channel: {
            PickupDeliveryModeCode: '60'
        }
    }
};

// @ts-ignore partial mock
const mockContextWithoutRoutes: ICoreContext = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            }
        }
    },
    request: {
        // @ts-ignore partial mock
        channel: {
            PickupDeliveryModeCode: '60'
        }
    }
};

const mockCustomer: Customer = {
    AccountNumber: '004047',
    Name: 'Ilshat',
    MandatoryCreditLimit: true,
};

const mockData: ICartData = {
    cart: {
        status: 'SUCCESS',
        result: undefined
    } as AsyncResult<ICartState>,
    products: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<SimpleProduct[]>,
    storeSelectorStateManager: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<IStoreSelectorStateManager>,
    orgUnitLocations: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<OrgUnitLocation[]>,
    productAvailabilites: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<IProductInventoryInformation[]>,
    wishlists: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<CommerceList[]>,
    wishlistItems: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<FullProduct[]>,
    deliveryOptions: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<ProductDeliveryOptions[]>,
    customerInformation: wrapInResolvedAsyncResult(mockCustomer),
    featureState: [{
        Name: 'Test',
        IsEnabled: false
    }] as unknown as AsyncResult<FeatureState[]>,
    orderTemplates: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<OrderTemplate[]>
};

describe('Cart module snapshot tests', () => {
    let moduleProps: ICartProps<ICartData>;

    it('renders as expected when no cart present', () => {
        moduleProps = {
            ...buildMockModuleProps(mockData, {}, {}, mockContext) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; }),
            slots: {
                storeSelector: []
            },
            resources: mockResources
        };

        const result = mount(<Cart {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();
        const viewProps: ICartViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).not.toBeTruthy();
        expect(viewProps.orderSummaryHeading).not.toBeTruthy();
        expect(viewProps.orderSummaryLineitems).not.toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });

    it('renders with order templates', () => {
        moduleProps = {
            // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    products: {
                        status: 'SUCCESS',
                        result: [{
                            RecordId: 10
                        }],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart: {
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines: [
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    }
                                ]
                            }
                        },
                    } as AsyncResult<ICartState>,
                    // @ts-ignore
                    orderTemplates: {
                        status: 'SUCCESS',
                        result: [],
                    } as AsyncResult<OrderTemplate[]>,
                    // @ts-ignore
                    customerInformation: {
                        status: 'SUCCESS',
                        result: {
                            AccountNumber: 'account number',
                            IsB2b: true
                        },
                    } as AsyncResult<Customer>,
                },
                {},
                {},
                mockContext,
            ) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };

        const result = mount(<Cart {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();

        const viewProps: ICartViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeTruthy();
        expect(viewProps.cartlines!.length).toBe(1);
        expect(viewProps.cartlines![0].addToOrderTemplate).toBeTruthy();
    });

    it('renders as expected when there are cartlines with no BOPIS', () => {
        moduleProps = {
            // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    products: {
                        status: 'SUCCESS',
                        result: [{
                            RecordId: 10
                        }],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart: {
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines: [
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    }
                                ]
                            }
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContext,
            ) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };

        const result = mount(<Cart {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();

        const viewProps: ICartViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeTruthy();
        expect(viewProps.orderSummaryHeading).toBeTruthy();
        expect(viewProps.orderSummaryLineitems).toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });

    it('renders as expected when there are cartlines with BOPIS', () => {
        moduleProps = {
            // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    products: {
                        status: 'SUCCESS',
                        result: [{
                            RecordId: 10
                        }],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart: {
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines: [
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        DeliveryMode: 60
                                    }
                                ]
                            }
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContext
            ) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; }),
            resources: mockResources,
            slots: {
                storeSelector: []
            },
        };

        const result = mount(<Cart {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();

        const viewProps: ICartViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeTruthy();
        expect(viewProps.OrderSummaryWrapper).toBeTruthy();
        expect(viewProps.orderSummaryHeading).toBeTruthy();
        expect(viewProps.orderSummaryLineitems).toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });

    it('renders as expected when there are cartlines with no BOPIS', () => {
        moduleProps = {
            // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    // @ts-ignore
                    products: {
                        status: 'SUCCESS',
                        result: [],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart: {
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines: [
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    }
                                ]
                            }
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContext
            ) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };

        const result = mount(<Cart {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();

        const viewProps: ICartViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeNull();
        expect(viewProps.orderSummaryHeading).toBeTruthy();
        expect(viewProps.orderSummaryLineitems).toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });

    it('renders as expected when getUrlSync return the correct URL', () => {
        moduleProps = {
            // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    // @ts-ignore
                    products: {
                        status: 'SUCCESS',
                        result: [],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart: {
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines: [
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    }
                                ]
                            }
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContextWithoutRoutes
            ) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />; }),
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };

        const result = mount(<Cart {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();

        const viewProps: ICartViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps).toBeDefined();
        expect(viewProps.title).toBeTruthy();
        expect(viewProps.cartlines).toBeNull();
        expect(viewProps.orderSummaryHeading).toBeTruthy();
        expect(viewProps.orderSummaryLineitems).toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
        expect(viewProps.backToShoppingButton).toBeTruthy();
    });
});

describe('Cart module unit tests', () => {
    let moduleProps: ICartProps<ICartData>;

    it('when an item is added to the wishlist it reemoves the item from the card if the itemId is passed', () => {
        // tslint:disable-next-line:promise-must-complete
        const removeCartLinesSpy = jest.fn(() => new Promise(() => { return ''; }));
        moduleProps = {
            // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    // @ts-ignore
                    products: {
                        status: 'SUCCESS',
                        result: [{
                            RecordId: 10,
                        },
                        {
                            RecordId: 20,
                        }
                        ],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart: {
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines: [
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    },
                                    {
                                        ItemId: 20,
                                        LineId: 20,
                                        ProductId: 20
                                    }
                                ]
                            },
                            removeCartLines: removeCartLinesSpy
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContext
            ) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: CartView,
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };

        const result = shallow(<Cart {...moduleProps} />);
        // @ts-ignore
        result.instance()._moveToWishlistSuccessHandler({ status: 'SUCCESS' }, {
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        });

    });

    it('when remove button it clicked it removes an item ', () => {
        // tslint:disable-next-line:promise-must-complete
        const removeCartLinesSpy = jest.fn(() => new Promise(() => { return ''; }));
        moduleProps = {
            // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    // @ts-ignore
                    products: {
                        status: 'SUCCESS',
                        result: [{
                            RecordId: 10,
                        },
                        {
                            RecordId: 20,
                        }
                        ],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart: {
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines: [
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    },
                                    {
                                        ItemId: 20,
                                        LineId: 20,
                                        ProductId: 20
                                    }
                                ]
                            },
                            removeCartLines: removeCartLinesSpy
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContext
            ) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: CartView,
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };

        const result = shallow(<Cart {...moduleProps} />);
        // @ts-ignore
        result.instance()._removeItemFromCartHandler({
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        });

        expect(removeCartLinesSpy).toHaveBeenCalled();
    });

    it('when updates quantity when the update quantity callback is called ', () => {
        // tslint:disable-next-line:promise-must-complete
        const updateCartLineQuantitySpy = jest.fn(() => new Promise(() => { return ''; }));
        moduleProps = {
            // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    // @ts-ignore
                    products: {
                        status: 'SUCCESS',
                        result: [{
                            RecordId: 10,
                        },
                        {
                            RecordId: 20,
                        }
                        ],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart: {
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines: [
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    },
                                    {
                                        ItemId: 20,
                                        LineId: 20,
                                        ProductId: 20
                                    }
                                ]
                            },
                            updateCartLineQuantity: updateCartLineQuantitySpy,
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContext
            ) as ICartProps<ICartData>,
            // @ts-ignore
            renderView: CartView,
            resources: mockResources,
            slots: {
                storeSelector: []
            }
        };

        const result = shallow(<Cart {...moduleProps} />);
        // @ts-ignore
        result.instance()._updateCartlineQuantity({
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        },                                        5);

        expect(updateCartLineQuantitySpy).toHaveBeenCalled();
    });
});