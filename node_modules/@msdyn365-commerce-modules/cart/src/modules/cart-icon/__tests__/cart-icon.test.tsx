/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';
import { ICartState } from '@msdyn365-commerce/global-state';
import { AsyncResult, OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { mount, shallow } from 'enzyme';
import * as React from 'react';
import { mockResources } from '../__mocks__/mock-resources';
import CartIcon, { ICartIconViewProps } from '../cart-icon';
import { ICartIconData } from '../cart-icon.data';
import { ICartIconProps } from '../cart-icon.props.autogenerated';

// @ts-ignore partial mock
const mockContext: ICoreContext  = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            }
        },
        routes: {
            home: '/fedev',
            checkout: '/checkout'
        }
    },
    request:{
        // @ts-ignore partial mock
        user:{
            isAuthenticated: true
        },
        // @ts-ignore partial mock
        channel: {
            PickupDeliveryModeCode: '60',
        }
    },
};

// @ts-ignore partial mock
const mockContextWithoutRoutes: ICoreContext  = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            },
            enableHoverCart:true
        }
    },
    request:{
        // @ts-ignore partial mock
        user:{
            isAuthenticated: false,
            signInUrl:'https://xyz.com'
        },
    }
};

const mockData: ICartIconData = {
    cart: {
        status: 'SUCCESS',
        result: undefined
    } as AsyncResult<ICartState>,
    orgUnitLocations: {
        status: 'FAILED',
        result: undefined,
    } as AsyncResult<OrgUnitLocation[]>
};

describe('Cart icon module snapshot tests', () => {
    let moduleProps: ICartIconProps<ICartIconData>;

    it('renders as expected when no cart present', () => {
        moduleProps = {
            ...buildMockModuleProps(mockData, {}, {}, mockContext) as ICartIconProps<ICartIconData>,
             // @ts-ignore
             renderView: jest.fn(props => { return <div props={props} />;}),
             slots:{
                storeSelector:[]
             },
             resources: mockResources
        };

        const result = mount(<CartIcon {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();
        const viewProps: ICartIconViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.cartlines).not.toBeTruthy();
        expect(viewProps.checkoutAsGuestButton).not.toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
    });

    it('renders as expected when getUrlSync return the correct URL', () => {
        moduleProps = {
             // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    id:'cart-icon',
                    typeName:'{typeName}',
                    // @ts-ignore
                    products: {
                        status: 'SUCCESS',
                        result: [],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart:{
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines:[
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    }
                                ]
                            }
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContextWithoutRoutes
            ) as ICartIconProps<ICartIconData>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />;}),
            resources: mockResources,
            slots:{
                storeSelector:[]
            }
        };

        const result = mount(<CartIcon {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();

        const viewProps: ICartIconViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();

        expect(viewProps).toBeDefined();
        expect(viewProps.cartlines).toBeNull();
        expect(viewProps.checkoutAsGuestButton).toBeTruthy();
        expect(viewProps.checkoutAsSignInUserButton).toBeTruthy();
    });
});

describe('Cart module unit tests', () => {
    let moduleProps: ICartIconProps<ICartIconData>;

    it('when remove button it clicked it removes an item ', () => {
        // tslint:disable-next-line:promise-must-complete
        const removeCartLinesSpy = jest.fn(() => new Promise(() => { return '';}));
        moduleProps = {
             // @ts-ignore
            ...buildMockModuleProps(
                {
                    ...mockData,
                    // @ts-ignore
                    products: {
                        status: 'SUCCESS',
                        result: [{
                            RecordId:10,
                        },
                        {
                            RecordId:20,
                        }
                    ],
                    } as AsyncResult<SimpleProduct[]>,
                    // @ts-ignore
                    cart: {
                        status: 'SUCCESS',
                        result: {
                            cart:{
                                Quantity: 1,
                                NetAmountWithoutTax: 25,
                                NetPrice: 27,
                                TaxAmount: 2.7,
                                TotalAmount: 25,
                                Id: '123',
                                ChargeLines: [
                                    {
                                        ChargeCode: 'FREIGHT',
                                        Value: 20
                                    }
                                ],
                                CartLines:[
                                    {
                                        ItemId: 10,
                                        LineId: 10,
                                        ProductId: 10
                                    },
                                    {
                                        ItemId: 20,
                                        LineId: 20,
                                        ProductId: 20
                                    }
                                ]
                            },
                            removeCartLines: removeCartLinesSpy
                        },
                    } as AsyncResult<ICartState>
                },
                {},
                {},
                mockContext
            ) as ICartIconProps<ICartIconData>,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />;}),
            resources: mockResources,
            slots:{
                storeSelector:[]
            }
        };

        const result = shallow(<CartIcon {...moduleProps} />);
        // @ts-ignore
        result.instance()._removeItemFromCartHandler({
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        });

        expect(removeCartLinesSpy).toHaveBeenCalled();
        result.instance().setState({miniCartData:{products:[]}});
        result.update();
    });
});
