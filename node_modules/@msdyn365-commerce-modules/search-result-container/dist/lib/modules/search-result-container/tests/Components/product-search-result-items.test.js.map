{"version":3,"file":"product-search-result-items.test.js","sourceRoot":"./src/","sources":["modules/search-result-container/tests/Components/product-search-result-items.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { buildMockRequest, buildMockTelemetry, IRequestContext} from '@msdyn365-commerce/core';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy';\nimport { render } from 'enzyme';\nimport * as React from 'react';\nimport { ISearchResultContainerResources } from '../../../..';\nimport { ProductSearchResultItems } from '../../components';\n\nconst mockProduct: ProductSearchResult = {\n    RecordId: 22565429819,\n    ItemId: '81120',\n    Name: 'Cotton Polo',\n    Description: 'Casual shirts are made for the \\u201cgood times\\u201d.  Our custom fitting shirts are relaxed enough to be comfortable without looking baggy.',\n    BasePrice: 59.99,\n    Price: 59.99,\n    TotalRatings: 182,\n    AverageRating: 3.71428571428571,\n    PrimaryImageUrl:'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/Products%2F91032_000_001.png'\n};\n\nconst mockProducts: ProductSearchResult[] = [];\nmockProducts.push(mockProduct);\n\nconst mockResources: ISearchResultContainerResources = {\n    paginationAriaLabel: 'Page navigation example',\n    priceFree: 'Free',\n    originalPriceText: 'Original price',\n    currentPriceText: 'Current price',\n    ratingAriaLabel: 'average rating',\n    flipperNext: 'next',\n    flipperPrevious: 'previous',\n    noResultsForRefinersText: 'No products found for the selected criteria.',\n    resultCategoryNotFoundText:'No products found for the selected category',\n    resultSearchNotFoundText:'No products found for the given search term',\n    searchTextPrefix: 'Results for ',\n    numberOfProducts: '{0} products',\n    oneProduct: '1 product',\n    categoryLinkAriaLabel: 'go to',\n    sortByDropdownLabel:'Sort by:',\n    sortByOptionNameAsc:'Name: A to Z',\n    sortByOptionNameDesc:'Name: Z to A',\n    sortByOptionPriceAsc:'Price: Low to High',\n    sortByOptionPriceDesc: 'Price: High to Low',\n    sortByOptionRatingDesc:'Rating: High to Low',\n    sortByOptionRelevanceDesc:'Relevance',\n    placeholderTextMax:'No Max',\n    minLabel: 'Min',\n    maxLabel:'Max',\n    rangeNameFormat:'{0} Range',\n    validationErrorNotNumber:'Input should be a number',\n    validationErrorNotRange:'Invalid range: minimum should be less than maximum',\n    clearAllText: 'Clear all',\n    choiceSummaryLabel: '',\n    choiceFormat: '{1}',\n    choiceRangeValueFormat:'{0}-{1}',\n    choiceAriaLabel:'button press enter and space key to remove filter',\n    modalCloseButtonText:'close',\n    modalTitle: 'Sort & filter',\n    minValueSliderThumbAriaLabel: 'Minimum price',\n    maxValueSliderThumbAriaLabel: 'Maximum price',\n    featureSimilarLooksTitle: 'Shop Similar Looks'\n};\n\n// @ts-ignore\nconst mockRequest: IRequestContext = buildMockRequest();\n// @ts-ignore\nconst mockContext: ICoreContext = {\n    request: mockRequest,\n    app: {\n        config: {\n          hideRating: false\n        },\n    },\n     // @ts-ignore: Using partial for testing\n     cultureFormatter: {\n        formatCurrency: jest.fn(price => `$${price}`)\n    },\n    telemetry:buildMockTelemetry()\n};\nconst telemetry = buildMockTelemetry();\nconst telemetryContent = {  pageName: 'Homepage', moduleName: 'Product Collection', telemetry: telemetry} as ITelemetryContent;\n\ndescribe('Product search result component', () => {\n    it('renders correctly', () => {\n        const mockProps = {\n            products: mockProducts,\n            resources: mockResources,\n            context:mockContext,\n            telemetry:telemetry,\n            moduleId:'id',\n            moduleType:'typeName',\n            isCarousel: true,\n            telemetryContent: telemetryContent\n        };\n        const component = render(<ProductSearchResultItems {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});"]}