import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
const SearchResultContainerView = props => {
    const { SearchResultContainer, products, pagination, ProductsContainer, ProductSectionContainer, choiceSummary, isMobile, modalToggle, searchResultModal, TitleViewProps, refineMenu, categoryHierarchy, sortByOptions, CategoryNavContainer, RefineAndProductSectionContainer, errorMessage, FeatureSearchContainer, similarLookProduct } = props;
    if (isMobile) {
        return (React.createElement(Module, Object.assign({}, SearchResultContainer),
            renderCategoryHierarchy(categoryHierarchy),
            renderTitle(TitleViewProps),
            choiceSummary,
            modalToggle,
            createSearchResultModal(searchResultModal, refineMenu, sortByOptions),
            React.createElement(Node, Object.assign({}, FeatureSearchContainer), similarLookProduct),
            React.createElement(Node, Object.assign({}, ProductsContainer),
                errorMessage,
                products),
            pagination));
    }
    return (React.createElement(Module, Object.assign({}, SearchResultContainer),
        React.createElement(Node, Object.assign({}, CategoryNavContainer),
            categoryHierarchy && renderCategoryHierarchy(categoryHierarchy),
            TitleViewProps && renderTitleCount(TitleViewProps)),
        React.createElement(Node, Object.assign({}, RefineAndProductSectionContainer),
            refineMenu && renderRefiner(refineMenu),
            React.createElement(Node, Object.assign({}, ProductSectionContainer),
                TitleViewProps && renderTitle(TitleViewProps),
                choiceSummary,
                sortByOptions && renderSort(sortByOptions),
                React.createElement(Node, Object.assign({}, FeatureSearchContainer), similarLookProduct),
                React.createElement(Node, Object.assign({}, ProductsContainer),
                    errorMessage,
                    products),
                pagination))));
};
const createSearchResultModal = (modalProps, refineMenu, sortByDropDown) => {
    return React.cloneElement(modalProps.modal, {}, modalProps.modalHeader, createModalBody(modalProps, refineMenu, sortByDropDown), modalProps.modalFooter);
};
const createModalBody = (props, refineMenu, sortByDropDown) => {
    if (sortByDropDown) {
        return React.cloneElement(props.modalBody, {}, renderSort(sortByDropDown), renderRefiner(refineMenu));
    }
    return null;
};
const renderRefiner = (props) => {
    const { refiners, RefineMenuContainer, RefinerSectionContainer } = props;
    if (refiners) {
        return (React.createElement(Node, Object.assign({}, RefinerSectionContainer),
            React.createElement(Node, Object.assign({}, RefineMenuContainer), refiners.map((submenu, index) => (React.createElement(React.Fragment, { key: index }, submenu))))));
    }
    return null;
};
const renderSort = (props) => {
    const { SortingContainer, sortByDropDown } = props;
    if (sortByDropDown) {
        return (React.createElement(Node, Object.assign({}, SortingContainer), sortByDropDown));
    }
    return null;
};
const renderCategoryHierarchy = (props) => {
    const { CategoryHierarchyContainer, categoryHierarchyList, categoryHierarchySeparator } = props;
    if (categoryHierarchyList) {
        return (React.createElement(Node, Object.assign({}, CategoryHierarchyContainer), categoryHierarchyList.map((category, index) => (React.createElement(React.Fragment, { key: index },
            category,
            categoryHierarchyList && categoryHierarchyList[index + 1] && categoryHierarchySeparator)))));
    }
    return null;
};
const renderTitle = (props) => {
    const { title, TitleContainer } = props;
    if (title) {
        return (React.createElement(Node, Object.assign({}, TitleContainer),
            React.createElement("h2", null,
                title.titlePrefix,
                title.titleText)));
    }
    return null;
};
const renderTitleCount = (props) => {
    const { title, TitleContainer } = props;
    if (title) {
        return (React.createElement(Node, Object.assign({}, TitleContainer),
            React.createElement("h5", null, title.titleCount)));
    }
    return null;
};
export default SearchResultContainerView;
//# sourceMappingURL=search-result-container.view.js.map