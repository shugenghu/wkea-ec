{"version":3,"file":"refine-submenu.js","sourceRoot":"./src/","sources":["modules/search-result-container/components/refine-submenu.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\n\nimport { Button, Collapse, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { IProductRefinerHierarchy } from '@msdyn365-commerce/commerce-entities';\nimport {IAny, ICoreContext, IGeneric} from '@msdyn365-commerce/core';\nimport { DisplayTemplate, ProductRefinerValue } from '@msdyn365-commerce/retail-proxy';\nimport RangeRefineItem, { RangeRefineItemType } from './range-refine-item';\nimport RefineItem from './refine-item';\nimport { IRefineItemToggleNotification } from './refine-item-toggle-notification';\nimport { IRefineItemCommonProps } from './refine-item.props.common';\nimport { findMatchingRefinementCriterion, ProductRefinerSource, ProductRefinerTypeValue, ProductRefinerValueDataTypeValue } from './utilities';\n\n/**\n * Properties associated with the RefineSubmenu component\n */\nexport interface IRefineSubmenuProps {\n    tempRangeTypeTODO: RangeRefineItemType;\n    minValueSliderThumbAriaLabel?: string;\n    maxValueSliderThumbAriaLabel?: string;\n    productRefinerHierarchy: IProductRefinerHierarchy;\n    selectedRefinerValues: ProductRefinerValue[];\n    refineItemCommonProps: IRefineItemCommonProps;\n    isDisabled: boolean;\n    isExpandedOnInitialLoad: boolean;\n    context: ICoreContext<IGeneric<IAny>>;\n    moduleId: string;\n    moduleTypeName: string;\n    /** The telemetry content */\n    telemetryContent?: ITelemetryContent;\n    onUpdateRefiners(notfication: Readonly<IRefineItemToggleNotification>): void;\n    urlBuilder(refiner: IRefineItemToggleNotification): string;\n}\n\n/**\n * Refine submenu state\n */\nexport interface IRefineSubmenuState extends React.ComponentState {\n    expanded: boolean;\n}\n\n/**\n *\n * The RefineSubmenu component renders the submenu category and child items.\n * This computed observes the stateful category hierarchy object.\n * @extends {React.PureComponent<IRefineSubmenuProps>}\n */\nclass RefineSubmenu extends React.Component<IRefineSubmenuProps, IRefineSubmenuState> {\n    constructor(props: IRefineSubmenuProps) {\n        super(props);\n\n        this._onToggleItem = this._onToggleItem.bind(this);\n        this._onToggleSubmenu = this._onToggleSubmenu.bind(this);\n\n        let isExpanded = this.props.isExpandedOnInitialLoad;\n        if (this.props.productRefinerHierarchy.DataTypeValue === ProductRefinerValueDataTypeValue.Range) {\n            isExpanded = true;\n        }\n\n        this.state = {\n            expanded: isExpanded\n        };\n    }\n\n    public render(): JSX.Element | null {\n        const { productRefinerHierarchy, refineItemCommonProps } = this.props;\n\n        if (!productRefinerHierarchy) {\n            refineItemCommonProps.telemetry.error('Cannot render submenu without refiner hierarchy data');\n        }\n\n        if((productRefinerHierarchy.SourceValue === ProductRefinerSource.Rating) && (this.props.context.app.config.hideRating)) {\n           return null;\n        }\n        return (\n            <div className={`ms-refine-submenu list-group ${productRefinerHierarchy.KeyName}`}>\n                <Button\n                    className={this.state.expanded? 'ms-refine-submenu__toggle_expanded' : 'ms-refine-submenu__toggle_collapsed'}\n                    aria-label= {productRefinerHierarchy.KeyName || 'refiner.Name'}\n                    onClick={this._onToggleSubmenu}\n                    aria-expanded={this.state.expanded}\n                >\n                {productRefinerHierarchy.KeyName}\n                </Button>\n                <Collapse isOpen={this.state.expanded} timeout={350}>\n                    {this._renderChildItems(productRefinerHierarchy)}\n                </Collapse>\n            </div>\n        );\n    }\n\n    private _renderChildItems(productRefinerHierarchy: IProductRefinerHierarchy): JSX.Element | null {\n        switch (productRefinerHierarchy.DataTypeValue) {\n            case ProductRefinerValueDataTypeValue.Range:\n            case ProductRefinerValueDataTypeValue.RangeInput:\n                return this._renderRange(productRefinerHierarchy);\n            default:\n                return this._renderSingleMultiSelect(productRefinerHierarchy);\n        }\n    }\n\n    private _renderSingleMultiSelect(productRefinerHierarchy: IProductRefinerHierarchy): JSX.Element | null {\n        const { isDisabled, refineItemCommonProps, selectedRefinerValues, context } = this.props;\n        const isSingleSelect = (productRefinerHierarchy.RefinerTypeValue === ProductRefinerTypeValue.Single) && (productRefinerHierarchy.SourceValue === ProductRefinerSource.Rating);\n        const role = isSingleSelect ? { role: 'radiogroup' } : undefined;\n        const refinerValuesList = (productRefinerHierarchy.Values || []);\n        const listItems = refinerValuesList.map((child: ProductRefinerValue, index: number) => {\n            if (!child) {\n                refineItemCommonProps.telemetry.error(\n                    `[refine-submenu] Could not render refine item for refiner ${productRefinerHierarchy.RecordId} (${productRefinerHierarchy.KeyName})`\n                );\n                return null;\n            }\n\n            const selectedRefinementCriterion = findMatchingRefinementCriterion(child, selectedRefinerValues);\n\n            return (\n                <RefineItem\n                    parentProductRefinerHierarchy={productRefinerHierarchy}\n                    productRefinerValue={child}\n                    selectedRefinementCriterion={selectedRefinementCriterion}\n                    refineItemCommonProps={refineItemCommonProps}\n                    onToggle={this._onToggleItem}\n                    urlBuilder={this.props.urlBuilder}\n                    isDisabled={isDisabled}\n                    key={index}\n                    index= {index}\n                    context = {context}\n                    moduleId={this.props.moduleId}\n                    moduleTypeName={this.props.moduleTypeName}\n                    telemetryContent={this.props.telemetryContent}\n                />\n            );\n        });\n        return (\n            <ul className= {`ms-refine-submenu__list ${productRefinerHierarchy.KeyName}`} {...role} aria-label={productRefinerHierarchy.KeyName}>\n                {listItems}\n            </ul>\n        );\n    }\n\n    private _getRangeType(productRefinerHierarchy: IProductRefinerHierarchy): 'input' | 'slider' {\n        if (productRefinerHierarchy.DisplayTemplateValue === DisplayTemplate.Range ||\n            productRefinerHierarchy.DisplayTemplateValue === DisplayTemplate.Slider ||\n            productRefinerHierarchy.DisplayTemplateValue === DisplayTemplate.SliderWithBars) {\n            return 'slider';\n        }\n        return 'input';\n    }\n\n    private _renderRange(productRefinerHierarchy: IProductRefinerHierarchy): JSX.Element | null {\n        const { isDisabled, refineItemCommonProps, selectedRefinerValues, context, minValueSliderThumbAriaLabel, maxValueSliderThumbAriaLabel } = this.props;\n        const submenuClassNamePrefix = 'ms-refine-submenu__item list-group-item refine-submenu__item';\n        const refinerValuesList = (productRefinerHierarchy.Values || []);\n        const listItems = refinerValuesList.map((child: ProductRefinerValue, index: number) => {\n            if (!child) {\n                refineItemCommonProps.telemetry.error(\n                    `Could not render refine item for refiner ${productRefinerHierarchy.RecordId} (${productRefinerHierarchy.KeyName})`\n                );\n                return null;\n            }\n\n            const selectedRefinementCriterion = findMatchingRefinementCriterion(child, selectedRefinerValues);\n\n            const rangeType = this._getRangeType(productRefinerHierarchy);\n            const key = selectedRefinementCriterion ? `${selectedRefinementCriterion.LeftValueBoundString}-${selectedRefinementCriterion.RightValueBoundString}` : `not-selected-${index}`;\n            return (\n                <li className={`${submenuClassNamePrefix}--range`} key={index}>\n                    <RangeRefineItem\n                        parentProductRefinerHierarchy={productRefinerHierarchy}\n                        productRefinerValue={child}\n                        selectedRefinementCriterion={selectedRefinementCriterion}\n                        refineItemCommonProps={refineItemCommonProps}\n                        onToggle={this._onToggleItem}\n                        urlBuilder={this.props.urlBuilder}\n                        isDisabled={isDisabled}\n                        rangeType={rangeType}\n                        key={key}\n                        context={context}\n                        minValueSliderThumbAriaLabel={minValueSliderThumbAriaLabel}\n                        maxValueSliderThumbAriaLabel={maxValueSliderThumbAriaLabel}\n                        moduleId={this.props.moduleId}\n                        moduleTypeName={this.props.moduleTypeName}\n                    />\n                </li>\n            );\n        });\n        return <ul className={`ms-refine-submenu__list list-unstyled ${productRefinerHierarchy.KeyName}`}>{listItems}</ul>;\n    }\n\n    private _onToggleItem(itemToggleNotification: IRefineItemToggleNotification): void {\n        this.props.onUpdateRefiners(itemToggleNotification);\n    }\n\n    private _onToggleSubmenu(): void {\n        this.setState(prevState => ({\n            expanded: !prevState.expanded\n        }));\n    }\n}\n\nexport default RefineSubmenu;"]}