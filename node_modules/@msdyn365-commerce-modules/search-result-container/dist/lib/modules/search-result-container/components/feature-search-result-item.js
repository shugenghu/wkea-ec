import { getFallbackImageUrl, getProductPageUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { getPayloadObject, getTelemetryAttributes, onTelemetryClick } from '@msdyn365-commerce-modules/utilities';
import { Image } from '@msdyn365-commerce/core';
import * as React from 'react';
export const FeatureSearchResultItem = ({ product, context, imageSettings, resources, telemetryContent }) => {
    if (product === null) {
        return null;
    }
    const productName = product.Name;
    const productRecordId = product && product.RecordId ? product.RecordId : 0;
    const productUrl = getProductPageUrlSync(product.Name || '', productRecordId, context && context.actionContext, undefined);
    const fallbackImage = getFallbackImageUrl(product.ItemId, context.actionContext.requestContext.apiSettings);
    const payLoad = getPayloadObject('click', telemetryContent, productName, productRecordId.toString());
    const attribute = getTelemetryAttributes(telemetryContent, payLoad);
    return (React.createElement("div", { className: 'ms-feature-search-result__item' },
        React.createElement("a", Object.assign({ href: productUrl, onClick: onTelemetryClick(telemetryContent, payLoad, product.Name) }, attribute, { "aria-label": product.Name }),
            React.createElement("div", { className: 'msc-feature-search-result__item__image' }, renderProductPlacementImage(imageSettings, context.request.gridSettings, product.PrimaryImageUrl, product.Name, fallbackImage))),
        React.createElement("div", { className: 'msc-feature-search-result__item__detail' },
            React.createElement("p", { className: 'msc-feature-search-result__item__heading' }, resources.featureSimilarLooksTitle),
            renderProductTitle(product?.Name))));
};
function renderProductPlacementImage(imageSettings, gridSettings, imageUrl, altText, fallbackImage) {
    if (!imageUrl || !gridSettings || !imageSettings) {
        return null;
    }
    const img = {
        src: imageUrl,
        altText: altText ? altText : ''
    };
    const imageProps = {
        gridSettings: gridSettings,
        imageSettings: imageSettings,
        fallBackSrc: fallbackImage
    };
    return (React.createElement(Image, Object.assign({}, img, imageProps, { loadFailureBehavior: 'empty' })));
}
function renderProductTitle(title) {
    return React.createElement("h1", { className: 'msc-feature-search-result__item__product-title' }, title);
}
//# sourceMappingURL=feature-search-result-item.js.map