import { getPayloadObject, getTelemetryAttributes } from '@msdyn365-commerce-modules/utilities';
import { RatingComponent } from '@msdyn365-commerce/components';
import * as React from 'react';
export default class RefineItem extends React.Component {
    constructor(props) {
        super(props);
        this._onClick = (e) => {
            e.preventDefault();
            const { parentProductRefinerHierarchy, productRefinerValue, selectedRefinementCriterion } = this.props;
            if (productRefinerValue) {
                this.props.onToggle({
                    parentProductRefinerHierarchy: parentProductRefinerHierarchy,
                    productRefinerValue: productRefinerValue,
                    isSelecting: !selectedRefinementCriterion
                });
                setTimeout(() => {
                    this.anchorType.current && this.anchorType.current.focus();
                }, 0);
            }
        };
        this._onClick = this._onClick.bind(this);
        this.state = {
            isChecked: !!this.props.selectedRefinementCriterion
        };
        this.anchorType = React.createRef();
        this.payLoad = getPayloadObject('click', this.props.telemetryContent, '');
    }
    render() {
        const { isDisabled, refineItemCommonProps, parentProductRefinerHierarchy, productRefinerValue, selectedRefinementCriterion, index, children, onToggle, context, telemetryContent, ...attrs } = this.props;
        if (!productRefinerValue) {
            refineItemCommonProps.telemetry.error('[refine-item] Cannot render refineItem without productRefinerValue');
            return undefined;
        }
        if (!productRefinerValue.LeftValueBoundString) {
            refineItemCommonProps.telemetry.warning(`[refine-item]  RefineItem without LeftValueBoundString: ${JSON.stringify(productRefinerValue)}`);
        }
        const isSingleSelect = parentProductRefinerHierarchy.RefinerTypeValue === 0;
        let itemTypeClassName = isSingleSelect ? 'single-select' : 'multi-select';
        itemTypeClassName = `ms-refine-submenu-item ${itemTypeClassName}`;
        const inputType = isSingleSelect ? 'radio' : 'checkbox';
        itemTypeClassName = !!selectedRefinementCriterion ? `${itemTypeClassName}-checked` : itemTypeClassName;
        if (parentProductRefinerHierarchy.SourceValue === 4) {
            if (productRefinerValue.LeftValueBoundString) {
                this.payLoad.contentAction.etext = productRefinerValue.LeftValueBoundLocalizedString;
                const attribute = getTelemetryAttributes(telemetryContent, this.payLoad);
                return (React.createElement("li", { className: 'ms-refine-submenu-item', role: 'radio', "aria-checked": 'false', id: `${parentProductRefinerHierarchy.KeyName}_${index}`, "aria-label": `${parentProductRefinerHierarchy.KeyName}_${index}` },
                    React.createElement("a", Object.assign({ href: this._getRefinerUrl(), "aria-label": `${parentProductRefinerHierarchy.KeyName}_${productRefinerValue.LeftValueBoundLocalizedString}`, onClick: this._onClick }, attribute),
                        React.createElement(RatingComponent, { avgRating: parseInt(productRefinerValue.LeftValueBoundString, 10), ratingCount: productRefinerValue.LeftValueBoundLocalizedString ? productRefinerValue.LeftValueBoundLocalizedString : productRefinerValue.LeftValueBoundString, hideCount: false, readOnly: true, ariaLabel: '', context: context, id: this.props.moduleId, typeName: this.props.moduleTypeName, data: {} }),
                        React.createElement("span", { className: 'refine-submenu-item__rating' }, productRefinerValue.Count !== undefined && `(${productRefinerValue.Count})`))));
            }
            else {
                return undefined;
            }
        }
        else {
            this.payLoad.contentAction.etext = productRefinerValue.LeftValueBoundLocalizedString || productRefinerValue.LeftValueBoundString;
            const attribute = getTelemetryAttributes(telemetryContent, this.payLoad);
            return (React.createElement("li", { className: 'ms-refine-submenu-item', id: `${parentProductRefinerHierarchy.KeyName}_${index}` },
                React.createElement("a", Object.assign({ key: !!selectedRefinementCriterion ? 'true' : 'false', ref: this.anchorType, href: this._getRefinerUrl(), tabIndex: 0, onClick: this._onClick, className: itemTypeClassName, role: inputType, "aria-checked": !!selectedRefinementCriterion }, attribute, attrs),
                    React.createElement("span", { className: 'ms-refine-submenu-item__label' },
                        productRefinerValue.LeftValueBoundLocalizedString || productRefinerValue.LeftValueBoundString,
                        productRefinerValue.Count !== undefined && ` (${productRefinerValue.Count})`))));
        }
    }
    _getRefinerUrl() {
        const { urlBuilder, parentProductRefinerHierarchy, productRefinerValue, selectedRefinementCriterion } = this.props;
        if (productRefinerValue) {
            return urlBuilder({
                parentProductRefinerHierarchy: parentProductRefinerHierarchy,
                productRefinerValue: productRefinerValue,
                isSelecting: !selectedRefinementCriterion
            });
        }
        return '';
    }
}
//# sourceMappingURL=refine-item.js.map