import * as React from 'react';
import { Button, Collapse } from '@msdyn365-commerce-modules/utilities';
import RangeRefineItem from './range-refine-item';
import RefineItem from './refine-item';
import { findMatchingRefinementCriterion } from './utilities';
class RefineSubmenu extends React.Component {
    constructor(props) {
        super(props);
        this._onToggleItem = this._onToggleItem.bind(this);
        this._onToggleSubmenu = this._onToggleSubmenu.bind(this);
        let isExpanded = this.props.isExpandedOnInitialLoad;
        if (this.props.productRefinerHierarchy.DataTypeValue === 1) {
            isExpanded = true;
        }
        this.state = {
            expanded: isExpanded
        };
    }
    render() {
        const { productRefinerHierarchy, refineItemCommonProps } = this.props;
        if (!productRefinerHierarchy) {
            refineItemCommonProps.telemetry.error('Cannot render submenu without refiner hierarchy data');
        }
        if ((productRefinerHierarchy.SourceValue === 4) && (this.props.context.app.config.hideRating)) {
            return null;
        }
        return (React.createElement("div", { className: `ms-refine-submenu list-group ${productRefinerHierarchy.KeyName}` },
            React.createElement(Button, { className: this.state.expanded ? 'ms-refine-submenu__toggle_expanded' : 'ms-refine-submenu__toggle_collapsed', "aria-label": productRefinerHierarchy.KeyName || 'refiner.Name', onClick: this._onToggleSubmenu, "aria-expanded": this.state.expanded }, productRefinerHierarchy.KeyName),
            React.createElement(Collapse, { isOpen: this.state.expanded, timeout: 350 }, this._renderChildItems(productRefinerHierarchy))));
    }
    _renderChildItems(productRefinerHierarchy) {
        switch (productRefinerHierarchy.DataTypeValue) {
            case 1:
            case 4:
                return this._renderRange(productRefinerHierarchy);
            default:
                return this._renderSingleMultiSelect(productRefinerHierarchy);
        }
    }
    _renderSingleMultiSelect(productRefinerHierarchy) {
        const { isDisabled, refineItemCommonProps, selectedRefinerValues, context } = this.props;
        const isSingleSelect = (productRefinerHierarchy.RefinerTypeValue === 0) && (productRefinerHierarchy.SourceValue === 4);
        const role = isSingleSelect ? { role: 'radiogroup' } : undefined;
        const refinerValuesList = (productRefinerHierarchy.Values || []);
        const listItems = refinerValuesList.map((child, index) => {
            if (!child) {
                refineItemCommonProps.telemetry.error(`[refine-submenu] Could not render refine item for refiner ${productRefinerHierarchy.RecordId} (${productRefinerHierarchy.KeyName})`);
                return null;
            }
            const selectedRefinementCriterion = findMatchingRefinementCriterion(child, selectedRefinerValues);
            return (React.createElement(RefineItem, { parentProductRefinerHierarchy: productRefinerHierarchy, productRefinerValue: child, selectedRefinementCriterion: selectedRefinementCriterion, refineItemCommonProps: refineItemCommonProps, onToggle: this._onToggleItem, urlBuilder: this.props.urlBuilder, isDisabled: isDisabled, key: index, index: index, context: context, moduleId: this.props.moduleId, moduleTypeName: this.props.moduleTypeName, telemetryContent: this.props.telemetryContent }));
        });
        return (React.createElement("ul", Object.assign({ className: `ms-refine-submenu__list ${productRefinerHierarchy.KeyName}` }, role, { "aria-label": productRefinerHierarchy.KeyName }), listItems));
    }
    _getRangeType(productRefinerHierarchy) {
        if (productRefinerHierarchy.DisplayTemplateValue === 3 ||
            productRefinerHierarchy.DisplayTemplateValue === 1 ||
            productRefinerHierarchy.DisplayTemplateValue === 2) {
            return 'slider';
        }
        return 'input';
    }
    _renderRange(productRefinerHierarchy) {
        const { isDisabled, refineItemCommonProps, selectedRefinerValues, context, minValueSliderThumbAriaLabel, maxValueSliderThumbAriaLabel } = this.props;
        const submenuClassNamePrefix = 'ms-refine-submenu__item list-group-item refine-submenu__item';
        const refinerValuesList = (productRefinerHierarchy.Values || []);
        const listItems = refinerValuesList.map((child, index) => {
            if (!child) {
                refineItemCommonProps.telemetry.error(`Could not render refine item for refiner ${productRefinerHierarchy.RecordId} (${productRefinerHierarchy.KeyName})`);
                return null;
            }
            const selectedRefinementCriterion = findMatchingRefinementCriterion(child, selectedRefinerValues);
            const rangeType = this._getRangeType(productRefinerHierarchy);
            const key = selectedRefinementCriterion ? `${selectedRefinementCriterion.LeftValueBoundString}-${selectedRefinementCriterion.RightValueBoundString}` : `not-selected-${index}`;
            return (React.createElement("li", { className: `${submenuClassNamePrefix}--range`, key: index },
                React.createElement(RangeRefineItem, { parentProductRefinerHierarchy: productRefinerHierarchy, productRefinerValue: child, selectedRefinementCriterion: selectedRefinementCriterion, refineItemCommonProps: refineItemCommonProps, onToggle: this._onToggleItem, urlBuilder: this.props.urlBuilder, isDisabled: isDisabled, rangeType: rangeType, key: key, context: context, minValueSliderThumbAriaLabel: minValueSliderThumbAriaLabel, maxValueSliderThumbAriaLabel: maxValueSliderThumbAriaLabel, moduleId: this.props.moduleId, moduleTypeName: this.props.moduleTypeName })));
        });
        return React.createElement("ul", { className: `ms-refine-submenu__list list-unstyled ${productRefinerHierarchy.KeyName}` }, listItems);
    }
    _onToggleItem(itemToggleNotification) {
        this.props.onUpdateRefiners(itemToggleNotification);
    }
    _onToggleSubmenu() {
        this.setState(prevState => ({
            expanded: !prevState.expanded
        }));
    }
}
export default RefineSubmenu;
//# sourceMappingURL=refine-submenu.js.map