{"version":3,"file":"get-mapped-search-configuration.js","sourceRoot":"./src/","sources":["modules/search-result-container/actions/get-mapped-search-configuration.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,2CAA2C,CAAC;AAC1E,OAAO,EAAa,0BAA0B,EAAqG,MAAM,yBAAyB,CAAC;AAEnL,OAAO,EAAE,2BAA2B,EAAE,MAAM,+EAA+E,CAAC;AAc5H,MAAM,CAAC,MAAM,WAAW,GAAG;IACvB,yBAAyB,EAAE,cAAc;IACzC,qBAAqB,EAAE,mBAAmB;IAC1C,sBAAsB,EAAE,oBAAoB;IAC5C,mBAAmB,EAAE,UAAU;IAC/B,oBAAoB,EAAE,WAAW;IACjC,oBAAoB,EAAE,WAAW;IACjC,qBAAqB,EAAE,YAAY;CACtC,CAAC;AAKF,MAAM,OAAO,iBAAiB;IAG1B,YAAY,WAAiC;QAItC,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzE,uBAAkB,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC;QAC/C,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAL9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAKD,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAAC,KAAwB,EAAE,GAAmB;IAC5F,OAAO,2BAA2B,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,mBAAwC,EAAE,EAAE;QACzG,OAAqC,CAAC,mBAAmB,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAC,GAAG,CAAwC,CAAC,UAAsB,EAAE,EAAE;YACtJ,IAAI,GAAG,GAAG,EAAE,CAAC;YACb,IAAI,UAAU,CAAC,UAAU,EAAE;gBACvB,QAAO,UAAU,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE;oBACxC,KAAK,MAAM;wBACP,GAAG,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAAC,WAAW,CAAC,mBAAmB,CAAC;wBACnG,MAAM;oBACV,KAAK,OAAO;wBACR,GAAG,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,CAAC,WAAW,CAAC,oBAAoB,CAAC;wBACrG,MAAM;oBACV,KAAK,eAAe;wBAChB,GAAG,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC,CAAC,WAAW,CAAC,qBAAqB,CAAC;wBACvG,MAAM;oBACV,KAAK,SAAS;wBACV,GAAG,GAAG,WAAW,CAAC,yBAAyB,CAAC;wBAC5C,MAAM;oBACV,QAAQ;iBACX;aACJ;iBAAM;gBACH,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,yDAAyD,CAAC,CAAC;aACpF;YACD,IAAI,GAAG,EAAE;gBACL,OAAO;oBACH,GAAG;oBACH,UAAU;iBACb,CAAC;aACL;iBAAM;gBACH,OAAO,SAAS,CAAC;aACpB;QACL,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAE,CAAC;IACxB,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,SAA+C,EAAgB,EAAE;IACzF,OAAO,IAAI,iBAAiB,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AACvE,CAAC,CAAC;AAEF,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,oFAAoF;IACxF,MAAM,EAAwC,4BAA4B;IAC1E,KAAK,EAAE,WAAW;CACrB,CAAC,CAAC","sourcesContent":["import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';\nimport { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { SortColumn } from '@msdyn365-commerce/retail-proxy';\nimport { getSearchConfigurationAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\n// TODO: import from commerce entities when available\n// tslint:disable-next-line:interface-name\ninterface SearchConfiguration {\n    ProductSortColumns?: SortColumn[];\n}\n\n// tslint:disable-next-line:interface-name\nexport interface MappedSearchConfiguration {\n    key: string;\n    sortColumn: SortColumn;\n}\n\nexport const sortOptions = {\n    sortByOptionRelevanceDesc: 'Ranking-Desc',\n    sortByOptionRatingAsc: 'AverageRating-Asc',\n    sortByOptionRatingDesc: 'AverageRating-Desc',\n    sortByOptionNameAsc: 'Name-Asc',\n    sortByOptionNameDesc: 'Name-Desc',\n    sortByOptionPriceAsc: 'Price-Asc',\n    sortByOptionPriceDesc: 'Price-Desc'\n};\n\n/**\n * ActionInput class for the get-mapped-search-configuration Data Action\n */\nexport class MappedSearchInput implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey('MappedSearchInput', this.apiSettings);\n    public getCacheObjectType = () => 'MappedSearchInput';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Get a mapped search configuration that is easy to use for sorting\n */\nexport async function getMappedSearchConfiguration(input: MappedSearchInput, ctx: IActionContext): Promise<MappedSearchConfiguration[]> {\n    return getSearchConfigurationAsync({ callerContext: ctx }).then((searchConfiguration: SearchConfiguration) => {\n        return (<MappedSearchConfiguration[]>(searchConfiguration.ProductSortColumns || []).map<MappedSearchConfiguration | undefined>((sortColumn: SortColumn) => {\n            let key = '';\n            if (sortColumn.ColumnName) {\n                switch(sortColumn.ColumnName.toUpperCase()) {\n                    case 'NAME':\n                        key = sortColumn.IsDescending ? sortOptions.sortByOptionNameDesc : sortOptions.sortByOptionNameAsc;\n                        break;\n                    case 'PRICE':\n                        key = sortColumn.IsDescending ? sortOptions.sortByOptionPriceDesc : sortOptions.sortByOptionPriceAsc;\n                        break;\n                    case 'AVERAGERATING':\n                        key = sortColumn.IsDescending ? sortOptions.sortByOptionRatingDesc : sortOptions.sortByOptionRatingAsc;\n                        break;\n                    case 'RANKING':\n                        key = sortOptions.sortByOptionRelevanceDesc;\n                        break;\n                    default:\n                }\n            } else {\n                ctx.telemetry.warning('[get-mapped-search-configuration] unknown search option');\n            }\n            if (key) {\n                return {\n                    key,\n                    sortColumn\n                };\n            } else {\n                return undefined;\n            }\n        }).filter(Boolean));\n    });\n}\n\nexport const createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    return new MappedSearchInput(inputData.requestContext.apiSettings);\n};\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/search-result-container/get-mapped-search-configuration',\n    action: <IAction<MappedSearchConfiguration[]>>getMappedSearchConfiguration,\n    input: createInput\n});"]}