import { createObservableDataAction } from '@msdyn365-commerce/core';
import { BaseCollectionInput, createBaseCollectionInput } from './base-collection-action';
import { getProductRefinerHierarchy } from './get-product-refiner-hierarchy';
export class RefinersByCollectionInput extends BaseCollectionInput {
    constructor() {
        super(...arguments);
        this.getCacheObjectType = () => 'ProductRefiner';
        this.dataCacheType = () => {
            if (this.pageType !== 'Category' ||
                (this.refiners && this.refiners.length > 0) ||
                (this.queryResultSettings && this.queryResultSettings.Sorting && this.queryResultSettings.Sorting.Columns && this.queryResultSettings.Sorting.Columns.length > 0)) {
                return 'request';
            }
            else {
                return 'application';
            }
        };
    }
}
const createInput = (args) => {
    return createBaseCollectionInput(args, RefinersByCollectionInput);
};
async function action(input, ctx) {
    let searchProductId;
    if (input.pageType === 'Category') {
        if (input.category) {
            return getProductRefinerHierarchy({
                CategoryIds: [input.category],
                Context: {
                    ChannelId: input.apiSettings.channelId,
                    CatalogId: input.apiSettings.catalogId
                }
            }, input.queryResultSettings, ctx);
        }
        else {
            throw new Error('[GetRefinersForCollection]Category Page Detected, but no global categoryId found');
        }
    }
    else {
        if (input.searchText && (ctx.requestContext.query && ctx.requestContext.query.q)) {
            return getProductRefinerHierarchy({
                SearchCondition: input.searchText,
                Context: {
                    ChannelId: input.apiSettings.channelId,
                    CatalogId: input.apiSettings.catalogId
                }
            }, input.queryResultSettings, ctx);
        }
        else {
            if (input.searchText && (ctx.requestContext.query && ctx.requestContext.query.productId)) {
                searchProductId = Number(input.searchText);
                if (Number.isNaN(searchProductId)) {
                    throw new Error('Failed to cast search product id into a number.');
                }
                else {
                    return getProductRefinerHierarchy({
                        Context: {
                            ChannelId: input.apiSettings.channelId,
                            CatalogId: input.apiSettings.catalogId
                        },
                        RecommendationListId: 'looks',
                        Ids: [searchProductId || 0]
                    }, input.queryResultSettings, ctx);
                }
            }
            else {
                throw new Error('[GetFullProductsForCollection]Search Page Detected, but no q= or productId= query parameter found');
            }
        }
    }
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/search-result-container/get-refiners-for-collection',
    action: action,
    input: createInput
});
//# sourceMappingURL=get-refiners-for-collection.js.map