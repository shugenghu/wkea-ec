{"version":3,"file":"url-utils.js","sourceRoot":"./src/","sources":["modules/search-result-container/actions/url-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport MsDyn365, { IRequestContext } from '@msdyn365-commerce/core';\nimport { ProductRefinerValue, SortColumn } from '@msdyn365-commerce/retail-proxy';\n\n/**\n * Refiner Compression:\n * Refiners contains a non-trivial amount of data that is required to successfully make\n * a refiner-based API call. To allow for deep-linking of refiners in the URL, refiner data\n * must be compressed so that URL max length is not exceeded. Refiners will be compressed into\n * the following array style index-based format:\n * [DataTypeValue, LeftValueBoundString, RefinerRecordId, RefinerSourceValue, RightValueBoundString, UnitText]\n */\nconst compressedRefinerKeys = ['DataTypeValue', 'LeftValueBoundString', 'RefinerRecordId', 'RefinerSourceValue', 'RightValueBoundString', 'UnitText'];\n\n/**\n * Hydrates compressed refiner data from URL\n * @param fullUrl The full URL of the page\n */\nexport const hydrateRefinersFromUrl = (requestContext: IRequestContext): ProductRefinerValue[] => {\n    const compressedRefinerArray = parseQueryParam<(string | number)[][]>('refiners', requestContext);\n    if (!compressedRefinerArray || !compressedRefinerArray.length) {\n        return [];\n    }\n\n    return <ProductRefinerValue[]>compressedRefinerArray.map((compressedRefiner) => {\n        try {\n            const parsedRefiner: ProductRefinerValue = {};\n            compressedRefinerKeys.forEach((refinerKey, index) => {\n                // @ts-ignore: This line is intentionally not typesafe\n                parsedRefiner[refinerKey] = compressedRefiner[index];\n            });\n            return parsedRefiner;\n        } catch(e) {\n            return undefined;\n        }\n    }).filter(Boolean);\n};\n\n/**\n * Compressed a list of refiners for use in URLs\n * @param refiners The uncompressed refiners\n */\nexport const compressRefiners = (refiners: ProductRefinerValue[]) => {\n    const compressedRefiners: (string | number)[][] = [];\n\n    refiners.forEach((refiner) => {\n        const compressedRefiner: (string | number)[] = [];\n        compressedRefinerKeys.forEach((refinerKey) => {\n            // @ts-ignore: This line is intentionally not typesafe\n            compressedRefiner.push(refiner[refinerKey]);\n        });\n        compressedRefiners.push(compressedRefiner);\n    });\n\n    return compressedRefiners;\n};\n\n/**\n * Method which creates a URL contiaining serialized active refiners\n * @param fullUrl The Current URL of the page\n * @param refiners The refiners which should be added to the URL\n */\nexport const buildListPageUrl = (fullUrl: URL, refiners?: ProductRefinerValue[], sortingColumns?: SortColumn[], skipCount?: number) => {\n    // Refiner Change flow\n    if (refiners !== undefined) {\n        if (!refiners.length) {\n            fullUrl.searchParams.delete('refiners');\n        } else {\n            fullUrl.searchParams.set('refiners', JSON.stringify(compressRefiners(refiners)));\n        }\n\n        // Adding or removing a refiner means we want to always load page 1\n        fullUrl.searchParams.delete('skip');\n        return fullUrl.href;\n    }\n\n    if (sortingColumns !== undefined) {\n        if(!sortingColumns.length) {\n            fullUrl.searchParams.delete('sorting');\n        } else {\n            fullUrl.searchParams.set('sorting', JSON.stringify(sortingColumns));\n        }\n\n        // Changing the sort means always load page 1\n        fullUrl.searchParams.delete('skip');\n        return fullUrl.href;\n    }\n\n    if (skipCount) {\n        fullUrl.searchParams.set('skip', skipCount.toString());\n    }\n\n    return fullUrl.href;\n};\n\n/**\n * Parses a query param from the query object of the request context\n * @param key The query parameter key\n * @param requestContext The request context\n */\nexport const parseQueryParam = <T>(key: string, requestContext: IRequestContext): T | null => {\n    if(requestContext.query && requestContext.query[key]) {\n        return <T>JSON.parse(decodeURIComponent(requestContext.query[key]));\n    }\n    return null;\n};\n\n/**\n * Gets the current URL of the page from the request context\n * @param requestContext The request context\n */\nexport const getCurrentUrl = (requestContext: IRequestContext): URL => {\n    if(MsDyn365.isBrowser) {\n        return new URL(window.location.href);\n    } else {\n        // NOTE: Typing on requestURL is incorrect\n        if (requestContext.url.requestUrl.href) {\n            return new URL(requestContext.url.requestUrl.href);\n        } else {\n            return new URL(<string><unknown>(requestContext.url.requestUrl));\n        }\n    }\n};\n"]}