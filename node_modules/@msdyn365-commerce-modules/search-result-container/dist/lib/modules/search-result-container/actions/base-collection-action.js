import { buildCacheKey, QueryResultSettingsProxy } from '@msdyn365-commerce-modules/retail-actions';
import { convertToString } from '@msdyn365-commerce/retail-proxy';
import { toJS } from 'mobx';
import { hydrateRefinersFromUrl } from './url-utils';
function getIncludeAttributes(inputData) {
    if (inputData &&
        inputData.config &&
        inputData.config.includeAttributes !== undefined &&
        inputData.config.includeAttributes === true) {
        return true;
    }
    return false;
}
export class BaseCollectionInput {
    constructor(pageType, apiSettings, queryResultSettings, refiners, category, searchText, includeAttributes, locale) {
        this.getCacheKey = () => {
            const queryResultSettings = {
                ...this.queryResultSettings.Paging,
                ...toJS(this.queryResultSettings.Sorting)
            };
            const cacheKey = buildCacheKey(`${this.pageType}-${this.locale}-${this.category || this.searchText}-${this.refiners.map(refiner => `${refiner.RefinerRecordId + (refiner.LeftValueBoundString || '') + (refiner.RightValueBoundString || '')}-`)}-${convertToString(queryResultSettings)}`, this.apiSettings, this.locale);
            return cacheKey;
        };
        this.getCacheObjectType = () => 'CollectionActionResult';
        this.dataCacheType = () => 'request';
        this.pageType = pageType;
        this.apiSettings = apiSettings;
        this.category = category;
        this.searchText = searchText;
        this.queryResultSettings = queryResultSettings;
        this.refiners = refiners;
        this.includeAttributes = includeAttributes;
        this.locale = locale;
    }
}
export const createBaseCollectionInput = (args, inputClassConstuctor) => {
    const pageType = args.requestContext.urlTokens.pageType === 'Category' || (args.requestContext.query && args.requestContext.query.categoryId)
        ? 'Category'
        : 'Search';
    const queryResultSettings = QueryResultSettingsProxy.fromInputData(args).QueryResultSettings;
    const queryRefiners = hydrateRefinersFromUrl(args.requestContext);
    const includeAttributes = getIncludeAttributes(args);
    if (args.requestContext.query && args.requestContext.query.sorting) {
        queryResultSettings.Sorting = { Columns: JSON.parse(decodeURIComponent(args.requestContext.query.sorting)) };
    }
    if (pageType === 'Category') {
        return new inputClassConstuctor(pageType, args.requestContext.apiSettings, queryResultSettings, queryRefiners, +(args.requestContext.urlTokens.itemId || (args.requestContext.query && args.requestContext.query.categoryId) || 0), undefined, includeAttributes, args.requestContext.locale);
    }
    else if (pageType === 'Search' && args.requestContext.query && args.requestContext.query.q) {
        return new inputClassConstuctor(pageType, args.requestContext.apiSettings, queryResultSettings, queryRefiners, undefined, args.requestContext.query.q, includeAttributes, args.requestContext.locale);
    }
    else if (pageType === 'Search' && args.requestContext.query && args.requestContext.query.productId) {
        return new inputClassConstuctor(pageType, args.requestContext.apiSettings, queryResultSettings, queryRefiners, undefined, args.requestContext.query.productId, includeAttributes, args.requestContext.locale);
    }
    throw new Error('[getFullProductsForCollection]Unable to create input');
};
//# sourceMappingURL=base-collection-action.js.map