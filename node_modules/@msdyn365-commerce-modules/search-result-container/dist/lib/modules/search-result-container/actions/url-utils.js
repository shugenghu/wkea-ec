import MsDyn365 from '@msdyn365-commerce/core';
const compressedRefinerKeys = ['DataTypeValue', 'LeftValueBoundString', 'RefinerRecordId', 'RefinerSourceValue', 'RightValueBoundString', 'UnitText'];
export const hydrateRefinersFromUrl = (requestContext) => {
    const compressedRefinerArray = parseQueryParam('refiners', requestContext);
    if (!compressedRefinerArray || !compressedRefinerArray.length) {
        return [];
    }
    return compressedRefinerArray.map((compressedRefiner) => {
        try {
            const parsedRefiner = {};
            compressedRefinerKeys.forEach((refinerKey, index) => {
                parsedRefiner[refinerKey] = compressedRefiner[index];
            });
            return parsedRefiner;
        }
        catch (e) {
            return undefined;
        }
    }).filter(Boolean);
};
export const compressRefiners = (refiners) => {
    const compressedRefiners = [];
    refiners.forEach((refiner) => {
        const compressedRefiner = [];
        compressedRefinerKeys.forEach((refinerKey) => {
            compressedRefiner.push(refiner[refinerKey]);
        });
        compressedRefiners.push(compressedRefiner);
    });
    return compressedRefiners;
};
export const buildListPageUrl = (fullUrl, refiners, sortingColumns, skipCount) => {
    if (refiners !== undefined) {
        if (!refiners.length) {
            fullUrl.searchParams.delete('refiners');
        }
        else {
            fullUrl.searchParams.set('refiners', JSON.stringify(compressRefiners(refiners)));
        }
        fullUrl.searchParams.delete('skip');
        return fullUrl.href;
    }
    if (sortingColumns !== undefined) {
        if (!sortingColumns.length) {
            fullUrl.searchParams.delete('sorting');
        }
        else {
            fullUrl.searchParams.set('sorting', JSON.stringify(sortingColumns));
        }
        fullUrl.searchParams.delete('skip');
        return fullUrl.href;
    }
    if (skipCount) {
        fullUrl.searchParams.set('skip', skipCount.toString());
    }
    return fullUrl.href;
};
export const parseQueryParam = (key, requestContext) => {
    if (requestContext.query && requestContext.query[key]) {
        return JSON.parse(decodeURIComponent(requestContext.query[key]));
    }
    return null;
};
export const getCurrentUrl = (requestContext) => {
    if (MsDyn365.isBrowser) {
        return new URL(window.location.href);
    }
    else {
        if (requestContext.url.requestUrl.href) {
            return new URL(requestContext.url.requestUrl.href);
        }
        else {
            return new URL((requestContext.url.requestUrl));
        }
    }
};
//# sourceMappingURL=url-utils.js.map