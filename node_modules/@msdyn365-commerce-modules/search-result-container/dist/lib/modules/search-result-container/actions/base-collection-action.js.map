{"version":3,"file":"base-collection-action.js","sourceRoot":"./src/","sources":["modules/search-result-container/actions/base-collection-action.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport {\n    buildCacheKey,\n    QueryResultSettingsProxy\n} from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType,\n    IActionInput,\n    IAny,\n    ICommerceApiSettings,\n    ICreateActionContext,\n    IGeneric\n} from '@msdyn365-commerce/core';\nimport { convertToString, IQueryResultSettings, ProductRefinerValue, SortColumn } from '@msdyn365-commerce/retail-proxy';\nimport { toJS } from 'mobx';\nimport { hydrateRefinersFromUrl } from './url-utils';\n\nexport type listPageType = 'Category' | 'Search' | 'Unknown';\n\n/**\n * Get include attributes from config.\n */\nfunction getIncludeAttributes(inputData: ICreateActionContext<IGeneric<IAny>, IGeneric<IAny>>): boolean {\n    if (inputData &&\n        inputData.config &&\n        inputData.config.includeAttributes !== undefined &&\n        inputData.config.includeAttributes === true) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * BaseCollection Action Input\n */\nexport class BaseCollectionInput implements IActionInput {\n    public pageType: listPageType;\n    public category: number | undefined;\n    public searchText: string | undefined;\n    public refiners: ProductRefinerValue[];\n    public queryResultSettings: IQueryResultSettings;\n    public apiSettings: ICommerceApiSettings;\n    public includeAttributes:boolean | undefined;\n    public locale?:string;\n\n    constructor(\n        pageType: listPageType,\n        apiSettings: ICommerceApiSettings,\n        queryResultSettings: IQueryResultSettings,\n        refiners: ProductRefinerValue[],\n        category: number | undefined,\n        searchText: string | undefined,\n        includeAttributes: boolean |undefined,\n        locale?: string\n    ) {\n        this.pageType = pageType;\n        this.apiSettings = apiSettings;\n        this.category = category;\n        this.searchText = searchText;\n        this.queryResultSettings = queryResultSettings;\n        this.refiners = refiners;\n        this.includeAttributes=includeAttributes;\n        this.locale = locale;\n    }\n    public getCacheKey = () => {\n        const queryResultSettings = {\n            ...this.queryResultSettings.Paging,\n            ...toJS(this.queryResultSettings.Sorting)\n        };\n        // tslint:disable       \n        const cacheKey = buildCacheKey(\n            `${this.pageType}-${this.locale}-${this.category || this.searchText}-${this.refiners.map(refiner => `${refiner.RefinerRecordId + (refiner.LeftValueBoundString || '') + (refiner.RightValueBoundString || '')}-`)}-${convertToString(queryResultSettings)}`,\n            this.apiSettings, this.locale\n        );      \n        return cacheKey;\n    }\n   \n    public getCacheObjectType = () => 'CollectionActionResult';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n\n// TODO: Create a data model here or import one to capture the response of the action\nexport interface IGetFullProductsByCollectionData {\n    text: string;\n}\n\nexport type CollectionClassConstructor = new (\n    pageType: listPageType,\n    apiSettings: ICommerceApiSettings,\n    queryResultSettings: IQueryResultSettings,\n    refiners: ProductRefinerValue[],\n    category: number | undefined,\n    searchText: string | undefined,\n    includeAttributes: boolean | undefined,\n    locale?: string\n) => BaseCollectionInput;\n\n/**\n * TODO: Use this function to create the input required to make the action call\n */\nexport const createBaseCollectionInput = (\n    args: ICreateActionContext,\n    inputClassConstuctor: CollectionClassConstructor\n): BaseCollectionInput => {\n    const pageType =\n        args.requestContext.urlTokens.pageType === 'Category' || (args.requestContext.query && args.requestContext.query.categoryId)\n            ? 'Category'\n            : 'Search';\n\n    const queryResultSettings = QueryResultSettingsProxy.fromInputData(args).QueryResultSettings;\n    const queryRefiners = hydrateRefinersFromUrl(args.requestContext);\n    const includeAttributes=getIncludeAttributes(args);\n   \n    if(args.requestContext.query && args.requestContext.query.sorting) {\n        queryResultSettings.Sorting = { Columns: <SortColumn[]>JSON.parse(decodeURIComponent(args.requestContext.query.sorting)) };\n    }\n\n    if (pageType === 'Category') {\n        return new inputClassConstuctor(\n            pageType,\n            args.requestContext.apiSettings,\n            queryResultSettings,\n            queryRefiners,\n            +(args.requestContext.urlTokens.itemId || (args.requestContext.query && args.requestContext.query.categoryId) || 0),\n            undefined,\n            includeAttributes,\n            args.requestContext.locale\n        );\n    } else if (pageType === 'Search' && args.requestContext.query && args.requestContext.query.q) {\n        return new inputClassConstuctor(\n            pageType,\n            args.requestContext.apiSettings,\n            queryResultSettings,\n            queryRefiners,\n            undefined,\n            args.requestContext.query.q,\n            includeAttributes,\n            args.requestContext.locale\n        )\n    } else if (pageType === 'Search' && args.requestContext.query && args.requestContext.query.productId) {\n        return new inputClassConstuctor(\n            pageType,\n            args.requestContext.apiSettings,\n            queryResultSettings,\n            queryRefiners,\n            undefined,\n            args.requestContext.query.productId,\n            includeAttributes,\n            args.requestContext.locale\n        );\n    }\n\n    throw new Error('[getFullProductsForCollection]Unable to create input');\n};"]}