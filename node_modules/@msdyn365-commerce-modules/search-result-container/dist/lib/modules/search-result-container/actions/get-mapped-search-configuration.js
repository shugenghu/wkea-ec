import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';
import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getSearchConfigurationAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
export const sortOptions = {
    sortByOptionRelevanceDesc: 'Ranking-Desc',
    sortByOptionRatingAsc: 'AverageRating-Asc',
    sortByOptionRatingDesc: 'AverageRating-Desc',
    sortByOptionNameAsc: 'Name-Asc',
    sortByOptionNameDesc: 'Name-Desc',
    sortByOptionPriceAsc: 'Price-Asc',
    sortByOptionPriceDesc: 'Price-Desc'
};
export class MappedSearchInput {
    constructor(apiSettings) {
        this.getCacheKey = () => buildCacheKey('MappedSearchInput', this.apiSettings);
        this.getCacheObjectType = () => 'MappedSearchInput';
        this.dataCacheType = () => 'request';
        this.apiSettings = apiSettings;
    }
}
export async function getMappedSearchConfiguration(input, ctx) {
    return getSearchConfigurationAsync({ callerContext: ctx }).then((searchConfiguration) => {
        return (searchConfiguration.ProductSortColumns || []).map((sortColumn) => {
            let key = '';
            if (sortColumn.ColumnName) {
                switch (sortColumn.ColumnName.toUpperCase()) {
                    case 'NAME':
                        key = sortColumn.IsDescending ? sortOptions.sortByOptionNameDesc : sortOptions.sortByOptionNameAsc;
                        break;
                    case 'PRICE':
                        key = sortColumn.IsDescending ? sortOptions.sortByOptionPriceDesc : sortOptions.sortByOptionPriceAsc;
                        break;
                    case 'AVERAGERATING':
                        key = sortColumn.IsDescending ? sortOptions.sortByOptionRatingDesc : sortOptions.sortByOptionRatingAsc;
                        break;
                    case 'RANKING':
                        key = sortOptions.sortByOptionRelevanceDesc;
                        break;
                    default:
                }
            }
            else {
                ctx.telemetry.warning('[get-mapped-search-configuration] unknown search option');
            }
            if (key) {
                return {
                    key,
                    sortColumn
                };
            }
            else {
                return undefined;
            }
        }).filter(Boolean);
    });
}
export const createInput = (inputData) => {
    return new MappedSearchInput(inputData.requestContext.apiSettings);
};
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/search-result-container/get-mapped-search-configuration',
    action: getMappedSearchConfiguration,
    input: createInput
});
//# sourceMappingURL=get-mapped-search-configuration.js.map