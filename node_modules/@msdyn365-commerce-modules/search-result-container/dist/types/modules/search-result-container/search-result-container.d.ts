import { ILabeledDropdownOption, IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import { TextValueTranslation } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { ISearchResultModalViewProps } from './components';
import { ISearchResultContainerData } from './search-result-container.data';
import { ISearchResultContainerProps } from './search-result-container.props.autogenerated';
export interface ISearchResultContainerViewProps extends ISearchResultContainerProps<ISearchResultContainerData> {
    products?: React.ReactNode;
    className?: string;
    SearchResultContainer: IModuleProps;
    TitleViewProps: ITitleViewProps;
    categoryHierarchy: ICategoryHierarchyViewProps;
    pagination?: React.ReactNode;
    ProductsContainer: INodeProps;
    ProductSectionContainer: INodeProps;
    refineMenu: IRefineMenuViewProps;
    sortByOptions: ISortByViewProps;
    choiceSummary?: React.ReactNode;
    modalToggle: React.ReactNode;
    searchResultModal: ISearchResultModalViewProps;
    isMobile: boolean;
    CategoryNavContainer: INodeProps;
    RefineAndProductSectionContainer: INodeProps;
    errorMessage: React.ReactNode;
    FeatureSearchContainer: INodeProps;
    similarLookProduct?: React.ReactNode;
}
export interface ITitleViewProps {
    TitleContainer: INodeProps;
    title: ISearchResultTitle;
}
export interface IRefineMenuViewProps {
    RefineMenuContainer: INodeProps;
    RefinerSectionContainer: INodeProps;
    refiners?: React.ReactNode[];
}
export interface ICategoryHierarchyViewProps {
    categoryHierarchyList?: React.ReactNode[];
    categoryHierarchySeparator?: React.ReactNode;
    CategoryHierarchyContainer: INodeProps;
}
export interface ISortByViewProps {
    SortingContainer: INodeProps;
    sortByDropDown?: React.ReactNode;
}
export declare type GridSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';
export interface ISearchResultTitle {
    titlePrefix?: React.ReactNode;
    titleText?: React.ReactNode;
    titleCount?: React.ReactNode;
}
export interface ISearchResultContainerState {
    sortingState: ISortByCollectionState;
    modalIsOpen: boolean;
}
interface ISortByCollectionState {
    selectedSortByOption: ILabeledDropdownOption;
    pending: boolean;
}
export default class SearchResultContainer extends React.PureComponent<ISearchResultContainerProps<ISearchResultContainerData>, ISearchResultContainerState> {
    get isMobile(): boolean;
    private sortByDropdownOptions;
    private _refineItemCommonProps;
    private _pageType;
    private _viewport;
    private _modalToggleRef;
    private _sortAndFilterContainerRef;
    private expandrefinerCount;
    private telemetryContent;
    static getFriendlyName(locale: string, nameTranslations?: TextValueTranslation[]): string | undefined;
    constructor(props: ISearchResultContainerProps<ISearchResultContainerData>, state: ISearchResultContainerState);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private _getSearchResultModal;
    private _getCollectionTitle;
    private _getCategoryHierarchy;
    private _getSortingDropDown;
    private _getPagination;
    private _getRefineMenu;
    private _getChoiceSummary;
    private _updateSortByDropdown;
    private _getSortColumnFromSelectedOption;
    private _getCurrentlySelectedOption;
    private _onUpdateRefiners;
    private _buildRefinerUrl;
    private _onChoiceClicked;
    private _buildRefinerUrlForChoiceSummary;
    private _getViewport;
    private _toggleModal;
    private _updateViewport;
    private _getexpandRefinerCount;
}
export {};
