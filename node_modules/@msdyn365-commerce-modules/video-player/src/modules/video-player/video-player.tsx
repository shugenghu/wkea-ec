/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { getTelemetryObject, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { IVideoMetadata, Player } from '@msdyn365-commerce/components';
import { IPlayerOptions } from '@msdyn365-commerce/components/dist/types/videoplayer/components/data/player-options';
import { IPlayerResources } from '@msdyn365-commerce/components/dist/types/videoplayer/components/data/player-resources';
import { IPlayerData } from '@msdyn365-commerce/components/dist/types/videoplayer/players/player/Player.props';
import * as MsDyn365 from '@msdyn365-commerce/core';
import * as React from 'react';
import { IVideoPlayerConfig, IVideoPlayerProps } from './video-player.props.autogenerated';

export interface IVideoPlayerViewProps extends IVideoPlayerProps<{}> {
    player: React.ReactNode;
}

/**
 *
 * VideoPlayer component
 * @extends {React.PureComponent<IVideoPlayerProps<IVideoPlayerData>>}
 */
class VideoPlayer extends React.PureComponent<IVideoPlayerProps<IVideoPlayerConfig>> {
    private telemetryContent: ITelemetryContent;
    constructor(props: IVideoPlayerProps<IVideoPlayerConfig>) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,
                                                   this.props.friendlyName,
                                                   this.props.telemetry);
    }

    public render(): JSX.Element {
        const options: IPlayerOptions = this.props.config;
        const video: MsDyn365.IVideoData = this.props.config.video;
        const playerResources: IPlayerResources = {
            playAriaLabel: this.props.resources.playLabel,
            pauseAriaLabel: this.props.resources.pauseLabel,
            playingAriaLabel: this.props.resources.playingLabel,
            pausedAriaLabel: this.props.resources.pausedLabel,
            muteAriaLabel:this.props.resources.muteLabel,
            unMuteAriaLabel:this.props.resources.unMuteLabel,
            fullScreenAriaLabel:this.props.resources.fullScreenLabel,
            exitFullScreenAriaLabel:this.props.resources.exitFullScreenLabel,
            seekBarLabel:this.props.resources.seekBarLabel,
            videoTimeDurationLabel:this.props.resources.videoTimeDurationLabel,
            closedCaptionLabel:this.props.resources.closedCaptionLabel
        };
        const videoMetaData: IVideoMetadata = {};

        if (video) {
            videoMetaData.videoId = video.id;
            videoMetaData.title = video.title;
            videoMetaData.duration = video.playTime;

            if (video.thumbnail) {
                videoMetaData.posterframeUrl = video.thumbnail.src;
            }

            if (video._links
                && video._links.binaryReferences) {
                    videoMetaData.videoBinaryReferences = video._links.binaryReferences;
            }
        }
        const videoPlayerData: IPlayerData = { options: options, metaData: videoMetaData };
        const viewProps = {
            // Context for telemetry and raw data for C1 to do customization
            // Including computed data, state data and methods
            ...this.props,
            // tslint:disable-next-line: jsx-wrap-multiline
            player: <MsDyn365.Video className='' editProps={{ key: this.props.config.video, requestContext: this.props.context.request }}>
                        <Player playerData={videoPlayerData}  playerResources={playerResources} telemetryContent={this.telemetryContent} isEditor={this.props.context.request.params.isEditor} />
                    </MsDyn365.Video>
        };
        return this.props.renderView(viewProps) as React.ReactElement;
    }

}

export default VideoPlayer;
