import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import { Player } from '@msdyn365-commerce/components';
import * as MsDyn365 from '@msdyn365-commerce/core';
import * as React from 'react';
class VideoPlayer extends React.PureComponent {
    constructor(props) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    render() {
        const options = this.props.config;
        const video = this.props.config.video;
        const playerResources = {
            playAriaLabel: this.props.resources.playLabel,
            pauseAriaLabel: this.props.resources.pauseLabel,
            playingAriaLabel: this.props.resources.playingLabel,
            pausedAriaLabel: this.props.resources.pausedLabel,
            muteAriaLabel: this.props.resources.muteLabel,
            unMuteAriaLabel: this.props.resources.unMuteLabel,
            fullScreenAriaLabel: this.props.resources.fullScreenLabel,
            exitFullScreenAriaLabel: this.props.resources.exitFullScreenLabel,
            seekBarLabel: this.props.resources.seekBarLabel,
            videoTimeDurationLabel: this.props.resources.videoTimeDurationLabel,
            closedCaptionLabel: this.props.resources.closedCaptionLabel
        };
        const videoMetaData = {};
        if (video) {
            videoMetaData.videoId = video.id;
            videoMetaData.title = video.title;
            videoMetaData.duration = video.playTime;
            if (video.thumbnail) {
                videoMetaData.posterframeUrl = video.thumbnail.src;
            }
            if (video._links
                && video._links.binaryReferences) {
                videoMetaData.videoBinaryReferences = video._links.binaryReferences;
            }
        }
        const videoPlayerData = { options: options, metaData: videoMetaData };
        const viewProps = {
            ...this.props,
            player: React.createElement(MsDyn365.Video, { className: '', editProps: { key: this.props.config.video, requestContext: this.props.context.request } },
                React.createElement(Player, { playerData: videoPlayerData, playerResources: playerResources, telemetryContent: this.telemetryContent, isEditor: this.props.context.request.params.isEditor }))
        };
        return this.props.renderView(viewProps);
    }
}
export default VideoPlayer;
//# sourceMappingURL=video-player.js.map