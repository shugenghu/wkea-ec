import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import VideoPlayer from '../video-player';
import VideoPlayerView from '../video-player.view';
const mockConfig = {
    video: {
        title: 'test video',
        playTime: 81,
        _links: {
            binaryReferences: [
                {
                    sizeInBytes: 690479,
                    sourceHref: 'http://eus-streaming-video-rt-microsoft-com.akamaized.net/3b826980-878b-45db-a41a-0b630403456e/5d0958ac-40f6-4178-bc6d-113b9d2c_640x276_1180.mp4',
                    alias: '102',
                    href: 'cms/api/am/binary/RE2ooKv-102unsupported',
                    format: '102',
                    height: 276,
                    width: 640,
                    clientHref: 'http://eus-streaming-video-rt-microsoft-com.akamaized.net/3b826980-878b-45db-a41a-0b630403456e/5d0958ac-40f6-4178-bc6d-113b9d2c_640x276_1180.mp4',
                },
            ]
        },
        thumbnail: {
            title: 'Sample video Thumbnail',
            src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsS?ver=fd1c',
            width: 640,
            height: 360,
        },
    },
    autoplay: true,
    mute: true,
    loop: false,
    playPauseTrigger: true,
    controls: true,
    playFullScreen: false,
    hidePosterFrame: false,
    maskLevel: 40,
    thumbnailFullWidth: false,
    lazyLoad: true
};
const mockConfig1 = {
    autoplay: true,
    mute: true,
    loop: false,
    playPauseTrigger: true,
    controls: true,
    playFullScreen: false,
    hidePosterFrame: false,
    maskLevel: 40,
    thumbnailFullWidth: false,
    lazyLoad: true,
    video: null,
};
const mockConfig2 = {
    autoplay: true,
    mute: true,
    loop: false,
    playPauseTrigger: true,
    controls: true,
    playFullScreen: false,
    hidePosterFrame: false,
    maskLevel: 40,
    thumbnailFullWidth: false,
    lazyLoad: true,
    video: {
        title: 'test video',
        playTime: 81,
        _links: null,
        thumbnail: null,
    },
};
const mockResources = {
    playLabel: 'play',
    pauseLabel: 'pause',
    pausedLabel: 'paused',
    playingLabel: 'playing',
    muteLabel: 'mute',
    unMuteLabel: 'unmute',
    fullScreenLabel: 'full screen',
    exitFullScreenLabel: 'exit full screen',
    seekBarLabel: 'Seek bar',
    videoTimeDurationLabel: 'Video time duration',
    closedCaptionLabel: 'Closed caption',
    optionButtonLabel: 'More Options'
};
const mockActions = {};
describe('VideoPlayer', () => {
    it('renders correctly', () => {
        let moduleProps;
        moduleProps = { ...buildMockModuleProps({}, mockActions, mockConfig), resources: mockResources };
        const player = render(React.createElement(VideoPlayer, Object.assign({}, moduleProps)));
        expect(player).toMatchSnapshot();
    });
    it('renders correctly without video data & thumbnail', () => {
        let moduleProps;
        moduleProps = { ...buildMockModuleProps({}, {}, mockConfig1),
            resources: mockResources,
            renderView: VideoPlayerView };
        const component = render(React.createElement(VideoPlayer, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with video data & with thumbnail', () => {
        let moduleProps;
        moduleProps = { ...buildMockModuleProps({}, {}, mockConfig2),
            resources: mockResources,
            renderView: VideoPlayerView };
        const component = render(React.createElement(VideoPlayer, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=integration.test.js.map