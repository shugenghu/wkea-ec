/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getTelemetryObject, IComponentNodeProps, IModuleProps, INodeProps, ISingleSlideCarouselProps, ITelemetryContent, NodeTag, SingleSlideCarousel } from '@msdyn365-commerce-modules/utilities';
import { ProductComponent } from '@msdyn365-commerce/components';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { ProductSearchResult } from '@msdyn365-commerce/retail-proxy';
import classnames from 'classnames';
import * as React from 'react';
import { IProductCollectionProps, layout } from './product-collection.props.autogenerated';

export interface IProductCollectionViewProps extends IProductCollectionProps<{}> {
    heading?: React.ReactNode;
    ProductCollectionContainer: IModuleProps;
    SingleSlideCarouselComponentProps: INodeProps;
    GridComponentProps: INodeProps;
    products: IProductComponentViewProps[];
    isCarousel: boolean;
}

export interface IProductComponentViewProps {
    ProductContainer: INodeProps;
    productComponent: React.ReactNode;
}

/**
 * ProductCollection component
 */
class ProductCollection extends React.PureComponent<IProductCollectionProps<{}>> {
    private telemetryContent: ITelemetryContent;

    constructor(props: IProductCollectionProps<{}>) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,
                                                   this.props.friendlyName,
                                                   this.props.telemetry);
    }

    public render(): JSX.Element | null {
        const { heading, productCollection, className } = this.props.config;
        const { resources } = this.props;
        const products = productCollection && productCollection.products;
        const isCarousel = this.props.config.layout === layout.carousel;
        const headingComponent = heading && (
            <Msdyn365.Text
                className='ms-product-collection__heading'
                tag={heading.tag || 'h1'}
                text={heading.text}
                editProps={{onEdit:this.handleHeadingChange, requestContext:this.props.context.request}}
            />
        );

        const productCollectionViewProps = {
            ...this.props,
            heading: headingComponent,
            SingleSlideCarouselComponentProps: {
                tag: SingleSlideCarousel,
                className: '',
                flipperPrevLabel: resources.flipperPrevious,
                flipperNextLabel: resources.flipperNext,
                parentId: this.props.id,
                telemetryContent: this.telemetryContent
            } as IComponentNodeProps<ISingleSlideCarouselProps>,
            ProductCollectionContainer: {
                moduleProps: this.props,
                className:  classnames('ms-product-collection', className)
            },
            GridComponentProps: {
                tag: 'ul' as NodeTag,
                className: 'ms-product-collection__items',
            },
            isCarousel: isCarousel,
            products: products && products.length > 0 && products.map((item: ProductSearchResult, index: number) => this._getProduct(item, index)),
        };
        return this.props.renderView(productCollectionViewProps) as React.ReactElement;
    }
    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;

    private _getProduct = (product:ProductSearchResult, index: number): IProductComponentViewProps | null => {
        if(!product || !product.Name) {
            this.props.telemetry.trace('[product-collection] Product or product name is null');
            return null;
        }
        const telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,
                                                    this.props.friendlyName,
                                                    this.props.telemetry);
        const { imageSettings, allowBackNavigation } = this.props.config;
        const resources = this.props.resources;
        const breaCrumbType = this.props.context.app.config.breadcrumbType;
        const allowBack = allowBackNavigation && (breaCrumbType === 'back' || breaCrumbType === 'categoryAndBack');
        return {
            ProductContainer: {
                tag: 'li' as NodeTag,
                className: 'ms-product-collection__item',
                role: 'listitem',
                key: index,
            },
            productComponent: (
                <ProductComponent
                    context={this.props.context}
                    telemetryContent={telemetryContent}
                    imageSettings={imageSettings}
                    freePriceText={resources.priceFree}
                    originalPriceText={resources.originalPriceText}
                    currentPriceText={resources.currentPriceText}
                    ratingAriaLabel={resources.ratingAriaLabel}
                    allowBack={allowBack}
                    id={this.props.id}
                    typeName={this.props.typeName}
                    data={{product: product}}
                />
            )
        };
    }
}

export default ProductCollection;
