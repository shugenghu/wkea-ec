import { getTelemetryObject, SingleSlideCarousel } from '@msdyn365-commerce-modules/utilities';
import { ProductComponent } from '@msdyn365-commerce/components';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';
class ProductCollection extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this._getProduct = (product, index) => {
            if (!product || !product.Name) {
                this.props.telemetry.trace('[product-collection] Product or product name is null');
                return null;
            }
            const telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
            const { imageSettings, allowBackNavigation } = this.props.config;
            const resources = this.props.resources;
            const breaCrumbType = this.props.context.app.config.breadcrumbType;
            const allowBack = allowBackNavigation && (breaCrumbType === 'back' || breaCrumbType === 'categoryAndBack');
            return {
                ProductContainer: {
                    tag: 'li',
                    className: 'ms-product-collection__item',
                    role: 'listitem',
                    key: index,
                },
                productComponent: (React.createElement(ProductComponent, { context: this.props.context, telemetryContent: telemetryContent, imageSettings: imageSettings, freePriceText: resources.priceFree, originalPriceText: resources.originalPriceText, currentPriceText: resources.currentPriceText, ratingAriaLabel: resources.ratingAriaLabel, allowBack: allowBack, id: this.props.id, typeName: this.props.typeName, data: { product: product } }))
            };
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    render() {
        const { heading, productCollection, className } = this.props.config;
        const { resources } = this.props;
        const products = productCollection && productCollection.products;
        const isCarousel = this.props.config.layout === "carousel";
        const headingComponent = heading && (React.createElement(Msdyn365.Text, { className: 'ms-product-collection__heading', tag: heading.tag || 'h1', text: heading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } }));
        const productCollectionViewProps = {
            ...this.props,
            heading: headingComponent,
            SingleSlideCarouselComponentProps: {
                tag: SingleSlideCarousel,
                className: '',
                flipperPrevLabel: resources.flipperPrevious,
                flipperNextLabel: resources.flipperNext,
                parentId: this.props.id,
                telemetryContent: this.telemetryContent
            },
            ProductCollectionContainer: {
                moduleProps: this.props,
                className: classnames('ms-product-collection', className)
            },
            GridComponentProps: {
                tag: 'ul',
                className: 'ms-product-collection__items',
            },
            isCarousel: isCarousel,
            products: products && products.length > 0 && products.map((item, index) => this._getProduct(item, index)),
        };
        return this.props.renderView(productCollectionViewProps);
    }
}
export default ProductCollection;
//# sourceMappingURL=product-collection.js.map