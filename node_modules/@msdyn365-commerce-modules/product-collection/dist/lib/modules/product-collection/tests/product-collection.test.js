import * as React from 'react';
import { buildMockModuleProps, buildMockRequest, buildMockTelemetry } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import { ProductCollectionModule } from '../../..';
const mockProduct = {
    RecordId: 22565429819,
    ItemId: '81120',
    Name: 'Cotton Polo',
    Description: 'Casual shirts are made for the \u201cgood times\u201d.  Our custom fitting shirts are relaxed enough to be comfortable without looking baggy.',
    BasePrice: 59.99,
    Price: 59.99,
    TotalRatings: 182,
    AverageRating: 3.71428571428571,
    PrimaryImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/Products%2F91032_000_001.png'
};
const mockProductCollection = [];
mockProductCollection.push(mockProduct);
const mockProductList = {
    products: mockProductCollection,
    listMetadata: {}
};
const mockResources = {
    priceFree: 'Free',
    originalPriceText: 'Original price',
    currentPriceText: 'Current price',
    ratingAriaLabel: 'average rating',
    flipperNext: 'next',
    flipperPrevious: 'previous'
};
const mockRequest = buildMockRequest();
const mockContext = {
    request: mockRequest,
    app: {
        config: {
            hideRating: false
        },
    },
    cultureFormatter: {
        formatCurrency: jest.fn(price => `$${price}`)
    }
};
const mockConfigs = {
    productCollection: mockProductList,
};
describe('Product collection Module tests', () => {
    let moduleProps;
    const telemetry = buildMockTelemetry();
    it('Renders as expected when no product defined', () => {
        moduleProps = {
            ...buildMockModuleProps({}, mockConfigs, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
        };
        moduleProps.telemetry = telemetry;
        const result = mount(React.createElement(ProductCollectionModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.heading).not.toBeTruthy();
        expect(viewProps.products).not.toBeTruthy();
        result.unmount();
    });
});
//# sourceMappingURL=product-collection.test.js.map