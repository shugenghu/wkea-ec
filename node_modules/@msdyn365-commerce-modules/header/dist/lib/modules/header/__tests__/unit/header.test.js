import { mount } from 'enzyme';
import * as React from 'react';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import Header from '../../header';
import headerView from '../../header.view';
import * as MockUtillities from '../../utilities/mock-utilities';
const mockActions = {};
describe('Header', () => {
    let moduleProps;
    beforeAll(() => {
        moduleProps = {
            ...buildMockModuleProps(MockUtillities.getMockData(0, 'xyz', ''), mockActions, MockUtillities.mockHeaderConfig, MockUtillities.mockAnonContext),
            resources: MockUtillities.mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
    });
    it('renders header view.', () => {
        const moduleProps2 = {
            ...moduleProps,
            renderView: headerView,
            data: {
                cart: {
                    status: 'FAILED',
                    result: undefined
                },
                accountInformation: {
                    status: 'SUCCESS',
                    result: {
                        AccountNumber: 0,
                        FirstName: 'Name'
                    }
                }
            },
            config: {
                ...MockUtillities.mockHeaderConfig,
                myAccountLinks: [
                    {
                        linkText: 'Link',
                        linkUrl: { destinationUrl: 'www.test.com' }
                    },
                    {
                        linkText: undefined,
                        linkUrl: { destinationUrl: 'www.test.com' },
                        openInNewTab: false,
                    }
                ]
            }
        };
        const wrapper = mount(React.createElement(Header, Object.assign({}, moduleProps2)));
        wrapper.find('.ms-header__nav-icon').at(0).simulate('click');
        wrapper.find('Popover').prop('toggle')();
        wrapper.find('.ms-header__nav-icon').at(0).simulate('click');
        expect(wrapper.state('mobileMenuCollapsed')).toBeTruthy();
        wrapper.unmount();
    });
    it('renders correctly', () => {
        const result = mount(React.createElement(Header, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
    });
    it('fills slots properly when slots are not defined', () => {
        const result = mount(React.createElement(Header, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.menuBar.length).toEqual(0);
        expect(viewProps.search.length).toEqual(0);
    });
    it('fills slots properly when slots are defined', () => {
        const modulePropsWithSlots = {
            ...moduleProps,
            slots: {
                menuBar: [
                    {}
                ],
                search: [
                    {}
                ],
                cartIcon: [
                    {}
                ],
                siteOptions: [
                    {}
                ]
            }
        };
        const result = mount(React.createElement(Header, Object.assign({}, modulePropsWithSlots)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.menuBar.length).toEqual(1);
        expect(viewProps.search.length).toEqual(1);
    });
    it('all account related blocks should be null when not user is not present', () => {
        const modulePropsNoUser = {
            ...moduleProps,
            data: {
                cart: {
                    status: 'FAILED',
                    result: undefined
                },
                accountInformation: {
                    status: 'FAILED',
                    result: undefined
                }
            }
        };
        const result = mount(React.createElement(Header, Object.assign({}, modulePropsNoUser)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.AccountInfoDropdownParentContainer).toBeTruthy();
        expect(viewProps.AccountInfoDropdownPopoverConentContainer).not.toBeTruthy();
        expect(viewProps.signInLink).toBeTruthy();
        expect(viewProps.signOutLink).not.toBeTruthy();
        expect(viewProps.accountInfoDropdownButton).not.toBeTruthy();
        expect(viewProps.accountLinks).not.toBeTruthy();
    });
    it('sign in related blocks should be present when not user is not signed in', () => {
        const modulePropsNoUser = {
            ...moduleProps,
            data: {
                cart: {
                    status: 'FAILED',
                    result: undefined
                },
                accountInformation: {
                    status: 'FAILED',
                    result: undefined
                }
            }
        };
        const result = mount(React.createElement(Header, Object.assign({}, modulePropsNoUser)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.AccountInfoDropdownParentContainer).toBeTruthy();
        expect(viewProps.AccountInfoDropdownPopoverConentContainer).not.toBeTruthy();
        expect(viewProps.signInLink).toBeTruthy();
        expect(viewProps.signOutLink).not.toBeTruthy();
        expect(viewProps.accountInfoDropdownButton).not.toBeTruthy();
        expect(viewProps.accountLinks).not.toBeTruthy();
    });
    it('sign out and accounts related blocks should be present when not user is signed in but no account links in config', () => {
        const modulePropsWithUser = {
            ...moduleProps,
            data: {
                cart: {
                    status: 'FAILED',
                    result: undefined
                },
                accountInformation: {
                    status: 'SUCCESS',
                    result: {
                        AccountNumber: 0,
                        FirstName: 'Name'
                    }
                }
            }
        };
        const result = mount(React.createElement(Header, Object.assign({}, modulePropsWithUser)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.AccountInfoDropdownParentContainer).toBeTruthy();
        expect(viewProps.AccountInfoDropdownPopoverConentContainer).toBeTruthy();
        expect(viewProps.signInLink).not.toBeTruthy();
        expect(viewProps.signOutLink).toBeTruthy();
        expect(viewProps.accountInfoDropdownButton).toBeTruthy();
        expect(viewProps.accountLinks).not.toBeTruthy();
    });
    it('sign out and accounts related blocks should be present when not user is signed in and account links in config', () => {
        const modulePropsWithUser = {
            ...moduleProps,
            data: {
                cart: {
                    status: 'FAILED',
                    result: undefined
                },
                accountInformation: {
                    status: 'SUCCESS',
                    result: {
                        AccountNumber: 0,
                        FirstName: 'Name'
                    }
                }
            },
            config: {
                ...MockUtillities.mockHeaderConfig,
                myAccountLinks: [
                    {
                        linkText: 'Link',
                        linkUrl: { destinationUrl: 'www.test.com' }
                    },
                    {
                        linkText: undefined,
                        linkUrl: { destinationUrl: 'www.test.com' },
                        openInNewTab: false,
                    }
                ]
            }
        };
        const result = mount(React.createElement(Header, Object.assign({}, modulePropsWithUser)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.AccountInfoDropdownParentContainer).toBeTruthy();
        expect(viewProps.AccountInfoDropdownPopoverConentContainer).toBeTruthy();
        expect(viewProps.signInLink).not.toBeTruthy();
        expect(viewProps.signOutLink).toBeTruthy();
        expect(viewProps.accountInfoDropdownButton).toBeTruthy();
        expect(viewProps.accountLinks).toBeTruthy();
    });
});
//# sourceMappingURL=header.test.js.map