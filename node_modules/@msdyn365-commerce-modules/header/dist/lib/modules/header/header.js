import { __decorate } from "tslib";
import { Button, getPayloadObject, getTelemetryAttributes, getTelemetryObject, Modal, ModalBody, ModalHeader, onTelemetryClick, Popover, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { CartIconComponent, WishListIconComponent } from '@msdyn365-commerce/components';
import * as MsDyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { computed } from 'mobx';
import * as React from 'react';
import { Logo, NavIcon } from './components';
class Header extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleLinkTextChange = (linkIndex) => (event) => {
            if (this.props.config.myAccountLinks && this.props.config.myAccountLinks[linkIndex]) {
                this.props.config.myAccountLinks[linkIndex].linkText = event.target.value;
            }
        };
        this.popOverRef = React.createRef();
        this._toggleNavbar = this._toggleNavbar.bind(this);
        this._togglePopover = this._togglePopover.bind(this);
        this._keydown = this._keydown.bind(this);
        this.state = {
            mobileMenuCollapsed: true,
            signinPopoverOpen: false
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    get displayName() {
        const customer = this.props.data.accountInformation?.result;
        return customer ? customer.FirstName || customer.Name : undefined;
    }
    componentDidMount() {
        if (MsDyn365.msdyn365Commerce.isBrowser) {
            window.addEventListener('keydown', this._keydown);
        }
    }
    componentWillUnmount() {
        if (MsDyn365.msdyn365Commerce.isBrowser) {
            window.removeEventListener('keydown', this._keydown, false);
        }
    }
    render() {
        const { id, typeName, data: { accountInformation, cart: { result: cart } }, context: { request: { user } }, context, resources: { cartLabel } } = this.props;
        const { logoLink, logoImage } = this.props.config;
        const headerClassName = classnames('ms-header', this.props.config.className);
        const navbarKey = 'header-nav-mobile';
        const customer = accountInformation && accountInformation.result;
        const cartIconSlot = this._getSlot('cartIcon');
        const menuBarSlot = this._getSlot('menuBar');
        const searchSlot = this._getSlot('search');
        const siteOptionsSlot = this._getSlot('siteOptions');
        const viewProps = {
            ...this.props,
            ...(this.state),
            logo: React.createElement(Logo, Object.assign({}, { link: logoLink, image: logoImage, className: 'ms-header__logo', gridSettings: this.props.context.request.gridSettings, requestContext: this.props.context.request, telemetryContent: this.telemetryContent })),
            wishListIconDesktop: (React.createElement(WishListIconComponent, { className: 'ms-header__wishlist-desktop', showButtonTooltip: true, wishlistTooltipText: this.props.resources.wishlistTooltipText, context: context, id: id, typeName: typeName, telemetryContent: this.telemetryContent, data: {} })),
            wishListIconMobile: (React.createElement(WishListIconComponent, { className: 'ms-header__wishlist-mobile', showButtonTooltip: true, wishlistTooltipText: this.props.resources.wishlistTooltipText, context: context, id: id, typeName: typeName, telemetryContent: this.telemetryContent, data: {} })),
            cartIcon: (cartIconSlot && cartIconSlot.length > 0)
                ? cartIconSlot[0]
                : cart && React.createElement(CartIconComponent, { cartLabel: cartLabel, context: context, id: id, typeName: typeName, telemetryContent: this.telemetryContent, data: { cart: cart } }),
            navIcon: React.createElement(NavIcon, Object.assign({}, { resources: this.props.resources, isExpanded: !this.state.mobileMenuCollapsed, targetId: navbarKey, toggleNavBar: this._toggleNavbar, telemetryContent: this.telemetryContent })),
            menuBar: menuBarSlot && menuBarSlot.length && menuBarSlot || [],
            search: searchSlot && searchSlot.length && searchSlot || [],
            siteOptions: siteOptionsSlot && siteOptionsSlot.length && siteOptionsSlot || [],
            className: headerClassName,
            HeaderTag: {
                moduleProps: this.props,
                className: classnames(headerClassName),
                tag: 'header'
            },
            HeaderContainer: {
                className: classnames('ms-header__container')
            },
            HeaderTopBarContainer: {
                className: classnames('ms-header__topbar')
            },
            Divider: {
                className: classnames('ms-header__divider')
            },
            MobileMenuContainer: {
                tag: Modal,
                id: navbarKey,
                className: 'ms-header__mobile-hamburger',
                isOpen: !this.state.mobileMenuCollapsed,
                wrapClassName: 'ms-header__modal'
            },
            MobileMenuHeader: (React.createElement(ModalHeader, { className: 'ms-header__mobile-hamburger-menu-header', toggle: this._toggleNavbar })),
            MobileMenuBodyContainer: {
                tag: ModalBody,
                className: 'ms-header__mobile-hamburger-menu-body',
            },
            MobileMenuLinksContainer: {
                className: 'ms-header__mobile-hamburger-menu-links',
            },
            AccountInfoDropdownParentContainer: {
                className: 'ms-header__account-info'
            },
            AccountInfoDropdownPopoverConentContainer: customer && this.displayName && {
                tag: Popover,
                id: 'myprofilePopover',
                className: 'ms-header__account-info-content',
                placement: 'bottom',
                isOpen: this.state.signinPopoverOpen,
                target: this.popOverRef,
                toggle: this._togglePopover,
            } || undefined,
            signInLink: this._getSigninButton(customer, user, this.props.resources),
            signOutLink: this._getSignOutButton(customer, user, this.props.resources),
            accountInfoDropdownButton: this._getAccountInfoDropdownButton(customer),
            accountLinks: this._getAccountLinks(customer)
        };
        return this.props.renderView(viewProps);
    }
    _getSlot(slotName) {
        const { slots } = this.props;
        return (slots && slots[slotName] && slots[slotName].length && slots[slotName]) || null;
    }
    _getSigninButton(customer, user, resources) {
        const payLoad = getPayloadObject('click', this.telemetryContent, TelemetryConstant.SignIn);
        const attributes = getTelemetryAttributes(this.telemetryContent, payLoad);
        return !customer && (React.createElement(Button, Object.assign({ className: 'ms-header__signin-button', title: resources.signInLinkText, href: user && user.signInUrl, "aria-label": resources.signInLinkAriaText, onClick: onTelemetryClick(this.telemetryContent, payLoad, 'Sign in') }, attributes),
            React.createElement("span", { className: 'ms-header__signin-button-text', "aria-hidden": true }, resources.signInLinkText)));
    }
    _getSignOutButton(customer, user, resources) {
        const payLoad = getPayloadObject('click', this.telemetryContent, TelemetryConstant.SignOut);
        const attributes = getTelemetryAttributes(this.telemetryContent, payLoad);
        return customer && this.displayName && (React.createElement(Button, Object.assign({ className: 'ms-header__signout-button', title: resources.signOutLinkText, href: user && user.signOutUrl || '', "aria-label": resources.signOutLinkAriaText, onClick: onTelemetryClick(this.telemetryContent, payLoad, 'Sign out') }, attributes),
            React.createElement("span", { className: 'ms-header__signout-button-text', "aria-hidden": true }, resources.signOutLinkText)));
    }
    _getAccountInfoDropdownButton(customer) {
        const payLoad = getPayloadObject('click', this.telemetryContent, TelemetryConstant.MyProfile);
        const attributes = getTelemetryAttributes(this.telemetryContent, payLoad);
        return customer && this.displayName && (React.createElement(Button, Object.assign({ innerRef: this.popOverRef, className: 'ms-header__profile-button', "aria-describedby": 'myprofilePopover', onClick: this._togglePopover, color: 'link', "aria-expanded": this.state.signinPopoverOpen }, attributes),
            React.createElement("span", { className: 'ms-profile-button-text' }, this.displayName)));
    }
    _getAccountLinks(customer) {
        const { myAccountLinks } = this.props.config;
        const payLoad = getPayloadObject('click', this.telemetryContent, '');
        if (!customer || !this.displayName || !myAccountLinks || !myAccountLinks.length) {
            return undefined;
        }
        return myAccountLinks.map((cta, index) => {
            payLoad.contentAction.etext = cta.linkText;
            const attributes = getTelemetryAttributes(this.telemetryContent, payLoad);
            const editableLink = {
                ariaLabel: cta.ariaLabel,
                className: 'ms-signin-info__account-link-button',
                linkText: cta.linkText,
                linkUrl: cta.linkUrl.destinationUrl,
                openInNewTab: cta.openInNewTab,
                role: 'button',
                additionalProperties: attributes
            };
            return (React.createElement(MsDyn365.Link, { key: index, link: editableLink, editProps: { onTextChange: this.handleLinkTextChange(index), requestContext: this.props.context.request } }));
        });
    }
    _toggleNavbar() {
        this.setState({
            mobileMenuCollapsed: !this.state.mobileMenuCollapsed
        });
    }
    _togglePopover() {
        this.setState({
            signinPopoverOpen: !this.state.signinPopoverOpen
        });
    }
    _keydown(e) {
        if (e.keyCode === 27) {
            this.setState({ mobileMenuCollapsed: true });
        }
    }
}
__decorate([
    computed
], Header.prototype, "displayName", null);
export default Header;
//# sourceMappingURL=header.js.map