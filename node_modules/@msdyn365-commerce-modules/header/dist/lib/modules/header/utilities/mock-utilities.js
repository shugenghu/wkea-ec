import { buildHydratedMockActionContext, buildMockRequest } from '@msdyn365-commerce/core';
const mockRequest = buildMockRequest();
mockRequest.gridSettings = {
    xs: { w: 767, h: 0 },
    sm: { w: 991, h: 0 },
    md: { w: 1199, h: 0 },
    lg: { w: 1599, h: 0 },
    xl: { w: 1600, h: 0 }
};
mockRequest.user.isAuthenticated = true;
mockRequest.user.signInUrl = '/signin';
mockRequest.user.signOutUrl = '/signout';
mockRequest.user.signUpUrl = '/signup';
const mockAnonRequest = buildMockRequest();
mockAnonRequest.user.isAuthenticated = false;
mockAnonRequest.user.signInUrl = '/signin';
mockAnonRequest.user.signOutUrl = '/signout';
mockAnonRequest.user.signUpUrl = '/signup';
const mockActionContext = buildHydratedMockActionContext();
export const mockAuthContext = {
    actionContext: mockActionContext,
    request: mockRequest,
    app: {
        config: {
            disableTooltip: true
        },
        routes: {
            wishlist: '/wishlist'
        }
    }
};
export const mockAnonContext = {
    actionContext: mockActionContext,
    request: mockAnonRequest,
    app: {
        config: {
            disableTooltip: true
        },
        routes: {
            wishlist: '/wishlist'
        }
    }
};
export const mockHeaderConfig = {
    logoLink: {
        linkUrl: {
            destinationUrl: 'https://ppe.fabrikam.com/fe'
        },
        ariaLabel: 'fabrikam'
    },
    logoImage: {
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1G3L'
    }
};
export const mockResources = {
    mobileHamburgerAriaLabel: 'Mobile view hamburger aria label',
    wishlistTooltipText: 'My wishlist',
    cartLabel: 'Shopping bag, {0} items',
    signInLinkText: 'Sign In',
    signInLinkAriaText: 'Sign In',
    signOutLinkText: 'Sign Out',
    signOutLinkAriaText: 'Sign Out'
};
export const getMockData = (totalItemsInCart = 0, accountNumber = '2', firstName = '') => {
    return {
        cart: {
            status: 'SUCCESS',
            result: {
                totalItemsInCart: totalItemsInCart
            }
        },
        accountInformation: {
            status: 'SUCCESS',
            result: {
                AccountNumber: accountNumber,
                FirstName: firstName
            }
        }
    };
};
export const getMockErrorData = () => {
    return {
        cart: {
            status: 'FAILED',
            result: undefined
        },
        accountInformation: {
            status: 'FAILED',
            result: undefined
        }
    };
};
//# sourceMappingURL=mock-utilities.js.map