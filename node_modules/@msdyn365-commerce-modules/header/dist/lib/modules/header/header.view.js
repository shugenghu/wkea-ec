import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
const headerView = props => {
    const { HeaderTag, HeaderContainer, HeaderTopBarContainer, MobileMenuContainer, MobileMenuBodyContainer, MobileMenuLinksContainer, Divider } = props;
    return (React.createElement(Module, Object.assign({}, HeaderTag),
        React.createElement(Node, Object.assign({}, HeaderContainer),
            React.createElement(Node, Object.assign({}, HeaderTopBarContainer),
                props.navIcon,
                props.logo,
                _renderReactFragment(props.search),
                _renderDesktopAccountBlock(props),
                props.wishListIconDesktop,
                React.createElement(Node, Object.assign({}, Divider)),
                props.cartIcon,
                _renderReactFragment(props.siteOptions)),
            React.createElement(Node, Object.assign({}, MobileMenuContainer),
                React.createElement(Node, Object.assign({}, MobileMenuBodyContainer),
                    props.MobileMenuHeader,
                    _renderReactFragment(props.menuBar),
                    React.createElement(Node, Object.assign({}, MobileMenuLinksContainer),
                        props.accountLinks ? props.accountLinks.map(link => link) : false,
                        props.wishListIconMobile,
                        props.signInLink,
                        props.signOutLink))),
            _renderReactFragment(props.menuBar))));
};
function _renderDesktopAccountBlock(props) {
    const { AccountInfoDropdownParentContainer, AccountInfoDropdownPopoverConentContainer, accountInfoDropdownButton, signOutLink, signInLink, accountLinks, } = props;
    if (AccountInfoDropdownParentContainer) {
        if (AccountInfoDropdownPopoverConentContainer) {
            return (React.createElement(Node, Object.assign({}, AccountInfoDropdownParentContainer),
                accountInfoDropdownButton,
                React.createElement(Node, Object.assign({}, AccountInfoDropdownPopoverConentContainer),
                    accountLinks ? accountLinks.map(link => link) : false,
                    signOutLink)));
        }
        else if (signInLink) {
            return (React.createElement(Node, Object.assign({}, AccountInfoDropdownParentContainer), signInLink));
        }
    }
    props.context.telemetry.error('Header content is empty, module wont render.');
    return null;
}
function _renderReactFragment(items) {
    return (React.createElement(React.Fragment, null, items && items.length
        ? items.map((slot, index) => {
            return React.createElement(React.Fragment, { key: index }, slot);
        })
        : null));
}
export default headerView;
//# sourceMappingURL=header.view.js.map