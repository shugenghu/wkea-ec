import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import * as React from 'react';
import Iframe from '../iframe';
const mockConfig = {
    target: {
        destinationUrl: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/5b4aaa0e-602a-4964-80d0-cdea46ec368f/1c372c3e-debb-42a3-a6db-58904cebdaad.mp4',
    },
    height: '100%',
};
const mockConfig1 = {
    target: {
        destinationUrl: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/5b4aaa0e-602a-4964-80d0-cdea46ec368f/1c372c3e-debb-42a3-a6db-58904cebdaad.mp4',
    },
    height: '100%',
};
const mockConfig2 = {
    target: {
        destinationUrl: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/5b4aaa0e-602a-4964-80d0-cdea46ec368f/1c372c3e-debb-42a3-a6db-58904cebdaad.mp4',
    },
    height: '',
};
const mockConfig3 = {
    target: {
        destinationUrl: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/5b4aaa0e-602a-4964-80d0-cdea46ec368f/1c372c3e-debb-42a3-a6db-58904cebdaad.mp4',
    },
    height: '100%',
    heading: {
        text: 'Microsoft video',
        tag: "h2"
    },
};
describe('Iframe', () => {
    it('renders correctly', () => {
        let moduleProps;
        moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const wrapper = mount(React.createElement(Iframe, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = wrapper.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toMatchSnapshot();
    });
    it('renders correctly without width', () => {
        let moduleProps;
        moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig1),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const wrapper = mount(React.createElement(Iframe, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = wrapper.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toMatchSnapshot();
    });
    it('renders correctly without height', () => {
        let moduleProps;
        moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig2),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const wrapper = mount(React.createElement(Iframe, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = wrapper.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toMatchSnapshot();
    });
    it('renders correctly with heading', () => {
        let moduleProps;
        moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig3),
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const wrapper = mount(React.createElement(Iframe, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = wrapper.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps).toMatchSnapshot();
    });
});
//# sourceMappingURL=iframe.test.js.map