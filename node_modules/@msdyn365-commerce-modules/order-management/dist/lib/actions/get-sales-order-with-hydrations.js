import { buildCacheKey, getSimpleProducts, ProductInput } from '@msdyn365-commerce-modules/retail-actions';
import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getSalesOrderDetailsBySalesIdAsync, getSalesOrderDetailsByTransactionIdAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g';
const getSalesOrder = (orderType = '', orderId = '') => async (ctx) => {
    return orderType === "salesOrder"
        ? getSalesOrderDetailsBySalesIdAsync({ callerContext: ctx }, orderId)
        :
            getSalesOrderDetailsByTransactionIdAsync({ callerContext: ctx }, orderId, 3);
};
const getProducts = (productIds = [], channelId) => async (ctx) => {
    const productInputs = productIds.map(productId => new ProductInput(productId, ctx.requestContext.apiSettings, channelId));
    return getSimpleProducts(productInputs, ctx);
};
export class GetSalesOrderWithHydrationsInput {
    constructor(orderType, orderId, apiSettings) {
        this.getCacheKey = () => buildCacheKey(`SalesOrderWithHydrations`, this.apiSettings);
        this.getCacheObjectType = () => `SalesOrderWithHydrations-${this.orderType}-${this.orderId}`;
        this.dataCacheType = () => 'request';
        this.orderType = orderType;
        this.orderId = orderId;
        this.apiSettings = apiSettings;
    }
}
const createSalesOrderWithHydrationsInput = (inputData) => {
    const { salesId = '', transactionId = '' } = (inputData.requestContext.query && inputData.requestContext.query) || {};
    if (salesId) {
        return new GetSalesOrderWithHydrationsInput("salesOrder", salesId, inputData.requestContext.apiSettings);
    }
    else if (transactionId) {
        return new GetSalesOrderWithHydrationsInput("transaction", transactionId, inputData.requestContext.apiSettings);
    }
    throw new Error(`createSalesOrderWithHydrationsInput - No salesId or transactionId provided.`);
};
export async function getSalesOrderWithHydrationsAction(input, ctx) {
    if (!ctx) {
        throw new Error(`getSalesOrderWithHydrationsAction - Action context cannot be null/undefined`);
    }
    const { orderType, orderId } = input;
    if (!orderType || !orderId) {
        ctx.trace(`[getSalesOrderWithHydrationsAction] No orderType or orderId provided.`);
        return {};
    }
    const salesOrder = await getSalesOrder(orderType, orderId)(ctx);
    if (!salesOrder || !salesOrder.SalesLines || !salesOrder.SalesLines.length) {
        ctx.trace(`[getSalesOrderWithHydrationsAction] No salesLine found.`);
        return {};
    }
    const productIds = salesOrder.SalesLines.map(salesLine => salesLine.ProductId || 0).filter(productId => productId);
    if (!productIds || !productIds.length) {
        ctx.trace(`[getSalesOrderWithHydrationsAction] No productId in saleLines found.`);
        return {};
    }
    const products = await getProducts(productIds, salesOrder.ChannelId)(ctx);
    if (!products || !products.length) {
        ctx.trace(`[getSalesOrderWithHydrationsAction] No product found.`);
        return {};
    }
    return {
        salesOrder,
        products
    };
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/order-management/get-sales-order-with-hydrations',
    action: getSalesOrderWithHydrationsAction,
    input: createSalesOrderWithHydrationsInput
});
//# sourceMappingURL=get-sales-order-with-hydrations.js.map