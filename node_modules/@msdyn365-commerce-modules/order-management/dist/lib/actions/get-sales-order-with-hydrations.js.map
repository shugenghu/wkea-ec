{"version":3,"file":"get-sales-order-with-hydrations.js","sourceRoot":"./src/","sources":["actions/get-sales-order-with-hydrations.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,2CAA2C,CAAC;AAC3G,OAAO,EAAa,0BAA0B,EAAqF,MAAM,yBAAyB,CAAC;AAEnK,OAAO,EAAE,kCAAkC,EAAE,wCAAwC,EAAE,MAAM,2EAA2E,CAAC;AAkBzK,MAAM,aAAa,GAAG,CAAC,YAAoB,EAAE,EAAE,UAAkB,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,GAAmB,EAAuB,EAAE;IACvH,OAAO,SAAS,iBAA0B;QACtC,CAAC,CAAC,kCAAkC,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,OAAO,CAAC;QACrE,CAAC;YAEC,wCAAwC,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC;AAKF,MAAM,WAAW,GAAG,CAAC,aAAuB,EAAE,EAAE,SAAkB,EAAE,EAAE,CAAC,KAAK,EAAE,GAAmB,EAA4B,EAAE;IAC3H,MAAM,aAAa,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,cAAc,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;IAC1H,OAAO,iBAAiB,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;AACjD,CAAC,CAAC;AAKF,MAAM,OAAO,gCAAgC;IAKzC,YAAY,SAAiB,EAAG,OAAe,EAAE,WAAiC;QAM3E,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,0BAA0B,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAChF,uBAAkB,GAAG,GAAG,EAAE,CAAC,4BAA4B,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;QACxF,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAP9C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAKD,MAAM,mCAAmC,GAAG,CAAC,SAA+B,EAAE,EAAE;IAC5E,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE,EAAE,GAAG,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IACtH,IAAI,OAAO,EAAE;QACT,OAAO,IAAI,gCAAgC,eAAwB,OAAO,EAAE,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;KACrH;SAAM,IAAI,aAAa,EAAE;QACtB,OAAO,IAAI,gCAAgC,gBAAyB,aAAa,EAAE,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;KAC5H;IACD,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;AACnG,CAAC,CAAC;AAKF,MAAM,CAAC,KAAK,UAAU,iCAAiC,CACnD,KAAuC,EACvC,GAAmB;IAEnB,IAAI,CAAC,GAAG,EAAE;QACN,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;KAClG;IAED,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IAErC,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,EAAE;QACxB,GAAG,CAAC,KAAK,CAAC,uEAAuE,CAAC,CAAC;QACnF,OAAkC,EAAE,CAAC;KACxC;IAED,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAEhE,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE;QACxE,GAAG,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QACrE,OAAkC,EAAE,CAAC;KACxC;IAED,MAAM,UAAU,GAAa,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAE7H,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;QACnC,GAAG,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;QAClF,OAAkC,EAAE,CAAC;KACxC;IAED,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,UAAU,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;IAE1E,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;QAC/B,GAAG,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;QACnE,OAAkC,EAAE,CAAC;KACxC;IAED,OAAkC;QAC9B,UAAU;QACV,QAAQ;KACX,CAAC;AACN,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,6EAA6E;IACjF,MAAM,EAAsC,iCAAiC;IAC7E,KAAK,EAAE,mCAAmC;CAC7C,CAAC,CAAC","sourcesContent":["import { buildCacheKey, getSimpleProducts, ProductInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICommerceApiSettings, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { getSalesOrderDetailsBySalesIdAsync, getSalesOrderDetailsByTransactionIdAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g';\n\ninterface ISalesOrderWithHydrations {\n    salesOrder: SalesOrder;\n    products: SimpleProduct[];\n}\n\n/**\n *  orderTypes Types of orders\n */\nexport const enum orderTypes {\n    salesOrder = 'salesOrder',\n    transaction = 'transaction'\n}\n\n/**\n * Calls the Retail API and returns the sales order\n */\nconst getSalesOrder = (orderType: string = '', orderId: string = '') => async (ctx: IActionContext): Promise<SalesOrder> => {\n    return orderType === orderTypes.salesOrder\n        ? getSalesOrderDetailsBySalesIdAsync({ callerContext: ctx }, orderId)\n        : //  Local (1) searches the retail server database, and remote (2) searches\n          // on the headquarters side. All (3) and none (0) are not supported.\n          getSalesOrderDetailsByTransactionIdAsync({ callerContext: ctx }, orderId, 3);\n};\n\n/**\n * Calls the Retail API and returns the products\n */\nconst getProducts = (productIds: number[] = [], channelId?: number) => async (ctx: IActionContext): Promise<SimpleProduct[]> => {\n    const productInputs = productIds.map(productId => new ProductInput(productId, ctx.requestContext.apiSettings, channelId));\n    return getSimpleProducts(productInputs, ctx);\n};\n\n/**\n *  Action input\n */\nexport class GetSalesOrderWithHydrationsInput implements IActionInput {\n    public orderType: string;\n    public orderId: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(orderType: string , orderId: string, apiSettings: ICommerceApiSettings) {\n        this.orderType = orderType;\n        this.orderId = orderId;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`SalesOrderWithHydrations`, this.apiSettings);\n    public getCacheObjectType = () => `SalesOrderWithHydrations-${this.orderType}-${this.orderId}`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createSalesOrderWithHydrationsInput = (inputData: ICreateActionContext) => {\n    const { salesId = '', transactionId = '' } = (inputData.requestContext.query && inputData.requestContext.query) || {};\n    if (salesId) {\n        return new GetSalesOrderWithHydrationsInput(orderTypes.salesOrder, salesId, inputData.requestContext.apiSettings);\n    } else if (transactionId) {\n        return new GetSalesOrderWithHydrationsInput(orderTypes.transaction, transactionId, inputData.requestContext.apiSettings);\n    }\n    throw new Error(`createSalesOrderWithHydrationsInput - No salesId or transactionId provided.`);\n};\n\n/**\n * Get sales order with hydrations action\n */\nexport async function getSalesOrderWithHydrationsAction(\n    input: GetSalesOrderWithHydrationsInput,\n    ctx: IActionContext\n): Promise<ISalesOrderWithHydrations> {\n    if (!ctx) {\n        throw new Error(`getSalesOrderWithHydrationsAction - Action context cannot be null/undefined`);\n    }\n\n    const { orderType, orderId } = input;\n\n    if (!orderType || !orderId) {\n        ctx.trace(`[getSalesOrderWithHydrationsAction] No orderType or orderId provided.`);\n        return <ISalesOrderWithHydrations>{};\n    }\n\n    const salesOrder = await getSalesOrder(orderType, orderId)(ctx);\n\n    if (!salesOrder || !salesOrder.SalesLines || !salesOrder.SalesLines.length) {\n        ctx.trace(`[getSalesOrderWithHydrationsAction] No salesLine found.`);\n        return <ISalesOrderWithHydrations>{};\n    }\n\n    const productIds: number[] = salesOrder.SalesLines.map(salesLine => salesLine.ProductId || 0).filter(productId => productId);\n\n    if (!productIds || !productIds.length) {\n        ctx.trace(`[getSalesOrderWithHydrationsAction] No productId in saleLines found.`);\n        return <ISalesOrderWithHydrations>{};\n    }\n\n    const products = await getProducts(productIds, salesOrder.ChannelId)(ctx);\n\n    if (!products || !products.length) {\n        ctx.trace(`[getSalesOrderWithHydrationsAction] No product found.`);\n        return <ISalesOrderWithHydrations>{};\n    }\n\n    return <ISalesOrderWithHydrations>{\n        salesOrder,\n        products\n    };\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/order-management/get-sales-order-with-hydrations',\n    action: <IAction<ISalesOrderWithHydrations>>getSalesOrderWithHydrationsAction,\n    input: createSalesOrderWithHydrationsInput\n});"]}