{"version":3,"file":"utilities.js","sourceRoot":"./src/","sources":["common/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IAny, ICoreContext, IGeneric, IImageSettings, IModule, ITelemetry } from '@msdyn365-commerce/core';\nimport { SalesLine, TenderType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport groupBy from 'lodash/groupBy';\nimport { ISalesLine } from './get-sales-line';\n\nexport interface IModuleComponentProps extends IModule {\n    config: {\n        imageSettings?: IImageSettings;\n    };\n}\n\nexport interface IPriceContext {\n    id: string;\n    typeName: string;\n    context: ICoreContext<IGeneric<IAny>>;\n    telemetry: ITelemetry;\n    freePriceText: string;\n}\n\nexport const getTenderIdOperationIdMap = (tenderTypes: TenderType[]): object => {\n    return tenderTypes.reduce((map, tenderType) => {\n        if (tenderType.TenderTypeId) {\n            map[tenderType.TenderTypeId] = tenderType.OperationId;\n        }\n        return map;\n    },                        {});\n};\n\nexport const countItems = (salesLines: SalesLine[]) => {\n    return salesLines.reduce((count, salesLine) => {\n        return count + (salesLine.Quantity || 0);\n    },                       0);\n};\n\nexport const getSalesLinesByDelivery = (salesLines?: SalesLine[], pickupDeliveryModeCode?: string): SalesLine[] => {\n    if (!salesLines || !salesLines.length) {\n        return [];\n    }\n    return salesLines.filter(salesLine =>\n        // isPickUp ? getPickUp : getOthers\n        (pickupDeliveryModeCode && pickupDeliveryModeCode !== '') ? salesLine.DeliveryMode === pickupDeliveryModeCode : salesLine.DeliveryMode !== pickupDeliveryModeCode\n    );\n};\n\nexport const defaultImageSettings: IImageSettings = {\n    viewports: {\n        xs: { q: `w=80&h=80&m=6`, w: 0, h: 0 },\n        lg: { q: `w=147&h=147&m=6`, w: 0, h: 0 }\n    },\n    lazyload: true\n};\n\nexport type IDeliveryType = 'pickUp' | 'ship' | 'carryOut';\n\nexport type ISalesStatusCode = 'canceled' | 'readyForPickup' | 'pickedUp' | 'processing' | 'shipped' | 'unknown';\n\nexport const getSalesStatusCode = (deliveryType: IDeliveryType, statusValue?: number): ISalesStatusCode => {\n    if (statusValue === 7) {\n        return 'canceled';\n    }\n    if (deliveryType === 'pickUp') {\n        switch (statusValue) {\n            case 3:\n                return 'readyForPickup';\n            case 4:\n                return 'pickedUp';\n            default:\n                return 'processing';\n        }\n    } else if (deliveryType === 'ship') {\n        switch (statusValue) {\n            case 3:\n                return 'processing';\n            case 4:\n                return 'shipped';\n            default:\n                return 'processing';\n        }\n    } else if (deliveryType === 'carryOut') {\n        return 'processing';\n    } else {\n        return 'unknown';\n    }\n};\n\nexport type ITrackingId = string | 'unknown';\nexport type IAddressId = string | 'unknown';\n\nexport interface IGroupData {\n    deliveryType: IDeliveryType;\n    salesStatus: ISalesStatusCode;\n    addressId: IAddressId | 'unknown';\n    trackingId: ITrackingId | 'unknown';\n    count: number;\n    salesLines: ISalesLine[];\n}\n\nexport const groupSalesLines = (salesLines: ISalesLine[]): IGroupData[] => {\n    const getGroupByDeliveryType = (items: ISalesLine[]) => groupBy(items, item => item.data.deliveryType);\n    const getGroupBySalesStatusCode = (items: ISalesLine[]) => groupBy(items, item => item.data.salesStatus);\n    const getGroupByTrackingId = (items: ISalesLine[]) => groupBy(items, item => item.data.salesLine.TrackingId || 'unknown');\n    const getGroupByAddressId = (items: ISalesLine[]) =>\n        groupBy(items, item => (item.data.salesLine.ShippingAddress && item.data.salesLine.ShippingAddress.RecordId) || 'unknown');\n\n    const flatGroup: IGroupData[] = [];\n\n    // 1) Group by delivery type\n    // @ts-ignore\n    const group = getGroupByDeliveryType(salesLines);\n\n    // 2) Group by sales status code\n    Object.entries(group).forEach(([deliveryType, groupByDeliveryType]) => {\n        // @ts-ignore\n        group[deliveryType] = getGroupBySalesStatusCode(groupByDeliveryType);\n\n        Object.entries(group[deliveryType]).forEach(([salesStatus, groupBySalesStatusCode]) => {\n            // @ts-ignore 3) Group by address id\n            groupBySalesStatusCode[salesStatus] = getGroupByAddressId(groupBySalesStatusCode);\n\n            // @ts-ignore\n            Object.entries(groupBySalesStatusCode[salesStatus]).forEach(([addressId, groupByAddressId]) => {\n                // @ts-ignore 4) Group by address id\n                groupByAddressId[addressId] = getGroupByTrackingId(groupByAddressId);\n\n                // @ts-ignore\n                Object.entries(groupByAddressId[addressId]).forEach(([trackingId, groupByTrackingId]) => {\n                    flatGroup.push({\n                        // @ts-ignore\n                        deliveryType,\n                        // @ts-ignore\n                        salesStatus,\n                        addressId,\n                        trackingId,\n                        // @ts-ignore\n                        count: countItems(groupByTrackingId.map(item => item.data.salesLine)),\n                        // @ts-ignore\n                        salesLines: groupByTrackingId\n                    });\n                });\n            });\n        });\n    });\n\n    return flatGroup;\n};\n"]}