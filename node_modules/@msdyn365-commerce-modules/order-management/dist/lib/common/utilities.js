import groupBy from 'lodash/groupBy';
export const getTenderIdOperationIdMap = (tenderTypes) => {
    return tenderTypes.reduce((map, tenderType) => {
        if (tenderType.TenderTypeId) {
            map[tenderType.TenderTypeId] = tenderType.OperationId;
        }
        return map;
    }, {});
};
export const countItems = (salesLines) => {
    return salesLines.reduce((count, salesLine) => {
        return count + (salesLine.Quantity || 0);
    }, 0);
};
export const getSalesLinesByDelivery = (salesLines, pickupDeliveryModeCode) => {
    if (!salesLines || !salesLines.length) {
        return [];
    }
    return salesLines.filter(salesLine => (pickupDeliveryModeCode && pickupDeliveryModeCode !== '') ? salesLine.DeliveryMode === pickupDeliveryModeCode : salesLine.DeliveryMode !== pickupDeliveryModeCode);
};
export const defaultImageSettings = {
    viewports: {
        xs: { q: `w=80&h=80&m=6`, w: 0, h: 0 },
        lg: { q: `w=147&h=147&m=6`, w: 0, h: 0 }
    },
    lazyload: true
};
export const getSalesStatusCode = (deliveryType, statusValue) => {
    if (statusValue === 7) {
        return 'canceled';
    }
    if (deliveryType === 'pickUp') {
        switch (statusValue) {
            case 3:
                return 'readyForPickup';
            case 4:
                return 'pickedUp';
            default:
                return 'processing';
        }
    }
    else if (deliveryType === 'ship') {
        switch (statusValue) {
            case 3:
                return 'processing';
            case 4:
                return 'shipped';
            default:
                return 'processing';
        }
    }
    else if (deliveryType === 'carryOut') {
        return 'processing';
    }
    else {
        return 'unknown';
    }
};
export const groupSalesLines = (salesLines) => {
    const getGroupByDeliveryType = (items) => groupBy(items, item => item.data.deliveryType);
    const getGroupBySalesStatusCode = (items) => groupBy(items, item => item.data.salesStatus);
    const getGroupByTrackingId = (items) => groupBy(items, item => item.data.salesLine.TrackingId || 'unknown');
    const getGroupByAddressId = (items) => groupBy(items, item => (item.data.salesLine.ShippingAddress && item.data.salesLine.ShippingAddress.RecordId) || 'unknown');
    const flatGroup = [];
    const group = getGroupByDeliveryType(salesLines);
    Object.entries(group).forEach(([deliveryType, groupByDeliveryType]) => {
        group[deliveryType] = getGroupBySalesStatusCode(groupByDeliveryType);
        Object.entries(group[deliveryType]).forEach(([salesStatus, groupBySalesStatusCode]) => {
            groupBySalesStatusCode[salesStatus] = getGroupByAddressId(groupBySalesStatusCode);
            Object.entries(groupBySalesStatusCode[salesStatus]).forEach(([addressId, groupByAddressId]) => {
                groupByAddressId[addressId] = getGroupByTrackingId(groupByAddressId);
                Object.entries(groupByAddressId[addressId]).forEach(([trackingId, groupByTrackingId]) => {
                    flatGroup.push({
                        deliveryType,
                        salesStatus,
                        addressId,
                        trackingId,
                        count: countItems(groupByTrackingId.map(item => item.data.salesLine)),
                        salesLines: groupByTrackingId
                    });
                });
            });
        });
    });
    return flatGroup;
};
//# sourceMappingURL=utilities.js.map