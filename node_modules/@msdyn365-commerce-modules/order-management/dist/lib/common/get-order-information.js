import { PriceComponent } from '@msdyn365-commerce/components';
import get from 'lodash/get';
import * as React from 'react';
import { countItems } from './utilities';
export const getOrderInformation = ({ moduleName, channelReferenceId, channelName, channelAddress, showChannelInfo, receiptEmail, createdDate, amount, priceContext, salesId, receiptId, count, resources: { receiptEmailMessage, orderItemLabel, orderItemsLabel, orderIdLabel, receiptIdLabel, confirmationIdLabel, posChannelNameText, onlineStoreChannelNameText, orderPlacedOnLabel } }) => ({
    orderInformationProps: { className: `${moduleName}__order-information` },
    channelName: showChannelInfo && channelName && (channelAddress ? React.createElement("span", { className: `${moduleName}__order-information-channel-name` }, `${posChannelNameText} ${channelName}`)
        : React.createElement("span", { className: `${moduleName}__order-information-channel-name` }, onlineStoreChannelNameText)),
    channelAddress: showChannelInfo && channelAddress && React.createElement("span", { className: `${moduleName}__order-information-channel-address` }, channelAddress),
    salesId: salesId ? React.createElement("span", { className: `${moduleName}__order-information-sales-id` }, `${orderIdLabel} ${salesId}`) : '',
    receiptId: receiptId ? React.createElement("span", { className: `${moduleName}__order-information-receipt-id` }, `${receiptIdLabel} ${receiptId}`) : '',
    receiptEmail: receiptEmail && (React.createElement("span", { className: `${moduleName}__order-information-receipt-email` },
        receiptEmailMessage,
        React.createElement("span", null, receiptEmail))),
    createdDate: createdDate && React.createElement("span", { className: `${moduleName}__order-information-created-date` },
        orderPlacedOnLabel,
        " ",
        createdDate),
    count: count !== undefined && count > 0 && (React.createElement("span", { className: `${moduleName}__order-information-count` }, count === 1 ? `${count} ${orderItemLabel}` : `${count} ${orderItemsLabel}`)),
    amount: (amount || amount === 0) && (React.createElement(PriceComponent, Object.assign({}, priceContext, { className: `${moduleName}__order-information-amount`, data: { price: { CustomerContextualPrice: amount } } }))),
    channelReferenceId: channelReferenceId && (React.createElement("span", { className: `${moduleName}__order-information-channel-reference-id` },
        `${confirmationIdLabel} `,
        React.createElement("span", null, channelReferenceId)))
});
export const getOrderInfomationInput = (props, moduleName, order, priceContext, channelIdentities, orgUnitLocations, showChannelInfo) => {
    const { resources, context: { request: { apiSettings: { channelId } } } } = props;
    const showTrackingInfo = !!order.ChannelId && order.ChannelId === channelId;
    const locale = get(props, 'context.request.locale') || 'en-US';
    const count = order.SalesLines && order.SalesLines.length ? countItems(order.SalesLines) : 0;
    const orderChannel = channelIdentities ? channelIdentities.filter(channel => { return channel.RecordId === order.ChannelId; }) : '';
    const orderOrgUnitLocation = orgUnitLocations ? orgUnitLocations.filter(location => { return location.ChannelId === order.ChannelId; }) : '';
    return {
        moduleName: moduleName,
        createdDate: (order.CreatedDateTime && new Date(order.CreatedDateTime).toLocaleDateString(locale)) || '',
        salesId: order.SalesId,
        receiptId: order.ReceiptId,
        showChannelInfo: showChannelInfo,
        receiptEmail: order.ReceiptEmail,
        channelReferenceId: order.ChannelReferenceId,
        channelName: orderChannel && orderChannel.length > 0 ? orderChannel[0].Name : '',
        channelAddress: orderOrgUnitLocation && orderOrgUnitLocation.length > 0 ? orderOrgUnitLocation[0].Address : '',
        amount: order.TotalAmount || 0,
        priceContext: priceContext,
        count,
        resources
    };
};
//# sourceMappingURL=get-order-information.js.map