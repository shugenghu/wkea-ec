import { getProductUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { Button, getPayloadObject, getTelemetryAttributes, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { CartLineItemComponent } from '@msdyn365-commerce/components';
import { Image } from '@msdyn365-commerce/core';
import * as React from 'react';
import Address from './address';
import LabelComponent from './label';
import { defaultImageSettings, getSalesStatusCode } from './utilities';
export const getSalesLine = ({ moduleName, moduleComponentProps: { id, typeName, context, telemetry, config: { imageSettings } }, showCompleteAddress, product, shipment, salesLine, isCurrentChannel, imageOnly, resources: { productDimensionTypeSize: sizeString, productDimensionTypeColor: colorString, productDimensionTypeStyle: styleString, salesLineQuantityText: quantityDisplayString, configString, shipToLabel, storeLabel, phoneLabel, phoneAriaLabel, buyItAgainLabel, buyItAgainAriaLabel, orderStatusReadyForPickup, orderStatusProcessing, orderStatusShipped, orderStatusPickedUp, orderStatusCanceled, pickedUpSalesLines, deliveredSalesLines, carryOutSalesLines, trackingLabel, trackingAriaLabel, trackingComingSoonLabel, discountStringText }, telemetryContent }) => {
    const salesStatusStringMap = {
        canceled: orderStatusCanceled,
        readyForPickup: orderStatusReadyForPickup,
        pickedUp: orderStatusPickedUp,
        processing: orderStatusProcessing,
        shipped: orderStatusShipped,
        unknown: undefined
    };
    const deliveryTypeStringMap = {
        pickUp: pickedUpSalesLines,
        ship: deliveredSalesLines,
        carryOut: carryOutSalesLines
    };
    const gridSettings = context.request.gridSettings;
    const pickupDeliveryModeCode = context.request.channel && context.request.channel.PickupDeliveryModeCode;
    const productUrl = getProductUrlSync(product, context.actionContext, undefined);
    const deliveryType = !!pickupDeliveryModeCode && pickupDeliveryModeCode !== '' && pickupDeliveryModeCode === salesLine.DeliveryMode
        ? 'pickUp'
        : !!salesLine.DeliveryMode
            ? 'ship'
            : 'carryOut';
    const salesStatus = getSalesStatusCode(deliveryType, salesLine.SalesStatusValue);
    const salesStatusString = salesStatusStringMap[salesStatus];
    const salesStatusComp = salesStatusString && React.createElement(LabelComponent, { className: `${moduleName}__sales-status`, label: salesStatusString });
    const deliveryTypeString = deliveryTypeStringMap[deliveryType];
    const deliveryTypeComp = deliveryTypeString && React.createElement(LabelComponent, { className: `${moduleName}__devliery-type`, label: deliveryTypeString });
    const trackingInfo = isCurrentChannel && deliveryType === 'ship' && (React.createElement("span", { className: `${moduleName}__tracking-info` },
        trackingLabel,
        shipment ? (React.createElement("a", { className: `${moduleName}__tracking-link`, href: shipment.TrackingUrl, "aria-label": trackingAriaLabel }, shipment.TrackingNumber)) : (React.createElement(React.Fragment, null, trackingComingSoonLabel))));
    const payLoad = getPayloadObject('click', telemetryContent, TelemetryConstant.BuyItAgain);
    const buyItAgainAttributes = getTelemetryAttributes(telemetryContent, payLoad);
    return {
        data: {
            salesLine,
            productUrl,
            deliveryType,
            salesStatus,
            product,
            shipment
        },
        salesLineProps: { className: `${moduleName}__sales-line` },
        salesLine: imageOnly ? (React.createElement("div", { className: `${moduleName}__sales-line-picture` },
            React.createElement(Image, { className: `${moduleName}__sales-line-image`, altText: product.Name, src: product.PrimaryImageUrl || '', gridSettings: gridSettings, imageSettings: imageSettings || defaultImageSettings, loadFailureBehavior: 'empty' }))) : (React.createElement(CartLineItemComponent, { id: id, typeName: typeName, context: context, resources: {
                sizeString,
                colorString,
                styleString,
                quantityDisplayString,
                configString,
                discountStringText,
                inputQuantityAriaLabel: '',
                originalPriceText: '',
                currentPriceText: '',
                shippingChargesText: ''
            }, primaryImageUrl: product.PrimaryImageUrl, productUrl: productUrl, imageSettings: imageSettings || defaultImageSettings, gridSettings: gridSettings, isSalesLine: true, data: { cartLine: salesLine, product: product } })),
        address: salesLine.ShippingAddress && (React.createElement(Address, { moduleName: moduleName, address: salesLine.ShippingAddress, resource: { shipToLabel, storeLabel, phoneLabel, phoneAriaLabel }, deliveryType: deliveryType, showCompleteAddress: showCompleteAddress })),
        deliveryType: deliveryTypeComp,
        salesStatus: salesStatusComp,
        trackingInfo,
        buyAgainButton: isCurrentChannel && (React.createElement(Button, Object.assign({ href: productUrl, "aria-label": name && buyItAgainAriaLabel ? (buyItAgainAriaLabel || '').replace('{productName}', name) : '', className: `${moduleName}__sales-line-btn-buy-it-again` }, buyItAgainAttributes), buyItAgainLabel))
    };
};
//# sourceMappingURL=get-sales-line.js.map