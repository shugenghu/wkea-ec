{"version":3,"file":"get-sales-order-with-hydrations.test.js","sourceRoot":"./src/","sources":["modules/order-confirmation/tests/get-sales-order-with-hydrations.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as coreActions from '@msdyn365-commerce-modules/retail-actions';\nimport { buildHydratedMockActionContext, IActionContext, IRequestContext } from '@msdyn365-commerce/core';\nimport * as salesOrderActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g';\nimport 'jest';\nimport { getSalesOrderWithHydrationsAction, GetSalesOrderWithHydrationsInput, orderTypes } from '../../../actions/get-sales-order-with-hydrations';\nimport { mockProducts, mockRequestContextJson, mockTransaction } from './__mock__';\n\ndescribe('GetSalesOrderDetailsBySalesIdInput', () => {\n    it('Should Create Inputs Properly', () => {\n        const actionContext = buildHydratedMockActionContext({ requestContext: <IRequestContext>mockRequestContextJson });\n\n        const input = new GetSalesOrderWithHydrationsInput('type', '456', actionContext.requestContext.apiSettings);\n        expect(input.orderType).toEqual('type');\n        expect(input.orderId).toEqual('456');\n    });\n});\n\ndescribe('getSalesOrderWithHydrationsAction Unit Tests', () => {\n    let actionContext: IActionContext;\n\n    beforeEach(() => {\n        jest.mock('@msdyn365-commerce-modules/retail-actions');\n        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g');\n\n        actionContext = buildHydratedMockActionContext({ requestContext: <IRequestContext>mockRequestContextJson });\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        salesOrderActions.GetSalesOrderDetailsByTransactionIdInput = jest.fn();\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        salesOrderActions.getSalesOrderDetailsByTransactionIdAsync = jest.fn().mockResolvedValue(mockTransaction);\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        coreActions.ProductInput = jest.fn();\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        coreActions.getSimpleProducts = jest.fn().mockResolvedValue(mockProducts);\n    });\n\n    it('Should fetch sales order and products by transaction id', async () => {\n        await getSalesOrderWithHydrationsAction(new GetSalesOrderWithHydrationsInput(orderTypes.transaction, '456', actionContext.requestContext.apiSettings), actionContext)\n            .then(response => {\n                expect(response.salesOrder.Id).toBe('UiE~EWeXya9o0byTIE7KeP8bIEjpGv9-');\n                expect(response.products.length).toBe(2);\n                expect(response.products[0].RecordId).toBe(22565430654);\n\n                expect(salesOrderActions.getSalesOrderDetailsByTransactionIdAsync).toBeCalled();\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Unable to run getSalesOrderWithHydrationsAction Action');\n            });\n    });\n\n    afterEach(() => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        salesOrderActions.getSalesOrderDetailsByTransactionIdAsync.mockReset();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        salesOrderActions.GetSalesOrderDetailsByTransactionIdInput.mockReset();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        coreActions.ProductInput.mockReset();\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        coreActions.getSimpleProducts.mockReset();\n    });\n\n    afterAll(() => {\n        jest.unmock('@msdyn365-commerce-modules/retail-actions');\n        jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g');\n    });\n});"]}