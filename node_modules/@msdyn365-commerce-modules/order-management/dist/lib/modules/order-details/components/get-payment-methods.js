import { PriceComponent } from '@msdyn365-commerce/components';
import * as React from 'react';
export const getOrderDetailsPaymentMethods = ({ priceContext, tenderLines, tenderIdOperationIdMap, resource: { paymentMethodsTitle, creditCardEndingLabel, giftCardEndingLabel, amountCoveredLabel, loyaltyCardUsedLabel, cashUsedLabel, customerAccountUsedLabel } }) => {
    const OPERATIONS = {
        PayCard: 201,
        PayGiftCertificate: 214,
        PayLoyalty: 207,
        PayCash: 200,
        PayCustomerAccount: 202,
    };
    const getLastFourDigit = (digits = '') => digits.substr(-4);
    const getCard = (tenderLine) => {
        const cardLastFourDigit = getLastFourDigit(tenderLine.MaskedCardNumber);
        const isValidCardNumber = cardLastFourDigit && !isNaN(cardLastFourDigit);
        return (React.createElement("div", { className: 'ms-order-details__payment-methods-line', key: tenderLine.TenderTypeId },
            React.createElement("p", { className: 'ms-order-details__payment-methods-card' }, `${tenderLine.CardTypeId} ${isValidCardNumber ? `${creditCardEndingLabel} ${cardLastFourDigit}` : ``}`)));
    };
    const getCustomerAccountPayment = (tenderLine) => (React.createElement("div", { className: 'ms-order-details__payment-methods-line', key: tenderLine.TenderTypeId },
        React.createElement("p", { className: 'ms-order-details__payment-methods-customer-account' },
            customerAccountUsedLabel,
            " ",
            tenderLine.CustomerId),
        React.createElement("p", { className: 'ms-order-details__payment-methods-customer-account-info' },
            amountCoveredLabel,
            React.createElement(PriceComponent, Object.assign({}, priceContext, { className: 'ms-order-details__payment-methods-customer-account-amount', data: { price: { CustomerContextualPrice: tenderLine.Amount || 0 } } })))));
    const getGiftCertificate = (tenderLine) => (React.createElement("div", { className: 'ms-order-details__payment-methods-line', key: tenderLine.TenderTypeId },
        React.createElement("p", { className: 'ms-order-details__payment-methods-gift-card-number' },
            giftCardEndingLabel,
            " ",
            getLastFourDigit(tenderLine.GiftCardId)),
        React.createElement("p", { className: 'ms-order-details__payment-methods-gift-card-amount-info' },
            amountCoveredLabel,
            React.createElement(PriceComponent, Object.assign({}, priceContext, { className: 'ms-order-details__payment-methods-gift-card-amount', data: { price: { CustomerContextualPrice: tenderLine.Amount || 0 } } })))));
    const getLoyalty = (tenderLine) => (React.createElement("div", { className: 'ms-order-details__payment-methods-line', key: tenderLine.TenderTypeId },
        React.createElement("p", { className: 'ms-order-details__payment-methods-loyalty-number' },
            loyaltyCardUsedLabel,
            " ",
            tenderLine.LoyaltyCardId),
        React.createElement("p", { className: 'ms-order-details__payment-methods-loyalty-amount-info' },
            amountCoveredLabel,
            React.createElement(PriceComponent, Object.assign({}, priceContext, { className: 'ms-order-details__payment-methods-loyalty-amount', data: { price: { CustomerContextualPrice: tenderLine.Amount || 0 } } })))));
    const getCash = (tenderLine) => (React.createElement("div", { className: 'ms-order-details__payment-methods-line', key: tenderLine.TenderTypeId },
        React.createElement("p", { className: 'ms-order-details__payment-methods-cash' }, cashUsedLabel),
        React.createElement("p", { className: 'ms-order-details__payment-methods-cash-amount-info' },
            amountCoveredLabel,
            React.createElement(PriceComponent, Object.assign({}, priceContext, { className: 'ms-order-details__payment-methods-cash-amount', data: { price: { CustomerContextualPrice: tenderLine.Amount || 0 } } })))));
    return {
        paymentMethodsProps: { className: 'ms-order-details__payment-methods' },
        title: React.createElement("div", { className: 'ms-order-details__payment-methods-title' }, paymentMethodsTitle),
        methods: tenderLines.reduce((lines, tenderLine) => {
            if (!tenderLine.TenderTypeId) {
                return lines;
            }
            switch (tenderIdOperationIdMap[tenderLine.TenderTypeId]) {
                case OPERATIONS.PayCard:
                    lines.push(getCard(tenderLine));
                    break;
                case OPERATIONS.PayGiftCertificate:
                    lines.push(getGiftCertificate(tenderLine));
                    break;
                case OPERATIONS.PayLoyalty:
                    lines.push(getLoyalty(tenderLine));
                    break;
                case OPERATIONS.PayCash:
                    lines.push(getCash(tenderLine));
                    break;
                case OPERATIONS.PayCustomerAccount:
                    lines.push(getCustomerAccountPayment(tenderLine));
                    break;
                default:
            }
            return lines;
        }, [])
    };
};
//# sourceMappingURL=get-payment-methods.js.map