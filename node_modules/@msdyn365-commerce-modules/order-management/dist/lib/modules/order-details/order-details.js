import { __decorate } from "tslib";
import { Button, getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classname from 'classnames';
import get from 'lodash/get';
import { computed } from 'mobx';
import * as React from 'react';
import { getGroups } from '../../common/get-groups';
import { getOrderInfomationInput, getOrderInformation } from '../../common/get-order-information';
import { getSalesLines, getSalesLinesInput } from '../../common/get-sales-lines';
import LabelComponent from '../../common/label';
import { getTenderIdOperationIdMap } from '../../common/utilities';
import { getOrderDetailsHelp } from './components/get-help';
import { getOrderDetailsOrderSummary } from './components/get-order-summary';
import { getOrderDetailsPaymentMethods } from './components/get-payment-methods';
export * from '../../common/get-groups';
export * from '../../common/get-order-information';
export * from '../../common/get-sales-line';
export * from '../../common/get-sales-lines';
export * from '../../common/utilities';
export * from './components/get-help';
export * from './components/get-order-summary';
export * from './components/get-payment-methods';
class OrderDetails extends React.PureComponent {
    constructor(props) {
        super(props);
        this.moduleName = 'ms-order-details';
        this.handleOrderDetailsHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    get isCurrentChannel() {
        if (!this.order) {
            return false;
        }
        return this.order.ChannelId === get(this.props, 'context.request.apiSettings.channelId');
    }
    get isDataReady() {
        return get(this.props, 'data.orderHydration.status') === 'SUCCESS';
    }
    get hasError() {
        return get(this.props, 'data.orderHydration.status') === 'FAILED';
    }
    get order() {
        return get(this.props, 'data.orderHydration.result.salesOrder');
    }
    get products() {
        return get(this.props, 'data.orderHydration.result.products') || [];
    }
    get priceContext() {
        const { id, typeName, context, telemetry, resources: { freePriceText } } = this.props;
        return {
            id,
            typeName,
            context,
            telemetry,
            freePriceText
        };
    }
    get earnedPoints() {
        const loyaltyCard = this.props.data.loyaltyCard.result;
        if (loyaltyCard && loyaltyCard.RewardPoints && this.order) {
            const pointPrograms = loyaltyCard.RewardPoints.map(point => point.RewardPointId);
            const rewardLines = this.order.LoyaltyRewardPointLines || [];
            let total = 0;
            rewardLines.forEach(line => {
                if ((line.RewardPointAmountQuantity || 0) > 0 && pointPrograms.indexOf(line.RewardPointId) > -1) {
                    total += line.RewardPointAmountQuantity;
                }
            });
            return total;
        }
        return 0;
    }
    get orderSummaryProps() {
        if (!this.order) {
            return;
        }
        const { request } = this.props.context;
        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;
        const orderDetailsLines = this.order?.SalesLines;
        const canShip = orderDetailsLines?.some(orderDetailsLine => (orderDetailsLine.DeliveryMode && orderDetailsLine.DeliveryMode !== '') ? orderDetailsLine.DeliveryMode !== pickupDeliveryModeCode : orderDetailsLine);
        const { resources: { orderSummaryHeading, orderSummaryItemsTotalLabel, orderSummaryShippingFeeLabel, orderSummaryTaxLabel, orderSummaryGrandTotalLabel, pointsEarnedLabel } } = this.props;
        return {
            order: this.order,
            earnedPoints: this.earnedPoints,
            priceContext: this.priceContext,
            resource: {
                orderSummaryHeading,
                orderSummaryItemsTotalLabel,
                orderSummaryShippingFeeLabel,
                orderSummaryTaxLabel,
                pointsEarnedLabel,
                orderSummaryGrandTotalLabel
            },
            canShip: canShip
        };
    }
    get paymentMethodsProps() {
        const tenderTypes = this.props.data.tenderTypes.result;
        if (!this.order || !this.order.TenderLines || !tenderTypes) {
            return;
        }
        const locale = get(this.props, 'context.request.locale') || 'en-US';
        const { resources: { paymentMethodsTitle, creditCardEndingLabel, giftCardEndingLabel, amountCoveredLabel, cashUsedLabel, loyaltyCardUsedLabel, customerAccountUsedLabel } } = this.props;
        return {
            priceContext: this.priceContext,
            tenderLines: this.order.TenderLines,
            tenderIdOperationIdMap: getTenderIdOperationIdMap(tenderTypes),
            locale,
            resource: {
                paymentMethodsTitle,
                creditCardEndingLabel,
                giftCardEndingLabel,
                amountCoveredLabel,
                cashUsedLabel,
                loyaltyCardUsedLabel,
                customerAccountUsedLabel
            }
        };
    }
    render() {
        const { resources: { noSalesOrderDetailsText, genericErrorMessage, needHelpLabel, helpLineNumberLabel, loadingLabel, backToShopping, orderItemLabel, orderItemsLabel, helpLineContactAriaLabel, }, config: { heading, contactNumber, showChannelInfo } } = this.props;
        const showAddress = this.props.config.addressOptions !== undefined && this.props.config.addressOptions === "showAddressWithSingleLine" || this.props.config.addressOptions === "showAddressWithMultiplelines";
        const showFullAddress = this.props.config.addressOptions !== undefined && this.props.config.addressOptions === "showAddressWithMultiplelines";
        const moduleProps = { moduleProps: this.props, className: classname('ms-order-details', this.props.config.className) };
        const backToShoppingUrl = Msdyn365.getUrlSync('home', this.props.context.actionContext) || '';
        const channelIdentities = this.props.data.channels.result && this.props.data.channels.result.channelIdentities;
        const orgUnitLocations = this.props.data.orgUnitLocations.result && this.props.data.orgUnitLocations.result.orgUnitLocations;
        let viewProps = {
            ...this.props,
            moduleProps,
            heading: heading && (React.createElement(Msdyn365.Text, Object.assign({}, heading, { className: 'ms-order-details__heading', text: heading.text, tag: heading.tag || 'h2', editProps: { onEdit: this.handleOrderDetailsHeadingChange, requestContext: this.props.context.request } }))),
            backToShoppingLink: backToShoppingUrl && (React.createElement(Button, { className: 'ms-order-details__btn-keep-shopping', href: backToShoppingUrl }, backToShopping)),
            footerProps: { className: 'ms-order-details__footer' }
        };
        if (this.hasError) {
            viewProps = {
                ...viewProps,
                alert: React.createElement(LabelComponent, { className: 'ms-order-details__alert', label: genericErrorMessage })
            };
            return this.props.renderView(viewProps);
        }
        if (!this.isDataReady) {
            viewProps = {
                ...viewProps,
                loading: React.createElement(LabelComponent, { className: 'ms-order-details__loading', label: loadingLabel })
            };
            return this.props.renderView(viewProps);
        }
        if (!this.order) {
            viewProps = {
                ...viewProps,
                alert: React.createElement(LabelComponent, { className: 'ms-order-details__alert', label: noSalesOrderDetailsText })
            };
            return this.props.renderView(viewProps);
        }
        const salesLinesInput = getSalesLinesInput(this.props, this.moduleName, this.order, this.products, this.priceContext, showFullAddress, this.telemetryContent);
        const salesLines = salesLinesInput && getSalesLines(salesLinesInput);
        const orderInfomationInput = this.order && getOrderInfomationInput(this.props, this.moduleName, this.order, this.priceContext, channelIdentities, orgUnitLocations, showChannelInfo);
        const orderInfomation = orderInfomationInput && getOrderInformation(orderInfomationInput);
        viewProps = {
            ...viewProps,
            salesOrder: this.order,
            orderInfomation,
            salesLines,
            groups: salesLines
                ? getGroups({
                    moduleName: this.moduleName,
                    salesLines,
                    resources: { orderItemLabel, orderItemsLabel },
                    showAddress
                })
                : undefined,
            orderSummary: this.orderSummaryProps ? getOrderDetailsOrderSummary(this.orderSummaryProps) : undefined,
            payment: this.paymentMethodsProps ? getOrderDetailsPaymentMethods(this.paymentMethodsProps) : undefined,
            help: contactNumber ? getOrderDetailsHelp({ needHelpLabel, helpLineNumberLabel, contactNumber, helpLineContactAriaLabel, telemetryContent: this.telemetryContent }) : undefined
        };
        return this.props.renderView(viewProps);
    }
}
__decorate([
    computed
], OrderDetails.prototype, "isCurrentChannel", null);
__decorate([
    computed
], OrderDetails.prototype, "isDataReady", null);
__decorate([
    computed
], OrderDetails.prototype, "hasError", null);
__decorate([
    computed
], OrderDetails.prototype, "order", null);
__decorate([
    computed
], OrderDetails.prototype, "products", null);
__decorate([
    computed
], OrderDetails.prototype, "priceContext", null);
__decorate([
    computed
], OrderDetails.prototype, "earnedPoints", null);
__decorate([
    computed
], OrderDetails.prototype, "orderSummaryProps", null);
__decorate([
    computed
], OrderDetails.prototype, "paymentMethodsProps", null);
export default OrderDetails;
//# sourceMappingURL=order-details.js.map