{"version":3,"file":"order-details.test.js","sourceRoot":"./src/","sources":["modules/order-details/tests/order-details.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';\nimport { buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';\nimport { AsyncResult, ChannelIdentity, LoyaltyCard, OrgUnitLocation, SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\n/// <reference types=\"jest\" />\n// tslint:disable-next-line:no-unused-variable\nimport * as React from 'react';\nimport * as renderer from 'react-test-renderer';\nimport OrderDetails from '../order-details';\nimport { IOrderDetailsData } from '../order-details.data';\nimport { HeadingTag, IOrderDetailsConfig, IOrderDetailsProps, IOrderDetailsResources } from '../order-details.props.autogenerated';\nimport renderView from '../order-details.view';\nimport {\n    mockProducts,\n    mockSalesOrder,\n    mockSalesOrderWithReceiptId,\n    mockSalesOrderWithReceiptIdAndOrderId,\n    mockTenderTypes,\n    mockTransaction\n} from './__mock__';\n\n// @ts-ignore\nconst mockContext: ICoreContext = buildMockCoreContext({\n    // @ts-ignore only mock partial data\n    request: {\n        gridSettings: {\n            xs: { w: 767, h: 0 },\n            sm: { w: 991, h: 0 },\n            md: { w: 1199, h: 0 },\n            lg: { w: 1599, h: 0 },\n            xl: { w: 1600, h: 0 }\n        },\n        // @ts-ignore only mock partial data\n        apiSettings: {\n            channelId: 5637145359\n        },\n        // @ts-ignore only mock partial data\n        channel: {\n            PickupDeliveryModeCode: '70'\n        }\n    }\n});\n\nconst loyaltyCard: LoyaltyCard = {\n    CardNumber: '1234567890',\n    LoyaltyEnrollmentDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),\n    RewardPoints: [\n        {\n            RewardPointId: 'Fabrikam',\n            RewardPointTypeValue: 1,\n            RewardPointCurrency: 'USD',\n            IsRedeemable: true,\n            PointsExpiringSoon: 34,\n            ActivePoints: 90,\n            Description: 'Fabrikam awesome points'\n        }\n    ]\n};\n\nconst mockDataWithSalesOrder: IOrderDetailsData = {\n    orderHydration: {\n        status: 'SUCCESS',\n        result: {\n            salesOrder: mockSalesOrder,\n            products: mockProducts\n        }\n    } as AsyncResult<{\n        salesOrder: SalesOrder;\n        products: SimpleProduct[];\n    }>,\n    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),\n    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),\n    channels: wrapInResolvedAsyncResult({\n        channelIdentities: [] as ChannelIdentity[]\n    }),\n    orgUnitLocations: wrapInResolvedAsyncResult({\n        orgUnitLocations: [] as OrgUnitLocation[]\n    })\n};\n\nconst mockDataWithTransaction: IOrderDetailsData = {\n    orderHydration: {\n        status: 'SUCCESS',\n        result: {\n            salesOrder: mockTransaction,\n            products: mockProducts\n        }\n    } as AsyncResult<{\n        salesOrder: SalesOrder;\n        products: SimpleProduct[];\n    }>,\n    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),\n    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),\n    channels: wrapInResolvedAsyncResult({\n        channelIdentities: [] as ChannelIdentity[]\n    }),\n    orgUnitLocations: wrapInResolvedAsyncResult({\n        orgUnitLocations: [] as OrgUnitLocation[]\n    })\n};\n\nconst mockDataWithSalesOrderWithReceiptId: IOrderDetailsData = {\n    orderHydration: {\n        status: 'SUCCESS',\n        result: {\n            salesOrder: mockSalesOrderWithReceiptId,\n            products: mockProducts\n        }\n    } as AsyncResult<{\n        salesOrder: SalesOrder;\n        products: SimpleProduct[];\n    }>,\n    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),\n    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),\n    channels: wrapInResolvedAsyncResult({\n        channelIdentities: [] as ChannelIdentity[]\n    }),\n    orgUnitLocations: wrapInResolvedAsyncResult({\n        orgUnitLocations: [] as OrgUnitLocation[]\n    })\n};\n\nconst mockDataWithSalesOrderWithReceiptIdAndOrderId: IOrderDetailsData = {\n    orderHydration: {\n        status: 'SUCCESS',\n        result: {\n            salesOrder: mockSalesOrderWithReceiptIdAndOrderId,\n            products: mockProducts\n        }\n    } as AsyncResult<{\n        salesOrder: SalesOrder;\n        products: SimpleProduct[];\n    }>,\n    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),\n    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),\n    channels: wrapInResolvedAsyncResult({\n        channelIdentities: [] as ChannelIdentity[]\n    }),\n    orgUnitLocations: wrapInResolvedAsyncResult({\n        orgUnitLocations: [] as OrgUnitLocation[]\n    })\n};\n\nconst mockConfigSalesOrder: IOrderDetailsConfig = {\n    contactNumber: '123-456-7890'\n};\n\nconst mockConfigResources: IOrderDetailsResources = {\n    orderSummaryHeading: 'Order summary',\n    receiptEmailMessage: 'Confirmation email sent to ',\n    receiptIdLabel: 'Receipt#',\n    loadingLabel: 'Loading...',\n    freePriceText: 'FREE',\n    orderSummaryItemsTotalLabel: 'Subtotal',\n    orderSummaryShippingFeeLabel: 'Shipping',\n    orderSummaryTaxLabel: 'Tax',\n    orderSummaryGrandTotalLabel: 'Grand total',\n    salesLineQuantityText: 'Quantity:',\n    processingLabel: 'Processing',\n    creditCardEndingLabel: 'card ending in',\n    giftCardEndingLabel: 'Gift card ending in',\n    amountCoveredLabel: 'Amount covered:',\n    loyaltyCardUsedLabel: 'Loyalty card used',\n    cashUsedLabel: 'Cash',\n    customerAccountUsedLabel: 'Customer Account',\n    orderIdLabel: 'Order ID:',\n    confirmationIdLabel: 'Confirmation Id',\n    orderSummaryTitle: 'Order summary',\n    paymentMethodsTitle: 'Payment method',\n    shippingAddressTitle: 'Shipping address',\n    noSalesOrderDetailsText: 'No order details found',\n    needHelpLabel: 'Need help?',\n    helpLineNumberLabel: 'Call',\n    helpLineContactAriaLabel: 'Need help, call',\n    orderItemLabel: 'item',\n    orderItemsLabel: 'items',\n    pickedUpSalesLines: 'Store pickup',\n    deliveredSalesLines: 'Delivery',\n    carryOutSalesLines: 'Purchased',\n    orderStatusReadyForPickup: 'Ready for pickup',\n    orderStatusProcessing: 'Processing',\n    orderStatusShipped: 'Shipped',\n    orderStatusPickedUp: 'Picked up',\n    orderStatusCanceled: 'Canceled',\n    phoneLabel: 'Phone: ',\n    phoneAriaLabel: 'Shop phone',\n    buyItAgainLabel: 'Buy it again',\n    buyItAgainAriaLabel: 'Buy it again for {productName}',\n    shipToLabel: 'Ship to',\n    storeLabel: 'Store',\n    productDimensionTypeColor: 'Color:',\n    productDimensionTypeSize: 'Size:',\n    productDimensionTypeStyle: 'Style:',\n    genericErrorMessage: 'Something went wrong. Please try again later.',\n    trackingLabel: 'Tracking number:',\n    trackingComingSoonLabel: 'Not yet available',\n    trackingAriaLabel: 'Track your order',\n    pointsEarnedLabel: 'Points earned',\n    backToShopping: 'Back to shopping',\n    configString: 'Configuration',\n    discountStringText: 'Savings ',\n    posChannelNameText: 'Purchased at ',\n    onlineStoreChannelNameText: 'Online purchase'\n};\n\nconst mockConfigWithTransition: IOrderDetailsConfig = {\n    heading: {\n        text: 'Order details',\n        tag: HeadingTag.h1\n    },\n    contactNumber: '000-000-0000'\n};\n\nconst mockActions = {};\n\ndescribe('OrderDetails', () => {\n    let modulePropsWithSalesOrder: IOrderDetailsProps<IOrderDetailsData>;\n    let modulePropsWithTransaction: IOrderDetailsProps<IOrderDetailsData>;\n    let modulePropsWithSalesOrderWithReceiptId: IOrderDetailsProps<IOrderDetailsData>;\n    let modulePropsWithSalesOrderWithReceiptIdAndOrderId: IOrderDetailsProps<IOrderDetailsData>;\n\n    beforeAll(() => {\n        modulePropsWithSalesOrder = {\n            ...(buildMockModuleProps(mockDataWithSalesOrder, mockActions, mockConfigSalesOrder, mockContext) as IOrderDetailsProps<\n                IOrderDetailsData\n            >),\n            resources: mockConfigResources,\n            // @ts-ignore\n            renderView\n        };\n        modulePropsWithTransaction = {\n            ...(buildMockModuleProps(mockDataWithTransaction, mockActions, mockConfigWithTransition, mockContext) as IOrderDetailsProps<\n                IOrderDetailsData\n            >),\n            resources: mockConfigResources,\n            // @ts-ignore\n            renderView\n        };\n        modulePropsWithSalesOrderWithReceiptId = {\n            ...(buildMockModuleProps(mockDataWithSalesOrderWithReceiptId, mockActions, mockConfigSalesOrder, mockContext) as IOrderDetailsProps<\n                IOrderDetailsData\n            >),\n            resources: mockConfigResources,\n            // @ts-ignore\n            renderView\n        };\n        modulePropsWithSalesOrderWithReceiptIdAndOrderId = {\n            ...(buildMockModuleProps(mockDataWithSalesOrderWithReceiptIdAndOrderId, mockActions, mockConfigSalesOrder, mockContext) as IOrderDetailsProps<\n                IOrderDetailsData\n            >),\n            resources: mockConfigResources,\n            // @ts-ignore\n            renderView\n        };\n    });\n    it('renders correctly with sales order', () => {\n        const component: renderer.ReactTestRenderer = renderer.create(<OrderDetails {...modulePropsWithSalesOrder} />);\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it('renders correctly with transaction', () => {\n        const component: renderer.ReactTestRenderer = renderer.create(<OrderDetails {...modulePropsWithTransaction} />);\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it('renders correctly with sales order with receipt id only', () => {\n        const component: renderer.ReactTestRenderer = renderer.create(<OrderDetails {...modulePropsWithSalesOrderWithReceiptId} />);\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it('renders correctly with sales order with receipt id and order id', () => {\n        const component: renderer.ReactTestRenderer = renderer.create(<OrderDetails {...modulePropsWithSalesOrderWithReceiptIdAndOrderId} />);\n        const tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n"]}