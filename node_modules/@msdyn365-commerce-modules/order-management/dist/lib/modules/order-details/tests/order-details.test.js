import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import * as React from 'react';
import * as renderer from 'react-test-renderer';
import OrderDetails from '../order-details';
import renderView from '../order-details.view';
import { mockProducts, mockSalesOrder, mockSalesOrderWithReceiptId, mockSalesOrderWithReceiptIdAndOrderId, mockTenderTypes, mockTransaction } from './__mock__';
const mockContext = buildMockCoreContext({
    request: {
        gridSettings: {
            xs: { w: 767, h: 0 },
            sm: { w: 991, h: 0 },
            md: { w: 1199, h: 0 },
            lg: { w: 1599, h: 0 },
            xl: { w: 1600, h: 0 }
        },
        apiSettings: {
            channelId: 5637145359
        },
        channel: {
            PickupDeliveryModeCode: '70'
        }
    }
});
const loyaltyCard = {
    CardNumber: '1234567890',
    LoyaltyEnrollmentDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    RewardPoints: [
        {
            RewardPointId: 'Fabrikam',
            RewardPointTypeValue: 1,
            RewardPointCurrency: 'USD',
            IsRedeemable: true,
            PointsExpiringSoon: 34,
            ActivePoints: 90,
            Description: 'Fabrikam awesome points'
        }
    ]
};
const mockDataWithSalesOrder = {
    orderHydration: {
        status: 'SUCCESS',
        result: {
            salesOrder: mockSalesOrder,
            products: mockProducts
        }
    },
    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),
    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),
    channels: wrapInResolvedAsyncResult({
        channelIdentities: []
    }),
    orgUnitLocations: wrapInResolvedAsyncResult({
        orgUnitLocations: []
    })
};
const mockDataWithTransaction = {
    orderHydration: {
        status: 'SUCCESS',
        result: {
            salesOrder: mockTransaction,
            products: mockProducts
        }
    },
    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),
    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),
    channels: wrapInResolvedAsyncResult({
        channelIdentities: []
    }),
    orgUnitLocations: wrapInResolvedAsyncResult({
        orgUnitLocations: []
    })
};
const mockDataWithSalesOrderWithReceiptId = {
    orderHydration: {
        status: 'SUCCESS',
        result: {
            salesOrder: mockSalesOrderWithReceiptId,
            products: mockProducts
        }
    },
    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),
    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),
    channels: wrapInResolvedAsyncResult({
        channelIdentities: []
    }),
    orgUnitLocations: wrapInResolvedAsyncResult({
        orgUnitLocations: []
    })
};
const mockDataWithSalesOrderWithReceiptIdAndOrderId = {
    orderHydration: {
        status: 'SUCCESS',
        result: {
            salesOrder: mockSalesOrderWithReceiptIdAndOrderId,
            products: mockProducts
        }
    },
    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),
    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),
    channels: wrapInResolvedAsyncResult({
        channelIdentities: []
    }),
    orgUnitLocations: wrapInResolvedAsyncResult({
        orgUnitLocations: []
    })
};
const mockConfigSalesOrder = {
    contactNumber: '123-456-7890'
};
const mockConfigResources = {
    orderSummaryHeading: 'Order summary',
    receiptEmailMessage: 'Confirmation email sent to ',
    receiptIdLabel: 'Receipt#',
    loadingLabel: 'Loading...',
    freePriceText: 'FREE',
    orderSummaryItemsTotalLabel: 'Subtotal',
    orderSummaryShippingFeeLabel: 'Shipping',
    orderSummaryTaxLabel: 'Tax',
    orderSummaryGrandTotalLabel: 'Grand total',
    salesLineQuantityText: 'Quantity:',
    processingLabel: 'Processing',
    creditCardEndingLabel: 'card ending in',
    giftCardEndingLabel: 'Gift card ending in',
    amountCoveredLabel: 'Amount covered:',
    loyaltyCardUsedLabel: 'Loyalty card used',
    cashUsedLabel: 'Cash',
    customerAccountUsedLabel: 'Customer Account',
    orderIdLabel: 'Order ID:',
    confirmationIdLabel: 'Confirmation Id',
    orderSummaryTitle: 'Order summary',
    paymentMethodsTitle: 'Payment method',
    shippingAddressTitle: 'Shipping address',
    noSalesOrderDetailsText: 'No order details found',
    needHelpLabel: 'Need help?',
    helpLineNumberLabel: 'Call',
    helpLineContactAriaLabel: 'Need help, call',
    orderItemLabel: 'item',
    orderItemsLabel: 'items',
    pickedUpSalesLines: 'Store pickup',
    deliveredSalesLines: 'Delivery',
    carryOutSalesLines: 'Purchased',
    orderStatusReadyForPickup: 'Ready for pickup',
    orderStatusProcessing: 'Processing',
    orderStatusShipped: 'Shipped',
    orderStatusPickedUp: 'Picked up',
    orderStatusCanceled: 'Canceled',
    phoneLabel: 'Phone: ',
    phoneAriaLabel: 'Shop phone',
    buyItAgainLabel: 'Buy it again',
    buyItAgainAriaLabel: 'Buy it again for {productName}',
    shipToLabel: 'Ship to',
    storeLabel: 'Store',
    productDimensionTypeColor: 'Color:',
    productDimensionTypeSize: 'Size:',
    productDimensionTypeStyle: 'Style:',
    genericErrorMessage: 'Something went wrong. Please try again later.',
    trackingLabel: 'Tracking number:',
    trackingComingSoonLabel: 'Not yet available',
    trackingAriaLabel: 'Track your order',
    pointsEarnedLabel: 'Points earned',
    backToShopping: 'Back to shopping',
    configString: 'Configuration',
    discountStringText: 'Savings ',
    posChannelNameText: 'Purchased at ',
    onlineStoreChannelNameText: 'Online purchase'
};
const mockConfigWithTransition = {
    heading: {
        text: 'Order details',
        tag: "h1"
    },
    contactNumber: '000-000-0000'
};
const mockActions = {};
describe('OrderDetails', () => {
    let modulePropsWithSalesOrder;
    let modulePropsWithTransaction;
    let modulePropsWithSalesOrderWithReceiptId;
    let modulePropsWithSalesOrderWithReceiptIdAndOrderId;
    beforeAll(() => {
        modulePropsWithSalesOrder = {
            ...buildMockModuleProps(mockDataWithSalesOrder, mockActions, mockConfigSalesOrder, mockContext),
            resources: mockConfigResources,
            renderView
        };
        modulePropsWithTransaction = {
            ...buildMockModuleProps(mockDataWithTransaction, mockActions, mockConfigWithTransition, mockContext),
            resources: mockConfigResources,
            renderView
        };
        modulePropsWithSalesOrderWithReceiptId = {
            ...buildMockModuleProps(mockDataWithSalesOrderWithReceiptId, mockActions, mockConfigSalesOrder, mockContext),
            resources: mockConfigResources,
            renderView
        };
        modulePropsWithSalesOrderWithReceiptIdAndOrderId = {
            ...buildMockModuleProps(mockDataWithSalesOrderWithReceiptIdAndOrderId, mockActions, mockConfigSalesOrder, mockContext),
            resources: mockConfigResources,
            renderView
        };
    });
    it('renders correctly with sales order', () => {
        const component = renderer.create(React.createElement(OrderDetails, Object.assign({}, modulePropsWithSalesOrder)));
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('renders correctly with transaction', () => {
        const component = renderer.create(React.createElement(OrderDetails, Object.assign({}, modulePropsWithTransaction)));
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('renders correctly with sales order with receipt id only', () => {
        const component = renderer.create(React.createElement(OrderDetails, Object.assign({}, modulePropsWithSalesOrderWithReceiptId)));
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('renders correctly with sales order with receipt id and order id', () => {
        const component = renderer.create(React.createElement(OrderDetails, Object.assign({}, modulePropsWithSalesOrderWithReceiptIdAndOrderId)));
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
});
//# sourceMappingURL=order-details.test.js.map