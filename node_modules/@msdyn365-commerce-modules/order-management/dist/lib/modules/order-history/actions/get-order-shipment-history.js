import { buildCacheKey, getSimpleProducts, ProductInput } from '@msdyn365-commerce-modules/retail-actions';
import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getOrderShipmentsHistoryAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';
const getOrderShipmentHistory = (paging) => async (ctx) => {
    return getOrderShipmentsHistoryAsync({
        callerContext: ctx,
        queryResultSettings: {
            Paging: {
                Top: paging.top,
                Skip: paging.skip
            }
        }
    }, '');
};
const getProducts = (productIds = [], channelId) => (ctx) => {
    const productInputs = productIds.map(productId => new ProductInput(productId, ctx.requestContext.apiSettings, channelId));
    return getSimpleProducts(productInputs, ctx);
};
export class GetSalesOrderHistoryWithHydrationsInput {
    constructor(paging, apiSettings) {
        this.getCacheKey = () => buildCacheKey(`OrderHistory`, this.apiSettings);
        this.getCacheObjectType = () => `OrderHistory`;
        this.dataCacheType = () => 'request';
        this.apiSettings = apiSettings;
        this.paging = paging;
    }
}
const splitProductsByChannelId = (salesOrders, currentChannelId) => {
    const productIdsByChannel = {};
    salesOrders.forEach(salesOrder => salesOrder?.SalesLines?.forEach(line => {
        const orderProductId = line.ProductId || 0;
        const orderChannelId = salesOrder.ChannelId || currentChannelId;
        if (!productIdsByChannel[orderChannelId]) {
            productIdsByChannel[orderChannelId] = [];
        }
        productIdsByChannel[orderChannelId].push(orderProductId);
    }));
    return productIdsByChannel;
};
export async function getSalesOrderHistoryWithHydrationsAction(input, context) {
    if (!context) {
        throw new Error(`getSalesOrderWithHydrationsAction - Action context cannot be null/undefined`);
    }
    const channelId = context.requestContext.apiSettings.channelId;
    let salesOrders = [];
    try {
        salesOrders = await getOrderShipmentHistory(input.paging)(context);
    }
    catch (error) {
        throw error;
    }
    if (!salesOrders || !salesOrders.length) {
        return {
            salesOrders: [],
            products: []
        };
    }
    const productIdsByChannelId = splitProductsByChannelId(salesOrders, channelId);
    const getProductsPromise = Object.entries(productIdsByChannelId).map(([entryChannelId, entryProductIdsList]) => {
        const getProductsCall = getProducts(entryProductIdsList, Number(entryChannelId));
        return getProductsCall(context);
    });
    return Promise.all(getProductsPromise).then((productList) => {
        const products = productList.reduce((memo, list) => {
            return [...memo, ...list];
        }, []);
        return {
            salesOrders,
            products
        };
    }).catch(error => {
        context.telemetry.exception(error);
        context.telemetry.debug('Failed to get products');
        throw error;
    });
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/order-management/order-history/get-order-shipment-history',
    action: getSalesOrderHistoryWithHydrationsAction
});
//# sourceMappingURL=get-order-shipment-history.js.map