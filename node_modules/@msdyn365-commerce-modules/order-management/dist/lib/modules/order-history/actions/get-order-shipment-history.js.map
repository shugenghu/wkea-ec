{"version":3,"file":"get-order-shipment-history.js","sourceRoot":"./src/","sources":["modules/order-history/actions/get-order-shipment-history.ts"],"names":[],"mappings":"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","sourcesContent":["import { buildCacheKey, getSimpleProducts, ProductInput } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    ICommerceApiSettings\n} from '@msdyn365-commerce/core';\nimport { getOrderShipmentsHistoryAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';\nimport { OrderShipments, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nexport interface IPaging {\n    top: number;\n    skip: number;\n}\n\nexport interface IOrderHistory {\n    salesOrders: OrderShipments[];\n    products: SimpleProduct[];\n}\n\n/**\n * Calls the Retail API and returns the products\n */\nconst getOrderShipmentHistory = (paging: IPaging) => async (ctx: IActionContext): Promise<OrderShipments[]> => {\n    return getOrderShipmentsHistoryAsync(\n        {\n            callerContext: ctx,\n            queryResultSettings: {\n                Paging: {\n                    Top: paging.top,\n                    Skip: paging.skip\n                }\n            }\n        },\n        ''\n    );\n};\n\n/**\n * Calls the Retail API and returns the products\n */\nconst getProducts = (productIds: number[] = [], channelId?: number) => (ctx: IActionContext): Promise<SimpleProduct[]> => {\n    const productInputs = productIds.map(productId => new ProductInput(productId, ctx.requestContext.apiSettings, channelId));\n    return getSimpleProducts(productInputs, ctx);\n};\n\n/**\n *  Action input\n */\nexport class GetSalesOrderHistoryWithHydrationsInput implements IActionInput {\n    public paging: IPaging;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(paging: IPaging, apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n        this.paging = paging;\n    }\n\n    public getCacheKey = () => buildCacheKey(`OrderHistory`, this.apiSettings);\n    public getCacheObjectType = () => `OrderHistory`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Splits product ids from the given orders into lists by their channel id.\n * @param {OrderShipments[]} salesOrders Orders with the products.\n * @param {number} currentChannelId Channel id to use by default if no channel id is provided for a product.\n * @returns {{ [x: number]: number[] }} A dictionary where the key is a channel id,\n * and the value is a list of product ids in which all items correspond to the key channel id.\n * @remark The list of product ids is always non-empty.\n */\nconst splitProductsByChannelId = (\n    salesOrders: OrderShipments[],\n    currentChannelId: number): { [x: number]: number[] } => {\n\n    const productIdsByChannel: { [x: number]: number[] } = {};\n\n    salesOrders.forEach(salesOrder => salesOrder?.SalesLines?.forEach(line => {\n        const orderProductId = line.ProductId || 0;\n        const orderChannelId = salesOrder.ChannelId || currentChannelId;\n        if (!productIdsByChannel[orderChannelId]) {\n            productIdsByChannel[orderChannelId] = [];\n        }\n        productIdsByChannel[orderChannelId].push(orderProductId);\n    }));\n\n    return productIdsByChannel;\n};\n\n/**\n * Get sales order with hydrations action\n */\nexport async function getSalesOrderHistoryWithHydrationsAction(\n    input: GetSalesOrderHistoryWithHydrationsInput,\n    context: IActionContext\n): Promise<IOrderHistory> {\n    if (!context) {\n        throw new Error(`getSalesOrderWithHydrationsAction - Action context cannot be null/undefined`);\n    }\n    const channelId = context.requestContext.apiSettings.channelId;\n    let salesOrders: OrderShipments[] = [];\n\n    try {\n        salesOrders = await getOrderShipmentHistory(input.paging)(context);\n    } catch (error) {\n        throw error;\n    }\n\n    if (!salesOrders || !salesOrders.length) {\n        return {\n            salesOrders: [],\n            products: []\n        };\n    }\n\n    // Splits the data by channel ids so that the products from different channels can be processed separately.\n    const productIdsByChannelId = splitProductsByChannelId(salesOrders, channelId);\n\n    // Promise that retrieves information about the products for each channel id.\n    // Note, the list of product ids should not be empty\n    // as it will generate an empty request which will force the promise to fail.\n    const getProductsPromise = Object.entries(productIdsByChannelId).map(\n        ([entryChannelId, entryProductIdsList]) => {\n            const getProductsCall = getProducts(entryProductIdsList, Number(entryChannelId));\n            return getProductsCall(context);\n        });\n\n    return Promise.all(getProductsPromise).then(\n        (productList): IOrderHistory => {\n            const products = productList.reduce((memo, list) => {\n                return [...memo, ...list];\n            }, []); // tslint:disable-line:align\n\n            return {\n                salesOrders,\n                products\n            };\n        }).catch(error => {\n            context.telemetry.exception(error);\n            context.telemetry.debug('Failed to get products');\n            throw error;\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/order-management/order-history/get-order-shipment-history',\n    action: <IAction<IOrderHistory>>getSalesOrderHistoryWithHydrationsAction\n});"]}