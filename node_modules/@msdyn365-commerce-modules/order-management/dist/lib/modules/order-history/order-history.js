import { __decorate } from "tslib";
import classname from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { Button, getPayloadObject, getTelemetryAttributes, getTelemetryObject, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import LabelComponent from '../../common/label';
import { getSalesOrderHistoryWithHydrationsAction, GetSalesOrderHistoryWithHydrationsInput } from './actions/get-order-shipment-history';
import { getSalesOrder } from './components/get-sales-order';
export * from '../../common/get-groups';
export * from '../../common/get-order-information';
export * from '../../common/get-sales-line';
export * from '../../common/get-sales-lines';
export * from '../../common/utilities';
export * from './components/get-sales-order';
export * from '../../common/get-order-information';
export * from './components/get-sales-order';
let OrderHistory = class OrderHistory extends React.Component {
    constructor(props) {
        super(props);
        this.handleOrderHistoryHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this.onMoreButtonClick = () => {
            this.getOrderHistory();
        };
        this.getOrderHistory = async () => {
            const actionContext = this.props.context.actionContext;
            const input = new GetSalesOrderHistoryWithHydrationsInput(this.paging, this.props.context.request.apiSettings);
            try {
                this.viewState.isLoading = true;
                const response = await getSalesOrderHistoryWithHydrationsAction(input, actionContext);
                if (response) {
                    const { products, salesOrders } = response;
                    this.orderHistory.products.push(...products);
                    this.orderHistory.salesOrders.push(...salesOrders);
                    this.viewState.isShowMoreButton = this.viewState.isShowMoreButton && response.salesOrders.length > 0 && response.salesOrders.length === this.pageSize;
                    this.paging.skip += this.pageSize;
                }
                this.viewState.isLoading = false;
                return Promise.resolve();
            }
            catch (error) {
                return Promise.reject();
            }
        };
        this.orderHistory = {
            salesOrders: [],
            products: []
        };
        this.viewState = {
            isDataReady: false,
            hasError: false,
            isShowMoreButton: (this.props.config.pageSize || 0) > 0,
            isLoading: false
        };
        this.pageSize = this.props.config.pageSize || 10;
        this.paging = {
            top: this.pageSize,
            skip: 0
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this.payLoad = getPayloadObject('click', this.telemetryContent, '');
    }
    componentDidMount() {
        this.getOrderHistory()
            .then(() => {
            this.viewState.isDataReady = true;
        })
            .catch(ex => {
            this.viewState.hasError = true;
        });
    }
    render() {
        const { config: { heading, className, showChannelInfo }, resources: { genericErrorMessage, noOrderHistoryLable, moreButtonText, backToShopping, orderCountLabel, ordersCountLabel, loadingLabel } } = this.props;
        const { salesOrders, products } = this.orderHistory;
        const { isDataReady, hasError, isShowMoreButton, isLoading } = this.viewState;
        const backToShoppingUrl = Msdyn365.getUrlSync('home', this.props.context.actionContext) || '';
        const channelIdentities = this.props.data.channels.result && this.props.data.channels.result.channelIdentities;
        const orgUnitLocations = this.props.data.orgUnitLocations.result && this.props.data.orgUnitLocations.result.orgUnitLocations;
        let viewProps = {
            ...this.props,
            orderHistory: this.orderHistory,
            viewState: this.viewState,
            orderHistoryProps: {
                moduleProps: this.props,
                className: classname('ms-order-history', className)
            },
            header: {
                headerProps: { className: 'ms-order-history__header' },
                heading: heading && heading.text && (React.createElement(Msdyn365.Text, Object.assign({}, heading, { className: 'ms-order-history__heading', text: heading.text, tag: heading.tag || 'h2', editProps: { onEdit: this.handleOrderHistoryHeadingChange, requestContext: this.props.context.request } })))
            },
            backToShoppingLink: backToShoppingUrl && (React.createElement(Button, { className: 'ms-order-history__btn-keep-shopping', href: backToShoppingUrl }, backToShopping))
        };
        if (hasError) {
            viewProps = {
                ...viewProps,
                alert: React.createElement(LabelComponent, { className: 'ms-order-history__alert', label: genericErrorMessage })
            };
            return this.props.renderView(viewProps);
        }
        if (!isDataReady) {
            viewProps = {
                ...viewProps,
                loading: React.createElement(LabelComponent, { className: 'ms-order-history__loading', label: loadingLabel })
            };
            return this.props.renderView(viewProps);
        }
        if (!salesOrders || salesOrders.length === 0) {
            viewProps = {
                ...viewProps,
                emptyMessage: React.createElement("p", { className: 'ms-order-history__empty-message' }, noOrderHistoryLable)
            };
            return this.props.renderView(viewProps);
        }
        const _orderCountLabel = salesOrders.length === 1 ? orderCountLabel : ordersCountLabel;
        this.payLoad.contentAction.etext = TelemetryConstant.ViewMore;
        const viewMoreAttributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
        viewProps = {
            ...viewProps,
            header: {
                ...viewProps.header,
                orderCountLabel: React.createElement("span", { className: 'ms-order-history__order-count' }, `(${salesOrders.length} ${_orderCountLabel})`)
            },
            list: {
                listProps: { className: 'ms-order-history__sales-order-list' },
                salesOrders: salesOrders.map(salesOrder => getSalesOrder({
                    ...this.props,
                    products,
                    salesOrder,
                    channelIdentities,
                    orgUnitLocations,
                    showChannelInfo,
                    telemetryContent: this.telemetryContent
                }))
            },
            moreButton: isShowMoreButton && (React.createElement(Button, Object.assign({ className: `ms-order-history__btn-more ${isLoading ? 'is-busy' : ''}` }, viewMoreAttributes, { disabled: isLoading, onClick: this.onMoreButtonClick }), moreButtonText))
        };
        return this.props.renderView(viewProps);
    }
};
__decorate([
    observable
], OrderHistory.prototype, "orderHistory", void 0);
__decorate([
    observable
], OrderHistory.prototype, "viewState", void 0);
OrderHistory = __decorate([
    observer
], OrderHistory);
export default OrderHistory;
//# sourceMappingURL=order-history.js.map