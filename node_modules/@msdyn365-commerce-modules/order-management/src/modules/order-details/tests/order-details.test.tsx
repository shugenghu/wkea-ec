/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { AsyncResult, ChannelIdentity, LoyaltyCard, OrgUnitLocation, SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
/// <reference types="jest" />
// tslint:disable-next-line:no-unused-variable
import * as React from 'react';
import * as renderer from 'react-test-renderer';
import OrderDetails from '../order-details';
import { IOrderDetailsData } from '../order-details.data';
import { HeadingTag, IOrderDetailsConfig, IOrderDetailsProps, IOrderDetailsResources } from '../order-details.props.autogenerated';
import renderView from '../order-details.view';
import {
    mockProducts,
    mockSalesOrder,
    mockSalesOrderWithReceiptId,
    mockSalesOrderWithReceiptIdAndOrderId,
    mockTenderTypes,
    mockTransaction
} from './__mock__';

// @ts-ignore
const mockContext: ICoreContext = buildMockCoreContext({
    // @ts-ignore only mock partial data
    request: {
        gridSettings: {
            xs: { w: 767, h: 0 },
            sm: { w: 991, h: 0 },
            md: { w: 1199, h: 0 },
            lg: { w: 1599, h: 0 },
            xl: { w: 1600, h: 0 }
        },
        // @ts-ignore only mock partial data
        apiSettings: {
            channelId: 5637145359
        },
        // @ts-ignore only mock partial data
        channel: {
            PickupDeliveryModeCode: '70'
        }
    }
});

const loyaltyCard: LoyaltyCard = {
    CardNumber: '1234567890',
    LoyaltyEnrollmentDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    RewardPoints: [
        {
            RewardPointId: 'Fabrikam',
            RewardPointTypeValue: 1,
            RewardPointCurrency: 'USD',
            IsRedeemable: true,
            PointsExpiringSoon: 34,
            ActivePoints: 90,
            Description: 'Fabrikam awesome points'
        }
    ]
};

const mockDataWithSalesOrder: IOrderDetailsData = {
    orderHydration: {
        status: 'SUCCESS',
        result: {
            salesOrder: mockSalesOrder,
            products: mockProducts
        }
    } as AsyncResult<{
        salesOrder: SalesOrder;
        products: SimpleProduct[];
    }>,
    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),
    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),
    channels: wrapInResolvedAsyncResult({
        channelIdentities: [] as ChannelIdentity[]
    }),
    orgUnitLocations: wrapInResolvedAsyncResult({
        orgUnitLocations: [] as OrgUnitLocation[]
    })
};

const mockDataWithTransaction: IOrderDetailsData = {
    orderHydration: {
        status: 'SUCCESS',
        result: {
            salesOrder: mockTransaction,
            products: mockProducts
        }
    } as AsyncResult<{
        salesOrder: SalesOrder;
        products: SimpleProduct[];
    }>,
    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),
    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),
    channels: wrapInResolvedAsyncResult({
        channelIdentities: [] as ChannelIdentity[]
    }),
    orgUnitLocations: wrapInResolvedAsyncResult({
        orgUnitLocations: [] as OrgUnitLocation[]
    })
};

const mockDataWithSalesOrderWithReceiptId: IOrderDetailsData = {
    orderHydration: {
        status: 'SUCCESS',
        result: {
            salesOrder: mockSalesOrderWithReceiptId,
            products: mockProducts
        }
    } as AsyncResult<{
        salesOrder: SalesOrder;
        products: SimpleProduct[];
    }>,
    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),
    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),
    channels: wrapInResolvedAsyncResult({
        channelIdentities: [] as ChannelIdentity[]
    }),
    orgUnitLocations: wrapInResolvedAsyncResult({
        orgUnitLocations: [] as OrgUnitLocation[]
    })
};

const mockDataWithSalesOrderWithReceiptIdAndOrderId: IOrderDetailsData = {
    orderHydration: {
        status: 'SUCCESS',
        result: {
            salesOrder: mockSalesOrderWithReceiptIdAndOrderId,
            products: mockProducts
        }
    } as AsyncResult<{
        salesOrder: SalesOrder;
        products: SimpleProduct[];
    }>,
    tenderTypes: wrapInResolvedAsyncResult(mockTenderTypes),
    loyaltyCard: wrapInResolvedAsyncResult(loyaltyCard),
    channels: wrapInResolvedAsyncResult({
        channelIdentities: [] as ChannelIdentity[]
    }),
    orgUnitLocations: wrapInResolvedAsyncResult({
        orgUnitLocations: [] as OrgUnitLocation[]
    })
};

const mockConfigSalesOrder: IOrderDetailsConfig = {
    contactNumber: '123-456-7890'
};

const mockConfigResources: IOrderDetailsResources = {
    orderSummaryHeading: 'Order summary',
    receiptEmailMessage: 'Confirmation email sent to ',
    receiptIdLabel: 'Receipt#',
    loadingLabel: 'Loading...',
    freePriceText: 'FREE',
    orderSummaryItemsTotalLabel: 'Subtotal',
    orderSummaryShippingFeeLabel: 'Shipping',
    orderSummaryTaxLabel: 'Tax',
    orderSummaryGrandTotalLabel: 'Grand total',
    salesLineQuantityText: 'Quantity:',
    processingLabel: 'Processing',
    creditCardEndingLabel: 'card ending in',
    giftCardEndingLabel: 'Gift card ending in',
    amountCoveredLabel: 'Amount covered:',
    loyaltyCardUsedLabel: 'Loyalty card used',
    cashUsedLabel: 'Cash',
    customerAccountUsedLabel: 'Customer Account',
    orderIdLabel: 'Order ID:',
    confirmationIdLabel: 'Confirmation Id',
    orderSummaryTitle: 'Order summary',
    paymentMethodsTitle: 'Payment method',
    shippingAddressTitle: 'Shipping address',
    noSalesOrderDetailsText: 'No order details found',
    needHelpLabel: 'Need help?',
    helpLineNumberLabel: 'Call',
    helpLineContactAriaLabel: 'Need help, call',
    orderItemLabel: 'item',
    orderItemsLabel: 'items',
    pickedUpSalesLines: 'Store pickup',
    deliveredSalesLines: 'Delivery',
    carryOutSalesLines: 'Purchased',
    orderStatusReadyForPickup: 'Ready for pickup',
    orderStatusProcessing: 'Processing',
    orderStatusShipped: 'Shipped',
    orderStatusPickedUp: 'Picked up',
    orderStatusCanceled: 'Canceled',
    phoneLabel: 'Phone: ',
    phoneAriaLabel: 'Shop phone',
    buyItAgainLabel: 'Buy it again',
    buyItAgainAriaLabel: 'Buy it again for {productName}',
    shipToLabel: 'Ship to',
    storeLabel: 'Store',
    productDimensionTypeColor: 'Color:',
    productDimensionTypeSize: 'Size:',
    productDimensionTypeStyle: 'Style:',
    genericErrorMessage: 'Something went wrong. Please try again later.',
    trackingLabel: 'Tracking number:',
    trackingComingSoonLabel: 'Not yet available',
    trackingAriaLabel: 'Track your order',
    pointsEarnedLabel: 'Points earned',
    backToShopping: 'Back to shopping',
    configString: 'Configuration',
    discountStringText: 'Savings ',
    posChannelNameText: 'Purchased at ',
    onlineStoreChannelNameText: 'Online purchase'
};

const mockConfigWithTransition: IOrderDetailsConfig = {
    heading: {
        text: 'Order details',
        tag: HeadingTag.h1
    },
    contactNumber: '000-000-0000'
};

const mockActions = {};

describe('OrderDetails', () => {
    let modulePropsWithSalesOrder: IOrderDetailsProps<IOrderDetailsData>;
    let modulePropsWithTransaction: IOrderDetailsProps<IOrderDetailsData>;
    let modulePropsWithSalesOrderWithReceiptId: IOrderDetailsProps<IOrderDetailsData>;
    let modulePropsWithSalesOrderWithReceiptIdAndOrderId: IOrderDetailsProps<IOrderDetailsData>;

    beforeAll(() => {
        modulePropsWithSalesOrder = {
            ...(buildMockModuleProps(mockDataWithSalesOrder, mockActions, mockConfigSalesOrder, mockContext) as IOrderDetailsProps<
                IOrderDetailsData
            >),
            resources: mockConfigResources,
            // @ts-ignore
            renderView
        };
        modulePropsWithTransaction = {
            ...(buildMockModuleProps(mockDataWithTransaction, mockActions, mockConfigWithTransition, mockContext) as IOrderDetailsProps<
                IOrderDetailsData
            >),
            resources: mockConfigResources,
            // @ts-ignore
            renderView
        };
        modulePropsWithSalesOrderWithReceiptId = {
            ...(buildMockModuleProps(mockDataWithSalesOrderWithReceiptId, mockActions, mockConfigSalesOrder, mockContext) as IOrderDetailsProps<
                IOrderDetailsData
            >),
            resources: mockConfigResources,
            // @ts-ignore
            renderView
        };
        modulePropsWithSalesOrderWithReceiptIdAndOrderId = {
            ...(buildMockModuleProps(mockDataWithSalesOrderWithReceiptIdAndOrderId, mockActions, mockConfigSalesOrder, mockContext) as IOrderDetailsProps<
                IOrderDetailsData
            >),
            resources: mockConfigResources,
            // @ts-ignore
            renderView
        };
    });
    it('renders correctly with sales order', () => {
        const component: renderer.ReactTestRenderer = renderer.create(<OrderDetails {...modulePropsWithSalesOrder} />);
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('renders correctly with transaction', () => {
        const component: renderer.ReactTestRenderer = renderer.create(<OrderDetails {...modulePropsWithTransaction} />);
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('renders correctly with sales order with receipt id only', () => {
        const component: renderer.ReactTestRenderer = renderer.create(<OrderDetails {...modulePropsWithSalesOrderWithReceiptId} />);
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('renders correctly with sales order with receipt id and order id', () => {
        const component: renderer.ReactTestRenderer = renderer.create(<OrderDetails {...modulePropsWithSalesOrderWithReceiptIdAndOrderId} />);
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
});
