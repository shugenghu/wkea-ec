import * as coreActions from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, IActionContext, IRequestContext } from '@msdyn365-commerce/core';
import * as salesOrderActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g';
import 'jest';
import { getSalesOrderWithHydrationsAction, GetSalesOrderWithHydrationsInput, orderTypes } from '../../../actions/get-sales-order-with-hydrations';
import { mockProducts, mockRequestContextJson, mockTransaction } from './__mock__';

describe('GetSalesOrderDetailsBySalesIdInput', () => {
    it('Should Create Inputs Properly', () => {
        const actionContext = buildHydratedMockActionContext({ requestContext: <IRequestContext>mockRequestContextJson });

        const input = new GetSalesOrderWithHydrationsInput('type', '456', actionContext.requestContext.apiSettings);
        expect(input.orderType).toEqual('type');
        expect(input.orderId).toEqual('456');
    });
});

describe('getSalesOrderWithHydrationsAction Unit Tests', () => {
    let actionContext: IActionContext;

    beforeEach(() => {
        jest.mock('@msdyn365-commerce-modules/retail-actions');
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g');

        actionContext = buildHydratedMockActionContext({ requestContext: <IRequestContext>mockRequestContextJson });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        salesOrderActions.GetSalesOrderDetailsByTransactionIdInput = jest.fn();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        salesOrderActions.getSalesOrderDetailsByTransactionIdAsync = jest.fn().mockResolvedValue(mockTransaction);

        // @ts-ignore: Jest Mocking Confuses TS Complier
        coreActions.ProductInput = jest.fn();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        coreActions.getSimpleProducts = jest.fn().mockResolvedValue(mockProducts);
    });

    it('Should fetch sales order and products by transaction id', async () => {
        await getSalesOrderWithHydrationsAction(new GetSalesOrderWithHydrationsInput(orderTypes.transaction, '456', actionContext.requestContext.apiSettings), actionContext)
            .then(response => {
                expect(response.salesOrder.Id).toBe('UiE~EWeXya9o0byTIE7KeP8bIEjpGv9-');
                expect(response.products.length).toBe(2);
                expect(response.products[0].RecordId).toBe(22565430654);

                expect(salesOrderActions.getSalesOrderDetailsByTransactionIdAsync).toBeCalled();
            })
            .catch(error => {
                console.log(error);
                throw new Error('Unable to run getSalesOrderWithHydrationsAction Action');
            });
    });

    afterEach(() => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        salesOrderActions.getSalesOrderDetailsByTransactionIdAsync.mockReset();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        salesOrderActions.GetSalesOrderDetailsByTransactionIdInput.mockReset();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        coreActions.ProductInput.mockReset();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        coreActions.getSimpleProducts.mockReset();
    });

    afterAll(() => {
        jest.unmock('@msdyn365-commerce-modules/retail-actions');
        jest.unmock('@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g');
    });
});