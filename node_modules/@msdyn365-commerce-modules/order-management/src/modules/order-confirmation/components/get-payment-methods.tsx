/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { PriceComponent } from '@msdyn365-commerce/components';
import { TenderLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import * as React from 'react';
import { IPaymentMethods, IPaymentMethodsInput } from '../../../common';

export const getOrderConfirmationPaymentMethods = ({
    priceContext,
    tenderLines,
    tenderIdOperationIdMap,
    resource: { paymentMethodsTitle, creditCardEndingLabel, giftCardEndingLabel, amountCoveredLabel, loyaltyCardUsedLabel, cashUsedLabel }
}: IPaymentMethodsInput): IPaymentMethods => {
    const getLastFourDigit = (digits = '') => digits.substr(-4);

    const getCard = (tenderLine: TenderLine) => {
        const cardLastFourDigit = getLastFourDigit(tenderLine.MaskedCardNumber);
        // @ts-ignore
        const isValidCardNumber = cardLastFourDigit && !isNaN(cardLastFourDigit);

        return (
            <div className='ms-order-confirmation__payment-methods-line' key={tenderLine.TenderTypeId}>
                <p className='ms-order-confirmation__payment-methods-card'>
                    {`${tenderLine.CardTypeId} ${isValidCardNumber ? `${creditCardEndingLabel} ${cardLastFourDigit}` : ``}`}
                </p>
            </div>);
    };

    const getGiftCertificate = (tenderLine: TenderLine) => (
        <div className='ms-order-confirmation__payment-methods-line' key={tenderLine.TenderTypeId}>
            <p className='ms-order-confirmation__payment-methods-gift-card-number'>
                {giftCardEndingLabel} {getLastFourDigit(tenderLine.GiftCardId)}
            </p>
            <p className='ms-order-confirmation__payment-methods-gift-card-amount-info'>
                {amountCoveredLabel}
                <PriceComponent
                    {...priceContext}
                    className='ms-order-confirmation__payment-methods-gift-card-amount'
                    data={{ price: { CustomerContextualPrice: tenderLine.Amount || 0 } }}
                />
            </p>
        </div>
    );

    const getLoyalty = (tenderLine: TenderLine) => (
        <div className='ms-order-confirmation__payment-methods-line' key={tenderLine.TenderTypeId}>
            <p className='ms-order-confirmation__payment-methods-loyalty-number'>
                {loyaltyCardUsedLabel} {tenderLine.LoyaltyCardId}
            </p>
            <p className='ms-order-confirmation__payment-methods-loyalty-amount-info'>
                {amountCoveredLabel}
                <PriceComponent
                    {...priceContext}
                    className='ms-order-confirmation__payment-methods-loyalty-amount'
                    data={{ price: { CustomerContextualPrice: tenderLine.Amount || 0 } }}
                />
            </p>
        </div>
    );

    const getCash = (tenderLine: TenderLine) => (
        <div className='ms-order-confirmation__payment-methods-line' key={tenderLine.TenderTypeId}>
            <p className='ms-order-confirmation__payment-methods-cash'>{cashUsedLabel}</p>
            <p className='ms-order-confirmation__payment-methods-cash-amount-info'>
                {amountCoveredLabel}
                <PriceComponent
                    {...priceContext}
                    className='ms-order-confirmation__payment-methods-cash-amount'
                    data={{ price: { CustomerContextualPrice: tenderLine.Amount || 0 } }}
                />
            </p>
        </div>
    );

    return {
        paymentMethodsProps: { className: 'ms-order-confirmation__payment-methods' },
        title: <div className='ms-order-confirmation__payment-methods-title'>{paymentMethodsTitle}</div>,
        methods: tenderLines.reduce((lines: React.ReactNode[], tenderLine) => {
            if (!tenderLine.TenderTypeId) {
                return lines;
            }
            switch (tenderIdOperationIdMap[tenderLine.TenderTypeId]) {
                case 201:
                    lines.push(getCard(tenderLine));
                    break;
                case 214:
                    lines.push(getGiftCertificate(tenderLine));
                    break;
                case 207:
                    lines.push(getLoyalty(tenderLine));
                    break;
                case 200:
                    lines.push(getCash(tenderLine));
                    break;
                default:
                // do nothing
            }
            return lines;
        },                          [])
    };
};
