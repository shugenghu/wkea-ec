/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { Button, getPayloadObject, getTelemetryAttributes, getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import classname from 'classnames';
import get from 'lodash/get';
import { computed } from 'mobx';
import * as React from 'react';
import { IGetOrderSummaryInput, IHelp, IOrderSummary, IPaymentMethods, IPaymentMethodsInput } from '../../common';
import { getGroups, IGroups } from '../../common/get-groups';
import { getOrderInfomationInput, getOrderInformation, IOrderInformation } from '../../common/get-order-information';
import { ISalesLine } from '../../common/get-sales-line';
import { getSalesLines, getSalesLinesInput } from '../../common/get-sales-lines';
import LabelComponent from '../../common/label';
import { getTenderIdOperationIdMap, IPriceContext } from '../../common/utilities';
import { getOrderConfirmationHelp } from './components/get-help';
import { getOrderConfirmationOrderSummary } from './components/get-order-summary';
import { getOrderConfirmationPaymentMethods } from './components/get-payment-methods';
import { IOrderConfirmationData } from './order-confirmation.data';
import { IOrderConfirmationProps } from './order-confirmation.props.autogenerated';

export * from '../../common/get-groups';
export * from '../../common/get-order-information';
export * from '../../common/get-sales-line';
export * from '../../common/get-sales-lines';
export * from '../../common/utilities';
export * from './components/get-help';
export * from './components/get-order-summary';
export * from './components/get-payment-methods';

export interface IOrderConfirmationViewProps extends IOrderConfirmationProps<IOrderConfirmationData> {
    moduleProps: IModuleProps;
    salesOrder?: SalesOrder;
    footerProps?: INodeProps;
    alert?: React.ReactNode;
    loading?: React.ReactNode;
    heading: React.ReactNode;
    backToShoppingLink?: React.ReactNode;
    orderInfomation?: IOrderInformation;
    salesLines?: ISalesLine[];
    groups?: IGroups;
    orderSummary?: IOrderSummary;
    payment?: IPaymentMethods;
    help?: IHelp;
}

/**
 *
 * OrderConfirmation component
 * @extends {React.PureComponent<IOrderConfirmationProps<IOrderConfirmationData>>}
 */
class OrderConfirmation extends React.PureComponent<IOrderConfirmationProps<IOrderConfirmationData>> {
    private moduleName: string = 'ms-order-confirmation';
    private telemetryContent?: ITelemetryContent;
    private backToShoppingAttributes?: Msdyn365.IDictionary<string>;

    constructor(props: IOrderConfirmationProps<IOrderConfirmationData>) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
        const payLoad = getPayloadObject('click', this.telemetryContent, TelemetryConstant.BackToShopping);
        this.backToShoppingAttributes = getTelemetryAttributes(this.telemetryContent, payLoad);
    }

    @computed get isCurrentChannel(): boolean {
        if (!this.order) {
            return false;
        }
        return this.order.ChannelId === get(this.props, 'context.request.apiSettings.channelId');
    }

    @computed get isDataReady(): boolean {
        return get(this.props, 'data.orderHydration.status') === 'SUCCESS';
    }

    @computed get hasError(): boolean {
        return get(this.props, 'data.orderHydration.status') === 'FAILED';
    }

    @computed get order(): SalesOrder | undefined {
        return get(this.props, 'data.orderHydration.result.salesOrder');
    }

    @computed get products(): SimpleProduct[] {
        return get(this.props, 'data.orderHydration.result.products') || [];
    }

    @computed get priceContext(): IPriceContext {
        const {
            id,
            typeName,
            context,
            telemetry,
            resources: { freePriceText }
        } = this.props;
        return {
            id,
            typeName,
            context,
            telemetry,
            freePriceText
        };
    }

    @computed get earnedPoints(): number {
        const loyaltyCard = this.props.data.loyaltyCard.result;
        if (loyaltyCard && loyaltyCard.RewardPoints && this.order) {
            const pointPrograms = loyaltyCard.RewardPoints.map(point => point.RewardPointId);
            const rewardLines = this.order.LoyaltyRewardPointLines || [];
            let total = 0;
            rewardLines.forEach(line => {
                if ((line.RewardPointAmountQuantity || 0) > 0 && pointPrograms.indexOf(line.RewardPointId) > -1) {
                    total += line.RewardPointAmountQuantity!;
                }
            });
            return total;
        }
        return 0;
    }

    @computed get orderSummaryProps(): IGetOrderSummaryInput | undefined {
        if (!this.order) {
            return;
        }
        const { request } = this.props.context;
        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;
        const orderDetailsLines =  this.order?.SalesLines;
        const canShip = orderDetailsLines?.some(orderDetailsLine => (orderDetailsLine.DeliveryMode && orderDetailsLine.DeliveryMode !== '') ? orderDetailsLine.DeliveryMode !== pickupDeliveryModeCode : orderDetailsLine);

        const {
            resources: { orderSummaryHeading, orderSummaryItemsTotalLabel, orderSummaryShippingFeeLabel, orderSummaryTaxLabel, orderSummaryGrandTotalLabel, pointsEarnedLabel }
        } = this.props;
        return {
            order: this.order,
            earnedPoints: this.earnedPoints,
            priceContext: this.priceContext,
            resource: {
                orderSummaryHeading,
                orderSummaryItemsTotalLabel,
                orderSummaryShippingFeeLabel,
                orderSummaryTaxLabel,
                pointsEarnedLabel,
                orderSummaryGrandTotalLabel
            },
            canShip: canShip
        };
    }

    @computed get paymentMethodsProps(): IPaymentMethodsInput | undefined {
        const tenderTypes = this.props.data.tenderTypes.result;
        if (!this.order || !this.order.TenderLines || !tenderTypes) {
            return;
        }

        const locale = get(this.props, 'context.request.locale') || 'en-US';

        const {
            resources: {
                paymentMethodsTitle,
                creditCardEndingLabel,
                giftCardEndingLabel,
                amountCoveredLabel,
                cashUsedLabel,
                loyaltyCardUsedLabel,
                customerAccountUsedLabel
            }
        } = this.props;

        return {
            priceContext: this.priceContext,
            tenderLines: this.order.TenderLines,
            tenderIdOperationIdMap: getTenderIdOperationIdMap(tenderTypes),
            locale,
            resource: {
                paymentMethodsTitle,
                creditCardEndingLabel,
                giftCardEndingLabel,
                amountCoveredLabel,
                cashUsedLabel,
                loyaltyCardUsedLabel,
                customerAccountUsedLabel
            }
        };
    }

    public render(): JSX.Element {
        const {
            resources: {
                noSalesOrderText,
                genericErrorMessage,
                needHelpLabel,
                helpLineNumberLabel,
                loadingLabel,
                backToShopping,
                orderItemLabel,
                orderItemsLabel,
                pickupItemsHeader,
                pickingItemsLabel,
                shippingAddressTitle,
                shippingItemToYouLabel,
                helpLineContactAriaLabel
            },
            config: { heading, contactNumber }
        } = this.props;

        const moduleProps = { moduleProps: this.props, className: classname('ms-order-confirmation', this.props.config.className) };
        const backToShoppingUrl = Msdyn365.getUrlSync('home', this.props.context.actionContext) || '';

        let viewProps: IOrderConfirmationViewProps = {
            ...this.props,
            moduleProps,
            heading: heading && heading.text && (
            <Msdyn365.Text
                {...heading}
                className='ms-order-confirmation__heading'
                text={heading.text}
                tag={heading.tag || 'h2'}
                editProps={{ onEdit: this.handleOrderConfirmationHeadingChange, requestContext: this.props.context.request }}
            />
            ),
            backToShoppingLink: backToShoppingUrl && (
                <Button className='ms-order-confirmation__btn-keep-shopping' href={backToShoppingUrl} {...this.backToShoppingAttributes}>
                    {backToShopping}
                </Button>
            ),
            footerProps: { className: 'ms-order-confirmation__footer' }
        };

        if (this.hasError) {
            viewProps = {
                ...viewProps,
                alert: <LabelComponent className='ms-order-confirmation__alert' label={genericErrorMessage} />
            };
            return this.props.renderView(viewProps) as React.ReactElement;
        }

        if (!this.isDataReady) {
            viewProps = {
                ...viewProps,
                loading: <LabelComponent className='ms-order-confirmation__loading' label={loadingLabel} />
            };
            return this.props.renderView(viewProps) as React.ReactElement;
        }

        if (!this.order) {
            viewProps = {
                ...viewProps,
                alert: <LabelComponent className='ms-order-confirmation__alert' label={noSalesOrderText} />
            };
            return this.props.renderView(viewProps) as React.ReactElement;
        }

        const salesLinesInput = getSalesLinesInput(this.props, this.moduleName, this.order, this.products, this.priceContext, true);
        const salesLines = salesLinesInput && getSalesLines(salesLinesInput);
        const orderInfomationInput = this.order && getOrderInfomationInput(this.props, this.moduleName, this.order, this.priceContext);
        const orderInfomation = orderInfomationInput && getOrderInformation(orderInfomationInput);

        viewProps = {
            ...viewProps,
            salesOrder: this.order,
            orderInfomation,
            salesLines,
            groups: salesLines
                ? getGroups({
                    moduleName: this.moduleName,
                    salesLines,
                    resources: { orderItemLabel, orderItemsLabel, pickupItemsHeader, pickingItemsLabel, shippingAddressTitle, shippingItemToYouLabel },
                    isConfirmationView: true
                })
                : undefined,
            orderSummary: this.orderSummaryProps ? getOrderConfirmationOrderSummary(this.orderSummaryProps) : undefined,
            payment: this.paymentMethodsProps ? getOrderConfirmationPaymentMethods(this.paymentMethodsProps) : undefined,
            help: contactNumber ? getOrderConfirmationHelp({ needHelpLabel, helpLineNumberLabel, contactNumber, helpLineContactAriaLabel, telemetryContent: this.telemetryContent }) : undefined
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleOrderConfirmationHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;
}

export default OrderConfirmation;
