import * as coreActions from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, IRequestContext } from '@msdyn365-commerce/core';
import * as salesOrderHistoryActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';
import 'jest';
import {
    getSalesOrderHistoryWithHydrationsAction,
    GetSalesOrderHistoryWithHydrationsInput,
    IPaging
} from '../actions/get-order-shipment-history';
import { mockOrderShipments, mockProducts, mockRequestContextJson } from './__mock__';

const mockPaging: IPaging = {
    top: 10,
    skip: 0
};

describe('getSalesOrderHistoryWithHydrationsAction', () => {
    it('Should Create Inputs Properly', () => {
        const actionContext = buildHydratedMockActionContext({ requestContext: <IRequestContext>mockRequestContextJson });
        new GetSalesOrderHistoryWithHydrationsInput(mockPaging, actionContext.requestContext.apiSettings);
    });
});

describe('getSalesOrderHistoryWithHydrationsAction Unit Tests', () => {
    // Setup necessary mocks
    beforeAll(() => {
        jest.mock('@msdyn365-commerce-modules/retail-actions');
        jest.mock('@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g');

        // @ts-ignore: Jest Mocking Confuses TS Complier
        salesOrderHistoryActions.getOrderShipmentsHistoryAsync = jest.fn();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        salesOrderHistoryActions.getOrderShipmentsHistoryAsync = jest.fn().mockResolvedValue(mockOrderShipments);

        // @ts-ignore: Jest Mocking Confuses TS Complier
        coreActions.ProductInput = jest.fn();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        coreActions.getSimpleProducts = jest.fn().mockResolvedValue(mockProducts);
    });

    it('Should fetch products by product id', async () => {
        const actionContext = buildHydratedMockActionContext({ requestContext: <IRequestContext>mockRequestContextJson });

        await getSalesOrderHistoryWithHydrationsAction(
            new GetSalesOrderHistoryWithHydrationsInput(mockPaging, actionContext.requestContext.apiSettings),
            actionContext
        )
            .then(response => {
                expect(response.products.length).toBe(1);
                expect(response.products[0].RecordId).toBe(22565430654);
            })
            .catch(error => {
                console.error(error);
                throw new Error('Unable to run GetSalesOrderHistoryWithHydrationsInput Action');
            });
    });

    afterAll(() => {
        jest.unmock('@msdyn365-commerce-modules/retail-actions');
        jest.unmock('@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g');
    });
});
