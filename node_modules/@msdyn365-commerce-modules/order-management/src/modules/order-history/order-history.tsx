/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import classname from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { Button, getPayloadObject, getTelemetryAttributes, getTelemetryObject, IModuleProps, INodeProps, IPayLoad, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';

import LabelComponent from '../../common/label';
import {
    getSalesOrderHistoryWithHydrationsAction, GetSalesOrderHistoryWithHydrationsInput,
    IOrderHistory, IPaging
} from './actions/get-order-shipment-history';
import { getSalesOrder, ISalesOrder } from './components/get-sales-order';
import { IOrderHistoryData } from './order-history.data';
import { IOrderHistoryProps } from './order-history.props.autogenerated';

export * from '../../common/get-groups';
export * from '../../common/get-order-information';
export * from '../../common/get-sales-line';
export * from '../../common/get-sales-lines';
export * from '../../common/utilities';
export * from './components/get-sales-order';

export * from '../../common/get-order-information';
export * from './components/get-sales-order';

export interface IHeader {
    headerProps: INodeProps;
    heading: React.ReactNode;
    orderCountLabel?: React.ReactNode;
}

export interface IList {
    listProps: INodeProps;
    salesOrders: ISalesOrder[];
}

export interface IOrderHistoryViewState {
    isDataReady: boolean;
    hasError: boolean;
    isLoading: boolean;
    isShowMoreButton: boolean;
}

export interface IOrderHistoryViewProps extends IOrderHistoryProps<IOrderHistoryData> {
    orderHistory: IOrderHistory;
    orderHistoryProps: IModuleProps;
    alert?: React.ReactNode;
    loading?: React.ReactNode;
    emptyMessage?: React.ReactNode;
    header: IHeader;
    backToShoppingLink?: React.ReactNode;
    list?: IList;
    moreButton?: React.ReactNode;
    viewState: IOrderHistoryViewState;
}

/**
 *
 * OrderHistory component
 * @extends {React.Component<IOrderHistoryProps<IOrderHistoryData>>}
 */
@observer
class OrderHistory extends React.Component<IOrderHistoryProps<IOrderHistoryData>> {
    @observable private orderHistory: IOrderHistory;
    @observable private viewState: IOrderHistoryViewState;
    private pageSize: number;
    private paging: IPaging;
    private telemetryContent?: ITelemetryContent;
    private payLoad: IPayLoad;

    constructor(props: IOrderHistoryProps<IOrderHistoryData>) {
        super(props);
        this.orderHistory = {
            salesOrders: [],
            products: []
        };
        this.viewState = {
            isDataReady: false,
            hasError: false,
            isShowMoreButton: (this.props.config.pageSize || 0) > 0,
            isLoading: false
        };
        this.pageSize = this.props.config.pageSize || 10;
        this.paging = {
            top: this.pageSize,
            skip: 0
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
        this.payLoad = getPayloadObject('click', this.telemetryContent, '');
    }

    public componentDidMount(): void {
        this.getOrderHistory()
            .then(() => {
                this.viewState.isDataReady = true;
            })
            .catch(ex => {
                this.viewState.hasError = true;
            });
    }

    public render(): JSX.Element {
        const {
            config: { heading, className, showChannelInfo },
            resources: { genericErrorMessage, noOrderHistoryLable, moreButtonText, backToShopping, orderCountLabel, ordersCountLabel, loadingLabel }
        } = this.props;
        const { salesOrders, products } = this.orderHistory;
        const { isDataReady, hasError, isShowMoreButton, isLoading } = this.viewState;
        const backToShoppingUrl = Msdyn365.getUrlSync('home', this.props.context.actionContext) || '';
        const channelIdentities = this.props.data.channels.result && this.props.data.channels.result.channelIdentities;
        const orgUnitLocations = this.props.data.orgUnitLocations.result && this.props.data.orgUnitLocations.result.orgUnitLocations;

        let viewProps: IOrderHistoryViewProps = {
            ...this.props,
            orderHistory: this.orderHistory,
            viewState: this.viewState,
            orderHistoryProps: {
                moduleProps: this.props,
                className: classname('ms-order-history', className)
            },
            header: {
                headerProps: { className: 'ms-order-history__header' },
                heading: heading && heading.text && (
                <Msdyn365.Text
                    {...heading}
                    className='ms-order-history__heading'
                    text={heading.text}
                    tag={heading.tag || 'h2'}
                    editProps={{ onEdit: this.handleOrderHistoryHeadingChange, requestContext: this.props.context.request }}
                />
                )
            },
            backToShoppingLink: backToShoppingUrl && (
                <Button className='ms-order-history__btn-keep-shopping' href={backToShoppingUrl}>
                    {backToShopping}
                </Button>
            )
        };

        if (hasError) {
            viewProps = {
                ...viewProps,
                alert: <LabelComponent className='ms-order-history__alert' label={genericErrorMessage} />
            };
            return this.props.renderView(viewProps) as React.ReactElement;
        }

        if (!isDataReady) {
            viewProps = {
                ...viewProps,
                loading: <LabelComponent className='ms-order-history__loading' label={loadingLabel} />
            };
            return this.props.renderView(viewProps) as React.ReactElement;
        }

        if (!salesOrders || salesOrders.length === 0) {
            viewProps = {
                ...viewProps,
                emptyMessage: <p className='ms-order-history__empty-message'>{noOrderHistoryLable}</p>
            };

            return this.props.renderView(viewProps) as React.ReactElement;
        }

        const _orderCountLabel = salesOrders.length === 1 ? orderCountLabel : ordersCountLabel;
        this.payLoad.contentAction.etext = TelemetryConstant.ViewMore;
        const viewMoreAttributes = getTelemetryAttributes(this.telemetryContent!,this.payLoad);

        viewProps = {
            ...viewProps,
            header: {
                ...viewProps.header,
                orderCountLabel: <span className='ms-order-history__order-count'>{`(${salesOrders.length} ${_orderCountLabel})`}</span>
            },
            list: {
                listProps: { className: 'ms-order-history__sales-order-list' },
                salesOrders: salesOrders.map(salesOrder =>
                    getSalesOrder({
                        ...this.props,
                        products,
                        salesOrder,
                        channelIdentities,
                        orgUnitLocations,
                        showChannelInfo,
                        telemetryContent: this.telemetryContent
                    })
                )
            },
            moreButton: isShowMoreButton && (
                <Button className={`ms-order-history__btn-more ${isLoading ? 'is-busy' : ''}`} {...viewMoreAttributes} disabled={isLoading} onClick={this.onMoreButtonClick}>
                    {moreButtonText}
                </Button>
            )
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleOrderHistoryHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;

    private onMoreButtonClick = () => {
        // tslint:disable-next-line:no-floating-promises
        this.getOrderHistory();
    }

    private getOrderHistory = async (): Promise<void> => {
        const actionContext = this.props.context.actionContext;
        const input = new GetSalesOrderHistoryWithHydrationsInput(this.paging, this.props.context.request.apiSettings);

        try {
            this.viewState.isLoading = true;
            const response = await getSalesOrderHistoryWithHydrationsAction(input, actionContext);
            if (response) {
                const { products, salesOrders } = response;
                this.orderHistory.products.push(...products);
                this.orderHistory.salesOrders.push(...salesOrders);
                this.viewState.isShowMoreButton = this.viewState.isShowMoreButton && response.salesOrders.length > 0 && response.salesOrders.length === this.pageSize;
                this.paging.skip += this.pageSize;
            }
            this.viewState.isLoading = false;
            return Promise.resolve();
        } catch (error) {
            return Promise.reject();
        }
    }
}

export default OrderHistory;
