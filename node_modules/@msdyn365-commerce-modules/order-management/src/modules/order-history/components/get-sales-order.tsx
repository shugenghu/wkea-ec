/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { Button, getPayloadObject, getTelemetryAttributes, INodeProps, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { getUrlSync } from '@msdyn365-commerce/core';
import { ChannelIdentity, OrderShipments, OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { getGroups, IGroups } from '../../../common/get-groups';
import { getOrderInfomationInput, getOrderInformation, IOrderInformation } from '../../../common/get-order-information';
import { getSalesLines, getSalesLinesInput } from '../../../common/get-sales-lines';
import { IOrderHistoryData } from '../order-history.data';
import { IOrderHistoryProps } from '../order-history.props.autogenerated';

export interface ISalesOrderProps extends IOrderHistoryProps<IOrderHistoryData> {
    salesOrder: OrderShipments;
    products: SimpleProduct[];
    channelIdentities?: ChannelIdentity[];
    orgUnitLocations?: OrgUnitLocation[];
    showChannelInfo?: boolean;
    telemetryContent?: ITelemetryContent;
}

export interface ISalesOrder {
    salesOrderProps: INodeProps;
    orderInfomation: IOrderInformation;
    groups?: IGroups;
    orderDetailsLink: React.ReactNode;
}

export const getSalesOrder = (input: ISalesOrderProps): ISalesOrder => {
    const {
        id,
        typeName,
        context,
        telemetry,
        products,
        salesOrder,
        showChannelInfo,
        channelIdentities,
        orgUnitLocations,
        telemetryContent,
        resources: { freePriceText, detailsAriaLabel, detailsLabel, orderItemLabel, orderItemsLabel },
        context: { actionContext }
    } = input;

    const moduleName = 'ms-order-history';

    const priceContext = {
        id,
        typeName,
        context,
        telemetry,
        freePriceText
    };

    const _getorderDetailsPageUrl = (): string => {
        const url = getUrlSync('orderDetails', actionContext) || '';
        const separator = url.includes('?') ? '&' : '?';
        if (salesOrder.SalesId) {
            // Redirect with sales order sales id
            return `${url}${separator}salesId=${salesOrder.SalesId}`;
        } else {
            // Redirect with sales order transaction id
            return `${url}${separator}transactionId=${salesOrder.TransactionId}`;
        }
    };

    const salesOrderProps = { className: 'ms-order-history__sales-order', key: salesOrder.SalesId || salesOrder.TransactionId };

    const orderInfomationInput = getOrderInfomationInput(input, moduleName, salesOrder, priceContext, channelIdentities, orgUnitLocations, showChannelInfo);
    const orderInfomation = getOrderInformation(orderInfomationInput);

    const salesLinesInput = products && getSalesLinesInput(input, moduleName, salesOrder, products, priceContext);
    const salesLines = salesLinesInput && getSalesLines({ ...salesLinesInput, imageOnly: true });
    const payLoad = getPayloadObject('click', telemetryContent!, TelemetryConstant.OrderDetails);
    const orderDetailsAttributes = getTelemetryAttributes(telemetryContent!, payLoad);

    const groups =
        salesLines &&
        getGroups({
            moduleName,
            salesLines,
            resources: { orderItemLabel, orderItemsLabel }
        });

    const orderDetailsLink = (
        <Button
            href={_getorderDetailsPageUrl()}
            aria-label={
                salesOrder.ChannelReferenceId && detailsAriaLabel
                    ? detailsAriaLabel.replace('{orderId}', salesOrder.ChannelReferenceId)
                    : ''
            }
            className='ms-order-history__btn-order-details'
            {...orderDetailsAttributes}
        >
            {detailsLabel}
        </Button>
    );

    return {
        salesOrderProps,
        orderInfomation,
        groups,
        orderDetailsLink
    };
};
