/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getProductUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { Button, getPayloadObject, getTelemetryAttributes, INodeProps, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { CartLineItemComponent } from '@msdyn365-commerce/components';
import { Image } from '@msdyn365-commerce/core';
import { SalesLine, Shipment, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import Address from './address';
import LabelComponent from './label';
import { defaultImageSettings, getSalesStatusCode, IDeliveryType, IModuleComponentProps, ISalesStatusCode } from './utilities';

export type ISalesStatusStringMap = {
    [x in ISalesStatusCode]: string | undefined;
};

export type IDeliveryTypeStringMap = {
    [x in IDeliveryType]: string | undefined;
};

export interface ISalesLineResources {
    productDimensionTypeSize: string;
    productDimensionTypeColor: string;
    productDimensionTypeStyle: string;
    salesLineQuantityText: string;
    configString: string;
    shipToLabel: string;
    storeLabel: string;
    phoneLabel: string;
    phoneAriaLabel: string;
    buyItAgainAriaLabel: string;
    buyItAgainLabel: string;
    orderStatusReadyForPickup: string;
    orderStatusPickedUp: string;
    orderStatusShipped: string;
    orderStatusCanceled: string;
    orderStatusProcessing: string;
    pickedUpSalesLines: string;
    deliveredSalesLines: string;
    carryOutSalesLines: string;
    trackingLabel: string;
    trackingAriaLabel: string;
    trackingComingSoonLabel: string;
    discountStringText: string;
}

export interface IGetSalesLineInput {
    moduleName: string;
    moduleComponentProps: IModuleComponentProps;
    product: SimpleProduct;
    shipment?: Shipment;
    salesLine: SalesLine;
    isCurrentChannel: boolean;
    resources: ISalesLineResources;
    imageOnly?: boolean;
    showCompleteAddress?: boolean;
    telemetryContent?: ITelemetryContent;
}

export interface ISalesLine {
    salesLineProps: INodeProps;
    salesLine: React.ReactNode;
    address?: React.ReactNode;
    buyAgainButton?: React.ReactNode;
    salesStatus: React.ReactNode;
    deliveryType: React.ReactNode;
    trackingInfo: React.ReactNode;

    // row data
    data: {
        salesLine: SalesLine;
        product: SimpleProduct;
        shipment?: Shipment;
        deliveryType: IDeliveryType;
        productUrl: string;
        salesStatus: ISalesStatusCode;
    };
}

// tslint:disable-next-line:max-func-body-length
export const getSalesLine = ({
    moduleName,
    moduleComponentProps: {
        id,
        typeName,
        context,
        telemetry,
        config: { imageSettings }
    },
    showCompleteAddress,
    product,
    shipment,
    salesLine,
    isCurrentChannel,
    imageOnly,
    resources: {
        productDimensionTypeSize: sizeString,
        productDimensionTypeColor: colorString,
        productDimensionTypeStyle: styleString,
        salesLineQuantityText: quantityDisplayString,
        configString,
        shipToLabel,
        storeLabel,
        phoneLabel,
        phoneAriaLabel,
        buyItAgainLabel,
        buyItAgainAriaLabel,
        orderStatusReadyForPickup,
        orderStatusProcessing,
        orderStatusShipped,
        orderStatusPickedUp,
        orderStatusCanceled,
        pickedUpSalesLines,
        deliveredSalesLines,
        carryOutSalesLines,
        trackingLabel,
        trackingAriaLabel,
        trackingComingSoonLabel,
        discountStringText
    },
    telemetryContent
}: IGetSalesLineInput): ISalesLine => {
    const salesStatusStringMap: ISalesStatusStringMap = {
        canceled: orderStatusCanceled,
        readyForPickup: orderStatusReadyForPickup,
        pickedUp: orderStatusPickedUp,
        processing: orderStatusProcessing,
        shipped: orderStatusShipped,
        unknown: undefined
    };

    const deliveryTypeStringMap: IDeliveryTypeStringMap = {
        pickUp: pickedUpSalesLines,
        ship: deliveredSalesLines,
        carryOut: carryOutSalesLines
    };

    const gridSettings = context.request.gridSettings;
    const pickupDeliveryModeCode = context.request.channel && context.request.channel.PickupDeliveryModeCode;
    const productUrl = getProductUrlSync(product, context.actionContext, undefined);
    const deliveryType =
        !!pickupDeliveryModeCode && pickupDeliveryModeCode !== '' && pickupDeliveryModeCode === salesLine.DeliveryMode
            ? 'pickUp'
            : !!salesLine.DeliveryMode
            ? 'ship'
            : 'carryOut';
    const salesStatus = getSalesStatusCode(deliveryType, salesLine.SalesStatusValue);
    const salesStatusString = salesStatusStringMap[salesStatus];
    const salesStatusComp = salesStatusString && <LabelComponent className={`${moduleName}__sales-status`} label={salesStatusString} />;
    const deliveryTypeString = deliveryTypeStringMap[deliveryType];
    const deliveryTypeComp = deliveryTypeString && <LabelComponent className={`${moduleName}__devliery-type`} label={deliveryTypeString} />;
    const trackingInfo = isCurrentChannel && deliveryType === 'ship' && (
        <span className={`${moduleName}__tracking-info`}>
            {trackingLabel}
            {shipment ? (
                <a className={`${moduleName}__tracking-link`} href={shipment.TrackingUrl} aria-label={trackingAriaLabel}>
                    {shipment.TrackingNumber}
                </a>
            ) : (
                <>{trackingComingSoonLabel}</>
            )}
        </span>
    );
    const payLoad = getPayloadObject('click', telemetryContent!, TelemetryConstant.BuyItAgain);
    const buyItAgainAttributes = getTelemetryAttributes(telemetryContent!, payLoad);
    return {
        data: {
            salesLine,
            productUrl,
            deliveryType,
            salesStatus,
            product,
            shipment
        },
        salesLineProps: { className: `${moduleName}__sales-line` },
        salesLine: imageOnly ? (
            <div className={`${moduleName}__sales-line-picture`}>
                <Image
                    className={`${moduleName}__sales-line-image`}
                    altText={product.Name}
                    src={product.PrimaryImageUrl || ''}
                    gridSettings={gridSettings!}
                    imageSettings={imageSettings || defaultImageSettings}
                    loadFailureBehavior='empty'
                />
            </div>
        ) : (
            <CartLineItemComponent
                id={id}
                typeName={typeName}
                context={context}
                resources={{
                    sizeString,
                    colorString,
                    styleString,
                    quantityDisplayString,
                    configString,
                    discountStringText,
                    inputQuantityAriaLabel: '',
                    originalPriceText:'',
                    currentPriceText:'',
                    shippingChargesText:''
                }}
                primaryImageUrl={product.PrimaryImageUrl}
                productUrl={productUrl}
                imageSettings={imageSettings || defaultImageSettings}
                gridSettings={gridSettings!}
                isSalesLine={true}
                data={{cartLine: salesLine, product: product}}
            />
        ),
        address: salesLine.ShippingAddress && (
            <Address
                moduleName={moduleName}
                address={salesLine.ShippingAddress}
                resource={{ shipToLabel, storeLabel, phoneLabel, phoneAriaLabel }}
                deliveryType={deliveryType}
                showCompleteAddress={showCompleteAddress}
            />
        ),
        deliveryType: deliveryTypeComp,
        salesStatus: salesStatusComp,
        trackingInfo,
        buyAgainButton: isCurrentChannel && (
            <Button
                href={productUrl}
                aria-label={name && buyItAgainAriaLabel ? (buyItAgainAriaLabel || '').replace('{productName}', name) : ''}
                className={`${moduleName}__sales-line-btn-buy-it-again`}
                {...buyItAgainAttributes}
            >
                {buyItAgainLabel}
            </Button>
        )
    };
};
