/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { IActionContext, IGridSettings, IImageSettings } from '@msdyn365-commerce/core';
import { OrderShipments, SalesLine, SalesOrder, Shipment, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { getSalesLine, ISalesLine, ISalesLineResources } from './get-sales-line';
import { IModuleComponentProps, IPriceContext } from './utilities';

export interface IGetSalesLinesInput {
    moduleName: string;
    moduleComponentProps: IModuleComponentProps;
    isCurrentChannel: boolean;

    salesLines: SalesLine[];
    products: SimpleProduct[];
    shipments?: Shipment[];
    priceContext: IPriceContext;
    resources: ISalesLineResources;
    actionContext: IActionContext;
    gridSettings: IGridSettings;
    imageSettings?: IImageSettings;
    imageOnly?: boolean;
    showCompleteAddress?: boolean;
    telemetryContent?: ITelemetryContent;
}

export const getSalesLines = ({
    moduleName,
    moduleComponentProps,
    salesLines,
    products,
    shipments,
    resources,
    isCurrentChannel,
    imageOnly,
    showCompleteAddress,
    telemetryContent
}: IGetSalesLinesInput): ISalesLine[] => {
    return salesLines.map(salesLine => {
        const product = products.find(_product => _product.RecordId === salesLine.ProductId) || ({} as SimpleProduct);
        const shipment = shipments && shipments.find(_shipment => _shipment.ShipmentLines?.find(_shipmentLine => _shipmentLine.ItemId === product.ItemId));
        return getSalesLine({
            moduleName,
            moduleComponentProps,
            product,
            shipment,
            salesLine,
            isCurrentChannel,
            resources,
            imageOnly,
            showCompleteAddress,
            telemetryContent
        });
    });
};

interface IProps extends IModuleComponentProps {
    resources: ISalesLineResources;
}

export const getSalesLinesInput = (
    props: IProps,
    moduleName: string,
    order: SalesOrder | OrderShipments,
    products: SimpleProduct[],
    priceContext: IPriceContext,
    showCompleteAddress?: boolean,
    telemetryContent?: ITelemetryContent
): IGetSalesLinesInput | undefined => {
    if (!order || !order.SalesLines || !order.SalesLines.length) {
        return;
    }

    const {
        resources,
        config: { imageSettings },
        context: {
            actionContext,
            request: {
                gridSettings,
                apiSettings: { channelId }
            }
        }
    } = props;

    const isCurrentChannel = !order.ChannelId || order.ChannelId === channelId;

    return {
        moduleName,
        moduleComponentProps: props,
        isCurrentChannel,
        salesLines: order.SalesLines,
        products,
        shipments: order.Shipments,
        priceContext: priceContext,
        resources,
        actionContext: actionContext,
        gridSettings: gridSettings!,
        imageSettings: imageSettings,
        showCompleteAddress: showCompleteAddress,
        telemetryContent: telemetryContent
    };
};
