/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { IAny, ICoreContext, IGeneric, IImageSettings, IModule, ITelemetry } from '@msdyn365-commerce/core';
import { SalesLine, TenderType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import groupBy from 'lodash/groupBy';
import { ISalesLine } from './get-sales-line';

export interface IModuleComponentProps extends IModule {
    config: {
        imageSettings?: IImageSettings;
    };
}

export interface IPriceContext {
    id: string;
    typeName: string;
    context: ICoreContext<IGeneric<IAny>>;
    telemetry: ITelemetry;
    freePriceText: string;
}

export const getTenderIdOperationIdMap = (tenderTypes: TenderType[]): object => {
    return tenderTypes.reduce((map, tenderType) => {
        if (tenderType.TenderTypeId) {
            map[tenderType.TenderTypeId] = tenderType.OperationId;
        }
        return map;
    },                        {});
};

export const countItems = (salesLines: SalesLine[]) => {
    return salesLines.reduce((count, salesLine) => {
        return count + (salesLine.Quantity || 0);
    },                       0);
};

export const getSalesLinesByDelivery = (salesLines?: SalesLine[], pickupDeliveryModeCode?: string): SalesLine[] => {
    if (!salesLines || !salesLines.length) {
        return [];
    }
    return salesLines.filter(salesLine =>
        // isPickUp ? getPickUp : getOthers
        (pickupDeliveryModeCode && pickupDeliveryModeCode !== '') ? salesLine.DeliveryMode === pickupDeliveryModeCode : salesLine.DeliveryMode !== pickupDeliveryModeCode
    );
};

export const defaultImageSettings: IImageSettings = {
    viewports: {
        xs: { q: `w=80&h=80&m=6`, w: 0, h: 0 },
        lg: { q: `w=147&h=147&m=6`, w: 0, h: 0 }
    },
    lazyload: true
};

export type IDeliveryType = 'pickUp' | 'ship' | 'carryOut';

export type ISalesStatusCode = 'canceled' | 'readyForPickup' | 'pickedUp' | 'processing' | 'shipped' | 'unknown';

export const getSalesStatusCode = (deliveryType: IDeliveryType, statusValue?: number): ISalesStatusCode => {
    if (statusValue === 7) {
        return 'canceled';
    }
    if (deliveryType === 'pickUp') {
        switch (statusValue) {
            case 3:
                return 'readyForPickup';
            case 4:
                return 'pickedUp';
            default:
                return 'processing';
        }
    } else if (deliveryType === 'ship') {
        switch (statusValue) {
            case 3:
                return 'processing';
            case 4:
                return 'shipped';
            default:
                return 'processing';
        }
    } else if (deliveryType === 'carryOut') {
        return 'processing';
    } else {
        return 'unknown';
    }
};

export type ITrackingId = string | 'unknown';
export type IAddressId = string | 'unknown';

export interface IGroupData {
    deliveryType: IDeliveryType;
    salesStatus: ISalesStatusCode;
    addressId: IAddressId | 'unknown';
    trackingId: ITrackingId | 'unknown';
    count: number;
    salesLines: ISalesLine[];
}

export const groupSalesLines = (salesLines: ISalesLine[]): IGroupData[] => {
    const getGroupByDeliveryType = (items: ISalesLine[]) => groupBy(items, item => item.data.deliveryType);
    const getGroupBySalesStatusCode = (items: ISalesLine[]) => groupBy(items, item => item.data.salesStatus);
    const getGroupByTrackingId = (items: ISalesLine[]) => groupBy(items, item => item.data.salesLine.TrackingId || 'unknown');
    const getGroupByAddressId = (items: ISalesLine[]) =>
        groupBy(items, item => (item.data.salesLine.ShippingAddress && item.data.salesLine.ShippingAddress.RecordId) || 'unknown');

    const flatGroup: IGroupData[] = [];

    // 1) Group by delivery type
    // @ts-ignore
    const group = getGroupByDeliveryType(salesLines);

    // 2) Group by sales status code
    Object.entries(group).forEach(([deliveryType, groupByDeliveryType]) => {
        // @ts-ignore
        group[deliveryType] = getGroupBySalesStatusCode(groupByDeliveryType);

        Object.entries(group[deliveryType]).forEach(([salesStatus, groupBySalesStatusCode]) => {
            // @ts-ignore 3) Group by address id
            groupBySalesStatusCode[salesStatus] = getGroupByAddressId(groupBySalesStatusCode);

            // @ts-ignore
            Object.entries(groupBySalesStatusCode[salesStatus]).forEach(([addressId, groupByAddressId]) => {
                // @ts-ignore 4) Group by address id
                groupByAddressId[addressId] = getGroupByTrackingId(groupByAddressId);

                // @ts-ignore
                Object.entries(groupByAddressId[addressId]).forEach(([trackingId, groupByTrackingId]) => {
                    flatGroup.push({
                        // @ts-ignore
                        deliveryType,
                        // @ts-ignore
                        salesStatus,
                        addressId,
                        trackingId,
                        // @ts-ignore
                        count: countItems(groupByTrackingId.map(item => item.data.salesLine)),
                        // @ts-ignore
                        salesLines: groupByTrackingId
                    });
                });
            });
        });
    });

    return flatGroup;
};
