/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { INodeProps } from '@msdyn365-commerce-modules/utilities';
import { PriceComponent } from '@msdyn365-commerce/components';
import { ChannelIdentity, OrderShipments, OrgUnitLocation, SalesOrder } from '@msdyn365-commerce/retail-proxy';
import get from 'lodash/get';
import * as React from 'react';
import { countItems, IModuleComponentProps, IPriceContext } from './utilities';

export interface IOrderInformationInputResources {
    receiptEmailMessage?: string;
    orderItemLabel: string;
    orderItemsLabel: string;
    processingLabel: string;
    orderIdLabel: string;
    receiptIdLabel: string;
    confirmationIdLabel: string;
    trackingLabel: string;
    trackingAriaLabel: string;
    trackingComingSoonLabel: string;
    posChannelNameText?: string;
    onlineStoreChannelNameText?: string;
    orderPlacedOnLabel?: string;
}
export interface IOrderInformationInput {
    moduleName: string;
    channelReferenceId?: string;
    channelName?: string;
    channelAddress?: string;
    showChannelInfo?: boolean;
    receiptEmail?: string;
    createdDate?: string;
    amount?: number;
    priceContext: IPriceContext;
    salesId?: string;
    receiptId?: string;
    hasTrackingInfo?: boolean;
    count?: number;
    resources: IOrderInformationInputResources;
}

export interface IOrderInformation {
    orderInformationProps: INodeProps;
    channelName: React.ReactNode;
    channelAddress: React.ReactNode;
    salesId: React.ReactNode;
    receiptId: React.ReactNode;
    receiptEmail: React.ReactNode;
    createdDate: React.ReactNode;
    count: React.ReactNode;
    amount: React.ReactNode;
    channelReferenceId: React.ReactNode;
}

export const getOrderInformation = ({
    moduleName,
    channelReferenceId,
    channelName,
    channelAddress,
    showChannelInfo,
    receiptEmail,
    createdDate,
    amount,
    priceContext,
    salesId,
    receiptId,
    count,
    resources: { receiptEmailMessage, orderItemLabel, orderItemsLabel, orderIdLabel, receiptIdLabel, confirmationIdLabel, posChannelNameText, onlineStoreChannelNameText, orderPlacedOnLabel }
}: IOrderInformationInput): IOrderInformation => ({
    orderInformationProps: { className: `${moduleName}__order-information` },
    channelName: showChannelInfo && channelName && (
        channelAddress ? <span className={`${moduleName}__order-information-channel-name`}>{`${posChannelNameText} ${channelName}`}</span>
            : <span className={`${moduleName}__order-information-channel-name`}>{onlineStoreChannelNameText}</span>),
    channelAddress: showChannelInfo && channelAddress && <span className={`${moduleName}__order-information-channel-address`}>{channelAddress}</span>,
    salesId: salesId ? <span className={`${moduleName}__order-information-sales-id`}>{`${orderIdLabel} ${salesId}`}</span> : '',
    receiptId: receiptId ? <span className={`${moduleName}__order-information-receipt-id`}>{`${receiptIdLabel} ${receiptId}`}</span> : '',
    receiptEmail: receiptEmail && (
        <span className={`${moduleName}__order-information-receipt-email`}>
            {receiptEmailMessage}
            <span>{receiptEmail}</span>
        </span>
    ),
    createdDate: createdDate && <span className={`${moduleName}__order-information-created-date`}>{orderPlacedOnLabel} {createdDate}</span>,
    count: count !== undefined && count > 0 && (
        <span className={`${moduleName}__order-information-count`}>
            {count === 1 ? `${count} ${orderItemLabel}` : `${count} ${orderItemsLabel}`}
        </span>
    ),
    amount: (amount || amount === 0) && (
        <PriceComponent
            {...priceContext}
            className={`${moduleName}__order-information-amount`}
            data={{ price: { CustomerContextualPrice: amount } }}
        />
    ),
    channelReferenceId: channelReferenceId && (
        <span className={`${moduleName}__order-information-channel-reference-id`}>{`${confirmationIdLabel} `}<span>{channelReferenceId}</span></span>
    )
});

interface IProps extends IModuleComponentProps {
    resources: IOrderInformationInputResources;
}

export const getOrderInfomationInput = (
    props: IProps,
    moduleName: string,
    order: SalesOrder | OrderShipments,
    priceContext: IPriceContext,
    channelIdentities?: ChannelIdentity[],
    orgUnitLocations?: OrgUnitLocation[],
    showChannelInfo?: boolean
): IOrderInformationInput => {
    const {
        resources,
        context: {
            request: {
                apiSettings: { channelId }
            }
        }
    } = props;

    // @ts-ignore OrderShipments doesnt has ChannelId
    const showTrackingInfo = !!order.ChannelId && order.ChannelId === channelId;

    const locale = get(props, 'context.request.locale') || 'en-US';
    const count = order.SalesLines && order.SalesLines.length ? countItems(order.SalesLines) : 0;

    const orderChannel = channelIdentities ? channelIdentities.filter(channel => { return channel.RecordId === order.ChannelId; }) : '';
    const orderOrgUnitLocation = orgUnitLocations ? orgUnitLocations.filter(location => { return location.ChannelId === order.ChannelId; }) : '';

    return {
        moduleName: moduleName,
        createdDate: (order.CreatedDateTime && new Date(order.CreatedDateTime).toLocaleDateString(locale)) || '',
        salesId: order.SalesId,
        receiptId: order.ReceiptId,
        showChannelInfo: showChannelInfo,
        // @ts-ignore OrderShipments doesnt has ReceiptEmail
        receiptEmail: order.ReceiptEmail,
        channelReferenceId: order.ChannelReferenceId,
        channelName: orderChannel && orderChannel.length > 0 ? orderChannel[0].Name : '',
        channelAddress: orderOrgUnitLocation && orderOrgUnitLocation.length > 0 ? orderOrgUnitLocation[0].Address : '',
        amount: order.TotalAmount || 0,
        priceContext: priceContext,
        count,
        resources
    };
};
