/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { format, INodeProps } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
import { ISalesLine } from './get-sales-line';
import { groupSalesLines, IDeliveryType, ISalesStatusCode } from './utilities';

export interface IGroupDelivery {
    deliveryProps: INodeProps;
    heading: React.ReactNode;
    count: React.ReactNode;
    processing: React.ReactNode;
    trackingInfo: React.ReactNode;
    address: React.ReactNode;
    shippingItemsToYou?: React.ReactNode;
}

export interface IGroup {
    groupProps: INodeProps;
    salesLinesProps: INodeProps;
    delivery: IGroupDelivery;
    salesLines: ISalesLine[];
    address: React.ReactNode;
    // row data
    data: {
        count: number;
        deliveryType: IDeliveryType;
        salesStatus: ISalesStatusCode;
    };
}

export interface IGroupsInput {
    moduleName: string;
    salesLines: ISalesLine[];
    resources: {
        orderItemLabel: string;
        orderItemsLabel: string;
        pickupItemsHeader?: string;
        pickingItemsLabel?: string;
        shippingAddressTitle?: string;
        shippingItemToYouLabel?: string;
    };
    showAddress?: boolean;
    isConfirmationView?: boolean;
}

export interface IGroups {
    groupsProps: INodeProps;
    groups: IGroup[];
}

export const getGroups = ({ moduleName, salesLines, resources: { orderItemLabel, orderItemsLabel, pickupItemsHeader, pickingItemsLabel, shippingAddressTitle, shippingItemToYouLabel }, showAddress, isConfirmationView }: IGroupsInput): IGroups => {
    const groups = groupSalesLines(salesLines).map(group => {
        const { deliveryType, salesStatus, count, salesLines: _salesLines } = group;
        const itemLabel = count === 1 ? orderItemLabel : orderItemsLabel;
        const pickingItemsLabelText = pickingItemsLabel && format(pickingItemsLabel, count, itemLabel);
        const shippingItemsToYouText = shippingItemToYouLabel && format(shippingItemToYouLabel, count, itemLabel);
        const groupProps = { className: `${moduleName}__group-deliveryType-${deliveryType} salesStatus-${salesStatus}` };
        const salesLinesProps = { className: `${moduleName}__sales-lines` };
        const address = _salesLines[0].address;
        const trackingInfo = _salesLines[0].trackingInfo;
        const isProcessing = _salesLines[0].data.salesStatus === 'processing';
        const delivery = {
            deliveryProps: { className: `${moduleName}__group-delivery` },
            heading: (
                <span className={`${moduleName}__group-delivery-heading`}>
                    {isProcessing
                        ? isConfirmationView
                            ? deliveryType === 'pickUp' ? pickupItemsHeader : shippingAddressTitle
                            : _salesLines[0].deliveryType
                        : _salesLines[0].salesStatus}
                </span>
            ),
            processing: isProcessing ? (
                <span className={`${moduleName}__group-delivery-processing-label`}>{_salesLines[0].salesStatus}</span>
            ) : (
                    undefined
                ),
            count: !isConfirmationView && <span className={`${moduleName}__group-delivery-total-items`}>{`(${count} ${itemLabel})`}</span>,
            shippingItemsToYou: isConfirmationView && deliveryType === 'ship'
                ? <span className={`${moduleName}__sales-lines-shipping-items-label`}>{shippingItemsToYouText}</span>
                : <span className={`${moduleName}__sales-lines-picking-items-label`}>{pickingItemsLabelText}</span>,
            trackingInfo,
            address
        };
        return {
            groupProps,
            salesLinesProps,
            delivery,
            salesLines: _salesLines,
            address: (showAddress) && address,
            data: {
                count,
                deliveryType,
                salesStatus
            }
        };
    });

    return {
        groupsProps: { className: `${moduleName}__groups` },
        groups
    };
};
