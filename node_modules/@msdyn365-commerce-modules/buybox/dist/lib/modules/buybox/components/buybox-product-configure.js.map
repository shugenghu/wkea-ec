{"version":3,"file":"buybox-product-configure.js","sourceRoot":"./src/","sources":["modules/buybox/components/buybox-product-configure.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { getTelemetryObject, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { ProductDimensionFull } from '@msdyn365-commerce/commerce-entities';\nimport { IActionContext } from '@msdyn365-commerce/core';\nimport { SimpleProduct } from '@msdyn365-commerce/retail-proxy';\n\nimport { IBuyboxCallbacks, IBuyboxData, IBuyboxProps, IBuyboxResources, IBuyboxState } from '../../../index';\nimport { Dropdown, IDropdownItemProps, IDropdownOnSelectionChangeNotification } from './dropdown';\n\nexport interface IBuyboxProductConfigureProps {\n    product: SimpleProduct;\n    productDimensions: ProductDimensionFull[];\n    resources: IBuyboxResources;\n    channelId: number;\n    actionContext: IActionContext;\n    errors: { [configureId: string]: string | undefined };\n\n    dimensionChanged?(newValue: number): void;\n}\n\nexport interface IBuyboxProductConfigureDropdownViewProps {\n    ContainerProps: INodeProps;\n    LabelContainerProps: INodeProps;\n\n    heading: React.ReactNode;\n    errors?: React.ReactNode;\n\n    select: React.ReactNode;\n}\n\nexport interface IBuyboxProductConfigureViewProps {\n    ContainerProps: INodeProps;\n\n    dropdowns: IBuyboxProductConfigureDropdownViewProps[];\n}\n\nlet telemetryContent:  ITelemetryContent;\n\nexport function getBuyboxProductConfigure(props: IBuyboxProps<IBuyboxData>, state: IBuyboxState, callbacks: IBuyboxCallbacks): IBuyboxProductConfigureViewProps | undefined {\n    const {\n        data: {\n            product: {result: product },\n            productDimensions: {result: productDimensions },\n        },\n        resources\n    } = props;\n\n    const\n    {\n        errorState: {\n            configureErrors,\n        }\n    } = state;\n\n    const\n    {\n        getDropdownName\n    } = callbacks;\n\n    if (!product || !productDimensions) {\n        return undefined;\n    }\n\n    const onChanged = async (notification: IDropdownOnSelectionChangeNotification) =>\n        _onChanged(notification, callbacks.dimensionSelectedAsync);\n\n    telemetryContent = getTelemetryObject(props.context.request.telemetryPageName!, props.friendlyName, props.telemetry);\n    const dropdowns = productDimensions.map(productDimensionFull => _mapProductDimensionFullToDropdownViewProps(productDimensionFull, resources, configureErrors, getDropdownName, onChanged));\n\n    if (!dropdowns || dropdowns.length === 0) {\n        return undefined;\n    }\n\n    return {\n        ContainerProps: {\n            className: 'ms-buybox__configure'\n        },\n        dropdowns: dropdowns\n    };\n}\n\nconst _onChanged = async (\n        notification: IDropdownOnSelectionChangeNotification,\n        dimensionChanged: (newValue: number, selectedDimensionValue: string) => Promise<void>,\n    ): Promise<void> => {\n    await dimensionChanged(+notification.dropdownId, notification.selectId);\n};\n\nconst _mapProductDimensionFullToDropdownViewProps =\n    (\n        productDimensionFull: ProductDimensionFull,\n        resources: IBuyboxResources,\n        configureErrors: {[configureId: string]: string | undefined},\n        getDropdownName: (dimensionType: number, resources: IBuyboxResources) => string,\n        dropdownCallback: (notification: IDropdownOnSelectionChangeNotification) => Promise<void>\n    ): IBuyboxProductConfigureDropdownViewProps => {\n    const dropdownName =  getDropdownName(productDimensionFull.DimensionTypeValue, resources);\n    const dropdownId = productDimensionFull.DimensionTypeValue.toString();\n    const dropdownToggleName = resources.selectDimensionFormatString.replace('{0}', dropdownName.toLocaleLowerCase());\n    const dropdownList: IDropdownItemProps[] = productDimensionFull.DimensionValues\n        ? productDimensionFull.DimensionValues.map<IDropdownItemProps>(dimensionValue => {\n            return {\n                value: dimensionValue.Value || '',\n                id: dimensionValue.RecordId.toString()\n            };\n        })\n        : [];\n    const errorMessage = configureErrors[dropdownId];\n\n    return {\n        ContainerProps: {\n            className: 'ms-buybox__dropdown'\n        },\n        LabelContainerProps: {\n            tag: 'label',\n            className: 'ms-buybox__dropdown-quantity-label',\n            htmlFor: `ms-buybox__dropown-quantity-input-${dropdownId}`\n        },\n        errors: errorMessage && (\n            <span className='msc-alert msc-alert-noborder msc-alert-danger'>\n                <span className='msi-exclamation-triangle' aria-hidden='true' />\n                <span>{errorMessage}</span>\n            </span>\n        ),\n        heading: (\n            <div>{dropdownName}</div>\n        ),\n        select: (\n            <Dropdown\n                dropdownId={dropdownId}\n                dropdownName={dropdownName}\n                dropdownToggleName={dropdownToggleName}\n                dropdownList={dropdownList}\n                onChange={dropdownCallback}\n                telemetryContent={telemetryContent}\n            />\n        )\n    };\n};"]}