import * as React from 'react';
import { Heading, Popup } from '@msdyn365-commerce-modules/utilities';
import { getUrlSync } from '@msdyn365-commerce/core';
import { PriceComponent } from '@msdyn365-commerce/components';
import { getConfigureErrors, getGenericError } from '../utilities/error-utilities';
import { BuyboxErrorBlock } from './index';
export function getBuyboxFindInStore(props, state, callbacks) {
    const { data, slots: { storeSelector }, resources: { priceFree, originalPriceText, currentPriceText, findInStoreHeaderText, findInStoreDescriptionText, findInStoreLinkText, buyBoxGoToCartText, buyBoxContinueShoppingText, buyBoxSingleItemText, buyBoxMultiLineItemFormatText, buyBoxHeaderMessageText }, context: { request: { channel: { PickupDeliveryModeCode } = { PickupDeliveryModeCode: undefined } } } } = props;
    const product = data?.product?.result;
    const price = data?.productPrice?.result;
    const storeSelectorStateManager = data?.storeSelectorStateManager?.result;
    const cart = data?.cart?.result;
    const deliveryOptions = data?.deliveryOptions?.result;
    const { errorState: { configureErrors, quantityError, otherError, errorHost }, modalOpen, quantity } = state;
    const onClick = () => findInStoreOnClick(props, state, callbacks);
    if (!product || !storeSelectorStateManager || storeSelector.length === 0) {
        return undefined;
    }
    if (!deliveryOptions ||
        !deliveryOptions.DeliveryOptions ||
        !PickupDeliveryModeCode ||
        !deliveryOptions.DeliveryOptions.find(option => option.Code === PickupDeliveryModeCode)) {
        return undefined;
    }
    const dialogStrings = {
        goToCartText: buyBoxGoToCartText,
        continueShoppingText: buyBoxContinueShoppingText,
        headerItemOneText: buyBoxSingleItemText,
        headerItemFormatText: buyBoxMultiLineItemFormatText,
        headerMessageText: buyBoxHeaderMessageText,
        freePriceText: priceFree,
        originalPriceText: originalPriceText,
        currentPriceText: currentPriceText
    };
    const priceComponent = price ? (React.createElement(PriceComponent, { data: { price: price }, context: props.context, id: props.id, typeName: props.typeName, freePriceText: dialogStrings.freePriceText, originalPriceText: dialogStrings.originalPriceText, currentPriceText: dialogStrings.currentPriceText })) : '';
    const defaultImageSettings = {
        viewports: {
            xs: { q: `w=240&h=240&m=6`, w: 0, h: 0 },
            lg: { q: `w=240&h=240&m=6`, w: 0, h: 0 },
            xl: { q: `w=240&h=240&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };
    const popupProps = {
        context: props.context,
        className: 'ms-buybox',
        id: props.id,
        typeName: props.typeName,
        data: { product: props.data.product?.result, price: props.data.productPrice?.result },
        dialogStrings: dialogStrings,
        imageSettings: defaultImageSettings,
        gridSettings: props.context.request.gridSettings,
        productQuantity: quantity,
        priceComponent: priceComponent,
        navigationUrl: getUrlSync('cart', props.context.actionContext),
        modalOpen: modalOpen,
        setModalOpen: callbacks.changeModalOpen
    };
    const renderModalPopup = React.createElement(Popup, Object.assign({}, popupProps));
    return {
        ContainerProps: {
            className: 'ms-buybox__find-in-store'
        },
        storeSelector: storeSelector[0],
        openFindInStoreDialog: onClick,
        heading: (React.createElement(Heading, { className: 'ms-buybox__find-in-store-heading', headingTag: 'h4', text: findInStoreHeaderText })),
        description: (React.createElement("p", { className: 'ms-buybox__find-in-store-description' }, findInStoreDescriptionText)),
        errors: (React.createElement(BuyboxErrorBlock, { configureErrors: configureErrors, quantityError: quantityError, otherError: otherError, resources: props.resources, showError: errorHost === 'FINDINSTORE' })),
        button: (React.createElement("button", { className: 'ms-buybox__find-in-store-button', onClick: onClick, color: 'secondary', "aria-label": findInStoreLinkText, disabled: cart === undefined }, findInStoreLinkText)),
        modal: renderModalPopup
    };
}
async function findInStoreOnClick(props, state, callbacks) {
    const { data: { storeSelectorStateManager: { result: storeSelectorStateManager }, cart: { result: cart }, productAvailableQuantity: { result: productAvailableQuantity } }, resources, context } = props;
    const { selectedProduct, quantity } = state;
    let dataProduct = props.data.product.result;
    if (selectedProduct) {
        dataProduct = (await selectedProduct) || dataProduct;
    }
    if (!dataProduct || !storeSelectorStateManager) {
        return;
    }
    const product = dataProduct;
    const missingDimensions = product.Dimensions && product.Dimensions.filter(dimension => !(dimension.DimensionValue && dimension.DimensionValue.Value));
    if (missingDimensions && missingDimensions.length > 0) {
        if (callbacks.updateErrorState) {
            callbacks.updateErrorState({
                errorHost: 'FINDINSTORE',
                configureErrors: getConfigureErrors(missingDimensions, resources),
            });
        }
    }
    else {
        storeSelectorStateManager.openDialog({
            product,
            onLocationSelected: orgUnitLocation => {
                if (!cart) {
                    return Promise.resolve();
                }
                const behavior = props.context?.app?.config?.addToCartBehavior;
                return cart.addProductToCart({ product: product, count: quantity, location: orgUnitLocation })
                    .then(result => {
                    if (result.status === 'FAILED' && result.substatus === 'MAXQUANTITY') {
                        callbacks.changeModalOpen(false);
                        const productAvailability = state.productAvailableQuantity ?
                            state.productAvailableQuantity.ProductAvailableQuantity :
                            productAvailableQuantity && productAvailableQuantity.length ?
                                productAvailableQuantity[0].ProductAvailableQuantity : undefined;
                        const failureResult = { failureReason: 'CARTACTIONFAILED', cartActionResult: { status: result.status, substatus: result.substatus } };
                        callbacks.updateErrorState({
                            errorHost: 'ADDTOCART',
                            configureErrors: {},
                            otherError: getGenericError(failureResult, cart, resources, context, product, productAvailability, orgUnitLocation)
                        });
                    }
                    else {
                        if ((behavior === undefined || behavior === 'goToCart')) {
                            const navigationUrl = getUrlSync('cart', context.actionContext);
                            if (result.status === 'SUCCESS' && navigationUrl) {
                                window.location.assign(navigationUrl);
                            }
                        }
                        else if (behavior === 'showModal') {
                            callbacks.updateErrorState({
                                configureErrors: {}
                            });
                            callbacks.changeModalOpen(true);
                        }
                    }
                }).catch((error) => {
                    if (props.telemetry) {
                        props.telemetry.exception(error);
                        props.telemetry.debug('Unable to add product to cart');
                    }
                    return;
                });
            }
        }).catch((error) => {
            if (props.telemetry) {
                props.telemetry.error(error.message);
                props.telemetry.debug('Unable to find in store');
            }
            return;
        });
    }
    return;
}
//# sourceMappingURL=buybox-find-in-store.js.map