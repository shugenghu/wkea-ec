import * as React from 'react';
import { Alert, Button, format, getPayloadObject, getTelemetryAttributes, getTelemetryObject, Heading, Quantity, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { AddToCartComponent, AddToOrderTemplateComponent, AddToWishlistComponent, PriceComponent, RatingComponent } from '@msdyn365-commerce/components';
import { getUrlSync } from '@msdyn365-commerce/core';
import { getConfigureErrors, getGenericError, getQuantityError } from '../utilities/error-utilities';
export function getBuyBoxInventoryLabel(props) {
    const { data: { productAvailableQuantity: { result: productAvailableQuantity } }, } = props;
    if (!productAvailableQuantity || !productAvailableQuantity.length) {
        return undefined;
    }
    if (productAvailableQuantity &&
        productAvailableQuantity.length &&
        productAvailableQuantity[0].StockLevelLabel) {
        const inventoryClassName = productAvailableQuantity[0].StockLevelCode ?
            `ms-buybox__inventory-label ms-buybox__inventory-code-${productAvailableQuantity[0].StockLevelCode.toLowerCase()}` :
            'ms-buybox__inventory-label';
        return (React.createElement("div", { className: 'ms-buybox__inventory-info' },
            React.createElement("span", { className: inventoryClassName }, productAvailableQuantity[0].StockLevelLabel)));
    }
    return undefined;
}
export function getBuyboxProductTitle(props) {
    const { data: { product: { result: product } }, config: { titleHeadingTag = 'h1' } } = props;
    return product && (React.createElement(Heading, { className: 'ms-buybox__product-title', headingTag: titleHeadingTag, text: product.Name || '' }));
}
export function getBuyboxProductDescription(props) {
    const { data: { product: { result: product } } } = props;
    return product && (React.createElement("p", { className: 'ms-buybox__product-description' }, product.Description));
}
let telemetryContent;
export function getBuyboxAddToCart(props, state, callbacks) {
    const { id, typeName, context, data: { cart: { result: cart }, product: { result: product }, productPrice: { result: productPrice }, productAvailableQuantity: { result: productAvailableQuantity } }, resources } = props;
    const { quantity, errorState: { configureErrors, quantityError, otherError, errorHost }, selectedProduct, isUpdatingDimension, isServiceItem } = state;
    const productAvailability = state.productAvailableQuantity ?
        state.productAvailableQuantity.ProductAvailableQuantity :
        productAvailableQuantity && productAvailableQuantity.length ?
            productAvailableQuantity[0].ProductAvailableQuantity : undefined;
    const onAddToCartFailed = (result) => {
        callbacks.updateErrorState({
            errorHost: 'ADDTOCART',
            quantityError: result.failureReason === 'OUTOFSTOCK' ? getQuantityError(result.stockLeft, resources) : undefined,
            configureErrors: result.failureReason === 'MISSINGDIMENSION' ? getConfigureErrors(result.missingDimensions, resources) : {},
            otherError: getGenericError(result, cart, resources, context, product, productAvailability, undefined)
        });
    };
    const dialogStrings = {
        goToCartText: resources.buyBoxGoToCartText,
        continueShoppingText: resources.buyBoxContinueShoppingText,
        headerItemOneText: resources.buyBoxSingleItemText,
        headerItemFormatText: resources.buyBoxMultiLineItemFormatText,
        headerMessageText: resources.buyBoxHeaderMessageText,
        freePriceText: resources.priceFree,
        originalPriceText: resources.originalPriceText,
        currentPriceText: resources.currentPriceText
    };
    const defaultImageSettings = {
        viewports: {
            xs: { q: `w=240&h=240&m=6`, w: 0, h: 0 },
            lg: { q: `w=240&h=240&m=6`, w: 0, h: 0 },
            xl: { q: `w=240&h=240&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };
    const isLoading = props.data.productAvailableQuantity.status === 'LOADING';
    if (isLoading) {
        callbacks.changeUpdatingDimension(false);
    }
    telemetryContent = getTelemetryObject(props.context.request.telemetryPageName, props.friendlyName, props.telemetry);
    return {
        ContainerProps: {
            className: 'ms-buybox__add-to-cart-container'
        },
        button: product && (React.createElement(AddToCartComponent, { addToCartText: resources.addToCartText, outOfStockText: resources.outOfStockText, navigationUrl: getUrlSync('cart', context.actionContext), quantity: quantity, data: { product: product, price: productPrice }, context: context, id: id, typeName: typeName, onError: onAddToCartFailed, getSelectedProduct: selectedProduct, productAvailability: productAvailability, isLoading: isLoading, isUpdatingDimension: isUpdatingDimension, changeUpdatingDimension: callbacks.changeUpdatingDimension, dialogStrings: dialogStrings, gridSettings: props.context.request.gridSettings, imageSettings: defaultImageSettings, telemetryContent: telemetryContent, isAddServiceItemToCart: isServiceItem })),
        errorBlock: (React.createElement(BuyboxErrorBlock, { configureErrors: configureErrors, quantityError: quantityError, otherError: otherError, resources: resources, showError: errorHost === 'ADDTOCART' }))
    };
}
export function getBuyboxProductPrice(props) {
    const { id, typeName, context, data: { productPrice: { result: productPrice } }, resources } = props;
    return productPrice && (React.createElement(PriceComponent, { id: id, typeName: typeName, context: context, data: { price: productPrice }, freePriceText: resources.priceFree, originalPriceText: resources.originalPriceText, currentPriceText: resources.currentPriceText }));
}
export function getBuyboxProductRating(props) {
    const { id, typeName, context, data: { ratingsSummary: { result: ratingsSummary } }, resources } = props;
    const ratingComponent = ratingsSummary && ratingsSummary.averageRating && (React.createElement(RatingComponent, { avgRating: ratingsSummary.averageRating || 0, readOnly: true, ariaLabel: format(resources.averageRatingAriaLabel, ratingsSummary.averageRating, '5'), ratingCount: `${ratingsSummary.reviewsCount}`, data: {}, context: context, id: id, typeName: typeName })) || undefined;
    return ratingsSummary && ratingComponent && (ratingComponent);
}
function generateAddToOrderTemplateDialogResources(resources) {
    return {
        addToOrderTemplateHeader: resources.addToOrderTemplateHeader,
        noOrderTemplatesMessage: resources.noOrderTemplatesMessage,
        noOrderTemplatesDescription: resources.noOrderTemplatesDescription,
        createAnOrderTemplateButtonText: resources.createAnOrderTemplateButtonText,
        createNewOrderTemplateButtonText: resources.createNewOrderTemplateButtonText,
        cancelOrderTemplateCreationButtonText: resources.cancelOrderTemplateCreationButtonText,
        selectTemplatesText: resources.selectTemplatesText,
        addToTemplateButtonText: resources.addToTemplateButtonText,
        lineItemsText: resources.lineItemsText
    };
}
function generateOrderTemplateNameDialogResources(resources) {
    return {
        orderTemplateHeaderLabel: resources.createOrderTemplateHeader,
        orderTemplateTitleLabel: resources.orderTemplateTitle,
        orderTemplateNameAriaLabel: resources.orderTemplateNameAriaLabel,
        orderTemplateDescription: resources.createOrderTemplateDescription,
        defaultOrderTemplateName: resources.defaultOrderTemplateName,
        orderTemplateButtonLabel: resources.createOrderTemplateButtonText,
        orderTemplateCancelButtonLabel: resources.cancelNewOrderTemplateCreationButtonText
    };
}
function generateItemAddedToOrderTemplateDialogResources(resources) {
    return {
        viewOrderTemplateButtonText: resources.viewOrderTemplateButtonText,
        continueShoppingButtonText: resources.continueShoppingButtonText,
        itemAddedToOrderTemplateHeaderItemOneText: resources.itemAddedToOrderTemplateHeaderItemOneText,
        itemAddedToOrderTemplateHeaderItemFormatText: resources.itemAddedToOrderTemplateHeaderItemFormatText,
        itemAddedToOrderTemplateHeaderMessageText: resources.itemAddedToOrderTemplateHeaderMessageText,
        freePriceText: resources.priceFree,
        originalPriceText: resources.originalPriceText,
        currentPriceText: resources.currentPriceText
    };
}
function generateDuplicateItemsWhenAddingToOrderTemplateDialogResources(resources) {
    return {
        duplicatedProductsHeader: resources.duplicatedProductsHeader,
        duplicatedProductsDescription: resources.duplicatedProductsDescription,
        updateQuantityButtonText: resources.updateQuantityButtonText,
        cancelDuplicateItemsButtonText: resources.cancelDuplicateItemsButtonText
    };
}
export function getBuyboxProductAddToOrderTemplate(props, state, callbacks) {
    const { id, typeName, context, data: { product: { result: product }, orderTemplates: { result: orderTemplates }, customerInformation: { result: customerInformation } }, resources } = props;
    const { errorState: { configureErrors, quantityError, otherError, errorHost }, quantity } = state;
    const onAddToOrderTemplateFailed = (result) => {
        callbacks.updateErrorState({
            errorHost: 'ORDER_TEMPLATE',
            configureErrors: result.status === 'MISSING_DIMENSION' ? getConfigureErrors(result.missingDimensions, resources) : {},
        });
    };
    return {
        ContainerProps: {
            className: 'ms-buybox__add-to-order-template-container'
        },
        button: product && orderTemplates && (React.createElement(AddToOrderTemplateComponent, { className: 'msc-add-to-cart-extra-actions', addToOrderTemplateButtonText: resources.addToOrderTemplateButtonText, addToOrderTemplateDialogResources: generateAddToOrderTemplateDialogResources(resources), createOrderTemplateDialogResources: generateOrderTemplateNameDialogResources(resources), itemAddedToOrderTemplateDialogResources: generateItemAddedToOrderTemplateDialogResources(resources), duplicateItemsWhenAddingToOrderTemplateDialogResources: generateDuplicateItemsWhenAddingToOrderTemplateDialogResources(resources), data: { product: product, quantity: quantity, orderTemplates: orderTemplates, customerInformation: customerInformation }, context: context, id: id, typeName: typeName, onError: onAddToOrderTemplateFailed })),
        errorBlock: (React.createElement(BuyboxErrorBlock, { configureErrors: configureErrors, quantityError: quantityError, otherError: otherError, resources: resources, showError: errorHost === 'ORDER_TEMPLATE' }))
    };
}
export function getBuyboxProductAddToWishlist(props, state, callbacks) {
    const { id, typeName, context, data: { product: { result: product }, wishlists: { result: wishlists } }, resources } = props;
    const { errorState: { configureErrors, quantityError, otherError, errorHost }, selectedProduct } = state;
    const onAddToWishlistFailed = (result) => {
        callbacks.updateErrorState({
            errorHost: 'WISHLIST',
            configureErrors: result.status === 'MISSINGDIMENSION' ? getConfigureErrors(result.missingDimensions, resources) : {},
        });
    };
    return {
        ContainerProps: {
            className: 'ms-buybox__add-to-wishlist-container'
        },
        button: product && (React.createElement(AddToWishlistComponent, { className: 'msc-add-to-cart-extra-actions', addToWishlistButtonText: resources.addToWishlistButtonText, removeFromWishlistButtonText: resources.removeFromWishlistButtonText, addToWishlistMessage: resources.addToWishlistMessage, removedFromWishlistMessage: resources.removedFromWishlistMessage, addItemToWishlistError: resources.addItemToWishlistError, removeItemFromWishlistError: resources.removeItemFromWishlistError, nameOfWishlist: resources.nameOfWishlist, data: { product: product, wishlists: wishlists }, context: context, id: id, typeName: typeName, onError: onAddToWishlistFailed, getSelectedProduct: selectedProduct })),
        errorBlock: (React.createElement(BuyboxErrorBlock, { configureErrors: configureErrors, quantityError: quantityError, otherError: otherError, resources: resources, showError: errorHost === 'WISHLIST' }))
    };
}
export function getBuyboxProductQuantity(props, state, callbacks) {
    const { resources, context: { app: { config: { maxQuantityForCartLineItem } } } } = props;
    const { quantity, errorState: { quantityError, } } = state;
    const onChange = (newValue) => {
        if (callbacks.updateQuantity) {
            callbacks.updateQuantity(newValue);
        }
    };
    return {
        ContainerProps: {
            className: 'ms-buybox__quantity'
        },
        LabelContainerProps: {
            tag: 'label',
            className: 'ms-buybox__product-quantity-label',
            htmlFor: 'ms-buybox__product-quantity-input'
        },
        heading: (React.createElement("div", { className: 'ms-buybox__product-quantity-label-heading' }, resources.productQuantityHeading)),
        errors: quantityError && (React.createElement("span", { className: 'msc-alert msc-alert-noborder msc-alert-danger' },
            React.createElement("span", { className: 'msi-exclamation-triangle', "aria-hidden": 'true' }),
            React.createElement("span", null, quantityError))),
        input: (React.createElement(Quantity, { id: 'ms-buybox__product-quantity-input', max: maxQuantityForCartLineItem || 10, currentCount: quantity, onChange: onChange, inputQuantityAriaLabel: resources.inputQuantityAriaLabel, telemetryContent: telemetryContent }))
    };
}
export function getBuyboxShopSimilarLook(props, state, callbacks) {
    const { resources, context, data: { product: { result: product } }, } = props;
    const { errorState: {} } = state;
    const navigationUrl = () => {
        const searchURL = `${getUrlSync('search', context && context.actionContext)}?productId=${product && product.RecordId}`;
        document.location.href = searchURL;
    };
    const payLoad = getPayloadObject('click', telemetryContent, TelemetryConstant.ShopSimliarLooks);
    const attribute = getTelemetryAttributes(telemetryContent, payLoad);
    return {
        ContainerProps: {
            className: 'ms-buybox__shopsimilarlooks'
        },
        input: (React.createElement(Button, Object.assign({ title: resources.shopSimilarLooksText, className: 'ms-buybox__shop-similar-looks-button', "aria-label": resources.shopSimilarLooksText, onClick: navigationUrl }, attribute), resources.shopSimilarLooksText))
    };
}
export const BuyboxErrorBlock = ({ showError, configureErrors, quantityError, otherError, resources }) => {
    let errorMessages = [];
    errorMessages = Object.values(configureErrors).filter(message => message !== undefined);
    if (quantityError) {
        errorMessages.push(quantityError);
    }
    if (otherError) {
        errorMessages.push(otherError);
    }
    return (React.createElement(Alert, { isOpen: showError && errorMessages.length > 0, color: 'danger', assertive: true, "aria-label": resources.buyboxErrorMessageHeader },
        React.createElement("div", { className: 'msc-alert__header', "aria-hidden": 'true' },
            React.createElement("span", { className: 'msi-exclamation-triangle' }),
            React.createElement("span", null, resources.buyboxErrorMessageHeader)),
        errorMessages.map((message) => {
            if (message) {
                return (React.createElement("div", { className: 'msc-alert__line' }, message));
            }
            else {
                return null;
            }
        })));
};
//# sourceMappingURL=buybox-small-components.js.map