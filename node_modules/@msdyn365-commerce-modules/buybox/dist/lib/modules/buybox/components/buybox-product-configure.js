import * as React from 'react';
import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import { Dropdown } from './dropdown';
let telemetryContent;
export function getBuyboxProductConfigure(props, state, callbacks) {
    const { data: { product: { result: product }, productDimensions: { result: productDimensions }, }, resources } = props;
    const { errorState: { configureErrors, } } = state;
    const { getDropdownName } = callbacks;
    if (!product || !productDimensions) {
        return undefined;
    }
    const onChanged = async (notification) => _onChanged(notification, callbacks.dimensionSelectedAsync);
    telemetryContent = getTelemetryObject(props.context.request.telemetryPageName, props.friendlyName, props.telemetry);
    const dropdowns = productDimensions.map(productDimensionFull => _mapProductDimensionFullToDropdownViewProps(productDimensionFull, resources, configureErrors, getDropdownName, onChanged));
    if (!dropdowns || dropdowns.length === 0) {
        return undefined;
    }
    return {
        ContainerProps: {
            className: 'ms-buybox__configure'
        },
        dropdowns: dropdowns
    };
}
const _onChanged = async (notification, dimensionChanged) => {
    await dimensionChanged(+notification.dropdownId, notification.selectId);
};
const _mapProductDimensionFullToDropdownViewProps = (productDimensionFull, resources, configureErrors, getDropdownName, dropdownCallback) => {
    const dropdownName = getDropdownName(productDimensionFull.DimensionTypeValue, resources);
    const dropdownId = productDimensionFull.DimensionTypeValue.toString();
    const dropdownToggleName = resources.selectDimensionFormatString.replace('{0}', dropdownName.toLocaleLowerCase());
    const dropdownList = productDimensionFull.DimensionValues
        ? productDimensionFull.DimensionValues.map(dimensionValue => {
            return {
                value: dimensionValue.Value || '',
                id: dimensionValue.RecordId.toString()
            };
        })
        : [];
    const errorMessage = configureErrors[dropdownId];
    return {
        ContainerProps: {
            className: 'ms-buybox__dropdown'
        },
        LabelContainerProps: {
            tag: 'label',
            className: 'ms-buybox__dropdown-quantity-label',
            htmlFor: `ms-buybox__dropown-quantity-input-${dropdownId}`
        },
        errors: errorMessage && (React.createElement("span", { className: 'msc-alert msc-alert-noborder msc-alert-danger' },
            React.createElement("span", { className: 'msi-exclamation-triangle', "aria-hidden": 'true' }),
            React.createElement("span", null, errorMessage))),
        heading: (React.createElement("div", null, dropdownName)),
        select: (React.createElement(Dropdown, { dropdownId: dropdownId, dropdownName: dropdownName, dropdownToggleName: dropdownToggleName, dropdownList: dropdownList, onChange: dropdownCallback, telemetryContent: telemetryContent }))
    };
};
//# sourceMappingURL=buybox-product-configure.js.map