{"version":3,"file":"dropdown.js","sourceRoot":"./src/","sources":["modules/buybox/components/dropdown/dropdown.tsx"],"names":[],"mappings":"AAGA,OAAO,EAAE,gBAAgB,EAAE,sBAAsB,EAAY,MAAM,sCAAsC,CAAC;AAC1G,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAiB/B,MAAM,OAAO,QAAS,SAAQ,KAAK,CAAC,aAA6C;IAI7E,YAAY,KAAqB,EAAE,KAAqB;QACpD,KAAK,CAAC,KAAK,CAAC,CAAC;QAJT,eAAU,GAAuC,KAAK,CAAC,SAAS,EAAqB,CAAC;QAqCtF,eAAU,GAAG,KAAK,EAAE,KAA2C,EAAE,EAAE;YACvE,IAAI,CAAC,QAAQ,CAAC,EAAC,aAAa,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;YAEnD,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACrB,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;oBACtB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;oBACjC,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;oBAC5B,aAAa,EAAE,KAAK,CAAC,MAAM,CAAC,SAAS;iBACxC,CAAC,CAAC;aACN;QACL,CAAC,CAAC;QA1CE,IAAI,CAAC,KAAK,GAAG;YACT,aAAa,EAAE,EAAE;SACpB,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,gBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC/F,CAAC;IAEM,iBAAiB;QACpB,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACzB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC;SAC7C;IACL,CAAC;IAEM,MAAM;QACT,MAAM,EAAC,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,kBAAkB,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;QAChF,MAAM,SAAS,GAAG,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACrF,OAAO,CACH,8CACI,EAAE,EAAE,uBAAuB,UAAU,EAAE,EACvC,GAAG,EAAE,IAAI,CAAC,UAAU,gBACR,YAAY,EACxB,SAAS,EAAC,sBAAsB,EAChC,QAAQ,EAAE,IAAI,CAAC,UAAU,IACrB,SAAS;YAEb,gCAAQ,KAAK,EAAC,EAAE,mBAAgB,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,EAAE,EAAE,MAAM,QAAC,QAAQ,UAAE,kBAAkB,CAAU;YACxJ,YAAY,CAAC,GAAG,CACb,CAAC,IAAwB,EAAE,EAAE,CAAC,IAAI,IAAI,gCAAQ,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,mBAAiB,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAG,IAAI,CAAC,KAAK,CAAU,CAC/N,CACI,CACZ,CAAC;IACN,CAAC;CAaJ","sourcesContent":["/**\n * Copyright (c) 2018 Microsoft Corporation\n */\nimport { getPayloadObject, getTelemetryAttributes, IPayLoad } from '@msdyn365-commerce-modules/utilities';\nimport * as React from 'react';\nimport { IDropdownProps } from './';\nimport { IDropdownItemProps } from './dropdown.props';\n\ntype IDropdownState = {\n    /**\n     * @friendlyName selectedIndex\n     * @description selected index\n     */\n    selectedIndex: string;\n};\n\n/**\n *\n * DropDown component\n * @extends {React.PureComponent<IDropdownProps, IDropdownState>}\n */\nexport class Dropdown extends React.PureComponent<IDropdownProps, IDropdownState> {\n    private selectMenu: React.RefObject<HTMLSelectElement> = React.createRef<HTMLSelectElement>();\n    private payLoad: IPayLoad;\n\n    constructor(props: IDropdownProps, state: IDropdownState) {\n        super(props);\n        this.state = {\n            selectedIndex: ''\n        };\n        this.payLoad = getPayloadObject('click', props.telemetryContent!, this.props.dropdownName);\n    }\n\n    public componentDidMount(): void {\n        if (this.selectMenu.current) {\n            this.selectMenu.current.selectedIndex = 0;\n        }\n    }\n\n    public render(): JSX.Element {\n        const {dropdownId, dropdownList, dropdownName, dropdownToggleName} = this.props;\n        const attribute = getTelemetryAttributes(this.props.telemetryContent!, this.payLoad);\n        return (\n            <select\n                id={`msc-dropdown__entry-${dropdownId}`}\n                ref={this.selectMenu}\n                aria-label={dropdownName}\n                className='msc-dropdown__select'\n                onChange={this._onChanged}\n                {...attribute}\n            >\n                <option value='' aria-selected={this.state.selectedIndex === ''} selected={this.state.selectedIndex === ''} hidden disabled>{dropdownToggleName}</option>\n                {dropdownList.map(\n                    (item: IDropdownItemProps) => item && <option value={item.id} key={item.id} selected={this.state.selectedIndex === item.id.toString()} aria-selected={this.state.selectedIndex === item.id.toString()}>{item.value}</option>\n                )}\n            </select>\n        );\n    }\n\n    private _onChanged = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({selectedIndex: event.target.value});\n\n        if (this.props.onChange) {\n            await this.props.onChange({\n                dropdownId: this.props.dropdownId,\n                selectId: event.target.value,\n                selectedValue: event.target.innerText\n            });\n        }\n    };\n}"]}