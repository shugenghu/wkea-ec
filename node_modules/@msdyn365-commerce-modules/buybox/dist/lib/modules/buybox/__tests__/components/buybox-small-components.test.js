import { render } from 'enzyme';
import * as React from 'react';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mockResources } from '../../__mocks__/mock-resources';
import { BuyboxErrorBlock, getBuyBoxInventoryLabel, getBuyboxProductDescription, getBuyboxProductQuantity, getBuyboxProductTitle, getBuyboxShopSimilarLook, } from '../../components';
const mockContext = {
    app: {
        config: {
            maxQuantityForCartLineItem: 5
        }
    }
};
describe('Buybox Inventory Level Label', () => {
    let moduleProps;
    it('returns null if no product quantity', () => {
        moduleProps = buildMockModuleProps({
            productAvailableQuantity: {
                status: 'FAILED',
                result: undefined,
            }
        }, {}, {}, mockContext);
        const inventoryLabel = getBuyBoxInventoryLabel(moduleProps);
        expect(inventoryLabel).toBe(undefined);
    });
    it('renders correctly with correct stock Labels', () => {
        moduleProps = buildMockModuleProps({
            productAvailableQuantity: {
                status: 'SUCCESS',
                result: [{
                        StockLevelLabel: 'Available'
                    }]
            }
        }, {}, {}, mockContext);
        const inventoryLabel = getBuyBoxInventoryLabel(moduleProps);
        expect(inventoryLabel).toBeDefined();
        const component = render(inventoryLabel);
        expect(component).toMatchSnapshot();
    });
});
describe('Buybox Product Title', () => {
    let moduleProps;
    it('returns null if no product', () => {
        moduleProps = buildMockModuleProps({
            product: {
                status: 'FAILED',
                result: undefined,
            }
        }, {}, {}, mockContext);
        const title = getBuyboxProductTitle(moduleProps);
        expect(title).toBe(undefined);
    });
    it('renders correctly with default values', () => {
        moduleProps = buildMockModuleProps({
            product: {
                status: 'SUCCESS',
                result: {
                    Name: undefined
                },
            }
        }, {}, {}, mockContext);
        const title = getBuyboxProductTitle(moduleProps);
        expect(title).toBeDefined();
        const component = render(title);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with supplied values', () => {
        moduleProps = buildMockModuleProps({
            product: {
                status: 'SUCCESS',
                result: {
                    Name: 'Toy'
                },
            },
        }, {}, {
            titleHeadingTag: 'h2'
        }, mockContext);
        const title = getBuyboxProductTitle(moduleProps);
        expect(title).toBeDefined();
        const component = render(title);
        expect(component).toMatchSnapshot();
    });
});
describe('getBuyboxProductDescription', () => {
    let moduleProps;
    it('returns null if no product', () => {
        moduleProps = buildMockModuleProps({
            product: {
                status: 'FAILED',
                result: undefined,
            }
        }, {}, {}, mockContext);
        const description = getBuyboxProductDescription(moduleProps);
        expect(description).toBe(undefined);
    });
    it('renders correctly with default values', () => {
        moduleProps = buildMockModuleProps({
            product: {
                status: 'SUCCESS',
                result: {
                    Name: undefined
                },
            }
        }, {}, {}, mockContext);
        const description = getBuyboxProductDescription(moduleProps);
        expect(description).toBeDefined();
        const component = render(description);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with supplied values', () => {
        moduleProps = buildMockModuleProps({
            product: {
                status: 'SUCCESS',
                result: {
                    Description: 'This is a toy'
                },
            },
        }, {}, {}, mockContext);
        const description = getBuyboxProductTitle(moduleProps);
        expect(description).toBeDefined();
        const component = render(description);
        expect(component).toMatchSnapshot();
    });
});
describe('Buybox Product Quantity', () => {
    let moduleProps;
    const mockState = {
        quantity: 0,
        errorState: {
            configureErrors: {}
        },
        selectedDimensions: {}
    };
    const mockCallbacks = {
        updateQuantity: jest.fn(),
        updateErrorState: jest.fn(),
        dimensionSelectedAsync: jest.fn(),
        updateSelectedProduct: jest.fn(),
        getDropdownName: jest.fn(),
        changeModalOpen: jest.fn(),
        changeUpdatingDimension: jest.fn()
    };
    it('does not include error block if no errors', () => {
        moduleProps = {
            ...buildMockModuleProps({
                product: {
                    status: 'SUCCESS',
                    result: {},
                },
            }, {}, {}, mockContext),
            resources: mockResources
        };
        const quantity = getBuyboxProductQuantity(moduleProps, mockState, mockCallbacks);
        expect(quantity.errors).toBeUndefined();
    });
    it('includes error block if no errors', () => {
        moduleProps = {
            ...buildMockModuleProps({
                product: {
                    status: 'SUCCESS',
                    result: {},
                },
            }, {}, {}, mockContext),
            resources: mockResources
        };
        const quantity = getBuyboxProductQuantity(moduleProps, mockState, mockCallbacks);
        expect(quantity.errors).toBeUndefined();
    });
    it('fires callback when input changes', () => {
        moduleProps = {
            ...buildMockModuleProps({
                product: {
                    status: 'SUCCESS',
                    result: {},
                },
            }, {}, {}, mockContext),
            resources: mockResources
        };
        const quantity = getBuyboxProductQuantity(moduleProps, mockState, mockCallbacks);
        const quantityProps = quantity.input.props;
        quantityProps.onChange(2);
        expect(mockCallbacks.updateQuantity).toBeCalledWith(2);
    });
});
describe('Buybox Shop Similar Item', () => {
    let moduleProps;
    const mockState = {
        quantity: 0,
        errorState: {
            configureErrors: {}
        },
        selectedDimensions: {}
    };
    const mockCallbacks = {
        updateQuantity: jest.fn(),
        updateErrorState: jest.fn(),
        dimensionSelectedAsync: jest.fn(),
        updateSelectedProduct: jest.fn(),
        getDropdownName: jest.fn(),
        changeModalOpen: jest.fn(),
        changeUpdatingDimension: jest.fn()
    };
    it('render ShopSimilarLooks link if product available', () => {
        moduleProps = {
            ...buildMockModuleProps({
                product: {
                    status: 'SUCCESS',
                    result: {},
                },
            }, {}, {}, mockContext),
            resources: mockResources
        };
        const shopSimilarItem = getBuyboxShopSimilarLook(moduleProps, mockState, mockCallbacks);
        expect(shopSimilarItem.errors).toBeUndefined();
    });
    it('includes error block if product not available errors', () => {
        moduleProps = {
            ...buildMockModuleProps({
                product: {
                    status: 'FAILED',
                    result: {},
                },
            }, {}, {}, mockContext),
            resources: mockResources
        };
        const shopSimilarItem = getBuyboxShopSimilarLook(moduleProps, mockState, mockCallbacks);
        expect(shopSimilarItem.errors).toBeUndefined();
    });
});
describe('Buybox Error Block', () => {
    it('renders correctly with no error messages', () => {
        const mockProps = {
            resources: mockResources,
            configureErrors: {},
            otherError: undefined,
            quantityError: undefined,
            showError: true
        };
        const component = render(React.createElement(BuyboxErrorBlock, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with errors', () => {
        const mockProps = {
            resources: mockResources,
            configureErrors: { 1: 'Missing 1', 2: 'Missing 2' },
            otherError: 'Other error',
            quantityError: 'Quantity error',
            showError: true
        };
        const component = render(React.createElement(BuyboxErrorBlock, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with errors but showError=false', () => {
        const mockProps = {
            resources: mockResources,
            configureErrors: { 1: 'Missing 1', 2: 'Missing 2' },
            otherError: 'Other error',
            quantityError: 'Quantity error',
            showError: false
        };
        const component = render(React.createElement(BuyboxErrorBlock, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=buybox-small-components.test.js.map