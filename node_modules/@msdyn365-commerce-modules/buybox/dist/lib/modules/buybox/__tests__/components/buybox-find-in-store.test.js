import { shallow } from 'enzyme';
import * as React from 'react';
import * as Core from '@msdyn365-commerce/core';
import { mockResources } from '../../__mocks__/mock-resources';
import { getBuyboxFindInStore } from '../../components';
const mockState = {
    quantity: 0,
    errorState: {
        configureErrors: {}
    },
    selectedDimensions: {}
};
const mockCallbacks = {
    updateQuantity: jest.fn(),
    updateErrorState: jest.fn(),
    dimensionSelectedAsync: jest.fn(),
    updateSelectedProduct: jest.fn(),
    getDropdownName: jest.fn(),
    changeModalOpen: jest.fn(),
    changeUpdatingDimension: jest.fn()
};
const mockContext = {
    app: {
        config: {
            addToCartBehavior: 'goToCart'
        }
    },
    request: {
        channel: {
            PickupDeliveryModeCode: '60'
        }
    }
};
const mockData = {
    product: {
        status: 'SUCCESS',
        result: {}
    },
    productPrice: {
        result: {
            ProductId: 12
        }
    },
    storeSelectorStateManager: {
        status: 'SUCCESS',
        result: {},
    },
    cart: {
        status: 'SUCCESS',
        result: {}
    },
    deliveryOptions: {
        status: 'SUCCESS',
        result: {
            DeliveryOptions: [
                {
                    Code: '60'
                }
            ]
        }
    },
    productAvailableQuantity: {
        status: 'SUCCESS',
        result: {}
    }
};
describe('Buybox Find In Store', () => {
    let moduleProps;
    beforeEach(() => {
        mockCallbacks.updateErrorState.mockClear();
        mockCallbacks.dimensionSelectedAsync.mockClear();
        mockCallbacks.updateQuantity.mockClear();
    });
    it('returns null if there is no product', () => {
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'FAILED',
                    result: undefined
                },
            }, {}, {}, { ...mockContext, app: { config: { addToCartBehavior: 'showModal' } } }),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null, "Store selector"))]
            },
            resources: mockResources
        };
        const moduleProps2 = { ...moduleProps };
        delete moduleProps2.data;
        const findInStore = getBuyboxFindInStore(moduleProps2, mockState, mockCallbacks);
        expect(findInStore).toBeUndefined();
    });
    it('returns null if there is no store selector state manager', () => {
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                storeSelectorStateManager: {
                    status: 'FAILED',
                    result: undefined,
                },
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null, "Store selector"))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeUndefined();
    });
    it('returns null if there is no store selector slot', () => {
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: []
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeUndefined();
    });
    it('returns null if no delivery options', () => {
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                deliveryOptions: {
                    status: 'FAILED',
                    result: undefined
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeUndefined();
    });
    it('returns null if delivery options don\'t match delivery store code', () => {
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                deliveryOptions: {
                    status: 'SUCCESS',
                    result: [
                        {
                            Code: '50'
                        },
                        {
                            Code: '55'
                        },
                        {
                            Code: '70'
                        }
                    ]
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeUndefined();
    });
    it('returns valid data when product, store selector state manager and store selector slot all present and correct delvery option appears', () => {
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.heading).toBeTruthy();
        expect(findInStore.description).toBeTruthy();
        expect(findInStore.button).toBeTruthy();
        expect(findInStore.errors).toBeTruthy();
        expect(findInStore.storeSelector).toBeTruthy();
    });
    it('includes error block if error host matches', () => {
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const mockStateOverride = {
            ...mockState,
            errorState: {
                errorHost: 'FINDINSTORE',
                configureErrors: {}
            }
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockStateOverride, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.errors).toBeTruthy();
    });
    it('button disabled if no cart present', async () => {
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                cart: {
                    status: 'FAILED',
                    result: undefined
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).toBeTruthy();
    });
    it('opens dialog on button click', async () => {
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockResolvedValue({})
        };
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                storeSelectorStateManager: {
                    status: 'SUCCESS',
                    result: mockStoreSelectorStateManager
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).not.toBeTruthy();
        findInStoreButton.simulate('click');
        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();
    });
    it('exists cleanly if opens dialog fails', async () => {
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockRejectedValue('FAIL')
        };
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                storeSelectorStateManager: {
                    status: 'SUCCESS',
                    result: mockStoreSelectorStateManager,
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).not.toBeTruthy();
        findInStoreButton.simulate('click');
        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();
    });
    it('does not opens dialog on button click if missing dimensions', async () => {
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockResolvedValue({})
        };
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        Dimensions: [
                            {
                                DimensionTypeValue: 1,
                                DimensionValue: undefined
                            },
                            {
                                DimensionTypeValue: 3,
                                DimensionValue: {
                                    RecordId: 22565421223,
                                    Value: '32'
                                }
                            }
                        ]
                    }
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).not.toBeTruthy();
        findInStoreButton.simulate('click');
        expect(mockStoreSelectorStateManager.openDialog).not.toBeCalled();
        expect(mockCallbacks.updateErrorState).toBeCalled();
    });
    it('uses selectedProduct if present rather than erroring', async () => {
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockResolvedValue({})
        };
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                product: {
                    status: 'SUCCESS',
                    result: {
                        Dimensions: [
                            {
                                DimensionTypeValue: 1,
                                DimensionValue: undefined
                            },
                            {
                                DimensionTypeValue: 3,
                                DimensionValue: {
                                    RecordId: 22565421223,
                                    Value: '32'
                                }
                            }
                        ]
                    }
                },
                storeSelectorStateManager: {
                    status: 'SUCCESS',
                    result: mockStoreSelectorStateManager,
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const mockProduct = {
            Dimensions: [
                {
                    DimensionTypeValue: 1,
                    DimensionValue: {
                        RecordId: 22565421223,
                        Value: 'Blue'
                    }
                },
                {
                    DimensionTypeValue: 3,
                    DimensionValue: {
                        RecordId: 22565421223,
                        Value: '32'
                    }
                }
            ]
        };
        const updatedState = {
            ...mockState,
            selectedProduct: new Promise((resolve) => {
                console.log('Calling this');
                resolve(mockProduct);
            })
        };
        const findInStore = getBuyboxFindInStore(moduleProps, updatedState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).not.toBeTruthy();
        findInStoreButton.simulate('click');
        await new Promise(resolve => { setTimeout(resolve, 0); });
        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();
    });
    it('updates window location when url specified and result success', async () => {
        let context;
        window.location.assign = jest.fn();
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockImplementation(input => {
                context = input;
                return Promise.resolve({});
            })
        };
        const mockCartState = {
            addProductToCart: jest.fn().mockResolvedValue({ status: 'SUCCESS' })
        };
        Core.getUrlSync = jest.fn().mockReturnValue('foo');
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                storeSelectorStateManager: {
                    status: 'SUCCESS',
                    result: mockStoreSelectorStateManager,
                },
                cart: {
                    status: 'SUCCESS',
                    result: mockCartState
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).not.toBeTruthy();
        findInStoreButton.simulate('click');
        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();
        expect(context).toBeDefined();
        await context.onLocationSelected({});
        expect(mockCartState.addProductToCart).toBeCalled();
        expect(window.location.assign).toHaveBeenCalledWith('foo');
    });
    it('does not updates window location when url not specified and result success', async () => {
        let context;
        window.location.assign = jest.fn();
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockImplementation(input => {
                context = input;
                return Promise.resolve({});
            })
        };
        const mockCartState = {
            addProductToCart: jest.fn().mockResolvedValue({ status: 'SUCCESS' })
        };
        Core.getUrlSync = jest.fn().mockReturnValue(undefined);
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                storeSelectorStateManager: {
                    status: 'SUCCESS',
                    result: mockStoreSelectorStateManager,
                },
                cart: {
                    status: 'SUCCESS',
                    result: mockCartState
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).not.toBeTruthy();
        findInStoreButton.simulate('click');
        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();
        expect(context).toBeDefined();
        await context.onLocationSelected({});
        expect(mockCartState.addProductToCart).toBeCalled();
        expect(window.location.assign).not.toHaveBeenCalled();
    });
    it('does not updates window location when url specified and result fails', async () => {
        let context;
        window.location.assign = jest.fn();
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockImplementation(input => {
                context = input;
                return Promise.resolve({});
            })
        };
        const mockCartState = {
            addProductToCart: jest.fn().mockResolvedValue({ status: 'FAILED' })
        };
        Core.getUrlSync = jest.fn().mockReturnValue('foo');
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                storeSelectorStateManager: {
                    status: 'SUCCESS',
                    result: mockStoreSelectorStateManager,
                },
                cart: {
                    status: 'SUCCESS',
                    result: mockCartState
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).not.toBeTruthy();
        findInStoreButton.simulate('click');
        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();
        expect(context).toBeDefined();
        await context.onLocationSelected({});
        expect(mockCartState.addProductToCart).toBeCalled();
        expect(window.location.assign).not.toHaveBeenCalled();
    });
    it('does not updates window location when url specified and result throws', async () => {
        let context;
        window.location.assign = jest.fn();
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockImplementation(input => {
                context = input;
                return Promise.resolve({});
            })
        };
        const mockCartState = {
            addProductToCart: jest.fn().mockRejectedValue('FAIL')
        };
        Core.getUrlSync = jest.fn().mockReturnValue('foo');
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                storeSelectorStateManager: {
                    status: 'SUCCESS',
                    result: mockStoreSelectorStateManager,
                },
                cart: {
                    status: 'SUCCESS',
                    result: mockCartState
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        expect(findInStoreButton.props().disabled).not.toBeTruthy();
        findInStoreButton.simulate('click');
        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();
        expect(context).toBeDefined();
        await context.onLocationSelected({});
        expect(mockCartState.addProductToCart).toBeCalled();
        expect(window.location.assign).not.toHaveBeenCalled();
    });
    it('does not updates window location when url specified and no cart', async () => {
        let context;
        window.location.assign = jest.fn();
        const mockStoreSelectorStateManager = {
            openDialog: jest.fn().mockImplementation(input => {
                context = input;
                return Promise.resolve({});
            })
        };
        Core.getUrlSync = jest.fn().mockReturnValue('foo');
        moduleProps = {
            ...Core.buildMockModuleProps({
                ...mockData,
                storeSelectorStateManager: {
                    status: 'SUCCESS',
                    result: mockStoreSelectorStateManager,
                },
                cart: {
                    status: 'FAILED',
                    result: undefined
                }
            }, {}, {}, mockContext),
            slots: {
                mediaGallery: [],
                storeSelector: [(React.createElement("div", null))]
            },
            resources: mockResources
        };
        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);
        expect(findInStore).toBeDefined();
        expect(findInStore.button).toBeTruthy();
        const findInStoreButton = shallow(findInStore.button);
        findInStoreButton.simulate('click');
        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();
        expect(context).toBeDefined();
        await context.onLocationSelected({});
        expect(window.location.assign).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=buybox-find-in-store.test.js.map