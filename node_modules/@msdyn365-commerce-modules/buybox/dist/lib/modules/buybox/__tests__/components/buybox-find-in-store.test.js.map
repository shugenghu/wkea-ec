{"version":3,"file":"buybox-find-in-store.test.js","sourceRoot":"./src/","sources":["modules/buybox/__tests__/components/buybox-find-in-store.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { shallow } from 'enzyme';\nimport * as React from 'react';\n\nimport { IStoreSelectionStateContext, IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';\nimport * as Core from '@msdyn365-commerce/core';\nimport { AsyncResult, ProductPrice,SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { IBuyboxCallbacks, IBuyboxData, IBuyboxProps, IBuyboxState } from '../../../../index';\nimport { mockResources } from '../../__mocks__/mock-resources';\nimport { getBuyboxFindInStore } from '../../components';\n\nconst mockState: IBuyboxState = {\n    quantity: 0,\n    errorState: {\n        configureErrors: {}\n    },\n    selectedDimensions: {}\n};\n\nconst mockCallbacks: IBuyboxCallbacks = {\n    updateQuantity: jest.fn(),\n    updateErrorState: jest.fn(),\n    dimensionSelectedAsync: jest.fn(),\n    updateSelectedProduct: jest.fn(),\n    getDropdownName: jest.fn(),\n    changeModalOpen: jest.fn(),\n    changeUpdatingDimension: jest.fn()\n\n};\n\nconst mockContext: Core.ICoreContext = {\n    app:{\n        config:{\n            addToCartBehavior:'goToCart'\n        }\n    },\n    request: {\n        // @ts-ignore partial mock\n        channel: {\n            PickupDeliveryModeCode: '60'\n        }\n    }\n};\n\nconst mockData = {\n    product: {\n        status: 'SUCCESS',\n        result: {\n        }\n    } as AsyncResult<SimpleProduct>,\n    productPrice: {\n        result: {\n            ProductId:12\n        }\n    } as AsyncResult<ProductPrice>,\n    storeSelectorStateManager: {\n        status: 'SUCCESS',\n        result: {},\n    } as AsyncResult<IStoreSelectorStateManager>,\n    cart: {\n        status: 'SUCCESS',\n        result: {}\n    },\n    deliveryOptions: {\n        status: 'SUCCESS',\n        result: {\n            DeliveryOptions: [\n                {\n                    Code: '60'\n                }\n            ]\n        }\n    },\n    productAvailableQuantity: {\n        status: 'SUCCESS',\n        result: {}\n    }\n};\n\ndescribe('Buybox Find In Store', () => {\n    let moduleProps: IBuyboxProps<IBuyboxData>;\n\n    beforeEach(() => {\n        // @ts-ignore\n        mockCallbacks.updateErrorState.mockClear();\n        // @ts-ignore\n        mockCallbacks.dimensionSelectedAsync.mockClear();\n        // @ts-ignore\n        mockCallbacks.updateQuantity.mockClear();\n    });\n\n    it('returns null if there is no product', () => {\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'FAILED',\n                        result: undefined\n                    } as AsyncResult<SimpleProduct>,\n                },\n                {},\n                {},\n                {...mockContext,app:{config:{addToCartBehavior:'showModal'}}}\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div>Store selector</div>)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n        const moduleProps2  = {...moduleProps};\n        delete moduleProps2.data;\n        const findInStore = getBuyboxFindInStore(moduleProps2, mockState, mockCallbacks);\n\n        expect(findInStore).toBeUndefined();\n    });\n\n    it('returns null if there is no store selector state manager', () => {\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    storeSelectorStateManager: {\n                        status: 'FAILED',\n                        result: undefined,\n                    } as AsyncResult<IStoreSelectorStateManager>,\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div>Store selector</div>)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeUndefined();\n    });\n\n    it('returns null if there is no store selector slot', () => {\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: []\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeUndefined();\n    });\n\n    it('returns null if no delivery options', () => {\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    deliveryOptions: {\n                        status: 'FAILED',\n                        result: undefined\n                    }\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeUndefined();\n    });\n\n    it('returns null if delivery options don\\'t match delivery store code', () => {\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    deliveryOptions: {\n                        status: 'SUCCESS',\n                        result: [\n                            {\n                                Code: '50'\n                            },\n                            {\n                                Code: '55'\n                            },\n                            {\n                                Code: '70'\n                            }\n                        ]\n                    }\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeUndefined();\n    });\n\n    it('returns valid data when product, store selector state manager and store selector slot all present and correct delvery option appears', () => {\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n\n        expect(findInStore!.heading).toBeTruthy();\n        expect(findInStore!.description).toBeTruthy();\n        expect(findInStore!.button).toBeTruthy();\n        expect(findInStore!.errors).toBeTruthy(); // errors present, they'll just be closed\n        expect(findInStore!.storeSelector).toBeTruthy();\n    });\n\n    it('includes error block if error host matches', () => {\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const mockStateOverride: IBuyboxState = {\n            ...mockState,\n            errorState: {\n                errorHost: 'FINDINSTORE',\n                configureErrors: {}\n            }\n        };\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockStateOverride, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n\n        expect(findInStore!.errors).toBeTruthy(); // no errors present\n    });\n\n    it('button disabled if no cart present', async () => {\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    cart: {\n                        status: 'FAILED',\n                        result: undefined\n                    }\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).toBeTruthy();\n    });\n\n    it('opens dialog on button click', async () => {\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockResolvedValue({})\n        };\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    storeSelectorStateManager: {\n                        status: 'SUCCESS',\n                        result: mockStoreSelectorStateManager\n                    } as AsyncResult<IStoreSelectorStateManager>\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).not.toBeTruthy();\n\n        findInStoreButton.simulate('click');\n\n        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();\n    });\n\n    it('exists cleanly if opens dialog fails', async () => {\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockRejectedValue('FAIL')\n        };\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    storeSelectorStateManager: {\n                        status: 'SUCCESS',\n                        result: mockStoreSelectorStateManager,\n                    } as AsyncResult<IStoreSelectorStateManager>\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).not.toBeTruthy();\n\n        findInStoreButton.simulate('click');\n\n        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();\n    });\n\n    it('does not opens dialog on button click if missing dimensions', async () => {\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockResolvedValue({})\n        };\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            Dimensions: [\n                                {\n                                    DimensionTypeValue: 1,\n                                    DimensionValue: undefined\n                                },\n                                {\n                                    DimensionTypeValue: 3,\n                                    DimensionValue: {\n                                        RecordId: 22565421223,\n                                        Value: '32'\n                                    }\n                                }\n                            ]\n                        }\n                    } as AsyncResult<SimpleProduct>\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).not.toBeTruthy();\n\n        findInStoreButton.simulate('click');\n\n        expect(mockStoreSelectorStateManager.openDialog).not.toBeCalled();\n        expect(mockCallbacks.updateErrorState).toBeCalled();\n    });\n\n    it('uses selectedProduct if present rather than erroring', async () => {\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockResolvedValue({})\n        };\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    product: {\n                        status: 'SUCCESS',\n                        result: {\n                            Dimensions: [\n                                {\n                                    DimensionTypeValue: 1,\n                                    DimensionValue: undefined\n                                },\n                                {\n                                    DimensionTypeValue: 3,\n                                    DimensionValue: {\n                                        RecordId: 22565421223,\n                                        Value: '32'\n                                    }\n                                }\n                            ]\n                        }\n                    } as AsyncResult<SimpleProduct>,\n                    storeSelectorStateManager: {\n                        status: 'SUCCESS',\n                        result: mockStoreSelectorStateManager,\n                    } as AsyncResult<IStoreSelectorStateManager>\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        // @ts-ignore partial mock\n        const mockProduct: SimpleProduct = {\n            Dimensions: [\n                {\n                    DimensionTypeValue: 1,\n                    DimensionValue: {\n                        RecordId: 22565421223,\n                        Value: 'Blue'\n                    }\n                },\n                {\n                    DimensionTypeValue: 3,\n                    DimensionValue: {\n                        RecordId: 22565421223,\n                        Value: '32'\n                    }\n                }\n            ]\n        };\n\n        const updatedState = {\n            ...mockState,\n            selectedProduct: new Promise<SimpleProduct | null>((resolve) => {\n                console.log('Calling this');\n                resolve(mockProduct);\n            })\n        };\n\n        const findInStore = getBuyboxFindInStore(moduleProps, updatedState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).not.toBeTruthy();\n\n        findInStoreButton.simulate('click');\n\n        // tslint:disable-next-line:no-string-based-set-timeout\n        await new Promise(resolve => { setTimeout(resolve, 0); });\n\n        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();\n    });\n\n    it('updates window location when url specified and result success', async () => {\n        let context: IStoreSelectionStateContext | undefined;\n        window.location.assign = jest.fn();\n\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockImplementation(input => {\n                context = input;\n                return Promise.resolve({});\n            })\n        };\n\n        // @ts-ignore impartial mock\n        const mockCartState: ICartState = {\n            addProductToCart: jest.fn().mockResolvedValue({status: 'SUCCESS'})\n        };\n\n        // @ts-ignore\n        Core.getUrlSync = jest.fn().mockReturnValue('foo');\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    storeSelectorStateManager: {\n                        status: 'SUCCESS',\n                        result: mockStoreSelectorStateManager,\n                    } as AsyncResult<IStoreSelectorStateManager>,\n                    cart: {\n                        status: 'SUCCESS',\n                        result: mockCartState\n                    }\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).not.toBeTruthy();\n\n        findInStoreButton.simulate('click');\n\n        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();\n        expect(context).toBeDefined();\n\n        await context!.onLocationSelected({});\n\n        expect(mockCartState.addProductToCart).toBeCalled();\n\n        expect(window.location.assign).toHaveBeenCalledWith('foo');\n    });\n\n    it('does not updates window location when url not specified and result success', async () => {\n        let context: IStoreSelectionStateContext | undefined;\n        window.location.assign = jest.fn();\n\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockImplementation(input => {\n                context = input;\n                return Promise.resolve({});\n            })\n        };\n\n        // @ts-ignore impartial mock\n        const mockCartState: ICartState = {\n            addProductToCart: jest.fn().mockResolvedValue({status: 'SUCCESS'})\n        };\n\n        // @ts-ignore\n        Core.getUrlSync = jest.fn().mockReturnValue(undefined);\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    storeSelectorStateManager: {\n                        status: 'SUCCESS',\n                        result: mockStoreSelectorStateManager,\n                    } as AsyncResult<IStoreSelectorStateManager>,\n                    cart: {\n                        status: 'SUCCESS',\n                        result: mockCartState\n                    }\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).not.toBeTruthy();\n\n        findInStoreButton.simulate('click');\n\n        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();\n        expect(context).toBeDefined();\n\n        await context!.onLocationSelected({});\n\n        expect(mockCartState.addProductToCart).toBeCalled();\n\n        expect(window.location.assign).not.toHaveBeenCalled();\n    });\n\n    it('does not updates window location when url specified and result fails', async () => {\n        let context: IStoreSelectionStateContext | undefined;\n        window.location.assign = jest.fn();\n\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockImplementation(input => {\n                context = input;\n                return Promise.resolve({});\n            })\n        };\n\n        // @ts-ignore impartial mock\n        const mockCartState: ICartState = {\n            addProductToCart: jest.fn().mockResolvedValue({status: 'FAILED'})\n        };\n\n        // @ts-ignore\n        Core.getUrlSync = jest.fn().mockReturnValue('foo');\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    storeSelectorStateManager: {\n                        status: 'SUCCESS',\n                        result: mockStoreSelectorStateManager,\n                    } as AsyncResult<IStoreSelectorStateManager>,\n                    cart: {\n                        status: 'SUCCESS',\n                        result: mockCartState\n                    }\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).not.toBeTruthy();\n\n        findInStoreButton.simulate('click');\n\n        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();\n        expect(context).toBeDefined();\n\n        await context!.onLocationSelected({});\n\n        expect(mockCartState.addProductToCart).toBeCalled();\n\n        expect(window.location.assign).not.toHaveBeenCalled();\n    });\n\n    it('does not updates window location when url specified and result throws', async () => {\n        let context: IStoreSelectionStateContext | undefined;\n        window.location.assign = jest.fn();\n\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockImplementation(input => {\n                context = input;\n                return Promise.resolve({});\n            })\n        };\n\n        // @ts-ignore impartial mock\n        const mockCartState: ICartState = {\n            addProductToCart: jest.fn().mockRejectedValue('FAIL')\n        };\n\n        // @ts-ignore\n        Core.getUrlSync = jest.fn().mockReturnValue('foo');\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    storeSelectorStateManager: {\n                        status: 'SUCCESS',\n                        result: mockStoreSelectorStateManager,\n                    } as AsyncResult<IStoreSelectorStateManager>,\n                    cart: {\n                        status: 'SUCCESS',\n                        result: mockCartState\n                    }\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        expect(findInStoreButton.props().disabled).not.toBeTruthy();\n\n        findInStoreButton.simulate('click');\n\n        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();\n        expect(context).toBeDefined();\n\n        await context!.onLocationSelected({});\n\n        expect(mockCartState.addProductToCart).toBeCalled();\n\n        expect(window.location.assign).not.toHaveBeenCalled();\n    });\n\n    it('does not updates window location when url specified and no cart', async () => {\n        let context: IStoreSelectionStateContext | undefined;\n        window.location.assign = jest.fn();\n\n        // @ts-ignore impartial mock\n        const mockStoreSelectorStateManager: IStoreSelectorStateManager = {\n            openDialog: jest.fn().mockImplementation(input => {\n                context = input;\n                return Promise.resolve({});\n            })\n        };\n\n        // @ts-ignore\n        Core.getUrlSync = jest.fn().mockReturnValue('foo');\n\n        // @ts-ignore partial mock\n        moduleProps = {\n            ...Core.buildMockModuleProps(\n                {\n                    ...mockData,\n                    storeSelectorStateManager: {\n                        status: 'SUCCESS',\n                        result: mockStoreSelectorStateManager,\n                    } as AsyncResult<IStoreSelectorStateManager>,\n                    cart: {\n                        status: 'FAILED',\n                        result: undefined\n                    }\n                },\n                {},\n                {},\n                mockContext\n            ),\n            slots: {\n                mediaGallery: [],\n                storeSelector: [(<div />)]\n            },\n            resources: mockResources\n        } as IBuyboxProps<IBuyboxData>;\n\n        const findInStore = getBuyboxFindInStore(moduleProps, mockState, mockCallbacks);\n\n        expect(findInStore).toBeDefined();\n        expect(findInStore!.button).toBeTruthy();\n\n        const findInStoreButton = shallow(findInStore!.button! as React.ReactElement);\n\n        findInStoreButton.simulate('click');\n\n        expect(mockStoreSelectorStateManager.openDialog).toBeCalled();\n        expect(context).toBeDefined();\n\n        await context!.onLocationSelected({});\n\n        expect(window.location.assign).not.toHaveBeenCalled();\n    });\n});\n"]}