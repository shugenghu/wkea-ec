{"version":3,"file":"error-utilities.js","sourceRoot":"./src/","sources":["modules/buybox/utilities/error-utilities.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAddToCartFailureResult } from '@msdyn365-commerce/components';\nimport { IAny, ICoreContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ICartState } from '@msdyn365-commerce/global-state';\nimport { OrgUnitLocation, ProductAvailableQuantity , ProductDimension, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { IBuyboxResources } from '../buybox.props.autogenerated';\n\nexport function getQuantityError(stockLeft: number | undefined, resources: IBuyboxResources): string | undefined {\n    if (!stockLeft || stockLeft <= 0) {\n        return resources.errorMessageOutOfStock;\n    } else if (stockLeft === 1) {\n        return resources.errorMessageOutOfRangeOneLeft;\n    } else {\n        return resources.errorMessageOutOfRangeFormat.replace('{numLeft}', stockLeft.toString());\n    }\n}\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function getGenericError(result: IAddToCartFailureResult, cart: ICartState | undefined, resources: IBuyboxResources, context: ICoreContext<IGeneric<IAny>>,\n                                product: SimpleProduct | undefined, productAvailability: ProductAvailableQuantity  | undefined, location: OrgUnitLocation | undefined): string | undefined {\n    if (result.failureReason === 'EMPTYINPUT') {\n        return resources.addedToCartFailureMessage;\n    } else if (result.failureReason === 'CARTACTIONFAILED') {\n        if (result.cartActionResult && result.cartActionResult.substatus === 'MAXQUANTITY') {\n\n            // get the quantity of the product in cart\n            let elementFoundAt:number = -1;\n            const productIdToFind = product?.RecordId;\n\n            for (let i = 0; i < cart!.cart.CartLines!.length; i++) {\n                if (cart!.cart.CartLines![i].ProductId === productIdToFind &&\n                    (cart!.cart.CartLines![i].DeliveryMode || '') === (location && context.actionContext.requestContext.channel?.PickupDeliveryModeCode || '') &&\n                    (cart!.cart.CartLines![i].FulfillmentStoreId || '') === (location?.OrgUnitNumber || '')) {\n                    elementFoundAt = i;\n\n                    break;\n                }\n            }\n\n            let curQuantity: number =  0;\n\n            if (elementFoundAt !== -1) {\n                const cartLineToUpdate = {...cart!.cart.CartLines![elementFoundAt]};\n                curQuantity = cartLineToUpdate.Quantity || 0;\n            }\n\n            // get the quantity limit for the product\n            const maxQuantityForCartLineItem = context.app.config.maxQuantityForCartLineItem;\n            const availableQty = productAvailability?.AvailableQuantity;\n\n            let quantityLimit: number;\n\n            if (maxQuantityForCartLineItem === undefined && availableQty === undefined) {\n                quantityLimit = 10;\n            } else if (availableQty === undefined) {\n                quantityLimit = maxQuantityForCartLineItem;\n            } else if (maxQuantityForCartLineItem === undefined) {\n                quantityLimit = availableQty;\n            } else {\n                quantityLimit = Math.min(maxQuantityForCartLineItem, availableQty);\n            }\n\n            return resources.maxQuantityLimitText.replace('{curQuantity}', curQuantity.toString()).replace('{maxQuantity}', quantityLimit.toString());\n        }\n\n        return resources.addedToCartFailureMessage;\n    }\n\n    return undefined;\n}\n\nexport function getConfigureErrors(result: ProductDimension[] | undefined, resources: IBuyboxResources):  { [configureId: string]: string | undefined } {\n    if (!result) {\n        return {};\n    }\n\n    const dimensions: { [configureId: string]: string | undefined } = {};\n\n    result.forEach(dimension => {\n        dimensions[dimension.DimensionTypeValue] = getDimensionErrorString(dimension.DimensionTypeValue, resources);\n    });\n\n    return dimensions;\n}\n\nexport function getDimensionErrorString(dimensionTypeValue: number, resources: IBuyboxResources): string {\n    switch (dimensionTypeValue) {\n        case 1: // ProductDimensionType.Color\n            return resources.productDimensionTypeColorErrorMessage;\n        case 2: // ProductDimensionType.Configuration\n            return resources.productDimensionTypeConfigurationErrorMessage;\n        case 3: // ProductDimensionType.Size\n            return resources.productDimensionTypeSizeErrorMessage;\n        case 4: // ProductDimensionType.Style\n            return resources.productDimensionTypeStyleErrorMessage;\n        default:\n            return '';\n    }\n}"]}