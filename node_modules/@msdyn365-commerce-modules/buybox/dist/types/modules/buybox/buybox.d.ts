import { IProductInventoryInformation } from '@msdyn365-commerce-modules/retail-actions';
import { IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { ProductDeliveryOptions, ProductPrice, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { IBuyboxData, IBuyboxProps } from '../..';
import { IBuyboxResources } from './buybox.props.autogenerated';
import { IBuyboxAddToCartViewProps, IBuyboxAddToOrderTemplateViewProps, IBuyboxAddToWishlistViewProps, IBuyboxFindInStoreViewProps, IBuyboxProductConfigureViewProps, IBuyboxProductQuantityViewProps, IBuyboxShopSimilarLookViewProps } from './components';
export declare type IBuyboxErrorHost = 'ADDTOCART' | 'FINDINSTORE' | 'WISHLIST' | 'SHOPSIMILARITEM' | 'ORDER_TEMPLATE';
export interface IErrorState {
    errorHost?: IBuyboxErrorHost;
    configureErrors: {
        [configureId: string]: string | undefined;
    };
    quantityError?: string;
    otherError?: string;
}
export interface IBuyboxCallbacks {
    updateQuantity(newQuantity: number): void;
    updateErrorState(newErrorState: IErrorState): void;
    updateSelectedProduct(selectedProduct: Promise<SimpleProduct | null>, newInventory: IProductInventoryInformation | undefined, newPrice: ProductPrice | undefined, newDeliveryOptions: ProductDeliveryOptions | undefined): void;
    getDropdownName(dimensionType: number, resources: IBuyboxResources): string;
    dimensionSelectedAsync(selectedDimensionId: number, selectedDimensionValueId: string): Promise<void>;
    changeModalOpen(isModalOpen: boolean): void;
    changeUpdatingDimension(isUpdatingDimension: boolean): void;
}
export interface IBuyboxState {
    quantity: number;
    errorState: IErrorState;
    selectedDimensions: {
        [id: number]: string | undefined;
    };
    selectedProduct?: Promise<SimpleProduct | null>;
    productAvailableQuantity?: IProductInventoryInformation;
    productPrice?: ProductPrice;
    productDeliveryOptions?: ProductDeliveryOptions;
    modalOpen?: boolean;
    isUpdatingDimension?: boolean;
    isServiceItem?: boolean;
}
export interface IBuyboxViewProps extends IBuyboxProps<IBuyboxData> {
    state: IBuyboxState;
    ModuleProps: IModuleProps;
    ProductInfoContainerProps: INodeProps;
    MediaGalleryContainerProps: INodeProps;
    callbacks: IBuyboxCallbacks;
    mediaGallery?: React.ReactNode;
    title?: React.ReactNode;
    description?: React.ReactNode;
    rating?: React.ReactNode;
    price?: React.ReactNode;
    addToOrderTemplate?: IBuyboxAddToOrderTemplateViewProps;
    addToWishlist?: IBuyboxAddToWishlistViewProps;
    addToCart: IBuyboxAddToCartViewProps;
    findInStore?: IBuyboxFindInStoreViewProps;
    quantity?: IBuyboxProductQuantityViewProps;
    configure?: IBuyboxProductConfigureViewProps;
    inventoryLabel?: React.ReactNode;
    shopSimilarLook?: IBuyboxShopSimilarLookViewProps;
    telemetryContent?: ITelemetryContent;
}
declare class Buybox extends React.PureComponent<IBuyboxProps<IBuyboxData>, IBuyboxState> {
    private buyboxCallbacks;
    private telemetryContent;
    constructor(props: IBuyboxProps<IBuyboxData>, state: IBuyboxState);
    render(): JSX.Element | null;
    private _dimensionSelected;
    private _updateDimensionValue;
    private _getDropdownName;
}
export default Buybox;
