/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

import { PriceComponent } from '@msdyn365-commerce/components';
import { getRichTextHtml, IActionContext, IImageSettings, Image, ITelemetry } from '@msdyn365-commerce/core';
import { SearchSuggestion } from '@msdyn365-commerce/retail-proxy';

import { getProductPageUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { getPayloadObject, getTelemetryAttributes, INodeProps, IPayLoad, ITelemetryContent, NodeTag } from '@msdyn365-commerce-modules/utilities';
import { ISearchData } from '../search.data';
import { ISearchProps } from '../search.props.autogenerated';

export interface ISearchProductSuggestProps {
    searchProductSuggestClass: string;
    searchPageURL: string;
    searchQsp: string | undefined;
    hitPrefix: string;
    hitSuffix: string;
    autoSuggestProps: ISearchProps<ISearchData>;
    searchText: string;
    suggestions: SearchSuggestion[] | undefined;
    telemetry: ITelemetry;
    moduleType: string;
    moduleId: string;
    telemetryContent?: ITelemetryContent;
}

export interface ISearchProductViewProps {
    title: React.ReactNode;
    items: ISearchProductItemViewProps[];
}

export interface ISearchProductItemViewProps {
    text: React.ReactNode;
    thumbnail: React.ReactNode;
    price: React.ReactNode;
    LiProduct: INodeProps;
    AProduct: INodeProps;
    id: string | undefined;
}

let payLoad: IPayLoad;
let telemetryContent: ITelemetryContent | undefined;

/**
 *
 * ProductSuggestionsComponent
 */
export const ProductSuggestionsComponent = (props: ISearchProductSuggestProps): ISearchProductViewProps | undefined => {
    const {
        suggestions,
        hitSuffix,
        hitPrefix,
        autoSuggestProps: {
            context: { actionContext },
            resources: { productSuggestionHeading }
        },
        moduleType,
        moduleId
    } = props;
    const reactNodes: ISearchProductItemViewProps[] = [];
    telemetryContent = props.telemetryContent;
    payLoad = getPayloadObject('click', props.telemetryContent!, '');

    if (!suggestions) {
        return undefined;
    }

    suggestions.map(item => {
        reactNodes.push(_assembleNode(item, hitPrefix, hitSuffix, actionContext, props, moduleType, moduleId));
    });

    const titleNode = _renderTitle(productSuggestionHeading);

    return { title: titleNode, items: reactNodes };
};

const _renderTitle = (productSuggestionHeading: string) => {
    const productAutoSuggestionHeading = productSuggestionHeading ? productSuggestionHeading : 'Go to products';

    return <li className='msc-autoSuggest__productResults-title'>{productAutoSuggestionHeading}</li>;
};

const _assembleNode = (
    item: SearchSuggestion,
    hitPrefix: string,
    hitSuffix: string,
    actionContext: IActionContext,
    props: ISearchProductSuggestProps,
    moduleType: string,
    moduleId: string
): ISearchProductItemViewProps => {
    const altText =
        item.Value &&
        (item.Value).replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');

    return {
        text: _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix),
        thumbnail: _renderThumbnail(item, altText ? altText : '', props),
        price:
            item.Id &&
            item.Value3 &&
            item.Value3.Value &&
            item.Value3.Value.DecimalValue &&
            _renderPrice(item.Value3.Value.DecimalValue, item.Value3.Value.DecimalValue, moduleId, moduleType, props),
        LiProduct: _getLiWrapper(),
        AProduct: _getAWrapper(item, hitPrefix, hitSuffix, actionContext),
        id: item.Id
    };
};

const _getLiWrapper = () => {
    return {
        className: 'msc-autoSuggest__productResults-item',
        tag: 'li' as NodeTag
    };
};

const _getAWrapper = (item: SearchSuggestion, hitPrefix: string, hitSuffix: string, actionContext: IActionContext) => {
    const ariaLabel = item.Value &&
        (item.Value).replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');

    payLoad.contentAction.recid = item.Id;
    const attribute = getTelemetryAttributes(telemetryContent!, payLoad);

    return {
        className: 'msc-autoSuggest__productResults-item',
        tag: 'a' as NodeTag,
        'aria-label': ariaLabel,
        href: _generateLink(item, hitPrefix, hitSuffix, actionContext),
        ...attribute
    };
};

const _generateLink = (suggestion: SearchSuggestion, hitPrefix: string, hitSuffix: string, actionContext: IActionContext) => {
    const formattedLink = (suggestion.Value as string).replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    return suggestion.Value && suggestion.Id ?
        getProductPageUrlSync(formattedLink,suggestion.Id as unknown as number, actionContext, undefined) : '';
};

const _getHighlightedText = (suggestion: string, hitPrefix: string, hitSuffix: string): JSX.Element => {
    const formattedText = suggestion
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');

    // tslint:disable:react-no-dangerous-html
    return <span className='msc-price msc-autoSuggest__productResults-item-text'  dangerouslySetInnerHTML={getRichTextHtml(formattedText)} />;
};

const _renderPrice = (adjustedPrice: number, basePrice: number, moduleId: string, moduleType: string, props: ISearchProductSuggestProps): JSX.Element | null => {
    const {
        autoSuggestProps: { context }
    } = props;

    return (
        <PriceComponent
            id={moduleId}
            typeName={moduleType}
            context={context}
            data={{
                price: {
                    CustomerContextualPrice: adjustedPrice,
                    BasePrice: basePrice
                }
            }}
            className='msc-autoSuggest__productResults-item-price'
        />
    );
};

const _renderThumbnail = (suggestion: SearchSuggestion, altText: string, props: ISearchProductSuggestProps): JSX.Element | null => {
    const {
        autoSuggestProps: {
            context: {
                request: { gridSettings }
            },
            config: { imageSettings }
        }
    } = props;

    if (!suggestion || !suggestion.ImageUrl) {
        props.telemetry.error('Search suggestion content is empty, module wont render.');
        return null;
    }

    const defaultImageSettings: IImageSettings = {
        viewports: {
            xs: { q: `w=40&h=40&m=6`, w: 0, h: 0 },
            lg: { q: `w=40&h=40&m=6`, w: 0, h: 0 },
            xl: { q: `w=40&h=40&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };

    return (
        <Image
            altText={altText}
            className='msc-autoSuggest__productResults-item-img'
            src={suggestion.ImageUrl}
            gridSettings={gridSettings!}
            imageSettings={imageSettings ? imageSettings : defaultImageSettings}
            loadFailureBehavior='hide'
        />
    );
};
