/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';
import { FormComponent, ISearchFormProps } from '../../components';

describe('Search unit tests - Form Component', () => {
    it('renders correctly when hideSearchLabel is false', () => {
        const mockProps: ISearchFormProps = {
            ariaLabelCancel: 'Cancel',
            ariaLabelSearch: 'Search',
            ariaLabelSubmit: 'Submit search',
            hideSearchLabel: false,
            isSearchFormExpanded: false,
            disableSubmitSearch: false,
            searchTextInput: React.createRef(),
            maxChars: 50,
            searchQsp: 'q',
            searchPlaceholder: 'searchPlaceholder',
            query: 'query',
            handleCancelSearchChange: jest.fn(),
            handleInputChange: jest.fn(),
        };

        const component = FormComponent({ ...mockProps });
        const res = (
            <div className='ms-search__form bx-hide'>
                <div className='ms-search__searchform'>
                    {component.input}
                    {component.submitBtn}
                </div>
                {component.cancelBtn}
            </div>
        );
        expect(res).toMatchSnapshot();
    });

    it('renders correctly when hideSearchLabel is true', () => {
        const mockProps: ISearchFormProps = {
            ariaLabelCancel: 'Cancel',
            ariaLabelSearch: 'Search',
            ariaLabelSubmit: 'Submit search',
            hideSearchLabel: true,
            isSearchFormExpanded: false,
            disableSubmitSearch: false,
            searchTextInput: React.createRef(),
            maxChars: 50,
            searchQsp: 'q',
            searchPlaceholder: 'searchPlaceholder',
            query: 'query',
            handleCancelSearchChange: jest.fn(),
            handleInputChange: jest.fn()
        };

        const component = FormComponent({ ...mockProps });
        const res = (
            <div className='ms-search__form bx-hide'>
                <div className='ms-search__searchform'>
                    {component.input}
                    {component.submitBtn}
                </div>
                {component.cancelBtn}
            </div>
        );
        expect(res).toMatchSnapshot();
    });

    it('renders correctly when hide search label and isSearchFormExpanded is true', () => {
        const mockProps: ISearchFormProps = {
            ariaLabelCancel: 'Cancel',
            ariaLabelSearch: 'Search',
            ariaLabelSubmit: 'Submit search',
            hideSearchLabel: true,
            isSearchFormExpanded: true,
            disableSubmitSearch: false,
            searchTextInput: React.createRef(),
            maxChars: 50,
            searchQsp: 'q',
            searchPlaceholder: 'searchPlaceholder',
            query: 'query',
            handleCancelSearchChange: jest.fn(),
            handleInputChange: jest.fn()
        };

        const component = FormComponent({ ...mockProps });
        const res = (
            <div className='ms-search__form bx-hide'>
                <div className='ms-search__searchform'>
                    {component.input}
                    {component.submitBtn}
                </div>
                {component.cancelBtn}
            </div>
        );
        expect(res).toMatchSnapshot();
    });

    it('renders correctly when hide search label and disableSubmitSearch is true', () => {
        const mockProps: ISearchFormProps = {
            ariaLabelCancel: 'Cancel',
            ariaLabelSearch: 'Search',
            ariaLabelSubmit: 'Submit search',
            hideSearchLabel: true,
            isSearchFormExpanded: false,
            disableSubmitSearch: true,
            searchTextInput: React.createRef(),
            maxChars: 50,
            searchQsp: 'q',
            searchPlaceholder: 'searchPlaceholder',
            query: 'query',
            handleCancelSearchChange: jest.fn(),
            handleInputChange: jest.fn()
        };

        const component = FormComponent({ ...mockProps });
        const res = (
            <div className='ms-search__form bx-hide'>
                <div className='ms-search__searchform'>
                    {component.input}
                    {component.submitBtn}
                </div>
                {component.cancelBtn}
            </div>
        );
        expect(res).toMatchSnapshot();
    });

    it('renders correctly when isSearchFormExpanded is true', () => {
        const mockProps: ISearchFormProps = {
            ariaLabelCancel: 'Cancel',
            ariaLabelSearch: 'Search',
            ariaLabelSubmit: 'Submit search',
            hideSearchLabel: false,
            isSearchFormExpanded: true,
            disableSubmitSearch: false,
            searchTextInput: React.createRef(),
            maxChars: 50,
            searchQsp: 'q',
            searchPlaceholder: 'searchPlaceholder',
            query: 'query',
            handleCancelSearchChange: jest.fn(),
            handleInputChange: jest.fn()
        };

        const component = FormComponent({ ...mockProps });
        const res = (
            <div className='ms-search__form bx-hide'>
                <div className='ms-search__searchform'>
                    {component.input}
                    {component.submitBtn}
                </div>
                {component.cancelBtn}
            </div>
        );
        expect(res).toMatchSnapshot();
    });

    it('renders correctly when disableSubmitSearch is true', () => {
        const mockProps: ISearchFormProps = {
            ariaLabelCancel: 'Cancel',
            ariaLabelSearch: 'Search',
            ariaLabelSubmit: 'Submit search',
            hideSearchLabel: false,
            isSearchFormExpanded: false,
            disableSubmitSearch: true,
            searchTextInput: React.createRef(),
            maxChars: 50,
            searchQsp: 'q',
            searchPlaceholder: 'searchPlaceholder',
            query: 'query',
            handleCancelSearchChange: jest.fn(),
            handleInputChange: jest.fn()
        };

        const component = FormComponent({ ...mockProps });
        const res = (
            <div className='ms-search__form bx-hide'>
                <div className='ms-search__searchform'>
                    {component.input}
                    {component.submitBtn}
                </div>
                {component.cancelBtn}
            </div>
        );
        expect(res).toMatchSnapshot();
    });
});
