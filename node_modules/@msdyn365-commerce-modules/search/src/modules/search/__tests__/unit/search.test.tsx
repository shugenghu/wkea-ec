/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { mount, shallow } from 'enzyme';
import * as React from 'react';

import { buildHydratedMockActionContext, buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';

import { SuggestionType } from '../../actions/get-auto-suggest-suggestions';
import Search, { ISearchViewProps } from '../../search';
import { ISearchData } from '../../search.data';
import { ISearchConfig, ISearchProps, ISearchResources } from '../../search.props.autogenerated';
// import renderView from '../../search.view';

const mockData: ISearchData = {
    searchState: {}
};

// @ts-ignore
const mockContext: ICoreContext = {
    actionContext: buildHydratedMockActionContext()
};

// @ts-ignore
const mockResources: ISearchResources = {
    searchtext: 'searchtext'
};

const mockConfig: ISearchConfig = {
    hideSearchLabel: false,
    className: '',
    disableSubmitSearch: false,
    searchplaceholderText:'sample place holder text'
};

describe('Search unit tests - Container', () => {
    it('renders correctly without and with suggest', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => { return <div props={props} />;})
        };

        const result = mount(<Search {...moduleProps} />);

        expect(moduleProps.renderView).toBeCalled();
        let viewProps: ISearchViewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.label).toBeTruthy();
        expect(viewProps.form).toBeTruthy();
        expect(viewProps.autosuggestCategory).not.toBeTruthy();
        expect(viewProps.autosuggestKeyword).not.toBeTruthy();
        expect(viewProps.autosuggestProduct).not.toBeTruthy();

        result.setState({
            searchText: 'mockSearchText',
            suggestions: {
                AllSearchResults: [
                    { Value: 'keyword result 1', Id: '1', SuggestionType: SuggestionType.Keyword },
                    { Value: 'keyword result 2', Id: '2', SuggestionType: SuggestionType.Keyword },
                    {
                        Value: 'product result 3',
                        Id: '3',
                        Value3: { Value: { DecimalValue: 1.1 } },
                        ImageUrl: '/imageurl/',
                        SuggestionType: SuggestionType.Product
                    },
                    {
                        Value: 'product result 4',
                        Id: '4',
                        Value3: { Value: { DecimalValue: 1.1 } },
                        ImageUrl: '/imageurl/',
                        SuggestionType: SuggestionType.Product
                    },
                    { Value: 'category result 5', Id: '5', SuggestionType: SuggestionType.Category },
                    { Value: 'category result 6', Id: '6', SuggestionType: SuggestionType.Category }
                ]
            },
            searchRefiners: [{ KeyName: 'Category', Values: [{ RefinerRecordId: 1 }] }]
        });

        viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.label).toBeTruthy();
        expect(viewProps.form).toBeTruthy();
        expect(viewProps.autosuggestCategory).toBeTruthy();
        expect(viewProps.autosuggestKeyword).toBeTruthy();
        expect(viewProps.autosuggestProduct).toBeTruthy();
    });

    it('_handleCancelSearchChange correctly', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            renderView: jest.fn()
        };

        const component = shallow(<Search {...moduleProps} />);
        const instance = component.instance();
        // @ts-ignore ignore private method
        instance._handleCancelSearchChange();
        expect(component.state('isSearchFormExpanded')).toBe(true);
        expect(component.type()).toBe(null);

        // @ts-ignore ignore private method
        instance._handleCancelSearchChange();
        expect(component.state('isSearchFormExpanded')).toBe(false);
    });

    it('_getSuggestionType correctly', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            renderView: jest.fn()
        };

        const component = shallow(<Search {...moduleProps} />);
        const instance = component.instance();
        // @ts-ignore ignore private method
        const suggestionType = instance._getSuggestionType();
        expect(suggestionType).toEqual('Keyword, Product, ScopedCategory');
        // @ts-ignore ignore private method
        const suggestionType = instance._getSuggestionType([{SuggestionType: 'product'}, {SuggestionType: 'keyword'}]);
        expect(suggestionType).toEqual('Product,Keyword');
    });
});
