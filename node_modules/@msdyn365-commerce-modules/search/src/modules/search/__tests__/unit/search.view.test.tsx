/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { render } from 'enzyme';
import * as React from 'react';

import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { ISearchData } from '../../search.data';
import { ISearchProps } from '../../search.props.autogenerated';
import SearchView from '../../search.view';

const moduleProps: ISearchProps<ISearchData> = buildMockModuleProps({}, {}) as ISearchProps<ISearchData>;

describe('Search unit tests - View', () => {
    it('renders correctly', () => {
        const mockProps = {
            ...moduleProps,
            Search: { moduleProps, className: 'module-class-Search' },
            AutoSuggestAriaLabel: { className: 'node-class-AutoSuggestAriaLable'},
            AutoSuggestAriaLabelText: '',
            searchText: '',
            AutoSuggest: { className: 'node-class-AutoSuggest' },
            KeywordSuggest: { className: 'node-class-KeywordSuggest' },
            ProductSuggest: { className: 'node-class-ProductSuggest' },
            CategorySuggest: { className: 'node-class-CategorySuggest' },
            SearchForm: { className: 'node-class-SearchForm' },
            FormWrapper: { className: 'node-class-FormWrapper' },
            className: 'ms-search',
            autoSuggestClassName: 'ms-search__autoSuggest',
            search: React.createRef(),
            disableSubmitSearch: false,
            label: '{LabelComponent}',
            form: '{FormComponent}',
            autosuggestKeyword: { screenReader: '{screenReader}', text: ['{keywordText}'] },
            autosuggestProduct: {
                screenReader: '{screenReader}',
                title: '{productTitle}',
                items: [
                    {
                        text: '{productText}',
                        price: '{productPrice}',
                        thumbnail: '{productThumbnail}',
                        LiProduct: { className: 'node-class-LiProduct' },
                        AProduct: { className: 'node-class-AProduct' },
                        id: 'id'
                    }
                ]
            },
            autosuggestCategory: { screenReader: '{screenReader}', title: '{categoryTitle}', text: ['{categoryText}'] },
            UlKeyword: { className: 'node-class-UlKeyword' },
            UlProduct: { className: 'node-class-UlProduct' },
            UlCategory: { className: 'node-class-UlCategory' },
            callbacks: {handleCancelSearchChange: jest.fn()},
            isSearchFormExpanded: false
        };
        const component = render(<SearchView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no search results', () => {
        const mockProps = {
            ...moduleProps,
            Search: { moduleProps, className: 'module-class-Search' },
            AutoSuggestAriaLabel: { className: 'node-class-AutoSuggestAriaLable'},
            AutoSuggestAriaLabelText: '',
            searchText: '',
            AutoSuggest: { className: 'node-class-AutoSuggest' },
            KeywordSuggest: { className: 'node-class-KeywordSuggest' },
            ProductSuggest: { className: 'node-class-ProductSuggest' },
            CategorySuggest: { className: 'node-class-CategorySuggest' },
            SearchForm: { className: 'node-class-SearchForm' },
            FormWrapper: { className: 'node-class-FormWrapper' },
            className: 'ms-search',
            autoSuggestClassName: 'ms-search__autoSuggest',
            search: React.createRef(),
            disableSubmitSearch: false,
            label: '{LabelComponent}',
            form: '{FormComponent}',
            autosuggestKeyword: undefined,
            autosuggestProduct: undefined,
            autosuggestCategory: undefined,
            UlKeyword: { className: 'node-class-UlKeyword' },
            UlProduct: { className: 'node-class-UlProduct' },
            UlCategory: { className: 'node-class-UlCategory' },
            callbacks: {handleCancelSearchChange: jest.fn()},
            isSearchFormExpanded: false
        };
        const component = render(<SearchView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly when disable submit search', () => {
        const mockProps = {
            ...moduleProps,
            Search: { moduleProps, className: 'module-class-Search' },
            AutoSuggestAriaLabel: { className: 'node-class-AutoSuggestAriaLable'},
            AutoSuggestAriaLabelText: '',
            searchText: '',
            AutoSuggest: { className: 'node-class-AutoSuggest' },
            KeywordSuggest: { className: 'node-class-KeywordSuggest' },
            ProductSuggest: { className: 'node-class-ProductSuggest' },
            CategorySuggest: { className: 'node-class-CategorySuggest' },
            SearchForm: { className: 'node-class-SearchForm' },
            FormWrapper: { className: 'node-class-FormWrapper' },
            className: 'ms-search',
            autoSuggestClassName: 'ms-search__autoSuggest',
            search: React.createRef(),
            disableSubmitSearch: true,
            label: '{LabelComponent}',
            form: '{FormComponent}',
            autosuggestKeyword: { screenReader: '{screenReader}', text: ['{keywordText}'] },
            autosuggestProduct: {
                screenReader: '{screenReader}',
                title: '{productTitle}',
                items: [
                    {
                        text: '{productText}',
                        price: '{productPrice}',
                        thumbnail: '{productThumbnail}',
                        LiProduct: { className: 'node-class-LiProduct' },
                        AProduct: { className: 'node-class-AProduct' },
                        id: 'id'
                    }
                ]
            },
            autosuggestCategory: { screenReader: '{screenReader}', title: '{categoryTitle}', text: ['{categoryText}'] },
            UlKeyword: { className: 'node-class-UlKeyword' },
            UlProduct: { className: 'node-class-UlProduct' },
            UlCategory: { className: 'node-class-UlCategory' },
            callbacks: {handleCancelSearchChange: jest.fn()},
            isSearchFormExpanded: false
        };
        const component = render(<SearchView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});
