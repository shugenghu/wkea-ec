/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { Node } from '@msdyn365-commerce-modules/utilities';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import React from 'react';
import { SuggestionType } from '../../actions/get-auto-suggest-suggestions';
import { ISearchProductSuggestProps, ProductSuggestionsComponent } from '../../components';
import { ISearchData } from '../../search.data';
import { ISearchConfig } from '../../search.props.autogenerated';

const mockData: ISearchData = {
    searchState: {}
};

const mockConfig: ISearchConfig = {
    topResultsCount: 5
};

const mockResources = {
    suggestFoundMessage: '',
    noSuggestionMessage: '',
    productSuggestionHeading: '',
    categorySuggestionHeading: ''
};

describe('Search unit tests - ProductSuggestions Component', () => {
    it('renders correctly with autosuggest', () => {
        const moduleProps: ISearchProductSuggestProps = {
            searchPageURL: '',
            searchQsp: 'q',
            hitPrefix: '{',
            hitSuffix: '}',
            // @ts-ignore
            autoSuggestProps: { ...buildMockModuleProps(mockData, {}), resources: mockResources, config: mockConfig },
            searchText: 'res',
            suggestions: [
                {
                    Value: 'product result 1',
                    Id: '1',
                    Value3: { Value: { DecimalValue: 1.1 } },
                    ImageUrl: '/imageurl1/',
                    SuggestionType: SuggestionType.Product
                },
                {
                    Value: 'product result 2',
                    Id: '2',
                    Value3: { Value: { DecimalValue: 1.1 } },
                    ImageUrl: '/imageurl2/',
                    SuggestionType: SuggestionType.Product
                }
            ],
            searchProductSuggestClass: 'search__auto-suggest'
        };

        const component = ProductSuggestionsComponent({ ...moduleProps });
        const res = component && (
            <div>
                {
                    <ul>
                        {component.title}
                        {component.items.map((item, index) => {
                            return (
                                <Node {...item.LiProduct} key={item.id || index}>
                                    <Node {...item.AProduct}>
                                        {item.text}
                                        {item.price}
                                        {item.thumbnail}
                                    </Node>
                                </Node>
                            );
                        })}
                    </ul>
                }
            </div>
        );
        if (res) {
            const wrapper = render(res);
            expect(wrapper).toMatchSnapshot();
        }
    });

    it('renders correctly with no autosuggest', () => {
        const moduleProps: ISearchProductSuggestProps = {
            searchPageURL: '',
            searchQsp: 'q',
            hitPrefix: '{',
            hitSuffix: '}',
            // @ts-ignore
            autoSuggestProps: { ...buildMockModuleProps(mockData, {}), resources: mockResources, config: mockConfig },
            searchText: 'res',
            suggestions: undefined,
            searchProductSuggestClass: 'search__auto-suggest'
        };

        const component = ProductSuggestionsComponent({ ...moduleProps });
        const res = component && (
            <div>
                {
                    <ul>
                        {component.title}
                        {component.items.map((item, index) => {
                            return (
                                <Node {...item.LiProduct} key={item.id || index}>
                                    <Node {...item.AProduct}>
                                        {item.text}
                                        {item.price}
                                        {item.thumbnail}
                                    </Node>
                                </Node>
                            );
                        })}
                    </ul>
                }
            </div>
        );
        if (res) {
            const wrapper = render(res);
            expect(wrapper).toMatchSnapshot();
        }
    });
});
