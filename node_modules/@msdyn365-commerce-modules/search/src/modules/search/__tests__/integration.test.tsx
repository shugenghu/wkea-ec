/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { mount, render } from 'enzyme';
import * as React from 'react';

// tslint:disable-next-line:no-unused-variable
import { buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';

import { SuggestionType } from '../actions/get-auto-suggest-suggestions';
import Search from '../search';
import { ISearchData } from '../search.data';
import { ISearchConfig, ISearchProps, ISearchResources } from '../search.props.autogenerated';
import SearchView from '../search.view';

const mockData: ISearchData = {
    searchState: {}
};

const actionContext = {
    requestCache: {
        put: jest.fn()
    }
};
// @ts-ignore
const mockContext: ICoreContext = {
    // @ts-ignore
    actionContext: actionContext,
    app: {
        config: {
            searchQueryStringParameter: 'q'
        }
    }
};

// @ts-ignore
const mockResources: ISearchResources = {
    searchtext: 'searchtext',
    searchLabelArialLabel: 'Search collapsed',
    cancelBtnAriaLabel: 'Cancel',
    searchBtnAriaLabel: 'Search',
    submitBtnAriaLabel: 'Submit search'
};

const mockConfig: ISearchConfig = {
    hideSearchLabel: false,
    className: '',
    disableSubmitSearch: false,
    searchplaceholderText:''
};

const mockConfigDisableSubmit: ISearchConfig = {
    hideSearchLabel: false,
    className: '',
    disableSubmitSearch: true
};

describe('Search integration tests', () => {
    it('renders correctly with no suggest', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: SearchView
        };

        const component = render(<Search {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly click label', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: SearchView
        };

        const wrapper = mount(<Search {...moduleProps} />);
        const clickLabel = wrapper.find('.ms-search__icon').at(0);
        clickLabel.simulate('click');
        expect(wrapper.state('isSearchFormExpanded')).toBe(true);
    });

    it('renders correctly input change', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: SearchView
        };

        const wrapper = mount(<Search {...moduleProps} />);
        const input = wrapper.find('input').at(0);

        // @ts-ignore
        input.instance().value = 'mockinput';
        input.simulate('change');
        expect(moduleProps.data.searchState.searchText).toBe('mockinput');
    });

    it('renders correctly query too long', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: SearchView
        };

        const wrapper = mount(<Search {...moduleProps} />);
        const input = wrapper.find('input').at(0);
        // @ts-ignore
        input.instance().value = 'searchinputsearchinputsearchinputsearchinputsearchinputsearchinputsearchinputsearchinput';
        input.simulate('change');
        expect(wrapper.state('searchText')).toBe('');
    });

    it('renders correctly query empty', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: SearchView
        };

        const wrapper = mount(<Search {...moduleProps} />);
        const input = wrapper.find('input').at(0);
        // @ts-ignore
        input.instance().value = '';
        input.simulate('change');
        expect(wrapper.state('searchText')).toBe('');
    });

    it('renders correctly disable submit', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfigDisableSubmit, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: SearchView
        };

        const wrapper = mount(<Search {...moduleProps} />);
        const form = wrapper.find('form').at(0);
        const clickLabel = form.find('input').at(0);
        // @ts-ignore
        clickLabel.instance().value = 'searchinput';
        form.simulate('submit');
        expect(document.location.href).toBe('http://localhost/');
    });

    it('renders correctly keydown', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: SearchView
        };

        const wrapper = mount(<Search {...moduleProps} />);

        wrapper.setState({
            searchText: 'mockSearchText',
            suggestions: {
              AllSearchResults: [
                {Value: 'keyword result 1', Id: '1', SuggestionType: SuggestionType.Keyword},
                {Value: 'keyword result 2', Id: '2', SuggestionType: SuggestionType.Keyword},
                {Value: 'product result 3', Id: '3', Value3: {Value: {DecimalValue: 1.1}}, ImageUrl: '/imageurl/', SuggestionType: SuggestionType.Product},
                {Value: 'product result 4', Id: '4', Value3: {Value: {DecimalValue: 1.1}}, ImageUrl: '/imageurl/', SuggestionType: SuggestionType.Product},
                {Value: 'category result 5', Id: '5', SuggestionType: SuggestionType.Category},
                {Value: 'category result 6', Id: '6', SuggestionType: SuggestionType.Category}
              ]
            },
            searchRefiners: [{KeyName: 'Category', Values: [{RefinerRecordId: 1}]}]
          });

        const clickLabel = wrapper.find('input').at(0);
        // @ts-ignore
        clickLabel.instance().value = 'searchinput';

        const instance = wrapper.instance();
        // @ts-ignore
        const event = new KeyboardEvent('keyup', { keyCode: 27 });
        // @ts-ignore ignore private method
        instance._keyup(event);
        expect(wrapper.state('searchText')).toBe('');
    });

    it('renders correctly _focusOutTarget', () => {
        const moduleProps: ISearchProps<ISearchData> = {
            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),
            resources: mockResources,
            // @ts-ignore
            renderView: SearchView
        };

        const wrapper = mount(<Search {...moduleProps} />);
        const instance = wrapper.instance();

        // @ts-ignore
        instance._focusOutTarget({ target: document.createElement('div') });
        expect(wrapper.state('searchText')).toBe('');
    });

});
