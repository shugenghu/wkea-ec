import * as React from 'react';
import { PriceComponent } from '@msdyn365-commerce/components';
import { getRichTextHtml, Image } from '@msdyn365-commerce/core';
import { getProductPageUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { getPayloadObject, getTelemetryAttributes } from '@msdyn365-commerce-modules/utilities';
let payLoad;
let telemetryContent;
export const ProductSuggestionsComponent = (props) => {
    const { suggestions, hitSuffix, hitPrefix, autoSuggestProps: { context: { actionContext }, resources: { productSuggestionHeading } }, moduleType, moduleId } = props;
    const reactNodes = [];
    telemetryContent = props.telemetryContent;
    payLoad = getPayloadObject('click', props.telemetryContent, '');
    if (!suggestions) {
        return undefined;
    }
    suggestions.map(item => {
        reactNodes.push(_assembleNode(item, hitPrefix, hitSuffix, actionContext, props, moduleType, moduleId));
    });
    const titleNode = _renderTitle(productSuggestionHeading);
    return { title: titleNode, items: reactNodes };
};
const _renderTitle = (productSuggestionHeading) => {
    const productAutoSuggestionHeading = productSuggestionHeading ? productSuggestionHeading : 'Go to products';
    return React.createElement("li", { className: 'msc-autoSuggest__productResults-title' }, productAutoSuggestionHeading);
};
const _assembleNode = (item, hitPrefix, hitSuffix, actionContext, props, moduleType, moduleId) => {
    const altText = item.Value &&
        (item.Value).replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    return {
        text: _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix),
        thumbnail: _renderThumbnail(item, altText ? altText : '', props),
        price: item.Id &&
            item.Value3 &&
            item.Value3.Value &&
            item.Value3.Value.DecimalValue &&
            _renderPrice(item.Value3.Value.DecimalValue, item.Value3.Value.DecimalValue, moduleId, moduleType, props),
        LiProduct: _getLiWrapper(),
        AProduct: _getAWrapper(item, hitPrefix, hitSuffix, actionContext),
        id: item.Id
    };
};
const _getLiWrapper = () => {
    return {
        className: 'msc-autoSuggest__productResults-item',
        tag: 'li'
    };
};
const _getAWrapper = (item, hitPrefix, hitSuffix, actionContext) => {
    const ariaLabel = item.Value &&
        (item.Value).replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    payLoad.contentAction.recid = item.Id;
    const attribute = getTelemetryAttributes(telemetryContent, payLoad);
    return {
        className: 'msc-autoSuggest__productResults-item',
        tag: 'a',
        'aria-label': ariaLabel,
        href: _generateLink(item, hitPrefix, hitSuffix, actionContext),
        ...attribute
    };
};
const _generateLink = (suggestion, hitPrefix, hitSuffix, actionContext) => {
    const formattedLink = suggestion.Value.replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    return suggestion.Value && suggestion.Id ?
        getProductPageUrlSync(formattedLink, suggestion.Id, actionContext, undefined) : '';
};
const _getHighlightedText = (suggestion, hitPrefix, hitSuffix) => {
    const formattedText = suggestion
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');
    return React.createElement("span", { className: 'msc-price msc-autoSuggest__productResults-item-text', dangerouslySetInnerHTML: getRichTextHtml(formattedText) });
};
const _renderPrice = (adjustedPrice, basePrice, moduleId, moduleType, props) => {
    const { autoSuggestProps: { context } } = props;
    return (React.createElement(PriceComponent, { id: moduleId, typeName: moduleType, context: context, data: {
            price: {
                CustomerContextualPrice: adjustedPrice,
                BasePrice: basePrice
            }
        }, className: 'msc-autoSuggest__productResults-item-price' }));
};
const _renderThumbnail = (suggestion, altText, props) => {
    const { autoSuggestProps: { context: { request: { gridSettings } }, config: { imageSettings } } } = props;
    if (!suggestion || !suggestion.ImageUrl) {
        props.telemetry.error('Search suggestion content is empty, module wont render.');
        return null;
    }
    const defaultImageSettings = {
        viewports: {
            xs: { q: `w=40&h=40&m=6`, w: 0, h: 0 },
            lg: { q: `w=40&h=40&m=6`, w: 0, h: 0 },
            xl: { q: `w=40&h=40&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };
    return (React.createElement(Image, { altText: altText, className: 'msc-autoSuggest__productResults-item-img', src: suggestion.ImageUrl, gridSettings: gridSettings, imageSettings: imageSettings ? imageSettings : defaultImageSettings, loadFailureBehavior: 'hide' }));
};
//# sourceMappingURL=search.productsuggest.js.map