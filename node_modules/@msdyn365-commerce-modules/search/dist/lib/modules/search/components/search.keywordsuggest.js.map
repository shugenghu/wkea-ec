{"version":3,"file":"search.keywordsuggest.js","sourceRoot":"./src/","sources":["modules/search/components/search.keywordsuggest.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { getPayloadObject, getTelemetryAttributes, IPayLoad, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { getRichTextHtml } from '@msdyn365-commerce/core';\nimport { SearchSuggestion } from '@msdyn365-commerce/retail-proxy';\n\nimport { ISearchData } from '../search.data';\nimport { ISearchProps } from '../search.props.autogenerated';\n\nexport interface ISearchKeywordSuggestProps {\n    searchKeywordSuggestClass: string;\n    searchPageURL: string;\n    searchQsp: string | undefined;\n    hitPrefix: string;\n    hitSuffix: string;\n    autoSuggestProps: ISearchProps<ISearchData>;\n    searchText: string;\n    suggestions: SearchSuggestion[] | undefined;\n    telemetryContent?: ITelemetryContent;\n}\n\nexport interface ISearchKeywordViewProps {\n    text: React.ReactNode[];\n}\n\nlet payLoad: IPayLoad;\n\n/**\n *\n * KeywordSuggestionsComponent\n */\nexport const KeywordSuggestionsComponent = (props: ISearchKeywordSuggestProps): ISearchKeywordViewProps | undefined => {\n    const {\n        suggestions,\n        hitPrefix,\n        hitSuffix\n    } = props;\n\n    if (!suggestions) {\n        return undefined;\n    }\n\n    payLoad = getPayloadObject('click', props.telemetryContent!, '');\n\n    const reactNodes: React.ReactNode[] = [];\n\n    suggestions.map(item => {\n        reactNodes.push(_assembleNode(item, hitPrefix, hitSuffix, props));\n    });\n\n    return { text: reactNodes };\n};\n\nconst _assembleNode = (item: SearchSuggestion, hitPrefix: string, hitSuffix: string, props: ISearchKeywordSuggestProps) => {\n    const ariaLabel = item.Value &&\n    (item.Value).replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');\n    payLoad.contentAction.etext = ariaLabel;\n    const attribute = getTelemetryAttributes(props.telemetryContent!, payLoad);\n    return (\n        <li className='msc-autoSuggest__keywordResults-item' key={item.Id}>\n            <a\n                aria-label={ariaLabel}\n                href={_generateLink(item, hitPrefix, hitSuffix, props)}\n                {...attribute}\n            >\n                {_generateLink(item, hitPrefix, hitSuffix, props) &&\n                    _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix)}\n            </a>\n        </li>\n    );\n};\n\nconst _generateLink = (suggestion: SearchSuggestion, hitPrefix: string, hitSuffix: string, props: ISearchKeywordSuggestProps): string => {\n    const { searchPageURL, searchQsp } = props;\n\n    const formattedLink = (suggestion.Value as string)\n        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '')\n        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');\n    const route = searchPageURL || '';\n    return formattedLink && formattedLink.length > 0\n        ? `${route}${route.indexOf('?') === -1 ? '?' : '&'}${searchQsp}=${formattedLink}`\n        : route;\n};\n\nconst _getHighlightedText = (suggestion: string, hitPrefix: string, hitSuffix: string): JSX.Element => {\n    const formattedText = suggestion\n        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')\n        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');\n\n    // tslint:disable:react-no-dangerous-html\n    return <span dangerouslySetInnerHTML={getRichTextHtml(formattedText)} />;\n};\n"]}