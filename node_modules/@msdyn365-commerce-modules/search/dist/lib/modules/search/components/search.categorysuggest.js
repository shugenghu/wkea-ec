import * as React from 'react';
import { getRichTextHtml } from '@msdyn365-commerce/core';
import { format, getPayloadObject, getTelemetryAttributes } from '@msdyn365-commerce-modules/utilities';
let payLoad;
export const CategorySuggestionsComponent = (props) => {
    const { suggestions, searchText, autoSuggestProps: { resources: { categorySuggestionHeading } } } = props;
    if (!suggestions) {
        return undefined;
    }
    const reactNodes = [];
    payLoad = getPayloadObject('click', props.telemetryContent, '');
    suggestions.map(item => {
        reactNodes.push(_assembleNode(item, props));
    });
    const titleNode = _renderTitle(categorySuggestionHeading, searchText);
    return { title: titleNode, text: reactNodes };
};
const _renderTitle = (categorySuggestionHeading, searchText) => {
    const categoryAutoSuggestionHeading = categorySuggestionHeading
        ? format(categorySuggestionHeading, searchText)
        : `Search "${searchText}" in categories`;
    return React.createElement("li", { className: 'msc-autoSuggest__categoryResults-title' }, categoryAutoSuggestionHeading);
};
const _assembleNode = (item, props) => {
    const { searchText, hitPrefix, hitSuffix } = props;
    const splitValue = item.Value && item.Value.split('|').pop();
    const ariaLabel = splitValue
        ? splitValue.replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '')
        : item.Value && item.Value.replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    payLoad.contentAction.etext = item.Value;
    const attribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    return (React.createElement("li", { className: 'msc-autoSuggest__categoryResults-item', key: item.Id },
        React.createElement("a", Object.assign({ "aria-label": ariaLabel, href: _generateLink(item, searchText, props) }, attribute), _generateLink(item, searchText, props) && _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix))));
};
const _generateLink = (suggestion, searchText, props) => {
    return suggestion && suggestion.Id ? _getCategoryLink(suggestion.Id, searchText, props) : '';
};
const _getCategoryLink = (id, searchText, props) => {
    const { searchPageURL, searchQsp, searchRefiners } = props;
    const route = searchPageURL || '';
    const urlPath = `${route}${route.indexOf('?') === -1 ? '?' : '&'}${searchQsp}=${searchText}`;
    const categoryRefiners = searchRefiners &&
        searchRefiners.find(refiners => {
            return refiners.KeyName === 'Category';
        });
    const refiner = categoryRefiners &&
        categoryRefiners.Values &&
        categoryRefiners.Values.find(item => {
            return item.RefinerRecordId === parseInt(id, 10);
        });
    const encodedRefiner = refiner && encodeURIComponent(JSON.stringify(compressRefiners([refiner])));
    return encodedRefiner ? `${urlPath}&refiners=${encodedRefiner}` : urlPath;
};
const _getHighlightedText = (suggestion, hitPrefix, hitSuffix) => {
    let formattedText = suggestion
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');
    formattedText = formattedText.split('|').pop() || '';
    return React.createElement("span", { dangerouslySetInnerHTML: getRichTextHtml(formattedText) });
};
const compressedRefinerKeys = ['DataTypeValue', 'LeftValueBoundString', 'RefinerRecordId', 'RefinerSourceValue', 'RightValueBoundString', 'UnitText'];
const compressRefiners = (refiners) => {
    const compressedRefiners = [];
    refiners.forEach((refiner) => {
        const compressedRefiner = [];
        compressedRefinerKeys.forEach((refinerKey) => {
            compressedRefiner.push(refiner[refinerKey]);
        });
        compressedRefiners.push(compressedRefiner);
    });
    return compressedRefiners;
};
//# sourceMappingURL=search.categorysuggest.js.map