import * as React from 'react';
import { getPayloadObject, getTelemetryAttributes } from '@msdyn365-commerce-modules/utilities';
import { getRichTextHtml } from '@msdyn365-commerce/core';
let payLoad;
export const KeywordSuggestionsComponent = (props) => {
    const { suggestions, hitPrefix, hitSuffix } = props;
    if (!suggestions) {
        return undefined;
    }
    payLoad = getPayloadObject('click', props.telemetryContent, '');
    const reactNodes = [];
    suggestions.map(item => {
        reactNodes.push(_assembleNode(item, hitPrefix, hitSuffix, props));
    });
    return { text: reactNodes };
};
const _assembleNode = (item, hitPrefix, hitSuffix, props) => {
    const ariaLabel = item.Value &&
        (item.Value).replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    payLoad.contentAction.etext = ariaLabel;
    const attribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    return (React.createElement("li", { className: 'msc-autoSuggest__keywordResults-item', key: item.Id },
        React.createElement("a", Object.assign({ "aria-label": ariaLabel, href: _generateLink(item, hitPrefix, hitSuffix, props) }, attribute), _generateLink(item, hitPrefix, hitSuffix, props) &&
            _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix))));
};
const _generateLink = (suggestion, hitPrefix, hitSuffix, props) => {
    const { searchPageURL, searchQsp } = props;
    const formattedLink = suggestion.Value
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');
    const route = searchPageURL || '';
    return formattedLink && formattedLink.length > 0
        ? `${route}${route.indexOf('?') === -1 ? '?' : '&'}${searchQsp}=${formattedLink}`
        : route;
};
const _getHighlightedText = (suggestion, hitPrefix, hitSuffix) => {
    const formattedText = suggestion
        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')
        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');
    return React.createElement("span", { dangerouslySetInnerHTML: getRichTextHtml(formattedText) });
};
//# sourceMappingURL=search.keywordsuggest.js.map