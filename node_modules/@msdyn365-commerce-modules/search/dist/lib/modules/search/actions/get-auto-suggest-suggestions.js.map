{"version":3,"file":"get-auto-suggest-suggestions.js","sourceRoot":"./src/","sources":["modules/search/actions/get-auto-suggest-suggestions.ts"],"names":[],"mappings":"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","sourcesContent":["import { generateImageUrl } from '@msdyn365-commerce-modules/retail-actions';\nimport { Autosuggestions } from '@msdyn365-commerce/commerce-entities';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput,\n    ICreateActionContext\n} from '@msdyn365-commerce/core';\nimport { SearchSuggestion, SearchSuggestionCriteria } from '@msdyn365-commerce/retail-proxy';\nimport {\n    getSearchSuggestionsAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\n// @ts-ignore\nexport const enum SuggestionType {\n    Category = 'ScopedCategory',\n    Keyword = 'Keyword',\n    Product = 'Product',\n    None = 'None'\n}\n\n/**\n * Input class for auto suggest search input\n */\nexport class AutoSuggestInput implements IActionInput {\n    public searchQuery?: string;\n    public topResultsCount?: number;\n    public suggestionType?: string;\n    public hitPrefix?: string;\n    public hitSuffix?: string;\n\n    constructor(searchText?: string, top?: number, suggestionType?: string, hitPrefix?: string, hitSuffix?: string) {\n        this.searchQuery = searchText;\n        this.topResultsCount = top;\n        this.suggestionType = suggestionType;\n        this.hitPrefix = hitPrefix;\n        this.hitSuffix = hitSuffix;\n    }\n\n    public getCacheKey = () => `AutoSuggestSearchSuggestions`;\n    public getCacheObjectType = () => 'AutoSuggestSearchSuggestions';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nconst createInput = (inputData: ICreateActionContext) => {\n    return new AutoSuggestInput();\n};\n\n/**\n * Calls the Retail API and returns a auto-suggest suggestions\n */\nexport async function getSearchSuggestionsAction(input: AutoSuggestInput, ctx: IActionContext): Promise<Autosuggestions | null> {\n    // If no input is provided fail out\n    if (!input || !input.searchQuery) {\n        throw new Error('[getSearchSuggestionsAction]No valid Input was provided, failing');\n    }\n\n    const autosuggest: Autosuggestions = {};\n\n    const autoSuggestPromises = [\n        _getAutoSuggest(input, autosuggest, ctx),\n    ];\n    return Promise.all(autoSuggestPromises).then(() => {\n        return autosuggest;\n    });\n}\n\nasync function _getAutoSuggest(\n    input: AutoSuggestInput,\n    autosuggest: Autosuggestions,\n    ctx: IActionContext\n): Promise<void> {\n    const searchCriteria: SearchSuggestionCriteria = {\n        ProductSearchCriteria: {\n            SearchCondition: input.searchQuery && input.searchQuery.length > 0 ? input.searchQuery : '',\n            Context: {\n                ChannelId: +ctx.requestContext.apiSettings.channelId,\n                CatalogId: +ctx.requestContext.apiSettings.catalogId\n            }\n        },\n        HitPrefix: input.hitPrefix,\n        HitSuffix: input.hitSuffix,\n        SuggestionType: input.suggestionType\n    };\n\n    const searchSuggestions = await getSearchSuggestionsAsync(\n        { callerContext: ctx, queryResultSettings: { Paging: { Top: input.topResultsCount } } },\n        searchCriteria\n    );\n\n    if (searchSuggestions && searchSuggestions.length > 0) {\n        // Generate image url\n        searchSuggestions.map(\n            (item: SearchSuggestion) =>\n                (item.ImageUrl = item.ImageUrl ? generateImageUrl(item.ImageUrl, ctx.requestContext.apiSettings) : '')\n        );\n\n        autosuggest.AllSearchResults = searchSuggestions;\n    } else {\n        ctx.telemetry.error(`[getSearchSuggestionsAction] unable to get availabilites for search with suggestion type ${searchCriteria.SuggestionType}`);\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/search/get-auto-suggest-suggestions',\n    action: <IAction<Autosuggestions>>getSearchSuggestionsAction,\n    input: createInput\n});\n"]}