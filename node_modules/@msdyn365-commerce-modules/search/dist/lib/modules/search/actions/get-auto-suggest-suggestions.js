import { generateImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getSearchSuggestionsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
export class AutoSuggestInput {
    constructor(searchText, top, suggestionType, hitPrefix, hitSuffix) {
        this.getCacheKey = () => `AutoSuggestSearchSuggestions`;
        this.getCacheObjectType = () => 'AutoSuggestSearchSuggestions';
        this.dataCacheType = () => 'none';
        this.searchQuery = searchText;
        this.topResultsCount = top;
        this.suggestionType = suggestionType;
        this.hitPrefix = hitPrefix;
        this.hitSuffix = hitSuffix;
    }
}
const createInput = (inputData) => {
    return new AutoSuggestInput();
};
export async function getSearchSuggestionsAction(input, ctx) {
    if (!input || !input.searchQuery) {
        throw new Error('[getSearchSuggestionsAction]No valid Input was provided, failing');
    }
    const autosuggest = {};
    const autoSuggestPromises = [
        _getAutoSuggest(input, autosuggest, ctx),
    ];
    return Promise.all(autoSuggestPromises).then(() => {
        return autosuggest;
    });
}
async function _getAutoSuggest(input, autosuggest, ctx) {
    const searchCriteria = {
        ProductSearchCriteria: {
            SearchCondition: input.searchQuery && input.searchQuery.length > 0 ? input.searchQuery : '',
            Context: {
                ChannelId: +ctx.requestContext.apiSettings.channelId,
                CatalogId: +ctx.requestContext.apiSettings.catalogId
            }
        },
        HitPrefix: input.hitPrefix,
        HitSuffix: input.hitSuffix,
        SuggestionType: input.suggestionType
    };
    const searchSuggestions = await getSearchSuggestionsAsync({ callerContext: ctx, queryResultSettings: { Paging: { Top: input.topResultsCount } } }, searchCriteria);
    if (searchSuggestions && searchSuggestions.length > 0) {
        searchSuggestions.map((item) => (item.ImageUrl = item.ImageUrl ? generateImageUrl(item.ImageUrl, ctx.requestContext.apiSettings) : ''));
        autosuggest.AllSearchResults = searchSuggestions;
    }
    else {
        ctx.telemetry.error(`[getSearchSuggestionsAction] unable to get availabilites for search with suggestion type ${searchCriteria.SuggestionType}`);
    }
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/search/get-auto-suggest-suggestions',
    action: getSearchSuggestionsAction,
    input: createInput
});
//# sourceMappingURL=get-auto-suggest-suggestions.js.map