{"version":3,"file":"search.test.js","sourceRoot":"./src/","sources":["modules/search/__tests__/unit/search.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mount, shallow } from 'enzyme';\nimport * as React from 'react';\n\nimport { buildHydratedMockActionContext, buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';\n\nimport { SuggestionType } from '../../actions/get-auto-suggest-suggestions';\nimport Search, { ISearchViewProps } from '../../search';\nimport { ISearchData } from '../../search.data';\nimport { ISearchConfig, ISearchProps, ISearchResources } from '../../search.props.autogenerated';\n// import renderView from '../../search.view';\n\nconst mockData: ISearchData = {\n    searchState: {}\n};\n\n// @ts-ignore\nconst mockContext: ICoreContext = {\n    actionContext: buildHydratedMockActionContext()\n};\n\n// @ts-ignore\nconst mockResources: ISearchResources = {\n    searchtext: 'searchtext'\n};\n\nconst mockConfig: ISearchConfig = {\n    hideSearchLabel: false,\n    className: '',\n    disableSubmitSearch: false,\n    searchplaceholderText:'sample place holder text'\n};\n\ndescribe('Search unit tests - Container', () => {\n    it('renders correctly without and with suggest', () => {\n        const moduleProps: ISearchProps<ISearchData> = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />;})\n        };\n\n        const result = mount(<Search {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n        let viewProps: ISearchViewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n        expect(viewProps.label).toBeTruthy();\n        expect(viewProps.form).toBeTruthy();\n        expect(viewProps.autosuggestCategory).not.toBeTruthy();\n        expect(viewProps.autosuggestKeyword).not.toBeTruthy();\n        expect(viewProps.autosuggestProduct).not.toBeTruthy();\n\n        result.setState({\n            searchText: 'mockSearchText',\n            suggestions: {\n                AllSearchResults: [\n                    { Value: 'keyword result 1', Id: '1', SuggestionType: SuggestionType.Keyword },\n                    { Value: 'keyword result 2', Id: '2', SuggestionType: SuggestionType.Keyword },\n                    {\n                        Value: 'product result 3',\n                        Id: '3',\n                        Value3: { Value: { DecimalValue: 1.1 } },\n                        ImageUrl: '/imageurl/',\n                        SuggestionType: SuggestionType.Product\n                    },\n                    {\n                        Value: 'product result 4',\n                        Id: '4',\n                        Value3: { Value: { DecimalValue: 1.1 } },\n                        ImageUrl: '/imageurl/',\n                        SuggestionType: SuggestionType.Product\n                    },\n                    { Value: 'category result 5', Id: '5', SuggestionType: SuggestionType.Category },\n                    { Value: 'category result 6', Id: '6', SuggestionType: SuggestionType.Category }\n                ]\n            },\n            searchRefiners: [{ KeyName: 'Category', Values: [{ RefinerRecordId: 1 }] }]\n        });\n\n        viewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n        expect(viewProps.label).toBeTruthy();\n        expect(viewProps.form).toBeTruthy();\n        expect(viewProps.autosuggestCategory).toBeTruthy();\n        expect(viewProps.autosuggestKeyword).toBeTruthy();\n        expect(viewProps.autosuggestProduct).toBeTruthy();\n    });\n\n    it('_handleCancelSearchChange correctly', () => {\n        const moduleProps: ISearchProps<ISearchData> = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),\n            resources: mockResources,\n            renderView: jest.fn()\n        };\n\n        const component = shallow(<Search {...moduleProps} />);\n        const instance = component.instance();\n        // @ts-ignore ignore private method\n        instance._handleCancelSearchChange();\n        expect(component.state('isSearchFormExpanded')).toBe(true);\n        expect(component.type()).toBe(null);\n\n        // @ts-ignore ignore private method\n        instance._handleCancelSearchChange();\n        expect(component.state('isSearchFormExpanded')).toBe(false);\n    });\n\n    it('_getSuggestionType correctly', () => {\n        const moduleProps: ISearchProps<ISearchData> = {\n            ...(buildMockModuleProps(mockData, {}, mockConfig, mockContext) as ISearchProps<ISearchData>),\n            resources: mockResources,\n            renderView: jest.fn()\n        };\n\n        const component = shallow(<Search {...moduleProps} />);\n        const instance = component.instance();\n        // @ts-ignore ignore private method\n        const suggestionType = instance._getSuggestionType();\n        expect(suggestionType).toEqual('Keyword, Product, ScopedCategory');\n        // @ts-ignore ignore private method\n        const suggestionType = instance._getSuggestionType([{SuggestionType: 'product'}, {SuggestionType: 'keyword'}]);\n        expect(suggestionType).toEqual('Product,Keyword');\n    });\n});\n"]}