import { Node } from '@msdyn365-commerce-modules/utilities';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import React from 'react';
import { ProductSuggestionsComponent } from '../../components';
const mockData = {
    searchState: {}
};
const mockConfig = {
    topResultsCount: 5
};
const mockResources = {
    suggestFoundMessage: '',
    noSuggestionMessage: '',
    productSuggestionHeading: '',
    categorySuggestionHeading: ''
};
describe('Search unit tests - ProductSuggestions Component', () => {
    it('renders correctly with autosuggest', () => {
        const moduleProps = {
            searchPageURL: '',
            searchQsp: 'q',
            hitPrefix: '{',
            hitSuffix: '}',
            autoSuggestProps: { ...buildMockModuleProps(mockData, {}), resources: mockResources, config: mockConfig },
            searchText: 'res',
            suggestions: [
                {
                    Value: 'product result 1',
                    Id: '1',
                    Value3: { Value: { DecimalValue: 1.1 } },
                    ImageUrl: '/imageurl1/',
                    SuggestionType: "Product"
                },
                {
                    Value: 'product result 2',
                    Id: '2',
                    Value3: { Value: { DecimalValue: 1.1 } },
                    ImageUrl: '/imageurl2/',
                    SuggestionType: "Product"
                }
            ],
            searchProductSuggestClass: 'search__auto-suggest'
        };
        const component = ProductSuggestionsComponent({ ...moduleProps });
        const res = component && (React.createElement("div", null, React.createElement("ul", null,
            component.title,
            component.items.map((item, index) => {
                return (React.createElement(Node, Object.assign({}, item.LiProduct, { key: item.id || index }),
                    React.createElement(Node, Object.assign({}, item.AProduct),
                        item.text,
                        item.price,
                        item.thumbnail)));
            }))));
        if (res) {
            const wrapper = render(res);
            expect(wrapper).toMatchSnapshot();
        }
    });
    it('renders correctly with no autosuggest', () => {
        const moduleProps = {
            searchPageURL: '',
            searchQsp: 'q',
            hitPrefix: '{',
            hitSuffix: '}',
            autoSuggestProps: { ...buildMockModuleProps(mockData, {}), resources: mockResources, config: mockConfig },
            searchText: 'res',
            suggestions: undefined,
            searchProductSuggestClass: 'search__auto-suggest'
        };
        const component = ProductSuggestionsComponent({ ...moduleProps });
        const res = component && (React.createElement("div", null, React.createElement("ul", null,
            component.title,
            component.items.map((item, index) => {
                return (React.createElement(Node, Object.assign({}, item.LiProduct, { key: item.id || index }),
                    React.createElement(Node, Object.assign({}, item.AProduct),
                        item.text,
                        item.price,
                        item.thumbnail)));
            }))));
        if (res) {
            const wrapper = render(res);
            expect(wrapper).toMatchSnapshot();
        }
    });
});
//# sourceMappingURL=search.productsuggest.test.js.map