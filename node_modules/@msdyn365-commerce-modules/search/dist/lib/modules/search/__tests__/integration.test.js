import { mount, render } from 'enzyme';
import * as React from 'react';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import Search from '../search';
import SearchView from '../search.view';
const mockData = {
    searchState: {}
};
const actionContext = {
    requestCache: {
        put: jest.fn()
    }
};
const mockContext = {
    actionContext: actionContext,
    app: {
        config: {
            searchQueryStringParameter: 'q'
        }
    }
};
const mockResources = {
    searchtext: 'searchtext',
    searchLabelArialLabel: 'Search collapsed',
    cancelBtnAriaLabel: 'Cancel',
    searchBtnAriaLabel: 'Search',
    submitBtnAriaLabel: 'Submit search'
};
const mockConfig = {
    hideSearchLabel: false,
    className: '',
    disableSubmitSearch: false,
    searchplaceholderText: ''
};
const mockConfigDisableSubmit = {
    hideSearchLabel: false,
    className: '',
    disableSubmitSearch: true
};
describe('Search integration tests', () => {
    it('renders correctly with no suggest', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: SearchView
        };
        const component = render(React.createElement(Search, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly click label', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: SearchView
        };
        const wrapper = mount(React.createElement(Search, Object.assign({}, moduleProps)));
        const clickLabel = wrapper.find('.ms-search__icon').at(0);
        clickLabel.simulate('click');
        expect(wrapper.state('isSearchFormExpanded')).toBe(true);
    });
    it('renders correctly input change', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: SearchView
        };
        const wrapper = mount(React.createElement(Search, Object.assign({}, moduleProps)));
        const input = wrapper.find('input').at(0);
        input.instance().value = 'mockinput';
        input.simulate('change');
        expect(moduleProps.data.searchState.searchText).toBe('mockinput');
    });
    it('renders correctly query too long', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: SearchView
        };
        const wrapper = mount(React.createElement(Search, Object.assign({}, moduleProps)));
        const input = wrapper.find('input').at(0);
        input.instance().value = 'searchinputsearchinputsearchinputsearchinputsearchinputsearchinputsearchinputsearchinput';
        input.simulate('change');
        expect(wrapper.state('searchText')).toBe('');
    });
    it('renders correctly query empty', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: SearchView
        };
        const wrapper = mount(React.createElement(Search, Object.assign({}, moduleProps)));
        const input = wrapper.find('input').at(0);
        input.instance().value = '';
        input.simulate('change');
        expect(wrapper.state('searchText')).toBe('');
    });
    it('renders correctly disable submit', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfigDisableSubmit, mockContext),
            resources: mockResources,
            renderView: SearchView
        };
        const wrapper = mount(React.createElement(Search, Object.assign({}, moduleProps)));
        const form = wrapper.find('form').at(0);
        const clickLabel = form.find('input').at(0);
        clickLabel.instance().value = 'searchinput';
        form.simulate('submit');
        expect(document.location.href).toBe('http://localhost/');
    });
    it('renders correctly keydown', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: SearchView
        };
        const wrapper = mount(React.createElement(Search, Object.assign({}, moduleProps)));
        wrapper.setState({
            searchText: 'mockSearchText',
            suggestions: {
                AllSearchResults: [
                    { Value: 'keyword result 1', Id: '1', SuggestionType: "Keyword" },
                    { Value: 'keyword result 2', Id: '2', SuggestionType: "Keyword" },
                    { Value: 'product result 3', Id: '3', Value3: { Value: { DecimalValue: 1.1 } }, ImageUrl: '/imageurl/', SuggestionType: "Product" },
                    { Value: 'product result 4', Id: '4', Value3: { Value: { DecimalValue: 1.1 } }, ImageUrl: '/imageurl/', SuggestionType: "Product" },
                    { Value: 'category result 5', Id: '5', SuggestionType: "ScopedCategory" },
                    { Value: 'category result 6', Id: '6', SuggestionType: "ScopedCategory" }
                ]
            },
            searchRefiners: [{ KeyName: 'Category', Values: [{ RefinerRecordId: 1 }] }]
        });
        const clickLabel = wrapper.find('input').at(0);
        clickLabel.instance().value = 'searchinput';
        const instance = wrapper.instance();
        const event = new KeyboardEvent('keyup', { keyCode: 27 });
        instance._keyup(event);
        expect(wrapper.state('searchText')).toBe('');
    });
    it('renders correctly _focusOutTarget', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: SearchView
        };
        const wrapper = mount(React.createElement(Search, Object.assign({}, moduleProps)));
        const instance = wrapper.instance();
        instance._focusOutTarget({ target: document.createElement('div') });
        expect(wrapper.state('searchText')).toBe('');
    });
});
//# sourceMappingURL=integration.test.js.map