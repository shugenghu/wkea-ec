{"version":3,"file":"search.categorysuggest.test.js","sourceRoot":"./src/","sources":["modules/search/__tests__/unit/search.categorysuggest.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { buildMockModuleProps } from '@msdyn365-commerce/core';\nimport { SuggestionType } from '../../actions/get-auto-suggest-suggestions';\nimport { CategorySuggestionsComponent, ISearchCategorySuggestProps } from '../../components';\nimport { ISearchData } from '../../search.data';\nimport { ISearchConfig } from '../../search.props.autogenerated';\n\nconst mockData: ISearchData = {\n    searchState: {}\n  };\n\nconst mockConfig: ISearchConfig = {\n    topResultsCount: 5\n};\n\nconst mockResources = {\n  categorySuggestFoundMessage: 'suggestions are available',\n  noCategorySuggestionMessage: 'suggestions are not available',\n  productSuggestionHeading: '',\n  categorySuggestionHeading: 'heading'\n};\n\ndescribe('Search unit tests - CategorySuggestions Component', () => {\n    it('renders correctly with suggestions and refiners', () => {\n        const moduleProps: ISearchCategorySuggestProps = {\n            searchPageURL: '',\n            searchQsp: 'q',\n            hitPrefix: '{',\n            hitSuffix: '}',\n            // @ts-ignore\n            autoSuggestProps: { ...buildMockModuleProps(mockData, {}), resources: mockResources, config: mockConfig },\n            searchText: 'res',\n            suggestions: [\n                {Value: 'category result 1', SuggestionType: SuggestionType.Category, Id: '1'},\n                {Value: 'category result 2', SuggestionType: SuggestionType.Category, Id: '2'},\n                {Value: '{res}ult', SuggestionType: SuggestionType.Category, Id: '3'},\n                {Value: '', SuggestionType: SuggestionType.Category, Id: '4'}\n              ],\n              searchRefiners: [{KeyName: 'Category', Values: [{RefinerRecordId: 1}]}],\n            searchCategorySuggestClass: 'search__auto-suggest'\n        };\n\n        const component = CategorySuggestionsComponent({...moduleProps});\n        const res = component && (\n          <div>\n            <ul>\n              {component.title}\n              {component.text.map((item, index) => {\n                return (item);\n              })}\n            </ul>\n          </div>\n        );\n        expect(res).toMatchSnapshot();\n    });\n\n    it('renders correctly without suggestions and refiners', () => {\n      const moduleProps: ISearchCategorySuggestProps = {\n          searchPageURL: '',\n          searchQsp: 'q',\n          hitPrefix: '{',\n          hitSuffix: '}',\n          // @ts-ignore\n          autoSuggestProps: { ...buildMockModuleProps(mockData, {}), resources: mockResources, config: mockConfig },\n          searchText: 'res',\n          suggestions: [],\n          searchRefiners: [],\n          searchCategorySuggestClass: 'search__auto-suggest'\n      };\n\n      const component = CategorySuggestionsComponent({...moduleProps});\n      const res = component && (\n        <div>\n          <ul>\n            {component.title}\n            {component.text.map((item) => {\n              return (item);\n            })}\n          </ul>\n        </div>\n      );\n      expect(res).toMatchSnapshot();\n  });\n});\n"]}