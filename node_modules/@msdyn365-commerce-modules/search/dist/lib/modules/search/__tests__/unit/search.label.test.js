import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { render, shallow } from 'enzyme';
import * as React from 'react';
import { LabelComponent } from '../../components';
describe('Search unit tests - Label Component', () => {
    const mockCoreContext = buildMockCoreContext({ app: { config: { hideRating: false } } });
    const telemetryContent = { pageName: 'Homepage', moduleName: 'Product Collection', telemetry: mockCoreContext.telemetry };
    it('renders correctly', () => {
        const mockProps = {
            isSearchFormExpanded: false,
            searchLabelClass: 'search__label',
            searchtext: 'searchText',
            searchLabelArialLabel: 'Search collapsed',
            searchCollapsedLabel: React.createRef(),
            handleCancelSearchChange: jest.fn(),
            telemetryContent: telemetryContent
        };
        const component = render(React.createElement(LabelComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('calls handleCancelSearchChange after clicking', () => {
        const mockProps = {
            isSearchFormExpanded: false,
            searchLabelClass: 'search__label',
            searchtext: 'searchText',
            searchLabelArialLabel: 'Search collapsed',
            searchCollapsedLabel: React.createRef(),
            handleCancelSearchChange: jest.fn(),
            telemetryContent: telemetryContent
        };
        const component = shallow(React.createElement(LabelComponent, Object.assign({}, mockProps)));
        const clickLabel = component.find(`.ms-search__icon`).at(0);
        expect(component).toMatchSnapshot();
        clickLabel.simulate('click');
        expect(mockProps.handleCancelSearchChange).toBeCalled();
    });
});
//# sourceMappingURL=search.label.test.js.map