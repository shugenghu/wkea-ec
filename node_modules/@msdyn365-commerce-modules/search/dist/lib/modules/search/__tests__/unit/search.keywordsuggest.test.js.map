{"version":3,"file":"search.keywordsuggest.test.js","sourceRoot":"./src/","sources":["modules/search/__tests__/unit/search.keywordsuggest.test.tsx"],"names":[],"mappings":"AAKA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAE/D,OAAO,EAA8B,2BAA2B,EAAE,MAAM,kBAAkB,CAAC;AAG3F,MAAM,UAAU,GAAkB;IAC9B,eAAe,EAAE,CAAC;CACrB,CAAC;AAEF,MAAM,aAAa,GAAG;IAClB,mBAAmB,EAAE,EAAE;IACvB,mBAAmB,EAAE,EAAE;IACvB,wBAAwB,EAAE,EAAE;IAC5B,yBAAyB,EAAE,EAAE;CAChC,CAAC;AAEF,QAAQ,CAAC,kDAAkD,EAAE,GAAG,EAAE;IAC9D,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC1C,MAAM,WAAW,GAA+B;YAC5C,aAAa,EAAE,EAAE;YACjB,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,GAAG;YAEd,gBAAgB,EAAE,EAAE,GAAG,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,EAAE,UAAU,EAAE;YACnG,UAAU,EAAE,KAAK;YACjB,WAAW,EAAE;gBACT,EAAC,KAAK,EAAE,oBAAoB,EAAE,EAAE,EAAE,GAAG,EAAE,cAAc,WAAwB,EAAC;gBAC9E,EAAC,KAAK,EAAE,oBAAoB,EAAE,EAAE,EAAE,GAAG,EAAE,cAAc,WAAwB,EAAC;aACjF;YACD,yBAAyB,EAAE,sBAAsB;SACpD,CAAC;QAEF,MAAM,SAAS,GAAG,2BAA2B,CAAC,EAAC,GAAG,WAAW,EAAC,CAAC,CAAC;QAChE,MAAM,GAAG,GAAG,SAAS,IAAI,CACrB,iCACK,gCACI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAChC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CACD,CACH,CACT,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC7C,MAAM,WAAW,GAA+B;YAC5C,aAAa,EAAE,EAAE;YACjB,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,GAAG;YAEd,gBAAgB,EAAE,EAAE,GAAG,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,EAAE,UAAU,EAAE;YACnG,UAAU,EAAE,KAAK;YACjB,WAAW,EAAE,SAAS;YACtB,yBAAyB,EAAE,sBAAsB;SACpD,CAAC;QAEF,MAAM,SAAS,GAAG,2BAA2B,CAAC,EAAC,GAAG,WAAW,EAAC,CAAC,CAAC;QAChE,MAAM,GAAG,GAAG,SAAS,IAAI,CACrB,iCACK,gCACI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAChC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CACD,CACH,CACT,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { buildMockModuleProps } from '@msdyn365-commerce/core';\nimport { SuggestionType } from '../../actions/get-auto-suggest-suggestions';\nimport { ISearchKeywordSuggestProps, KeywordSuggestionsComponent } from '../../components';\nimport { ISearchConfig } from '../../search.props.autogenerated';\n\nconst mockConfig: ISearchConfig = {\n    topResultsCount: 5\n};\n\nconst mockResources = {\n    suggestFoundMessage: '',\n    noSuggestionMessage: '',\n    productSuggestionHeading: '',\n    categorySuggestionHeading: ''\n};\n\ndescribe('Search unit tests - KeywordSuggestions Component', () => {\n    it('renders correctly with autosuggest', () => {\n        const moduleProps: ISearchKeywordSuggestProps = {\n            searchPageURL: '',\n            searchQsp: 'q',\n            hitPrefix: '{',\n            hitSuffix: '}',\n            // @ts-ignore\n            autoSuggestProps: { ...buildMockModuleProps({}, {}), resources: mockResources, config: mockConfig },\n            searchText: 'res',\n            suggestions: [\n                {Value: 'keyword {res}ult 1', Id: '1', SuggestionType: SuggestionType.Keyword},\n                {Value: 'keyword {res}ult 2', Id: '2', SuggestionType: SuggestionType.Keyword}\n            ],\n            searchKeywordSuggestClass: 'search__auto-suggest'\n        };\n\n        const component = KeywordSuggestionsComponent({...moduleProps});\n        const res = component && (\n            <div>\n                {<ul>\n                    {component.text.map((item, index) => {\n                        return (item);\n                    })}\n                </ul>}\n            </div>\n        );\n        expect(res).toMatchSnapshot();\n    });\n\n    it('renders correctly with no autosuggest', () => {\n        const moduleProps: ISearchKeywordSuggestProps = {\n            searchPageURL: '',\n            searchQsp: 'q',\n            hitPrefix: '{',\n            hitSuffix: '}',\n            // @ts-ignore\n            autoSuggestProps: { ...buildMockModuleProps({}, {}), resources: mockResources, config: mockConfig },\n            searchText: 'res',\n            suggestions: undefined,\n            searchKeywordSuggestClass: 'search__auto-suggest'\n        };\n\n        const component = KeywordSuggestionsComponent({...moduleProps});\n        const res = component && (\n            <div>\n                {<ul>\n                    {component.text.map((item, index) => {\n                        return (item);\n                    })}\n                </ul>}\n            </div>\n        );\n        expect(res).toMatchSnapshot();\n    });\n});\n"]}