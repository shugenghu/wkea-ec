import { mount, shallow } from 'enzyme';
import * as React from 'react';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import Search from '../../search';
const mockData = {
    searchState: {}
};
const mockContext = {
    actionContext: buildHydratedMockActionContext()
};
const mockResources = {
    searchtext: 'searchtext'
};
const mockConfig = {
    hideSearchLabel: false,
    className: '',
    disableSubmitSearch: false,
    searchplaceholderText: 'sample place holder text'
};
describe('Search unit tests - Container', () => {
    it('renders correctly without and with suggest', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const result = mount(React.createElement(Search, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        let viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.label).toBeTruthy();
        expect(viewProps.form).toBeTruthy();
        expect(viewProps.autosuggestCategory).not.toBeTruthy();
        expect(viewProps.autosuggestKeyword).not.toBeTruthy();
        expect(viewProps.autosuggestProduct).not.toBeTruthy();
        result.setState({
            searchText: 'mockSearchText',
            suggestions: {
                AllSearchResults: [
                    { Value: 'keyword result 1', Id: '1', SuggestionType: "Keyword" },
                    { Value: 'keyword result 2', Id: '2', SuggestionType: "Keyword" },
                    {
                        Value: 'product result 3',
                        Id: '3',
                        Value3: { Value: { DecimalValue: 1.1 } },
                        ImageUrl: '/imageurl/',
                        SuggestionType: "Product"
                    },
                    {
                        Value: 'product result 4',
                        Id: '4',
                        Value3: { Value: { DecimalValue: 1.1 } },
                        ImageUrl: '/imageurl/',
                        SuggestionType: "Product"
                    },
                    { Value: 'category result 5', Id: '5', SuggestionType: "ScopedCategory" },
                    { Value: 'category result 6', Id: '6', SuggestionType: "ScopedCategory" }
                ]
            },
            searchRefiners: [{ KeyName: 'Category', Values: [{ RefinerRecordId: 1 }] }]
        });
        viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.label).toBeTruthy();
        expect(viewProps.form).toBeTruthy();
        expect(viewProps.autosuggestCategory).toBeTruthy();
        expect(viewProps.autosuggestKeyword).toBeTruthy();
        expect(viewProps.autosuggestProduct).toBeTruthy();
    });
    it('_handleCancelSearchChange correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn()
        };
        const component = shallow(React.createElement(Search, Object.assign({}, moduleProps)));
        const instance = component.instance();
        instance._handleCancelSearchChange();
        expect(component.state('isSearchFormExpanded')).toBe(true);
        expect(component.type()).toBe(null);
        instance._handleCancelSearchChange();
        expect(component.state('isSearchFormExpanded')).toBe(false);
    });
    it('_getSuggestionType correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn()
        };
        const component = shallow(React.createElement(Search, Object.assign({}, moduleProps)));
        const instance = component.instance();
        const suggestionType = instance._getSuggestionType();
        expect(suggestionType).toEqual('Keyword, Product, ScopedCategory');
        const suggestionType = instance._getSuggestionType([{ SuggestionType: 'product' }, { SuggestionType: 'keyword' }]);
        expect(suggestionType).toEqual('Product,Keyword');
    });
});
//# sourceMappingURL=search.test.js.map