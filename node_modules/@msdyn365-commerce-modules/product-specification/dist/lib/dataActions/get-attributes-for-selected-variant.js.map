{"version":3,"file":"get-attributes-for-selected-variant.js","sourceRoot":"./src/","sources":["dataActions/get-attributes-for-selected-variant.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,0BAA0B,EAA+E,MAAM,yBAAyB,CAAC;AAG7J,OAAO,EAAE,mCAAmC,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,MAAM,2CAA2C,CAAC;AAC1I,OAAO,EAAE,uBAAuB,EAAE,MAAM,wEAAwE,CAAC;AAKjH,MAAM,OAAO,iCAAiC;IAM1C,YAAY,SAAiB,EAAE,SAAiB,EAAE,eAA+B,EAAE,SAAkB;QAO9F,gBAAW,GAAG,GAAG,EAAE,CAAC,8BAA8B,CAAC;QACnD,uBAAkB,GAAG,GAAG,EAAE,CAAC,uBAAuB,CAAC;QACnD,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAR3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,CAAC,CAAC;IACpC,CAAC;CAKJ;AAED,MAAM,CAAC,MAAM,uCAAuC,GAAG,CAAC,SAA+C,EAAqC,EAAE;IAC1I,MAAM,SAAS,GAAG,mCAAmC,CAAC,SAAS,CAAC,CAAC;IAEjE,IAAI,SAAS,EAAE;QACX,OAAO,IAAI,iCAAiC,CAAC,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;KAC7G;SAAM;QACH,MAAM,IAAI,KAAK,CAAC,6FAA6F,CAAC,CAAC;KAClH;AACL,CAAC,CAAC;AAKF,MAAM,CAAC,KAAK,UAAU,qCAAqC,CACvD,KAAwC,EACxC,GAAmB;IAGnB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;QAC/B,MAAM,aAAa,GAA6B,KAAK,CAAC,eAAe,CAAC;QAEtE,IAAI,CAAC,aAAa,EAAE;YAChB,MAAM,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;YAExF,OAAO,kBAAkB,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;SACxD;QAED,OAAO,aAAa,CAAC;IACzB,CAAC,CAAC,CAAC,IAAI,CAA0B,CAAC,aAAmC,EAAE,EAAE;QACrE,MAAM,aAAa,GAAwD,aAAa,CAAC;QAEzF,IAAI,aAAa,EAAE;YACf,OAAO,uBAAuB,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;SAC7I;QAED,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,eAAwC,EAAE,EAAE;QACjD,MAAM,WAAW,GAAqB,eAAe,CAAC;QACtD,IAAI,WAAW,EAAE;YACb,OAAO,WAAW,CAAC;SACtB;QAED,OAAO,EAAE,CAAC;IACd,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACtB,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAChF,CAAC,CAAC,CAAC;AACP,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,6EAA6E;IACjF,MAAM,EAA6B,qCAAqC;IACxE,KAAK,EAAE,uCAAuC;CACjD,CAAC,CAAC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { AttributeValue, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\n\nimport { getSelectedProductIdFromActionInput, getSelectedVariant, SelectedVariantInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { getAttributeValuesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\n\n/**\n * Chains getting the SelectedVariant with GetActivePrice\n */\nexport class AttributesForSelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public catalogId: number;\n    public selectedProduct: SimpleProduct | undefined;\n\n    constructor(productId: number, channelId: number, selectedProduct?: SimpleProduct, catalogId?: number) {\n        this.productId = productId;\n        this.channelId = channelId;\n        this.selectedProduct = selectedProduct;\n        this.catalogId = catalogId || 0;\n    }\n\n    public getCacheKey = () => `AttributesForSelectedVariant`;\n    public getCacheObjectType = () => 'ProductAttributeValue';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nexport const createAttributesForSelectedVariantInput = (inputData: ICreateActionContext<IGeneric<IAny>>): AttributesForSelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new AttributesForSelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId);\n    } else {\n        throw new Error('Unable to create PriceForSelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * Calls the Retail API a get a list of dimension values for a given product.\n */\nexport async function getAttributesForSelectedVariantAction(\n    input: AttributesForSelectedVariantInput,\n    ctx: IActionContext\n): Promise<AttributeValue[]> {\n    // @ts-ignore: Promise vs. ObservablePromise typing conflict\n    return Promise.resolve().then(() => {\n        const activeProduct:SimpleProduct | undefined = input.selectedProduct;\n\n        if (!activeProduct) {\n            const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);\n\n            return getSelectedVariant(selectedVariantInput, ctx);\n        }\n\n        return activeProduct;\n    }).then<AttributeValue[] | null>((productResult: SimpleProduct | null) => {\n        const activeProduct:SimpleProduct | undefined = <SimpleProduct | undefined>productResult;\n\n        if (activeProduct) {\n            return getAttributeValuesAsync({ callerContext: ctx, queryResultSettings: {} }, activeProduct.RecordId, input.channelId, input.catalogId);\n        }\n\n        return null;\n    }).then((attributeValues: AttributeValue[] | null) => {\n        const resultArray = <AttributeValue[]>attributeValues;\n        if (resultArray) {\n            return resultArray;\n        }\n\n        return [];\n    }).catch((error: Error) => {\n        ctx.trace(error.message);\n        throw new Error('[getPriceForSelectedVariantAction]Error executing action');\n    });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/product-info/get-attributes-for-selected-variant',\n    action: <IAction<AttributeValue[]>>getAttributesForSelectedVariantAction,\n    input: createAttributesForSelectedVariantInput\n});\n"]}