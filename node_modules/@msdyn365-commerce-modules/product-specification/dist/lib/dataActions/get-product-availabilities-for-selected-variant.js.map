{"version":3,"file":"get-product-availabilities-for-selected-variant.js","sourceRoot":"./src/","sources":["dataActions/get-product-availabilities-for-selected-variant.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,0BAA0B,EAA+E,MAAM,yBAAyB,CAAC;AAG7J,OAAO,EAAE,mCAAmC,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,MAAM,2CAA2C,CAAC;AAC1I,OAAO,EAAE,6BAA6B,EAAE,MAAM,wEAAwE,CAAC;AAKvH,MAAM,OAAO,4CAA4C;IAIrD,YAAY,SAA0B,EAAE,SAAiB;QAKlD,gBAAW,GAAG,GAAG,EAAE,CAAC,yCAAyC,CAAC;QAC9D,uBAAkB,GAAG,GAAG,EAAE,CAAC,uBAAuB,CAAC;QACnD,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAN3C,IAAI,CAAC,SAAS,GAAG,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;QACxE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;CAKJ;AAMD,MAAM,CAAC,MAAM,kDAAkD,GAAG,CAC9D,SAA+C,EACH,EAAE;IAC9C,MAAM,SAAS,GAAG,mCAAmC,CAAC,SAAS,CAAC,CAAC;IAEjE,IAAI,SAAS,EAAE;QACX,OAAO,IAAI,4CAA4C,CAAC,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;KACxH;SAAM;QACH,MAAM,IAAI,KAAK,CAAC,6GAA6G,CAAC,CAAC;KAClI;AACL,CAAC,CAAC;AAKF,MAAM,CAAC,KAAK,UAAU,gDAAgD,CAClE,KAAmD,EACnD,GAAmB;IAEnB,MAAM,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IACxF,OAAO,kBAAkB,CAAC,oBAAoB,EAAE,GAAG,CAAC;SAC/C,IAAI,CAAC,aAAa,CAAC,EAAE;QAClB,IAAI,aAAa,EAAE;YACf,OAAO,6BAA6B,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAC7I,IAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;oBAC5B,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;iBACtB;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC,CAAC,CAAC;SACN;QAED,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACpB,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAChF,CAAC,CAAC,CAAC;AACX,CAAC;AAOD,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,yFAAyF;IAC7F,MAAM,EAA4C,gDAAgD;IAClG,KAAK,EAAE,kDAAkD;CAC5D,CAAC,CAAC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductAvailableQuantity } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getSelectedProductIdFromActionInput, getSelectedVariant, SelectedVariantInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { getProductAvailabilitiesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\n\n/**\n * Input class for the getProductAvailabilitiesForSelectedVariant Data Action\n */\nexport class ProductAvailabilitiesForSelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n\n    constructor(productId: number | string, channelId: number) {\n        this.productId = typeof productId === 'string' ? +productId : productId;\n        this.channelId = channelId;\n    }\n\n    public getCacheKey = () => `ProductAvailabilitiesForSelectedVariant`;\n    public getCacheObjectType = () => 'ProductAvailabilities';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * createInput method for the getProductAvailabilitiesForSelectedVariant data action.\n * @param inputData The input data passed to the createInput method\n */\nexport const createProductAvailabilitiesForSelectedVariantInput = (\n    inputData: ICreateActionContext<IGeneric<IAny>>\n): ProductAvailabilitiesForSelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new ProductAvailabilitiesForSelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId);\n    } else {\n        throw new Error('Unable to create ProductAvailabilitiesForSelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * The action method for the getProductAvailabilitiesForSelectedVariant data action\n */\nexport async function getProductAvailabilitiesForSelectedVariantAction(\n    input: ProductAvailabilitiesForSelectedVariantInput,\n    ctx: IActionContext\n): Promise<ProductAvailableQuantity | null> {\n    const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);\n    return getSelectedVariant(selectedVariantInput, ctx)\n        .then(productResult => {\n            if (productResult) {\n                return getProductAvailabilitiesAsync({ callerContext: ctx, queryResultSettings: {} }, [productResult.RecordId], input.channelId).then(response => {\n                    if(response && response.length) {\n                        return response[0];\n                    }\n                    return null;\n                });\n            }\n\n            return null;\n        })\n        .catch((error: Error) => {\n            ctx.trace(error.message);\n            throw new Error('[getPriceForSelectedVariantAction]Error executing action');\n        });\n}\n\n/**\n * The complete getProductAvailabilitiesForSelectedVariant data action\n * Get the currently selected variant via the getSelectedVariant data action, and\n * then gets the availabilities for the variant via the getProductAvailabilities RetailServer API\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/product-info/get-product-availabilities-for-selected-variant',\n    action: <IAction<ProductAvailableQuantity | null>>getProductAvailabilitiesForSelectedVariantAction,\n    input: createProductAvailabilitiesForSelectedVariantInput\n});\n"]}