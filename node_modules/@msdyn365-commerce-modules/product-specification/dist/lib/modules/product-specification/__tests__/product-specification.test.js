import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import ProductSpecificationView from '../product-specification.view';
import * as React from 'react';
import { shallow, render } from 'enzyme';
import ProductSpecification from '../product-specification';
const mockResults = [
    {
        Name: 'Empty Type YESSHOW',
        DataTypeValue: 0
    },
    {
        Name: 'Currency YESSHOW',
        DataTypeValue: 1,
        CurrencyCode: '$',
        CurrencyValue: 10
    },
    {
        Name: 'Currency No Value NOSHOW',
        DataTypeValue: 1,
        CurrencyCode: '$',
    },
    {
        Name: 'Currency No Code YESSHOW',
        DataTypeValue: 1,
        CurrencyValue: 10
    },
    {
        Name: 'DateTime Has Value YESSHOW',
        DataTypeValue: 2,
        DateTimeOffsetValue: new Date('2015-06-01T00:00:00Z'),
    },
    {
        Name: 'DateTime No Value NOSHOW',
        DataTypeValue: 2,
        DateTimeOffsetValue: undefined
    },
    {
        Name: 'Decimal Has Value YESSHOW',
        DataTypeValue: 3,
        FloatValue: 10.5
    },
    {
        Name: 'Decimal No Value NOSHOW',
        DataTypeValue: 3,
        FloatValue: undefined
    },
    {
        Name: 'Decimal Zero Value YESSHOW',
        DataTypeValue: 3,
        FloatValue: 0
    },
    {
        Name: 'Integer has value YESSHOW',
        DataTypeValue: 4,
        IntegerValue: 10
    },
    {
        Name: 'Integer No Value NOSHOW',
        DataTypeValue: 4,
        IntegerValue: undefined
    },
    {
        Name: 'Integer Zero Value YESSHOW',
        DataTypeValue: 4,
        IntegerValue: 0
    },
    {
        Name: 'Text YESSHOW',
        DataTypeValue: 5,
        TextValue: 'Apple Bottom Jeans'
    },
    {
        Name: 'Text No Value NOSHOW',
        DataTypeValue: 5,
        TextValue: undefined,
    },
    {
        Name: 'Text Empty Text YESSHOW',
        DataTypeValue: 5,
        TextValue: '',
    },
    {
        Name: 'TrueFalse True Value YESSHOW',
        DataTypeValue: 6,
        BooleanValue: true
    },
    {
        Name: 'TrueFalse False Value YESSHOW',
        DataTypeValue: 6,
        BooleanValue: false
    },
    {
        Name: 'TrueFalse No Value YESSHOW',
        DataTypeValue: 6,
        BooleanValue: undefined
    },
    {
        Name: 'Video NOSHOW',
        DataTypeValue: 40
    },
    {
        Name: 'Image NOSHOW',
        DataTypeValue: 41
    },
    {
        Name: 'Unknown NOSHOW',
        DataTypeValue: 99
    }
];
const mockResultsOnlyBad = [
    {
        Name: 'Currency No Value NOSHOW',
        DataTypeValue: 1,
        CurrencyCode: '$',
    },
    {
        Name: 'Text No Value NOSHOW',
        DataTypeValue: 5,
        TextValue: undefined,
    }
];
const emptyResults = [];
const mockDataNoResults = {
    product: wrapInResolvedAsyncResult(null),
    productSpecificationData: wrapInResolvedAsyncResult(emptyResults)
};
const mockDataWithOnlyBadResults = {
    product: wrapInResolvedAsyncResult(null),
    productSpecificationData: wrapInResolvedAsyncResult(mockResultsOnlyBad)
};
const mockDataWithResults = {
    product: wrapInResolvedAsyncResult(null),
    productSpecificationData: wrapInResolvedAsyncResult(mockResults)
};
const defaultMockConfig = {
    heading: {
        text: 'Test Config'
    }
};
const defaultMockResources = {
    trueValueText: 'Yes',
    falseValueText: 'No'
};
describe('Product Specifications', () => {
    it('renders correctly with no specifications', () => {
        let moduleProps;
        moduleProps = {
            ...buildMockModuleProps(mockDataNoResults, {}, defaultMockConfig),
            resources: defaultMockResources,
            renderView: ProductSpecificationView
        };
        const component = render(React.createElement(ProductSpecification, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot('No Specifications');
    });
    it('renders correctly when all included specifications are filtered out', () => {
        let moduleProps;
        moduleProps = {
            ...buildMockModuleProps(mockDataWithOnlyBadResults, {}, defaultMockConfig),
            resources: defaultMockResources,
            renderView: ProductSpecificationView
        };
        const component = render(React.createElement(ProductSpecification, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot('No Specifications');
    });
    it('renders all specifications correctly', () => {
        let moduleProps;
        moduleProps = {
            ...buildMockModuleProps(mockDataWithResults, {}, defaultMockConfig),
            resources: defaultMockResources,
            renderView: ProductSpecificationView
        };
        const component = render(React.createElement(ProductSpecification, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot('With Specifications');
    });
    it('renders correctly in container', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockDataWithResults, {}, defaultMockConfig),
            resources: defaultMockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const productSpecification = shallow(React.createElement(ProductSpecification, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = productSpecification.props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.ProductSpecification.className).toEqual('ms-product-specification');
    });
});
//# sourceMappingURL=product-specification.test.js.map