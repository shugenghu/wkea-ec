import { __decorate } from "tslib";
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { reaction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import getAttributesForSelectedVariant, { AttributesForSelectedVariantInput } from '../../dataActions/get-attributes-for-selected-variant';
import { ProductSpecificationTableRow } from './components/product-specification-table-stucture';
let ProductSpecification = class ProductSpecification extends React.Component {
    constructor() {
        super(...arguments);
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
    }
    async componentDidMount() {
        const { context, data, telemetry } = this.props;
        reaction(() => (data.product.result ? data.product.result.RecordId : null), () => {
            if (context && data.product.result) {
                const actionInput = new AttributesForSelectedVariantInput(data.product.result.RecordId, +context.actionContext.requestContext.apiSettings.channelId, data.product.result);
                getAttributesForSelectedVariant(actionInput, this.props.context.actionContext).catch(error => {
                    telemetry.warning(error);
                    telemetry.debug('Unable to update attributes for Product');
                    telemetry.error(error);
                });
            }
        });
    }
    render() {
        let data;
        try {
            data = this.props.data;
        }
        catch (e) {
            this.props.telemetry.error(`Something went wrong ------${e}`);
            return React.createElement("div", null, e);
        }
        if (!data.productSpecificationData.result || data.productSpecificationData.result.length <= 0) {
            this.props.telemetry.error('Product specification content is empty, module wont render.');
            return null;
        }
        const { heading, className } = this.props.config;
        const { productSpecificationData } = this.props.data;
        const viewProps = {
            ...this.props,
            ProductSpecification: {
                moduleProps: this.props,
                className: classnames('ms-product-specification', className)
            },
            ProductSpecificationTableProps: {
                className: classnames('ms-product-specification__table table-striped table-bordered'),
                tag: 'table'
            },
            ProductSpecificationTableBodyProps: {
                className: '',
                tag: 'tbody'
            },
            title: heading && heading.text && (React.createElement(Msdyn365.Text, { className: 'ms-product-specification__heading', tag: heading.tag || 'h2', text: heading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
            productSpecificationResult: productSpecificationData && this._createTableBody(data)
        };
        return this.props.renderView(viewProps);
    }
    _createTableBody(content) {
        return content.productSpecificationData.result.map((product, index) => {
            const cellData = this._renderProductCell(product);
            if (!cellData) {
                return null;
            }
            return (React.createElement(ProductSpecificationTableRow, { className: 'ms-product-specification__table-row', key: index, productName: product.Name, cellData: cellData }));
        });
    }
    _renderProductCell(product) {
        switch (product.DataTypeValue) {
            case 0:
                return React.createElement("span", null);
            case 1:
                return this._renderCurrencyCell(product);
            case 2:
                return this._renderDateTimeCell(product);
            case 3:
                return this._renderDecimalCell(product);
            case 4:
                return this._renderIntegerCell(product);
            case 5:
                return this._renderTextCell(product);
            case 6:
                return this._renderTrueFalseCell(product);
            case 40:
                this.props.telemetry.warning('Got video specification type, not supported yet so skipping line');
                return null;
            case 41:
                this.props.telemetry.warning('Got image specification type, not supported yet so skipping line');
                return null;
            default:
                this.props.telemetry.warning(`Got unknown specification type ${product.DataTypeValue} so skipping line`);
                return null;
        }
    }
    _renderCurrencyCell(product) {
        if (product.CurrencyValue !== null && product.CurrencyValue !== undefined) {
            return (React.createElement("span", null,
                product.CurrencyCode,
                product.CurrencyValue));
        }
        return null;
    }
    _renderDateTimeCell(product) {
        if (product.DateTimeOffsetValue !== null && product.DateTimeOffsetValue !== undefined && product.DateTimeOffsetValue.toUTCString) {
            return React.createElement("span", null, product.DateTimeOffsetValue.toUTCString());
        }
        return null;
    }
    _renderIntegerCell(product) {
        if (product.IntegerValue !== null && product.IntegerValue !== undefined) {
            return React.createElement("span", null, product.IntegerValue);
        }
        return null;
    }
    _renderDecimalCell(product) {
        if (product.FloatValue !== null && product.FloatValue !== undefined) {
            return React.createElement("span", null, product.FloatValue);
        }
        return null;
    }
    _renderTextCell(product) {
        if (product.TextValue !== null && product.TextValue !== undefined) {
            return React.createElement("span", { dangerouslySetInnerHTML: Msdyn365.getRichTextHtml(product.TextValue) });
        }
        return null;
    }
    _renderTrueFalseCell(product) {
        if (product.BooleanValue) {
            return React.createElement("span", null, this.props.resources.trueValueText ? this.props.resources.trueValueText : 'Yes');
        }
        else {
            return React.createElement("span", null, this.props.resources.falseValueText ? this.props.resources.falseValueText : 'No');
        }
    }
};
ProductSpecification = __decorate([
    observer
], ProductSpecification);
export default ProductSpecification;
//# sourceMappingURL=product-specification.js.map