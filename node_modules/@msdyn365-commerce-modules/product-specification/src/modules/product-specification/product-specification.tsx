/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { AttributeValue } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import classnames from 'classnames';
import { reaction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import getAttributesForSelectedVariant, { AttributesForSelectedVariantInput } from '../../dataActions/get-attributes-for-selected-variant';
import { ProductSpecificationTableRow } from './components/product-specification-table-stucture';
import { IProductSpecificationData } from './product-specification.data';
import { IProductSpecificationProps } from './product-specification.props.autogenerated';

export interface IProductSpecificationViewProps extends IProductSpecificationProps<{}> {
    ProductSpecification: IModuleProps;
    ProductSpecificationTableProps: INodeProps;
    ProductSpecificationTableBodyProps: INodeProps;
    productSpecificationResult?: (JSX.Element | null)[];
    title?: React.ReactNode;
}

/**
 *
 * ProductSpecification component
 * @extends {React.Component<IProductSpecificationProps<IProductSpecificationData>>}
 */
@observer
class ProductSpecification extends React.Component<IProductSpecificationProps<IProductSpecificationData>> {
    public async componentDidMount(): Promise<void> {
        const { context, data, telemetry } = this.props;

        // @ts-ignore: Compiler not reconizing condition check for function params
        reaction(
            () => (data.product.result ? data.product.result.RecordId : null),
            () => {
                if (context && data.product.result) {
                    const actionInput = new AttributesForSelectedVariantInput(
                        data.product.result.RecordId,
                        // @ts-ignore
                        +context.actionContext.requestContext.apiSettings.channelId,
                        data.product.result
                    );

                    getAttributesForSelectedVariant(actionInput, this.props.context.actionContext).catch(error => {
                        telemetry.warning(error);
                        telemetry.debug('Unable to update attributes for Product');
                        telemetry.error(error);
                    });
                }
            }
        );
    }

    // tslint:disable-next-line:max-func-body-length
    public render(): JSX.Element | null {
        let data: IProductSpecificationData;

        try {
            data = this.props.data;
        } catch (e) {
            this.props.telemetry.error(`Something went wrong ------${e}`);
            return <div>{e}</div>;
        }

        if (!data.productSpecificationData.result || data.productSpecificationData.result.length <= 0) {
            this.props.telemetry.error('Product specification content is empty, module wont render.');
            return null;
        }

        const { heading, className } = this.props.config;
        const { productSpecificationData } = this.props.data;

        const viewProps = {
            ...this.props,
            ProductSpecification: {
                moduleProps: this.props,
                className: classnames('ms-product-specification', className)
            },
            ProductSpecificationTableProps: {
                className: classnames('ms-product-specification__table table-striped table-bordered'),
                tag: 'table'
            },
            ProductSpecificationTableBodyProps: {
                className: '',
                tag: 'tbody'
            },
            title: heading && heading.text && (
                <Msdyn365.Text
                  className='ms-product-specification__heading'
                  tag={heading.tag || 'h2'}
                  text={heading.text}
                  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}
                />),
            productSpecificationResult: productSpecificationData && this._createTableBody(data)
        } as IProductSpecificationViewProps;

        return this.props.renderView(viewProps) as React.ReactElement;
    }
    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;
    private _createTableBody(content: IProductSpecificationData): (JSX.Element | null)[] {
        return content.productSpecificationData.result!.map((product, index) => {
            const cellData: JSX.Element | null = this._renderProductCell(product);

            if (!cellData) {
                return null;
            }

            return (
                <ProductSpecificationTableRow
                    className='ms-product-specification__table-row'
                    key={ index }
                    productName={ product.Name }
                    cellData={ cellData }
                />
            );
        });
    }

    private _renderProductCell(product: AttributeValue): JSX.Element | null {
        switch (product.DataTypeValue) {
            case 0: // none
                // Return span here instead of null so the row still shows
                return <span />;
            case 1: // Currency
                return this._renderCurrencyCell(product);
            case 2: // DateTime
                return this._renderDateTimeCell(product);
            case 3: // Decimal
                return this._renderDecimalCell(product);
            case 4: // Integer
                return this._renderIntegerCell(product);
            case 5: // Text
                return this._renderTextCell(product);
            case 6: // TrueFalse
                return this._renderTrueFalseCell(product);
            case 40: // Video
                this.props.telemetry.warning('Got video specification type, not supported yet so skipping line');
                return null;
            case 41: // Image
                this.props.telemetry.warning('Got image specification type, not supported yet so skipping line');
                return null;
            default:
                this.props.telemetry.warning(`Got unknown specification type ${product.DataTypeValue} so skipping line`);
                return null;
        }
    }

    private _renderCurrencyCell(product: AttributeValue): JSX.Element | null {
        if (product.CurrencyValue !== null && product.CurrencyValue !== undefined) {
            return (
                <span>
                    {product.CurrencyCode}
                    {product.CurrencyValue}
                </span>
            );
        }

        return null;
    }

    private _renderDateTimeCell(product: AttributeValue): JSX.Element | null {
        if (product.DateTimeOffsetValue !== null && product.DateTimeOffsetValue !== undefined && product.DateTimeOffsetValue.toUTCString) {
            return <span>{product.DateTimeOffsetValue.toUTCString()}</span>;
        }

        return null;
    }

    private _renderIntegerCell(product: AttributeValue): JSX.Element | null {
        if (product.IntegerValue !== null && product.IntegerValue !== undefined) {
            return <span>{product.IntegerValue}</span>;
        }

        return null;
    }

    private _renderDecimalCell(product: AttributeValue): JSX.Element | null {
        if (product.FloatValue !== null && product.FloatValue !== undefined) {
            return <span>{product.FloatValue}</span>;
        }

        return null;
    }

    private _renderTextCell(product: AttributeValue): JSX.Element | null {
        if (product.TextValue !== null && product.TextValue !== undefined) {
            // tslint:disable-next-line
            return <span dangerouslySetInnerHTML={Msdyn365.getRichTextHtml(product.TextValue)}/>;
        }

        return null;
    }

    private _renderTrueFalseCell(product: AttributeValue): JSX.Element | null {
        // TODO 20369885 setting to default value is needed to work around a platform bug where
        // config string value does not get its default value.
        if (product.BooleanValue) {
            return <span>{this.props.resources.trueValueText ? this.props.resources.trueValueText : 'Yes'}</span>;
        } else {
            return <span>{this.props.resources.falseValueText ? this.props.resources.falseValueText : 'No'}</span>;
        }
    }
}

export default ProductSpecification;
