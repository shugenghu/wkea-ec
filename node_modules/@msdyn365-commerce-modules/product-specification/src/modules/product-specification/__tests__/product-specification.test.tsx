/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { AttributeValue, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import ProductSpecificationView from '../product-specification.view';

import * as React from 'react';
// tslint:disable-next-line:ordered-imports
import { shallow, render } from 'enzyme';

// @ts-ignore
import getAttributesForSelectedVariant from '../../../dataActions/get-attributes-for-selected-variant';

import ProductSpecification, { IProductSpecificationViewProps } from '../product-specification';
import { IProductSpecificationData } from '../product-specification.data';
import { IProductSpecificationConfig, IProductSpecificationProps, IProductSpecificationResources } from '../product-specification.props.autogenerated';

const mockResults: AttributeValue[] = [
    {
        Name: 'Empty Type YESSHOW',
        DataTypeValue: 0
    },
    {
        Name: 'Currency YESSHOW',
        DataTypeValue: 1,
        CurrencyCode: '$',
        CurrencyValue: 10
    },
    {
        Name: 'Currency No Value NOSHOW',
        DataTypeValue: 1,
        CurrencyCode: '$',
    },
    {
        Name: 'Currency No Code YESSHOW',
        DataTypeValue: 1,
        CurrencyValue: 10
    },
    {
        Name: 'DateTime Has Value YESSHOW',
        DataTypeValue: 2,
        DateTimeOffsetValue: new Date('2015-06-01T00:00:00Z'),
    },
    {
        Name: 'DateTime No Value NOSHOW',
        DataTypeValue: 2,
        DateTimeOffsetValue: undefined
    },
    {
        Name: 'Decimal Has Value YESSHOW',
        DataTypeValue: 3,
        FloatValue: 10.5
    },
    {
        Name: 'Decimal No Value NOSHOW',
        DataTypeValue: 3,
        FloatValue: undefined
    },
    {
        Name: 'Decimal Zero Value YESSHOW',
        DataTypeValue: 3,
        FloatValue: 0
    },
    {
        Name: 'Integer has value YESSHOW',
        DataTypeValue: 4,
        IntegerValue: 10
    },
    {
        Name: 'Integer No Value NOSHOW',
        DataTypeValue: 4,
        IntegerValue: undefined
    },
    {
        Name: 'Integer Zero Value YESSHOW',
        DataTypeValue: 4,
        IntegerValue: 0
    },
    {
        Name: 'Text YESSHOW',
        DataTypeValue: 5,
        TextValue: 'Apple Bottom Jeans'
    },
    {
        Name: 'Text No Value NOSHOW',
        DataTypeValue: 5,
        TextValue: undefined,
    },
    {
        Name: 'Text Empty Text YESSHOW',
        DataTypeValue: 5,
        TextValue: '',
    },
    {
        Name: 'TrueFalse True Value YESSHOW',
        DataTypeValue: 6,
        BooleanValue: true
    },
    {
        Name: 'TrueFalse False Value YESSHOW',
        DataTypeValue: 6,
        BooleanValue: false
    },
    {
        Name: 'TrueFalse No Value YESSHOW',
        DataTypeValue: 6,
        BooleanValue: undefined
    },
    {
        Name: 'Video NOSHOW',
        DataTypeValue: 40
    },
    {
        Name: 'Image NOSHOW',
        DataTypeValue: 41
    },
    {
        Name: 'Unknown NOSHOW',
        DataTypeValue: 99
    }
];

const mockResultsOnlyBad: AttributeValue[] = [
    {
        Name: 'Currency No Value NOSHOW',
        DataTypeValue: 1,
        CurrencyCode: '$',
    },
    {
        Name: 'Text No Value NOSHOW',
        DataTypeValue: 5,
        TextValue: undefined,
    }
];

const emptyResults: AttributeValue[] = [
];

const mockDataNoResults: IProductSpecificationData = {
    product: wrapInResolvedAsyncResult<SimpleProduct>(null),
    productSpecificationData: wrapInResolvedAsyncResult(emptyResults)
};

const mockDataWithOnlyBadResults: IProductSpecificationData = {
    product: wrapInResolvedAsyncResult<SimpleProduct>(null),
    productSpecificationData: wrapInResolvedAsyncResult(mockResultsOnlyBad)
};

const mockDataWithResults: IProductSpecificationData = {
    product: wrapInResolvedAsyncResult<SimpleProduct>(null),
    productSpecificationData: wrapInResolvedAsyncResult(mockResults)
};

const defaultMockConfig: IProductSpecificationConfig = {
    heading:{
        text:'Test Config'
    }
};

const defaultMockResources: IProductSpecificationResources = {
    trueValueText: 'Yes',
    falseValueText: 'No'
};

describe('Product Specifications', () => {
    it('renders correctly with no specifications', () => {
        let moduleProps: IProductSpecificationProps<IProductSpecificationData>;

        moduleProps = {
            ...buildMockModuleProps(mockDataNoResults, {}, defaultMockConfig) as IProductSpecificationProps<IProductSpecificationData>,
            resources:defaultMockResources,
            // @ts-ignore
            renderView: ProductSpecificationView
        };

        const component = render(<ProductSpecification {...moduleProps} />);
        expect(component).toMatchSnapshot('No Specifications');
    });

    it('renders correctly when all included specifications are filtered out', () => {
        let moduleProps: IProductSpecificationProps<IProductSpecificationData>;

        moduleProps = {
            ...buildMockModuleProps(mockDataWithOnlyBadResults, {}, defaultMockConfig) as IProductSpecificationProps<IProductSpecificationData>,
            resources:defaultMockResources,
            // @ts-ignore
            renderView: ProductSpecificationView
        };

        const component = render(<ProductSpecification {...moduleProps} />);
        expect(component).toMatchSnapshot('No Specifications');
    });

    it('renders all specifications correctly', () => {
        let moduleProps: IProductSpecificationProps<IProductSpecificationData>;

        moduleProps = {
            ...buildMockModuleProps(mockDataWithResults, {}, defaultMockConfig) as IProductSpecificationProps<IProductSpecificationData>,
            resources:defaultMockResources,
            // @ts-ignore
            renderView: ProductSpecificationView
        };

        const component = render(<ProductSpecification {...moduleProps} />);
        expect(component).toMatchSnapshot('With Specifications');
    });
    it('renders correctly in container', () => {
        const moduleProps = {
          ...buildMockModuleProps(mockDataWithResults, {}, defaultMockConfig) as IProductSpecificationProps<IProductSpecificationData>,
          resources: defaultMockResources,
          // @ts-ignore
          renderView: jest.fn(props => {return <div props={props}/>;})
        };
        const productSpecification = shallow(<ProductSpecification {...moduleProps}/>);
        expect(moduleProps.renderView).toBeCalled();
        const viewProps: IProductSpecificationViewProps = productSpecification.props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.ProductSpecification.className).toEqual('ms-product-specification');
    });
});
