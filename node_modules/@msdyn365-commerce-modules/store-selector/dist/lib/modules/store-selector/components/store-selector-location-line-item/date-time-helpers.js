import get from 'lodash/get';
export const secondsToTime = (seconds) => {
    if (seconds === undefined) {
        return undefined;
    }
    else {
        let hours = Math.floor(seconds / (60 * 60));
        const ampm = hours >= 12 ? 'pm' : 'am';
        hours = hours % 12;
        hours = hours ? hours : 12;
        const divisorForMinutes = seconds % (60 * 60);
        const minutes = Math.floor(divisorForMinutes / 60) < 10 ? `0${Math.floor(divisorForMinutes / 60)}` : Math.floor(divisorForMinutes / 60);
        return `${hours}:${minutes} ${ampm}`;
    }
};
const getShortTimeString = (day, resources) => {
    switch (day) {
        case 'MON':
            return resources.days.monday;
        case 'TUE':
            return resources.days.tuesday;
        case 'WED':
            return resources.days.wednesday;
        case 'THU':
            return resources.days.thursday;
        case 'FRI':
            return resources.days.friday;
        case 'SAT':
            return resources.days.saturday;
        default:
            return resources.days.sunday;
    }
};
const getFullTimeString = (day, resources) => {
    switch (day) {
        case 'MON':
            return resources.days.mondayFull;
        case 'TUE':
            return resources.days.tuesdayFull;
        case 'WED':
            return resources.days.wednesdayFull;
        case 'THU':
            return resources.days.thursdayFull;
        case 'FRI':
            return resources.days.fridayFull;
        case 'SAT':
            return resources.days.saturdayFull;
        default:
            return resources.days.sundayFull;
    }
};
const buildHoursDisplayInfo = (startDay, endDay, hoursInfo, resources) => {
    return {
        startDayShort: getShortTimeString(startDay, resources),
        startDayFull: getFullTimeString(startDay, resources),
        endDayShort: startDay !== endDay ? getShortTimeString(endDay, resources) : undefined,
        endDayFull: startDay !== endDay ? getFullTimeString(endDay, resources) : undefined,
        timeRange: hoursInfo
    };
};
const shouldMergeLines = (firstLine, secondLine) => {
    if (firstLine.isClosed && secondLine.isClosed) {
        return true;
    }
    if (!firstLine.isClosed && !secondLine.isClosed) {
        return firstLine.openTime === secondLine.openTime && firstLine.closeTime === secondLine.closeTime;
    }
    return false;
};
const getStoreHoursData = (storeHours, dateForLookup) => {
    return {
        isClosed: get(storeHours, `IsClosedOn${dateForLookup}`, false),
        openTime: get(storeHours, `${dateForLookup}OpenTime`, undefined),
        closeTime: get(storeHours, `${dateForLookup}CloseTime`, undefined)
    };
};
const buildStoreHoursString = (hoursInfo, resources) => {
    if (hoursInfo.isClosed) {
        return resources.closedText;
    }
    else {
        const openFrom = secondsToTime(hoursInfo.openTime);
        const openTo = secondsToTime(hoursInfo.closeTime);
        return `${openFrom}â€“${openTo}`;
    }
};
export const buildStoreHours = (storeHours, resources) => {
    const storeHoursList = [];
    const mondayHours = getStoreHoursData(storeHours, 'Monday');
    const tuesdayHours = getStoreHoursData(storeHours, 'Tuesday');
    const wednesdayHours = getStoreHoursData(storeHours, 'Wednesday');
    const thursdayHours = getStoreHoursData(storeHours, 'Thursday');
    const fridayHours = getStoreHoursData(storeHours, 'Friday');
    const saturdayHours = getStoreHoursData(storeHours, 'Saturday');
    const sundayHours = getStoreHoursData(storeHours, 'Sunday');
    let periodStart = 'MON';
    let periodEnd = 'MON';
    if (!shouldMergeLines(mondayHours, tuesdayHours)) {
        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(mondayHours, resources), resources));
        periodStart = 'TUE';
    }
    periodEnd = 'TUE';
    if (!shouldMergeLines(tuesdayHours, wednesdayHours)) {
        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(tuesdayHours, resources), resources));
        periodStart = 'WED';
    }
    periodEnd = 'WED';
    if (!shouldMergeLines(wednesdayHours, thursdayHours)) {
        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(wednesdayHours, resources), resources));
        periodStart = 'THU';
    }
    periodEnd = 'THU';
    if (!shouldMergeLines(thursdayHours, fridayHours)) {
        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(thursdayHours, resources), resources));
        periodStart = 'FRI';
    }
    periodEnd = 'FRI';
    if (!shouldMergeLines(fridayHours, saturdayHours)) {
        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(fridayHours, resources), resources));
        periodStart = 'SAT';
    }
    periodEnd = 'SAT';
    if (!shouldMergeLines(saturdayHours, sundayHours)) {
        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(saturdayHours, resources), resources));
        periodStart = 'SUN';
    }
    periodEnd = 'SUN';
    storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(sundayHours, resources), resources));
    return storeHoursList;
};
//# sourceMappingURL=date-time-helpers.js.map