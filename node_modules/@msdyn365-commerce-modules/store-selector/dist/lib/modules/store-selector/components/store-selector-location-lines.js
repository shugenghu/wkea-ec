import { __decorate } from "tslib";
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { StoreSelectorLocationLineItemComponent } from './store-selector-location-line-item';
let StoreSelectorLocationLines = class StoreSelectorLocationLines extends React.PureComponent {
    constructor(props) {
        super(props);
        this._scrollIntoView = () => {
            const selectedLocationDiv = this.selectedLocationRef.current;
            const parent = selectedLocationDiv?.parentElement;
            if (selectedLocationDiv && parent) {
                if (parent.scrollTop > selectedLocationDiv.offsetTop) {
                    parent.scrollTop = selectedLocationDiv.offsetTop;
                }
                else if (selectedLocationDiv.offsetTop + selectedLocationDiv.clientHeight > parent.scrollTop + parent.clientHeight) {
                    parent.scrollTop = selectedLocationDiv.offsetTop + selectedLocationDiv.clientHeight - parent.clientHeight;
                }
            }
        };
        this._isCurrentLocation = (location) => (this.props.alreadySelectedLocation && location && this.props.alreadySelectedLocation.OrgUnitNumber === location.OrgUnitNumber) || false;
        this._isProductInStock = (ItemAvailabilities) => {
            if (!this.props.enableOutOfStockCheck) {
                return true;
            }
            if (ItemAvailabilities && ItemAvailabilities.length > 0) {
                return ItemAvailabilities[0].AvailableQuantity ? ItemAvailabilities[0].AvailableQuantity > 0 : false;
            }
            return false;
        };
        this._stockInventoryLabel = (availabilityWithHours) => {
            if (availabilityWithHours?.ProductInventoryInformation
                && availabilityWithHours?.ProductInventoryInformation.length > 0) {
                for (let i = 0; i < availabilityWithHours.ProductInventoryInformation.length; i++) {
                    if (availabilityWithHours.OrgUnitAvailability?.OrgUnitLocation?.InventoryLocationId === availabilityWithHours.ProductInventoryInformation[i].InventLocationId) {
                        return availabilityWithHours.ProductInventoryInformation[i].StockLevelLabel;
                    }
                }
            }
            return undefined;
        };
        this._mapResources = (resources) => {
            return {
                contactInfoHeader: resources.contactText,
                storeHoursHeader: resources.timeText,
                availabilityInfoHeader: resources.availabilityText,
                closedText: resources.storeHoursClosedText,
                outOfStock: resources.outOfStockText,
                inStock: resources.inStockText,
                currentLocation: resources.selectedStoreLocationText,
                selectLocation: resources.selectStoreText,
                selectLocationAriaLabelFormat: resources.selectStoreAriaFormatText,
                setAsPreferredStoreText: resources.setAsPreferredStoreText,
                setAsPreferredStoreTextAriaLabel: resources.setAsPreferredStoreTextAriaLabel,
                preferredStoreText: resources.preferredStoreText,
                preferredStoreAriaLabel: resources.preferredStoreAriaLabel,
                days: {
                    monday: resources.storeHoursMondayText,
                    tuesday: resources.storeHoursTuesdayText,
                    wednesday: resources.storeHoursWednesdayText,
                    thursday: resources.storeHoursThursdayText,
                    friday: resources.storeHoursFridayText,
                    saturday: resources.storeHoursSaturdayText,
                    sunday: resources.storeHoursSundayText,
                    mondayFull: resources.storeHoursMondayFullText,
                    tuesdayFull: resources.storeHoursTuesdayFullText,
                    wednesdayFull: resources.storeHoursWednesdayFullText,
                    thursdayFull: resources.storeHoursThursdayFullText,
                    fridayFull: resources.storeHoursFridayFullText,
                    saturdayFull: resources.storeHoursSaturdayFullText,
                    sundayFull: resources.storeHoursSundayFullText
                }
            };
        };
        this.selectedLocationRef = React.createRef();
    }
    componentDidUpdate(prevProps) {
        if (this.props.selectedStoreLocationId !== prevProps.selectedStoreLocationId) {
            this._scrollIntoView();
        }
    }
    componentDidMount() {
        if (this.props.locations) {
            this._stores = this._sortStores(this.props.locations);
        }
    }
    render() {
        if (!this._stores || this._stores.length === 0) {
            return null;
        }
        return (React.createElement("div", { className: classnames('ms-store-select__locations', { show: this.props.displayList }), role: 'tablist' }, this._stores.map((store, index) => {
            return this._renderStoreLocation(store, index);
        })));
    }
    _renderStoreLocation(store, index) {
        const orgUnitLocation = store?.OrgUnitAvailability?.OrgUnitLocation;
        const selectedStoreLocationId = this.props.selectedStoreLocationId;
        return orgUnitLocation && (React.createElement("div", { className: classnames('ms-store-select__location', { selected: selectedStoreLocationId === orgUnitLocation.OrgUnitNumber }), key: index, role: 'tab', onClick: () => this.props.onClick(orgUnitLocation.OrgUnitNumber), ref: selectedStoreLocationId === orgUnitLocation.OrgUnitNumber ? this.selectedLocationRef : undefined },
            React.createElement(StoreSelectorLocationLineItemComponent, { location: orgUnitLocation, storeHours: store.StoreHours, resources: this._mapResources(this.props.resources), preferredDistanceUnit: this.props.preferredDistanceUnit, isCurrentLocation: this._isCurrentLocation(orgUnitLocation), isInStock: this._isProductInStock(store?.OrgUnitAvailability?.ItemAvailabilities), handlers: { onSelected: this.props.onLocationSelected, onSetAsPreferredStore: this.props.onSetAsPreferredStore, onRemovePreferredStore: this.props.onRemovePreferredStore }, stockStatusLabel: this._stockInventoryLabel(store), storeLocatorView: this.props.storeLocatorView, index: (index + 1).toString(), preferredStoreLocationId: this.props.preferredStoreLocationId, isPreferredStoreEnabled: this.props.isPreferredStoreEnabled, telemetryContent: this.props.telemetryContent, isLocationDisabled: this.props.isLocationDisabled })));
    }
    _sortStores(stores) {
        const isPreferredStore = (value) => this.props.isPreferredStoreEnabled && this.props.preferredStoreLocationId &&
            value?.OrgUnitAvailability?.OrgUnitLocation?.OrgUnitNumber === this.props.preferredStoreLocationId;
        return [
            ...stores.filter(isPreferredStore),
            ...stores.filter(store => !isPreferredStore(store))
        ];
    }
};
__decorate([
    observable
], StoreSelectorLocationLines.prototype, "_stores", void 0);
StoreSelectorLocationLines = __decorate([
    observer
], StoreSelectorLocationLines);
export { StoreSelectorLocationLines };
//# sourceMappingURL=store-selector-location-lines.js.map