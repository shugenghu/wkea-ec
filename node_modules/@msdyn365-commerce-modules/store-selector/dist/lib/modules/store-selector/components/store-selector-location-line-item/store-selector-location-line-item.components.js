import * as React from 'react';
import { getPayloadObject, getTelemetryAttributes, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { buildStoreHours, secondsToTime } from './date-time-helpers';
const StoreSelectorLocationLineItemComponentActions = {
    onLocationSelected(props) {
        props.handlers.onSelected(props.location);
    },
    onSetAsPreferredStore(props) {
        props.handlers.onSetAsPreferredStore(props.location.OrgUnitNumber);
    },
    onRemovePreferredStore(props) {
        props.handlers.onRemovePreferredStore();
    }
};
const renderStoreHours = (storeHours, location, resources) => {
    if (storeHours && storeHours.RegularStoreHours) {
        const storeHoursList = buildStoreHours(storeHours.RegularStoreHours, resources);
        return (React.createElement("div", { className: 'ms-store-select__store-hours-details-group' }, storeHoursList.map(displayTime => (React.createElement("div", { className: 'ms-store-select__store-hours-details' },
            displayTime.endDayShort ? (React.createElement("div", { className: 'ms-store-select__store-hours-day' },
                React.createElement("abbr", { title: displayTime.startDayFull }, displayTime.startDayShort),
                "\u2013",
                React.createElement("abbr", { title: displayTime.endDayFull }, displayTime.endDayShort))) : (React.createElement("div", { className: 'ms-store-select__store-hours-day' },
                React.createElement("abbr", { title: displayTime.startDayFull }, displayTime.startDayShort))),
            React.createElement("div", { className: 'ms-store-select__store-hours-time' }, displayTime.timeRange))))));
    }
    else {
        const storeOpenFrom = secondsToTime(location.OpenFrom);
        const storeOpenTo = secondsToTime(location.OpenTo);
        return (React.createElement("div", { className: 'ms-store-select__store-hours-details' },
            storeOpenFrom,
            "-",
            storeOpenTo));
    }
};
const buildDistanceString = (distance, preferredDistanceUnit, isLocationDisabled) => {
    if (distance === undefined || isLocationDisabled) {
        return undefined;
    }
    else if (distance < 1) {
        return `(<1 ${preferredDistanceUnit})`;
    }
    else {
        return `(${Math.floor(distance)} ${preferredDistanceUnit})`;
    }
};
const extractPhoneNumber = (contacts) => {
    if (!contacts) {
        return undefined;
    }
    const allPhoneContacts = contacts.filter(contact => contact.ContactTypeValue === 1 && !contact.IsPrivate);
    if (allPhoneContacts && allPhoneContacts.length > 0) {
        const primaryPhoneContact = allPhoneContacts.find(contact => contact.IsPrimary);
        if (primaryPhoneContact) {
            return primaryPhoneContact.Locator;
        }
        return allPhoneContacts[0].Locator;
    }
    return undefined;
};
const StoreSelectorLocationLineItem = (props) => {
    const onClick = () => StoreSelectorLocationLineItemComponentActions.onLocationSelected(props);
    const { hideStockStatus, isCurrentLocation, isInStock, location, resources, storeHours, stockStatusLabel, storeLocatorView, index, preferredStoreLocationId, isPreferredStoreEnabled, isLocationDisabled, telemetryContent } = props;
    const storeName = location.OrgUnitName;
    const distanceAsString = buildDistanceString(location.Distance, props.preferredDistanceUnit, isLocationDisabled);
    const storeAddress = location.Address;
    const phoneNumber = extractPhoneNumber(location.Contacts);
    const resourceLabel = isInStock ? resources.inStock : resources.outOfStock;
    const stockLabel = stockStatusLabel ? stockStatusLabel : undefined;
    const stockText = (hideStockStatus) ? undefined : (stockLabel ? stockLabel : resourceLabel);
    const canSelectLocation = hideStockStatus || isInStock;
    const pickupInStoreButtonText = resources.selectLocation;
    const pickupInStoreAriaLabel = resources.selectLocationAriaLabelFormat.replace('{StoreName}', storeName || '');
    const isPreferredStore = preferredStoreLocationId === location.OrgUnitNumber;
    const payLoad = getPayloadObject('click', telemetryContent, TelemetryConstant.PickupInStore);
    const attributes = getTelemetryAttributes(telemetryContent, payLoad);
    payLoad.contentAction.etext = TelemetryConstant.PreferredStore;
    const preferredStoreAttr = getTelemetryAttributes(telemetryContent, payLoad);
    payLoad.contentAction.etext = TelemetryConstant.RemovePreferredStore;
    const RemovePreferredStoreAttr = getTelemetryAttributes(telemetryContent, payLoad);
    const setAsPreferredStore = () => StoreSelectorLocationLineItemComponentActions.onSetAsPreferredStore(props);
    const removePreferredStore = () => StoreSelectorLocationLineItemComponentActions.onRemovePreferredStore(props);
    return (React.createElement("div", { className: 'ms-store-select__location-line-item' },
        React.createElement("div", { className: 'ms-store-select__location-line-item-header' },
            storeLocatorView && React.createElement("span", { className: 'ms-store-select__location-line-item-store-index' }, index),
            React.createElement("span", { className: 'ms-store-select__location-line-item-store-name' }, storeName),
            distanceAsString ? React.createElement("span", { className: 'ms-store-select__location-line-item-store-distance' },
                " ",
                distanceAsString) : false),
        React.createElement("div", { className: 'ms-store-select__location-line-item-content' },
            React.createElement("div", { className: 'ms-store-select__location-line-item-contact-info' },
                React.createElement("p", { className: 'ms-store-select__location-line-header' }, resources.contactInfoHeader),
                storeAddress && (React.createElement("div", { className: 'ms-store-select__location-line-shop-address-section' },
                    React.createElement("span", { className: 'msi msi-map-marker-alt ms-store-select__location-line-shop-address-glyph-icon' }),
                    React.createElement("span", { className: 'ms-store-select__location-line-shop-address-text' }, storeAddress))),
                phoneNumber && (React.createElement("div", { className: 'ms-store-select__location-line-shop-phone-section' },
                    React.createElement("span", { className: 'msi msi-phone ms-store-select__location-line-shop-phone-icon' }),
                    React.createElement("span", { className: 'ms-store-select__location-line-shop-phone-text' }, phoneNumber)))),
            React.createElement("div", { className: 'ms-store-select__location-line-item-store-hours' },
                React.createElement("p", { className: 'ms-store-select__location-line-header' }, resources.storeHoursHeader),
                renderStoreHours(storeHours, location, resources)),
            !storeLocatorView &&
                React.createElement("div", { className: 'ms-store-select__location-line-item-store-availability' },
                    React.createElement("p", { className: 'ms-store-select__location-line-header' }, resources.availabilityInfoHeader),
                    stockText && React.createElement("p", { className: 'ms-store-select__location-line-stock-status' }, stockText),
                    isCurrentLocation ?
                        (React.createElement("p", { className: 'ms-store-select__location-line-current-location' }, resources.currentLocation)) : canSelectLocation ?
                        (React.createElement("button", Object.assign({ className: 'ms-store-select__location-line-select-store', "aria-label": pickupInStoreAriaLabel, onClick: onClick }, attributes), pickupInStoreButtonText)) : (false)),
            isPreferredStoreEnabled ?
                isPreferredStore ?
                    React.createElement("button", Object.assign({ className: 'ms-store-select__location-line-item-preferred-store', "aria-label": resources.preferredStoreAriaLabel, onClick: removePreferredStore }, RemovePreferredStoreAttr), resources.preferredStoreText)
                    : React.createElement("button", Object.assign({ className: 'ms-store-select__location-line-item-set-as-preferred-store', "aria-label": resources.setAsPreferredStoreTextAriaLabel }, preferredStoreAttr, { onClick: setAsPreferredStore }), resources.setAsPreferredStoreText)
                : null)));
};
export const StoreSelectorLocationLineItemComponent = StoreSelectorLocationLineItem;
//# sourceMappingURL=store-selector-location-line-item.components.js.map