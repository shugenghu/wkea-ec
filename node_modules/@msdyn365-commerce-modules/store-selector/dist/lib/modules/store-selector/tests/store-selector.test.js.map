{"version":3,"file":"store-selector.test.js","sourceRoot":"./src/","sources":["modules/store-selector/tests/store-selector.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILoadMapApiInput, IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';\nimport { AsyncResult, buildMockCoreContext, buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';\nimport { OrgUnitLocation } from '@msdyn365-commerce/retail-proxy';\nimport { mount } from 'enzyme';\nimport { observable } from 'mobx';\nimport * as React from 'react';\nimport { IStoreSelectorData, IStoreSelectorProps, IStoreSelectorViewProps } from '../../..';\nimport * as RetailActions from '../../../../../retail-actions';\nimport { IStoreSelectorSearchFormProps } from '../components';\nimport StoreSelector from '../store-selector';\nimport { IStoreSelectorConfig, IStoreSelectorResources, mode, searchRadiusUnit, style } from '../store-selector.props.autogenerated';\n\nconst mockContext = buildMockCoreContext({\n    app: {\n        config: {\n            outOfStockThreshold: 5,\n            enableStockCheck: true\n        }\n    },\n    actionContext: {\n        requestContext: {\n            // @ts-ignore\n            channel: {\n                BingMapsApiKey: '1001',\n                BingMapsEnabled: true\n            }\n        }\n    }\n    // tslint:disable-next-line:no-any\n}) as ICoreContext<any>;\n\nconst mockData: IStoreSelectorData = {\n    storeSelectorStateManager: {\n        status: 'SUCCESS',\n        result: {}\n    } as AsyncResult<IStoreSelectorStateManager>,\n    availabilitiesWithHours: {} as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n    storeLocations: {} as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>\n};\n\nconst mockConfig: IStoreSelectorConfig = {\n    lookupRadius: 100,\n    searchRadiusUnit: searchRadiusUnit.kilometers\n};\n\nconst mockResources: IStoreSelectorResources = {\n    emptyLocationsText: 'No Nearby Locations',\n    selectStoreText: 'Pick Up Here',\n    selectStoreAriaFormatText: 'Pick Up At {StoreName}',\n    timeText: 'Store Hours',\n    captionText: 'We’re expanding our pick-up-in-store service to more Microsoft Store locations every day.',\n    milesShortText: 'mi',\n    kilometersShortText: 'mi',\n    outOfStockText: 'Out of stock',\n    inStockText: 'In Stock',\n    selectedStoreLocationText: 'Selected store location',\n    contactText: 'Contact',\n    availabilityText: 'Availability',\n    productDimensionTypeColor: 'Color',\n    productDimensionTypeConfiguration: 'Configuration',\n    productDimensionTypeSize: 'Size',\n    productDimensionTypeStyle: 'Style',\n    storeHoursClosedText: 'Closed',\n    storeHoursMondayText: 'Mon',\n    storeHoursTuesdayText: 'Tue',\n    storeHoursWednesdayText: 'Wed',\n    storeHoursThursdayText: 'Thur',\n    storeHoursFridayText: 'Fri',\n    storeHoursSaturdayText: 'Sat',\n    storeHoursSundayText: 'Sun',\n    storeHoursMondayFullText: 'Monday',\n    storeHoursTuesdayFullText: 'Tuesday',\n    storeHoursWednesdayFullText: 'Wednesday',\n    storeHoursThursdayFullText: 'Thursday',\n    storeHoursFridayFullText: 'Friday',\n    storeHoursSaturdayFullText: 'Saturday',\n    storeHoursSundayFullText: 'Sunday',\n    storeAddressAriaLabel: 'Store address',\n    storePhoneAriaLabel: 'Store phone',\n    storeCountMessage: 'We found {count} stores within {radius} miles of you.',\n    storeAllCountMessage: 'We found {count} stores.',\n    storeCountMessageInKm: 'We found {count} stores within {radius} kilometers of you.',\n    searchPlaceholderText: 'Search',\n    searchInputAriaLabel: 'Search input',\n    searchButtonAriaLabel: 'Search',\n    storeSelectorHeaderText: 'Pick a store',\n    storeLocatorHeaderText: 'Store Locator',\n    seeAllStoresText: 'See all stores',\n    setAsPreferredStoreText: 'Set as preferred store',\n    setAsPreferredStoreTextAriaLabel: 'Set as preferred store',\n    preferredStoreText: 'Preferred store',\n    preferredStoreAriaLabel: 'Set as preferred store',\n    viewMapText: 'View Map',\n    viewListText: 'View List'\n};\n\n// @ts-ignore Partial mock\nconst stateManager: IStoreSelectorStateManager = {\n    listMapViewState: {\n        displayList: true,\n        displayMap: false\n    },\n    isMapApiLoaded: true,\n    isDialogOpen: true,\n    loadMapApi: jest.fn().mockResolvedValue(() => (input: ILoadMapApiInput): Promise<void> => { return new Promise((resolve, reject) => { resolve(); }); })\n};\n\ndescribe('searchForm tests', () => {\n    let moduleProps: IStoreSelectorProps<IStoreSelectorData>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n\n        // @ts-ignore\n        RetailActions.getFullAvailableInventoryNearby = jest.fn().mockResolvedValue(undefined);\n    });\n\n    it('doesnt do search if dialog not open', () => {\n        const mockDataNoStoreSelectorStateManager = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataNoStoreSelectorStateManager, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).not.toBeCalled();\n    });\n\n    it('does search when getAndUpdateUserLocation callback fired', async () => {\n        // @ts-ignore Overriding read only for test purposes\n        window.navigator.geolocation = {\n            getCurrentPosition: jest.fn().mockImplementation((success, failure) => {\n                success({\n                    coords: {\n                        latitude: 20,\n                        longitude: 25\n                    }\n                });\n            })\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        moduleProps.data.storeSelectorStateManager = {\n            status: 'SUCCESS',\n            result: {\n                isDialogOpen: true,\n                context: {\n                    product: {\n                        RecordId: 10\n                    }\n                }\n            }\n        } as AsyncResult<IStoreSelectorStateManager>;\n\n        // Clear mocks to reset call count\n        jest.clearAllMocks();\n\n        expect(viewProps.callbacks.getAndUpdateUserLocation());\n\n        expect(RetailActions.getFullAvailableInventoryNearby).toBeCalled();\n    });\n\n    it('does search if dialog open property changes', () => {\n        const mockDataNoStoreSelectorStateManager = observable({\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<IStoreSelectorStateManager>,\n        }) as IStoreSelectorData;\n\n        // @ts-ignore Overriding read only for test purposes\n        window.navigator.geolocation = {\n            getCurrentPosition: jest.fn().mockImplementation((success, failure) => {\n                success({\n                    coords: {\n                        latitude: 20,\n                        longitude: 25\n                    }\n                });\n            })\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataNoStoreSelectorStateManager, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        moduleProps.data.storeSelectorStateManager = {\n            status: 'SUCCESS',\n            result: {\n                isDialogOpen: true,\n                context: {\n                    product: {\n                        RecordId: 10\n                    }\n                }\n            }\n        } as AsyncResult<IStoreSelectorStateManager>;\n\n        expect(RetailActions.getFullAvailableInventoryNearby).toBeCalled();\n    });\n\n    it('doesn\\'t search if can\\'t get location due to navigator not being found', () => {\n        const mockDataNoStoreSelectorStateManager = observable({\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<IStoreSelectorStateManager>,\n        }) as IStoreSelectorData;\n\n        // @ts-ignore Overriding read only for test purposes\n        window.navigator.geolocation = {\n            getCurrentPosition: jest.fn().mockImplementation((success, failure) => {\n                failure('Error');\n            })\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataNoStoreSelectorStateManager, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        moduleProps.data.storeSelectorStateManager = {\n            status: 'SUCCESS',\n            result: {\n                isDialogOpen: true,\n                context: {\n                    product: {\n                        RecordId: 10\n                    }\n                }\n            }\n        } as AsyncResult<IStoreSelectorStateManager>;\n\n        expect(RetailActions.getFullAvailableInventoryNearby).not.toBeCalled();\n    });\n\n    it('doesn\\'t search if getting location errors out', () => {\n        const mockDataNoStoreSelectorStateManager = observable({\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<IStoreSelectorStateManager>,\n        }) as IStoreSelectorData;\n\n        // @ts-ignore Overriding read only for test purposes\n        window.navigator.geolocation = undefined;\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataNoStoreSelectorStateManager, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        moduleProps.data.storeSelectorStateManager = {\n            status: 'SUCCESS',\n            result: {\n                isDialogOpen: true,\n                context: {\n                    product: {\n                        RecordId: 10\n                    }\n                }\n            }\n        } as AsyncResult<IStoreSelectorStateManager>;\n\n        expect(RetailActions.getFullAvailableInventoryNearby).not.toBeCalled();\n    });\n});\n\ndescribe('onDialogClosed tests', () => {\n    let moduleProps: IStoreSelectorProps<IStoreSelectorData>;\n\n    it('no-ops if no state manager', async () => {\n        const mockDataNoStoreSelectorStateManager = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataNoStoreSelectorStateManager, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        await expect(viewProps.callbacks.closeDialog()).resolves.toBeUndefined();\n    });\n\n    it('calls closeDialog on state manager', async () => {\n        const mockDataLocal = {\n            ...mockData,\n            // @ts-ignore lint doesn't like mocking\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                result: {\n                    closeDialog: jest.fn()\n                }\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataLocal, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        await expect(viewProps.callbacks.closeDialog()).resolves.toBeUndefined();\n\n        expect(mockDataLocal.storeSelectorStateManager.result!.closeDialog).toBeCalled();\n    });\n});\n\ndescribe('searchForm tests', () => {\n    let moduleProps: IStoreSelectorProps<IStoreSelectorData>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n\n        // @ts-ignore\n        RetailActions.getFullAvailableInventoryNearby = jest.fn().mockResolvedValue(undefined);\n    });\n\n    it('searchTermChanged callback updates state', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    geoLocate: jest.fn()\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n        expect(result.state('searchTerm')).toEqual('');\n        await expect(viewProps.callbacks.searchTermChanged('Seattle')).resolves.toBeUndefined();\n        expect(result.state('searchTerm')).toEqual('Seattle');\n    });\n\n    it('search callback no-ops if no search term passed', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    geoLocate: jest.fn()\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n        await expect(searchFormProps.performSearch('')).resolves.toBeUndefined();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).not.toBeCalled();\n    });\n\n    it('search callback no-ops if no state manager', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n\n        await expect(searchFormProps.performSearch('sample')).resolves.toBeUndefined();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).not.toBeCalled();\n    });\n\n    it('search is disabled if missing BingMapsApiKey', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    geoLocate: jest.fn().mockResolvedValue(undefined)\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        const localMockContext = buildMockCoreContext({\n            app: {\n                config: {\n                    outOfStockThreshold: 5,\n                    enableStockCheck: true\n                }\n            },\n            actionContext: {\n                requestContext: {\n                    // @ts-ignore\n                    channel: {\n                        BingMapsApiKey: undefined,\n                        BingMapsEnabled: true\n                    }\n                }\n            }\n            // tslint:disable-next-line:no-any\n        }) as ICoreContext<any>;\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n\n        expect(searchFormProps.isMapDisabled).toBe(true);\n    });\n\n    it('search callback skips future steps if no location returned by geoLocate', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    geoLocate: jest.fn().mockResolvedValue(undefined)\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n\n        expect(searchFormProps.isMapDisabled).toBe(false);\n\n        await expect(searchFormProps.performSearch('sample')).resolves.toBeUndefined();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).not.toBeCalled();\n    });\n\n    it('search callback calls getFullAvailableInventoryNearby if location returned by geoLocate', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    context: {\n                        product: {\n                            RecordId: 25\n                        }\n                    },\n                    geoLocate: jest.fn().mockResolvedValue({ latitude: 10, longitude: 15 })\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n\n        await expect(searchFormProps.performSearch('   ')).resolves.toBeUndefined();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).toBeCalledWith(\n            expect.objectContaining({\n                latitude: 10,\n                longitude: 15,\n                radius: 100,\n                productId: 25\n            }),\n            expect.anything()\n        );\n    });\n\n    it('search callback cleanly handles if getFullAvailableInventoryNearby throws', async () => {\n        // @ts-ignore\n        RetailActions.getFullAvailableInventoryNearby = jest.fn().mockRejectedValueOnce('Fail');\n\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    context: {\n                        product: {\n                            RecordId: 25\n                        }\n                    },\n                    geoLocate: jest.fn().mockResolvedValue({ latitude: 10, longitude: 15 })\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n\n        await expect(searchFormProps.performSearch('sample')).resolves.toBeUndefined();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).toBeCalledWith(\n            expect.objectContaining({\n                latitude: 10,\n                longitude: 15,\n                radius: 100,\n                productId: 25\n            }),\n            expect.anything()\n        );\n    });\n\n    it('search callback calls getFullAvailableInventoryNearby if location returned by geoLocate has expected default values', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    context: {\n                        product: {\n                            RecordId: 25\n                        }\n                    },\n                    geoLocate: jest.fn().mockResolvedValue({ latitude: undefined, longitude: undefined })\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        const localMockContext = buildMockCoreContext({\n            app: {\n                config: {\n                    outOfStockThreshold: 5,\n                    enableStockCheck: true,\n                    lookupRadius: undefined\n                }\n            }\n            // tslint:disable-next-line:no-any\n        }) as ICoreContext<any>;\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, {}, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n\n        await expect(searchFormProps.performSearch('sample')).resolves.toBeUndefined();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).toBeCalledWith(\n            expect.objectContaining({\n                latitude: 0,\n                longitude: 0,\n                radius: 50,\n                productId: 25\n            }),\n            expect.anything()\n        );\n    });\n\n    it('search callback calls doesnt call getFullAvailableInventoryNearby if no product found', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    context: {\n                        product: undefined\n                    },\n                    geoLocate: jest.fn().mockResolvedValue({ latitude: undefined, longitude: undefined })\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        const localMockContext = buildMockCoreContext({\n            app: {\n                config: {\n                    outOfStockThreshold: 5,\n                    enableStockCheck: true,\n                    lookupRadius: undefined\n                }\n            }\n            // tslint:disable-next-line:no-any\n        }) as ICoreContext<any>;\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, {}, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n\n        await expect(searchFormProps.performSearch('sample')).resolves.toBeUndefined();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).not.toBeCalled();\n    });\n\n    it('cleanly handles getFullAvailableInventoryNearby failure', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    geoLocate: jest.fn().mockResolvedValue({ latitude: undefined, longitude: undefined })\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        // @ts-ignore\n        RetailActions.getFullAvailableInventoryNearby = jest.fn().mockRejectedValueOnce('Fail');\n\n        const localMockContext = buildMockCoreContext({\n            app: {\n                config: {\n                    outOfStockThreshold: 5,\n                    enableStockCheck: true,\n                    lookupRadius: undefined\n                }\n            }\n            // tslint:disable-next-line:no-any\n        }) as ICoreContext<any>;\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, {}, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.search).toBeDefined();\n\n        // @ts-ignore\n        const searchFormProps: IStoreSelectorSearchFormProps = viewProps.search!.props as IStoreSelectorSearchFormProps;\n\n        expect(searchFormProps).toBeDefined();\n\n        await expect(searchFormProps.performSearch('sample')).resolves.toBeUndefined();\n    });\n});\n\ndescribe('locationsList tests', () => {\n    let moduleProps: IStoreSelectorProps<IStoreSelectorData>;\n\n    it('locationsList is empty if no availabilitiesWithHours', async () => {\n        const mockDataNoLocations = {\n            ...mockData,\n            availabilitiesWithHours: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataNoLocations, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).toBe(undefined);\n    });\n\n    it('locationsList is empty if availabilitiesWithHours is empty', async () => {\n        const mockDataEmptyLocations = {\n            ...mockData,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataEmptyLocations, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).toBe(undefined);\n    });\n\n    it('locationsList is not empty if availabilitiesWithHours is not empty', async () => {\n        const mockDataValidLocations = {\n            ...mockData,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataValidLocations, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        expect(locationLinesProps.outOfStockThreshold).toEqual(5);\n        expect(locationLinesProps.enableOutOfStockCheck).toEqual(true);\n        expect(locationLinesProps.alreadySelectedLocation).toBeUndefined();\n    });\n\n    it('Passes already selected location if present', async () => {\n        const orgUnitLocation: OrgUnitLocation = {};\n\n        const mockDataValidLocations = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    context: {\n                        alreadySelectedLocation: orgUnitLocation\n                    }\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataValidLocations, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        expect(locationLinesProps.alreadySelectedLocation).toEqual(orgUnitLocation);\n    });\n\n    it('locationsList is gets default values if not present in config', async () => {\n        const mockDataEmptyLocations = {\n            ...mockData,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const localMockContext = {\n            ...mockContext,\n            app: {\n                config: {}\n            }\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataEmptyLocations, {}, mockConfig, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        expect(locationLinesProps.outOfStockThreshold).toEqual(0);\n        expect(locationLinesProps.enableOutOfStockCheck).toEqual(false);\n    });\n\n    it('locationsList onLocationSelected callback cleanly no-ops if no state found', async () => {\n        const mockDataEmptyLocations = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'FAILED',\n                result: undefined\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const localMockContext = {\n            ...mockContext,\n            app: {\n                config: {}\n            }\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockDataEmptyLocations, {}, mockConfig, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await expect(locationLinesProps.onLocationSelected(undefined)).resolves.toBeUndefined();\n    });\n\n    it('locationsList onLocationSelected skips onLocationSelected but closes dialog if no context found', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    closeDialog: jest.fn(),\n                    context: undefined\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const localMockContext = {\n            ...mockContext,\n            app: {\n                config: {}\n            }\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await expect(locationLinesProps.onLocationSelected('search')).resolves.toBeUndefined();\n\n        expect(localMockData.storeSelectorStateManager.result!.closeDialog).toBeCalled();\n    });\n\n    it('locationsList onLocationSelected calls onLocationSelected and closes dialog if context found', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    closeDialog: jest.fn(),\n                    context: {\n                        onLocationSelected: jest.fn().mockResolvedValue(undefined)\n                    }\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const localMockContext = {\n            ...mockContext,\n            app: {\n                config: {}\n            }\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await expect(locationLinesProps.onLocationSelected('search')).resolves.toBeUndefined();\n\n        expect(localMockData.storeSelectorStateManager.result!.closeDialog).toBeCalled();\n        expect(localMockData.storeSelectorStateManager.result!.context!.onLocationSelected).toBeCalled();\n    });\n\n    it('locationsList onLocationSelected closes dialog even if onLocationSelected throws', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    closeDialog: jest.fn(),\n                    context: {\n                        onLocationSelected: jest.fn().mockRejectedValue('Fail')\n                    }\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const localMockContext = {\n            ...mockContext,\n            app: {\n                config: {}\n            }\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await expect(locationLinesProps.onLocationSelected('search')).resolves.toBeUndefined();\n\n        expect(localMockData.storeSelectorStateManager.result!.closeDialog).toBeCalled();\n        expect(localMockData.storeSelectorStateManager.result!.context!.onLocationSelected).toBeCalled();\n    });\n});\n\ndescribe('Map tests', () => {\n    let moduleProps: IStoreSelectorProps<IStoreSelectorData>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n    });\n\n    it('Doesn\\'t load map script if BingMapsApiKey is missing', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    loadMapApi: jest.fn().mockResolvedValue(undefined)\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        const localMockContext = buildMockCoreContext({\n            actionContext: {\n                requestContext: {\n                    // @ts-ignore\n                    channel: {\n                        BingMapsApiKey: undefined,\n                        BingMapsEnabled: true\n                    }\n                }\n            },\n            app: {\n                config: {}\n            }\n        });\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(localMockData.storeSelectorStateManager.result?.loadMapApi).not.toBeCalled();\n    });\n\n    it('Doesn\\'t load map script if Map in disabled in HQ', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    loadMapApi: jest.fn().mockResolvedValue(undefined)\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n\n        const localMockContext = buildMockCoreContext({\n            actionContext: {\n                requestContext: {\n                    // @ts-ignore\n                    channel: {\n                        BingMapsApiKey: 'A1001',\n                        BingMapsEnabled: false\n                    }\n                }\n            },\n            app: {\n                config: {}\n            }\n        });\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(localMockData.storeSelectorStateManager.result?.loadMapApi).not.toBeCalled();\n    });\n\n    it('Attaches map autosuggest', async () => {\n\n        moduleProps = {\n            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.callbacks.attachMapAutoSuggest());\n\n        expect(result.exists('#ms-store-select__search-box'));\n\n        expect(result.exists('#ms-store-select__search-box-container'));\n    });\n});\n\ndescribe('Find stores test', () => {\n    let moduleProps: IStoreSelectorProps<IStoreSelectorData>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n    });\n\n    it('doesn\\'t do inventory check but checks store locations only if findStore is passed in config', () => {\n\n        // @ts-ignore\n        RetailActions.getFullAvailableInventoryNearby = jest.fn().mockRejectedValue(undefined);\n        // @ts-ignore\n        RetailActions.getOrgUnitLocationsByArea = jest.fn().mockResolvedValue(undefined);\n\n        // @ts-ignore Overriding read only for test purposes\n        window.navigator.geolocation = {\n            getCurrentPosition: jest.fn().mockImplementation((success, failure) => {\n                success({\n                    coords: {\n                        latitude: 20,\n                        longitude: 25\n                    }\n                });\n            })\n        };\n\n        const mockConfigFindStores: IStoreSelectorConfig = {\n            mode: mode.findStores,\n            style: style.inline,\n            lookupRadius:100\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(mockData, {}, mockConfigFindStores, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const mockLocation = {} as OrgUnitLocation;\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.callbacks.getAndUpdateUserLocation());\n\n        expect(RetailActions.getOrgUnitLocationsByArea).toBeCalled();\n\n        expect(RetailActions.getFullAvailableInventoryNearby).not.toBeCalled();\n\n        expect(viewProps.callbacks.setOrgUnitStoreInformation(mockLocation));\n    });\n\n    it('Sets preferred store', async () => {\n\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    setPreferredStoreLocationId: jest.fn()\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const mockConfigPreferredStore: IStoreSelectorConfig = {\n            setAsPreferredStore: true,\n            lookupRadius:100\n        };\n\n        const localMockContext = {\n            ...mockContext,\n            actionContext: {\n                requestContext: {\n                    // @ts-ignore\n                    cookies: {\n                        isConsentGiven: () => true\n                    }\n                }\n            }\n            // tslint:disable-next-line:no-any\n        } as ICoreContext<any>;\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfigPreferredStore, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await locationLinesProps.onSetAsPreferredStore('SEATTLE');\n\n        expect(viewProps.callbacks.setPreferredStore('SEATTLE'));\n\n        expect(localMockData.storeSelectorStateManager.result!.setPreferredStoreLocationId).toBeCalled();\n    });\n\n    it('Doesn\\'t set preferred store if store id is undefined', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    setPreferredStoreLocationId: jest.fn()\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const mockConfigPreferredStore: IStoreSelectorConfig = {\n            setAsPreferredStore: true,\n            lookupRadius:100\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfigPreferredStore, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await locationLinesProps.onSetAsPreferredStore(undefined);\n\n        expect(viewProps.callbacks.setPreferredStore(undefined));\n\n        expect(localMockData.storeSelectorStateManager.result!.setPreferredStoreLocationId).not.toBeCalled();\n    });\n\n    it('Sets selected store', async () => {\n\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    setSelectedStoreLocationId: jest.fn()\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfig, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await locationLinesProps.onClick('SEATTLE');\n\n        expect(viewProps.callbacks.setSelectedStore('SEATTLE'));\n\n        expect(localMockData.storeSelectorStateManager.result!.setSelectedStoreLocationId).toBeCalled();\n    });\n\n    it('Sets preferred store', async () => {\n\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    setPreferredStoreLocationId: jest.fn()\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const mockConfigPreferredStore: IStoreSelectorConfig = {\n            setAsPreferredStore: true,\n            lookupRadius:100\n        };\n\n        const localMockContext = {\n            ...mockContext,\n            actionContext: {\n                requestContext: {\n                    // @ts-ignore\n                    cookies: {\n                        isConsentGiven: () => true\n                    }\n                }\n            }\n            // tslint:disable-next-line:no-any\n        } as ICoreContext<any>;\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfigPreferredStore, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await locationLinesProps.onSetAsPreferredStore('SEATTLE');\n\n        expect(viewProps.callbacks.setPreferredStore('SEATTLE'));\n\n        expect(localMockData.storeSelectorStateManager.result!.setPreferredStoreLocationId).toBeCalled();\n    });\n\n    it('Doesn\\'t set preferred store if store id is undefined', async () => {\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    setPreferredStoreLocationId: jest.fn()\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const mockConfigPreferredStore: IStoreSelectorConfig = {\n            setAsPreferredStore: true,\n            lookupRadius:100\n        };\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfigPreferredStore, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await locationLinesProps.onSetAsPreferredStore(undefined);\n\n        expect(viewProps.callbacks.setPreferredStore(undefined));\n\n        expect(localMockData.storeSelectorStateManager.result!.setPreferredStoreLocationId).not.toBeCalled();\n    });\n\n    it('Doesn\\'t set preferred store if no cookie concent given', async () => {\n\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: {\n                    setPreferredStoreLocationId: jest.fn()\n                } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n            availabilitiesWithHours: {\n                status: 'SUCCESS',\n                result: [{}] as RetailActions.IFullOrgUnitAvailability[]\n            } as AsyncResult<RetailActions.IFullOrgUnitAvailability[]>,\n        };\n\n        const mockConfigPreferredStore: IStoreSelectorConfig = {\n            setAsPreferredStore: true,\n            lookupRadius:100\n        };\n\n        const localMockContext = {\n            ...mockContext,\n            actionContext: {\n                requestContext: {\n                    // @ts-ignore\n                    cookies: {\n                        isConsentGiven: () => false\n                    }\n                }\n            }\n            // tslint:disable-next-line:no-any\n        } as ICoreContext<any>;\n\n        moduleProps = {\n            ...buildMockModuleProps(localMockData, {}, mockConfigPreferredStore, localMockContext) as IStoreSelectorProps<IStoreSelectorData>,\n            resources: mockResources,\n            // @ts-ignore\n            renderView: jest.fn(props => { return <div props={props} />; })\n        };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n\n        expect(moduleProps.renderView).toBeCalled();\n\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n\n        expect(viewProps).toBeDefined();\n\n        expect(viewProps.locationsList).not.toBe(false);\n\n        // @ts-ignore\n        const locationLinesProps: IStoreSelectorLocationLinesProps = viewProps.locationsList!.props;\n\n        expect(locationLinesProps).toBeDefined();\n\n        await locationLinesProps.onSetAsPreferredStore('SEATTLE');\n\n        expect(viewProps.callbacks.setPreferredStore('SEATTLE'));\n\n        expect(localMockData.storeSelectorStateManager.result!.setPreferredStoreLocationId).not.toBeCalled();\n\n    });\n\n});\n\ndescribe('autosuggest enabled test cases', () => {\n    let moduleProps: IStoreSelectorProps<IStoreSelectorData>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n    });\n\n    it('should render correctly when autosuggest is enabled & store selector object is returned at server side.', () => {\n        // @ts-ignore\n        const localMockData = {\n            ...mockData,\n            storeSelectorStateManager: {\n                status: 'SUCCESS',\n                // @ts-ignore partial mock\n                result: { ...stateManager } as IStoreSelectorStateManager\n            } as AsyncResult<IStoreSelectorStateManager>,\n        };\n        debugger;\n       // @ts-ignore\n        RetailActions.getFullAvailableInventoryNearby = jest.fn().mockRejectedValue(undefined);\n       // @ts-ignore\n        RetailActions.getOrgUnitLocationsByArea = jest.fn().mockResolvedValue(undefined);\n\n       // @ts-ignore Overriding read only for test purposes\n        window.navigator.geolocation = {\n           getCurrentPosition: jest.fn().mockImplementation((success, failure) => {\n               success({\n                   coords: {\n                       latitude: 20,\n                       longitude: 25\n                   }\n               });\n           })\n       };\n\n        const mockConfigFindStores: IStoreSelectorConfig = {\n           mode: mode.findStores,\n           style: style.inline,\n           lookupRadius: 100,\n           autoSuggestionEnabled: true,\n           autoSuggestOptions: { maxResults: 5 }\n       };\n\n        moduleProps = {\n           ...buildMockModuleProps(localMockData, {}, mockConfigFindStores, mockContext) as IStoreSelectorProps<IStoreSelectorData>,\n           resources: mockResources,\n           // @ts-ignore\n           renderView: jest.fn(props => { return <div props={props} />; })\n       };\n\n        const result = mount(<StoreSelector {...moduleProps} />);\n        expect(moduleProps.renderView).toBeCalled();\n        const viewProps: IStoreSelectorViewProps = result.childAt(0).props().props;\n        expect(viewProps).toBeDefined();\n    });\n\n});"]}