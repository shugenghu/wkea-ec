{"version":3,"file":"date-time-helpers.test.js","sourceRoot":"./src/","sources":["modules/store-selector/tests/components/store-selector-location-line-item/date-time-helpers.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStoreSelectorLocationLineItemResources } from '../../../components/store-selector-location-line-item';\nimport { buildStoreHours, secondsToTime } from '../../../components/store-selector-location-line-item/date-time-helpers';\n\nconst mockResources: IStoreSelectorLocationLineItemResources = {\n    contactInfoHeader: 'Contact',\n    storeHoursHeader: 'Hours',\n    availabilityInfoHeader: 'Availability',\n    closedText: 'Closed',\n    outOfStock: 'Out of stock',\n    inStock: 'In stock',\n\n    currentLocation: 'Current location',\n    selectLocation: 'Pick up here',\n    selectLocationAriaLabelFormat: 'Pick up at {StoreName}',\n    setAsPreferredStoreText: 'Set as preferred store',\n    setAsPreferredStoreTextAriaLabel: 'Set as preferred store',\n    preferredStoreText: 'Preferred store',\n    preferredStoreAriaLabel: 'Set as preferred store',\n\n    days: {\n        monday: 'Mon',\n        tuesday: 'Tue',\n        wednesday: 'Wed',\n        thursday: 'Thur',\n        friday: 'Fri',\n        saturday: 'Sat',\n        sunday: 'Sun',\n        mondayFull: 'Monday',\n        tuesdayFull: 'Tuesday',\n        wednesdayFull: 'Wednesday',\n        thursdayFull: 'Thursday',\n        fridayFull: 'Friday',\n        saturdayFull: 'Saturday',\n        sundayFull: 'Sunday'\n    }\n};\n\ndescribe('secondsToTime tests', () => {\n    it('Returns undefined if input is undefined', () => {\n        const result = secondsToTime(undefined);\n\n        expect(result).toBeUndefined();\n    });\n\n    it('Handles times before 1:00 am', () => {\n        const result = secondsToTime(120);\n\n        expect(result).toBe('12:02 am');\n    });\n\n    it('Handles times before noon', () => {\n        const result = secondsToTime(15300);\n\n        expect(result).toBe('4:15 am');\n    });\n\n    it('Handles times after noon', () => {\n        const result = secondsToTime(52500);\n\n        expect(result).toBe('2:35 pm');\n    });\n});\n\ndescribe('buildStoreHours tests', () => {\n    it('open same time all week', () => {\n        const result = buildStoreHours(\n            {\n                MondayOpenTime: 32400,\n                MondayCloseTime: 61200,\n                IsClosedOnMonday: false,\n                TuesdayOpenTime: 32400,\n                TuesdayCloseTime: 61200,\n                IsClosedOnTuesday: false,\n                WednesdayOpenTime: 32400,\n                WednesdayCloseTime: 61200,\n                IsClosedOnWednesday: false,\n                ThursdayOpenTime: 32400,\n                ThursdayCloseTime: 61200,\n                IsClosedOnThursday: false,\n                FridayOpenTime: 32400,\n                FridayCloseTime: 61200,\n                IsClosedOnFriday: false,\n                SaturdayOpenTime: 32400,\n                SaturdayCloseTime: 61200,\n                IsClosedOnSaturday: false,\n                SundayOpenTime: 32400,\n                SundayCloseTime: 61200,\n                IsClosedOnSunday: false,\n            },\n            mockResources);\n\n        expect(result).toEqual(expect.arrayContaining([\n            expect.objectContaining({\n                startDayShort: 'Mon',\n                endDayShort: 'Sun',\n                timeRange: '9:00 am–5:00 pm'\n            })\n        ]));\n    });\n\n    it('merge closed lines', () => {\n        const result = buildStoreHours(\n            {\n                MondayOpenTime: 32400,\n                MondayCloseTime: 61200,\n                IsClosedOnMonday: false,\n                TuesdayOpenTime: 32400,\n                TuesdayCloseTime: 61200,\n                IsClosedOnTuesday: false,\n                WednesdayOpenTime: 32400,\n                WednesdayCloseTime: 61200,\n                IsClosedOnWednesday: false,\n                ThursdayOpenTime: 32400,\n                ThursdayCloseTime: 61200,\n                IsClosedOnThursday: false,\n                FridayOpenTime: 32400,\n                FridayCloseTime: 61200,\n                IsClosedOnFriday: false,\n                SaturdayOpenTime: 32400,\n                SaturdayCloseTime: 61200,\n                IsClosedOnSaturday: true,\n                SundayOpenTime: 32400,\n                SundayCloseTime: 61200,\n                IsClosedOnSunday: true,\n            },\n            mockResources);\n\n        expect(result).toEqual(expect.arrayContaining([\n            expect.objectContaining({\n                startDayShort: 'Mon',\n                endDayShort: 'Fri',\n                timeRange: '9:00 am–5:00 pm'\n            }),\n            expect.objectContaining({\n                startDayShort: 'Sat',\n                endDayShort: 'Sun',\n                timeRange: 'Closed'\n            })\n        ]));\n    });\n\n    it('open no repeats all week', () => {\n        const result = buildStoreHours(\n            {\n                MondayOpenTime: 32400,\n                MondayCloseTime: 61200,\n                IsClosedOnMonday: false,\n                TuesdayOpenTime: 36000,\n                TuesdayCloseTime: 61200,\n                IsClosedOnTuesday: false,\n                WednesdayOpenTime: 32400,\n                WednesdayCloseTime: 61200,\n                IsClosedOnWednesday: false,\n                ThursdayOpenTime: 36000,\n                ThursdayCloseTime: 61200,\n                IsClosedOnThursday: false,\n                FridayOpenTime: 32400,\n                FridayCloseTime: 61200,\n                IsClosedOnFriday: false,\n                SaturdayOpenTime: 36000,\n                SaturdayCloseTime: 61200,\n                IsClosedOnSaturday: false,\n                SundayOpenTime: undefined,\n                SundayCloseTime: undefined,\n                IsClosedOnSunday: true,\n            },\n            mockResources);\n\n        expect(result).toEqual(expect.arrayContaining([\n            expect.objectContaining({\n                startDayShort: 'Mon',\n                endDayShort: undefined,\n                timeRange: '9:00 am–5:00 pm'\n            }),\n            expect.objectContaining({\n                startDayShort: 'Tue',\n                endDayShort: undefined,\n                timeRange: '10:00 am–5:00 pm'\n            }),\n            expect.objectContaining({\n                startDayShort: 'Wed',\n                endDayShort: undefined,\n                timeRange: '9:00 am–5:00 pm'\n            }),\n            expect.objectContaining({\n                startDayShort: 'Thur',\n                endDayShort: undefined,\n                timeRange: '10:00 am–5:00 pm'\n            }),\n            expect.objectContaining({\n                startDayShort: 'Fri',\n                endDayShort: undefined,\n                timeRange: '9:00 am–5:00 pm'\n            }),\n            expect.objectContaining({\n                startDayShort: 'Sat',\n                endDayShort: undefined,\n                timeRange: '10:00 am–5:00 pm'\n            }),\n            expect.objectContaining({\n                startDayShort: 'Sun',\n                endDayShort: undefined,\n                timeRange: 'Closed'\n            }),\n        ]));\n    });\n\n});"]}