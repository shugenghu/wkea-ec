import { render, shallow } from 'enzyme';
import * as React from 'react';
import { StoreSelectorSearchForm } from '../../components';
const mockProps = {
    resources: {
        searchInputAriaLabel: 'Search Input',
        searchButtonAriaLabel: 'Search',
        searchPlaceholderText: 'Enter a location',
        seeAllStoresText: 'See all stores',
        viewListText: 'View List',
        viewMapText: 'View Map'
    },
    value: '',
    searchTermChanged: jest.fn(),
    performSearch: jest.fn(),
    onShowAllStores: jest.fn(),
    onToggleListMapViewState: jest.fn()
};
describe('Store selector search form tests', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders correctly', () => {
        const component = render(React.createElement(StoreSelectorSearchForm, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly when MapApi is disabled', () => {
        const localMockProps = {
            ...mockProps,
            isMapDisabled: true
        };
        const component = render(React.createElement(StoreSelectorSearchForm, Object.assign({}, localMockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with alternate resources', () => {
        const localMockProps = {
            ...mockProps,
            resources: {
                searchInputAriaLabel: 'Search input',
                searchButtonAriaLabel: 'Buscar',
                searchPlaceholderText: 'Ingrese una ubicaciÃ³n',
                seeAllStoresText: 'See all stores',
                viewListText: 'View List',
                viewMapText: 'View Map'
            },
        };
        const component = render(React.createElement(StoreSelectorSearchForm, Object.assign({}, localMockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly when showAllStores is true', () => {
        const localMockProps = {
            ...mockProps,
            showAllStores: true,
        };
        const component = render(React.createElement(StoreSelectorSearchForm, Object.assign({}, localMockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly when locatorView is true', () => {
        const localMockProps = {
            ...mockProps,
            locatorView: true,
        };
        const component = render(React.createElement(StoreSelectorSearchForm, Object.assign({}, localMockProps)));
        expect(component).toMatchSnapshot();
    });
    it('Call perform search with empty string if text is never changed', () => {
        const component = shallow(React.createElement(StoreSelectorSearchForm, Object.assign({}, mockProps)));
        const form = component.find('.ms-store-select__search-form').at(0);
        form.simulate('submit', { preventDefault: () => undefined });
        expect(mockProps.performSearch).toBeCalledWith('');
    });
    it('Calls perform search with expected input when text changes', () => {
        const component = shallow(React.createElement(StoreSelectorSearchForm, Object.assign({}, mockProps)));
        const input = component.find('.ms-store-select__search-input').at(0);
        input.simulate('change', { target: { value: 'Seattle' } });
        expect(mockProps.searchTermChanged).toBeCalledWith('Seattle');
    });
    it('Renders correctly when displayList is true', () => {
        const localMockProps = {
            ...mockProps,
            displayList: true
        };
        const component = shallow(React.createElement(StoreSelectorSearchForm, Object.assign({}, localMockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=store-selector-search-form.test.js.map