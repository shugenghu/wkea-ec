import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import { StoreSelectorView } from '../../..';
describe('Store selector view tests', () => {
    it('renders correctly with no search in progress and locations list', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const mockProps = {
            ...moduleProps,
            state: {
                isSearchInProgress: false,
                searchTerm: '',
                isSeeAllStoreValue: false
            },
            ModuleProps: { moduleProps, className: 'ms-store-selector__modal' },
            BodyContainerProps: { className: 'ms-store-selector__modal-body' },
            FooterContainerProps: { className: 'ms-store-selector__modal-footer' },
            HeaderContainerProps: { className: 'ms-store-selector__modal-header' },
            locationsMessage: 'Locations message',
            search: 'Search',
            spinner: 'Spinner',
            locationsList: 'Locations list',
            noLocationsMessage: 'No locations',
            terms: 'Terms',
            headerText: 'Header',
            callbacks: {
                searchTermChanged: jest.fn(),
                closeDialog: jest.fn(),
                performSearch: jest.fn(),
                selectedLocation: jest.fn(),
                getAndUpdateUserLocation: jest.fn(),
                attachMapAutoSuggest: jest.fn(),
                onSuggestionSelected: jest.fn(),
                setPreferredStore: jest.fn(),
                setSelectedStore: jest.fn(),
                setOrgUnitStoreInformation: jest.fn(),
                removePreferredStore: jest.fn()
            }
        };
        const component = render(React.createElement(StoreSelectorView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with no search in progress and no locations list', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const mockProps = {
            ...moduleProps,
            state: {
                isSearchInProgress: false,
                searchTerm: '',
                isSeeAllStoreValue: false
            },
            ModuleProps: { moduleProps, className: 'ms-store-selector__modal' },
            BodyContainerProps: { className: 'ms-store-selector__modal-body' },
            FooterContainerProps: { className: 'ms-store-selector__modal-footer' },
            HeaderContainerProps: { className: 'ms-store-selector__modal-header' },
            locationsMessage: 'Locations message',
            search: 'Search',
            spinner: 'Spinner',
            locationsList: undefined,
            noLocationsMessage: 'No locations',
            terms: 'Terms',
            headerText: 'Header',
            callbacks: {
                searchTermChanged: jest.fn(),
                closeDialog: jest.fn(),
                performSearch: jest.fn(),
                selectedLocation: jest.fn(),
                getAndUpdateUserLocation: jest.fn(),
                attachMapAutoSuggest: jest.fn(),
                onSuggestionSelected: jest.fn(),
                setPreferredStore: jest.fn(),
                setSelectedStore: jest.fn(),
                setOrgUnitStoreInformation: jest.fn(),
                removePreferredStore: jest.fn()
            }
        };
        const component = render(React.createElement(StoreSelectorView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with search in progress', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const mockProps = {
            ...moduleProps,
            state: {
                isSearchInProgress: true,
                searchTerm: '',
                isSeeAllStoreValue: false
            },
            ModuleProps: { moduleProps, className: 'ms-store-selector__modal' },
            BodyContainerProps: { className: 'ms-store-selector__modal-body' },
            FooterContainerProps: { className: 'ms-store-selector__modal-footer' },
            HeaderContainerProps: { className: 'ms-store-selector__modal-header' },
            locationsMessage: 'Locations message',
            search: 'Search',
            spinner: 'Spinner',
            locationsList: 'Locations list',
            noLocationsMessage: 'No locations',
            terms: 'Terms',
            headerText: 'Header',
            callbacks: {
                searchTermChanged: jest.fn(),
                closeDialog: jest.fn(),
                performSearch: jest.fn(),
                selectedLocation: jest.fn(),
                getAndUpdateUserLocation: jest.fn(),
                attachMapAutoSuggest: jest.fn(),
                onSuggestionSelected: jest.fn(),
                setPreferredStore: jest.fn(),
                setSelectedStore: jest.fn(),
                setOrgUnitStoreInformation: jest.fn(),
                removePreferredStore: jest.fn()
            }
        };
        const component = render(React.createElement(StoreSelectorView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=store-selector.view.test.js.map