import { shallow } from 'enzyme';
import * as React from 'react';
import { StoreSelectorLocationLines } from '../../components';
const mockResources = {
    emptyLocationsText: 'No Nearby Locations',
    selectStoreText: 'Pick Up Here',
    selectStoreAriaFormatText: 'Pick Up At {StoreName}',
    timeText: 'Store Hours',
    captionText: 'Weâ€™re expanding our pick-up-in-store service to more Microsoft Store locations every day.',
    milesShortText: 'mi',
    kilometersShortText: 'km',
    outOfStockText: 'Out of stock',
    inStockText: 'In Stock',
    selectedStoreLocationText: 'Selected store location',
    contactText: 'Contact',
    availabilityText: 'Availability',
    productDimensionTypeColor: 'Color',
    productDimensionTypeConfiguration: 'Configuration',
    productDimensionTypeSize: 'Size',
    productDimensionTypeStyle: 'Style',
    storeHoursClosedText: 'Closed',
    storeHoursMondayText: 'Mon',
    storeHoursTuesdayText: 'Tue',
    storeHoursWednesdayText: 'Wed',
    storeHoursThursdayText: 'Thur',
    storeHoursFridayText: 'Fri',
    storeHoursSaturdayText: 'Sat',
    storeHoursSundayText: 'Sun',
    storeHoursMondayFullText: 'Monday',
    storeHoursTuesdayFullText: 'Tuesday',
    storeHoursWednesdayFullText: 'Wednesday',
    storeHoursThursdayFullText: 'Thursday',
    storeHoursFridayFullText: 'Friday',
    storeHoursSaturdayFullText: 'Saturday',
    storeHoursSundayFullText: 'Sunday',
    storeAddressAriaLabel: 'Store address',
    storePhoneAriaLabel: 'Store phone',
    storeCountMessage: 'We found {count} stores within {radius} miles of you.',
    storeAllCountMessage: 'We found {count} stores.',
    storeCountMessageInKm: 'We found {count} stores within {radius} kilometers of you.',
    searchPlaceholderText: 'Search',
    searchInputAriaLabel: 'Search input',
    searchButtonAriaLabel: 'Search',
    storeSelectorHeaderText: 'Pick a store',
    storeLocatorHeaderText: 'Store Locator',
    seeAllStoresText: 'See all stores',
    setAsPreferredStoreText: 'Set as preferred store',
    setAsPreferredStoreTextAriaLabel: 'Set as preferred store',
    preferredStoreText: 'Preferred store',
    preferredStoreAriaLabel: 'Set as preferred store',
    viewListText: 'View List',
    viewMapText: 'View Map'
};
const mockProps = {
    resources: mockResources,
    outOfStockThreshold: 10,
    enableOutOfStockCheck: true,
    preferredStoreLocationId: 'SEATTLE',
    onLocationSelected: jest.fn(),
    onClick: jest.fn(),
    onSetAsPreferredStore: jest.fn(),
    onRemovePreferredStore: jest.fn()
};
const mockLocationList = [
    {
        OrgUnitAvailability: {
            OrgUnitLocation: {
                OrgUnitName: 'Seattle',
                OrgUnitNumber: '1'
            },
            ItemAvailabilities: [
                {
                    AvailableQuantity: 1
                }
            ]
        },
        StoreHours: undefined
    },
    {
        OrgUnitAvailability: {
            OrgUnitLocation: {
                OrgUnitName: 'Bellevue',
                OrgUnitNumber: '2'
            },
            ItemAvailabilities: [
                {
                    AvailableQuantity: 10
                }
            ]
        },
        StoreHours: undefined
    },
    {
        OrgUnitAvailability: {
            OrgUnitLocation: {
                OrgUnitName: 'Redmond',
                OrgUnitNumber: '3'
            },
            ItemAvailabilities: [
                {}
            ]
        },
        StoreHours: undefined
    },
    {
        OrgUnitAvailability: {
            OrgUnitLocation: {
                OrgUnitName: 'Tacoma',
                OrgUnitNumber: '4'
            },
            ItemAvailabilities: []
        },
        StoreHours: undefined
    },
    {
        OrgUnitAvailability: {},
        StoreHours: undefined
    }
];
describe('Store selector location lines  tests', () => {
    it('Renders correctly when locations list is undefined', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: undefined })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations list is empty', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: [] })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations list is undefined and preferred store is selected', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: undefined, isPreferredStoreEnabled: true, preferredStoreLocationId: 'Test' })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations list is empty and preferred store is selected', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: [], isPreferredStoreEnabled: true, preferredStoreLocationId: 'Test' })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations list is undefined and preferred store is not selected', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: undefined, isPreferredStoreEnabled: true, preferredStoreLocationId: null })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations list is empty and preferred store is not selected', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: [], isPreferredStoreEnabled: true, preferredStoreLocationId: null })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations list is undefined and preferred store is disabled', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: undefined, isPreferredStoreEnabled: false })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations list is empty and preferred store is not selected', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: [], isPreferredStoreEnabled: false })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and no selected location specified', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and selected location specified', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { enableOutOfStockCheck: false, locations: mockLocationList, alreadySelectedLocation: { OrgUnitName: 'Bellevue', OrgUnitNumber: '2' } })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and no preferred location specified', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { preferredStoreLocationId: null, locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is disabled', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: false, locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location setting is undefined', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: undefined, locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is disabled and preferred location specified', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: false, preferredStoreLocationId: mockLocationList[0].OrgUnitAvailability.OrgUnitLocation.OrgUnitName, locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is undefined', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: undefined, preferredStoreLocationId: mockLocationList[2].OrgUnitAvailability.OrgUnitLocation.OrgUnitName, locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is not in the list', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: 'SomeOtherStoreId', locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is the first one', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: mockLocationList[0].OrgUnitAvailability.OrgUnitLocation.OrgUnitName, locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is the third one', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: mockLocationList[2].OrgUnitAvailability.OrgUnitLocation.OrgUnitName, locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is the last one', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: mockLocationList[2].OrgUnitAvailability.OrgUnitLocation.OrgUnitName, locations: [mockLocationList[0], mockLocationList[1], mockLocationList[2]] })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has only preferred location', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: mockLocationList[0].OrgUnitAvailability.OrgUnitLocation.OrgUnitName, locations: [mockLocationList[0]] })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has only non preferred location', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: mockLocationList[0].OrgUnitAvailability.OrgUnitLocation.OrgUnitName, locations: [mockLocationList[1]] })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when all the locations are preferred', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: mockLocationList[0].OrgUnitAvailability.OrgUnitLocation.OrgUnitName, locations: [mockLocationList[0], mockLocationList[0], mockLocationList[0], mockLocationList[0]] })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is enabled but no locations specified', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: 'Test', locations: [] })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is enabled but locations is undefined', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: 'Test', locations: undefined })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is null', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: null, locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and preferred location is empty string', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { isPreferredStoreEnabled: true, preferredStoreLocationId: '', locations: mockLocationList })));
        expect(component).toMatchSnapshot();
    });
    it('Renders correctly when locations has locations and selected location specified', () => {
        const component = shallow(React.createElement(StoreSelectorLocationLines, Object.assign({}, mockProps, { enableOutOfStockCheck: false, locations: mockLocationList, alreadySelectedLocation: { OrgUnitName: 'Bellevue', OrgUnitNumber: '2' } })));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=store-selector-location-lines.test.js.map