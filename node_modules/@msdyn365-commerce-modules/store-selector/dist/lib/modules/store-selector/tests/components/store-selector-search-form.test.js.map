{"version":3,"file":"store-selector-search-form.test.js","sourceRoot":"./src/","sources":["modules/store-selector/tests/components/store-selector-search-form.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { render, shallow } from 'enzyme';\nimport * as React from 'react';\nimport { IStoreSelectorSearchFormProps, StoreSelectorSearchForm } from '../../components';\n\nconst mockProps: IStoreSelectorSearchFormProps = {\n    resources: {\n        searchInputAriaLabel: 'Search Input',\n        searchButtonAriaLabel: 'Search',\n        searchPlaceholderText: 'Enter a location',\n        seeAllStoresText: 'See all stores',\n        viewListText: 'View List',\n        viewMapText: 'View Map'\n    },\n    value: '',\n    searchTermChanged: jest.fn(),\n    performSearch: jest.fn(),\n    onShowAllStores: jest.fn(),\n    onToggleListMapViewState: jest.fn()\n};\n\ndescribe('Store selector search form tests', () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n    });\n\n    it('renders correctly', () => {\n        const component = render(<StoreSelectorSearchForm {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly when MapApi is disabled', () => {\n        const localMockProps: IStoreSelectorSearchFormProps = {\n            ...mockProps,\n            isMapDisabled: true\n        };\n        const component = render(<StoreSelectorSearchForm {...localMockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with alternate resources', () => {\n        const localMockProps: IStoreSelectorSearchFormProps = {\n            ...mockProps,\n            resources: {\n                searchInputAriaLabel: 'Search input',\n                searchButtonAriaLabel: 'Buscar',\n                searchPlaceholderText: 'Ingrese una ubicaci√≥n',\n                seeAllStoresText: 'See all stores',\n                viewListText: 'View List',\n                viewMapText: 'View Map'\n            },\n        };\n        const component = render(<StoreSelectorSearchForm {...localMockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly when showAllStores is true', () => {\n        const localMockProps: IStoreSelectorSearchFormProps = {\n            ...mockProps,\n            showAllStores: true,\n        };\n        const component = render(<StoreSelectorSearchForm {...localMockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly when locatorView is true', () => {\n        const localMockProps: IStoreSelectorSearchFormProps = {\n            ...mockProps,\n            locatorView: true,\n        };\n        const component = render(<StoreSelectorSearchForm {...localMockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('Call perform search with empty string if text is never changed', () => {\n        const component = shallow(<StoreSelectorSearchForm {...mockProps} />);\n\n        const form = component.find('.ms-store-select__search-form').at(0);\n\n        form.simulate('submit', { preventDefault: () => undefined });\n        expect(mockProps.performSearch).toBeCalledWith('');\n    });\n\n    it('Calls perform search with expected input when text changes', () => {\n        const component = shallow(<StoreSelectorSearchForm {...mockProps} />);\n\n        const input = component.find('.ms-store-select__search-input').at(0);\n\n        input.simulate('change', { target: { value: 'Seattle' } });\n\n        expect(mockProps.searchTermChanged).toBeCalledWith('Seattle');\n    });\n\n    it('Renders correctly when displayList is true', () => {\n        const localMockProps: IStoreSelectorSearchFormProps = {\n            ...mockProps,\n            displayList: true\n        };\n        const component = shallow(<StoreSelectorSearchForm {...localMockProps} />);\n\n        expect(component).toMatchSnapshot();\n    });\n});"]}