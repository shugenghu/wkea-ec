import { mount, render, shallow } from 'enzyme';
import { StoreSelectorLocationLineItemComponent } from '../../../components/store-selector-location-line-item';
const mockResources = {
    contactInfoHeader: 'Contact',
    storeHoursHeader: 'Hours',
    availabilityInfoHeader: 'Availability',
    closedText: 'Closed',
    outOfStock: 'Out of stock',
    inStock: 'In stock',
    currentLocation: 'Current location',
    selectLocation: 'Pick up here',
    selectLocationAriaLabelFormat: 'Pick up at {StoreName}',
    setAsPreferredStoreText: 'Set as preferred store',
    setAsPreferredStoreTextAriaLabel: 'Set as preferred store',
    preferredStoreText: 'Preferred store',
    preferredStoreAriaLabel: 'Set as preferred store',
    days: {
        monday: 'Mon',
        tuesday: 'Tue',
        wednesday: 'Wed',
        thursday: 'Thur',
        friday: 'Fri',
        saturday: 'Sat',
        sunday: 'Sun',
        mondayFull: 'Monday',
        tuesdayFull: 'Tuesday',
        wednesdayFull: 'Wednesday',
        thursdayFull: 'Thursday',
        fridayFull: 'Friday',
        saturdayFull: 'Saturday',
        sundayFull: 'Sunday'
    }
};
const baseMockProps = {
    hideStockStatus: false,
    isInStock: true,
    isCurrentLocation: false,
    resources: mockResources,
    preferredStoreLocationId: null,
    preferredDistanceUnit: 'mi',
    handlers: {
        onSelected: jest.fn(),
        onSetAsPreferredStore: jest.fn(),
        onRemovePreferredStore: jest.fn()
    }
};
const mockLocation = {
    OrgUnitNumber: '123',
    OrgUnitName: 'Microsoft',
    Address: '1 Microsoft Way',
    Distance: 5,
    Contacts: [
        {
            ContactTypeValue: 1,
            IsPrivate: false,
            IsPrimary: true,
            Locator: '555-867-5309'
        }
    ]
};
describe('Store Selector Location Line Item', () => {
    it('renders correctly with empty location', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: {} }));
        expect(line).toMatchSnapshot();
    });
    it('renders correctly with location information', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation }));
        expect(line).toMatchSnapshot();
    });
    it('onClick fires callback', () => {
        const line = mount(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation }));
        const button = line.find('.ms-store-select__location-line-select-store').first();
        button.simulate('click');
        expect(baseMockProps.handlers.onSelected).toBeCalled();
    });
    it('renders correctly with regular store hours', () => {
        const line = render(StoreSelectorLocationLineItemComponent({
            ...baseMockProps, location: mockLocation, storeHours: {
                RegularStoreHours: {
                    IsClosedOnMonday: true,
                    IsClosedOnTuesday: true,
                    IsClosedOnWednesday: true,
                    IsClosedOnThursday: true,
                    IsClosedOnFriday: true,
                    IsClosedOnSaturday: true,
                    SundayOpenTime: 32400,
                    SundayCloseTime: 61200,
                    IsClosedOnSunday: false,
                }
            }
        }));
        expect(line).toMatchSnapshot();
    });
    it('renders correctly when selected location', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation, isCurrentLocation: true }));
        expect(line).toMatchSnapshot();
    });
    it('renders correctly when hide stock status', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation, hideStockStatus: true }));
        expect(line).toMatchSnapshot();
    });
    it('renders correctly when out of stock', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation, isInStock: false }));
        expect(line).toMatchSnapshot();
    });
    it('renders correctly when distance < one mile', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: { ...mockLocation, Distance: 0.5 }, isInStock: false }));
        expect(line).toMatchSnapshot();
    });
    it('renders correctly when no phone specified', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: { ...mockLocation, Contacts: [] }, isInStock: false }));
        expect(line).toMatchSnapshot();
    });
    it('renders correctly when no primary phone specified', () => {
        const line = render(StoreSelectorLocationLineItemComponent({
            ...baseMockProps, location: {
                ...mockLocation, Contacts: [{
                        ChannelId: 0,
                        ContactTypeValue: 1,
                        IsPrivate: false,
                        IsPrimary: false,
                        Locator: '555-867-5309'
                    }]
            }, isInStock: false
        }));
        expect(line).toMatchSnapshot();
    });
    it('renders correctly when preferred store is enabled', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation, isPreferredStoreEnabled: true }));
        expect(line).toMatchSnapshot();
    });
    it('call onSetAsPreferredStore when set preferred store button clicked', () => {
        const component = shallow(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation, isPreferredStoreEnabled: true }));
        const input = component.find('.ms-store-select__location-line-item-set-as-preferred-store').at(0);
        input.simulate('click');
        expect(baseMockProps.handlers.onSetAsPreferredStore).toBeCalledWith('123');
    });
    it('renders correctly when preferred store is enabled and preferred store is set', () => {
        const line = render(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation, isPreferredStoreEnabled: true, preferredStoreLocationId: '123' }));
        expect(line).toMatchSnapshot();
    });
    it('call onRemovePreferredStore when remove preferred store button clicked', () => {
        const component = shallow(StoreSelectorLocationLineItemComponent({ ...baseMockProps, location: mockLocation, isPreferredStoreEnabled: true, preferredStoreLocationId: '123' }));
        const input = component.find('.ms-store-select__location-line-item-preferred-store').at(0);
        input.simulate('click');
        expect(baseMockProps.handlers.onRemovePreferredStore).toBeCalled();
    });
});
//# sourceMappingURL=store-selector-location-line-item.test.js.map