{"version":3,"file":"store-selector-small-components.test.js","sourceRoot":"./src/","sources":["modules/store-selector/tests/components/store-selector-small-components.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { buildMockRequest } from '@msdyn365-commerce/core';\nimport { render } from 'enzyme';\nimport * as React from 'react';\nimport * as components from '../../components';\n\ndescribe('StoreSelectorEmptyMessage tests', () => {\n    it('renders correctly', () => {\n        const mockProps: components.IStoreSelectorEmptyMessageProps = {\n            // @ts-ignore partial mock\n            resources: {\n                emptyLocationsText: 'No locations found'\n            }\n        };\n        const component = render(<components.StoreSelectorEmptyMessage {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with alternate resource', () => {\n        const mockProps: components.IStoreSelectorEmptyMessageProps = {\n            // @ts-ignore partial mock\n            resources: {\n                emptyLocationsText: 'No se encontraron ubicaciones'\n            }\n        };\n        const component = render(<components.StoreSelectorEmptyMessage {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});\n\ndescribe('StoreSelectorWaiting tests', () => {\n    it('renders correctly', () => {\n        const component = render(<components.StoreSelectorWaiting />);\n        expect(component).toMatchSnapshot();\n    });\n});\n\ndescribe('StoreSelectorTermsOfService tests', () => {\n    it('renders correctly without link', () => {\n        const mockProps: components.IStoreSelectorTermsOfServiceProps = {\n            link: undefined,\n          requestContext: buildMockRequest()\n        };\n        const component = render(<components.StoreSelectorTermsOfService {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with link', () => {\n        const mockProps: components.IStoreSelectorTermsOfServiceProps = {\n            link: {\n                linkText: 'Microsoft Map Terms',\n                linkUrl: {\n                    destinationUrl: 'https://www.microsoft.com/en-us/maps/product/terms-april-2011'\n                },\n                ariaLabel: 'Microsoft Map Terms'\n            },\n            requestContext: buildMockRequest()\n        };\n        const component = render(<components.StoreSelectorTermsOfService {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with link and open in new tab', () => {\n        const mockProps: components.IStoreSelectorTermsOfServiceProps = {\n            link: {\n                linkText: 'Microsoft Map Terms',\n                linkUrl: {\n                    destinationUrl: 'https://www.microsoft.com/en-us/maps/product/terms-april-2011'\n                },\n                ariaLabel: 'Microsoft Map Terms',\n                openInNewTab: true\n            },\n          requestContext: buildMockRequest()\n        };\n        const component = render(<components.StoreSelectorTermsOfService {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});\n\ndescribe('StoreSelectorTermsOfService tests', () => {\n    it('renders correctly without locations', () => {\n        const mockProps: components.IStoreSelectorFoundLocationsMessage = {\n            // @ts-ignore partial mock\n            resources: {\n                storeCountMessage: 'We found {count} stores within {radius} miles of you.',\n                storeAllCountMessage: 'We found {count} stores.',\n                milesShortText: 'mi'\n            },\n            locations: undefined,\n            searchRadius: 50,\n            isSeeAllStore:false,\n            preferredDistanceUnit: 'mi'\n        };\n        const component = render(<components.StoreSelectorFoundLocationsMessage {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with locations', () => {\n        const mockProps: components.IStoreSelectorFoundLocationsMessage = {\n            // @ts-ignore partial mock\n            resources: {\n                storeCountMessage: 'We found {count} stores within {radius} miles of you.',\n                storeAllCountMessage: 'We found {count} stores.',\n                milesShortText: 'mi'\n            },\n            // only care about count here so don't have to actually populate list\n            locations: [\n                {}, {}, {}\n            ],\n            searchRadius: 50,\n            isSeeAllStore:false,\n            preferredDistanceUnit: 'mi'\n        };\n        const component = render(<components.StoreSelectorFoundLocationsMessage {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('renders correctly with locations and alternates', () => {\n        const mockProps: components.IStoreSelectorFoundLocationsMessage = {\n            // @ts-ignore partial mock\n            resources: {\n                storeCountMessage: 'Encontramos {count} tiendas a {radius} millas de usted.',\n                storeAllCountMessage:'Encontramos {count} tiendas.',\n                milesShortText: 'mi'\n            },\n            // only care about count here so don't have to actually populate list\n            locations: [\n                {}, {}\n            ],\n            searchRadius: 10,\n            isSeeAllStore:false,\n            preferredDistanceUnit: 'mi'\n        };\n        const component = render(<components.StoreSelectorFoundLocationsMessage {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});"]}