/// <reference path="../../../../src/modules/store-selector/types/MicrosoftMaps/Microsoft.Maps.All.d.ts" />
import * as Msdyn365 from '@msdyn365-commerce/core';
import * as React from 'react';
import { IStoreSelectorData } from './store-selector.data';
import { IStoreSelectorProps } from './store-selector.props.autogenerated';
import { IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import { OrgUnitLocation } from '@msdyn365-commerce/retail-proxy';
export interface IStoreSelectorState {
    isSearchInProgress: boolean;
    searchTerm?: string;
    isSeeAllStoreValue: boolean;
    isLocationDisabled?: boolean;
}
export interface IStoreSelectorViewProps extends IStoreSelectorProps<IStoreSelectorData> {
    state: IStoreSelectorState;
    ModuleProps: IModuleProps;
    BodyContainerProps: INodeProps;
    FooterContainerProps: INodeProps;
    HeaderContainerProps: INodeProps;
    HeaderProps?: React.ReactNode;
    locationsMessage?: React.ReactNode;
    search?: React.ReactNode;
    spinner?: React.ReactNode;
    locationsList?: React.ReactNode;
    noLocationsMessage?: React.ReactNode;
    terms?: React.ReactNode;
    headerText?: React.ReactNode;
    callbacks: {
        closeDialog(): Promise<void>;
        searchTermChanged(searchTerm: string): Promise<void>;
        performSearch(searchTerm: string): Promise<void>;
        selectedLocation(location: OrgUnitLocation | undefined): Promise<void>;
        getAndUpdateUserLocation(): Promise<void>;
        attachMapAutoSuggest(): Promise<void>;
        onSuggestionSelected(result: Microsoft.Maps.ISuggestionResult): Promise<void>;
        setPreferredStore(storeId: string | undefined): Promise<void>;
        removePreferredStore(): Promise<void>;
        setSelectedStore(storeId: string | undefined): Promise<void>;
        setOrgUnitStoreInformation(location: OrgUnitLocation | undefined): Promise<void>;
    };
}
declare class StoreSelector extends React.Component<IStoreSelectorProps<IStoreSelectorData>, IStoreSelectorState> {
    private autoSuggestManager;
    private preferredStoreLocalStorageKey;
    private telemetryContent;
    constructor(props: IStoreSelectorProps<IStoreSelectorData>);
    componentDidMount(): void;
    render(): JSX.Element;
    handleLinkTextChange: (event: Msdyn365.ContentEditableEvent) => void;
    handleHeadingChange: (event: Msdyn365.ContentEditableEvent) => string;
    private _attachMapAutoSuggest;
    private _onSuggestionSelected;
    private _setPreferredStore;
    private _removePreferredStore;
    private _setSelectedStore;
    private _performSearch;
    private _searchTermChanged;
    private _getAndUpdateStoreLocation;
    private _closeDialog;
    private _setOrgUnitStoreInformation;
    private _updateLocations;
    private _onOrgUnitLocationSelected;
}
export default StoreSelector;
