import { render, shallow } from 'enzyme';
import * as React from 'react';
import { IStoreSelectorSearchFormProps, StoreSelectorSearchForm } from '../../components';

const mockProps: IStoreSelectorSearchFormProps = {
    resources: {
        searchInputAriaLabel: 'Search Input',
        searchButtonAriaLabel: 'Search',
        searchPlaceholderText: 'Enter a location',
        seeAllStoresText: 'See all stores',
        viewListText: 'View List',
        viewMapText: 'View Map'
    },
    value: '',
    searchTermChanged: jest.fn(),
    performSearch: jest.fn(),
    onShowAllStores: jest.fn(),
    onToggleListMapViewState: jest.fn()
};

describe('Store selector search form tests', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });

    it('renders correctly', () => {
        const component = render(<StoreSelectorSearchForm {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly when MapApi is disabled', () => {
        const localMockProps: IStoreSelectorSearchFormProps = {
            ...mockProps,
            isMapDisabled: true
        };
        const component = render(<StoreSelectorSearchForm {...localMockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with alternate resources', () => {
        const localMockProps: IStoreSelectorSearchFormProps = {
            ...mockProps,
            resources: {
                searchInputAriaLabel: 'Search input',
                searchButtonAriaLabel: 'Buscar',
                searchPlaceholderText: 'Ingrese una ubicaci√≥n',
                seeAllStoresText: 'See all stores',
                viewListText: 'View List',
                viewMapText: 'View Map'
            },
        };
        const component = render(<StoreSelectorSearchForm {...localMockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly when showAllStores is true', () => {
        const localMockProps: IStoreSelectorSearchFormProps = {
            ...mockProps,
            showAllStores: true,
        };
        const component = render(<StoreSelectorSearchForm {...localMockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly when locatorView is true', () => {
        const localMockProps: IStoreSelectorSearchFormProps = {
            ...mockProps,
            locatorView: true,
        };
        const component = render(<StoreSelectorSearchForm {...localMockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('Call perform search with empty string if text is never changed', () => {
        const component = shallow(<StoreSelectorSearchForm {...mockProps} />);

        const form = component.find('.ms-store-select__search-form').at(0);

        form.simulate('submit', { preventDefault: () => undefined });
        expect(mockProps.performSearch).toBeCalledWith('');
    });

    it('Calls perform search with expected input when text changes', () => {
        const component = shallow(<StoreSelectorSearchForm {...mockProps} />);

        const input = component.find('.ms-store-select__search-input').at(0);

        input.simulate('change', { target: { value: 'Seattle' } });

        expect(mockProps.searchTermChanged).toBeCalledWith('Seattle');
    });

    it('Renders correctly when displayList is true', () => {
        const localMockProps: IStoreSelectorSearchFormProps = {
            ...mockProps,
            displayList: true
        };
        const component = shallow(<StoreSelectorSearchForm {...localMockProps} />);

        expect(component).toMatchSnapshot();
    });
});