import { buildMockRequest } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import * as components from '../../components';

describe('StoreSelectorEmptyMessage tests', () => {
    it('renders correctly', () => {
        const mockProps: components.IStoreSelectorEmptyMessageProps = {
            // @ts-ignore partial mock
            resources: {
                emptyLocationsText: 'No locations found'
            }
        };
        const component = render(<components.StoreSelectorEmptyMessage {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with alternate resource', () => {
        const mockProps: components.IStoreSelectorEmptyMessageProps = {
            // @ts-ignore partial mock
            resources: {
                emptyLocationsText: 'No se encontraron ubicaciones'
            }
        };
        const component = render(<components.StoreSelectorEmptyMessage {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});

describe('StoreSelectorWaiting tests', () => {
    it('renders correctly', () => {
        const component = render(<components.StoreSelectorWaiting />);
        expect(component).toMatchSnapshot();
    });
});

describe('StoreSelectorTermsOfService tests', () => {
    it('renders correctly without link', () => {
        const mockProps: components.IStoreSelectorTermsOfServiceProps = {
            link: undefined,
          requestContext: buildMockRequest()
        };
        const component = render(<components.StoreSelectorTermsOfService {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with link', () => {
        const mockProps: components.IStoreSelectorTermsOfServiceProps = {
            link: {
                linkText: 'Microsoft Map Terms',
                linkUrl: {
                    destinationUrl: 'https://www.microsoft.com/en-us/maps/product/terms-april-2011'
                },
                ariaLabel: 'Microsoft Map Terms'
            },
            requestContext: buildMockRequest()
        };
        const component = render(<components.StoreSelectorTermsOfService {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with link and open in new tab', () => {
        const mockProps: components.IStoreSelectorTermsOfServiceProps = {
            link: {
                linkText: 'Microsoft Map Terms',
                linkUrl: {
                    destinationUrl: 'https://www.microsoft.com/en-us/maps/product/terms-april-2011'
                },
                ariaLabel: 'Microsoft Map Terms',
                openInNewTab: true
            },
          requestContext: buildMockRequest()
        };
        const component = render(<components.StoreSelectorTermsOfService {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});

describe('StoreSelectorTermsOfService tests', () => {
    it('renders correctly without locations', () => {
        const mockProps: components.IStoreSelectorFoundLocationsMessage = {
            // @ts-ignore partial mock
            resources: {
                storeCountMessage: 'We found {count} stores within {radius} miles of you.',
                storeAllCountMessage: 'We found {count} stores.',
                milesShortText: 'mi'
            },
            locations: undefined,
            searchRadius: 50,
            isSeeAllStore:false,
            preferredDistanceUnit: 'mi'
        };
        const component = render(<components.StoreSelectorFoundLocationsMessage {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with locations', () => {
        const mockProps: components.IStoreSelectorFoundLocationsMessage = {
            // @ts-ignore partial mock
            resources: {
                storeCountMessage: 'We found {count} stores within {radius} miles of you.',
                storeAllCountMessage: 'We found {count} stores.',
                milesShortText: 'mi'
            },
            // only care about count here so don't have to actually populate list
            locations: [
                {}, {}, {}
            ],
            searchRadius: 50,
            isSeeAllStore:false,
            preferredDistanceUnit: 'mi'
        };
        const component = render(<components.StoreSelectorFoundLocationsMessage {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with locations and alternates', () => {
        const mockProps: components.IStoreSelectorFoundLocationsMessage = {
            // @ts-ignore partial mock
            resources: {
                storeCountMessage: 'Encontramos {count} tiendas a {radius} millas de usted.',
                storeAllCountMessage:'Encontramos {count} tiendas.',
                milesShortText: 'mi'
            },
            // only care about count here so don't have to actually populate list
            locations: [
                {}, {}
            ],
            searchRadius: 10,
            isSeeAllStore:false,
            preferredDistanceUnit: 'mi'
        };
        const component = render(<components.StoreSelectorFoundLocationsMessage {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});