/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

import { getPayloadObject, getTelemetryAttributes, IPayLoad, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import {
    OrgUnitContact,
    OrgUnitLocation,
    StoreHours
} from '@msdyn365-commerce/retail-proxy';
import { buildStoreHours, IHoursDisplayInfo, secondsToTime } from './date-time-helpers';

export interface IStoreSelectorLocationLineItemResources {
    contactInfoHeader: string;
    storeHoursHeader: string;
    availabilityInfoHeader: string;

    closedText: string;

    outOfStock: string;
    inStock: string;

    currentLocation: string;
    selectLocation: string;
    selectLocationAriaLabelFormat: string;
    setAsPreferredStoreText: string;
    setAsPreferredStoreTextAriaLabel: string;
    preferredStoreText: string;
    preferredStoreAriaLabel: string;

    days: {
        monday: string;
        tuesday: string;
        wednesday: string;
        thursday: string;
        friday: string;
        saturday: string;
        sunday: string;
        mondayFull: string;
        tuesdayFull: string;
        wednesdayFull: string;
        thursdayFull: string;
        fridayFull: string;
        saturdayFull: string;
        sundayFull: string;
    };
}

export interface IStoreSelectorLocationLineItemProps {
    location: OrgUnitLocation;
    storeHours?: StoreHours;

    hideStockStatus?: boolean;
    isInStock?: boolean;
    isCurrentLocation?: boolean;

    resources: IStoreSelectorLocationLineItemResources;
    stockStatusLabel?: string;
    storeLocatorView?: boolean;
    isPreferredStoreEnabled?: boolean;
    index: string;
    preferredStoreLocationId: string | null;
    /** The telemetry content */
    telemetryContent?: ITelemetryContent;
    preferredDistanceUnit: string;
    isLocationDisabled?: boolean;
    handlers: {
        onSelected(location: OrgUnitLocation): void;
        onSetAsPreferredStore(locationId: string | undefined): void;
        onRemovePreferredStore(): void;
    };
}

const StoreSelectorLocationLineItemComponentActions = {
    onLocationSelected(props: IStoreSelectorLocationLineItemProps): void {
        props.handlers.onSelected(props.location);
    },
    onSetAsPreferredStore(props: IStoreSelectorLocationLineItemProps): void {
        props.handlers.onSetAsPreferredStore(props.location.OrgUnitNumber);
    },
    onRemovePreferredStore(props: IStoreSelectorLocationLineItemProps): void {
        props.handlers.onRemovePreferredStore();
    }
};

const renderStoreHours = (storeHours: StoreHours | undefined, location: OrgUnitLocation, resources: IStoreSelectorLocationLineItemResources): JSX.Element | null => {
    // First, use the store hours. This will allow listing day by day houts
    if (storeHours && storeHours.RegularStoreHours) {
        const storeHoursList: IHoursDisplayInfo[] = buildStoreHours(storeHours.RegularStoreHours, resources);

        return (
            <div className='ms-store-select__store-hours-details-group'>
                {storeHoursList.map(displayTime => (
                    <div className='ms-store-select__store-hours-details'>
                        {displayTime.endDayShort ? (
                            <div className='ms-store-select__store-hours-day'>
                                <abbr title={displayTime.startDayFull}>{displayTime.startDayShort}</abbr>â€“
                                <abbr title={displayTime.endDayFull}>{displayTime.endDayShort}</abbr>
                            </div>
                        ) : (
                                <div className='ms-store-select__store-hours-day'>
                                    <abbr title={displayTime.startDayFull}>{displayTime.startDayShort}</abbr>
                                </div>
                            )}
                        <div className='ms-store-select__store-hours-time'>{displayTime.timeRange}</div>
                    </div>
                ))}
            </div>
        );
    } else {
        // If that fails, fall back to using the OpenFrom and OpenTo properties on the location
        const storeOpenFrom: string | undefined = secondsToTime(location.OpenFrom);
        const storeOpenTo: string | undefined = secondsToTime(location.OpenTo);

        return (
            <div className='ms-store-select__store-hours-details'>
                {storeOpenFrom}-{storeOpenTo}
            </div>
        );
    }
};

const buildDistanceString = (distance: number | undefined, preferredDistanceUnit: string, isLocationDisabled?: boolean): string | undefined => {
    if (distance === undefined || isLocationDisabled) {
        return undefined;
    } else if (distance < 1) {
        return `(<1 ${preferredDistanceUnit})`;
    } else {
        return `(${Math.floor(distance)} ${preferredDistanceUnit})`;
    }
};

const extractPhoneNumber = (contacts: OrgUnitContact[] | undefined): string | undefined => {
    if (!contacts) {
        return undefined;
    }

    const allPhoneContacts = contacts.filter(contact => contact.ContactTypeValue === 1 && !contact.IsPrivate);

    if (allPhoneContacts && allPhoneContacts.length > 0) {
        const primaryPhoneContact = allPhoneContacts.find(contact => contact.IsPrimary);

        if (primaryPhoneContact) {
            return primaryPhoneContact.Locator;
        }

        return allPhoneContacts[0].Locator;
    }

    return undefined;
};

// tslint:disable-next-line: max-func-body-length
const StoreSelectorLocationLineItem: React.FC<IStoreSelectorLocationLineItemProps> = (props: IStoreSelectorLocationLineItemProps) => {
    const onClick = () => StoreSelectorLocationLineItemComponentActions.onLocationSelected(props);

    const {
        hideStockStatus,
        isCurrentLocation,
        isInStock,
        location,
        resources,
        storeHours,
        stockStatusLabel,
        storeLocatorView,
        index,
        preferredStoreLocationId,
        isPreferredStoreEnabled,
        isLocationDisabled,
        telemetryContent
    } = props;

    const storeName: string | undefined = location.OrgUnitName;
    const distanceAsString: string | undefined = buildDistanceString(location.Distance, props.preferredDistanceUnit, isLocationDisabled);
    const storeAddress: string | undefined = location.Address;
    const phoneNumber: string | undefined = extractPhoneNumber(location.Contacts);

    const resourceLabel = isInStock ? resources.inStock : resources.outOfStock;
    const stockLabel = stockStatusLabel ? stockStatusLabel : undefined;
    const stockText: string | undefined = (hideStockStatus) ? undefined : (stockLabel ? stockLabel : resourceLabel);
    const canSelectLocation = hideStockStatus || isInStock;
    const pickupInStoreButtonText: string = resources.selectLocation;
    const pickupInStoreAriaLabel: string = resources.selectLocationAriaLabelFormat.replace('{StoreName}', storeName || '');
    const isPreferredStore = preferredStoreLocationId === location.OrgUnitNumber;
    const payLoad: IPayLoad = getPayloadObject('click', telemetryContent!, TelemetryConstant.PickupInStore);
    const attributes = getTelemetryAttributes(telemetryContent!, payLoad);
    payLoad.contentAction.etext = TelemetryConstant.PreferredStore;
    const preferredStoreAttr = getTelemetryAttributes(telemetryContent!, payLoad);
    payLoad.contentAction.etext = TelemetryConstant.RemovePreferredStore;
    const RemovePreferredStoreAttr = getTelemetryAttributes(telemetryContent!, payLoad);

    const setAsPreferredStore = () => StoreSelectorLocationLineItemComponentActions.onSetAsPreferredStore(props);
    const removePreferredStore = () => StoreSelectorLocationLineItemComponentActions.onRemovePreferredStore(props);

    return (
        <div className='ms-store-select__location-line-item'>
            <div className='ms-store-select__location-line-item-header'>
                {storeLocatorView && <span className='ms-store-select__location-line-item-store-index'>{index}</span>}
                <span className='ms-store-select__location-line-item-store-name'>{storeName}</span>
                {distanceAsString ? <span className='ms-store-select__location-line-item-store-distance'> {distanceAsString}</span> : false}
            </div>
            <div className='ms-store-select__location-line-item-content'>
                <div className='ms-store-select__location-line-item-contact-info'>
                    <p className='ms-store-select__location-line-header'>{resources.contactInfoHeader}</p>
                    {storeAddress && (
                        <div className='ms-store-select__location-line-shop-address-section'>
                            <span className='msi msi-map-marker-alt ms-store-select__location-line-shop-address-glyph-icon' />
                            <span className='ms-store-select__location-line-shop-address-text'>{storeAddress}</span>
                        </div>
                    )}
                    {phoneNumber && (
                        <div className='ms-store-select__location-line-shop-phone-section'>
                            <span className='msi msi-phone ms-store-select__location-line-shop-phone-icon' />
                            <span className='ms-store-select__location-line-shop-phone-text'>{phoneNumber}</span>
                        </div>
                    )}
                </div>
                <div className='ms-store-select__location-line-item-store-hours'>
                    <p className='ms-store-select__location-line-header'>{resources.storeHoursHeader}</p>
                    {renderStoreHours(storeHours, location, resources)}
                </div>
                {
                    !storeLocatorView &&
                    <div className='ms-store-select__location-line-item-store-availability'>
                        <p className='ms-store-select__location-line-header'>{resources.availabilityInfoHeader}</p>
                        {stockText && <p className='ms-store-select__location-line-stock-status'>{stockText}</p>}
                        {isCurrentLocation ?
                            (
                                <p className='ms-store-select__location-line-current-location'>{resources.currentLocation}</p>
                            ) : canSelectLocation ?
                                (
                                    <button
                                        className='ms-store-select__location-line-select-store'
                                        aria-label={pickupInStoreAriaLabel}
                                        onClick={onClick}
                                        {...attributes}
                                    >
                                        {pickupInStoreButtonText}
                                    </button>
                                ) : (
                                    false
                                )
                        }
                    </div>
                }
                {
                    isPreferredStoreEnabled ?
                        isPreferredStore ?
                            <button className='ms-store-select__location-line-item-preferred-store' aria-label={resources.preferredStoreAriaLabel} onClick={removePreferredStore} {...RemovePreferredStoreAttr} >
                                {resources.preferredStoreText}
                            </button>
                            : <button className='ms-store-select__location-line-item-set-as-preferred-store' aria-label={resources.setAsPreferredStoreTextAriaLabel} {...preferredStoreAttr} onClick={setAsPreferredStore}>
                                {resources.setAsPreferredStoreText}
                            </button>
                        : null
                }
            </div>
        </div>
    );
};

export const StoreSelectorLocationLineItemComponent = StoreSelectorLocationLineItem as (props: IStoreSelectorLocationLineItemProps) => JSX.Element;