/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { getPayloadObject, getTelemetryAttributes, IPayLoad, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import * as React from 'react';

export interface IStoreSelectorSearchFormProps {
    resources: {
        searchInputAriaLabel: string;
        searchButtonAriaLabel: string;
        searchPlaceholderText: string;
        seeAllStoresText: string;
        viewListText: string;
        viewMapText: string;
    };

    value: string;
    isMapDisabled?: boolean;
    showAllStores?: boolean;
    displayList?: boolean;
    locatorView?: boolean;
    /** The telemetry content */
    telemetryContent?: ITelemetryContent;
    onShowAllStores(): void;
    onToggleListMapViewState(): void;
    performSearch(searchTerm: string): Promise<void>;
    searchTermChanged(searchTerm: string): Promise<void>;
}

/**
 * Simple search form consisting of search text and a search button
 */
export class StoreSelectorSearchForm extends React.PureComponent<IStoreSelectorSearchFormProps> {
    private searchBoxRef: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>();
    private storeSearchAttributes: Msdyn365.IDictionary<string> | undefined;
    private showAllStoreAttributes: Msdyn365.IDictionary<string> | undefined;
    private toggleMapViewAttributes: Msdyn365.IDictionary<string> | undefined;

    constructor(props: IStoreSelectorSearchFormProps) {
        super(props);
        this.state = { value: '' };
        const payLoad: IPayLoad = getPayloadObject('click', props.telemetryContent!, TelemetryConstant.SearchStore);
        this.storeSearchAttributes = getTelemetryAttributes(props.telemetryContent!, payLoad);
        payLoad.contentAction.etext = TelemetryConstant.ShowAllStore;
        this.showAllStoreAttributes = getTelemetryAttributes(props.telemetryContent!, payLoad);
        payLoad.contentAction.etext = TelemetryConstant.ToggleMapView;
        this.toggleMapViewAttributes = getTelemetryAttributes(props.telemetryContent!, payLoad);
    }

    public render(): JSX.Element {
        const {
            resources: { searchButtonAriaLabel, searchPlaceholderText, seeAllStoresText, viewListText, viewMapText },
            value,
            isMapDisabled,
            showAllStores,
            displayList,
            locatorView,
            onShowAllStores,
            onToggleListMapViewState
        } = this.props;

        const toggleButtonText = displayList ? viewMapText : viewListText;

        return (
            <div className='ms-store-select__search'>
                <form
                    className='ms-store-select__search-form'
                    aria-label={searchButtonAriaLabel}
                    name='storeSelectorSearchForm'
                    role='form'
                    autoComplete='off'
                    onSubmit={this._onSubmit}
                    id='ms-store-select__search-box-container'
                >
                    <input
                        type='text'
                        aria-label={this.props.resources.searchInputAriaLabel}
                        className='msc-form-control ms-store-select__search-input'
                        placeholder={searchPlaceholderText}
                        value={value}
                        onChange={this._searchTextChanged}
                        id='ms-store-select__search-box'
                        ref={this.searchBoxRef}
                        role='combobox'
                        aria-expanded='false'
                        aria-controls='as_containerSearch'
                    />
                    <button
                        className={`ms-store-select__search-button${isMapDisabled ? ` search-btn-disabled` : ``}`}
                        aria-label={searchButtonAriaLabel}
                        color={'primary'}
                        {...this.storeSearchAttributes}
                    />
                </form>
                {showAllStores && <div className='ms-store-select__search-see-all-stores' role='none' onClick={onShowAllStores} {...this.showAllStoreAttributes}>{seeAllStoresText}</div>}
                {locatorView && <button className='ms-store-select__toggle-view' onClick={onToggleListMapViewState} {...this.toggleMapViewAttributes} >{toggleButtonText}</button>}
            </div>
        );
    }

    private _searchTextChanged = async (e: React.ChangeEvent<HTMLInputElement>): Promise<void> => {
        const inputValue: string = e.target.value;

        await this.props.searchTermChanged(inputValue);
    };

    private _onSubmit = async (e: React.SyntheticEvent): Promise<void> => {
        e.preventDefault(); // Prevents form submission
        this.searchBoxRef.current?.blur();
        await this.props.performSearch(this.props.value);
    }
}