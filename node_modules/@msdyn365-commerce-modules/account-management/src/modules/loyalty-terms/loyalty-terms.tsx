/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { GetLoyaltyCardInput, issueLoyalty, IssueLoyaltyInput } from '@msdyn365-commerce-modules/retail-actions';
import { getLoyaltyCardAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';

import {
    Button,
    getTelemetryObject,
    IModuleProps,
    ITelemetryContent
} from '@msdyn365-commerce-modules/utilities';
import { getUrlSync } from '@msdyn365-commerce/core';
import classname from 'classnames';
import * as React from 'react';
import {ILoyaltyTermsModalViewProps, LoyaltyTermsModal} from './components/loyalty-terms-modal';
import { ILoyaltyTermsData } from './loyalty-terms.data';
import { ILoyaltyTermsProps } from './loyalty-terms.props.autogenerated';

export interface ILoyaltyTermsState {
    checked: boolean;
    clicked: boolean;
    isModalOpen: boolean;
}
export interface ILoyaltyTermsViewProps extends ILoyaltyTermsProps<ILoyaltyTermsData> {
    LoyaltyTerms: IModuleProps;
    modalToggle: React.ReactElement;
    modal: ILoyaltyTermsModalViewProps;
    loading: boolean;
}

/**
 *
 * LoyaltyTerms component
 * @extends {React.Component<ILoyaltyTermsProps<ILoyaltyTermsData>>}
 */
class LoyaltyTerms extends React.Component<ILoyaltyTermsProps<ILoyaltyTermsData>, ILoyaltyTermsState> {
    private toggleRef: React.RefObject<HTMLButtonElement>;
    private telemetryContent: ITelemetryContent;

    public constructor(props: ILoyaltyTermsProps<ILoyaltyTermsData>) {
        super(props);
        this._toggle = this._toggle.bind(this);
        this._submit = this._submit.bind(this);
        this._checkboxChecked = this._checkboxChecked.bind(this);
        this.toggleRef = React.createRef();
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
        let search = this.props.context.request.url.requestUrl.search;
        let isJoining = false;
        if (search) {
            search = search.substring(1);
            const qsps = search.split('&');
            for (let i = 0; i < qsps.length; i++) {
                const splitQsp = qsps[i].split('=');
                isJoining = splitQsp[0] === 'joiningLoyalty' && splitQsp[1] === 'true';
                if(isJoining) {
                    break;
                }
            }
        }

        this.state = {
            isModalOpen: isJoining,
            checked: false,
            clicked: false
        };
    }

    public render(): JSX.Element | null {
        const {
            config: { className, hideToggle },
            resources,
            slots: { serviceTerms },
            data: { loyaltyCard },
            context: {
                request: {
                    user: {
                        isAuthenticated
                    }
                }
            }
        } = this.props;
        const completeClass = classname('ms-loyalty-terms', className);

        const viewProps = {
            ...this.props,
            className: completeClass,
            LoyaltyTerms: {
                moduleProps: this.props,
                className: completeClass
            },
            loading: loyaltyCard.status === 'LOADING',
            modalToggle: (hideToggle !== true) && <Button className='ms-loyalty-terms__toggle' onClick={this._toggle} innerRef={this.toggleRef}>{resources.joinLoyaltytermsToggleText}</Button>,
            modal: isAuthenticated && loyaltyCard.result && loyaltyCard.result.CardNumber === undefined && LoyaltyTermsModal({
                resources: {...resources},
                returnRef: this.toggleRef,
                checked: this.state.checked,
                isOpen: this.state.isModalOpen,
                terms: serviceTerms,
                telemetryContent: this.telemetryContent,
                onToggle: this._toggle,
                onSubmit: this._submit,
                onCheck: this._checkboxChecked
            })
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private _toggle(): void {
        this.setState({isModalOpen: !this.state.isModalOpen, checked: false});
    }

    private _submit(): void {
        if (this.props.context.request.user.isAuthenticated && !this.state.clicked) {
            this.setState({ clicked: true });
            const input = new IssueLoyaltyInput(this.props.context.request.apiSettings);

            issueLoyalty(input, this.props.context.actionContext)
                .then((card) => {
                    if (this.props.config.redirectToLoyalty) {
                        window.location.assign(getUrlSync('loyalty', this.props.context.actionContext) || '');
                    } else {
                        getLoyaltyCardAsync({ callerContext: this.props.context.actionContext }, card.CardNumber || '')
                            .then((fullCard) => {
                                this.props.context.actionContext.update(new GetLoyaltyCardInput(this.props.context.request.apiSettings), fullCard);
                            })
                            .catch((error: Error) => {
                                this.props.context.actionContext.update(new GetLoyaltyCardInput(this.props.context.request.apiSettings), card);
                                this.props.telemetry.error(error.message);
                                this.props.telemetry.debug('Unable to fetch loyalty card');
                            });
                    }
                })
                .catch((error: Error) => {
                    this.setState({ clicked: false });
                    this.props.telemetry.error(error.message);
                    this.props.telemetry.debug('Unable to issue loyalty card');
                });
        }
    }

    private _checkboxChecked(): void {
        this.setState({checked: !this.state.checked});
    }
}

export default LoyaltyTerms;