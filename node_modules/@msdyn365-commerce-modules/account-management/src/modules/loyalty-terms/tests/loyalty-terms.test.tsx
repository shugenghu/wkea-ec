/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

// <reference types=jest />
// tslint:disable-next-line:no-unused-variable
import { mount, render } from 'enzyme';
import React, {ReactNode} from 'react';

import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { LoyaltyCard } from '@msdyn365-commerce/retail-proxy';
import * as StoreActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';

import LoyaltyTerms, { ILoyaltyTermsViewProps } from '../loyalty-terms';
import { ILoyaltyTermsData } from '../loyalty-terms.data';
import {
     ILoyaltyTermsConfig, ILoyaltyTermsProps, ILoyaltyTermsResources
} from '../loyalty-terms.props.autogenerated';

let mockData: ILoyaltyTermsData;

const mockConfig: ILoyaltyTermsConfig = {
    redirectToLoyalty: false,
    hideToggle: false
};

// @ts-ignore empty mock
let mockContext: ICoreContext;

const mockResources: ILoyaltyTermsResources = {
    loyaltyTermsHeading: 'Loyalty program terms of service',
    loyaltyAgreeToTerms: 'I have read and agree to the terms of service listed above',
    joinLoyaltytermsToggleText: 'Sign up for Fabrikam loyalty',
    joinLoyaltyTermsText: 'Join now',
    cancelLoyaltyTermsText: 'Cancel',
    loyaltyHeadingText: 'Loyalty card'
};

const mockActions = {};
const flushPromises = () => new Promise(setImmediate);

describe('LoyaltyTerms', () => {
  let moduleProps: ILoyaltyTermsProps<ILoyaltyTermsData>;
  beforeEach(() => {
        mockData = { loyaltyCard: RetailActions.wrapInResolvedAsyncResult<LoyaltyCard>({ CardNumber: undefined })};
        mockContext = { request: {locale: 'en-us', user: {isAuthenticated: true, customerAccountNumber: 'foo'}, url: {requestUrl: {search: ''}}}};
        // @ts-ignore
        moduleProps = {...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as ILoyaltyTermsProps<ILoyaltyTermsData>, resources: mockResources, renderView: jest.fn(props => { return <div props={props} />;})};
        const myReactNodeChild1: ReactNode = `whatever child module 1`;
        moduleProps.slots = {serviceTerms: [myReactNodeChild1]};
  });

  it('Renders modal if card present and user authenticated', () => {
    const component = mount(<LoyaltyTerms {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ILoyaltyTermsViewProps = component.childAt(0).props().props;
    const { modal, modalToggle } = viewProps;

    expect(modal).toBeTruthy();
    expect(modalToggle).toBeTruthy();
    expect(render(modalToggle)).toMatchSnapshot();
    component.unmount();
  });

  it('Does not render module if already have card', () => {
    moduleProps.data.loyaltyCard = RetailActions.wrapInResolvedAsyncResult<LoyaltyCard>({ CardNumber: '1' });

    const component = mount(<LoyaltyTerms {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ILoyaltyTermsViewProps = component.childAt(0).props().props;
    const { modal, modalToggle } = viewProps;

    expect(modal).not.toBeTruthy();
    expect(modalToggle).toBeTruthy();
    component.unmount();
  });

  it('Does not render modal if user not authed', () => {
    moduleProps.context.request.user.isAuthenticated = false;

    const component = mount(<LoyaltyTerms {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ILoyaltyTermsViewProps = component.childAt(0).props().props;
    const { modal, modalToggle } = viewProps;

    expect(modal).not.toBeTruthy();
    expect(modalToggle).toBeTruthy();
    component.unmount();
  });

  it('toggles modal', () => {
    const component = mount(<LoyaltyTerms {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ILoyaltyTermsViewProps = component.childAt(0).props().props;
    const { modalToggle } = viewProps;
    const toggle = mount(modalToggle);
    toggle.simulate('click');
    expect(component.state('isModalOpen')).toBe(true);
    toggle.unmount();
    component.unmount();
  });

  it('toggles check', () => {
    const component = mount(<LoyaltyTerms {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ILoyaltyTermsViewProps = component.childAt(0).props().props;
    const { modal } = viewProps;
    const checkbox = mount(modal.checkbox);
    checkbox.simulate('change');
    expect(component.state('checked')).toBe(true);
    checkbox.unmount();
    component.unmount();
  });

  it('submit not submit when checked is false', async () => {
    const component = mount(<LoyaltyTerms {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ILoyaltyTermsViewProps = component.childAt(0).props().props;
    const { modal } = viewProps;
    // @ts-ignore
    jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.resolve({}));
    const submit = mount(modal.submitButton);
    submit.simulate('click');
    await flushPromises();
    expect(RetailActions.issueLoyalty).not.toHaveBeenCalled();
    submit.unmount();
    component.unmount();
  });

  it('submits when checked is true and redirects when config  is set to true', async () => {
    moduleProps.config.redirectToLoyalty = true;
    const component = mount(<LoyaltyTerms {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    jest.spyOn(window.location, 'assign');
    // @ts-ignore
    jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.resolve({}));

    component.setState({checked: true});
    component.update();
    const viewProps: ILoyaltyTermsViewProps = component.childAt(0).props().props;
    const { modal } = viewProps;
    const submit = mount(modal.submitButton);
    submit.simulate('click');
    await flushPromises();
    expect(RetailActions.issueLoyalty).toHaveBeenCalled();
    expect(window.location.assign).toHaveBeenCalled();
    submit.unmount();
    component.unmount();
  });

  it('Refreshes the loyalty card when users dont navigate', async () => {
    moduleProps.config.redirectToLoyalty = false;
    const component = mount(<LoyaltyTerms {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    jest.spyOn(window.location, 'assign');
    // @ts-ignore
    jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.resolve({}));
    // @ts-ignore
    jest.spyOn(StoreActions, 'getLoyaltyCardAsync').mockImplementation(() => Promise.resolve({}));

    component.setState({checked: true});
    component.update();
    const viewProps: ILoyaltyTermsViewProps = component.childAt(0).props().props;
    const { modal } = viewProps;
    const submit = mount(modal.submitButton);
    submit.simulate('click');
    await flushPromises();
    expect(RetailActions.issueLoyalty).toHaveBeenCalled();
    expect(StoreActions.getLoyaltyCardAsync).toHaveBeenCalled();
    submit.unmount();
    component.unmount();
  });
});
