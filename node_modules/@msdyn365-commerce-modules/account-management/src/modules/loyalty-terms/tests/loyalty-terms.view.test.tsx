/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import {  buildMockModuleProps } from '@msdyn365-commerce/core';
import {  LoyaltyCard } from '@msdyn365-commerce/retail-proxy';
import { render } from 'enzyme';
import * as React from 'react';
import {ILoyaltyTermsViewProps} from '../loyalty-terms';
import {ILoyaltyTermsData} from '../loyalty-terms.data';
import { ILoyaltyTermsProps } from '../loyalty-terms.props.autogenerated';
import LoyaltySignUpView from '../loyalty-terms.view';

const emptyMockData: ILoyaltyTermsData = {
    loyaltyCard: wrapInResolvedAsyncResult<LoyaltyCard>(undefined)
};
const mockData: ILoyaltyTermsData = {
    loyaltyCard: wrapInResolvedAsyncResult<LoyaltyCard>({CardNumber: 'carddd'} as LoyaltyCard)
};
let mockProps: ILoyaltyTermsViewProps;

const mockModal = {
    modal: {className: 'modal'},
    modalHeader: {className: 'modal-header'},
    modalFooter: {className: 'modal-footer'},
    modalBody: {className: 'modal-body'},
    heading: <p>heading</p>,
    cancelButton: <button>Cancel</button>,
    submitButton: <button>Submit</button>,
    terms: <p>terms</p>,
    checkbox: <input/>,
    agreeText: <p>agree to terms text</p>,
    agreeSection: {className: 'agreeSection'}
};

describe('LoyaltySignUpView', () => {
    it('Returns null when module is loading', () => {
        const moduleProps: ILoyaltyTermsProps<{}> = buildMockModuleProps({}, mockData) as ILoyaltyTermsProps<{}>;
        moduleProps.context.request.user.isAuthenticated = true;
        mockProps = {
            ...moduleProps,
            LoyaltyTerms: {
                moduleProps: moduleProps,
                className: 'foo'
            },
            data: mockData,
            loading: true,
            modalToggle: <button>Modal toggle</button>,
            modal: mockModal
        };

        const component = render(<LoyaltySignUpView {...mockProps} />);
        expect(component.html()).toBe(null);
    });

    it('Renders correctly', () => {
        const moduleProps: ILoyaltyTermsProps<{}> = buildMockModuleProps({}, {}) as ILoyaltyTermsProps<{}>;
        moduleProps.context.request.user.isAuthenticated = true;
        mockProps = {
            ...moduleProps,
            LoyaltyTerms: {
                moduleProps: moduleProps,
                className: 'foo'
            },
            data: emptyMockData,
            loading: false,
            modalToggle: <button>Modal toggle</button>,
            modal: mockModal
        };

        const component = render(<LoyaltySignUpView {...mockProps} />);
        expect(component.html()).not.toBe(null);
        expect(component).toMatchSnapshot();
    });
});