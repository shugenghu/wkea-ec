/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import {
    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody
} from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';

import PasswordResetVerificationButtonComponent from './components/password-reset-verification-button';
import PasswordResetVerificationErrorComponent from './components/password-reset-verification-error';
import PasswordResetVerificationInputComponent from './components/password-reset-verification-input';
import PasswordResetVerificationLabelComponent from './components/password-reset-verification-label';
import PasswordResetVerificationLoadingIconComponent from './components/password-reset-verification-loading-icon';
import PasswordResetVerificationLoadingMessageComponent from './components/password-reset-verification-loading-message';
import PasswordResetVerificationSuccessComponent from './components/password-reset-verification-success';
import {
    IPasswordResetVerificationConfig, IPasswordResetVerificationProps
} from './password-reset-verification.props.autogenerated';

export interface IPasswordResetVerificationViewState {
    isShowLoading: boolean;
}

export interface IPasswordResetVerificationItem {
    wrapper: INodeProps;
    key: string;
    label: React.ReactNode;
    errorMessage: React.ReactNode;
    input: React.ReactNode;
}

export interface IPasswordResetVerificationLocalAccount {
    localAccount: INodeProps;
    items: IPasswordResetVerificationItem[];
    successMessage: React.ReactNode[];
    errorMessage: React.ReactNode[];
    verificationButtonsWrapper: INodeProps;
    verificationButtons: React.ReactNode[];
    buttonsWrapper: INodeProps;
    buttons: React.ReactNode[];
    verificationSuccessModal: INodeProps;
    verificationSuccessModalMessage: INodeProps;
}

export interface IPasswordResetVerificationLoading {
    modal: INodeProps;
    modalBody: INodeProps;
    icon: React.ReactNode;
    message: React.ReactNode;
}

export interface IPasswordResetVerificationViewProps {
    className: string;
    viewState: IPasswordResetVerificationViewState;
    loading: IPasswordResetVerificationLoading;
    passwordResetVerification: IModuleProps;
    defaultAADConainer: INodeProps;
    aadConainer: INodeProps;
    heading: React.ReactNode;
    passwordResetVerificationLocalAccount: IPasswordResetVerificationLocalAccount;
}

/**
 *
 * PasswordResetVerification component
 * @extends {React.Component<IPasswordResetVerificationProps<IPasswordResetVerificationConfig>>}
 */
@observer
class PasswordResetVerification extends React.Component<IPasswordResetVerificationProps<IPasswordResetVerificationConfig>> {
    private moduleClassName: string = 'ms-password-reset-verification';
    private telemetryContent: ITelemetryContent;
    @observable private emailRegex: string;
    @observable private isInitialized: boolean;

    // tslint:disable-next-line:no-any
    private initializationTimer: any;

    constructor(props: IPasswordResetVerificationProps<IPasswordResetVerificationConfig>) {
        super(props);
        this.emailRegex = '^[a-zA-Z0-9.!#$%&\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$';
        this.isInitialized = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public componentDidMount(): void {
        this._onInit();
    }

    // After successful AAD initialization, call initialize method provided by AAD to attach events.
    public componentDidUpdate(): void {
        // tslint:disable-next-line:no-string-literal
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            // tslint:disable-next-line:no-string-literal
            window['$element']['initialize']();
        }
    }

    public render(): JSX.Element {
        const { config, resources } = this.props;

        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            passwordResetVerification: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: <PasswordResetVerificationLoadingIconComponent className={this.moduleClassName} />,
                message: <PasswordResetVerificationLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            heading: config.heading &&
            <Msdyn365.Text className={`${this.moduleClassName}__heading`} {...config.heading}  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}/>,
            passwordResetVerificationLocalAccount: this._renderLocalAccount()
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text= event.target.value;

    public _onInit = () => {
        this._prePopulateData();
        this._updateErrorMessage();
        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.
        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);
        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);
    }

    // After successful AAD initialization, remove waiting and preload any data, if needed.
    private _isInitializationSuccessful = () => {
        // tslint:disable-next-line:no-string-literal
        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
            clearInterval(this.initializationTimer);
            this.isInitialized = true;
        }
    }

    private _prePopulateData(): void {
        // tslint:disable-next-line:no-string-literal
        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
            // tslint:disable-next-line:no-string-literal
            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PAT: string }) => {
                if (obj.ID.toLowerCase() === 'email') {
                    this.emailRegex = obj.PAT;
                }
            });
        }
    }

    private _updateErrorMessage(): void {
        // tslint:disable-next-line:no-string-literal
        if (window && window['CONTENT']) {

            const message = {
                verifying_blurb: this.props.resources.loadingMessage
            };

            // tslint:disable-next-line:no-string-literal
            Object.assign(window['CONTENT'], message);
        }
    }

    // tslint:disable-next-line: max-func-body-length
    private _renderLocalAccount(): IPasswordResetVerificationLocalAccount {
        const { resources } = this.props;
        return {
            localAccount: {
                id: 'attributeList',
                className: `${this.moduleClassName}__account-items attr`
            },
            items: [
                this._renderInput('email', 'email', resources.emailAddressLabelText, undefined, this.emailRegex),
                this._renderInput('email_ver_input', 'email', resources.verificationCodeLabelText),
            ],
            successMessage: [
                <PasswordResetVerificationSuccessComponent key='email_info' id='email_info' className={this.moduleClassName} message={resources.verificationCodeSendSuccess} />,
                <PasswordResetVerificationSuccessComponent key='email_success' id='email_success' className={this.moduleClassName} message={resources.emailAddressVerifiedSuccess} />
            ],
            errorMessage: [
                <PasswordResetVerificationErrorComponent key='email_fail_retry' id='email_fail_retry' className={this.moduleClassName} message={resources.retryError} />,
                <PasswordResetVerificationErrorComponent key='email_fail_no_retry' id='email_fail_no_retry' className={this.moduleClassName} message={resources.retryNotAllowedError} />,
                <PasswordResetVerificationErrorComponent key='email_fail_throttled' id='email_fail_throttled' className={this.moduleClassName} message={resources.throttledError} />,
                <PasswordResetVerificationErrorComponent key='email_fail_code_expired' id='email_fail_code_expired' className={this.moduleClassName} message={resources.codeExpiredError} />,
                <PasswordResetVerificationErrorComponent key='email_fail_server' id='email_fail_server' className={this.moduleClassName} message={resources.serverError} />,
                <PasswordResetVerificationErrorComponent key='email_incorrect_format' id='email_incorrect_format' className={this.moduleClassName} message={resources.invalidEmailError} />,
                <PasswordResetVerificationErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />
            ],
            verificationButtonsWrapper: {
                className: `${this.moduleClassName}__email-verification-buttons verify`,
                'data-claim_id': 'email'
            },
            verificationButtons: [

                (
                    <PasswordResetVerificationButtonComponent
                        key='email_ver_but_send'
                        id='email_ver_but_send'
                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-send sendButton`}
                        ariaLabel={resources.sendCodeButtonAriaLabel}
                        text={resources.sendCodeButtonText}
                        telemetryContent={this.telemetryContent}
                    />
                ),

                (
                    <PasswordResetVerificationButtonComponent
                        key='email_ver_but_verify'
                        id='email_ver_but_verify'
                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-verify verifyButton`}
                        ariaLabel={resources.verifyCodeButtonAriaLabel}
                        text={resources.verifyCodeButtonText}
                        telemetryContent={this.telemetryContent}
                    />
                ),
                (
                    <PasswordResetVerificationButtonComponent
                        key='email_ver_but_resend'
                        id='email_ver_but_resend'
                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-resend sendButton`}
                        ariaLabel={resources.resendCodeButtonAriaLabel}
                        text={resources.resendCodeButtonText}
                        telemetryContent={this.telemetryContent}
                    />
                ),
                (
                    <PasswordResetVerificationButtonComponent
                        key='email_ver_but_edit'
                        id='email_ver_but_edit'
                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-edit editButton`}
                        ariaLabel={resources.changeEmailButtonAriaLabel}
                        text={resources.changeEmailButtonText}
                        telemetryContent={this.telemetryContent}
                    />
                )
            ],
            buttonsWrapper: {
                className: `${this.moduleClassName}__buttons`
            },
            buttons: [
                (
                <PasswordResetVerificationButtonComponent
                    key='continue'
                    id='continue'
                    className={`${this.moduleClassName}__continue-button`}
                    ariaLabel={resources.continueButtonAriaLabel}
                    text={resources.continueButtonText}
                    telemetryContent={this.telemetryContent}
                />
                ),
                (
                <PasswordResetVerificationButtonComponent
                    key='cancel'
                    id='cancel'
                    className={`${this.moduleClassName}__cancel-button`}
                    ariaLabel={resources.cancelButtonAriaLabel}
                    text={resources.cancelButtonText}
                />
                )
            ],
            verificationSuccessModal: {
                className: `${this.moduleClassName}__verifying-modal verifying-modal`
            },
            verificationSuccessModalMessage: {
                id: 'verifying_blurb',
                className: `${this.moduleClassName}__verifying-modal-message`
            }
        };
    }

    private _renderInput(id: string, type: string, labelText: string, maxLength?: string, pattern?: string): IPasswordResetVerificationItem {
        const className = `${this.moduleClassName}__account-item`;
        return (
            {
                wrapper: {
                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
                },
                key: id,
                label: (
                    <PasswordResetVerificationLabelComponent
                        {
                        ...{
                            id: id,
                            forId: id,
                            className: className,
                            text: labelText
                        }
                        }
                    />
                ),
                errorMessage: (
                    <PasswordResetVerificationErrorComponent
                        {
                        ...{
                            className: this.moduleClassName,
                            type: 'item'
                        }
                        }
                    />
                ),
                input: (
                    <PasswordResetVerificationInputComponent
                        {
                        ...{
                            id: id,
                            type: type,
                            maxLength: maxLength,
                            pattern: pattern,
                            className: className
                        }
                        }
                    />
                )

            }
        );
    }

}

export default PasswordResetVerification;
