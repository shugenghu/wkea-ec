/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getTelemetryObject, Heading, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import get from 'lodash/get';
import { computed, reaction } from 'mobx';
import * as React from 'react';
import { IAccountCustomerBalanceTileData } from './account-customer-balance-tile.data';
import { IAccountCustomerBalanceTileProps } from './account-customer-balance-tile.props.autogenerated';
import { CreditComponent, ErrorComponent } from './components/account-customer-balance-tile-info';
import LinksComponent from './components/account-customer-balance-tile-links';

export interface IAccountCustomerBalanceTileViewProps extends IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData> {
    AccountCustomerBalanceTile: IModuleProps;
    className: string;
    heading?: React.ReactNode;
    content: React.ReactNode;
    links: React.ReactNode;
}

export interface IAccountCustomerBalanceTileViewState {
    isDetailsLinkDisplayed: boolean;
    content: React.ReactNode;
}

/**
 *
 * AccountCustomerBalanceTile component
 * @extends {React.Component<IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData>>}
 */
class AccountCustomerBalanceTile extends React.Component<
    IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData>,
    IAccountCustomerBalanceTileViewState
> {
    @computed get hasError(): boolean {
        return get(this.props, 'data.balance.status') !== 'SUCCESS';
    }

    private telemetryContent: ITelemetryContent;

    constructor(props: IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData>) {
        super(props);

        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);

        // @ts-ignore
        this.state = { ...this._initState() };

        reaction(
            () => this.hasError,
            () => {
                this.props.context.telemetry.error('Error retrieving customer account balance');
                this.setState({
                    content: <ErrorComponent value={this.props.resources.apiGenericErrorMessage} />
                });
            }
        );
    }

    @computed get isCustomerAccountPaymentEnabled(): boolean {
        const customerResult = get(this.props, 'data.customerInformation.result');

        const allowOnAccountPayment = customerResult ? customerResult.AllowOnAccountPayment : false;
        const isB2BCustomer = customerResult ? customerResult.IsB2B : false;
        const enableCustomerAccountPayment = get(this.props, 'context.request.app.platform.enableCustomerAccountPayment');

        return (
            allowOnAccountPayment &&
            (enableCustomerAccountPayment === 'all' ||
                (enableCustomerAccountPayment === 'b2b' && isB2BCustomer) ||
                (enableCustomerAccountPayment === 'b2c' && !isB2BCustomer))
        );
    }

    public render(): JSX.Element {
        if (!this.isCustomerAccountPaymentEnabled) {
            return <React.Fragment />;
        }

        const { className, heading, links } = this.props.config;
        const viewProps = {
            ...this.props,
            AccountCustomerBalanceTile: {
                moduleProps: this.props,
                className: classnames('ms-account-customer-balance-tile', className)
            },
            heading: heading && (
                <Heading className='ms-account-customer-balance-tile__heading' headingTag={heading.tag} text={heading.text} />
            ),
            content: this.state.content,
            links: this.state.isDetailsLinkDisplayed && (
                <LinksComponent
                    {...{
                        links: links,
                        onTextChange: (index: number) => (event: Msdyn365.ContentEditableEvent) => void 0,
                        requestContext: this.props.context.request,
                        telemetryContent: this.telemetryContent
                    }}
                />
            )
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private _initState(): IAccountCustomerBalanceTileViewState {
        const account = get(this.props, 'data.balance.result');

        let content: React.ReactNode;
        let isDetailsLinkDisplayed = false;

        if (this.hasError) {
            this.props.telemetry.error('Error retrieving customer account balance');
            content = <ErrorComponent error={this.props.resources.apiGenericErrorMessage} />;
        } else if (account.Balance === 0 && account.CreditLimit === 0) {
            // non-established credit
            content = <ErrorComponent error={this.props.resources.noCreditErrorMessage} />;
        } else {
            // successfully retrieved balance
            const { accountCreditVerbagePrefix, accountCreditVerbagePostfix } = this.props.resources;
            const currencyCode = get(this.props, 'context.request.channel.Currency');
            const formatCurrency = get(this.props, 'context.cultureFormatter.formatCurrency');
            const customerBalanceFormatted = `${formatCurrency(account.Balance.toFixed(2), currencyCode)}`;

            isDetailsLinkDisplayed = true;
            content = (
                <CreditComponent
                    verbagePrefix={accountCreditVerbagePrefix}
                    value={customerBalanceFormatted}
                    verbagePostfix={accountCreditVerbagePostfix}
                    className={'ms-account-customer-balance-tile__balance'}
                />
            );
        }

        return { content, isDetailsLinkDisplayed };
    }
}

export default AccountCustomerBalanceTile;
