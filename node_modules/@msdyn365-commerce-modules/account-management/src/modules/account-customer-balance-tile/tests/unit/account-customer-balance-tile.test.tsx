/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { shallow } from 'enzyme';
import * as React from 'react';

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { Customer, CustomerBalances } from '@msdyn365-commerce/retail-proxy';
import AccountCustomerBalanceTileModule from '../../account-customer-balance-tile';
import { IAccountCustomerBalanceTileData } from '../../account-customer-balance-tile.data';
import {
    HeadingTag, IAccountCustomerBalanceTileConfig, IHeadingData
} from '../../account-customer-balance-tile.props.autogenerated';

const mockResources = {
    accountBalanceTileDescription: 'Available balance: ',
    accountCustomerBalanceTileDescription: 'Credit limit: ',
    showBalanceButtonText: 'Show balance',
    hideBalanceButtonText: 'Hide balance',
};

const mockHeading1: IHeadingData = {
    text: 'Mock heading 1',
    tag: HeadingTag.h1
};

const mockConfigWithHeading: IAccountCustomerBalanceTileConfig = {
    className: 'testClassName',
    heading: mockHeading1,
    links: []
};

const mockCustomerBalanceData: IAccountCustomerBalanceTileData = {
    balance: wrapInResolvedAsyncResult({
        Balance: 18.22,
        CreditLimit: 300
    } as CustomerBalances),
    customerInformation: wrapInResolvedAsyncResult({
        AllowOnAccountPayment: true
    } as unknown as Customer)
};

const mockContext = buildMockCoreContext({});
mockContext.cultureFormatter.formatCurrency = jest.fn(price => `$${price}`);

const mockProps = {
    resources: mockResources,
    renderView: jest.fn(),
    renderModuleAttributes: jest.fn()
};

describe('Account-Customer-Balance-Tile Module', () => {
    it('should render correctly if all props are provided ', () => {
        // @ts-ignore mock partial data
        const moduleProps = {
            config: mockConfigWithHeading,
            data: mockCustomerBalanceData,
            context: mockContext,
            ...mockProps
        };
        // @ts-ignore
        shallow(React.createElement(AccountCustomerBalanceTileModule, {...moduleProps}));
        expect(moduleProps.renderView).toMatchSnapshot();
    });
});
