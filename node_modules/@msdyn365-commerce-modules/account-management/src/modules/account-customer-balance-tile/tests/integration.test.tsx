/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { HTMLAttributes, mount, ReactWrapper, render } from 'enzyme';
import React, { Component } from 'react';

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { Customer, CustomerBalances } from '@msdyn365-commerce/retail-proxy';

import AccountCustomerBalanceTileModule from '../account-customer-balance-tile';
import { IAccountCustomerBalanceTileData } from '../account-customer-balance-tile.data';
import {
    HeadingTag,
    IAccountCustomerBalanceTileConfig,
    IAccountCustomerBalanceTileProps,
    IHeadingData
} from '../account-customer-balance-tile.props.autogenerated';
import AccountCustomerBalanceTileView from '../account-customer-balance-tile.view';
import { CreditComponent, ErrorComponent } from '../components/account-customer-balance-tile-info';

enum SELECTOR {
    DetailsLink = '.ms-account-customer-balance-tile__links',
}

const mockResources = {
    viewDetailsLinkText: 'View Details',
    apiGenericErrorMessage: 'API error',
    noCreditErrorMessage: 'Lack of established credit',
    accountCreditVerbagePrefix: 'You have',
    accountCreditVerbagePostfix: 'in account credit.'
};

const mockHeading1: IHeadingData = {
    text: 'Mock heading 1',
    tag: HeadingTag.h1
};

const mockConfigWithHeading: IAccountCustomerBalanceTileConfig = {
    className: 'testClassName',
    heading: mockHeading1,
    links: [
        {
            linkText: 'View Details',
            linkUrl: {
                destinationUrl: '/modern/account-credit-details',
                type: 'internalLink'
            },
            ariaLabel: 'view account details'
        }
    ]
};

const mockCustomerInformation = {
    AllowOnAccountPayment: true
};

const featureEnablingProps: {} = {
    context: {
        request: {
            user: {
                customerAccountNumber: '000001'
            },
            app: {
                platform: {
                    enableCustomerAccountPayment: 'all'
                }
            }
        },
        cultureFormatter: {
            formatCurrency: jest.fn(price => `$${price}`)
        }
    }
};

// @ts-ignore
const buildMockProps = (balanceData): IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData> => {
    const mockRetailActionData = {
        balance: wrapInResolvedAsyncResult(balanceData as CustomerBalances),
        customerInformation: wrapInResolvedAsyncResult(mockCustomerInformation as unknown as Customer)
    };
    return {
        ...(buildMockModuleProps(mockRetailActionData, {}, mockConfigWithHeading) as IAccountCustomerBalanceTileProps<
            IAccountCustomerBalanceTileData
        >),
        resources: mockResources,
        // @ts-ignore
        renderView: AccountCustomerBalanceTileView,
        ...featureEnablingProps
    };
};

describe('Account-Customer-Balance-Tile', () => {
    let moduleProps: IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData>;
    let customerBalanceTile: ReactWrapper<Readonly<{}>, AccountCustomerBalanceTileModule>;
    let linkButton: ReactWrapper<HTMLAttributes, Component>;

    beforeEach(() => {
        moduleProps = buildMockProps({
            Balance: 18.22,
            CreditLimit: 100
        });
        customerBalanceTile = mount(<AccountCustomerBalanceTileModule {...moduleProps} />);
        linkButton = customerBalanceTile.find(SELECTOR.DetailsLink);
    });

    it('should render the view details link', () => {
        expect(linkButton.text()).toEqual(mockResources.viewDetailsLinkText);
    });

    it('should render the CreditComponent.', () => {
        const credit = customerBalanceTile.find(CreditComponent);

        expect(credit).toHaveLength(1);
    });

    it('should render correctly', () => {
        const component = render(<AccountCustomerBalanceTileModule {...moduleProps} />);

        expect(component).toMatchSnapshot();
    });

    describe('when an API Error is encountered', () => {
        beforeEach(() => {
            moduleProps = buildMockProps({});
            // @ts-ignore
            moduleProps.data.balance.status = 'FAILED';
            moduleProps.telemetry.error = jest.fn();
            customerBalanceTile = mount(<AccountCustomerBalanceTileModule {...moduleProps} />);
        });

        it('should render the ErrorComponent.', () => {
            const error = customerBalanceTile.find(ErrorComponent);

            expect(error).toHaveLength(1);
        });

        it('should render correctly', () => {
            const component = render(<AccountCustomerBalanceTileModule {...moduleProps} />);

            expect(component).toMatchSnapshot();
        });
    });

    describe('when the customer has no credit established', () => {
        beforeEach(() => {
            moduleProps = buildMockProps({
                Balance: 0,
                CreditLimit: 0
            });
            customerBalanceTile = mount(<AccountCustomerBalanceTileModule {...moduleProps} />);
            linkButton = customerBalanceTile.find(SELECTOR.DetailsLink);
        });

        it('should render correctly', () => {
            const component = render(<AccountCustomerBalanceTileModule {...moduleProps} />);

            expect(component).toMatchSnapshot();
        });

        it('should not render the link button.', () => {
            expect(linkButton).toHaveLength(0);
        });

        it('should render the ErrorComponent.', () => {
            const error = customerBalanceTile.find(ErrorComponent);

            expect(error).toHaveLength(1);
        });
    });
});
