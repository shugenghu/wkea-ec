/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { shallow } from 'enzyme';
import * as React from 'react';

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockRequest, IRequestContext } from '@msdyn365-commerce/core';
import { Customer } from '@msdyn365-commerce/retail-proxy';

import AccountWelcomeTileModule from '../../account-welcome-tile';
import { IAccountWelcomeTileData } from '../../account-welcome-tile.data';
import {
    HeadingTag, IAccountWelcomeTileConfig, IAccountWelcomeTileProps, IHeadingData
} from '../../account-welcome-tile.props.autogenerated';

const mockResources = {
    accountAddressDescription: 'You have {0} address.'
};

const mockHeading1: IHeadingData = {
    text: 'Mock heading 1',
    tag: HeadingTag.h1
};

const mockConfigWithHeading: IAccountWelcomeTileConfig = {
    className: 'testClassName',
    heading: mockHeading1
};

const mockAddressEmptyData: IAccountWelcomeTileData = {
    accountInformation: wrapInResolvedAsyncResult({} as Customer)
};

const mockAddressData: IAccountWelcomeTileData = {
    accountInformation: wrapInResolvedAsyncResult({
        AccountNumber: '1',
        FirstName: 'First Name'
    } as Customer)
};

const mockRequest: IRequestContext = buildMockRequest();
// @ts-ignore
const mockContext: ICoreContext = {
    request: mockRequest,
    app: {
        config: {
            hideRating: false
        },
    },
    // @ts-ignore: Using partial for testing
    cultureFormatter: {
        formatCurrency: jest.fn(price => `$${price}`)
    }
};

const mockProps = {
    resources: mockResources,
    renderView: jest.fn(),
    renderModuleAttributes: jest.fn()
};

describe('Account-Welcome-Tile unit tests - Container', () => {
    it('renders correctly if all props is provided ', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountWelcomeTileProps<IAccountWelcomeTileData> = {
            config: mockConfigWithHeading,
            data: mockAddressData,
            context: mockContext,
            ...mockProps
        };
        shallow(<AccountWelcomeTileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });

    it('renders correctly if address has no records', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountWelcomeTileProps<IAccountWelcomeTileData> = {
            config: mockConfigWithHeading,
            data: mockAddressEmptyData,
            context: mockContext,
            ...mockProps
        };
        shallow(<AccountWelcomeTileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });
});
