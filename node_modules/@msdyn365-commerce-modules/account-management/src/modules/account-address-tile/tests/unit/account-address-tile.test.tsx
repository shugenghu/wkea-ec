/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockRequest, IRequestContext } from '@msdyn365-commerce/core';
import { Address } from '@msdyn365-commerce/retail-proxy';
import { shallow } from 'enzyme';
import * as React from 'react';

import AccountAddressTileModule from '../../account-address-tile';
import { IAccountAddressTileData } from '../../account-address-tile.data';
import {
    HeadingTag, IAccountAddressTileConfig, IAccountAddressTileProps, IHeadingData, ILinksData
} from '../../account-address-tile.props.autogenerated';

const mockResources = {
    accountAddressDescription: 'You have {0} address.'
};

const mockLink1: ILinksData = {
    linkText: 'Mock link 1 title',
    linkUrl: {
        destinationUrl: 'Mock link 1 href'
    },
    ariaLabel: 'Mock link 1 alt text'
};

const mockHeading1: IHeadingData = {
    text: 'Mock heading 1',
    tag: HeadingTag.h1
};

const mockConfigWithHeadingAndLink: IAccountAddressTileConfig = {
    className: 'testClassName',
    heading: mockHeading1,
    links: [mockLink1]
};

const mockRequest: IRequestContext = buildMockRequest();
// @ts-ignore
const mockContext: ICoreContext = {
    request: mockRequest,
    app: {
        config: {
            hideRating: false
        },
    },
    // @ts-ignore: Using partial for testing
    cultureFormatter: {
        formatCurrency: jest.fn(price => `$${price}`)
    }
};

const mockConfigWithHeading: IAccountAddressTileConfig = {
    className: 'testClassName',
    heading: mockHeading1,
    links: []
};

const mockAddressEmptyData: IAccountAddressTileData = {
    address: wrapInResolvedAsyncResult([] as Address[])
};

const mockAddressData: IAccountAddressTileData = {
    address: wrapInResolvedAsyncResult([{}] as Address[])
};

const mockProps = {
    resources: mockResources,
    renderView: jest.fn(),
    renderModuleAttributes: jest.fn()
};

describe('Account-Address-Tile unit tests - Container', () => {
    it('renders correctly if all props is provided ', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountAddressTileProps<IAccountAddressTileData> = {
            config: mockConfigWithHeadingAndLink,
            data: mockAddressData,
            context: mockContext,
            ...mockProps
        };
        shallow(<AccountAddressTileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });

    it('renders correctly if address has no records', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountAddressTileProps<IAccountAddressTileData> = {
            config: mockConfigWithHeadingAndLink,
            data: mockAddressEmptyData,
            context: mockContext,
            ...mockProps
        };
        shallow(<AccountAddressTileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });

    it('renders correctly if links collection is empty', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountAddressTileProps<IAccountAddressTileData> = {
            config: mockConfigWithHeading,
            data: mockAddressData,
            context: mockContext,
            ...mockProps
        };
        shallow(<AccountAddressTileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });
});
