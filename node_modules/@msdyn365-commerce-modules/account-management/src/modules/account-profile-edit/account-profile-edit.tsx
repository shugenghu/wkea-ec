/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import {
    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody
} from '@msdyn365-commerce-modules/utilities';

import {
    IAccountProfileEditConfig, IAccountProfileEditProps
} from './account-profile-edit.props.autogenerated';
import AccountProfileEditButtonComponent from './components/account-profile-edit-button';
import AccountProfileEditErrorComponent from './components/account-profile-edit-error';
import AccountProfileEditInputComponent from './components/account-profile-edit-input';
import AccountProfileEditLabelComponent from './components/account-profile-edit-label';
import AccountProfileEditLoadingIconComponent from './components/account-profile-edit-loading-icon';
import AccountProfileEditLoadingMessageComponent from './components/account-profile-edit-loading-message';

export interface IAccountProfileEditViewState {
    isShowLoading: boolean;
}

export interface IAccountProfileEditItem {
    wrapper: INodeProps;
    key: string;
    label: React.ReactNode;
    errorMessage: React.ReactNode;
    input: React.ReactNode;
}

export interface IAccountProfileEditLocalAccount {
    localAccount: INodeProps;
    items: IAccountProfileEditItem[];
    errorMessage: React.ReactNode[];
    buttonsWrapper: INodeProps;
    buttons: React.ReactNode[];
    verificationSuccessModal: INodeProps;
    verificationSuccessModalMessage: INodeProps;
}

export interface IAccountProfileEditLoading {
    modal: INodeProps;
    modalBody: INodeProps;
    icon: React.ReactNode;
    message: React.ReactNode;
}

export interface IAccountProfileEditViewProps {
    className: string;
    viewState: IAccountProfileEditViewState;
    loading: IAccountProfileEditLoading;
    accountProfileEdit: IModuleProps;
    defaultAADConainer: INodeProps;
    aadConainer: INodeProps;
    heading: React.ReactNode;
    accountProfileEditLocalAccount: IAccountProfileEditLocalAccount;
}

/**
 *
 * AccountProfileEdit component
 * All AAD related module is rendered on AAD page and we need to respect HTML contract provide by AAD.
 * Please ensure any change in module don't break contract with AAD.
 * @extends {React.Component<IAccountProfileEditProps<IAccountProfileEditConfig>>}
 */
@observer
class AccountProfileEdit extends React.Component<IAccountProfileEditProps<IAccountProfileEditConfig>> {

    private moduleClassName: string = 'ms-account-profile-edit';
    private telemetryContent: ITelemetryContent;
    @observable private givenName: string;
    @observable private surname: string;
    @observable private email: string;
    @observable private emailRegex: string;

    @observable private isInitialized: boolean;

    // tslint:disable-next-line:no-any
    private initializationTimer: any;

    constructor(props: IAccountProfileEditProps<IAccountProfileEditConfig>) {
        super(props);
        this.givenName = '';
        this.surname = '';
        this.email = '';
        this.emailRegex = '^[a-zA-Z0-9.!#$%&\^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$';
        this.isInitialized = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public componentDidMount(): void {
        this._onInit();
    }

    // After successful AAD initialization, call initialize method provided by AAD to attach events.
    public componentDidUpdate(): void {
        // tslint:disable-next-line:no-string-literal
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            // tslint:disable-next-line:no-string-literal
            window['$element']['initialize']();
        }
    }

    public render(): JSX.Element {
        const { config, resources } = this.props;

        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            accountProfileEdit: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: <AccountProfileEditLoadingIconComponent className={this.moduleClassName} />,
                message: <AccountProfileEditLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            heading: config.heading &&  config.heading.text && (
                <Msdyn365.Text
                  className={`${this.moduleClassName}__heading`}
                  {...config.heading}
                  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}
                />
            ),
            accountProfileEditLocalAccount: this._renderLocalAccount()
        };

        return this.props.renderView(viewProps) as React.ReactElement;

    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading.text = event.target.value;

    public onTextBoxChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const id = event.target.id;
        const value = event.target.value;

        switch (id.toLowerCase()) {
            case 'givenname': {
                this.givenName = value;
                break;
            }
            case 'surname': {
                this.surname = value;
                break;
            }
            case 'email': {
                this.emailRegex = value;
                break;
            }
            default:
        }
    };

    public _onInit = () => {
        this._prePopulateData();
        this._updateErrorMessage();
        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.
        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);
        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);
    }

    // After successful AAD initialization, remove waiting and preload any data, if needed.
    private _isInitializationSuccessful = () => {
        // tslint:disable-next-line:no-string-literal
        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
            clearInterval(this.initializationTimer);
            this.isInitialized = true;
        }
    }

    private _prePopulateData = () => {
        const { resources } = this.props;
        const invalidEmailAddressError = resources.invalidEmailAddressError || 'Please enter a valid email address.';

        // tslint:disable-next-line:no-string-literal
        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
            // tslint:disable-next-line:no-string-literal
            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PRE: string; PAT: string; UX_INPUT_TYPE: string; PAT_DESC: string }) => {
                const value = obj.PRE ? this._htmlDecode(obj.PRE) : '';
                switch (obj.ID.toLowerCase()) {
                    case 'givenname': {
                        this.givenName = value;
                        break;
                    }
                    case 'surname': {
                        this.surname = value;
                        break;
                    }
                    case 'email': {
                        this.email = value;
                        this.emailRegex = obj.PAT;
                        obj.PAT_DESC = invalidEmailAddressError;
                        break;
                    }
                    default:
                }

            });
        }
    }

    private _htmlDecode(str: string): string {
        const e = document.createElement('div');
        // tslint:disable-next-line:no-inner-html
        e.innerHTML = str;
        return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue || '';
    }

    private _updateErrorMessage = () => {
        const { resources } = this.props;

        // tslint:disable-next-line:no-string-literal
        if (window && window['CONTENT']) {

            const message = {
                required_field: resources.requiredFieldMissingError,
                verifying_blurb: resources.loadingMessage
            };

            // tslint:disable-next-line:no-string-literal
            Object.assign(window['CONTENT'], message);
        }
    }

    private _renderLocalAccount(): IAccountProfileEditLocalAccount {
        const { config, resources } = this.props;
        const localAccount = {
            localAccount: {
                id: 'attributeList',
                className: `${this.moduleClassName}__account-items attr`
            },
            items: [
                this._renderInput('givenName', 'text', this.givenName, resources.firstNameLabelText, resources.firstNameMaxLength),
                this._renderInput('surname', 'text', this.surname, resources.lastNameLabelText, resources.lastNameMaxLength),
            ],
            errorMessage: [
                <AccountProfileEditErrorComponent key='requiredFieldMissing' id='requiredFieldMissing' className={this.moduleClassName} message={resources.requiredFieldMissingSummaryError} />,
                <AccountProfileEditErrorComponent key='fieldIncorrect' id='fieldIncorrect' className={this.moduleClassName} message={resources.fieldIncorrectError} />,
                <AccountProfileEditErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />
            ],
            buttonsWrapper: {
                className: `${this.moduleClassName}__buttons`,
            },
            buttons: [
                <AccountProfileEditButtonComponent key='continue' id='continue' className={`${this.moduleClassName}__save-button`} ariaLabel={resources.saveButtonAriaLabel} text={resources.saveButtonText} telemetryContent={this.telemetryContent} />,
                <AccountProfileEditButtonComponent key='cancel' id='cancel' className={`${this.moduleClassName}__cancel-button`} ariaLabel={resources.cancelButtonText} text={resources.cancelButtonText} telemetryContent={this.telemetryContent}/>
            ],
            verificationSuccessModal: {
                className: `${this.moduleClassName}__verifying-modal verifying-modal`
            },
            verificationSuccessModalMessage: {
                id: 'verifying_blurb',
                className: `${this.moduleClassName}__verifying-modal-message`
            }
        };

        if (config.showEmail && this.email !== '') {
            localAccount.items.push(this._renderInput('email', 'email', this.email, resources.emailAddressLabelText, undefined, this.emailRegex));
        }

        return localAccount;
    }

    private _renderInput(id: string, type: string, value: string, labelText: string, maxLength?: string, pattern?: string): IAccountProfileEditItem {
        const className = `${this.moduleClassName}__account-item`;
        return (
            {
                wrapper: {
                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
                },
                key: id,
                label: (
                    <AccountProfileEditLabelComponent
                        {
                        ...{
                            id: id,
                            forId: id,
                            className: className,
                            text: labelText
                        }
                        }
                    />
                ),
                errorMessage: (
                    <AccountProfileEditErrorComponent
                        {
                        ...{
                            className: this.moduleClassName,
                            type: 'item'
                        }
                        }
                    />
                ),
                input: (
                    <AccountProfileEditInputComponent
                        {
                        ...{
                            id: id,
                            type: type,
                            value: value,
                            pattern: pattern,
                            className: className,
                            onChange: this.onTextBoxChange
                        }
                        }
                    />
                )

            }
        );
    }

}

export default AccountProfileEdit;
