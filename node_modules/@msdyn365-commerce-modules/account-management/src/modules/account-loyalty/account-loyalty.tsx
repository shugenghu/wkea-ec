/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { Button, format, getPayloadObject, getTelemetryAttributes, getTelemetryObject, IModuleProps, INodeProps, IPayLoad, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { LoyaltyCard, LoyaltyRewardPoint, LoyaltyRewardPointActivity } from '@msdyn365-commerce/retail-proxy';
import { getLoyaltyRewardPointActivityTimelineAsync, getLoyaltyRewardPointsExpiringSoonAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { IAccountLoyaltyData } from './account-loyalty.data';
import { IAccountLoyaltyProps } from './account-loyalty.props.autogenerated';
import { AccountLoyaltyLabel, AccountLoyaltyModalLabel } from './components';

export interface IAccountLoyaltyViewProps extends IAccountLoyaltyProps<{}> {
    AccountLoyalty: IModuleProps;
    className: string;
    totalPoints: number;
    heading?: React.ReactNode;
    Info: INodeProps;
    infoLabel: React.ReactNode;
    cardNumber: React.ReactNode;
    joinDate: React.ReactNode;
    Points: INodeProps;
    pointsLabel: React.ReactNode;
    points: React.ReactNode;
    Breakdown: INodeProps;
    RewardPoints: INodeProps;
    PointsBreakdown: INodeProps;
    rewardPoints?: IAccountLoyaltyRewardPointProps[];
    Button: INodeProps;
    homeButton: React.ReactNode;
    pointsModal: IAccountLoyaltyModalProps;
}

export interface IAccountLoyaltyState {
    isModalOpen: boolean;
    currentModalData?: LoyaltyRewardPoint;
    isModalExpiring: boolean;
    modalID: string;
    currentFocus?: React.RefObject<HTMLElement>;
    pointsActivity: LoyaltyRewardPointActivity[] | undefined;
}

export interface IAccountLoyaltyRewardPointProps {
    label: React.ReactNode;
    availableModalLabel: React.ReactNode;
    availableModalTrigger: React.ReactNode;
    expiringModalLabel: React.ReactNode;
    expiringModalTrigger: React.ReactNode;
}

export type horizontalModalPosition = 'left' | 'center' | 'right';
export type verticalModalPosition = 'top' | 'center' | 'bottom';

export interface IAccountLoyaltyModalProps {
    isOpen: boolean;
    horizontalPosition?: horizontalModalPosition;
    verticalPosition?: verticalModalPosition;
    modalClassName?: string;
    modalHeaderClassName?: string;
    modalHeader?: string;
    modalBodyClassName?: string;
    ModalBodyTop: INodeProps;
    pointsDescription?: React.ReactNode;
    totalPoints?: React.ReactNode;
    ModalBodyHeaders: INodeProps;
    date?: React.ReactNode;
    balanceLabel?: React.ReactNode;
    rewardPointsActivity?: IAccountLoyaltyActivityProps[];
    returnFocusRef?: React.RefObject<HTMLElement>;
    onClose(): void;
}

export interface IAccountLoyaltyActivityProps {
    Activity: INodeProps;
    activityType: React.ReactNode;
    activityDate: React.ReactNode;
    activityPoints: React.ReactNode;
}

export interface IProps extends IAccountLoyaltyProps<IAccountLoyaltyData> { }

/**
 *
 * AccountLoyalty component
 * @extends {React.Component<IAccountLoyaltyProps<IAccountLoyaltyData>>}
 */
@observer
class AccountLoyalty extends React.PureComponent<IProps, IAccountLoyaltyState> {
    private _buttonAvailableRef: React.RefObject<HTMLButtonElement>;
    private _buttonExpireRef: React.RefObject<HTMLButtonElement>;
    private telemetryContent?: ITelemetryContent;
    private payLoad: IPayLoad;

    constructor(props: IAccountLoyaltyProps<IAccountLoyaltyData>) {
        super(props);
        this._buttonAvailableRef = React.createRef();
        this._buttonExpireRef = React.createRef();
        this.state = {
            isModalOpen: false,
            currentModalData: undefined,
            isModalExpiring: false,
            modalID: '',
            pointsActivity: undefined
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
        this.payLoad = getPayloadObject('click', this.telemetryContent, TelemetryConstant.BackToShopping);
    }

    public render(): JSX.Element | null {
        const { className, heading } = this.props.config;
        const { loyaltyCard } = this.props.data;
        const { loyaltyCardLabel, totalAvailablePointsLabel, backToShoppingText } = this.props.resources;
        const { actionContext } = this.props.context;
        const { isModalOpen } = this.state;
        const backToShopAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);

        if (!loyaltyCard || !loyaltyCard.result ||  !loyaltyCard.result.CardNumber) {
            this.props.context.telemetry.error('Loyalty card content is empty, module wont render');
            return null;
        }

        const loyaltyCardData = loyaltyCard.result;
        const rewardPoints = loyaltyCard && loyaltyCardData.RewardPoints;
        const homeLink = Msdyn365.getUrlSync('home', actionContext) || '';

        const viewProps = {
            ...this.props,
            AccountLoyalty: {
                moduleProps: this.props,
                className: classnames('ms-account-loyalty', className),
            },
            totalPoints: rewardPoints && this._getTotalPoints(),
            className: classnames('msc-account-loyalty', className),
            rewardPoints: loyaltyCardData.RewardPoints && loyaltyCardData.RewardPoints.length > 0 && this._renderRewardPoints(loyaltyCardData),
            pointsModal: isModalOpen && this._renderModal() || { isOpen: false, returnFocusRef: this.state.currentFocus },
            Info: { className: 'ms-account-loyalty__info' },
            Points: { className: 'ms-account-loyalty__points' },
            Breakdown: { className: 'ms-account-loyalty__breakdown' },
            RewardPoints: { className: 'ms-account-loyalty__reward-points' },
            PointsBreakdown: { className: 'ms-account-loyalty__point-breakdown' },
            Button: { className: 'ms-account-loyalty__link' },
            heading: heading &&
                (
                    <Msdyn365.Text
                        className='ms-account-loyalty__heading'
                        text={heading.text}
                        tag={heading.tag || 'h2'}
                        editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}
                    />
                ),

            // account info
            infoLabel:
               (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__info-label'
                        text={loyaltyCardLabel}
                    />
               ),
            cardNumber:
                (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__card-number'
                        text={loyaltyCardData.CardNumber}
                    />
                ),
            joinDate:
                (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__join-date'
                        text={this._formatJoinDate(this._parseDate(loyaltyCardData.LoyaltyEnrollmentDateLocal!))}
                    />
                ),

            // points
            pointsLabel:
                (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__total-points-label'
                        text={totalAvailablePointsLabel}
                    />
                ),
            points: rewardPoints &&
               (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__total-points'
                        text={this._getTotalPoints()}
                    />
               ),

            homeButton: rewardPoints &&
                (
                    <a
                        className='ms-account-loyalty__home-link msc-btn'
                        href={homeLink}
                        {...backToShopAttributes}
                    >
                        { backToShoppingText }
                    </a>
                )
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text= event.target.value;

    private _formatJoinDate(date: Date): string {
        return format(this.props.resources.joinDateFormatted,
                      new Intl.DateTimeFormat(this.props.context.actionContext.requestContext.locale, { month: 'long', day: 'numeric', year: 'numeric' }).format(new Date(date)));
    }

    private _renderRewardPoints(loyaltyCard: LoyaltyCard): IAccountLoyaltyRewardPointProps[] {
        return loyaltyCard.RewardPoints!.map((loyaltyPoints, index) => {
            const availableId =  loyaltyPoints.RewardPointId && `${ loyaltyPoints.RewardPointId }-available-${ index }` || 'available-points';
            const expiringId = loyaltyPoints.RewardPointId && `${ loyaltyPoints.RewardPointId }-expiring-${ index }` || 'expiring-points';
            const { availablePointsLabel, expiringPointsFormatLabel } = this.props.resources;
            this.payLoad.contentAction.etext = TelemetryConstant.AvailablePoints;
            const availablePointsAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);
            this.payLoad.contentAction.etext = TelemetryConstant.ExpiringPoints;
            const expiringPointsAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);

            return ({
                label:
                    (
                        <AccountLoyaltyModalLabel
                            className='ms-account-loyalty__points-title'
                            text={loyaltyPoints.Description}
                        />
                    ),
                availableModalLabel: loyaltyPoints.ActivePoints !== undefined &&
                    (
                        <AccountLoyaltyModalLabel
                            className='ms-account-loyalty__available-points-label'
                            text={availablePointsLabel}
                            labelFor={availableId}
                        />
                    ),
                availableModalTrigger: loyaltyPoints.ActivePoints !== undefined &&
                    (
                        <Button
                            className='ms-account-loyalty__points-trigger'
                            color='link'
                            onClick={this._populateModalData(this._buttonAvailableRef, loyaltyCard, loyaltyPoints, false)}
                            innerRef={this._buttonAvailableRef}
                            {...availablePointsAttributes}
                        >
                            {loyaltyPoints.ActivePoints.toString()}
                        </Button>
                    ),
                expiringModalLabel: loyaltyPoints.PointsExpiringSoon !== undefined &&
                    (
                        <AccountLoyaltyModalLabel
                            className='ms-account-loyalty__expiring-points-label'
                            text={format(expiringPointsFormatLabel, 30)}
                            labelFor={expiringId}
                        />
                    ),
                expiringModalTrigger: loyaltyPoints.PointsExpiringSoon !== undefined &&
                    (
                        <Button
                            className='ms-account-loyalty__points-trigger'
                            color='link'
                            onClick={this._populateModalData(this._buttonExpireRef, loyaltyCard, loyaltyPoints, true)}
                            innerRef={this._buttonExpireRef}
                            {...expiringPointsAttributes}
                        >
                            {loyaltyPoints.PointsExpiringSoon.toString()}
                        </Button>
                    )
            });
        });
    }

    private _renderModal(): IAccountLoyaltyModalProps | null {
        const { totalAvailablePointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel } = this.props.resources;
        const { isModalOpen, currentModalData } = this.state;

        if (!isModalOpen || !currentModalData) {
            // return empty modal
            this.props.context.telemetry.error('Account loyalty modal content is empty, module wont render');
            return null;
        }

        return {
            isOpen: isModalOpen,
            returnFocusRef: this.state.currentFocus,
            horizontalPosition: 'center',
            verticalPosition: 'center',
            modalClassName: 'ms-account-loyalty__points-modal',
            modalHeaderClassName: 'ms-account-loyalty__points-modal-header',
            modalHeader: currentModalData.Description || '',
            modalBodyClassName: 'ms-account-loyalty__points-modal-body',
            ModalBodyTop: { className: 'ms-account-loyalty__points-modal-body-top' },
            ModalBodyHeaders: { className: 'ms-account-loyalty__points-modal-body-header' },
            rewardPointsActivity: this._renderPointsActivity(),
            pointsDescription:
                (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__points-modal-name'
                        text={totalAvailablePointsLabel}
                    />
                ),
            totalPoints:
                (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__points-modal-total'
                        text={this._getPoints()}
                    />
                ),
            date:
                (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__points-modal-date'
                        text={loyaltyActivityDateLabel}
                    />
                ),
            balanceLabel:
                (
                    <AccountLoyaltyLabel
                        className='ms-account-loyalty__points-modal-balance'
                        text={loyaltyActivityBalanceLabel}
                    />
                ),
            onClose: this._closeModal
        };
    }

    private _getTotalPoints(): number {
        const rewardPoints = this.props.data.loyaltyCard.result && this.props.data.loyaltyCard.result.RewardPoints;

        let total = 0;
        rewardPoints!.forEach(loyaltyPoints => {
            total += loyaltyPoints.ActivePoints || 0;
        });

        return total;
    }

    private _getPoints(): string {
        const { currentModalData, isModalExpiring } = this.state;

        return `${(isModalExpiring ? currentModalData!.PointsExpiringSoon : currentModalData!.ActivePoints) || 0}`;
    }

    private _renderPointsActivity(): IAccountLoyaltyActivityProps[] | undefined {
        const { pointsActivity } = this.state;

        if (!pointsActivity) {
            this.props.context.telemetry.error('Points activity content is empty, module wont render');
            return undefined;
        }

        return pointsActivity.map((activity) => {
            return ({
                Activity: { className: 'ms-account-loyalty__points-modal-activity' },
                activityType:
                    (
                        <AccountLoyaltyLabel
                            className='ms-account-loyalty__points-modal-type'
                            text={this._getTimelineType(activity)}
                        />
                    ),
                activityDate:
                    (
                        <AccountLoyaltyLabel
                            className='ms-account-loyalty__points-modal-date'
                            text={this.props.context.cultureFormatter.formatDate(this._parseDate(activity.ActivityDate!))}
                        />
                    ),
                activityPoints:
                    (
                        <AccountLoyaltyLabel
                            className='ms-account-loyalty__points-modal-points'
                            text={activity.LoyaltyPoints && activity.LoyaltyPoints || ''}
                        />
                    )
            });
        });
    }

    private _parseDate(date: Date | string): Date {
        /* Dates for loyalty are coming as formatted strings yyyy-mm-ddT:00:00.000z
           Javascript was interpreting this as an iso format, thus causing the wrong date to be rendered */
        if (typeof date === 'string') {
            let dateString = date.toString();
            dateString = dateString.replace(/-/g, '/');
            dateString = dateString.substring(0, 10);
            return new Date(dateString);
        } else {
            return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
        }
    }

    private _getTimelineType(pointActivity: LoyaltyRewardPointActivity): string {
        if (pointActivity.LoyaltyRewardPointTimelineEntryType) {
            return pointActivity.LoyaltyRewardPointTimelineEntryType;
        }

        const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel } = this.props.resources;
        switch (pointActivity.ExtensibleLoyaltyRewardPointActivityEntryTypeValue) {
            case 1:
                return earnedPointsLabel;
            case 3:
                return redeemedPointsLabel;
            case 5:
                return adjustedPointsLabel;
            default:
                return '';
        }
    }

    private _populateModalData = (focusRef: React.RefObject<HTMLElement>, loyaltyCard: LoyaltyCard, currentLoyaltyPoints: LoyaltyRewardPoint, expiring: boolean) => () =>  {
        if (!loyaltyCard || !loyaltyCard.CardNumber || !currentLoyaltyPoints.RewardPointId) {
            this.props.context.telemetry.error('Modal data is empty, module wont render');
            return null;
        }

        const { actionContext } = this.props.context;
        // open modal
        this.setState({
            isModalOpen: true,
            currentModalData: currentLoyaltyPoints,
            isModalExpiring: expiring,
            modalID: '',
            currentFocus: focusRef,
        });

        if (expiring) {
            getLoyaltyRewardPointsExpiringSoonAsync({ callerContext: actionContext, queryResultSettings: {} }, loyaltyCard.CardNumber, currentLoyaltyPoints.RewardPointId, 30)
                .then((points: LoyaltyRewardPointActivity[]) => {
                    this.setState({pointsActivity: points});
                })
                .catch((error: Error) => {
                    this.props.telemetry.exception(error);
                    this.props.telemetry.debug('Failed to get reward point activity');
                });
        } else {
            getLoyaltyRewardPointActivityTimelineAsync({ callerContext: actionContext, queryResultSettings: {} }, loyaltyCard.CardNumber, currentLoyaltyPoints.RewardPointId)
                .then((points: LoyaltyRewardPointActivity[]) => {
                    this.setState({pointsActivity: points});
                })
                .catch((error: Error) => {
                    this.props.telemetry.error(error.message);
                    this.props.telemetry.debug('Failed to get reward point activity');
                });
        }

        return;
    }

    private _closeModal = () => {
        this.setState({
            isModalOpen: false,
            currentModalData: undefined,
            pointsActivity: undefined
        });
    }
}

export default AccountLoyalty;
