/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

// tslint:disable-next-line:no-unused-variable
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { IAccountLoyaltyViewProps } from '../account-loyalty';
import { IAccountLoyaltyData } from '../account-loyalty.data';
import { HeadingTag, IAccountLoyaltyConfig } from '../account-loyalty.props.autogenerated';
import AccountLoyaltyView from '../account-loyalty.view';

const mockData: IAccountLoyaltyData = {
    loyaltyCard: wrapInResolvedAsyncResult({})
};

const mockConfig: IAccountLoyaltyConfig = {
    className: 'account-loyalty-test',
    heading: {
        tag: HeadingTag.h2,
        text: 'Loyalty Program'
    }
};

const mockActionContext = buildHydratedMockActionContext();

// @ts-ignore partial mock
const mockContext: ICoreContext = {
    actionContext: mockActionContext,
    requestContext: { locale: 'en-us' },
    app: {
        routes: {
            home: '/fedev'
        }
    }
};

const mockActions = {};

describe('AccountLoyalty unit tests - ', () => {
    it('View - renders correctly', () => {
        const moduleProps = buildMockModuleProps(mockData, mockActions, mockConfig, mockContext);
        // @ts-ignore partial mock
        const mockProps: IAccountLoyaltyViewProps = {
            ...moduleProps,
            AccountLoyalty: { moduleProps, className: 'module-class' },
            className: 'test-name',
            totalPoints: 90,
            heading: '{heading}',
            infoLabel: '{infoLabel}',
            cardNumber: '{cardNumber}',
            joinDate: '{joinDate}',
            pointsLabel: '{pointsLabel}',
            points: '{points}',
            rewardPoints: [
                {
                    label: '{activity.label}',
                    availableModalLabel: '{activity.availableModalLabel}',
                    availableModalTrigger: '{activity.availableModalTrigger}',
                    expiringModalLabel: '{activity.expiringModalLabel}',
                    expiringModalTrigger: '{activity.expiringModalTrigger}',
                },
                {
                    label: '{activity.label2}',
                    availableModalLabel: '{activity.availableModalLabel2}',
                    availableModalTrigger: '{activity.availableModalTrigger2}',
                    expiringModalLabel: '{activity.expiringModalLabel2}',
                    expiringModalTrigger: '{activity.expiringModalTrigger2}',
                }
            ],
            pointsModal: {
                isOpen: true,
                modalHeader: '{header}',
                ModalBodyTop: { className: 'module-class-ModalBodyTop' },
                ModalBodyHeaders: { className: 'module-class-ModalBodyHeaders' },
                rewardPointsActivity: [
                    {
                        Activity: { className: 'module-class-Activity' },
                        activityType: '{type}',
                        activityDate: '{date}',
                        activityPoints: '{points}'
                    },
                    {
                        Activity: { className: 'module-class-Activity' },
                        activityType: '{type2}',
                        activityDate: '{date2}',
                        activityPoints: '{points2}'
                    }
                ],
                onClose: jest.fn()
            }
        };
        const component = render(<AccountLoyaltyView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('View - renders correctly without modal', () => {
        const moduleProps = buildMockModuleProps(mockData, mockActions, mockConfig, mockContext);
        // @ts-ignore partial mock
        const mockProps: IAccountLoyaltyViewProps = {
            ...moduleProps,
            AccountLoyalty: { moduleProps, className: 'module-class' },
            className: 'test-name',
            totalPoints: 90,
            heading: '{heading}',
            infoLabel: '{infoLabel}',
            cardNumber: '{cardNumber}',
            joinDate: '{joinDate}',
            pointsLabel: '{pointsLabel}',
            points: '{points}',
            rewardPoints: [
                {
                    label: '{activity.label}',
                    availableModalLabel: '{activity.availableModalLabel}',
                    availableModalTrigger: '{activity.availableModalTrigger}',
                    expiringModalLabel: '{activity.expiringModalLabel}',
                    expiringModalTrigger: '{activity.expiringModalTrigger}',
                },
                {
                    label: '{activity.label2}',
                    availableModalLabel: '{activity.availableModalLabel2}',
                    availableModalTrigger: '{activity.availableModalTrigger2}',
                    expiringModalLabel: '{activity.expiringModalLabel2}',
                    expiringModalTrigger: '{activity.expiringModalTrigger2}',
                }
            ],
            pointsModal: {
                isOpen: false,
                ModalBodyTop: { className: 'module-class-ModalBodyTop' },
                ModalBodyHeaders: { className: 'module-class-ModalBodyHeaders' },
                onClose: jest.fn()
            }
        };
        const component = render(<AccountLoyaltyView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});