/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { Button, format, Heading } from '@msdyn365-commerce-modules/utilities';
import { buildHydratedMockActionContext, getUrlSync } from '@msdyn365-commerce/core';
import { LoyaltyCard } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { render } from 'enzyme';
import * as React from 'react';
import { HeadingTag } from '../../../password-reset/password-reset.props.autogenerated';
import { IAccountLoyaltyResources } from '../../account-loyalty.props.autogenerated';
import { AccountLoyaltyLabel, AccountLoyaltyModalLabel } from '../../components/account-loyalty-small-components';

const mockResources: IAccountLoyaltyResources = {
    loyaltyCardLabel: 'Loyalty card',
    joinDateFormatted: 'Member since {0}',
    totalAvailablePointsLabel: 'Total available points',
    expiringPointsFormatLabel: 'Expiring points within {0} days',
    availablePointsLabel: 'Total available points',
    redeemedPointsLabel: 'Redeemed',
    earnedPointsLabel: 'Earned',
    pendingPointsLabel: 'Pending',
    adjustedPointsLabel: 'Adjusted',
    loyaltyActivityDateLabel: 'Date',
    loyaltyActivityBalanceLabel: 'Balance',
    backToShoppingText: 'Back to shopping'
};

const mockActionContext = buildHydratedMockActionContext();

// @ts-ignore partial mock
const mockContext: ICoreContext = {
    actionContext: mockActionContext,
    requestContext: {locale: 'en-us'},
    app: {
      routes: {
        home: '/fedev'
      }
    }
};

const loyaltyCard: LoyaltyCard =  {
    CardNumber: '45646846846',
    LoyaltyEnrollmentDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    RewardPoints: [
      {
        RewardPointId: 'Fabrikam',
        RewardPointTypeValue: 1,
        RewardPointCurrency: 'USD',
        IsRedeemable: true,
        PointsExpiringSoon: 34,
        ActivePoints: 90,
        Description: 'Fabrikam awesome points'
      }
    ]
  };

describe('AccountLoyalty unit tests - ', () => {
    it('Heading - renders correctly', () => {
        const mockProps = {
          className:'account-loyalty__heading ms-heading',
          text: mockResources.loyaltyCardLabel,
          headingTag: HeadingTag.h2
        };

        const component = render(<Heading {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('Label - renders correctly', () => {
        const mockProps = {
          className:'account-loyalty__info-label',
          text: mockResources.totalAvailablePointsLabel
        };

        const component = render(<AccountLoyaltyLabel {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('Label (formatted)- renders correctly', () => {
        const rewardPoints = loyaltyCard.RewardPoints && loyaltyCard.RewardPoints[0];
        const mockProps = {
          className:'account-loyalty__points-label',
          text: format(mockResources.expiringPointsFormatLabel, rewardPoints!.PointsExpiringSoon!.toString())
        };

        const component = render(<AccountLoyaltyLabel {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('ModalLabel - renders correctly', () => {
      const rewardPoints = loyaltyCard.RewardPoints && loyaltyCard.RewardPoints[0];
      const mockProps = {
        className:'account-loyalty__available-points-label',
        text: mockResources.availablePointsLabel,
        labelFor: 'avaialable-points',
        value: rewardPoints!.ActivePoints
      };

      const component = render(<AccountLoyaltyModalLabel {...mockProps} />);
      expect(component).toMatchSnapshot();
    });

    // it('ModalContent - renders correctly', () => {
    //   const mockProps = {
    //     className: 'ms-account-loyalty__points-modal-name',
    //     text: mockResources.totalAvailablePointsLabel,
    //   };

    //   const component = render(<AccountLoyaltyModalContent {...mockProps} />);
    //   expect(component).toMatchSnapshot();
    // });

    // it('ModalTrigger - renders correctly', () => {
    //   const loyaltyPoints = loyaltyCard.RewardPoints![0];
    //   const mockProps = {
    //     className: 'ms-account-loyalty__points-modal-name',
    //     value: loyaltyPoints!.ActivePoints,
    //     loyaltyPoints: loyaltyPoints,
    //     isExpiring: false,
    //     _populateModalData: jest.fn()
    //   };

    //   const component = render(<AccountLoyaltyModalTrigger {...mockProps} />);
    //   expect(component).toMatchSnapshot();
    // });

    // it('ModalTrigger (Disabled) - renders correctly', () => {
    //   const loyaltyPoints = loyaltyCard.RewardPoints![0];
    //   const mockProps = {
    //     className: 'ms-account-loyalty__points-modal-name',
    //     value: loyaltyPoints!.ActivePoints,
    //     loyaltyPoints: loyaltyPoints,
    //     isExpiring: false,
    //     isDisabled: true,
    //     _populateModalData: jest.fn()
    //   };

    //   const component = render(<AccountLoyaltyModalTrigger {...mockProps} />);
    //   expect(component).toMatchSnapshot();
    // });

    // it('ModalTrigger - does not render without value prop', () => {
    //   const loyaltyPoints = loyaltyCard.RewardPoints![0];
    //   const mockProps = {
    //     className: 'ms-account-loyalty__points-modal-name',
    //     value: undefined,
    //     loyaltyPoints: loyaltyPoints,
    //     isExpiring: false,
    //     _populateModalData: jest.fn()
    //   };

    //   const component = render(<AccountLoyaltyModalTrigger {...mockProps} />);
    //   expect(component).toMatchSnapshot();
    // });

    // it('ModalTrigger - onClick calls _openModal', () => {
    //   const loyaltyPoints = loyaltyCard.RewardPoints![0];
    //   const mockProps = {
    //     className: 'ms-account-loyalty__points-modal-name',
    //     value: loyaltyPoints!.ActivePoints,
    //     loyaltyPoints: loyaltyPoints,
    //     isExpiring: false,
    //     _populateModalData: jest.fn(),
    //   };

    //   const component = shallow(<AccountLoyaltyModalTrigger {...mockProps} />);
    //   component.simulate('click');

    //   expect(mockProps._populateModalData).toBeCalled();
    // });

    // STOP!!!!!!!!!!!!!
    // it('Modal (Available) - renders correctly', () => {
    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;

    //   const rewardPoints = loyaltyCard.RewardPoints![0] && loyaltyCard.RewardPoints![0] || undefined;
    //   const mockProps = {
    //     loyaltyCard: loyaltyCard,
    //     loyaltyPoints: rewardPoints,
    //     actionContext: mockContext,
    //     earnedLabel: earnedPointsLabel,
    //     redeemedLabel: redeemedPointsLabel,
    //     adjustedLabel: adjustedPointsLabel,
    //     dateLabel: loyaltyActivityDateLabel,
    //     balanceLabel: loyaltyActivityBalanceLabel,
    //     pointsDescription: totalAvailablePointsLabel,
    //     expiring: false,
    //     id: 'avaialabe-points'
    //   };

    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);

    //   component.setState({
    //     pointActivity: [
    //       {
    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 1,
    //         LoyaltyPoints: 100,
    //       }
    //     ]
    //   });

    //   expect(component).toMatchSnapshot();
    // });

    // it('Modal (Expiring) - renders correctly', () => {
    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;

    //   const rewardPoints = loyaltyCard.RewardPoints![0] && loyaltyCard.RewardPoints![0] || undefined;
    //   const mockProps = {
    //     loyaltyCard: loyaltyCard,
    //     loyaltyPoints: rewardPoints,
    //     actionContext: mockContext,
    //     earnedLabel: earnedPointsLabel,
    //     redeemedLabel: redeemedPointsLabel,
    //     adjustedLabel: adjustedPointsLabel,
    //     dateLabel: loyaltyActivityDateLabel,
    //     balanceLabel: loyaltyActivityBalanceLabel,
    //     pointsDescription: totalAvailablePointsLabel,
    //     expiring: true,
    //     id: 'expiring-points'
    //   };

    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);

    //   component.setState({
    //     pointActivity: [
    //       {
    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 1,
    //         LoyaltyPoints: 100,
    //         LoyaltyRewardPointTimelineEntryType: 'Expiring'
    //       }
    //     ]
    //   });

    //   expect(component).toMatchSnapshot();
    // });

    // it('Modal - opens on click', () => {
    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;

    //   const rewardPoints = loyaltyCard.RewardPoints![0] && loyaltyCard.RewardPoints![0] || undefined;
    //   const mockProps = {
    //     loyaltyCard: loyaltyCard,
    //     loyaltyPoints: rewardPoints,
    //     actionContext: mockContext,
    //     earnedLabel: earnedPointsLabel,
    //     redeemedLabel: redeemedPointsLabel,
    //     adjustedLabel: adjustedPointsLabel,
    //     dateLabel: loyaltyActivityDateLabel,
    //     balanceLabel: loyaltyActivityBalanceLabel,
    //     pointsDescription: totalAvailablePointsLabel,
    //     expiring: true,
    //     id: 'expiring-points'
    //   };

    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);

    //   const openButton = component.find('.ms-account-loyalty__points');
    //   openButton.simulate('click');

    //   const modal = component.find('.ms-account-loyalty__points-modal');
    //   const modalProps = modal && modal.props() as IModalProps;

    //   expect(modalProps.isOpen).toBe(true);
    // });

    // it('Modal - _getTimelineType()', () => {
    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;

    //   const rewardPoints = loyaltyCard.RewardPoints![0] && loyaltyCard.RewardPoints![0] || undefined;
    //   const mockProps = {
    //     loyaltyCard: loyaltyCard,
    //     loyaltyPoints: rewardPoints,
    //     actionContext: mockContext,
    //     earnedLabel: earnedPointsLabel,
    //     redeemedLabel: redeemedPointsLabel,
    //     adjustedLabel: adjustedPointsLabel,
    //     dateLabel: loyaltyActivityDateLabel,
    //     balanceLabel: loyaltyActivityBalanceLabel,
    //     pointsDescription: totalAvailablePointsLabel,
    //     expiring: true,
    //     id: 'expiring-points'
    //   };

    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);
    //   component.setState({
    //     pointActivity: [
    //       {
    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 3,
    //         LoyaltyPoints: 100,
    //       }
    //     ]
    //   });

    //   component.setState({
    //     pointActivity: [
    //       {
    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 4,
    //         LoyaltyPoints: 24,
    //       }
    //     ]
    //   });

    //   component.setState({
    //     pointActivity: [
    //       {
    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 5,
    //         LoyaltyPoints: 25,
    //       }
    //     ]

    //   });

    //   expect(component).toMatchSnapshot();
    // });

    // it('Modal _getPointsActivity should return empty without RewardPointsId', () => {
    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;

    //   const noIdCard = {
    //     CardNumber: '45646846846',
    //     LoyaltyEnrollmentDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    //     RewardPoints: [
    //       {
    //         RewardPointTypeValue: 1,
    //         RewardPointCurrency: 'USD',
    //         IsRedeemable: true,
    //         PointsExpiringSoon: 34,
    //         ActivePoints: 90,
    //         Description: 'Fabrikam awesome points'
    //       }
    //     ]
    //   };

    //   const rewardPoints = noIdCard.RewardPoints![0] && noIdCard.RewardPoints![0] || undefined;
    //   const mockProps = {
    //     loyaltyCard: noIdCard,
    //     loyaltyPoints: rewardPoints,
    //     actionContext: mockContext,
    //     earnedLabel: earnedPointsLabel,
    //     redeemedLabel: redeemedPointsLabel,
    //     adjustedLabel: adjustedPointsLabel,
    //     dateLabel: loyaltyActivityDateLabel,
    //     balanceLabel: loyaltyActivityBalanceLabel,
    //     pointsDescription: totalAvailablePointsLabel,
    //     expiring: true,
    //     id: 'expiring-points'
    //   };

    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);
    //   expect(component).toMatchSnapshot();
    // });

    it('homeButton - renders correctly', () => {
        const mockProps = {
          className: 'account-loyalty__button',
          color: 'primary', title: mockResources.backToShoppingText,
          href: getUrlSync('home', mockContext.actionContext) || ''
        };
        const component = render(<Button {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});