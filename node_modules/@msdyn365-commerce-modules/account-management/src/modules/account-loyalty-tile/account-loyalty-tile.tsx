/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';

import { format, getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { LoyaltyRewardPoint } from '@msdyn365-commerce/retail-proxy';

import { IAccountLoyaltyTileData } from './account-loyalty-tile.data';
import { IAccountLoyaltyTileProps } from './account-loyalty-tile.props.autogenerated';
import DescriptionComponent from './components/account-loyalty-tile-description';
import LinksComponent from './components/account-loyalty-tile-links';

export interface IAccountLoyaltyTileViewProps extends IAccountLoyaltyTileProps<IAccountLoyaltyTileData> {
    AccountLoyaltyTile: IModuleProps;
    className: string;
    heading?: React.ReactNode;
    links?: React.ReactNode;
    description?: React.ReactNode;
}

/**
 *
 * AccountLoyalty component
 * @extends {React.PureComponent<IAccountLoyaltyTileProps<IAccountLoyaltyTileData>>}
 */
class AccountLoyaltyTile extends React.PureComponent<IAccountLoyaltyTileProps<IAccountLoyaltyTileData>> {

    private telemetryContent: ITelemetryContent;
    constructor(props: IAccountLoyaltyTileProps<IAccountLoyaltyTileData>) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public render(): JSX.Element {
        const { config, data, resources, context } = this.props;
        const { className, heading, signUpLinkText, signUpLinkAriaLabel, viewLinkText, viewLinkAriaLabel } = config;
        const { accountLoyaltySummary, accountLoyaltyMemberSummary } = resources;
        const { loyaltyCard } = data;

        let description = accountLoyaltySummary;
        let url = Msdyn365.getUrlSync('loyaltyJoin', context.actionContext) || '';
        const link = { linkText: signUpLinkText, linkUrl: { destinationUrl: url }, ariaLabel: signUpLinkAriaLabel };

        if (loyaltyCard && loyaltyCard.result && loyaltyCard.result.CardNumber) {
            let points = 0;

            if (loyaltyCard.result.RewardPoints && loyaltyCard.result.RewardPoints.length > 0) {
                loyaltyCard.result.RewardPoints.forEach((rewardPoint: LoyaltyRewardPoint) => {
                    points += rewardPoint.ActivePoints!;
                });
            }
            link.ariaLabel = viewLinkAriaLabel;
            link.linkText = viewLinkText;
            url = Msdyn365.getUrlSync('loyalty', context.actionContext) || '';
            link.linkUrl.destinationUrl = url;
            description = format(accountLoyaltyMemberSummary, points);
        }

        const viewProps = {
            ...this.props,
            className: className,
            AccountLoyaltyTile: {
                moduleProps: this.props,
                className: classnames('ms-account-loyalty-tile', config.className)
            },
           // heading: heading && <Heading className='ms-account-loyalty-tile__heading' headingTag={heading.tag} text={heading.text} />,
            heading: heading && heading.text && (
                <Msdyn365.Text
                  className='ms-account-loyalty-tile__heading'
                  tag={heading.tag || 'h2'}
                  text={heading.text}
                  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}
                />
            ),
            links: <LinksComponent {...{ links: [link], onTextChange: this.handleLinkTextChange, requestContext: this.props.context.request, telemetryContent: this.telemetryContent }} />,
            description: <DescriptionComponent description={description} />
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }
    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading.text = event.target.value;
    public handleLinkTextChange = (linkIndex: number) => (event: Msdyn365.ContentEditableEvent) => {
        if(this.props.config.signUpLinkText && this.props.config.viewLinkText) {
          this.props.config.viewLinkText = event.target.value;
        }
    };

}

export default AccountLoyaltyTile;
