/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/// <reference types='jest' />
// tslint:disable-next-line:no-unused-variable
import * as React from 'react';
import * as renderer from 'react-test-renderer';

import { buildMockModuleProps } from '@msdyn365-commerce/core';

import PasswordReset from '../password-reset';
import {
  HeadingTag,
  IPasswordResetConfig,
  IPasswordResetProps,
  IPasswordResetResources
} from '../password-reset.props.autogenerated';

const mockConfig: IPasswordResetConfig = {
  heading: {
    text: 'Reset password',
    tag: HeadingTag.h2,
  }
};

const mockResources: IPasswordResetResources = {
  newPasswordLabelText: 'New Password',
  confirmPasswordLabelText: 'Confirm Password',
  saveButtonText: 'Save',
  saveButtonAriaLabel: 'Save',
  cancelButtonText: 'Cancel',
  cancelButtonAriaLabel: 'Cancel',
  passwordEntryMismatchError: 'The password entry fields do not match. Please enter the same password in both fields and try again.',
  requiredFieldMissingError: 'A required field is missing. Please fill out all required fields and try again.',
  fieldIncorrectError: 'One or more fields are filled out incorrectly. Please check your entries and try again.',
  invalidPasswordError: 'Please enter a valid password.',
  loadingMessage: 'Please wait'
};

const mockActions = {};

describe('PasswordReset', () => {
  let moduleProps: IPasswordResetProps<IPasswordResetConfig>;
  beforeAll(() => {
    moduleProps = {...buildMockModuleProps({}, mockActions, mockConfig) as IPasswordResetProps<IPasswordResetConfig>,resources: mockResources};
  });
  it('renders correctly', () => {
    const component: renderer.ReactTestRenderer = renderer.create(
      <PasswordReset {...moduleProps} />
    );
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
});
