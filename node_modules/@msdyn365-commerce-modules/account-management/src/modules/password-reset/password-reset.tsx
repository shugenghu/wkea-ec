/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import {
    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody
} from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';

import PasswordResetButtonComponent from './components/password-reset-button';
import PasswordResetErrorComponent from './components/password-reset-error';
import PasswordResetInputComponent from './components/password-reset-input';
import PasswordResetLabelComponent from './components/password-reset-label';
import PasswordResetLoadingIconComponent from './components/password-reset-loading-icon';
import PasswordResetLoadingMessageComponent from './components/password-reset-loading-message';
import { IPasswordResetConfig, IPasswordResetProps } from './password-reset.props.autogenerated';

export interface IPasswordResetViewState {
    isShowLoading: boolean;
}

export interface IPasswordResetItem {
    wrapper: INodeProps;
    key: string;
    label: React.ReactNode;
    errorMessage: React.ReactNode;
    input: React.ReactNode;
}

export interface IPasswordResetLocalAccount {
    localAccount: INodeProps;
    items: IPasswordResetItem[];
    errorMessage: React.ReactNode[];
    buttonsWrapper: INodeProps;
    buttons: React.ReactNode[];
    verificationSuccessModal: INodeProps;
    verificationSuccessModalMessage: INodeProps;
}

export interface IPasswordResetLoading {
    modal: INodeProps;
    modalBody: INodeProps;
    icon: React.ReactNode;
    message: React.ReactNode;
}

export interface IPasswordResetViewProps {
    className: string;
    viewState: IPasswordResetViewState;
    loading: IPasswordResetLoading;
    passwordReset: IModuleProps;
    defaultAADConainer: INodeProps;
    aadConainer: INodeProps;
    heading: React.ReactNode;
    passwordResetLocalAccount: IPasswordResetLocalAccount;
}

/**
 *
 * PasswordReset component
 * @extends {React.Component<IPasswordResetProps<IPasswordResetConfig>>}
 */
@observer
class PasswordReset extends React.Component<IPasswordResetProps<IPasswordResetConfig>> {

    private moduleClassName: string = 'ms-password-reset';
    private telemetryContent?: ITelemetryContent;
    @observable private newPasswordRegex: string;
    @observable private reenterPasswordRegex: string;

    @observable private isInitialized: boolean;

    // tslint:disable-next-line:no-any
    private initializationTimer: any;

    constructor(props: IPasswordResetProps<IPasswordResetConfig>) {
        super(props);
        // tslint:disable-next-line:max-line-length
        const passwordDefaultRegex = '^((?=.*[a-z])(?=.*[A-Z])(?=.*\\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]))([A-Za-z\\d@#$%^&*\\-_+=[\\]{}|\\\\:\',?/`~\'();!]|\\.(?!@)){8,16}$';
        this.newPasswordRegex = passwordDefaultRegex;
        this.reenterPasswordRegex = passwordDefaultRegex;
        this.isInitialized = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public componentDidMount(): void {
        this._onInit();
    }

    // After successful AAD initialization, call initialize method provided by AAD to attach events.
    public componentDidUpdate(): void {
        // tslint:disable-next-line:no-string-literal
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            // tslint:disable-next-line:no-string-literal
            window['$element']['initialize']();
        }
    }

    public render(): JSX.Element {
        const { config, resources } = this.props;

        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            passwordReset: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: <PasswordResetLoadingIconComponent className={this.moduleClassName} />,
                message: <PasswordResetLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            heading: config.heading &&
            <Msdyn365.Text className={`${this.moduleClassName}__heading`} {...config.heading}  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}/>,
            passwordResetLocalAccount: this._renderLocalAccount()
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text= event.target.value;

    public _onInit = () => {
        this._prePopulateData();
        this._updateErrorMessage();
        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.
        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);
        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);
    }

    // After successful AAD initialization, remove waiting and preload any data, if needed.
    private _isInitializationSuccessful = () => {
        // tslint:disable-next-line:no-string-literal
        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
            clearInterval(this.initializationTimer);
            this.isInitialized = true;
        }
    }

    private _prePopulateData = () => {
        // tslint:disable-next-line:no-string-literal
        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
            // tslint:disable-next-line:no-string-literal
            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PAT: string }) => {
                switch (obj.ID.toLowerCase()) {
                    case 'newpassword': {
                        this.newPasswordRegex = obj.PAT;
                        break;
                    }
                    case 'reenterpassword': {
                        this.reenterPasswordRegex = obj.PAT;
                        break;
                    }
                    default:
                }
            });
        }
    }

    private _updateErrorMessage = () => {
        const { resources } = this.props;

        // tslint:disable-next-line:no-string-literal
        if (window && window['CONTENT']) {

            const message = {
                verifying_blurb: resources.loadingMessage
            };

            // tslint:disable-next-line:no-string-literal
            Object.assign(window['CONTENT'], message);
        }
    }

    private _renderLocalAccount(): IPasswordResetLocalAccount {
        const { resources } = this.props;
        return {
            localAccount: {
                id: 'attributeList',
                className: `${this.moduleClassName}__account-items attr`
            },
            items: [
                this._renderInput('newPassword', 'password', resources.newPasswordLabelText, this.newPasswordRegex),
                this._renderInput('reenterPassword', 'password', resources.confirmPasswordLabelText, this.reenterPasswordRegex),
            ],
            errorMessage: [
                <PasswordResetErrorComponent key='passwordEntryMismatch' id='passwordEntryMismatch' className={this.moduleClassName} message={resources.passwordEntryMismatchError} />,
                <PasswordResetErrorComponent key='requiredFieldMissing' id='requiredFieldMissing' className={this.moduleClassName} message={resources.requiredFieldMissingError} />,
                <PasswordResetErrorComponent key='email_fail_throttled' id='fieldIncorrect' className={this.moduleClassName} message={resources.fieldIncorrectError} />,
                <PasswordResetErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />
            ],
            buttonsWrapper: {
                className: `${this.moduleClassName}__buttons`,
            },
            buttons: [
                <PasswordResetButtonComponent key='continue' id='continue' className={`${this.moduleClassName}__continue-button`} ariaLabel={resources.saveButtonAriaLabel} text={resources.saveButtonText} telemetryContent={this.telemetryContent} />,
                <PasswordResetButtonComponent key='cancel' id='cancel' className={`${this.moduleClassName}__cancel-button`} ariaLabel={resources.cancelButtonText} text={resources.cancelButtonText} telemetryContent={this.telemetryContent} />
            ],
            verificationSuccessModal: {
                className: `${this.moduleClassName}__verifying-modal verifying-modal`
            },
            verificationSuccessModalMessage: {
                id: 'verifying_blurb',
                className: `${this.moduleClassName}__verifying-modal-message`
            }
        };
    }

    private _renderInput(id: string, type: string, labelText: string, pattern?: string): IPasswordResetItem {
        const className = `${this.moduleClassName}__account-item`;
        return (
            {
                wrapper: {
                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
                },
                key: id,
                label: (
                    <PasswordResetLabelComponent
                        {
                        ...{
                            id: id,
                            forId: id,
                            className: className,
                            text: labelText
                        }
                        }
                    />
                ),
                errorMessage: (
                    <PasswordResetErrorComponent
                        {
                        ...{
                            className: this.moduleClassName,
                            type: 'item'
                        }
                        }
                    />
                ),
                input: (
                    <PasswordResetInputComponent
                        {
                        ...{
                            id: id,
                            type: type,
                            pattern: pattern,
                            className: className
                        }
                        }
                    />
                )

            }
        );
    }

}

export default PasswordReset;
