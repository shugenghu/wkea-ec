/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------
*/
import {mount, render} from 'enzyme';
import * as React from 'react';

import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { LoyaltyCard } from '@msdyn365-commerce/retail-proxy';

import LoyaltySignUp, { ILoyaltySignUpViewProps } from '../loyalty-sign-up';
import { ILoyaltySignUpData } from '../loyalty-sign-up.data';
import { HeadingTag, ILoyaltySignUpConfig, ILoyaltySignUpProps, MemberHeadingTag } from '../loyalty-sign-up.props.autogenerated';

const mockActionContext = buildHydratedMockActionContext();

// @ts-ignore
const mockContext: ICoreContext = {
    actionContext: mockActionContext,
    request: {locale: 'en-us', user: {isAuthenticated: true, customerAccountNumber: 'foo'}}
};

const mockConfig: ILoyaltySignUpConfig = {
  heading: {
    tag: HeadingTag.h4,
    text: 'Join Fabrikams Loyalty Program'
  },
  memberHeading: {
    tag: MemberHeadingTag.h4,
    text: 'Weclome loyalty member'
  }
};

const mockResource = {
  loyaltyProgramText: 'Become a Fabrikam Loyalty member to earn points and to receive member only discounts.',
  loyaltyTermsLinkText: 'By signing up, you accept our Terms & Conditions of the Fabrikams Loyalty program.',
  joinLoyaltyButtonText: 'Sign up for Fabrikam loyalty',
  viewLoyaltyPageText: 'View loyalty details'
};

const flushPromises = () => new Promise(setImmediate);

const mockActions = {};

const mockData = {
  loyaltyCard: RetailActions.wrapInResolvedAsyncResult<LoyaltyCard>({ CardNumber: '1' })
};

describe('LoyaltySignUp', () => {
  it('renders correctly when author provides headings', () => {
    // @ts-ignore
    const moduleProps = {...buildMockModuleProps(mockData, mockActions, mockConfig) as ILoyaltySignUpProps<ILoyaltySignUpData>, renderView: jest.fn(props => { return <div props={props} />;})};
    moduleProps.context = mockContext;
    moduleProps.resources = mockResource;
    const component = mount(<LoyaltySignUp {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ILoyaltySignUpViewProps = component.childAt(0).props().props;
    const { heading, memberHeading, signInLink, signUpText, signUpButton, detailsLink, termsLink} = viewProps;

    expect(viewProps).toBeDefined();
    expect(heading).toBeTruthy();
    expect(signUpText).toBeTruthy();
    expect(detailsLink).not.toBeTruthy(); // Only shows up if user has loyalty account
    expect(termsLink).toBeTruthy();
    expect(signUpButton).toBeTruthy();
    expect(memberHeading).not.toBeTruthy(); // Only shows up if user has loyalty account
    expect(signInLink).not.toBeTruthy(); // Only shows up if user not signed in

    expect(render(heading as React.ReactElement)).toMatchSnapshot();
    expect(render(memberHeading as React.ReactElement)).toMatchSnapshot();
    expect(render(signUpButton)).toMatchSnapshot();
    expect(render(signUpText)).toMatchSnapshot();
    expect(render(termsLink)).toMatchSnapshot();
    component.unmount();
  });

  it('renders correctly when author does not provide heading ', () => {
    // @ts-ignore
    const moduleProps = {...buildMockModuleProps(mockData, mockActions, {}) as ILoyaltySignUpProps<ILoyaltySignUpData>, renderView: jest.fn(props => { return <div props={props} />;})};
    moduleProps.context = mockContext;
    moduleProps.resources = mockResource;
    const component = mount(<LoyaltySignUp {...moduleProps} />);
    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ILoyaltySignUpViewProps = component.childAt(0).props().props;
    const { heading, memberHeading, signInLink, signUpText, signUpButton, detailsLink, termsLink} = viewProps;

    expect(viewProps).toBeDefined();
    expect(heading).not.toBeTruthy();
    expect(signUpText).toBeTruthy();
    expect(detailsLink).not.toBeTruthy(); // Only shows up if user has loyalty account
    expect(termsLink).toBeTruthy();
    expect(signUpButton).toBeTruthy();
    expect(memberHeading).not.toBeTruthy(); // Only shows up if user has loyalty account
    expect(signInLink).not.toBeTruthy(); // Only shows up if user not signed in

    expect(render(signUpButton)).toMatchSnapshot();
    expect(render(signUpText)).toMatchSnapshot();
    expect(render(termsLink)).toMatchSnapshot();
    component.unmount();
  });

  it ('issues loyalty naviagates to next page after a click', async () => {
    // @ts-ignore
    jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.resolve({}));
    jest.spyOn(window.location, 'assign');
    // @ts-ignore
    const moduleProps = {...buildMockModuleProps(mockData, mockActions, mockConfig) as ILoyaltySignUpProps<ILoyaltySignUpData>, renderView: jest.fn(props => { return <div props={props} />;})};
    moduleProps.context = mockContext;
    moduleProps.resources = mockResource;
    const component = mount(<LoyaltySignUp {...moduleProps} />);
    const viewProps: ILoyaltySignUpViewProps = component.childAt(0).props().props;
    const signup = mount(viewProps.signUpButton);
    signup.simulate('click');
    expect(component.state('clicked')).toBe(true);
    await flushPromises();
    expect(window.location.assign).toHaveBeenCalled();
    signup.unmount();
    component.unmount();
  });

  it ('issues loyalty uses telemetry when it fails', async () => {
    // @ts-ignore
    jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.reject({message: 'foo'}));
    jest.spyOn(window.location, 'assign');
    // @ts-ignore
    const moduleProps = {...buildMockModuleProps(mockData, mockActions, mockConfig) as ILoyaltySignUpProps<ILoyaltySignUpData>, renderView: jest.fn(props => { return <div props={props} />;})};
    moduleProps.context = mockContext;
    moduleProps.resources = mockResource;
    moduleProps.telemetry.error = jest.fn();
    const component = mount(<LoyaltySignUp {...moduleProps} />);
    const viewProps: ILoyaltySignUpViewProps = component.childAt(0).props().props;
    const signup = mount(viewProps.signUpButton);
    signup.simulate('click');
    await flushPromises();
    expect(moduleProps.telemetry.error).toHaveBeenCalled();
    signup.unmount();
    component.unmount();
  });
});
