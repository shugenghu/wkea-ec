/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { Customer } from '@msdyn365-commerce/retail-proxy';
import { AttributeDefinition } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { mount, shallow } from 'enzyme';
import AccountProfileModule from '../../account-profile';
import { IAccountProfileData } from '../../account-profile.data';
import {
    EmailAddressSectionHeadingTag, HeadingTag, IAccountProfileConfig, IAccountProfileProps,
    NameSectionHeadingTag, PersonalizationSectionHeadingTag, PreferencesSectionHeadingTag, WebTrackingSectionHeadingTag
} from '../../account-profile.props.autogenerated';

const mockResources = {
    attributeInputValueExceedsMaximumErrorText: 'Value exceeds maximum error',
    attributeInputValueExceedsMinimumErrorText: 'Value exceeds minimum error',
    attributeInputMandatoryErrorText: 'Mandatory error',
    attributeInputStringMaxLengthErrorText: 'String max length error',
    attributeInputTypeErrorText: 'Type error',
    attributeInputRangeErrorText: 'Range error',
    attributeToggleButtonAriaLabel: 'Toggle',
    attributesEditButtonText: 'Edit',
    attributesSaveButtonText: 'Save',
    attributesCancelButtonText: 'Cancel',
    attributesEditButtonAriaLabel: 'Edit',
    attributesSaveButtonAriaLabel: 'Save',
    attributesCancelButtonAriaLabel: 'Cancel',
    attributesSaveExceptionMessage: 'Exception',
    editButtonText: 'Edit',
    editButtonAriaLabel: 'Edit',
    toggleEnableText: 'Yes',
    toggleDisableText: 'No',
    personalizationDescription: 'Allow personalization',
    personalizationEnableButtonAriaLabel: 'Enable personalization',
    personalizationDisableButtonAriaLabel: 'Disable personalization',
    webTrackingDescription: 'Enable browsing activity to be logged to enhance the browsing experience',
    webTrackingEnableButtonAriaLabel: 'Enable browsing activity to be logged',
    webTrackingDisableButtonAriaLabel: 'Disable browsing activity to be logged'
};

const mockConfig: IAccountProfileConfig = {
    heading: {
        text: 'Mock heading 1',
        tag: HeadingTag.h1
    },
    nameSectionHeading: {
        text: 'Name',
        tag: NameSectionHeadingTag.h2
    },
    emailAddressSectionHeading: {
        text: 'Email',
        tag: EmailAddressSectionHeadingTag.h2
    },
    preferencesSectionHeading: {
        text: 'Preferences',
        tag: PreferencesSectionHeadingTag.h2
    },
    personalizationSectionHeading: {
        text: 'Personalization',
        tag: PersonalizationSectionHeadingTag.h2
    },
    webTrackingSectionHeading: {
        text: 'Browsing Activity Logging',
        tag: WebTrackingSectionHeadingTag.h2
    },
    className: 'test-class'
};

const mockData: IAccountProfileData = {
    customerInformation: wrapInResolvedAsyncResult({
        Email: 'test@test.com',
        FirstName: 'First',
        LastName: 'Last'
    } as Customer),
    attributeDefinitions : wrapInResolvedAsyncResult([] as AttributeDefinition[])
};

const mockProps = {
    resources: mockResources,
    renderView: jest.fn(),
    renderModuleAttributes: jest.fn()
};

const mockActionContext = buildHydratedMockActionContext();

const mockContext = buildMockCoreContext(mockActionContext);

describe('Account-Profile unit tests - Container', () => {

    it('renders correctly if all props is provided ', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountProfileProps<IAccountProfileData> = {
            config: mockConfig,
            data: mockData,
            context: {
                // @ts-ignore mock partial data
                request: {
                    features: {
                    }
                }
            },
            ...mockProps
        };

        shallow(<AccountProfileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });

    it('does not render extra preferences if enableDataAnalytics feature is disabled', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext) as IAccountProfileProps<IAccountProfileData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => <div props={props} />)
        };

        moduleProps.context.request.features.enableDataAnalytics = false;

        const accountProfile = mount(<AccountProfileModule {...moduleProps} />);
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = accountProfile.childAt(0).props().props;
        expect(viewProps.preferenceSection.extraPreferences.length).toEqual(0);
    });

    it('render extra preferences if enableDataAnalytics feature is enabled', () => {
        mockActionContext.requestContext.features = { enableDataAnalytics: true };

        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext) as IAccountProfileProps<IAccountProfileData>,
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => <div props={props} />)
        };

        moduleProps.context.request.features.enableDataAnalytics = true;

        const accountProfile = mount(<AccountProfileModule {...moduleProps} />);
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = accountProfile.childAt(0).props().props;
        expect(viewProps.preferenceSection.extraPreferences.length).toBeGreaterThan(0);
    });

});
