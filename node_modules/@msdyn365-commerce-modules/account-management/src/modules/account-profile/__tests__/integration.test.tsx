/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { Customer } from '@msdyn365-commerce/retail-proxy';
import { AttributeDefinition } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { render } from 'enzyme';
import * as React from 'react';

import AccountProfileModule from '../account-profile';
import { IAccountProfileData } from '../account-profile.data';
import {
  EmailAddressSectionHeadingTag, HeadingTag, IAccountProfileConfig, IAccountProfileProps,
  IAccountProfileResources, NameSectionHeadingTag, PersonalizationSectionHeadingTag,
  PreferencesSectionHeadingTag
} from '../account-profile.props.autogenerated';
import AccountProfileView from '../account-profile.view';

const mockData: IAccountProfileData = {
  customerInformation: wrapInResolvedAsyncResult({
    AccountNumber: '1',
    Email: 'test@test.com',
    FirstName: 'First',
    LastName: 'Last'
  } as Customer),
  attributeDefinitions: wrapInResolvedAsyncResult([] as AttributeDefinition[])
};

const mockConfig: IAccountProfileConfig = {
  heading: {
    text: 'Mock heading 1',
    tag: HeadingTag.h1
  },
  nameSectionHeading: {
    text: 'Name',
    tag: NameSectionHeadingTag.h2
  },
  emailAddressSectionHeading: {
    text: 'Email',
    tag: EmailAddressSectionHeadingTag.h2
  },
  preferencesSectionHeading: {
    text: 'Preferences',
    tag: PreferencesSectionHeadingTag.h2
  },
  personalizationSectionHeading: {
    text: 'Personalization',
    tag: PersonalizationSectionHeadingTag.h2
  },
  className: 'test-class'
};

const mockResources: IAccountProfileResources = {
  attributeInputValueExceedsMaximumErrorText: 'Value exceeds maximum error',
  attributeInputValueExceedsMinimumErrorText: 'Value exceeds minimum error',
  attributeInputMandatoryErrorText: 'Mandatory error',
  attributeInputStringMaxLengthErrorText: 'String max length error',
  attributeInputTypeErrorText: 'Type error',
  attributeInputRangeErrorText: 'Range error',
  attributeToggleButtonAriaLabel: 'Toggle',
  attributesEditButtonText: 'Edit',
  attributesSaveButtonText: 'Save',
  attributesCancelButtonText: 'Cancel',
  attributesEditButtonAriaLabel: 'Edit',
  attributesSaveButtonAriaLabel: 'Save',
  attributesCancelButtonAriaLabel: 'Cancel',
  attributesSaveExceptionMessage: 'Exception',
  editButtonText: 'Edit',
  editButtonAriaLabel: 'Edit',
  toggleEnableText: 'Yes',
  toggleDisableText: 'No',
  personalizationDescription: 'Allow personalization',
  personalizationEnableButtonAriaLabel: 'Enable personalization',
  personalizationDisableButtonAriaLabel: 'Disable personalization',
  webTrackingDescription: 'Allow Web Tracking',
  webTrackingEnableButtonAriaLabel: 'Enable web tracking',
  webTrackingDisableButtonAriaLabel: 'Disable web tracking'
};

describe('AccountProfile', () => {
  it('renders correctly', () => {
    const moduleProps: IAccountProfileProps<IAccountProfileData> = {
      ...buildMockModuleProps(mockData, {}, mockConfig) as IAccountProfileProps<IAccountProfileData>,
      resources: mockResources,
      // @ts-ignore
      renderView: AccountProfileView
    };

    const component = render(<AccountProfileModule {...moduleProps} />);
    expect(component).toMatchSnapshot();
  });
});