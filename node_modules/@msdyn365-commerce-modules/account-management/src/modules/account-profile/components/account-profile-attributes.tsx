/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { updateCustomerAttributes, updateCustomerAttributesInput } from '@msdyn365-commerce-modules/retail-actions';
import { Button, format, getPayloadObject, getTelemetryAttributes, getTelemetryObject, IPayLoad, isNullOrWhiteSpace,ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import MsDyn365, { IDictionary, Text } from '@msdyn365-commerce/core';
import { AttributeDefinition, Customer, CustomerAttribute } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import classnames from 'classnames';
import { observable, reaction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { IAccountProfileData } from '../account-profile.data';
import { IAccountProfileProps } from '../account-profile.props.autogenerated';
import TextComponent from './account-profile-text';

interface IAttributePropertiesType {
    Name?: string;
    IsMandatory?: boolean;
  }

export interface IAccountProfileAttributesProps {
    accountProfileProps: IAccountProfileProps<IAccountProfileData>;
}

export const enum AccountAttributeDataTypeValue {
    Decimal = 3,
    Integer = 4,
    Text = 5,
    TrueFalse = 6
}

export interface IAttributePayloadData {
    recordId?: number;
    name?: string;
    dataTypeValue?: number;
    isEnumeration?: boolean;
    lowerBoundValue?: number;
    upperBoundValue?: number;
    decimalValue?: number;
    integerValue?: number;
    textValue?: string;
    booleanValue?: boolean;
    isMandatory?: boolean;
    defaultValue?: string;
}

export interface IAccountProfileAttributesState extends React.ComponentState {
    editAttributes: boolean;
    phone: string;
    vatNumber: string;
    attributes: IDictionary<string>;
    attributeError: IDictionary<string>;
}

/**
 *
 * AccountProfileAttributes class
 * @extends {React.PureComponentIAccountProfileAttributesProps, IAccountProfileAttributesState>}
 */
@observer
class AccountProfileAttributes extends React.Component<IAccountProfileAttributesProps, IAccountProfileAttributesState> {
    private attributePayloadData: IAttributePayloadData[];
    @observable private isUpdatingAttributes: boolean = false;
    @observable private gotException: boolean = false;
    private hasError: boolean = false;
    private telemetryContent?: ITelemetryContent;
    private initialAttributes: IDictionary<string>;
    private initialCustomerAttributes?: CustomerAttribute[];
    private initialPhone: string;
    private initialVatNumber: string;
    private payLoad: IPayLoad;
    private editRef: React.RefObject<HTMLButtonElement>;
    private readonly attributesContainerRef: React.RefObject<HTMLDivElement>;
    private readonly attributeClassName: string = 'ms-account-profile__attributes-element';
    private maxIntegerLimit: number = 2100000000;
    private minIntegerLimit: number = -2100000000;
    private maxDecimalLimit: number = 7900000000000;
    private minDecimalLimit: number = -7900000000000;
    private maxStringLength: number = 1000;
    private maxVATNumberLength: number = 20;
    private maxPhoneLength: number = 25;

    constructor(props: IAccountProfileAttributesProps) {
        super(props);
        this.state = {
            editAttributes: false,
            phone: '',
            vatNumber: '',
            attributes: {},
            attributeError: {}
        };
        this.initialAttributes = {};
        this.initialCustomerAttributes = [];
        this.initialPhone = '';
        this.initialVatNumber = '';
        this.attributePayloadData = [];
        const telemetryPageName = this.props.accountProfileProps && this.props.accountProfileProps.context && this.props.accountProfileProps.context.request && this.props.accountProfileProps.context.request.telemetryPageName || '';
        const friendlyName = this.props.accountProfileProps && this.props.accountProfileProps.friendlyName || '';
        const telemetry = this.props.accountProfileProps && this.props.accountProfileProps.telemetry || {};
        this.telemetryContent = getTelemetryObject(telemetryPageName, friendlyName, telemetry);
        this.payLoad = getPayloadObject('click', this.telemetryContent, '');
        this.editRef = React.createRef();
        this.attributesContainerRef = React.createRef();
    }

    public componentDidMount(): void {
        this._buildPayloadData();
        this._getAttributes();
        this._getCustomerPhoneAndVatNumber();
        reaction(
            () => this.props.accountProfileProps.data.customerInformation.result,
            () => {
                const customerInformation = this.props.accountProfileProps.data.customerInformation.result;
                this.initialCustomerAttributes = customerInformation && customerInformation.Attributes;
                this._getAttributes();
                this._getCustomerPhoneAndVatNumber();
            }
        );
        reaction(
            () => this.props.accountProfileProps.data.attributeDefinitions.result,
            () => {
                this._buildPayloadData();
            }
        );
    }

    public render(): JSX.Element | null {
        return this._renderAttributes();
    }

    private _renderAttributes = (): JSX.Element | null => {
        const { config, data, resources } = this.props.accountProfileProps;
        const attributeDefinitions: AttributeDefinition[] = data.attributeDefinitions.result || [];
        const additionalInformationSectionHeading = config.additionalInformationSectionHeading && config.additionalInformationSectionHeading.text || '';
        const showAttributes = config.showAttributes || '';
        const attributes = showAttributes.split(',');
        const elements = attributes.map(att => {
            const attributeDefinition: AttributeDefinition = attributeDefinitions.find(attribute =>
                attribute.IsHidden === false && attribute.Name!.toLocaleLowerCase() === att.toLocaleLowerCase()
            ) || { RecordId: 0 };
            return this._renderAttribute(attributeDefinition);
        });
        const edit = this.state && this.state.editAttributes || false;
        this.payLoad.contentAction.etext = `${resources.attributesEditButtonText} ${additionalInformationSectionHeading}`;
        const editAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);
        this.payLoad.contentAction.etext = `${resources.attributesSaveButtonText} ${additionalInformationSectionHeading}`;
        const saveAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);
        this.payLoad.contentAction.etext = `${resources.attributesCancelButtonText} ${additionalInformationSectionHeading}`;
        const cancelAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);
        return (
            <div ref={this.attributesContainerRef} className={classnames('ms-account-profile__attributes', { 'ms-account-profile__attributes-updating': this.isUpdatingAttributes })}>
                {config.additionalInformationSectionHeading && (
                    <Text
                        className='ms-account-profile__attributes-tile__heading'
                        tag={config.additionalInformationSectionHeading.tag || 'h2'}
                        text={additionalInformationSectionHeading}
                    />
                )}
                {config.showPhone && (
                    this._renderPhone()
                )}
                {config.showVatNumber && (
                    this._renderVatNumber()
                )}
                {elements}
                {this.gotException && (
                    <div className='ms-account-profile__attributes-error'>
                        <label className='ms-account-profile__attributes-error-label'>
                            {this.props.accountProfileProps.resources.attributesSaveExceptionMessage}
                        </label>
                    </div>
                )}
                {!edit && (
                    <Button
                        className={classnames('ms-account-profile__attributes-edit-button')}
                        aria-label={`${resources.attributesEditButtonText} ${additionalInformationSectionHeading}`}
                        onClick={this._enableAttributes}
                        innerRef={this.editRef}
                        title = {resources.attributesEditButtonText}
                        {...editAttributes}
                    >
                        {resources.attributesEditButtonText}
                    </Button>
                )}
                {edit && (
                    <Button
                        className={classnames('ms-account-profile__attributes-save-button')}
                        aria-label={resources.attributesSaveButtonText}
                        onClick={this._saveAttributes}
                        title = {resources.attributesSaveButtonText}
                        {...saveAttributes}
                    >
                        {resources.attributesSaveButtonText}
                    </Button>
                )}
                {edit && (
                    <Button
                        className={classnames('ms-account-profile__attributes-cancel-button')}
                        aria-label={resources.attributesCancelButtonText}
                        onClick={this._disableAttributes}
                        title = {resources.attributesCancelButtonText}
                        {...cancelAttributes}
                    >
                        {resources.attributesCancelButtonText}
                    </Button>
                )}
            </div>
        );
    }

    private _renderPhone = (): JSX.Element | null => {
        const { phoneSectionHeading } = this.props.accountProfileProps.config;
        const heading = phoneSectionHeading && phoneSectionHeading.text || '';
        const className = heading && heading.replace(/ /g, '_') || '';
        const editAttributes = this.state && this.state.editAttributes || false;
        return (
            <div className={classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`)}>
                {phoneSectionHeading && (<Text
                    className={`ms-account-profile__attributes__section-heading`}
                    tag='h3'
                    text={heading}
                />)}
                <input
                    type='text'
                    aria-label={heading}
                    className={classnames(this.attributeClassName, 'ms-account-profile__attributes_input', `ms-account-profile__attributes_input-edit-${editAttributes}`, `ms-account-profile__${className}-input`)}
                    onChange={this._onPhoneChange}
                    value={this.state.phone || ''}
                    disabled={!editAttributes}
                />
                {this._renderError('Phone')}
            </div>
        );
    }

    private _renderVatNumber = (): JSX.Element | null => {
        const { vatNumberSectionHeading } = this.props.accountProfileProps.config;
        const heading = vatNumberSectionHeading && vatNumberSectionHeading.text || '';
        const className = heading && heading.replace(/ /g, '_') || '';
        const editAttributes = this.state && this.state.editAttributes || false;
        return (
            <div className={classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`)}>
                {vatNumberSectionHeading && (<Text
                    className={`ms-account-profile__attributes__section-heading`}
                    tag='h3'
                    text={heading}
                />)}
                <input
                    type='text'
                    aria-label={heading}
                    className={classnames(this.attributeClassName, 'ms-account-profile__attributes_input', `ms-account-profile__attributes_input-edit-${editAttributes}`, `ms-account-profile__${className}-input`)}
                    onChange={this._onVatNumberChange}
                    value={this.state.vatNumber || ''}
                    disabled={!editAttributes}
                />
                {this._renderError('VATNumber')}
            </div>
        );
    }

    private _renderAttribute = (customAttribute: AttributeDefinition): JSX.Element | null => {
        const editAttributes = this.state && this.state.editAttributes || false;
        const className = customAttribute.Name && customAttribute.Name.replace(/ /g, '_') || '';
        switch (customAttribute.ExtDataType && customAttribute.ExtDataType.Value) {
            case AccountAttributeDataTypeValue.Integer:
            case AccountAttributeDataTypeValue.Decimal:
                return this._renderIntegerDecimalInput(customAttribute, className, editAttributes);
            case AccountAttributeDataTypeValue.Text:
                return this._renderTextInputOrSelect(customAttribute, className, editAttributes);
            case AccountAttributeDataTypeValue.TrueFalse:
                return this._renderBoolean(customAttribute, className, editAttributes);
            default:
                return null;
        }
    }

    private _renderIntegerDecimalInput = (customAttribute: AttributeDefinition, className: string, editAttributes: boolean): JSX.Element | null => {
        const edit = this.state && this.state.editAttributes || false;
        const attributeProps = this._getAttributeProps(customAttribute.Name || '');
        const displayName: string = attributeProps?.Name || '';
        return (
            <div className={classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`)}>
                <Text
                    className={`ms-account-profile__attributes__section-heading`}
                    tag='h3'
                    text={displayName}
                />
                <input
                    type='text'
                    aria-label={customAttribute.Name}
                    className={classnames(this.attributeClassName, 'ms-account-profile__attributes_input', `ms-account-profile__attributes_input-edit-${edit}`, `ms-account-profile__${className}-input`)}
                    onChange={this._onAttributeChange(customAttribute)}
                    value={this.state.attributes[customAttribute.Name || ''] || ''}
                    disabled={!editAttributes}
                    aria-required={attributeProps?.IsMandatory || false}
                />
                {this._renderError(customAttribute.Name || '')}
            </div>
        );
    }

    // tslint:disable-next-line: cyclomatic-complexity
    private _renderTextInputOrSelect = (customAttribute: AttributeDefinition, className: string, editAttributes: boolean): JSX.Element | null => {
        const isEnumeration: boolean = customAttribute.IsEnumeration || false;
        const edit = this.state && this.state.editAttributes || false;
        const attributeProps = this._getAttributeProps(customAttribute.Name || '');
        const displayName: string = attributeProps?.Name || '';
        if (isEnumeration && customAttribute.EnumerationDetails) {
            const value = this.state.attributes[customAttribute.Name || ''] || '';
            const hasNoValue = value === '' ? true : false;
            return (
                <div className={classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`)}>
                    <Text
                        className={`ms-account-profile__attributes__section-heading`}
                        tag='h3'
                        text={displayName}
                    />
                    <select
                        id={`ms-account-profile__attributes-${className}`}
                        aria-label={customAttribute.Name}
                        className={classnames(this.attributeClassName, 'ms-account-profile__attributes_select', `ms-account-profile__attributes_select-edit-${edit}`, `ms-account-profile__attributes-${className}_select`)}
                        onChange={this._onAttributeSelect(customAttribute)}
                        disabled={!editAttributes}
                        aria-required={attributeProps?.IsMandatory || false}
                    >
                        {hasNoValue && (<option className='ms-account-profile__attributes_select__option' key='blank' selected={hasNoValue} aria-selected={hasNoValue} />)}
                        {customAttribute.EnumerationDetails.map((option) => {
                            const selected = option.EnumerationValue === this.state.attributes[customAttribute.Name || ''];
                            return <option className='ms-account-profile__attributes_select__option' key={option.EnumerationValue} selected={selected} aria-selected={selected}>{option.EnumerationValue}</option>;
                        })}
                    </select>
                </div>
            );
        } else {
           return (
                <div className={classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`)}>
                    <Text
                        className={`ms-account-profile__attributes__section-heading`}
                        tag='h3'
                        text={displayName}
                    />
                    <input
                        type='text'
                        aria-label={customAttribute.Name}
                        className={classnames(this.attributeClassName, 'ms-account-profile__attributes_input', `ms-account-profile__attributes_input-edit-${edit}`, `ms-account-profile__${className}-input`)}
                        onChange={this._onAttributeChange(customAttribute)}
                        value={this.state.attributes[customAttribute.Name || ''] || ''}
                        disabled={!editAttributes}
                        aria-required={attributeProps?.IsMandatory || false}
                    />
                    {this._renderError(customAttribute.Name || '')}
                </div>
            );
        }
    }

    private _renderBoolean = (customAttribute: AttributeDefinition, className: string, editAttributes: boolean): JSX.Element | null => {
        let value = this.state.attributes[customAttribute.Name || ''] || '';
        const hasNoValue = value === '' ? true : false;
        const render = (hasNoValue && !editAttributes) ? false : true;
        value = value || 'false';
        const toggleState = value === 'true' && 'enable' || 'disable';
        const arialabel = format(this.props.accountProfileProps.resources.attributeToggleButtonAriaLabel, customAttribute.Name);
        const ariaPressed = value === 'true' && true || false;
        const attributeProps = this._getAttributeProps(customAttribute.Name || '');
        const displayName: string = attributeProps?.Name || '';
        let toggleValue = 'false';
        if (value === 'true') {
            toggleValue = 'false';
        } else {
            toggleValue = 'true';
        }

        return (
            <div className={classnames('ms-account-profile__attributes__section', 'ms-account-profile__attributes__section__toggle', `ms-account-profile__attributes-${className}`)}>
                <Text
                    className={`ms-account-profile__attributes__section-heading`}
                    tag='h3'
                    text={displayName}
                />
                {render && (
                    <div className={`ms-account-profile__attributes__section__toggle-wrapper ms-account-profile__attributes__section__toggle-${toggleState}`}>

                        <TextComponent className='ms-account-profile__attributes__section__toggle-disable-text' text={this.props.accountProfileProps.resources.toggleDisableText} />
                        <Button
                            className={classnames(this.attributeClassName, 'ms-account-profile__attributes__section__toggle-button', `ms-account-profile__attributes__section__toggle-${toggleState}-button`)}
                            aria-label={`${arialabel}`}
                            aria-pressed={ariaPressed}
                            value={value}
                            onClick={this._onAttributeCheck(customAttribute, toggleValue)}
                            disabled={!editAttributes}
                        />
                        <TextComponent className='ms-account-profile__attributes__section__toggle-enable-text' text={this.props.accountProfileProps.resources.toggleEnableText} />
                    </div>
                )}
            </div>
        );
    }

    private _renderError = (attributeName: string): JSX.Element | null => {
        const error: string = this.state && this.state.attributeError && this.state.attributeError[attributeName] || '';
        const hasError = !isNullOrWhiteSpace(error);
        if (hasError) {
            return (
                <div className='ms-account-profile__attributes-error' role='alert' aria-live='assertive'>
                    <label className='ms-account-profile__attributes-error-label'>
                        {error}
                    </label>
                </div>
            );
        }
        return null;
    }

    private _getAttributeProps = (attributeName: string): IAttributePropertiesType => {
        const attributePayloadData = this.attributePayloadData.filter((att) => att.name === attributeName);
        const isMandatory: boolean = attributePayloadData[0] && attributePayloadData[0].isMandatory || false;
        return {
            Name: isMandatory ? `${attributeName || ''} *` : attributeName || '',
            IsMandatory: isMandatory
        };
    }

    private _onPhoneChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        const value = event.target.value;
        this.setState({ phone: value });
    }

    private _onVatNumberChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        const value = event.target.value;
        this.setState({ vatNumber: value });
    }

    private _enableAttributes = () => {
        this.hasError = false;
        // To clear exception messages
        this.gotException = false;
        this.setState({ editAttributes: true, attributeError: {} });
        if (MsDyn365.isBrowser) {
            setTimeout(() => {
                if (this.attributesContainerRef?.current) {
                    const attributes: HTMLCollectionOf<Element> = this.attributesContainerRef.current.getElementsByClassName(this.attributeClassName);
                    if (attributes && attributes.length > 0) {
                        this._setFocus(attributes[0] as HTMLElement);
                    }
                }
            },         0);
        }
    }

    private _disableAttributes = () => {
        this.setState({ editAttributes: false, attributeError: {}, attributes: this.initialAttributes, phone: this.initialPhone, vatNumber: this.initialVatNumber });
        if (MsDyn365.isBrowser) {
            setTimeout(() => {
                this._setFocus(this.editRef.current);
            },         0);
        }
    }

    private _onAttributeChange = (attributeDefinition: AttributeDefinition) => (event: React.ChangeEvent<HTMLInputElement>) => {
        const value = event.target.value;
        const name = attributeDefinition.Name || '';
        this.setState({
            attributes: {
                ...this.state.attributes,
                [name]: value
            }
        });
    }

    private _onAttributeCheck = (attributeDefinition: AttributeDefinition, value: string) => (event: React.MouseEvent<HTMLElement>) => {
        const name = attributeDefinition.Name || '';
        this.setState({
            attributes: {
                ...this.state.attributes,
                [name]: value
            }
        });
    }

    private _onAttributeSelect = (attributeDefinition: AttributeDefinition) => (event: React.ChangeEvent<HTMLSelectElement>) => {
        const value = event.currentTarget.selectedOptions[0].value;
        const index = event.currentTarget.selectedOptions[0].index;
        const name = attributeDefinition.Name || '';
        this.setState({
            attributes: {
                ...this.state.attributes,
                [name]: value
            },
            selectedIndex: {
                ...this.state.selectedIndex,
                [name]: index
            }
        });
    }

    private _getAttributes = () => {
        const { config, data } = this.props.accountProfileProps;
        const showAttributes = config.showAttributes || '';
        const showAttributesArray = showAttributes.split(',');
        const customer = data.customerInformation.result;
        const custmerAttributes: CustomerAttribute[] = customer && customer.Attributes || [];
        const attributes: IDictionary<string> = {};
        // tslint:disable-next-line: cyclomatic-complexity
        showAttributesArray.forEach(showAttribute => {
            const attributePayloadData = this.attributePayloadData.filter((att) => att.name === showAttribute);
            const isMandatory: boolean = attributePayloadData[0] && attributePayloadData[0].isMandatory || false;
            const defaultValue = attributePayloadData[0] && attributePayloadData[0].defaultValue;
            const attribute = custmerAttributes.find((att) => att.Name === showAttribute);
            let value: string = '';
            if (attribute && attribute.AttributeValue) {
                const name = attribute && attribute.Name || '';
                switch (attribute.DataTypeValue) {
                    case AccountAttributeDataTypeValue.Integer:
                        if (attribute.AttributeValue.IntegerValue) {
                            value = String(attribute.AttributeValue.IntegerValue);
                            attributes[name] = value;
                        }
                        break;
                    case AccountAttributeDataTypeValue.Decimal:
                        if (attribute.AttributeValue.DecimalValue) {
                            value = String(attribute.AttributeValue.DecimalValue);
                            attributes[name] = value;
                        }
                        break;
                    case AccountAttributeDataTypeValue.Text:
                        if (attribute.AttributeValue.StringValue) {
                            value = attribute.AttributeValue.StringValue;
                            attributes[name] = value;
                        }
                        break;
                    case AccountAttributeDataTypeValue.TrueFalse:
                        if (attribute.AttributeValue.BooleanValue !== null) {
                            value = String(attribute.AttributeValue.BooleanValue);
                            attributes[name] = value;
                        }
                        break;
                    default:
                    // Do nothing
                }
            }
            if (isNullOrWhiteSpace(value) && isMandatory) {
                attributes[showAttribute] = '';
            }
            if (value.length === 0 && defaultValue) {
                attributes[showAttribute] = String(defaultValue);
            }
        });
        if (Object.keys(this.initialAttributes).length === 0) {
            this.initialAttributes = attributes;
        }
        this.setState({ attributes: attributes });
    }

    // tslint:disable-next-line: cyclomatic-complexity max-func-body-length
    private _addOrUpdateAttribute = (customer: Customer) => {
        const { resources } = this.props.accountProfileProps;
        const { phone, vatNumber } = this.state;
        const attributeError: IDictionary<string> = {};
        let hasError: boolean = false;
        let hasValue: boolean = true;
        for (const [key, value] of Object.entries(this.state.attributes)) {
            const payloadData: IAttributePayloadData = this.attributePayloadData.find(data => data.name === key) || {};
            if (payloadData) {
                switch (payloadData.dataTypeValue) {
                    case AccountAttributeDataTypeValue.Decimal:
                        const decimalValue = Number(value);
                        if (isNaN(decimalValue)) {
                            const typeError = format(resources.attributeInputTypeErrorText, payloadData.name, 'Decimal');
                            attributeError[payloadData.name || ''] = typeError;
                            hasError = true;
                        } else {
                            if (payloadData.lowerBoundValue !== undefined && payloadData.upperBoundValue !== undefined) {
                                if (decimalValue < payloadData.lowerBoundValue || decimalValue > payloadData.upperBoundValue) {
                                    const rangeError = format(resources.attributeInputRangeErrorText, payloadData.name, payloadData.lowerBoundValue, payloadData.upperBoundValue);
                                    attributeError[payloadData.name || ''] = rangeError;
                                    hasError = true;
                                }
                            } else {
                                if(decimalValue > this.maxDecimalLimit) {
                                    attributeError[payloadData.name || ''] = format(resources.attributeInputValueExceedsMaximumErrorText, payloadData.name, this.maxDecimalLimit);
                                    hasError = true;
                                }

                                if(decimalValue < this.minDecimalLimit) {
                                    attributeError[payloadData.name || ''] = format(resources.attributeInputValueExceedsMinimumErrorText, payloadData.name, this.minDecimalLimit);
                                    hasError = true;
                                }
                            }
                        }

                        if (!hasError) {
                            if (isNullOrWhiteSpace(value)) {
                                hasValue = false;
                            } else {
                                payloadData.decimalValue = decimalValue;
                                hasValue = true;
                            }
                        }
                        break;
                    case AccountAttributeDataTypeValue.Integer:
                        const integerValue = Number(value);
                        if (isNaN(integerValue) || value.indexOf('.') !== -1) {
                            const typeError = format(resources.attributeInputTypeErrorText, payloadData.name, 'Integer');
                            attributeError[payloadData.name || ''] = typeError;
                            hasError = true;
                        } else {
                            if (payloadData.lowerBoundValue !== undefined && payloadData.upperBoundValue !== undefined) {
                                if (integerValue < payloadData.lowerBoundValue || integerValue > payloadData.upperBoundValue) {
                                    const rangeError = format(resources.attributeInputRangeErrorText, payloadData.name, payloadData.lowerBoundValue, payloadData.upperBoundValue);
                                    attributeError[payloadData.name || ''] = rangeError;
                                    hasError = true;
                                }
                            } else {
                                if (integerValue > this.maxIntegerLimit) {
                                    attributeError[payloadData.name || ''] = format(resources.attributeInputValueExceedsMaximumErrorText, payloadData.name, this.maxIntegerLimit);
                                    hasError = true;
                                }

                                if(integerValue < this.minIntegerLimit) {
                                    attributeError[payloadData.name || ''] = format(resources.attributeInputValueExceedsMinimumErrorText, payloadData.name, this.minIntegerLimit);
                                    hasError = true;
                                }
                            }
                        }

                        if (!hasError) {
                            if (isNullOrWhiteSpace(value)) {
                                hasValue = false;
                            } else {
                                payloadData.integerValue = integerValue;
                                hasValue = true;
                            }
                        }
                        break;
                    case AccountAttributeDataTypeValue.Text:
                        let trimValue = '';
                        if (!isNullOrWhiteSpace(value)) {
                            trimValue = value.trim();
                        }
                        if (trimValue.length > this.maxStringLength) {
                            attributeError[payloadData.name || ''] = format(resources.attributeInputStringMaxLengthErrorText, payloadData.name, this.maxStringLength);
                            hasError = true;
                        }
                        if (!hasError) {
                            payloadData.textValue = trimValue;
                        }
                        break;
                    case AccountAttributeDataTypeValue.TrueFalse:
                        payloadData.booleanValue = value === 'true' ? true : false;
                        break;
                    default:
                    // Do nothing
                }

                if (payloadData.isMandatory && isNullOrWhiteSpace(value)) {
                    attributeError[payloadData.name || ''] = format(resources.attributeInputMandatoryErrorText, payloadData.name);
                    hasError = true;
                }

                const custmerAttributes: CustomerAttribute[] = customer && customer.Attributes || [];
                const attribute = custmerAttributes.find((att) => att.Name === key);
                const index = custmerAttributes.findIndex((att) => att.Name === key);

                if(index !== -1 && !hasValue) {
                    custmerAttributes.splice(index,1);
                }

                if (!hasError && hasValue) {
                    if (attribute) {
                        attribute.Attribute = undefined;
                        attribute.DataTypeValue = payloadData.dataTypeValue;
                        attribute.Name = payloadData.name;
                        attribute.RecordId = payloadData.recordId;
                        attribute.Units = undefined;
                        attribute.AttributeValue = {
                            IntegerValue: payloadData.integerValue,
                            BooleanValue: payloadData.booleanValue,
                            StringValue: payloadData.textValue,
                            DecimalValue: payloadData.decimalValue
                        };
                        attribute.ExtensionProperties = [];
                        attribute.NameTranslations = [];
                    } else {
                        custmerAttributes.push({
                            // @ts-ignore
                            '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CustomerAttribute',
                            Attribute: undefined,
                            DataTypeValue: payloadData.dataTypeValue,
                            KeyName: payloadData.name,
                            Name: payloadData.name,
                            RecordId: payloadData.recordId,
                            Units: undefined,
                            AttributeValue: {
                                // @ts-ignore
                                '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CommercePropertyValue',
                                IntegerValue: payloadData.integerValue,
                                BooleanValue: payloadData.booleanValue,
                                StringValue: payloadData.textValue,
                                DecimalValue: payloadData.decimalValue
                            },
                            'ExtensionProperties@odata.type': '#Collection(Microsoft.Dynamics.Commerce.Runtime.DataModel.CommerceProperty)',
                            ExtensionProperties: [],
                            'NameTranslations@odata.type': '#Collection(Microsoft.Dynamics.Commerce.Runtime.DataModel.TextValueTranslation)',
                            NameTranslations: []
                        });
                    }
                }
            }
        }

        if (phone.trim().length > this.maxPhoneLength) {
            attributeError[`Phone`] = format(resources.attributeInputStringMaxLengthErrorText, 'Phone', this.maxPhoneLength);
            hasError = true;
        } else {
            customer.Phone = phone.trim();
        }

        if (vatNumber.trim().length > this.maxVATNumberLength) {
            attributeError[`VATNumber`] = format(resources.attributeInputStringMaxLengthErrorText, 'VAT Number', this.maxVATNumberLength);
            hasError = true;
        } else {
            customer.VatNumber = vatNumber.trim();
        }

        this.hasError = hasError;
        this.setState({ attributeError: attributeError });

    }

    private _saveAttributes = async () => {
        const { context, data } = this.props.accountProfileProps;
        const customer = data.customerInformation.result;

        if (customer && context) {
            this._addOrUpdateAttribute(customer);
            const input = new updateCustomerAttributesInput(customer.AccountNumber, customer.Attributes || [], context.request.apiSettings, customer.Phone, customer.VatNumber);

            this.isUpdatingAttributes = true;
            this.gotException = false;

            if (!this.hasError) {
                this.setState({ editAttributes: false });
                try {
                    await updateCustomerAttributes(input, context.actionContext);
                } catch (error) {
                    this.gotException = true;
                    customer.Attributes = this.initialCustomerAttributes;
                    if (context.telemetry) {
                        context.telemetry.exception(error);
                        context.telemetry.debug('Unable to update customer attributes');
                    }
                    this.setState({ attributeError: {}, attributes: this.initialAttributes, phone: this.initialPhone, vatNumber: this.initialVatNumber });
                }
                this.setState({ editAttributes: false });
                if (!this.gotException) {
                    this.initialAttributes = this.state.attributes;
                    this.initialCustomerAttributes = customer.Attributes;
                    this.initialPhone = this.state.phone;
                    this.initialVatNumber = this.state.vatNumber;
                }
            }

            this.isUpdatingAttributes = false;

            if (MsDyn365.isBrowser) {
                setTimeout(() => {
                    this._setFocus(this.editRef.current);
                },         0);
            }
        }
    }

    private _setFocus = (element: HTMLElement | null) => {
        element?.focus();
    }

    private _buildPayloadData = () => {
        const { data } = this.props.accountProfileProps;
        const attributeDefinitions = data.attributeDefinitions.result || [];
        const attributes: IDictionary<string> = {};
        // tslint:disable-next-line: cyclomatic-complexity
        attributeDefinitions.forEach(attributeDefinition => {
            const attributePayloadData: IAttributePayloadData = {};
            attributePayloadData.recordId = attributeDefinition.RecordId;
            attributePayloadData.name = attributeDefinition.Name;
            attributePayloadData.dataTypeValue = attributeDefinition.DataTypeValue;
            attributePayloadData.isEnumeration = attributeDefinition.IsEnumeration;
            attributePayloadData.isMandatory = attributeDefinition.IsMandatory;
            switch (attributeDefinition.DataTypeValue) {
                case AccountAttributeDataTypeValue.Integer:
                    const defaultIntegerValue = attributeDefinition.DefaultValue && attributeDefinition.DefaultValue.IntegerValue;
                    attributePayloadData.lowerBoundValue = attributeDefinition.LowerBound && attributeDefinition.LowerBound.IntegerValue;
                    attributePayloadData.upperBoundValue = attributeDefinition.UpperBound && attributeDefinition.UpperBound.IntegerValue;
                    if (attributePayloadData.name && defaultIntegerValue) {
                        attributePayloadData.defaultValue =  String(defaultIntegerValue);
                        attributes[attributePayloadData.name] = String(defaultIntegerValue);
                    }
                    break;
                case AccountAttributeDataTypeValue.Decimal:
                    const defaultDecimalValue = attributeDefinition.DefaultValue && attributeDefinition.DefaultValue.DecimalValue;
                    attributePayloadData.lowerBoundValue = attributeDefinition.LowerBound && attributeDefinition.LowerBound.DecimalValue;
                    attributePayloadData.upperBoundValue = attributeDefinition.UpperBound && attributeDefinition.UpperBound.DecimalValue;
                    if (attributePayloadData.name && defaultDecimalValue) {
                        attributePayloadData.defaultValue =  String(defaultDecimalValue);
                        attributes[attributePayloadData.name] = String(defaultDecimalValue);
                    }
                    break;
                case AccountAttributeDataTypeValue.Text:
                    const defaultStringValue = attributeDefinition.DefaultValue && attributeDefinition.DefaultValue.StringValue;
                    if (attributePayloadData.name && defaultStringValue) {
                        attributePayloadData.defaultValue =  defaultStringValue;
                        attributes[attributePayloadData.name] = defaultStringValue;
                    }
                    break;
                case AccountAttributeDataTypeValue.TrueFalse:
                    const defaultBooleanValue = attributeDefinition.DefaultValue && attributeDefinition.DefaultValue.BooleanValue || false;
                    if (attributePayloadData.name) {
                        attributePayloadData.defaultValue =  String(defaultBooleanValue);
                        attributes[attributePayloadData.name] = String(defaultBooleanValue);
                    }
                    break;
                default:
                // do nothing
            }
            this.attributePayloadData.push(attributePayloadData);
        });
        Object.keys(attributes).length > 0 && this.setState({ attributes: attributes });
    }

    private _getCustomerPhoneAndVatNumber = () => {
        const customer = this.props.accountProfileProps.data.customerInformation.result;
        const phone = customer && customer.Phone || '';
        const vatNumber = customer && customer.VatNumber || '';
        this.setState({ phone: phone, vatNumber: vatNumber });
        if (this.initialPhone.length === 0) {
            this.initialPhone = phone;
        }
        if (this.initialVatNumber.length === 0) {
            this.initialVatNumber = vatNumber;
        }
    }
}

export default AccountProfileAttributes;