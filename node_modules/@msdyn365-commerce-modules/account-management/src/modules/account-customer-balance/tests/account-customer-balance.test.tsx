/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildMockModuleProps } from '@msdyn365-commerce/core-internal';
/// <reference types="jest" />

// tslint:disable-next-line:no-unused-variable
import * as React from 'react';
import * as renderer from 'react-test-renderer';

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { Customer, CustomerBalances } from '@msdyn365-commerce/retail-proxy';
import AccountCustomerBalance from '../account-customer-balance';
import { IAccountCustomerBalanceData } from '../account-customer-balance.data';
import {
    IAccountCustomerBalanceConfig,
    IAccountCustomerBalanceProps,
    IAccountCustomerBalanceResources,
    IHeadingData
} from '../account-customer-balance.props.autogenerated';
import renderView from '../account-customer-balance.view';

const mockCustomerInformation = wrapInResolvedAsyncResult(({
    AllowOnAccountPayment: true,
    AccountNumber: 9999999,
    CreatedDateTime: new Date('11/11/2019'),
    FirstName: 'John',
    LastName: 'Doe'
} as unknown) as Customer);

const mockBalance = wrapInResolvedAsyncResult({
    Balance: 18.22,
    CreditLimit: 300
} as CustomerBalances);

const mockCreditExcessBalance = wrapInResolvedAsyncResult({
    Balance: 3000,
    CreditLimit: 300
} as CustomerBalances);

const mockConfig: IAccountCustomerBalanceConfig = {
    heading: {
        text: 'Account Credit',
        tag: 'h2'
    } as IHeadingData
};

const mockResources: IAccountCustomerBalanceResources = {
    creditSummarySectionHeading: 'Account credit summary',
    accountSectionHeading: 'Your account',
    backToShoppingText: 'Back to Shopping',
    customerSincePrefix: 'Customer since',
    availableCreditLabel: 'Totoal available credit',
    balanceOwedLabel: 'Balance Owed',
    creditExcessLabel: 'Credit excess'
};

const mockActions = {};

describe('AccountCustomerBalance', () => {
    let mockData: IAccountCustomerBalanceData = {
        balance: mockBalance,
        customerInformation: mockCustomerInformation
    };
    let moduleProps: IAccountCustomerBalanceProps<IAccountCustomerBalanceData>;

    beforeAll(() => {
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig),
            resources: mockResources,
            renderView
        } as IAccountCustomerBalanceProps<IAccountCustomerBalanceData>;
    });

    it('renders the happy path correctly', () => {
        const component: renderer.ReactTestRenderer = renderer.create(<AccountCustomerBalance {...moduleProps} />);
        const tree = component.toJSON();

        expect(tree).toMatchSnapshot();
    });

    it('render the credits excess when the user has exceeded their credit limit', () => {
        mockData = {
            balance: mockCreditExcessBalance,
            customerInformation: mockCustomerInformation
        };
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig),
            resources: mockResources,
            renderView
        } as IAccountCustomerBalanceProps<IAccountCustomerBalanceData>;

        const component: renderer.ReactTestRenderer = renderer.create(<AccountCustomerBalance {...moduleProps} />);
        const tree = component.toJSON();

        expect(tree).toMatchSnapshot();
    });

    describe('When data is not received', () => {
        beforeAll(() => {
            moduleProps = {
                ...buildMockModuleProps({}, mockActions, mockConfig),
                resources: mockResources,
                renderView
            } as IAccountCustomerBalanceProps<IAccountCustomerBalanceData>;
        });

        it('renders empty page content', () => {
            const component: renderer.ReactTestRenderer = renderer.create(<AccountCustomerBalance {...moduleProps} />);
            const tree = component.toJSON();

            expect(tree).toMatchSnapshot();
        });
    });
});
