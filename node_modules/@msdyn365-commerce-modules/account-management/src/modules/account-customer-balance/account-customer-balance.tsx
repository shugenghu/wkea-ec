/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getTelemetryObject, Heading, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { get } from 'lodash';
import * as React from 'react';
import { IAccountCustomerBalanceData } from './account-customer-balance.data';
import { HeadingTag, IAccountCustomerBalanceProps } from './account-customer-balance.props.autogenerated';
import { AccountLabels, AccountValues, BackButton, CreditSummaryLabels, CreditSummaryValues } from './components';

export interface IAccountCustomerBalanceViewProps extends IAccountCustomerBalanceProps<IAccountCustomerBalanceData> {
    heading: string;
    homeButton: React.ReactNode;
    accountSectionHeading: React.ReactNode;
    accountLabels: React.ReactNode;
    accountValues: React.ReactNode;
    creditSummarySectionHeading: React.ReactNode;
    creditSummaryLabels: React.ReactNode;
    creditSummaryValues: React.ReactNode;
}

/**
 *
 * AccountCustomerBalance component
 * @extends {React.PureComponent<IAccountCustomerBalanceProps<IAccountCustomerBalanceData>>}
 */
class AccountCustomerBalance extends React.PureComponent<IAccountCustomerBalanceProps<IAccountCustomerBalanceData>> {
    private telemetryContent?: ITelemetryContent;

    constructor(props: IAccountCustomerBalanceProps<IAccountCustomerBalanceData>) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public render(): JSX.Element | null {
        const customer = get(this.props, 'data.customerInformation.result');
        const account = get(this.props, 'data.balance.result');
        if ([customer, account].includes(undefined)) {
            this.props.context.telemetry.error('Customer data is unavailable, module will not render');
            return null;
        }

        const { config, resources, context } = this.props;
        const { heading } = config;
        const {
            creditSummarySectionHeading,
            accountSectionHeading,
            backToShoppingText,
            customerSincePrefix,
            availableCreditLabel,
            balanceOwedLabel,
            creditExcessLabel
        } = resources;

        const accountNumber = customer.AccountNumber;
        const createdOn = this._formatJoinDate(new Date(customer.CreatedDateTime));
        const name = `${customer.FirstName} ${customer.LastName}`;
        const excess = account.Balance - account.CreditLimit;
        const creditExcess = excess > 0 ? this._formatCurrency(excess) : null;
        const availableCredit = this._formatCurrency(account.CreditLimit - account.Balance);
        const balanceOwed = this._formatCurrency(account.Balance);
        const backLink = Msdyn365.getUrlSync('home', context.actionContext) || '';

        const viewProps = {
            ...this.props,
            heading: <Heading text={heading.text} tag={heading.tag} />,
            accountSectionHeading: <Heading tag={HeadingTag.h3} text={accountSectionHeading} className='ms-account-customer-balance__account-heading'/>,
            accountLabels: (
                <AccountLabels name={name} accountNumber={accountNumber} createdOn={createdOn} customerSincePrefix={customerSincePrefix}/>
            ),
            accountValues: <AccountValues availableCredit={availableCredit} availableCreditLabel={availableCreditLabel}/>,
            creditSummarySectionHeading: <Heading tag={HeadingTag.h3} text={creditSummarySectionHeading} className='ms-account-customer-balance__credit-summary-heading'/>,
            creditSummaryLabels: (
                <CreditSummaryLabels
                    availableCredit={availableCreditLabel}
                    balanceOwed={balanceOwedLabel}
                    creditExcess={creditExcess && creditExcessLabel}
                />
            ),
            creditSummaryValues: (
                <CreditSummaryValues availableCredit={availableCredit} balanceOwed={balanceOwed} creditExcess={creditExcess}/>
            ),
            homeButton: <BackButton label={backToShoppingText} link={backLink} telemetryContent={this.telemetryContent}/>
        };

        return this.props.renderView(viewProps);
    }

    private _formatCurrency(currency: number): string {
        const currencyCode = get(this.props, 'context.request.channel.Currency');
        const formatCurrency = get(this.props, 'context.cultureFormatter.formatCurrency');

        return `${formatCurrency(currency.toFixed(2), currencyCode)}`;
    }
    private _formatJoinDate(date: Date): string {
        const i14nDate = new Intl.DateTimeFormat(this.props.context.actionContext.requestContext.locale, {
            month: 'long',
            day: 'numeric',
            year: 'numeric'
        });

        return i14nDate.format(date);
    }
}

export default AccountCustomerBalance;
