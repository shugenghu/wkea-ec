/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { format, getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';

import { IAccountOrderTemplatesTileData } from './account-order-templates-tile.data';
import { IAccountOrderTemplatesTileProps } from './account-order-templates-tile.props.autogenerated';
import { AccountOrderTemplatesTileDescription, AccountOrderTemplatesTileLinks } from './components';

export interface IAccountOrderTemplatesTileViewProps extends IAccountOrderTemplatesTileProps<IAccountOrderTemplatesTileData> {
    AccountOrderTemplatesTile: IModuleProps;
    className: string;
    heading?: React.ReactNode;
    links?: React.ReactNode;
    description?: React.ReactNode;
}

/**
 *
 * AccountOrderTemplatesTile component
 * @extends {React.PureComponent<IAccountOrderTemplatesTileProps<IAccountOrderTemplatesTileData>>}
 */
export class AccountOrderTemplatesTile extends React.PureComponent<IAccountOrderTemplatesTileProps<IAccountOrderTemplatesTileData>> {

    private telemetryContent: ITelemetryContent;

    constructor(props: IAccountOrderTemplatesTileProps<IAccountOrderTemplatesTileData>) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);
    }

    public render(): JSX.Element {
        const { config, resources, data } = this.props;
        const RetailB2BEcommerceFeatureState = this.props.data.featureState.result?.find(featureState => featureState.Name === 'Dynamics.AX.Application.RetailB2BEcommerceFeature');
        if (!RetailB2BEcommerceFeatureState?.IsEnabled || !this.props.data.customerInformation?.result?.IsB2b) {
            return <React.Fragment />;
        }

        const { className, heading, links } = config;
        const { accountOrderTemplatesTileDescription } = resources;
        const orderTemplates = data.orderTemplates;

        const orderTemplatesCount = (orderTemplates?.result || []).length;
        const description = format(accountOrderTemplatesTileDescription, orderTemplatesCount);

        const viewProps = {
            ...this.props,
            className: className,
            AccountOrderTemplatesTile: {
                moduleProps: this.props,
                className: classnames('ms-account-order-templates-tile', config.className)
            },
            heading: heading && heading.text && (
                <Msdyn365.Text
                    className='ms-account-order-templates-tile__heading'
                    tag={heading.tag}
                    text={heading.text}
                    editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}
                />
            ),
            links: links && links.length > 0 && <AccountOrderTemplatesTileLinks {...{ links: links, onTextChange: this.handleLinkTextChange, requestContext: this.props.context.request, telemetryContent: this.telemetryContent }} />,
            description: <AccountOrderTemplatesTileDescription description={description} />
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => {
        this.props.config.heading.text = event.target.value;
    };

    public handleLinkTextChange = (linkIndex: number) => (event: Msdyn365.ContentEditableEvent) => {
        if(this.props.config.links && this.props.config.links[linkIndex]) {
          this.props.config.links[linkIndex].linkText = event.target.value;
        }
    };
}

export default AccountOrderTemplatesTile;
