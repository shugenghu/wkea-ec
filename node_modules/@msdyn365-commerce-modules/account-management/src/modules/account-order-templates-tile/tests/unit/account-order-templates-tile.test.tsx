/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { shallow } from 'enzyme';
import * as React from 'react';

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockRequest, ICoreContext, IRequestContext } from '@msdyn365-commerce/core';
import { Customer, FeatureState, ProductList } from '@msdyn365-commerce/retail-proxy';

import AccountOrderTemplatesTileModule from '../../account-order-templates-tile';
import { IAccountOrderTemplatesTileData } from '../../account-order-templates-tile.data';
import {
    HeadingTag, IAccountOrderTemplatesTileConfig, IAccountOrderTemplatesTileProps, IHeadingData, ILinksData
} from '../../account-order-templates-tile.props.autogenerated';

const mockResources = {
    accountAddressDescription: 'You have {0} address.'
};

const mockLink1: ILinksData = {
    linkText: 'Mock link 1 title',
    linkUrl: {
        destinationUrl: 'Mock link 1 href'
    },
    ariaLabel: 'Mock link 1 alt text'
};

const mockHeading1: IHeadingData = {
    text: 'Mock heading 1',
    tag: HeadingTag.h1
};

const mockConfigWithHeadingAndLink: IAccountOrderTemplatesTileConfig = {
    featureName: 'Dynamics.AX.Application.RetailB2BEcommerceFeature',
    className: 'testClassName',
    heading: mockHeading1,
    links: [mockLink1]
};

const mockConfigWithHeading: IAccountOrderTemplatesTileConfig = {
    featureName: 'Dynamics.AX.Application.RetailB2BEcommerceFeature',
    className: 'testClassName',
    heading: mockHeading1,
    links: []
};

const mockOrderTemplatesEmptyData: IAccountOrderTemplatesTileData = {
    customerInformation: wrapInResolvedAsyncResult({ IsB2b: true } as Customer),
    featureState: wrapInResolvedAsyncResult([{ Name: 'Dynamics.AX.Application.RetailB2BEcommerceFeature', IsEnabled: true }] as FeatureState[]),
    orderTemplates: wrapInResolvedAsyncResult([] as ProductList[])
};

const mockOrderTemplatesData: IAccountOrderTemplatesTileData = {
    customerInformation: wrapInResolvedAsyncResult({ IsB2b: true } as Customer),
    featureState: wrapInResolvedAsyncResult([{ Name: 'Dynamics.AX.Application.RetailB2BEcommerceFeature', IsEnabled: true }] as FeatureState[]),
    orderTemplates: wrapInResolvedAsyncResult([{ ProductListLines: [{}] }] as ProductList[])
};

const mockProps = {
    resources: mockResources,
    renderView: jest.fn(),
    renderModuleAttributes: jest.fn()
};

const mockRequest: IRequestContext = buildMockRequest();

// @ts-ignore: Using partial for testing
const mockContext: ICoreContext = {
    request: mockRequest
};

describe('Account-OrderTemplates-Tile unit tests - Container', () => {
    it('renders correctly if all props is provided ', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountOrderTemplatesTileProps<IAccountOrderTemplatesTileData> = {
            config: mockConfigWithHeadingAndLink,
            data: mockOrderTemplatesData,
            context: mockContext,
            ...mockProps
        };
        shallow(<AccountOrderTemplatesTileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });

    it('renders correctly if address has no records', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountOrderTemplatesTileProps<IAccountOrderTemplatesTileData> = {
            config: mockConfigWithHeadingAndLink,
            data: mockOrderTemplatesEmptyData,
            context: mockContext,
            ...mockProps
        };
        shallow(<AccountOrderTemplatesTileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });

    it('renders correctly if links collection is empty', () => {
        // @ts-ignore mock partial data
        const moduleProps: IAccountOrderTemplatesTileProps<IAccountOrderTemplatesTileData> = {
            config: mockConfigWithHeading,
            data: mockOrderTemplatesData,
            context: mockContext,
            ...mockProps
        };
        shallow(<AccountOrderTemplatesTileModule {...moduleProps} />);
        expect(moduleProps.renderView).toMatchSnapshot();
    });
});
