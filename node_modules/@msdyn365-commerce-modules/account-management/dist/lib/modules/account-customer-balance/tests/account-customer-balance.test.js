import { buildMockModuleProps } from '@msdyn365-commerce/core-internal';
import * as React from 'react';
import * as renderer from 'react-test-renderer';
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import AccountCustomerBalance from '../account-customer-balance';
import renderView from '../account-customer-balance.view';
const mockCustomerInformation = wrapInResolvedAsyncResult({
    AllowOnAccountPayment: true,
    AccountNumber: 9999999,
    CreatedDateTime: new Date('11/11/2019'),
    FirstName: 'John',
    LastName: 'Doe'
});
const mockBalance = wrapInResolvedAsyncResult({
    Balance: 18.22,
    CreditLimit: 300
});
const mockCreditExcessBalance = wrapInResolvedAsyncResult({
    Balance: 3000,
    CreditLimit: 300
});
const mockConfig = {
    heading: {
        text: 'Account Credit',
        tag: 'h2'
    }
};
const mockResources = {
    creditSummarySectionHeading: 'Account credit summary',
    accountSectionHeading: 'Your account',
    backToShoppingText: 'Back to Shopping',
    customerSincePrefix: 'Customer since',
    availableCreditLabel: 'Totoal available credit',
    balanceOwedLabel: 'Balance Owed',
    creditExcessLabel: 'Credit excess'
};
const mockActions = {};
describe('AccountCustomerBalance', () => {
    let mockData = {
        balance: mockBalance,
        customerInformation: mockCustomerInformation
    };
    let moduleProps;
    beforeAll(() => {
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig),
            resources: mockResources,
            renderView
        };
    });
    it('renders the happy path correctly', () => {
        const component = renderer.create(React.createElement(AccountCustomerBalance, Object.assign({}, moduleProps)));
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('render the credits excess when the user has exceeded their credit limit', () => {
        mockData = {
            balance: mockCreditExcessBalance,
            customerInformation: mockCustomerInformation
        };
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig),
            resources: mockResources,
            renderView
        };
        const component = renderer.create(React.createElement(AccountCustomerBalance, Object.assign({}, moduleProps)));
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
    describe('When data is not received', () => {
        beforeAll(() => {
            moduleProps = {
                ...buildMockModuleProps({}, mockActions, mockConfig),
                resources: mockResources,
                renderView
            };
        });
        it('renders empty page content', () => {
            const component = renderer.create(React.createElement(AccountCustomerBalance, Object.assign({}, moduleProps)));
            const tree = component.toJSON();
            expect(tree).toMatchSnapshot();
        });
    });
});
//# sourceMappingURL=account-customer-balance.test.js.map