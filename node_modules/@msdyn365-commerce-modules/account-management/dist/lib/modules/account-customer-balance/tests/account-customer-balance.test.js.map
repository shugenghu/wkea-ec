{"version":3,"file":"account-customer-balance.test.js","sourceRoot":"./src/","sources":["modules/account-customer-balance/tests/account-customer-balance.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { buildMockModuleProps } from '@msdyn365-commerce/core-internal';\n/// <reference types=\"jest\" />\n\n// tslint:disable-next-line:no-unused-variable\nimport * as React from 'react';\nimport * as renderer from 'react-test-renderer';\n\nimport { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';\nimport { Customer, CustomerBalances } from '@msdyn365-commerce/retail-proxy';\nimport AccountCustomerBalance from '../account-customer-balance';\nimport { IAccountCustomerBalanceData } from '../account-customer-balance.data';\nimport {\n    IAccountCustomerBalanceConfig,\n    IAccountCustomerBalanceProps,\n    IAccountCustomerBalanceResources,\n    IHeadingData\n} from '../account-customer-balance.props.autogenerated';\nimport renderView from '../account-customer-balance.view';\n\nconst mockCustomerInformation = wrapInResolvedAsyncResult(({\n    AllowOnAccountPayment: true,\n    AccountNumber: 9999999,\n    CreatedDateTime: new Date('11/11/2019'),\n    FirstName: 'John',\n    LastName: 'Doe'\n} as unknown) as Customer);\n\nconst mockBalance = wrapInResolvedAsyncResult({\n    Balance: 18.22,\n    CreditLimit: 300\n} as CustomerBalances);\n\nconst mockCreditExcessBalance = wrapInResolvedAsyncResult({\n    Balance: 3000,\n    CreditLimit: 300\n} as CustomerBalances);\n\nconst mockConfig: IAccountCustomerBalanceConfig = {\n    heading: {\n        text: 'Account Credit',\n        tag: 'h2'\n    } as IHeadingData\n};\n\nconst mockResources: IAccountCustomerBalanceResources = {\n    creditSummarySectionHeading: 'Account credit summary',\n    accountSectionHeading: 'Your account',\n    backToShoppingText: 'Back to Shopping',\n    customerSincePrefix: 'Customer since',\n    availableCreditLabel: 'Totoal available credit',\n    balanceOwedLabel: 'Balance Owed',\n    creditExcessLabel: 'Credit excess'\n};\n\nconst mockActions = {};\n\ndescribe('AccountCustomerBalance', () => {\n    let mockData: IAccountCustomerBalanceData = {\n        balance: mockBalance,\n        customerInformation: mockCustomerInformation\n    };\n    let moduleProps: IAccountCustomerBalanceProps<IAccountCustomerBalanceData>;\n\n    beforeAll(() => {\n        moduleProps = {\n            ...buildMockModuleProps(mockData, mockActions, mockConfig),\n            resources: mockResources,\n            renderView\n        } as IAccountCustomerBalanceProps<IAccountCustomerBalanceData>;\n    });\n\n    it('renders the happy path correctly', () => {\n        const component: renderer.ReactTestRenderer = renderer.create(<AccountCustomerBalance {...moduleProps} />);\n        const tree = component.toJSON();\n\n        expect(tree).toMatchSnapshot();\n    });\n\n    it('render the credits excess when the user has exceeded their credit limit', () => {\n        mockData = {\n            balance: mockCreditExcessBalance,\n            customerInformation: mockCustomerInformation\n        };\n        moduleProps = {\n            ...buildMockModuleProps(mockData, mockActions, mockConfig),\n            resources: mockResources,\n            renderView\n        } as IAccountCustomerBalanceProps<IAccountCustomerBalanceData>;\n\n        const component: renderer.ReactTestRenderer = renderer.create(<AccountCustomerBalance {...moduleProps} />);\n        const tree = component.toJSON();\n\n        expect(tree).toMatchSnapshot();\n    });\n\n    describe('When data is not received', () => {\n        beforeAll(() => {\n            moduleProps = {\n                ...buildMockModuleProps({}, mockActions, mockConfig),\n                resources: mockResources,\n                renderView\n            } as IAccountCustomerBalanceProps<IAccountCustomerBalanceData>;\n        });\n\n        it('renders empty page content', () => {\n            const component: renderer.ReactTestRenderer = renderer.create(<AccountCustomerBalance {...moduleProps} />);\n            const tree = component.toJSON();\n\n            expect(tree).toMatchSnapshot();\n        });\n    });\n});\n"]}