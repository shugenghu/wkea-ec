{"version":3,"file":"account-customer-balance.js","sourceRoot":"./src/","sources":["modules/account-customer-balance/account-customer-balance.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getTelemetryObject, Heading, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport { get } from 'lodash';\nimport * as React from 'react';\nimport { IAccountCustomerBalanceData } from './account-customer-balance.data';\nimport { HeadingTag, IAccountCustomerBalanceProps } from './account-customer-balance.props.autogenerated';\nimport { AccountLabels, AccountValues, BackButton, CreditSummaryLabels, CreditSummaryValues } from './components';\n\nexport interface IAccountCustomerBalanceViewProps extends IAccountCustomerBalanceProps<IAccountCustomerBalanceData> {\n    heading: string;\n    homeButton: React.ReactNode;\n    accountSectionHeading: React.ReactNode;\n    accountLabels: React.ReactNode;\n    accountValues: React.ReactNode;\n    creditSummarySectionHeading: React.ReactNode;\n    creditSummaryLabels: React.ReactNode;\n    creditSummaryValues: React.ReactNode;\n}\n\n/**\n *\n * AccountCustomerBalance component\n * @extends {React.PureComponent<IAccountCustomerBalanceProps<IAccountCustomerBalanceData>>}\n */\nclass AccountCustomerBalance extends React.PureComponent<IAccountCustomerBalanceProps<IAccountCustomerBalanceData>> {\n    private telemetryContent?: ITelemetryContent;\n\n    constructor(props: IAccountCustomerBalanceProps<IAccountCustomerBalanceData>) {\n        super(props);\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public render(): JSX.Element | null {\n        const customer = get(this.props, 'data.customerInformation.result');\n        const account = get(this.props, 'data.balance.result');\n        if ([customer, account].includes(undefined)) {\n            this.props.context.telemetry.error('Customer data is unavailable, module will not render');\n            return null;\n        }\n\n        const { config, resources, context } = this.props;\n        const { heading } = config;\n        const {\n            creditSummarySectionHeading,\n            accountSectionHeading,\n            backToShoppingText,\n            customerSincePrefix,\n            availableCreditLabel,\n            balanceOwedLabel,\n            creditExcessLabel\n        } = resources;\n\n        const accountNumber = customer.AccountNumber;\n        const createdOn = this._formatJoinDate(new Date(customer.CreatedDateTime));\n        const name = `${customer.FirstName} ${customer.LastName}`;\n        const excess = account.Balance - account.CreditLimit;\n        const creditExcess = excess > 0 ? this._formatCurrency(excess) : null;\n        const availableCredit = this._formatCurrency(account.CreditLimit - account.Balance);\n        const balanceOwed = this._formatCurrency(account.Balance);\n        const backLink = Msdyn365.getUrlSync('home', context.actionContext) || '';\n\n        const viewProps = {\n            ...this.props,\n            heading: <Heading text={heading.text} tag={heading.tag} />,\n            accountSectionHeading: <Heading tag={HeadingTag.h3} text={accountSectionHeading} className='ms-account-customer-balance__account-heading'/>,\n            accountLabels: (\n                <AccountLabels name={name} accountNumber={accountNumber} createdOn={createdOn} customerSincePrefix={customerSincePrefix}/>\n            ),\n            accountValues: <AccountValues availableCredit={availableCredit} availableCreditLabel={availableCreditLabel}/>,\n            creditSummarySectionHeading: <Heading tag={HeadingTag.h3} text={creditSummarySectionHeading} className='ms-account-customer-balance__credit-summary-heading'/>,\n            creditSummaryLabels: (\n                <CreditSummaryLabels\n                    availableCredit={availableCreditLabel}\n                    balanceOwed={balanceOwedLabel}\n                    creditExcess={creditExcess && creditExcessLabel}\n                />\n            ),\n            creditSummaryValues: (\n                <CreditSummaryValues availableCredit={availableCredit} balanceOwed={balanceOwed} creditExcess={creditExcess}/>\n            ),\n            homeButton: <BackButton label={backToShoppingText} link={backLink} telemetryContent={this.telemetryContent}/>\n        };\n\n        return this.props.renderView(viewProps);\n    }\n\n    private _formatCurrency(currency: number): string {\n        const currencyCode = get(this.props, 'context.request.channel.Currency');\n        const formatCurrency = get(this.props, 'context.cultureFormatter.formatCurrency');\n\n        return `${formatCurrency(currency.toFixed(2), currencyCode)}`;\n    }\n    private _formatJoinDate(date: Date): string {\n        const i14nDate = new Intl.DateTimeFormat(this.props.context.actionContext.requestContext.locale, {\n            month: 'long',\n            day: 'numeric',\n            year: 'numeric'\n        });\n\n        return i14nDate.format(date);\n    }\n}\n\nexport default AccountCustomerBalance;\n"]}