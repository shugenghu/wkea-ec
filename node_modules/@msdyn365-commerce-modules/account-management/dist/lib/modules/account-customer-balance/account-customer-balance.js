import { getTelemetryObject, Heading } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { get } from 'lodash';
import * as React from 'react';
import { AccountLabels, AccountValues, BackButton, CreditSummaryLabels, CreditSummaryValues } from './components';
class AccountCustomerBalance extends React.PureComponent {
    constructor(props) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    render() {
        const customer = get(this.props, 'data.customerInformation.result');
        const account = get(this.props, 'data.balance.result');
        if ([customer, account].includes(undefined)) {
            this.props.context.telemetry.error('Customer data is unavailable, module will not render');
            return null;
        }
        const { config, resources, context } = this.props;
        const { heading } = config;
        const { creditSummarySectionHeading, accountSectionHeading, backToShoppingText, customerSincePrefix, availableCreditLabel, balanceOwedLabel, creditExcessLabel } = resources;
        const accountNumber = customer.AccountNumber;
        const createdOn = this._formatJoinDate(new Date(customer.CreatedDateTime));
        const name = `${customer.FirstName} ${customer.LastName}`;
        const excess = account.Balance - account.CreditLimit;
        const creditExcess = excess > 0 ? this._formatCurrency(excess) : null;
        const availableCredit = this._formatCurrency(account.CreditLimit - account.Balance);
        const balanceOwed = this._formatCurrency(account.Balance);
        const backLink = Msdyn365.getUrlSync('home', context.actionContext) || '';
        const viewProps = {
            ...this.props,
            heading: React.createElement(Heading, { text: heading.text, tag: heading.tag }),
            accountSectionHeading: React.createElement(Heading, { tag: "h3", text: accountSectionHeading, className: 'ms-account-customer-balance__account-heading' }),
            accountLabels: (React.createElement(AccountLabels, { name: name, accountNumber: accountNumber, createdOn: createdOn, customerSincePrefix: customerSincePrefix })),
            accountValues: React.createElement(AccountValues, { availableCredit: availableCredit, availableCreditLabel: availableCreditLabel }),
            creditSummarySectionHeading: React.createElement(Heading, { tag: "h3", text: creditSummarySectionHeading, className: 'ms-account-customer-balance__credit-summary-heading' }),
            creditSummaryLabels: (React.createElement(CreditSummaryLabels, { availableCredit: availableCreditLabel, balanceOwed: balanceOwedLabel, creditExcess: creditExcess && creditExcessLabel })),
            creditSummaryValues: (React.createElement(CreditSummaryValues, { availableCredit: availableCredit, balanceOwed: balanceOwed, creditExcess: creditExcess })),
            homeButton: React.createElement(BackButton, { label: backToShoppingText, link: backLink, telemetryContent: this.telemetryContent })
        };
        return this.props.renderView(viewProps);
    }
    _formatCurrency(currency) {
        const currencyCode = get(this.props, 'context.request.channel.Currency');
        const formatCurrency = get(this.props, 'context.cultureFormatter.formatCurrency');
        return `${formatCurrency(currency.toFixed(2), currencyCode)}`;
    }
    _formatJoinDate(date) {
        const i14nDate = new Intl.DateTimeFormat(this.props.context.actionContext.requestContext.locale, {
            month: 'long',
            day: 'numeric',
            year: 'numeric'
        });
        return i14nDate.format(date);
    }
}
export default AccountCustomerBalance;
//# sourceMappingURL=account-customer-balance.js.map