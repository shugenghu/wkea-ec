{"version":3,"file":"password-reset.js","sourceRoot":"./src/","sources":["modules/password-reset/password-reset.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport {\n    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody\n} from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\n\nimport PasswordResetButtonComponent from './components/password-reset-button';\nimport PasswordResetErrorComponent from './components/password-reset-error';\nimport PasswordResetInputComponent from './components/password-reset-input';\nimport PasswordResetLabelComponent from './components/password-reset-label';\nimport PasswordResetLoadingIconComponent from './components/password-reset-loading-icon';\nimport PasswordResetLoadingMessageComponent from './components/password-reset-loading-message';\nimport { IPasswordResetConfig, IPasswordResetProps } from './password-reset.props.autogenerated';\n\nexport interface IPasswordResetViewState {\n    isShowLoading: boolean;\n}\n\nexport interface IPasswordResetItem {\n    wrapper: INodeProps;\n    key: string;\n    label: React.ReactNode;\n    errorMessage: React.ReactNode;\n    input: React.ReactNode;\n}\n\nexport interface IPasswordResetLocalAccount {\n    localAccount: INodeProps;\n    items: IPasswordResetItem[];\n    errorMessage: React.ReactNode[];\n    buttonsWrapper: INodeProps;\n    buttons: React.ReactNode[];\n    verificationSuccessModal: INodeProps;\n    verificationSuccessModalMessage: INodeProps;\n}\n\nexport interface IPasswordResetLoading {\n    modal: INodeProps;\n    modalBody: INodeProps;\n    icon: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IPasswordResetViewProps {\n    className: string;\n    viewState: IPasswordResetViewState;\n    loading: IPasswordResetLoading;\n    passwordReset: IModuleProps;\n    defaultAADConainer: INodeProps;\n    aadConainer: INodeProps;\n    heading: React.ReactNode;\n    passwordResetLocalAccount: IPasswordResetLocalAccount;\n}\n\n/**\n *\n * PasswordReset component\n * @extends {React.Component<IPasswordResetProps<IPasswordResetConfig>>}\n */\n@observer\nclass PasswordReset extends React.Component<IPasswordResetProps<IPasswordResetConfig>> {\n\n    private moduleClassName: string = 'ms-password-reset';\n    private telemetryContent?: ITelemetryContent;\n    @observable private newPasswordRegex: string;\n    @observable private reenterPasswordRegex: string;\n\n    @observable private isInitialized: boolean;\n\n    // tslint:disable-next-line:no-any\n    private initializationTimer: any;\n\n    constructor(props: IPasswordResetProps<IPasswordResetConfig>) {\n        super(props);\n        // tslint:disable-next-line:max-line-length\n        const passwordDefaultRegex = '^((?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\\\\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\\\\d)(?=.*[^A-Za-z0-9]))([A-Za-z\\\\d@#$%^&*\\\\-_+=[\\\\]{}|\\\\\\\\:\\',?/`~\\'();!]|\\\\.(?!@)){8,16}$';\n        this.newPasswordRegex = passwordDefaultRegex;\n        this.reenterPasswordRegex = passwordDefaultRegex;\n        this.isInitialized = false;\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this._onInit();\n    }\n\n    // After successful AAD initialization, call initialize method provided by AAD to attach events.\n    public componentDidUpdate(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {\n            // tslint:disable-next-line:no-string-literal\n            window['$element']['initialize']();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { config, resources } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            viewState: {\n                isShowLoading: !this.isInitialized\n            },\n            passwordReset: {\n                moduleProps: this.props,\n                className: classnames(this.moduleClassName, config.className)\n            },\n            loading: {\n                modal: {\n                    tag: Modal,\n                    isOpen: true\n                },\n                modalBody: {\n                    tag: ModalBody\n                },\n                icon: <PasswordResetLoadingIconComponent className={this.moduleClassName} />,\n                message: <PasswordResetLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,\n            },\n            defaultAADConainer: {\n                id: 'api',\n                style: { display: 'none' }\n            },\n            aadConainer: {\n                id: this.isInitialized ? 'api' : null,\n                className: `${this.moduleClassName}__container`\n            },\n            heading: config.heading &&\n            <Msdyn365.Text className={`${this.moduleClassName}__heading`} {...config.heading}  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}/>,\n            passwordResetLocalAccount: this._renderLocalAccount()\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text= event.target.value;\n\n    public _onInit = () => {\n        this._prePopulateData();\n        this._updateErrorMessage();\n        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.\n        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);\n        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);\n    }\n\n    // After successful AAD initialization, remove waiting and preload any data, if needed.\n    private _isInitializationSuccessful = () => {\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {\n            clearInterval(this.initializationTimer);\n            this.isInitialized = true;\n        }\n    }\n\n    private _prePopulateData = () => {\n        // tslint:disable-next-line:no-string-literal\n        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {\n            // tslint:disable-next-line:no-string-literal\n            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PAT: string }) => {\n                switch (obj.ID.toLowerCase()) {\n                    case 'newpassword': {\n                        this.newPasswordRegex = obj.PAT;\n                        break;\n                    }\n                    case 'reenterpassword': {\n                        this.reenterPasswordRegex = obj.PAT;\n                        break;\n                    }\n                    default:\n                }\n            });\n        }\n    }\n\n    private _updateErrorMessage = () => {\n        const { resources } = this.props;\n\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['CONTENT']) {\n\n            const message = {\n                verifying_blurb: resources.loadingMessage\n            };\n\n            // tslint:disable-next-line:no-string-literal\n            Object.assign(window['CONTENT'], message);\n        }\n    }\n\n    private _renderLocalAccount(): IPasswordResetLocalAccount {\n        const { resources } = this.props;\n        return {\n            localAccount: {\n                id: 'attributeList',\n                className: `${this.moduleClassName}__account-items attr`\n            },\n            items: [\n                this._renderInput('newPassword', 'password', resources.newPasswordLabelText, this.newPasswordRegex),\n                this._renderInput('reenterPassword', 'password', resources.confirmPasswordLabelText, this.reenterPasswordRegex),\n            ],\n            errorMessage: [\n                <PasswordResetErrorComponent key='passwordEntryMismatch' id='passwordEntryMismatch' className={this.moduleClassName} message={resources.passwordEntryMismatchError} />,\n                <PasswordResetErrorComponent key='requiredFieldMissing' id='requiredFieldMissing' className={this.moduleClassName} message={resources.requiredFieldMissingError} />,\n                <PasswordResetErrorComponent key='email_fail_throttled' id='fieldIncorrect' className={this.moduleClassName} message={resources.fieldIncorrectError} />,\n                <PasswordResetErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />\n            ],\n            buttonsWrapper: {\n                className: `${this.moduleClassName}__buttons`,\n            },\n            buttons: [\n                <PasswordResetButtonComponent key='continue' id='continue' className={`${this.moduleClassName}__continue-button`} ariaLabel={resources.saveButtonAriaLabel} text={resources.saveButtonText} telemetryContent={this.telemetryContent} />,\n                <PasswordResetButtonComponent key='cancel' id='cancel' className={`${this.moduleClassName}__cancel-button`} ariaLabel={resources.cancelButtonText} text={resources.cancelButtonText} telemetryContent={this.telemetryContent} />\n            ],\n            verificationSuccessModal: {\n                className: `${this.moduleClassName}__verifying-modal verifying-modal`\n            },\n            verificationSuccessModalMessage: {\n                id: 'verifying_blurb',\n                className: `${this.moduleClassName}__verifying-modal-message`\n            }\n        };\n    }\n\n    private _renderInput(id: string, type: string, labelText: string, pattern?: string): IPasswordResetItem {\n        const className = `${this.moduleClassName}__account-item`;\n        return (\n            {\n                wrapper: {\n                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')\n                },\n                key: id,\n                label: (\n                    <PasswordResetLabelComponent\n                        {\n                        ...{\n                            id: id,\n                            forId: id,\n                            className: className,\n                            text: labelText\n                        }\n                        }\n                    />\n                ),\n                errorMessage: (\n                    <PasswordResetErrorComponent\n                        {\n                        ...{\n                            className: this.moduleClassName,\n                            type: 'item'\n                        }\n                        }\n                    />\n                ),\n                input: (\n                    <PasswordResetInputComponent\n                        {\n                        ...{\n                            id: id,\n                            type: type,\n                            pattern: pattern,\n                            className: className\n                        }\n                        }\n                    />\n                )\n\n            }\n        );\n    }\n\n}\n\nexport default PasswordReset;\n"]}