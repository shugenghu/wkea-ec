import { __decorate } from "tslib";
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { getTelemetryObject, Modal, ModalBody } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import PasswordResetButtonComponent from './components/password-reset-button';
import PasswordResetErrorComponent from './components/password-reset-error';
import PasswordResetInputComponent from './components/password-reset-input';
import PasswordResetLabelComponent from './components/password-reset-label';
import PasswordResetLoadingIconComponent from './components/password-reset-loading-icon';
import PasswordResetLoadingMessageComponent from './components/password-reset-loading-message';
let PasswordReset = class PasswordReset extends React.Component {
    constructor(props) {
        super(props);
        this.moduleClassName = 'ms-password-reset';
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this._onInit = () => {
            this._prePopulateData();
            this._updateErrorMessage();
            this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);
            setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);
        };
        this._isInitializationSuccessful = () => {
            if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
                clearInterval(this.initializationTimer);
                this.isInitialized = true;
            }
        };
        this._prePopulateData = () => {
            if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
                window['SA_FIELDS']['AttributeFields'].map((obj) => {
                    switch (obj.ID.toLowerCase()) {
                        case 'newpassword': {
                            this.newPasswordRegex = obj.PAT;
                            break;
                        }
                        case 'reenterpassword': {
                            this.reenterPasswordRegex = obj.PAT;
                            break;
                        }
                        default:
                    }
                });
            }
        };
        this._updateErrorMessage = () => {
            const { resources } = this.props;
            if (window && window['CONTENT']) {
                const message = {
                    verifying_blurb: resources.loadingMessage
                };
                Object.assign(window['CONTENT'], message);
            }
        };
        const passwordDefaultRegex = '^((?=.*[a-z])(?=.*[A-Z])(?=.*\\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]))([A-Za-z\\d@#$%^&*\\-_+=[\\]{}|\\\\:\',?/`~\'();!]|\\.(?!@)){8,16}$';
        this.newPasswordRegex = passwordDefaultRegex;
        this.reenterPasswordRegex = passwordDefaultRegex;
        this.isInitialized = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        this._onInit();
    }
    componentDidUpdate() {
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            window['$element']['initialize']();
        }
    }
    render() {
        const { config, resources } = this.props;
        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            passwordReset: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: React.createElement(PasswordResetLoadingIconComponent, { className: this.moduleClassName }),
                message: React.createElement(PasswordResetLoadingMessageComponent, { className: this.moduleClassName, message: resources.loadingMessage }),
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            heading: config.heading &&
                React.createElement(Msdyn365.Text, Object.assign({ className: `${this.moduleClassName}__heading` }, config.heading, { editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
            passwordResetLocalAccount: this._renderLocalAccount()
        };
        return this.props.renderView(viewProps);
    }
    _renderLocalAccount() {
        const { resources } = this.props;
        return {
            localAccount: {
                id: 'attributeList',
                className: `${this.moduleClassName}__account-items attr`
            },
            items: [
                this._renderInput('newPassword', 'password', resources.newPasswordLabelText, this.newPasswordRegex),
                this._renderInput('reenterPassword', 'password', resources.confirmPasswordLabelText, this.reenterPasswordRegex),
            ],
            errorMessage: [
                React.createElement(PasswordResetErrorComponent, { key: 'passwordEntryMismatch', id: 'passwordEntryMismatch', className: this.moduleClassName, message: resources.passwordEntryMismatchError }),
                React.createElement(PasswordResetErrorComponent, { key: 'requiredFieldMissing', id: 'requiredFieldMissing', className: this.moduleClassName, message: resources.requiredFieldMissingError }),
                React.createElement(PasswordResetErrorComponent, { key: 'email_fail_throttled', id: 'fieldIncorrect', className: this.moduleClassName, message: resources.fieldIncorrectError }),
                React.createElement(PasswordResetErrorComponent, { key: 'claimVerificationServerError', id: 'claimVerificationServerError', className: this.moduleClassName })
            ],
            buttonsWrapper: {
                className: `${this.moduleClassName}__buttons`,
            },
            buttons: [
                React.createElement(PasswordResetButtonComponent, { key: 'continue', id: 'continue', className: `${this.moduleClassName}__continue-button`, ariaLabel: resources.saveButtonAriaLabel, text: resources.saveButtonText, telemetryContent: this.telemetryContent }),
                React.createElement(PasswordResetButtonComponent, { key: 'cancel', id: 'cancel', className: `${this.moduleClassName}__cancel-button`, ariaLabel: resources.cancelButtonText, text: resources.cancelButtonText, telemetryContent: this.telemetryContent })
            ],
            verificationSuccessModal: {
                className: `${this.moduleClassName}__verifying-modal verifying-modal`
            },
            verificationSuccessModalMessage: {
                id: 'verifying_blurb',
                className: `${this.moduleClassName}__verifying-modal-message`
            }
        };
    }
    _renderInput(id, type, labelText, pattern) {
        const className = `${this.moduleClassName}__account-item`;
        return ({
            wrapper: {
                className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
            },
            key: id,
            label: (React.createElement(PasswordResetLabelComponent, Object.assign({}, {
                id: id,
                forId: id,
                className: className,
                text: labelText
            }))),
            errorMessage: (React.createElement(PasswordResetErrorComponent, Object.assign({}, {
                className: this.moduleClassName,
                type: 'item'
            }))),
            input: (React.createElement(PasswordResetInputComponent, Object.assign({}, {
                id: id,
                type: type,
                pattern: pattern,
                className: className
            })))
        });
    }
};
__decorate([
    observable
], PasswordReset.prototype, "newPasswordRegex", void 0);
__decorate([
    observable
], PasswordReset.prototype, "reenterPasswordRegex", void 0);
__decorate([
    observable
], PasswordReset.prototype, "isInitialized", void 0);
PasswordReset = __decorate([
    observer
], PasswordReset);
export default PasswordReset;
//# sourceMappingURL=password-reset.js.map