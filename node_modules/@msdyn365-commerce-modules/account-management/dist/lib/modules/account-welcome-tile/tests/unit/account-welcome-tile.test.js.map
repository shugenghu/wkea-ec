{"version":3,"file":"account-welcome-tile.test.js","sourceRoot":"./src/","sources":["modules/account-welcome-tile/tests/unit/account-welcome-tile.test.tsx"],"names":[],"mappings":"AAIA,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AACjC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,yBAAyB,EAAE,MAAM,2CAA2C,CAAC;AACtF,OAAO,EAAE,gBAAgB,EAAmB,MAAM,yBAAyB,CAAC;AAG5E,OAAO,wBAAwB,MAAM,4BAA4B,CAAC;AAMlE,MAAM,aAAa,GAAG;IAClB,yBAAyB,EAAE,uBAAuB;CACrD,CAAC;AAEF,MAAM,YAAY,GAAiB;IAC/B,IAAI,EAAE,gBAAgB;IACtB,GAAG,MAAe;CACrB,CAAC;AAEF,MAAM,qBAAqB,GAA8B;IACrD,SAAS,EAAE,eAAe;IAC1B,OAAO,EAAE,YAAY;CACxB,CAAC;AAEF,MAAM,oBAAoB,GAA4B;IAClD,kBAAkB,EAAE,yBAAyB,CAAC,EAAc,CAAC;CAChE,CAAC;AAEF,MAAM,eAAe,GAA4B;IAC7C,kBAAkB,EAAE,yBAAyB,CAAC;QAC1C,aAAa,EAAE,GAAG;QAClB,SAAS,EAAE,YAAY;KACd,CAAC;CACjB,CAAC;AAEF,MAAM,WAAW,GAAoB,gBAAgB,EAAE,CAAC;AAExD,MAAM,WAAW,GAAiB;IAC9B,OAAO,EAAE,WAAW;IACpB,GAAG,EAAE;QACD,MAAM,EAAE;YACJ,UAAU,EAAE,KAAK;SACpB;KACJ;IAED,gBAAgB,EAAE;QACd,cAAc,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC;KAChD;CACJ,CAAC;AAEF,MAAM,SAAS,GAAG;IACd,SAAS,EAAE,aAAa;IACxB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;IACrB,sBAAsB,EAAE,IAAI,CAAC,EAAE,EAAE;CACpC,CAAC;AAEF,QAAQ,CAAC,6CAA6C,EAAE,GAAG,EAAE;IACzD,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QAEnD,MAAM,WAAW,GAAsD;YACnE,MAAM,EAAE,qBAAqB;YAC7B,IAAI,EAAE,eAAe;YACrB,OAAO,EAAE,WAAW;YACpB,GAAG,SAAS;SACf,CAAC;QACF,OAAO,CAAC,oBAAC,wBAAwB,oBAAK,WAAW,EAAI,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QAEnD,MAAM,WAAW,GAAsD;YACnE,MAAM,EAAE,qBAAqB;YAC7B,IAAI,EAAE,oBAAoB;YAC1B,OAAO,EAAE,WAAW;YACpB,GAAG,SAAS;SACf,CAAC;QACF,OAAO,CAAC,oBAAC,wBAAwB,oBAAK,WAAW,EAAI,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAC;IACrD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { shallow } from 'enzyme';\nimport * as React from 'react';\n\nimport { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';\nimport { buildMockRequest, IRequestContext } from '@msdyn365-commerce/core';\nimport { Customer } from '@msdyn365-commerce/retail-proxy';\n\nimport AccountWelcomeTileModule from '../../account-welcome-tile';\nimport { IAccountWelcomeTileData } from '../../account-welcome-tile.data';\nimport {\n    HeadingTag, IAccountWelcomeTileConfig, IAccountWelcomeTileProps, IHeadingData\n} from '../../account-welcome-tile.props.autogenerated';\n\nconst mockResources = {\n    accountAddressDescription: 'You have {0} address.'\n};\n\nconst mockHeading1: IHeadingData = {\n    text: 'Mock heading 1',\n    tag: HeadingTag.h1\n};\n\nconst mockConfigWithHeading: IAccountWelcomeTileConfig = {\n    className: 'testClassName',\n    heading: mockHeading1\n};\n\nconst mockAddressEmptyData: IAccountWelcomeTileData = {\n    accountInformation: wrapInResolvedAsyncResult({} as Customer)\n};\n\nconst mockAddressData: IAccountWelcomeTileData = {\n    accountInformation: wrapInResolvedAsyncResult({\n        AccountNumber: '1',\n        FirstName: 'First Name'\n    } as Customer)\n};\n\nconst mockRequest: IRequestContext = buildMockRequest();\n// @ts-ignore\nconst mockContext: ICoreContext = {\n    request: mockRequest,\n    app: {\n        config: {\n            hideRating: false\n        },\n    },\n    // @ts-ignore: Using partial for testing\n    cultureFormatter: {\n        formatCurrency: jest.fn(price => `$${price}`)\n    }\n};\n\nconst mockProps = {\n    resources: mockResources,\n    renderView: jest.fn(),\n    renderModuleAttributes: jest.fn()\n};\n\ndescribe('Account-Welcome-Tile unit tests - Container', () => {\n    it('renders correctly if all props is provided ', () => {\n        // @ts-ignore mock partial data\n        const moduleProps: IAccountWelcomeTileProps<IAccountWelcomeTileData> = {\n            config: mockConfigWithHeading,\n            data: mockAddressData,\n            context: mockContext,\n            ...mockProps\n        };\n        shallow(<AccountWelcomeTileModule {...moduleProps} />);\n        expect(moduleProps.renderView).toMatchSnapshot();\n    });\n\n    it('renders correctly if address has no records', () => {\n        // @ts-ignore mock partial data\n        const moduleProps: IAccountWelcomeTileProps<IAccountWelcomeTileData> = {\n            config: mockConfigWithHeading,\n            data: mockAddressEmptyData,\n            context: mockContext,\n            ...mockProps\n        };\n        shallow(<AccountWelcomeTileModule {...moduleProps} />);\n        expect(moduleProps.renderView).toMatchSnapshot();\n    });\n});\n"]}