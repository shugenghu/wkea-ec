{"version":3,"file":"account-profile-edit.js","sourceRoot":"./src/","sources":["modules/account-profile-edit/account-profile-edit.tsx"],"names":[],"mappings":";AAIA,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AACpD,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EACH,kBAAkB,EAA+C,KAAK,EAAE,SAAS,EACpF,MAAM,sCAAsC,CAAC;AAK9C,OAAO,iCAAiC,MAAM,0CAA0C,CAAC;AACzF,OAAO,gCAAgC,MAAM,yCAAyC,CAAC;AACvF,OAAO,gCAAgC,MAAM,yCAAyC,CAAC;AACvF,OAAO,gCAAgC,MAAM,yCAAyC,CAAC;AACvF,OAAO,sCAAsC,MAAM,gDAAgD,CAAC;AACpG,OAAO,yCAAyC,MAAM,mDAAmD,CAAC;AAkD1G,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,KAAK,CAAC,SAA8D;IAcjG,YAAY,KAA0D;QAClE,KAAK,CAAC,KAAK,CAAC,CAAC;QAbT,oBAAe,GAAW,yBAAyB,CAAC;QAgFrD,wBAAmB,GAAG,CAAC,KAAoC,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QAEpH,oBAAe,GAAG,CAAC,KAA0C,EAAE,EAAE;YACpE,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;YAEjC,QAAQ,EAAE,CAAC,WAAW,EAAE,EAAE;gBACtB,KAAK,WAAW,CAAC,CAAC;oBACd,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;oBACvB,MAAM;iBACT;gBACD,KAAK,SAAS,CAAC,CAAC;oBACZ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBACrB,MAAM;iBACT;gBACD,KAAK,OAAO,CAAC,CAAC;oBACV,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;oBACxB,MAAM;iBACT;gBACD,QAAQ;aACX;QACL,CAAC,CAAC;QAEK,YAAO,GAAG,GAAG,EAAE;YAClB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAC3F,UAAU,CAAC,GAAG,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC1E,CAAC,CAAA;QAGO,gCAA2B,GAAG,GAAG,EAAE;YAEvC,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,0BAA0B,CAAC,EAAE;gBAC5E,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACxC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;aAC7B;QACL,CAAC,CAAA;QAEO,qBAAgB,GAAG,GAAG,EAAE;YAC5B,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACjC,MAAM,wBAAwB,GAAG,SAAS,CAAC,wBAAwB,IAAI,qCAAqC,CAAC;YAG7G,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC,iBAAiB,CAAC,EAAE;gBAE/D,MAAM,CAAC,WAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAsF,EAAE,EAAE;oBAClI,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBACvD,QAAQ,GAAG,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE;wBAC1B,KAAK,WAAW,CAAC,CAAC;4BACd,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;4BACvB,MAAM;yBACT;wBACD,KAAK,SAAS,CAAC,CAAC;4BACZ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;4BACrB,MAAM;yBACT;wBACD,KAAK,OAAO,CAAC,CAAC;4BACV,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;4BACnB,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC;4BAC1B,GAAG,CAAC,QAAQ,GAAG,wBAAwB,CAAC;4BACxC,MAAM;yBACT;wBACD,QAAQ;qBACX;gBAEL,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAA;QASO,wBAAmB,GAAG,GAAG,EAAE;YAC/B,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAGjC,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;gBAE7B,MAAM,OAAO,GAAG;oBACZ,cAAc,EAAE,SAAS,CAAC,yBAAyB;oBACnD,eAAe,EAAE,SAAS,CAAC,cAAc;iBAC5C,CAAC;gBAGF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC;aAC7C;QACL,CAAC,CAAA;QA9JG,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,gEAAgE,CAAC;QACnF,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC7I,CAAC;IAEM,iBAAiB;QACpB,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAGM,kBAAkB;QAErB,IAAI,IAAI,CAAC,aAAa,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,EAAE;YAExF,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC;SACtC;IACL,CAAC;IAEM,MAAM;QACT,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEzC,MAAM,SAAS,GAAG;YACd,GAAG,IAAI,CAAC,KAAK;YACb,SAAS,EAAE;gBACP,aAAa,EAAE,CAAC,IAAI,CAAC,aAAa;aACrC;YACD,kBAAkB,EAAE;gBAChB,WAAW,EAAE,IAAI,CAAC,KAAK;gBACvB,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,SAAS,CAAC;aAChE;YACD,OAAO,EAAE;gBACL,KAAK,EAAE;oBACH,GAAG,EAAE,KAAK;oBACV,MAAM,EAAE,IAAI;iBACf;gBACD,SAAS,EAAE;oBACP,GAAG,EAAE,SAAS;iBACjB;gBACD,IAAI,EAAE,oBAAC,sCAAsC,IAAC,SAAS,EAAE,IAAI,CAAC,eAAe,GAAI;gBACjF,OAAO,EAAE,oBAAC,yCAAyC,IAAC,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,cAAc,GAAI;aAC7H;YACD,kBAAkB,EAAE;gBAChB,EAAE,EAAE,KAAK;gBACT,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;aAC7B;YACD,WAAW,EAAE;gBACT,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;gBACrC,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,aAAa;aAClD;YACD,OAAO,EAAE,MAAM,CAAC,OAAO,IAAK,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,CAC/C,oBAAC,QAAQ,CAAC,IAAI,kBACZ,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,WAAW,IACzC,MAAM,CAAC,OAAO,IAClB,SAAS,EAAI,EAAC,MAAM,EAAE,IAAI,CAAC,mBAAmB,EAAE,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAC,IAC3F,CACL;YACD,8BAA8B,EAAE,IAAI,CAAC,mBAAmB,EAAE;SAC7D,CAAC;QAEF,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAuB,CAAC;IAElE,CAAC;IAyEO,WAAW,CAAC,GAAW;QAC3B,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAExC,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC;QAClB,OAAO,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC;IAC5E,CAAC;IAkBO,mBAAmB;QACvB,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACzC,MAAM,YAAY,GAAG;YACjB,YAAY,EAAE;gBACV,EAAE,EAAE,eAAe;gBACnB,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,sBAAsB;aAC3D;YACD,KAAK,EAAE;gBACH,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,kBAAkB,EAAE,SAAS,CAAC,kBAAkB,CAAC;gBAClH,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,iBAAiB,EAAE,SAAS,CAAC,iBAAiB,CAAC;aAC/G;YACD,YAAY,EAAE;gBACV,oBAAC,gCAAgC,IAAC,GAAG,EAAC,sBAAsB,EAAC,EAAE,EAAC,sBAAsB,EAAC,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,gCAAgC,GAAI;gBAC/K,oBAAC,gCAAgC,IAAC,GAAG,EAAC,gBAAgB,EAAC,EAAE,EAAC,gBAAgB,EAAC,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,mBAAmB,GAAI;gBACtJ,oBAAC,gCAAgC,IAAC,GAAG,EAAC,8BAA8B,EAAC,EAAE,EAAC,8BAA8B,EAAC,SAAS,EAAE,IAAI,CAAC,eAAe,GAAI;aAC7I;YACD,cAAc,EAAE;gBACZ,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,WAAW;aAChD;YACD,OAAO,EAAE;gBACL,oBAAC,iCAAiC,IAAC,GAAG,EAAC,UAAU,EAAC,EAAE,EAAC,UAAU,EAAC,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,eAAe,EAAE,SAAS,EAAE,SAAS,CAAC,mBAAmB,EAAE,IAAI,EAAE,SAAS,CAAC,cAAc,EAAE,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,GAAI;gBACxO,oBAAC,iCAAiC,IAAC,GAAG,EAAC,QAAQ,EAAC,EAAE,EAAC,QAAQ,EAAC,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,iBAAiB,EAAE,SAAS,EAAE,SAAS,CAAC,gBAAgB,EAAE,IAAI,EAAE,SAAS,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,GAAG;aACvO;YACD,wBAAwB,EAAE;gBACtB,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,mCAAmC;aACxE;YACD,+BAA+B,EAAE;gBAC7B,EAAE,EAAE,iBAAiB;gBACrB,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,2BAA2B;aAChE;SACJ,CAAC;QAEF,IAAI,MAAM,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,EAAE;YACvC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,qBAAqB,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;SACzI;QAED,OAAO,YAAY,CAAC;IACxB,CAAC;IAEO,YAAY,CAAC,EAAU,EAAE,IAAY,EAAE,KAAa,EAAE,SAAiB,EAAE,SAAkB,EAAE,OAAgB;QACjH,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,eAAe,gBAAgB,CAAC;QAC1D,OAAO,CACH;YACI,OAAO,EAAE;gBACL,SAAS,EAAE,UAAU,CAAC,SAAS,EAAE,GAAG,SAAS,IAAI,EAAE,EAAE,EAAE,YAAY,EAAE,WAAW,CAAC;aACpF;YACD,GAAG,EAAE,EAAE;YACP,KAAK,EAAE,CACH,oBAAC,gCAAgC,oBAE1B;gBACC,EAAE,EAAE,EAAE;gBACN,KAAK,EAAE,EAAE;gBACT,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,SAAS;aAClB,EAEH,CACL;YACD,YAAY,EAAE,CACV,oBAAC,gCAAgC,oBAE1B;gBACC,SAAS,EAAE,IAAI,CAAC,eAAe;gBAC/B,IAAI,EAAE,MAAM;aACf,EAEH,CACL;YACD,KAAK,EAAE,CACH,oBAAC,gCAAgC,oBAE1B;gBACC,EAAE,EAAE,EAAE;gBACN,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,KAAK;gBACZ,OAAO,EAAE,OAAO;gBAChB,SAAS,EAAE,SAAS;gBACpB,QAAQ,EAAE,IAAI,CAAC,eAAe;aACjC,EAEH,CACL;SAEJ,CACJ,CAAC;IACN,CAAC;CAEJ,CAAA;AApQe;IAAX,UAAU;qDAA2B;AAC1B;IAAX,UAAU;mDAAyB;AACxB;IAAX,UAAU;iDAAuB;AACtB;IAAX,UAAU;sDAA4B;AAE3B;IAAX,UAAU;yDAAgC;AATzC,kBAAkB;IADvB,QAAQ;GACH,kBAAkB,CAwQvB;AAED,eAAe,kBAAkB,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport classnames from 'classnames';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport {\n    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody\n} from '@msdyn365-commerce-modules/utilities';\n\nimport {\n    IAccountProfileEditConfig, IAccountProfileEditProps\n} from './account-profile-edit.props.autogenerated';\nimport AccountProfileEditButtonComponent from './components/account-profile-edit-button';\nimport AccountProfileEditErrorComponent from './components/account-profile-edit-error';\nimport AccountProfileEditInputComponent from './components/account-profile-edit-input';\nimport AccountProfileEditLabelComponent from './components/account-profile-edit-label';\nimport AccountProfileEditLoadingIconComponent from './components/account-profile-edit-loading-icon';\nimport AccountProfileEditLoadingMessageComponent from './components/account-profile-edit-loading-message';\n\nexport interface IAccountProfileEditViewState {\n    isShowLoading: boolean;\n}\n\nexport interface IAccountProfileEditItem {\n    wrapper: INodeProps;\n    key: string;\n    label: React.ReactNode;\n    errorMessage: React.ReactNode;\n    input: React.ReactNode;\n}\n\nexport interface IAccountProfileEditLocalAccount {\n    localAccount: INodeProps;\n    items: IAccountProfileEditItem[];\n    errorMessage: React.ReactNode[];\n    buttonsWrapper: INodeProps;\n    buttons: React.ReactNode[];\n    verificationSuccessModal: INodeProps;\n    verificationSuccessModalMessage: INodeProps;\n}\n\nexport interface IAccountProfileEditLoading {\n    modal: INodeProps;\n    modalBody: INodeProps;\n    icon: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IAccountProfileEditViewProps {\n    className: string;\n    viewState: IAccountProfileEditViewState;\n    loading: IAccountProfileEditLoading;\n    accountProfileEdit: IModuleProps;\n    defaultAADConainer: INodeProps;\n    aadConainer: INodeProps;\n    heading: React.ReactNode;\n    accountProfileEditLocalAccount: IAccountProfileEditLocalAccount;\n}\n\n/**\n *\n * AccountProfileEdit component\n * All AAD related module is rendered on AAD page and we need to respect HTML contract provide by AAD.\n * Please ensure any change in module don't break contract with AAD.\n * @extends {React.Component<IAccountProfileEditProps<IAccountProfileEditConfig>>}\n */\n@observer\nclass AccountProfileEdit extends React.Component<IAccountProfileEditProps<IAccountProfileEditConfig>> {\n\n    private moduleClassName: string = 'ms-account-profile-edit';\n    private telemetryContent: ITelemetryContent;\n    @observable private givenName: string;\n    @observable private surname: string;\n    @observable private email: string;\n    @observable private emailRegex: string;\n\n    @observable private isInitialized: boolean;\n\n    // tslint:disable-next-line:no-any\n    private initializationTimer: any;\n\n    constructor(props: IAccountProfileEditProps<IAccountProfileEditConfig>) {\n        super(props);\n        this.givenName = '';\n        this.surname = '';\n        this.email = '';\n        this.emailRegex = '^[a-zA-Z0-9.!#$%&\\^_`{}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$';\n        this.isInitialized = false;\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this._onInit();\n    }\n\n    // After successful AAD initialization, call initialize method provided by AAD to attach events.\n    public componentDidUpdate(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {\n            // tslint:disable-next-line:no-string-literal\n            window['$element']['initialize']();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { config, resources } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            viewState: {\n                isShowLoading: !this.isInitialized\n            },\n            accountProfileEdit: {\n                moduleProps: this.props,\n                className: classnames(this.moduleClassName, config.className)\n            },\n            loading: {\n                modal: {\n                    tag: Modal,\n                    isOpen: true\n                },\n                modalBody: {\n                    tag: ModalBody\n                },\n                icon: <AccountProfileEditLoadingIconComponent className={this.moduleClassName} />,\n                message: <AccountProfileEditLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,\n            },\n            defaultAADConainer: {\n                id: 'api',\n                style: { display: 'none' }\n            },\n            aadConainer: {\n                id: this.isInitialized ? 'api' : null,\n                className: `${this.moduleClassName}__container`\n            },\n            heading: config.heading &&  config.heading.text && (\n                <Msdyn365.Text\n                  className={`${this.moduleClassName}__heading`}\n                  {...config.heading}\n                  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}\n                />\n            ),\n            accountProfileEditLocalAccount: this._renderLocalAccount()\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n\n    }\n\n    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading.text = event.target.value;\n\n    public onTextBoxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const id = event.target.id;\n        const value = event.target.value;\n\n        switch (id.toLowerCase()) {\n            case 'givenname': {\n                this.givenName = value;\n                break;\n            }\n            case 'surname': {\n                this.surname = value;\n                break;\n            }\n            case 'email': {\n                this.emailRegex = value;\n                break;\n            }\n            default:\n        }\n    };\n\n    public _onInit = () => {\n        this._prePopulateData();\n        this._updateErrorMessage();\n        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.\n        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);\n        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);\n    }\n\n    // After successful AAD initialization, remove waiting and preload any data, if needed.\n    private _isInitializationSuccessful = () => {\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {\n            clearInterval(this.initializationTimer);\n            this.isInitialized = true;\n        }\n    }\n\n    private _prePopulateData = () => {\n        const { resources } = this.props;\n        const invalidEmailAddressError = resources.invalidEmailAddressError || 'Please enter a valid email address.';\n\n        // tslint:disable-next-line:no-string-literal\n        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {\n            // tslint:disable-next-line:no-string-literal\n            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PRE: string; PAT: string; UX_INPUT_TYPE: string; PAT_DESC: string }) => {\n                const value = obj.PRE ? this._htmlDecode(obj.PRE) : '';\n                switch (obj.ID.toLowerCase()) {\n                    case 'givenname': {\n                        this.givenName = value;\n                        break;\n                    }\n                    case 'surname': {\n                        this.surname = value;\n                        break;\n                    }\n                    case 'email': {\n                        this.email = value;\n                        this.emailRegex = obj.PAT;\n                        obj.PAT_DESC = invalidEmailAddressError;\n                        break;\n                    }\n                    default:\n                }\n\n            });\n        }\n    }\n\n    private _htmlDecode(str: string): string {\n        const e = document.createElement('div');\n        // tslint:disable-next-line:no-inner-html\n        e.innerHTML = str;\n        return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue || '';\n    }\n\n    private _updateErrorMessage = () => {\n        const { resources } = this.props;\n\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['CONTENT']) {\n\n            const message = {\n                required_field: resources.requiredFieldMissingError,\n                verifying_blurb: resources.loadingMessage\n            };\n\n            // tslint:disable-next-line:no-string-literal\n            Object.assign(window['CONTENT'], message);\n        }\n    }\n\n    private _renderLocalAccount(): IAccountProfileEditLocalAccount {\n        const { config, resources } = this.props;\n        const localAccount = {\n            localAccount: {\n                id: 'attributeList',\n                className: `${this.moduleClassName}__account-items attr`\n            },\n            items: [\n                this._renderInput('givenName', 'text', this.givenName, resources.firstNameLabelText, resources.firstNameMaxLength),\n                this._renderInput('surname', 'text', this.surname, resources.lastNameLabelText, resources.lastNameMaxLength),\n            ],\n            errorMessage: [\n                <AccountProfileEditErrorComponent key='requiredFieldMissing' id='requiredFieldMissing' className={this.moduleClassName} message={resources.requiredFieldMissingSummaryError} />,\n                <AccountProfileEditErrorComponent key='fieldIncorrect' id='fieldIncorrect' className={this.moduleClassName} message={resources.fieldIncorrectError} />,\n                <AccountProfileEditErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />\n            ],\n            buttonsWrapper: {\n                className: `${this.moduleClassName}__buttons`,\n            },\n            buttons: [\n                <AccountProfileEditButtonComponent key='continue' id='continue' className={`${this.moduleClassName}__save-button`} ariaLabel={resources.saveButtonAriaLabel} text={resources.saveButtonText} telemetryContent={this.telemetryContent} />,\n                <AccountProfileEditButtonComponent key='cancel' id='cancel' className={`${this.moduleClassName}__cancel-button`} ariaLabel={resources.cancelButtonText} text={resources.cancelButtonText} telemetryContent={this.telemetryContent}/>\n            ],\n            verificationSuccessModal: {\n                className: `${this.moduleClassName}__verifying-modal verifying-modal`\n            },\n            verificationSuccessModalMessage: {\n                id: 'verifying_blurb',\n                className: `${this.moduleClassName}__verifying-modal-message`\n            }\n        };\n\n        if (config.showEmail && this.email !== '') {\n            localAccount.items.push(this._renderInput('email', 'email', this.email, resources.emailAddressLabelText, undefined, this.emailRegex));\n        }\n\n        return localAccount;\n    }\n\n    private _renderInput(id: string, type: string, value: string, labelText: string, maxLength?: string, pattern?: string): IAccountProfileEditItem {\n        const className = `${this.moduleClassName}__account-item`;\n        return (\n            {\n                wrapper: {\n                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')\n                },\n                key: id,\n                label: (\n                    <AccountProfileEditLabelComponent\n                        {\n                        ...{\n                            id: id,\n                            forId: id,\n                            className: className,\n                            text: labelText\n                        }\n                        }\n                    />\n                ),\n                errorMessage: (\n                    <AccountProfileEditErrorComponent\n                        {\n                        ...{\n                            className: this.moduleClassName,\n                            type: 'item'\n                        }\n                        }\n                    />\n                ),\n                input: (\n                    <AccountProfileEditInputComponent\n                        {\n                        ...{\n                            id: id,\n                            type: type,\n                            value: value,\n                            pattern: pattern,\n                            className: className,\n                            onChange: this.onTextBoxChange\n                        }\n                        }\n                    />\n                )\n\n            }\n        );\n    }\n\n}\n\nexport default AccountProfileEdit;\n"]}