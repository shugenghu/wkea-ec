import { __decorate } from "tslib";
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { getTelemetryObject, Modal, ModalBody } from '@msdyn365-commerce-modules/utilities';
import AccountProfileEditButtonComponent from './components/account-profile-edit-button';
import AccountProfileEditErrorComponent from './components/account-profile-edit-error';
import AccountProfileEditInputComponent from './components/account-profile-edit-input';
import AccountProfileEditLabelComponent from './components/account-profile-edit-label';
import AccountProfileEditLoadingIconComponent from './components/account-profile-edit-loading-icon';
import AccountProfileEditLoadingMessageComponent from './components/account-profile-edit-loading-message';
let AccountProfileEdit = class AccountProfileEdit extends React.Component {
    constructor(props) {
        super(props);
        this.moduleClassName = 'ms-account-profile-edit';
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this.onTextBoxChange = (event) => {
            const id = event.target.id;
            const value = event.target.value;
            switch (id.toLowerCase()) {
                case 'givenname': {
                    this.givenName = value;
                    break;
                }
                case 'surname': {
                    this.surname = value;
                    break;
                }
                case 'email': {
                    this.emailRegex = value;
                    break;
                }
                default:
            }
        };
        this._onInit = () => {
            this._prePopulateData();
            this._updateErrorMessage();
            this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);
            setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);
        };
        this._isInitializationSuccessful = () => {
            if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
                clearInterval(this.initializationTimer);
                this.isInitialized = true;
            }
        };
        this._prePopulateData = () => {
            const { resources } = this.props;
            const invalidEmailAddressError = resources.invalidEmailAddressError || 'Please enter a valid email address.';
            if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
                window['SA_FIELDS']['AttributeFields'].map((obj) => {
                    const value = obj.PRE ? this._htmlDecode(obj.PRE) : '';
                    switch (obj.ID.toLowerCase()) {
                        case 'givenname': {
                            this.givenName = value;
                            break;
                        }
                        case 'surname': {
                            this.surname = value;
                            break;
                        }
                        case 'email': {
                            this.email = value;
                            this.emailRegex = obj.PAT;
                            obj.PAT_DESC = invalidEmailAddressError;
                            break;
                        }
                        default:
                    }
                });
            }
        };
        this._updateErrorMessage = () => {
            const { resources } = this.props;
            if (window && window['CONTENT']) {
                const message = {
                    required_field: resources.requiredFieldMissingError,
                    verifying_blurb: resources.loadingMessage
                };
                Object.assign(window['CONTENT'], message);
            }
        };
        this.givenName = '';
        this.surname = '';
        this.email = '';
        this.emailRegex = '^[a-zA-Z0-9.!#$%&\^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$';
        this.isInitialized = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        this._onInit();
    }
    componentDidUpdate() {
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            window['$element']['initialize']();
        }
    }
    render() {
        const { config, resources } = this.props;
        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            accountProfileEdit: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: React.createElement(AccountProfileEditLoadingIconComponent, { className: this.moduleClassName }),
                message: React.createElement(AccountProfileEditLoadingMessageComponent, { className: this.moduleClassName, message: resources.loadingMessage }),
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            heading: config.heading && config.heading.text && (React.createElement(Msdyn365.Text, Object.assign({ className: `${this.moduleClassName}__heading` }, config.heading, { editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } }))),
            accountProfileEditLocalAccount: this._renderLocalAccount()
        };
        return this.props.renderView(viewProps);
    }
    _htmlDecode(str) {
        const e = document.createElement('div');
        e.innerHTML = str;
        return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue || '';
    }
    _renderLocalAccount() {
        const { config, resources } = this.props;
        const localAccount = {
            localAccount: {
                id: 'attributeList',
                className: `${this.moduleClassName}__account-items attr`
            },
            items: [
                this._renderInput('givenName', 'text', this.givenName, resources.firstNameLabelText, resources.firstNameMaxLength),
                this._renderInput('surname', 'text', this.surname, resources.lastNameLabelText, resources.lastNameMaxLength),
            ],
            errorMessage: [
                React.createElement(AccountProfileEditErrorComponent, { key: 'requiredFieldMissing', id: 'requiredFieldMissing', className: this.moduleClassName, message: resources.requiredFieldMissingSummaryError }),
                React.createElement(AccountProfileEditErrorComponent, { key: 'fieldIncorrect', id: 'fieldIncorrect', className: this.moduleClassName, message: resources.fieldIncorrectError }),
                React.createElement(AccountProfileEditErrorComponent, { key: 'claimVerificationServerError', id: 'claimVerificationServerError', className: this.moduleClassName })
            ],
            buttonsWrapper: {
                className: `${this.moduleClassName}__buttons`,
            },
            buttons: [
                React.createElement(AccountProfileEditButtonComponent, { key: 'continue', id: 'continue', className: `${this.moduleClassName}__save-button`, ariaLabel: resources.saveButtonAriaLabel, text: resources.saveButtonText, telemetryContent: this.telemetryContent }),
                React.createElement(AccountProfileEditButtonComponent, { key: 'cancel', id: 'cancel', className: `${this.moduleClassName}__cancel-button`, ariaLabel: resources.cancelButtonText, text: resources.cancelButtonText, telemetryContent: this.telemetryContent })
            ],
            verificationSuccessModal: {
                className: `${this.moduleClassName}__verifying-modal verifying-modal`
            },
            verificationSuccessModalMessage: {
                id: 'verifying_blurb',
                className: `${this.moduleClassName}__verifying-modal-message`
            }
        };
        if (config.showEmail && this.email !== '') {
            localAccount.items.push(this._renderInput('email', 'email', this.email, resources.emailAddressLabelText, undefined, this.emailRegex));
        }
        return localAccount;
    }
    _renderInput(id, type, value, labelText, maxLength, pattern) {
        const className = `${this.moduleClassName}__account-item`;
        return ({
            wrapper: {
                className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
            },
            key: id,
            label: (React.createElement(AccountProfileEditLabelComponent, Object.assign({}, {
                id: id,
                forId: id,
                className: className,
                text: labelText
            }))),
            errorMessage: (React.createElement(AccountProfileEditErrorComponent, Object.assign({}, {
                className: this.moduleClassName,
                type: 'item'
            }))),
            input: (React.createElement(AccountProfileEditInputComponent, Object.assign({}, {
                id: id,
                type: type,
                value: value,
                pattern: pattern,
                className: className,
                onChange: this.onTextBoxChange
            })))
        });
    }
};
__decorate([
    observable
], AccountProfileEdit.prototype, "givenName", void 0);
__decorate([
    observable
], AccountProfileEdit.prototype, "surname", void 0);
__decorate([
    observable
], AccountProfileEdit.prototype, "email", void 0);
__decorate([
    observable
], AccountProfileEdit.prototype, "emailRegex", void 0);
__decorate([
    observable
], AccountProfileEdit.prototype, "isInitialized", void 0);
AccountProfileEdit = __decorate([
    observer
], AccountProfileEdit);
export default AccountProfileEdit;
//# sourceMappingURL=account-profile-edit.js.map