import { __decorate } from "tslib";
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { getTelemetryObject, Modal, ModalBody } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import SignInButtonComponent from './components/sign-in-button';
import SignInDescriptionComponent from './components/sign-in-description';
import SignInErrorComponent from './components/sign-in-error';
import SignInInputComponent from './components/sign-in-input';
import SignInLabelComponent from './components/sign-in-label';
import SignInLinkComponent from './components/sign-in-link';
import SignInLoadingIconComponent from './components/sign-in-loading-icon';
import SignInLoadingMessageComponent from './components/sign-in-loading-message';
import SignInTextComponent from './components/sign-in-text';
let SignIn = class SignIn extends React.Component {
    constructor(props) {
        super(props);
        this.moduleClassName = 'ms-sign-in';
        this.handleParagraphChange = (event) => this.props.config.signInDisclaimer = event.target.value;
        this.handleSignInHeadingChange = (event) => this.props.config.signInHeading.text = event.target.value;
        this.handleSignUpHeadingChange = (event) => this.props.config.signUpHeading.text = event.target.value;
        this._onInit = () => {
            this._prePopulateData();
            this._updateErrorMessage();
            this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);
            setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);
        };
        this._isInitializationSuccessful = () => {
            if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
                clearInterval(this.initializationTimer);
                this.isInitialized = true;
            }
        };
        this._prePopulateData = () => {
            if (window && window['CONTENT'] && window['CONTENT']['email_pattern']) {
                this.emailRegex = window['CONTENT']['email_pattern'];
            }
        };
        this._updateErrorMessage = () => {
            const resources = this.props.resources || {};
            if (window && window['CONTENT']) {
                const errorMessages = {
                    requiredField_email: resources.requriedEmailError,
                    requiredField_password: resources.requriedPasswordError,
                    invalid_email: resources.invalidEmailError,
                    invalid_password: resources.invalidPasswordError,
                    unknown_error: resources.unknownError,
                };
                Object.assign(window['CONTENT'], errorMessages);
            }
        };
        this.emailRegex = '^[a-zA-Z0-9.!#$%&\^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$';
        this.isInitialized = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        this._onInit();
    }
    componentDidUpdate() {
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            window['$element']['initialize']();
        }
    }
    render() {
        const config = this.props.config || {};
        const resources = this.props.resources || {};
        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            signIn: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: React.createElement(SignInLoadingIconComponent, { className: this.moduleClassName }),
                message: React.createElement(SignInLoadingMessageComponent, { className: this.moduleClassName, message: resources.loadingMessage }),
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            signInSection: {
                className: `${this.moduleClassName}__sign-in-section`
            },
            signInSectionHeading: React.createElement(Msdyn365.Text, Object.assign({ className: `${this.moduleClassName}__sign-in-heading` }, config.signInHeading, { editProps: { onEdit: this.handleSignInHeadingChange, requestContext: this.props.context.request } })),
            signInLocalAccount: {
                localAccount: {
                    className: `${this.moduleClassName}__account-items localAccount`
                },
                items: [
                    this._renderInput('logonIdentifier', 'email', resources.emailAddressLabelText, resources.emailAddressAriaLabel, this.emailRegex),
                    this._renderInput('password', 'password', resources.passwordLabelText, resources.passwordAriaLabel)
                ],
                forgetPassword: (React.createElement(SignInLinkComponent, { id: 'forgotPassword', className: `${this.moduleClassName}__forget-password`, href: '#', ariaLabel: resources.forgotPasswordButtonAriaLabel, text: resources.forgotPasswordButtonText, telemetryContent: this.telemetryContent })),
                disclaimer: config.signInDisclaimer && (React.createElement(Msdyn365.RichTextComponent, { className: `${this.moduleClassName}__sign-in-disclaimer`, text: config.signInDisclaimer, editProps: { onEdit: this.handleParagraphChange, requestContext: this.props.context.request } })),
                error: React.createElement(SignInErrorComponent, { className: this.moduleClassName }),
                signInButton: React.createElement(SignInButtonComponent, { id: 'next', className: `${this.moduleClassName}__sign-in-button`, ariaLabel: resources.loginButtonAriaLabel, text: resources.loginButtonText, telemetryContent: this.telemetryContent })
            },
            signInSocialAccount: {
                socialAccounts: {
                    className: `${this.moduleClassName}__social-accounts`
                },
                items: [
                    this._renderSocialAccount('FacebookExchange', resources.facebookButtonText, resources.facebookButtonAriaLabel, config.facebookIcon),
                    this._renderSocialAccount('MicrosoftAccountExchange', resources.microsoftButtonText, resources.microsoftButtonAriaLabel, config.microsoftIcon)
                ]
            },
            signUpSection: {
                className: `${this.moduleClassName}__sign-up-section`
            },
            signUpSectionHeading: React.createElement(Msdyn365.Text, Object.assign({ className: `${this.moduleClassName}__sign-up-heading` }, config.signUpHeading, { editProps: { onEdit: this.handleSignUpHeadingChange, requestContext: this.props.context.request } })),
            signUpDescription: React.createElement(SignInDescriptionComponent, { className: `${this.moduleClassName}__sign-up-description`, description: resources.signUpDescriptionText }),
            signUpLink: (React.createElement(SignInLinkComponent, { id: 'createAccount', href: '#', className: `${this.moduleClassName}__sign-up-link msc-btn`, ariaLabel: resources.signUpButtonAriaLabel, text: resources.signUpButtonText, telemetryContent: this.telemetryContent }))
        };
        return this.props.renderView(viewProps);
    }
    _renderInput(id, type, labelText, ariaLabel, pattern) {
        const className = `${this.moduleClassName}__account-item`;
        return ({
            wrapper: {
                className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
            },
            key: id,
            label: (React.createElement(SignInLabelComponent, Object.assign({}, {
                id,
                forId: id,
                className: className,
                text: labelText
            }))),
            error: (React.createElement(SignInErrorComponent, Object.assign({}, {
                className: this.moduleClassName,
                type: 'item'
            }))),
            input: (React.createElement(SignInInputComponent, Object.assign({}, {
                id: id,
                type: type,
                pattern: pattern,
                className: className,
                ariaLabel: ariaLabel
            })))
        });
    }
    _renderSocialAccount(id, text, ariaLabel, iconImage) {
        return {
            key: id,
            button: {
                id: id,
                tag: 'button',
                className: classnames(`${this.moduleClassName}__social-account`, `${this.moduleClassName}__social-account-${id}`, 'accountButton', 'msc-btn'),
                'aria-label': ariaLabel
            },
            image: this._createImageMarkup(iconImage),
            text: React.createElement(SignInTextComponent, { className: `${this.moduleClassName}__social-account-text`, text: text })
        };
    }
    _createImageMarkup(iconImage) {
        if (iconImage) {
            const imageProps = {
                gridSettings: this.props.context.request.gridSettings || {},
                imageSettings: iconImage && iconImage.imageSettings
            };
            return React.createElement(Msdyn365.Image, Object.assign({ className: `${this.moduleClassName}__social-account-picture` }, iconImage, imageProps, { editProps: { key: iconImage || {}, requestContext: this.props.context.request } }));
        }
        return null;
    }
};
__decorate([
    observable
], SignIn.prototype, "emailRegex", void 0);
__decorate([
    observable
], SignIn.prototype, "isInitialized", void 0);
SignIn = __decorate([
    observer
], SignIn);
export default SignIn;
//# sourceMappingURL=sign-in.js.map