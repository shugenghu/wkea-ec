import { __decorate } from "tslib";
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import get from 'lodash/get';
import { computed, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { updateCustomerPersonalization, updateCustomerPersonalizationInput } from '@msdyn365-commerce-modules/retail-actions';
import { Button, getPayloadObject, getTelemetryAttributes, getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import AccountProfileAttributes from './components/account-profile-attributes';
import DescriptionComponent from './components/account-profile-description';
import LinksComponent from './components/account-profile-links';
import TextComponent from './components/account-profile-text';
let AccountProfile = class AccountProfile extends React.Component {
    constructor(props) {
        super(props);
        this.isUpdatingPreference = false;
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this.handleEmailHeadingChange = (event) => this.props.config.emailAddressSectionHeading.text = event.target.value;
        this.handleNameHeadingChange = (event) => this.props.config.nameSectionHeading.text = event.target.value;
        this.handleLinkTextChange = (linkIndex) => (event) => {
            if (this.props.resources.editButtonText) {
                this.props.resources.editButtonText = event.target.value;
            }
        };
        this._renderPreference = (className, sectionHeading, enableAriaLabel, description, isOptOut) => {
            const { toggleDisableText, toggleEnableText } = this.props.resources;
            const toggleState = isOptOut ? 'disable' : 'enable';
            const onClickHandler = (event) => { return this._updateAccountPersonalization(className); };
            this.payLoad.contentAction.etext = sectionHeading.text;
            const attributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
            return {
                accountPreference: {
                    className: classnames('ms-account-profile__preference', `ms-account-profile__preference-${className}`, { 'ms-account-profile__personalization-updating': this.isUpdatingPreference })
                },
                heading: sectionHeading && (React.createElement(Msdyn365.Text, { className: 'ms-account-profile__preference-heading', tag: sectionHeading.tag || 'h2', text: sectionHeading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
                buttonWrapper: {
                    className: classnames('ms-account-profile__toggle-wrapper', `ms-account-profile__toggle-${toggleState}`)
                },
                buttonYesText: React.createElement(TextComponent, { className: 'ms-account-profile__toggle-enable-text', text: toggleEnableText }),
                buttonNoText: React.createElement(TextComponent, { className: 'ms-account-profile__toggle-disable-text', text: toggleDisableText }),
                button: (React.createElement(Button, Object.assign({ className: classnames('ms-account-profile__toggle-button', `ms-account-profile__toggle-${toggleState}-button`), "aria-label": enableAriaLabel, value: isOptOut.toString(), "aria-pressed": !isOptOut, onClick: onClickHandler }, attributes))),
                description: React.createElement(DescriptionComponent, { className: 'ms-account-profile__preference-description', description: description }),
                onUpdateAccountPreference: () => this._updateAccountPersonalization(className)
            };
        };
        this._updateAccountPersonalization = async (preferenceType) => {
            const customerInformation = this.props.data.customerInformation.result;
            if (customerInformation) {
                const { telemetry, context: { request, actionContext } } = this.props;
                let isOptOutPersonalization = false;
                let input;
                switch (preferenceType) {
                    case 'web-tracking':
                        isOptOutPersonalization = customerInformation.OptOutWebActivityTracking || false;
                        input = new updateCustomerPersonalizationInput(customerInformation.AccountNumber, !isOptOutPersonalization, request.apiSettings, preferenceType);
                        break;
                    case undefined:
                    case 'personalization':
                    default:
                        isOptOutPersonalization = customerInformation.OptOutPersonalization || false;
                        input = new updateCustomerPersonalizationInput(customerInformation.AccountNumber, !isOptOutPersonalization, request.apiSettings, preferenceType);
                }
                this.isUpdatingPreference = true;
                try {
                    await updateCustomerPersonalization(input, actionContext);
                }
                catch (error) {
                    if (telemetry) {
                        telemetry.exception(error);
                        telemetry.debug('Unable to update customer personalization');
                    }
                }
                this.isUpdatingPreference = false;
            }
        };
        this._renderCustomerAttributes = () => {
            return (React.createElement(AccountProfileAttributes, { accountProfileProps: this.props }));
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this.payLoad = getPayloadObject('click', this.telemetryContent, '');
    }
    render() {
        const { config, resources, data } = this.props;
        const { className, heading, emailAddressSectionHeading, nameSectionHeading, showAttributes, showPhone, showVatNumber } = config;
        const { editButtonText, editButtonAriaLabel } = resources;
        const customerInformation = data.customerInformation.result;
        const shouldRenderAttributes = (showAttributes && showAttributes.length > 0) || showPhone || showVatNumber || false;
        const editLink = {
            linkUrl: {
                destinationUrl: get(this.props, 'context.request.user.editProfileUrl', '')
            },
            linkText: editButtonText,
            ariaLabel: editButtonAriaLabel
        };
        const viewProps = {
            ...this.props,
            className: className,
            AccountProfile: {
                moduleProps: this.props,
                className: classnames('ms-account-profile', config.className)
            },
            accountProfileWrapper: {
                className: classnames('ms-account-profile-wrapper')
            },
            heading: heading && (React.createElement(Msdyn365.Text, { className: 'ms-account-loyalty-tile__heading', tag: heading.tag || 'h2', text: heading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
            emailSection: this._renderEmailSection(classnames('ms-account-profile__section', 'ms-account-profile__section-email'), emailAddressSectionHeading, customerInformation && customerInformation.Email),
            nameSection: this._renderNameSection(classnames('ms-account-profile__section', 'ms-account-profile__section-name'), nameSectionHeading, `${customerInformation && customerInformation.FirstName} ${customerInformation && customerInformation.LastName}`, [editLink]),
            preferenceSection: this._renderPreferenceSection(classnames('ms-account-profile__section', 'ms-account-profile__section-preferences'), customerInformation),
            customerAttributesWrapper: {
                className: classnames('ms-account-profile__attributes-wrapper')
            },
            customerAttributesSection: shouldRenderAttributes && this._renderCustomerAttributes()
        };
        return this.props.renderView(viewProps);
    }
    get editProfileUrl() {
        return get(this.props, 'context.request.user.editProfileUrl', '');
    }
    _renderEmailSection(className, heading, description, links) {
        return {
            AccountProfileItem: {
                className: className
            },
            heading: heading && (React.createElement(Msdyn365.Text, { className: 'ms-account-profile__section-heading', tag: heading.tag || 'h2', text: heading.text, editProps: { onEdit: this.handleEmailHeadingChange, requestContext: this.props.context.request } })),
            links: links && links.length > 0 && React.createElement(LinksComponent, Object.assign({}, { links: links, onTextChange: this.handleLinkTextChange, requestContext: this.props.context.request, telemetryContent: this.telemetryContent })),
            description: description && React.createElement(DescriptionComponent, { className: 'ms-account-profile__section-description', description: description })
        };
    }
    _renderNameSection(className, heading, description, links) {
        return {
            AccountProfileItem: {
                className: className
            },
            heading: heading && (React.createElement(Msdyn365.Text, { className: 'ms-account-profile__section-heading', tag: heading.tag || 'h2', text: heading.text, editProps: { onEdit: this.handleNameHeadingChange, requestContext: this.props.context.request } })),
            links: links && links.length > 0 && React.createElement(LinksComponent, Object.assign({}, { links: links, onTextChange: this.handleLinkTextChange, requestContext: this.props.context.request, telemetryContent: this.telemetryContent })),
            description: description && React.createElement(DescriptionComponent, { className: 'ms-account-profile__section-description', description: description })
        };
    }
    _renderPreferenceSection(className, customerInformation) {
        const { personalizationDescription, personalizationEnableButtonAriaLabel, webTrackingDescription, webTrackingEnableButtonAriaLabel } = this.props.resources;
        const { preferencesSectionHeading, personalizationSectionHeading, webTrackingSectionHeading } = this.props.config;
        const { enableDataAnalytics } = this.props.context.request.features;
        const extraPreferences = [];
        if (!customerInformation) {
            this.props.context.telemetry.error('Account profile data is empty, module wont render');
            return null;
        }
        enableDataAnalytics && webTrackingSectionHeading &&
            extraPreferences.push(this._renderPreference('web-tracking', webTrackingSectionHeading, webTrackingEnableButtonAriaLabel, webTrackingDescription, customerInformation.OptOutWebActivityTracking || false));
        return {
            accountPreferences: {
                className: className
            },
            heading: preferencesSectionHeading && (React.createElement(Msdyn365.Text, { className: 'ms-account-profile__section-heading', tag: preferencesSectionHeading.tag || 'h2', text: preferencesSectionHeading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
            personalization: this._renderPreference('personalization', personalizationSectionHeading, personalizationEnableButtonAriaLabel, personalizationDescription, customerInformation.OptOutPersonalization || false),
            extraPreferences: extraPreferences || undefined
        };
    }
};
__decorate([
    observable
], AccountProfile.prototype, "isUpdatingPreference", void 0);
__decorate([
    computed
], AccountProfile.prototype, "editProfileUrl", null);
AccountProfile = __decorate([
    observer
], AccountProfile);
export default AccountProfile;
//# sourceMappingURL=account-profile.js.map