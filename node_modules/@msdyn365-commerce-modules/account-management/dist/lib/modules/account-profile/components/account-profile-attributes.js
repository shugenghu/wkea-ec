import { __decorate } from "tslib";
import { updateCustomerAttributes, updateCustomerAttributesInput } from '@msdyn365-commerce-modules/retail-actions';
import { Button, format, getPayloadObject, getTelemetryAttributes, getTelemetryObject, isNullOrWhiteSpace } from '@msdyn365-commerce-modules/utilities';
import MsDyn365, { Text } from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { observable, reaction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import TextComponent from './account-profile-text';
let AccountProfileAttributes = class AccountProfileAttributes extends React.Component {
    constructor(props) {
        super(props);
        this.isUpdatingAttributes = false;
        this.gotException = false;
        this.hasError = false;
        this.attributeClassName = 'ms-account-profile__attributes-element';
        this.maxIntegerLimit = 2100000000;
        this.minIntegerLimit = -2100000000;
        this.maxDecimalLimit = 7900000000000;
        this.minDecimalLimit = -7900000000000;
        this.maxStringLength = 1000;
        this.maxVATNumberLength = 20;
        this.maxPhoneLength = 25;
        this._renderAttributes = () => {
            const { config, data, resources } = this.props.accountProfileProps;
            const attributeDefinitions = data.attributeDefinitions.result || [];
            const additionalInformationSectionHeading = config.additionalInformationSectionHeading && config.additionalInformationSectionHeading.text || '';
            const showAttributes = config.showAttributes || '';
            const attributes = showAttributes.split(',');
            const elements = attributes.map(att => {
                const attributeDefinition = attributeDefinitions.find(attribute => attribute.IsHidden === false && attribute.Name.toLocaleLowerCase() === att.toLocaleLowerCase()) || { RecordId: 0 };
                return this._renderAttribute(attributeDefinition);
            });
            const edit = this.state && this.state.editAttributes || false;
            this.payLoad.contentAction.etext = `${resources.attributesEditButtonText} ${additionalInformationSectionHeading}`;
            const editAttributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
            this.payLoad.contentAction.etext = `${resources.attributesSaveButtonText} ${additionalInformationSectionHeading}`;
            const saveAttributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
            this.payLoad.contentAction.etext = `${resources.attributesCancelButtonText} ${additionalInformationSectionHeading}`;
            const cancelAttributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
            return (React.createElement("div", { ref: this.attributesContainerRef, className: classnames('ms-account-profile__attributes', { 'ms-account-profile__attributes-updating': this.isUpdatingAttributes }) },
                config.additionalInformationSectionHeading && (React.createElement(Text, { className: 'ms-account-profile__attributes-tile__heading', tag: config.additionalInformationSectionHeading.tag || 'h2', text: additionalInformationSectionHeading })),
                config.showPhone && (this._renderPhone()),
                config.showVatNumber && (this._renderVatNumber()),
                elements,
                this.gotException && (React.createElement("div", { className: 'ms-account-profile__attributes-error' },
                    React.createElement("label", { className: 'ms-account-profile__attributes-error-label' }, this.props.accountProfileProps.resources.attributesSaveExceptionMessage))),
                !edit && (React.createElement(Button, Object.assign({ className: classnames('ms-account-profile__attributes-edit-button'), "aria-label": `${resources.attributesEditButtonText} ${additionalInformationSectionHeading}`, onClick: this._enableAttributes, innerRef: this.editRef, title: resources.attributesEditButtonText }, editAttributes), resources.attributesEditButtonText)),
                edit && (React.createElement(Button, Object.assign({ className: classnames('ms-account-profile__attributes-save-button'), "aria-label": resources.attributesSaveButtonText, onClick: this._saveAttributes, title: resources.attributesSaveButtonText }, saveAttributes), resources.attributesSaveButtonText)),
                edit && (React.createElement(Button, Object.assign({ className: classnames('ms-account-profile__attributes-cancel-button'), "aria-label": resources.attributesCancelButtonText, onClick: this._disableAttributes, title: resources.attributesCancelButtonText }, cancelAttributes), resources.attributesCancelButtonText))));
        };
        this._renderPhone = () => {
            const { phoneSectionHeading } = this.props.accountProfileProps.config;
            const heading = phoneSectionHeading && phoneSectionHeading.text || '';
            const className = heading && heading.replace(/ /g, '_') || '';
            const editAttributes = this.state && this.state.editAttributes || false;
            return (React.createElement("div", { className: classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`) },
                phoneSectionHeading && (React.createElement(Text, { className: `ms-account-profile__attributes__section-heading`, tag: 'h3', text: heading })),
                React.createElement("input", { type: 'text', "aria-label": heading, className: classnames(this.attributeClassName, 'ms-account-profile__attributes_input', `ms-account-profile__attributes_input-edit-${editAttributes}`, `ms-account-profile__${className}-input`), onChange: this._onPhoneChange, value: this.state.phone || '', disabled: !editAttributes }),
                this._renderError('Phone')));
        };
        this._renderVatNumber = () => {
            const { vatNumberSectionHeading } = this.props.accountProfileProps.config;
            const heading = vatNumberSectionHeading && vatNumberSectionHeading.text || '';
            const className = heading && heading.replace(/ /g, '_') || '';
            const editAttributes = this.state && this.state.editAttributes || false;
            return (React.createElement("div", { className: classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`) },
                vatNumberSectionHeading && (React.createElement(Text, { className: `ms-account-profile__attributes__section-heading`, tag: 'h3', text: heading })),
                React.createElement("input", { type: 'text', "aria-label": heading, className: classnames(this.attributeClassName, 'ms-account-profile__attributes_input', `ms-account-profile__attributes_input-edit-${editAttributes}`, `ms-account-profile__${className}-input`), onChange: this._onVatNumberChange, value: this.state.vatNumber || '', disabled: !editAttributes }),
                this._renderError('VATNumber')));
        };
        this._renderAttribute = (customAttribute) => {
            const editAttributes = this.state && this.state.editAttributes || false;
            const className = customAttribute.Name && customAttribute.Name.replace(/ /g, '_') || '';
            switch (customAttribute.ExtDataType && customAttribute.ExtDataType.Value) {
                case 4:
                case 3:
                    return this._renderIntegerDecimalInput(customAttribute, className, editAttributes);
                case 5:
                    return this._renderTextInputOrSelect(customAttribute, className, editAttributes);
                case 6:
                    return this._renderBoolean(customAttribute, className, editAttributes);
                default:
                    return null;
            }
        };
        this._renderIntegerDecimalInput = (customAttribute, className, editAttributes) => {
            const edit = this.state && this.state.editAttributes || false;
            const attributeProps = this._getAttributeProps(customAttribute.Name || '');
            const displayName = attributeProps?.Name || '';
            return (React.createElement("div", { className: classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`) },
                React.createElement(Text, { className: `ms-account-profile__attributes__section-heading`, tag: 'h3', text: displayName }),
                React.createElement("input", { type: 'text', "aria-label": customAttribute.Name, className: classnames(this.attributeClassName, 'ms-account-profile__attributes_input', `ms-account-profile__attributes_input-edit-${edit}`, `ms-account-profile__${className}-input`), onChange: this._onAttributeChange(customAttribute), value: this.state.attributes[customAttribute.Name || ''] || '', disabled: !editAttributes, "aria-required": attributeProps?.IsMandatory || false }),
                this._renderError(customAttribute.Name || '')));
        };
        this._renderTextInputOrSelect = (customAttribute, className, editAttributes) => {
            const isEnumeration = customAttribute.IsEnumeration || false;
            const edit = this.state && this.state.editAttributes || false;
            const attributeProps = this._getAttributeProps(customAttribute.Name || '');
            const displayName = attributeProps?.Name || '';
            if (isEnumeration && customAttribute.EnumerationDetails) {
                const value = this.state.attributes[customAttribute.Name || ''] || '';
                const hasNoValue = value === '' ? true : false;
                return (React.createElement("div", { className: classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`) },
                    React.createElement(Text, { className: `ms-account-profile__attributes__section-heading`, tag: 'h3', text: displayName }),
                    React.createElement("select", { id: `ms-account-profile__attributes-${className}`, "aria-label": customAttribute.Name, className: classnames(this.attributeClassName, 'ms-account-profile__attributes_select', `ms-account-profile__attributes_select-edit-${edit}`, `ms-account-profile__attributes-${className}_select`), onChange: this._onAttributeSelect(customAttribute), disabled: !editAttributes, "aria-required": attributeProps?.IsMandatory || false },
                        hasNoValue && (React.createElement("option", { className: 'ms-account-profile__attributes_select__option', key: 'blank', selected: hasNoValue, "aria-selected": hasNoValue })),
                        customAttribute.EnumerationDetails.map((option) => {
                            const selected = option.EnumerationValue === this.state.attributes[customAttribute.Name || ''];
                            return React.createElement("option", { className: 'ms-account-profile__attributes_select__option', key: option.EnumerationValue, selected: selected, "aria-selected": selected }, option.EnumerationValue);
                        }))));
            }
            else {
                return (React.createElement("div", { className: classnames('ms-account-profile__attributes__section', `ms-account-profile__attributes-${className}`) },
                    React.createElement(Text, { className: `ms-account-profile__attributes__section-heading`, tag: 'h3', text: displayName }),
                    React.createElement("input", { type: 'text', "aria-label": customAttribute.Name, className: classnames(this.attributeClassName, 'ms-account-profile__attributes_input', `ms-account-profile__attributes_input-edit-${edit}`, `ms-account-profile__${className}-input`), onChange: this._onAttributeChange(customAttribute), value: this.state.attributes[customAttribute.Name || ''] || '', disabled: !editAttributes, "aria-required": attributeProps?.IsMandatory || false }),
                    this._renderError(customAttribute.Name || '')));
            }
        };
        this._renderBoolean = (customAttribute, className, editAttributes) => {
            let value = this.state.attributes[customAttribute.Name || ''] || '';
            const hasNoValue = value === '' ? true : false;
            const render = (hasNoValue && !editAttributes) ? false : true;
            value = value || 'false';
            const toggleState = value === 'true' && 'enable' || 'disable';
            const arialabel = format(this.props.accountProfileProps.resources.attributeToggleButtonAriaLabel, customAttribute.Name);
            const ariaPressed = value === 'true' && true || false;
            const attributeProps = this._getAttributeProps(customAttribute.Name || '');
            const displayName = attributeProps?.Name || '';
            let toggleValue = 'false';
            if (value === 'true') {
                toggleValue = 'false';
            }
            else {
                toggleValue = 'true';
            }
            return (React.createElement("div", { className: classnames('ms-account-profile__attributes__section', 'ms-account-profile__attributes__section__toggle', `ms-account-profile__attributes-${className}`) },
                React.createElement(Text, { className: `ms-account-profile__attributes__section-heading`, tag: 'h3', text: displayName }),
                render && (React.createElement("div", { className: `ms-account-profile__attributes__section__toggle-wrapper ms-account-profile__attributes__section__toggle-${toggleState}` },
                    React.createElement(TextComponent, { className: 'ms-account-profile__attributes__section__toggle-disable-text', text: this.props.accountProfileProps.resources.toggleDisableText }),
                    React.createElement(Button, { className: classnames(this.attributeClassName, 'ms-account-profile__attributes__section__toggle-button', `ms-account-profile__attributes__section__toggle-${toggleState}-button`), "aria-label": `${arialabel}`, "aria-pressed": ariaPressed, value: value, onClick: this._onAttributeCheck(customAttribute, toggleValue), disabled: !editAttributes }),
                    React.createElement(TextComponent, { className: 'ms-account-profile__attributes__section__toggle-enable-text', text: this.props.accountProfileProps.resources.toggleEnableText })))));
        };
        this._renderError = (attributeName) => {
            const error = this.state && this.state.attributeError && this.state.attributeError[attributeName] || '';
            const hasError = !isNullOrWhiteSpace(error);
            if (hasError) {
                return (React.createElement("div", { className: 'ms-account-profile__attributes-error', role: 'alert', "aria-live": 'assertive' },
                    React.createElement("label", { className: 'ms-account-profile__attributes-error-label' }, error)));
            }
            return null;
        };
        this._getAttributeProps = (attributeName) => {
            const attributePayloadData = this.attributePayloadData.filter((att) => att.name === attributeName);
            const isMandatory = attributePayloadData[0] && attributePayloadData[0].isMandatory || false;
            return {
                Name: isMandatory ? `${attributeName || ''} *` : attributeName || '',
                IsMandatory: isMandatory
            };
        };
        this._onPhoneChange = (event) => {
            const value = event.target.value;
            this.setState({ phone: value });
        };
        this._onVatNumberChange = (event) => {
            const value = event.target.value;
            this.setState({ vatNumber: value });
        };
        this._enableAttributes = () => {
            this.hasError = false;
            this.gotException = false;
            this.setState({ editAttributes: true, attributeError: {} });
            if (MsDyn365.isBrowser) {
                setTimeout(() => {
                    if (this.attributesContainerRef?.current) {
                        const attributes = this.attributesContainerRef.current.getElementsByClassName(this.attributeClassName);
                        if (attributes && attributes.length > 0) {
                            this._setFocus(attributes[0]);
                        }
                    }
                }, 0);
            }
        };
        this._disableAttributes = () => {
            this.setState({ editAttributes: false, attributeError: {}, attributes: this.initialAttributes, phone: this.initialPhone, vatNumber: this.initialVatNumber });
            if (MsDyn365.isBrowser) {
                setTimeout(() => {
                    this._setFocus(this.editRef.current);
                }, 0);
            }
        };
        this._onAttributeChange = (attributeDefinition) => (event) => {
            const value = event.target.value;
            const name = attributeDefinition.Name || '';
            this.setState({
                attributes: {
                    ...this.state.attributes,
                    [name]: value
                }
            });
        };
        this._onAttributeCheck = (attributeDefinition, value) => (event) => {
            const name = attributeDefinition.Name || '';
            this.setState({
                attributes: {
                    ...this.state.attributes,
                    [name]: value
                }
            });
        };
        this._onAttributeSelect = (attributeDefinition) => (event) => {
            const value = event.currentTarget.selectedOptions[0].value;
            const index = event.currentTarget.selectedOptions[0].index;
            const name = attributeDefinition.Name || '';
            this.setState({
                attributes: {
                    ...this.state.attributes,
                    [name]: value
                },
                selectedIndex: {
                    ...this.state.selectedIndex,
                    [name]: index
                }
            });
        };
        this._getAttributes = () => {
            const { config, data } = this.props.accountProfileProps;
            const showAttributes = config.showAttributes || '';
            const showAttributesArray = showAttributes.split(',');
            const customer = data.customerInformation.result;
            const custmerAttributes = customer && customer.Attributes || [];
            const attributes = {};
            showAttributesArray.forEach(showAttribute => {
                const attributePayloadData = this.attributePayloadData.filter((att) => att.name === showAttribute);
                const isMandatory = attributePayloadData[0] && attributePayloadData[0].isMandatory || false;
                const defaultValue = attributePayloadData[0] && attributePayloadData[0].defaultValue;
                const attribute = custmerAttributes.find((att) => att.Name === showAttribute);
                let value = '';
                if (attribute && attribute.AttributeValue) {
                    const name = attribute && attribute.Name || '';
                    switch (attribute.DataTypeValue) {
                        case 4:
                            if (attribute.AttributeValue.IntegerValue) {
                                value = String(attribute.AttributeValue.IntegerValue);
                                attributes[name] = value;
                            }
                            break;
                        case 3:
                            if (attribute.AttributeValue.DecimalValue) {
                                value = String(attribute.AttributeValue.DecimalValue);
                                attributes[name] = value;
                            }
                            break;
                        case 5:
                            if (attribute.AttributeValue.StringValue) {
                                value = attribute.AttributeValue.StringValue;
                                attributes[name] = value;
                            }
                            break;
                        case 6:
                            if (attribute.AttributeValue.BooleanValue !== null) {
                                value = String(attribute.AttributeValue.BooleanValue);
                                attributes[name] = value;
                            }
                            break;
                        default:
                    }
                }
                if (isNullOrWhiteSpace(value) && isMandatory) {
                    attributes[showAttribute] = '';
                }
                if (value.length === 0 && defaultValue) {
                    attributes[showAttribute] = String(defaultValue);
                }
            });
            if (Object.keys(this.initialAttributes).length === 0) {
                this.initialAttributes = attributes;
            }
            this.setState({ attributes: attributes });
        };
        this._addOrUpdateAttribute = (customer) => {
            const { resources } = this.props.accountProfileProps;
            const { phone, vatNumber } = this.state;
            const attributeError = {};
            let hasError = false;
            let hasValue = true;
            for (const [key, value] of Object.entries(this.state.attributes)) {
                const payloadData = this.attributePayloadData.find(data => data.name === key) || {};
                if (payloadData) {
                    switch (payloadData.dataTypeValue) {
                        case 3:
                            const decimalValue = Number(value);
                            if (isNaN(decimalValue)) {
                                const typeError = format(resources.attributeInputTypeErrorText, payloadData.name, 'Decimal');
                                attributeError[payloadData.name || ''] = typeError;
                                hasError = true;
                            }
                            else {
                                if (payloadData.lowerBoundValue !== undefined && payloadData.upperBoundValue !== undefined) {
                                    if (decimalValue < payloadData.lowerBoundValue || decimalValue > payloadData.upperBoundValue) {
                                        const rangeError = format(resources.attributeInputRangeErrorText, payloadData.name, payloadData.lowerBoundValue, payloadData.upperBoundValue);
                                        attributeError[payloadData.name || ''] = rangeError;
                                        hasError = true;
                                    }
                                }
                                else {
                                    if (decimalValue > this.maxDecimalLimit) {
                                        attributeError[payloadData.name || ''] = format(resources.attributeInputValueExceedsMaximumErrorText, payloadData.name, this.maxDecimalLimit);
                                        hasError = true;
                                    }
                                    if (decimalValue < this.minDecimalLimit) {
                                        attributeError[payloadData.name || ''] = format(resources.attributeInputValueExceedsMinimumErrorText, payloadData.name, this.minDecimalLimit);
                                        hasError = true;
                                    }
                                }
                            }
                            if (!hasError) {
                                if (isNullOrWhiteSpace(value)) {
                                    hasValue = false;
                                }
                                else {
                                    payloadData.decimalValue = decimalValue;
                                    hasValue = true;
                                }
                            }
                            break;
                        case 4:
                            const integerValue = Number(value);
                            if (isNaN(integerValue) || value.indexOf('.') !== -1) {
                                const typeError = format(resources.attributeInputTypeErrorText, payloadData.name, 'Integer');
                                attributeError[payloadData.name || ''] = typeError;
                                hasError = true;
                            }
                            else {
                                if (payloadData.lowerBoundValue !== undefined && payloadData.upperBoundValue !== undefined) {
                                    if (integerValue < payloadData.lowerBoundValue || integerValue > payloadData.upperBoundValue) {
                                        const rangeError = format(resources.attributeInputRangeErrorText, payloadData.name, payloadData.lowerBoundValue, payloadData.upperBoundValue);
                                        attributeError[payloadData.name || ''] = rangeError;
                                        hasError = true;
                                    }
                                }
                                else {
                                    if (integerValue > this.maxIntegerLimit) {
                                        attributeError[payloadData.name || ''] = format(resources.attributeInputValueExceedsMaximumErrorText, payloadData.name, this.maxIntegerLimit);
                                        hasError = true;
                                    }
                                    if (integerValue < this.minIntegerLimit) {
                                        attributeError[payloadData.name || ''] = format(resources.attributeInputValueExceedsMinimumErrorText, payloadData.name, this.minIntegerLimit);
                                        hasError = true;
                                    }
                                }
                            }
                            if (!hasError) {
                                if (isNullOrWhiteSpace(value)) {
                                    hasValue = false;
                                }
                                else {
                                    payloadData.integerValue = integerValue;
                                    hasValue = true;
                                }
                            }
                            break;
                        case 5:
                            let trimValue = '';
                            if (!isNullOrWhiteSpace(value)) {
                                trimValue = value.trim();
                            }
                            if (trimValue.length > this.maxStringLength) {
                                attributeError[payloadData.name || ''] = format(resources.attributeInputStringMaxLengthErrorText, payloadData.name, this.maxStringLength);
                                hasError = true;
                            }
                            if (!hasError) {
                                payloadData.textValue = trimValue;
                            }
                            break;
                        case 6:
                            payloadData.booleanValue = value === 'true' ? true : false;
                            break;
                        default:
                    }
                    if (payloadData.isMandatory && isNullOrWhiteSpace(value)) {
                        attributeError[payloadData.name || ''] = format(resources.attributeInputMandatoryErrorText, payloadData.name);
                        hasError = true;
                    }
                    const custmerAttributes = customer && customer.Attributes || [];
                    const attribute = custmerAttributes.find((att) => att.Name === key);
                    const index = custmerAttributes.findIndex((att) => att.Name === key);
                    if (index !== -1 && !hasValue) {
                        custmerAttributes.splice(index, 1);
                    }
                    if (!hasError && hasValue) {
                        if (attribute) {
                            attribute.Attribute = undefined;
                            attribute.DataTypeValue = payloadData.dataTypeValue;
                            attribute.Name = payloadData.name;
                            attribute.RecordId = payloadData.recordId;
                            attribute.Units = undefined;
                            attribute.AttributeValue = {
                                IntegerValue: payloadData.integerValue,
                                BooleanValue: payloadData.booleanValue,
                                StringValue: payloadData.textValue,
                                DecimalValue: payloadData.decimalValue
                            };
                            attribute.ExtensionProperties = [];
                            attribute.NameTranslations = [];
                        }
                        else {
                            custmerAttributes.push({
                                '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CustomerAttribute',
                                Attribute: undefined,
                                DataTypeValue: payloadData.dataTypeValue,
                                KeyName: payloadData.name,
                                Name: payloadData.name,
                                RecordId: payloadData.recordId,
                                Units: undefined,
                                AttributeValue: {
                                    '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CommercePropertyValue',
                                    IntegerValue: payloadData.integerValue,
                                    BooleanValue: payloadData.booleanValue,
                                    StringValue: payloadData.textValue,
                                    DecimalValue: payloadData.decimalValue
                                },
                                'ExtensionProperties@odata.type': '#Collection(Microsoft.Dynamics.Commerce.Runtime.DataModel.CommerceProperty)',
                                ExtensionProperties: [],
                                'NameTranslations@odata.type': '#Collection(Microsoft.Dynamics.Commerce.Runtime.DataModel.TextValueTranslation)',
                                NameTranslations: []
                            });
                        }
                    }
                }
            }
            if (phone.trim().length > this.maxPhoneLength) {
                attributeError[`Phone`] = format(resources.attributeInputStringMaxLengthErrorText, 'Phone', this.maxPhoneLength);
                hasError = true;
            }
            else {
                customer.Phone = phone.trim();
            }
            if (vatNumber.trim().length > this.maxVATNumberLength) {
                attributeError[`VATNumber`] = format(resources.attributeInputStringMaxLengthErrorText, 'VAT Number', this.maxVATNumberLength);
                hasError = true;
            }
            else {
                customer.VatNumber = vatNumber.trim();
            }
            this.hasError = hasError;
            this.setState({ attributeError: attributeError });
        };
        this._saveAttributes = async () => {
            const { context, data } = this.props.accountProfileProps;
            const customer = data.customerInformation.result;
            if (customer && context) {
                this._addOrUpdateAttribute(customer);
                const input = new updateCustomerAttributesInput(customer.AccountNumber, customer.Attributes || [], context.request.apiSettings, customer.Phone, customer.VatNumber);
                this.isUpdatingAttributes = true;
                this.gotException = false;
                if (!this.hasError) {
                    this.setState({ editAttributes: false });
                    try {
                        await updateCustomerAttributes(input, context.actionContext);
                    }
                    catch (error) {
                        this.gotException = true;
                        customer.Attributes = this.initialCustomerAttributes;
                        if (context.telemetry) {
                            context.telemetry.exception(error);
                            context.telemetry.debug('Unable to update customer attributes');
                        }
                        this.setState({ attributeError: {}, attributes: this.initialAttributes, phone: this.initialPhone, vatNumber: this.initialVatNumber });
                    }
                    this.setState({ editAttributes: false });
                    if (!this.gotException) {
                        this.initialAttributes = this.state.attributes;
                        this.initialCustomerAttributes = customer.Attributes;
                        this.initialPhone = this.state.phone;
                        this.initialVatNumber = this.state.vatNumber;
                    }
                }
                this.isUpdatingAttributes = false;
                if (MsDyn365.isBrowser) {
                    setTimeout(() => {
                        this._setFocus(this.editRef.current);
                    }, 0);
                }
            }
        };
        this._setFocus = (element) => {
            element?.focus();
        };
        this._buildPayloadData = () => {
            const { data } = this.props.accountProfileProps;
            const attributeDefinitions = data.attributeDefinitions.result || [];
            const attributes = {};
            attributeDefinitions.forEach(attributeDefinition => {
                const attributePayloadData = {};
                attributePayloadData.recordId = attributeDefinition.RecordId;
                attributePayloadData.name = attributeDefinition.Name;
                attributePayloadData.dataTypeValue = attributeDefinition.DataTypeValue;
                attributePayloadData.isEnumeration = attributeDefinition.IsEnumeration;
                attributePayloadData.isMandatory = attributeDefinition.IsMandatory;
                switch (attributeDefinition.DataTypeValue) {
                    case 4:
                        const defaultIntegerValue = attributeDefinition.DefaultValue && attributeDefinition.DefaultValue.IntegerValue;
                        attributePayloadData.lowerBoundValue = attributeDefinition.LowerBound && attributeDefinition.LowerBound.IntegerValue;
                        attributePayloadData.upperBoundValue = attributeDefinition.UpperBound && attributeDefinition.UpperBound.IntegerValue;
                        if (attributePayloadData.name && defaultIntegerValue) {
                            attributePayloadData.defaultValue = String(defaultIntegerValue);
                            attributes[attributePayloadData.name] = String(defaultIntegerValue);
                        }
                        break;
                    case 3:
                        const defaultDecimalValue = attributeDefinition.DefaultValue && attributeDefinition.DefaultValue.DecimalValue;
                        attributePayloadData.lowerBoundValue = attributeDefinition.LowerBound && attributeDefinition.LowerBound.DecimalValue;
                        attributePayloadData.upperBoundValue = attributeDefinition.UpperBound && attributeDefinition.UpperBound.DecimalValue;
                        if (attributePayloadData.name && defaultDecimalValue) {
                            attributePayloadData.defaultValue = String(defaultDecimalValue);
                            attributes[attributePayloadData.name] = String(defaultDecimalValue);
                        }
                        break;
                    case 5:
                        const defaultStringValue = attributeDefinition.DefaultValue && attributeDefinition.DefaultValue.StringValue;
                        if (attributePayloadData.name && defaultStringValue) {
                            attributePayloadData.defaultValue = defaultStringValue;
                            attributes[attributePayloadData.name] = defaultStringValue;
                        }
                        break;
                    case 6:
                        const defaultBooleanValue = attributeDefinition.DefaultValue && attributeDefinition.DefaultValue.BooleanValue || false;
                        if (attributePayloadData.name) {
                            attributePayloadData.defaultValue = String(defaultBooleanValue);
                            attributes[attributePayloadData.name] = String(defaultBooleanValue);
                        }
                        break;
                    default:
                }
                this.attributePayloadData.push(attributePayloadData);
            });
            Object.keys(attributes).length > 0 && this.setState({ attributes: attributes });
        };
        this._getCustomerPhoneAndVatNumber = () => {
            const customer = this.props.accountProfileProps.data.customerInformation.result;
            const phone = customer && customer.Phone || '';
            const vatNumber = customer && customer.VatNumber || '';
            this.setState({ phone: phone, vatNumber: vatNumber });
            if (this.initialPhone.length === 0) {
                this.initialPhone = phone;
            }
            if (this.initialVatNumber.length === 0) {
                this.initialVatNumber = vatNumber;
            }
        };
        this.state = {
            editAttributes: false,
            phone: '',
            vatNumber: '',
            attributes: {},
            attributeError: {}
        };
        this.initialAttributes = {};
        this.initialCustomerAttributes = [];
        this.initialPhone = '';
        this.initialVatNumber = '';
        this.attributePayloadData = [];
        const telemetryPageName = this.props.accountProfileProps && this.props.accountProfileProps.context && this.props.accountProfileProps.context.request && this.props.accountProfileProps.context.request.telemetryPageName || '';
        const friendlyName = this.props.accountProfileProps && this.props.accountProfileProps.friendlyName || '';
        const telemetry = this.props.accountProfileProps && this.props.accountProfileProps.telemetry || {};
        this.telemetryContent = getTelemetryObject(telemetryPageName, friendlyName, telemetry);
        this.payLoad = getPayloadObject('click', this.telemetryContent, '');
        this.editRef = React.createRef();
        this.attributesContainerRef = React.createRef();
    }
    componentDidMount() {
        this._buildPayloadData();
        this._getAttributes();
        this._getCustomerPhoneAndVatNumber();
        reaction(() => this.props.accountProfileProps.data.customerInformation.result, () => {
            const customerInformation = this.props.accountProfileProps.data.customerInformation.result;
            this.initialCustomerAttributes = customerInformation && customerInformation.Attributes;
            this._getAttributes();
            this._getCustomerPhoneAndVatNumber();
        });
        reaction(() => this.props.accountProfileProps.data.attributeDefinitions.result, () => {
            this._buildPayloadData();
        });
    }
    render() {
        return this._renderAttributes();
    }
};
__decorate([
    observable
], AccountProfileAttributes.prototype, "isUpdatingAttributes", void 0);
__decorate([
    observable
], AccountProfileAttributes.prototype, "gotException", void 0);
AccountProfileAttributes = __decorate([
    observer
], AccountProfileAttributes);
export default AccountProfileAttributes;
//# sourceMappingURL=account-profile-attributes.js.map