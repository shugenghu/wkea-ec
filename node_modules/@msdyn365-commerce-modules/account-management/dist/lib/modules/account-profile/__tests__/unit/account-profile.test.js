import * as React from 'react';
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, shallow } from 'enzyme';
import AccountProfileModule from '../../account-profile';
const mockResources = {
    attributeInputValueExceedsMaximumErrorText: 'Value exceeds maximum error',
    attributeInputValueExceedsMinimumErrorText: 'Value exceeds minimum error',
    attributeInputMandatoryErrorText: 'Mandatory error',
    attributeInputStringMaxLengthErrorText: 'String max length error',
    attributeInputTypeErrorText: 'Type error',
    attributeInputRangeErrorText: 'Range error',
    attributeToggleButtonAriaLabel: 'Toggle',
    attributesEditButtonText: 'Edit',
    attributesSaveButtonText: 'Save',
    attributesCancelButtonText: 'Cancel',
    attributesEditButtonAriaLabel: 'Edit',
    attributesSaveButtonAriaLabel: 'Save',
    attributesCancelButtonAriaLabel: 'Cancel',
    attributesSaveExceptionMessage: 'Exception',
    editButtonText: 'Edit',
    editButtonAriaLabel: 'Edit',
    toggleEnableText: 'Yes',
    toggleDisableText: 'No',
    personalizationDescription: 'Allow personalization',
    personalizationEnableButtonAriaLabel: 'Enable personalization',
    personalizationDisableButtonAriaLabel: 'Disable personalization',
    webTrackingDescription: 'Enable browsing activity to be logged to enhance the browsing experience',
    webTrackingEnableButtonAriaLabel: 'Enable browsing activity to be logged',
    webTrackingDisableButtonAriaLabel: 'Disable browsing activity to be logged'
};
const mockConfig = {
    heading: {
        text: 'Mock heading 1',
        tag: "h1"
    },
    nameSectionHeading: {
        text: 'Name',
        tag: "h2"
    },
    emailAddressSectionHeading: {
        text: 'Email',
        tag: "h2"
    },
    preferencesSectionHeading: {
        text: 'Preferences',
        tag: "h2"
    },
    personalizationSectionHeading: {
        text: 'Personalization',
        tag: "h2"
    },
    webTrackingSectionHeading: {
        text: 'Browsing Activity Logging',
        tag: "h2"
    },
    className: 'test-class'
};
const mockData = {
    customerInformation: wrapInResolvedAsyncResult({
        Email: 'test@test.com',
        FirstName: 'First',
        LastName: 'Last'
    }),
    attributeDefinitions: wrapInResolvedAsyncResult([])
};
const mockProps = {
    resources: mockResources,
    renderView: jest.fn(),
    renderModuleAttributes: jest.fn()
};
const mockActionContext = buildHydratedMockActionContext();
const mockContext = buildMockCoreContext(mockActionContext);
describe('Account-Profile unit tests - Container', () => {
    it('renders correctly if all props is provided ', () => {
        const moduleProps = {
            config: mockConfig,
            data: mockData,
            context: {
                request: {
                    features: {}
                }
            },
            ...mockProps
        };
        shallow(React.createElement(AccountProfileModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toMatchSnapshot();
    });
    it('does not render extra preferences if enableDataAnalytics feature is disabled', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => React.createElement("div", { props: props }))
        };
        moduleProps.context.request.features.enableDataAnalytics = false;
        const accountProfile = mount(React.createElement(AccountProfileModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = accountProfile.childAt(0).props().props;
        expect(viewProps.preferenceSection.extraPreferences.length).toEqual(0);
    });
    it('render extra preferences if enableDataAnalytics feature is enabled', () => {
        mockActionContext.requestContext.features = { enableDataAnalytics: true };
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => React.createElement("div", { props: props }))
        };
        moduleProps.context.request.features.enableDataAnalytics = true;
        const accountProfile = mount(React.createElement(AccountProfileModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = accountProfile.childAt(0).props().props;
        expect(viewProps.preferenceSection.extraPreferences.length).toBeGreaterThan(0);
    });
});
//# sourceMappingURL=account-profile.test.js.map