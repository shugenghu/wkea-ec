import { mount, shallow } from 'enzyme';
import * as React from 'react';
import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockCoreContext } from '@msdyn365-commerce/core';
import AccountProfileAttributes from '../../components/account-profile-attributes';
const mockResources = {
    attributesEditButtonText: 'Edit',
    attributesSaveButtonText: 'Save',
    attributesCancelButtonText: 'Cancel',
    attributesEditButtonAriaLabel: 'Edit',
    attributesSaveButtonAriaLabel: 'Save',
    attributesCancelButtonAriaLabel: 'Cancel',
    attributeInputTypeErrorText: 'Type error',
    attributeInputRangeErrorText: 'Range error',
    attributeToggleButtonAriaLabel: 'Toggle',
    attributesSaveExceptionMessage: 'Exception',
    editButtonText: 'Edit',
    editButtonAriaLabel: 'Edit',
    toggleEnableText: 'Yes',
    toggleDisableText: 'No',
    personalizationDescription: 'Allow personalization',
    personalizationEnableButtonAriaLabel: 'Enable personalization',
    personalizationDisableButtonAriaLabel: 'Disable personalization',
    webTrackingDescription: 'Enable browsing activity to be logged to enhance the browsing experience',
    webTrackingEnableButtonAriaLabel: 'Enable browsing activity to be logged',
    webTrackingDisableButtonAriaLabel: 'Disable browsing activity to be logged'
};
const mockConfig = {
    heading: {
        text: 'Mock heading 1',
        tag: "h1"
    },
    nameSectionHeading: {
        text: 'Name',
        tag: "h2"
    },
    emailAddressSectionHeading: {
        text: 'Email',
        tag: "h2"
    },
    preferencesSectionHeading: {
        text: 'Preferences',
        tag: "h2"
    },
    personalizationSectionHeading: {
        text: 'Personalization',
        tag: "h2"
    },
    webTrackingSectionHeading: {
        text: 'Browsing Activity Logging',
        tag: "h2"
    },
    className: 'test-class',
    additionalInformationSectionHeading: { tag: "h2", text: 'Additional information' },
    showPhone: true,
    phoneSectionHeading: { tag: "h3", text: 'Phone' },
    showVatNumber: true,
    vatNumberSectionHeading: { tag: "h3", text: 'Vat number' },
    showAttributes: 'FabrikamTest_Bool,FabrikamTest_IntRange,FabrikamTest_List,FabrikamTest_String,Fabrikam_Int,Fabrikam_Deci'
};
const attributeDefinitions = [
    {
        RecordId: 68719482932,
        Name: 'FabrikamTest_Bool',
        AttributeTypeName: 'TestCust_Bool',
        ExtDataType: {
            Name: 'TrueFalse',
            Value: 6
        },
        DataTypeValue: 6,
        IsHidden: false,
        IsMandatory: false,
        IsMultiValue: false,
        IsEnumeration: false,
        TranslationDetails: [
            {
                AttributeRecordId: 68719482932,
                LanguageId: 'en-us',
                FriendlyName: 'FabrikamTest_Bool',
                Description: '',
                HelpText: '',
                ExtensionProperties: []
            }
        ],
        EnumerationDetails: [],
        DefaultValue: undefined,
        UpperBound: undefined,
        LowerBound: undefined,
        DisplayOrder: 0,
        ExtensionProperties: []
    },
    {
        RecordId: 68719482933,
        Name: 'FabrikamTest_IntRange',
        AttributeTypeName: 'TestCust_IntRange',
        ExtDataType: {
            Name: 'Integer',
            Value: 4
        },
        DataTypeValue: 4,
        IsHidden: false,
        IsMandatory: false,
        IsMultiValue: false,
        IsEnumeration: false,
        TranslationDetails: [
            {
                AttributeRecordId: 68719482933,
                LanguageId: 'en-us',
                FriendlyName: 'FabrikamTest_IntRange',
                Description: '',
                HelpText: '',
                ExtensionProperties: []
            }
        ],
        EnumerationDetails: [],
        DefaultValue: {
            BooleanValue: undefined,
            ByteValue: undefined,
            DateTimeOffsetValue: undefined,
            DecimalValue: undefined,
            IntegerValue: 1,
            LongValue: undefined,
            StringValue: undefined
        },
        UpperBound: {
            BooleanValue: undefined,
            ByteValue: undefined,
            DateTimeOffsetValue: undefined,
            DecimalValue: undefined,
            IntegerValue: 8,
            LongValue: undefined,
            StringValue: undefined
        },
        LowerBound: {
            BooleanValue: undefined,
            ByteValue: undefined,
            DateTimeOffsetValue: undefined,
            DecimalValue: undefined,
            IntegerValue: 1,
            LongValue: undefined,
            StringValue: undefined
        },
        DisplayOrder: 0,
        ExtensionProperties: []
    },
    {
        RecordId: 68719482934,
        Name: 'FabrikamTest_List',
        AttributeTypeName: 'TestCust_List',
        ExtDataType: {
            Name: 'Text',
            Value: 5
        },
        DataTypeValue: 5,
        IsHidden: false,
        IsMandatory: false,
        IsMultiValue: false,
        IsEnumeration: true,
        TranslationDetails: [
            {
                AttributeRecordId: 68719482934,
                LanguageId: 'en-us',
                FriendlyName: 'FabrikamTest_List',
                Description: '',
                HelpText: '',
                ExtensionProperties: []
            }
        ],
        EnumerationDetails: [
            {
                OrdinalNumber: 1,
                EnumerationValue: 'Option 1',
                AttributeEnumerationTranslations: [],
                ExtensionProperties: []
            },
            {
                OrdinalNumber: 2,
                EnumerationValue: 'Option 2',
                AttributeEnumerationTranslations: [],
                ExtensionProperties: []
            },
            {
                OrdinalNumber: 3,
                EnumerationValue: 'Option 3',
                AttributeEnumerationTranslations: [],
                ExtensionProperties: []
            },
            {
                OrdinalNumber: 4,
                EnumerationValue: 'Option 4',
                AttributeEnumerationTranslations: [],
                ExtensionProperties: []
            }
        ],
        DefaultValue: {
            BooleanValue: undefined,
            ByteValue: undefined,
            DateTimeOffsetValue: undefined,
            DecimalValue: undefined,
            IntegerValue: undefined,
            LongValue: undefined,
            StringValue: 'Option 1'
        },
        UpperBound: undefined,
        LowerBound: undefined,
        DisplayOrder: 0,
        ExtensionProperties: []
    },
    {
        RecordId: 68719482935,
        Name: 'FabrikamTest_String',
        AttributeTypeName: 'TestCust_String',
        ExtDataType: {
            Name: 'Text',
            Value: 5
        },
        DataTypeValue: 5,
        IsHidden: false,
        IsMandatory: false,
        IsMultiValue: false,
        IsEnumeration: false,
        TranslationDetails: [
            {
                AttributeRecordId: 68719482935,
                LanguageId: 'en-us',
                FriendlyName: 'FabrikamTest_String',
                Description: '',
                HelpText: '',
                ExtensionProperties: []
            }
        ],
        EnumerationDetails: [],
        DefaultValue: undefined,
        UpperBound: undefined,
        LowerBound: undefined,
        DisplayOrder: 0,
        ExtensionProperties: []
    },
    {
        RecordId: 68719483682,
        Name: 'Fabrikam_Int',
        AttributeTypeName: 'TestInteger',
        ExtDataType: {
            Name: 'Integer',
            Value: 4
        },
        DataTypeValue: 4,
        IsHidden: false,
        IsMandatory: false,
        IsMultiValue: false,
        IsEnumeration: false,
        TranslationDetails: [
            {
                AttributeRecordId: 68719483682,
                LanguageId: 'en-us',
                FriendlyName: 'Fabrikam_Int',
                Description: '',
                HelpText: '',
                ExtensionProperties: []
            }
        ],
        EnumerationDetails: [],
        DefaultValue: undefined,
        UpperBound: undefined,
        LowerBound: undefined,
        DisplayOrder: 0,
        ExtensionProperties: []
    },
    {
        RecordId: 68719483683,
        Name: 'Fabrikam_Deci',
        AttributeTypeName: 'TestDecimal',
        ExtDataType: {
            Name: 'Decimal',
            Value: 3
        },
        DataTypeValue: 3,
        IsHidden: false,
        IsMandatory: false,
        IsMultiValue: false,
        IsEnumeration: false,
        TranslationDetails: [
            {
                AttributeRecordId: 68719483683,
                LanguageId: 'en-us',
                FriendlyName: 'Fabrikam_Deci',
                Description: '',
                HelpText: '',
                ExtensionProperties: []
            }
        ],
        EnumerationDetails: [],
        DefaultValue: undefined,
        UpperBound: undefined,
        LowerBound: undefined,
        DisplayOrder: 0,
        ExtensionProperties: []
    }
];
const mockCustomerAttributes = [
    {
        AttributeValue: {
            BooleanValue: false,
            IntegerValue: undefined,
            StringValue: undefined
        },
        Units: '',
        RecordId: 68719482932,
        Name: 'FabrikamTest_Bool',
        KeyName: undefined,
        DataTypeValue: 6,
        Attribute: 0,
        NameTranslations: [],
        ExtensionProperties: []
    },
    {
        AttributeValue: {
            BooleanValue: undefined,
            IntegerValue: 1,
            StringValue: undefined
        },
        Units: '',
        RecordId: 68719482933,
        Name: 'FabrikamTest_IntRange',
        KeyName: undefined,
        DataTypeValue: 4,
        Attribute: 0,
        NameTranslations: [],
        ExtensionProperties: []
    },
    {
        AttributeValue: {
            BooleanValue: undefined,
            IntegerValue: undefined,
            StringValue: 'Option 1'
        },
        Units: '',
        RecordId: 68719482934,
        Name: 'FabrikamTest_List',
        KeyName: undefined,
        DataTypeValue: 5,
        Attribute: 0,
        NameTranslations: [],
        ExtensionProperties: []
    },
    {
        AttributeValue: {
            BooleanValue: undefined,
            IntegerValue: undefined,
            StringValue: 'abc'
        },
        Units: '',
        RecordId: 68719482935,
        Name: 'FabrikamTest_String',
        KeyName: undefined,
        DataTypeValue: 5,
        Attribute: 0,
        NameTranslations: [],
        ExtensionProperties: []
    },
    {
        AttributeValue: {
            BooleanValue: undefined,
            IntegerValue: 2,
            StringValue: undefined
        },
        Units: '',
        RecordId: 68719483682,
        Name: 'Fabrikam_Int',
        KeyName: undefined,
        DataTypeValue: 4,
        Attribute: 0,
        NameTranslations: [],
        ExtensionProperties: []
    },
    {
        AttributeValue: {
            BooleanValue: undefined,
            DecimalValue: 3.3,
            IntegerValue: undefined,
            StringValue: undefined
        },
        Units: '',
        RecordId: 68719483683,
        Name: 'Fabrikam_Deci',
        KeyName: undefined,
        DataTypeValue: 3,
        Attribute: 0,
        NameTranslations: [],
        ExtensionProperties: []
    }
];
const mockData = {
    customerInformation: RetailActions.wrapInResolvedAsyncResult({
        Email: 'test@test.com',
        FirstName: 'First',
        LastName: 'Last',
        Phone: '1234',
        VatNumber: 'abcd',
        Attributes: mockCustomerAttributes
    }),
    attributeDefinitions: RetailActions.wrapInResolvedAsyncResult(attributeDefinitions)
};
const mockProps = {
    resources: mockResources,
    renderView: jest.fn(),
    renderModuleAttributes: jest.fn()
};
const mockActionContext = buildHydratedMockActionContext();
const mockContext = buildMockCoreContext(mockActionContext);
describe('Account-Profile unit tests - Attributes', () => {
    it('renders correctly', () => {
        const moduleProps = {
            accountProfileProps: {
                config: mockConfig,
                data: mockData,
                context: mockContext,
                ...mockProps
            }
        };
        shallow(React.createElement(AccountProfileAttributes, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toMatchSnapshot();
    });
});
it('Account-Profile unit tests - _saveAttributes', () => {
    const moduleProps = {
        accountProfileProps: {
            config: mockConfig,
            data: mockData,
            context: mockContext,
            ...mockProps
        }
    };
    const wrapper = mount(React.createElement(AccountProfileAttributes, Object.assign({}, moduleProps)));
    const accountProfileAttributes = wrapper.instance();
    accountProfileAttributes._saveAttributes();
    expect(accountProfileAttributes.state.editAttributes).toBe(false);
    wrapper.unmount();
});
it('Account-Profile unit tests - _disableAttributes', () => {
    const moduleProps = {
        accountProfileProps: {
            config: mockConfig,
            data: mockData,
            context: mockContext,
            ...mockProps
        }
    };
    const wrapper = mount(React.createElement(AccountProfileAttributes, Object.assign({}, moduleProps)));
    const accountProfileAttributes = wrapper.instance();
    accountProfileAttributes._disableAttributes();
    expect(accountProfileAttributes.state.editAttributes).toBe(false);
    wrapper.unmount();
});
it('Account-Profile unit tests - _enableAttributes', () => {
    const moduleProps = {
        accountProfileProps: {
            config: mockConfig,
            data: mockData,
            context: mockContext,
            ...mockProps
        }
    };
    const wrapper = mount(React.createElement(AccountProfileAttributes, Object.assign({}, moduleProps)));
    const accountProfileAttributes = wrapper.instance();
    accountProfileAttributes._enableAttributes();
    expect(accountProfileAttributes.state.editAttributes).toBe(true);
    wrapper.unmount();
});
it('Account-Profile unit tests - no data and no config', () => {
    const mockDataWithNoAttributes = {
        customerInformation: RetailActions.wrapInResolvedAsyncResult({
            Email: 'test@test.com',
            FirstName: 'First',
            LastName: 'Last',
            Phone: undefined,
            VatNumber: undefined,
            Attributes: undefined
        }),
        attributeDefinitions: RetailActions.wrapInResolvedAsyncResult([{ RecordId: 0 }])
    };
    const mockConfigWithNoHeadings = {
        heading: {
            text: '',
            tag: undefined
        },
        nameSectionHeading: {
            text: '',
            tag: undefined
        },
        emailAddressSectionHeading: {
            text: '',
            tag: undefined
        },
        preferencesSectionHeading: {
            text: '',
            tag: undefined
        },
        personalizationSectionHeading: {
            text: '',
            tag: undefined
        },
        webTrackingSectionHeading: {
            text: '',
            tag: undefined
        },
        className: 'test-class',
        additionalInformationSectionHeading: { tag: "h2", text: '' },
        showPhone: true,
        phoneSectionHeading: { tag: "h3", text: '' },
        showVatNumber: true,
        vatNumberSectionHeading: { tag: "h3", text: '' },
        showAttributes: undefined
    };
    const moduleProps = {
        accountProfileProps: {
            config: mockConfigWithNoHeadings,
            data: mockDataWithNoAttributes,
            context: mockContext,
            ...mockProps
        }
    };
    const wrapper = mount(React.createElement(AccountProfileAttributes, Object.assign({}, moduleProps)));
    const accountProfileAttributes = wrapper.instance();
    accountProfileAttributes.gotException = true;
    expect(accountProfileAttributes.state.editAttributes).toBe(false);
    wrapper.unmount();
});
//# sourceMappingURL=account-profile-attributes.test.js.map