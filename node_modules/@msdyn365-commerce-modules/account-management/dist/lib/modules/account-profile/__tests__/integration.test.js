import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import AccountProfileModule from '../account-profile';
import AccountProfileView from '../account-profile.view';
const mockData = {
    customerInformation: wrapInResolvedAsyncResult({
        AccountNumber: '1',
        Email: 'test@test.com',
        FirstName: 'First',
        LastName: 'Last'
    }),
    attributeDefinitions: wrapInResolvedAsyncResult([])
};
const mockConfig = {
    heading: {
        text: 'Mock heading 1',
        tag: "h1"
    },
    nameSectionHeading: {
        text: 'Name',
        tag: "h2"
    },
    emailAddressSectionHeading: {
        text: 'Email',
        tag: "h2"
    },
    preferencesSectionHeading: {
        text: 'Preferences',
        tag: "h2"
    },
    personalizationSectionHeading: {
        text: 'Personalization',
        tag: "h2"
    },
    className: 'test-class'
};
const mockResources = {
    attributeInputValueExceedsMaximumErrorText: 'Value exceeds maximum error',
    attributeInputValueExceedsMinimumErrorText: 'Value exceeds minimum error',
    attributeInputMandatoryErrorText: 'Mandatory error',
    attributeInputStringMaxLengthErrorText: 'String max length error',
    attributeInputTypeErrorText: 'Type error',
    attributeInputRangeErrorText: 'Range error',
    attributeToggleButtonAriaLabel: 'Toggle',
    attributesEditButtonText: 'Edit',
    attributesSaveButtonText: 'Save',
    attributesCancelButtonText: 'Cancel',
    attributesEditButtonAriaLabel: 'Edit',
    attributesSaveButtonAriaLabel: 'Save',
    attributesCancelButtonAriaLabel: 'Cancel',
    attributesSaveExceptionMessage: 'Exception',
    editButtonText: 'Edit',
    editButtonAriaLabel: 'Edit',
    toggleEnableText: 'Yes',
    toggleDisableText: 'No',
    personalizationDescription: 'Allow personalization',
    personalizationEnableButtonAriaLabel: 'Enable personalization',
    personalizationDisableButtonAriaLabel: 'Disable personalization',
    webTrackingDescription: 'Allow Web Tracking',
    webTrackingEnableButtonAriaLabel: 'Enable web tracking',
    webTrackingDisableButtonAriaLabel: 'Disable web tracking'
};
describe('AccountProfile', () => {
    it('renders correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockData, {}, mockConfig),
            resources: mockResources,
            renderView: AccountProfileView
        };
        const component = render(React.createElement(AccountProfileModule, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=integration.test.js.map