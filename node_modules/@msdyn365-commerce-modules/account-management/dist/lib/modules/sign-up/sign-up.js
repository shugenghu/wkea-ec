import { __decorate } from "tslib";
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { Modal, ModalBody } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import SignUpButtonComponent from './components/sign-up-button';
import SignUpErrorComponent from './components/sign-up-error';
import SignUpInputComponent from './components/sign-up-input';
import SignUpLabelComponent from './components/sign-up-label';
import SignUpLoadingIconComponent from './components/sign-up-loading-icon';
import SignUpLoadingMessageComponent from './components/sign-up-loading-message';
import SignUpSuccessComponent from './components/sign-up-success';
let SignUp = class SignUp extends React.Component {
    constructor(props) {
        super(props);
        this.moduleClassName = 'ms-sign-up';
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this.handleParagraphChange = (event) => this.props.config.disclaimer = event.target.value;
        this._onInit = () => {
            this._prePopulateData();
            this._updateErrorMessage();
            this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);
            setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);
        };
        this._isInitializationSuccessful = () => {
            if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
                clearInterval(this.initializationTimer);
                this.isInitialized = true;
            }
        };
        this._prePopulateData = () => {
            const resources = this.props.resources || {};
            if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
                window['SA_FIELDS']['AttributeFields'].map((obj) => {
                    switch (obj.ID.toLowerCase()) {
                        case 'email': {
                            this.emailRegex = obj.PAT;
                            this.isEmailVerificationRequried = obj.VERIFY;
                            break;
                        }
                        case 'newpassword': {
                            this.newPasswordRegex = obj.PAT;
                            break;
                        }
                        case 'reenterpassword': {
                            this.reenterPasswordRegex = obj.PAT;
                            break;
                        }
                        default:
                    }
                    switch (obj.UX_INPUT_TYPE.toLowerCase()) {
                        case 'password': {
                            obj.PAT_DESC = resources.invalidPasswordError;
                            break;
                        }
                        case 'emailbox': {
                            obj.PAT_DESC = resources.invalidEmailAddressError;
                            break;
                        }
                        default:
                    }
                });
            }
        };
        this._updateErrorMessage = () => {
            const resources = this.props.resources || {};
            if (window && window['CONTENT']) {
                const errorMessages = {
                    required_field: resources.requiredFieldMissingError
                };
                Object.assign(window['CONTENT'], errorMessages);
            }
        };
        const passwordDefaultRegex = '^((?=.*[a-z])(?=.*[A-Z])(?=.*\\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]))([A-Za-z\\d@#$%^&*\\-_+=[\\]{}|\\\\:\',?/`~\'();!]|\\.(?!@)){8,16}$';
        this.emailRegex = '^[a-zA-Z0-9.!#$%&\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$';
        this.newPasswordRegex = passwordDefaultRegex;
        this.reenterPasswordRegex = passwordDefaultRegex;
        this.isEmailVerificationRequried = false;
        this.isInitialized = false;
    }
    componentDidMount() {
        this._onInit();
    }
    componentDidUpdate() {
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            window['$element']['initialize']();
        }
    }
    render() {
        const { config, resources } = this.props;
        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            signUp: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: React.createElement(SignUpLoadingIconComponent, { className: this.moduleClassName }),
                message: React.createElement(SignUpLoadingMessageComponent, { className: this.moduleClassName, message: resources.loadingMessage }),
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            heading: React.createElement(Msdyn365.Text, Object.assign({ className: `${this.moduleClassName}__heading` }, config.heading, { editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
            signUpLocalAccount: this._renderLocalAccount()
        };
        return this.props.renderView(viewProps);
    }
    _renderLocalAccount() {
        const { config, resources } = this.props;
        return {
            localAccount: {
                id: 'attributeList',
                className: `${this.moduleClassName}__account-items attr`
            },
            items: [
                this._renderInput('givenName', 'text', resources.firstNameLabelText, resources.firstNameMaxLength),
                this._renderInput('surname', 'text', resources.lastNameLabelText, resources.lastNameMaxLength),
                this._renderInput('email', 'email', resources.emailAddressLabelText, undefined, this.emailRegex),
                this._renderInput('newPassword', 'password', resources.passwordLabelText, undefined, this.newPasswordRegex),
                this._renderInput('reenterPassword', 'password', resources.confirmPasswordLabelText, undefined, this.reenterPasswordRegex)
            ],
            emailVerification: {
                isRequired: this.isEmailVerificationRequried,
                email: this._renderInput('email_ver_input', 'text', resources.verificationCodeLabelText),
                buttonWrapper: {
                    className: `${this.moduleClassName}__email-verification-buttons verify`,
                    'data-claim_id': 'email'
                },
                buttons: [
                    (React.createElement(SignUpButtonComponent, { key: 'email_ver_but_send', id: 'email_ver_but_send', className: `${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-send-button sendButton`, ariaLabel: resources.sendCodeButtonAriaLabel, text: resources.sendCodeButtonText })),
                    (React.createElement(SignUpButtonComponent, { key: 'email_ver_but_verify', id: 'email_ver_but_verify', className: `${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-verify-button verifyButton`, ariaLabel: resources.verifyCodeButtonAriaLabel, text: resources.verifyCodeButtonText })),
                    (React.createElement(SignUpButtonComponent, { key: 'email_ver_but_resend', id: 'email_ver_but_resend', className: `${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-resend-button sendButton`, ariaLabel: resources.resendCodeButtonAriaLabel, text: resources.resendCodeButtonText })),
                    (React.createElement(SignUpButtonComponent, { key: 'email_ver_but_edit', id: 'email_ver_but_edit', className: `${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-edit-button editButton`, ariaLabel: resources.changeEmailButtonAriaLabel, text: resources.changeEmailButtonText }))
                ],
                successMessage: [
                    React.createElement(SignUpSuccessComponent, { key: 'email_info', id: 'email_info', className: this.moduleClassName, message: resources.verificationCodeSendSuccess }),
                    React.createElement(SignUpSuccessComponent, { key: 'email_success', id: 'email_success', className: this.moduleClassName, message: resources.emailAddressVerifiedSuccess })
                ],
                errorMessage: [
                    React.createElement(SignUpErrorComponent, { key: 'email_fail_retry', id: 'email_fail_retry', className: this.moduleClassName, message: resources.retryError }),
                    React.createElement(SignUpErrorComponent, { key: 'email_fail_no_retry', id: 'email_fail_no_retry', className: this.moduleClassName, message: resources.retryNotAllowedError }),
                    React.createElement(SignUpErrorComponent, { key: 'email_fail_throttled', id: 'email_fail_throttled', className: this.moduleClassName, message: resources.throttledError }),
                    React.createElement(SignUpErrorComponent, { key: 'email_fail_code_expired', id: 'email_fail_code_expired', className: this.moduleClassName, message: resources.codeExpiredError }),
                    React.createElement(SignUpErrorComponent, { key: 'email_fail_server', id: 'email_fail_server', className: this.moduleClassName, message: resources.serverError }),
                    React.createElement(SignUpErrorComponent, { key: 'email_incorrect_format', id: 'email_incorrect_format', className: this.moduleClassName, message: resources.invalidEmailError })
                ]
            },
            buttons: [
                React.createElement(SignUpButtonComponent, { key: 'continue', id: 'continue', className: `${this.moduleClassName}__create-button`, ariaLabel: resources.signUpButtonArialabel, text: resources.signUpButtonText }),
                React.createElement(SignUpButtonComponent, { key: 'cancel', id: 'cancel', className: `${this.moduleClassName}__cancel-button`, ariaLabel: resources.cancelButtonArialabel, text: resources.cancelButtonText })
            ],
            errorMessage: [
                React.createElement(SignUpErrorComponent, { key: 'passwordEntryMismatch', id: 'passwordEntryMismatch', className: this.moduleClassName, message: resources.passwordEntryMismatchError }),
                React.createElement(SignUpErrorComponent, { key: 'requiredFieldMissing', id: 'requiredFieldMissing', className: this.moduleClassName, message: resources.requiredFieldMissingSummaryError }),
                React.createElement(SignUpErrorComponent, { key: 'fieldIncorrect', id: 'fieldIncorrect', className: this.moduleClassName, message: resources.fieldIncorrectError }),
                React.createElement(SignUpErrorComponent, { key: 'claimVerificationServerError', id: 'claimVerificationServerError', className: this.moduleClassName })
            ],
            disclaimer: config.disclaimer && (React.createElement(Msdyn365.RichTextComponent, { className: `${this.moduleClassName}__sign-up-disclaimer`, text: config.disclaimer, editProps: { onEdit: this.handleParagraphChange, requestContext: this.props.context.request } })),
        };
    }
    _renderInput(id, type, labelText, maxLength, pattern) {
        const className = `${this.moduleClassName}__account-item`;
        return ({
            wrapper: {
                className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
            },
            key: id,
            label: (React.createElement(SignUpLabelComponent, Object.assign({}, {
                id: id,
                forId: id,
                className: className,
                text: labelText
            }))),
            errorMessage: (React.createElement(SignUpErrorComponent, Object.assign({}, {
                className: this.moduleClassName,
                type: 'item'
            }))),
            input: (React.createElement(SignUpInputComponent, Object.assign({}, {
                id: id,
                type: type,
                maxLength: maxLength,
                pattern: pattern,
                className: className
            })))
        });
    }
};
__decorate([
    observable
], SignUp.prototype, "emailRegex", void 0);
__decorate([
    observable
], SignUp.prototype, "newPasswordRegex", void 0);
__decorate([
    observable
], SignUp.prototype, "reenterPasswordRegex", void 0);
__decorate([
    observable
], SignUp.prototype, "isEmailVerificationRequried", void 0);
__decorate([
    observable
], SignUp.prototype, "isInitialized", void 0);
SignUp = __decorate([
    observer
], SignUp);
export default SignUp;
//# sourceMappingURL=sign-up.js.map