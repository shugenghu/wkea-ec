import * as React from 'react';
import { Module, Node } from '@msdyn365-commerce-modules/utilities';
const SignUpItem = ({ wrapper, label, errorMessage, input }) => {
    return (React.createElement(Node, Object.assign({}, wrapper),
        label,
        errorMessage,
        input));
};
const SignUpEmailVerification = ({ email, buttonWrapper, buttons, successMessage, errorMessage }) => {
    return (React.createElement(React.Fragment, null,
        React.createElement(SignUpItem, Object.assign({ key: email.key }, email)),
        successMessage && successMessage.map((message) => {
            return (React.createElement(React.Fragment, null, message));
        }),
        errorMessage && errorMessage.map((message) => {
            return (React.createElement(React.Fragment, null, message));
        }),
        React.createElement(Node, Object.assign({}, buttonWrapper), buttons && buttons.map((button) => {
            return (React.createElement(React.Fragment, null, button));
        }))));
};
const LocalAccount = ({ localAccount, items, emailVerification, buttons, errorMessage, disclaimer }) => {
    return (React.createElement(Node, Object.assign({}, localAccount),
        items && items.map((item) => {
            if (item.key === 'email' && emailVerification.isRequired) {
                return (React.createElement(React.Fragment, null,
                    React.createElement(SignUpItem, Object.assign({ key: item.key }, item)),
                    React.createElement(SignUpEmailVerification, Object.assign({}, emailVerification))));
            }
            return (React.createElement(SignUpItem, Object.assign({ key: item.key }, item)));
        }),
        errorMessage && errorMessage.map((error, index) => {
            return (React.createElement(React.Fragment, { key: index }, error));
        }),
        buttons && buttons.map((button, index) => {
            return (React.createElement(React.Fragment, { key: index }, button));
        }),
        disclaimer));
};
const SignUpLoading = ({ modal, modalBody, icon, message, }) => {
    return (React.createElement(Node, Object.assign({}, modal),
        React.createElement(Node, Object.assign({}, modalBody),
            icon,
            message)));
};
const SignUpView = props => {
    const { signUp, viewState, loading, defaultAADConainer, aadConainer, heading, signUpLocalAccount } = props;
    return (React.createElement(Module, Object.assign({}, signUp),
        viewState.isShowLoading && React.createElement(Node, Object.assign({}, defaultAADConainer)),
        viewState.isShowLoading && React.createElement(SignUpLoading, Object.assign({}, loading)),
        React.createElement(Node, Object.assign({}, aadConainer),
            heading,
            LocalAccount(signUpLocalAccount))));
};
export default SignUpView;
//# sourceMappingURL=sign-up.view.js.map