import { shallow } from 'enzyme';
import * as React from 'react';
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockRequest } from '@msdyn365-commerce/core';
import AccountWishlistTileModule from '../../account-wishlist-tile';
const mockResources = {
    accountAddressDescription: 'You have {0} address.'
};
const mockLink1 = {
    linkText: 'Mock link 1 title',
    linkUrl: {
        destinationUrl: 'Mock link 1 href'
    },
    ariaLabel: 'Mock link 1 alt text'
};
const mockHeading1 = {
    text: 'Mock heading 1',
    tag: "h1"
};
const mockConfigWithHeadingAndLink = {
    className: 'testClassName',
    heading: mockHeading1,
    links: [mockLink1]
};
const mockConfigWithHeading = {
    className: 'testClassName',
    heading: mockHeading1,
    links: []
};
const mockWishlistEmptyData = {
    wishlists: wrapInResolvedAsyncResult([])
};
const mockWishlistData = {
    wishlists: wrapInResolvedAsyncResult([{ CommerceListLines: [{}] }])
};
const mockRequest = buildMockRequest();
const mockContext = {
    request: mockRequest,
    app: {
        config: {
            hideRating: false
        },
    },
    cultureFormatter: {
        formatCurrency: jest.fn(price => `$${price}`)
    }
};
const mockProps = {
    resources: mockResources,
    renderView: jest.fn(),
    renderModuleAttributes: jest.fn()
};
describe('Account-Wishlist-Tile unit tests - Container', () => {
    it('renders correctly if all props is provided ', () => {
        const moduleProps = {
            config: mockConfigWithHeadingAndLink,
            data: mockWishlistData,
            context: mockContext,
            ...mockProps
        };
        shallow(React.createElement(AccountWishlistTileModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toMatchSnapshot();
    });
    it('renders correctly if address has no records', () => {
        const moduleProps = {
            config: mockConfigWithHeadingAndLink,
            data: mockWishlistEmptyData,
            context: mockContext,
            ...mockProps
        };
        shallow(React.createElement(AccountWishlistTileModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toMatchSnapshot();
    });
    it('renders correctly if links collection is empty', () => {
        const moduleProps = {
            config: mockConfigWithHeading,
            data: mockWishlistData,
            context: mockContext,
            ...mockProps
        };
        shallow(React.createElement(AccountWishlistTileModule, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toMatchSnapshot();
    });
});
//# sourceMappingURL=account-wishlist-tile.test.js.map