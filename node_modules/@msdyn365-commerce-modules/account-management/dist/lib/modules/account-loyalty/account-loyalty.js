import { __decorate } from "tslib";
import { Button, format, getPayloadObject, getTelemetryAttributes, getTelemetryObject, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { getLoyaltyRewardPointActivityTimelineAsync, getLoyaltyRewardPointsExpiringSoonAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { AccountLoyaltyLabel, AccountLoyaltyModalLabel } from './components';
let AccountLoyalty = class AccountLoyalty extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this._populateModalData = (focusRef, loyaltyCard, currentLoyaltyPoints, expiring) => () => {
            if (!loyaltyCard || !loyaltyCard.CardNumber || !currentLoyaltyPoints.RewardPointId) {
                this.props.context.telemetry.error('Modal data is empty, module wont render');
                return null;
            }
            const { actionContext } = this.props.context;
            this.setState({
                isModalOpen: true,
                currentModalData: currentLoyaltyPoints,
                isModalExpiring: expiring,
                modalID: '',
                currentFocus: focusRef,
            });
            if (expiring) {
                getLoyaltyRewardPointsExpiringSoonAsync({ callerContext: actionContext, queryResultSettings: {} }, loyaltyCard.CardNumber, currentLoyaltyPoints.RewardPointId, 30)
                    .then((points) => {
                    this.setState({ pointsActivity: points });
                })
                    .catch((error) => {
                    this.props.telemetry.exception(error);
                    this.props.telemetry.debug('Failed to get reward point activity');
                });
            }
            else {
                getLoyaltyRewardPointActivityTimelineAsync({ callerContext: actionContext, queryResultSettings: {} }, loyaltyCard.CardNumber, currentLoyaltyPoints.RewardPointId)
                    .then((points) => {
                    this.setState({ pointsActivity: points });
                })
                    .catch((error) => {
                    this.props.telemetry.error(error.message);
                    this.props.telemetry.debug('Failed to get reward point activity');
                });
            }
            return;
        };
        this._closeModal = () => {
            this.setState({
                isModalOpen: false,
                currentModalData: undefined,
                pointsActivity: undefined
            });
        };
        this._buttonAvailableRef = React.createRef();
        this._buttonExpireRef = React.createRef();
        this.state = {
            isModalOpen: false,
            currentModalData: undefined,
            isModalExpiring: false,
            modalID: '',
            pointsActivity: undefined
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this.payLoad = getPayloadObject('click', this.telemetryContent, TelemetryConstant.BackToShopping);
    }
    render() {
        const { className, heading } = this.props.config;
        const { loyaltyCard } = this.props.data;
        const { loyaltyCardLabel, totalAvailablePointsLabel, backToShoppingText } = this.props.resources;
        const { actionContext } = this.props.context;
        const { isModalOpen } = this.state;
        const backToShopAttributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
        if (!loyaltyCard || !loyaltyCard.result || !loyaltyCard.result.CardNumber) {
            this.props.context.telemetry.error('Loyalty card content is empty, module wont render');
            return null;
        }
        const loyaltyCardData = loyaltyCard.result;
        const rewardPoints = loyaltyCard && loyaltyCardData.RewardPoints;
        const homeLink = Msdyn365.getUrlSync('home', actionContext) || '';
        const viewProps = {
            ...this.props,
            AccountLoyalty: {
                moduleProps: this.props,
                className: classnames('ms-account-loyalty', className),
            },
            totalPoints: rewardPoints && this._getTotalPoints(),
            className: classnames('msc-account-loyalty', className),
            rewardPoints: loyaltyCardData.RewardPoints && loyaltyCardData.RewardPoints.length > 0 && this._renderRewardPoints(loyaltyCardData),
            pointsModal: isModalOpen && this._renderModal() || { isOpen: false, returnFocusRef: this.state.currentFocus },
            Info: { className: 'ms-account-loyalty__info' },
            Points: { className: 'ms-account-loyalty__points' },
            Breakdown: { className: 'ms-account-loyalty__breakdown' },
            RewardPoints: { className: 'ms-account-loyalty__reward-points' },
            PointsBreakdown: { className: 'ms-account-loyalty__point-breakdown' },
            Button: { className: 'ms-account-loyalty__link' },
            heading: heading &&
                (React.createElement(Msdyn365.Text, { className: 'ms-account-loyalty__heading', text: heading.text, tag: heading.tag || 'h2', editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
            infoLabel: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__info-label', text: loyaltyCardLabel })),
            cardNumber: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__card-number', text: loyaltyCardData.CardNumber })),
            joinDate: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__join-date', text: this._formatJoinDate(this._parseDate(loyaltyCardData.LoyaltyEnrollmentDateLocal)) })),
            pointsLabel: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__total-points-label', text: totalAvailablePointsLabel })),
            points: rewardPoints &&
                (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__total-points', text: this._getTotalPoints() })),
            homeButton: rewardPoints &&
                (React.createElement("a", Object.assign({ className: 'ms-account-loyalty__home-link msc-btn', href: homeLink }, backToShopAttributes), backToShoppingText))
        };
        return this.props.renderView(viewProps);
    }
    _formatJoinDate(date) {
        return format(this.props.resources.joinDateFormatted, new Intl.DateTimeFormat(this.props.context.actionContext.requestContext.locale, { month: 'long', day: 'numeric', year: 'numeric' }).format(new Date(date)));
    }
    _renderRewardPoints(loyaltyCard) {
        return loyaltyCard.RewardPoints.map((loyaltyPoints, index) => {
            const availableId = loyaltyPoints.RewardPointId && `${loyaltyPoints.RewardPointId}-available-${index}` || 'available-points';
            const expiringId = loyaltyPoints.RewardPointId && `${loyaltyPoints.RewardPointId}-expiring-${index}` || 'expiring-points';
            const { availablePointsLabel, expiringPointsFormatLabel } = this.props.resources;
            this.payLoad.contentAction.etext = TelemetryConstant.AvailablePoints;
            const availablePointsAttributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
            this.payLoad.contentAction.etext = TelemetryConstant.ExpiringPoints;
            const expiringPointsAttributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
            return ({
                label: (React.createElement(AccountLoyaltyModalLabel, { className: 'ms-account-loyalty__points-title', text: loyaltyPoints.Description })),
                availableModalLabel: loyaltyPoints.ActivePoints !== undefined &&
                    (React.createElement(AccountLoyaltyModalLabel, { className: 'ms-account-loyalty__available-points-label', text: availablePointsLabel, labelFor: availableId })),
                availableModalTrigger: loyaltyPoints.ActivePoints !== undefined &&
                    (React.createElement(Button, Object.assign({ className: 'ms-account-loyalty__points-trigger', color: 'link', onClick: this._populateModalData(this._buttonAvailableRef, loyaltyCard, loyaltyPoints, false), innerRef: this._buttonAvailableRef }, availablePointsAttributes), loyaltyPoints.ActivePoints.toString())),
                expiringModalLabel: loyaltyPoints.PointsExpiringSoon !== undefined &&
                    (React.createElement(AccountLoyaltyModalLabel, { className: 'ms-account-loyalty__expiring-points-label', text: format(expiringPointsFormatLabel, 30), labelFor: expiringId })),
                expiringModalTrigger: loyaltyPoints.PointsExpiringSoon !== undefined &&
                    (React.createElement(Button, Object.assign({ className: 'ms-account-loyalty__points-trigger', color: 'link', onClick: this._populateModalData(this._buttonExpireRef, loyaltyCard, loyaltyPoints, true), innerRef: this._buttonExpireRef }, expiringPointsAttributes), loyaltyPoints.PointsExpiringSoon.toString()))
            });
        });
    }
    _renderModal() {
        const { totalAvailablePointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel } = this.props.resources;
        const { isModalOpen, currentModalData } = this.state;
        if (!isModalOpen || !currentModalData) {
            this.props.context.telemetry.error('Account loyalty modal content is empty, module wont render');
            return null;
        }
        return {
            isOpen: isModalOpen,
            returnFocusRef: this.state.currentFocus,
            horizontalPosition: 'center',
            verticalPosition: 'center',
            modalClassName: 'ms-account-loyalty__points-modal',
            modalHeaderClassName: 'ms-account-loyalty__points-modal-header',
            modalHeader: currentModalData.Description || '',
            modalBodyClassName: 'ms-account-loyalty__points-modal-body',
            ModalBodyTop: { className: 'ms-account-loyalty__points-modal-body-top' },
            ModalBodyHeaders: { className: 'ms-account-loyalty__points-modal-body-header' },
            rewardPointsActivity: this._renderPointsActivity(),
            pointsDescription: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__points-modal-name', text: totalAvailablePointsLabel })),
            totalPoints: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__points-modal-total', text: this._getPoints() })),
            date: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__points-modal-date', text: loyaltyActivityDateLabel })),
            balanceLabel: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__points-modal-balance', text: loyaltyActivityBalanceLabel })),
            onClose: this._closeModal
        };
    }
    _getTotalPoints() {
        const rewardPoints = this.props.data.loyaltyCard.result && this.props.data.loyaltyCard.result.RewardPoints;
        let total = 0;
        rewardPoints.forEach(loyaltyPoints => {
            total += loyaltyPoints.ActivePoints || 0;
        });
        return total;
    }
    _getPoints() {
        const { currentModalData, isModalExpiring } = this.state;
        return `${(isModalExpiring ? currentModalData.PointsExpiringSoon : currentModalData.ActivePoints) || 0}`;
    }
    _renderPointsActivity() {
        const { pointsActivity } = this.state;
        if (!pointsActivity) {
            this.props.context.telemetry.error('Points activity content is empty, module wont render');
            return undefined;
        }
        return pointsActivity.map((activity) => {
            return ({
                Activity: { className: 'ms-account-loyalty__points-modal-activity' },
                activityType: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__points-modal-type', text: this._getTimelineType(activity) })),
                activityDate: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__points-modal-date', text: this.props.context.cultureFormatter.formatDate(this._parseDate(activity.ActivityDate)) })),
                activityPoints: (React.createElement(AccountLoyaltyLabel, { className: 'ms-account-loyalty__points-modal-points', text: activity.LoyaltyPoints && activity.LoyaltyPoints || '' }))
            });
        });
    }
    _parseDate(date) {
        if (typeof date === 'string') {
            let dateString = date.toString();
            dateString = dateString.replace(/-/g, '/');
            dateString = dateString.substring(0, 10);
            return new Date(dateString);
        }
        else {
            return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
        }
    }
    _getTimelineType(pointActivity) {
        if (pointActivity.LoyaltyRewardPointTimelineEntryType) {
            return pointActivity.LoyaltyRewardPointTimelineEntryType;
        }
        const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel } = this.props.resources;
        switch (pointActivity.ExtensibleLoyaltyRewardPointActivityEntryTypeValue) {
            case 1:
                return earnedPointsLabel;
            case 3:
                return redeemedPointsLabel;
            case 5:
                return adjustedPointsLabel;
            default:
                return '';
        }
    }
};
AccountLoyalty = __decorate([
    observer
], AccountLoyalty);
export default AccountLoyalty;
//# sourceMappingURL=account-loyalty.js.map