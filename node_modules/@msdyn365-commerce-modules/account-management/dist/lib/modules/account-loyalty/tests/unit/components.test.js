import { Button, format, Heading } from '@msdyn365-commerce-modules/utilities';
import { buildHydratedMockActionContext, getUrlSync } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import { AccountLoyaltyLabel, AccountLoyaltyModalLabel } from '../../components/account-loyalty-small-components';
const mockResources = {
    loyaltyCardLabel: 'Loyalty card',
    joinDateFormatted: 'Member since {0}',
    totalAvailablePointsLabel: 'Total available points',
    expiringPointsFormatLabel: 'Expiring points within {0} days',
    availablePointsLabel: 'Total available points',
    redeemedPointsLabel: 'Redeemed',
    earnedPointsLabel: 'Earned',
    pendingPointsLabel: 'Pending',
    adjustedPointsLabel: 'Adjusted',
    loyaltyActivityDateLabel: 'Date',
    loyaltyActivityBalanceLabel: 'Balance',
    backToShoppingText: 'Back to shopping'
};
const mockActionContext = buildHydratedMockActionContext();
const mockContext = {
    actionContext: mockActionContext,
    requestContext: { locale: 'en-us' },
    app: {
        routes: {
            home: '/fedev'
        }
    }
};
const loyaltyCard = {
    CardNumber: '45646846846',
    LoyaltyEnrollmentDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
    RewardPoints: [
        {
            RewardPointId: 'Fabrikam',
            RewardPointTypeValue: 1,
            RewardPointCurrency: 'USD',
            IsRedeemable: true,
            PointsExpiringSoon: 34,
            ActivePoints: 90,
            Description: 'Fabrikam awesome points'
        }
    ]
};
describe('AccountLoyalty unit tests - ', () => {
    it('Heading - renders correctly', () => {
        const mockProps = {
            className: 'account-loyalty__heading ms-heading',
            text: mockResources.loyaltyCardLabel,
            headingTag: "h2"
        };
        const component = render(React.createElement(Heading, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('Label - renders correctly', () => {
        const mockProps = {
            className: 'account-loyalty__info-label',
            text: mockResources.totalAvailablePointsLabel
        };
        const component = render(React.createElement(AccountLoyaltyLabel, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('Label (formatted)- renders correctly', () => {
        const rewardPoints = loyaltyCard.RewardPoints && loyaltyCard.RewardPoints[0];
        const mockProps = {
            className: 'account-loyalty__points-label',
            text: format(mockResources.expiringPointsFormatLabel, rewardPoints.PointsExpiringSoon.toString())
        };
        const component = render(React.createElement(AccountLoyaltyLabel, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('ModalLabel - renders correctly', () => {
        const rewardPoints = loyaltyCard.RewardPoints && loyaltyCard.RewardPoints[0];
        const mockProps = {
            className: 'account-loyalty__available-points-label',
            text: mockResources.availablePointsLabel,
            labelFor: 'avaialable-points',
            value: rewardPoints.ActivePoints
        };
        const component = render(React.createElement(AccountLoyaltyModalLabel, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('homeButton - renders correctly', () => {
        const mockProps = {
            className: 'account-loyalty__button',
            color: 'primary', title: mockResources.backToShoppingText,
            href: getUrlSync('home', mockContext.actionContext) || ''
        };
        const component = render(React.createElement(Button, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=components.test.js.map