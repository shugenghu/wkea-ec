import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockCoreContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import * as StoreOperationsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import { mount, render } from 'enzyme';
import * as React from 'react';
import AccountLoyalty from '../account-loyalty';
import renderView from '../account-loyalty.view';
const mockData = {
    loyaltyCard: wrapInResolvedAsyncResult({})
};
const mockConfig = {
    className: 'account-loyalty-test',
    heading: {
        tag: "h2",
        text: 'Loyalty Program'
    }
};
const mockResources = {
    loyaltyCardLabel: 'Loyalty card',
    joinDateFormatted: 'Member since {0}',
    totalAvailablePointsLabel: 'Total available points',
    expiringPointsFormatLabel: 'Expiring points within {0} days',
    availablePointsLabel: 'Total available points',
    redeemedPointsLabel: 'Redeemed',
    earnedPointsLabel: 'Earned',
    pendingPointsLabel: 'Pending',
    adjustedPointsLabel: 'Adjusted',
    loyaltyActivityDateLabel: 'Date',
    loyaltyActivityBalanceLabel: 'Balance',
    backToShoppingText: 'Back to shopping'
};
const mockActionContext = buildHydratedMockActionContext();
const mockContext = buildMockCoreContext({});
mockContext.actionContext = mockActionContext;
mockContext.request.locale = 'en-us';
const mockActions = {};
jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g');
const mockPointsActivity = [
    {
        ActivityDate: '2020-01-06T00:00:00.000Z',
        ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 1,
        LoyaltyPoints: 100,
        LoyaltyRewardPointTimelineEntryType: 'Expiring'
    },
    {
        ActivityDate: '2020-01-06T00:00:00.000Z',
        ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 1,
        LoyaltyPoints: 30,
        LoyaltyRewardPointTimelineEntryType: 'Expiring'
    }
];
describe('AccountLoyalty test', () => {
    let moduleProps;
    beforeEach(() => {
        const mockDateNow = 1562698411742;
        Date.now = jest.spyOn(Date, 'now').mockImplementation(() => mockDateNow);
        const loyaltyCard = {
            CardNumber: '55215',
            LoyaltyEnrollmentDateLocal: '2020-01-06T00:00:00.000Z',
            RewardPoints: [
                {
                    RewardPointId: 'Fabrikam rewards',
                    RewardPointTypeValue: 1,
                    RewardPointCurrency: 'USD',
                    IsRedeemable: true,
                    PointsExpiringSoon: 34,
                    ActivePoints: 90,
                    Description: 'Fabrikam awesome points'
                },
                {
                    RewardPointId: 'ColSolare',
                    RewardPointTypeValue: 1,
                    RewardPointCurrency: 'USD',
                    IsRedeemable: true,
                    Description: 'Colsolare awesome points'
                },
            ]
        };
        mockData.loyaltyCard = wrapInResolvedAsyncResult(loyaltyCard);
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView
        };
        StoreOperationsDataActions.getLoyaltyRewardPointActivityTimelineAsync.mockImplementation(() => Promise.resolve(mockPointsActivity));
        StoreOperationsDataActions.getLoyaltyRewardPointsExpiringSoonAsync.mockImplementation(() => Promise.resolve(mockPointsActivity));
    });
    it('module renders correctly', () => {
        const accountLoyalty = render(React.createElement(AccountLoyalty, Object.assign({}, moduleProps)));
        expect(accountLoyalty).toMatchSnapshot();
    });
    it('module should not render without loyalty card', () => {
        const noData = {};
        const noDataModuleProps = {
            ...buildMockModuleProps(noData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView
        };
        const accountLoyalty = render(React.createElement(AccountLoyalty, Object.assign({}, noDataModuleProps)));
        expect(accountLoyalty).toMatchSnapshot();
    });
    it('modal props', () => {
        const accountLoyalty = mount(React.createElement(AccountLoyalty, Object.assign({}, moduleProps)));
        let modalTrigger = accountLoyalty.find('.ms-account-loyalty__points-trigger').first();
        modalTrigger.simulate('click');
        let modal = accountLoyalty.find('.ms-account-loyalty__points-modal').first();
        expect(modal.props().isOpen).toBe(true);
        let closeButton = modal.find('button.msc-modal__close-button');
        closeButton.simulate('click');
        modal = accountLoyalty.find('.ms-account-loyalty__points-modal').first();
        expect(modal).toEqual({});
        modalTrigger = accountLoyalty.find('.ms-account-loyalty__points-trigger').last();
        modalTrigger.simulate('click');
        modal = accountLoyalty.find('.ms-account-loyalty__points-modal').first();
        expect(modal.props().isOpen).toBe(true);
        closeButton = modal.find('button.msc-modal__close-button');
        closeButton.simulate('click');
        modal = accountLoyalty.find('.ms-account-loyalty__points-modal').first();
        expect(modal).toEqual({});
    });
    it('module rewardPoints section renders without RewardPointId ', () => {
        const mockLoyaltyCard = {
            CardNumber: '45646846846',
            LoyaltyEnrollmentDateLocal: '2020-01-06T00:00:00.000Z',
            RewardPoints: [
                {
                    RewardPointTypeValue: 1,
                    RewardPointCurrency: 'USD',
                    IsRedeemable: true,
                    PointsExpiringSoon: 34,
                    ActivePoints: 90,
                    Description: 'Fabrikam awesome points'
                },
                {
                    RewardPointTypeValue: 1,
                    RewardPointCurrency: 'USD',
                    IsRedeemable: true,
                    Description: 'Colsolare awesome points'
                },
            ]
        };
        mockData.loyaltyCard = wrapInResolvedAsyncResult(mockLoyaltyCard);
        const noRewardsModuleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig),
            resources: mockResources,
            context: mockContext,
            renderView
        };
        const accountLoyalty = render(React.createElement(AccountLoyalty, Object.assign({}, noRewardsModuleProps)));
        expect(accountLoyalty).toMatchSnapshot();
    });
});
//# sourceMappingURL=account-loyalty.test.js.map