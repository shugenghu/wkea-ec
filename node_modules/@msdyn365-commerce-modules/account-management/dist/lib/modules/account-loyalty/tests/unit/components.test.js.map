{"version":3,"file":"components.test.js","sourceRoot":"./src/","sources":["modules/account-loyalty/tests/unit/components.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Button, format, Heading } from '@msdyn365-commerce-modules/utilities';\nimport { buildHydratedMockActionContext, getUrlSync } from '@msdyn365-commerce/core';\nimport { LoyaltyCard } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { render } from 'enzyme';\nimport * as React from 'react';\nimport { HeadingTag } from '../../../password-reset/password-reset.props.autogenerated';\nimport { IAccountLoyaltyResources } from '../../account-loyalty.props.autogenerated';\nimport { AccountLoyaltyLabel, AccountLoyaltyModalLabel } from '../../components/account-loyalty-small-components';\n\nconst mockResources: IAccountLoyaltyResources = {\n    loyaltyCardLabel: 'Loyalty card',\n    joinDateFormatted: 'Member since {0}',\n    totalAvailablePointsLabel: 'Total available points',\n    expiringPointsFormatLabel: 'Expiring points within {0} days',\n    availablePointsLabel: 'Total available points',\n    redeemedPointsLabel: 'Redeemed',\n    earnedPointsLabel: 'Earned',\n    pendingPointsLabel: 'Pending',\n    adjustedPointsLabel: 'Adjusted',\n    loyaltyActivityDateLabel: 'Date',\n    loyaltyActivityBalanceLabel: 'Balance',\n    backToShoppingText: 'Back to shopping'\n};\n\nconst mockActionContext = buildHydratedMockActionContext();\n\n// @ts-ignore partial mock\nconst mockContext: ICoreContext = {\n    actionContext: mockActionContext,\n    requestContext: {locale: 'en-us'},\n    app: {\n      routes: {\n        home: '/fedev'\n      }\n    }\n};\n\nconst loyaltyCard: LoyaltyCard =  {\n    CardNumber: '45646846846',\n    LoyaltyEnrollmentDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),\n    RewardPoints: [\n      {\n        RewardPointId: 'Fabrikam',\n        RewardPointTypeValue: 1,\n        RewardPointCurrency: 'USD',\n        IsRedeemable: true,\n        PointsExpiringSoon: 34,\n        ActivePoints: 90,\n        Description: 'Fabrikam awesome points'\n      }\n    ]\n  };\n\ndescribe('AccountLoyalty unit tests - ', () => {\n    it('Heading - renders correctly', () => {\n        const mockProps = {\n          className:'account-loyalty__heading ms-heading',\n          text: mockResources.loyaltyCardLabel,\n          headingTag: HeadingTag.h2\n        };\n\n        const component = render(<Heading {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('Label - renders correctly', () => {\n        const mockProps = {\n          className:'account-loyalty__info-label',\n          text: mockResources.totalAvailablePointsLabel\n        };\n\n        const component = render(<AccountLoyaltyLabel {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('Label (formatted)- renders correctly', () => {\n        const rewardPoints = loyaltyCard.RewardPoints && loyaltyCard.RewardPoints[0];\n        const mockProps = {\n          className:'account-loyalty__points-label',\n          text: format(mockResources.expiringPointsFormatLabel, rewardPoints!.PointsExpiringSoon!.toString())\n        };\n\n        const component = render(<AccountLoyaltyLabel {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n\n    it('ModalLabel - renders correctly', () => {\n      const rewardPoints = loyaltyCard.RewardPoints && loyaltyCard.RewardPoints[0];\n      const mockProps = {\n        className:'account-loyalty__available-points-label',\n        text: mockResources.availablePointsLabel,\n        labelFor: 'avaialable-points',\n        value: rewardPoints!.ActivePoints\n      };\n\n      const component = render(<AccountLoyaltyModalLabel {...mockProps} />);\n      expect(component).toMatchSnapshot();\n    });\n\n    // it('ModalContent - renders correctly', () => {\n    //   const mockProps = {\n    //     className: 'ms-account-loyalty__points-modal-name',\n    //     text: mockResources.totalAvailablePointsLabel,\n    //   };\n\n    //   const component = render(<AccountLoyaltyModalContent {...mockProps} />);\n    //   expect(component).toMatchSnapshot();\n    // });\n\n    // it('ModalTrigger - renders correctly', () => {\n    //   const loyaltyPoints = loyaltyCard.RewardPoints![0];\n    //   const mockProps = {\n    //     className: 'ms-account-loyalty__points-modal-name',\n    //     value: loyaltyPoints!.ActivePoints,\n    //     loyaltyPoints: loyaltyPoints,\n    //     isExpiring: false,\n    //     _populateModalData: jest.fn()\n    //   };\n\n    //   const component = render(<AccountLoyaltyModalTrigger {...mockProps} />);\n    //   expect(component).toMatchSnapshot();\n    // });\n\n    // it('ModalTrigger (Disabled) - renders correctly', () => {\n    //   const loyaltyPoints = loyaltyCard.RewardPoints![0];\n    //   const mockProps = {\n    //     className: 'ms-account-loyalty__points-modal-name',\n    //     value: loyaltyPoints!.ActivePoints,\n    //     loyaltyPoints: loyaltyPoints,\n    //     isExpiring: false,\n    //     isDisabled: true,\n    //     _populateModalData: jest.fn()\n    //   };\n\n    //   const component = render(<AccountLoyaltyModalTrigger {...mockProps} />);\n    //   expect(component).toMatchSnapshot();\n    // });\n\n    // it('ModalTrigger - does not render without value prop', () => {\n    //   const loyaltyPoints = loyaltyCard.RewardPoints![0];\n    //   const mockProps = {\n    //     className: 'ms-account-loyalty__points-modal-name',\n    //     value: undefined,\n    //     loyaltyPoints: loyaltyPoints,\n    //     isExpiring: false,\n    //     _populateModalData: jest.fn()\n    //   };\n\n    //   const component = render(<AccountLoyaltyModalTrigger {...mockProps} />);\n    //   expect(component).toMatchSnapshot();\n    // });\n\n    // it('ModalTrigger - onClick calls _openModal', () => {\n    //   const loyaltyPoints = loyaltyCard.RewardPoints![0];\n    //   const mockProps = {\n    //     className: 'ms-account-loyalty__points-modal-name',\n    //     value: loyaltyPoints!.ActivePoints,\n    //     loyaltyPoints: loyaltyPoints,\n    //     isExpiring: false,\n    //     _populateModalData: jest.fn(),\n    //   };\n\n    //   const component = shallow(<AccountLoyaltyModalTrigger {...mockProps} />);\n    //   component.simulate('click');\n\n    //   expect(mockProps._populateModalData).toBeCalled();\n    // });\n\n    // STOP!!!!!!!!!!!!!\n    // it('Modal (Available) - renders correctly', () => {\n    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;\n\n    //   const rewardPoints = loyaltyCard.RewardPoints![0] && loyaltyCard.RewardPoints![0] || undefined;\n    //   const mockProps = {\n    //     loyaltyCard: loyaltyCard,\n    //     loyaltyPoints: rewardPoints,\n    //     actionContext: mockContext,\n    //     earnedLabel: earnedPointsLabel,\n    //     redeemedLabel: redeemedPointsLabel,\n    //     adjustedLabel: adjustedPointsLabel,\n    //     dateLabel: loyaltyActivityDateLabel,\n    //     balanceLabel: loyaltyActivityBalanceLabel,\n    //     pointsDescription: totalAvailablePointsLabel,\n    //     expiring: false,\n    //     id: 'avaialabe-points'\n    //   };\n\n    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);\n\n    //   component.setState({\n    //     pointActivity: [\n    //       {\n    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),\n    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 1,\n    //         LoyaltyPoints: 100,\n    //       }\n    //     ]\n    //   });\n\n    //   expect(component).toMatchSnapshot();\n    // });\n\n    // it('Modal (Expiring) - renders correctly', () => {\n    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;\n\n    //   const rewardPoints = loyaltyCard.RewardPoints![0] && loyaltyCard.RewardPoints![0] || undefined;\n    //   const mockProps = {\n    //     loyaltyCard: loyaltyCard,\n    //     loyaltyPoints: rewardPoints,\n    //     actionContext: mockContext,\n    //     earnedLabel: earnedPointsLabel,\n    //     redeemedLabel: redeemedPointsLabel,\n    //     adjustedLabel: adjustedPointsLabel,\n    //     dateLabel: loyaltyActivityDateLabel,\n    //     balanceLabel: loyaltyActivityBalanceLabel,\n    //     pointsDescription: totalAvailablePointsLabel,\n    //     expiring: true,\n    //     id: 'expiring-points'\n    //   };\n\n    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);\n\n    //   component.setState({\n    //     pointActivity: [\n    //       {\n    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),\n    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 1,\n    //         LoyaltyPoints: 100,\n    //         LoyaltyRewardPointTimelineEntryType: 'Expiring'\n    //       }\n    //     ]\n    //   });\n\n    //   expect(component).toMatchSnapshot();\n    // });\n\n    // it('Modal - opens on click', () => {\n    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;\n\n    //   const rewardPoints = loyaltyCard.RewardPoints![0] && loyaltyCard.RewardPoints![0] || undefined;\n    //   const mockProps = {\n    //     loyaltyCard: loyaltyCard,\n    //     loyaltyPoints: rewardPoints,\n    //     actionContext: mockContext,\n    //     earnedLabel: earnedPointsLabel,\n    //     redeemedLabel: redeemedPointsLabel,\n    //     adjustedLabel: adjustedPointsLabel,\n    //     dateLabel: loyaltyActivityDateLabel,\n    //     balanceLabel: loyaltyActivityBalanceLabel,\n    //     pointsDescription: totalAvailablePointsLabel,\n    //     expiring: true,\n    //     id: 'expiring-points'\n    //   };\n\n    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);\n\n    //   const openButton = component.find('.ms-account-loyalty__points');\n    //   openButton.simulate('click');\n\n    //   const modal = component.find('.ms-account-loyalty__points-modal');\n    //   const modalProps = modal && modal.props() as IModalProps;\n\n    //   expect(modalProps.isOpen).toBe(true);\n    // });\n\n    // it('Modal - _getTimelineType()', () => {\n    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;\n\n    //   const rewardPoints = loyaltyCard.RewardPoints![0] && loyaltyCard.RewardPoints![0] || undefined;\n    //   const mockProps = {\n    //     loyaltyCard: loyaltyCard,\n    //     loyaltyPoints: rewardPoints,\n    //     actionContext: mockContext,\n    //     earnedLabel: earnedPointsLabel,\n    //     redeemedLabel: redeemedPointsLabel,\n    //     adjustedLabel: adjustedPointsLabel,\n    //     dateLabel: loyaltyActivityDateLabel,\n    //     balanceLabel: loyaltyActivityBalanceLabel,\n    //     pointsDescription: totalAvailablePointsLabel,\n    //     expiring: true,\n    //     id: 'expiring-points'\n    //   };\n\n    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);\n    //   component.setState({\n    //     pointActivity: [\n    //       {\n    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),\n    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 3,\n    //         LoyaltyPoints: 100,\n    //       }\n    //     ]\n    //   });\n\n    //   component.setState({\n    //     pointActivity: [\n    //       {\n    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),\n    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 4,\n    //         LoyaltyPoints: 24,\n    //       }\n    //     ]\n    //   });\n\n    //   component.setState({\n    //     pointActivity: [\n    //       {\n    //         ActivityDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),\n    //         ExtensibleLoyaltyRewardPointActivityEntryTypeValue: 5,\n    //         LoyaltyPoints: 25,\n    //       }\n    //     ]\n\n    //   });\n\n    //   expect(component).toMatchSnapshot();\n    // });\n\n    // it('Modal _getPointsActivity should return empty without RewardPointsId', () => {\n    //   const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel, totalAvailablePointsLabel } = mockResources;\n\n    //   const noIdCard = {\n    //     CardNumber: '45646846846',\n    //     LoyaltyEnrollmentDate: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),\n    //     RewardPoints: [\n    //       {\n    //         RewardPointTypeValue: 1,\n    //         RewardPointCurrency: 'USD',\n    //         IsRedeemable: true,\n    //         PointsExpiringSoon: 34,\n    //         ActivePoints: 90,\n    //         Description: 'Fabrikam awesome points'\n    //       }\n    //     ]\n    //   };\n\n    //   const rewardPoints = noIdCard.RewardPoints![0] && noIdCard.RewardPoints![0] || undefined;\n    //   const mockProps = {\n    //     loyaltyCard: noIdCard,\n    //     loyaltyPoints: rewardPoints,\n    //     actionContext: mockContext,\n    //     earnedLabel: earnedPointsLabel,\n    //     redeemedLabel: redeemedPointsLabel,\n    //     adjustedLabel: adjustedPointsLabel,\n    //     dateLabel: loyaltyActivityDateLabel,\n    //     balanceLabel: loyaltyActivityBalanceLabel,\n    //     pointsDescription: totalAvailablePointsLabel,\n    //     expiring: true,\n    //     id: 'expiring-points'\n    //   };\n\n    //   const component = shallow(<AccountLoyaltyPointsModal {...mockProps} />);\n    //   expect(component).toMatchSnapshot();\n    // });\n\n    it('homeButton - renders correctly', () => {\n        const mockProps = {\n          className: 'account-loyalty__button',\n          color: 'primary', title: mockResources.backToShoppingText,\n          href: getUrlSync('home', mockContext.actionContext) || ''\n        };\n        const component = render(<Button {...mockProps} />);\n        expect(component).toMatchSnapshot();\n    });\n});"]}