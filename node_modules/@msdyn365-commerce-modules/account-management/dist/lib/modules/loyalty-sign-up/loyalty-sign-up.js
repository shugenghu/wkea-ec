import { __decorate } from "tslib";
import classname from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { issueLoyalty, IssueLoyaltyInput } from '@msdyn365-commerce-modules/retail-actions';
import { Button, getPayloadObject, getTelemetryAttributes, getTelemetryObject, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { SignUpText } from './components/loyalty-sign-up-small-components';
let LoyaltySignUp = class LoyaltySignUp extends React.Component {
    constructor(props) {
        super(props);
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this.handleMemberHeadingChange = (event) => this.props.config.memberHeading.text = event.target.value;
        this._issueLoyalty = () => {
            if (this.props.context.request.user.isAuthenticated && !this.state.clicked) {
                this.setState({ clicked: true });
                const input = new IssueLoyaltyInput(this.props.context.request.apiSettings);
                issueLoyalty(input, this.props.context.actionContext)
                    .then(() => {
                    window.location.assign(Msdyn365.getUrlSync('loyalty', this.props.context.actionContext) || '');
                })
                    .catch((error) => {
                    this.setState({ clicked: false });
                    this.props.telemetry.error(error.message);
                    this.props.telemetry.debug('Unable to issue loyalty card');
                });
            }
        };
        this.state = { clicked: false };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        const payLoad = getPayloadObject('click', this.telemetryContent, TelemetryConstant.SignIn);
        this.loyaltySignInAttributes = getTelemetryAttributes(this.telemetryContent, payLoad);
        payLoad.contentAction.etext = TelemetryConstant.SignUp;
        this.loyaltySignUpAttributes = getTelemetryAttributes(this.telemetryContent, payLoad);
        payLoad.contentAction.etext = TelemetryConstant.LoyaltyDetailLink;
        this.loyaltyDetailsLinkAttributes = getTelemetryAttributes(this.telemetryContent, payLoad);
        payLoad.contentAction.etext = TelemetryConstant.LoyaltyTermsLink;
        this.loyaltyTermsLinkAttributes = getTelemetryAttributes(this.telemetryContent, payLoad);
    }
    render() {
        const { config: { className, heading, memberHeading }, resources, context: { actionContext, request: { user: { signInUrl, isAuthenticated } } }, data: { loyaltyCard } } = this.props;
        const termsUrl = Msdyn365.getUrlSync('loyaltyTerms', actionContext);
        let loyaltyJoinUrl = `${Msdyn365.getUrlSync('loyaltyJoin', actionContext)}?joiningLoyalty=true`;
        if (window) {
            loyaltyJoinUrl = `${window.location.origin}${loyaltyJoinUrl}`;
        }
        const signInurl = `${signInUrl}?ru=${loyaltyJoinUrl}`;
        const completeClass = classname('ms-loyalty-signup', className);
        const hasLoyaltyAccount = loyaltyCard.result && loyaltyCard.result.CardTenderTypeValue !== undefined;
        const viewProps = {
            ...this.props,
            className: completeClass,
            LoyaltySignUp: {
                moduleProps: this.props,
                className: completeClass
            },
            loading: loyaltyCard.status === 'LOADING',
            heading: !hasLoyaltyAccount && heading && heading.text && (React.createElement(Msdyn365.Text, { className: 'ms-loyalty-signup__heading', tag: heading.tag, text: heading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
            memberHeading: hasLoyaltyAccount && memberHeading && memberHeading.text && (React.createElement(Msdyn365.Text, { className: 'ms-loyalty-signup__heading', tag: memberHeading.tag, text: memberHeading.text, editProps: { onEdit: this.handleMemberHeadingChange, requestContext: this.props.context.request } })),
            signInLink: !isAuthenticated && React.createElement(Button, Object.assign({ className: 'ms-loyalty-signup__signin', href: signInurl }, this.loyaltySignInAttributes), this.props.resources.joinLoyaltyButtonText),
            signUpText: !hasLoyaltyAccount && React.createElement(SignUpText, { text: resources.loyaltyProgramText }),
            signUpButton: !hasLoyaltyAccount && isAuthenticated && React.createElement(Button, Object.assign({ className: 'ms-loyalty-signup__btn', onClick: this._issueLoyalty }, this.loyaltySignUpAttributes), this.props.resources.joinLoyaltyButtonText),
            detailsLink: hasLoyaltyAccount &&
                React.createElement(Button, Object.assign({ className: 'ms-loyalty-signup__details', href: Msdyn365.getUrlSync('loyalty', this.props.context.actionContext) }, this.loyaltyDetailsLinkAttributes), this.props.resources.viewLoyaltyPageText),
            termsLink: !hasLoyaltyAccount && React.createElement(Button, Object.assign({ className: 'ms-loyalty-signup__terms', href: termsUrl }, this.loyaltyTermsLinkAttributes), this.props.resources.loyaltyTermsLinkText)
        };
        return this.props.renderView(viewProps);
    }
};
LoyaltySignUp = __decorate([
    observer
], LoyaltySignUp);
export default LoyaltySignUp;
//# sourceMappingURL=loyalty-sign-up.js.map