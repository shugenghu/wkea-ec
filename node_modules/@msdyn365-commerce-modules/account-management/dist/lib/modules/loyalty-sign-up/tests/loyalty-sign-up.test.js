import { mount, render } from 'enzyme';
import * as React from 'react';
import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import LoyaltySignUp from '../loyalty-sign-up';
const mockActionContext = buildHydratedMockActionContext();
const mockContext = {
    actionContext: mockActionContext,
    request: { locale: 'en-us', user: { isAuthenticated: true, customerAccountNumber: 'foo' } }
};
const mockConfig = {
    heading: {
        tag: "h4",
        text: 'Join Fabrikams Loyalty Program'
    },
    memberHeading: {
        tag: "h4",
        text: 'Weclome loyalty member'
    }
};
const mockResource = {
    loyaltyProgramText: 'Become a Fabrikam Loyalty member to earn points and to receive member only discounts.',
    loyaltyTermsLinkText: 'By signing up, you accept our Terms & Conditions of the Fabrikams Loyalty program.',
    joinLoyaltyButtonText: 'Sign up for Fabrikam loyalty',
    viewLoyaltyPageText: 'View loyalty details'
};
const flushPromises = () => new Promise(setImmediate);
const mockActions = {};
const mockData = {
    loyaltyCard: RetailActions.wrapInResolvedAsyncResult({ CardNumber: '1' })
};
describe('LoyaltySignUp', () => {
    it('renders correctly when author provides headings', () => {
        const moduleProps = { ...buildMockModuleProps(mockData, mockActions, mockConfig), renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        moduleProps.context = mockContext;
        moduleProps.resources = mockResource;
        const component = mount(React.createElement(LoyaltySignUp, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const { heading, memberHeading, signInLink, signUpText, signUpButton, detailsLink, termsLink } = viewProps;
        expect(viewProps).toBeDefined();
        expect(heading).toBeTruthy();
        expect(signUpText).toBeTruthy();
        expect(detailsLink).not.toBeTruthy();
        expect(termsLink).toBeTruthy();
        expect(signUpButton).toBeTruthy();
        expect(memberHeading).not.toBeTruthy();
        expect(signInLink).not.toBeTruthy();
        expect(render(heading)).toMatchSnapshot();
        expect(render(memberHeading)).toMatchSnapshot();
        expect(render(signUpButton)).toMatchSnapshot();
        expect(render(signUpText)).toMatchSnapshot();
        expect(render(termsLink)).toMatchSnapshot();
        component.unmount();
    });
    it('renders correctly when author does not provide heading ', () => {
        const moduleProps = { ...buildMockModuleProps(mockData, mockActions, {}), renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        moduleProps.context = mockContext;
        moduleProps.resources = mockResource;
        const component = mount(React.createElement(LoyaltySignUp, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const { heading, memberHeading, signInLink, signUpText, signUpButton, detailsLink, termsLink } = viewProps;
        expect(viewProps).toBeDefined();
        expect(heading).not.toBeTruthy();
        expect(signUpText).toBeTruthy();
        expect(detailsLink).not.toBeTruthy();
        expect(termsLink).toBeTruthy();
        expect(signUpButton).toBeTruthy();
        expect(memberHeading).not.toBeTruthy();
        expect(signInLink).not.toBeTruthy();
        expect(render(signUpButton)).toMatchSnapshot();
        expect(render(signUpText)).toMatchSnapshot();
        expect(render(termsLink)).toMatchSnapshot();
        component.unmount();
    });
    it('issues loyalty naviagates to next page after a click', async () => {
        jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.resolve({}));
        jest.spyOn(window.location, 'assign');
        const moduleProps = { ...buildMockModuleProps(mockData, mockActions, mockConfig), renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        moduleProps.context = mockContext;
        moduleProps.resources = mockResource;
        const component = mount(React.createElement(LoyaltySignUp, Object.assign({}, moduleProps)));
        const viewProps = component.childAt(0).props().props;
        const signup = mount(viewProps.signUpButton);
        signup.simulate('click');
        expect(component.state('clicked')).toBe(true);
        await flushPromises();
        expect(window.location.assign).toHaveBeenCalled();
        signup.unmount();
        component.unmount();
    });
    it('issues loyalty uses telemetry when it fails', async () => {
        jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.reject({ message: 'foo' }));
        jest.spyOn(window.location, 'assign');
        const moduleProps = { ...buildMockModuleProps(mockData, mockActions, mockConfig), renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        moduleProps.context = mockContext;
        moduleProps.resources = mockResource;
        moduleProps.telemetry.error = jest.fn();
        const component = mount(React.createElement(LoyaltySignUp, Object.assign({}, moduleProps)));
        const viewProps = component.childAt(0).props().props;
        const signup = mount(viewProps.signUpButton);
        signup.simulate('click');
        await flushPromises();
        expect(moduleProps.telemetry.error).toHaveBeenCalled();
        signup.unmount();
        component.unmount();
    });
});
//# sourceMappingURL=loyalty-sign-up.test.js.map