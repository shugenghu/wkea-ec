{"version":3,"file":"password-reset-verification.js","sourceRoot":"./src/","sources":["modules/password-reset-verification/password-reset-verification.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport {\n    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody\n} from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\n\nimport PasswordResetVerificationButtonComponent from './components/password-reset-verification-button';\nimport PasswordResetVerificationErrorComponent from './components/password-reset-verification-error';\nimport PasswordResetVerificationInputComponent from './components/password-reset-verification-input';\nimport PasswordResetVerificationLabelComponent from './components/password-reset-verification-label';\nimport PasswordResetVerificationLoadingIconComponent from './components/password-reset-verification-loading-icon';\nimport PasswordResetVerificationLoadingMessageComponent from './components/password-reset-verification-loading-message';\nimport PasswordResetVerificationSuccessComponent from './components/password-reset-verification-success';\nimport {\n    IPasswordResetVerificationConfig, IPasswordResetVerificationProps\n} from './password-reset-verification.props.autogenerated';\n\nexport interface IPasswordResetVerificationViewState {\n    isShowLoading: boolean;\n}\n\nexport interface IPasswordResetVerificationItem {\n    wrapper: INodeProps;\n    key: string;\n    label: React.ReactNode;\n    errorMessage: React.ReactNode;\n    input: React.ReactNode;\n}\n\nexport interface IPasswordResetVerificationLocalAccount {\n    localAccount: INodeProps;\n    items: IPasswordResetVerificationItem[];\n    successMessage: React.ReactNode[];\n    errorMessage: React.ReactNode[];\n    verificationButtonsWrapper: INodeProps;\n    verificationButtons: React.ReactNode[];\n    buttonsWrapper: INodeProps;\n    buttons: React.ReactNode[];\n    verificationSuccessModal: INodeProps;\n    verificationSuccessModalMessage: INodeProps;\n}\n\nexport interface IPasswordResetVerificationLoading {\n    modal: INodeProps;\n    modalBody: INodeProps;\n    icon: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IPasswordResetVerificationViewProps {\n    className: string;\n    viewState: IPasswordResetVerificationViewState;\n    loading: IPasswordResetVerificationLoading;\n    passwordResetVerification: IModuleProps;\n    defaultAADConainer: INodeProps;\n    aadConainer: INodeProps;\n    heading: React.ReactNode;\n    passwordResetVerificationLocalAccount: IPasswordResetVerificationLocalAccount;\n}\n\n/**\n *\n * PasswordResetVerification component\n * @extends {React.Component<IPasswordResetVerificationProps<IPasswordResetVerificationConfig>>}\n */\n@observer\nclass PasswordResetVerification extends React.Component<IPasswordResetVerificationProps<IPasswordResetVerificationConfig>> {\n    private moduleClassName: string = 'ms-password-reset-verification';\n    private telemetryContent: ITelemetryContent;\n    @observable private emailRegex: string;\n    @observable private isInitialized: boolean;\n\n    // tslint:disable-next-line:no-any\n    private initializationTimer: any;\n\n    constructor(props: IPasswordResetVerificationProps<IPasswordResetVerificationConfig>) {\n        super(props);\n        this.emailRegex = '^[a-zA-Z0-9.!#$%&\\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$';\n        this.isInitialized = false;\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this._onInit();\n    }\n\n    // After successful AAD initialization, call initialize method provided by AAD to attach events.\n    public componentDidUpdate(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {\n            // tslint:disable-next-line:no-string-literal\n            window['$element']['initialize']();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { config, resources } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            viewState: {\n                isShowLoading: !this.isInitialized\n            },\n            passwordResetVerification: {\n                moduleProps: this.props,\n                className: classnames(this.moduleClassName, config.className)\n            },\n            loading: {\n                modal: {\n                    tag: Modal,\n                    isOpen: true\n                },\n                modalBody: {\n                    tag: ModalBody\n                },\n                icon: <PasswordResetVerificationLoadingIconComponent className={this.moduleClassName} />,\n                message: <PasswordResetVerificationLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,\n            },\n            defaultAADConainer: {\n                id: 'api',\n                style: { display: 'none' }\n            },\n            aadConainer: {\n                id: this.isInitialized ? 'api' : null,\n                className: `${this.moduleClassName}__container`\n            },\n            heading: config.heading &&\n            <Msdyn365.Text className={`${this.moduleClassName}__heading`} {...config.heading}  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}/>,\n            passwordResetVerificationLocalAccount: this._renderLocalAccount()\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text= event.target.value;\n\n    public _onInit = () => {\n        this._prePopulateData();\n        this._updateErrorMessage();\n        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.\n        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);\n        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);\n    }\n\n    // After successful AAD initialization, remove waiting and preload any data, if needed.\n    private _isInitializationSuccessful = () => {\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {\n            clearInterval(this.initializationTimer);\n            this.isInitialized = true;\n        }\n    }\n\n    private _prePopulateData(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {\n            // tslint:disable-next-line:no-string-literal\n            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PAT: string }) => {\n                if (obj.ID.toLowerCase() === 'email') {\n                    this.emailRegex = obj.PAT;\n                }\n            });\n        }\n    }\n\n    private _updateErrorMessage(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['CONTENT']) {\n\n            const message = {\n                verifying_blurb: this.props.resources.loadingMessage\n            };\n\n            // tslint:disable-next-line:no-string-literal\n            Object.assign(window['CONTENT'], message);\n        }\n    }\n\n    // tslint:disable-next-line: max-func-body-length\n    private _renderLocalAccount(): IPasswordResetVerificationLocalAccount {\n        const { resources } = this.props;\n        return {\n            localAccount: {\n                id: 'attributeList',\n                className: `${this.moduleClassName}__account-items attr`\n            },\n            items: [\n                this._renderInput('email', 'email', resources.emailAddressLabelText, undefined, this.emailRegex),\n                this._renderInput('email_ver_input', 'email', resources.verificationCodeLabelText),\n            ],\n            successMessage: [\n                <PasswordResetVerificationSuccessComponent key='email_info' id='email_info' className={this.moduleClassName} message={resources.verificationCodeSendSuccess} />,\n                <PasswordResetVerificationSuccessComponent key='email_success' id='email_success' className={this.moduleClassName} message={resources.emailAddressVerifiedSuccess} />\n            ],\n            errorMessage: [\n                <PasswordResetVerificationErrorComponent key='email_fail_retry' id='email_fail_retry' className={this.moduleClassName} message={resources.retryError} />,\n                <PasswordResetVerificationErrorComponent key='email_fail_no_retry' id='email_fail_no_retry' className={this.moduleClassName} message={resources.retryNotAllowedError} />,\n                <PasswordResetVerificationErrorComponent key='email_fail_throttled' id='email_fail_throttled' className={this.moduleClassName} message={resources.throttledError} />,\n                <PasswordResetVerificationErrorComponent key='email_fail_code_expired' id='email_fail_code_expired' className={this.moduleClassName} message={resources.codeExpiredError} />,\n                <PasswordResetVerificationErrorComponent key='email_fail_server' id='email_fail_server' className={this.moduleClassName} message={resources.serverError} />,\n                <PasswordResetVerificationErrorComponent key='email_incorrect_format' id='email_incorrect_format' className={this.moduleClassName} message={resources.invalidEmailError} />,\n                <PasswordResetVerificationErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />\n            ],\n            verificationButtonsWrapper: {\n                className: `${this.moduleClassName}__email-verification-buttons verify`,\n                'data-claim_id': 'email'\n            },\n            verificationButtons: [\n\n                (\n                    <PasswordResetVerificationButtonComponent\n                        key='email_ver_but_send'\n                        id='email_ver_but_send'\n                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-send sendButton`}\n                        ariaLabel={resources.sendCodeButtonAriaLabel}\n                        text={resources.sendCodeButtonText}\n                        telemetryContent={this.telemetryContent}\n                    />\n                ),\n\n                (\n                    <PasswordResetVerificationButtonComponent\n                        key='email_ver_but_verify'\n                        id='email_ver_but_verify'\n                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-verify verifyButton`}\n                        ariaLabel={resources.verifyCodeButtonAriaLabel}\n                        text={resources.verifyCodeButtonText}\n                        telemetryContent={this.telemetryContent}\n                    />\n                ),\n                (\n                    <PasswordResetVerificationButtonComponent\n                        key='email_ver_but_resend'\n                        id='email_ver_but_resend'\n                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-resend sendButton`}\n                        ariaLabel={resources.resendCodeButtonAriaLabel}\n                        text={resources.resendCodeButtonText}\n                        telemetryContent={this.telemetryContent}\n                    />\n                ),\n                (\n                    <PasswordResetVerificationButtonComponent\n                        key='email_ver_but_edit'\n                        id='email_ver_but_edit'\n                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-edit editButton`}\n                        ariaLabel={resources.changeEmailButtonAriaLabel}\n                        text={resources.changeEmailButtonText}\n                        telemetryContent={this.telemetryContent}\n                    />\n                )\n            ],\n            buttonsWrapper: {\n                className: `${this.moduleClassName}__buttons`\n            },\n            buttons: [\n                (\n                <PasswordResetVerificationButtonComponent\n                    key='continue'\n                    id='continue'\n                    className={`${this.moduleClassName}__continue-button`}\n                    ariaLabel={resources.continueButtonAriaLabel}\n                    text={resources.continueButtonText}\n                    telemetryContent={this.telemetryContent}\n                />\n                ),\n                (\n                <PasswordResetVerificationButtonComponent\n                    key='cancel'\n                    id='cancel'\n                    className={`${this.moduleClassName}__cancel-button`}\n                    ariaLabel={resources.cancelButtonAriaLabel}\n                    text={resources.cancelButtonText}\n                />\n                )\n            ],\n            verificationSuccessModal: {\n                className: `${this.moduleClassName}__verifying-modal verifying-modal`\n            },\n            verificationSuccessModalMessage: {\n                id: 'verifying_blurb',\n                className: `${this.moduleClassName}__verifying-modal-message`\n            }\n        };\n    }\n\n    private _renderInput(id: string, type: string, labelText: string, maxLength?: string, pattern?: string): IPasswordResetVerificationItem {\n        const className = `${this.moduleClassName}__account-item`;\n        return (\n            {\n                wrapper: {\n                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')\n                },\n                key: id,\n                label: (\n                    <PasswordResetVerificationLabelComponent\n                        {\n                        ...{\n                            id: id,\n                            forId: id,\n                            className: className,\n                            text: labelText\n                        }\n                        }\n                    />\n                ),\n                errorMessage: (\n                    <PasswordResetVerificationErrorComponent\n                        {\n                        ...{\n                            className: this.moduleClassName,\n                            type: 'item'\n                        }\n                        }\n                    />\n                ),\n                input: (\n                    <PasswordResetVerificationInputComponent\n                        {\n                        ...{\n                            id: id,\n                            type: type,\n                            maxLength: maxLength,\n                            pattern: pattern,\n                            className: className\n                        }\n                        }\n                    />\n                )\n\n            }\n        );\n    }\n\n}\n\nexport default PasswordResetVerification;\n"]}