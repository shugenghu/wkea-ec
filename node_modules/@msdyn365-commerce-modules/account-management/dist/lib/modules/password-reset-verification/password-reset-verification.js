import { __decorate } from "tslib";
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { getTelemetryObject, Modal, ModalBody } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import PasswordResetVerificationButtonComponent from './components/password-reset-verification-button';
import PasswordResetVerificationErrorComponent from './components/password-reset-verification-error';
import PasswordResetVerificationInputComponent from './components/password-reset-verification-input';
import PasswordResetVerificationLabelComponent from './components/password-reset-verification-label';
import PasswordResetVerificationLoadingIconComponent from './components/password-reset-verification-loading-icon';
import PasswordResetVerificationLoadingMessageComponent from './components/password-reset-verification-loading-message';
import PasswordResetVerificationSuccessComponent from './components/password-reset-verification-success';
let PasswordResetVerification = class PasswordResetVerification extends React.Component {
    constructor(props) {
        super(props);
        this.moduleClassName = 'ms-password-reset-verification';
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this._onInit = () => {
            this._prePopulateData();
            this._updateErrorMessage();
            this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);
            setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);
        };
        this._isInitializationSuccessful = () => {
            if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
                clearInterval(this.initializationTimer);
                this.isInitialized = true;
            }
        };
        this.emailRegex = '^[a-zA-Z0-9.!#$%&\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$';
        this.isInitialized = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        this._onInit();
    }
    componentDidUpdate() {
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            window['$element']['initialize']();
        }
    }
    render() {
        const { config, resources } = this.props;
        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            passwordResetVerification: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: React.createElement(PasswordResetVerificationLoadingIconComponent, { className: this.moduleClassName }),
                message: React.createElement(PasswordResetVerificationLoadingMessageComponent, { className: this.moduleClassName, message: resources.loadingMessage }),
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            heading: config.heading &&
                React.createElement(Msdyn365.Text, Object.assign({ className: `${this.moduleClassName}__heading` }, config.heading, { editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } })),
            passwordResetVerificationLocalAccount: this._renderLocalAccount()
        };
        return this.props.renderView(viewProps);
    }
    _prePopulateData() {
        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
            window['SA_FIELDS']['AttributeFields'].map((obj) => {
                if (obj.ID.toLowerCase() === 'email') {
                    this.emailRegex = obj.PAT;
                }
            });
        }
    }
    _updateErrorMessage() {
        if (window && window['CONTENT']) {
            const message = {
                verifying_blurb: this.props.resources.loadingMessage
            };
            Object.assign(window['CONTENT'], message);
        }
    }
    _renderLocalAccount() {
        const { resources } = this.props;
        return {
            localAccount: {
                id: 'attributeList',
                className: `${this.moduleClassName}__account-items attr`
            },
            items: [
                this._renderInput('email', 'email', resources.emailAddressLabelText, undefined, this.emailRegex),
                this._renderInput('email_ver_input', 'email', resources.verificationCodeLabelText),
            ],
            successMessage: [
                React.createElement(PasswordResetVerificationSuccessComponent, { key: 'email_info', id: 'email_info', className: this.moduleClassName, message: resources.verificationCodeSendSuccess }),
                React.createElement(PasswordResetVerificationSuccessComponent, { key: 'email_success', id: 'email_success', className: this.moduleClassName, message: resources.emailAddressVerifiedSuccess })
            ],
            errorMessage: [
                React.createElement(PasswordResetVerificationErrorComponent, { key: 'email_fail_retry', id: 'email_fail_retry', className: this.moduleClassName, message: resources.retryError }),
                React.createElement(PasswordResetVerificationErrorComponent, { key: 'email_fail_no_retry', id: 'email_fail_no_retry', className: this.moduleClassName, message: resources.retryNotAllowedError }),
                React.createElement(PasswordResetVerificationErrorComponent, { key: 'email_fail_throttled', id: 'email_fail_throttled', className: this.moduleClassName, message: resources.throttledError }),
                React.createElement(PasswordResetVerificationErrorComponent, { key: 'email_fail_code_expired', id: 'email_fail_code_expired', className: this.moduleClassName, message: resources.codeExpiredError }),
                React.createElement(PasswordResetVerificationErrorComponent, { key: 'email_fail_server', id: 'email_fail_server', className: this.moduleClassName, message: resources.serverError }),
                React.createElement(PasswordResetVerificationErrorComponent, { key: 'email_incorrect_format', id: 'email_incorrect_format', className: this.moduleClassName, message: resources.invalidEmailError }),
                React.createElement(PasswordResetVerificationErrorComponent, { key: 'claimVerificationServerError', id: 'claimVerificationServerError', className: this.moduleClassName })
            ],
            verificationButtonsWrapper: {
                className: `${this.moduleClassName}__email-verification-buttons verify`,
                'data-claim_id': 'email'
            },
            verificationButtons: [
                (React.createElement(PasswordResetVerificationButtonComponent, { key: 'email_ver_but_send', id: 'email_ver_but_send', className: `${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-send sendButton`, ariaLabel: resources.sendCodeButtonAriaLabel, text: resources.sendCodeButtonText, telemetryContent: this.telemetryContent })),
                (React.createElement(PasswordResetVerificationButtonComponent, { key: 'email_ver_but_verify', id: 'email_ver_but_verify', className: `${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-verify verifyButton`, ariaLabel: resources.verifyCodeButtonAriaLabel, text: resources.verifyCodeButtonText, telemetryContent: this.telemetryContent })),
                (React.createElement(PasswordResetVerificationButtonComponent, { key: 'email_ver_but_resend', id: 'email_ver_but_resend', className: `${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-resend sendButton`, ariaLabel: resources.resendCodeButtonAriaLabel, text: resources.resendCodeButtonText, telemetryContent: this.telemetryContent })),
                (React.createElement(PasswordResetVerificationButtonComponent, { key: 'email_ver_but_edit', id: 'email_ver_but_edit', className: `${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-edit editButton`, ariaLabel: resources.changeEmailButtonAriaLabel, text: resources.changeEmailButtonText, telemetryContent: this.telemetryContent }))
            ],
            buttonsWrapper: {
                className: `${this.moduleClassName}__buttons`
            },
            buttons: [
                (React.createElement(PasswordResetVerificationButtonComponent, { key: 'continue', id: 'continue', className: `${this.moduleClassName}__continue-button`, ariaLabel: resources.continueButtonAriaLabel, text: resources.continueButtonText, telemetryContent: this.telemetryContent })),
                (React.createElement(PasswordResetVerificationButtonComponent, { key: 'cancel', id: 'cancel', className: `${this.moduleClassName}__cancel-button`, ariaLabel: resources.cancelButtonAriaLabel, text: resources.cancelButtonText }))
            ],
            verificationSuccessModal: {
                className: `${this.moduleClassName}__verifying-modal verifying-modal`
            },
            verificationSuccessModalMessage: {
                id: 'verifying_blurb',
                className: `${this.moduleClassName}__verifying-modal-message`
            }
        };
    }
    _renderInput(id, type, labelText, maxLength, pattern) {
        const className = `${this.moduleClassName}__account-item`;
        return ({
            wrapper: {
                className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
            },
            key: id,
            label: (React.createElement(PasswordResetVerificationLabelComponent, Object.assign({}, {
                id: id,
                forId: id,
                className: className,
                text: labelText
            }))),
            errorMessage: (React.createElement(PasswordResetVerificationErrorComponent, Object.assign({}, {
                className: this.moduleClassName,
                type: 'item'
            }))),
            input: (React.createElement(PasswordResetVerificationInputComponent, Object.assign({}, {
                id: id,
                type: type,
                maxLength: maxLength,
                pattern: pattern,
                className: className
            })))
        });
    }
};
__decorate([
    observable
], PasswordResetVerification.prototype, "emailRegex", void 0);
__decorate([
    observable
], PasswordResetVerification.prototype, "isInitialized", void 0);
PasswordResetVerification = __decorate([
    observer
], PasswordResetVerification);
export default PasswordResetVerification;
//# sourceMappingURL=password-reset-verification.js.map