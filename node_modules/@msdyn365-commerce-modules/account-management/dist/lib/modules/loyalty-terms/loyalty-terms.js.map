{"version":3,"file":"loyalty-terms.js","sourceRoot":"./src/","sources":["modules/loyalty-terms/loyalty-terms.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { GetLoyaltyCardInput, issueLoyalty, IssueLoyaltyInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { getLoyaltyCardAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\nimport {\n    Button,\n    getTelemetryObject,\n    IModuleProps,\n    ITelemetryContent\n} from '@msdyn365-commerce-modules/utilities';\nimport { getUrlSync } from '@msdyn365-commerce/core';\nimport classname from 'classnames';\nimport * as React from 'react';\nimport {ILoyaltyTermsModalViewProps, LoyaltyTermsModal} from './components/loyalty-terms-modal';\nimport { ILoyaltyTermsData } from './loyalty-terms.data';\nimport { ILoyaltyTermsProps } from './loyalty-terms.props.autogenerated';\n\nexport interface ILoyaltyTermsState {\n    checked: boolean;\n    clicked: boolean;\n    isModalOpen: boolean;\n}\nexport interface ILoyaltyTermsViewProps extends ILoyaltyTermsProps<ILoyaltyTermsData> {\n    LoyaltyTerms: IModuleProps;\n    modalToggle: React.ReactElement;\n    modal: ILoyaltyTermsModalViewProps;\n    loading: boolean;\n}\n\n/**\n *\n * LoyaltyTerms component\n * @extends {React.Component<ILoyaltyTermsProps<ILoyaltyTermsData>>}\n */\nclass LoyaltyTerms extends React.Component<ILoyaltyTermsProps<ILoyaltyTermsData>, ILoyaltyTermsState> {\n    private toggleRef: React.RefObject<HTMLButtonElement>;\n    private telemetryContent: ITelemetryContent;\n\n    public constructor(props: ILoyaltyTermsProps<ILoyaltyTermsData>) {\n        super(props);\n        this._toggle = this._toggle.bind(this);\n        this._submit = this._submit.bind(this);\n        this._checkboxChecked = this._checkboxChecked.bind(this);\n        this.toggleRef = React.createRef();\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n        let search = this.props.context.request.url.requestUrl.search;\n        let isJoining = false;\n        if (search) {\n            search = search.substring(1);\n            const qsps = search.split('&');\n            for (let i = 0; i < qsps.length; i++) {\n                const splitQsp = qsps[i].split('=');\n                isJoining = splitQsp[0] === 'joiningLoyalty' && splitQsp[1] === 'true';\n                if(isJoining) {\n                    break;\n                }\n            }\n        }\n\n        this.state = {\n            isModalOpen: isJoining,\n            checked: false,\n            clicked: false\n        };\n    }\n\n    public render(): JSX.Element | null {\n        const {\n            config: { className, hideToggle },\n            resources,\n            slots: { serviceTerms },\n            data: { loyaltyCard },\n            context: {\n                request: {\n                    user: {\n                        isAuthenticated\n                    }\n                }\n            }\n        } = this.props;\n        const completeClass = classname('ms-loyalty-terms', className);\n\n        const viewProps = {\n            ...this.props,\n            className: completeClass,\n            LoyaltyTerms: {\n                moduleProps: this.props,\n                className: completeClass\n            },\n            loading: loyaltyCard.status === 'LOADING',\n            modalToggle: (hideToggle !== true) && <Button className='ms-loyalty-terms__toggle' onClick={this._toggle} innerRef={this.toggleRef}>{resources.joinLoyaltytermsToggleText}</Button>,\n            modal: isAuthenticated && loyaltyCard.result && loyaltyCard.result.CardNumber === undefined && LoyaltyTermsModal({\n                resources: {...resources},\n                returnRef: this.toggleRef,\n                checked: this.state.checked,\n                isOpen: this.state.isModalOpen,\n                terms: serviceTerms,\n                telemetryContent: this.telemetryContent,\n                onToggle: this._toggle,\n                onSubmit: this._submit,\n                onCheck: this._checkboxChecked\n            })\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    private _toggle(): void {\n        this.setState({isModalOpen: !this.state.isModalOpen, checked: false});\n    }\n\n    private _submit(): void {\n        if (this.props.context.request.user.isAuthenticated && !this.state.clicked) {\n            this.setState({ clicked: true });\n            const input = new IssueLoyaltyInput(this.props.context.request.apiSettings);\n\n            issueLoyalty(input, this.props.context.actionContext)\n                .then((card) => {\n                    if (this.props.config.redirectToLoyalty) {\n                        window.location.assign(getUrlSync('loyalty', this.props.context.actionContext) || '');\n                    } else {\n                        getLoyaltyCardAsync({ callerContext: this.props.context.actionContext }, card.CardNumber || '')\n                            .then((fullCard) => {\n                                this.props.context.actionContext.update(new GetLoyaltyCardInput(this.props.context.request.apiSettings), fullCard);\n                            })\n                            .catch((error: Error) => {\n                                this.props.context.actionContext.update(new GetLoyaltyCardInput(this.props.context.request.apiSettings), card);\n                                this.props.telemetry.error(error.message);\n                                this.props.telemetry.debug('Unable to fetch loyalty card');\n                            });\n                    }\n                })\n                .catch((error: Error) => {\n                    this.setState({ clicked: false });\n                    this.props.telemetry.error(error.message);\n                    this.props.telemetry.debug('Unable to issue loyalty card');\n                });\n        }\n    }\n\n    private _checkboxChecked(): void {\n        this.setState({checked: !this.state.checked});\n    }\n}\n\nexport default LoyaltyTerms;"]}