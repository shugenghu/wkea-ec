import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import { LoyaltyTermsModal } from '../components/loyalty-terms-modal';
describe('Loyalty terms modal', () => {
    let mockCoreContext;
    const modalToggleRef = React.createRef();
    let onToggle;
    let onSubmit;
    let onCheck;
    const resources = {
        loyaltyTermsHeading: 'Loyalty terms',
        loyaltyAgreeToTerms: 'By checking this box you agree to the terms above',
        joinLoyaltyTermsText: 'Join now',
        cancelLoyaltyTermsText: 'Cancel'
    };
    let props;
    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({});
        mockCoreContext.app = { config: { reviewTextMaxLength: 500, reviewTitleMaxLength: 50 } };
        mockCoreContext.actionContext.requestContext.apiSettings.rnr = { id: 'rnrId', url: 'rnrUrl', proxyUrl: '' };
        onToggle = jest.fn();
        onSubmit = jest.fn();
        onCheck = jest.fn();
        props = {
            returnRef: modalToggleRef,
            resources: resources,
            checked: false,
            isOpen: true,
            terms: React.createElement("p", null, "terms"),
            onToggle: onToggle,
            onSubmit: onSubmit,
            onCheck: onCheck
        };
    });
    it('The review modal snapshots return as expected', () => {
        const modal = LoyaltyTermsModal(props);
        expect(modal.modal).toMatchSnapshot();
        expect(modal.modalHeader).toMatchSnapshot();
        expect(modal.modalFooter).toMatchSnapshot();
        expect(modal.modalBody).toMatchSnapshot();
        expect(render(modal.cancelButton)).toMatchSnapshot();
        expect(render(modal.submitButton)).toMatchSnapshot();
        expect(render(modal.heading)).toMatchSnapshot();
        expect(render(modal.terms)).toMatchSnapshot();
        expect(render(modal.checkbox)).toMatchSnapshot();
        expect(render(modal.agreeText)).toMatchSnapshot();
    });
    it('does not call submit on click when checked is false', () => {
        props.checked = false;
        const modal = LoyaltyTermsModal(props);
        const button = mount(modal.submitButton);
        button.simulate('click');
        expect(onSubmit).not.toHaveBeenCalled();
    });
    it('calls submit on click when checked is true', () => {
        props.checked = true;
        const modal = LoyaltyTermsModal(props);
        const button = mount(modal.submitButton);
        button.simulate('click');
        expect(onSubmit).toHaveBeenCalled();
    });
    it('checkbox calls onCheck', () => {
        const modal = LoyaltyTermsModal(props);
        const checkbox = mount(modal.checkbox);
        checkbox.simulate('change');
        expect(onCheck).toHaveBeenCalled();
    });
});
//# sourceMappingURL=loyalty-terms-modal.test.js.map