import { mount, render } from 'enzyme';
import React from 'react';
import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import * as StoreActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import LoyaltyTerms from '../loyalty-terms';
let mockData;
const mockConfig = {
    redirectToLoyalty: false,
    hideToggle: false
};
let mockContext;
const mockResources = {
    loyaltyTermsHeading: 'Loyalty program terms of service',
    loyaltyAgreeToTerms: 'I have read and agree to the terms of service listed above',
    joinLoyaltytermsToggleText: 'Sign up for Fabrikam loyalty',
    joinLoyaltyTermsText: 'Join now',
    cancelLoyaltyTermsText: 'Cancel',
    loyaltyHeadingText: 'Loyalty card'
};
const mockActions = {};
const flushPromises = () => new Promise(setImmediate);
describe('LoyaltyTerms', () => {
    let moduleProps;
    beforeEach(() => {
        mockData = { loyaltyCard: RetailActions.wrapInResolvedAsyncResult({ CardNumber: undefined }) };
        mockContext = { request: { locale: 'en-us', user: { isAuthenticated: true, customerAccountNumber: 'foo' }, url: { requestUrl: { search: '' } } } };
        moduleProps = { ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext), resources: mockResources, renderView: jest.fn(props => { return React.createElement("div", { props: props }); }) };
        const myReactNodeChild1 = `whatever child module 1`;
        moduleProps.slots = { serviceTerms: [myReactNodeChild1] };
    });
    it('Renders modal if card present and user authenticated', () => {
        const component = mount(React.createElement(LoyaltyTerms, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const { modal, modalToggle } = viewProps;
        expect(modal).toBeTruthy();
        expect(modalToggle).toBeTruthy();
        expect(render(modalToggle)).toMatchSnapshot();
        component.unmount();
    });
    it('Does not render module if already have card', () => {
        moduleProps.data.loyaltyCard = RetailActions.wrapInResolvedAsyncResult({ CardNumber: '1' });
        const component = mount(React.createElement(LoyaltyTerms, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const { modal, modalToggle } = viewProps;
        expect(modal).not.toBeTruthy();
        expect(modalToggle).toBeTruthy();
        component.unmount();
    });
    it('Does not render modal if user not authed', () => {
        moduleProps.context.request.user.isAuthenticated = false;
        const component = mount(React.createElement(LoyaltyTerms, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const { modal, modalToggle } = viewProps;
        expect(modal).not.toBeTruthy();
        expect(modalToggle).toBeTruthy();
        component.unmount();
    });
    it('toggles modal', () => {
        const component = mount(React.createElement(LoyaltyTerms, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const { modalToggle } = viewProps;
        const toggle = mount(modalToggle);
        toggle.simulate('click');
        expect(component.state('isModalOpen')).toBe(true);
        toggle.unmount();
        component.unmount();
    });
    it('toggles check', () => {
        const component = mount(React.createElement(LoyaltyTerms, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const { modal } = viewProps;
        const checkbox = mount(modal.checkbox);
        checkbox.simulate('change');
        expect(component.state('checked')).toBe(true);
        checkbox.unmount();
        component.unmount();
    });
    it('submit not submit when checked is false', async () => {
        const component = mount(React.createElement(LoyaltyTerms, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = component.childAt(0).props().props;
        const { modal } = viewProps;
        jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.resolve({}));
        const submit = mount(modal.submitButton);
        submit.simulate('click');
        await flushPromises();
        expect(RetailActions.issueLoyalty).not.toHaveBeenCalled();
        submit.unmount();
        component.unmount();
    });
    it('submits when checked is true and redirects when config  is set to true', async () => {
        moduleProps.config.redirectToLoyalty = true;
        const component = mount(React.createElement(LoyaltyTerms, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        jest.spyOn(window.location, 'assign');
        jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.resolve({}));
        component.setState({ checked: true });
        component.update();
        const viewProps = component.childAt(0).props().props;
        const { modal } = viewProps;
        const submit = mount(modal.submitButton);
        submit.simulate('click');
        await flushPromises();
        expect(RetailActions.issueLoyalty).toHaveBeenCalled();
        expect(window.location.assign).toHaveBeenCalled();
        submit.unmount();
        component.unmount();
    });
    it('Refreshes the loyalty card when users dont navigate', async () => {
        moduleProps.config.redirectToLoyalty = false;
        const component = mount(React.createElement(LoyaltyTerms, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        jest.spyOn(window.location, 'assign');
        jest.spyOn(RetailActions, 'issueLoyalty').mockImplementation(() => Promise.resolve({}));
        jest.spyOn(StoreActions, 'getLoyaltyCardAsync').mockImplementation(() => Promise.resolve({}));
        component.setState({ checked: true });
        component.update();
        const viewProps = component.childAt(0).props().props;
        const { modal } = viewProps;
        const submit = mount(modal.submitButton);
        submit.simulate('click');
        await flushPromises();
        expect(RetailActions.issueLoyalty).toHaveBeenCalled();
        expect(StoreActions.getLoyaltyCardAsync).toHaveBeenCalled();
        submit.unmount();
        component.unmount();
    });
});
//# sourceMappingURL=loyalty-terms.test.js.map