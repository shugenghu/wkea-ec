{"version":3,"file":"integration.test.js","sourceRoot":"./src/","sources":["modules/account-customer-balance-tile/tests/integration.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HTMLAttributes, mount, ReactWrapper, render } from 'enzyme';\nimport React, { Component } from 'react';\n\nimport { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';\nimport { buildMockModuleProps } from '@msdyn365-commerce/core';\nimport { Customer, CustomerBalances } from '@msdyn365-commerce/retail-proxy';\n\nimport AccountCustomerBalanceTileModule from '../account-customer-balance-tile';\nimport { IAccountCustomerBalanceTileData } from '../account-customer-balance-tile.data';\nimport {\n    HeadingTag,\n    IAccountCustomerBalanceTileConfig,\n    IAccountCustomerBalanceTileProps,\n    IHeadingData\n} from '../account-customer-balance-tile.props.autogenerated';\nimport AccountCustomerBalanceTileView from '../account-customer-balance-tile.view';\nimport { CreditComponent, ErrorComponent } from '../components/account-customer-balance-tile-info';\n\nenum SELECTOR {\n    DetailsLink = '.ms-account-customer-balance-tile__links',\n}\n\nconst mockResources = {\n    viewDetailsLinkText: 'View Details',\n    apiGenericErrorMessage: 'API error',\n    noCreditErrorMessage: 'Lack of established credit',\n    accountCreditVerbagePrefix: 'You have',\n    accountCreditVerbagePostfix: 'in account credit.'\n};\n\nconst mockHeading1: IHeadingData = {\n    text: 'Mock heading 1',\n    tag: HeadingTag.h1\n};\n\nconst mockConfigWithHeading: IAccountCustomerBalanceTileConfig = {\n    className: 'testClassName',\n    heading: mockHeading1,\n    links: [\n        {\n            linkText: 'View Details',\n            linkUrl: {\n                destinationUrl: '/modern/account-credit-details',\n                type: 'internalLink'\n            },\n            ariaLabel: 'view account details'\n        }\n    ]\n};\n\nconst mockCustomerInformation = {\n    AllowOnAccountPayment: true\n};\n\nconst featureEnablingProps: {} = {\n    context: {\n        request: {\n            user: {\n                customerAccountNumber: '000001'\n            },\n            app: {\n                platform: {\n                    enableCustomerAccountPayment: 'all'\n                }\n            }\n        },\n        cultureFormatter: {\n            formatCurrency: jest.fn(price => `$${price}`)\n        }\n    }\n};\n\n// @ts-ignore\nconst buildMockProps = (balanceData): IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData> => {\n    const mockRetailActionData = {\n        balance: wrapInResolvedAsyncResult(balanceData as CustomerBalances),\n        customerInformation: wrapInResolvedAsyncResult(mockCustomerInformation as unknown as Customer)\n    };\n    return {\n        ...(buildMockModuleProps(mockRetailActionData, {}, mockConfigWithHeading) as IAccountCustomerBalanceTileProps<\n            IAccountCustomerBalanceTileData\n        >),\n        resources: mockResources,\n        // @ts-ignore\n        renderView: AccountCustomerBalanceTileView,\n        ...featureEnablingProps\n    };\n};\n\ndescribe('Account-Customer-Balance-Tile', () => {\n    let moduleProps: IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData>;\n    let customerBalanceTile: ReactWrapper<Readonly<{}>, AccountCustomerBalanceTileModule>;\n    let linkButton: ReactWrapper<HTMLAttributes, Component>;\n\n    beforeEach(() => {\n        moduleProps = buildMockProps({\n            Balance: 18.22,\n            CreditLimit: 100\n        });\n        customerBalanceTile = mount(<AccountCustomerBalanceTileModule {...moduleProps} />);\n        linkButton = customerBalanceTile.find(SELECTOR.DetailsLink);\n    });\n\n    it('should render the view details link', () => {\n        expect(linkButton.text()).toEqual(mockResources.viewDetailsLinkText);\n    });\n\n    it('should render the CreditComponent.', () => {\n        const credit = customerBalanceTile.find(CreditComponent);\n\n        expect(credit).toHaveLength(1);\n    });\n\n    it('should render correctly', () => {\n        const component = render(<AccountCustomerBalanceTileModule {...moduleProps} />);\n\n        expect(component).toMatchSnapshot();\n    });\n\n    describe('when an API Error is encountered', () => {\n        beforeEach(() => {\n            moduleProps = buildMockProps({});\n            // @ts-ignore\n            moduleProps.data.balance.status = 'FAILED';\n            moduleProps.telemetry.error = jest.fn();\n            customerBalanceTile = mount(<AccountCustomerBalanceTileModule {...moduleProps} />);\n        });\n\n        it('should render the ErrorComponent.', () => {\n            const error = customerBalanceTile.find(ErrorComponent);\n\n            expect(error).toHaveLength(1);\n        });\n\n        it('should render correctly', () => {\n            const component = render(<AccountCustomerBalanceTileModule {...moduleProps} />);\n\n            expect(component).toMatchSnapshot();\n        });\n    });\n\n    describe('when the customer has no credit established', () => {\n        beforeEach(() => {\n            moduleProps = buildMockProps({\n                Balance: 0,\n                CreditLimit: 0\n            });\n            customerBalanceTile = mount(<AccountCustomerBalanceTileModule {...moduleProps} />);\n            linkButton = customerBalanceTile.find(SELECTOR.DetailsLink);\n        });\n\n        it('should render correctly', () => {\n            const component = render(<AccountCustomerBalanceTileModule {...moduleProps} />);\n\n            expect(component).toMatchSnapshot();\n        });\n\n        it('should not render the link button.', () => {\n            expect(linkButton).toHaveLength(0);\n        });\n\n        it('should render the ErrorComponent.', () => {\n            const error = customerBalanceTile.find(ErrorComponent);\n\n            expect(error).toHaveLength(1);\n        });\n    });\n});\n"]}