import { mount, render } from 'enzyme';
import React from 'react';
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import AccountCustomerBalanceTileModule from '../account-customer-balance-tile';
import AccountCustomerBalanceTileView from '../account-customer-balance-tile.view';
import { CreditComponent, ErrorComponent } from '../components/account-customer-balance-tile-info';
var SELECTOR;
(function (SELECTOR) {
    SELECTOR["DetailsLink"] = ".ms-account-customer-balance-tile__links";
})(SELECTOR || (SELECTOR = {}));
const mockResources = {
    viewDetailsLinkText: 'View Details',
    apiGenericErrorMessage: 'API error',
    noCreditErrorMessage: 'Lack of established credit',
    accountCreditVerbagePrefix: 'You have',
    accountCreditVerbagePostfix: 'in account credit.'
};
const mockHeading1 = {
    text: 'Mock heading 1',
    tag: "h1"
};
const mockConfigWithHeading = {
    className: 'testClassName',
    heading: mockHeading1,
    links: [
        {
            linkText: 'View Details',
            linkUrl: {
                destinationUrl: '/modern/account-credit-details',
                type: 'internalLink'
            },
            ariaLabel: 'view account details'
        }
    ]
};
const mockCustomerInformation = {
    AllowOnAccountPayment: true
};
const featureEnablingProps = {
    context: {
        request: {
            user: {
                customerAccountNumber: '000001'
            },
            app: {
                platform: {
                    enableCustomerAccountPayment: 'all'
                }
            }
        },
        cultureFormatter: {
            formatCurrency: jest.fn(price => `$${price}`)
        }
    }
};
const buildMockProps = (balanceData) => {
    const mockRetailActionData = {
        balance: wrapInResolvedAsyncResult(balanceData),
        customerInformation: wrapInResolvedAsyncResult(mockCustomerInformation)
    };
    return {
        ...buildMockModuleProps(mockRetailActionData, {}, mockConfigWithHeading),
        resources: mockResources,
        renderView: AccountCustomerBalanceTileView,
        ...featureEnablingProps
    };
};
describe('Account-Customer-Balance-Tile', () => {
    let moduleProps;
    let customerBalanceTile;
    let linkButton;
    beforeEach(() => {
        moduleProps = buildMockProps({
            Balance: 18.22,
            CreditLimit: 100
        });
        customerBalanceTile = mount(React.createElement(AccountCustomerBalanceTileModule, Object.assign({}, moduleProps)));
        linkButton = customerBalanceTile.find(SELECTOR.DetailsLink);
    });
    it('should render the view details link', () => {
        expect(linkButton.text()).toEqual(mockResources.viewDetailsLinkText);
    });
    it('should render the CreditComponent.', () => {
        const credit = customerBalanceTile.find(CreditComponent);
        expect(credit).toHaveLength(1);
    });
    it('should render correctly', () => {
        const component = render(React.createElement(AccountCustomerBalanceTileModule, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    describe('when an API Error is encountered', () => {
        beforeEach(() => {
            moduleProps = buildMockProps({});
            moduleProps.data.balance.status = 'FAILED';
            moduleProps.telemetry.error = jest.fn();
            customerBalanceTile = mount(React.createElement(AccountCustomerBalanceTileModule, Object.assign({}, moduleProps)));
        });
        it('should render the ErrorComponent.', () => {
            const error = customerBalanceTile.find(ErrorComponent);
            expect(error).toHaveLength(1);
        });
        it('should render correctly', () => {
            const component = render(React.createElement(AccountCustomerBalanceTileModule, Object.assign({}, moduleProps)));
            expect(component).toMatchSnapshot();
        });
    });
    describe('when the customer has no credit established', () => {
        beforeEach(() => {
            moduleProps = buildMockProps({
                Balance: 0,
                CreditLimit: 0
            });
            customerBalanceTile = mount(React.createElement(AccountCustomerBalanceTileModule, Object.assign({}, moduleProps)));
            linkButton = customerBalanceTile.find(SELECTOR.DetailsLink);
        });
        it('should render correctly', () => {
            const component = render(React.createElement(AccountCustomerBalanceTileModule, Object.assign({}, moduleProps)));
            expect(component).toMatchSnapshot();
        });
        it('should not render the link button.', () => {
            expect(linkButton).toHaveLength(0);
        });
        it('should render the ErrorComponent.', () => {
            const error = customerBalanceTile.find(ErrorComponent);
            expect(error).toHaveLength(1);
        });
    });
});
//# sourceMappingURL=integration.test.js.map