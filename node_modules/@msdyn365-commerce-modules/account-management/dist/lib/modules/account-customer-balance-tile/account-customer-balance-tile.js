import { __decorate } from "tslib";
import { getTelemetryObject, Heading } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import get from 'lodash/get';
import { computed, reaction } from 'mobx';
import * as React from 'react';
import { CreditComponent, ErrorComponent } from './components/account-customer-balance-tile-info';
import LinksComponent from './components/account-customer-balance-tile-links';
class AccountCustomerBalanceTile extends React.Component {
    constructor(props) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this.state = { ...this._initState() };
        reaction(() => this.hasError, () => {
            this.props.context.telemetry.error('Error retrieving customer account balance');
            this.setState({
                content: React.createElement(ErrorComponent, { value: this.props.resources.apiGenericErrorMessage })
            });
        });
    }
    get hasError() {
        return get(this.props, 'data.balance.status') !== 'SUCCESS';
    }
    get isCustomerAccountPaymentEnabled() {
        const customerResult = get(this.props, 'data.customerInformation.result');
        const allowOnAccountPayment = customerResult ? customerResult.AllowOnAccountPayment : false;
        const isB2BCustomer = customerResult ? customerResult.IsB2B : false;
        const enableCustomerAccountPayment = get(this.props, 'context.request.app.platform.enableCustomerAccountPayment');
        return (allowOnAccountPayment &&
            (enableCustomerAccountPayment === 'all' ||
                (enableCustomerAccountPayment === 'b2b' && isB2BCustomer) ||
                (enableCustomerAccountPayment === 'b2c' && !isB2BCustomer)));
    }
    render() {
        if (!this.isCustomerAccountPaymentEnabled) {
            return React.createElement(React.Fragment, null);
        }
        const { className, heading, links } = this.props.config;
        const viewProps = {
            ...this.props,
            AccountCustomerBalanceTile: {
                moduleProps: this.props,
                className: classnames('ms-account-customer-balance-tile', className)
            },
            heading: heading && (React.createElement(Heading, { className: 'ms-account-customer-balance-tile__heading', headingTag: heading.tag, text: heading.text })),
            content: this.state.content,
            links: this.state.isDetailsLinkDisplayed && (React.createElement(LinksComponent, Object.assign({}, {
                links: links,
                onTextChange: (index) => (event) => void 0,
                requestContext: this.props.context.request,
                telemetryContent: this.telemetryContent
            })))
        };
        return this.props.renderView(viewProps);
    }
    _initState() {
        const account = get(this.props, 'data.balance.result');
        let content;
        let isDetailsLinkDisplayed = false;
        if (this.hasError) {
            this.props.telemetry.error('Error retrieving customer account balance');
            content = React.createElement(ErrorComponent, { error: this.props.resources.apiGenericErrorMessage });
        }
        else if (account.Balance === 0 && account.CreditLimit === 0) {
            content = React.createElement(ErrorComponent, { error: this.props.resources.noCreditErrorMessage });
        }
        else {
            const { accountCreditVerbagePrefix, accountCreditVerbagePostfix } = this.props.resources;
            const currencyCode = get(this.props, 'context.request.channel.Currency');
            const formatCurrency = get(this.props, 'context.cultureFormatter.formatCurrency');
            const customerBalanceFormatted = `${formatCurrency(account.Balance.toFixed(2), currencyCode)}`;
            isDetailsLinkDisplayed = true;
            content = (React.createElement(CreditComponent, { verbagePrefix: accountCreditVerbagePrefix, value: customerBalanceFormatted, verbagePostfix: accountCreditVerbagePostfix, className: 'ms-account-customer-balance-tile__balance' }));
        }
        return { content, isDetailsLinkDisplayed };
    }
}
__decorate([
    computed
], AccountCustomerBalanceTile.prototype, "hasError", null);
__decorate([
    computed
], AccountCustomerBalanceTile.prototype, "isCustomerAccountPaymentEnabled", null);
export default AccountCustomerBalanceTile;
//# sourceMappingURL=account-customer-balance-tile.js.map