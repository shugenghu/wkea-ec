{"version":3,"file":"account-customer-balance-tile.js","sourceRoot":"./src/","sources":["modules/account-customer-balance-tile/account-customer-balance-tile.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getTelemetryObject, Heading, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport classnames from 'classnames';\nimport get from 'lodash/get';\nimport { computed, reaction } from 'mobx';\nimport * as React from 'react';\nimport { IAccountCustomerBalanceTileData } from './account-customer-balance-tile.data';\nimport { IAccountCustomerBalanceTileProps } from './account-customer-balance-tile.props.autogenerated';\nimport { CreditComponent, ErrorComponent } from './components/account-customer-balance-tile-info';\nimport LinksComponent from './components/account-customer-balance-tile-links';\n\nexport interface IAccountCustomerBalanceTileViewProps extends IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData> {\n    AccountCustomerBalanceTile: IModuleProps;\n    className: string;\n    heading?: React.ReactNode;\n    content: React.ReactNode;\n    links: React.ReactNode;\n}\n\nexport interface IAccountCustomerBalanceTileViewState {\n    isDetailsLinkDisplayed: boolean;\n    content: React.ReactNode;\n}\n\n/**\n *\n * AccountCustomerBalanceTile component\n * @extends {React.Component<IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData>>}\n */\nclass AccountCustomerBalanceTile extends React.Component<\n    IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData>,\n    IAccountCustomerBalanceTileViewState\n> {\n    @computed get hasError(): boolean {\n        return get(this.props, 'data.balance.status') !== 'SUCCESS';\n    }\n\n    private telemetryContent: ITelemetryContent;\n\n    constructor(props: IAccountCustomerBalanceTileProps<IAccountCustomerBalanceTileData>) {\n        super(props);\n\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n\n        // @ts-ignore\n        this.state = { ...this._initState() };\n\n        reaction(\n            () => this.hasError,\n            () => {\n                this.props.context.telemetry.error('Error retrieving customer account balance');\n                this.setState({\n                    content: <ErrorComponent value={this.props.resources.apiGenericErrorMessage} />\n                });\n            }\n        );\n    }\n\n    @computed get isCustomerAccountPaymentEnabled(): boolean {\n        const customerResult = get(this.props, 'data.customerInformation.result');\n\n        const allowOnAccountPayment = customerResult ? customerResult.AllowOnAccountPayment : false;\n        const isB2BCustomer = customerResult ? customerResult.IsB2B : false;\n        const enableCustomerAccountPayment = get(this.props, 'context.request.app.platform.enableCustomerAccountPayment');\n\n        return (\n            allowOnAccountPayment &&\n            (enableCustomerAccountPayment === 'all' ||\n                (enableCustomerAccountPayment === 'b2b' && isB2BCustomer) ||\n                (enableCustomerAccountPayment === 'b2c' && !isB2BCustomer))\n        );\n    }\n\n    public render(): JSX.Element {\n        if (!this.isCustomerAccountPaymentEnabled) {\n            return <React.Fragment />;\n        }\n\n        const { className, heading, links } = this.props.config;\n        const viewProps = {\n            ...this.props,\n            AccountCustomerBalanceTile: {\n                moduleProps: this.props,\n                className: classnames('ms-account-customer-balance-tile', className)\n            },\n            heading: heading && (\n                <Heading className='ms-account-customer-balance-tile__heading' headingTag={heading.tag} text={heading.text} />\n            ),\n            content: this.state.content,\n            links: this.state.isDetailsLinkDisplayed && (\n                <LinksComponent\n                    {...{\n                        links: links,\n                        onTextChange: (index: number) => (event: Msdyn365.ContentEditableEvent) => void 0,\n                        requestContext: this.props.context.request,\n                        telemetryContent: this.telemetryContent\n                    }}\n                />\n            )\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    private _initState(): IAccountCustomerBalanceTileViewState {\n        const account = get(this.props, 'data.balance.result');\n\n        let content: React.ReactNode;\n        let isDetailsLinkDisplayed = false;\n\n        if (this.hasError) {\n            this.props.telemetry.error('Error retrieving customer account balance');\n            content = <ErrorComponent error={this.props.resources.apiGenericErrorMessage} />;\n        } else if (account.Balance === 0 && account.CreditLimit === 0) {\n            // non-established credit\n            content = <ErrorComponent error={this.props.resources.noCreditErrorMessage} />;\n        } else {\n            // successfully retrieved balance\n            const { accountCreditVerbagePrefix, accountCreditVerbagePostfix } = this.props.resources;\n            const currencyCode = get(this.props, 'context.request.channel.Currency');\n            const formatCurrency = get(this.props, 'context.cultureFormatter.formatCurrency');\n            const customerBalanceFormatted = `${formatCurrency(account.Balance.toFixed(2), currencyCode)}`;\n\n            isDetailsLinkDisplayed = true;\n            content = (\n                <CreditComponent\n                    verbagePrefix={accountCreditVerbagePrefix}\n                    value={customerBalanceFormatted}\n                    verbagePostfix={accountCreditVerbagePostfix}\n                    className={'ms-account-customer-balance-tile__balance'}\n                />\n            );\n        }\n\n        return { content, isDetailsLinkDisplayed };\n    }\n}\n\nexport default AccountCustomerBalanceTile;\n"]}