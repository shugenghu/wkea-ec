import { IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { LoyaltyRewardPoint, LoyaltyRewardPointActivity } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { IAccountLoyaltyData } from './account-loyalty.data';
import { IAccountLoyaltyProps } from './account-loyalty.props.autogenerated';
export interface IAccountLoyaltyViewProps extends IAccountLoyaltyProps<{}> {
    AccountLoyalty: IModuleProps;
    className: string;
    totalPoints: number;
    heading?: React.ReactNode;
    Info: INodeProps;
    infoLabel: React.ReactNode;
    cardNumber: React.ReactNode;
    joinDate: React.ReactNode;
    Points: INodeProps;
    pointsLabel: React.ReactNode;
    points: React.ReactNode;
    Breakdown: INodeProps;
    RewardPoints: INodeProps;
    PointsBreakdown: INodeProps;
    rewardPoints?: IAccountLoyaltyRewardPointProps[];
    Button: INodeProps;
    homeButton: React.ReactNode;
    pointsModal: IAccountLoyaltyModalProps;
}
export interface IAccountLoyaltyState {
    isModalOpen: boolean;
    currentModalData?: LoyaltyRewardPoint;
    isModalExpiring: boolean;
    modalID: string;
    currentFocus?: React.RefObject<HTMLElement>;
    pointsActivity: LoyaltyRewardPointActivity[] | undefined;
}
export interface IAccountLoyaltyRewardPointProps {
    label: React.ReactNode;
    availableModalLabel: React.ReactNode;
    availableModalTrigger: React.ReactNode;
    expiringModalLabel: React.ReactNode;
    expiringModalTrigger: React.ReactNode;
}
export declare type horizontalModalPosition = 'left' | 'center' | 'right';
export declare type verticalModalPosition = 'top' | 'center' | 'bottom';
export interface IAccountLoyaltyModalProps {
    isOpen: boolean;
    horizontalPosition?: horizontalModalPosition;
    verticalPosition?: verticalModalPosition;
    modalClassName?: string;
    modalHeaderClassName?: string;
    modalHeader?: string;
    modalBodyClassName?: string;
    ModalBodyTop: INodeProps;
    pointsDescription?: React.ReactNode;
    totalPoints?: React.ReactNode;
    ModalBodyHeaders: INodeProps;
    date?: React.ReactNode;
    balanceLabel?: React.ReactNode;
    rewardPointsActivity?: IAccountLoyaltyActivityProps[];
    returnFocusRef?: React.RefObject<HTMLElement>;
    onClose(): void;
}
export interface IAccountLoyaltyActivityProps {
    Activity: INodeProps;
    activityType: React.ReactNode;
    activityDate: React.ReactNode;
    activityPoints: React.ReactNode;
}
export interface IProps extends IAccountLoyaltyProps<IAccountLoyaltyData> {
}
declare class AccountLoyalty extends React.PureComponent<IProps, IAccountLoyaltyState> {
    private _buttonAvailableRef;
    private _buttonExpireRef;
    private telemetryContent?;
    private payLoad;
    constructor(props: IAccountLoyaltyProps<IAccountLoyaltyData>);
    render(): JSX.Element | null;
    handleHeadingChange: (event: Msdyn365.ContentEditableEvent) => string;
    private _formatJoinDate;
    private _renderRewardPoints;
    private _renderModal;
    private _getTotalPoints;
    private _getPoints;
    private _renderPointsActivity;
    private _parseDate;
    private _getTimelineType;
    private _populateModalData;
    private _closeModal;
}
export default AccountLoyalty;
