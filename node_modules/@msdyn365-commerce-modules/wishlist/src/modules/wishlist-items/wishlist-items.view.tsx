/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as React from 'react';

import {getPayloadObject, getTelemetryAttributes, INodeProps, ITelemetryContent, Module, Node } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { IWishlistItemViewProps } from '../..';
import { IWishlistItemsViewProps } from './wishlist-items';

const WishlistItemsView: React.FC<IWishlistItemsViewProps> = props => {
    const { WishlistItems, status, statusMessage, heading, Products, products, Product, ProductDetails, ProductDimensions, telemetryContent } = props;

    return (
        <Module {...WishlistItems}>
            {heading}
            {status !== 'SUCCESS' && statusMessage}
            { Products && products && products.length > 0 &&
                <Node className={ Products.className } {...Products}>
                    {products && products.map((product) => {
                        return _renderItem(product, Product, ProductDimensions, ProductDetails, telemetryContent);
                    })}
                </Node>
            }
        </Module>
    );
};

const _renderItem = (product: IWishlistItemViewProps, Product?: INodeProps, ProductDimensions?: INodeProps, ProductDetails?: INodeProps, telemetryContent?: ITelemetryContent): JSX.Element | null => {

    const { key, productImage, productLink, productPrice, productDimensions, addToCartButton, removeButton, productStatusMessage, entireProductLink, productName, productAriaLabel, inventoryInformation } = product;
    const payLoad = getPayloadObject('click', telemetryContent!, '', key);
    const productAttributes = getTelemetryAttributes(telemetryContent!, payLoad);
    if (entireProductLink) {
        return (
            <Node key={key} className={Product!.className} {...Product}>
                <Node href={entireProductLink} className={classnames('entire-product-link ', ProductDetails!.className)} {...productAttributes} aria-label={productAriaLabel} tag={ProductDetails!.tag}>
                    {productImage}
                    {productName}
                    {productDimensions && ProductDimensions &&
                        <Node className={ProductDimensions.className} {...ProductDimensions}>
                            {
                                productDimensions.map((dimension) => {
                                    return dimension;
                                })
                            }
                        </Node>
                    }
                    {productPrice}
                </Node>
                {inventoryInformation}
                {addToCartButton}
                {removeButton}
                {productStatusMessage}
            </Node>
        );
    } else {
        return (
            <Node key={ key } className={Product!.className} {...Product}>
                { productImage }
                { productLink }
                { productDimensions && ProductDimensions &&
                    <Node className={ProductDimensions.className} {...ProductDimensions}>
                        {
                            productDimensions.map((dimension) => {
                                return dimension;
                            })
                        }
                    </Node>
                }
                { productPrice }
                { addToCartButton }
                { removeButton }
                { productStatusMessage }
            </Node>
        );
    }
};

export default WishlistItemsView;