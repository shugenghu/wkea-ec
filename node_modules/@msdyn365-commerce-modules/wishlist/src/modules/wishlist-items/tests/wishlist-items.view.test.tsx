/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { render,shallow } from 'enzyme';
import * as React from 'react';
import { IWishlistItemViewProps } from '../components';
import { IWishlistItemsViewProps } from '../wishlist-items';
import { IWishlistItemsResources } from '../wishlist-items.props.autogenerated';
import WishlistItemsView from '../wishlist-items.view';

const mockActionContext = buildHydratedMockActionContext();
  // @ts-ignore partial mock
const mockContext: ICoreContext<{}> = {
    actionContext: mockActionContext,
    request: {},
    app: {
      config: {
        maxQuantityForCartLineItem: 10,
        outOfStockThreshold: 2,
        enableStockCheck: false
      }
    }
};

const mockProducts: IWishlistItemViewProps[] = [
    {
        key: 'index1',
        productImage: <div>Product Image</div>,
        productLink: <div>Product Link</div>,
        productPrice: <div>Product Price</div>,
        entireProductLink:'https//pexample.com',
        productDimensions: [
            {
                className:'productDimensions1'
            },
        ],
        addToCartButton: <div>Add to Cart Button</div>,
        removeButton: <div>Remove Button</div>
    },
    {
        key: 'index2',
        productImage: <div>Product Image</div>,
        productLink: <div>Product Link</div>,
        productPrice: <div>Product Price</div>,
        entireProductLink:'https//pexample.com',
        productDimensions: [
            {
                className:'productDimensions1'
            }
        ],
        addToCartButton: <div>Add to Cart Button</div>,
        removeButton: <div>Remove Button</div>
    }
];
const mockProducts2: IWishlistItemViewProps[] = [
    {
        key: 'index1',
        productImage: <div>Product Image</div>,
        productLink: <div>Product Link</div>,
        productPrice: <div>Product Price</div>,
        productDimensions: [
            <div key='1'>Dimensions</div>
        ],
        addToCartButton: <div>Add to Cart Button</div>,
        removeButton: <div>Remove Button</div>
    },
    {
        key: 'index2',
        productImage: <div>Product Image</div>,
        productLink: <div>Product Link</div>,
        productPrice: <div>Product Price</div>,
        productDimensions: [
            <div key='1'>Dimensions</div>,
        ],
        addToCartButton: <div>Add to Cart Button</div>,
        removeButton: <div>Remove Button</div>
    }
];

const mockResources: IWishlistItemsResources = {
    emptyWishlistText: 'Your wishlist is empty',
    removeButtonText: 'Remove from wishlist',
    removeButtonAriaLabel: 'Remove from wishlist',
    waitingClass: 'waiting',
    unableToGetWishlist: 'Unable to get your wishlists!',
    addToCartButtonText: 'add to cart',
    outOfStockText: 'This item is out of stock',
    addedToCartSuccessMessage: 'Added to your cart',
    addedToCartFailureMessage: 'Add to cart failed',
    maxQuantityLimitText: 'You can only add 5 of these to your cart',
    priceFree: 'Free',
    originalPriceText: 'Original price',
    currentPriceText: 'Current price',
    productDimensionTypeColor: 'Color',
    productDimensionTypeSize: 'Size',
    productDimensionTypeStyle: 'Style',
    wishlistErrorGettingWishlist: 'Sorry we are unable to load your wishlist at this moment, please try again later.'
  };

describe('WishlistItems unit tests -', () => {
    it('View renders correctly', () => {
        const moduleProps: IWishlistItemsViewProps = buildMockModuleProps({}, {}) as IWishlistItemsViewProps;

        const mockProps: IWishlistItemsViewProps = {
            ...moduleProps,
            WishlistItems: {
                moduleProps: moduleProps,
                className: 'ms-wishlist-items'
            },
            status: 'SUCCESS',
            heading: <div className={'ms-wishlist-items__heading'}>Heading</div>,
            Product: {
                className: 'ms-wishlist-items__product',
                tag: 'li',
                productDimensions:{
                    className:'__ProductDimensions'
                }
            },
            Products: {
                className: 'ms-wishlist-items__products',
                tag: 'ul',
                key:'ul-2',
                entireProductLink:'https//pexample.com'
            },
            ProductDetails:{
                className:'__ProductDimensions',
                tag: 'aside',
                key:'ul-1'
            },
            ProductDimensions:{
                className:'__ProductDimensions'
            },
            products: mockProducts,
            resources: mockResources
        };

        const component = shallow(<WishlistItemsView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('View renders status message correctly', () => {
        const moduleProps: IWishlistItemsViewProps = buildMockModuleProps({}, {}) as IWishlistItemsViewProps;

        const mockProps: IWishlistItemsViewProps = {
            ...moduleProps,
            WishlistItems: {
                moduleProps: moduleProps,
                className: 'ms-wishlist-items'
            },
            status: 'LOADING',
            statusMessage: <p>Waiting</p>,
            heading: <div className={'ms-wishlist-items__heading'}>Heading</div>,
            Products:{
                className: 'ms-wishlist-items__products',
                tag: 'ul',
            },
            Product: {
                className: 'ms-wishlist-items__product',
                tag: 'li',
            },
            products: mockProducts2,
            resources: mockResources
        };

        const component = render(<WishlistItemsView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});