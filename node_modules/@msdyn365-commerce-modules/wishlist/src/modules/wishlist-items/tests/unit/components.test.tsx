/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { FullProduct } from '@msdyn365-commerce/commerce-entities';
import { buildHydratedMockActionContext, ICultureInfoFormatter, IImageSettings, ITelemetry } from '@msdyn365-commerce/core';
import { mount, render} from 'enzyme';
import * as React from 'react';
import { WishlistItem, WishlistItemDimension, WishlistItemsStatusMessage } from '../../components/';
import { IWishlistItemActionMessageState, wishlistStatus } from '../../wishlist-items';

const mockFullProduct = {
    ProductDetails: {
        RecordId: 22565423116,
        ItemId: '2101',
        Name: 'A. Datum Compact Digital Camera M200',
        Description: 'A. Datum Compact Dig',
        ProductTypeValue: 5,
        DefaultUnitOfMeasure: 'Ea',
        BasePrice: 129,
        Price: 129,
        AdjustedPrice: 103.2,
        MasterProductId: 22565423455,
        Components: [],
        Dimensions: [
            {
                DimensionTypeValue: 1,
                DimensionValue: {
                    RecordId: 22565420935,
                    Value: 'Black',
                    ExtensionProperties: []
                },
                ExtensionProperties: []
            },
            {
              DimensionTypeValue: 2,
              DimensionValue: {
                  RecordId: 22565420935,
                  Value: 'Invalid',
                  ExtensionProperties: []
              },
              ExtensionProperties: []
            },
            {
              DimensionTypeValue: 3,
              DimensionValue: {
                  RecordId: 22565420935,
                  Value: 'Large',
                  ExtensionProperties: []
              },
              ExtensionProperties: []
            },
            {
              DimensionTypeValue: 4,
              DimensionValue: {
                  RecordId: 22565420935,
                  Value: 'Hooded',
                  ExtensionProperties: []
              },
              ExtensionProperties: []
            },
        ],
        PrimaryImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/Products%2F92091_000_001.png&w=315&h=315&q=80&m=6&f=jpg',
        ExtensionProperties: []
    },
    ProductPrice: {
        ProductId: 68719494542,
        ListingId: 68719494542,
        BasePrice: 165,
        TradeAgreementPrice: 165,
        AdjustedPrice: 165,
        CustomerContextualPrice: 165,
        DiscountAmount: 0,
        CurrencyCode: 'USD',
        ItemId: '93037',
        InventoryDimensionId: '#000000100000711B',
        UnitOfMeasure: 'ea',
        ValidFrom: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
        ProductLookupId: 0,
        ChannelId: 68719478279,
        CatalogId: 0,
        DiscountLines: [],
        ExtensionProperties: []
    },
    ProductRating: {
        ProductId: 68719494542,
        AverageRating: 3,
        TotalRatings: 0,
        RatingDistribution: [],
        ExtensionProperties: []
    }
} as FullProduct;

const mockFullProductNoDimensions = {
    ProductDetails: {
        RecordId: 22565423116,
        ItemId: '2101',
        Name: 'A. Datum Compact Digital Camera M200',
        Description: 'A. Datum Compact Dig',
        ProductTypeValue: 5,
        DefaultUnitOfMeasure: 'Ea',
        BasePrice: 129,
        Price: 129,
        AdjustedPrice: 103.2,
        MasterProductId: 22565423455,
        Components: [],
        Dimensions: [],
        PrimaryImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/Products%2F92091_000_001.png&w=315&h=315&q=80&m=6&f=jpg',
        ExtensionProperties: []
    },
    ProductPrice: {
        ProductId: 68719494542,
        ListingId: 68719494542,
        BasePrice: 165,
        TradeAgreementPrice: 165,
        AdjustedPrice: 165,
        CustomerContextualPrice: 165,
        DiscountAmount: 0,
        CurrencyCode: 'USD',
        ItemId: '93037',
        InventoryDimensionId: '#000000100000711B',
        UnitOfMeasure: 'ea',
        ValidFrom: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
        ProductLookupId: 0,
        ChannelId: 68719478279,
        CatalogId: 0,
        DiscountLines: [],
        ExtensionProperties: []
    },
    ProductRating: {
        ProductId: 68719494542,
        AverageRating: 3,
        TotalRatings: 0,
        RatingDistribution: [],
        ExtensionProperties: []
    }
} as FullProduct;

const mockImageSetting: IImageSettings = {
    viewports: {
        xs: { q: `w=315&h=315&m=6`, w: 0, h: 0 },
        lg: { q: `w=315&h=315&m=6`, w: 0, h: 0 },
        xl: { q: `w=315&h=315&m=6`, w: 0, h: 0 }
    },
    lazyload: true
};
const mockActionContext = buildHydratedMockActionContext();
// @ts-ignore
mockActionContext.requestContext.apiSettings = {baseImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/'};
// @ts-ignore pasrtial mock
const mockContext: ICoreContext<{}> = {
  actionContext: mockActionContext,
  request: {},
  app: {
    config: {
      maxQuantityForCartLineItem: 10,
      outOfStockThreshold: 2,
      enableStockCheck: true
    }
  },
  // @ts-ignore partial mock
  cultureFormatter: {
      formatCurrency: jest.fn()
  } as ICultureInfoFormatter
};

mockContext.actionContext.eventId = 'b7664540-47bf-11ea-ab5c-0762824bce08';
const mockProps = {
    product: mockFullProduct.ProductDetails,
    price: mockFullProduct.ProductPrice,
    context: mockContext,
    wishlistState: {} as IWishlistItemActionMessageState,
    productUrl: '/',
    imageSettings: mockImageSetting,
    removeFromWishlistText: 'Remove from wishlist',
    isInStock: true,
    addToCartText: 'Add to Cart',
    outOfStockText: 'Out of stock',
    index: 1,
    itemKey: `${mockFullProduct.ProductDetails.RecordId}-${mockFullProduct.ProductDetails.ItemId}-1`,
    telemetry: {} as ITelemetry,
    moduleTypeName: 'typeName',
    moduleId: 'id',
    handlers: {
        onAddToCart: jest.fn(),
        onRemoveItem: jest.fn(),
        onDismiss: jest.fn()
    },
    resources: {
        productDimensionTypeColor: 'Color',
        productDimensionTypeSize: 'Size',
        productDimensionTypeStyle: 'Hooded',
        freePriceText: 'Free',
        originalPriceText: 'Original',
        currentPriceText: 'Current'
    }
};

describe('WishlistItems - Unit Tests', () => {
   it('WishlistItemsDimensions renders correctly', () => {
        const mockPropsDimensions = {
            key: '1',
            className: 'msc-product-dimension',
            dimensionType: 'Color',
            dimensionValue: 'Black'
        };

        const component = render(<WishlistItemDimension {...mockPropsDimensions}/>);
        expect(component).toMatchSnapshot();
    });

   it('WishlistItemStatusMessage - LOADING - renders correctly', () => {
        const mockPropsMessage = {
            errorType: 'LOADING' as wishlistStatus,
            text: 'waiting'
        };

        const component = render(<WishlistItemsStatusMessage {...mockPropsMessage}/>);
        expect(component).toMatchSnapshot();
    });

   it('WishlistItemStatusMessage - FAILED - renders correctly', () => {
        const mockPropsMessage = {
            errorType: 'FAILED' as wishlistStatus,
            text: 'Could not get your wishlist'
        };

        const component = render(<WishlistItemsStatusMessage {...mockPropsMessage}/>);
        expect(component).toMatchSnapshot();
    });

   it('WishlistItemStatusMessage - EMPTY - renders correctly', () => {
        const mockPropsMessage = {
            errorType: 'EMPTY' as wishlistStatus,
            text: 'No items in your wishlist'
        };

        const component = render(<WishlistItemsStatusMessage {...mockPropsMessage}/>);
        expect(component).toMatchSnapshot();
    });

   it('Wishlist Item addToCartButton fires handler event', () => {
        const component = WishlistItem(mockProps);
        expect(component!.addToCartButton).toBeDefined();
        const addToCartButton = mount(component!.addToCartButton as React.ReactElement);
        addToCartButton.simulate('click');
        expect(mockProps.handlers.onAddToCart).toBeCalled();
        expect(component).toMatchSnapshot();
    });

   it('Wishlist Item removeButton fires handler event', () => {
        const component = WishlistItem(mockProps);
        expect(component!.removeButton).toBeDefined();
        const removeButton = mount(component!.removeButton as React.ReactElement);
        removeButton.simulate('click');
        expect(mockProps.handlers.onRemoveItem).toBeCalled();
    });

   it('Wishlist Item renders correctly with no dimensions', () => {
        const product = mockFullProductNoDimensions;
        const mockPropsNoDimensions = {
            product: product.ProductDetails,
            price: product.ProductPrice,
            context: mockContext,
            wishlistState: {} as IWishlistItemActionMessageState,
            productUrl: '/',
            imageSettings: mockImageSetting,
            removeFromWishlistText: 'Remove from wishlist',
            isInStock: true,
            addToCartText: 'Add to Cart',
            outOfStockText: 'Out of stock',
            index: 1,
            itemKey: `${product.ProductDetails.RecordId}-${product.ProductDetails.ItemId}-1`,
            telemetry: {} as ITelemetry,
            moduleTypeName: 'typeName',
            moduleId: 'id',
            handlers: {
                onAddToCart: jest.fn(),
                onRemoveItem: jest.fn(),
                onDismiss: jest.fn()
            },
            resources: {
                productDimensionTypeColor: 'Color',
                productDimensionTypeSize: 'Size',
                productDimensionTypeStyle: 'Hooded',
                freePriceText: 'Free',
                originalPriceText: 'Original',
                currentPriceText: 'Current'
            }
        };

        const component = WishlistItem(mockPropsNoDimensions);
        expect(component!.productDimensions).toEqual([]);
    });

   it('Wishlist Item renders correctly with enableImageProductLink', () => {
        const product = mockFullProductNoDimensions;
        const mockPropsEntireProductLink = {
            product: product.ProductDetails,
            price: product.ProductPrice,
            context: mockContext,
            wishlistState: {} as IWishlistItemActionMessageState,
            productUrl: '/',
            imageSettings: mockImageSetting,
            removeFromWishlistText: 'Remove from wishlist',
            isInStock: true,
            addToCartText: 'Add to Cart',
            outOfStockText: 'Out of stock',
            index: 1,
            enableImageProductLink: true,
            itemKey: `${product.ProductDetails.RecordId}-${product.ProductDetails.ItemId}-1`,
            telemetry: {} as ITelemetry,
            moduleTypeName: 'typeName',
            moduleId: 'id',
            handlers: {
                onAddToCart: jest.fn(),
                onRemoveItem: jest.fn(),
                onDismiss: jest.fn()
            },
            resources: {
                productDimensionTypeColor: 'Color',
                productDimensionTypeSize: 'Size',
                productDimensionTypeStyle: 'Hooded',
                freePriceText: 'Free',
                originalPriceText: 'Original',
                currentPriceText: 'Current'
            }
        };

        const component = WishlistItem(mockPropsEntireProductLink);
        expect(component?.entireProductLink).toBeDefined();
        expect(component?.productAriaLabel).toBeDefined();
    });

   it('Wishlist Item does not render invalid dimension', () => {
        const component = WishlistItem(mockProps);
        expect(component!.productDimensions).toBeDefined();
        const dimensions = component!.productDimensions;
        expect(dimensions).toBeDefined();
        expect(dimensions![0]).toBeDefined();
        expect(dimensions![1]).toBeUndefined();
    });

});