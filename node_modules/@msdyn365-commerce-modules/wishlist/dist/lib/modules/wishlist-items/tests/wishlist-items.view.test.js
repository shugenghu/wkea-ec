import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { render, shallow } from 'enzyme';
import * as React from 'react';
import WishlistItemsView from '../wishlist-items.view';
const mockActionContext = buildHydratedMockActionContext();
const mockContext = {
    actionContext: mockActionContext,
    request: {},
    app: {
        config: {
            maxQuantityForCartLineItem: 10,
            outOfStockThreshold: 2,
            enableStockCheck: false
        }
    }
};
const mockProducts = [
    {
        key: 'index1',
        productImage: React.createElement("div", null, "Product Image"),
        productLink: React.createElement("div", null, "Product Link"),
        productPrice: React.createElement("div", null, "Product Price"),
        entireProductLink: 'https//pexample.com',
        productDimensions: [
            {
                className: 'productDimensions1'
            },
        ],
        addToCartButton: React.createElement("div", null, "Add to Cart Button"),
        removeButton: React.createElement("div", null, "Remove Button")
    },
    {
        key: 'index2',
        productImage: React.createElement("div", null, "Product Image"),
        productLink: React.createElement("div", null, "Product Link"),
        productPrice: React.createElement("div", null, "Product Price"),
        entireProductLink: 'https//pexample.com',
        productDimensions: [
            {
                className: 'productDimensions1'
            }
        ],
        addToCartButton: React.createElement("div", null, "Add to Cart Button"),
        removeButton: React.createElement("div", null, "Remove Button")
    }
];
const mockProducts2 = [
    {
        key: 'index1',
        productImage: React.createElement("div", null, "Product Image"),
        productLink: React.createElement("div", null, "Product Link"),
        productPrice: React.createElement("div", null, "Product Price"),
        productDimensions: [
            React.createElement("div", { key: '1' }, "Dimensions")
        ],
        addToCartButton: React.createElement("div", null, "Add to Cart Button"),
        removeButton: React.createElement("div", null, "Remove Button")
    },
    {
        key: 'index2',
        productImage: React.createElement("div", null, "Product Image"),
        productLink: React.createElement("div", null, "Product Link"),
        productPrice: React.createElement("div", null, "Product Price"),
        productDimensions: [
            React.createElement("div", { key: '1' }, "Dimensions"),
        ],
        addToCartButton: React.createElement("div", null, "Add to Cart Button"),
        removeButton: React.createElement("div", null, "Remove Button")
    }
];
const mockResources = {
    emptyWishlistText: 'Your wishlist is empty',
    removeButtonText: 'Remove from wishlist',
    removeButtonAriaLabel: 'Remove from wishlist',
    waitingClass: 'waiting',
    unableToGetWishlist: 'Unable to get your wishlists!',
    addToCartButtonText: 'add to cart',
    outOfStockText: 'This item is out of stock',
    addedToCartSuccessMessage: 'Added to your cart',
    addedToCartFailureMessage: 'Add to cart failed',
    maxQuantityLimitText: 'You can only add 5 of these to your cart',
    priceFree: 'Free',
    originalPriceText: 'Original price',
    currentPriceText: 'Current price',
    productDimensionTypeColor: 'Color',
    productDimensionTypeSize: 'Size',
    productDimensionTypeStyle: 'Style',
    wishlistErrorGettingWishlist: 'Sorry we are unable to load your wishlist at this moment, please try again later.'
};
describe('WishlistItems unit tests -', () => {
    it('View renders correctly', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const mockProps = {
            ...moduleProps,
            WishlistItems: {
                moduleProps: moduleProps,
                className: 'ms-wishlist-items'
            },
            status: 'SUCCESS',
            heading: React.createElement("div", { className: 'ms-wishlist-items__heading' }, "Heading"),
            Product: {
                className: 'ms-wishlist-items__product',
                tag: 'li',
                productDimensions: {
                    className: '__ProductDimensions'
                }
            },
            Products: {
                className: 'ms-wishlist-items__products',
                tag: 'ul',
                key: 'ul-2',
                entireProductLink: 'https//pexample.com'
            },
            ProductDetails: {
                className: '__ProductDimensions',
                tag: 'aside',
                key: 'ul-1'
            },
            ProductDimensions: {
                className: '__ProductDimensions'
            },
            products: mockProducts,
            resources: mockResources
        };
        const component = shallow(React.createElement(WishlistItemsView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('View renders status message correctly', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const mockProps = {
            ...moduleProps,
            WishlistItems: {
                moduleProps: moduleProps,
                className: 'ms-wishlist-items'
            },
            status: 'LOADING',
            statusMessage: React.createElement("p", null, "Waiting"),
            heading: React.createElement("div", { className: 'ms-wishlist-items__heading' }, "Heading"),
            Products: {
                className: 'ms-wishlist-items__products',
                tag: 'ul',
            },
            Product: {
                className: 'ms-wishlist-items__product',
                tag: 'li',
            },
            products: mockProducts2,
            resources: mockResources
        };
        const component = render(React.createElement(WishlistItemsView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=wishlist-items.view.test.js.map