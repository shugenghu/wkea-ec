import { createObservableDataAction } from '@msdyn365-commerce/core';
import { FullProductInput, getFullProducts, getProductDetailsCriteriaFromActionInput } from '@msdyn365-commerce-modules/retail-actions';
import { getByCustomerAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CommerceListsDataActions.g';
export class ActiveWishlistInput {
    constructor() {
        this.getCacheKey = () => `ActiveWishlistItems`;
        this.getCacheObjectType = () => 'ActiveWishlistItems';
        this.dataCacheType = () => 'none';
    }
}
const createInput = (inputData) => {
    return new ActiveWishlistInput();
};
export async function getActiveWishlistItems(input, ctx) {
    if (!input) {
        throw new Error('[getActiveWishlistItems]No valid Input was provided, failing');
    }
    if (ctx.requestContext.user.isAuthenticated) {
        const wishlists = await getByCustomerAsync({ callerContext: ctx, queryResultSettings: {} }, null);
        if (wishlists && wishlists.length > 0) {
            const productInputs = [];
            wishlists.forEach((currWishlist) => {
                if (currWishlist.CommerceListLines) {
                    currWishlist.CommerceListLines.forEach((commerceListLine) => {
                        if (commerceListLine.ProductId) {
                            productInputs.push(new FullProductInput(commerceListLine.ProductId, ctx.requestContext.apiSettings, getProductDetailsCriteriaFromActionInput(ctx)));
                        }
                    });
                }
            });
            if (productInputs.length > 0) {
                return getFullProducts(productInputs, ctx)
                    .then(products => {
                    if (products) {
                        return products;
                    }
                    else {
                        return [];
                    }
                })
                    .catch(error => {
                    ctx.trace(error);
                    ctx.telemetry.error(error.message);
                    ctx.telemetry.debug(`[getActiveWishlistItems]Unable to hydrate cart with product information`);
                    throw new Error('[getActiveWishlistItems]Unable to hydrate cart with product information');
                });
            }
            else {
                ctx.trace('No productIds found for wishlist');
            }
        }
        else {
            ctx.trace('[getActiveWishlistItems]Not able to get wishlists for the customer');
            return [];
        }
    }
    ctx.trace('[getActiveWishlistItems]User token not found for wishlists');
    return [];
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/wishlist/wishlist-items/get-items-in-wishlist',
    action: getActiveWishlistItems,
    input: createInput
});
//# sourceMappingURL=get-items-in-wishlists.js.map