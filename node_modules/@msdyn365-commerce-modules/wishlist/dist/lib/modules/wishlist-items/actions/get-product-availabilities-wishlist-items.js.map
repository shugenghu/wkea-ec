{"version":3,"file":"get-product-availabilities-wishlist-items.js","sourceRoot":"./src/","sources":["modules/wishlist-items/actions/get-product-availabilities-wishlist-items.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAgC,8BAA8B,EAAE,MAAM,2CAA2C,CAAC;AACxI,OAAO,EAAa,0BAA0B,EAAqG,MAAM,yBAAyB,CAAC;AACnL,OAAO,EAAE,6BAA6B,EAAE,MAAM,wEAAwE,CAAC;AACvH,OAAO,EAAE,mBAAmB,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAKvF,MAAM,OAAO,qCAAqC;IAG9C,YAAY,WAAiC;QAItC,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,iCAAiC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACvF,uBAAkB,GAAG,GAAG,EAAE,CAAC,iCAAiC,CAAC;QAC7D,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAL9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAED,MAAM,WAAW,GAAG,CAAC,SAA+C,EAAE,EAAE;IACpE,OAAO,IAAI,qCAAqC,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC3F,CAAC,CAAC;AAKF,MAAM,CAAC,KAAK,UAAU,iCAAiC,CAAC,KAA4C,EAAE,GAAmB;IAErH,IAAI,CAAC,KAAK,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;KAC9F;IAED,MAAM,QAAQ,GAAG,MAAM,sBAAsB,CAAC,IAAI,mBAAmB,EAAE,EAAE,GAAG,CAAC,CAAC;IAE9E,IAAG,CAAC,QAAQ,EAAE;QACV,GAAG,CAAC,KAAK,CAAC,0EAA0E,CAAC,CAAC;QACtF,OAAuC,EAAE,CAAC;KAC7C;IAED,MAAM,aAAa,GAAa,EAAE,CAAC;IAEnC,KAAI,MAAM,OAAO,IAAI,QAAQ,EAAE;QAC3B,IAAG,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE;YAC1D,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;SACvD;KACJ;IAED,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,GAAG,CAAC,KAAK,CAAC,6DAA6D,CAAC,CAAC;QACzE,OAAuC,EAAE,CAAC;KAC7C;IAED,MAAM,oBAAoB,GAAG,MAAM,6BAA6B,CAAC,EAAC,aAAa,EAAC,GAAG,EAAC,EAAE,EAAC,UAAU,EAAE,aAAa,EAAE,oBAAoB,EAAC,IAAI,EAAC,CAAC,CAAC;IAE9I,IAAG,oBAAoB,IAAI,oBAAoB,EAAE;QAC7C,OAAO,8BAA8B,CAAC,GAAG,EAAE,oBAAoB,EAAE,uCAAuC,CAAC,CAAC;KAC7G;SAAM;QACH,GAAG,CAAC,KAAK,CAAC,6EAA6E,CAAC,CAAC;QACzF,OAAuC,EAAE,CAAC;KAC7C;AACL,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,8FAA8F;IAClG,MAAM,EAA2C,iCAAiC;IAClF,KAAK,EAAE,WAAW;CACrB,CAAC,CAAC","sourcesContent":["import { buildCacheKey, IProductInventoryInformation, mapProductInventoryInformation } from '@msdyn365-commerce-modules/retail-actions';\nimport { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getEstimatedAvailabilityAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ActiveWishlistInput, getActiveWishlistItems } from './get-items-in-wishlists';\n\n/**\n * Input class for availabilites for items in wishlist\n */\nexport class ProductAvailabilitiesForWishlistItems implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`ActiveWishlistItemsAvailability`, this.apiSettings);\n    public getCacheObjectType = () => `ActiveWishlistItemsAvailability`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>) => {\n    return new ProductAvailabilitiesForWishlistItems(inputData.requestContext.apiSettings);\n};\n\n/**\n * Calls the Retail API to get wishlist which will be cached the then finds the quantities for each item\n */\nexport async function getAvailabilitiesForWishlistItems(input: ProductAvailabilitiesForWishlistItems, ctx: IActionContext): Promise<IProductInventoryInformation[]> {\n    // If no input is provided fail out\n    if (!input) {\n        throw new Error('[getAvailabilitiesForWishlistItems]No valid Input was provided, failing');\n    }\n\n    const products = await getActiveWishlistItems(new ActiveWishlistInput(), ctx);\n\n    if(!products) {\n        ctx.trace('[getAvailabilitiesForWishlistItems] Not able to get products in wishlist');\n        return <IProductInventoryInformation[]>[];\n    }\n\n    const validProducts: number[] = [];\n\n    for(const product of products) {\n        if(product.ProductDetails && product.ProductDetails.RecordId) {\n            validProducts.push(product.ProductDetails.RecordId);\n        }\n    }\n\n    if (validProducts.length === 0) {\n        ctx.trace('[getAvailabilitiesForWishlistItems] No products in wishlist');\n        return <IProductInventoryInformation[]>[];\n    }\n\n    const productAvailabilites = await getEstimatedAvailabilityAsync({callerContext:ctx}, {ProductIds: validProducts, DefaultWarehouseOnly:true});\n\n    if(productAvailabilites && productAvailabilites) {\n        return mapProductInventoryInformation(ctx, productAvailabilites?.ProductWarehouseInventoryAvailabilities);\n    } else {\n        ctx.trace('[getAvailabilitiesForWishlistItems] unable to get availabilites for product');\n        return <IProductInventoryInformation[]>[];\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/wishlist/wishlist-items/get-product-availabilities-wishlist-items',\n    action: <IAction<IProductInventoryInformation[]>>getAvailabilitiesForWishlistItems,\n    input: createInput\n});"]}