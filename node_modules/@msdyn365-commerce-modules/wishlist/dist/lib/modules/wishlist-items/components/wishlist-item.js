import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { Alert, Button, getPayloadObject, getTelemetryAttributes } from '@msdyn365-commerce-modules/utilities';
import { PriceComponent } from '@msdyn365-commerce/components';
import { Image } from '@msdyn365-commerce/core';
import * as React from 'react';
import { WishlistItemDimension } from './wishlist-items-dimensions';
const _addItemToCart = (props) => {
    const { product, itemKey, handlers } = props;
    const { onAddToCart } = handlers;
    onAddToCart && product && itemKey && onAddToCart(product, itemKey);
};
const _removeItemFromWishlist = (props) => {
    const { onRemoveItem } = props.handlers;
    const { RecordId } = props.product;
    onRemoveItem && RecordId && onRemoveItem(RecordId);
};
const WishListItemActions = {
    addToCart: _addItemToCart,
    removeItem: _removeItemFromWishlist,
};
export const WishlistItem = (input) => {
    const { product, productUrl, price, context, imageSettings, isInStock, removeFromWishlistText, addToCartText, outOfStockText, wishlistState, itemKey, handlers, enableImageProductLink, inventoryInformationLabel, inventoryLabelClassName, telemetryContent } = input;
    if (!product) {
        return null;
    }
    const { RecordId, Name, PrimaryImageUrl, Dimensions } = product;
    const addItemAction = (event) => { return WishListItemActions.addToCart(input); };
    const removeItemAction = (event) => { return WishListItemActions.removeItem(input); };
    const { onDismiss } = handlers;
    const inventoryCssName = inventoryLabelClassName ? `ms-wishlist-items__inventory-label ${inventoryLabelClassName}` : 'ms-wishlist-items__inventory-label';
    const fallbackImage = getFallbackImageUrl(product.ItemId, context.actionContext.requestContext.apiSettings);
    const payLoad = getPayloadObject('click', telemetryContent, '', RecordId.toString());
    const productAttributes = getTelemetryAttributes(telemetryContent, payLoad);
    const PRODUCTASSERVICE = 2;
    const isServiceItem = product.ItemTypeValue === PRODUCTASSERVICE;
    return {
        key: `${RecordId}-item`,
        productImage: PrimaryImageUrl && Name && _renderProductImage(context, product.Name, PrimaryImageUrl, fallbackImage, imageSettings),
        productLink: productUrl &&
            (React.createElement("a", Object.assign({ href: productUrl, className: 'ms-wishlist-items__product-link' }, productAttributes, { "aria-label": _renderAriaLabel(input) }), Name)),
        productDimensions: Dimensions && _renderProductDimensions(input),
        productPrice: price && _renderPrice(input),
        entireProductLink: enableImageProductLink ? productUrl : undefined,
        productAriaLabel: enableImageProductLink ? _renderAriaLabel(input) : undefined,
        productName: enableImageProductLink &&
            (React.createElement("div", { className: 'ms-wishlist-items__product-title' }, Name)),
        addToCartButton: (React.createElement(Button, { className: 'ms-wishlist-items__product-add-button', title: (isServiceItem || isInStock) && addToCartText || outOfStockText, onClick: addItemAction, disabled: !(isServiceItem || isInStock) }, (isServiceItem || isInStock) && addToCartText || outOfStockText)),
        inventoryInformation: inventoryInformationLabel && (React.createElement("span", { className: inventoryCssName }, inventoryInformationLabel)),
        removeButton: (React.createElement("button", { className: 'ms-wishlist-items__product-remove-button', "aria-label": removeFromWishlistText, onClick: removeItemAction })),
        productStatusMessage: wishlistState && wishlistState.isOpen &&
            wishlistState.productId === RecordId && wishlistState.itemKey === itemKey &&
            (React.createElement("div", { className: 'ms-wishlist-items__product-status' },
                React.createElement(Alert, { color: wishlistState.statusCssString, isOpen: wishlistState.isOpen, toggle: onDismiss },
                    React.createElement("span", null, wishlistState.userMessage))))
    };
};
const _renderProductImage = (context, heading, image, fallbackImage, imageSettings) => {
    const defaultImageSettings = {
        viewports: {
            xs: { q: `w=315&h=315&m=6`, w: 0, h: 0 },
            lg: { q: `w=315&h=315&m=6`, w: 0, h: 0 },
            xl: { q: `w=315&h=315&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };
    if (image) {
        return (React.createElement(Image, { className: 'ms-wishlist-items__product-image', altText: heading, title: heading, src: image, fallBackSrc: fallbackImage, gridSettings: context.request.gridSettings, imageSettings: imageSettings || defaultImageSettings, loadFailureBehavior: 'empty' }));
    }
    return null;
};
const _renderPrice = (props) => {
    const { price, context, moduleId, moduleTypeName, resources } = props;
    if (price) {
        return (React.createElement(PriceComponent, { id: moduleId, typeName: moduleTypeName, data: { price: price }, className: 'ms-wishlist-items__product-price', freePriceText: resources.freePriceText, originalPriceText: resources.originalPriceText, currentPriceText: resources.currentPriceText, context: context }));
    }
    return null;
};
const _renderProductDimensions = (props) => {
    const { product, resources } = props;
    if (!product || !product.Dimensions) {
        return [];
    }
    return product.Dimensions.map((dimension, index) => {
        if (!dimension.DimensionValue || !dimension.DimensionValue.Value) {
            return undefined;
        }
        let type = '';
        switch (dimension.DimensionTypeValue) {
            case 1: {
                type = resources.productDimensionTypeColor;
                break;
            }
            case 3: {
                type = resources.productDimensionTypeSize;
                break;
            }
            case 4: {
                type = resources.productDimensionTypeStyle;
                break;
            }
            default:
                return undefined;
        }
        return (React.createElement(WishlistItemDimension, { key: `${product.RecordId}-dimensions-${index}`, className: 'msc-price ms-wishlist-items__product-dimension', dimensionType: type, dimensionValue: dimension.DimensionValue.Value }));
    });
};
const _renderAriaLabel = (props) => {
    const { product, price, context, resources } = props;
    const { Name, Dimensions, } = product;
    const { productDimensionTypeColor, productDimensionTypeSize, productDimensionTypeStyle } = resources;
    let formattedPrice = 'Free';
    let dimensions = null;
    if (price) {
        formattedPrice = price.BasePrice === 0 ? resources.freePriceText : context.cultureFormatter.formatCurrency(price.BasePrice, price.CurrencyCode);
    }
    if (Dimensions) {
        dimensions = Dimensions.map(productDimension => {
            switch (productDimension.DimensionTypeValue) {
                case 1:
                    return (`${productDimensionTypeColor}${productDimension.DimensionValue && productDimension.DimensionValue.Value}`);
                case 3:
                    return (`${productDimensionTypeSize}${productDimension.DimensionValue && productDimension.DimensionValue.Value}`);
                case 4:
                    return (`${productDimensionTypeStyle}${productDimension.DimensionValue && productDimension.DimensionValue.Value}`);
                default:
                    return '';
            }
        });
    }
    return (`${Name} ${formattedPrice} ${dimensions && dimensions.join('') || ''}`);
};
//# sourceMappingURL=wishlist-item.js.map