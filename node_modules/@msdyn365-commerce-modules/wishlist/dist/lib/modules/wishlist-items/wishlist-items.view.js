import * as React from 'react';
import { getPayloadObject, getTelemetryAttributes, Module, Node } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
const WishlistItemsView = props => {
    const { WishlistItems, status, statusMessage, heading, Products, products, Product, ProductDetails, ProductDimensions, telemetryContent } = props;
    return (React.createElement(Module, Object.assign({}, WishlistItems),
        heading,
        status !== 'SUCCESS' && statusMessage,
        Products && products && products.length > 0 &&
            React.createElement(Node, Object.assign({ className: Products.className }, Products), products && products.map((product) => {
                return _renderItem(product, Product, ProductDimensions, ProductDetails, telemetryContent);
            }))));
};
const _renderItem = (product, Product, ProductDimensions, ProductDetails, telemetryContent) => {
    const { key, productImage, productLink, productPrice, productDimensions, addToCartButton, removeButton, productStatusMessage, entireProductLink, productName, productAriaLabel, inventoryInformation } = product;
    const payLoad = getPayloadObject('click', telemetryContent, '', key);
    const productAttributes = getTelemetryAttributes(telemetryContent, payLoad);
    if (entireProductLink) {
        return (React.createElement(Node, Object.assign({ key: key, className: Product.className }, Product),
            React.createElement(Node, Object.assign({ href: entireProductLink, className: classnames('entire-product-link ', ProductDetails.className) }, productAttributes, { "aria-label": productAriaLabel, tag: ProductDetails.tag }),
                productImage,
                productName,
                productDimensions && ProductDimensions &&
                    React.createElement(Node, Object.assign({ className: ProductDimensions.className }, ProductDimensions), productDimensions.map((dimension) => {
                        return dimension;
                    })),
                productPrice),
            inventoryInformation,
            addToCartButton,
            removeButton,
            productStatusMessage));
    }
    else {
        return (React.createElement(Node, Object.assign({ key: key, className: Product.className }, Product),
            productImage,
            productLink,
            productDimensions && ProductDimensions &&
                React.createElement(Node, Object.assign({ className: ProductDimensions.className }, ProductDimensions), productDimensions.map((dimension) => {
                    return dimension;
                })),
            productPrice,
            addToCartButton,
            removeButton,
            productStatusMessage));
    }
};
export default WishlistItemsView;
//# sourceMappingURL=wishlist-items.view.js.map