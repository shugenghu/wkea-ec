import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, render, shallow } from 'enzyme';
import * as React from 'react';
import PromoBannerModule from '../../promo-banner';
import renderView from '../../promo-banner.view';
const mockActionContext = buildHydratedMockActionContext();
const mockContext = {
    actionContext: mockActionContext,
    requestContext: { locale: 'en-us' },
    app: {
        routes: {
            home: '/fedev'
        }
    }
};
const mockResources = {
    closeButtonAriaLabel: 'Close promo-banner',
    closeButtonLabel: 'Close'
};
const mockLink1 = {
    linkText: 'Mock link 1 title',
    linkUrl: {
        destinationUrl: 'Mock link 1 href'
    },
    ariaLabel: 'Mock link 1 alt text'
};
const mockLink2 = {
    linkText: 'Mock link 2 title',
    linkUrl: {
        destinationUrl: 'Mock link 2 href'
    },
    ariaLabel: 'Mock link 2 alt text'
};
const mockLinks = [mockLink1, mockLink2];
const mockConfigWithoutBanner = {
    dismissEnabled: false,
    bannerMessages: []
};
const mockConfigTextOnly = {
    dismissEnabled: false,
    bannerMessages: [{ text: 'text' }]
};
const mockConfigLinkOnly = {
    dismissEnabled: false,
    bannerMessages: [{ links: mockLinks }]
};
const mockConfigTextAndLink = {
    dismissEnabled: false,
    bannerMessages: [{ text: 'text', links: mockLinks }]
};
const mockConfigMultipleTextAndLink = {
    dismissEnabled: false,
    bannerMessages: [{ text: 'text', links: mockLinks }, { text: 'text', links: mockLinks }]
};
const mockConfigDismissEnabled = {
    dismissEnabled: true,
    bannerMessages: [{ text: 'text', links: mockLinks }]
};
const mockProps = {
    className: 'ms-promo-banner',
    resources: mockResources,
    renderView: renderView,
    renderModuleAttributes: jest.fn()
};
const mockPropsMockRenderView = {
    resources: mockResources,
    renderView: jest.fn(props => { return React.createElement("div", { props: props }); }),
    renderModuleAttributes: jest.fn()
};
describe('PromoBanner unit tests - Container', () => {
    it('renders correctly with text only', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigTextOnly),
            ...mockProps
        };
        const wrapper = render(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        expect(wrapper).toMatchSnapshot();
    });
    it('renders correctly with link only', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigLinkOnly),
            ...mockProps
        };
        const wrapper = render(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        expect(wrapper).toMatchSnapshot();
    });
    it('renders correctly with text and link', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigTextAndLink),
            ...mockProps
        };
        const wrapper = render(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        expect(wrapper).toMatchSnapshot();
    });
    it('renders correctly with dismissEnabled', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigDismissEnabled),
            ...mockProps
        };
        const wrapper = render(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        expect(wrapper).toMatchSnapshot();
    });
    it('handles _onDismiss correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigDismissEnabled),
            ...mockPropsMockRenderView
        };
        const component = shallow(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        const promoBannerInstance = component.instance();
        promoBannerInstance._onDismiss();
        expect(component.state('isVisible')).toBe(false);
        expect(component.type()).toBe(null);
    });
    it('handles _next correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigMultipleTextAndLink),
            ...mockPropsMockRenderView
        };
        const component = shallow(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        const promoBannerInstance = component.instance();
        promoBannerInstance._next();
        expect(component.state('activeIndex')).toBe(1);
        promoBannerInstance._next();
        expect(component.state('activeIndex')).toBe(0);
        promoBannerInstance._previous();
        expect(component.state('activeIndex')).toBe(1);
    });
    it('handles _previous correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigMultipleTextAndLink),
            ...mockPropsMockRenderView
        };
        const component = shallow(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        const promoBannerInstance = component.instance();
        promoBannerInstance._previous();
        expect(component.state('activeIndex')).toBe(1);
        promoBannerInstance._next();
        expect(component.state('activeIndex')).toBe(0);
        promoBannerInstance._previous();
        expect(component.state('activeIndex')).toBe(1);
        promoBannerInstance._previous();
        expect(component.state('activeIndex')).toBe(0);
    });
    it('handles textChange and LinkTextChange event ', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigMultipleTextAndLink),
            ...mockPropsMockRenderView,
        };
        const component = mount(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        const promoBannerInstance = component.instance();
        const event = { currentTarget: { value: 'foo1' }, target: { value: 'foo' } };
        promoBannerInstance.handleTextChange(event);
        promoBannerInstance.handleLinkTextChange(1, event);
        ((e) => promoBannerInstance.handleLinkTextChange(1));
        promoBannerInstance.setState({ animating: true });
        promoBannerInstance._next();
        expect(component.state('activeIndex')).toBe(0);
        promoBannerInstance._previous();
        expect(component.state('activeIndex')).toBe(0);
    });
    it('renders correctly without text & link', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockContext, {}, mockConfigWithoutBanner),
            ...mockPropsMockRenderView,
            ...mockProps
        };
        const component = mount(React.createElement(PromoBannerModule, Object.assign({}, moduleProps)));
        const promoBannerInstance = component.instance();
        const event = { currentTarget: { value: 'foo1' }, target: { value: 'foo' } };
        promoBannerInstance.handleTextChange(event);
    });
});
//# sourceMappingURL=promo-banner.test.js.map