import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import { Carousel } from '@msdyn365-commerce/components';
import classnames from 'classnames';
import * as React from 'react';
import { PromoBannerCloseButton, PromoBannerLinks, PromoBannerText } from './components';
class PromoBanner extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            animating: false,
            isVisible: true,
            activeIndex: 0
        };
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this.handleTextChange = (event) => {
            if (this.props.config.bannerMessages && this.props.config.bannerMessages[0]) {
                this.props.config.bannerMessages[0].text = event.target.value;
            }
        };
        this.handleLinkTextChange = (linkIndex) => (event) => {
            if (this.props.config.bannerMessages && this.props.config.bannerMessages[1]) {
                const links = this.props.config.bannerMessages[1].links;
                if (links) {
                    links[linkIndex].linkText = event.target.value;
                }
            }
        };
        this._next = () => {
            const nextIndex = this._isLastItem() ? 0 : this.state.activeIndex + 1;
            this._goToIndex(nextIndex);
        };
        this._previous = () => {
            const nextIndex = this._isFirstItem() ? (this.props.config.bannerMessages ? this.props.config.bannerMessages.length - 1 : 0) : this.state.activeIndex - 1;
            this._goToIndex(nextIndex);
        };
        this._goToIndex = (index) => {
            if (this.state.animating) {
                return;
            }
            this.setState({ activeIndex: index });
        };
        this._isFirstItem = () => this.state.activeIndex === 0;
        this._isLastItem = () => this.props.config.bannerMessages && this.state.activeIndex === this.props.config.bannerMessages.length - 1;
        this._onDismiss = () => {
            this.setState({ isVisible: false });
        };
    }
    render() {
        const { bannerMessages, dismissEnabled, interval, hideFlipper, autoplay, className = '' } = this.props.config;
        const { closeButtonAriaLabel, closeButtonLabel } = this.props.resources;
        const { isVisible, activeIndex } = this.state;
        if (!isVisible) {
            this.props.context.telemetry.error('Promo banner content is empty, module wont render.');
            return null;
        }
        const viewProps = {
            ...this.props,
            className: classnames('ms-promo-banner', className),
            isVisible,
            onDismiss: this._onDismiss,
            handleLinks: this.handleLinkTextChange,
            handleText: this.handleTextChange,
            promoBannerProps: { className: classnames('ms-promo-banner', className), moduleProps: this.props, role: 'banner' },
            PromoBannerTextProps: {
                tag: PromoBannerText
            },
            PromoBannerLinksProps: {
                tag: PromoBannerLinks,
                telemetryContent: this.telemetryContent
            },
            contentProps: { className: 'ms-promo-banner__content' },
            bannerMessages: bannerMessages,
            activeIndex: activeIndex,
            CarouselProps: {
                tag: Carousel,
                className: 'ms-promo-banner__carousel',
                activeIndex: activeIndex,
                next: this._next,
                previous: this._previous,
                onIndicatorsClickHandler: this._goToIndex,
                hideIndicator: hideFlipper,
                interval: interval,
                hideFlipper: hideFlipper,
                autoplay: autoplay
            },
            closeButton: dismissEnabled && React.createElement(PromoBannerCloseButton, Object.assign({}, { onClose: this._onDismiss, label: closeButtonLabel, closeButtonAriaLabel, telemetryContent: this.telemetryContent }))
        };
        return this.props.renderView(viewProps);
    }
}
export default PromoBanner;
//# sourceMappingURL=promo-banner.js.map