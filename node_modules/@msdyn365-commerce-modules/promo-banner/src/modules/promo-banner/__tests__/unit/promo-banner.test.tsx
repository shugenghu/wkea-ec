/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildHydratedMockActionContext, buildMockModuleProps} from '@msdyn365-commerce/core';
import { mount, render, shallow } from 'enzyme';
// tslint:disable-next-line:no-unused-variable
import * as React from 'react';
import PromoBannerModule from '../../promo-banner';
import { ILinksData, IPromoBannerConfig, IPromoBannerProps } from '../../promo-banner.props.autogenerated';
import renderView from '../../promo-banner.view';

const mockActionContext = buildHydratedMockActionContext();

// @ts-ignore partial mock
const mockContext: ICoreContext = {
    actionContext: mockActionContext,
    requestContext: {locale: 'en-us'},
    app: {
      routes: {
        home: '/fedev'
      }
    }
};

const mockResources = {
    closeButtonAriaLabel: 'Close promo-banner',
    closeButtonLabel: 'Close'
};

const mockLink1: ILinksData = {
    linkText: 'Mock link 1 title',
    linkUrl: {
        destinationUrl: 'Mock link 1 href'
    },
    ariaLabel: 'Mock link 1 alt text'
};

const mockLink2: ILinksData = {
    linkText: 'Mock link 2 title',
    linkUrl: {
        destinationUrl: 'Mock link 2 href'
    },
    ariaLabel: 'Mock link 2 alt text'
};

const mockLinks: ILinksData[] = [mockLink1, mockLink2];

const mockConfigWithoutBanner: IPromoBannerConfig = {
    dismissEnabled: false,
    bannerMessages: []
};

const mockConfigTextOnly: IPromoBannerConfig = {
    dismissEnabled: false,
    bannerMessages: [{text: 'text'}]
};

const mockConfigLinkOnly: IPromoBannerConfig = {
    dismissEnabled: false,
    bannerMessages: [{links: mockLinks}]
};

const mockConfigTextAndLink: IPromoBannerConfig = {
    dismissEnabled: false,
    bannerMessages: [{text: 'text', links: mockLinks}]
};

const mockConfigMultipleTextAndLink: IPromoBannerConfig = {
    dismissEnabled: false,
    bannerMessages: [{text: 'text', links: mockLinks}, {text: 'text', links: mockLinks}]
};

const mockConfigDismissEnabled: IPromoBannerConfig = {
    dismissEnabled: true,
    bannerMessages: [{text: 'text', links: mockLinks}]
};

const mockProps = {
    className: 'ms-promo-banner',
    resources: mockResources,
    renderView: renderView,
    renderModuleAttributes: jest.fn()
};

const mockPropsMockRenderView = {
    resources: mockResources,
    // @ts-ignore
    renderView: jest.fn(props => { return <div props={props} />;}),
    renderModuleAttributes: jest.fn()
};

describe('PromoBanner unit tests - Container', () => {
    it('renders correctly with text only', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigTextOnly),
            ...mockProps
        };
        const wrapper = render(<PromoBannerModule {...moduleProps} />);
        expect(wrapper).toMatchSnapshot();
    });

    it('renders correctly with link only', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigLinkOnly),
            ...mockProps
        };
        const wrapper =  render(<PromoBannerModule {...moduleProps} />);
        expect(wrapper).toMatchSnapshot();
    });

    it('renders correctly with text and link', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigTextAndLink),
            ...mockProps
        };
        const wrapper = render(<PromoBannerModule {...moduleProps} />);
        expect(wrapper).toMatchSnapshot();
    });

    it('renders correctly with dismissEnabled', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigDismissEnabled),
            ...mockProps
        };
        const wrapper = render(<PromoBannerModule {...moduleProps} />);
        expect(wrapper).toMatchSnapshot();
    });

    it('handles _onDismiss correctly', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigDismissEnabled),
            ...mockPropsMockRenderView
        };
        const component = shallow(<PromoBannerModule {...moduleProps} />);
        const promoBannerInstance = component.instance();
        // @ts-ignore ignore private method
        promoBannerInstance._onDismiss();
        // State iVisible set to false
        expect(component.state('isVisible')).toBe(false);
        // It returns null
        expect(component.type()).toBe(null);
    });

    it('handles _next correctly', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigMultipleTextAndLink),
            ...mockPropsMockRenderView
        };
        const component = shallow(<PromoBannerModule {...moduleProps} />);
        const promoBannerInstance = component.instance();
        // @ts-ignore ignore private method
        promoBannerInstance._next();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(1);
        // @ts-ignore ignore private method
        promoBannerInstance._next();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(0);
        // @ts-ignore ignore private method
        promoBannerInstance._previous();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(1);

    });

    it('handles _previous correctly', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigMultipleTextAndLink),
            ...mockPropsMockRenderView
        };
        const component = shallow(<PromoBannerModule {...moduleProps} />);
        const promoBannerInstance = component.instance();
        // @ts-ignore ignore private method
        promoBannerInstance._previous();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(1);
        // @ts-ignore ignore private method
        promoBannerInstance._next();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(0);
        // @ts-ignore ignore private method
        promoBannerInstance._previous();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(1);
        // @ts-ignore ignore private method
        promoBannerInstance._previous();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(0);
    });

    it('handles textChange and LinkTextChange event ', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigMultipleTextAndLink),
            ...mockPropsMockRenderView,
        };
        const component = mount(<PromoBannerModule {...moduleProps} />);
        const promoBannerInstance = component.instance();
        const event = {currentTarget: { value: 'foo1'}, target: { value: 'foo'}};
        // @ts-ignore ignore private method
        promoBannerInstance.handleTextChange(event);
        // @ts-ignore ignore private method
        promoBannerInstance.handleLinkTextChange(1, event);
        // @ts-ignore ignore private method
        ((e: event) => promoBannerInstance.handleLinkTextChange(1));
        promoBannerInstance.setState({ animating: true });
        // @ts-ignore ignore private method
        promoBannerInstance._next();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(0);
        // @ts-ignore ignore private method
        promoBannerInstance._previous();
        // State iVisible set to false
        expect(component.state('activeIndex')).toBe(0);
        // const viewProps: IPromoBannerViewProps = component.props();
        // const input = mount(viewProps.PromoBannerTextProps.textInput);
        // const changeEvent = {
        //     target: { value: 'foo' }
        // };
        // input.simulate('change', changeEvent);
        // expect(component.state('userReviewText')).toBe('foo');
        // input.unmount();
    });

    it('renders correctly without text & link', () => {
        // @ts-ignore mock partial data
        const moduleProps: IPromoBannerProps<{}> = {
            ...buildMockModuleProps(mockContext, {}, mockConfigWithoutBanner),
            ...mockPropsMockRenderView,
            ...mockProps
        };
        const component = mount(<PromoBannerModule {...moduleProps} />);
        const promoBannerInstance = component.instance();
        const event = {currentTarget: { value: 'foo1'}, target: { value: 'foo'}};
        // @ts-ignore ignore private method
        promoBannerInstance.handleTextChange(event);
    });
});
