/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { Carousel } from '@msdyn365-commerce/components';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';
import { PromoBannerCloseButton, PromoBannerLinks, PromoBannerText } from './components';
import { IBannerMessagesData, IPromoBannerProps } from './promo-banner.props.autogenerated';

export interface IPromoBannerState {
    animating: boolean;
    isVisible: boolean;
    activeIndex: number;
}

export interface IPromoBannerViewProps extends IPromoBannerProps<{}>, IPromoBannerState {
    promoBannerProps: IModuleProps;
    contentProps: INodeProps ;
    bannerMessages: IBannerMessagesData[];
    PromoBannerTextProps: INodeProps;
    PromoBannerLinksProps: INodeProps;
    CarouselProps: INodeProps;
    closeButton?: React.ReactNode;
    className: string;
    onDismiss(): void;
    handleText(): void;
    handleLinks(): void;
}

/**
 *
 * PromoBannerModule component
 * @extends {React.PureComponent<IPromoBannerProps<IPromoBannerState>>}
 */
class PromoBanner extends React.PureComponent<IPromoBannerProps<{}>, IPromoBannerState> {
    public state: IPromoBannerState = {
        animating: false,
        isVisible: true,
        activeIndex: 0
    };

    private telemetryContent: ITelemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,
                                                                     this.props.friendlyName,
                                                                     this.props.telemetry);

    public render(): JSX.Element | null {
        const { bannerMessages, dismissEnabled, interval, hideFlipper, autoplay, className= '' } = this.props.config;
        const { closeButtonAriaLabel, closeButtonLabel } = this.props.resources;
        const { isVisible, activeIndex } = this.state;

        if (!isVisible) {
            this.props.context.telemetry.error('Promo banner content is empty, module wont render.');
            return null;
        }

        const viewProps = {
            // Context for telemetry and raw data for C1 to do customization
            // Including computed data, state data and methods
            ...this.props,
            className: classnames('ms-promo-banner', className),
            isVisible, // state data
            onDismiss: this._onDismiss, // methods
            handleLinks: this.handleLinkTextChange,
            handleText: this.handleTextChange,

            promoBannerProps: { className: classnames('ms-promo-banner', className), moduleProps: this.props, role: 'banner' },
            PromoBannerTextProps: {
                tag: PromoBannerText
            },
            PromoBannerLinksProps: {
                tag: PromoBannerLinks,
                telemetryContent: this.telemetryContent
            },
            contentProps: { className: 'ms-promo-banner__content' },
            bannerMessages: bannerMessages,
            activeIndex: activeIndex,
            CarouselProps: {
                tag: Carousel,
                className: 'ms-promo-banner__carousel',
                activeIndex: activeIndex,
                next: this._next,
                previous: this._previous,
                onIndicatorsClickHandler: this._goToIndex,
                hideIndicator: hideFlipper,
                interval: interval,
                hideFlipper: hideFlipper,
                autoplay: autoplay
            },
            closeButton: dismissEnabled && <PromoBannerCloseButton {...{ onClose: this._onDismiss, label: closeButtonLabel, closeButtonAriaLabel, telemetryContent: this.telemetryContent }} />
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }
    public handleTextChange = (event: Msdyn365.ContentEditableEvent) => {
        if(this.props.config.bannerMessages && this.props.config.bannerMessages[0]) {
            this.props.config.bannerMessages[0].text = event.target.value;
        }
    }
    public handleLinkTextChange = (linkIndex: number) => (event: Msdyn365.ContentEditableEvent) => {
        if(this.props.config.bannerMessages && this.props.config.bannerMessages[1]) {
            const links = this.props.config.bannerMessages[1].links;
            if(links) {
                links[linkIndex].linkText = event.target.value;
            }
        }
    };

    private _next = (): void => {
        const nextIndex = this._isLastItem() ? 0 : this.state.activeIndex + 1;
        this._goToIndex(nextIndex);
    };

    private _previous = (): void => {
        const nextIndex = this._isFirstItem() ? (this.props.config.bannerMessages ? this.props.config.bannerMessages.length - 1 : 0) : this.state.activeIndex - 1;
        this._goToIndex(nextIndex);
    };

    private _goToIndex = (index: number): void => {
        if (this.state.animating) {
            return;
        }
        this.setState({ activeIndex: index });
    };

    private _isFirstItem = () => this.state.activeIndex === 0;

    private _isLastItem = () => this.props.config.bannerMessages && this.state.activeIndex === this.props.config.bannerMessages.length - 1;

    private _onDismiss = (): void => {
        this.setState({ isVisible: false });
    };
}

export default PromoBanner;
