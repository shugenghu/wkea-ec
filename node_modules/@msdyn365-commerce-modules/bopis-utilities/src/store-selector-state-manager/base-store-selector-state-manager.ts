import { action, computed, observable } from 'mobx';

import { IActionContext } from '@msdyn365-commerce/core';
import { IListMapViewState, ILoadMapApiInput, IStoreSelectionStateContext, IStoreSelectorLocation, IStoreSelectorStateManager } from './i-store-selection-state-manager';

/**
 * Abstract instance of IStoreSelectorStateManager with base implementation
 * of everything except the geoLocate function
 */
export abstract class BaseStoreSelectorStateManager implements IStoreSelectorStateManager {
    @computed public get isDialogOpen(): Readonly<boolean> {
        return this._context !== undefined;
    }

    @observable public isMapApiLoaded?: boolean;
    @observable public selectedStoreLocationId?: string;
    @observable public preferredStoreLocationId?: string;
    @observable public listMapViewState: IListMapViewState = { displayList: true, displayMap: false };
    @observable protected _context?: IStoreSelectionStateContext;

    @computed public get context(): Readonly<IStoreSelectionStateContext | undefined> {
        return this._context;
    }

    public abstract geoLocate(searchTerm: string, actionContext: IActionContext): Promise<IStoreSelectorLocation | undefined>;

    public abstract loadMapApi(input: ILoadMapApiInput): Promise<void>;

    @action
    public async toggleListMapViewState(): Promise<void> {
        this.listMapViewState = {
            displayList: !this.listMapViewState.displayList,
            displayMap: !this.listMapViewState.displayMap
        };
    }

    @action
    public async setOrgUnitStoreInformation(input: IStoreSelectionStateContext): Promise<void> {
        this._context = input;
    }

    @action
    public async setSelectedStoreLocationId(storeId: string | undefined): Promise<void> {
        this.selectedStoreLocationId = storeId;
    }

    @action
    public async setPreferredStoreLocationId(storeId: string | undefined): Promise<void> {
        this.preferredStoreLocationId = storeId;
    }

    @action
    public async openDialog(input: IStoreSelectionStateContext): Promise<void> {
        if (this._context) {
            throw new Error('Dialog is already opened');
        }

        this._context = input;
    }

    @action
    public async closeDialog(): Promise<void> {
        this._context = undefined;
    }
}