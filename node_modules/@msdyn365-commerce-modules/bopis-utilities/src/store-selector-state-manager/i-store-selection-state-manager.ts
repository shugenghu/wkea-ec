import { IFullOrgUnitAvailability } from '@msdyn365-commerce-modules/retail-actions';
import { IActionContext } from '@msdyn365-commerce/core';
import { OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';

/**
 * State information related to handle Store Selector scenarios
 */
export interface IStoreSelectorStateManager {
    /**
     * Returns whether or not the store selection dialog is open
     */
    readonly isDialogOpen: boolean;

    /**
     * Contextual information related to store selection instance
     */
    readonly context?: IStoreSelectionStateContext;

    /**
     * Property for identifying which location is in active state.
     */
    readonly selectedStoreLocationId?: string;

    /**
     * Property for identifying which store is users preferred store.
     */
    readonly preferredStoreLocationId?: string;

    /**
     * Property for identifying if map api is loaded
     */
    readonly isMapApiLoaded?: boolean;

    /**
     * Property for identifying view state of List and Map
     */
    listMapViewState: IListMapViewState;

    /**
     * Does the geo location step, transforming the search string into a location
     */
    geoLocate(searchTerm: string, actionContext: IActionContext): Promise<IStoreSelectorLocation | undefined>;

    /**
     * Add a script to body if not already added and makes sure that map api is ready
     */
    loadMapApi(input: ILoadMapApiInput): Promise<void>;

    /**
     * Sets current location list to the context
     */
    setOrgUnitStoreInformation(input: IStoreSelectionStateContext): Promise<void>;

    /**
     * Provides clicked store selected state
     */
    setSelectedStoreLocationId(storeLocationId: string | undefined): Promise<void>;

    /**
     * Sets preferredStoreLocationId
     */
    setPreferredStoreLocationId(storeLocationId: string | undefined): Promise<void>;

    /**
     * Toggels between the view state of List and Map
     */
    toggleListMapViewState(): Promise<void>;

    /**
     * Opens the dialog with the provided context
     */
    openDialog(input: IStoreSelectionStateContext): Promise<void>;

    /**
     * Close the dialog
     */
    closeDialog(): Promise<void>;
}

export interface IStoreSelectionStateContext {
    /**
     * Optional product to use for inventory checks
     */
    product?: SimpleProduct;

    /**
     * Optional location list
     */
    orgUnitStoreInformation?: IFullOrgUnitAvailability[];

    /**
     * Optional location to use to specify which location is already selected
     */
    alreadySelectedLocation?: OrgUnitLocation;

    /**
     * Property bag for other information that is needed without having to
     * modify the interfaces
     */
    additionalProperties?: object;

    /**
     * Callback for when a location is selected
     */
    onLocationSelected(location: OrgUnitLocation): Promise<void>;
}

export interface IStoreSelectorLocation {
    latitude: number | undefined;
    longitude: number | undefined;
}

export interface IListMapViewState {
    displayList: boolean;
    displayMap: boolean;
}

export interface ILoadMapApiInput {
    key: string | undefined;
    lang: string | undefined;
    market: string | undefined;
}