import { __decorate } from "tslib";
import { action, computed, observable } from 'mobx';
/**
 * Abstract instance of IStoreSelectorStateManager with base implementation
 * of everything except the geoLocate function
 */
export class BaseStoreSelectorStateManager {
    constructor() {
        this.listMapViewState = { displayList: true, displayMap: false };
    }
    get isDialogOpen() {
        return this._context !== undefined;
    }
    get context() {
        return this._context;
    }
    async toggleListMapViewState() {
        this.listMapViewState = {
            displayList: !this.listMapViewState.displayList,
            displayMap: !this.listMapViewState.displayMap
        };
    }
    async setOrgUnitStoreInformation(input) {
        this._context = input;
    }
    async setSelectedStoreLocationId(storeId) {
        this.selectedStoreLocationId = storeId;
    }
    async setPreferredStoreLocationId(storeId) {
        this.preferredStoreLocationId = storeId;
    }
    async openDialog(input) {
        if (this._context) {
            throw new Error('Dialog is already opened');
        }
        this._context = input;
    }
    async closeDialog() {
        this._context = undefined;
    }
}
__decorate([
    computed
], BaseStoreSelectorStateManager.prototype, "isDialogOpen", null);
__decorate([
    observable
], BaseStoreSelectorStateManager.prototype, "isMapApiLoaded", void 0);
__decorate([
    observable
], BaseStoreSelectorStateManager.prototype, "selectedStoreLocationId", void 0);
__decorate([
    observable
], BaseStoreSelectorStateManager.prototype, "preferredStoreLocationId", void 0);
__decorate([
    observable
], BaseStoreSelectorStateManager.prototype, "listMapViewState", void 0);
__decorate([
    observable
], BaseStoreSelectorStateManager.prototype, "_context", void 0);
__decorate([
    computed
], BaseStoreSelectorStateManager.prototype, "context", null);
__decorate([
    action
], BaseStoreSelectorStateManager.prototype, "toggleListMapViewState", null);
__decorate([
    action
], BaseStoreSelectorStateManager.prototype, "setOrgUnitStoreInformation", null);
__decorate([
    action
], BaseStoreSelectorStateManager.prototype, "setSelectedStoreLocationId", null);
__decorate([
    action
], BaseStoreSelectorStateManager.prototype, "setPreferredStoreLocationId", null);
__decorate([
    action
], BaseStoreSelectorStateManager.prototype, "openDialog", null);
__decorate([
    action
], BaseStoreSelectorStateManager.prototype, "closeDialog", null);
//# sourceMappingURL=base-store-selector-state-manager.js.map