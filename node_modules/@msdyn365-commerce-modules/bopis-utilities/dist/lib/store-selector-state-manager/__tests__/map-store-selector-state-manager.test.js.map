{"version":3,"file":"map-store-selector-state-manager.test.js","sourceRoot":"./src/","sources":["store-selector-state-manager/__tests__/map-store-selector-state-manager.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport { MapStoreSelectorStateManager } from '../map-store-selector-state-manager';\nimport { IListMapViewState, IStoreSelectorStateManager } from '../i-store-selection-state-manager';\n\nimport MockMapLocationsResponse from '../__mocks__/map-locations-response.json';\n\ndescribe('geoLocate Tests', () => {\n    let stateManager: IStoreSelectorStateManager;\n    let mockRequestContext: core.IRequestContext;\n\n    let crypto: Crypto;\n    let body: HTMLElement;\n\n    beforeAll(() => {\n        stateManager = new MapStoreSelectorStateManager();\n    });\n\n    beforeEach(() => {\n        crypto = window.crypto;\n        body = window.document.body;\n\n        mockRequestContext = {\n            // @ts-ignore partial mock\n            channel: {\n                BingMapsApiKey: '1001',\n                BingMapsEnabled: true\n            }\n        };\n\n        // @ts-ignore Overriding read only for test purposes\n        window.crypto = {\n            getRandomValues: jest.fn().mockReturnValue('1')\n        };\n\n        window.document.body.appendChild = jest.fn().mockImplementation(script => {\n            expect(window['mapSearchCallback_1']).toBeDefined();\n            window['mapSearchCallback_1'](undefined);\n            expect(window['mapSearchCallback_1']).toBeUndefined();\n\n            return script;\n        });\n\n        window.document.body.removeChild = jest.fn();\n    });\n\n    it('Returns undefined if search term is undefined', async () => {\n        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });\n\n        const result = await stateManager.geoLocate('', actionContext);\n\n        expect(window.crypto.getRandomValues).not.toBeCalled();\n        expect(window.document.body.appendChild).not.toBeCalled();\n        expect(window.document.body.removeChild).not.toBeCalled();\n\n        expect(result).toBeUndefined();\n    });\n\n    it('Returns undefined if channel not set', async () => {\n        mockRequestContext.channel = undefined;\n\n        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });\n\n        const result = await stateManager.geoLocate('Seattle', actionContext);\n\n        expect(window.crypto.getRandomValues).not.toBeCalled();\n        expect(window.document.body.appendChild).not.toBeCalled();\n        expect(window.document.body.removeChild).not.toBeCalled();\n\n        expect(result).toBeUndefined();\n    });\n\n    it('Returns undefined if API key not present', async () => {\n        mockRequestContext.channel!.BingMapsApiKey = undefined;\n\n        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });\n\n        const result = await stateManager.geoLocate('Seattle', actionContext);\n\n        expect(window.crypto.getRandomValues).not.toBeCalled();\n        expect(window.document.body.appendChild).not.toBeCalled();\n        expect(window.document.body.removeChild).not.toBeCalled();\n\n        expect(result).toBeUndefined();\n    });\n\n    it('Returns undefined if Map not enabled ', async () => {\n        mockRequestContext.channel!.BingMapsEnabled = false;\n\n        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });\n\n        const result = await stateManager.geoLocate('Seattle', actionContext);\n\n        expect(window.crypto.getRandomValues).not.toBeCalled();\n        expect(window.document.body.appendChild).not.toBeCalled();\n        expect(window.document.body.removeChild).not.toBeCalled();\n\n        expect(result).toBeUndefined();\n    });\n\n    it('Returns undefined if search callback returns undefined', async () => {\n        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });\n\n        const result = await stateManager.geoLocate('Seattle', actionContext);\n\n        expect(window.crypto.getRandomValues).toBeCalled();\n        expect(window.document.body.appendChild).toBeCalled();\n        expect(window.document.body.removeChild).toBeCalled();\n\n        expect(result).toBeUndefined();\n    });\n\n    it('Returns lat lon pair if search callback returns valid data', async () => {\n        window.document.body.appendChild = jest.fn().mockImplementation(script => {\n            expect(window['mapSearchCallback_1']).toBeDefined();\n            window['mapSearchCallback_1'](MockMapLocationsResponse);\n            expect(window['mapSearchCallback_1']).toBeUndefined();\n\n            return script;\n        });\n\n        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });\n\n        const result = await stateManager.geoLocate('Seattle', actionContext);\n\n        expect(result).toEqual(expect.objectContaining(\n            {\n                latitude: 40.714550018310547,\n                longitude: -74.00714111328125\n            }\n        ));\n    });\n\n    afterEach(() => {\n        // @ts-ignore Overriding read only for test purposes\n        window.crypto = crypto;\n        window.document.body = body;\n    });\n});\n\ndescribe('openDialog tests', () => {\n    let stateManager: IStoreSelectorStateManager;\n\n    beforeEach(() => {\n        stateManager = new MapStoreSelectorStateManager();\n    });\n\n    it('isDialogOpen starts off as closed', () => {\n        expect(stateManager.isDialogOpen).toBe(false);\n    });\n\n    it('isDialogOpen is open after open dialog called', () => {\n        stateManager.openDialog({\n            product: undefined,\n            alreadySelectedLocation: undefined,\n            onLocationSelected: jest.fn()\n        });\n\n        expect(stateManager.isDialogOpen).toBe(true);\n    });\n\n    it('isDialogOpen sets proper contect', () => {\n        const mockContext = {\n            product: undefined,\n            alreadySelectedLocation: undefined,\n            onLocationSelected: jest.fn()\n        };\n\n        stateManager.openDialog(mockContext);\n\n        expect(stateManager.context).toBeDefined();\n        expect(stateManager.context).toEqual(mockContext);\n\n        stateManager.context!.onLocationSelected({});\n\n        expect(mockContext.onLocationSelected).toBeCalled();\n    });\n\n    it('isDialogOpen is closed after close dialog called', () => {\n        stateManager.openDialog({\n            product: undefined,\n            alreadySelectedLocation: undefined,\n            onLocationSelected: (location) => Promise.resolve()\n        });\n\n        stateManager.closeDialog();\n\n        expect(stateManager.isDialogOpen).toBe(false);\n    });\n\n    it('openDialog rejects if already open', async () => {\n        await expect(stateManager.openDialog({\n            product: undefined,\n            alreadySelectedLocation: undefined,\n            onLocationSelected: jest.fn()\n        })).resolves.toBeUndefined();\n\n        await expect(stateManager.openDialog({\n            product: undefined,\n            alreadySelectedLocation: undefined,\n            onLocationSelected: jest.fn()\n        })).rejects.toEqual(expect.anything());\n    });\n});\n\ndescribe('loadMapApi Tests', () => {\n    let stateManager: IStoreSelectorStateManager;\n\n    beforeEach(() => {\n        stateManager = new MapStoreSelectorStateManager();\n    });\n\n    it('isMapApiLoaded starts off as undefined', () => {\n        expect(stateManager.isMapApiLoaded).toBe(undefined);\n    });\n\n    it('mapApi is ready after the callback', async () => {\n        const mockLoadMapApiInput = {\n            key: 'A1B2C3',\n            lang: 'fr',\n            market: 'fr-FR'\n        };\n\n        stateManager.loadMapApi(mockLoadMapApiInput).then(() => {\n            expect(window['mapAPIReady']).toBeDefined();\n            expect(stateManager.isMapApiLoaded).toBe(true);\n        }).catch(() => {\n            expect(window['mapAPIReady']).toBeUndefined();\n            expect(stateManager.isMapApiLoaded).toBe(undefined);\n        });\n    });\n});\n\ndescribe('Toggle List/Map view state test', () => {\n    let stateManager: IStoreSelectorStateManager;\n\n    beforeEach(() => {\n        stateManager = new MapStoreSelectorStateManager();\n    });\n\n    it('listMapViewState is intialized', () => {\n        const listMapViewState: IListMapViewState = stateManager.listMapViewState;\n        expect(listMapViewState.displayList).toBe(true);\n        expect(listMapViewState.displayMap).toBe(false);\n    });\n\n    it('Toggles the value of displayList and displayMap', async () => {\n        const listMapViewState: IListMapViewState = stateManager.listMapViewState;\n        stateManager.toggleListMapViewState().then(() => {\n            expect(listMapViewState.displayList).toBe(false);\n            expect(listMapViewState.displayMap).toBe(true);\n        }).catch(() => {\n            expect(listMapViewState.displayList).toBe(true);\n            expect(listMapViewState.displayMap).toBe(false);\n        });\n    });\n});"]}