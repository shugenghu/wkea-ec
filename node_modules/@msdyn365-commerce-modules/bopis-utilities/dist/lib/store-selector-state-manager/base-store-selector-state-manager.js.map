{"version":3,"file":"base-store-selector-state-manager.js","sourceRoot":"./src/","sources":["store-selector-state-manager/base-store-selector-state-manager.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAKpD;;;GAGG;AACH,MAAM,OAAgB,6BAA6B;IAAnD;QAQuB,qBAAgB,GAAsB,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;IA+CtG,CAAC;IAtDa,IAAW,YAAY;QAC7B,OAAO,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC;IACvC,CAAC;IAQS,IAAW,OAAO;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAOM,KAAK,CAAC,sBAAsB;QAC/B,IAAI,CAAC,gBAAgB,GAAG;YACpB,WAAW,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW;YAC/C,UAAU,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU;SAChD,CAAC;IACN,CAAC;IAGM,KAAK,CAAC,0BAA0B,CAAC,KAAkC;QACtE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IAGM,KAAK,CAAC,0BAA0B,CAAC,OAA2B;QAC/D,IAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC;IAC3C,CAAC;IAGM,KAAK,CAAC,2BAA2B,CAAC,OAA2B;QAChE,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC;IAC5C,CAAC;IAGM,KAAK,CAAC,UAAU,CAAC,KAAkC;QACtD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IAGM,KAAK,CAAC,WAAW;QACpB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC9B,CAAC;CACJ;AAtDa;IAAT,QAAQ;iEAER;AAEW;IAAX,UAAU;qEAAiC;AAChC;IAAX,UAAU;8EAAyC;AACxC;IAAX,UAAU;+EAA0C;AACzC;IAAX,UAAU;uEAAuF;AACtF;IAAX,UAAU;+DAAkD;AAEnD;IAAT,QAAQ;4DAER;AAOD;IADC,MAAM;2EAMN;AAGD;IADC,MAAM;+EAGN;AAGD;IADC,MAAM;+EAGN;AAGD;IADC,MAAM;gFAGN;AAGD;IADC,MAAM;+DAON;AAGD;IADC,MAAM;gEAGN","sourcesContent":["import { action, computed, observable } from 'mobx';\n\nimport { IActionContext } from '@msdyn365-commerce/core';\nimport { IListMapViewState, ILoadMapApiInput, IStoreSelectionStateContext, IStoreSelectorLocation, IStoreSelectorStateManager } from './i-store-selection-state-manager';\n\n/**\n * Abstract instance of IStoreSelectorStateManager with base implementation\n * of everything except the geoLocate function\n */\nexport abstract class BaseStoreSelectorStateManager implements IStoreSelectorStateManager {\n    @computed public get isDialogOpen(): Readonly<boolean> {\n        return this._context !== undefined;\n    }\n\n    @observable public isMapApiLoaded?: boolean;\n    @observable public selectedStoreLocationId?: string;\n    @observable public preferredStoreLocationId?: string;\n    @observable public listMapViewState: IListMapViewState = { displayList: true, displayMap: false };\n    @observable protected _context?: IStoreSelectionStateContext;\n\n    @computed public get context(): Readonly<IStoreSelectionStateContext | undefined> {\n        return this._context;\n    }\n\n    public abstract geoLocate(searchTerm: string, actionContext: IActionContext): Promise<IStoreSelectorLocation | undefined>;\n\n    public abstract loadMapApi(input: ILoadMapApiInput): Promise<void>;\n\n    @action\n    public async toggleListMapViewState(): Promise<void> {\n        this.listMapViewState = {\n            displayList: !this.listMapViewState.displayList,\n            displayMap: !this.listMapViewState.displayMap\n        };\n    }\n\n    @action\n    public async setOrgUnitStoreInformation(input: IStoreSelectionStateContext): Promise<void> {\n        this._context = input;\n    }\n\n    @action\n    public async setSelectedStoreLocationId(storeId: string | undefined): Promise<void> {\n        this.selectedStoreLocationId = storeId;\n    }\n\n    @action\n    public async setPreferredStoreLocationId(storeId: string | undefined): Promise<void> {\n        this.preferredStoreLocationId = storeId;\n    }\n\n    @action\n    public async openDialog(input: IStoreSelectionStateContext): Promise<void> {\n        if (this._context) {\n            throw new Error('Dialog is already opened');\n        }\n\n        this._context = input;\n    }\n\n    @action\n    public async closeDialog(): Promise<void> {\n        this._context = undefined;\n    }\n}"]}