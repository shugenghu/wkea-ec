{"version":3,"file":"i-store-selection-state-manager.js","sourceRoot":"./src/","sources":["store-selector-state-manager/i-store-selection-state-manager.ts"],"names":[],"mappings":"","sourcesContent":["import { IFullOrgUnitAvailability } from '@msdyn365-commerce-modules/retail-actions';\nimport { IActionContext } from '@msdyn365-commerce/core';\nimport { OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\n\n/**\n * State information related to handle Store Selector scenarios\n */\nexport interface IStoreSelectorStateManager {\n    /**\n     * Returns whether or not the store selection dialog is open\n     */\n    readonly isDialogOpen: boolean;\n\n    /**\n     * Contextual information related to store selection instance\n     */\n    readonly context?: IStoreSelectionStateContext;\n\n    /**\n     * Property for identifying which location is in active state.\n     */\n    readonly selectedStoreLocationId?: string;\n\n    /**\n     * Property for identifying which store is users preferred store.\n     */\n    readonly preferredStoreLocationId?: string;\n\n    /**\n     * Property for identifying if map api is loaded\n     */\n    readonly isMapApiLoaded?: boolean;\n\n    /**\n     * Property for identifying view state of List and Map\n     */\n    listMapViewState: IListMapViewState;\n\n    /**\n     * Does the geo location step, transforming the search string into a location\n     */\n    geoLocate(searchTerm: string, actionContext: IActionContext): Promise<IStoreSelectorLocation | undefined>;\n\n    /**\n     * Add a script to body if not already added and makes sure that map api is ready\n     */\n    loadMapApi(input: ILoadMapApiInput): Promise<void>;\n\n    /**\n     * Sets current location list to the context\n     */\n    setOrgUnitStoreInformation(input: IStoreSelectionStateContext): Promise<void>;\n\n    /**\n     * Provides clicked store selected state\n     */\n    setSelectedStoreLocationId(storeLocationId: string | undefined): Promise<void>;\n\n    /**\n     * Sets preferredStoreLocationId\n     */\n    setPreferredStoreLocationId(storeLocationId: string | undefined): Promise<void>;\n\n    /**\n     * Toggels between the view state of List and Map\n     */\n    toggleListMapViewState(): Promise<void>;\n\n    /**\n     * Opens the dialog with the provided context\n     */\n    openDialog(input: IStoreSelectionStateContext): Promise<void>;\n\n    /**\n     * Close the dialog\n     */\n    closeDialog(): Promise<void>;\n}\n\nexport interface IStoreSelectionStateContext {\n    /**\n     * Optional product to use for inventory checks\n     */\n    product?: SimpleProduct;\n\n    /**\n     * Optional location list\n     */\n    orgUnitStoreInformation?: IFullOrgUnitAvailability[];\n\n    /**\n     * Optional location to use to specify which location is already selected\n     */\n    alreadySelectedLocation?: OrgUnitLocation;\n\n    /**\n     * Property bag for other information that is needed without having to\n     * modify the interfaces\n     */\n    additionalProperties?: object;\n\n    /**\n     * Callback for when a location is selected\n     */\n    onLocationSelected(location: OrgUnitLocation): Promise<void>;\n}\n\nexport interface IStoreSelectorLocation {\n    latitude: number | undefined;\n    longitude: number | undefined;\n}\n\nexport interface IListMapViewState {\n    displayList: boolean;\n    displayMap: boolean;\n}\n\nexport interface ILoadMapApiInput {\n    key: string | undefined;\n    lang: string | undefined;\n    market: string | undefined;\n}"]}