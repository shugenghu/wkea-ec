import * as React from 'react';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import NavigationMenuView from '../../navigation-menu.view';
const mockConfig = {
    className: 'Mock-class2',
};
const mockFn = jest.fn();
const moduleProps = buildMockModuleProps({}, {}, mockConfig);
const menuData = {
    id: 1,
    linkText: 'main-menu-mock',
    linkURL: 'https://xyz.com',
    imageSource: 'abc/xyz.png',
    subMenu: [{
            id: 1,
            linkText: 'sub-menu-mock',
            linkURL: 'https://xyz.com',
            imageSource: 'abc/xyz.png',
            subMenu: [{
                    id: 1,
                    linkText: 'sub-menu-mock',
                    linkURL: 'https://xyz.com',
                    imageSource: 'abc/xyz.png',
                }]
        }],
};
const mockProps = {
    ...moduleProps,
    className: 'Mock-class',
    id: 'mock-test',
    menuItemData: [menuData, menuData],
    isMobileView: true,
    showCategoryImage: true,
    Navigation: {
        moduleProps: moduleProps,
        className: 'ms-nav',
        tag: 'nav',
        role: 'navigation',
        'aria-label': 'Menu'
    },
    MenuList: {
        className: 'ms-nav__list',
        tag: 'ul'
    },
    ListItem: {
        className: 'ms-nav__list__item',
        tag: 'li'
    },
    DivContainer: {
        tag: 'div',
        className: 'ms-nav__feature',
        role: 'menu'
    },
    ImageDivContainer: {
        tag: 'div',
        className: 'category-image',
        role: 'menu'
    },
    Link: {
        tag: 'a',
        className: 'ms-nav__list__item__link',
        onMouseEnter: mockFn,
        onMouseLeave: mockFn
    },
    Button: {
        className: 'ms-nav__list__item__button',
        tag: 'button',
        onClick: mockFn
    },
    ImageContainer: {
        className: 'ms-nav__list__item__image'
    },
    Span: {
        className: 'ms-nav__list__item__span',
        tag: 'span'
    },
    MobileDescriptionContainer: {
        className: 'ms-nav__list__mobile__container'
    },
    MobileBackButton: {
        className: 'ms-nav__list__mobile__container__button',
        tag: 'button',
        onClick: mockFn
    },
    MobileDescriptionLabel: {
        className: 'ms-nav__list__mobile__container__span',
        tag: 'span'
    }
};
describe('Navigation Menu Unit Test', () => {
    it('View renders correctly', () => {
        const wrapper = mount(React.createElement(NavigationMenuView, Object.assign({}, mockProps)));
        const button = wrapper.find('button');
        expect(button).toBeDefined();
        button.at(0).simulate('click');
        button.at(1).simulate('click');
        wrapper.setProps({ isMobileView: false });
        expect(button).toBeDefined();
        button.at(0).simulate('click');
        button.at(1).simulate('click');
        wrapper.unmount();
    });
    it('View renders correctly with menu data', () => {
        const menuDatawithlink = {
            id: 2,
            linkText: 'main-menu-mock',
            linkURL: 'https://xyz.com',
            subMenu: [{
                    id: 1,
                    linkText: 'sub-menu-mock',
                    linkURL: 'https://xyz.com'
                }],
        };
        const menuDatawithoutlink = {
            id: 2,
            linkText: 'main-menu-mock',
            subMenu: [{
                    id: 1,
                    linkText: 'sub-menu-mock',
                }],
        };
        const menuDatawithsubMenu = {
            id: 2,
            linkText: 'main-menu-mock',
            linkURL: 'https://xyz.com',
        };
        const wrapper = mount(React.createElement(NavigationMenuView, Object.assign({}, mockProps, { isMobileView: false })));
        const button = wrapper.find('button');
        wrapper.setState({ showImage: true, activeMenu: 1 });
        button.at(0).simulate('click');
        wrapper.setProps({ isMobileView: true });
        button.at(0).simulate('click');
        button.at(1).simulate('click');
        wrapper.setState({ activeMenu: 10 });
        wrapper.setProps({ menuItemData: [menuDatawithlink, menuDatawithlink] });
        wrapper.setProps({ menuItemData: [menuDatawithoutlink, menuDatawithoutlink] });
        button.at(0).simulate('click');
        button.at(1).simulate('click');
        wrapper.setProps({ menuItemData: [] });
        wrapper.find('ForwardRef.ms-nav__list__mobile__container__button').simulate('click');
        expect(wrapper.state('activeMenu')).toBe(2);
        wrapper.setProps({ menuItemData: [menuDatawithsubMenu, menuDatawithsubMenu] });
        wrapper.setProps({ isMobileView: false });
    });
    it('View renders correctly with menu data and category image', () => {
        const menuDatawithimage = {
            id: 2,
            linkText: 'main-menu-mock',
            linkURL: 'https://xyz.com',
            imageSource: 'abc/xyz.png',
            subMenu: [{
                    id: 1,
                    linkText: 'sub-menu-mock',
                    linkURL: 'https://xyz.com',
                    imageSource: 'abc/xyz.png',
                }],
        };
        const menuDatawithoutlink = {
            id: 2,
            linkText: 'main-menu-mock',
            imageSource: 'abc/xyz.png',
            subMenu: [{
                    id: 1,
                    linkText: 'sub-menu-mock',
                    imageSource: 'abc/xyz.png',
                }],
        };
        const menuDatawithsubMenu = {
            id: 2,
            linkText: 'main-menu-mock',
            linkURL: 'https://xyz.com',
            imageSource: 'abc/xyz.png',
        };
        const wrapper = mount(React.createElement(NavigationMenuView, Object.assign({}, mockProps, { isMobileView: false })));
        const button = wrapper.find('button');
        wrapper.setState({ showImage: true, activeMenu: 1 });
        button.at(0).simulate('click');
        wrapper.setProps({ isMobileView: true });
        button.at(0).simulate('click');
        button.at(1).simulate('click');
        wrapper.setState({ activeMenu: 10 });
        wrapper.setProps({ menuItemData: [menuDatawithimage, menuDatawithimage] });
        wrapper.setProps({ menuItemData: [menuDatawithoutlink, menuDatawithoutlink] });
        button.at(0).simulate('click');
        button.at(1).simulate('click');
        wrapper.setProps({ menuItemData: [] });
        wrapper.find('ForwardRef.ms-nav__list__mobile__container__button').simulate('click');
        expect(wrapper.state('activeMenu')).toBe(2);
        wrapper.setProps({ menuItemData: [menuDatawithsubMenu, menuDatawithsubMenu] });
        wrapper.setProps({ isMobileView: false });
    });
});
//# sourceMappingURL=navigation-menu.view.test.js.map