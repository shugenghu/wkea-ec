import { __decorate } from "tslib";
import { getCategoryUrl } from '@msdyn365-commerce-modules/retail-actions';
import { addThrottledEvent } from '@msdyn365-commerce-modules/utilities';
import { isEmptyOrNullObject } from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { computed, observable } from 'mobx';
import * as React from 'react';
class NavigationMenu extends React.PureComponent {
    constructor(props) {
        super(props);
        this.isRetail = true;
        this.isCMS = true;
        this._setNavigationSource = (sourceType) => {
            switch (sourceType) {
                case "retailServerOnly":
                    this.isRetail = true;
                    this.isCMS = false;
                    break;
                case "cmsOnly":
                    this.isRetail = false;
                    this.isCMS = true;
                    break;
                case "all":
                    this.isRetail = true;
                    this.isCMS = true;
                    break;
                default:
            }
        };
        this._updateViewport = this._updateViewport.bind(this);
        this.viewport = props.context.request && props.context.request.device && props.context.request.device.Type === 'Mobile' ? 'xs' : 'lg';
        this._setNavigationSource(this.props.config && this.props.config.navigationMenuSource);
        this.state = { isMobile: this.isMobile };
        this.menuItemList = [];
    }
    static getFriendlyName(locale, nameTranslations) {
        let nameTranslation;
        if (locale && nameTranslations && nameTranslations.length > 0) {
            nameTranslation = nameTranslations.find(item => item.Language.toLowerCase() === locale.toLowerCase());
        }
        return nameTranslation && nameTranslation.Text;
    }
    get isMobile() {
        return (this.viewport === 'xs' || this.viewport === 'sm');
    }
    componentDidMount() {
        this.resizeThrottledEventHandler =
            window && addThrottledEvent(window, 'resize', this._updateViewport);
        this._updateViewport();
    }
    componentWillUnmount() {
        window && window.removeEventListener('resize', this.resizeThrottledEventHandler, false);
    }
    render() {
        this.menuItemList = this._mapData();
        if (isEmptyOrNullObject(this.props.data)) {
            this.props.telemetry.error('Navigatiomenu returned null');
            return null;
        }
        const defaultImageSettings = {
            viewports: {
                xs: { q: `w=224&h=300&m=6`, w: 0, h: 0 },
                xl: { q: `w=224&h=300&m=6`, w: 0, h: 0 }
            },
            lazyload: true
        };
        const viewProps = {
            ...this.props,
            ...this.state,
            imageSettings: defaultImageSettings,
            gridSettings: this.props.context.request.gridSettings,
            Navigation: {
                moduleProps: this.props,
                className: classnames('ms-nav', this.props.config.className, this.state.isMobile ? 'mobile-vp' : 'desktop-vp'),
                tag: 'nav',
                role: 'navigation',
                'aria-label': this.props.resources.menuAriaLabel
            },
            MenuList: {
                className: 'ms-nav__list',
                tag: 'ul',
                role: 'menu'
            },
            ListItem: {
                className: 'ms-nav__list__item',
                role: 'presentation',
                tag: 'li'
            },
            showCategoryImage: this.props.config.displayCategoryImage || false,
            Link: {
                tag: 'a',
                className: 'ms-nav__list__item__link',
                role: 'menuitem'
            },
            DivContainer: {
                tag: 'div',
                className: 'ms-nav__feature',
                role: 'menu'
            },
            ImageDivContainer: {
                tag: 'div',
                className: 'category-image',
                role: 'menu'
            },
            Button: {
                className: 'ms-nav__list__item__button',
                tag: 'button',
                role: 'menuitem',
                onClick: this.props
            },
            ImageContainer: {
                className: 'ms-nav__list__item__image'
            },
            Span: {
                className: 'ms-nav__list__item__span',
                tag: 'span'
            },
            MobileDescriptionContainer: {
                className: 'ms-nav__list__mobile__container'
            },
            MobileBackButton: {
                className: 'ms-nav__list__mobile__container__button',
                tag: 'button',
                'aria-label': this.props.resources.backButtonAriaLabel,
                onClick: this.props
            },
            MobileDescriptionLabel: {
                className: 'ms-nav__list__mobile__container__span',
                tag: 'span'
            },
            isMobileView: this.state.isMobile,
            menuItemData: this.menuItemList,
            className: classnames('ms-nav', this.props.config.className)
        };
        return this.props.renderView(viewProps);
    }
    _mapData() {
        const { data, config } = this.props;
        const mergedData = [];
        if (this.isRetail && data && data.categories && data.categories.result && data.categories.result.length > 0) {
            data.categories.result.map((item) => (mergedData.push(this._constructMenuItemData(item, undefined, true))));
        }
        if (this.isCMS && config.cmsNavItems && config.cmsNavItems.length > 0) {
            config.cmsNavItems.map((item, idx) => (mergedData.push(this._constructMenuItemData(undefined, item, false, idx + 1))));
        }
        return mergedData;
    }
    _constructMenuItemData(retailItem, cmsItem, isRetail, idx) {
        const locale = this.props.context && this.props.context.request && this.props.context.request.locale ? this.props.context.request.locale : 'en-us';
        const imageSouce = retailItem && retailItem.Images && retailItem.Images[0].Uri ? retailItem.Images[0].Uri : 'empty';
        if (isRetail) {
            return {
                id: NavigationMenu.RSItemIdInit++,
                linkText: NavigationMenu.getFriendlyName(locale, retailItem && retailItem.NameTranslations) || '',
                linkURL: retailItem && retailItem.Url,
                imageSource: imageSouce,
                subMenu: this._getNestedChildren(retailItem, imageSouce)
            };
        }
        else {
            return {
                id: NavigationMenu.CMSItemIdInit++,
                linkText: cmsItem && cmsItem.linkText || '',
                linkURL: cmsItem && cmsItem.linkUrl && cmsItem.linkUrl.destinationUrl || '',
                imageDestinationURL: cmsItem && cmsItem.imageLink && cmsItem.imageLink.destinationUrl || '',
                imageSource: cmsItem && cmsItem.image && cmsItem.image.src || '',
                subMenu: this._getCMSNestedChildren(cmsItem)
            };
        }
    }
    _getNestedChildren(category, imageSourceUrl) {
        const nestedChildren = [];
        if (!category || !category.Children || !category.Children.length) {
            return [];
        }
        nestedChildren.push({ linkText: this.props.resources.allCategoryMenuText, imageSource: imageSourceUrl, linkURL: getCategoryUrl(category, this.props.context, {}) });
        category.Children.map((item) => {
            nestedChildren.push(this._constructMenuItemData(item, undefined, true));
        });
        return nestedChildren;
    }
    _getCMSNestedChildren(category) {
        const nestedChildren = [];
        if (!category || !category.subMenus || !category.subMenus.length) {
            return [];
        }
        category.subMenus.map((item, idx) => {
            nestedChildren.push(this._constructMenuItemData(undefined, item, false, idx));
        });
        return nestedChildren;
    }
    _updateViewport() {
        this.viewport = this._getViewport();
        this.setState({ isMobile: this.isMobile });
    }
    _getViewport() {
        const { context } = this.props;
        if (context.request && context.request.device && context.request.device.Type === 'Mobile') {
            return 'xs';
        }
        if (typeof window !== undefined && window.innerWidth) {
            const gridSettings = context.request.gridSettings;
            if (gridSettings) {
                if (gridSettings.xs && window.innerWidth <= gridSettings.xs.w) {
                    return 'xs';
                }
                else if (gridSettings.sm && window.innerWidth <= gridSettings.sm.w) {
                    return 'sm';
                }
                else if (gridSettings.md && window.innerWidth <= gridSettings.md.w) {
                    return 'md';
                }
                else if (gridSettings.lg && window.innerWidth <= gridSettings.lg.w) {
                    return 'lg';
                }
                else {
                    return 'xl';
                }
            }
        }
        return 'xs';
    }
}
NavigationMenu.CMSItemIdInit = 1000;
NavigationMenu.RSItemIdInit = 5000;
__decorate([
    observable
], NavigationMenu.prototype, "viewport", void 0);
__decorate([
    computed
], NavigationMenu.prototype, "isMobile", null);
export default NavigationMenu;
//# sourceMappingURL=navigation-menu.js.map