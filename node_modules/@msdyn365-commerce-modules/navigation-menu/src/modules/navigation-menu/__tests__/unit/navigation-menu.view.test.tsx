/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as React from 'react';

import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import { IMenuItemData } from '../../navigation-menu.data';
import { INavigationMenuConfig} from '../../navigation-menu.props.autogenerated';

import {INavigationMenuViewProps} from '../../navigation-menu';
import NavigationMenuView from '../../navigation-menu.view';

const mockConfig: INavigationMenuConfig = {
   className: 'Mock-class2',
};

const mockFn  = jest.fn();

const moduleProps = buildMockModuleProps({},{}, mockConfig) as INavigationMenuViewProps;
const menuData:IMenuItemData = {
      id:1,
      linkText:'main-menu-mock',
      linkURL:'https://xyz.com',
      imageSource:'abc/xyz.png',
      subMenu:[{
         id:1,
         linkText:'sub-menu-mock',
         linkURL:'https://xyz.com',
         imageSource:'abc/xyz.png',
         subMenu:[{
            id:1,
            linkText:'sub-menu-mock',
            linkURL:'https://xyz.com',
            imageSource:'abc/xyz.png',
         }]
      }],
};

const mockProps: INavigationMenuViewProps = {
   ...moduleProps,
   className: 'Mock-class',
   id:'mock-test',
   menuItemData:[menuData,menuData],
   isMobileView:true,
   showCategoryImage:true,
   Navigation: {
         moduleProps:moduleProps,
         className: 'ms-nav',
         tag:'nav',
         role:'navigation',
         'aria-label': 'Menu'
         },
   MenuList: {
         className: 'ms-nav__list',
         tag:'ul'
   },
   ListItem: {
         className: 'ms-nav__list__item',
         tag:'li'
   },
   DivContainer:
            {
                tag: 'div',
                className:'ms-nav__feature',
                role:'menu'
            },
   ImageDivContainer:
            {
                tag:'div',
                className:'category-image',
                role:'menu'
            },
   Link: {
         tag: 'a',
         className: 'ms-nav__list__item__link',
         onMouseEnter:mockFn,
         onMouseLeave:mockFn
   },
   Button: {
         className: 'ms-nav__list__item__button',
         tag:'button',
         onClick:mockFn
   },
   ImageContainer: {
         className: 'ms-nav__list__item__image'
   },
   Span: {
         className: 'ms-nav__list__item__span',
         tag:'span'
   },
   MobileDescriptionContainer: {
         className: 'ms-nav__list__mobile__container'
   },
   MobileBackButton: {
         className: 'ms-nav__list__mobile__container__button',
         tag:'button',
         onClick:mockFn
   },
   MobileDescriptionLabel: {
         className: 'ms-nav__list__mobile__container__span',
         tag:'span'
   }
   };
describe('Navigation Menu Unit Test', () => {
   it('View renders correctly', () => {
      const wrapper= mount(<NavigationMenuView  {...mockProps}/>);

      const button = wrapper.find('button');
      expect(button).toBeDefined();
      button.at(0).simulate('click');
      button.at(1).simulate('click');
      wrapper.setProps({isMobileView:false});
      expect(button).toBeDefined();
      button.at(0).simulate('click');
      button.at(1).simulate('click');
      wrapper.unmount();
   });

   it('View renders correctly with menu data', () => {
      const menuDatawithlink:IMenuItemData = {
         id:2,
         linkText:'main-menu-mock',
         linkURL:'https://xyz.com',
         subMenu:[{
            id:1,
            linkText:'sub-menu-mock',
            linkURL:'https://xyz.com'
         }],
      };
      const menuDatawithoutlink:IMenuItemData = {
         id:2,
         linkText:'main-menu-mock',
         subMenu:[{
            id:1,
            linkText:'sub-menu-mock',
         }],
      };
      const menuDatawithsubMenu:IMenuItemData = {
         id:2,
         linkText:'main-menu-mock',
         linkURL:'https://xyz.com',
      };
      const wrapper= mount(<NavigationMenuView  {...mockProps} isMobileView={false}/>);

      const button = wrapper.find('button');
      wrapper.setState(
            {showImage:true,activeMenu:1}
         );
      button.at(0).simulate('click');
      wrapper.setProps({isMobileView:true});

      button.at(0).simulate('click');
      button.at(1).simulate('click');
      wrapper.setState({activeMenu:10});

      wrapper.setProps({menuItemData:[menuDatawithlink,menuDatawithlink]});
      wrapper.setProps({menuItemData:[menuDatawithoutlink,menuDatawithoutlink]});
      button.at(0).simulate('click');
      button.at(1).simulate('click');

      wrapper.setProps({menuItemData:[]});
      wrapper.find('ForwardRef.ms-nav__list__mobile__container__button').simulate('click');

      expect(wrapper.state('activeMenu')).toBe(2);
      wrapper.setProps({menuItemData:[menuDatawithsubMenu,menuDatawithsubMenu]});
      wrapper.setProps({isMobileView:false});
    });

   it('View renders correctly with menu data and category image', () => {
      const menuDatawithimage:IMenuItemData = {
         id:2,
         linkText:'main-menu-mock',
         linkURL:'https://xyz.com',
         imageSource:'abc/xyz.png',
         subMenu:[{
            id:1,
            linkText:'sub-menu-mock',
            linkURL:'https://xyz.com',
            imageSource:'abc/xyz.png',
         }],
      };
      const menuDatawithoutlink:IMenuItemData = {
         id:2,
         linkText:'main-menu-mock',
         imageSource:'abc/xyz.png',
         subMenu:[{
            id:1,
            linkText:'sub-menu-mock',
            imageSource:'abc/xyz.png',
         }],
      };
      const menuDatawithsubMenu:IMenuItemData = {
         id:2,
         linkText:'main-menu-mock',
         linkURL:'https://xyz.com',
         imageSource:'abc/xyz.png',
      };
      const wrapper= mount(<NavigationMenuView  {...mockProps} isMobileView={false}/>);

      const button = wrapper.find('button');
      wrapper.setState(
            {showImage:true,activeMenu:1}
         );
      button.at(0).simulate('click');
      wrapper.setProps({isMobileView:true});

      button.at(0).simulate('click');
      button.at(1).simulate('click');
      wrapper.setState({activeMenu:10});

      wrapper.setProps({menuItemData:[menuDatawithimage,menuDatawithimage]});
      wrapper.setProps({menuItemData:[menuDatawithoutlink,menuDatawithoutlink]});
      button.at(0).simulate('click');
      button.at(1).simulate('click');

      wrapper.setProps({menuItemData:[]});
      wrapper.find('ForwardRef.ms-nav__list__mobile__container__button').simulate('click');

      expect(wrapper.state('activeMenu')).toBe(2);
      wrapper.setProps({menuItemData:[menuDatawithsubMenu,menuDatawithsubMenu]});
      wrapper.setProps({isMobileView:false});
    });

 });