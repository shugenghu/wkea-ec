{"version":3,"file":"update-primary-address.js","sourceRoot":"","sources":["../../src/update-primary-address.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,0BAA0B,EAA8B,MAAM,yBAAyB,CAAC;AAEjG,OAAO,EAAE,4BAA4B,EAAE,4BAA4B,EAA2B,MAAM,eAAe,CAAC;AAEpH,MAAM,UAAU,2BAA2B,CAAC,QAAkB,EAAE,OAAgB;IAC5E,QAAQ,CAAC,SAAS,GAAG,iBAAiB,CAAC,EAAE,GAAG,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACxF,OAAO,QAAQ,CAAC;AACpB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,KAA8B,EAAE,GAAmB;IAChG,OAAO,4BAA4B,CAAC,KAAK,EAAE,GAAG,EAAE,2BAA2B,CAAC,CAAC;AACjF,CAAC;AAED;;;;;GAKG;AACH,eAAe,0BAA0B,CAAY;IACjD,EAAE,EAAE,kEAAkE;IACtE,MAAM,EAAsB,0BAA0B;IACtD,KAAK,EAAuD,4BAA6B;IACzF,SAAS,EAAE,KAAK;CACnB,CAAC,CAAC;AAEH,MAAM,iBAAiB,GAAG,CAAC,gBAAyB,EAAE,SAAoB,EAAa,EAAE;IACrF,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACxB,IAAI,IAAI,CAAC,QAAQ,KAAK,gBAAgB,CAAC,QAAQ,EAAE;YAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACzB;aAAM;YACH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { IAction, IActionContext, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IAny, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { Address, Customer } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { createAddressManagementInput, doAddressManagementOperation, IAddressManagementInput } from './add-address';\n\nexport function updatePrimaryAddressHandler(customer: Customer, address: Address): Customer {\n    customer.Addresses = setPrimaryAddress({ ...address }, [...(customer.Addresses || [])]);\n    return customer;\n}\n\nexport async function updatePrimaryAddressAction(input: IAddressManagementInput, ctx: IActionContext): Promise<Address[]> {\n    return doAddressManagementOperation(input, ctx, updatePrimaryAddressHandler);\n}\n\n/**\n * The updatePrimaryAddress data action\n * Calls the read RetailServer API to get information about a customer\n * Merge the passed address information with the address information from\n * the retireved customer, and then updates that customer via the update RetailServer API.\n */\nexport default createObservableDataAction<Address[]>({\n    id: '@msdyn365-commerce-modules/retail-actions/update-primary-address',\n    action: <IAction<Address[]>>updatePrimaryAddressAction,\n    input: <(args: ICreateActionContext) => IActionInput>(<IAny>createAddressManagementInput),\n    isBatched: false\n});\n\nconst setPrimaryAddress = (primaryAddresses: Address, addresses: Address[]): Address[] => {\n    return addresses.map(addr => {\n        if (addr.RecordId === primaryAddresses.RecordId) {\n            addr.IsPrimary = true;\n        } else {\n            addr.IsPrimary = false;\n        }\n        return addr;\n    });\n};\n"]}