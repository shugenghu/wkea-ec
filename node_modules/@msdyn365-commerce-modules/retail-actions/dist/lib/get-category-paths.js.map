{"version":3,"file":"get-category-paths.js","sourceRoot":"","sources":["../../src/get-category-paths.ts"],"names":[],"mappings":"AAAA,OAAO,EAA2E,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AACxI,OAAO,EAAE,0BAA0B,EAAwD,MAAM,yBAAyB,CAAC;AAC3H,OAAO,EAAE,qBAAqB,EAAE,MAAM,wEAAwE,CAAC;AAE/G,OAAO,EAAE,mCAAmC,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAGvF;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAO9B,YAAY,OAAwB,EAAE,oBAA0C;QAczE,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9E,uBAAkB,GAAG,GAAG,EAAE,CAAC,cAAc,CAAC;QAC1C,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAf9C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,SAAS,GAAG,CAAC,CAAC;QACnD,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,oBAAoB,CAAC,OAAO,CAAC,YAAY,CAAA,EAAE;YAEnC,IAAI,CAAC,mBAAmB,IAAE,GAAG,YAAY,CAAC,SAAS,IAAI,YAAY,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC;QAChG,CAAC,CAAC,CAAA;QACN,IAAI,CAAC,mBAAmB,IAAE,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAA;QACzD,IAAI,CAAC,mBAAmB,IAAE,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAA;IAC7D,CAAC;IAEoF,CAAC;CAGzF;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,SAA+C,EAAgB,EAAE;IACzG,MAAM,SAAS,GAAG,mCAAmC,CAAC,SAAS,CAAC,CAAC;IACjE,IAAI,SAAS,EAAE;QACT,OAAO,IAAI,qBAAqB,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,EAAC,SAAS,EAAC,CAAC,SAAS,EAAC,CAAC,CAAC,CAAC;KAC1F;SAAM;QACH,MAAM,IAAI,KAAK,CAAC,qFAAqF,CAAC,CAAC;KAC1G;AAEL,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,KAA4B,EAAE,GAAmB;IAC1F,MAAM,mBAAmB,GAAG,MAAM,qBAAqB,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC5I,MAAM,YAAY,GAAG,mBAAmB,CAAC,CAAC,CAAC,CAAC,YAAY,IAAI,mBAAmB,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACnG,MAAM,WAAW,GAAG,oBAAoB,CAAC,YAA6B,EAAE,GAAG,CAAC,CAAC;IAC7E,IAAG,WAAW,EACd;QACI,OAAO,WAAW,CAAC;KACtB;IACD,OAAO,EAAE,CAAC;AACd,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,8DAA8D;IAClE,MAAM,EAA2B,sBAAsB;IACvD,KAAK,EAAE,2BAA2B;CACrC,CAAC,CAAC","sourcesContent":["import { CacheType, IAction, IActionInput, IRequestContext, ICommerceApiSettings, getCategoriesUrlSync } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getCategoryPathsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { CategoryPathLookup} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { getSelectedProductIdFromActionInput, buildCacheKey } from './utilities/utils';\nimport { ICategoryPath, ICategoryUrl } from '@msdyn365-commerce/core-internal/dist/types/interfaces/ICategoryPathInterfaces';\n\n/**\n * Category path input\n */\nexport class GetCategoryPathsInput implements IActionInput {\n    public readonly ChannelId: number;\n    public readonly CatalogId: number;    \n    public readonly categoryPathLooksups: CategoryPathLookup[];\n    private constructedCacheKey: string;\n    public readonly apiSettings: ICommerceApiSettings;\n\n    constructor(context: IRequestContext, categoryPathLooksups: CategoryPathLookup[]) {\n        this.ChannelId = context.apiSettings.channelId;\n        this.CatalogId = context.apiSettings.catalogId | 0;\n        this.categoryPathLooksups = categoryPathLooksups;\n        this.apiSettings = context.apiSettings;\n        this.constructedCacheKey = ``;\n        categoryPathLooksups.forEach(categoryPath=>\n            {\n                this.constructedCacheKey+=`${categoryPath.ProductId && categoryPath.ProductId.toString()}|`;\n            })\n        this.constructedCacheKey+=`${this.ChannelId.toString()}|`\n        this.constructedCacheKey+=`${this.CatalogId.toString()}|`\n    }\n   \n    public getCacheKey = () => buildCacheKey(this.constructedCacheKey, this.apiSettings);;\n    public getCacheObjectType = () => 'CategoryPath';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the getCategoryPath retail api call\n */\nexport const createGetCategoryPathsInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n    if (productId) {\n          return new GetCategoryPathsInput(inputData.requestContext, [{ProductId:+productId}]);\n    } else {\n        throw new Error('Unable to create SelectedVariantInput, no productId found on module config or query');\n    }\n    \n};\n\n/**\n * Calls the Retail API and returns the category path for a product\n */\nexport async function getCategoryPathsAction(input: GetCategoryPathsInput, ctx: IActionContext): Promise<ICategoryUrl[]> {\n    const categoryPathResults = await getCategoryPathsAsync({ callerContext: ctx },input.ChannelId, input.CatalogId,input.categoryPathLooksups);    \n    const categoryPath = categoryPathResults[0].CategoryPath && categoryPathResults[0].CategoryPath[0];\n    const categoryUrl = getCategoriesUrlSync(categoryPath as ICategoryPath, ctx);\n    if(categoryUrl)\n    {\n        return categoryUrl;\n    }\n    return [];\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-category-paths',\n    action: <IAction<ICategoryUrl[]>>getCategoryPathsAction,\n    input: createGetCategoryPathsInput,\n});\n"]}