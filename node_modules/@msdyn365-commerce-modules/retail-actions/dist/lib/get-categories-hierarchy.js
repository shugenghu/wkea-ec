import { createObservableDataAction } from '@msdyn365-commerce/core';
import getCategoryAction, { CategoriesInput as RawCategoriesInput } from './get-categories';
import { getCategoryUrl } from './utilities/Url-builder';
import { buildCacheKey } from './utilities/utils';
/**
 * Input for get-categories data action
 */
export class CategoriesInput {
    constructor(context, mappedToHierarchy, maxItems) {
        this.getCacheKey = () => buildCacheKey(`${this.channelId}|${this.sitePath}|top-${this.maxItems || 250}`, this.apiSettings, this.locale);
        this.getCacheObjectType = () => (this._mappedToHierarchy ? 'CategoryHierarchy' : 'Category');
        this.dataCacheType = () => 'application';
        this.getLocale = () => this.locale || '';
        this._mappedToHierarchy = mappedToHierarchy;
        this.maxItems = maxItems || 250;
        this.channelId = context && context.apiSettings && context.apiSettings.channelId ? +context.apiSettings.channelId : 0;
        this.sitePath = context && context.sitePath || '';
        this.apiSettings = context.apiSettings;
        this.locale = context.locale || '';
    }
}
const getFriendlyName = (locale, nameTranslations) => {
    let nameTranslation;
    if (locale && nameTranslations && nameTranslations.length > 0) {
        nameTranslation = nameTranslations.find(item => item.Language.toLowerCase() === locale.toLowerCase());
    }
    return nameTranslation && nameTranslation.Text;
};
/**
 * Creates a hierarchy of categories based on the ParentCategory property
 * @param categoryList Categories that will be converted into a hierarchy
 * @returns Hierarchy of categories in array
 */
export const mapCategoryToHierarchy = (categoryList, ctx, locale) => {
    if (!categoryList || !categoryList.length) {
        return [];
    }
    const categoryMap = categoryList.reduce((memo, category) => {
        const localName = getFriendlyName(locale, category.NameTranslations);
        const categoryHierarchy = { ...category };
        categoryHierarchy.NeutralizedName = category.Name;
        categoryHierarchy.Name = localName || categoryHierarchy.NeutralizedName;
        memo[category.RecordId] = categoryHierarchy;
        return memo;
    }, {});
    let zeroCategory = categoryMap[0];
    Object.keys(categoryMap).forEach((id) => {
        const element = categoryMap[+id];
        const parentId = element.ParentCategory;
        element.Url = getCategoryUrl(element, ctx, categoryMap);
        if (parentId === 0) {
            zeroCategory = element;
            return;
        }
        const parent = parentId && categoryMap[parentId];
        if (parent) {
            parent.Children = parent.Children || [];
            parent.Children.push(element);
        }
    });
    return (zeroCategory && zeroCategory.Children) || [];
};
/**
 * Creates the input required to make the retail api call
 */
export const createCategoriesHierarchyInput = (inputData) => {
    const topItems = inputData.config && inputData.config.topCategories && parseInt(inputData.config.topCategories, 10);
    return new CategoriesInput(inputData.requestContext, true, topItems);
};
/**
 * Calls the Retail API and returns all the categories as a hierarchy
 */
export async function getCategoryHierarchyAction(input, ctx) {
    const categories = await getCategoryAction(new RawCategoriesInput(ctx.requestContext, false, input.maxItems), ctx);
    return mapCategoryToHierarchy(categories, ctx, input.getLocale());
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-categories-hierarchy',
    action: getCategoryHierarchyAction,
    input: createCategoriesHierarchyInput
});
//# sourceMappingURL=get-categories-hierarchy.js.map