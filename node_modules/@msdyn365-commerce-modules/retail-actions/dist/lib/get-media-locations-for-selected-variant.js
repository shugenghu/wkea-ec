import { createObservableDataAction } from '@msdyn365-commerce/core';
import { AsyncResult } from '@msdyn365-commerce/retail-proxy';
import { getMediaLocationsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
import { generateImageUrl, getSelectedProductIdFromActionInput, getSelectedVariant, SelectedVariantInput } from './';
/**
 * The action input class for the getMediaLocationsForSelectedVariant data action
 */
export class MediaLocationsForSelectedVariantInput {
    constructor(productId, channelId, selectedProduct, catalogId) {
        this.getCacheKey = () => `MediaLocationsForSelectedVariant`;
        this.getCacheObjectType = () => 'MediaLocations';
        this.dataCacheType = () => 'none';
        this.productId = productId;
        this.channelId = channelId;
        this.catalogId = catalogId || 0;
        this.selectedProduct = selectedProduct;
    }
}
/**
 * The createInput method for the getMediaLocationsForSelectedVariant data action
 * @param inputData The input data passed to the createInput method
 */
export const createMediaLocationsForSelectedVariantInput = (inputData) => {
    const productId = getSelectedProductIdFromActionInput(inputData);
    if (productId) {
        return new MediaLocationsForSelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId);
    }
    else {
        throw new Error('Unable to create MediaLocationsForSelectedVariantInput, no productId found on module config or query');
    }
};
/**
 * The action method for the getMediaLocationsForSelectedVariant data action
 */
export async function getMediaLocationsForSelectedVariantAction(input, ctx) {
    return AsyncResult.resolve()
        .then(() => {
        const activeProduct = input.selectedProduct;
        if (!activeProduct) {
            const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);
            // @ts-ignore: Typing issues that will auto-resolve when SDK 1.4 publishes
            return getSelectedVariant(selectedVariantInput, ctx);
        }
        return activeProduct;
    })
        .then(productResult => {
        const activeProduct = productResult;
        if (activeProduct) {
            return getMediaLocationsAsync({ callerContext: ctx, queryResultSettings: {} }, activeProduct.RecordId, input.channelId, input.catalogId).then(response => {
                return response.map((mediaLocation) => {
                    mediaLocation.Uri = generateImageUrl(mediaLocation.Uri, ctx.requestContext.apiSettings);
                    mediaLocation.AltText = mediaLocation.AltText ? mediaLocation.AltText : activeProduct.Name;
                    return mediaLocation;
                });
            });
        }
        return [];
    })
        .catch(error => {
        ctx.trace(error);
        ctx.telemetry.error(error.message);
        ctx.telemetry.debug(`[getMediaLocationsForSelectedVariantAction]Error executing action`);
        throw new Error('[getMediaLocationsForSelectedVariantAction]Error executing action');
    });
}
/**
 * The getMediaLocationsForSelectedVariant data action
 * Gets the currently selected variant for the page via the getSelectedVariant data action,
 * and then gets the media location information for the variant via the MediaLocations RetailServer API
 */
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-media-locations-for-selected-variant',
    action: getMediaLocationsForSelectedVariantAction,
    input: createMediaLocationsForSelectedVariantInput
});
//# sourceMappingURL=get-media-locations-for-selected-variant.js.map