{"version":3,"file":"get-media-locations-for-selected-variant.js","sourceRoot":"","sources":["../../src/get-media-locations-for-selected-variant.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { AsyncResult, MediaLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { getMediaLocationsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\n\nimport {\n    generateImageUrl,\n    getSelectedProductIdFromActionInput,\n    getSelectedVariant,\n    SelectedVariantInput\n} from './';\n\n/**\n * The action input class for the getMediaLocationsForSelectedVariant data action\n */\nexport class MediaLocationsForSelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public catalogId: number;\n    public selectedProduct: SimpleProduct | undefined;\n\n    constructor(productId: number, channelId: number, selectedProduct?: SimpleProduct, catalogId?: number) {\n        this.productId = productId;\n        this.channelId = channelId;\n        this.catalogId = catalogId || 0;\n        this.selectedProduct = selectedProduct;\n    }\n\n    public getCacheKey = () => `MediaLocationsForSelectedVariant`;\n    public getCacheObjectType = () => 'MediaLocations';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * The createInput method for the getMediaLocationsForSelectedVariant data action\n * @param inputData The input data passed to the createInput method\n */\nexport const createMediaLocationsForSelectedVariantInput = (\n    inputData: ICreateActionContext<IGeneric<IAny>>\n): MediaLocationsForSelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new MediaLocationsForSelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId);\n    } else {\n        throw new Error('Unable to create MediaLocationsForSelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * The action method for the getMediaLocationsForSelectedVariant data action\n */\nexport async function getMediaLocationsForSelectedVariantAction(\n    input: MediaLocationsForSelectedVariantInput,\n    ctx: IActionContext\n): Promise<MediaLocation[]> {\n    return AsyncResult.resolve()\n        .then(() => {\n            const activeProduct: SimpleProduct | undefined = input.selectedProduct;\n\n            if (!activeProduct) {\n                const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);\n\n                // @ts-ignore: Typing issues that will auto-resolve when SDK 1.4 publishes\n                return <AsyncResult<SimpleProduct>>getSelectedVariant(selectedVariantInput, ctx);\n            }\n\n            return activeProduct;\n        })\n        .then(productResult => {\n            const activeProduct: SimpleProduct | undefined = <SimpleProduct | undefined>productResult;\n\n            if (activeProduct) {\n                return getMediaLocationsAsync({ callerContext: ctx, queryResultSettings: {} }, activeProduct.RecordId, input.channelId, input.catalogId).then(response => {\n                    return response.map(\n                        (mediaLocation: MediaLocation): MediaLocation => {\n                            mediaLocation.Uri = generateImageUrl(mediaLocation.Uri, ctx.requestContext.apiSettings);\n                            mediaLocation.AltText = mediaLocation.AltText ? mediaLocation.AltText : activeProduct.Name;\n                            return mediaLocation;\n                        }\n                    );\n                });\n            }\n\n            return [];\n        })\n        .catch(error => {\n            ctx.trace(error);\n            ctx.telemetry.error(error.message);\n            ctx.telemetry.debug(`[getMediaLocationsForSelectedVariantAction]Error executing action`);\n            throw new Error('[getMediaLocationsForSelectedVariantAction]Error executing action');\n        });\n}\n\n/**\n * The getMediaLocationsForSelectedVariant data action\n * Gets the currently selected variant for the page via the getSelectedVariant data action,\n * and then gets the media location information for the variant via the MediaLocations RetailServer API\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-media-locations-for-selected-variant',\n    action: <IAction<MediaLocation[] | null>>getMediaLocationsForSelectedVariantAction,\n    input: createMediaLocationsForSelectedVariantInput\n});\n"]}