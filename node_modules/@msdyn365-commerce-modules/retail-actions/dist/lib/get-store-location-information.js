import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getOrgUnitLocationsByAreaAsync, getStoreHoursAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';
/**
 * Get selected variant action input class
 */
export class GetOrgUnitLocationsByAreaInput {
    constructor(_Latitude, _Longitude, _Radius, _DistanceUnitValue, _IgnoreLocation) {
        this.getCacheKey = () => `GetOrgUnitLocationsByAreaInput`;
        this.getCacheObjectType = () => 'GetOrgUnitLocationsByAreaInput';
        this.dataCacheType = () => 'none';
        this.Latitude = _Latitude;
        this.Longitude = _Longitude;
        this.Radius = _Radius;
        this.DistanceUnitValue = _DistanceUnitValue;
        this.IgnoreLocation = _IgnoreLocation;
    }
}
/**
 * CreateInput method for the getSelectedVariant data action
 * @param inputData The input data passed to the createInput method
 */
export const createGetOrgUnitLocationsByAreaInput = (inputData) => {
    return new GetOrgUnitLocationsByAreaInput();
};
/**
 * Action method for the getSelectedVariant data action
 * @param input The action input class
 * @param ctx The action context
 */
export async function getOrgUnitLocationsByArea(input, ctx) {
    if ((input.Radius === undefined || !input.Latitude || !input.Longitude) && !input.IgnoreLocation) {
        // No valid location we want to return empty array so module can show no locations message
        return [];
    }
    const searchArea = {
        Latitude: input.Latitude,
        Longitude: input.Longitude,
        Radius: input.Radius,
        DistanceUnitValue: input.DistanceUnitValue || 0 // 0 is miles
    };
    return getOrgUnitLocationsByAreaAsync({ callerContext: ctx }, searchArea)
        .then((stores) => {
        const locationPromiseList = stores.map(store => _getLocationWithHours(store, ctx));
        return Promise.all(locationPromiseList);
    })
        .catch((error) => {
        ctx.trace('[GetOrgUnitLocationsByArea] error getting Locations');
        ctx.trace(error.message);
        ctx.telemetry.error(error.message);
        ctx.telemetry.debug(`[GetOrgUnitLocationsByArea] error getting Locations`);
        return [];
    });
}
/**
 * Action method that obtains the store information
 * @param orgUnitLocation The org unit location
 * @param storeMap a map that contains store information group by the inventory location id
 * @param ctx The action context
 */
async function _getLocationWithHours(orgUnitLocation, ctx) {
    if (!orgUnitLocation || !orgUnitLocation.OrgUnitNumber) {
        return { OrgUnitAvailability: undefined };
    }
    return getStoreHoursAsync({ callerContext: ctx }, orgUnitLocation.OrgUnitNumber)
        .then((hours) => {
        const availability = {
            OrgUnitLocation: orgUnitLocation
        };
        if (hours && !(hours instanceof Error)) {
            return { OrgUnitAvailability: availability, StoreHours: hours };
        }
        return { OrgUnitAvailability: availability };
    })
        .catch((error) => {
        ctx.trace('[GetFullAvailableInventoryNearby] error getting availability with hours');
        ctx.trace(error.message);
        ctx.telemetry.exception(error);
        ctx.telemetry.debug(`[GetFullAvailableInventoryNearby] error getting availability with hours`);
        return { OrgUnitAvailability: {} };
    });
}
/**
 * The complete getOrgUnitLocationsByArea data action
 */
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-store-location-information',
    action: getOrgUnitLocationsByArea,
    input: createGetOrgUnitLocationsByAreaInput
});
//# sourceMappingURL=get-store-location-information.js.map