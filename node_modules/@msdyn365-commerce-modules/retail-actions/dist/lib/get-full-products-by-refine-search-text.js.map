{"version":3,"file":"get-full-products-by-refine-search-text.js","sourceRoot":"","sources":["../../src/get-full-products-by-refine-search-text.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,0BAA0B,EAAwD,MAAM,yBAAyB,CAAC;AAE3H,OAAO,EAAE,uBAAuB,EAAE,MAAM,wEAAwE,CAAC;AAEjH,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,sBAAsB,EAA2B,MAAM,2BAA2B,CAAC;AAC5F,OAAO,EAAE,wCAAwC,EAAE,MAAM,mBAAmB,CAAC;AAE7E;;GAEG;AACH,MAAM,OAAO,mCAAmC;IAU5C,YACI,wBAAkD,EAClD,UAAmB,EACnB,SAAkB,EAClB,kBAA0C,EAC1C,SAAkB,EAClB,QAAiC;QAU9B,gBAAW,GAAG,GAAG,EAAE,CAAC,0CAA0C,CAAC;QAC/D,uBAAkB,GAAG,GAAG,EAAE,CAAC,qCAAqC,CAAC;QACjE,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAV3C,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;QACzD,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,IAAI,EAAE,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC;IAC3C,CAAC;CAKJ;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,yCAAyC,GAAG,CAAC,SAA+C,EAAgB,EAAE;IACvH,MAAM,kBAAkB,GAAG,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC;IACnF,MAAM,wBAAwB,GAAG,wBAAwB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACnF,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;QACpC,OAAO,IAAI,mCAAmC,CAAC,wBAAwB,CAAC,CAAC;KAC5E;IAED,MAAM,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;IACnD,MAAM,SAAS,GAAG,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC;IACjE,MAAM,sBAAsB,GAAG,wCAAwC,CAAC,SAAS,CAAC,CAAC;IAEnF,OAAO,IAAI,mCAAmC,CAC1C,wBAAwB,EACxB,eAAe,CAAC,CAAC,EACjB,eAAe,CAAC,SAAS,EACF,kBAAkB,EACzC,SAAS,EACT,sBAAsB,CACzB,CAAC;AACN,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,uCAAuC,CACnD,KAA0C,EAC1C,GAAmB;IAEnB,OAAO,sBAAsB,CACzB,KAAK,EACL,GAAG;IACH,2CAA2C;IAC3C,GAAG,EAAE;QACD,OAAO,uBAAuB,CAC1B,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAE,KAAK,CAAC,wBAAwB,CAAC,mBAAmB,EAAE,EAC/F,KAAK,CAAC,SAAS,IAAI,CAAC,EACpB,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,UAAU,EAChB,KAAK,CAAC,kBAAkB,CAAC,CAAC;IAClC,CAAC,CACJ,CAAC;AACN,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,mFAAmF;IACvF,MAAM,EAA2C,uCAAuC;IACxF,KAAK,EAAE,yCAAyC;IAChD,SAAS,EAAE,KAAK;CACnB,CAAC,CAAC","sourcesContent":["import { IRefineFullProductSearchOutput } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductRefinerValue } from '@msdyn365-commerce/retail-proxy';\nimport { refineSearchByTextAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductDetailsCriteria } from './get-full-products';\nimport { parseSearchData } from './utilities/input-data-parser';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\nimport { getRefinedFullProducts, IRefinableProductsInput } from './utilities/refiner-utils';\nimport { getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\n/**\n * Input for refining products returned by the search text.\n */\nexport class FullProductsRefineSearchByTextInput implements IActionInput, IRefinableProductsInput {\n    public readonly searchText: string;\n    public readonly channelId?: number;\n    public readonly refinementCriteria: ProductRefinerValue[];\n    public readonly itemsPerPage?: number;\n    public readonly skipCount?: number;\n    public readonly catalogId: number;\n    public productDetailsCriteria?: ProductDetailsCriteria;\n    public readonly queryResultSettingsProxy: QueryResultSettingsProxy;\n\n    constructor(\n        queryResultSettingsProxy: QueryResultSettingsProxy,\n        searchText?: string,\n        channelId?: number,\n        refinementCriteria?: ProductRefinerValue[],\n        catalogId?: number,\n        criteria?: ProductDetailsCriteria\n    ) {\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.searchText = searchText || '';\n        this.channelId = channelId;\n        this.refinementCriteria = refinementCriteria || [];\n        this.catalogId = catalogId || 0;\n        this.productDetailsCriteria = criteria;\n    }\n\n    public getCacheKey = () => `FullProductsRefineSearchByTextInputCache`;\n    public getCacheObjectType = () => 'FullProductsRefineSearchByTextInput';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * Creates the input required to make the core action calls\n */\nexport const createFullProductsRefineSearchByTextInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    const refinementCriteria = inputData.config && inputData.config.refinementCriteria;\n    const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);\n    if (!Array.isArray(refinementCriteria)) {\n        return new FullProductsRefineSearchByTextInput(queryResultSettingsProxy);\n    }\n\n    const searchInputData = parseSearchData(inputData);\n    const catalogId = inputData.requestContext.apiSettings.catalogId;\n    const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n\n    return new FullProductsRefineSearchByTextInput(\n        queryResultSettingsProxy,\n        searchInputData.q,\n        searchInputData.channelId,\n        <ProductRefinerValue[]>refinementCriteria,\n        catalogId,\n        productDetailsCriteria\n    );\n};\n\n/**\n * Calls the refine-search-by-text action.\n * Based on search result calls get-full-products to get all the product details.\n */\nexport function getFullProductsByRefineSearchTextAction(\n    input: FullProductsRefineSearchByTextInput,\n    ctx: IActionContext\n): Promise<IRefineFullProductSearchOutput> {\n    return getRefinedFullProducts(\n        input,\n        ctx,\n        // @ts-ignore: Promise.then typing conflict\n        () => {\n            return refineSearchByTextAsync(\n                { callerContext: ctx, queryResultSettings: input.queryResultSettingsProxy.QueryResultSettings },\n                input.channelId || 0,\n                input.catalogId,\n                input.searchText,\n                input.refinementCriteria);\n        }\n    );\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-full-products-by-refine-search-text',\n    action: <IAction<IRefineFullProductSearchOutput>>getFullProductsByRefineSearchTextAction,\n    input: createFullProductsRefineSearchByTextInput,\n    isBatched: false\n});\n"]}