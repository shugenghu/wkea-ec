{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/utilities/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAny, ICommerceApiSettings, ICreateActionContext, IGeneric, IRequestContext } from '@msdyn365-commerce/core';\nimport { AsyncResult } from '@msdyn365-commerce/retail-proxy';\nimport {\n    CartLine,\n    CommerceListLine,\n    ProductSearchResult,\n    QueryResultSettings,\n    SimpleProduct\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { ProductDetailsCriteria } from '../get-full-products';\nimport { parseSearchData } from './input-data-parser';\n\nexport const wrapInResolvedAsyncResult = <T = unknown>(input: T | null | undefined): AsyncResult<T> => {\n    return <AsyncResult<T>>{\n        status: 'SUCCESS',\n        result: input,\n        metadata: {}\n    };\n};\n\nexport const wrapInRejectedAsyncResult = <T = unknown>(input: T | null | undefined): AsyncResult<T> => {\n    return <AsyncResult<T>>{\n        status: 'FAILED',\n        result: input,\n        metadata: {}\n    };\n};\n\nexport const buildQueryResultSettings = (inputData: ICreateActionContext<IGeneric<IAny>, IGeneric<IAny>>): QueryResultSettings => {\n    try {\n        const searchInputData = parseSearchData(inputData);\n        const search = searchInputData.q;\n        if (!search) {\n            throw new Error('Query string ?q={searchText} is needed for search actions.');\n        }\n        const top = (searchInputData.maxItems && Number(searchInputData.maxItems)) || searchInputData.top;\n        return { Paging: { Top: top, Skip: searchInputData.skip } };\n    } catch (e) {\n        return {};\n    }\n};\n\n/**\n * Utility function to extract the active productId in the following priority:\n * First query param (productId), then UrlToken (itemId), then module config\n * @param inputData The Action Input data\n */\nexport const getSelectedProductIdFromActionInput = (inputData: ICreateActionContext<IGeneric<IAny>>): string | undefined => {\n    if (inputData && inputData.requestContext && inputData.requestContext.query && inputData.requestContext.query.productId) {\n        return inputData.requestContext.query.productId;\n    } else if (inputData && inputData.requestContext && inputData.requestContext.urlTokens && inputData.requestContext.urlTokens.itemId) {\n        return inputData.requestContext.urlTokens.itemId;\n    } else if (inputData && inputData.config && inputData.config.productId) {\n        return inputData.config.productId;\n    }\n    return undefined;\n};\n\n/**\n * Generates a Image URL based on data return from retail server\n * @param imageUrl The image url returned by Retail Server\n * @param ctx The request context\n */\nexport const generateImageUrl = (imageUrl: string | undefined, apiSettings: ICommerceApiSettings): string | undefined => {\n    if (imageUrl) {\n        // Images hosted in CMS include schema\n        if (imageUrl.startsWith('http')) {\n            return imageUrl;\n        }\n\n        // Images hosted in Retail Server must be encoded and joined with the base image url\n        return apiSettings.baseImageUrl + encodeURIComponent(imageUrl);\n    } else {\n        // d365Commerce.telemetry.warning(`Unable to generate a proper Image URL for Product: ${product.RecordId}`);\n        return undefined;\n    }\n};\n\n/**\n * Generates a Image URL for a product based on data return from retail server\n * @param product The Product returned by Retail Server\n * @param ctx The request context\n */\nexport const generateProductImageUrl = (\n    product: SimpleProduct | ProductSearchResult,\n    apiSettings: ICommerceApiSettings\n): string | undefined => {\n    return generateImageUrl(product.PrimaryImageUrl, apiSettings);\n};\n\n/**\n * Creates a CartLine object from the passed data\n * @param product The product\n * @param quantity The quantity\n * @param catalogId The catalog\n */\nexport const buildCartLine = (product: SimpleProduct, quantity?: number, catalogId?: number): CartLine => {\n    return {\n        CatalogId: catalogId || 0,\n        Description: product.Description,\n        // TODO: Investigate this value and what it represents\n        EntryMethodTypeValue: 3,\n        ItemId: product.ItemId,\n        ProductId: product.RecordId,\n        Quantity: quantity || 1,\n        TrackingId: '',\n        UnitOfMeasureSymbol: product.DefaultUnitOfMeasure\n    };\n};\n\n/**\n * Creates a CommerceListLine (also know as WishlistLine) object from the passed data\n * @param productId The RecordId of the Product to be added\n * @param customerId The account number of the customer\n * @param wishlistId The Id of the commerce list\n */\nexport const buildWishlistLine = (productId: number, customerId: string, wishlistId: number): CommerceListLine => {\n    return {\n        CommerceListId: wishlistId,\n        ProductId: productId,\n        CustomerId: customerId\n    };\n};\n\n/**\n * Utility function to prepare the product details criteria before getting full product:\n * @param inputData The Action Input data\n */\nexport const getProductDetailsCriteriaFromActionInput = (inputData: ICreateActionContext<IGeneric<IAny>>): ProductDetailsCriteria => {\n    if (inputData && inputData.config) {\n        return {\n            getPrice: !inputData.config.hidePrice,\n            getRating: !inputData.config.hideRating\n        };\n    }\n    return {\n        getPrice: true,\n        getRating: true\n    };\n};\n\n/**\n * Transforms search text into the expected 'search terms' format, expected by refiner APIs.\n * @param searchText free-form text used for searching for products or categories of products\n */\nexport const ensureSearchTextIsFormedProperly = (searchText: string): string => {\n    const prefix = searchText.startsWith(`'`) ? '' : `'`;\n    const suffix = searchText.endsWith(`'`) ? '' : `'`;\n    return `${prefix}${searchText}${suffix}`;\n};\n\nexport const ensureSafeSearchText = (searchText: string): string => {\n    return searchText.replace(/[^0-9a-zA-Z\\s]+/g, '');\n};\n\nexport const buildCacheKey = (base: string, apiSettings: ICommerceApiSettings, locale?:string): string => {\n    return `${base}-chanId:${apiSettings.channelId}-catId:${apiSettings.catalogId}${locale?`-${locale}`:''}`;\n};\n\nexport const buildCacheKeyWithUrlTokens = (base: string, requestContext: IRequestContext): string => {\n    const urlTokens = requestContext.urlTokens;\n    const defaultCacheKey = buildCacheKey(base, requestContext.apiSettings, requestContext.locale);\n    return urlTokens\n        ? `${defaultCacheKey}-${urlTokens.itemId}-${urlTokens.recordId}-${urlTokens.pageType}`\n        : defaultCacheKey;\n};\n\n/**\n * Generates a key from set of arguments as inputs\n *\n * @param args argument list of pivots to generate key from\n * @param handler handler function for null/undefined values\n */\n\ntype TKeyTypes = string | number | boolean | null | undefined;\ninterface IGenerateKeyOptions {\n    separator?: string;\n    handler?(input: null | undefined): string;\n}\nexport const generateKey = (args: TKeyTypes[], options?: IGenerateKeyOptions): string => {\n    const { handler, separator }: IGenerateKeyOptions = { ...{ separator: '-', handler: undefined }, ...(options || {}) };\n    return args\n        .map(arg => {\n            if (arg === null || arg === undefined) {\n                if (handler) {\n                    return handler(arg);\n                }\n            }\n            return arg;\n        })\n        .join(separator);\n};\n\n/**\n * Gets the fall back image url for a variant image.\n * @param itemId Item id of a product.\n * @param apiSettings Api setting from request context.\n */\nexport const getFallbackImageUrl = (itemId: string | undefined, apiSettings: ICommerceApiSettings): string | undefined => {\n    if (!itemId) {\n        return '';\n    }\n\n    const productUrl = `Products/${itemId}_000_001.png`;\n    return generateImageUrl(productUrl, apiSettings);\n};"]}