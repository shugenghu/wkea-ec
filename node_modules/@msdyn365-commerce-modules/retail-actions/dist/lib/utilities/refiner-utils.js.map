{"version":3,"file":"refiner-utils.js","sourceRoot":"","sources":["../../../src/utilities/refiner-utils.ts"],"names":[],"mappings":"AAGA,OAAO,eAAe,EAAE,EAAE,gBAAgB,EAAE,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;AAUjG;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,sBAAsB,CACxC,KAA8B,EAC9B,GAAmB,EACnB,kBAAwD;IAGxD,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;QACrC,GAAG,CAAC,KAAK,CAAC,8DAA8D,CAAC,CAAC;QAC1E,OAAuC,EAAE,CAAC;KAC7C;IAED,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,EAAE;QAClC,GAAG,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;QAClF,OAAuC,EAAE,CAAC;KAC7C;IACD,MAAM,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,cAAc,CAAC;IAE3C,IAAI,iBAAiB,GAAuB,EAAE,CAAC;IAE/C,MAAM,aAAa,GAAG,MAAM,kBAAkB,EAAE,CAAC;IACjD,IAAI,CAAC,aAAa,EAAE;QAChB,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;KAClG;SAAM;QACH,iBAAiB,GAAG,aAAa,CAAC,GAAG,CACjC,CAAC,OAA4B,EAAoB,EAAE;YAC/C,OAAO,IAAI,gBAAgB,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,EAAE,KAAK,CAAC,sBAAsB,IAAI,IAAI,sBAAsB,EAAE,CAAC,CAAC;QAC7H,CAAC,CACJ,CAAC;KACL;IAED,IAAI,iBAAiB,CAAC,MAAM,EAAE;QAC1B,MAAM,aAAa,GAAG,MAAM,eAAe,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QACpE,OAAO;YACH,mBAAmB,EAAE,aAAa;YAClC,kBAAkB,EAAE,KAAK,CAAC,kBAAkB;SAC/C,CAAC;KACL;SAAM;QACH,OAAO;YACH,mBAAmB,EAAE,EAAE;YACvB,kBAAkB,EAAE,KAAK,CAAC,kBAAkB;SAC/C,CAAC;KACL;AACL,CAAC","sourcesContent":["import { IRefineFullProductSearchOutput } from '@msdyn365-commerce/commerce-entities';\nimport { IActionContext } from '@msdyn365-commerce/core';\nimport { ProductRefinerValue, ProductSearchResult } from '@msdyn365-commerce/retail-proxy';\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from '../get-full-products';\n\n/**\n * Common refinable products input includes both product detail criteria and refinement criteria.\n */\nexport interface IRefinableProductsInput {\n    refinementCriteria: ProductRefinerValue[];\n    productDetailsCriteria?: ProductDetailsCriteria;\n}\n\n/**\n * If refinement criteria is set, then gets refined products.\n * @param input refinable products input\n * @param ctx action context\n * @param getRefinedProducts callback function to get a promise (e.g. refineSearchByCategoryAsync, refineSearchByTextAsync)\n * that is executed to get refined products or full set of products.\n */\nexport async function getRefinedFullProducts(\n    input: IRefinableProductsInput,\n    ctx: IActionContext,\n    getRefinedProducts: () => Promise<ProductSearchResult[]>\n): Promise<IRefineFullProductSearchOutput> {\n\n    if (!input || !input.refinementCriteria) {\n        ctx.trace('[getFullProductsByRefineSearchCategoryAction] Invalid input.');\n        return <IRefineFullProductSearchOutput>{};\n    }\n\n    if (!input.refinementCriteria.length) {\n        ctx.trace('[getFullProductsByRefineSearchCategoryAction] No refiners specified.');\n        return <IRefineFullProductSearchOutput>{};\n    }\n    const { apiSettings } = ctx.requestContext;\n\n    let fullProductInputs: FullProductInput[] = [];\n\n    const searchResults = await getRefinedProducts();\n    if (!searchResults) {\n        ctx.telemetry.error('[getFullProductsByRefineSearchCategoryAction] no searchResults returned');\n    } else {\n        fullProductInputs = searchResults.map(\n            (product: ProductSearchResult): FullProductInput => {\n                return new FullProductInput(product.RecordId, apiSettings, input.productDetailsCriteria || new ProductDetailsCriteria());\n            }\n        );\n    }\n\n    if (fullProductInputs.length) {\n        const productResult = await getFullProducts(fullProductInputs, ctx);\n        return {\n            productSearchResult: productResult,\n            refinementCriteria: input.refinementCriteria\n        };\n    } else {\n        return {\n            productSearchResult: [],\n            refinementCriteria: input.refinementCriteria\n        };\n    }\n}"]}