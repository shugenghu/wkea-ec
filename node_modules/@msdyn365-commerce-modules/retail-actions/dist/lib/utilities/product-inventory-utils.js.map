{"version":3,"file":"product-inventory-utils.js","sourceRoot":"","sources":["../../../src/utilities/product-inventory-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { ProductAvailableQuantity, ProductWarehouseInventoryAvailability } from '@msdyn365-commerce/retail-proxy';\nimport { IProductInventoryInformation } from './product-inventory-information';\n\n/**\n * The function that maps a ProductWareHouse object into a ProductAvailabilityQuantity\n */\nexport function mapProductInventoryInformation(ctx: IActionContext,productsWarehouseInventory?: ProductWarehouseInventoryAvailability[]): IProductInventoryInformation[] {\n    const productInventoryInformation: IProductInventoryInformation[] = [];\n\n    if(ctx.requestContext.app.config.enableStockCheck === undefined || ctx.requestContext.app.config.enableStockCheck === false) {\n        return productInventoryInformation;\n    }\n\n    if(productsWarehouseInventory && productsWarehouseInventory.length > 0) {\n        for(const product of productsWarehouseInventory) {\n            switch(ctx.requestContext.app.config.inventoryLevel){\n                case 'physicalAvailable':\n                    // Inventory level is enabled with Physical inventory\n                    const physicalProductMap = mapInventoryWithPhysicalBufferEnabled(ctx, product);\n                    if(physicalProductMap){\n                        productInventoryInformation.push(physicalProductMap);\n                    }\n                    break;\n                case 'totalAvailable':\n                    // Inventory level is enabled with Total available inventory\n                    const totalAvailableProductMap = mapInventoryWithTotalAvailableBufferEnabled(ctx, product);\n                    if(totalAvailableProductMap){\n                        productInventoryInformation.push(totalAvailableProductMap);\n                    }\n                    break;\n                default:\n                    // when inventory level is inventoryThreshold or not defined\n                    const productMap = mapInventoryWithThresholdEnabled(ctx, product);\n                    if(productMap){\n                        productInventoryInformation.push(productMap);\n                    }\n                    break;\n            }\n        }\n    }\n    return productInventoryInformation;\n}\n\nexport function mapInventoryWithThresholdEnabled(ctx: IActionContext, productWarehouseInventoryAvailability: ProductWarehouseInventoryAvailability) : IProductInventoryInformation | null {\n    if(productWarehouseInventoryAvailability && productWarehouseInventoryAvailability.ProductId && productWarehouseInventoryAvailability.TotalAvailable!==undefined) {\n        const productQty = productWarehouseInventoryAvailability.TotalAvailable - ctx.requestContext.app.config.outOfStockThreshold;\n        const productAvailableQuantity: ProductAvailableQuantity = {\n            ProductId: productWarehouseInventoryAvailability.ProductId, \n            AvailableQuantity: productQty > 0? productQty : 0\n        }\n\n        return {\n            ProductAvailableQuantity:productAvailableQuantity,\n            IsProductAvailable: productAvailableQuantity.AvailableQuantity && productAvailableQuantity.AvailableQuantity > 0 ? true : false,\n            InventLocationId: productWarehouseInventoryAvailability.InventLocationId\n        };\n    }\n\n    return null;\n}\n\nexport function mapInventoryWithPhysicalBufferEnabled(ctx: IActionContext, productWarehouseInventoryAvailability: ProductWarehouseInventoryAvailability): IProductInventoryInformation | null {\n    const shouldRenderLabel = displayLabelEnabled(ctx, productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode);\n\n    if(productWarehouseInventoryAvailability && productWarehouseInventoryAvailability.ProductId && productWarehouseInventoryAvailability.TotalAvailable !== undefined) {\n        // As per the new buffer logic from RS, \n        //if code is out of stock then we set the available quantity to 0 regardless of the actual value from API\n        const productQuantity = productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode === 'OOS' \n            ? 0 \n            :productWarehouseInventoryAvailability.PhysicalAvailable;\n\n        const productAvailableQuantity: ProductAvailableQuantity = {\n            ProductId: productWarehouseInventoryAvailability.ProductId, \n            AvailableQuantity: productQuantity\n        }\n        return {\n            ProductAvailableQuantity:productAvailableQuantity,\n            StockLevelCode: shouldRenderLabel? productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode: undefined,\n            StockLevelLabel: shouldRenderLabel? productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelLabel: undefined,\n            IsProductAvailable: productAvailableQuantity.AvailableQuantity != undefined && (productAvailableQuantity.AvailableQuantity > 0),\n            InventLocationId: productWarehouseInventoryAvailability.InventLocationId\n        };\n    }\n\n    return null;\n}\n\nexport function mapInventoryWithTotalAvailableBufferEnabled(ctx: IActionContext, productWarehouseInventoryAvailability: ProductWarehouseInventoryAvailability): IProductInventoryInformation | null {\n    const shouldRenderLabel = displayLabelEnabled(ctx, productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode);\n    if(productWarehouseInventoryAvailability && productWarehouseInventoryAvailability.ProductId && productWarehouseInventoryAvailability.TotalAvailable !== undefined) {\n       // As per the new buffer logic from RS, \n        //if code is out of stock then we set the available quantity to 0 regardless of the actual value from API\n        const productQuantity = productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode === 'OOS' \n            ? 0 \n            :productWarehouseInventoryAvailability.TotalAvailable;\n\n        const productAvailableQuantity: ProductAvailableQuantity = {\n            ProductId: productWarehouseInventoryAvailability.ProductId, \n            AvailableQuantity: productQuantity\n        }\n        return {\n            ProductAvailableQuantity:productAvailableQuantity,\n            StockLevelCode: shouldRenderLabel? productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode: undefined,\n            StockLevelLabel: shouldRenderLabel? productWarehouseInventoryAvailability.TotalAvailableInventoryLevelLabel: undefined,\n            IsProductAvailable: productAvailableQuantity.AvailableQuantity != undefined && (productAvailableQuantity.AvailableQuantity > 0),\n            InventLocationId: productWarehouseInventoryAvailability.InventLocationId\n        };\n    }\n\n    return null;\n}\n\nexport function displayLabelEnabled(ctx: IActionContext,  inventoryCode?:string) : boolean {\n   if(!inventoryCode){\n       return false;\n   }\n\n    switch(ctx.requestContext.app.config.inventoryRanges) {\n        case 'lowAndOutofStock':\n                if(inventoryCode !== 'AVAIL'){\n                    return true;\n                }\n            break;\n        case 'outOfStock':\n                if(inventoryCode == 'OOS'){\n                    return true;\n                }\n            break;\n        case 'all':\n            return true;\n    }\n    return false;\n}"]}