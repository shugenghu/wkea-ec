{"version":3,"file":"QueryResultSettingsProxy.js","sourceRoot":"","sources":["../../../src/utilities/QueryResultSettingsProxy.ts"],"names":[],"mappings":"AAIA;;;GAGG;AACH,MAAM,OAAO,wBAAwB;IA4DjC;;OAEG;IACH,YACI,mBAAwC;QAExC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACnD,CAAC;IA/DA,IAAI,mBAAmB;QACpB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,IAAI,YAAY;QACZ,mDAAmD;QACnD,MAAM,OAAO,GAAG,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAO,CAAC,GAAI,EAAE,CAAC;QAC/D,MAAM,QAAQ,GAAG,QAAQ,IAAI,CAAC,mBAAmB,CAAC,MAAO,CAAC,IAAK,EAAE,CAAC;QAClE,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAQ,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAkB,EAAE,EAAE;YACjG,OAAO,GAAG,MAAM,CAAC,UAAU,KAAK,MAAM,CAAC,YAAY,IAAI,MAAM,IAAI,KAAK,EAAE,CAAC;QAC7E,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC;QAC1B,MAAM,WAAW,GAAG,UAAU,eAAe,EAAE,CAAC;QAChD,OAAO,GAAG,OAAO,IAAI,QAAQ,IAAI,WAAW,EAAE,CAAC;IACnD,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,aAAa,CAAC,SAA+C;QACvE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC;QAC7C,OAAO,wBAAwB,CAAC,cAAc,CAAC,cAAc,EAAE,MAA0C,CAAC,CAAC;IAC/G,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,cAAc,CAAC,cAA+B,EAAE,MAAwC;QAClG,MAAM,eAAe,GAAG,MAAM,IAAI,MAAM,CAAC,eAAe,IAAI,SAAS,CAAC;QACtE,MAAM,KAAK,GAAG,cAAc,IAAI,cAAc,CAAC,KAAK,CAAC;QACrD,MAAM,GAAG,GAAG,KAAK,IAAI,KAAK,CAAC,GAAG,IAAI,SAAS,CAAC;QAC5C,MAAM,IAAI,GAAG,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,SAAS,CAAC;QAE9C,MAAM,mBAAmB,GAAG;YACxB,MAAM,EAAE;gBACJ,IAAI,EAAE,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjC,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,EAAE,YAAY,IAAI,EAAE,CAAC;aAC1D;YACD,OAAO,EAAE,eAAe,IAAI,EAAE;SACjC,CAAC;QAEF,OAAO,IAAI,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,UAAU;QACpB,OAAO,IAAI,wBAAwB,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;IACrE,CAAC;CAUJ","sourcesContent":["import { IAny, ICreateActionContext, IGeneric, IRequestContext } from '@msdyn365-commerce/core';\nimport { QueryResultSettings, SortColumn } from '@msdyn365-commerce/retail-proxy';\nimport { IQueryResultSettingsModuleConfig } from './IQueryResultSettingsModuleConfig';\n\n/**\n * Wrapper for query result settings, which guarantees some properties that are optional in the real subject\n * and includes some common utilities for data actions\n */\nexport class QueryResultSettingsProxy {\n    // real subject\n    private queryResultSettings: QueryResultSettings;\n\n     get QueryResultSettings(): QueryResultSettings {\n        return this.queryResultSettings;\n    }\n\n    /**\n     * Gets the hints for the cache key based on query result settings\n     */\n    get cacheKeyHint(): string {\n        // the factory method guarantees values are defined\n        const topHint = `top-${this.queryResultSettings.Paging!.Top!}`;\n        const skipHint = `skip-${this.queryResultSettings.Paging!.Skip!}`;\n        const sortingHintData = (this.queryResultSettings.Sorting!.Columns || []).map((column: SortColumn) => {\n            return `${column.ColumnName}--${column.IsDescending && 'desc' || 'asc'}`;\n        }).join(',') || undefined;\n        const sortingHint = `sortBy-${sortingHintData}`;\n        return `${topHint}|${skipHint}|${sortingHint}`;\n    }\n\n    /**\n     * Factory method for data actions\n     * @param inputData input data\n     */\n    public static fromInputData(inputData: ICreateActionContext<IGeneric<IAny>>): QueryResultSettingsProxy {\n        const { requestContext, config } = inputData;\n        return QueryResultSettingsProxy.fromModuleData(requestContext, config as IQueryResultSettingsModuleConfig);\n    }\n\n    /**\n     * Factory method for modules\n     * @param requestContext requestContext\n     * @param config module config from props\n     */\n    public static fromModuleData(requestContext: IRequestContext, config: IQueryResultSettingsModuleConfig): QueryResultSettingsProxy {\n        const sortingCriteria = config && config.sortingCriteria || undefined;\n        const query = requestContext && requestContext.query;\n        const top = query && query.top || undefined;\n        const skip = query && query.skip || undefined;\n\n        const queryResultSettings = {\n            Paging: {\n                Skip: (skip && Number(skip) || 0),\n                Top: (top && Number(top) || config?.itemsPerPage || 50)\n            },\n            Sorting: sortingCriteria || {}\n        };\n\n        return new QueryResultSettingsProxy(queryResultSettings);\n    }\n\n    /**\n     * Factory method\n     */\n    public static getDefault(): QueryResultSettingsProxy {\n        return new QueryResultSettingsProxy({ Paging: {}, Sorting: {} });\n    }\n\n    /**\n     * private constructor, expect instances to be created with the factory method\n     */\n    private constructor(\n        queryResultSettings: QueryResultSettings\n    ) {\n        this.queryResultSettings = queryResultSettings;\n    }\n}"]}