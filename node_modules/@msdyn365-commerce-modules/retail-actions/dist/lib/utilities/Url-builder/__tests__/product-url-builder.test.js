import 'jest';
import { getProductUrlSync } from '../product-url-builder';
import { buildMockActionContext } from '@msdyn365-commerce/core';
describe('Product Url Builder', () => {
    describe('getProductUrlSync', () => {
        it('should URI encode product name', () => {
            const mockContext = buildMockActionContext();
            // @ts-ignore
            const mockProduct = {
                Name: 'Product Name',
                RecordId: 123
            };
            const url = getProductUrlSync(mockProduct, mockContext);
            expect(url).toBe('/product-name/123.p');
        });
        it('Should return a product url with categories and locale when passed a product and a category with sitepath', () => {
            // @ts-ignore
            const mockProduct = {
                Name: 'Product',
                RecordId: 123
            };
            // @ts-ignore
            const mockCategory = {
                Slug: '/bikes/road-bikes'
            };
            // @ts-ignore
            const requestContext = {
                // @ts-ignore
                sitePath: '/sports'
            };
            // @ts-ignore
            const mockContext = {
                // @ts-ignore
                requestContext: requestContext
            };
            const url = getProductUrlSync(mockProduct, mockContext, mockCategory);
            expect(url).toBe('/sports/bikes/road-bikes/product/123.p');
        });
        it('Should return a product url when passed a product', () => {
            // @ts-ignore
            const mockProduct = {
                Name: 'Product',
                RecordId: 123
            };
            const mockContext = buildMockActionContext();
            const url = getProductUrlSync(mockProduct, mockContext);
            expect(url).toBe('/product/123.p');
        });
        it('Should prioritize returning master product id', () => {
            // @ts-ignore
            const mockProduct = {
                Name: 'Product',
                RecordId: 123,
                MasterProductId: 456
            };
            const mockContext = buildMockActionContext();
            const url = getProductUrlSync(mockProduct, mockContext);
            expect(url).toBe('/product/456.p');
        });
        it('Should return a product url with categories when passed a product and a category', () => {
            // @ts-ignore
            const mockProduct = {
                Name: 'Product',
                RecordId: 123
            };
            // @ts-ignore
            const mockCategory = {
                Slug: '/bikes/road-bikes'
            };
            // @ts-ignore
            const mockContext = {
                // @ts-ignore
                requestContext: {}
            };
            const url = getProductUrlSync(mockProduct, mockContext, mockCategory);
            expect(url).toBe('/bikes/road-bikes/product/123.p');
        });
    });
});
//# sourceMappingURL=product-url-builder.test.js.map