import 'jest';
import { getCategorySlug } from '..';
import { getCategoryUrl } from '../category-url-builder';
describe('Category Url Builder', () => {
    describe('getCategoryUrl', () => {
        it('Should return the correct Url', () => {
            // @ts-ignore
            const mockCategory = {
                Name: 'Bikes',
                RecordId: 1234
            };
            // @ts-ignore
            const mockRequest = {
                features: {}
            };
            const url = getCategoryUrl(mockCategory, { requestContext: mockRequest }, {});
            expect(url).toBe('/bikes/1234.c');
        });
    });
    it('Should return the correct Url with sitepath', () => {
        // @ts-ignore
        const mockCategory = {
            Name: 'Bikes',
            RecordId: 1234
        };
        // @ts-ignore
        const mockRequest = {
            sitePath: '/sports',
            features: {}
        };
        // @ts-ignore
        const mockActionContext = {
            requestContext: mockRequest
        };
        const url = getCategoryUrl(mockCategory, mockActionContext, {});
        expect(url).toBe('/sports/bikes/1234.c');
    });
    describe('getCategorySlug', () => {
        it('Should return an empty string when category is invalid', () => {
            // @ts-ignore
            const slug = getCategorySlug({}, {});
            expect(slug).toBe('');
        });
        it('Should assign a slug to the category', () => {
            // @ts-ignore
            const mockCategory = {
                Name: 'Bikes',
                ParentCategory: 0
            };
            const slug = getCategorySlug(mockCategory, {});
            expect(slug).toBe('/bikes');
            expect(mockCategory.Slug).toBe('/bikes');
        });
        it('Should assign the parent slug', () => {
            // @ts-ignore
            const mockParent = {
                Name: 'Bikes',
                RecordId: 1,
                ParentCategory: 0
            };
            // @ts-ignore
            const mockChild = {
                Name: 'Road Bikes',
                RecordId: 2,
                ParentCategory: 1
            };
            const mockChildEncoded = { ...mockChild };
            const mockMap = {
                1: mockParent,
                2: mockChild
            };
            const slug = getCategorySlug(mockChild, mockMap);
            expect(slug).toBe('/bikes/road-bikes');
            const parameterizeFeatureFlags = {
                enableUrlEncoding: true
            };
            const encodedslug = getCategorySlug(mockChildEncoded, mockMap, parameterizeFeatureFlags);
            expect(encodedslug).toBe('/bikes/road-bikes');
            expect(mockParent.Slug).toBe('/bikes');
        });
        it('Should uri encode', () => {
            // @ts-ignore
            const mockCategory = {
                Name: 'Pavement and path bikes'
            };
            const mockCategoryEncoded = { ...mockCategory };
            const slug = getCategorySlug(mockCategory, {});
            expect(slug).toBe('/pavement-and-path-bikes');
            const parameterizeFeatureFlags = {
                enableUrlEncoding: true
            };
            const encodedslug = getCategorySlug(mockCategoryEncoded, {}, parameterizeFeatureFlags);
            expect(encodedslug).toBe('/pavement-and-path-bikes');
        });
        it('Should not doubleuri encode', () => {
            // @ts-ignore
            const mockParent = {
                Name: 'Racing Bikes',
                RecordId: 1,
                ParentCategory: 0
            };
            // @ts-ignore
            const mockChild = {
                Name: 'Road Bikes',
                RecordId: 2,
                ParentCategory: 1
            };
            const mockChildEncoded = { ...mockChild };
            const mockMap = {
                1: mockParent,
                2: mockChild
            };
            const mockMapEncoded = JSON.parse(JSON.stringify(mockMap));
            const slug = getCategorySlug(mockChild, mockMap);
            expect(slug).toBe('/racing-bikes/road-bikes');
            const parameterizeFeatureFlags = {
                enableUrlEncoding: true
            };
            const encodedslug = getCategorySlug(mockChildEncoded, mockMapEncoded, parameterizeFeatureFlags);
            expect(encodedslug).toBe('/racing-bikes/road-bikes');
        });
    });
});
//# sourceMappingURL=category-url-builder.test.js.map