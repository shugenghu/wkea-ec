{"version":3,"file":"parameterize-encode.test.js","sourceRoot":"","sources":["../../../../../src/utilities/Url-builder/__tests__/parameterize-encode.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\nimport { parameterize } from '../parameterize';\nimport { IParameterizeFeatureFlags } from '@msdyn365-commerce/core'\n\ndescribe('parameterize', () => {\n    let parameterizeFeatureFlags:IParameterizeFeatureFlags;\n    beforeAll(()=>{\n        parameterizeFeatureFlags = {\n            enableUrlEncoding: true\n        }\n    })\n    it('Should replace whitespace', () => {\n        expect(parameterize('hello world', undefined, parameterizeFeatureFlags)).toBe('hello-world');\n    });\n    it('Should replace whitespace at the beginning and end of a string', () => {\n        expect(parameterize(' at the beginning', undefined, parameterizeFeatureFlags)).toBe('at-the-beginning');\n        expect(parameterize('at the end ', undefined, parameterizeFeatureFlags)).toBe('at-the-end');\n        expect(parameterize('front and back', undefined, parameterizeFeatureFlags)).toBe('front-and-back');\n    });\n    it('should only assign one seperator for multiple whitespace', () => {\n        expect(parameterize('hello  world', undefined, parameterizeFeatureFlags)).toBe('hello-world');\n    });\n    it('Should replace special characters with a single seperator', () => {\n        expect(parameterize('hello&world', undefined, parameterizeFeatureFlags)).toBe('hello-world');\n    });\n    it('Should replace special characters with a single seperator when surrounded by whitespace', () => {\n        expect(parameterize('hello & world', undefined, parameterizeFeatureFlags)).toBe('hello-world');\n    });\n    it('Should replace special characters with a single seperator when there are multiple special characters', () => {\n        expect(parameterize('hello&*&world', undefined, parameterizeFeatureFlags)).toBe('hello-world');\n    });\n    it('Should not assign a separator for a trailing invalid character', () => {\n        expect(parameterize('boop&', undefined, parameterizeFeatureFlags)).toBe('boop');\n        expect(parameterize('boop !', undefined, parameterizeFeatureFlags)).toBe('boop');\n    });\n    it('Should not assign a separator for a leading invalid character', () => {\n        expect(parameterize('&boop', undefined, parameterizeFeatureFlags)).toBe('boop');\n        expect(parameterize('! boop', undefined, parameterizeFeatureFlags)).toBe('boop');\n    });\n    it('Should preserve underscore', () => {\n        expect(parameterize('hello_world', undefined, parameterizeFeatureFlags)).toBe('hello_world');\n    });\n    it('Should convert a string to lower case', () => {\n        expect(parameterize('Hello World', undefined, parameterizeFeatureFlags)).toBe('hello-world');\n    });\n});\n"]}