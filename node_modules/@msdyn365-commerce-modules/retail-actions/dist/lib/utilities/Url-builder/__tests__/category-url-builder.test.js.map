{"version":3,"file":"category-url-builder.test.js","sourceRoot":"","sources":["../../../../../src/utilities/Url-builder/__tests__/category-url-builder.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';\nimport 'jest';\nimport { getCategorySlug } from '..';\nimport { getCategoryUrl } from '../category-url-builder';\nimport { IActionContext, IRequestContext, IParameterizeFeatureFlags } from '@msdyn365-commerce/core';\n\ndescribe('Category Url Builder', () => {\n    describe('getCategoryUrl', () => {\n        it('Should return the correct Url', () => {\n            // @ts-ignore\n            const mockCategory: CategoryHierarchy = {\n                Name: 'Bikes',\n                RecordId: 1234\n            };\n            // @ts-ignore\n            const mockRequest: IRequestContext = {\n                features:{}\n            };\n            const url = getCategoryUrl(mockCategory, {requestContext:mockRequest} as IActionContext, {});\n            expect(url).toBe('/bikes/1234.c');\n        });\n    });\n    it('Should return the correct Url with sitepath', () => {\n        // @ts-ignore\n        const mockCategory: CategoryHierarchy = {\n            Name: 'Bikes',\n            RecordId: 1234\n        };\n        // @ts-ignore\n        const mockRequest: IRequestContext = {\n            sitePath: '/sports',\n            features:{}\n        };\n        // @ts-ignore\n        const mockActionContext: IActionContext = {\n            requestContext: mockRequest\n        };\n        const url = getCategoryUrl(mockCategory, mockActionContext, {});\n        expect(url).toBe('/sports/bikes/1234.c');\n    });\n    describe('getCategorySlug', () => {\n        it('Should return an empty string when category is invalid', () => {\n            // @ts-ignore\n            const slug = getCategorySlug({}, {});\n            expect(slug).toBe('');\n        });\n        it('Should assign a slug to the category', () => {\n            // @ts-ignore\n            const mockCategory: CategoryHierarchy = {\n                Name: 'Bikes',\n                ParentCategory: 0\n            };\n\n            const slug = getCategorySlug(mockCategory, {});\n\n            expect(slug).toBe('/bikes');\n            expect(mockCategory.Slug).toBe('/bikes');\n        });\n        it('Should assign the parent slug', () => {\n            // @ts-ignore\n            const mockParent: CategoryHierarchy = {\n                Name: 'Bikes',\n                RecordId: 1,\n                ParentCategory: 0\n            };\n\n            // @ts-ignore\n            const mockChild: CategoryHierarchy = {\n                Name: 'Road Bikes',\n                RecordId: 2,\n                ParentCategory: 1\n            };\n\n            const mockChildEncoded: CategoryHierarchy = {...mockChild};\n\n            const mockMap = {\n                1: mockParent,\n                2: mockChild\n            };\n            const slug = getCategorySlug(mockChild, mockMap);\n            expect(slug).toBe('/bikes/road-bikes');\n            const parameterizeFeatureFlags:IParameterizeFeatureFlags = {\n                enableUrlEncoding: true\n            }\n            const encodedslug = getCategorySlug(mockChildEncoded, mockMap, parameterizeFeatureFlags);\n            expect(encodedslug).toBe('/bikes/road-bikes');\n            expect(mockParent.Slug).toBe('/bikes');\n        });\n        it('Should uri encode', () => {\n            // @ts-ignore\n            const mockCategory: CategoryHierarchy = {\n                Name: 'Pavement and path bikes'\n            };\n            const mockCategoryEncoded:CategoryHierarchy = {...mockCategory}\n            const slug = getCategorySlug(mockCategory, {});\n            expect(slug).toBe('/pavement-and-path-bikes');\n            const parameterizeFeatureFlags:IParameterizeFeatureFlags = {\n                enableUrlEncoding: true\n            }\n            const encodedslug = getCategorySlug(mockCategoryEncoded, {}, parameterizeFeatureFlags);\n            expect(encodedslug).toBe('/pavement-and-path-bikes');\n        });\n        it('Should not doubleuri encode', () => {\n            // @ts-ignore\n            const mockParent: CategoryHierarchy = {\n                Name: 'Racing Bikes',\n                RecordId: 1,\n                ParentCategory: 0\n            };\n\n            // @ts-ignore\n            const mockChild: CategoryHierarchy = {\n                Name: 'Road Bikes',\n                RecordId: 2,\n                ParentCategory: 1\n            };\n            const mockChildEncoded: CategoryHierarchy = {...mockChild};\n            const mockMap = {\n                1: mockParent,\n                2: mockChild\n            };\n            const mockMapEncoded = JSON.parse(JSON.stringify(mockMap));\n            const slug = getCategorySlug(mockChild, mockMap);\n            expect(slug).toBe('/racing-bikes/road-bikes');\n            const parameterizeFeatureFlags:IParameterizeFeatureFlags = {\n                enableUrlEncoding: true\n            }\n            const encodedslug = getCategorySlug(mockChildEncoded, mockMapEncoded, parameterizeFeatureFlags);\n            expect(encodedslug).toBe('/racing-bikes/road-bikes');\n        });\n    });\n});\n"]}