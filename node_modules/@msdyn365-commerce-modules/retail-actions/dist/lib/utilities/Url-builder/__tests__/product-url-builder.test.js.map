{"version":3,"file":"product-url-builder.test.js","sourceRoot":"","sources":["../../../../../src/utilities/Url-builder/__tests__/product-url-builder.test.ts"],"names":[],"mappings":"AAGA,OAAO,MAAM,CAAC;AACd,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAC3D,OAAO,EAAE,sBAAsB,EAAmB,MAAM,yBAAyB,CAAC;AAElF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACjC,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACtC,MAAM,WAAW,GAAG,sBAAsB,EAAE,CAAC;YAC7C,aAAa;YACb,MAAM,WAAW,GAAkB;gBAC/B,IAAI,EAAE,cAAc;gBACpB,QAAQ,EAAE,GAAG;aAChB,CAAC;YACF,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YACxD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QACJ,EAAE,CAAC,2GAA2G,EAAE,GAAG,EAAE;YACjH,aAAa;YACb,MAAM,WAAW,GAAkB;gBAC/B,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,GAAG;aAChB,CAAC;YACF,aAAa;YACb,MAAM,YAAY,GAAsB;gBACpC,IAAI,EAAE,mBAAmB;aAC5B,CAAC;YACF,aAAa;YACb,MAAM,cAAc,GAAoB;gBACpC,aAAa;gBACb,QAAQ,EAAE,SAAS;aACtB,CAAC;YACF,aAAa;YACb,MAAM,WAAW,GAAmB;gBAChC,aAAa;gBACb,cAAc,EAAE,cAAc;aACjC,CAAC;YACF,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;YACtE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QACF,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YACzD,aAAa;YACb,MAAM,WAAW,GAAkB;gBAC/B,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,GAAG;aAChB,CAAC;YACF,MAAM,WAAW,GAAG,sBAAsB,EAAE,CAAC;YAE7C,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YACxD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACrD,aAAa;YACb,MAAM,WAAW,GAAkB;gBAC/B,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,GAAG;gBACb,eAAe,EAAE,GAAG;aACvB,CAAC;YACF,MAAM,WAAW,GAAG,sBAAsB,EAAE,CAAC;YAE7C,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YACxD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,kFAAkF,EAAE,GAAG,EAAE;YACxF,aAAa;YACb,MAAM,WAAW,GAAkB;gBAC/B,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,GAAG;aAChB,CAAC;YACF,aAAa;YACb,MAAM,YAAY,GAAsB;gBACpC,IAAI,EAAE,mBAAmB;aAC5B,CAAC;YACF,aAAa;YACb,MAAM,WAAW,GAAmB;gBAChC,aAAa;gBACb,cAAc,EAAC,EAAE;aACpB,CAAC;YACF,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;YACtE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';\nimport { SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport 'jest';\nimport { getProductUrlSync } from '../product-url-builder';\nimport { buildMockActionContext, IRequestContext } from '@msdyn365-commerce/core';\n\ndescribe('Product Url Builder', () => {\n    describe('getProductUrlSync', () => {\n        it('should URI encode product name', () => {\n            const mockContext = buildMockActionContext();\n            // @ts-ignore\n            const mockProduct: SimpleProduct = {\n                Name: 'Product Name',\n                RecordId: 123\n            };\n            const url = getProductUrlSync(mockProduct, mockContext);\n            expect(url).toBe('/product-name/123.p');\n        });\n       it('Should return a product url with categories and locale when passed a product and a category with sitepath', () => {\n           // @ts-ignore\n           const mockProduct: SimpleProduct = {\n               Name: 'Product',\n               RecordId: 123\n           };\n           // @ts-ignore\n           const mockCategory: CategoryHierarchy = {\n               Slug: '/bikes/road-bikes'\n           };\n           // @ts-ignore\n           const requestContext: IRequestContext = {\n               // @ts-ignore\n               sitePath: '/sports'\n           };\n           // @ts-ignore\n           const mockContext: IActionContext = {\n               // @ts-ignore\n               requestContext: requestContext\n           };\n           const url = getProductUrlSync(mockProduct, mockContext, mockCategory);\n           expect(url).toBe('/sports/bikes/road-bikes/product/123.p');\n       });\n        it('Should return a product url when passed a product', () => {\n            // @ts-ignore\n            const mockProduct: SimpleProduct = {\n                Name: 'Product',\n                RecordId: 123\n            };\n            const mockContext = buildMockActionContext();\n\n            const url = getProductUrlSync(mockProduct, mockContext);\n            expect(url).toBe('/product/123.p');\n        });\n        it('Should prioritize returning master product id', () => {\n            // @ts-ignore\n            const mockProduct: SimpleProduct = {\n                Name: 'Product',\n                RecordId: 123,\n                MasterProductId: 456\n            };\n            const mockContext = buildMockActionContext();\n\n            const url = getProductUrlSync(mockProduct, mockContext);\n            expect(url).toBe('/product/456.p');\n        });\n        it('Should return a product url with categories when passed a product and a category', () => {\n            // @ts-ignore\n            const mockProduct: SimpleProduct = {\n                Name: 'Product',\n                RecordId: 123\n            };\n            // @ts-ignore\n            const mockCategory: CategoryHierarchy = {\n                Slug: '/bikes/road-bikes'\n            };\n            // @ts-ignore\n            const mockContext: IActionContext = {\n                // @ts-ignore\n                requestContext:{}\n            };\n            const url = getProductUrlSync(mockProduct, mockContext, mockCategory);\n            expect(url).toBe('/bikes/road-bikes/product/123.p');\n        });\n    });\n});\n"]}