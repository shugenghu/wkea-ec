import 'jest';
import { parameterize } from '../parameterize';
describe('parameterize', () => {
    let parameterizeFeatureFlags;
    beforeAll(() => {
        parameterizeFeatureFlags = {
            enableUrlEncoding: true
        };
    });
    it('Should replace whitespace', () => {
        expect(parameterize('hello world', undefined, parameterizeFeatureFlags)).toBe('hello-world');
    });
    it('Should replace whitespace at the beginning and end of a string', () => {
        expect(parameterize(' at the beginning', undefined, parameterizeFeatureFlags)).toBe('at-the-beginning');
        expect(parameterize('at the end ', undefined, parameterizeFeatureFlags)).toBe('at-the-end');
        expect(parameterize('front and back', undefined, parameterizeFeatureFlags)).toBe('front-and-back');
    });
    it('should only assign one seperator for multiple whitespace', () => {
        expect(parameterize('hello  world', undefined, parameterizeFeatureFlags)).toBe('hello-world');
    });
    it('Should replace special characters with a single seperator', () => {
        expect(parameterize('hello&world', undefined, parameterizeFeatureFlags)).toBe('hello-world');
    });
    it('Should replace special characters with a single seperator when surrounded by whitespace', () => {
        expect(parameterize('hello & world', undefined, parameterizeFeatureFlags)).toBe('hello-world');
    });
    it('Should replace special characters with a single seperator when there are multiple special characters', () => {
        expect(parameterize('hello&*&world', undefined, parameterizeFeatureFlags)).toBe('hello-world');
    });
    it('Should not assign a separator for a trailing invalid character', () => {
        expect(parameterize('boop&', undefined, parameterizeFeatureFlags)).toBe('boop');
        expect(parameterize('boop !', undefined, parameterizeFeatureFlags)).toBe('boop');
    });
    it('Should not assign a separator for a leading invalid character', () => {
        expect(parameterize('&boop', undefined, parameterizeFeatureFlags)).toBe('boop');
        expect(parameterize('! boop', undefined, parameterizeFeatureFlags)).toBe('boop');
    });
    it('Should preserve underscore', () => {
        expect(parameterize('hello_world', undefined, parameterizeFeatureFlags)).toBe('hello_world');
    });
    it('Should convert a string to lower case', () => {
        expect(parameterize('Hello World', undefined, parameterizeFeatureFlags)).toBe('hello-world');
    });
});
//# sourceMappingURL=parameterize-encode.test.js.map