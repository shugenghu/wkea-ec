{"version":3,"file":"category-url-builder.js","sourceRoot":"","sources":["../../../../src/utilities/Url-builder/category-url-builder.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,2BAA2B,EAAE,UAAU,EAA6C,MAAM,yBAAyB,CAAC;AAC7H,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAM9C;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,QAA2B,EAAE,WAAyB,EAAE,wBAAmD;IACvI,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;QAC7B,mBAAmB;QACnB,OAAO,EAAE,CAAC;KACb;IACD,MAAM,YAAY,GAAG,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,wBAAwB,EAAE,QAAQ,CAAC,eAAe,CAAC,CAAC;IAChH,IAAI,CAAC,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,cAAc,KAAK,CAAC,EAAE;QAC3D,uBAAuB;QACvB,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,IAAI,YAAY,EAAE,CAAC;KACvD;SAAM,IAAI,QAAQ,CAAC,cAAc,EAAE;QAChC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,WAAW,EAAE,wBAAwB,CAAC,IAAI,YAAY,EAAE,CAAC;KACtJ;IAED,OAAO,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC;AAC/B,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,QAA2B,EAAE,GAAoB,EAAE,WAA0B;IACxG,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,GAAG,IAAI,WAAW,EAAE;QACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YAChB,MAAM,wBAAwB,GAA8B,GAAG,CAAC,cAAc,CAAA,CAAC,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAA,CAAC,CAAA,EAAE,CAAC;YACpH,QAAQ,CAAC,IAAI,GAAG,eAAe,CAAC,QAAQ,EAAE,WAAW,EAAE,wBAAwB,CAAC,CAAC;SACpF;QACD,QAAQ,CAAC,GAAG,GAAG,UAAU,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;KAC5D;IACD,OAAO,QAAQ,CAAC,GAAG,CAAC;AACxB,CAAC","sourcesContent":["import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';\nimport { getParameterizeFeatureFlags, getUrlSync, IActionContext, IParameterizeFeatureFlags } from '@msdyn365-commerce/core';\nimport { parameterize } from './parameterize';\n\ninterface ICategoryMap {\n    [RecordId: number]: CategoryHierarchy;\n}\n\n/**\n * Builds slugs for category\n */\nexport function getCategorySlug(category: CategoryHierarchy, categoryMap: ICategoryMap, parameterizeFeatureFlags?:IParameterizeFeatureFlags): string {\n    if (!category || !category.Name) {\n        // invalid category\n        return '';\n    }\n    const categoryName = parameterize(category.Name, undefined, parameterizeFeatureFlags, category.NeutralizedName);\n    if (!category.ParentCategory || category.ParentCategory === 0) {\n        // base case assign url\n        category.Slug = category.Slug || `/${categoryName}`;\n    } else if (category.ParentCategory) {\n        category.Slug = category.Slug || `${getCategorySlug(categoryMap[category.ParentCategory], categoryMap, parameterizeFeatureFlags)}/${categoryName}`;\n    }\n\n    return category.Slug || '';\n}\n\n/**\n * Gets Url for category hierarchy. Returns string and adds url to Url property of category hierarchy\n * @param category Category to generate URL for\n * @param categoryMap Dictionary of all categories\n */\nexport function getCategoryUrl(category: CategoryHierarchy, ctx?: IActionContext, categoryMap?: ICategoryMap): string | undefined {\n    if (!category.Url && ctx && categoryMap) {\n        if (!category.Slug) {\n            const parameterizeFeatureFlags: IParameterizeFeatureFlags = ctx.requestContext? getParameterizeFeatureFlags(ctx):{};\n            category.Slug = getCategorySlug(category, categoryMap, parameterizeFeatureFlags);\n        }\n        category.Url = getUrlSync('category', ctx, { category });\n    }\n    return category.Url;\n}\n"]}