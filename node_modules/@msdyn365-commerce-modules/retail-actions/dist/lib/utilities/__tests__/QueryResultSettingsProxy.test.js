import 'jest';
import { QueryResultSettingsProxy } from '../QueryResultSettingsProxy';
import { buildMockRequest } from '@msdyn365-commerce/core';
describe('QueryResultSettingsProxy', () => {
    it('Should return correct default data', () => {
        const target = QueryResultSettingsProxy.getDefault();
        expect(target).toBeDefined();
        expect(target.QueryResultSettings).toBeDefined();
        expect(target.QueryResultSettings.Paging).toEqual({});
        expect(target.QueryResultSettings.Sorting).toEqual({});
        expect(target.cacheKeyHint).toEqual('top-undefined|skip-undefined|sortBy-undefined');
    });
    it('Should return correct query settings for inputData', () => {
        let mockRequest = buildMockRequest({ query: { top: '25', skip: '2' } });
        const inputData = {
            requestContext: mockRequest,
            config: { itemsPerPage: 50 }
        };
        const target = QueryResultSettingsProxy.fromInputData(inputData);
        expect(target).toBeDefined();
        expect(target.QueryResultSettings).toBeDefined();
        expect(target.QueryResultSettings.Paging).toBeDefined();
        expect(target.QueryResultSettings.Paging.Top).toEqual(25);
        expect(target.QueryResultSettings.Paging.Skip).toEqual(2);
        expect(target.QueryResultSettings.Sorting).toEqual({});
        expect(target.cacheKeyHint).toEqual('top-25|skip-2|sortBy-undefined');
    });
    it('Should return correct query settings for inputData with sorting info', () => {
        const mockRequest = buildMockRequest({ query: { top: '25', skip: '2' } });
        const mockSortingCriteria = { Columns: [{ ColumnName: 'SortByTestColumn', IsDescending: false }] };
        const inputData = {
            requestContext: mockRequest,
            config: { itemsPerPage: 50, sortingCriteria: mockSortingCriteria }
        };
        const target = QueryResultSettingsProxy.fromInputData(inputData);
        expect(target).toBeDefined();
        expect(target.QueryResultSettings).toBeDefined();
        expect(target.QueryResultSettings.Paging).toBeDefined();
        expect(target.QueryResultSettings.Paging.Top).toEqual(25);
        expect(target.QueryResultSettings.Paging.Skip).toEqual(2);
        expect(target.QueryResultSettings.Sorting).toBeDefined();
        expect(target.QueryResultSettings.Sorting.Columns).toBeDefined();
        expect(target.QueryResultSettings.Sorting.Columns.length).toEqual(1);
        expect(target.QueryResultSettings.Sorting.Columns[0]).toEqual({ ColumnName: 'SortByTestColumn', IsDescending: false });
        expect(target.cacheKeyHint).toEqual('top-25|skip-2|sortBy-SortByTestColumn--asc');
    });
    it('Should return correct query settings for inputData with descending sorting info', () => {
        const mockRequest = buildMockRequest({ query: { top: '25', skip: '2' } });
        const mockSortingCriteria = { Columns: [{ ColumnName: 'SortByTestColumn', IsDescending: true }] };
        const inputData = {
            requestContext: mockRequest,
            config: { itemsPerPage: 50, sortingCriteria: mockSortingCriteria }
        };
        const target = QueryResultSettingsProxy.fromInputData(inputData);
        expect(target).toBeDefined();
        expect(target.QueryResultSettings).toBeDefined();
        expect(target.QueryResultSettings.Paging).toBeDefined();
        expect(target.QueryResultSettings.Paging.Top).toEqual(25);
        expect(target.QueryResultSettings.Paging.Skip).toEqual(2);
        expect(target.QueryResultSettings.Sorting).toBeDefined();
        expect(target.QueryResultSettings.Sorting.Columns).toBeDefined();
        expect(target.QueryResultSettings.Sorting.Columns.length).toEqual(1);
        expect(target.QueryResultSettings.Sorting.Columns[0]).toEqual({ ColumnName: 'SortByTestColumn', IsDescending: true });
        expect(target.cacheKeyHint).toEqual('top-25|skip-2|sortBy-SortByTestColumn--desc');
    });
    it('Should return correct query settings for inputData with multiple sorting info', () => {
        const mockRequest = buildMockRequest({ query: { top: '25', skip: '2' } });
        const mockSortingCriteria = { Columns: [
                { ColumnName: 'SortByTestColumn', IsDescending: true },
                { ColumnName: 'AnotherSortingColumn', IsDescending: false }
            ] };
        const inputData = {
            requestContext: mockRequest,
            config: { itemsPerPage: 50, sortingCriteria: mockSortingCriteria }
        };
        const target = QueryResultSettingsProxy.fromInputData(inputData);
        expect(target).toBeDefined();
        expect(target.QueryResultSettings).toBeDefined();
        expect(target.QueryResultSettings.Paging).toBeDefined();
        expect(target.QueryResultSettings.Paging.Top).toEqual(25);
        expect(target.QueryResultSettings.Paging.Skip).toEqual(2);
        expect(target.QueryResultSettings.Sorting).toBeDefined();
        expect(target.QueryResultSettings.Sorting.Columns).toBeDefined();
        expect(target.QueryResultSettings.Sorting.Columns.length).toEqual(2);
        expect(target.cacheKeyHint).toEqual('top-25|skip-2|sortBy-SortByTestColumn--desc,AnotherSortingColumn--asc');
    });
    it('Should return correct query settings for inputData missing config', () => {
        let mockRequest = buildMockRequest({ query: { top: '25', skip: '2' } });
        const inputData = {
            requestContext: mockRequest
        };
        const target = QueryResultSettingsProxy.fromInputData(inputData);
        expect(target).toBeDefined();
        expect(target.QueryResultSettings).toBeDefined();
        expect(target.QueryResultSettings.Paging).toBeDefined();
        expect(target.QueryResultSettings.Paging.Top).toEqual(25);
        expect(target.QueryResultSettings.Paging.Skip).toEqual(2);
        expect(target.QueryResultSettings.Sorting).toEqual({});
        expect(target.cacheKeyHint).toEqual('top-25|skip-2|sortBy-undefined');
    });
    it('Should return correct query settings for moduleData', () => {
        let mockRequest = buildMockRequest({ query: { top: '25', skip: '2' } });
        const target = QueryResultSettingsProxy.fromModuleData(mockRequest, { itemsPerPage: 50 });
        expect(target).toBeDefined();
        expect(target.QueryResultSettings).toBeDefined();
        expect(target.QueryResultSettings.Paging).toBeDefined();
        expect(target.QueryResultSettings.Paging.Top).toEqual(25);
        expect(target.QueryResultSettings.Paging.Skip).toEqual(2);
        expect(target.QueryResultSettings.Sorting).toEqual({});
        expect(target.cacheKeyHint).toEqual('top-25|skip-2|sortBy-undefined');
    });
});
//# sourceMappingURL=QueryResultSettingsProxy.test.js.map