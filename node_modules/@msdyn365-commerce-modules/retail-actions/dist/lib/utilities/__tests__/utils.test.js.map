{"version":3,"file":"utils.test.js","sourceRoot":"","sources":["../../../../src/utilities/__tests__/utils.test.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,CAAC;AACd,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAEvC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACnB,MAAM,MAAM,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC9D,MAAM,MAAM,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAEjE,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAChC,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAChC,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;QACxD,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrC,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACzB,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,KAAuB,EAAE,EAAE;gBACvE,IAAI,KAAK,KAAK,IAAI,EAAE;oBAChB,OAAO,WAAW,CAAC;iBACtB;gBACD,OAAO,gBAAgB,CAAC;YAC5B,CAAC,EAAC,CAAC,CAAC;QACJ,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAC5C,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","sourcesContent":["import 'jest';\nimport { generateKey } from '../utils';\n\ndescribe('utils', () => {\n    const input1 = ['hello', false, 'world', 'there', 1234, null];\n    const input2 = ['foo', 'bar', 456, null, 'baz', undefined, true];\n\n    it('can generate unique keys', () => {\n        const result1 = generateKey(input1);\n        const result2 = generateKey(input2);\n        expect(result1).not.toEqual(result2);\n    });\n\n    it('can use custom separator', () => {\n        const result1 = generateKey(input1, { separator: '!' });\n        const result2 = generateKey(input2);\n        expect(result1).not.toEqual(result2);\n        expect(result1).toMatchSnapshot();\n        expect(result2).toMatchSnapshot();\n    });\n\n    it('can user replacer', () => {\n        const result1 = generateKey(input2);\n        const result2 = generateKey(input2, { handler: (input: null | undefined) => {\n            if (input === null) {\n                return 'I_AM_NULL';\n            }\n            return 'I_AM_UNDEFINED';\n        }});\n        expect(result1).not.toEqual(result2);\n        expect(result2).toContain('I_AM_NULL');\n        expect(result2).toContain('I_AM_UNDEFINED');\n        expect(result2).toMatchSnapshot();\n    })\n});\n"]}