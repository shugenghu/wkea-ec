{"version":3,"file":"product-inventory-utils.test.js","sourceRoot":"","sources":["../../../../src/utilities/__tests__/product-inventory-utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { buildHydratedMockActionContext, IRequestContext, buildMockRequest} from '@msdyn365-commerce/core';\nimport { ProductWarehouseInventoryAvailability } from '@msdyn365-commerce/retail-proxy';\nimport 'jest';\nimport { mapProductInventoryInformation } from '../product-inventory-utils';\n\n describe('Product inventory utils', () =>{\n    it('Enable stock check is disabled', () =>{\n        const app = {config: {inventoryLevel:'totalAvailable', enableStockCheck:false, inventoryRanges:'all'}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'In stock', 'AVAIL');\n       \n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toEqual(0);\n     });\n     it('Total available in stock', () =>{\n        const app = {config: {inventoryLevel:'totalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'In stock', 'AVAIL');\n       \n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        expect(target[0].IsProductAvailable).toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(1);\n     });\n     it('Total available low stock', () =>{\n        const app = {config: {inventoryLevel:'totalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'Low stock', 'LOS');\n\n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        expect(target[0].IsProductAvailable).toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(1);\n        expect(target[0].StockLevelLabel).toEqual('Low stock'); \n     });\n     it('Total available out of stock', () =>{\n        const app = {config: {inventoryLevel:'totalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'Out of stock', 'OOS');\n\n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        // even when inventory is 1 it should be not available as inventory code is OOS\n        expect(target[0].IsProductAvailable).not.toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(0);\n        expect(target[0].StockLevelLabel).toEqual('Out of stock'); \n     });\n     it('Total available out of stock and inventory is 0', () =>{\n      const app = {config: {inventoryLevel:'totalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n      const mockRequest: IRequestContext = buildMockRequest({app: app});\n      const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n      const inventoryLabel='item is out of stock';\n      const productMock = getMockWarehouseInventory(0, 2, inventoryLabel, 'OOS');\n\n      const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n      expect(target).not.toBeUndefined();\n      expect(target.length).toBeGreaterThan(0);\n      // even when inventory is 1 it should be not available as inventory code is OOS\n      expect(target[0].IsProductAvailable).not.toBeTruthy();\n      expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(0);\n      expect(target[0].StockLevelLabel).toEqual(inventoryLabel); \n     });\n     it('Total available out of stock and inventory is negative', () =>{\n      const app = {config: {inventoryLevel:'totalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n      const mockRequest: IRequestContext = buildMockRequest({app: app});\n      const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n      const inventoryLabel='item is out of stock';\n      const productMock = getMockWarehouseInventory(-1, 2, inventoryLabel, 'OOS');\n\n      const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n      expect(target).not.toBeUndefined();\n      expect(target.length).toBeGreaterThan(0);\n      // even when inventory is 1 it should be not available as inventory code is OOS\n      expect(target[0].IsProductAvailable).not.toBeTruthy();\n      expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(0);\n      expect(target[0].StockLevelLabel).toEqual(inventoryLabel); \n     });\n     it('Physical available in stock', () =>{\n        const app = {config: {inventoryLevel:'physicalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'In stock', 'AVAIL');\n       \n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        expect(target[0].IsProductAvailable).toBeTruthy();\n        // should be 2 as physical available is 2\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(2);\n        expect(target[0].StockLevelLabel).toEqual('In stock'); \n     });\n     it('Physical available low stock', () =>{\n        const app = {config: {inventoryLevel:'physicalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'Low stock', 'LOS');\n\n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        expect(target[0].IsProductAvailable).toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(2);\n        expect(target[0].StockLevelLabel).toEqual('Low stock'); \n     });\n     it('Physical available out of stock', () =>{\n        const app = {config: {inventoryLevel:'physicalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'Out of stock', 'OOS');\n\n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        // even when inventory is 2 it should be not available as inventory code is OOS\n        expect(target[0].IsProductAvailable).not.toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(0);\n        expect(target[0].StockLevelLabel).toEqual('Out of stock'); \n     });\n     it('Physical available out of stock and inventory is 0', () =>{\n      const app = {config: {inventoryLevel:'physicalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n      const mockRequest: IRequestContext = buildMockRequest({app: app});\n      const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n      const inventoryLabel = 'item is out of stock';\n      const productMock = getMockWarehouseInventory(1,0, inventoryLabel, 'OOS');\n\n      const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n      expect(target).not.toBeUndefined();\n      expect(target.length).toBeGreaterThan(0);\n      // even when inventory is 2 it should be not available as inventory code is OOS\n      expect(target[0].IsProductAvailable).not.toBeTruthy();\n      expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(0);\n      expect(target[0].StockLevelLabel).toEqual(inventoryLabel); \n      });\n    it('Physical available out of stock and inventory is negative', () =>{\n      const app = {config: {inventoryLevel:'physicalAvailable', enableStockCheck:true, inventoryRanges:'all'}} \n      const mockRequest: IRequestContext = buildMockRequest({app: app});\n      const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n      const inventoryLabel = 'item is out of stock';\n      const productMock = getMockWarehouseInventory(1,-1, inventoryLabel, 'OOS');\n\n      const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n      expect(target).not.toBeUndefined();\n      expect(target.length).toBeGreaterThan(0);\n      // even when inventory is 2 it should be not available as inventory code is OOS\n      expect(target[0].IsProductAvailable).not.toBeTruthy();\n      expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(0);\n      expect(target[0].StockLevelLabel).toEqual(inventoryLabel); \n      });\n     it('Threshold (0) enabled and product is in stock', () =>{\n        const app = {config: {inventoryLevel:'inventoryThreshold', enableStockCheck:true, inventoryRanges:'all', outOfStockThreshold:0}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'In stock', 'AVAIL');\n    \n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        expect(target[0].IsProductAvailable).toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(1);\n     });\n     it('Threshold (50) enabled and product is in stock as product inventory is 65', () =>{\n        const app = {config: {inventoryLevel:'inventoryThreshold', enableStockCheck:true, inventoryRanges:'all', outOfStockThreshold:50}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(65,2, 'In stock', 'AVAIL');\n    \n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        expect(target[0].IsProductAvailable).toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(15);\n     });\n     it('Threshold (10) out of stock as product inventory is 1', () =>{\n        const app = {config: {inventoryLevel:'inventoryThreshold', enableStockCheck:true, inventoryRanges:'all', outOfStockThreshold:10}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(1,2, 'In stock', 'AVAIL');\n    \n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        expect(target[0].IsProductAvailable).not.toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(0);\n     });\n     it('Threshold (0) out of stock as product inventory is 0', () =>{\n        const app = {config: {inventoryLevel:'inventoryThreshold', enableStockCheck:true, inventoryRanges:'all', outOfStockThreshold:0}} \n        const mockRequest: IRequestContext = buildMockRequest({app: app});\n        const mockActionContext = buildHydratedMockActionContext({requestContext: mockRequest});\n        const productMock = getMockWarehouseInventory(0,2, 'In stock', 'AVAIL');\n    \n        debugger;\n        const target = mapProductInventoryInformation(mockActionContext, productMock);\n\n        expect(target).not.toBeUndefined();\n        expect(target.length).toBeGreaterThan(0);\n        expect(target[0].IsProductAvailable).not.toBeTruthy();\n        expect(target[0].ProductAvailableQuantity.AvailableQuantity).toEqual(0);\n     });\n });\n\n export const getMockWarehouseInventory = (totalAvailable: number, physicalAvailable:number ,invLabel: string, invCode: string): ProductWarehouseInventoryAvailability[] =>{\n    let productWarehouseInventoryMock: ProductWarehouseInventoryAvailability = {\n        InventLocationId: '123',\n        ProductId: 1,\n        TotalAvailable: totalAvailable,\n        PhysicalAvailable: physicalAvailable,\n        TotalAvailableInventoryLevelLabel:invLabel,\n        TotalAvailableInventoryLevelCode: invCode,\n        PhysicalAvailableInventoryLevelCode:invCode,\n        PhysicalAvailableInventoryLevelLabel:invLabel\n    };\n\n     return [productWarehouseInventoryMock];\n }"]}