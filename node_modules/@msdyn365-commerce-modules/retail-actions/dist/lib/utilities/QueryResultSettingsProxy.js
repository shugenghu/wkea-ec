/**
 * Wrapper for query result settings, which guarantees some properties that are optional in the real subject
 * and includes some common utilities for data actions
 */
export class QueryResultSettingsProxy {
    /**
     * private constructor, expect instances to be created with the factory method
     */
    constructor(queryResultSettings) {
        this.queryResultSettings = queryResultSettings;
    }
    get QueryResultSettings() {
        return this.queryResultSettings;
    }
    /**
     * Gets the hints for the cache key based on query result settings
     */
    get cacheKeyHint() {
        // the factory method guarantees values are defined
        const topHint = `top-${this.queryResultSettings.Paging.Top}`;
        const skipHint = `skip-${this.queryResultSettings.Paging.Skip}`;
        const sortingHintData = (this.queryResultSettings.Sorting.Columns || []).map((column) => {
            return `${column.ColumnName}--${column.IsDescending && 'desc' || 'asc'}`;
        }).join(',') || undefined;
        const sortingHint = `sortBy-${sortingHintData}`;
        return `${topHint}|${skipHint}|${sortingHint}`;
    }
    /**
     * Factory method for data actions
     * @param inputData input data
     */
    static fromInputData(inputData) {
        const { requestContext, config } = inputData;
        return QueryResultSettingsProxy.fromModuleData(requestContext, config);
    }
    /**
     * Factory method for modules
     * @param requestContext requestContext
     * @param config module config from props
     */
    static fromModuleData(requestContext, config) {
        const sortingCriteria = config && config.sortingCriteria || undefined;
        const query = requestContext && requestContext.query;
        const top = query && query.top || undefined;
        const skip = query && query.skip || undefined;
        const queryResultSettings = {
            Paging: {
                Skip: (skip && Number(skip) || 0),
                Top: (top && Number(top) || config?.itemsPerPage || 50)
            },
            Sorting: sortingCriteria || {}
        };
        return new QueryResultSettingsProxy(queryResultSettings);
    }
    /**
     * Factory method
     */
    static getDefault() {
        return new QueryResultSettingsProxy({ Paging: {}, Sorting: {} });
    }
}
//# sourceMappingURL=QueryResultSettingsProxy.js.map