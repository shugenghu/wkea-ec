{"version":3,"file":"add-address.js","sourceRoot":"","sources":["../../src/add-address.ts"],"names":[],"mappings":"AAAA,OAAO,EACQ,0BAA0B,EAExC,MAAM,yBAAyB,CAAC;AAEjC,OAAO,EACH,eAAe,EAAE,WAAW,EAC/B,MAAM,yEAAyE,CAAC;AACjF,OAAO,WAAW,EAAE,EAAE,gBAAgB,EAAE,MAAM,gBAAgB,CAAC;AAS/D;;EAEE;AACF,MAAM,OAAO,sBAAsB;IAI/B,YAAY,OAAgB,EAAE,iBAA0B;QAKjD,gBAAW,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC;QACjC,uBAAkB,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC;QACxC,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAN3C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CAKJ;AAED;;;EAGE;AACF,MAAM,CAAC,MAAM,4BAA4B,GAAG,CACxC,SAAuE,EAChD,EAAE;IACrB,IAAI,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE;QACnD,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;KAC/E;IAED,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC,IAAI,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAE7D,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;KAC7E;IAED,OAAO,IAAI,sBAAsB,CAAC,OAAO,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAC9C,KAA8B,EAC9B,GAAmB,EACnB,gBAAoE;IAEpE,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IAC7C,MAAM,aAAa,GAAG,IAAI,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;IAC9F,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;IAEvD,IAAI,CAAC,QAAQ,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAClD;IAED,MAAM,WAAW,GAAG,gBAAgB,CAAC,EAAE,GAAG,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;IAC/D,MAAM,eAAe,GAAG,MAAM,WAAW,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC;IAE/E,IAAI,CAAC,eAAe,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAClD;IAED,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE,eAAe,CAAC,CAAC;IAE5E,OAAO,eAAe,CAAC,SAAS,IAAI,EAAE,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,QAAkB,EAAE,OAAgB;IAClE,QAAQ,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC;IACrD,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,OAAO,QAAQ,CAAC;AACpB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,KAA8B,EAAE,GAAmB;IACtF,OAAO,4BAA4B,CAAC,KAAK,EAAE,GAAG,EAAE,iBAAiB,CAAC,CAAC;AACvE,CAAC;AAED;;;;;EAKE;AACF,eAAe,0BAA0B,CAAY;IACjD,EAAE,EAAE,uDAAuD;IAC3D,MAAM,EAAsB,gBAAgB;IAC5C,KAAK,EAAuD,4BAA6B;IACzF,SAAS,EAAE,KAAK;CACnB,CAAC,CAAC","sourcesContent":["import {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny,\n    ICreateActionContext, IGeneric\n} from '@msdyn365-commerce/core';\nimport { Address, Customer } from '@msdyn365-commerce/retail-proxy';\nimport {\n    createReadAsync, updateAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';\nimport getCustomer, { GetCustomerInput } from './get-customer';\n\nexport interface IAddressManagementData {\n    address: Address;\n}\nexport interface IAddressManagementInput extends IActionInput {\n    address: Address;\n    userAccountNumber?: string;\n}\n/**\n* The input class for the addAddress data action\n*/\nexport class AddressManagementInput implements IAddressManagementInput {\n    public address: Address;\n    public userAccountNumber?: string;\n\n    constructor(address: Address, userAccountNumber?: string) {\n        this.userAccountNumber = userAccountNumber;\n        this.address = address;\n    }\n\n    public getCacheKey = () => 'AddAddress';\n    public getCacheObjectType = () => 'AddAddress';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n* The createInput method for the addAddress data action\n* @param inputData The input data passed to the createInput method\n*/\nexport const createAddressManagementInput = (\n    inputData: ICreateActionContext<IGeneric<IAny>, IAddressManagementData>\n): IAddressManagementInput => {\n        if (inputData.requestContext.user.isAuthenticated) {\n        throw new Error('User is not authenticated. Cannot call UpdateAddress API');\n    }\n\n    const { address } = inputData.data || { address: undefined };\n\n    if (!address) {\n        throw new Error('address is not provided. Cannot call UpdateAddress API');\n    }\n\n    return new AddressManagementInput(address);\n};\n\nexport async function doAddressManagementOperation(\n    input: IAddressManagementInput,\n    ctx: IActionContext,\n    operationHandler: (customer: Customer, address: Address) => Customer\n): Promise<Address[]> {\n    const { userAccountNumber, address } = input;\n    const customerInput = new GetCustomerInput(ctx.requestContext.apiSettings, userAccountNumber);\n    const customer = await getCustomer(customerInput, ctx);\n\n    if (!customer) {\n        throw new Error('Not able to create customer');\n    }\n\n    const newCustomer = operationHandler({ ...customer }, address);\n    const updatedCustomer = await updateAsync({ callerContext: ctx }, newCustomer);\n\n    if (!updatedCustomer) {\n        throw new Error('Not able to update customer');\n    }\n\n    ctx.update(createReadAsync(updatedCustomer.AccountNumber), updatedCustomer);\n\n    return updatedCustomer.Addresses || [];\n}\n\nexport function addAddressHandler(customer: Customer, address: Address): Customer {\n    customer.Addresses = [...(customer.Addresses || [])];\n    customer.Addresses.push(address);\n    return customer;\n}\n\nexport async function addAddressAction(input: IAddressManagementInput, ctx: IActionContext): Promise<Address[]> {\n    return doAddressManagementOperation(input, ctx, addAddressHandler);\n}\n\n/**\n* The addAddress data action\n* Calls the read RetailServer API to get information about a customer\n* Adds the passed address information to the retireved customer, and\n* then updates that customer via the update RetailServer API.\n*/\nexport default createObservableDataAction<Address[]>({\n    id: '@msdyn365-commerce-modules/retail-actions/add-address',\n    action: <IAction<Address[]>>addAddressAction,\n    input: <(args: ICreateActionContext) => IActionInput>(<IAny>createAddressManagementInput),\n    isBatched: false\n});"]}