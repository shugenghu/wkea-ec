{"version":3,"file":"get-delivery-options-for-cartlines.js","sourceRoot":"","sources":["../../src/get-delivery-options-for-cartlines.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,0BAA0B,EAAqG,MAAM,yBAAyB,CAAC;AACnL,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAE/D,OAAO,EAAE,uBAAuB,EAAE,MAAM,wEAAwE,CAAC;AACjH,OAAO,EAAE,aAAa,GAAG,MAAM,SAAS,CAAC;AACzC,OAAO,EAAC,uBAAuB,EAAE,2BAA2B,EAAC,MAAM,SAAS,CAAC;AAE7E;;GAEG;AACH,MAAM,OAAO,sCAAsC;IAG/C,YAAY,WAAiC;QAItC,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,oCAAoC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1F,uBAAkB,GAAG,GAAG,EAAE,CAAC,oCAAoC,CAAC;QAChE,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAL9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAED,MAAM,WAAW,GAAG,CAAC,SAA+C,EAAE,EAAE;IACpE,OAAO,IAAI,sCAAsC,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC5F,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,kCAAkC,CAAC,KAA6C,EAAE,GAAmB;IACvH,mCAAmC;IACnC,IAAI,CAAC,KAAK,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;KAC/F;IACD,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,CAAC;IAC1C,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;IAC5B,MAAM,QAAQ,GAAG,MAAM,2BAA2B,CAAC,IAAI,uBAAuB,EAAE,EAAE,GAAG,CAAC,CAAC;IAEvF,IAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5C,OAAO,CAAC,GAAG,CAAC,0GAA0G,CAAC,CAAC;QACxH,GAAG,CAAC,KAAK,CAAC,0GAA0G,CAAC,CAAC;QACtH,OAAiC,EAAE,CAAC;KACvC;IAED,OAAO,uBAAuB,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC;SACnH,IAAI,CAAC,MAAM,CAAC,EAAE;QACX,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACtB,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzB,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,4DAA4D,CAAC,CAAC;QAClF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;AACX,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,8EAA8E;IAClF,MAAM,EAAuC,kCAAkC;IAC/E,KAAK,EAAE,WAAW;CACrB,CAAC,CAAC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { ProductAvailableQuantity, ProductDeliveryOptions } from '@msdyn365-commerce/retail-proxy';\nimport { getDeliveryOptionsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { buildCacheKey, } from './index';\nimport {ActiveCartProductsInput, getActiveCartProductsAction} from './index';\n\n/**\n * Input class for delivery options for items in cart\n */\nexport class ProductDeliveryOptionsForCartLineItems implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`ActiveCartLineItemsDeliveryOptions`, this.apiSettings);\n    public getCacheObjectType = () => 'ActiveCartLineItemsDeliveryOptions';\n    public dataCacheType = (): CacheType => 'request';\n}\n\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>) => {\n    return new ProductDeliveryOptionsForCartLineItems(inputData.requestContext.apiSettings);\n};\n\n/**\n * Calls the Retail API to get the delivery options for items in the cart\n */\nexport async function getDeliveryOptionsForCartLineItems(input: ProductDeliveryOptionsForCartLineItems, ctx: IActionContext): Promise<ProductDeliveryOptions[]> {\n    // If no input is provided fail out\n    if (!input) {\n        throw new Error('[getDeliveryOptionsForCartLineItems]No valid Input was provided, failing');\n    }\n    const cartState = await getCartState(ctx);\n    const cart = cartState.cart;\n    const products = await getActiveCartProductsAction(new ActiveCartProductsInput(), ctx);\n\n    if(!cart || !products || products.length === 0) {\n        console.log('[getDeliveryOptionsForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');\n        ctx.trace('[getDeliveryOptionsForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');\n        return <ProductDeliveryOptions[]>[];\n    }\n\n    return getDeliveryOptionsAsync({ callerContext: ctx, queryResultSettings: {} }, products.map(x => x.RecordId), {}, null)\n        .then(result => {\n            return result;\n        }).catch((error: Error) => {\n            ctx.trace(error.message);\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[getDeliveryOptionsForCartLineItems]Error executing action`);\n            throw new Error('[getDeliveryOptionsForCartLineItems]Error executing action');\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-delivery-options-for-cartlines',\n    action: <IAction<ProductAvailableQuantity[]>>getDeliveryOptionsForCartLineItems,\n    input: createInput\n});\n"]}