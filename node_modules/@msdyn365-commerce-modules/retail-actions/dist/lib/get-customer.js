import { createObservableDataAction } from '@msdyn365-commerce/core';
import { readAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';
import { buildCacheKey } from './utilities/utils';
/**
 * Input class for get customer data action
 */
export class GetCustomerInput {
    constructor(apiSettings, accountNumber) {
        this.getCacheKey = () => buildCacheKey(`Customer-${this.customerAccountNumber}`, this.apiSettings);
        this.getCacheObjectType = () => 'Customer';
        this.dataCacheType = () => 'request';
        this.customerAccountNumber = accountNumber;
        this.apiSettings = apiSettings;
    }
}
/**
 * Creates the input required to make the retail api call
 */
const createInput = (inputData) => {
    const { user, apiSettings } = inputData.requestContext;
    if (!user.token || !user.isAuthenticated) {
        throw new Error('[getCustomer][createInput]: User is not Authenticated.');
    }
    return new GetCustomerInput(apiSettings);
};
const getCustomerAction = async (input, ctx) => {
    if (input && ctx.requestContext.user.isAuthenticated) {
        // TO-DO- Need to clean up this code once SDK releases new proxy that handles null.
        return readAsync({ callerContext: ctx }, input.customerAccountNumber || '').then(response => {
            return Array.isArray(response) ? response[0] : response;
        });
    }
    ctx.trace('[getCustomer]Invalid input passed to action');
    return {};
};
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-customer',
    action: getCustomerAction,
    input: createInput
});
//# sourceMappingURL=get-customer.js.map