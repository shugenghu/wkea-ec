import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getRefinersByTextAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
import { parseSearchData } from './utilities/input-data-parser';
import { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';
import { buildCacheKey } from './utilities/utils';
/**
 * Action Input class for the getRefinersByText data action
 */
export class RefinersByTextInput {
    constructor(searchText, catalogId, queryResultSettingsProxy, apiSettings) {
        this.getCacheKey = () => buildCacheKey(`${this.searchText}|${this.catalogId}|${this.queryResultSettingsProxy.cacheKeyHint}`, this.apiSettings);
        this.getCacheObjectType = () => 'ProductRefiner';
        this.dataCacheType = () => 'request';
        this.catalogId = catalogId;
        this.searchText = searchText;
        this.queryResultSettingsProxy = queryResultSettingsProxy;
        this.apiSettings = apiSettings;
    }
}
/**
 * Creates the input required to make the retail api call
 */
export const createRefinersByTextInput = (inputData) => {
    const searchInputData = parseSearchData(inputData);
    const catalogId = inputData.config ? Number(inputData.config.catalogId) : 0;
    return new RefinersByTextInput(searchInputData.q, Number.isNaN(catalogId) ? 0 : catalogId, QueryResultSettingsProxy.fromInputData(inputData), inputData.requestContext.apiSettings);
};
/**
 * Calls the Retail API and returns all refiners by text
 */
export async function getRefinersByTextAction(input, ctx) {
    return getRefinersByTextAsync({ callerContext: ctx, queryResultSettings: input.queryResultSettingsProxy.QueryResultSettings }, input.catalogId, input.searchText);
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-refiners-by-text',
    action: getRefinersByTextAction,
    input: createRefinersByTextInput
});
//# sourceMappingURL=get-refiners-by-text.js.map