{"version":3,"file":"get-refiners-by-text.js","sourceRoot":"","sources":["../../src/get-refiners-by-text.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,0BAA0B,EAAwD,MAAM,yBAAyB,CAAC;AAG3H,OAAO,EAAE,sBAAsB,EAAE,MAAM,wEAAwE,CAAC;AAChH,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD;;GAEG;AACH,MAAM,OAAO,mBAAmB;IAM5B,YACI,UAAkB,EAClB,SAAiB,EACjB,wBAAkD,EAClD,WAAiC;QAO9B,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1I,uBAAkB,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC;QAC5C,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAR9C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;QACzD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,SAA+C,EAAgB,EAAE;IACvG,MAAM,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;IACnD,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5E,OAAO,IAAI,mBAAmB,CAC1B,eAAe,CAAC,CAAC,EACjB,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EACvC,wBAAwB,CAAC,aAAa,CAAC,SAAS,CAAC,EACjD,SAAS,CAAC,cAAc,CAAC,WAAW,CACvC,CAAC;AACN,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,KAA0B,EAAE,GAAmB;IACzF,OAAO,sBAAsB,CACzB,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAE,KAAK,CAAC,wBAAwB,CAAC,mBAAmB,EAAE,EAC/F,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,UAAU,CAAC,CAAC;AAC1B,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,gEAAgE;IACpE,MAAM,EAA6B,uBAAuB;IAC1D,KAAK,EAAE,yBAAyB;CACnC,CAAC,CAAC","sourcesContent":["import { CacheType, IAction, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductRefiner } from '@msdyn365-commerce/retail-proxy';\n\nimport { getRefinersByTextAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { parseSearchData } from './utilities/input-data-parser';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\nimport { buildCacheKey } from './utilities/utils';\n\n/**\n * Action Input class for the getRefinersByText data action\n */\nexport class RefinersByTextInput implements IActionInput {\n    public readonly catalogId: number;\n    public readonly searchText: string;\n    public readonly queryResultSettingsProxy: QueryResultSettingsProxy;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(\n        searchText: string,\n        catalogId: number,\n        queryResultSettingsProxy: QueryResultSettingsProxy,\n        apiSettings: ICommerceApiSettings) {\n        this.catalogId = catalogId;\n        this.searchText = searchText;\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`${this.searchText}|${this.catalogId}|${this.queryResultSettingsProxy.cacheKeyHint}`, this.apiSettings);\n    public getCacheObjectType = () => 'ProductRefiner';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nexport const createRefinersByTextInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    const searchInputData = parseSearchData(inputData);\n    const catalogId = inputData.config ? Number(inputData.config.catalogId) : 0;\n\n    return new RefinersByTextInput(\n        searchInputData.q,\n        Number.isNaN(catalogId) ? 0 : catalogId,\n        QueryResultSettingsProxy.fromInputData(inputData),\n        inputData.requestContext.apiSettings\n    );\n};\n\n/**\n * Calls the Retail API and returns all refiners by text\n */\nexport async function getRefinersByTextAction(input: RefinersByTextInput, ctx: IActionContext): Promise<ProductRefiner[]> {\n    return getRefinersByTextAsync(\n        { callerContext: ctx, queryResultSettings: input.queryResultSettingsProxy.QueryResultSettings },\n        input.catalogId,\n        input.searchText);\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-refiners-by-text',\n    action: <IAction<ProductRefiner[]>>getRefinersByTextAction,\n    input: createRefinersByTextInput\n});\n"]}