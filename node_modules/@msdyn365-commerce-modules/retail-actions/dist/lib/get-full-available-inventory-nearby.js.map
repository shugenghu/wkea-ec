{"version":3,"file":"get-full-available-inventory-nearby.js","sourceRoot":"","sources":["../../src/get-full-available-inventory-nearby.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,0BAA0B,EAA+E,MAAM,yBAAyB,CAAC;AAE7J,OAAO,EAAE,8BAA8B,EAAE,kBAAkB,EAAE,MAAM,wEAAwE,CAAC;AAC5I,OAAO,EAAE,6BAA6B,EAAE,MAAM,wEAAwE,CAAC;AAGvH,OAAO,EAAE,8BAA8B,EAAE,MAAM,qCAAqC,CAAC;AAErF;;GAEG;AACH,MAAM,OAAO,oCAAoC;IAQ9C,YAAY,UAAmB,EAAE,SAAkB,EAAE,UAAmB,EAAE,OAAgB,EAAE,kBAA2B,EAAE,eAAyB;QAS3I,gBAAW,GAAG,GAAG,EAAE,CAAC,2CAA2C,CAAC;QAChE,uBAAkB,GAAG,GAAG,EAAE,CAAC,sCAAsC,CAAC;QAClE,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAV3C,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;QACtB,IAAI,CAAC,iBAAiB,GAAG,kBAAkB,CAAC;QAC5C,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;IAC1C,CAAC;CAKH;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,0CAA0C,GAAG,CAAC,SAA+C,EAAwC,EAAE;IAChJ,OAAO,IAAI,oCAAoC,EAAE,CAAC;AACtD,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,qCAAqC,CACvD,KAA2C,EAC3C,GAAmB;IAEnB,wFAAwF;IACxF,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;QAClB,OAAO,SAAS,CAAC;KACpB;IAED,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;QACzG,0FAA0F;QAC1F,OAAO,EAAE,CAAC;KACb;IAED,MAAM,UAAU,GAAe;QAC3B,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,SAAS,EAAE,KAAK,CAAC,SAAS;QAC1B,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,IAAI,CAAC,CAAC,aAAa;KAChE,CAAC;IAEF,OAAO,6BAA6B,CAAC,EAAC,aAAa,EAAE,GAAG,EAAC,EAAE,EAAC,UAAU,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,oBAAoB,EAAC,KAAK,EAAE,+BAA+B,EAAE,IAAI,EAAC,CAAC;SACrL,IAAI,CAAC,KAAK,EAAE,2BAAiE,EAAE,EAAE;QAC9E,MAAM,2BAA2B,GAAG,8BAA8B,CAAC,GAAG,EAAE,2BAA2B,EAAE,uCAAuC,CAAC,CAAC;QAC9I,OAAO,8BAA8B,CAAC,EAAC,aAAa,EAAE,GAAG,EAAC,EAAE,UAAU,CAAC;aACtE,IAAI,CAAC,KAAK,EAAE,MAAyB,EAAE,EAAE;YACtC,yDAAyD;YACzD,MAAM,QAAQ,GAAG,IAAI,GAAG,EAA2B,CAAC;YACpD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACnB,IAAG,KAAK,CAAC,mBAAmB,EAAE;oBAC1B,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;iBAClD;YACL,CAAC,CAAC,CAAC;YACH,MAAM,uBAAuB,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE,2BAA2B,EAAE,QAAQ,EAAC,GAAG,CAAC,CAAC,CAAC;YACjI,OAAO,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAChD,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;YACpB,GAAG,CAAC,KAAK,CAAC,4EAA4E,CAAC,CAAC;YACxF,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACzB,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACnC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,4EAA4E,CAAC,CAAC;YAClG,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACpB,GAAG,CAAC,KAAK,CAAC,4HAA4H,CAAC,CAAC;QACxI,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzB,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,4HAA4H,CAAC,CAAC;QAClJ,OAAO,EAAE,CAAC;IACd,CAAC,CAAC,CAAC;AACP,CAAC;AAED;;;;;;GAMG;AACH,KAAK,UAAU,yBAAyB,CACpC,eAAgC,EAChC,2BAA2D,EAC3D,QAAsC,EACtC,GAAmB;IACf,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE;QACpD,OAAO,EAAE,mBAAmB,EAAE,SAAS,EAAE,CAAC;KAC7C;IAED,OAAO,kBAAkB,CAAC,EAAE,aAAa,EAAE,GAAG,EAAC,EAAE,eAAe,CAAC,aAAa,CAAC;SAC1E,IAAI,CAAC,CAAC,KAAiB,EAAE,EAAE;QACxB,MAAM,kBAAkB,GAAuB,EAAE,CAAC;QAClD,IAAG,2BAA2B;eAC3B,QAAQ,EAAE;YACL,2BAA2B,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAC1C,IAAG,OAAO,CAAC,gBAAgB,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,OAAO,CAAC,gBAAgB,KAAK,eAAe,CAAC,mBAAmB,EAAE;oBACvI,kBAAkB,CAAC,IAAI,CAAC,EAAC,iBAAiB,EAAC,OAAO,CAAC,wBAAwB,EAAE,iBAAiB,EAAC,CAAC,CAAC;iBACpG;YACT,CAAC,CAAC,CAAC;SACN;QAED,MAAM,YAAY,GAAwB;YACtC,eAAe,EAAE,eAAe;YAChC,kBAAkB,EAAE,kBAAkB;SACzC,CAAC;QAEF,IAAI,KAAK,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,EAAE;YACpC,OAAO,EAAE,mBAAmB,EAAE,YAAY,EAAE,UAAU,EAAE,KAAK,EAAE,2BAA2B,EAAE,2BAA2B,EAAE,CAAC;SAC7H;QAED,OAAO,EAAE,mBAAmB,EAAE,YAAY,EAAE,2BAA2B,EAAE,2BAA2B,EAAE,CAAC;IAC3G,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACpB,GAAG,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;QACrF,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzB,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;QAC/F,OAAO,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;AACf,CAAC;AAED;;GAEG;AACH,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,+EAA+E;IACnF,MAAM,EAAmD,qCAAqC;IAC9F,KAAK,EAAE,0CAA0C;CACpD,CAAC,CAAC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ItemAvailability, OrgUnitAvailability, OrgUnitLocation, ProductWarehouseInventoryInformation, SearchArea, StoreHours } from '@msdyn365-commerce/retail-proxy';\nimport { getOrgUnitLocationsByAreaAsync, getStoreHoursAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { getEstimatedAvailabilityAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { IFullOrgUnitAvailability } from './utilities/full-org-unit-availability';\nimport { IProductInventoryInformation } from './utilities/product-inventory-information';\nimport { mapProductInventoryInformation } from './utilities/product-inventory-utils';\n\n/**\n * Get selected variant action input class\n */\nexport class GetFullAvailableInventoryNearbyInput implements IActionInput {\n   public latitude?: number;\n   public longitude?: number;\n   public radius?: number;\n   public productId?: number;\n   public DistanceUnitValue?: number;\n   public IgnoreLocation?: boolean;\n\n   constructor(_productId?: number, _latitude?: number, _longitude?: number, _radius?: number, _DistanceUnitValue?: number, _IgnoreLocation?: boolean) {\n       this.productId = _productId;\n       this.latitude = _latitude;\n       this.longitude = _longitude;\n       this.radius = _radius;\n       this.DistanceUnitValue = _DistanceUnitValue;\n       this.IgnoreLocation = _IgnoreLocation;\n   }\n\n   public getCacheKey = () => `GetFullAvailableInventoryNearbyInputCache`;\n   public getCacheObjectType = () => 'GetFullAvailableInventoryNearbyInput';\n   public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * CreateInput method for the getSelectedVariant data action\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetFullAvailableInventoryNearbyInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetFullAvailableInventoryNearbyInput => {\n    return new GetFullAvailableInventoryNearbyInput();\n};\n\n/**\n * Action method for the getSelectedVariant data aciton\n * @param input The action input class\n * @param ctx The action context\n */\nexport async function getFullAvailableInventoryNearbyAction(\n    input: GetFullAvailableInventoryNearbyInput,\n    ctx: IActionContext\n): Promise<IFullOrgUnitAvailability[] | undefined> {\n    // No valid product we want to return undefined so module knows there are no results yet\n    if (!input.productId) {\n        return undefined;\n    }\n\n    if (((!input.radius && input.radius !== 0) || !input.latitude || !input.longitude) && !input.IgnoreLocation) {\n        // No valid location we want to return empty array so module can show no locations message\n        return [];\n    }\n\n    const searchArea: SearchArea = {\n        Latitude: input.latitude,\n        Longitude: input.longitude,\n        Radius: input.radius,\n        DistanceUnitValue: input.DistanceUnitValue || 0 // 0 is miles\n    };\n\n    return getEstimatedAvailabilityAsync({callerContext: ctx}, {ProductIds: [input.productId], SearchArea: searchArea, DefaultWarehouseOnly:false, FilterByChannelFulfillmentGroup: true})\n    .then(async (productWarehouseInformation: ProductWarehouseInventoryInformation) => {\n        const productInventoryInformation = mapProductInventoryInformation(ctx, productWarehouseInformation?.ProductWarehouseInventoryAvailabilities);\n        return getOrgUnitLocationsByAreaAsync({callerContext: ctx}, searchArea)\n        .then(async (stores: OrgUnitLocation[]) => {\n            // Constructing a store mapping based on the InventoryId.\n            const storeMap = new Map<string, OrgUnitLocation>();\n            stores.forEach(store => {\n                if(store.InventoryLocationId) {\n                    storeMap.set(store.InventoryLocationId, store);\n                }\n            });\n            const availabilityPromiseList = stores.map(store => _getAvailabilityWithHours(store, productInventoryInformation, storeMap,ctx));\n            return Promise.all(availabilityPromiseList);\n        })\n        .catch((error: Error) => {\n            ctx.trace('[GetFullAvailableInventoryNearby] error getting Available Inventory Nearby');\n            ctx.trace(error.message);\n            ctx.telemetry.error(error.message);\n            ctx.telemetry.debug(`[GetFullAvailableInventoryNearby] error getting Available Inventory Nearby`);\n            return [];\n        });\n    })\n    .catch((error: Error) => {\n        ctx.trace('[GetFullAvailableInventoryNearby][getEstimatedAvailabilityAsync] error getting availability product warehouse information.');\n        ctx.trace(error.message);\n        ctx.telemetry.error(error.message);\n        ctx.telemetry.debug(`[GetFullAvailableInventoryNearby][getEstimatedAvailabilityAsync] error getting availability product warehouse information.`);\n        return [];\n    });\n}\n\n/**\n * Action method that obtains the store information along with store hours and product availability\n * @param orgUnitLocation The org unit location\n * @param productWarehouseInventoryInformation The product ware house information\n * @param storeMap a map that contains store information group by the inventory location id\n * @param ctx The action context\n */\nasync function _getAvailabilityWithHours(\n    orgUnitLocation: OrgUnitLocation,\n    productInventoryInformation: IProductInventoryInformation[],\n    storeMap: Map<string, OrgUnitLocation>,\n    ctx: IActionContext): Promise<IFullOrgUnitAvailability> {\n        if (!orgUnitLocation || !orgUnitLocation.OrgUnitNumber) {\n            return { OrgUnitAvailability: undefined };\n        }\n\n        return getStoreHoursAsync({ callerContext: ctx}, orgUnitLocation.OrgUnitNumber)\n            .then((hours: StoreHours) => {\n                const itemAvailabilities: ItemAvailability[] = [];\n                if(productInventoryInformation\n                && storeMap) {\n                        productInventoryInformation.forEach(element => {\n                            if(element.InventLocationId && storeMap.has(element.InventLocationId) && element.InventLocationId === orgUnitLocation.InventoryLocationId) {\n                                itemAvailabilities.push({AvailableQuantity:element.ProductAvailableQuantity?.AvailableQuantity});\n                            }\n                    });\n                }\n\n                const availability: OrgUnitAvailability = {\n                    OrgUnitLocation: orgUnitLocation,\n                    ItemAvailabilities: itemAvailabilities\n                };\n\n                if (hours && !(hours instanceof Error)) {\n                    return { OrgUnitAvailability: availability, StoreHours: hours, ProductInventoryInformation: productInventoryInformation };\n                }\n\n                return { OrgUnitAvailability: availability, ProductInventoryInformation: productInventoryInformation };\n            })\n            .catch((error: Error) => {\n                ctx.trace('[GetFullAvailableInventoryNearby] error getting availability with hours');\n                ctx.trace(error.message);\n                ctx.telemetry.exception(error);\n                ctx.telemetry.debug(`[GetFullAvailableInventoryNearby] error getting availability with hours`);\n                return { OrgUnitAvailability: {} };\n            });\n}\n\n/**\n * The complete getFullAvailableInventoryNearby data action\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-full-available-inventory-nearby',\n    action: <IAction<IFullOrgUnitAvailability[] | undefined>>getFullAvailableInventoryNearbyAction,\n    input: createGetFullAvailableInventoryNearbyInput\n});"]}