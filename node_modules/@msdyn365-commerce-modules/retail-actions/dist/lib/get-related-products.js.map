{"version":3,"file":"get-related-products.js","sourceRoot":"","sources":["../../src/get-related-products.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getRelatedProductsAsync, getRelationTypesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductRelationType, ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from './get-full-products';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\nimport { getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\n/**\n * GetRelatedProducts Input Action\n */\nexport class GetRelatedProductsInput implements IActionInput {\n    public readonly productId: number;\n    public readonly catalogId: number;\n    public readonly relationType: string;\n    public ProductDetailsCriteria: ProductDetailsCriteria;\n    public readonly queryResultSettingsProxy: QueryResultSettingsProxy;\n\n    constructor(\n        productId: number,\n        catalogId: number,\n        relationType: string,\n        queryResultSettingsProxy: QueryResultSettingsProxy,\n        criteria: ProductDetailsCriteria\n    ) {\n        this.productId = productId;\n        this.catalogId = catalogId;\n        this.relationType = relationType;\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.ProductDetailsCriteria = criteria;\n    }\n\n    public getCacheKey = () =>\n        `${this.productId}|${this.catalogId}|${this.relationType.toLowerCase()}|${this.queryResultSettingsProxy.cacheKeyHint}|${\n            this.ProductDetailsCriteria.getPrice\n        }`;\n    public getCacheObjectType = () => 'GetRelatedProducts';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * Creates the input required to make GetRelatedProducts retail api call\n */\nexport const createGetRelatedProductsInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    if (inputData && inputData.requestContext && inputData.config) {\n        const catalogId = inputData.requestContext.apiSettings.catalogId;\n        const relationType = inputData.config.relationType;\n\n        // @ts-ignore: URLTokens not properly types\n        let productId = inputData.requestContext.urlTokens ? Number(inputData.requestContext.urlTokens.recordId) : 0;\n        const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n        if (!relationType) {\n            throw new Error('Input relation type is invalid.');\n        }\n\n        // Query string may override the product id from url\n        if (inputData.requestContext.query && inputData.requestContext.query.productId) {\n            productId = Number(inputData.requestContext.query.productId);\n        }\n\n        if (Number.isNaN(productId) || productId <= 0) {\n            throw new Error('No valid product id available in url or query string.');\n        }\n\n        if (Number.isNaN(catalogId)) {\n            throw new Error('Failed to cast catalog id into a number.');\n        }\n\n        const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);\n        return new GetRelatedProductsInput(productId, catalogId, relationType, queryResultSettingsProxy, productDetailsCriteria);\n    }\n\n    throw new Error('Invalid input data or request context');\n};\n\nexport function searchProductRelationType(productRelationTypes: ProductRelationType[], _productRelationType: string): number | undefined {\n    let foundProductRelationTypeId;\n    _productRelationType = _productRelationType.toLowerCase();\n    productRelationTypes.forEach((productRelationType: ProductRelationType) => {\n        if (productRelationType.Name && productRelationType.Name.toLowerCase() === _productRelationType) {\n            return (foundProductRelationTypeId = productRelationType.RecordId);\n        }\n    });\n\n    return foundProductRelationTypeId;\n}\n\nasync function getRelatedProductsAction(input: GetRelatedProductsInput, ctx: IActionContext): Promise<FullProduct[]> {\n    const apiSettings = ctx.requestContext.apiSettings;\n    const querySettings = input.queryResultSettingsProxy.QueryResultSettings;\n\n    const productRelationTypes = await getRelationTypesAsync(\n        { callerContext: ctx, queryResultSettings: querySettings },\n        input.productId,\n        +apiSettings.channelId,\n        input.catalogId\n    );\n    if (!productRelationTypes) {\n        ctx.trace(`[getProductRelationType] Unable to get product relation types for product ${input.productId}`);\n        return <FullProduct[]>[];\n    }\n    const productRelationTypeId = searchProductRelationType(productRelationTypes, input.relationType);\n    if (!productRelationTypeId) {\n        ctx.trace(`[getRelatedProducts] Unable to find relation type ${input.relationType} for product ${input.productId}`);\n        return <FullProduct[]>[];\n    }\n\n    const productInputs = await getRelatedProductsAsync(\n        { callerContext: ctx, queryResultSettings: querySettings },\n        input.productId,\n        +apiSettings.channelId,\n        input.catalogId,\n        productRelationTypeId\n    )\n        .then(response => {\n            if (response && response.length) {\n                return response.map(\n                    (product: ProductSearchResult): FullProductInput => {\n                        return new FullProductInput(product.RecordId, apiSettings, input.ProductDetailsCriteria);\n                    }\n                );\n            }\n\n            ctx.trace('[getRelatedProductsAction] Invalid response from server');\n            return <FullProductInput[]>[];\n        })\n        .catch((error: Error) => {\n            ctx.trace(error.message);\n            ctx.trace(error.stack || '');\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[getRelatedProductsAction] Unable to Fetch Products.`);\n            ctx.trace(`[getRelatedProductsAction] Unable to Fetch Products.`);\n            return <FullProductInput[]>[];\n        });\n\n    if (productInputs.length > 0) {\n        return getFullProducts(productInputs, ctx);\n    } else {\n        return <FullProduct[]>[];\n    }\n}\n\n/**\n * The getRelatedProducts data action\n * Uses a productId URL Token and finds the relation types for said product\n * using the getRelationTypes RetailServer API, and then finds and retusn all products that\n * share that relation type via the getRelatedProducts RetailServer API\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-related-products',\n    action: <IAction<FullProduct[]>>getRelatedProductsAction,\n    input: createGetRelatedProductsInput\n});\n"]}