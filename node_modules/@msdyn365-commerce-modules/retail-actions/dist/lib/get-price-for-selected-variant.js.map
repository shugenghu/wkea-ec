{"version":3,"file":"get-price-for-selected-variant.js","sourceRoot":"","sources":["../../src/get-price-for-selected-variant.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductPrice, ProjectionDomain, SimpleProduct, AffiliationLoyaltyTier, CustomerAffiliation } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getActivePricesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { getSelectedProductIdFromActionInput, getSelectedVariant, SelectedVariantInput, getCustomer } from './index';\n\nimport * as semver from 'semver';\nimport { GetCustomerInput } from './get-customer';\n\n/**\n * Input class for the GetPriceForSelectedVariant Data Action\n */\nexport class PriceForSelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public selectedProduct: SimpleProduct | undefined;\n    public customerId?: string;\n\n    constructor(productId: number, channelId: number, selectedProduct?: SimpleProduct, customerId?: string) {\n        this.productId = productId;\n        this.channelId = channelId;\n        this.selectedProduct = selectedProduct;\n        this.customerId = customerId || '';\n    }\n\n    public getCacheKey = () => `PriceForSelectedVariant`;\n    public getCacheObjectType = () => 'Price';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * The createInput method for the GetPriceForSelectedVariantDataAction\n * @param inputData The input data for the createInput method\n */\nexport const createActivePriceForSelectedVariantInput = (inputData: ICreateActionContext<IGeneric<IAny>>): PriceForSelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new PriceForSelectedVariantInput(\n            +productId,\n            +inputData.requestContext.apiSettings.channelId,\n            undefined);\n    } else {\n        throw new Error('Unable to create PriceForSelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * The Action Method for the GetPriceForSelectedVariant Data Action\n * Pulls the currently selected variant from the cache using the getSelectedVariant data action, and gets it's current contextual price\n * via the getActivePrice RetailServer API\n */\nexport async function getPriceForSelectedVariantAction(\n    input: PriceForSelectedVariantInput,\n    ctx: IActionContext\n): Promise<ProductPrice | null> {\n    let affliations:AffiliationLoyaltyTier[] = [];\n    if(ctx.requestContext && ctx.requestContext.user && ctx.requestContext.user.isAuthenticated)\n    {\n        const customerInput = new GetCustomerInput(ctx.requestContext.apiSettings);\n        const customer = await getCustomer(customerInput, ctx);\n        if(customer && customer.CustomerAffiliations)\n        {\n            customer.CustomerAffiliations.forEach((affliation: CustomerAffiliation) => {\n                var aff:AffiliationLoyaltyTier = {AffiliationId:affliation.RetailAffiliationId, CustomerId: customer.AccountNumber}\n                affliations.push(aff);\n                \n            });\n        }\n    }\n    return Promise.resolve()\n        // @ts-ignore: Promise vs. ObservablePromise typing conflict\n        .then(() => {\n            const activeProduct: SimpleProduct | undefined = input.selectedProduct;\n\n            if (!activeProduct) {\n                const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);\n\n                return getSelectedVariant(selectedVariantInput, ctx);\n            }\n\n            return activeProduct;\n        })\n        .then<ProductPrice | null>((productResult: SimpleProduct | null) => {\n            const projectDomain: ProjectionDomain = { ChannelId: +ctx.requestContext.apiSettings.channelId, CatalogId: +ctx.requestContext.apiSettings.catalogId };\n\n            const activeProduct: SimpleProduct | undefined = <SimpleProduct | undefined>productResult;           \n            if (activeProduct) {\n                \n                return getActivePricesAsync(\n                    { callerContext: ctx, queryResultSettings: {} },\n                    projectDomain,\n                    [activeProduct.RecordId],\n                    new Date(),\n                    input.customerId || null,\n                    affliations,\n                    true\n                    // @ts-ignore\n                ).then(response => {\n                    if(response && response.length > 0) {\n                        const productPrice = response[0];\n\n                        // If RS Verison < 9.16.0 (aka 10.0.6), customer contextual price won't be\n                        // included so instead just use AdjustedPrice\n                        if (semver.lt(ctx.requestContext.apiSettings.retailServerProxyVersion, '9.16.0')) {\n                            productPrice.CustomerContextualPrice = productPrice.AdjustedPrice;\n                        }\n\n                        return productPrice;\n                    }\n                    throw new Error('[getPriceForSelectedVariantAction]Invalid response recieved from calculateProductPrice');\n                });\n            }\n\n            return null;\n        })\n        .catch((error: Error) => {\n            ctx.trace(error.message);\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[getPriceForSelectedVariantAction]Error executing action`);\n            throw new Error('[getPriceForSelectedVariantAction]Error executing action');\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-price-for-selected-variant',\n    action: <IAction<ProductPrice | null>>getPriceForSelectedVariantAction,\n    input: createActivePriceForSelectedVariantInput\n});\n"]}