import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getDeliveryOptionsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
import { getSelectedProductIdFromActionInput, getSelectedVariant, SelectedVariantInput } from './index';
/**
 * Input class for the GetDeliveryOptionsForSelectedVariant Data Action
 */
export class GetDeliveryOptionsForSelectedVariantInput {
    constructor(productId, channelId, selectedProduct, customerId) {
        this.getCacheKey = () => `DeliveryOptionsForSelectedVariant`;
        this.getCacheObjectType = () => 'DeliveryOptions';
        this.dataCacheType = () => 'none';
        this.productId = productId;
        this.channelId = channelId;
        this.selectedProduct = selectedProduct;
        this.customerId = customerId || '';
    }
}
/**
 * The createInput method for the GetDeliveryOptionsForSelectedVariant Data Action
 * @param inputData The input data for the createInput method
 */
export const createDeliveryOptionsForSelectedVariantInput = (inputData) => {
    const productId = getSelectedProductIdFromActionInput(inputData);
    if (productId) {
        return new GetDeliveryOptionsForSelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId, undefined);
    }
    else {
        throw new Error('Unable to create PriceForSelectedVariantInput, no productId found on module config or query');
    }
};
/**
 * The Action Method for the GetDeliveryOptionsForSelectedVariant Data Action
 * Pulls the currently selected variant from the cache using the getSelectedVariant data action, and gets it's supported delivery options
 * via the getDeliveryOptionsAsync RetailServer API
 */
export async function getDeliveryOptionsForSelectedVariantAction(input, ctx) {
    return Promise.resolve()
        // @ts-ignore: Promise vs. ObservablePromise typing conflict
        .then(() => {
        const activeProduct = input.selectedProduct;
        if (!activeProduct) {
            const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);
            return getSelectedVariant(selectedVariantInput, ctx);
        }
        return activeProduct;
    })
        .then((productResult) => {
        const activeProduct = productResult;
        if (activeProduct) {
            return getDeliveryOptionsAsync({ callerContext: ctx, queryResultSettings: {} }, [activeProduct.RecordId], {}, null).then(response => {
                if (response && response.length > 0) {
                    return response[0];
                }
                return undefined;
            });
        }
        return undefined;
    })
        .catch((error) => {
        ctx.trace(error.message);
        ctx.telemetry.exception(error);
        ctx.telemetry.debug(`[getDeliveryOptionsForSelectedVariantAction]Error executing action`);
        throw new Error('[getDeliveryOptionsForSelectedVariantAction]Error executing action');
    });
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-delivery-options-for-selected-variant',
    action: getDeliveryOptionsForSelectedVariantAction,
    input: createDeliveryOptionsForSelectedVariantInput
});
//# sourceMappingURL=get-delivery-options-for-selected-variant.js.map