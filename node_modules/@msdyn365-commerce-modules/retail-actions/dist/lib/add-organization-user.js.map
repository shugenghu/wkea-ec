{"version":3,"file":"add-organization-user.js","sourceRoot":"","sources":["../../src/add-organization-user.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,0BAA0B,EAA+E,MAAM,yBAAyB,CAAC;AAE7J,OAAO,EAAE,eAAe,EAAE,MAAM,gFAAgF,CAAC;AACjH,OAAO,EAAE,8BAA8B,EAAE,MAAM,oFAAoF,CAAC;AACpI;;GAEG;AACH,MAAM,OAAO,wBAAwB;IAGjC,YAAY,OAA4B;QAIjC,gBAAW,GAAG,GAAG,EAAE,CAAC,qBAAqB,CAAC;QAC1C,uBAAkB,GAAG,GAAG,EAAE,CAAC,qBAAqB,CAAC;QACjD,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAL3C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;IACxB,CAAC;CAKJ;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,SAA+C,EAAE,OAA4B,EAAgB,EAAE;IAC1I,MAAM,EAAE,cAAc,EAAE,GAAG,SAAS,CAAC;IAErC,sCAAsC;IACtC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE;QACtC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC7C;IAED,OAAO,IAAI,wBAAwB,CAAC,OAAO,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,KAA+B,EAAE,GAAmB;IAC1F,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IAEvB,OAAO,eAAe,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC;SACzC,IAAI,CAAC,CAAC,eAAgC,EAAE,EAAE;QACvC,gEAAgE;QAChE,IAAI,CAAC,iBAAiB,GAAG,eAAe,CAAC,iBAAiB,CAAC;QAE3D,OAAO,8BAA8B,CAAC,EAAE,aAAa,EAAE,GAAG,EAAC,EAAE,IAAI,CAAC;aAC7D,IAAI,CAAC,OAAO,CAAC,EAAE;YACZ,OAAO,OAAO,CAAC;QACnB,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,EAAE;YACR,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;YAC5F,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,qEAAqE,CAAC,CAAC;QAC3F,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;IAC3F,CAAC,CAAC,CAAC;AACX,CAAC;AAED;;;;;;GAMG;AACH,eAAe,0BAA0B,CAAsB;IAC3D,EAAE,EAAE,iEAAiE;IACrE,MAAM,EAAgC,mBAAmB;IACzD,KAAK,EAAuD,8BAA+B;CAC9F,CAAC,CAAC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { BusinessPartner, BusinessPartnerUser } from '@msdyn365-commerce/retail-proxy';\nimport { getCurrentAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';\nimport { createBusinessPartnerUserAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnerUsersDataActions.g';\n/**\n * Input class for addOrganizationUser data action\n */\nexport class AddOrganizationUserInput implements IActionInput {\n    public user: BusinessPartnerUser;\n\n    constructor(newUser: BusinessPartnerUser) {\n        this.user = newUser;\n    }\n\n    public getCacheKey = () => `AddOrganizationUser`;\n    public getCacheObjectType = () => 'AddOrganizationUser';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * Input class for addOrganizationUser data action\n */\nexport const createAddOrganizationUserInput = (inputData: ICreateActionContext<IGeneric<IAny>>, newUser: BusinessPartnerUser): IActionInput => {\n    const { requestContext } = inputData;\n\n    // Check if the user is authenticated.\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('User is not logged in.');\n    }\n\n    return new AddOrganizationUserInput(newUser);\n};\n\n/**\n * The addOrganizationUser data action\n * Calls getCurrent() to get a businessPartnerId from the user requesting the action.\n * It then maps the newUsers' businessPartnerId to the same as the above user.\n * Calls the createBusinessPartner to then create a new entitiy in the database with the\n * information passed into through newUser\n */\nexport async function addOrganizationUser(input: AddOrganizationUserInput, ctx: IActionContext): Promise<BusinessPartnerUser> {\n    const { user } = input;\n\n    return getCurrentAsync({ callerContext: ctx })\n        .then((businessPartner: BusinessPartner) => {\n            // set the new accounts businessPartnerId from the admin account\n            user.BusinessPartnerId = businessPartner.BusinessPartnerId;\n\n            return createBusinessPartnerUserAsync({ callerContext: ctx}, user)\n                .then(newUser => {\n                    return newUser;\n                })\n                .catch(() => {\n                    ctx.telemetry.debug('[add-organization-user] Unable to create BusinessPartnerUser account');\n                    throw new Error('[add-organization-user] Unable to create BusinessPartnerUser account');\n                });\n        })\n        .catch(error => {\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug('[add-organization-user] Unable to get BusinessPartner Admin account');\n            throw new Error('[add-organization-user] Unable to get BusinessPartner Admin account');\n        });\n}\n\n/**\n * The addOrganizationUser data action\n * Calls the read RetailServer API to get the BusinessPartnerId from the admin\n * account and adds that businessPartner to the recieved input (new User)/\n * We then send this new User through the RetailServer API so that the database\n * is updated.\n */\nexport default createObservableDataAction<BusinessPartnerUser>({\n    id: '@msdyn365-commerce-modules/retail-actions/add-organization-user',\n    action: <IAction<BusinessPartnerUser>>addOrganizationUser,\n    input: <(args: ICreateActionContext) => IActionInput>(<IAny>createAddOrganizationUserInput),\n});"]}