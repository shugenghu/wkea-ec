{"version":3,"file":"get-product-availabilities-for-selected-variant.js","sourceRoot":"","sources":["../../src/get-product-availabilities-for-selected-variant.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductWarehouseInventoryAvailability } from '@msdyn365-commerce/retail-proxy';\nimport { getEstimatedAvailabilityAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductAvailableQuantity } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { getSelectedProductIdFromActionInput, getSelectedVariant, IProductInventoryInformation, SelectedVariantInput } from './index';\nimport { mapProductInventoryInformation } from './utilities/product-inventory-utils';\n\n/**\n * Input class for the getProductAvailabilitiesForSelectedVariant Data Action\n */\nexport class ProductAvailabilitiesForSelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n\n    constructor(productId: number | string, channelId: number) {\n        this.productId = typeof productId === 'string' ? +productId : productId;\n        this.channelId = channelId;\n    }\n\n    public getCacheKey = () => `ProductAvailabilitiesForSelectedVariant`;\n    public getCacheObjectType = () => 'ProductAvailabilities';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * createInput method for the getProductAvailabilitiesForSelectedVariant data action.\n * @param inputData The input data passed to the createInput method\n */\nexport const createProductAvailabilitiesForSelectedVariantInput = (\n    inputData: ICreateActionContext<IGeneric<IAny>>\n): ProductAvailabilitiesForSelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new ProductAvailabilitiesForSelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId);\n    } else {\n        throw new Error('Unable to create ProductAvailabilitiesForSelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * The action method for the getProductAvailabilitiesForSelectedVariant data action\n */\nexport async function getProductAvailabilitiesForSelectedVariantAction(\n    input: ProductAvailabilitiesForSelectedVariantInput,\n    ctx: IActionContext\n): Promise<IProductInventoryInformation[] | undefined> {\n    const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);\n    return getSelectedVariant(selectedVariantInput, ctx)\n        .then(productResult => {\n            if (productResult) {\n                return getEstimatedAvailabilityAsync({ callerContext: ctx }, { ProductIds: [productResult.RecordId], DefaultWarehouseOnly: true}).then(response => {\n                    if(response && response.ProductWarehouseInventoryAvailabilities && response.ProductWarehouseInventoryAvailabilities.length) {\n                        return mapProductInventoryInformation(ctx, response.ProductWarehouseInventoryAvailabilities)\n                    }\n                    return undefined;\n                });\n            }\n\n            return undefined;\n        })\n        .catch((error: Error) => {\n            ctx.trace(error.message);\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[getPriceForSelectedVariantAction]Error executing action`);\n            throw new Error('[getPriceForSelectedVariantAction]Error executing action');\n        });\n}\n\n/**\n * The function that maps a ProductWareHouse object into a ProductAvailabilityQuantity\n */\nexport function mergeProductWarehouseToProductAvailabities(productsWarehouseInventory: ProductWarehouseInventoryAvailability[]): ProductAvailableQuantity[] {\n    let productAvailable: ProductAvailableQuantity[] = [];\n    if(productsWarehouseInventory && productsWarehouseInventory.length > 0) {\n        for(const product of productsWarehouseInventory) {\n            if(product.TotalAvailable !== undefined && product.ProductId !== undefined) {\n                productAvailable.push({ProductId: product.ProductId, AvailableQuantity: product.TotalAvailable});\n            }\n        }\n    }\n    return productAvailable;\n}\n\n\n/**\n * The complete getProductAvailabilitiesForSelectedVariant data action\n * Get the currently selected variant via the getSelectedVariant data action, and\n * then gets the availabilities for the variant via the getProductAvailabilities RetailServer API\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-product-availabilities-for-selected-variant',\n    action: <IAction<IProductInventoryInformation[] | null>>getProductAvailabilitiesForSelectedVariantAction,\n    input: createProductAvailabilitiesForSelectedVariantInput\n});\n"]}