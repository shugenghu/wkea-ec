{"version":3,"file":"generic-data-action.js","sourceRoot":"","sources":["../../src/generic-data-action.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,MAAM,OAAO,YAAY;IAKrB,YAAY,QAAgB,EAAE,MAAS,EAAE,eAAuB;QAMzD,gBAAW,GAAG,GAAG,EAAE,CAAC,WAAW,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC/C,uBAAkB,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACrD,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAP3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;CAKJ;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAI,KAAsB,EAAE,GAAmB;IACjF,OAAO,KAAK,CAAC,MAAM,CAAC;AACxB,CAAC","sourcesContent":["import { CacheType, IActionInput } from '@msdyn365-commerce/core';\nimport { IActionContext } from '@msdyn365-commerce/core';\n\n/**\n * Generic input type for use with generic data actions\n */\nexport class GenericInput<T = {}> implements IActionInput {\n    public result: T;\n    public cacheKey: string;\n    public cacheObjectType: string;\n\n    constructor(cacheKey: string, result: T, cacheObjectType: string) {\n        this.cacheKey = cacheKey;\n        this.cacheObjectType = cacheObjectType;\n        this.result = result;\n    }\n\n    public getCacheKey = () => `Generic-${this.cacheKey}`;\n    public getCacheObjectType = () => `${this.cacheObjectType}`;\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * Generic data action that is just used for passing data around the app\n *\n * Note that this doesn't actually expose a data action, its just a base action\n * that others can use to create a data action with their own input\n */\nexport async function getGenericAction<T>(input: GenericInput<T>, ctx: IActionContext): Promise<T> {\n    return input.result;\n}\n"]}