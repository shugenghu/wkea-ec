{"version":3,"file":"get-full-products-by-category.js","sourceRoot":"","sources":["../../src/get-full-products-by-category.ts"],"names":[],"mappings":"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","sourcesContent":["import { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy';\nimport { CurrentCategoryInput } from './get-current-category';\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from './get-full-products';\nimport getProductsByCategory, { ProductsByCategoryInput } from './get-products-by-category';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\nimport { buildCacheKey, getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\n/**\n * Product by category ID Input action\n */\nexport class FullProductsByCategoryInput implements IActionInput {\n    public categoryId?: number;\n    public categoryName?: string;\n    public catalogId: number;\n    public currentCategory: CurrentCategoryInput;\n    public ProductDetailsCriteria: ProductDetailsCriteria;\n    public queryResultSettingsProxy: QueryResultSettingsProxy;\n\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(\n        category: CurrentCategoryInput,\n        apiSettings: ICommerceApiSettings,\n        queryResultSettingsProxy: QueryResultSettingsProxy,\n        criteria: ProductDetailsCriteria\n    ) {\n        this.currentCategory = category;\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.apiSettings = apiSettings;\n        this.ProductDetailsCriteria = criteria;\n        this.catalogId = apiSettings.catalogId;\n    }\n\n    public getCacheKey = () =>\n        buildCacheKey(\n            `${this.currentCategory.getCacheKey()}|${this.queryResultSettingsProxy.cacheKeyHint}|${\n                this.ProductDetailsCriteria.getPrice\n            }`,\n            this.apiSettings);\n    public getCacheObjectType = () => 'Full-Products-From-Category-Search';\n    public dataCacheType = (): CacheType => 'application';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nexport const createGetFullProductsByCategoryInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    if (inputData && inputData.requestContext) {\n        const currentCategory = new CurrentCategoryInput(inputData.requestContext);\n        const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n        const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);\n        return new FullProductsByCategoryInput(\n            currentCategory,\n            inputData.requestContext.apiSettings,\n            queryResultSettingsProxy,\n            productDetailsCriteria,\n        );\n    }\n\n    throw new Error('Please specify categoryId query string in request.');\n};\n\n/**\n * Calls the get-products-by-category action and then call GetFullProducts data actoin to get detail products.\n */\nexport async function getFullProductsByCategoryAction(input: FullProductsByCategoryInput, ctx: IActionContext): Promise<FullProduct[]> {\n    if (!input || !input.currentCategory) {\n        ctx.trace('[getFullProductsByCategoryAction] Unable to find correct category input');\n        return [];\n    }\n\n    const { apiSettings } = ctx.requestContext;\n\n    const productsByCategoryInput = new ProductsByCategoryInput(\n        input.currentCategory,\n        ctx.requestContext.apiSettings,\n        input.queryResultSettingsProxy\n    );\n    // Get the product ids from search result\n    const productSearchResult = await getProductsByCategory(productsByCategoryInput, ctx);\n    const fullProductInputs: FullProductInput[] = [];\n    productSearchResult.forEach((searchResult: ProductSearchResult) => {\n        if (searchResult.RecordId !== undefined) {\n            fullProductInputs.push(new FullProductInput(searchResult.RecordId, apiSettings, input.ProductDetailsCriteria));\n        }\n    });\n\n    if (fullProductInputs.length > 0) {\n        return getFullProducts(fullProductInputs, ctx);\n    } else {\n        return <FullProduct[]>{};\n    }\n}\n\nexport default createObservableDataAction({\n    id: 'get-full-products-by-category',\n    action: <IAction<FullProduct[]>>getFullProductsByCategoryAction,\n    input: createGetFullProductsByCategoryInput\n});\n"]}