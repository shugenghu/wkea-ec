import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getCartState } from '@msdyn365-commerce/global-state';
import { issueLoyaltyCardAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import { getLoyaltyAction, GetLoyaltyCardInput } from './get-loyalty-card';
import { buildCacheKey } from './index';
/**
 *  Input class for the issueLoyalty data action
 */
export class IssueLoyaltyInput {
    constructor(apiSettings, userAccountNumber) {
        this.getCacheKey = () => buildCacheKey(`IssueLoyalty-${this.userAccountNumber}`, this.apiSettings);
        this.getCacheObjectType = () => 'GetIssueLoyalty';
        this.dataCacheType = () => 'request';
        this.userAccountNumber = userAccountNumber;
        this.apiSettings = apiSettings;
    }
}
/**
 * createInput method for the issueLoyalty method
 * @param inputData The input data passed to the createInput method
 */
export const createIssueLoyaltyInput = (inputData) => {
    const { requestContext } = inputData;
    if (!requestContext.user.isAuthenticated) {
        throw new Error('Unable to create issue loyalty input.  User is not authenticated.');
    }
    return new IssueLoyaltyInput(inputData.requestContext.apiSettings);
};
/**
 * The action method for the issueLoyalty data action
 * @param input The action input
 * @param ctx The action context
 */
export async function issueLoyaltyAction(input, ctx) {
    const promises = [getCartState(ctx), _getLoyalty(input, ctx)];
    return Promise.all(promises)
        .then((result) => {
        const cartState = result[0];
        const card = result[1];
        if (card && card.CardNumber) {
            updateCart(cartState, card);
            return card;
        }
        //@ts-ignore
        //TO-DO: Remove after SDK bug fix https://msdyneng.visualstudio.com/FinOps/_workitems/edit/473891
        return issueLoyaltyCardAsync({ callerContext: ctx }, { CustomerAccount: input.userAccountNumber || null })
            .then((issuedCard) => {
            updateCart(cartState, issuedCard);
            return issuedCard;
        })
            //@ts-ignore
            .catch(error => {
            ctx.telemetry.exception(error);
            ctx.telemetry.debug('Issuing loyalty card failed');
            throw new Error('Issuing loyalty card failed');
        });
    })
        .catch((error) => {
        ctx.telemetry.exception(error);
        ctx.telemetry.debug('Unable to issue loyalty card');
        throw new Error('Unable to issue loyalty card');
    });
}
async function _getLoyalty(input, ctx) {
    const loyaltyCardInput = new GetLoyaltyCardInput(input.apiSettings);
    return getLoyaltyAction(loyaltyCardInput, ctx);
}
function updateCart(cartState, card) {
    cartState.updateLoyaltyCardId({ loyaltyCardNumber: card.CardNumber });
}
/**
 * The getLoyaltyCard data action
 * Returns the loyalty card belonging to the customer
 */
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/issue-loyalty',
    action: issueLoyaltyAction,
    input: createIssueLoyaltyInput
});
//# sourceMappingURL=issue-loyalty.js.map