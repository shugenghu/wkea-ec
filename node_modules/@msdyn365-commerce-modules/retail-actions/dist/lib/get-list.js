import { createObservableDataAction } from '@msdyn365-commerce/core';
import GetProducts, { ProductInput } from './get-simple-products';
/**
 * List Input action
 */
export class ListInput {
    constructor(documentId, title, description, shortDescription, backgroundColor, foregroundColor, images, items, productItems, itemsCount, itemsPerPage, skipCount) {
        this.shouldCacheOutput = () => true;
        this.getCacheObjectType = () => 'LIST';
        this.getCacheKey = () => `${this.DocumentId}-${this.ItemsCount}-${this.ItemsPerPage}-${this.SkipCount}`;
        this.DocumentId = documentId;
        this.Title = title;
        this.Description = description;
        this.ShortDescription = shortDescription;
        this.BackgroundColor = backgroundColor;
        this.ForegroundColor = foregroundColor;
        this.Images = images;
        this.Items = items;
        this.ProductItems = productItems;
        this.ItemsCount = itemsCount;
        this.ItemsPerPage = itemsPerPage;
        this.SkipCount = skipCount;
    }
}
/**
 * Calls to getSimpleProducts to get product array by ID's in list.
 */
export async function getListData(input, ctx) {
    ctx.trace(`List Title: ${input.Title}`);
    // @ts-ignore
    const { apiSettings } = ctx.requestContext;
    const sublists = [];
    const result = {
        Title: input.Title,
        Description: input.Description,
        ShortDescription: input.ShortDescription,
        BackgroundColor: input.BackgroundColor,
        ForegroundColor: input.ForegroundColor,
        Items: sublists,
        ItemsCount: input.ItemsCount
    };
    if (input && input.Items && input.Items.length) {
        // get all products
        let products = [];
        if (input.ProductItems && input.ProductItems.length) {
            const inputArray = input.ProductItems.map(item => new ProductInput(+item.RecordId, apiSettings));
            products = await GetProducts(inputArray, ctx);
        }
        // build map from recordId to product, which will be used later when build the output.
        const productMap = {};
        products.forEach(item => {
            if (item) {
                productMap[`${item.RecordId}`] = item;
            }
        });
        for (const listitem of input.Items) {
            if (isSublist(listitem)) {
                result.Items.push(listitem);
            }
            else {
                listitem.forEach(item => {
                    if (productMap[item.RecordId]) {
                        result.Items.push(productMap[item.RecordId]);
                    }
                });
            }
        }
    }
    return result;
}
/**
 * Check if an item is sublist.
 */
function isSublist(listItem) {
    return listItem.Images !== undefined;
}
/**
 * Get images.
 */
function getImages(images) {
    const resultImageList = [];
    if (!images) {
        return resultImageList;
    }
    images.forEach(item => {
        if (item && item.image && item.image.href) {
            // add image item
            const imageItem = {
                href: item.image.href,
                altText: item.image.altText,
                title: item.image.title,
                width: item.image.width,
                height: item.image.height
            };
            resultImageList.push(imageItem);
        }
    });
    return resultImageList;
}
/**
 * Get the url of sub list.
 */
function getSubListUrl(listName, sitePath) {
    if (!listName) {
        return '';
    }
    if (!sitePath) {
        return `/${listName}.l`;
    }
    // sitePath has a leading '/'
    return `${sitePath}/${listName}.l`;
}
/**
 * Get input list data.
 */
function getInutListData(inputData) {
    let listData = !inputData || !inputData.requestContext || !inputData.requestContext.pageData ? null : inputData.requestContext.pageData.list;
    if (!inputData ||
        !inputData.requestContext ||
        !inputData.requestContext.pageData ||
        !inputData.requestContext.pageData.list ||
        !inputData.requestContext.pageData.list.content ||
        !inputData.requestContext.pageData.list.content.items ||
        !inputData.requestContext.pageData.list.content.title ||
        !inputData.requestContext.pageData.list._id) {
        if (!inputData ||
            !inputData.data ||
            !inputData.data.list ||
            !inputData.data.list.content ||
            !inputData.data.list.content.items ||
            !inputData.data.list.content.title ||
            !inputData.data.list._id) {
            console.error('data is not well defined for list action input');
            throw new Error('data is not well defined for list action input');
        }
        listData = inputData.data.list;
    }
    return listData;
}
/**
 * Get sub list item.
 */
function getSubListItem(item, sitePathOfRequest) {
    const imageList = getImages(item.fields.content.images);
    const sublistHref = getSubListUrl(item.fields._name, sitePathOfRequest);
    return {
        Title: item.fields.content.title,
        Description: item.fields.content.description,
        ShortDescription: item.fields.content.shortDescription,
        BackgroundColor: item.fields.content.backgroundColor,
        ForegroundColor: item.fields.content.foregroundColor,
        Href: sublistHref,
        Images: imageList
    };
}
/**
 * Get site path
 */
function getSitePath(inputData) {
    // @ts-ignore
    return inputData && inputData.requestContext && inputData.requestContext.sitePath ? inputData.requestContext.sitePath : '';
}
/**
 * Get items per page
 */
function getItemsPerPage(inputData) {
    if (!inputData || !inputData.config || !inputData.config.itemsPerPage) {
        return 50;
    }
    const result = Number(inputData.config.itemsPerPage);
    if (isNaN(result)) {
        return 50;
    }
    return result;
}
/**
 * Get skip count
 */
function getSkipCount(inputData) {
    return inputData && inputData.requestContext && inputData.requestContext.query && inputData.requestContext.query.skipCount
        ? Number(inputData.requestContext.query.skipCount)
        : 0;
}
/**
 * Creates the input required to make the list call to get products.
 */
const createListInput = (inputData) => {
    const listData = getInutListData(inputData);
    const listItems = [];
    let productList = [];
    const parentImageList = getImages(listData.content.images);
    const itemsPerPage = getItemsPerPage(inputData);
    const skipCount = getSkipCount(inputData);
    // This is the list contains all product and will be used to call getSimpleProducts data action.
    const productItems = [];
    const sum = skipCount + itemsPerPage;
    for (let index = skipCount; index < listData.content.items.length && index < sum; index++) {
        const item = listData.content.items[index];
        if (item.type === "list" /* list */) {
            if (!item.fields || !item.fields.content || !item.fields.content.title) {
                console.error(`sublist item fields, content or title missing in list ${listData._id}`);
                continue;
            }
            // if any elements in product list, then copy it and add to list items
            if (!(productList.length === 0)) {
                const clonedList = [...productList];
                listItems.push(clonedList);
                productList = [];
            }
            // build and add sublist item
            listItems.push(getSubListItem(item, getSitePath(inputData)));
        }
        if (item.type === "product" /* product */) {
            if (!item.fields || !item.fields.recordId) {
                console.error(`product item missing recordId in list ${listData._id}`);
                continue;
            }
            // add product item
            const productItem = {
                RecordId: item.fields.recordId,
                CatalogId: item.fields.catalogId || '0'
            };
            productList.push(productItem);
            productItems.push(productItem);
        }
    }
    // save the last portion of product items.
    if (!(productList.length === 0)) {
        listItems.push(productList);
    }
    return new ListInput(listData._id, listData.content.title, listData.content.description, listData.content.shortDescription, listData.content.backgroundColor, listData.content.foregroundColor, parentImageList, listItems, productItems, listData.content.items.length, itemsPerPage, skipCount);
};
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-list',
    action: getListData,
    input: createListInput
});
//# sourceMappingURL=get-list.js.map