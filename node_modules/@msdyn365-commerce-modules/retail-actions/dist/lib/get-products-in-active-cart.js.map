{"version":3,"file":"get-products-in-active-cart.js","sourceRoot":"","sources":["../../src/get-products-in-active-cart.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,0BAA0B,EAA+D,MAAM,yBAAyB,CAAC;AAC7I,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAG/D,OAAO,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AAE1D;;GAEG;AACH,MAAM,OAAO,uBAAuB;IAApC;QACW,gBAAW,GAAG,GAAG,EAAE,CAAC,oBAAoB,CAAC;QACzC,uBAAkB,GAAG,GAAG,EAAE,CAAC,oBAAoB,CAAC;QAChD,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;IACnD,CAAC;CAAA;AAED,MAAM,WAAW,GAAG,CAAC,SAA+B,EAAE,EAAE;IACpD,OAAO,IAAI,uBAAuB,EAAE,CAAC;AACzC,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAAC,KAA8B,EAAE,GAAmB;IACjG,sEAAsE;IACtE,IAAI,CAAC,KAAK,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;KACtF;IAED,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,CAAC;IAC1C,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;IAE5B,qDAAqD;IACrD,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;QACjD,GAAG,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACjD,OAAO,iBAAiB,CACJ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC1C,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACpB,OAAO,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;aAC/E;YACD,OAAO,SAAS,CAAC;QACrB,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,EAClB,GAAG,CACN;aACI,IAAI,CAAC,CAAC,QAAyB,EAAE,EAAE;YAChC,IAAI,QAAQ,EAAE;gBACV,OAAO,QAAQ,CAAC;aACnB;iBAAM;gBACH,OAAO,EAAE,CAAC;aACb;QACL,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;YACpB,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5B,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACnC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,4EAA4E,CAAC,CAAC;YAClG,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;KACV;IAED,GAAG,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAClE,OAAwB,EAAE,CAAC;AAC/B,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,uEAAuE;IAC3E,MAAM,EAA4B,2BAA2B;IAC7D,KAAK,EAAE,WAAW;CACrB,CAAC,CAAC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getSimpleProducts, ProductInput } from './index';\n\n/**\n * Input class for activeCartWithProducts data action\n */\nexport class ActiveCartProductsInput implements IActionInput {\n    public getCacheKey = () => `ActiveCartProducts`;\n    public getCacheObjectType = () => 'ActiveCartProducts';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nconst createInput = (inputData: ICreateActionContext) => {\n    return new ActiveCartProductsInput();\n};\n\n/**\n * Calls the Retail API and returns a cart object based on the passed GetCartInput\n */\nexport async function getActiveCartProductsAction(input: ActiveCartProductsInput, ctx: IActionContext): Promise<SimpleProduct[]> {\n    // If no cart ID is provided in input, we need to create a cart object\n    if (!input) {\n        throw new Error('[getActiveCartWithProducts]No valid Input was provided, failing');\n    }\n\n    const cartState = await getCartState(ctx);\n    const cart = cartState.cart;\n\n    // If there are cart lines, make call to get products\n    if (cart && cart.CartLines && cart.CartLines.length) {\n        ctx.trace('Getting cart product information...');\n        return getSimpleProducts(\n            <ProductInput[]>cart.CartLines.map(cartLine => {\n                if (cartLine.ProductId) {\n                    return new ProductInput(cartLine.ProductId, ctx.requestContext.apiSettings);\n                }\n                return undefined;\n            }).filter(Boolean),\n            ctx\n        )\n            .then((products: SimpleProduct[]) => {\n                if (products) {\n                    return products;\n                } else {\n                    return [];\n                }\n            })\n            .catch((error: Error) => {\n                ctx.trace(error.toString());\n                ctx.telemetry.error(error.message);\n                ctx.telemetry.debug(`[getActiveCartWithProducts]Unable to hydrate cart with product information`);\n                throw new Error('[getActiveCartWithProducts]Unable to hydrate cart with product information');\n            });\n    }\n\n    ctx.trace('[getActiveCartWithProducts]No Products Found in cart');\n    return <SimpleProduct[]>[];\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-products-in-active-cart',\n    action: <IAction<SimpleProduct[]>>getActiveCartProductsAction,\n    input: createInput\n});\n"]}