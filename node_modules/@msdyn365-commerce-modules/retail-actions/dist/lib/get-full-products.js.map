{"version":3,"file":"get-full-products.js","sourceRoot":"","sources":["../../src/get-full-products.ts"],"names":[],"mappings":"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","sourcesContent":["import { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProjectionDomain } from '@msdyn365-commerce/retail-proxy';\n\nimport { getActivePricesAsync, getProductRatingsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport getSimpleProducts, { ProductInput } from './get-simple-products';\nimport { buildCacheKey, generateKey, getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\nimport * as semver from 'semver';\n\n/**\n * Full Product Input\n */\nexport class FullProductInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public ProductDetailsCriteria: ProductDetailsCriteria;\n\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(productId: number | string, apiSettings: ICommerceApiSettings, criteria: ProductDetailsCriteria) {\n        this.productId = typeof productId === 'string' ? parseInt(productId, 10) : productId;\n        this.ProductDetailsCriteria = criteria;\n        this.apiSettings = apiSettings;\n        this.channelId = apiSettings.channelId;\n    }\n\n    public getCacheKey = () => {\n        const { getPrice, getRating } = this.ProductDetailsCriteria;\n        return buildCacheKey(generateKey([this.productId, getPrice, getRating]), this.apiSettings);\n    };\n    public getCacheObjectType = () => 'FullProduct';\n    public dataCacheType = (): CacheType => 'application';\n}\n\n/**\n * Class to define criteria to get full product like price, ratings etc.\n */\nexport class ProductDetailsCriteria {\n    public getPrice: boolean;\n    public getRating: boolean;\n    constructor(getPrice?: boolean, getRating?: boolean) {\n        this.getPrice = getPrice || false;\n        this.getRating = getRating || false;\n    }\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nexport const createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput[] => {\n    let productIds = inputData.config && inputData.config.productIds;\n    const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n    if (typeof productIds === 'string') {\n        productIds = productIds.split(',');\n    }\n    if (Array.isArray(productIds) && productIds.length) {\n        return productIds.map((productId: string) => {\n            return new FullProductInput(+productId, inputData.requestContext.apiSettings, productDetailsCriteria);\n        });\n    }\n        return [];\n};\n\n/**\n * Calls the Retail API and returns the product based on the passed ProductInput\n */\nexport async function getFullProductsAction(inputs: FullProductInput[], ctx: IActionContext): Promise<FullProduct[]> {\n    if (!Array.isArray(inputs) || !inputs.length) {\n        ctx.trace('[getFullProductsAction] Invalid or empty inputs passed.');\n        return <FullProduct[]>{};\n    }\n\n    const { apiSettings } = ctx.requestContext;\n    const productInputs = inputs.map(\n        (input: FullProductInput): ProductInput => {\n            return new ProductInput(input.productId, apiSettings);\n        }\n    );\n\n    return getSimpleProducts(productInputs, ctx)\n        .then(result => {\n            return result.map(product => {\n            return { ProductDetails: product };\n        });\n        })\n        .then((productCollection: FullProduct[]) => {\n    const validProductIds = new Set(productCollection.map(input => input.ProductDetails && input.ProductDetails.RecordId));\n\n            const ratingsAndPricePromises = [\n                _getActivePrices(inputs, validProductIds, productCollection, ctx),\n                _getProductRatings(inputs, validProductIds, productCollection, ctx)\n            ];\n    return Promise.all(ratingsAndPricePromises).then(() => {\n        return productCollection;\n      });\n        })\n        .catch(e => {\n            ctx.telemetry.exception(e);\n            ctx.telemetry.debug(`Unable to get Simple products`);\n            return [];\n        });\n}\n\nasync function _getActivePrices(\n    inputs: FullProductInput[],\n    validProductIds: Set<number>,\n    productCollection: FullProduct[],\n    ctx: IActionContext\n): Promise<void> {\n    const projectDomain: ProjectionDomain = { ChannelId: +ctx.requestContext.apiSettings.channelId, CatalogId: 0 };\n    const validInputs = <number[]>inputs\n        .map(input => {\n        if (input.ProductDetailsCriteria.getPrice && validProductIds.has(input.productId)) {\n            return input.productId;\n        }\n        })\n        .filter(Boolean);\n\n     return getActivePricesAsync(\n            { callerContext: ctx, queryResultSettings: {} },\n            projectDomain,\n            validInputs,\n            new Date(),\n            null,\n            [],\n            true\n            // @ts-ignore\n        ).then(result => {\n            // @ts-ignore\n            result.forEach(productPrice => {\n                const fullProduct: FullProduct | undefined = productCollection.find(x=> {\n                    return x.ProductDetails &&  x.ProductDetails.RecordId === productPrice.ProductId;\n                   });\n                if (fullProduct) {\n                    // If RS Verison < 9.16.0 (aka 10.0.6), customer contextual price won't be\n                    // included so instead just use AdjustedPrice\n                    if (semver.lt(ctx.requestContext.apiSettings.retailServerProxyVersion, '9.16.0')) {\n                        productPrice.CustomerContextualPrice = productPrice.AdjustedPrice;\n                    }\n                    fullProduct.ProductPrice = productPrice;\n                }\n            });\n        })\n        .catch((error: Error) => {\n            const telemetry = ctx.telemetry;\n            telemetry.debug('[getActivePricesAsync] Unable to get active price.');\n            telemetry.exception(error);\n        });\n }\n\nasync function _getProductRatings(\n    inputs: FullProductInput[],\n    validProductIds: Set<number>,\n    productCollection: FullProduct[],\n    ctx: IActionContext\n): Promise<void> {\n    const validInputs = <number[]>inputs\n        .map(input => {\n       if (input.ProductDetailsCriteria.getRating && validProductIds.has(input.productId)) {\n           return input.productId;\n       }\n        })\n        .filter(Boolean);\n\n    return getProductRatingsAsync({ callerContext: ctx, queryResultSettings: {} }, validInputs)\n        .then(result => {\n            result.forEach(productRating => {\n                const fullProduct: FullProduct | undefined = productCollection.find(x=> {\n                    return x.ProductDetails &&  x.ProductDetails.RecordId === productRating.ProductId;\n                });\n                if (fullProduct) {\n                    fullProduct.ProductRating = productRating;\n                }\n            });\n        })\n        .catch(err => {\n            const telemetry = ctx.telemetry;\n            telemetry.debug(`[getProductRatingsAsync] Unable to get product ratings.`);\n            telemetry.exception(err);\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-full-products',\n    action: <IAction<FullProduct[]>>getFullProductsAction,\n    input: createInput,\n    isBatched: true\n});\n"]}