{"version":3,"file":"get-organization-users-count.js","sourceRoot":"","sources":["../../src/get-organization-users-count.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,0BAA0B,EAAwC,MAAM,yBAAyB,CAAC;AAC3G,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,gFAAgF,CAAC;AAEhI;;GAEG;AACH,MAAM,OAAO,2BAA2B;IAAxC;QACW,gBAAW,GAAG,GAAG,EAAE,CAAC,wBAAwB,CAAC;QAC7C,uBAAkB,GAAG,GAAG,EAAE,CAAC,iBAAiB,CAAC;QAC7C,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;IACnD,CAAC;CAAA;AAED,MAAM,CAAC,MAAM,oCAAoC,GAAG,CAAC,SAA+B,EAAgB,EAAE;IAClG,MAAM,EAAE,cAAc,EAAE,GAAG,SAAS,CAAC;IAErC,sCAAsC;IACtC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE;QACtC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC7C;IAED,OAAO,IAAI,2BAA2B,EAAE,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAAC,KAAkC,EAAE,GAAmB;IACnG,OAAO,eAAe,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC;SACzC,IAAI,CAAC,eAAe,CAAC,EAAE;QACpB,IAAI,CAAC,eAAe,EAAE;YAClB,OAAO,CAAC,CAAC;SACZ;QAED,OAAO,aAAa,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,eAAe,CAAC,iBAAiB,CAAC;aAC1E,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YACZ,OAAO,KAAK,CAAC,MAAM,CAAC;QACxB,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE;YACX,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,GAAG,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,8DAA8D,CAAC,CAAC;QACpF,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;AACX,CAAC;AACD,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,8BAA8B;IAClC,MAAM,EAA4B,yBAAyB;IAC3D,KAAK,EAAE,oCAAoC;CAC9C,CAAC,CAAC","sourcesContent":["import { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { getCurrentAsync, getUsersAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';\n\n/**\n * Input class for get customer data action\n */\nexport class OrganizationUsersCountInput implements IActionInput {\n    public getCacheKey = () => 'OrganizationUsersCount';\n    public getCacheObjectType = () => 'BusinessPartner';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nexport const createGetOrganizationUsersCountInput = (inputData: ICreateActionContext): IActionInput => {\n    const { requestContext } = inputData;\n\n    // Check if the user is authenticated.\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('User is not logged in.');\n    }\n\n    return new OrganizationUsersCountInput();\n};\n\nexport async function getOrganizationUsersCount(input: OrganizationUsersCountInput, ctx: IActionContext): Promise<Number> {\n    return getCurrentAsync({ callerContext: ctx })\n        .then(businessPartner => {\n            if (!businessPartner) {\n                return 0;\n            }\n\n            return getUsersAsync({ callerContext: ctx }, businessPartner.BusinessPartnerId)\n                .then((users) => {\n                    return users.length;\n                })\n                .catch(error => {\n                    ctx.telemetry.exception(error);\n                    ctx.trace('[get-organization-users-count] Unable to load users');\n                    throw new Error('[get-organization-users-count] Unable to load users');\n                });\n        })\n        .catch(error => {\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug('[get-organization-users-count] Unable to get BusinessPartner');\n            throw new Error('[get-organization-users-count] Unable to get BusinessPartner');\n        });\n}\nexport default createObservableDataAction({\n    id: 'get-organization-users-count',\n    action: <IAction<Number>><unknown>getOrganizationUsersCount,\n    input: createGetOrganizationUsersCountInput\n});\n"]}