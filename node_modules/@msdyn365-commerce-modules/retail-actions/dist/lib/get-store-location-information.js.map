{"version":3,"file":"get-store-location-information.js","sourceRoot":"","sources":["../../src/get-store-location-information.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { OrgUnitAvailability, OrgUnitLocation, SearchArea, StoreHours } from '@msdyn365-commerce/retail-proxy';\nimport { getOrgUnitLocationsByAreaAsync, getStoreHoursAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { IFullOrgUnitAvailability } from './utilities/full-org-unit-availability';\n\n/**\n * Get selected variant action input class\n */\nexport class GetOrgUnitLocationsByAreaInput implements IActionInput {\n    public Latitude?: number;\n    public Longitude?: number;\n    public Radius?: number;\n    public DistanceUnitValue?: number;\n    public IgnoreLocation?: boolean;\n\n    constructor(_Latitude?: number, _Longitude?: number, _Radius?: number, _DistanceUnitValue?: number, _IgnoreLocation?: boolean) {\n        this.Latitude = _Latitude;\n        this.Longitude = _Longitude;\n        this.Radius = _Radius;\n        this.DistanceUnitValue = _DistanceUnitValue;\n        this.IgnoreLocation = _IgnoreLocation;\n    }\n\n    public getCacheKey = () => `GetOrgUnitLocationsByAreaInput`;\n    public getCacheObjectType = () => 'GetOrgUnitLocationsByAreaInput';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * CreateInput method for the getSelectedVariant data action\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetOrgUnitLocationsByAreaInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetOrgUnitLocationsByAreaInput => {\n    return new GetOrgUnitLocationsByAreaInput();\n};\n\n/**\n * Action method for the getSelectedVariant data action\n * @param input The action input class\n * @param ctx The action context\n */\nexport async function getOrgUnitLocationsByArea(\n    input: GetOrgUnitLocationsByAreaInput,\n    ctx: IActionContext\n): Promise<IFullOrgUnitAvailability[] | undefined> {\n\n    if ((input.Radius === undefined || !input.Latitude || !input.Longitude) && !input.IgnoreLocation) {\n        // No valid location we want to return empty array so module can show no locations message\n        return [];\n    }\n\n    const searchArea: SearchArea = {\n        Latitude: input.Latitude,\n        Longitude: input.Longitude,\n        Radius: input.Radius,\n        DistanceUnitValue: input.DistanceUnitValue || 0 // 0 is miles\n    };\n\n    return getOrgUnitLocationsByAreaAsync({ callerContext: ctx }, searchArea)\n        .then((stores: OrgUnitLocation[]) => {\n            const locationPromiseList = stores.map(store => _getLocationWithHours(store, ctx));\n            return Promise.all(locationPromiseList);\n        })\n        .catch((error: Error) => {\n            ctx.trace('[GetOrgUnitLocationsByArea] error getting Locations');\n            ctx.trace(error.message);\n            ctx.telemetry.error(error.message);\n            ctx.telemetry.debug(`[GetOrgUnitLocationsByArea] error getting Locations`);\n            return [];\n        });\n}\n\n/**\n * Action method that obtains the store information\n * @param orgUnitLocation The org unit location\n * @param storeMap a map that contains store information group by the inventory location id\n * @param ctx The action context\n */\nasync function _getLocationWithHours(\n    orgUnitLocation: OrgUnitLocation,\n    ctx: IActionContext): Promise<IFullOrgUnitAvailability> {\n    if (!orgUnitLocation || !orgUnitLocation.OrgUnitNumber) {\n        return { OrgUnitAvailability: undefined };\n    }\n\n    return getStoreHoursAsync({ callerContext: ctx }, orgUnitLocation.OrgUnitNumber)\n        .then((hours: StoreHours) => {\n\n            const availability: OrgUnitAvailability = {\n                OrgUnitLocation: orgUnitLocation\n            };\n\n            if (hours && !(hours instanceof Error)) {\n                return { OrgUnitAvailability: availability, StoreHours: hours };\n            }\n\n            return { OrgUnitAvailability: availability };\n        })\n        .catch((error: Error) => {\n            ctx.trace('[GetFullAvailableInventoryNearby] error getting availability with hours');\n            ctx.trace(error.message);\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[GetFullAvailableInventoryNearby] error getting availability with hours`);\n            return { OrgUnitAvailability: {} };\n        });\n}\n\n/**\n * The complete getOrgUnitLocationsByArea data action\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-store-location-information',\n    action: <IAction<IFullOrgUnitAvailability[] | undefined>>getOrgUnitLocationsByArea,\n    input: createGetOrgUnitLocationsByAreaInput\n});"]}