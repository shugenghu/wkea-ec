{"version":3,"file":"get-refiners-by-category.js","sourceRoot":"","sources":["../../src/get-refiners-by-category.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,0BAA0B,EAAwD,MAAM,yBAAyB,CAAC;AAE3H,OAAO,kBAAkB,EAAE,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAElF,OAAO,EAAE,0BAA0B,EAAE,MAAM,wEAAwE,CAAC;AACpH,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAEhF;;GAEG;AACH,MAAM,OAAO,uBAAuB;IAIhC,YAAY,QAA8B,EAAE,wBAAkD,EAAE,SAAkB;QAM3G,gBAAW,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE,CAAC;QAC5H,uBAAkB,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC;QAC5C,sBAAiB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;QAPlC,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;QACzD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;IACpC,CAAC;CAKJ;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAAC,SAA+C,EAAgB,EAAE;IAC3G,IAAI,SAAS,IAAI,SAAS,CAAC,cAAc,EAAE;QACvC,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,eAAe,GAAG,IAAI,oBAAoB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAE3E,OAAO,IAAI,uBAAuB,CAC9B,eAAe,EACf,wBAAwB,CAAC,aAAa,CAAC,SAAS,CAAC,EACjD,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAC1C,CAAC;KACL;IAED,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;AAC1E,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAAC,KAA8B,EAAE,GAAmB;IACjG,IAAI,UAAU,GAAG,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC;IAClD,IAAI,KAAK,CAAC,eAAe,CAAC,YAAY,IAAI,CAAC,UAAU,EAAE;QACnD,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,KAAK,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;QACtE,IAAI,CAAC,QAAQ,EAAE;YACX,GAAG,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;YACnE,OAAyB,EAAE,CAAC;SAC/B;QACD,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC;KAClC;IAED,OAAO,0BAA0B,CAC7B,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAE,KAAK,CAAC,wBAAwB,CAAC,mBAAmB,EAAE,EAC/F,KAAK,CAAC,SAAS,EACf,UAAU,IAAI,CAAC,CAClB,CAAC;AACN,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,oEAAoE;IACxE,MAAM,EAA6B,2BAA2B;IAC9D,KAAK,EAAE,6BAA6B;CACvC,CAAC,CAAC","sourcesContent":["import { IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductRefiner } from '@msdyn365-commerce/retail-proxy';\nimport getCurrentCategory, { CurrentCategoryInput } from './get-current-category';\n\nimport { getRefinersByCategoryAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\n\n/**\n * Action Input class for the getRefinersByCategory data action\n */\nexport class RefinersByCategoryInput implements IActionInput {\n    public readonly catalogId: number;\n    public readonly currentCategory: CurrentCategoryInput;\n    public readonly queryResultSettingsProxy: QueryResultSettingsProxy;\n    constructor(category: CurrentCategoryInput, queryResultSettingsProxy: QueryResultSettingsProxy, catalogId?: number) {\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.catalogId = catalogId || 0;\n        this.currentCategory = category;\n    }\n\n    public getCacheKey = () => `${this.currentCategory.getCacheKey()}|${this.catalogId}|${this.queryResultSettingsProxy.cacheKeyHint}`;\n    public getCacheObjectType = () => 'ProductRefiner';\n    public shouldCacheOutput = () => true;\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nexport const createRefinersByCategoryInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    if (inputData && inputData.requestContext) {\n        const catalogId = inputData.config ? Number(inputData.config.catalogId) : 0;\n        const currentCategory = new CurrentCategoryInput(inputData.requestContext);\n\n        return new RefinersByCategoryInput(\n            currentCategory,\n            QueryResultSettingsProxy.fromInputData(inputData),\n            Number.isNaN(catalogId) ? 0 : catalogId\n        );\n    }\n\n    throw new Error('Please specify categoryId query string in request.');\n};\n\n/**\n * Calls the Retail API and returns all refiners by category\n */\nexport async function getRefinersByCategoryAction(input: RefinersByCategoryInput, ctx: IActionContext): Promise<ProductRefiner[]> {\n    let categoryId = input.currentCategory.categoryId;\n    if (input.currentCategory.categorySlug && !categoryId) {\n        const category = await getCurrentCategory(input.currentCategory, ctx);\n        if (!category) {\n            ctx.trace('[getRefinersByCategoryAction] Unable to find category');\n            return <ProductRefiner[]>[];\n        }\n        categoryId = category.RecordId;\n    }\n\n    return getRefinersByCategoryAsync(\n        { callerContext: ctx, queryResultSettings: input.queryResultSettingsProxy.QueryResultSettings },\n        input.catalogId,\n        categoryId || 0\n    );\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-refiners-by-category',\n    action: <IAction<ProductRefiner[]>>getRefinersByCategoryAction,\n    input: createRefinersByCategoryInput\n});\n"]}