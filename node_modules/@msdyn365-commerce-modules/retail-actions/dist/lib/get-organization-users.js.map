{"version":3,"file":"get-organization-users.js","sourceRoot":"","sources":["../../src/get-organization-users.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,0BAA0B,EAAqF,MAAM,yBAAyB,CAAC;AAEnK,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,gFAAgF,CAAC;AAChI,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD;;GAEG;AACH,MAAM,OAAO,sBAAsB;IAG/B,YAAY,WAAiC;QAGtC,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzE,uBAAkB,GAAG,GAAG,EAAE,CAAC,iBAAiB,CAAC;QAC7C,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAJ9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAIJ;AAED,MAAM,CAAC,MAAM,+BAA+B,GAAG,CAAC,SAA+B,EAAgB,EAAE;IAC7F,MAAM,EAAE,cAAc,EAAE,GAAG,SAAS,CAAC;IAErC,sCAAsC;IACtC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE;QACtC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC7C;IAED,OAAO,IAAI,sBAAsB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,KAA6B,EAAE,GAAmB;IACzF,OAAO,eAAe,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC;SACzC,IAAI,CAAC,eAAe,CAAC,EAAE;QACpB,OAAO,aAAa,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,eAAe,CAAC,iBAAiB,CAAC;aAC1E,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YACZ,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE;YACX,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,GAAG,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;YAC3D,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,wDAAwD,CAAC,CAAC;QAC9E,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;AACX,CAAC;AACD,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,wBAAwB;IAC5B,MAAM,EAA2C,oBAAoB;IACrE,KAAK,EAAE,+BAA+B;CACzC,CAAC,CAAC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICommerceApiSettings, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { BusinessPartnerUser } from '@msdyn365-commerce/retail-proxy';\nimport { getCurrentAsync, getUsersAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';\nimport { buildCacheKey } from './utilities/utils';\n\n/**\n * Input class for get customer data action\n */\nexport class OrganizationUsersInput implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n    public getCacheKey = () => buildCacheKey('OrganizationUsers', this.apiSettings);\n    public getCacheObjectType = () => 'BusinessPartner';\n    public dataCacheType = (): CacheType => 'request';\n}\n\nexport const createGetOrganizationUsersInput = (inputData: ICreateActionContext): IActionInput => {\n    const { requestContext } = inputData;\n\n    // Check if the user is authenticated.\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('User is not logged in.');\n    }\n\n    return new OrganizationUsersInput(requestContext.apiSettings);\n};\n\nexport async function getOrganizationUsers(input: OrganizationUsersInput, ctx: IActionContext): Promise<BusinessPartnerUser[]> {\n    return getCurrentAsync({ callerContext: ctx })\n        .then(businessPartner => {\n            return getUsersAsync({ callerContext: ctx }, businessPartner.BusinessPartnerId)\n                .then((users) => {\n                    return users;\n                })\n                .catch(error => {\n                    ctx.telemetry.exception(error);\n                    ctx.trace('[get-organization-users] Unable to load users');\n                    throw new Error('[get-organization-users] Unable to load users');\n                });\n        })\n        .catch(error => {\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug('[get-organization-users] Unable to get BusinessPartner');\n            throw new Error('[get-organization-users] Unable to get BusinessPartner');\n        });\n}\nexport default createObservableDataAction({\n    id: 'get-organization-users',\n    action: <IAction<BusinessPartnerUser[]>><unknown>getOrganizationUsers,\n    input: createGetOrganizationUsersInput\n});\n"]}