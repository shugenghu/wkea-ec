{"version":3,"file":"get-customer.js","sourceRoot":"","sources":["../../src/get-customer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,0BAA0B,EAAwD,MAAM,yBAAyB,CAAC;AAE3H,OAAO,EAAE,SAAS,EAAE,MAAM,yEAAyE,CAAC;AACpG,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD;;GAEG;AACH,MAAM,OAAO,gBAAgB;IAIzB,YAAY,WAAiC,EAAE,aAAsB;QAK9D,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,IAAI,CAAC,qBAAqB,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9F,uBAAkB,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC;QACtC,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QAN9C,IAAI,CAAC,qBAAqB,GAAG,aAAa,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAED;;GAEG;AACH,MAAM,WAAW,GAAG,CAAC,SAA+C,EAAoB,EAAE;IACtF,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,SAAS,CAAC,cAAc,CAAC;IACvD,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;QACtC,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;KAC7E;IAED,OAAO,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,KAAK,EAAE,KAAuB,EAAE,GAAmB,EAAqB,EAAE;IAChG,IAAI,KAAK,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE;QAClD,mFAAmF;QACnF,OAAO,SAAS,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACxF,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC5D,CAAC,CAAC,CAAC;KACN;IAED,GAAG,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACzD,OAAiB,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,wDAAwD;IAC5D,MAAM,EAAqB,iBAAiB;IAC5C,KAAK,EAAE,WAAW;CACrB,CAAC,CAAC","sourcesContent":["import { CacheType, IAction, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { Customer } from '@msdyn365-commerce/retail-proxy';\nimport { readAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';\nimport { buildCacheKey } from './utilities/utils';\n\n/**\n * Input class for get customer data action\n */\nexport class GetCustomerInput implements IActionInput {\n    public customerAccountNumber?: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings, accountNumber?: string) {\n        this.customerAccountNumber = accountNumber;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`Customer-${this.customerAccountNumber}`, this.apiSettings);\n    public getCacheObjectType = () => 'Customer';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetCustomerInput => {\n    const { user, apiSettings } = inputData.requestContext;\n    if (!user.token || !user.isAuthenticated) {\n        throw new Error('[getCustomer][createInput]: User is not Authenticated.');\n    }\n\n    return new GetCustomerInput(apiSettings);\n};\n\nconst getCustomerAction = async (input: GetCustomerInput, ctx: IActionContext): Promise<Customer> => {\n    if (input && ctx.requestContext.user.isAuthenticated) {\n        // TO-DO- Need to clean up this code once SDK releases new proxy that handles null.\n        return readAsync({ callerContext: ctx }, input.customerAccountNumber || '').then(response => {\n            return Array.isArray(response) ? response[0] : response;\n        });\n    }\n\n    ctx.trace('[getCustomer]Invalid input passed to action');\n    return <Customer>{};\n};\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-customer',\n    action: <IAction<Customer>>getCustomerAction,\n    input: createInput\n});\n"]}