import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getCartState } from '@msdyn365-commerce/global-state';
import { getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import { getOrgUnitConfigurationAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';
import { getLoyalty, GetLoyaltyCardInput } from './index';
import { buildCacheKey } from './index';
/**
 *  Input class for the getLoyaltyCard data action
 */
export class GetLoyaltyTransactionEstimationInput {
    constructor(apiSettings, userAccountNumber) {
        this.getCacheKey = () => buildCacheKey(`GetLoyaltyCardTransactionEstimation-${this.userAccountNumber}`, this.apiSettings);
        this.getCacheObjectType = () => 'GetLoyaltyCardTransactionEstimation';
        this.dataCacheType = () => 'request';
        this.userAccountNumber = userAccountNumber;
        this.apiSettings = apiSettings;
    }
}
/**
 * createInput method for the getLoyaltyCard method
 * @param inputData The input data passed to the createInput method
 */
export const createGetLoyaltyTransactionEstimationInput = (inputData) => {
    const { requestContext } = inputData;
    if (!requestContext.user.isAuthenticated) {
        return new GetLoyaltyTransactionEstimationInput(inputData.requestContext.apiSettings);
    }
    return new GetLoyaltyTransactionEstimationInput(inputData.requestContext.apiSettings);
};
/**
 * The action method for the getLoyaltyCard data action
 * @param input The action input
 * @param ctx The action context
 */
export async function getLoyaltyTransactionEstimationAction(input, ctx) {
    if (!ctx.requestContext.user.isAuthenticated) {
        return {};
    }
    const promises = [_getCart(ctx), _getLoyalty(input, ctx), _getOrgUnits(ctx)];
    return Promise.all(promises)
        .then((result) => {
        if (result && result.length >= 2 && result[1].CardNumber) {
            return getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync({ callerContext: ctx }, result[0].Id, result[1].CardNumber, result[2].Currency || '')
                .then(points => {
                return points;
            })
                .catch(e => {
                ctx.telemetry.exception(e);
                ctx.telemetry.debug(`Error getting Loyalty Point Redemption Estimate`);
                throw new Error('Error getting Loyalty Point Redemption Estimate');
            });
        }
        return {};
    })
        .catch(e => {
        return {};
    });
}
async function _getCart(ctx) {
    const cartState = await getCartState(ctx);
    return cartState.cart;
}
async function _getLoyalty(input, ctx) {
    const loyaltyCardInput = new GetLoyaltyCardInput(input.apiSettings);
    return getLoyalty(loyaltyCardInput, ctx);
}
async function _getOrgUnits(ctx) {
    return getOrgUnitConfigurationAsync({ callerContext: ctx, queryResultSettings: {} });
}
/**
 * The getLoyaltyTransactionEstimation data action
 * Returns the loyalty card belonging to the customer
 */
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-loyalty-transaction-estimation',
    action: getLoyaltyTransactionEstimationAction,
    input: createGetLoyaltyTransactionEstimationInput
});
//# sourceMappingURL=get-loyalty-transaction-estimation.js.map