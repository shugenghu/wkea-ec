{"version":3,"file":"get-full-products-search-by-text.js","sourceRoot":"","sources":["../../src/get-full-products-search-by-text.ts"],"names":[],"mappings":"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","sourcesContent":["import { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionContext, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy';\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from './get-full-products';\nimport { buildCacheKey, ensureSafeSearchText, getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\nimport { searchByTextAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\n\n/**\n * get-full-products-by-search-text data action input\n */\nexport class FullProductBySearchTextInput implements IActionInput {\n    public readonly catalogId: number;\n    public readonly channelId: number;\n    public readonly searchText: string;\n    public ProductDetailsCriteria: ProductDetailsCriteria;\n    public readonly queryResultSettingsProxy: QueryResultSettingsProxy;\n    public readonly apiSettings: ICommerceApiSettings;\n\n    constructor(\n        searchText: string,\n        criteria: ProductDetailsCriteria,\n        queryResultSettingsProxy: QueryResultSettingsProxy,\n        apiSettings: ICommerceApiSettings) {\n        this.searchText = ensureSafeSearchText(searchText);\n        this.ProductDetailsCriteria = criteria;\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.apiSettings = apiSettings;\n        this.channelId = apiSettings.channelId;\n        this.catalogId = apiSettings.catalogId;\n    }\n\n    public getCacheKey = () => buildCacheKey(`${this.searchText}-${this.queryResultSettingsProxy.cacheKeyHint}-${this.ProductDetailsCriteria.getPrice}`, this.apiSettings);\n    public getCacheObjectType = () => 'FullProductSearchByTextResults';\n    public dataCacheType = (): CacheType => 'application';\n}\n\n/**\n * Creates the input required to make the retail api call\n *   Requires: query string ?q={searchText}\n */\nexport const createFullProductSearchByTextInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    const searchText = inputData && inputData.requestContext && inputData.requestContext.query && inputData.requestContext.query.q;\n    if (!searchText) {\n        throw new Error('Unable to preform search without search text.  Query string ?q={searchText} must be present.');\n    }\n\n    const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n\n    const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);\n\n    return new FullProductBySearchTextInput(searchText, productDetailsCriteria, queryResultSettingsProxy, inputData.requestContext.apiSettings);\n};\n\nexport async function fullProductSearchByTextAction(input: FullProductBySearchTextInput, ctx: IActionContext): Promise<FullProduct[]> {\n    if (!input || !input.searchText) {\n        ctx.trace('[fullProductSearchByTextAction] Unable to find search term');\n        return [];\n    }\n\n    const FullProductInputs = await searchByTextAsync(\n        { callerContext: ctx, queryResultSettings: input.queryResultSettingsProxy.QueryResultSettings },\n        input.channelId,\n        input.catalogId,\n        input.searchText\n    )\n        .then((response: ProductSearchResult[]) => {\n            if (response) {\n                return response.map(\n                    (product: ProductSearchResult): FullProductInput => {\n                        return new FullProductInput(product.RecordId, input.apiSettings, input.ProductDetailsCriteria);\n                    }\n                );\n            }\n\n            ctx.trace('[fullProductSearchByTextAction] Invalid response from server');\n            return <FullProductInput[]>[];\n        })\n        .catch(err => {\n            ctx.trace(`[fullProductSearchByTextAction] Error in getting response from server. ${err}`);\n            ctx.telemetry.exception(err);\n            ctx.telemetry.debug(`[fullProductSearchByTextAction] Error in getting response from server. ${err}`);\n            return <FullProductInput[]>[];\n        });\n\n    if (FullProductInputs.length > 0) {\n        return getFullProducts(FullProductInputs, ctx);\n    } else {\n        return <FullProduct[]>{};\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-full-products-search-by-text',\n    action: <IAction<FullProduct[]>>fullProductSearchByTextAction,\n    input: createFullProductSearchByTextInput\n});\n"]}