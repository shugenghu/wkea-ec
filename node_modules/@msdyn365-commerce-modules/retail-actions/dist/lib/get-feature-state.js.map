{"version":3,"file":"get-feature-state.js","sourceRoot":"","sources":["../../src/get-feature-state.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,0BAA0B,EAA+E,MAAM,yBAAyB,CAAC;AAG7J,OAAO,EAAE,qBAAqB,EAAE,MAAM,+EAA+E,CAAC;AAEtH;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAG1B,YAAY,WAAoB;QAIzB,gBAAW,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,uBAAkB,GAAG,GAAG,EAAE,CAAC,cAAc,CAAC;QAC1C,kBAAa,GAAG,GAAc,EAAE,CAAC,UAAU,CAAC;QAL/C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CAKJ;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,SAA+C,EAAgB,EAAE;IACxG,yDAAyD;IACzD,IAAG,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE;QACjD,sFAAsF;QACtF,OAAO,IAAI,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;KAC9D;SAAM;QACH,MAAM,IAAI,KAAK,CAAC,8GAA8G,CAAC,CAAC;KACnI;AACL,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,KAAwB,EAAE,GAAmB;IACrF,MAAM,YAAY,GAAa,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QAClH,CAAC,CAAC,CAAC,mDAAmD,CAAC,CAAC;IAE5D,MAAM,YAAY,GAAG,MAAM,qBAAqB,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;IACvF,OAAO,YAAY,CAAC;AACxB,CAAC;AAED;;;;GAIG;AACH,eAAe,0BAA0B,CAAiB;IACtD,EAAE,EAAE,6DAA6D;IACjE,MAAM,EAA2B,qBAAqB;IACtD,KAAK,EAAE,0BAA0B;CACpC,CAAC,CAAC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { FeatureState } from '@msdyn365-commerce/retail-proxy';\n\nimport { getFeatureStatesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\n/**\n *  Input class for the getFeatureState data action\n */\nexport class FeatureStateInput implements IActionInput {\n    public featureName?: string;\n\n    constructor(featureName?: string) {\n        this.featureName = featureName;\n    }\n\n    public getCacheKey = () => `${this.featureName}`;\n    public getCacheObjectType = () => 'FeatureState';\n    public dataCacheType = (): CacheType => 'instance';\n}\n\n/**\n * createInput method for the getFeatureState method\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetFeatureStateInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    // Ensure your module has a config property 'featureName'\n    if(inputData.config && inputData.config.featureName) {\n        // Create and return an input for the data action using the module configuration data.\n        return new FeatureStateInput(inputData.config.featureName);\n    } else {\n        throw new Error(`Default data definition for a feature check must also include config parameter \"featureName\" in your module.`);\n    }\n};\n\n/**\n * The action method for the getFeatureState data action\n * @param input The action input\n * @param ctx The action context\n */\nexport async function getFeatureStateAction(input: FeatureStateInput, ctx: IActionContext): Promise<FeatureState[]> {\n    const featureNames: string[] = input.featureName ? input.featureName.split(\",\").map(featureName => featureName.trim())\n        : ['Dynamics.AX.Application.RetailB2BEcommerceFeature'];\n\n    const featureState = await getFeatureStatesAsync({ callerContext: ctx }, featureNames);\n    return featureState;\n}\n\n/**\n * The getFeatureState data action\n * Gets the feature state via the read RetailServer API\n * Returns address information associated with the retrieved customer\n */\nexport default createObservableDataAction<FeatureState[]>({\n    id: '@msdyn365-commerce-modules/retail-actions/get-feature-state',\n    action: <IAction<FeatureState[]>>getFeatureStateAction,\n    input: createGetFeatureStateInput\n});\n"]}