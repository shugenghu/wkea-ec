import { createObservableDataAction } from '@msdyn365-commerce/core';
import { CurrentCategoryInput } from './get-current-category';
import getFullProducts, { FullProductInput } from './get-full-products';
import getProductsByCategory, { ProductsByCategoryInput } from './get-products-by-category';
import { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';
import { buildCacheKey, getProductDetailsCriteriaFromActionInput } from './utilities/utils';
/**
 * Product by category ID Input action
 */
export class FullProductsByCategoryInput {
    constructor(category, apiSettings, queryResultSettingsProxy, criteria) {
        this.getCacheKey = () => buildCacheKey(`${this.currentCategory.getCacheKey()}|${this.queryResultSettingsProxy.cacheKeyHint}|${this.ProductDetailsCriteria.getPrice}`, this.apiSettings);
        this.getCacheObjectType = () => 'Full-Products-From-Category-Search';
        this.dataCacheType = () => 'application';
        this.currentCategory = category;
        this.queryResultSettingsProxy = queryResultSettingsProxy;
        this.apiSettings = apiSettings;
        this.ProductDetailsCriteria = criteria;
        this.catalogId = apiSettings.catalogId;
    }
}
/**
 * Creates the input required to make the retail api call
 */
export const createGetFullProductsByCategoryInput = (inputData) => {
    if (inputData && inputData.requestContext) {
        const currentCategory = new CurrentCategoryInput(inputData.requestContext);
        const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);
        const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);
        return new FullProductsByCategoryInput(currentCategory, inputData.requestContext.apiSettings, queryResultSettingsProxy, productDetailsCriteria);
    }
    throw new Error('Please specify categoryId query string in request.');
};
/**
 * Calls the get-products-by-category action and then call GetFullProducts data actoin to get detail products.
 */
export async function getFullProductsByCategoryAction(input, ctx) {
    if (!input || !input.currentCategory) {
        ctx.trace('[getFullProductsByCategoryAction] Unable to find correct category input');
        return [];
    }
    const { apiSettings } = ctx.requestContext;
    const productsByCategoryInput = new ProductsByCategoryInput(input.currentCategory, ctx.requestContext.apiSettings, input.queryResultSettingsProxy);
    // Get the product ids from search result
    const productSearchResult = await getProductsByCategory(productsByCategoryInput, ctx);
    const fullProductInputs = [];
    productSearchResult.forEach((searchResult) => {
        if (searchResult.RecordId !== undefined) {
            fullProductInputs.push(new FullProductInput(searchResult.RecordId, apiSettings, input.ProductDetailsCriteria));
        }
    });
    if (fullProductInputs.length > 0) {
        return getFullProducts(fullProductInputs, ctx);
    }
    else {
        return {};
    }
}
export default createObservableDataAction({
    id: 'get-full-products-by-category',
    action: getFullProductsByCategoryAction,
    input: createGetFullProductsByCategoryInput
});
//# sourceMappingURL=get-full-products-by-category.js.map