import { createObservableDataAction } from '@msdyn365-commerce/core';
import { generateProductImageUrl, getSelectedProductIdFromActionInput } from './utilities/utils';
import { getByIdAsync, getVariantsByDimensionValuesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
/**
 * Get selected variant action input class
 */
export class SelectedVariantInput {
    constructor(productId, channelId, matchingDimensionValues) {
        this.getCacheKey = () => `SelectedVariant`;
        this.getCacheObjectType = () => 'SimpleProduct';
        this.dataCacheType = () => 'none';
        this.productId = productId;
        this.channelId = channelId;
        this.matchingDimensionValues = matchingDimensionValues || [];
    }
}
/**
 * CreateInput method for the getSelectedVariant data action
 * @param inputData The input data passed to the createInput method
 */
const createInput = (inputData) => {
    const productId = getSelectedProductIdFromActionInput(inputData);
    if (productId) {
        return new SelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId, []);
    }
    else {
        throw new Error('Unable to create SelectedVariantInput, no productId found on module config or query');
    }
};
/**
 * Action method for the getSelectedVariant data aciton
 * @param input The action input class
 * @param ctx The action context
 */
async function getSelectedVariantAction(input, ctx) {
    let product = null;
    const response = await getByIdAsync({ callerContext: ctx }, input.productId, input.channelId);
    const baseProduct = Array.isArray(response) ? response[0] : response;
    // Need to dereference this before editing it. Otherwise we might not
    // properly get the mobx events because if things aren't properly observable
    // they won't fire when you set them, and then if you don't deref the value in
    // the cache will match the value when you try to save it, so it won't detect any
    // changes there either
    product = { ...baseProduct };
    if (product) {
        let baseProductHadUnmatchedDimension = false;
        if (product.Dimensions) {
            product.Dimensions.map(dimension => {
                const matchedTargetDimension = input.matchingDimensionValues.find(targetDimension => targetDimension.DimensionTypeValue === dimension.DimensionTypeValue);
                if (matchedTargetDimension) {
                    dimension.DimensionValue = matchedTargetDimension.DimensionValue;
                }
                else {
                    baseProductHadUnmatchedDimension = true;
                }
            });
        }
        if (!baseProductHadUnmatchedDimension && input.matchingDimensionValues.length > 0) {
            const variants = await getVariantsByDimensionValuesAsync({ callerContext: ctx, queryResultSettings: {} }, baseProduct.RecordId, input.channelId, input.matchingDimensionValues);
            if (variants && variants.length > 0) {
                product = variants[0];
            }
        }
        const newImageUrl = generateProductImageUrl(product, ctx.requestContext.apiSettings);
        if (newImageUrl) {
            product.PrimaryImageUrl = newImageUrl;
        }
    }
    return product;
}
/**
 * The complete getSelectedVariant data action
 */
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-selected-variant',
    action: getSelectedVariantAction,
    input: createInput
});
//# sourceMappingURL=get-selected-variant.js.map