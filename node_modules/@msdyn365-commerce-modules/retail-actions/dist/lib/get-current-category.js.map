{"version":3,"file":"get-current-category.js","sourceRoot":"","sources":["../../src/get-current-category.ts"],"names":[],"mappings":"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","sourcesContent":["import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, getParameterizeFeatureFlags, IAction, IActionInput, ICommerceApiSettings, IParameterizeFeatureFlags } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric, IRequestContext } from '@msdyn365-commerce/core';\nimport { buildCacheKey } from '.';\nimport getCategoryHierarchy, { CategoriesInput } from './get-categories-hierarchy';\nimport { parameterize } from './utilities/Url-builder';\n\n/**\n * Input class for GetCurrentCategory data action\n */\nexport class CurrentCategoryInput implements IActionInput {\n    public categoryId?: number;\n    public categorySlug?: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(context: IRequestContext) {\n        let categoryId;\n        let categorySlug;\n        if (context.query && context.query.categoryId) {\n            categoryId = Number(context.query.categoryId);\n\n            if (Number.isNaN(categoryId)) {\n                throw new Error('Failed to cast category id into a number.');\n            }\n        // @ts-ignore: RecordId URLToken not typed yet\n        } else if (context.urlTokens && context.urlTokens.recordId) {\n        // @ts-ignore: RecordId URLToken not typed yet\n            categoryId = Number(context.urlTokens.recordId);\n            if (Number.isNaN(categoryId)) {\n                throw new Error('Failed to cast category id into a number.');\n            }\n        } else if (context.urlTokens && context.urlTokens.categories && context.urlTokens.categories.length) {\n            const categories: string[] = <string[]>(<unknown>context.urlTokens.categories);\n\n            if (!categories.length) {\n                throw new Error('Failed to get category name from urlTokens');\n            }\n            // TODO: fix getParameterizeFeatureFlags to take requestContext as input.\n            const tempActionContext = {\n                requestContext:context\n            }\n            categorySlug = `/${categories\n                .map(category => {\n                    // @ts-ignore TODO: fix getParameterizeFeatureFlags to take requestContext as an input\n                    const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlags(tempActionContext);\n                    return parameterize(category,undefined, parameterizeFeatureFlags);\n                })\n                .join('/')}`;\n        }\n        this.categoryId = categoryId;\n        this.categorySlug = categorySlug;\n        this.apiSettings = context.apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`${this.categoryId || this.categorySlug}`, this.apiSettings);\n    public getCacheObjectType = () => 'Current-Category';\n    public dataCacheType = (): CacheType => 'application';\n}\n\n/**\n * Creates a current category input from an ICreateActionContext\n */\nexport const createGetCurrentCategoryInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    if (inputData && inputData.requestContext) {\n        return new CurrentCategoryInput(inputData.requestContext);\n    }\n\n    throw new Error('Please specify categoryId query string in request.');\n};\n\n/**\n * Rescrusive Search Method to find a given category amongts a complete CategoryHierarcy\n * @param categories The current Category Hierarchy\n * @param categorySlug The category slug being searched for\n * @param categoryId The category Id being search for\n */\nexport function searchCategory(categories: CategoryHierarchy[], categorySlug?: string, categoryId?: number): CategoryHierarchy | undefined {\n    let foundCategory;\n    categories.forEach((cat: CategoryHierarchy) => {\n        if ((categoryId && cat.RecordId === categoryId) || (categorySlug && cat.Slug === categorySlug)) {\n            return (foundCategory = cat);\n        } else if (cat.Children && cat.Children.length) {\n            const matchingChild = searchCategory(cat.Children, categorySlug, categoryId);\n            if (matchingChild) {\n                foundCategory = matchingChild;\n            }\n        }\n    });\n    return foundCategory;\n}\n\n/**\n * Action method for the getCurrentCategory Data Action\n * @param input The action input class\n * @param ctx The action context\n */\nexport async function getCurrentCategoryAction(input: CurrentCategoryInput, ctx: IActionContext): Promise<CategoryHierarchy | undefined> {\n    if (input.categorySlug || input.categoryId) {\n        const categoryInput = new CategoriesInput(ctx.requestContext, true);\n        const categories = await getCategoryHierarchy(categoryInput, ctx);\n        if (!categories) {\n            ctx.trace('[getCurrentCategory] Unable to get categories from server');\n            return;\n        }\n\n        const category = searchCategory(categories, input.categorySlug, input.categoryId);\n        if (!category) {\n            ctx.trace('[getCurrentCategory] Unable to find category');\n            return;\n        }\n        return category;\n    }\n}\n\n/**\n * The getCurrentCategory data action\n * First makes a call to the getCategories RetailServer API\n * to get a list of every available category, then returns a CategoryHierarchy\n * based on the categoryId query param set in the URL of the request\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-current-category',\n    action: <IAction<CategoryHierarchy>>getCurrentCategoryAction,\n    input: createGetCurrentCategoryInput\n});\n"]}