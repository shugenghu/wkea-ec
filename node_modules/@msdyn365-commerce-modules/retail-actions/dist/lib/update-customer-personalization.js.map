{"version":3,"file":"update-customer-personalization.js","sourceRoot":"","sources":["../../src/update-customer-personalization.ts"],"names":[],"mappings":"AAAA,OAAO,EACQ,0BAA0B,EAExC,MAAM,yBAAyB,CAAC;AAEjC,OAAO,EACH,SAAS,EAAE,WAAW,EACzB,MAAM,yEAAyE,CAAC;AAEjF,OAAO,EAAE,gBAAgB,EAAE,MAAM,gBAAgB,CAAC;AAClD,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AASxC;;GAEG;AACH,MAAM,OAAO,kCAAkC;IAM3C,YAAY,iBAAyB,EAAE,QAAiB,EAAE,WAAiC,EAAE,cAAuB;QAO7G,gBAAW,GAAG,GAAW,EAAE,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzF,uBAAkB,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC;QACtC,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAR3C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;CAKJ;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,mCAAmC,CAAC,KAA0C,EAAE,GAAmB;IACrH,MAAM,EAAE,iBAAiB,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC;IAE9D,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,iBAAiB,CAAC,CAAC;IAE5E,IAAI,CAAC,QAAQ,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC9C;IAED,MAAM,WAAW,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAC;IAEpC,QAAQ,cAAc,EAAE;QACpB,KAAK,cAAc;YACf,WAAW,CAAC,yBAAyB,GAAG,QAAQ,CAAC;YACjD,MAAM;QACV,KAAK,SAAS,CAAC;QACf,KAAK,iBAAiB,CAAC;QACvB;YACI,WAAW,CAAC,qBAAqB,GAAG,QAAQ,CAAC;KACpD;IAED,MAAM,eAAe,GAAG,MAAM,WAAW,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC;IAE/E,IAAI,CAAC,eAAe,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAChD;IAED,GAAG,CAAC,MAAM,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,eAAe,CAAC,CAAC;IAElF,OAAO,eAAe,CAAC;AAC3B,CAAC;AAED;;;GAGG;AACH,eAAe,0BAA0B,CAAW;IAChD,EAAE,EAAE,2EAA2E;IAC/E,MAAM,EAAqB,mCAAmC;CACjE,CAAC,CAAC","sourcesContent":["import {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput,\n    ICommerceApiSettings\n} from '@msdyn365-commerce/core';\nimport { Customer } from '@msdyn365-commerce/retail-proxy';\nimport {\n    readAsync, updateAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';\n\nimport { GetCustomerInput } from './get-customer';\nimport { buildCacheKey } from './index';\n\nexport interface IUpdateCustomerPersonalizationInput extends IActionInput {\n    isOptOut: boolean;\n    userAccountNumber: string;\n    apiSettings: ICommerceApiSettings;\n    preferenceType?: string;\n}\n\n/**\n *  Input class for the updateCustomerPersonalization\n */\nexport class updateCustomerPersonalizationInput implements IUpdateCustomerPersonalizationInput {\n    public userAccountNumber: string;\n    public isOptOut: boolean;\n    public apiSettings: ICommerceApiSettings;\n    public preferenceType: string | undefined;\n\n    constructor(userAccountNumber: string, isOptOut: boolean, apiSettings: ICommerceApiSettings, preferenceType?: string) {\n        this.userAccountNumber = userAccountNumber;\n        this.apiSettings = apiSettings;\n        this.isOptOut = isOptOut;\n        this.preferenceType = preferenceType;\n    }\n\n    public getCacheKey = (): string => buildCacheKey(`${this.userAccountNumber}`, this.apiSettings);\n    public getCacheObjectType = () => 'Customer';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * The action method for the updateCustomerPersonalization data action\n * @param input The action input\n * @param ctx The action context\n */\nexport async function updateCustomerPersonalizationAction(input: IUpdateCustomerPersonalizationInput, ctx: IActionContext): Promise<Customer> {\n    const { userAccountNumber, isOptOut, preferenceType } = input;\n\n    const customer = await readAsync({ callerContext: ctx }, userAccountNumber);\n\n    if (!customer) {\n        throw new Error('Unable to find customer');\n    }\n\n    const newCustomer = { ...customer };\n\n    switch (preferenceType) {\n        case 'web-tracking':\n            newCustomer.OptOutWebActivityTracking = isOptOut;\n            break;\n        case undefined:\n        case 'personalization':\n        default:\n            newCustomer.OptOutPersonalization = isOptOut;\n    }\n\n    const updatedCustomer = await updateAsync({ callerContext: ctx }, newCustomer);\n\n    if (!updatedCustomer) {\n        throw new Error('Unable to update customer');\n    }\n\n    ctx.update(new GetCustomerInput(ctx.requestContext.apiSettings), updatedCustomer);\n\n    return updatedCustomer;\n}\n\n/**\n * The updateCustomerPersonalization data action\n * Returns the updated customer\n */\nexport default createObservableDataAction<Customer>({\n    id: '@msdyn365-commerce-modules/retail-actions/update-customer-personalization',\n    action: <IAction<Customer>>updateCustomerPersonalizationAction\n});\n"]}