import { getPaginatedOrderTemplateLinesAction, GetPaginatedOrderTemplateLinesInput } from './get-paginated-order-template-lines';
import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getCartState } from '@msdyn365-commerce/global-state';
import { addCartLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
/**
 *  Input class for the AddOrderTemplateToCart data action.
 */
export class AddOrderTemplateToCartInput {
    constructor(orderTemplateId) {
        this.getCacheKey = () => 'AddOrderTemplateToCartInput';
        this.getCacheObjectType = () => 'AddOrderTemplateToCartInput';
        this.dataCacheType = () => 'none';
        this.orderTemplateId = orderTemplateId;
    }
}
/**
 * createInput method for the AddOrderTemplateToCart method.
 * @param {ICreateActionContext} inputData The input data passed to the createInput method.
 * @param {string} orderTemplateId The id of template.
 */
export const addOrderTemplateToCartInput = (inputData, orderTemplateId) => {
    const { requestContext } = inputData;
    if (!requestContext.user.isAuthenticated) {
        throw new Error('Unable to create order template. User is not authenticated.');
    }
    return new AddOrderTemplateToCartInput(orderTemplateId);
};
/**
 * The action method for the AddOrderTemplateToCart data action.
 * @param {AddOrderTemplateToCartInput} input The action input.
 * @param {IActionContext} ctx The action context.
 */
export async function addOrderTemplateToCartAction(input, context) {
    const cartState = await getCartState(context);
    const chunkCount = 1000;
    const queryResultSettings = {
        Paging: {
            Top: chunkCount,
            Skip: 0
        }
    };
    const getPaginatedOrderTemplateLinesInput = new GetPaginatedOrderTemplateLinesInput(input.orderTemplateId, queryResultSettings);
    let orderTemplateLines = await getPaginatedOrderTemplateLinesAction(getPaginatedOrderTemplateLinesInput, context);
    let addedCartLines = [];
    for (let skip = chunkCount; orderTemplateLines.lines.length !== 0; skip += chunkCount) {
        const cartLines = orderTemplateLines.lines.map(productLine => {
            // tslint:disable-next-line:no-unnecessary-local-variable
            const cartLine = {
                ItemId: productLine.fullProduct?.ProductDetails.ItemId,
                ProductId: productLine.productListLine.ProductId,
                Quantity: productLine.productListLine.Quantity,
                TrackingId: '',
                UnitOfMeasureSymbol: productLine.productListLine.UnitOfMeasure
            };
            return cartLine;
        });
        await addCartLinesAsync({ callerContext: context }, cartState.cart.Id, cartLines, cartState.cart.Version).catch(error => {
            context.telemetry.trace(error);
            context.telemetry.trace('Unable to add order template to cart.');
            throw error;
        });
        addedCartLines = addedCartLines.concat(cartLines);
        getPaginatedOrderTemplateLinesInput.queryResultSettings.Paging.Skip = skip;
        orderTemplateLines = await getPaginatedOrderTemplateLinesAction(getPaginatedOrderTemplateLinesInput, context);
    }
    await cartState.refreshCart({});
    return addedCartLines;
}
/**
 * The AddOrderTemplateToCart Data Action.
 * Returns created order template.
 */
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/order-templates/add-order-template-to-cart',
    action: addOrderTemplateToCartAction,
    input: addOrderTemplateToCartInput
});
//# sourceMappingURL=add-order-template-to-cart.js.map