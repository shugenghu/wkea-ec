import { createObservableDataAction } from '@msdyn365-commerce/core';
import { convertToString } from '@msdyn365-commerce/retail-proxy';
import { getProductListLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';
import { FullProductInput, getFullProducts, getProductDetailsCriteriaFromActionInput, QueryResultSettingsProxy } from '..';
import { OrderTemplateLine } from '../utilities/order-templates';
/**
 *  Input class for the GetOrderTemplates data action
 */
export class GetPaginatedOrderTemplateLinesInput {
    constructor(orderTemplateId, queryResultSettings, searchText) {
        this.getCacheKey = () => `GetPaginatedOrderTemplateLines|${this.orderTemplateId}|${convertToString(this.queryResultSettings)}|${this.searchText}`;
        this.getCacheObjectType = () => 'GetPaginatedOrderTemplateLines';
        this.dataCacheType = () => 'none';
        this.orderTemplateId = orderTemplateId;
        this.queryResultSettings = queryResultSettings;
        this.searchText = searchText || '';
    }
}
/**
 * createInput method for the GetOrderTemplate method
 * @param inputData The input data passed to the createInput method.
 */
export const createGetPaginatedOrderTemplateLinesInput = (inputData, orderTemplateId, searchText) => {
    const queryResultSettings = QueryResultSettingsProxy.fromInputData(inputData).QueryResultSettings;
    queryResultSettings.count = true;
    return new GetPaginatedOrderTemplateLinesInput(orderTemplateId, queryResultSettings, searchText);
};
/**
 * The action method for the GetPaginatedOrderTemplateLines data action
 * @param input The action input
 * @param context The action context
 */
export async function getPaginatedOrderTemplateLinesAction(input, context) {
    if (!context.requestContext.user.isAuthenticated) {
        throw new Error('Unable to get full order templates. User is not authenticated.');
    }
    const orderTemplateLinesState = {
        lines: [],
        totalCount: 0
    };
    const promise = getProductListLinesAsync({
        callerContext: context, queryResultSettings: input.queryResultSettings
    }, input.orderTemplateId, input.searchText); // tslint:disable-line:align
    const productListLines = await promise;
    const productInputs = [];
    if (productListLines && productListLines.length > 0) {
        orderTemplateLinesState.totalCount = promise.metadata.count || orderTemplateLinesState.lines.length;
        productListLines.forEach((listLine) => {
            if (listLine.ProductId) {
                orderTemplateLinesState.lines.push(new OrderTemplateLine(listLine));
                productInputs.push(new FullProductInput(listLine.ProductId, context.requestContext.apiSettings, getProductDetailsCriteriaFromActionInput(context)));
            }
        });
        if (productInputs.length > 0) {
            const fullProductsInfo = await getFullProducts(productInputs, context)
                .then((products) => {
                if (products) {
                    return products;
                }
                else {
                    return [];
                }
            })
                .catch(error => {
                context.trace(error);
                context.telemetry.error(error.message);
                throw new Error('[getPaginatedOrderTemplateLinesAction]Unable to retrieve product info');
            });
            orderTemplateLinesState.lines.forEach(line => {
                const fullProduct = fullProductsInfo.find(product => product.ProductDetails.RecordId === line.productListLine.ProductId);
                if (!fullProduct) {
                    throw new Error('Unable to find product info for an order template line');
                }
                line.fullProduct = fullProduct;
            });
            return orderTemplateLinesState;
        }
        context.trace(orderTemplateLinesState.lines.length.toString());
        return orderTemplateLinesState;
    }
    return orderTemplateLinesState;
}
/**
 * The GetPaginatedOrderTemplateLines Data Action
 * Returns order templates
 */
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/order-templates/get-paginated-order-template-lines',
    action: getPaginatedOrderTemplateLinesAction,
    input: createGetPaginatedOrderTemplateLinesInput
});
//# sourceMappingURL=get-paginated-order-template-lines.js.map