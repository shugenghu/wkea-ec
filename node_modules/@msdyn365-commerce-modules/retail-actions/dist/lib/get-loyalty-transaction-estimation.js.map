{"version":3,"file":"get-loyalty-transaction-estimation.js","sourceRoot":"","sources":["../../src/get-loyalty-transaction-estimation.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICommerceApiSettings, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { Cart, ChannelConfiguration, LoyaltyCard, LoyaltyPointRedemptionEstimate } from '@msdyn365-commerce/retail-proxy';\nimport { getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { getOrgUnitConfigurationAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { getLoyalty,  GetLoyaltyCardInput } from './index';\nimport { buildCacheKey } from './index';\n\n/**\n *  Input class for the getLoyaltyCard data action\n */\nexport class GetLoyaltyTransactionEstimationInput implements IActionInput {\n    public userAccountNumber?: string;\n    public apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings, userAccountNumber?: string) {\n        this.userAccountNumber = userAccountNumber;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`GetLoyaltyCardTransactionEstimation-${this.userAccountNumber}`, this.apiSettings);\n    public getCacheObjectType = () => 'GetLoyaltyCardTransactionEstimation';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * createInput method for the getLoyaltyCard method\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetLoyaltyTransactionEstimationInput = (inputData: ICreateActionContext): GetLoyaltyTransactionEstimationInput => {\n    const { requestContext } = inputData;\n    if (!requestContext.user.isAuthenticated) {\n        return new GetLoyaltyTransactionEstimationInput(inputData.requestContext.apiSettings);\n    }\n\n    return new GetLoyaltyTransactionEstimationInput(inputData.requestContext.apiSettings);\n};\n\n/**\n * The action method for the getLoyaltyCard data action\n * @param input The action input\n * @param ctx The action context\n */\nexport async function getLoyaltyTransactionEstimationAction(input: GetLoyaltyTransactionEstimationInput, ctx: IActionContext): Promise<LoyaltyPointRedemptionEstimate> {\n\n    if (! ctx.requestContext.user.isAuthenticated) {\n        return <LoyaltyPointRedemptionEstimate>{};\n    }\n\n    const promises: [Promise<Cart>,Promise<LoyaltyCard>, Promise<ChannelConfiguration>] = [ _getCart(ctx), _getLoyalty(input, ctx), _getOrgUnits(ctx) ];\n    return Promise.all(promises)\n        .then((result) => {\n            if(result && result.length >=2 && result[1].CardNumber)\n            {\n            return getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync({ callerContext: ctx }, result[0].Id, result[1].CardNumber!, result[2].Currency || '')\n                .then(points => {\n                    return points;\n                })\n                .catch(e => {\n                    ctx.telemetry.exception(e);\n                    ctx.telemetry.debug(`Error getting Loyalty Point Redemption Estimate`);\n                    throw new Error('Error getting Loyalty Point Redemption Estimate');\n                });\n            }\n            return <LoyaltyPointRedemptionEstimate>{};\n        })\n        .catch(e => {\n            return <LoyaltyPointRedemptionEstimate>{};\n        });\n}\n\nasync function _getCart(ctx: IActionContext): Promise<Cart> {\n    const cartState = await getCartState(ctx);\n\n    return cartState.cart;\n}\n\nasync function _getLoyalty(input: GetLoyaltyTransactionEstimationInput, ctx: IActionContext): Promise<LoyaltyCard> {\n    const loyaltyCardInput = new GetLoyaltyCardInput(input.apiSettings);\n    return getLoyalty(loyaltyCardInput, ctx);\n}\n\nasync function _getOrgUnits(ctx: IActionContext): Promise<ChannelConfiguration> {\n    return getOrgUnitConfigurationAsync({callerContext: ctx, queryResultSettings: {}});\n}\n\n/**\n * The getLoyaltyTransactionEstimation data action\n * Returns the loyalty card belonging to the customer\n */\nexport default createObservableDataAction<LoyaltyCard>({\n    id: '@msdyn365-commerce-modules/retail-actions/get-loyalty-transaction-estimation',\n    action: <IAction<LoyaltyCard>>getLoyaltyTransactionEstimationAction,\n    input: <(args: ICreateActionContext) => IActionInput>createGetLoyaltyTransactionEstimationInput\n});\n"]}