import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getByIdsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
import { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';
import { buildCacheKey, generateProductImageUrl } from './utilities/utils';
/**
 * Product Input
 */
export class ProductInput {
    constructor(productId, apiSettings, channelId) {
        this.getCacheKey = () => buildCacheKey(`RecordId-${this.productId.toString()}-ChannelId-${this.channelId.toString()}`, this.apiSettings);
        this.getCacheObjectType = () => 'SimpleProduct';
        this.dataCacheType = () => 'application';
        this.apiSettings = apiSettings;
        this.productId = +productId;
        this.channelId = channelId || apiSettings.channelId;
    }
}
/**
 * Creates the input required to make the retail api call
 */
export const createSimpleProductsInput = (inputData) => {
    let productIds = inputData.config && inputData.config.productIds;
    if (!productIds) {
        return [];
    }
    productIds = typeof productIds === 'string' ? productIds.split(',') : productIds;
    return !Array.isArray(productIds)
        ? []
        : productIds.map((productId) => {
            return new ProductInput(productId, inputData.requestContext.apiSettings);
        });
};
/**
 * Calls the Retail API and returns the product based on the passed ProductInput
 */
export async function getSimpleProductsAction(inputs, ctx) {
    if (!Array.isArray(inputs) || inputs.length === 0) {
        ctx.trace('[getSimpleProductsAction] Invalid or empty inputs passed.');
        return [];
    }
    const productIdMapping = {};
    const productIds = inputs.map((input, idx) => {
        productIdMapping[input.productId] = idx;
        return input.productId;
    });
    return getByIdsAsync({ callerContext: ctx, queryResultSettings: QueryResultSettingsProxy.getDefault().QueryResultSettings }, inputs[0].channelId, productIds).then(products => {
        const mappedProducts = products.map(product => {
            try {
                const newImageUrl = generateProductImageUrl(product, ctx.requestContext.apiSettings);
                if (newImageUrl) {
                    product.PrimaryImageUrl = newImageUrl;
                }
                return product;
            }
            catch (e) {
                ctx.trace('[getSimpleProductsAction] Unable to update ImageURL for Product');
            }
        })
            .reduce((memo, product) => {
            if (!product) {
                return memo;
            }
            const idx = productIdMapping[product.RecordId];
            memo[idx] = product;
            return memo;
        }, []);
        // NOTE: <ZAFINE> This is not an ideal fix, but will resolve all current issues
        return inputs.map(input => {
            const foundProduct = mappedProducts.find(product => product && product.RecordId === input.productId);
            return foundProduct || {};
        });
    });
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-simple-products',
    action: getSimpleProductsAction,
    input: createSimpleProductsInput,
    isBatched: true
});
//# sourceMappingURL=get-simple-products.js.map