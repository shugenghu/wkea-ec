{"version":3,"file":"get-products-by-category.js","sourceRoot":"","sources":["../../src/get-products-by-category.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, IAction, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductSearchResult, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport getCurrentCategory, { CurrentCategoryInput } from './get-current-category';\nimport getProducts, { ProductInput } from './get-simple-products';\n\nimport { searchByCategoryAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\nimport { buildCacheKey } from './utilities/utils';\n\n/**\n * Product by category ID Input action\n */\nexport class ProductsByCategoryInput implements IActionInput {\n    public categoryId?: number;\n    public categorySlug?: string;\n    public categoryName?: string;\n    public catalogId: number;\n    public currentCategory: CurrentCategoryInput;\n    public readonly queryResultSettingsProxy: QueryResultSettingsProxy;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(category: CurrentCategoryInput, apiSettings: ICommerceApiSettings, queryResultSettingsProxy: QueryResultSettingsProxy) {\n        this.apiSettings = apiSettings;\n        this.currentCategory = category;\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.catalogId = apiSettings.catalogId;\n        this.categoryId = category.categoryId;\n        this.categorySlug = category.categorySlug;\n    }\n\n    public getCacheKey = () => buildCacheKey(`${this.categoryId || this.categorySlug}|${this.catalogId}|${this.queryResultSettingsProxy.cacheKeyHint}`, this.apiSettings);\n    public getCacheObjectType = () => 'Products-From-Search';\n    public dataCacheType = (): CacheType => 'application';\n}\n\n/**\n * createInput method for the getProductsByCategory data aciton\n */\nexport const createGetProductsByCategoryInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    if (inputData && inputData.requestContext) {\n        const currentCategory = new CurrentCategoryInput(inputData.requestContext);\n        const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);\n        return new ProductsByCategoryInput(\n            currentCategory,\n            inputData.requestContext.apiSettings,\n            queryResultSettingsProxy\n        );\n    }\n\n    throw new Error('Please specify categoryId query string in request.');\n};\n\n/**\n * Action method for the getProductsByCategory data action\n */\nexport async function getProductsByCategoryAction(input: ProductsByCategoryInput, ctx: IActionContext): Promise<SimpleProduct[]> {\n    const { apiSettings } = ctx.requestContext;\n    let categoryId = input.currentCategory.categoryId;\n    if (input.currentCategory.categorySlug && !categoryId) {\n        const category = await getCurrentCategory(input.currentCategory, ctx);\n        if (!category) {\n            ctx.trace('[getProductsByCategoryAction] Unable to find category');\n            return <SimpleProduct[]>[];\n        }\n        categoryId = category.RecordId;\n    }\n\n    const productInputs = await searchByCategoryAsync(\n        { callerContext: ctx, queryResultSettings: input.queryResultSettingsProxy.QueryResultSettings },\n        +apiSettings.channelId,\n        input.catalogId,\n        categoryId || 0\n    ).then(productSearchResults => {\n        return productSearchResults.map(\n            (product: ProductSearchResult): ProductInput => {\n                return new ProductInput(product.RecordId, apiSettings);\n            }\n        );\n    });\n\n    if (productInputs.length > 0) {\n        return <SimpleProduct[]>await getProducts(productInputs, ctx);\n    } else {\n        return <SimpleProduct[]>[];\n    }\n}\n\n/**\n * The getProductsByCategory data action\n * Retrieves the current category of the request via the getCurrentCategory data action\n * Then calls the searchByCategory RetailServer API to get a list of products associated with\n * the current category, and finally fully hydrates the data for those prodcuts via the\n * getProducts data action, returning a list of SimpleProducts within the current category.\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-products-by-category',\n    action: <IAction<SimpleProduct[]>>getProductsByCategoryAction,\n    input: createGetProductsByCategoryInput\n});\n"]}