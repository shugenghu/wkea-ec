import { createObservableDataAction } from '@msdyn365-commerce/core';
import getFullProducts, { FullProductInput } from './get-full-products';
import { buildCacheKey, ensureSafeSearchText, getProductDetailsCriteriaFromActionInput } from './utilities/utils';
import { searchByTextAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
import { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';
/**
 * get-full-products-by-search-text data action input
 */
export class FullProductBySearchTextInput {
    constructor(searchText, criteria, queryResultSettingsProxy, apiSettings) {
        this.getCacheKey = () => buildCacheKey(`${this.searchText}-${this.queryResultSettingsProxy.cacheKeyHint}-${this.ProductDetailsCriteria.getPrice}`, this.apiSettings);
        this.getCacheObjectType = () => 'FullProductSearchByTextResults';
        this.dataCacheType = () => 'application';
        this.searchText = ensureSafeSearchText(searchText);
        this.ProductDetailsCriteria = criteria;
        this.queryResultSettingsProxy = queryResultSettingsProxy;
        this.apiSettings = apiSettings;
        this.channelId = apiSettings.channelId;
        this.catalogId = apiSettings.catalogId;
    }
}
/**
 * Creates the input required to make the retail api call
 *   Requires: query string ?q={searchText}
 */
export const createFullProductSearchByTextInput = (inputData) => {
    const searchText = inputData && inputData.requestContext && inputData.requestContext.query && inputData.requestContext.query.q;
    if (!searchText) {
        throw new Error('Unable to preform search without search text.  Query string ?q={searchText} must be present.');
    }
    const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);
    const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);
    return new FullProductBySearchTextInput(searchText, productDetailsCriteria, queryResultSettingsProxy, inputData.requestContext.apiSettings);
};
export async function fullProductSearchByTextAction(input, ctx) {
    if (!input || !input.searchText) {
        ctx.trace('[fullProductSearchByTextAction] Unable to find search term');
        return [];
    }
    const FullProductInputs = await searchByTextAsync({ callerContext: ctx, queryResultSettings: input.queryResultSettingsProxy.QueryResultSettings }, input.channelId, input.catalogId, input.searchText)
        .then((response) => {
        if (response) {
            return response.map((product) => {
                return new FullProductInput(product.RecordId, input.apiSettings, input.ProductDetailsCriteria);
            });
        }
        ctx.trace('[fullProductSearchByTextAction] Invalid response from server');
        return [];
    })
        .catch(err => {
        ctx.trace(`[fullProductSearchByTextAction] Error in getting response from server. ${err}`);
        ctx.telemetry.exception(err);
        ctx.telemetry.debug(`[fullProductSearchByTextAction] Error in getting response from server. ${err}`);
        return [];
    });
    if (FullProductInputs.length > 0) {
        return getFullProducts(FullProductInputs, ctx);
    }
    else {
        return {};
    }
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/get-full-products-search-by-text',
    action: fullProductSearchByTextAction,
    input: createFullProductSearchByTextInput
});
//# sourceMappingURL=get-full-products-search-by-text.js.map