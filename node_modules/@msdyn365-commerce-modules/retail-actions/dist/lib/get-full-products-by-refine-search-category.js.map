{"version":3,"file":"get-full-products-by-refine-search-category.js","sourceRoot":"","sources":["../../src/get-full-products-by-refine-search-category.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,0BAA0B,EAAwD,MAAM,yBAAyB,CAAC;AAE3H,OAAO,EAAE,2BAA2B,EAAE,MAAM,wEAAwE,CAAC;AACrH,OAAO,eAAe,EAAE,EAAE,gBAAgB,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAChG,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,wCAAwC,EAAE,MAAM,mBAAmB,CAAC;AAE7E;;GAEG;AACH,MAAM,OAAO,uCAAuC;IAQhD,YACI,wBAAkD,EAClD,UAAmB,EACnB,SAAkB,EAClB,kBAA0C,EAC1C,SAAkB,EAClB,QAAiC;QAW9B,gBAAW,GAAG,GAAG,EAAE,CAAC,8CAA8C,CAAC;QACnE,uBAAkB,GAAG,GAAG,EAAE,CAAC,yCAAyC,CAAC;QACrE,kBAAa,GAAG,GAAc,EAAE,CAAC,MAAM,CAAC;QAV3C,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;QACzD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,IAAI,EAAE,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC;IAC3C,CAAC;CAKJ;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,6CAA6C,GAAG,CAAC,SAA+C,EAAgB,EAAE;IAC3H,MAAM,kBAAkB,GAAG,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC;IACnF,MAAM,wBAAwB,GAAG,wBAAwB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACnF,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;QACpC,OAAO,IAAI,uCAAuC,CAAC,wBAAwB,CAAC,CAAC;KAChF;IAED,IAAI,SAAS,IAAI,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,EAAE;QACtH,MAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACrE,MAAM,SAAS,GAAG,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC;QACjE,MAAM,SAAS,GAAG,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC;QACjE,MAAM,sBAAsB,GAAG,wCAAwC,CAAC,SAAS,CAAC,CAAC;QACnF,OAAO,IAAI,uCAAuC,CAC9C,wBAAwB,EACxB,UAAU,EACV,CAAC,SAAS,EACV,kBAAkB,EAClB,SAAS,EACT,sBAAsB,CACzB,CAAC;KACL;IAED,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;AAC7G,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,2CAA2C,CAC7D,KAA8C,EAC9C,GAAmB;IAEnB,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;QACrC,GAAG,CAAC,KAAK,CAAC,8DAA8D,CAAC,CAAC;QAC1E,OAAuC,EAAE,CAAC;KAC7C;IAED,MAAM,gBAAgB,GAAG,KAAK,CAAC,wBAAwB,CAAC,mBAAmB;QACvE,KAAK,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,OAAO;QAC1D,KAAK,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO;QAClE,KAAK,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAClF,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,IAAI,CAAC,gBAAgB,EAAE;QACvD,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,iFAAiF,CAAC,CAAC;QACvG,OAAuC,EAAE,CAAC;KAC7C;IACD,MAAM,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,cAAc,CAAC;IAE3C,IAAI,kBAAkB,GAA0B,EAAE,CAAC;IACnD,MAAM,iBAAiB,GAAG,MAAM,2BAA2B,CACvD,EAAE,aAAa,EAAE,GAAG,EAAE,mBAAmB,EAAG,KAAK,CAAC,wBAAwB,CAAC,mBAAmB,EAAE,EAChG,KAAK,CAAC,SAAS,IAAI,CAAC,EACpB,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,UAAU,IAAI,CAAC,EACrB,KAAK,CAAC,kBAAkB,CACvB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;QACnB,kBAAkB,GAAG,KAAK,CAAC,kBAAkB,CAAC;QAC9C,OAAO,aAAa,CAAC,GAAG,CACpB,CAAC,OAA4B,EAAoB,EAAE;YAC/C,OAAO,IAAI,gBAAgB,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,EAAE,KAAK,CAAC,sBAAsB,IAAI,IAAI,sBAAsB,EAAE,CAAC,CAAC;QAC7H,CAAC,CACJ,CAAC;IACN,CAAC,CAAC,CAAC;IAEP,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9B,MAAM,aAAa,GAAG,MAA8B,eAAe,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QAC5F,OAAO;YACH,mBAAmB,EAAE,aAAa;YAClC,kBAAkB,EAAE,kBAAkB;SACzC,CAAC;KACL;SAAM;QACH,OAAO;YACH,mBAAmB,EAAE,EAAE;YACvB,kBAAkB,EAAE,kBAAkB;SACzC,CAAC;KACL;AACL,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,uFAAuF;IAC3F,MAAM,EAA2C,2CAA2C;IAC5F,KAAK,EAAE,6CAA6C;IACpD,SAAS,EAAE,KAAK;CACnB,CAAC,CAAC","sourcesContent":["import { FullProduct, IRefineFullProductSearchOutput } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductRefinerValue, ProductSearchResult } from '@msdyn365-commerce/retail-proxy';\nimport { refineSearchByCategoryAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from './get-full-products';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\nimport { getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\n/**\n * Refine search for full products input\n */\nexport class FullProductsRefineSearchByCategoryInput implements IActionInput {\n    public readonly categoryId?: number;\n    public readonly channelId?: number;\n    public readonly refinementCriteria: ProductRefinerValue[];\n    public readonly catalogId: number;\n    public ProductDetailsCriteria?: ProductDetailsCriteria;\n    public readonly queryResultSettingsProxy: QueryResultSettingsProxy;\n\n    constructor(\n        queryResultSettingsProxy: QueryResultSettingsProxy,\n        categoryId?: number,\n        channelId?: number,\n        refinementCriteria?: ProductRefinerValue[],\n        catalogId?: number,\n        criteria?: ProductDetailsCriteria\n\n    ) {\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.categoryId = categoryId;\n        this.channelId = channelId;\n        this.refinementCriteria = refinementCriteria || [];\n        this.catalogId = catalogId || 0;\n        this.ProductDetailsCriteria = criteria;\n    }\n\n    public getCacheKey = () => `FullProductsRefineSearchByCategoryInputCache`;\n    public getCacheObjectType = () => 'FullProductsRefineSearchByCategoryInput';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * Creates the input required to make the core action calls\n */\nexport const createFullProductsRefineSearchByCategoryInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    const refinementCriteria = inputData.config && inputData.config.refinementCriteria;\n    const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);\n    if (!Array.isArray(refinementCriteria)) {\n        return new FullProductsRefineSearchByCategoryInput(queryResultSettingsProxy);\n    }\n\n    if (inputData && inputData.requestContext && inputData.requestContext.query && inputData.requestContext.query.categoryId) {\n        const categoryId = Number(inputData.requestContext.query.categoryId);\n        const channelId = inputData.requestContext.apiSettings.channelId;\n        const catalogId = inputData.requestContext.apiSettings.catalogId;\n        const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n        return new FullProductsRefineSearchByCategoryInput(\n            queryResultSettingsProxy,\n            categoryId,\n            +channelId,\n            refinementCriteria,\n            catalogId,\n            productDetailsCriteria\n        );\n    }\n\n    throw new Error('Please specify categoryId, refinerId, and refinerSourceValue query string in request.');\n};\n\n/**\n * Calls the refine-search-by-category action.\n * Based on search result calls get-full-products to get all the product details.\n */\nexport async function getFullProductsByRefineSearchCategoryAction(\n    input: FullProductsRefineSearchByCategoryInput,\n    ctx: IActionContext\n): Promise<IRefineFullProductSearchOutput> {\n    if (!input || !input.refinementCriteria) {\n        ctx.trace('[getFullProductsByRefineSearchCategoryAction] Invalid input.');\n        return <IRefineFullProductSearchOutput>{};\n    }\n\n    const hasSortingColumn = input.queryResultSettingsProxy.QueryResultSettings &&\n        input.queryResultSettingsProxy.QueryResultSettings.Sorting &&\n        input.queryResultSettingsProxy.QueryResultSettings.Sorting.Columns &&\n        input.queryResultSettingsProxy.QueryResultSettings.Sorting.Columns.length > 0;\n    if (!input.refinementCriteria.length && !hasSortingColumn) {\n        ctx.telemetry.trace('[getFullProductsByRefineSearchCategoryAction] No refiners or sorting specified.');\n        return <IRefineFullProductSearchOutput>{};\n    }\n    const { apiSettings } = ctx.requestContext;\n\n    let refinementCriteria: ProductRefinerValue[] = [];\n    const fullProductInputs = await refineSearchByCategoryAsync(\n        { callerContext: ctx, queryResultSettings:  input.queryResultSettingsProxy.QueryResultSettings },\n        input.channelId || 0,\n        input.catalogId,\n        input.categoryId || 0,\n        input.refinementCriteria\n        ).then(searchResults => {\n            refinementCriteria = input.refinementCriteria;\n            return searchResults.map(\n                (product: ProductSearchResult): FullProductInput => {\n                    return new FullProductInput(product.RecordId, apiSettings, input.ProductDetailsCriteria || new ProductDetailsCriteria());\n                }\n            );\n        });\n\n    if (fullProductInputs.length > 0) {\n        const productResult = await <Promise<FullProduct[]>>getFullProducts(fullProductInputs, ctx);\n        return {\n            productSearchResult: productResult,\n            refinementCriteria: refinementCriteria\n        };\n    } else {\n        return {\n            productSearchResult: [],\n            refinementCriteria: refinementCriteria\n        };\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-full-products-by-refine-search-category',\n    action: <IAction<IRefineFullProductSearchOutput>>getFullProductsByRefineSearchCategoryAction,\n    input: createFullProductsRefineSearchByCategoryInput,\n    isBatched: false\n});\n"]}