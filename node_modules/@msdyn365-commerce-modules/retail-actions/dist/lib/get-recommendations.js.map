{"version":3,"file":"get-recommendations.js","sourceRoot":"","sources":["../../src/get-recommendations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAIhG,OAAO,EAAa,0BAA0B,EAAwG,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC3M,OAAO,eAAe,EAAE,EAAE,gBAAgB,EAA0B,MAAM,qBAAqB,CAAC;AAChG,OAAO,EAAE,aAAa,EAAE,wCAAwC,EAAE,MAAM,mBAAmB,CAAC;AAE5F;;GAEG;AACH,MAAM,OAAO,uBAAuB;IAahC,YAAY,qBAA6B,EAAE,UAAoB,EAAE,WAAsB,EAAE,kBAA0B,EAAE,SAAiB,EAAE,QAAgB,EAAE,QAAgC,EAAE,WAAiC;QA6CtN,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9E,uBAAkB,GAAG,GAAG,EAAE,CAAC,oBAAoB,CAAC;QAChD,kBAAa,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC;QA9C9C,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAE9B,IAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,MAAM,EAAE;YAC/C,IAAI,CAAC,mBAAmB,IAAI,GAAG,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC;SAC3D;aAAM;YACH,IAAI,CAAC,mBAAmB,IAAI,wBAAwB,CAAC;YACrD,UAAU,GAAG,EAAE,CAAC;SACnB;QAED,IAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC,MAAM,EAAE;YACjD,IAAI,CAAC,mBAAmB,IAAI,GAAG,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC;SAC5D;aAAM;YACH,IAAI,CAAC,mBAAmB,IAAI,yBAAyB,CAAC;YACtD,WAAW,GAAG,EAAE,CAAC;SACpB;QAED,IAAG,kBAAkB,EAAE;YACnB,IAAI,CAAC,mBAAmB,IAAI,GAAG,kBAAkB,CAAC,QAAQ,EAAE,GAAG,CAAC;SACnE;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC7D;QAED,IAAG,qBAAqB,EAAE;YACtB,IAAI,CAAC,mBAAmB,IAAI,GAAG,qBAAqB,CAAC,QAAQ,EAAE,GAAG,CAAC;SACtE;aAAM;YACH,IAAI,CAAC,mBAAmB,IAAI,mCAAmC,CAAC;YAChE,qBAAqB,GAAG,EAAE,CAAC;SAC9B;QAED,IAAI,CAAC,mBAAmB,IAAI,QAAQ,SAAS,IAAI,CAAC,GAAG,CAAC;QACtD,IAAI,CAAC,mBAAmB,IAAI,OAAO,QAAQ,IAAI,GAAG,EAAE,CAAC;QAErD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC;IAC3C,CAAC;CAKJ;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,SAA+C,EAAgB,EAAE;IAEzF,IAAI,SAAS,IAAI,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC,MAAM,EAAE;QAC3D,MAAM,qBAAqB,GAAG,SAAS,CAAC,MAAM,CAAC,4BAA4B;YACvE,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,qBAAqB;YACrD,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC;QAC7C,MAAM,kBAAkB,GAAG,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC;QAC/D,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtF,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACpF,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACzE,MAAM,sBAAsB,GAAG,wCAAwC,CAAC,SAAS,CAAC,CAAC;QAEnF,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;QAED,IAAI,CAAC,kBAAkB,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC5D;QAED,4EAA4E;QAC5E,MAAM,kBAAkB,GAAG,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC;QAC3E,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;YACxC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC7C,MAAM,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC5B,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;oBAClB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;iBAC1E;qBAAM;oBACH,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACvB;YACL,CAAC,CAAC,CAAC;SACN;QAED,8BAA8B;QAC9B,MAAM,mBAAmB,GAAG,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC;QAC7E,MAAM,WAAW,GAAa,EAAE,CAAC;QACjC,IAAI,OAAO,mBAAmB,KAAK,QAAQ,EAAE;YACzC,mBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC9C,MAAM,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC5B,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;oBAClB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;iBAC3E;qBAAM;oBACH,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACxB;YACL,CAAC,CAAC,CAAC;SACN;QAED,yFAAyF;QACzF,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE;YAC5E,IAAI,wBAAgC,CAAC;YACrC,wBAAwB,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC5E,IAAI,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,EAAE;gBACxC,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;aACpE;iBAAM;gBACH,UAAU,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;aAC7C;SACJ;QAED,OAAO,IAAI,uBAAuB,CAAC,qBAAqB,EAAE,UAAU,EAAE,WAAW,EAAE,kBAAkB,EAAE,SAAS,EAAE,QAAQ,EAAE,sBAAsB,EAAE,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;KAC7L;IAED,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,KAA8B,EAAE,GAAmB;IAC9F,MAAM,WAAW,GAAG,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC;IAEnD,yEAAyE;IACzE,2FAA2F;IAC3F,MAAM,UAAU,GAAG,GAAG,WAAW,CAAC,OAAO,6BAA6B,KAAK,CAAC,kBAAkB,CAAC,WAAW,EAAE,wBAAwB,KAAK,CAAC,SAAS,SAAS,KAAK,CAAC,QAAQ,kBAAkB,CAAC;IAC7L,MAAM,cAAc,GAAwB;QACxC,OAAO,EAAE,EAAE,GAAG,EAAE,WAAW,CAAC,GAAG,EAAE;QACjC,OAAO,EAAE,IAAI;KAChB,CAAC;IAEF,+DAA+D;IAC/D,sGAAsG;IACtG,kCAAkC;IAClC,MAAM,YAAY,GAAQ,EAAE,CAAC;IAE7B,IAAI,KAAK,CAAC,qBAAqB,IAAI,KAAK,CAAC,qBAAqB,KAAK,EAAE,EAAE;QACnE,4CAA4C;QAC5C,YAAY,CAAC,aAAa,CAAC,GAAG,uEAAuE,CAAC;QACtG,YAAY,CAAC,qBAAqB,GAAG,KAAK,CAAC,qBAAqB,CAAC;KACpE;IAED,+BAA+B;IAC/B,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC,EAAE;QACrB,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QACzC,4CAA4C;QAC5C,YAAY,CAAC,sBAAsB,CAAC,GAAG,QAAQ,CAAC;KACnD;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE;QAC9D,YAAY,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;QAC7C,4CAA4C;QAC5C,YAAY,CAAC,wBAAwB,CAAC,GAAG,oBAAoB,CAAC;KACjE;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE;QAC5D,YAAY,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QAC3C,4CAA4C;QAC5C,YAAY,CAAC,uBAAuB,CAAC,GAAG,oBAAoB,CAAC;KAChE;IAED,MAAM,WAAW,GAAG;QAChB,sBAAsB,EAAE,YAAY;KACvC,CAAC;IAEF,uCAAuC;IACvC,MAAM,mBAAmB,GAAG,MAAM,mBAAmB,CAAC,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC;SACjG,IAAI,CAAC,CAAC,QAAgC,EAAE,EAAE;QACvC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1D,OAAO,QAAQ,CAAC,IAAI,CAAC;SACxB;QACD,GAAG,CAAC,KAAK,CAAC,+DAA+D,CAAC,CAAC;QAC3E,OAAO,EAAE,CAAC;IACd,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAiB,EAAE,EAAE;QACzB,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;QAC5F,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,EAAE,CAAC;IACd,CAAC,CAAC,CAAC;IAEP,4BAA4B;IAC5B,IAAI,mBAAmB,CAAC,MAAM,IAAI,CAAC,EAAE;QACjC,OAAsB,EAAE,CAAC;KAC5B;IAED,uEAAuE;IACvE,MAAM,0BAA0B,GAAuB,EAAE,CAAC;IAE1D,mBAAmB,CAAC,OAAO,CAAC,CAAC,kBAAkB,EAAE,EAAE;QAC/C,gHAAgH;QAChH,IAAI,kBAAkB,CAAC,gBAAgB,KAAK,CAAC,IAAI,kBAAkB,CAAC,SAAS,EAAE;YAC3E,0BAA0B,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;SACxI;IACL,CAAC,CAAC,CAAC;IAEH,+CAA+C;IAC/C,IAAI,0BAA0B,CAAC,MAAM,GAAG,CAAC,EAAE;QACvC,OAAO,eAAe,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;KAC3D;SAAM;QACH,GAAG,CAAC,KAAK,CAAC,iGAAiG,CAAC,CAAC;QAC7G,OAAsB,EAAE,CAAC;KAC5B;AACL,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,EAAE,EAAE,+DAA+D;IACnE,MAAM,EAA0B,wBAAwB;IACxD,KAAK,EAAE,WAAW;CACrB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { IAction, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';\nimport { CacheType, createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric, IHTTPError, IHTTPRequestOptions, IHTTPResponse, sendCommerceRequest } from '@msdyn365-commerce/core';\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from './get-full-products';\nimport { buildCacheKey, getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\n/**\n * GetRecommendations Input Action\n */\nexport class GetRecommendationsInput implements IActionInput {\n    public readonly customerAccountNumber: string;\n    public readonly productIds: number[];\n    public readonly catalogId: number;\n    public readonly categoryIds: number[];\n    public readonly recommendationType: string;\n    public readonly skipItems: number;\n    public readonly maxItems: number;\n    public readonly channelId: number;\n    public readonly apiSettings: ICommerceApiSettings;\n    public ProductDetailsCriteria: ProductDetailsCriteria;\n    private constructedCacheKey: string;\n\n    constructor(customerAccountNumber: string, productIds: number[], categoryIds: number [], recommendationType: string, skipItems: number, maxItems: number, criteria: ProductDetailsCriteria, apiSettings: ICommerceApiSettings) {\n        this.constructedCacheKey = ``;\n\n        if(Array.isArray(productIds) && productIds.length) {\n            this.constructedCacheKey += `${productIds.toString()}|`;\n        } else {\n            this.constructedCacheKey += 'ProductIdsUnspecified|';\n            productIds = [];\n        }\n\n        if(Array.isArray(categoryIds) && categoryIds.length) {\n            this.constructedCacheKey += `${categoryIds.toString()}|`;\n        } else {\n            this.constructedCacheKey += 'categoryIdsUnspecified|';\n            categoryIds = [];\n        }\n\n        if(recommendationType) {\n            this.constructedCacheKey += `${recommendationType.toString()}|`;\n        } else {\n            throw new Error('Recommendation type is required input.');\n        }\n\n        if(customerAccountNumber) {\n            this.constructedCacheKey += `${customerAccountNumber.toString()}|`;\n        } else {\n            this.constructedCacheKey += 'customerAccountNumberUnspecified|';\n            customerAccountNumber = '';\n        }\n\n        this.constructedCacheKey += `skip-${skipItems || 0}|`;\n        this.constructedCacheKey += `top-${maxItems || 100}`;\n\n        this.apiSettings = apiSettings;\n        this.channelId = apiSettings.channelId;\n        this.customerAccountNumber = customerAccountNumber;\n        this.productIds = productIds;\n        this.catalogId = apiSettings.catalogId;\n        this.categoryIds = categoryIds;\n        this.recommendationType = recommendationType;\n        this.maxItems = maxItems;\n        this.skipItems = skipItems;\n        this.ProductDetailsCriteria = criteria;\n    }\n\n    public getCacheKey = () => buildCacheKey(this.constructedCacheKey, this.apiSettings);\n    public getCacheObjectType = () => `GetRecommendations`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call to get recommendations\n */\nexport const createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n\n    if (inputData && inputData.requestContext && inputData.config) {\n        const customerAccountNumber = inputData.config.includeCustomerAccountNumber\n            ? inputData.requestContext.user.customerAccountNumber\n            : inputData.config.customerAccountNumber;\n        const recommendationType = inputData.config.recommendationType;\n        const skipItems = inputData.config.skipItems ? Number(inputData.config.skipItems) : 0;\n        const maxItems = inputData.config.maxItems ? Number(inputData.config.maxItems) : 50;\n        const channelId = Number(inputData.requestContext.apiSettings.channelId);\n        const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n\n        if (Number.isNaN(channelId)) {\n            throw new Error('Input channel id is not a number.');\n        }\n\n        if (!recommendationType) {\n            throw new Error('Input recommendation type is invalid.');\n        }\n\n        // Get productids from input configuration and product id from query string.\n        const productIdsAsString = inputData.config && inputData.config.productIds;\n        const productIds: number[] = [];\n        if (typeof productIdsAsString === 'string') {\n            productIdsAsString.split(',').forEach(idString => {\n                const id = Number(idString);\n                if (Number.isNaN(id)) {\n                    throw new Error('Product id in module configuration is not a number.');\n                } else {\n                    productIds.push(id);\n                }\n            });\n        }\n\n        // Get category ids from input\n        const categoryIdsAsString = inputData.config && inputData.config.categoryIds;\n        const categoryIds: number[] = [];\n        if (typeof categoryIdsAsString === 'string') {\n            categoryIdsAsString.split(',').forEach(idString => {\n                const id = Number(idString);\n                if (Number.isNaN(id)) {\n                    throw new Error('Category id in module configuration is not a number.');\n                } else {\n                    categoryIds.push(id);\n                }\n            });\n        }\n\n        // if desired we can even add productId from query string to input configured product ids\n        if (inputData.requestContext.query && inputData.requestContext.query.productId) {\n            let productIdFromQueryString: number;\n            productIdFromQueryString = Number(inputData.requestContext.query.productId);\n            if (Number.isNaN(productIdFromQueryString)) {\n                throw new Error('Product id in querystring is is not a number.');\n            } else {\n                productIds.push(productIdFromQueryString);\n            }\n        }\n\n        return new GetRecommendationsInput(customerAccountNumber, productIds, categoryIds, recommendationType, skipItems, maxItems, productDetailsCriteria, inputData.requestContext.apiSettings);\n    }\n\n    throw new Error('Invalid input data or request context');\n};\n\n/**\n * Get recommended elements(products/contents) from RS\n */\nexport async function getRecommendationsAction(input: GetRecommendationsInput, ctx: IActionContext): Promise<FullProduct[]> {\n    const apiSettings = ctx.requestContext.apiSettings;\n\n    // Start building the call components to get recommended elements from RS\n    // {host}/Commerce/Recommendations('NEW')/GetElements?%24skip=0&%24top=1000&api-version=7.3\n    const requestUrl = `${apiSettings.baseUrl}Commerce/Recommendations('${input.recommendationType.toUpperCase()}')/GetElements?$skip=${input.skipItems}&$top=${input.maxItems}&api-version=7.3`;\n    const requestOptions: IHTTPRequestOptions = {\n        headers: { oun: apiSettings.oun },\n        timeout: 5000\n    };\n\n    // build the recommendation criteria object for request payload\n    // NOTE: Update to RecommendationCriteria type once entities package is updated to include Reco types.\n    // tslint:disable-next-line:no-any\n    const recoCriteria: any = {};\n\n    if (input.customerAccountNumber && input.customerAccountNumber !== '') {\n        // tslint:disable-next-line:prefer-type-cast\n        recoCriteria['@odata.type'] = '#Microsoft.Dynamics.Commerce.Runtime.DataModel.RecommendationCriteria';\n        recoCriteria.CustomerAccountNumber = input.customerAccountNumber;\n    }\n\n    // Exclude catalog 0 from calls\n    if (input.catalogId > 0) {\n        recoCriteria.CatalogId = input.catalogId;\n        // tslint:disable-next-line:prefer-type-cast\n        recoCriteria['CatalogId@odata.type'] = '#Int64';\n    }\n\n    if (Array.isArray(input.categoryIds) && input.categoryIds.length) {\n        recoCriteria.CategoryIds = input.categoryIds;\n        // tslint:disable-next-line:prefer-type-cast\n        recoCriteria['CategoryIds@odata.type'] = '#Collection(Int64)';\n    }\n\n    if (Array.isArray(input.productIds) && input.productIds.length) {\n        recoCriteria.ProductIds = input.productIds;\n        // tslint:disable-next-line:prefer-type-cast\n        recoCriteria['ProductIds@odata.type'] = '#Collection(Int64)';\n    }\n\n    const requestBody = {\n        recommendationCriteria: recoCriteria\n    };\n\n    // Get the recommended elements from RS\n    const recommendedElements = await sendCommerceRequest(requestUrl, 'post', requestBody, requestOptions)\n        .then((response: IHTTPResponse<unknown>) => {\n            if (Array.isArray(response.data) && response.data.length > 0) {\n                return response.data;\n            }\n            ctx.trace('[getRecommendedElementsAction] No recommended elements found.');\n            return [];\n        })\n        .catch((error: IHTTPError) => {\n            ctx.telemetry.error(`[getRecommendedElementsAction] Unable to Fetch recommended elements.`);\n            ctx.telemetry.exception(error);\n            return [];\n        });\n\n    // If no results, exit early\n    if (recommendedElements.length <= 0) {\n        return <FullProduct[]>[];\n    }\n\n    // Filter out product elements from recommended elements returned by RS\n    const recommendedProductElements: FullProductInput[] = [];\n\n    recommendedElements.forEach((recommendedElement) => {\n        // NOTE: Update to RecommendedElementType instead of '1' once entities package is updated to include Reco types.\n        if (recommendedElement.ElementTypeValue === 1 && recommendedElement.ElementId) {\n            recommendedProductElements.push(new FullProductInput(recommendedElement.ElementId, input.apiSettings, input.ProductDetailsCriteria));\n        }\n    });\n\n    // Get product details for recommended products\n    if (recommendedProductElements.length > 0) {\n        return getFullProducts(recommendedProductElements, ctx);\n    } else {\n        ctx.trace(`[getRecommendedElementsAction] Unable to hydrate the recommended elements into simple products.`);\n        return <FullProduct[]>[];\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-recommendations',\n    action: <IAction<FullProduct[]>>getRecommendationsAction,\n    input: createInput\n});\n"]}