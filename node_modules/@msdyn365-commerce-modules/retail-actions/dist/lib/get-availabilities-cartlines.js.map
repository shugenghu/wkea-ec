{"version":3,"file":"get-availabilities-cartlines.js","sourceRoot":"","sources":["../../src/get-availabilities-cartlines.ts"],"names":[],"mappings":"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","sourcesContent":["import { unique } from './utilities/arrayExtensions';\nimport { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { CartLine, ProductWarehouse } from '@msdyn365-commerce/retail-proxy';\nimport { getOrgUnitConfigurationAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { getEstimatedAvailabilityAsync, getEstimatedProductWarehouseAvailabilityAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ActiveCartProductsInput, buildCacheKey, getActiveCartProductsAction, IProductInventoryInformation, mapProductInventoryInformation } from './index';\n/**\n * Input class for availabilites for items in cart\n */\nexport class ProductAvailabilitiesForCartLineItems implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`ActiveCartLineItemsAvailability`, this.apiSettings);\n    public getCacheObjectType = () => 'ActiveCartLineItemsAvailability';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>) => {\n    return new ProductAvailabilitiesForCartLineItems(inputData.requestContext.apiSettings);\n};\n\n/**\n * Calls the Retail API to get the product availabilites for items in the cart\n */\n// tslint:disable-next-line:cyclomatic-complexity tslint:disable: max-func-body-length\nexport async function getAvailabilitiesForCartLineItems(input: ProductAvailabilitiesForCartLineItems, ctx: IActionContext): Promise<IProductInventoryInformation[]> {\n    // If no input is provided fail out\n    if (!input) {\n        throw new Error('[getAvailabilitiesForCartLineItems]No valid Input was provided, failing');\n    }\n    const shippingItems: CartLine[] = [];\n    const bopisItems = [];\n    let productAvailabilities:IProductInventoryInformation[] = [];\n\n    const cartState = await getCartState(ctx);\n    const cart = cartState.cart;\n    const channelConfiguration = await getOrgUnitConfigurationAsync({ callerContext: ctx});\n    const products = await getActiveCartProductsAction(new ActiveCartProductsInput(), ctx);\n    const PickupDeliveryModeCode = channelConfiguration.PickupDeliveryModeCode;\n\n    if(!cart || !channelConfiguration || !products || products.length === 0) {\n        ctx.trace('[getAvailabilitiesForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');\n        return <IProductInventoryInformation[]>[];\n    }\n\n    if(cart && cart.Id && cart.CartLines && cart.CartLines.length > 0 && channelConfiguration) {\n        for(const cartLine of cart.CartLines) {\n\n            if(cartLine.DeliveryMode && cartLine.DeliveryMode !== '' && (cartLine.DeliveryMode === PickupDeliveryModeCode)) {\n                bopisItems.push(cartLine);\n            } else {\n                shippingItems.push(cartLine);\n            }\n        }\n    }\n\n    if(shippingItems && shippingItems.length > 0) {\n        let productIds = shippingItems.map(x => x.ProductId!);\n        productIds = unique(productIds);\n        const shippingProductAvailabilites = await getEstimatedAvailabilityAsync(\n            { callerContext: ctx, bypassCache: 'get' },\n            { ProductIds: productIds, DefaultWarehouseOnly: true}\n        );\n        if(shippingProductAvailabilites && shippingProductAvailabilites.ProductWarehouseInventoryAvailabilities && shippingProductAvailabilites.ProductWarehouseInventoryAvailabilities.length > 0) {\n            productAvailabilities = mapProductInventoryInformation(ctx, shippingProductAvailabilites?.ProductWarehouseInventoryAvailabilities);\n        }\n    }\n\n    if(bopisItems && bopisItems.length > 0) {\n        for(const bopisItem of bopisItems) {\n            const productWarehouse: ProductWarehouse = {\n                ProductId: bopisItem.ProductId,\n                InventLocationId: bopisItem.WarehouseId\n            };\n\n            if(ctx.requestContext.channel && ctx.requestContext.channel.InventLocationDataAreaId) {\n                productWarehouse.DataAreaId = ctx.requestContext.channel.InventLocationDataAreaId;\n            }\n            const getProductWarehouseAvail = await getEstimatedProductWarehouseAvailabilityAsync({ callerContext: ctx, bypassCache: 'get', queryResultSettings: {} }, [productWarehouse]);\n            if(getProductWarehouseAvail && getProductWarehouseAvail.ProductWarehouseInventoryAvailabilities && getProductWarehouseAvail.ProductWarehouseInventoryAvailabilities.length > 0) {\n                const productWarehouseMapping = mapProductInventoryInformation (ctx, getProductWarehouseAvail?.ProductWarehouseInventoryAvailabilities);\n                if(productWarehouseMapping && productWarehouseMapping.length) {\n                    for(const item of productWarehouseMapping) {\n                        productAvailabilities.push(item);\n                    }\n                }\n            }\n        }\n    }\n\n    if(productAvailabilities && productAvailabilities.length > 0) {\n        return productAvailabilities;\n    } else {\n        ctx.trace('[getAvailabilitiesForCartLineItems] unable to get availabilites for product');\n        return <IProductInventoryInformation[]>[];\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-availabilities-cartlines',\n    action: <IAction<IProductInventoryInformation[]>>getAvailabilitiesForCartLineItems,\n    input: createInput\n});\n"]}