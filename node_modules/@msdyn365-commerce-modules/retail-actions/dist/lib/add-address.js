import { createObservableDataAction } from '@msdyn365-commerce/core';
import { createReadAsync, updateAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';
import getCustomer, { GetCustomerInput } from './get-customer';
/**
* The input class for the addAddress data action
*/
export class AddressManagementInput {
    constructor(address, userAccountNumber) {
        this.getCacheKey = () => 'AddAddress';
        this.getCacheObjectType = () => 'AddAddress';
        this.dataCacheType = () => 'none';
        this.userAccountNumber = userAccountNumber;
        this.address = address;
    }
}
/**
* The createInput method for the addAddress data action
* @param inputData The input data passed to the createInput method
*/
export const createAddressManagementInput = (inputData) => {
    if (inputData.requestContext.user.isAuthenticated) {
        throw new Error('User is not authenticated. Cannot call UpdateAddress API');
    }
    const { address } = inputData.data || { address: undefined };
    if (!address) {
        throw new Error('address is not provided. Cannot call UpdateAddress API');
    }
    return new AddressManagementInput(address);
};
export async function doAddressManagementOperation(input, ctx, operationHandler) {
    const { userAccountNumber, address } = input;
    const customerInput = new GetCustomerInput(ctx.requestContext.apiSettings, userAccountNumber);
    const customer = await getCustomer(customerInput, ctx);
    if (!customer) {
        throw new Error('Not able to create customer');
    }
    const newCustomer = operationHandler({ ...customer }, address);
    const updatedCustomer = await updateAsync({ callerContext: ctx }, newCustomer);
    if (!updatedCustomer) {
        throw new Error('Not able to update customer');
    }
    ctx.update(createReadAsync(updatedCustomer.AccountNumber), updatedCustomer);
    return updatedCustomer.Addresses || [];
}
export function addAddressHandler(customer, address) {
    customer.Addresses = [...(customer.Addresses || [])];
    customer.Addresses.push(address);
    return customer;
}
export async function addAddressAction(input, ctx) {
    return doAddressManagementOperation(input, ctx, addAddressHandler);
}
/**
* The addAddress data action
* Calls the read RetailServer API to get information about a customer
* Adds the passed address information to the retireved customer, and
* then updates that customer via the update RetailServer API.
*/
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/retail-actions/add-address',
    action: addAddressAction,
    input: createAddressManagementInput,
    isBatched: false
});
//# sourceMappingURL=add-address.js.map