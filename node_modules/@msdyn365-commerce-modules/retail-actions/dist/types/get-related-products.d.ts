import { FullProduct } from '@msdyn365-commerce/commerce-entities';
import { CacheType, IActionInput } from '@msdyn365-commerce/core';
import { ICreateActionContext } from '@msdyn365-commerce/core';
import { ProductRelationType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { ProductDetailsCriteria } from './get-full-products';
import { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';
/**
 * GetRelatedProducts Input Action
 */
export declare class GetRelatedProductsInput implements IActionInput {
    readonly productId: number;
    readonly catalogId: number;
    readonly relationType: string;
    ProductDetailsCriteria: ProductDetailsCriteria;
    readonly queryResultSettingsProxy: QueryResultSettingsProxy;
    constructor(productId: number, catalogId: number, relationType: string, queryResultSettingsProxy: QueryResultSettingsProxy, criteria: ProductDetailsCriteria);
    getCacheKey: () => string;
    getCacheObjectType: () => string;
    dataCacheType: () => CacheType;
}
/**
 * Creates the input required to make GetRelatedProducts retail api call
 */
export declare const createGetRelatedProductsInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>) => IActionInput;
export declare function searchProductRelationType(productRelationTypes: ProductRelationType[], _productRelationType: string): number | undefined;
declare const _default: import("@msdyn365-commerce/core").IObservableAction<FullProduct[]>;
/**
 * The getRelatedProducts data action
 * Uses a productId URL Token and finds the relation types for said product
 * using the getRelationTypes RetailServer API, and then finds and retusn all products that
 * share that relation type via the getRelatedProducts RetailServer API
 */
export default _default;
