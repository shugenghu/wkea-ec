import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';
import { CacheType, IActionInput } from '@msdyn365-commerce/core';
import { IActionContext, ICreateActionContext, IRequestContext } from '@msdyn365-commerce/core';
/**
 * Input class for GetCurrentCategory data action
 */
export declare class CurrentCategoryInput implements IActionInput {
    categoryId?: number;
    categorySlug?: string;
    private apiSettings;
    constructor(context: IRequestContext);
    getCacheKey: () => string;
    getCacheObjectType: () => string;
    dataCacheType: () => CacheType;
}
/**
 * Creates a current category input from an ICreateActionContext
 */
export declare const createGetCurrentCategoryInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>) => IActionInput;
/**
 * Rescrusive Search Method to find a given category amongts a complete CategoryHierarcy
 * @param categories The current Category Hierarchy
 * @param categorySlug The category slug being searched for
 * @param categoryId The category Id being search for
 */
export declare function searchCategory(categories: CategoryHierarchy[], categorySlug?: string, categoryId?: number): CategoryHierarchy | undefined;
/**
 * Action method for the getCurrentCategory Data Action
 * @param input The action input class
 * @param ctx The action context
 */
export declare function getCurrentCategoryAction(input: CurrentCategoryInput, ctx: IActionContext): Promise<CategoryHierarchy | undefined>;
declare const _default: import("@msdyn365-commerce/core").IObservableAction<CategoryHierarchy>;
/**
 * The getCurrentCategory data action
 * First makes a call to the getCategories RetailServer API
 * to get a list of every available category, then returns a CategoryHierarchy
 * based on the categoryId query param set in the URL of the request
 */
export default _default;
