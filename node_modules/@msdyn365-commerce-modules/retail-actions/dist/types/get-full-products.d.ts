import { FullProduct } from '@msdyn365-commerce/commerce-entities';
import { CacheType, IActionInput } from '@msdyn365-commerce/core';
import { IActionContext, ICommerceApiSettings, ICreateActionContext } from '@msdyn365-commerce/core';
/**
 * Full Product Input
 */
export declare class FullProductInput implements IActionInput {
    productId: number;
    channelId: number;
    ProductDetailsCriteria: ProductDetailsCriteria;
    private apiSettings;
    constructor(productId: number | string, apiSettings: ICommerceApiSettings, criteria: ProductDetailsCriteria);
    getCacheKey: () => string;
    getCacheObjectType: () => string;
    dataCacheType: () => CacheType;
}
/**
 * Class to define criteria to get full product like price, ratings etc.
 */
export declare class ProductDetailsCriteria {
    getPrice: boolean;
    getRating: boolean;
    constructor(getPrice?: boolean, getRating?: boolean);
}
/**
 * Creates the input required to make the retail api call
 */
export declare const createInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>) => IActionInput[];
/**
 * Calls the Retail API and returns the product based on the passed ProductInput
 */
export declare function getFullProductsAction(inputs: FullProductInput[], ctx: IActionContext): Promise<FullProduct[]>;
declare const _default: import("@msdyn365-commerce/core").IObservableAction<FullProduct[]>;
export default _default;
