import { CacheType, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core';
import { BusinessPartnerUser, NullResult } from '@msdyn365-commerce/retail-proxy';
/**
 * Input class for DeleteOrganizationUser data action
 */
export declare class DeleteOrganizationUserInput implements IActionInput {
    user: BusinessPartnerUser;
    constructor(newUser: BusinessPartnerUser);
    getCacheKey: () => string;
    getCacheObjectType: () => string;
    dataCacheType: () => CacheType;
}
/**
 * Input class for DeleteOrganizationUser data action
 */
export declare const createDeleteOrganizationUserInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>, newUser: BusinessPartnerUser) => IActionInput;
/**
 * The DeleteOrganizationUser data action
 * Calls getCurrent() to get a businessPartnerId from the user requesting the action.
 * It then maps the newUsers' businessPartnerId to the same as the above user.
 * Calls the createBusinessPartner to then create a new entitiy in the database with the
 * information passed into through newUser
 */
export declare function deleteOrganizationUser(input: DeleteOrganizationUserInput, ctx: IActionContext): Promise<NullResult>;
declare const _default: import("@msdyn365-commerce/core").IObservableAction<BusinessPartnerUser>;
/**
 * The DeleteOrganizationUser data action
 * Calls the read RetailServer API to get the BusinessPartnerId from the admin
 * account and Deletes that businessPartner to the recieved input (new User)/
 * We then send this new User through the RetailServer API so that the database
 * is updated.
 */
export default _default;
