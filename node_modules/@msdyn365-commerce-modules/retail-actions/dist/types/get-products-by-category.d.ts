import { CacheType, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';
import { IActionContext, ICreateActionContext } from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { CurrentCategoryInput } from './get-current-category';
import { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';
/**
 * Product by category ID Input action
 */
export declare class ProductsByCategoryInput implements IActionInput {
    categoryId?: number;
    categorySlug?: string;
    categoryName?: string;
    catalogId: number;
    currentCategory: CurrentCategoryInput;
    readonly queryResultSettingsProxy: QueryResultSettingsProxy;
    private apiSettings;
    constructor(category: CurrentCategoryInput, apiSettings: ICommerceApiSettings, queryResultSettingsProxy: QueryResultSettingsProxy);
    getCacheKey: () => string;
    getCacheObjectType: () => string;
    dataCacheType: () => CacheType;
}
/**
 * createInput method for the getProductsByCategory data aciton
 */
export declare const createGetProductsByCategoryInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>) => IActionInput;
/**
 * Action method for the getProductsByCategory data action
 */
export declare function getProductsByCategoryAction(input: ProductsByCategoryInput, ctx: IActionContext): Promise<SimpleProduct[]>;
declare const _default: import("@msdyn365-commerce/core").IObservableAction<SimpleProduct[]>;
/**
 * The getProductsByCategory data action
 * Retrieves the current category of the request via the getCurrentCategory data action
 * Then calls the searchByCategory RetailServer API to get a list of products associated with
 * the current category, and finally fully hydrates the data for those prodcuts via the
 * getProducts data action, returning a list of SimpleProducts within the current category.
 */
export default _default;
