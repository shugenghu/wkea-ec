import { FullProduct } from '@msdyn365-commerce/commerce-entities';
import { CacheType, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';
import { IActionContext, ICreateActionContext } from '@msdyn365-commerce/core';
import { CurrentCategoryInput } from './get-current-category';
import { ProductDetailsCriteria } from './get-full-products';
import { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';
/**
 * Product by category ID Input action
 */
export declare class FullProductsByCategoryInput implements IActionInput {
    categoryId?: number;
    categoryName?: string;
    catalogId: number;
    currentCategory: CurrentCategoryInput;
    ProductDetailsCriteria: ProductDetailsCriteria;
    queryResultSettingsProxy: QueryResultSettingsProxy;
    private apiSettings;
    constructor(category: CurrentCategoryInput, apiSettings: ICommerceApiSettings, queryResultSettingsProxy: QueryResultSettingsProxy, criteria: ProductDetailsCriteria);
    getCacheKey: () => string;
    getCacheObjectType: () => string;
    dataCacheType: () => CacheType;
}
/**
 * Creates the input required to make the retail api call
 */
export declare const createGetFullProductsByCategoryInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>) => IActionInput;
/**
 * Calls the get-products-by-category action and then call GetFullProducts data actoin to get detail products.
 */
export declare function getFullProductsByCategoryAction(input: FullProductsByCategoryInput, ctx: IActionContext): Promise<FullProduct[]>;
declare const _default: import("@msdyn365-commerce/core").IObservableAction<FullProduct[]>;
export default _default;
