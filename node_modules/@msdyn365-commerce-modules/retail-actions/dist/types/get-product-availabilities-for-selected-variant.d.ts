import { CacheType, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core';
import { ProductWarehouseInventoryAvailability } from '@msdyn365-commerce/retail-proxy';
import { ProductAvailableQuantity } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { IProductInventoryInformation } from './index';
/**
 * Input class for the getProductAvailabilitiesForSelectedVariant Data Action
 */
export declare class ProductAvailabilitiesForSelectedVariantInput implements IActionInput {
    productId: number;
    channelId: number;
    constructor(productId: number | string, channelId: number);
    getCacheKey: () => string;
    getCacheObjectType: () => string;
    dataCacheType: () => CacheType;
}
/**
 * createInput method for the getProductAvailabilitiesForSelectedVariant data action.
 * @param inputData The input data passed to the createInput method
 */
export declare const createProductAvailabilitiesForSelectedVariantInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>) => ProductAvailabilitiesForSelectedVariantInput;
/**
 * The action method for the getProductAvailabilitiesForSelectedVariant data action
 */
export declare function getProductAvailabilitiesForSelectedVariantAction(input: ProductAvailabilitiesForSelectedVariantInput, ctx: IActionContext): Promise<IProductInventoryInformation[] | undefined>;
/**
 * The function that maps a ProductWareHouse object into a ProductAvailabilityQuantity
 */
export declare function mergeProductWarehouseToProductAvailabities(productsWarehouseInventory: ProductWarehouseInventoryAvailability[]): ProductAvailableQuantity[];
declare const _default: import("@msdyn365-commerce/core").IObservableAction<IProductInventoryInformation[] | null>;
/**
 * The complete getProductAvailabilitiesForSelectedVariant data action
 * Get the currently selected variant via the getSelectedVariant data action, and
 * then gets the availabilities for the variant via the getProductAvailabilities RetailServer API
 */
export default _default;
