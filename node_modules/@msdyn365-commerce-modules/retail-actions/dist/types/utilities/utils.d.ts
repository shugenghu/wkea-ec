import { ICommerceApiSettings, ICreateActionContext, IRequestContext } from '@msdyn365-commerce/core';
import { AsyncResult } from '@msdyn365-commerce/retail-proxy';
import { CartLine, CommerceListLine, ProductSearchResult, QueryResultSettings, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { ProductDetailsCriteria } from '../get-full-products';
export declare const wrapInResolvedAsyncResult: <T = unknown>(input: T | null | undefined) => AsyncResult<T>;
export declare const wrapInRejectedAsyncResult: <T = unknown>(input: T | null | undefined) => AsyncResult<T>;
export declare const buildQueryResultSettings: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {
    [x: string]: any;
}>) => QueryResultSettings;
/**
 * Utility function to extract the active productId in the following priority:
 * First query param (productId), then UrlToken (itemId), then module config
 * @param inputData The Action Input data
 */
export declare const getSelectedProductIdFromActionInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>) => string | undefined;
/**
 * Generates a Image URL based on data return from retail server
 * @param imageUrl The image url returned by Retail Server
 * @param ctx The request context
 */
export declare const generateImageUrl: (imageUrl: string | undefined, apiSettings: ICommerceApiSettings) => string | undefined;
/**
 * Generates a Image URL for a product based on data return from retail server
 * @param product The Product returned by Retail Server
 * @param ctx The request context
 */
export declare const generateProductImageUrl: (product: SimpleProduct | ProductSearchResult, apiSettings: ICommerceApiSettings) => string | undefined;
/**
 * Creates a CartLine object from the passed data
 * @param product The product
 * @param quantity The quantity
 * @param catalogId The catalog
 */
export declare const buildCartLine: (product: SimpleProduct, quantity?: number | undefined, catalogId?: number | undefined) => CartLine;
/**
 * Creates a CommerceListLine (also know as WishlistLine) object from the passed data
 * @param productId The RecordId of the Product to be added
 * @param customerId The account number of the customer
 * @param wishlistId The Id of the commerce list
 */
export declare const buildWishlistLine: (productId: number, customerId: string, wishlistId: number) => CommerceListLine;
/**
 * Utility function to prepare the product details criteria before getting full product:
 * @param inputData The Action Input data
 */
export declare const getProductDetailsCriteriaFromActionInput: (inputData: ICreateActionContext<{
    [x: string]: any;
}, {}>) => ProductDetailsCriteria;
/**
 * Transforms search text into the expected 'search terms' format, expected by refiner APIs.
 * @param searchText free-form text used for searching for products or categories of products
 */
export declare const ensureSearchTextIsFormedProperly: (searchText: string) => string;
export declare const ensureSafeSearchText: (searchText: string) => string;
export declare const buildCacheKey: (base: string, apiSettings: ICommerceApiSettings, locale?: string | undefined) => string;
export declare const buildCacheKeyWithUrlTokens: (base: string, requestContext: IRequestContext) => string;
/**
 * Generates a key from set of arguments as inputs
 *
 * @param args argument list of pivots to generate key from
 * @param handler handler function for null/undefined values
 */
declare type TKeyTypes = string | number | boolean | null | undefined;
interface IGenerateKeyOptions {
    separator?: string;
    handler?(input: null | undefined): string;
}
export declare const generateKey: (args: TKeyTypes[], options?: IGenerateKeyOptions | undefined) => string;
/**
 * Gets the fall back image url for a variant image.
 * @param itemId Item id of a product.
 * @param apiSettings Api setting from request context.
 */
export declare const getFallbackImageUrl: (itemId: string | undefined, apiSettings: ICommerceApiSettings) => string | undefined;
export {};
