import { buildCacheKeyWithUrlTokens, getFullOrderTemplate, GetFullOrderTemplateInput, QueryResultSettingsProxy } from '@msdyn365-commerce-modules/retail-actions';
import { createObservableDataAction } from '@msdyn365-commerce/core';
export class ActiveOrderTemplateLinesInput {
    constructor(requestContext, config) {
        this.getCacheKey = () => buildCacheKeyWithUrlTokens('ActiveOrderTemplateLines', this.requestContext);
        this.getCacheObjectType = () => 'ActiveOrderTemplateLines';
        this.dataCacheType = () => 'instance';
        this.shouldCacheOutput = () => false;
        if (!requestContext.query?.id) {
            throw new Error('Failed to get order template id from the query.');
        }
        if (!config) {
            throw new Error('Failed to get order template module configuration');
        }
        this.orderTemplateId = requestContext.query.id;
        this.queryResultSettings = QueryResultSettingsProxy.fromModuleData(requestContext, config).QueryResultSettings;
        this.queryResultSettings.count = true;
        this.requestContext = requestContext;
    }
}
export async function getActiveOrderTemplateLines(input, context) {
    return getFullOrderTemplate(new GetFullOrderTemplateInput(input.orderTemplateId, input.queryResultSettings), context);
}
export default createObservableDataAction({
    id: '@msdyn365-commerce-modules/order-template/order-template/get-order-template-lines',
    action: getActiveOrderTemplateLines,
    input: (context) => {
        if (!context.config) {
            throw new Error('Failed to get order template module configuration');
        }
        return new ActiveOrderTemplateLinesInput(context.requestContext, context.config);
    }
});
//# sourceMappingURL=get-order-template.js.map