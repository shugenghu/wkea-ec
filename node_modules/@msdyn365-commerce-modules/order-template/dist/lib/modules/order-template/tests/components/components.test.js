import { buildHydratedMockActionContext } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import { AddLineToTemplate, OrderTemplateActionsView, OrderTemplateLinesStatusMessage, OrderTemplateLineView, OrderTemplateTableHeading, ProductConfiguration, } from '../../components';
const mockFullProduct = {
    ProductDetails: {
        AdjustedPrice: 145,
        BasePrice: 145,
        Behavior: {
            AllowNegativePhysicalInventory: false,
            ExtensionProperties: [],
            HasSerialNumber: false,
            IsBlankSerialNumberAllowed: false,
            IsBlankSerialNumberReceiptAllowed: false,
            IsDiscountAllowed: true,
            IsKitDisassemblyAllowed: false,
            IsManualDiscountAllowed: true,
            IsNegativeQuantityAllowed: false,
            IsReturnAllowed: true,
            IsSaleAtPhysicalStoresAllowed: true,
            IsSerialNumberControlEnabled: false,
            IsSerialNumberRequired: false,
            IsStorageDimensionGroupLocationActive: true,
            IsStorageDimensionGroupLocationAllowBlankReceiptEnabled: false,
            IsStorageDimensionGroupLocationBlankIssueAllowed: false,
            IsZeroSalePriceAllowed: false,
            KeyInPriceValue: 4,
            KeyInQuantityValue: 0,
            MustKeyInComment: false,
            MustPrintIndividualShelfLabelsForVariants: false,
            MustPromptForSerialNumberOnlyAtSale: false,
            MustWeighProductAtSale: false,
            ValidFromDateForSaleAtPhysicalStores: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
            ValidToDateForSaleAtPhysicalStores: new Date('Wed Jul 03 2019 14:44:37 GMT-0700')
        },
        Components: [],
        DefaultUnitOfMeasure: 'ea',
        Description: 'Classic dress shoes made of authentic leather.',
        ExtensionProperties: [],
        ItemId: '92077',
        ItemServiceTypeValue: 0,
        ItemTypeValue: 0,
        LinkedProducts: [],
        MasterProductId: 68719493343,
        Name: 'Classic Leather Dress Shoes',
        Price: 145,
        PrimaryImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/Products%2F92077%20%5E%20%20%5E%208.5%20%5E%20%20%5E%20Regular_000_001.png',
        ProductTypeValue: 5,
        RecordId: 68719493351,
        Dimensions: [
            {
                DimensionTypeValue: 3,
                ExtensionProperties: [],
                DimensionValue: {
                    DimensionId: '8.5',
                    ExtensionProperties: [],
                    RecordId: 22565421192,
                    Value: '8.5'
                }
            },
            {
                DimensionTypeValue: 1,
                DimensionValue: {
                    RecordId: 22565420935,
                    Value: 'Invalid',
                    ExtensionProperties: []
                },
                ExtensionProperties: []
            },
            {
                DimensionTypeValue: 4,
                ExtensionProperties: [],
                DimensionValue: {
                    DimensionId: 'Regular',
                    ExtensionProperties: [],
                    RecordId: 5637144583,
                    Value: 'Regular'
                }
            }
        ],
        isChecked: false
    },
    ProductPrice: {
        AdjustedPrice: 145,
        BasePrice: 145,
        CatalogId: 0,
        ChannelId: 68719478279,
        CurrencyCode: 'USD',
        CustomerContextualPrice: 145,
        DiscountAmount: 0,
        DiscountLines: [],
        ExtensionProperties: [],
        InventoryDimensionId: '#0000001000006E07',
        ItemId: '92077',
        ListingId: 68719493351,
        ProductId: 68719493351,
        ProductLookupId: 0,
        TradeAgreementPrice: 145,
        UnitOfMeasure: 'ea',
        ValidFrom: new Date('Wed Jul 03 2019 14:44:37 GMT-0700')
    },
    ProductRating: {
        AverageRating: undefined,
        ExtensionProperties: [],
        ProductId: 68719493351,
        RatingDistribution: [],
        TotalRatings: 0
    }
};
const mockOrderTemplateLine = {
    CreatedDateTime: undefined,
    DataAreaId: 'usrt',
    DeletedDateTime: new Date('Mon Jan 01 1900 02:30:17 GMT+0230'),
    ExtensionProperties: [],
    fullProduct: mockFullProduct,
    LastUpdated: new Date('Tue Jun 16 2020 22:30:53 GMT+0300'),
    LineId: '15a64c8e9d974d97b876a726bba18eb2',
    ProductId: 68719493351,
    ProductListId: '103fe74cbe7443e0bd96a0741fb8fe39',
    Quantity: 23423342,
    UnitOfMeasure: 'ea'
};
const mockOrderTemplate = {
    CreatedDateTime: undefined,
    CustomerId: '004047',
    DataAreaId: 'usrt',
    DeletedDateTime: new Date('Mon Jan 01 1900 02:30:17 GMT+0230'),
    ExtensionProperties: [],
    Id: '103fe74cbe7443e0bd96a0741fb8fe39',
    LastUpdated: new Date('Fri May 29 2020 00:29:17 GMT+0300'),
    Name: 'Name',
    ProductListLines: [mockOrderTemplateLine],
    ProductListTypeValue: 1
};
const orderTemplate = {
    productList: {
        Id: 'id',
        ProductListLines: [mockOrderTemplateLine]
    },
    orderTemplateLines: [{ productListLine: mockOrderTemplateLine }],
    totalLines: 0
};
const mockImageSetting = {
    viewports: {
        xs: { q: `w=64&h=64&m=6`, w: 0, h: 0 },
        lg: { q: `w=64&h=64&m=6`, w: 0, h: 0 },
        xl: { q: `w=64&h=64&m=6`, w: 0, h: 0 }
    },
    lazyload: true
};
const mockActionContext = buildHydratedMockActionContext();
mockActionContext.requestContext.apiSettings = {
    baseImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/'
};
const mockContext = {
    actionContext: mockActionContext,
    request: {},
    app: {
        config: {
            maxQuantityForCartLineItem: 10
        }
    },
    cultureFormatter: {
        formatCurrency: jest.fn()
    }
};
mockContext.actionContext.eventId = 'b7664540-47bf-11ea-ab5c-0762824bce08';
const mockProps = {
    orderTemplateLine: mockOrderTemplateLine,
    productListLine: mockOrderTemplate.ProductListLines[0],
    price: mockFullProduct.ProductPrice,
    context: mockContext,
    productUrl: '/',
    imageSettings: mockImageSetting,
    telemetry: {},
    moduleId: 'id',
    moduleTypeName: 'typeName',
    quantity: mockOrderTemplate.ProductListLines[0].Quantity,
    handlers: {
        onAddToBag: jest.fn(),
        onRemoveItem: jest.fn(),
        onChangeQuantity: jest.fn(),
        onSelect: jest.fn(),
    },
    resources: {
        productDimensionTypeColor: 'Color',
        productDimensionTypeSize: 'Size',
        productDimensionTypeStyle: 'Hooded',
        originalPriceText: 'Original',
        currentPriceText: 'Current',
        freePriceText: 'Free',
        inputQuantityAriaLabel: 'quantity input',
        removeFromOrderTemplateLinesText: 'Remove from order template',
        addToBagButtonText: 'Add to bag',
        addToTemplateConfirmation: '$count $productAndDimenstions added to cart.'
    }
};
const linesAddedToCartDialogResources = {
    viewCartButtonText: 'viewCartButtonText',
    orderTemplateCloseButtonText: 'orderTemplateCloseButtonText',
    linesAddedToCartHeaderItemsOneText: 'linesAddedToCartHeaderItemsOneText',
    linesAddedToCartHeaderLinesOneText: 'linesAddedToCartHeaderLinesOneText',
    linesAddedToCartHeaderLinesFormatText: 'linesAddedToCartHeaderLinesFormatText',
    linesAddedToCartHeaderMessageText: 'linesAddedToCartHeaderMessageText'
};
describe('OrderTemplateLines', () => {
    it('renders OrderTemplateActions correctly', () => {
        const orderTemplateActionsProps = {
            id: 'id',
            data: { orderTemplate },
            renameOrderTemplateDialogStrings: {
                defaultOrderTemplateName: 'defaultOrderTemplateName',
                orderTemplateButtonLabel: 'orderTemplateButtonLabel',
                orderTemplateCancelButtonLabel: 'orderTemplateCancelButtonLabel',
                orderTemplateDescription: 'orderTemplateDescription',
                orderTemplateHeaderLabel: 'orderTemplateHeaderLabel',
                orderTemplateNameAriaLabel: 'orderTemplateNameAriaLabel',
                orderTemplateTitleLabel: 'orderTemplateTitleLabel'
            },
            typeName: 'TypeName',
            context: mockContext,
            handlers: {
                onRenameTemplate: jest.fn(),
                onRemoveTemplate: jest.fn()
            },
            resources: {
                addToCartFailureMessage: 'Add to cart failed. Please refresh and retry',
                addToCartSuccessMessage: 'Order template successfully added to cart',
                addToCartProcessMessage: 'Adding to cart',
                closeWindowButtonText: 'Close',
                addTemplateToBagButtonText: 'Add template to bag',
                renameTemplateButtonText: 'Rename template',
                deleteTemplateButtonText: 'Delete template',
                linesAddedToCartDialogResources: linesAddedToCartDialogResources
            }
        };
        const componentView = OrderTemplateActionsView(orderTemplateActionsProps);
        expect(componentView).toBeDefined();
        expect(componentView.addTemplateToBag).toBeDefined();
        expect(componentView.renameTemplate).toBeDefined();
        expect(componentView.removeTemplate).toBeDefined();
    });
    it('renders OrderTemplateTableHeading correctly', () => {
        const mockTableHeadingProps = {
            productNumber: 'Product number',
            productName: 'Product',
            productUnitPrice: 'Unit price',
            productUOM: 'UOM',
            productQuantity: 'Quantity',
            productActions: 'Actions',
            clickHandler: jest.fn()
        };
        const component = render(React.createElement(OrderTemplateTableHeading, Object.assign({}, mockTableHeadingProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders OrderTemplateLinesStatusMessage - LOADING correctly', () => {
        const mockPropsMessage = {
            errorType: 'LOADING',
            text: 'Loading...'
        };
        const component = render(React.createElement(OrderTemplateLinesStatusMessage, Object.assign({}, mockPropsMessage)));
        expect(component).toMatchSnapshot();
    });
    it('renders OrderTemplateLinesStatusMessage - FAILED correctly', () => {
        const mockPropsMessage = {
            errorType: 'FAILED',
            text: 'Sorry we are unable to load your order template lines at this moment, please try again later.'
        };
        const component = render(React.createElement(OrderTemplateLinesStatusMessage, Object.assign({}, mockPropsMessage)));
        expect(component).toMatchSnapshot();
    });
    it('renders OrderTemplateLinesStatusMessage - EMPTY - correctly', () => {
        const mockPropsMessage = {
            errorType: 'EMPTY',
            text: 'Your order template lines is empty.'
        };
        const component = render(React.createElement(OrderTemplateLinesStatusMessage, Object.assign({}, mockPropsMessage)));
        expect(component).toMatchSnapshot();
    });
    it('Order line removeButton fires handler event', () => {
        const component = OrderTemplateLineView(mockProps);
        expect(component.removeButton).toBeDefined();
        const removeButton = mount(component.removeButton);
        removeButton.simulate('click');
        expect(mockProps.handlers.onRemoveItem).toBeCalled();
    });
});
describe('Add Line', () => {
    const orderTemplateId = '1';
    const mockAddLineProps = {
        context: mockContext,
        resources: {
            addLineModalLinkText: 'Add a Line',
            searchButtonAriaLabel: 'Submit search',
            searchInputAriaLabel: 'Search query',
            searchModalPlaceholderText: 'Enter a product name or SKU#',
            selectProductButtonText: 'Select',
            addItemToTemplateText: 'Add to Template',
            addLineProductUnitPricePrefix: 'Unit price:',
            backButtonText: 'Back to Products',
            decrementButtonAriaLabel: 'Press to decrease the quantity by 1',
            incrementButtonAriaLabel: 'Press to increment quantity by 1',
            quantitySelectLabel: 'Quantity',
            addLineProductUnitOfMeasurePrefix: 'UOM:',
            notFoundSearchErrorNotice: 'No items found.',
            notFoundSearchErrorRedediation: 'Try entering a different keyword.',
            searchErrorMessage: 'Search Error',
            productDimensionTypeColor: 'Color',
            productDimensionTypeConfiguration: 'Configuration',
            productDimensionTypeSize: 'Size',
            productDimensionTypeStyle: 'Style',
            addToTemplateConfirmation: '$count $productAndDimenstions added to cart.'
        },
        orderTemplateId: orderTemplateId
    };
    it('receives the order template id', () => {
        const wrapper = mount(React.createElement(AddLineToTemplate, Object.assign({}, mockAddLineProps)));
        expect(wrapper.prop('orderTemplateId')).toEqual(orderTemplateId);
    });
    it('opens modal when button is clicked', () => {
        const component = mount(React.createElement(AddLineToTemplate, Object.assign({}, mockAddLineProps)));
        const button = component.find('button');
        expect(component.state('isOpen')).toBeFalsy();
        button.simulate('click');
        expect(component.state('isOpen')).toBeTruthy();
        expect(component).toMatchSnapshot();
    });
});
describe('ProductConfiguration', () => {
    const mockAddLineProps = {
        context: mockContext,
        resources: {
            selectItemButtonText: 'Select',
            addItemToTemplateText: 'Add to Template',
            addLineProductUnitPricePrefix: 'Unit price:',
            backButtonText: 'Back to Products',
            decrementButtonAriaLabel: 'Press to decrease the quantity by 1',
            incrementButtonAriaLabel: 'Press to increment quantity by 1',
            quantitySelectLabel: 'Quantity',
            addLineProductUnitOfMeasurePrefix: 'UOM:',
            productDimensionTypeColor: 'Color',
            productDimensionTypeConfiguration: 'Configuration',
            productDimensionTypeSize: 'Size',
            productDimensionTypeStyle: 'Style',
            addToTemplateConfirmation: '$count $productAndDimenstions added to cart.'
        },
        ordertemplateid: '1',
        product: {
            Price: 99.99,
            PrimaryImageUrl: 'xxx',
            ItemId: '1',
            RecordId: 9999700,
            Name: 'test product 1'
        },
        dimensions: [{
                DimensionTypeValue: 3,
                DimensionValues: [{
                        RecordId: 9999700,
                        Value: '7',
                        DimensionId: 9999701
                    }, {
                        RecordId: 9999800,
                        Value: '8',
                        DimensionId: 9999801
                    }, {
                        RecordId: 9999900,
                        Value: '9',
                        DimensionId: 9999901
                    }]
            }],
        highlightSearchTerm: () => 'test product 1'
    };
    it('renders correctly', () => {
        const component = mount(React.createElement(ProductConfiguration, Object.assign({}, mockAddLineProps)));
        expect(component).toMatchSnapshot();
    });
    it('handles quantity changes correctly', () => {
        const component = mount(React.createElement(ProductConfiguration, Object.assign({}, mockAddLineProps)));
        const incrementButton = component.find('button.increment');
        const decrementButton = component.find('button.decrement');
        expect(component.state('quantity')).toEqual(1);
        incrementButton.simulate('click');
        expect(component.state('quantity')).toEqual(2);
        decrementButton.simulate('click');
        expect(component.state('quantity')).toEqual(1);
    });
});
//# sourceMappingURL=components.test.js.map