import { OrderTemplate, OrderTemplateLine, wrapInRejectedAsyncResult, wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import * as RetailActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';
import { mount } from 'enzyme';
import * as React from 'react';
import OrderTemplateLines from '../order-template';
const mockFullProduct = {
    ProductDetails: {
        AdjustedPrice: 145,
        BasePrice: 145,
        Behavior: {
            AllowNegativePhysicalInventory: false,
            ExtensionProperties: [],
            HasSerialNumber: false,
            IsBlankSerialNumberAllowed: false,
            IsBlankSerialNumberReceiptAllowed: false,
            IsDiscountAllowed: true,
            IsKitDisassemblyAllowed: false,
            IsManualDiscountAllowed: true,
            IsNegativeQuantityAllowed: false,
            IsReturnAllowed: true,
            IsSaleAtPhysicalStoresAllowed: true,
            IsSerialNumberControlEnabled: false,
            IsSerialNumberRequired: false,
            IsStorageDimensionGroupLocationActive: true,
            IsStorageDimensionGroupLocationAllowBlankReceiptEnabled: false,
            IsStorageDimensionGroupLocationBlankIssueAllowed: false,
            IsZeroSalePriceAllowed: false,
            KeyInPriceValue: 4,
            KeyInQuantityValue: 0,
            MustKeyInComment: false,
            MustPrintIndividualShelfLabelsForVariants: false,
            MustPromptForSerialNumberOnlyAtSale: false,
            MustWeighProductAtSale: false,
            ValidFromDateForSaleAtPhysicalStores: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
            ValidToDateForSaleAtPhysicalStores: new Date('Wed Jul 03 2019 14:44:37 GMT-0700')
        },
        Components: [],
        DefaultUnitOfMeasure: 'ea',
        Description: 'Classic dress shoes made of authentic leather.',
        ExtensionProperties: [],
        ItemId: '92077',
        ItemServiceTypeValue: 0,
        ItemTypeValue: 0,
        LinkedProducts: [],
        MasterProductId: 68719493343,
        Name: 'Classic Leather Dress Shoes',
        Price: 145,
        PrimaryImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/Products%2F92077%20%5E%20%20%5E%208.5%20%5E%20%20%5E%20Regular_000_001.png',
        ProductTypeValue: 5,
        RecordId: 68719493351,
        Dimensions: [
            {
                DimensionTypeValue: 3,
                ExtensionProperties: [],
                DimensionValue: {
                    DimensionId: '8.5',
                    ExtensionProperties: [],
                    RecordId: 22565421192,
                    Value: '8.5'
                }
            },
            {
                DimensionTypeValue: 4,
                ExtensionProperties: [],
                DimensionValue: {
                    DimensionId: 'Regular',
                    ExtensionProperties: [],
                    RecordId: 5637144583,
                    Value: 'Regular'
                }
            }
        ]
    },
    ProductPrice: {
        AdjustedPrice: 145,
        BasePrice: 145,
        CatalogId: 0,
        ChannelId: 68719478279,
        CurrencyCode: 'USD',
        CustomerContextualPrice: 145,
        DiscountAmount: 0,
        DiscountLines: [],
        ExtensionProperties: [],
        InventoryDimensionId: '#0000001000006E07',
        ItemId: '92077',
        ListingId: 68719493351,
        ProductId: 68719493351,
        ProductLookupId: 0,
        TradeAgreementPrice: 145,
        UnitOfMeasure: 'ea',
        ValidFrom: new Date('Wed Jul 03 2019 14:44:37 GMT-0700')
    },
    ProductRating: {
        AverageRating: undefined,
        ExtensionProperties: [],
        ProductId: 68719493351,
        RatingDistribution: [],
        TotalRatings: 0
    }
};
const mockProductListLine = {
    CreatedDateTime: undefined,
    DataAreaId: 'usrt',
    DeletedDateTime: new Date('Mon Jan 01 1900 02:30:17 GMT+0230'),
    ExtensionProperties: [],
    LastUpdated: new Date('Tue Jun 16 2020 22:30:53 GMT+0300'),
    LineId: '15a64c8e9d974d97b876a726bba18eb2',
    ProductId: 68719493351,
    ProductListId: '103fe74cbe7443e0bd96a0741fb8fe39',
    Quantity: 23423342,
    UnitOfMeasure: 'ea'
};
const mockProductList = {
    CreatedDateTime: undefined,
    CustomerId: '004047',
    DataAreaId: 'usrt',
    DeletedDateTime: new Date('Mon Jan 01 1900 02:30:17 GMT+0230'),
    ExtensionProperties: [],
    Id: '103fe74cbe7443e0bd96a0741fb8fe39',
    LastUpdated: new Date('Fri May 29 2020 00:29:17 GMT+0300'),
    Name: 'Name',
    ProductListLines: [mockProductListLine],
    ProductListTypeValue: 1
};
const mockEmptyProductList = {
    CreatedDateTime: undefined,
    CustomerId: '004047',
    DataAreaId: 'usrt',
    DeletedDateTime: new Date('Mon Jan 01 1900 02:30:17 GMT+0230'),
    ExtensionProperties: [],
    Id: '103fe74cbe7443e0bd96a0741fb8fe39',
    LastUpdated: new Date('Fri May 29 2020 00:29:17 GMT+0300'),
    Name: 'Name',
    ProductListLines: [],
    ProductListTypeValue: 1
};
const mockEmptyOrderTemplate = new OrderTemplate(mockEmptyProductList, [], 0);
const mockOrderTemplate = new OrderTemplate(mockProductList, [new OrderTemplateLine(mockProductListLine, mockFullProduct)], 1);
const mockCartState = {
    cart: {
        Id: 'gB8DCi6AK3mzMavh08C4P18wFDbEEyto',
        Version: 123
    },
    addProductToCart: jest.fn()
};
const mockData = {
    cart: wrapInResolvedAsyncResult(mockCartState),
    orderTemplate: wrapInResolvedAsyncResult(mockOrderTemplate)
};
const mockDataFailedResponse = {
    cart: {},
    orderTemplate: wrapInRejectedAsyncResult(mockOrderTemplate)
};
const mockConfig = {
    heading: {
        text: 'Weekday Outfits',
        tag: "h1"
    }
};
const mockResources = {
    emptyOrderTemplateLinesText: 'Your order template lines is empty.',
    priceFree: 'Free',
    renameTemplateButtonText: 'renameTemplateButtonText',
    renameOrderTemplateButtonText: 'renameOrderTemplateButtonText',
    renameOrderTemplateTitleText: 'renameOrderTemplateTitleText',
    cancelBtnLabel: 'Cancel',
    orderTemplateTitle: 'Order Template Name',
    removeItemFromOrderTemplateButtonText: 'Remove from order template',
    addOrderTemplateItemToBagButtonText: 'Add to bag',
    addSelectedToBagButtonText: 'Add Selected to bag',
    removeSelectedToBagButtonText: 'Remove Selected',
    waitingClass: 'waiting waiting-circular waiting-lg',
    addedToCartSuccessMessage: 'Added to your cart',
    addedToCartFailureMessage: 'Add to cart failed. Please refresh and retry',
    maxQuantityLimitText: 'You can only add {quantity} of this item to your shopping bag',
    originalPriceText: 'Original price',
    currentPriceText: 'Current price',
    productDimensionTypeColor: 'Color',
    productDimensionTypeSize: 'Size',
    productDimensionTypeStyle: 'Style',
    productDimensionTypeConfiguration: 'Configuration',
    errorGettingOrderTemplateLines: 'Sorry we are unable to load your order template lines at this moment, please try again later.',
    productNumberText: 'Product number',
    productText: 'Product',
    productUnitPriceText: 'Unit price',
    productUOMText: 'UOM',
    productQuantityText: 'Quantity',
    productActionsText: 'Actions',
    addTemplateToBagButtonText: 'Add template to bag',
    deleteTemplateButtonText: 'Delete template',
    inputQuantityAriaLabel: 'quantity input',
    decrementButtonAriaLabel: 'Press to decrease the quantity by 1',
    incrementButtonAriaLabel: 'Press to increment quantity by 1',
    addToCartFailureMessage: 'Add to cart failed. Please refresh and retry',
    addToCartSuccessMessage: 'Order template successfully added to cart',
    addToCartProcessMessage: 'Adding to cart',
    removeSelectedSuccessMessage: 'Selected lines successfully removed to cart',
    removeSelectedFailureMessage: 'Failed to remove selected lines, please try again',
    closeWindowButtonText: 'Close',
    deleteOrderTemplateFailedText: 'Failed to delete order template',
    flipperNext: 'flipperNext',
    flipperPrevious: 'flipperPrevious',
    paginationAriaLabel: 'paginationAriaLabel',
    viewCartButtonText: 'viewCartButtonText',
    orderTemplateCloseButtonText: 'orderTemplateCloseButtonText',
    linesAddedToCartHeaderItemsOneText: 'linesAddedToCartHeaderItemsOneText',
    linesAddedToCartHeaderLinesOneText: 'linesAddedToCartHeaderLinesOneText',
    linesAddedToCartHeaderLinesFormatText: 'linesAddedToCartHeaderLinesFormatText',
    linesAddedToCartHeaderMessageText: 'linesAddedToCartHeaderMessageText',
    itemAddedToCartHeaderItemOneText: 'itemAddedToCartHeaderItemOneText',
    itemAddedToCartHeaderItemFormatText: 'itemAddedToCartHeaderItemFormatText',
    itemAddedToCartHeaderMessageText: 'itemAddedToCartHeaderMessageText',
    freePriceText: 'freePriceText',
    addLineModalLinkText: 'Add a Line',
    addItemToTemplateText: 'Add to Template',
    selectProductButtonText: 'Select',
    backButtonText: 'Back to Products',
    searchModalPlaceholderText: 'Enter product search query',
    quantitySelectLabel: 'Quantity',
    notFoundSearchErrorNotice: 'No items found.',
    notFoundSearchErrorRedediation: 'Try entering a different keyword.',
    searchErrorMessage: 'Search Error',
    addLineProductUnitPricePrefix: 'Unit Price:',
    addLineProductUnitOfMeasurePrefix: 'UOM',
    searchButtonAriaLabel: 'Submit search',
    searchInputAriaLabel: 'Search query',
    searchResultsCountVerbage: 'We found $count $subject based on your search.',
    searchResultsCountSubject: 'product',
    addToTemplateConfirmation: '10 pair of sunglasses, green, regular have been added to template.',
    totalPriceLabel: 'Total',
    defaultOrderTemplateName: 'Untitled',
    progressNotificationText: 'Loading...',
    addToTemplateError: 'Error adding this product to this template.'
};
const mockActions = {};
const mockActionContext = buildHydratedMockActionContext();
mockActionContext.requestContext.apiSettings = {
    baseImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/'
};
const mockContext = {
    actionContext: mockActionContext,
    request: {
        user: {
            isAuthenticated: true,
            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ilg1ZVhrNHh5b2pORnVtMWtsMll0djhkbE5QNC1jNTdkTzZRR1RWQndhTmsifQ.eyJleHAiOjE1NzQzODA2MTQsIm5iZiI6MTU3NDM3NzAxNCwidmVyIjoiMS4wIiwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5mYWJyaWthbS5jb20vMDcxODA4YzMtMDIxMy00ZjQzLWI1ZTItZGYwMTI2NmU0NGFlL3YyLjAvIiwic3ViIjoiMmE2YjYwZjMtNTE3NS00YmExLWI5YzYtODM2ODQ5MWYyMWQ2IiwiYXVkIjoiNWY2M2Y1MGQtZDdlNy00YTRlLTg1MzQtZTg3NTk5ZmMwZmQ5Iiwibm9uY2UiOiI2MzcwOTk3MzgxMzc3MDMyNjYuTURnM056a3lOekl0T0RnNE9TMDBOVGxqTFRnNFpqa3RPRFUyTm1VelkyWmtObUU0WWpFMlpUVXhOREF0TUdRMU5DMDBOR0UyTFdFNVlUTXRabU0xWmpjM05EQTFPRGhrIiwiaWF0IjoxNTc0Mzc3MDE0LCJhdXRoX3RpbWUiOjE1NzQzNzcwMTQsIm9pZCI6IjJhNmI2MGYzLTUxNzUtNGJhMS1iOWM2LTgzNjg0OTFmMjFkNiIsImdpdmVuX25hbWUiOiJKb3JkYW5Ud28iLCJmYW1pbHlfbmFtZSI6IkV1Z2VuaW8iLCJlbWFpbHMiOlsidi1qb2V1Z0BtaWNyb3NvZnQuY29tIl0sInRmcCI6IkIyQ18xX3Npc3VfcjJwcGUiLCJjX2hhc2giOiI3a2ZPSnFMRDhNUUFfMnBmdnBpQVBnIn0.XUqgKAIBfc2eQBGSeBjgvAzGNyxmftcxEQktcbvM2aeChseBrZfl9-Jd8E5FbwY4x2cAxeTG_-NH6J7An_Q4gcCiGVb625BSEmgVuOj9KLN3yuUmgz3BwRgyu_pbByqpLWQXQGdiNTUDPUEGRReINEVneqCQ18iXScTgy_r4kMjB3dHeV8eWfrdtXlFz4IAinfKU19eoc_FixpJ_6jjUzcnrwt9E9eEnd09dOjSeByM4KRUAY9RWVNrJiqK33-kyUXPT8QCR3bEP9ApTe2DTSirMvAfpQ7_9m99EB7MbF2a6CqpBaBlUTAdvavwIDSPGItSklJ8zNvNWDIL-laf5gg',
            customerAccountNumber: '004219'
        }
    },
    app: {
        config: {
            maxQuantityForCartLineItem: 10
        }
    }
};
describe('OrderTemplate', () => {
    let moduleProps;
    beforeEach(() => {
        mockData.orderTemplate = wrapInResolvedAsyncResult(mockOrderTemplate);
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => React.createElement("div", { props: props }))
        };
    });
    it('renders correctly', () => {
        const orderTemplate = mount(React.createElement(OrderTemplateLines, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = orderTemplate.childAt(0).props().props;
        expect(viewProps.status).toBe('SUCCESS');
    });
    it('Successful - remove item', async () => {
        RetailActions.removeProductListLinesAsync = jest.fn().mockImplementation(() => Promise.resolve(null));
        const orderTemplate = mount(React.createElement(OrderTemplateLines, Object.assign({}, moduleProps)));
        orderTemplate.setState({
            productSelection: moduleProps.data.orderTemplate.result?.orderTemplateLines
        });
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = orderTemplate.childAt(0).props().props;
        expect(viewProps.orderLines).toBeDefined();
        const product = viewProps.orderLines[0];
        expect(product.removeButton).toBeDefined();
    });
    it('renders failure message correctly', () => {
        moduleProps = {
            ...buildMockModuleProps(mockDataFailedResponse, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => React.createElement("div", { props: props }))
        };
        const orderTemplate = mount(React.createElement(OrderTemplateLines, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = orderTemplate.childAt(0).props().props;
        expect(viewProps.status).toBe('FAILED');
        expect(viewProps.statusMessage).toMatchSnapshot();
    });
    it('renders empty message correctly', () => {
        mockData.orderTemplate = wrapInResolvedAsyncResult(mockEmptyOrderTemplate);
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => React.createElement("div", { props: props }))
        };
        const orderTemplate = mount(React.createElement(OrderTemplateLines, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = orderTemplate.childAt(0).props().props;
        expect(viewProps.status).toBe('EMPTY');
        expect(viewProps.statusMessage).toMatchSnapshot();
    });
    it('renders loading  message correctly', () => {
        mockData.cart.status = 'LOADING';
        moduleProps = {
            ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext),
            resources: mockResources,
            renderView: jest.fn(props => React.createElement("div", { props: props }))
        };
        const orderTemplate = mount(React.createElement(OrderTemplateLines, Object.assign({}, moduleProps)));
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = orderTemplate.childAt(0).props().props;
        expect(viewProps.status).toBe('LOADING');
        expect(viewProps.statusMessage).toMatchSnapshot();
    });
});
//# sourceMappingURL=order-template.test.js.map