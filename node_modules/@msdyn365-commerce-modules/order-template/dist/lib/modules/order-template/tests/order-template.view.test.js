import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import { OrderTemplateBulkActions } from '../components';
import OrderTemplateLinesView from '../order-template.view';
const mockActionContext = buildHydratedMockActionContext();
const mockContext = {
    actionContext: mockActionContext,
    request: {},
    app: {
        config: {
            maxQuantityForCartLineItem: 10
        }
    }
};
const mockOrderAction = {
    addTemplateToBag: React.createElement("div", null, "Add to Template"),
    renameTemplate: React.createElement("div", null, "Rename Template"),
    removeTemplate: React.createElement("div", null, "Remove Template")
};
const mockResources = {
    emptyOrderTemplateLinesText: 'Your order template lines is empty.',
    priceFree: 'Free',
    cancelBtnLabel: 'Cancel',
    orderTemplateTitle: 'orderTemplateTitle',
    renameOrderTemplateButtonText: 'Rename',
    renameOrderTemplateTitleText: 'Rename order template',
    renameTemplateButtonText: 'Rename template',
    removeItemFromOrderTemplateButtonText: 'Remove from order template',
    addOrderTemplateItemToBagButtonText: 'Add to bag',
    addSelectedToBagButtonText: 'Add Selected to bag',
    removeSelectedToBagButtonText: 'Remove Selected',
    waitingClass: 'waiting waiting-circular waiting-lg',
    addedToCartSuccessMessage: 'Added to your cart',
    addedToCartFailureMessage: 'Add to cart failed. Please refresh and retry',
    maxQuantityLimitText: 'You can only add {quantity} of this item to your shopping bag',
    originalPriceText: 'Original price',
    currentPriceText: 'Current price',
    productDimensionTypeColor: 'Color',
    productDimensionTypeSize: 'Size',
    productDimensionTypeStyle: 'Style',
    productDimensionTypeConfiguration: 'Configuration',
    errorGettingOrderTemplateLines: 'Sorry we are unable to load your order template lines at this moment, please try again later.',
    productNumberText: 'Product number',
    productText: 'Product',
    productUnitPriceText: 'Unit price',
    productUOMText: 'UOM',
    productQuantityText: 'Quantity',
    productActionsText: 'Actions',
    addTemplateToBagButtonText: 'Add template to bag',
    deleteTemplateButtonText: 'Delete template',
    inputQuantityAriaLabel: 'quantity input',
    decrementButtonAriaLabel: 'Press to decrease the quantity by 1',
    incrementButtonAriaLabel: 'Press to increment quantity by 1',
    addToCartFailureMessage: 'Add to cart failed. Please refresh and retry',
    addToCartSuccessMessage: 'Order template successfully added to cart',
    addToCartProcessMessage: 'Adding to cart',
    removeSelectedSuccessMessage: 'Selected lines successfully removed to cart',
    removeSelectedFailureMessage: 'Failed to remove selected lines, please try again',
    closeWindowButtonText: 'Close',
    deleteOrderTemplateFailedText: 'Failed to delete order template',
    flipperNext: 'flipperNext',
    flipperPrevious: 'flipperPrevious',
    paginationAriaLabel: 'paginationAriaLabel',
    viewCartButtonText: 'viewCartButtonText',
    orderTemplateCloseButtonText: 'orderTemplateCloseButtonText',
    linesAddedToCartHeaderItemsOneText: 'linesAddedToCartHeaderItemsOneText',
    linesAddedToCartHeaderLinesOneText: 'linesAddedToCartHeaderLinesOneText',
    linesAddedToCartHeaderLinesFormatText: 'linesAddedToCartHeaderLinesFormatText',
    linesAddedToCartHeaderMessageText: 'linesAddedToCartHeaderMessageText',
    itemAddedToCartHeaderItemOneText: 'itemAddedToCartHeaderItemOneText',
    itemAddedToCartHeaderItemFormatText: 'itemAddedToCartHeaderItemFormatText',
    itemAddedToCartHeaderMessageText: 'itemAddedToCartHeaderMessageText',
    freePriceText: 'freePriceText',
    addLineModalLinkText: 'Add a Line',
    addItemToTemplateText: 'Add to Template',
    selectProductButtonText: 'Select',
    backButtonText: 'Back to Products',
    searchModalPlaceholderText: 'Enter product search query',
    quantitySelectLabel: 'Quantity',
    notFoundSearchErrorNotice: 'No items found.',
    notFoundSearchErrorRedediation: 'Try entering a different keyword.',
    searchErrorMessage: 'Search Error',
    addLineProductUnitPricePrefix: 'Unit Price:',
    addLineProductUnitOfMeasurePrefix: 'UOM',
    searchButtonAriaLabel: 'Submit search',
    searchInputAriaLabel: 'Search query',
    searchResultsCountVerbage: 'We found $count $subject based on your search.',
    searchResultsCountSubject: 'product',
    addToTemplateConfirmation: '10 pair of sunglasses, green, regular have been added to template.',
    totalPriceLabel: 'Total',
    defaultOrderTemplateName: 'Untitled',
    progressNotificationText: 'Loading...',
    addToTemplateError: 'Error adding this product to this template.'
};
const mockOrderTemplateLines = [
    {
        key: 'index1',
        productImage: React.createElement("div", null, "Product Image"),
        productListId: 'index1',
        productPrice: React.createElement("div", null, "Product Price"),
        addToBagButton: React.createElement("div", null, "Add to Cart Button"),
        removeButton: React.createElement("div", null, "Remove Button"),
        productName: 'Product Name',
        productNumber: React.createElement("div", null, "Product Number"),
        productInfo: React.createElement("div", null, "Product Info"),
        productLabel: React.createElement("div", null, "Product Label"),
        productUnitOfMeasure: React.createElement("div", null, "Product Unit Of Measure"),
        productQuantity: 1,
        productQuantityView: React.createElement("div", null, "Product Quantity View"),
        selectLine: React.createElement("input", null)
    },
    {
        key: 'index2',
        productImage: React.createElement("div", null, "Product Image"),
        productListId: 'index12',
        productPrice: React.createElement("div", null, "Product Price"),
        addToBagButton: React.createElement("div", null, "Add to Cart Button"),
        removeButton: React.createElement("div", null, "Remove Button"),
        productName: 'Product Name',
        productNumber: React.createElement("div", null, "Product Number"),
        productInfo: React.createElement("div", null, "Product Info"),
        productLabel: React.createElement("div", null, "Product Label"),
        productUnitOfMeasure: React.createElement("div", null, "Product Unit Of Measure"),
        productQuantity: 1,
        productQuantityView: React.createElement("div", null, "Product Quantity View"),
        selectLine: React.createElement("input", null)
    }
];
const mockOrderLinesCallbacks = {
    updateQuantity: jest.fn()
};
describe('OrderTemplate', () => {
    it('renders correctly', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const mockProps = {
            ...moduleProps,
            OrderTemplateLines: {
                moduleProps: moduleProps,
                className: 'ms-order-template'
            },
            resources: mockResources,
            status: 'SUCCESS',
            productsStatusMessage: React.createElement("div", null, "Message"),
            heading: React.createElement("div", { className: 'ms-order-template__heading' }, "Heading "),
            OrderTemplateActions: {
                className: 'ms-order-template-action-bar',
                tag: 'div'
            },
            ProductsTable: {
                className: 'ms-order-template__table',
                tag: 'table'
            },
            ProductsTableRow: {
                className: 'ms-order-template-table-line',
                tag: 'tr'
            },
            ProductsTableHeading: React.createElement("div", null, "Table Heading"),
            ProductDetails: {
                className: 'ms-order-template-table-line__link',
                tag: 'a'
            },
            orderLines: mockOrderTemplateLines,
            callbacks: mockOrderLinesCallbacks,
            orderActions: mockOrderAction,
            bulkOrderLineActions: OrderTemplateBulkActions({
                ...moduleProps,
                resources: mockResources,
                orderTemplateId: '1',
                onAddSelectionToBag: jest.fn(),
                onRemoveSelection: jest.fn()
            })
        };
        const component = render(React.createElement(OrderTemplateLinesView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('View renders status message correctly', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const mockProps = {
            ...moduleProps,
            OrderTemplateLines: {
                moduleProps: moduleProps,
                className: 'ms-order-template'
            },
            resources: mockResources,
            status: 'LOADING',
            statusMessage: React.createElement("p", null, "Waiting"),
            productsStatusMessage: React.createElement("div", null, "Message"),
            heading: React.createElement("div", { className: 'ms-order-template__heading' }, "Heading "),
            OrderTemplateActions: {
                className: 'ms-order-template-action-bar',
                tag: 'div'
            },
            ProductsTable: {
                className: 'ms-order-template__table',
                tag: 'table'
            },
            ProductsTableRow: {
                className: 'ms-order-template-table-line',
                tag: 'tr'
            },
            ProductsTableHeading: React.createElement("div", null, "Table Heading"),
            ProductDetails: {
                className: 'ms-order-template-table-line__link',
                tag: 'a'
            },
            orderLines: mockOrderTemplateLines,
            callbacks: mockOrderLinesCallbacks,
            orderActions: mockOrderAction
        };
        const component = render(React.createElement(OrderTemplateLinesView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=order-template.view.test.js.map