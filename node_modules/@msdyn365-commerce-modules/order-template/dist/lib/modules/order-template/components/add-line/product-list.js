import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { Button } from '@msdyn365-commerce-modules/utilities';
import { Image } from '@msdyn365-commerce/core';
import classnames from 'classnames';
import React, { useState } from 'react';
export const ProductList = (props) => {
    const { products, context: { actionContext: { requestContext: { apiSettings } }, request: { gridSettings }, cultureFormatter: { formatCurrency, currencyCode } }, clickHandler, highlightSearchTerm, resources: { searchResultsCountVerbage, searchResultsCountSubject, selectProductButtonText }, imageSettings } = props;
    const resultCount = searchResultsCountVerbage
        .replace('{count}', products.length.toString())
        .replace('{subject}', `${searchResultsCountSubject}${(products.length > 1 ? 's' : '')}`);
    return (React.createElement(React.Fragment, null,
        React.createElement("p", { className: 'msc-add-line-to-template__search-result-count' }, resultCount),
        React.createElement("div", { className: 'msc-add-line-to-template__product-list-container' }, products.map((product, index) => {
            const { Price, ItemId, Name, PrimaryImageUrl, RecordId } = product;
            const price = formatCurrency(Price.toFixed(2), currencyCode);
            const fallBackImg = getFallbackImageUrl(ItemId, apiSettings) || '';
            return (React.createElement("div", { key: `product-${index}`, className: 'msc-add-line-to-template__product' },
                React.createElement(Image, { src: PrimaryImageUrl || '', fallBackSrc: fallBackImg, className: 'thumbnail', gridSettings: gridSettings, imageSettings: imageSettings, loadFailureBehavior: 'empty' }),
                React.createElement("div", { className: 'msc-add-line-to-template__product__attributes' },
                    React.createElement("div", { className: 'msc-add-line-to-template__product__id' }, RecordId),
                    highlightSearchTerm(Name || '')),
                React.createElement("div", { className: 'msc-add-line-to-template__product-price-container' },
                    React.createElement("span", null, price),
                    React.createElement(ProductSelectButton, { product: product, buttonText: selectProductButtonText, clickHandler: clickHandler }))));
        }))));
};
export const ProductSelectButton = (props) => {
    const [isBusy, setBusy] = useState(false);
    const { product, buttonText, clickHandler } = props;
    const getClickHandler = () => async () => {
        setBusy(!isBusy);
        await clickHandler(product);
        setBusy(!isBusy);
    };
    return (React.createElement(Button, { className: classnames('msc-add-line-to-template__product__select-button', { 'is-busy': isBusy }), "aria-label": buttonText, onClick: getClickHandler() }, buttonText));
};
//# sourceMappingURL=product-list.js.map