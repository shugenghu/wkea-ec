import { getDimensionsForSelectedVariant, GetDimensionsForSelectedVariantInput, getFallbackImageUrl, getPriceForSelectedVariant, getProductAvailabilitiesForSelectedVariant, getSelectedVariant, PriceForSelectedVariantInput, ProductAvailabilitiesForSelectedVariantInput, SelectedVariantInput } from '@msdyn365-commerce-modules/retail-actions';
import { Button } from '@msdyn365-commerce-modules/utilities';
import { Image } from '@msdyn365-commerce/core';
import classnames from 'classnames';
import React from 'react';
import { Dropdown } from '.';
import OrderTemplateQuantity from '../common/order-template-quantity';
export class ProductConfiguration extends React.Component {
    constructor(props) {
        super(props);
        this._addToTemplateHandler = async (event) => {
            this.setState({
                isBusy: true,
                showAddConfirmation: false,
                showAddError: false
            });
            this.props.addToTemplateHandler({ ...this.state })
                .then(status => {
                if (status.ProductListId) {
                    this.setState({
                        isBusy: false,
                        showAddConfirmation: true
                    });
                }
            }).catch(error => {
                this.setState({
                    isBusy: false,
                    showAddError: true
                });
                this.props.context.telemetry.error('Error adding item to order template');
            });
        };
        this._onQuantityChange = (newValue) => {
            this.setState({
                quantity: newValue,
                totalPrice: newValue * this.props.product.Price
            });
        };
        this._onDimensionChanged = async (selection) => {
            this.setState({
                isBusy: false,
                showAddConfirmation: false,
                showAddError: false,
                buttonDisabled: true
            });
            const { product, dimensions, context } = this.props;
            const { actionContext, request: { apiSettings: { channelId } } } = context;
            const mappedDimensions = dimensions?.map(dimension => {
                return {
                    DimensionTypeValue: dimension.DimensionTypeValue,
                    DimensionValue: dimension.DimensionValues?.find(value => value.RecordId === +selection.selectId),
                    ExtensionProperties: dimension.ExtensionProperties
                };
            }).filter(dimension => {
                return dimension && dimension.DimensionValue;
            });
            mappedDimensions.forEach(dimension => {
                this.state.selectedDimensions[dimension.DimensionTypeValue] = dimension.DimensionValue;
            });
            const variantProduct = (await getSelectedVariant(new SelectedVariantInput(product.MasterProductId ? product.MasterProductId : product.RecordId, channelId, mappedDimensions), actionContext));
            if (!variantProduct) {
                this.props.context.telemetry.error(`Error retrieving variant product for product ${product.MasterProductId ? product.MasterProductId : product.RecordId}`);
                return;
            }
            const dimensionInput = new GetDimensionsForSelectedVariantInput(variantProduct.RecordId, channelId, mappedDimensions);
            const variantDimensions = await getDimensionsForSelectedVariant(dimensionInput, actionContext);
            if (!variantDimensions) {
                this.props.context.telemetry.error('Error retrieving dimensions for reconfigured product variant');
                this.setState({
                    buttonDisabled: false
                });
                return;
            }
            const availabilityInput = new ProductAvailabilitiesForSelectedVariantInput(product.MasterProductId ? product.MasterProductId : product.RecordId, channelId);
            const newAvailableQuantity = await getProductAvailabilitiesForSelectedVariant(availabilityInput, actionContext);
            const priceInput = new PriceForSelectedVariantInput(product.RecordId, channelId);
            const productPrice = await getPriceForSelectedVariant(priceInput, actionContext);
            if (!productPrice) {
                this.props.context.telemetry.error('Error retrieving price for reconfigured product variant');
                this.setState({
                    buttonDisabled: false
                });
                return;
            }
            this.setState({
                buttonDisabled: false,
                productAvailableQuantity: newAvailableQuantity && newAvailableQuantity[0] || undefined,
                unitPrice: +(productPrice.BasePrice || product.Price),
                dimensions: variantDimensions,
                product: variantProduct
            });
        };
        this._getDropdownName = (dimensionType, resources) => {
            switch (dimensionType) {
                case 1:
                    return resources.productDimensionTypeColor;
                case 2:
                    return resources.productDimensionTypeConfiguration;
                case 3:
                    return resources.productDimensionTypeSize;
                case 4:
                    return resources.productDimensionTypeStyle;
                default:
                    return '';
            }
        };
        this.state = {
            quantity: 1,
            unitPrice: props.product.Price,
            totalPrice: props.product.Price,
            product: props.product,
            dimensions: props.dimensions,
            selectedDimensions: {},
            buttonDisabled: false,
            showAddConfirmation: false,
            showAddError: false
        };
        this.selectedDimensions = props.dimensions.reduce((result, d) => {
            result[`${d.DimensionTypeValue}`] = d.DimensionValues[0].Value;
            return result;
        }, {});
    }
    render() {
        const { context: { actionContext: { requestContext: { apiSettings } }, request: { gridSettings } }, resources: { addItemToTemplateText, addLineProductUnitPricePrefix, decrementButtonAriaLabel, incrementButtonAriaLabel, quantitySelectLabel, addLineProductUnitOfMeasurePrefix, addToTemplateConfirmation, addToTemplateError, totalPriceLabel }, imageSettings, highlightSearchTerm } = this.props;
        const { buttonDisabled, product, quantity, unitPrice, totalPrice, showAddConfirmation, showAddError } = this.state;
        const confirmationMessage = addToTemplateConfirmation
            .replace('{count}', this.state.quantity.toString())
            .replace('{productAndDimensions}', `${this.state.product.Name}, ${Object.values(this.selectedDimensions).join(', ')}`);
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: 'msc-add-line-to-template__product-config' },
                React.createElement(Image, { src: product?.PrimaryImageUrl || '', fallBackSrc: getFallbackImageUrl(product?.ItemId, apiSettings) || '', className: 'thumbnail', imageSettings: imageSettings, gridSettings: gridSettings, loadFailureBehavior: 'empty' }),
                React.createElement("div", { className: 'msc-add-line-to-template__product__attributes' },
                    React.createElement("div", null,
                        React.createElement("div", { className: 'msc-add-line-to-template__product__id' }, product?.RecordId),
                        React.createElement("div", { className: 'msc-add-line-to-template__product__name' }, highlightSearchTerm(product?.Name || '')),
                        React.createElement("div", { className: 'msc-add-line-to-template__product__unit-price' },
                            addLineProductUnitPricePrefix,
                            " ",
                            this._formatPrice(unitPrice)),
                        React.createElement("div", { className: 'msc-add-line-to-template__product__uom' },
                            addLineProductUnitOfMeasurePrefix,
                            " ",
                            product?.DefaultUnitOfMeasure)),
                    React.createElement("div", { className: 'msc-add-line-to-template__product-config__dimensions' }, this._getDimensionsNodes())),
                React.createElement("div", null,
                    React.createElement("div", { className: 'quantity-container' },
                        React.createElement("div", null, quantitySelectLabel),
                        React.createElement(OrderTemplateQuantity, { id: 'msc-add-line-to-template__product-config__quantity', currentCount: quantity, onChange: this._onQuantityChange, inputQuantityAriaLabel: 'Press to increment quantity by 1', max: Number.MAX_VALUE, decrementButtonAriaLabel: decrementButtonAriaLabel, incrementButtonAriaLabel: incrementButtonAriaLabel })),
                    React.createElement("div", { className: 'msc-add-line-to-template__product__total-price' },
                        totalPriceLabel,
                        " ",
                        this._formatPrice(totalPrice)))),
            showAddConfirmation && React.createElement("div", { className: 'msc-add-line-to-template__add-success msc-alert-success msc-alert' },
                React.createElement("span", { "aria-hidden": 'true' }),
                confirmationMessage),
            showAddError && React.createElement("div", { className: 'msc-add-line-to-template__add-error msc-alert-danger msc-alert' },
                React.createElement("span", { className: 'msi-exclamation-triangle', "aria-hidden": 'true' }),
                addToTemplateError),
            React.createElement(Button, { className: classnames('msc-add-line-to-template__add-configured-product-button', { 'is-busy': this.state.isBusy }), "aria-label": addItemToTemplateText, onClick: this._addToTemplateHandler, disabled: buttonDisabled }, addItemToTemplateText)));
    }
    _getDimensionsNodes() {
        const { dimensions } = this.state;
        const { resources } = this.props;
        return dimensions?.map((dimension) => {
            const { DimensionValues, DimensionTypeValue } = dimension;
            const mapDimensions = (value) => ({
                id: value.RecordId,
                value: value.Value || ''
            });
            const dropdownList = DimensionValues ? DimensionValues.map(mapDimensions) : [];
            return (React.createElement("div", { key: DimensionTypeValue },
                React.createElement("div", null, this._getDropdownName(DimensionTypeValue, resources)),
                React.createElement(Dropdown, { dropdownId: DimensionTypeValue, dropdownName: this._getDropdownName(DimensionTypeValue, resources), dropdownList: dropdownList, onChange: this._onDimensionChanged })));
        });
    }
    _formatPrice(price) {
        const { context: { cultureFormatter: { formatCurrency, currencyCode } } } = this.props;
        return formatCurrency(price.toFixed(2), currencyCode);
    }
}
//# sourceMappingURL=product-configuration.js.map