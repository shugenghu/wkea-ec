import { __decorate } from "tslib";
import { debounce } from 'lodash';
import { reaction } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
let OrderTemplateQuantity = class OrderTemplateQuantity extends React.PureComponent {
    constructor(props) {
        super(props);
        this.inputRef = React.createRef();
        this._validateMin = () => {
            const minValue = this.props.min === undefined ? 1 : this.props.min;
            if (isNaN(this.state.currentInput) || (this.state.currentInput < minValue)) {
                this.props.onChange && this.props.onChange(minValue);
            }
            else {
                this.props.onChange && this.props.onChange(this.state.currentInput);
            }
        };
        this.state = { currentInput: props.currentCount || 1 };
        this._handleChange = this._handleChange.bind(this);
        reaction(() => this.props.currentCount, () => {
            this.setState({ currentInput: this.props.currentCount || 1 });
        });
    }
    render() {
        const glyphMinusClassName = `${this.props.decrementGlyphClass} quantity__controls-glyph`;
        const glyphPlusClassName = `${this.props.incrementGlyphClass} quantity__controls-glyph`;
        const disabled = this.props.currentCount === this.props.min;
        const incDisabled = this.props.currentCount === this.props.max;
        const currentValue = this.state.currentInput;
        let extraClass = '';
        if (disabled) {
            extraClass = 'disabled';
        }
        else if (this.props.disabled) {
            extraClass = 'transition';
        }
        const getChangeHandler = (amount) => () => this._onIncrementalChange(amount);
        return (React.createElement("div", { className: 'quantity' },
            React.createElement("button", { disabled: this.props.disabled || disabled, title: disabled ? '' : this.props.decrementButtonAriaLabel, className: `decrement quantity__controls ${extraClass}`, onClick: getChangeHandler(-1), "aria-hidden": true, "aria-label": `${this.props.decrementButtonAriaLabel}`, tabIndex: -1, color: 'secondary' },
                React.createElement("span", { className: glyphMinusClassName })),
            React.createElement("input", { type: 'number', className: 'quantity-input', pattern: '[0-9]*', value: currentValue, onChange: this._handleChange, onBlur: this._validateMin, "aria-live": 'polite', "aria-label": `${this.props.inputQuantityAriaLabel}`, role: 'spinbutton', "aria-valuemin": 1, "aria-valuemax": this.props.max, "aria-valuenow": currentValue, ref: this.inputRef, disabled: this.props.disabled }),
            React.createElement("button", { disabled: this.props.disabled || incDisabled, title: incDisabled ? '' : this.props.incrementButtonAriaLabel, className: `increment quantity__controls ${incDisabled ? 'disabled' : ''}`, onClick: getChangeHandler(1), "aria-hidden": true, "aria-label": `${this.props.incrementButtonAriaLabel}`, tabIndex: -1, color: 'secondary' },
                React.createElement("span", { className: glyphPlusClassName }))));
    }
    _onIncrementalChange(amount) {
        const updatedQuantity = this.state.currentInput + amount;
        if (updatedQuantity >= 1 && updatedQuantity <= this.props.max) {
            this.props.onChange && this.props.onChange(updatedQuantity);
        }
    }
    _handleChange(e) {
        const currentValue = parseInt((e.target.value), 10);
        const minValue = this.props.min === undefined ? 1 : this.props.min;
        const inputElement = this.inputRef && this.inputRef.current && this.inputRef.current instanceof HTMLInputElement && this.inputRef.current;
        if (currentValue > this.props.max) {
            this.setState({ currentInput: this.props.max }, () => {
                debounce(() => {
                    this.props.onChange && this.props.onChange(this.state.currentInput);
                }, 200)();
            });
        }
        else {
            this.setState({ currentInput: currentValue }, () => {
                debounce(() => {
                    if (!isNaN(this.state.currentInput) && !(this.state.currentInput < minValue)) {
                        this.props.onChange && this.props.onChange(this.state.currentInput);
                        if (inputElement) {
                            inputElement.setAttribute('aria-valuenow', currentValue.toString());
                            inputElement.setAttribute('value', currentValue.toString());
                        }
                    }
                }, 200)();
            });
        }
    }
};
OrderTemplateQuantity.defaultProps = {
    min: 1,
    decrementGlyphClass: 'fas fa-minus',
    incrementGlyphClass: 'fas fa-plus'
};
OrderTemplateQuantity = __decorate([
    observer
], OrderTemplateQuantity);
export default OrderTemplateQuantity;
//# sourceMappingURL=order-template-quantity.js.map