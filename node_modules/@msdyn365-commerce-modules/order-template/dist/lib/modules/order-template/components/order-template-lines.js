import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { Button } from '@msdyn365-commerce-modules/utilities';
import { PriceComponent } from '@msdyn365-commerce/components';
import { Image } from '@msdyn365-commerce/core';
import * as React from 'react';
import OrderTemplateQuantity from './common/order-template-quantity';
const _addItemToBag = (props) => {
    const { orderTemplateLine, productListLine, quantity, handlers } = props;
    const { LineId } = productListLine;
    const { onAddToBag } = handlers;
    onAddToBag && orderTemplateLine && LineId && onAddToBag(orderTemplateLine.fullProduct.ProductDetails, quantity, LineId);
};
const _removeItemFromOrderTemplateLines = (props) => {
    const { onRemoveItem } = props.handlers;
    const { productListLine } = props;
    const { LineId } = productListLine;
    onRemoveItem && LineId && onRemoveItem(LineId);
};
const OrderTemplateLineActions = {
    addToBag: _addItemToBag,
    removeItem: _removeItemFromOrderTemplateLines
};
export const OrderTemplateLineView = (input) => {
    const { orderTemplateLine, productListLine, price, context, imageSettings, quantity, resources } = input;
    const product = orderTemplateLine.fullProduct;
    const { LineId, UnitOfMeasure } = productListLine;
    const { removeFromOrderTemplateLinesText, addToBagButtonText } = resources;
    if (!product) {
        return null;
    }
    const addItemAction = (event) => {
        return OrderTemplateLineActions.addToBag(input);
    };
    const removeItemAction = (event) => {
        return OrderTemplateLineActions.removeItem(input);
    };
    const onSelectLine = (event) => {
        orderTemplateLine.isChecked = !orderTemplateLine.isChecked;
        input.handlers.onSelect(orderTemplateLine, event.target.checked);
    };
    const { ItemId, Name, PrimaryImageUrl } = product.ProductDetails;
    const fallbackImage = getFallbackImageUrl(ItemId, context.actionContext.requestContext.apiSettings);
    return {
        selectLine: (React.createElement("input", { type: 'checkbox', className: 'bulk-selection-field', checked: orderTemplateLine.isChecked, "aria-checked": orderTemplateLine.isChecked, onChange: onSelectLine })),
        key: LineId,
        productImage: PrimaryImageUrl && Name && (React.createElement("div", { className: 'ms-order-template-table-line__product-image' }, _renderProductImage(context, product.ProductDetails.Name, PrimaryImageUrl, fallbackImage, imageSettings))),
        productInfo: _renderProductInfo(input),
        productPrice: price && _renderPrice(input),
        productNumber: product && React.createElement("div", { className: 'ms-order-template-table-line__product-number' }, ItemId),
        productUnitOfMeasure: price ? (React.createElement("div", { className: 'ms-order-template-table-line__product-unit-of-measure' }, UnitOfMeasure || price.UnitOfMeasure)) : (undefined),
        productListId: LineId,
        removeButton: (React.createElement(Button, { className: 'ms-order-template-table-line__product-remove-button', onClick: removeItemAction, title: removeFromOrderTemplateLinesText })),
        productQuantityView: React.createElement("div", null, _generateQuantity(input, LineId)),
        productQuantity: quantity,
        addToBagButton: (React.createElement(Button, { className: 'ms-order-template-table-line__product-add-button', onClick: addItemAction, title: addToBagButtonText }))
    };
};
const _generateQuantity = (props, itemKey) => {
    const { handlers, resources, quantity } = props;
    const { onChangeQuantity } = handlers;
    const onChange = (newValue) => {
        if (onChangeQuantity) {
            onChangeQuantity(itemKey, newValue);
        }
    };
    return (React.createElement(OrderTemplateQuantity, { currentCount: quantity, onChange: onChange, inputQuantityAriaLabel: resources.inputQuantityAriaLabel }));
};
const _renderProductImage = (context, heading, image, fallbackImage, imageSettings) => {
    const defaultImageSettings = {
        viewports: {
            xs: { q: `w=64&h=64&m=6`, w: 0, h: 0 },
            lg: { q: `w=64&h=64&m=6`, w: 0, h: 0 },
            xl: { q: `w=64&h=64&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };
    if (image) {
        return (React.createElement(Image, { className: 'ms-order-template-table-line__product-image', altText: heading, title: heading, src: image, fallBackSrc: fallbackImage, gridSettings: context.request.gridSettings, imageSettings: imageSettings || defaultImageSettings, loadFailureBehavior: 'empty' }));
    }
    return null;
};
const _renderPrice = (props) => {
    const { price, context, moduleId, moduleTypeName, resources } = props;
    if (price) {
        return (React.createElement(PriceComponent, { id: moduleId, typeName: moduleTypeName, data: { price: price }, className: 'ms-order-template-table-line__product-price', freePriceText: resources.freePriceText, originalPriceText: resources.originalPriceText, currentPriceText: resources.currentPriceText, context: context }));
    }
    return null;
};
const _renderProductDimensions = (props) => {
    const { orderTemplateLine } = props;
    if (!orderTemplateLine.fullProduct || !orderTemplateLine.fullProduct.ProductDetails.Dimensions) {
        return [];
    }
    return orderTemplateLine.fullProduct.ProductDetails.Dimensions.map((dimension) => {
        if (!dimension.DimensionValue || !dimension.DimensionValue.Value) {
            return undefined;
        }
        return dimension.DimensionValue.Value;
    });
};
const _renderProductInfo = (props) => {
    const { orderTemplateLine, productUrl } = props;
    const { Name } = orderTemplateLine.fullProduct.ProductDetails;
    const dimensions = _renderProductDimensions(props);
    if (!orderTemplateLine.fullProduct || !orderTemplateLine.fullProduct.ProductDetails.Dimensions) {
        return [];
    }
    const productName = productUrl ? (React.createElement("a", { className: 'ms-order-template-table-line__product-info-name', href: productUrl }, Name)) : (React.createElement("div", { className: 'ms-order-template-table-line__product-info-name' }, Name));
    return (React.createElement("div", { className: 'ms-order-template-table-line__product-info' },
        React.createElement("div", { className: 'ms-order-template-table-line__product-info-name' }, productName),
        React.createElement("div", { className: 'ms-order-template-table-line__product-info-dimension' }, dimensions.length && dimensions.join(', '))));
};
//# sourceMappingURL=order-template-lines.js.map