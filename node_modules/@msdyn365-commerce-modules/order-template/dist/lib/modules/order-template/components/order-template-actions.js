import { Button } from '@msdyn365-commerce-modules/utilities';
import { AddOrderTemplateToCartComponent, RenameOrderTemplateComponent } from '@msdyn365-commerce/components';
import * as React from 'react';
export const OrderTemplateActionsView = (props) => {
    const { resources } = props;
    const { deleteTemplateButtonText } = resources;
    const removeOrderAction = (event) => {
        return _removeOrderTemplate(props);
    };
    return {
        addTemplateToBag: _getOrderTemplateAddToCartDialog(props),
        renameTemplate: _getOrderTemplateRenameControl(props),
        removeTemplate: (React.createElement(Button, { className: 'ms-order-template-action-bar__delete-template-button', onClick: removeOrderAction }, deleteTemplateButtonText))
    };
};
const _removeOrderTemplate = (props) => {
    const { data: { orderTemplate }, handlers } = props;
    const { onRemoveTemplate } = handlers;
    if (onRemoveTemplate) {
        onRemoveTemplate(orderTemplate.productList.Id);
    }
};
const _getOrderTemplateAddToCartDialog = (props) => {
    const { data: { orderTemplate }, typeName, id, context, telemetryContent, resources } = props;
    const { addTemplateToBagButtonText, closeWindowButtonText, addToCartFailureMessage, addToCartSuccessMessage, addToCartProcessMessage, linesAddedToCartDialogResources } = resources;
    const dialogStrings = {
        closeWindowButtonText: closeWindowButtonText,
        addToCartFailureMessage: addToCartFailureMessage,
        addToCartSuccessMessage: addToCartSuccessMessage,
        addToCartProcessMessage: addToCartProcessMessage,
        linesAddedToCartDialogResources: linesAddedToCartDialogResources
    };
    return (React.createElement(AddOrderTemplateToCartComponent, { context: context, id: id, typeName: typeName, data: { orderTemplate }, className: '', addToCartText: addTemplateToBagButtonText, dialogStrings: dialogStrings, telemetryContent: telemetryContent }));
};
const _getOrderTemplateRenameControl = (props) => {
    const { renameOrderTemplateDialogStrings, resources, context, handlers } = props;
    return (React.createElement(RenameOrderTemplateComponent, { onRenameTemplate: handlers.onRenameTemplate, className: 'msc-order-template-name-dialog', context: context, id: props.id, data: { orderTemplate: props.data.orderTemplate.productList }, typeName: props.typeName, renameOrderTemplateDialogStrings: renameOrderTemplateDialogStrings, renameOrderTemplateButtonText: resources.renameTemplateButtonText }));
};
//# sourceMappingURL=order-template-actions.js.map