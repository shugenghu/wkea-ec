import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { Alert, Button } from '@msdyn365-commerce-modules/utilities';
import { AddOrderTemplateToCartComponent } from '@msdyn365-commerce/components';
import { getUrlSync, Image } from '@msdyn365-commerce/core';
import classNames from 'classnames';
import * as React from 'react';
const _removeItemFromOrderTemplateList = (props) => {
    const { onRemoveOrderTemplate } = props.handlers;
    const { itemKey } = props;
    onRemoveOrderTemplate && itemKey && onRemoveOrderTemplate(itemKey);
};
const OrderTemplateActions = {
    removeOrderTemplate: _removeItemFromOrderTemplateList,
};
export const OrderTemplateRender = (input) => {
    const { Id, orderTemplate, removeFromOrderTemplateListText, orderTemplateState, handlers, name, imageSettings, context, telemetryContent } = input;
    if (!Id) {
        return null;
    }
    const _getOrderTemplatePageUrl = () => {
        const url = getUrlSync('ordertemplate', context.actionContext) || '';
        const separator = url.includes('?') ? '&' : '?';
        if (Id) {
            return `${url}${separator}id=${Id}`;
        }
        else {
            return '';
        }
    };
    const removeOrderTemplateAction = (event) => { return OrderTemplateActions.removeOrderTemplate(input); };
    const { onDismiss } = handlers;
    return {
        key: `${Id}-template`,
        orderTemplateImage: _renderOrderTemplateImages(input.context, orderTemplate.orderTemplateLines, imageSettings),
        orderTemplateAriaLabel: _renderAriaLabel(input),
        orderTemplateName: (React.createElement("div", null,
            React.createElement("div", { className: 'ms-order-template__list-item-title' },
                React.createElement("a", { href: _getOrderTemplatePageUrl() }, name)),
            React.createElement("div", { className: 'ms-order-template__line-count' },
                orderTemplate.totalLines,
                " line items"),
            React.createElement("hr", { color: '#F9F9F9' }))),
        addToCartButton: (React.createElement("div", { className: 'ms-order-template__add-to-bag-button-div' },
            React.createElement(AddOrderTemplateToCartComponent, { id: Id, context: context, typeName: input.moduleTypeName, data: {
                    orderTemplate: input.orderTemplate
                }, className: 'ms-order-template__add-to-bag-button', addToCartText: input.addToBagText, dialogStrings: input.resources, telemetryContent: telemetryContent }))),
        removeButton: (React.createElement(Button, { className: 'ms-order-template__remove-list', "aria-label": removeFromOrderTemplateListText, onClick: removeOrderTemplateAction })),
        orderTemplateStatusMessage: orderTemplateState && orderTemplateState.isOpen && orderTemplateState.userMessage &&
            (React.createElement("div", { className: 'ms-orderTemplate__status' },
                React.createElement(Alert, { color: orderTemplateState.statusCssString, isOpen: orderTemplateState.isOpen, toggle: onDismiss },
                    React.createElement("span", null, orderTemplateState.userMessage))))
    };
};
const _renderOrderTemplateImages = (context, orderTemplateLines, imageSettings) => {
    const defaultImageSettings = {
        viewports: {
            xs: { q: `w=140&h=140&m=6`, w: 0, h: 0 },
            lg: { q: `w=140&h=140&m=6`, w: 0, h: 0 },
            xl: { q: `w=140&h=140&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };
    if (orderTemplateLines) {
        return (React.createElement("div", { className: 'ms-order-template__image-container' },
            React.createElement("div", { className: 'row' },
                React.createElement("div", { className: classNames(classNames, 'column') },
                    React.createElement("div", { className: 'ms-order-template__image-props' }, orderTemplateLines.length > 0 &&
                        React.createElement(Image, { src: orderTemplateLines[0].fullProduct?.ProductDetails.PrimaryImageUrl || '', fallBackSrc: getFallbackImageUrl(orderTemplateLines[0].fullProduct?.ProductDetails.ItemId, context.actionContext.requestContext.apiSettings)
                                || '', gridSettings: context.request.gridSettings, imageSettings: imageSettings || defaultImageSettings, loadFailureBehavior: 'empty' }))),
                React.createElement("div", { className: classNames(classNames, 'column') },
                    React.createElement("div", { className: 'ms-order-template__image-props' }, orderTemplateLines.length > 1 &&
                        React.createElement(Image, { src: orderTemplateLines[1].fullProduct?.ProductDetails.PrimaryImageUrl || '', fallBackSrc: getFallbackImageUrl(orderTemplateLines[1].fullProduct?.ProductDetails.ItemId, context.actionContext.requestContext.apiSettings)
                                || '', gridSettings: context.request.gridSettings, imageSettings: imageSettings || defaultImageSettings, loadFailureBehavior: 'empty' })))),
            React.createElement("div", { className: 'row' },
                React.createElement("div", { className: classNames(classNames, 'column') },
                    React.createElement("div", { className: 'ms-order-template__image-props' }, orderTemplateLines.length > 2 &&
                        React.createElement(Image, { src: orderTemplateLines[2].fullProduct?.ProductDetails.PrimaryImageUrl || '', fallBackSrc: getFallbackImageUrl(orderTemplateLines[2].fullProduct?.ProductDetails.ItemId, context.actionContext.requestContext.apiSettings)
                                || '', gridSettings: context.request.gridSettings, imageSettings: imageSettings || defaultImageSettings, loadFailureBehavior: 'empty' }))),
                React.createElement("div", { className: classNames(classNames, 'column') },
                    React.createElement("div", { className: 'ms-order-template__image-props' }, orderTemplateLines.length > 3 &&
                        React.createElement(Image, { src: orderTemplateLines[3].fullProduct?.ProductDetails.PrimaryImageUrl || '', fallBackSrc: getFallbackImageUrl(orderTemplateLines[3].fullProduct?.ProductDetails.ItemId, context.actionContext.requestContext.apiSettings)
                                || '', gridSettings: context.request.gridSettings, imageSettings: imageSettings || defaultImageSettings, loadFailureBehavior: 'empty' }))))));
    }
    else {
        return (React.createElement("div", { className: 'ms-order-template__image-container' }));
    }
};
const _renderAriaLabel = (props) => {
    const { name } = props;
    return (`${name}`);
};
//# sourceMappingURL=order-template-list.js.map