import { __decorate } from "tslib";
import { Alert, Heading } from '@msdyn365-commerce-modules/utilities';
import { deleteAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { OrderTemplateListStatusMessage, OrderTemplateRender } from './components/';
import CreateNewTemplateButtonComponent from './components/create-order-template';
let OrderTemplateList = class OrderTemplateList extends React.Component {
    constructor(props) {
        super(props);
        this._onDismiss = () => {
            this.setState({
                isOpen: false
            });
        };
        this._reloadPage = async () => {
            window.location.reload();
        };
        this._onRemoveFromOrderTemplateList = (productListId) => {
            const { context, data, telemetry, resources } = this.props;
            const { orderTemplates } = data;
            if (context && context.actionContext) {
                const userToken = context.request.user.isAuthenticated && context.request.user.token;
                if (userToken && orderTemplates.result && orderTemplates.result[0] && productListId) {
                    const orderTemplate = orderTemplates.result.find(p => p.productList.Id === productListId);
                    if (orderTemplate) {
                        deleteAsync({ callerContext: context.actionContext }, orderTemplate.productList)
                            .then()
                            .catch((error) => {
                            telemetry.warning('[order-template-list] Unable to delete order template.');
                            telemetry.error(error);
                            this.setState({
                                itemKey: productListId,
                                headerStatusMessage: resources.deleteOrderTemplateFailedText,
                                statusCssString: 'danger',
                                messageGlyph: 'fas fa-exclamation-triangle',
                                isOpen: true
                            });
                        }).then(this._reloadPage);
                    }
                    else {
                        telemetry.warning('[order-template-list] Failed to delete order template. Order template was not found');
                    }
                }
                else {
                    telemetry.warning('[order-template-list] Failed to delete order template.');
                }
            }
        };
        this.state = {
            itemKey: '',
            userMessage: '',
            headerStatusMessage: '',
            statusCssString: 'success',
            messageGlyph: 'fas fa-check',
            isOpen: false,
        };
    }
    async componentDidMount() {
        this.setState({});
    }
    render() {
        const { className } = this.props.config;
        const { emptyOrderTemplateText, createNewTemplateButtonText } = this.props.resources;
        const { orderTemplates } = this.props.data;
        const orderTemplatesData = orderTemplates && (orderTemplates).result;
        if (orderTemplates.status === 'LOADING') {
            const errorProps = {
                ...this.props,
                OrderTemplateList: {
                    moduleProps: this.props,
                    className: classnames('ms-order-template', className),
                },
                status: 'LOADING',
                statusMessage: React.createElement(OrderTemplateListStatusMessage, { errorType: 'LOADING', text: 'Loading...' }),
                heading: (React.createElement(Heading, { className: 'ms-order-template__heading', text: this.props.resources.orderTemplateListTitle })),
            };
            return this.props.renderView(errorProps);
        }
        if (!!orderTemplatesData && orderTemplatesData.length === 0) {
            const emptyViewProps = {
                ...this.props,
                OrderTemplateList: {
                    moduleProps: this.props,
                    className: classnames('ms-order-template', className),
                },
                status: 'EMPTY',
                statusMessage: React.createElement(OrderTemplateListStatusMessage, { errorType: 'EMPTY', text: emptyOrderTemplateText }),
                heading: (React.createElement(Heading, { className: 'ms-order-template__heading', text: this.props.resources.orderTemplateListTitle })),
            };
            return this.props.renderView(emptyViewProps);
        }
        const viewProps = {
            ...this.props,
            OrderTemplateList: {
                moduleProps: this.props,
                className: classnames('ms-order-template', className),
            },
            status: 'SUCCESS',
            heading: (React.createElement(Heading, { className: 'ms-order-template__heading', text: this.props.resources.orderTemplateListTitle })),
            createOrderTemplateButton: (React.createElement(CreateNewTemplateButtonComponent, { context: this.props.context, id: this.props.id, typeName: this.props.typeName, data: {}, createOrderTemplateText: createNewTemplateButtonText, onOrderTemplateCreated: this._reloadPage, createOrderTemplateDialogResources: this._generateOrderTemplateNameDialogResources(this.props.resources) })),
            templateHeaderStatusMessage: this.state.isOpen && this.state.headerStatusMessage && (React.createElement("div", { className: 'ms-order-template__products-status' },
                React.createElement(Alert, { color: this.state.statusCssString, isOpen: this.state.isOpen, toggle: this._onDismiss },
                    React.createElement("span", null, this.state.headerStatusMessage)))),
            OrderTemplates: {
                className: 'ms-order-template__list-item',
                tag: 'ul',
            },
            OrderTemplate: {
                className: 'ms-order-template__tile',
                tag: 'li',
            },
            orderTemplates: orderTemplatesData && this._renderOrderTemplateList(orderTemplatesData)
        };
        return this.props.renderView(viewProps);
    }
    _generateOrderTemplateNameDialogResources(resources) {
        return {
            orderTemplateHeaderLabel: resources.createOrderTemplateHeader,
            orderTemplateTitleLabel: resources.orderTemplateTitle,
            orderTemplateNameAriaLabel: resources.orderTemplateNameAriaLabel,
            orderTemplateDescription: resources.createOrderTemplateDescription,
            defaultOrderTemplateName: resources.defaultOrderTemplateName,
            orderTemplateButtonLabel: resources.createOrderTemplateButtonText,
            orderTemplateCancelButtonLabel: resources.cancelNewOrderTemplateCreationButtonText
        };
    }
    _renderOrderTemplateList(orderTemplates) {
        const { context, telemetry } = this.props;
        const { imageSettings } = this.props.config;
        return orderTemplates.map((orderTemplate, index) => {
            const currentTemplateProps = {
                orderTemplateState: this.state,
                Id: orderTemplate.productList.Id,
                name: orderTemplate.productList.Name,
                orderTemplate: orderTemplate,
                context: context,
                imageSettings: imageSettings,
                removeFromOrderTemplateListText: 'remove',
                addToBagText: this.props.resources.addToBagButtonText,
                index: index,
                itemKey: orderTemplate.productList.Id,
                telemetry: telemetry,
                moduleId: this.props.id,
                moduleTypeName: this.props.typeName,
                handlers: {
                    onRemoveOrderTemplate: this._onRemoveFromOrderTemplateList,
                    onDismiss: this._onDismiss,
                },
                resources: {
                    closeWindowButtonText: this.props.resources.closeWindowButtonText,
                    addToCartFailureMessage: this.props.resources.addToCartFailureMessage,
                    addToCartSuccessMessage: this.props.resources.addToCartSuccessMessage,
                    addToCartProcessMessage: this.props.resources.addToCartProcessMessage,
                    linesAddedToCartDialogResources: {
                        viewCartButtonText: this.props.resources.viewCartButtonText,
                        orderTemplateCloseButtonText: this.props.resources.orderTemplateCloseButtonText,
                        linesAddedToCartHeaderItemsOneText: this.props.resources.linesAddedToCartHeaderItemsOneText,
                        linesAddedToCartHeaderLinesOneText: this.props.resources.linesAddedToCartHeaderLinesOneText,
                        linesAddedToCartHeaderLinesFormatText: this.props.resources.linesAddedToCartHeaderLinesFormatText,
                        linesAddedToCartHeaderMessageText: this.props.resources.linesAddedToCartHeaderMessageText
                    }
                }
            };
            return (OrderTemplateRender(currentTemplateProps));
        });
    }
};
OrderTemplateList = __decorate([
    observer
], OrderTemplateList);
export default OrderTemplateList;
//# sourceMappingURL=order-template-list.js.map