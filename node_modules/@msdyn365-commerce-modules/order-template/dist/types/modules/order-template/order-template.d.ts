import { OrderTemplateLine } from '@msdyn365-commerce-modules/retail-actions';
import { IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import { IItemAddedToCartDialogData } from '@msdyn365-commerce/components';
import { ProductListLine } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { IOrderTemplateActionsViewProps, IOrderTemplateData, IOrderTemplateLineViewProps, IOrderTemplateProps, IOrderTemplateResources } from '../../';
export interface IOrderTemplateLineActionMessageState {
    itemKey: string;
    userMessage: string;
    statusCssString: string;
    messageGlyph: string;
    isOpen: boolean;
    isItemAddedToOrderTemplateOpen: boolean;
    itemAddedToCartDialogData?: IItemAddedToCartDialogData;
    productSelection: IOrderTemplateLineViewModel[];
}
export declare type orderTemplateLinesStatus = 'LOADING' | 'SUCCESS' | 'FAILED' | 'EMPTY';
export interface IOrderTemplateViewProps extends IOrderTemplateProps<IOrderTemplateData> {
    OrderTemplateLines: IModuleProps;
    callbacks?: IOrderTemplateLinesCallbacks;
    status?: orderTemplateLinesStatus;
    statusMessage?: React.ReactNode;
    heading?: React.ReactNode;
    OrderTemplateActions?: INodeProps;
    ProductsTable?: INodeProps;
    ProductsTableRow?: INodeProps;
    ProductsTableHeading?: React.ReactNode;
    ProductDetails?: INodeProps;
    orderLines?: IOrderTemplateLineViewProps[];
    productListLines?: ProductListLine[];
    productsStatusMessage?: React.ReactNode;
    orderActions?: IOrderTemplateActionsViewProps | null;
    resources: IOrderTemplateResources;
    pagination?: React.ReactNode;
    itemAddedToCartDialog?: React.ReactNode;
    bulkOrderLineActions?: React.ReactNode;
}
export interface IOrderTemplateLinesCallbacks {
    updateQuantity(itemKey: string, quantity: number): void;
}
export interface IOrderTemplateLineViewModel extends OrderTemplateLine {
    isChecked: boolean;
}
declare class OrderTemplateLines extends React.Component<IOrderTemplateProps<IOrderTemplateData>, IOrderTemplateLineActionMessageState> {
    private readonly className;
    private telemetryContent?;
    constructor(props: IOrderTemplateProps<IOrderTemplateData>, state: IOrderTemplateLineActionMessageState);
    componentDidMount(): Promise<void>;
    render(): JSX.Element | null;
    onSelect(line: IOrderTemplateLineViewModel, isChecked: boolean): void;
    onSelectAll(isChecked: boolean): void;
    private _renderProductListHeader;
    private _getBulkActions;
    private _generateLinesAddedToCartDialogResources;
    private _generateItemAddedToCartDialogResources;
    private _onRemoveSelection;
    private _onAddSelectionToBag;
    private _renderOrderActions;
    private _generateOrderTemplateNameDialogResources;
    private _getCurrentUrl;
    private _renderItemAddedToCartDialog;
    private _renderPagination;
    private _renderProductList;
    private _onDismiss;
    private _changeQuantity;
    private _addItemToBag;
    private _removeItemFromOrderTemplateLines;
    private _renameTemplate;
    private _removeTemplate;
}
export default OrderTemplateLines;
