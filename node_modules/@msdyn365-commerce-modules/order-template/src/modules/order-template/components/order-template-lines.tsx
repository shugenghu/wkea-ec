import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { Button, INodeProps } from '@msdyn365-commerce-modules/utilities';
import { PriceComponent } from '@msdyn365-commerce/components';
import { ICoreContext, IImageSettings, Image, ITelemetry } from '@msdyn365-commerce/core';
import { ProductListLine } from '@msdyn365-commerce/retail-proxy';
import { ProductPrice, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import * as React from 'react';
import { IOrderTemplateLineViewModel } from '../order-template';
import OrderTemplateQuantity from './common/order-template-quantity';

export interface IOrderTemplateLineProps extends ProductListLine {
    orderTemplateLine: IOrderTemplateLineViewModel;
    productListLine: ProductListLine;
    price?: ProductPrice;
    context: ICoreContext;
    productUrl: string;
    imageSettings?: IImageSettings;
    telemetry: ITelemetry;
    moduleId: string;
    moduleTypeName: string;
    quantity: number;
    handlers: {
        onAddToBag(product: SimpleProduct, quantity: number, itemKey: string): void;
        onRemoveItem(itemKey: string): void | undefined;
        onChangeQuantity(orderTemplateLineId: string, quantity: number): void;
        onSelect(line: IOrderTemplateLineViewModel, isChecked: boolean): void;
    };
    resources: {
        productDimensionTypeColor: string;
        productDimensionTypeSize: string;
        productDimensionTypeStyle: string;
        originalPriceText: string;
        currentPriceText: string;
        freePriceText: string;
        inputQuantityAriaLabel: string;
        removeFromOrderTemplateLinesText: string;
        addToBagButtonText: string;
    };
}

export interface IOrderTemplateLineViewProps {
    key: string;
    productImage: React.ReactNode;
    productPrice?: React.ReactNode;
    addToBagButton?: React.ReactNode;
    removeButton?: React.ReactNode;
    productName?: string;
    productNumber?: React.ReactNode;
    productInfo?: React.ReactNode;
    productLabel?: React.ReactNode;
    productUnitOfMeasure?: React.ReactNode;
    productQuantity?: number;
    productQuantityView?: React.ReactNode;
    productListId: string;
    selectLine: React.ReactNode;
}

const _addItemToBag = (props: IOrderTemplateLineProps): void => {
    const { orderTemplateLine, productListLine, quantity, handlers } = props;
    const { LineId } = productListLine;
    const { onAddToBag } = handlers;

    onAddToBag && orderTemplateLine && LineId && onAddToBag(orderTemplateLine.fullProduct!.ProductDetails, quantity, LineId);
};

const _removeItemFromOrderTemplateLines = (props: IOrderTemplateLineProps): void => {
    const { onRemoveItem } = props.handlers;
    const { productListLine } = props;
    const { LineId } = productListLine;

    onRemoveItem && LineId && onRemoveItem(LineId);
};

const OrderTemplateLineActions = {
    addToBag: _addItemToBag,
    removeItem: _removeItemFromOrderTemplateLines
};

export const OrderTemplateLineView = (input: IOrderTemplateLineProps): IOrderTemplateLineViewProps | null => {
    const { orderTemplateLine, productListLine, price, context, imageSettings, quantity, resources } = input;
    const product = orderTemplateLine.fullProduct;
    const { LineId, UnitOfMeasure } = productListLine;
    const { removeFromOrderTemplateLinesText, addToBagButtonText } = resources;
    if (!product) {
        return null;
    }

    const addItemAction = (event: React.MouseEvent<HTMLElement>) => {
        return OrderTemplateLineActions.addToBag(input);
    };
    const removeItemAction = (event: React.MouseEvent<HTMLElement>) => {
        return OrderTemplateLineActions.removeItem(input);
    };
    const onSelectLine = (event: React.ChangeEvent<HTMLInputElement>) => {
        orderTemplateLine.isChecked = !orderTemplateLine.isChecked;

        input.handlers.onSelect(orderTemplateLine, event.target.checked);
    };
    const { ItemId, Name, PrimaryImageUrl } = product.ProductDetails;
    const fallbackImage = getFallbackImageUrl(ItemId, context.actionContext.requestContext.apiSettings);

    return {
        selectLine: (
            <input type='checkbox' className='bulk-selection-field' checked={orderTemplateLine.isChecked} aria-checked={orderTemplateLine.isChecked} onChange={onSelectLine}/>
        ),
        key: LineId!,
        productImage: PrimaryImageUrl && Name && (
            <div className='ms-order-template-table-line__product-image'>
                {_renderProductImage(context, product.ProductDetails.Name!, PrimaryImageUrl, fallbackImage, imageSettings)}
            </div>
        ),
        productInfo: _renderProductInfo(input),
        productPrice: price && _renderPrice(input),
        productNumber: product && <div className='ms-order-template-table-line__product-number'>{ItemId}</div>,
        productUnitOfMeasure: price ? (
            <div className='ms-order-template-table-line__product-unit-of-measure'>{UnitOfMeasure || price.UnitOfMeasure}</div>
        ) : (
            undefined
        ),
        productListId: LineId!,
        removeButton: (
            <Button
                className='ms-order-template-table-line__product-remove-button'
                onClick={removeItemAction}
                title={removeFromOrderTemplateLinesText}
            />
        ),
        productQuantityView: <div>{_generateQuantity(input, LineId!)}</div>,
        productQuantity: quantity,
        addToBagButton: (
            <Button className='ms-order-template-table-line__product-add-button' onClick={addItemAction} title={addToBagButtonText} />
        )
    };
};

export interface IOrderTemplateProductQuantityViewProps {
    ContainerProps: INodeProps;
    input: React.ReactNode;
}

const _generateQuantity = (props: IOrderTemplateLineProps, itemKey: string): React.ReactNode => {
    const { handlers, resources, quantity } = props;

    const { onChangeQuantity } = handlers;
    const onChange = (newValue: number) => {
        if (onChangeQuantity) {
            onChangeQuantity(itemKey, newValue);
        }
    };
    return (
        <OrderTemplateQuantity
            currentCount={quantity}
            onChange={onChange}
            inputQuantityAriaLabel={resources.inputQuantityAriaLabel}
        />
    );
};

const _renderProductImage = (
    context: ICoreContext,
    heading: string,
    image?: string,
    fallbackImage?: string,
    imageSettings?: IImageSettings
): JSX.Element | null => {
    const defaultImageSettings: IImageSettings = {
        viewports: {
            xs: { q: `w=64&h=64&m=6`, w: 0, h: 0 },
            lg: { q: `w=64&h=64&m=6`, w: 0, h: 0 },
            xl: { q: `w=64&h=64&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };

    if (image) {
        return (
            <Image
                className='ms-order-template-table-line__product-image'
                altText={heading}
                title={heading}
                src={image}
                fallBackSrc={fallbackImage}
                gridSettings={context.request.gridSettings!}
                imageSettings={imageSettings || defaultImageSettings}
                loadFailureBehavior='empty'
            />
        );
    }
    return null;
};

const _renderPrice = (props: IOrderTemplateLineProps): JSX.Element | null => {
    const { price, context, moduleId, moduleTypeName, resources } = props;

    if (price) {
        return (
            <PriceComponent
                id={moduleId}
                typeName={moduleTypeName}
                data={{ price: price }}
                className='ms-order-template-table-line__product-price'
                freePriceText={resources.freePriceText}
                originalPriceText={resources.originalPriceText}
                currentPriceText={resources.currentPriceText}
                context={context}
            />
        );
    }
    return null;
};

const _renderProductDimensions = (props: IOrderTemplateLineProps): (string | undefined)[] => {
    const { orderTemplateLine } = props;

    if (!orderTemplateLine.fullProduct || !orderTemplateLine.fullProduct.ProductDetails.Dimensions) {
        return [];
    }

    return orderTemplateLine.fullProduct.ProductDetails.Dimensions.map((dimension) => {
        if (!dimension.DimensionValue || !dimension.DimensionValue.Value) {
            return undefined;
        }

        return dimension.DimensionValue.Value;
    });
};

const _renderProductInfo = (props: IOrderTemplateLineProps): React.ReactNode | undefined => {
    const { orderTemplateLine, productUrl } = props;
    const { Name } = orderTemplateLine.fullProduct!.ProductDetails;

    const dimensions = _renderProductDimensions(props);
    if (!orderTemplateLine.fullProduct || !orderTemplateLine.fullProduct.ProductDetails.Dimensions) {
        return [];
    }

    const productName = productUrl ? (
        <a className='ms-order-template-table-line__product-info-name' href={productUrl}>
            {Name}
        </a>
    ) : (
        <div className='ms-order-template-table-line__product-info-name'>{Name}</div>
    );

    return (
        <div className='ms-order-template-table-line__product-info'>
            <div className='ms-order-template-table-line__product-info-name'>{productName}</div>
            <div className='ms-order-template-table-line__product-info-dimension'>
                {dimensions.length && dimensions.join(', ')}
            </div>
        </div>
    );
};
