import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { Button } from '@msdyn365-commerce-modules/utilities';
import { IImageSettings, Image } from '@msdyn365-commerce/core';
import { ProductSearchResult } from '@msdyn365-commerce/retail-proxy';
import classnames from 'classnames';
import React, { useState } from 'react';
import { IAddLineToTemplateProps } from '.';

export interface IProductListProps extends IAddLineToTemplateProps {
    products: ProductSearchResult[];
    imageSettings: IImageSettings;
    clickHandler(product: ProductSearchResult): Promise<void>;
    highlightSearchTerm(name: string): React.ReactNode;
}

export const ProductList = (props: IProductListProps) => {
    const {
        products,
        context: {
            actionContext: {
                requestContext: { apiSettings }
            },
            request: {
                gridSettings
            },
            cultureFormatter: {
                formatCurrency,
                // @ts-ignore
                currencyCode
            }
        },
        clickHandler,
        highlightSearchTerm,
        resources: { searchResultsCountVerbage, searchResultsCountSubject, selectProductButtonText },
        imageSettings
    } = props;
    const resultCount = searchResultsCountVerbage
        .replace('{count}', products.length.toString())
        .replace('{subject}', `${searchResultsCountSubject}${(products.length > 1 ? 's' : '')}`);

    return (
        <>
            <p className='msc-add-line-to-template__search-result-count'>{resultCount}</p>
            <div className='msc-add-line-to-template__product-list-container'>
                {products.map((product: ProductSearchResult, index: number) => {
                    const { Price, ItemId, Name, PrimaryImageUrl, RecordId } = product;
                    const price = formatCurrency(Price.toFixed(2), currencyCode);
                    const fallBackImg = getFallbackImageUrl(ItemId, apiSettings) || '';

                    return (
                        <div key={`product-${index}`} className='msc-add-line-to-template__product'>
                            <Image
                                src={PrimaryImageUrl || ''}
                                fallBackSrc={fallBackImg}
                                className={'thumbnail'}
                                gridSettings={gridSettings!}
                                imageSettings={imageSettings}
                                loadFailureBehavior='empty'
                            />
                            <div className='msc-add-line-to-template__product__attributes'>
                                <div className='msc-add-line-to-template__product__id'>{RecordId}</div>
                                {highlightSearchTerm(Name || '')}
                            </div>
                            <div className='msc-add-line-to-template__product-price-container'>
                                <span>{price}</span>
                                <ProductSelectButton product={product} buttonText={selectProductButtonText} clickHandler={clickHandler}/>
                            </div>
                        </div>
                    );
                })}
            </div>
        </>
    );
};

interface IProductSelectButton {
    product: ProductSearchResult;
    buttonText: string;
    clickHandler(product: ProductSearchResult): Promise<void>;
}

export const ProductSelectButton = (props: IProductSelectButton) => {
    const [isBusy, setBusy] = useState(false);
    const { product, buttonText, clickHandler } = props;
    const getClickHandler = () => async () => {
        setBusy(!isBusy);
        await clickHandler(product);
        setBusy(!isBusy);
    };

    return (
        <Button
            className={classnames('msc-add-line-to-template__product__select-button', { 'is-busy': isBusy })}
            aria-label={buttonText}
            onClick={getClickHandler()}
        >
            {buttonText}
        </Button>
    );
};