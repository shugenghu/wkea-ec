/**
 * Copyright (c) 2018 Microsoft Corporation
 */
import { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

type IDropdownState = {
    /**
     * @friendlyName selectedIndex
     * @description selected index
     */
    selectedIndex: string;
};

export interface IDropdownProps {
    dropdownId: number;
    dropdownName: string;
    dropdownList: IDropdownItemProps[];
    telemetryContent?: ITelemetryContent;
    onChange?(selection: IDropdownOnSelection): void;
}

export interface IDropdownItemProps {
    value: string;
    id: number;
}

export interface IDropdownOnSelection {
    dropdownId: number;
    selectId: string;
    selectedValue: string;
}

/**
 *
 * DropDown component
 * @extends {React.PureComponent<IDropdownProps, IDropdownState>}
 */
export class Dropdown extends React.PureComponent<IDropdownProps, IDropdownState> {
    private selectMenu: React.RefObject<HTMLSelectElement> = React.createRef<HTMLSelectElement>();

    constructor(props: IDropdownProps, state: IDropdownState) {
        super(props);
        this.state = {
            selectedIndex: ''
        };
    }

    public componentDidMount(): void {
        if (this.selectMenu.current) {
            this.selectMenu.current.selectedIndex = 0;
        }
    }

    public render(): JSX.Element {
        const {dropdownId, dropdownList, dropdownName } = this.props;

        return (
            <select
                id={`msc-dropdown__entry-${dropdownId}`}
                ref={this.selectMenu}
                aria-label={dropdownName}
                className='msc-dropdown__select'
                onChange={this._onChanged}
            >
                {dropdownList.map((item: IDropdownItemProps) => (item &&
                    <option
                        value={item.id}
                        key={item.id}
                        selected={+this.state.selectedIndex === +item.id}
                        aria-selected={+this.state.selectedIndex === +item.id}
                    >
                        {item.value}
                    </option>
                ))}
            </select>
        );
    }

    private _onChanged = (event: React.ChangeEvent<HTMLSelectElement>): void => {
        this.setState({selectedIndex: event.target.value});

        if (this.props.onChange) {
            this.props.onChange({
                dropdownId: this.props.dropdownId,
                selectId: event.target.value,
                selectedValue: event.target.innerText
            });
        }
    };
}