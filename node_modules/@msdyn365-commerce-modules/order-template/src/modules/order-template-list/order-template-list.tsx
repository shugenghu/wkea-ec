/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { OrderTemplate } from '@msdyn365-commerce-modules/retail-actions';
import { Alert, Heading, IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import { IOrderTemplateNameDialogResources } from '@msdyn365-commerce/components';
import { deleteAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { ISingleOrderTemplateProps, ISingleOrderTemplateViewProps, OrderTemplateListStatusMessage, OrderTemplateRender } from './components/';
import CreateNewTemplateButtonComponent from './components/create-order-template';
import { IOrderTemplateListData } from './order-template-list.data';
import { IOrderTemplateListProps, IOrderTemplateListResources } from './order-template-list.props.autogenerated';

export interface IOrderTemplateActionMessageState {
    itemKey: string;
    userMessage: string;
    statusCssString: string;
    messageGlyph: string;
    isOpen: boolean;
    headerStatusMessage: string;
}

export type orderTemplateListStatus = 'LOADING' | 'SUCCESS' | 'FAILED' | 'EMPTY';

export interface IOrderTemplateListViewProps extends IOrderTemplateListProps<IOrderTemplateListData> {
    OrderTemplateList: IModuleProps;
    status?: orderTemplateListStatus;
    statusMessage?: React.ReactNode;
    heading?: React.ReactNode;
    OrderTemplates?: INodeProps;
    OrderTemplate?: INodeProps;
    orderTemplates?: ISingleOrderTemplateViewProps[];
    createOrderTemplateButton?: React.ReactNode;
    templateHeaderStatusMessage?: React.ReactNode;
}

/**
 *
 * OrderTemplateList component
 * @extends {React.PureComponent<IOrderTemplateListProps<IOrderTemplateListData>, IOrderTemplateListActionMessageState>}
 */
@observer
class OrderTemplateList extends React.Component<IOrderTemplateListProps<IOrderTemplateListData>, IOrderTemplateActionMessageState> {

    constructor(props: IOrderTemplateListProps<IOrderTemplateListData>) {
        super(props);
        this.state = {
            itemKey: '',
            userMessage: '',
            headerStatusMessage: '',
            statusCssString: 'success',
            messageGlyph: 'fas fa-check',
            isOpen: false,
        };
    }

    public async componentDidMount(): Promise<void> {
        this.setState({});
    }

    public render(): JSX.Element | null {
        const { className } = this.props.config;
        const { emptyOrderTemplateText, createNewTemplateButtonText } = this.props.resources;
        const { orderTemplates } = this.props.data;
        const orderTemplatesData = orderTemplates && (orderTemplates).result;

        if (orderTemplates.status === 'LOADING') {
            const errorProps: IOrderTemplateListViewProps = {
                ...(this.props as IOrderTemplateListProps<IOrderTemplateListData>),
                OrderTemplateList: {
                    moduleProps: this.props,
                    className: classnames('ms-order-template', className),
                },
                status: 'LOADING',
                statusMessage: <OrderTemplateListStatusMessage errorType='LOADING' text='Loading...'/>,
                heading: (
                    <Heading
                        className='ms-order-template__heading'
                        text={this.props.resources.orderTemplateListTitle}
                    />
                ),
            };
            return this.props.renderView(errorProps);
        }

        if (!!orderTemplatesData && orderTemplatesData.length === 0) {
            // when no order templates are found for customer
            const emptyViewProps: IOrderTemplateListViewProps = {
                ...(this.props as IOrderTemplateListProps<IOrderTemplateListData>),
                OrderTemplateList: {
                    moduleProps: this.props,
                    className: classnames('ms-order-template', className),
                },
                status: 'EMPTY',
                statusMessage: <OrderTemplateListStatusMessage errorType='EMPTY' text={ emptyOrderTemplateText }/>,
                heading: (
                    <Heading
                        className='ms-order-template__heading'
                        text={this.props.resources.orderTemplateListTitle}
                    />
                ),
            };

            return this.props.renderView(emptyViewProps);
        }

        const viewProps: IOrderTemplateListViewProps = {
            ...(this.props as IOrderTemplateListProps<IOrderTemplateListData>),
            OrderTemplateList: {
                moduleProps: this.props,
                className: classnames('ms-order-template', className),
            },
            status: 'SUCCESS',
            heading: (
                <Heading
                    className='ms-order-template__heading'
                    text={this.props.resources.orderTemplateListTitle}
                />
            ),
            createOrderTemplateButton: (
                <CreateNewTemplateButtonComponent
                    context={this.props.context}
                    id={this.props.id}
                    typeName={this.props.typeName}
                    data={{}}
                    createOrderTemplateText={createNewTemplateButtonText}
                    onOrderTemplateCreated={this._reloadPage}
                    createOrderTemplateDialogResources={this._generateOrderTemplateNameDialogResources(this.props.resources)}
                />
            ),
            templateHeaderStatusMessage: this.state.isOpen && this.state.headerStatusMessage && (
                <div className='ms-order-template__products-status'>
                    <Alert color={this.state.statusCssString} isOpen={this.state.isOpen} toggle={this._onDismiss}>
                        <span>{this.state.headerStatusMessage}</span>
                    </Alert>
                </div>
            ),
            OrderTemplates: {
                className: 'ms-order-template__list-item',
                tag: 'ul',
            },
            OrderTemplate: {
                className: 'ms-order-template__tile',
                tag: 'li',
            },
            orderTemplates: orderTemplatesData && this._renderOrderTemplateList(orderTemplatesData)
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private _generateOrderTemplateNameDialogResources(resources: IOrderTemplateListResources): IOrderTemplateNameDialogResources {
        return {
            orderTemplateHeaderLabel: resources.createOrderTemplateHeader,
            orderTemplateTitleLabel: resources.orderTemplateTitle,
            orderTemplateNameAriaLabel: resources.orderTemplateNameAriaLabel,
            orderTemplateDescription: resources.createOrderTemplateDescription,

            defaultOrderTemplateName: resources.defaultOrderTemplateName,

            orderTemplateButtonLabel: resources.createOrderTemplateButtonText,
            orderTemplateCancelButtonLabel: resources.cancelNewOrderTemplateCreationButtonText
        };
    }

    private _renderOrderTemplateList(orderTemplates: OrderTemplate[]): ISingleOrderTemplateViewProps[] {
        const { context, telemetry } = this.props;
        const { imageSettings } = this.props.config;
        return orderTemplates.map((orderTemplate: OrderTemplate, index) => {
            const currentTemplateProps: ISingleOrderTemplateProps = {
                orderTemplateState: this.state,
                Id: orderTemplate.productList.Id,
                name: orderTemplate.productList.Name,
                orderTemplate: orderTemplate,
                context: context,
                imageSettings: imageSettings,
                removeFromOrderTemplateListText: 'remove',
                addToBagText: this.props.resources.addToBagButtonText,
                index: index,
                itemKey: orderTemplate.productList.Id,
                telemetry: telemetry,
                moduleId: this.props.id,
                moduleTypeName:  this.props.typeName,
                handlers: {
                    onRemoveOrderTemplate: this._onRemoveFromOrderTemplateList,
                    onDismiss: this._onDismiss,
                },
                resources: {
                    closeWindowButtonText: this.props.resources.closeWindowButtonText,
                    addToCartFailureMessage: this.props.resources.addToCartFailureMessage,
                    addToCartSuccessMessage: this.props.resources.addToCartSuccessMessage,
                    addToCartProcessMessage: this.props.resources.addToCartProcessMessage,
                    linesAddedToCartDialogResources: {
                        viewCartButtonText: this.props.resources.viewCartButtonText,
                        orderTemplateCloseButtonText: this.props.resources.orderTemplateCloseButtonText,
                        linesAddedToCartHeaderItemsOneText: this.props.resources.linesAddedToCartHeaderItemsOneText,
                        linesAddedToCartHeaderLinesOneText: this.props.resources.linesAddedToCartHeaderLinesOneText,
                        linesAddedToCartHeaderLinesFormatText: this.props.resources.linesAddedToCartHeaderLinesFormatText,
                        linesAddedToCartHeaderMessageText: this.props.resources.linesAddedToCartHeaderMessageText
                    }
                }
            };

            return (
                OrderTemplateRender(currentTemplateProps)!
            );
        });
    }

    private _onDismiss = () => {
        this.setState({
            isOpen: false
        });
    }

    private _reloadPage = async () => {
        window.location.reload();
    }

    private _onRemoveFromOrderTemplateList = (productListId: string): void | undefined => {
        const { context, data, telemetry, resources } = this.props;
        const { orderTemplates } = data;

        if (context && context.actionContext) {
            const userToken = context.request.user.isAuthenticated && context.request.user.token;
            if (userToken && orderTemplates.result && orderTemplates.result[0] && productListId) {
                const orderTemplate = orderTemplates.result.find(p => p.productList.Id === productListId);
                if (orderTemplate) {
                    deleteAsync({ callerContext: context.actionContext }, orderTemplate.productList)
                    .then()
                    .catch((error: string) => {
                            telemetry.warning('[order-template-list] Unable to delete order template.');
                            telemetry.error(error);
                            this.setState({
                                itemKey: productListId,
                                headerStatusMessage: resources.deleteOrderTemplateFailedText,
                                statusCssString: 'danger',
                                messageGlyph: 'fas fa-exclamation-triangle',
                                isOpen: true
                            });
                    }).then(this._reloadPage);
                } else {
                telemetry.warning('[order-template-list] Failed to delete order template. Order template was not found');
                }
            } else {
                    telemetry.warning('[order-template-list] Failed to delete order template.');
            }
        }
    }

}

export default OrderTemplateList;
