/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { OrderTemplate, OrderTemplateLine, wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { FullProduct } from '@msdyn365-commerce/commerce-entities';
import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { ProductList, ProductListLine } from '@msdyn365-commerce/retail-proxy';
import { mount } from 'enzyme';
import * as React from 'react';
import OrderTemplateList from '../order-template-list';
import { IOrderTemplateListData } from '../order-template-list.data';
import { HeadingTag, IOrderTemplateListConfig, IOrderTemplateListProps, IOrderTemplateListResources } from '../order-template-list.props.autogenerated';

const mockFullProduct = {
    ProductDetails: {
        AdjustedPrice: 145,
        BasePrice: 145,
        Behavior: {
            AllowNegativePhysicalInventory: false,
            ExtensionProperties: [],
            HasSerialNumber: false,
            IsBlankSerialNumberAllowed: false,
            IsBlankSerialNumberReceiptAllowed: false,
            IsDiscountAllowed: true,
            IsKitDisassemblyAllowed: false,
            IsManualDiscountAllowed: true,
            IsNegativeQuantityAllowed: false,
            IsReturnAllowed: true,
            IsSaleAtPhysicalStoresAllowed: true,
            IsSerialNumberControlEnabled: false,
            IsSerialNumberRequired: false,
            IsStorageDimensionGroupLocationActive: true,
            IsStorageDimensionGroupLocationAllowBlankReceiptEnabled: false,
            IsStorageDimensionGroupLocationBlankIssueAllowed: false,
            IsZeroSalePriceAllowed: false,
            KeyInPriceValue: 4,
            KeyInQuantityValue: 0,
            MustKeyInComment: false,
            MustPrintIndividualShelfLabelsForVariants: false,
            MustPromptForSerialNumberOnlyAtSale: false,
            MustWeighProductAtSale: false,
            ValidFromDateForSaleAtPhysicalStores: new Date('Wed Jul 03 2019 14:44:37 GMT-0700'),
            ValidToDateForSaleAtPhysicalStores: new Date('Wed Jul 03 2019 14:44:37 GMT-0700')
        },
        Components: [],
        DefaultUnitOfMeasure: 'ea',
        Description: 'Classic dress shoes made of authentic leather.',
        ExtensionProperties: [],
        ItemId: '92077',
        ItemServiceTypeValue: 0,
        ItemTypeValue: 0,
        LinkedProducts: [],
        MasterProductId: 68719493343,
        Name: 'Classic Leather Dress Shoes',
        Price: 145,
        PrimaryImageUrl:
            'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/Products%2F92077%20%5E%20%20%5E%208.5%20%5E%20%20%5E%20Regular_000_001.png',
        ProductTypeValue: 5,
        RecordId: 68719493351,
        Dimensions: [
            {
                DimensionTypeValue: 3,
                ExtensionProperties: [],
                DimensionValue: {
                    DimensionId: '8.5',
                    ExtensionProperties: [],
                    RecordId: 22565421192,
                    Value: '8.5'
                }
            },
            {
                DimensionTypeValue: 4,
                ExtensionProperties: [],
                DimensionValue: {
                    DimensionId: 'Regular',
                    ExtensionProperties: [],
                    RecordId: 5637144583,
                    Value: 'Regular'
                }
            }
        ]
    },
    ProductPrice: {
        AdjustedPrice: 145,
        BasePrice: 145,
        CatalogId: 0,
        ChannelId: 68719478279,
        CurrencyCode: 'USD',
        CustomerContextualPrice: 145,
        DiscountAmount: 0,
        DiscountLines: [],
        ExtensionProperties: [],
        InventoryDimensionId: '#0000001000006E07',
        ItemId: '92077',
        ListingId: 68719493351,
        ProductId: 68719493351,
        ProductLookupId: 0,
        TradeAgreementPrice: 145,
        UnitOfMeasure: 'ea',
        ValidFrom: new Date('Wed Jul 03 2019 14:44:37 GMT-0700')
    },
    ProductRating: {
        AverageRating: undefined,
        ExtensionProperties: [],
        ProductId: 68719493351,
        RatingDistribution: [],
        TotalRatings: 0
    }
} as FullProduct;

const mockProductListLine: ProductListLine = {
    CreatedDateTime: undefined,
    DataAreaId: 'usrt',
    DeletedDateTime: new Date('Mon Jan 01 1900 02:30:17 GMT+0230'),
    ExtensionProperties: [],
    LastUpdated: new Date('Tue Jun 16 2020 22:30:53 GMT+0300'),
    LineId: '15a64c8e9d974d97b876a726bba18eb2',
    ProductId: 68719493351,
    ProductListId: '103fe74cbe7443e0bd96a0741fb8fe39',
    Quantity: 23423342,
    UnitOfMeasure: 'ea'
};

const mockProductList: ProductList = {
    CreatedDateTime: undefined,
    CustomerId: '004047',
    DataAreaId: 'usrt',
    DeletedDateTime: new Date('Mon Jan 01 1900 02:30:17 GMT+0230'),
    ExtensionProperties: [],
    Id: '103fe74cbe7443e0bd96a0741fb8fe39',
    LastUpdated: new Date('Fri May 29 2020 00:29:17 GMT+0300'),
    Name: 'Name',
    ProductListLines: [mockProductListLine],
    ProductListTypeValue: 1
};

const mockOrderTemplate = new OrderTemplate(mockProductList, [new OrderTemplateLine(mockProductListLine, mockFullProduct)], 1);

const mockData: IOrderTemplateListData = {
    orderTemplates: wrapInResolvedAsyncResult<OrderTemplate[]>([mockOrderTemplate]),
};

const mockConfig: IOrderTemplateListConfig = {
    heading: {
        text: 'Order templates',
        tag: HeadingTag.h1
    }
};

const mockResources: IOrderTemplateListResources = {
    emptyOrderTemplateText: 'Your order template list is empty.',
    unableToGetOrderTemplateList: 'Unable to get order template list!',
    removeButtonText: 'Remove from order template list',
    addToBagButtonText: 'Add to bag',
    createNewTemplateButtonText: 'Create an order template',
    orderTemplateCreatedSuccessText: 'Order template created successfully',
    orderTemplateListTitle: 'Order templates',
    orderTemplateCreationFailedText: 'Failed to create new order template',
    deleteOrderTemplateFailedText: 'Failed to delete order template',
    closeWindowButtonText: 'closeWindowButtonText',
    addToCartFailureMessage: 'addToCartFailureMessage',
    addToCartSuccessMessage: 'addToCartSuccessMessage',
    addToCartProcessMessage: 'addToCartProcessMessage',
    viewCartButtonText: 'viewCartButtonText',
    orderTemplateCloseButtonText: 'orderTemplateCloseButtonText',
    linesAddedToCartHeaderItemsOneText: 'linesAddedToCartHeaderItemsOneText',
    linesAddedToCartHeaderLinesOneText: 'linesAddedToCartHeaderLinesOneText',
    linesAddedToCartHeaderLinesFormatText: 'linesAddedToCartHeaderLinesFormatText',
    linesAddedToCartHeaderMessageText: 'linesAddedToCartHeaderMessageText',
    createOrderTemplateHeader: 'createOrderTemplateHeader',
    orderTemplateTitle: 'orderTemplateTitle',
    orderTemplateNameAriaLabel: 'orderTemplateNameAriaLabel',
    createOrderTemplateDescription: 'createOrderTemplateDescription',
    defaultOrderTemplateName: 'defaultOrderTemplateName',
    createOrderTemplateButtonText: 'createOrderTemplateButtonText',
    cancelNewOrderTemplateCreationButtonText: 'cancelNewOrderTemplateCreationButtonText'
};

const mockActions = {};

const mockActionContext = buildHydratedMockActionContext();
// @ts-ignore
mockActionContext.requestContext.apiSettings = {
    baseImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/'
};
// @ts-ignore
const mockContext: ICoreContext<{}> = {
    actionContext: mockActionContext,
    request: {
        user: {
            isAuthenticated: true,
            token:
                'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ilg1ZVhrNHh5b2pORnVtMWtsMll0djhkbE5QNC1jNTdkTzZRR1RWQndhTmsifQ.eyJleHAiOjE1NzQzODA2MTQsIm5iZiI6MTU3NDM3NzAxNCwidmVyIjoiMS4wIiwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5mYWJyaWthbS5jb20vMDcxODA4YzMtMDIxMy00ZjQzLWI1ZTItZGYwMTI2NmU0NGFlL3YyLjAvIiwic3ViIjoiMmE2YjYwZjMtNTE3NS00YmExLWI5YzYtODM2ODQ5MWYyMWQ2IiwiYXVkIjoiNWY2M2Y1MGQtZDdlNy00YTRlLTg1MzQtZTg3NTk5ZmMwZmQ5Iiwibm9uY2UiOiI2MzcwOTk3MzgxMzc3MDMyNjYuTURnM056a3lOekl0T0RnNE9TMDBOVGxqTFRnNFpqa3RPRFUyTm1VelkyWmtObUU0WWpFMlpUVXhOREF0TUdRMU5DMDBOR0UyTFdFNVlUTXRabU0xWmpjM05EQTFPRGhrIiwiaWF0IjoxNTc0Mzc3MDE0LCJhdXRoX3RpbWUiOjE1NzQzNzcwMTQsIm9pZCI6IjJhNmI2MGYzLTUxNzUtNGJhMS1iOWM2LTgzNjg0OTFmMjFkNiIsImdpdmVuX25hbWUiOiJKb3JkYW5Ud28iLCJmYW1pbHlfbmFtZSI6IkV1Z2VuaW8iLCJlbWFpbHMiOlsidi1qb2V1Z0BtaWNyb3NvZnQuY29tIl0sInRmcCI6IkIyQ18xX3Npc3VfcjJwcGUiLCJjX2hhc2giOiI3a2ZPSnFMRDhNUUFfMnBmdnBpQVBnIn0.XUqgKAIBfc2eQBGSeBjgvAzGNyxmftcxEQktcbvM2aeChseBrZfl9-Jd8E5FbwY4x2cAxeTG_-NH6J7An_Q4gcCiGVb625BSEmgVuOj9KLN3yuUmgz3BwRgyu_pbByqpLWQXQGdiNTUDPUEGRReINEVneqCQ18iXScTgy_r4kMjB3dHeV8eWfrdtXlFz4IAinfKU19eoc_FixpJ_6jjUzcnrwt9E9eEnd09dOjSeByM4KRUAY9RWVNrJiqK33-kyUXPT8QCR3bEP9ApTe2DTSirMvAfpQ7_9m99EB7MbF2a6CqpBaBlUTAdvavwIDSPGItSklJ8zNvNWDIL-laf5gg',
            customerAccountNumber: '004219'
        }
    },
    app: {
        config: {
            maxQuantityForCartLineItem: 10
        }
    }
};

describe('OrderTemplateList', () => {
    let moduleProps: IOrderTemplateListProps<IOrderTemplateListData>;

    beforeEach(() => {
        mockData.orderTemplates.status = 'SUCCESS';
        moduleProps = {
        ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as IOrderTemplateListProps<IOrderTemplateListData>,
        resources: mockResources,
        // @ts-ignore
        renderView: jest.fn(props => <div props={props} />)
        };
    });

    it('renders correctly', () => {
        const orderTemplates = mount(<OrderTemplateList {...moduleProps} />);
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = orderTemplates.childAt(0).props().props;
        expect(viewProps.status).toBe('SUCCESS');
    });

    it('renders loading message correctly', () => {
        mockData.orderTemplates.status = 'LOADING';
        moduleProps = {
            ...(buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as IOrderTemplateListProps<IOrderTemplateListData>),
            resources: mockResources,
            // @ts-ignore
            renderView: jest.fn(props => <div props={props} />)
        };

        const orderTemplateList = mount(<OrderTemplateList {...moduleProps} />);
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = orderTemplateList.childAt(0).props().props;
        expect(viewProps.status).toBe('LOADING');
        expect(viewProps.statusMessage).toMatchSnapshot();
    });

    it('Successful - remove template', async () => {
        const orderTemplateList = mount(<OrderTemplateList {...moduleProps}/>);
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = orderTemplateList.childAt(0).props().props;
        expect(viewProps.orderTemplates).toBeDefined();

        const orderTemplate = viewProps.orderTemplates[0];
        expect(orderTemplate.removeButton).toBeDefined();
    });
});
