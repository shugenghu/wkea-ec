/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import * as React from 'react';

import { Modal, ModalBody, ModalFooter, ModalHeader, Module, Node } from '@msdyn365-commerce-modules/utilities';
import { IBusinessOrganizationListViewProps, IFormViewProps, InputID  } from './business-organization-list';
import { IBusinessFormItem} from './components/small-components';

const BusinessFormItem: React.FC<IBusinessFormItem> = ({
    wrapper,
    label,
    errorMessage,
    input
}) => {
    return (
        <Node {...wrapper}>
            {label}
            {errorMessage}
            {input}
        </Node>
    );
};

const BusinessUserForm: React.FC<IFormViewProps> = (props: IFormViewProps) => {
    const { modalClassName, FormWrapper, modalHeading, modalDescription, inputs, buttons, errorMessage, toggle } = props;

    const modalBody = (
        <>
            {modalDescription}
            <Node {...FormWrapper}>
                {inputs && inputs.map((item: IBusinessFormItem) => {
                    return (
                        <BusinessFormItem key={item.key} {...item} />
                    );
                })}
                {errorMessage && errorMessage.map((error: React.ReactNode, index: number) => {
                    return (
                        <React.Fragment key={index}>
                            {error}
                        </React.Fragment>
                    );
                })}
            </Node>
        </>

    );

    const modalFooter = buttons && buttons.map((button: React.ReactNode, index: number) => {
        return (
            <React.Fragment key={index}>
                {button}
            </React.Fragment>
        );
    });

    return _renderModal(modalClassName, true, modalHeading, modalBody, modalFooter, toggle);
};

const BusinessUserDetails: React.FC<IFormViewProps> = (props: IFormViewProps) => {
    const { modalClassName, FormWrapper, modalHeading, modalDescription, selectedUser, buttons, errorMessage, resources, toggle } = props;
    let modalBody = null;

    if (!selectedUser) {
        modalBody = errorMessage;
    } else {
        const { FirstName, LastName } = selectedUser;
        const userFullName = `${FirstName} ${LastName}`;

        modalBody = (
            <>
                { modalDescription }
                <ul className={`${FormWrapper.className}-list`}>
                    <li className={`${FormWrapper.className}-list-item-name`}>{userFullName}</li>
                    { Object.keys(selectedUser).map((data)=> {
                        if (data === InputID.FirstName || data === InputID.LastName) {
                            return null;
                        } else {
                            const label = resources[`table${data}HeadingText`] || data;
                            return <li className={`${FormWrapper.className}-list-item`}>{label}: {selectedUser[data]}</li>;
                        }
                    })}
                </ul>
            </>
        );
    }

    const modalFooter = buttons && buttons.map((button: React.ReactNode, index: number) => {
        return (
            <React.Fragment key={index}>
                {button}
            </React.Fragment>
        );
    });

    return _renderModal(modalClassName, true, modalHeading, modalBody, modalFooter, toggle);
};

const _getForm = (type: string, formProps: IFormViewProps, toggleModal?: () => void) => {
    switch(type) {
        case 'ADD':
        case 'EDIT':
            return <BusinessUserForm {...formProps} toggle={toggleModal}/>;
        case 'VIEW':
        case 'REMOVE':
            return <BusinessUserDetails {...formProps} toggle={toggleModal}/>;
        default:
            return null;
    }
};

const _renderModal = (className: string, isModalOpen: boolean, headingSection: React.ReactNode, bodySection: React.ReactNode, footerSection: React.ReactNode, toggleModal?: () => void) => {
    return (
        <Modal
            wrapClassName={className}
            autoFocus={true}
            fade={false}
            applicationNode={'renderPage'}
            isOpen={isModalOpen}
            toggle ={toggleModal}
        >
            <ModalHeader toggle={toggleModal}>
                {headingSection}
            </ModalHeader>
            <ModalBody>
                {bodySection}
            </ModalBody>
            <ModalFooter>
                {footerSection}
            </ModalFooter>
        </Modal>
    );
};

const BusinessOrganizationList: React.FC<IBusinessOrganizationListViewProps> = props => {
    const { OrganizationUserList, moduleContainer, heading, noUsersText, addUserButton, organizationListTable, form, formType, toggleModal } = props;

    if (noUsersText) {
        return (
            <Module {...OrganizationUserList}>
                <Node {...moduleContainer}>
                    {heading}
                    {addUserButton}
                    {noUsersText}
                </Node>
            </Module>
        );
    }

    return (
        <Module {...OrganizationUserList}>
            <Node {...moduleContainer}>
                {heading}
                {addUserButton}
                {organizationListTable}
            </Node>
            { form && _getForm(formType, form, toggleModal) }
       </Module>
    );
};

export default BusinessOrganizationList;