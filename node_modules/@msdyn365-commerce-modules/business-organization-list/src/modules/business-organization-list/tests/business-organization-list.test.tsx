/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/// <reference types="jest" />
import * as React from 'react';

import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';
import { buildHydratedMockActionContext, buildMockModuleProps} from '@msdyn365-commerce/core';
import { BusinessPartnerUser } from '@msdyn365-commerce/retail-proxy';
import { mount, render } from 'enzyme';
import BusinessOrganizationList, { FormType } from '../business-organization-list';
import { IBusinessOrganizationListData } from '../business-organization-list.data';
import { HeadingTag, IBusinessOrganizationListConfig, IBusinessOrganizationListProps, IBusinessOrganizationListResources } from '../business-organization-list.props.autogenerated';
import BusinessOrganizationListView from '../business-organization-list.view';

const mockUser1: BusinessPartnerUser = {
  Email: 'test@microsoft.com',
  BusinessPartnerId: '00000',
  FirstName: 'First',
  LastName: 'Last',
  StatusValue: 0
};

const mockUser2: BusinessPartnerUser = {
  Email: 'test2@microsoft.com',
  BusinessPartnerId: '00000',
  FirstName: 'Test2',
  LastName: 'Test2',
  StatusValue: 1
};

const mockUser3: BusinessPartnerUser = {
  Email: 'test3@microsoft.com',
  BusinessPartnerId: '00000',
  FirstName: 'Test3',
  LastName: 'Test3',
  StatusValue: 2
};

const mockData: IBusinessOrganizationListData = {
  // @ts-ignore partial mock
  users: {
    status: 'SUCCESS',
    result: [ mockUser1, mockUser2, mockUser3 ]
  }
};

const mockConfig: IBusinessOrganizationListConfig = {
  heading:{
    tag: HeadingTag.h2,
    text: 'Organization list',
  },
  tableSort: true,
  showPagination: true,
  paginationItemPerPage: 10
};

const mockResources:IBusinessOrganizationListResources = {
  addUserButtonText: 'Add a user',
  firstNameLabelText: 'First name',
  firstNameMaxLength: '20',
  lastNameLabelText: 'Last name',
  lastNameMaxLength: '20',
  emailAddressLabelText: 'Email address',
  spendingLimitLabelText: 'Spending limit',
  saveButtonText: 'Save',
  saveButtonArialabel: 'Save',
  cancelButtonText: 'Cancel',
  cancelButtonArialabel: 'Cancel',
  removeUserButtonText: 'Yes, remove',
  removeUserButtonArialabel: 'Remove User',
  cancelRemoveUserButtonText: 'No',
  cancelRemoveUserButtonArialabel: 'Cancel remove User',
  editUserFormHeadingText: 'Edit user',
  addUserFormHeadingText: 'Add user',
  requiredFieldMissingSummaryError: 'A required field is missing. Please fill out all required fields and try again.',
  fieldIncorrectErrorText: 'One or more fields are filled out incorrectly. Please check your entries and try again.',
  actionErrorText: 'Sorry we are unable to perform that action at this moment, please try again later.',
  paginationPreviousButtonText: 'Previous',
  paginationAriaLabel : 'Text for pagination aria label',
  paginationNextButtonText: 'Next',
  editButtonText: 'Edit',
  deleteButtonText: 'Delete',
  actionButtonText: 'Actions',
  activeStatusText: 'Active',
  pendingStatusText: 'Pending',
  removedStatusText: 'Removed',
  removeModalHeaderText: 'Remove a user',
  removeModalDescription: 'Are you sure you want to remove the user from the organization user list?',
  viewModalHeaderText: 'User details',
  emptyListMessage: 'No users',
  loadingMessage: 'Loading...',
  errorGettingUsersMessage: 'Sorry we are unable to load your organization at this moment, please try again later.',
  errorUpdatingUsersMessage: 'Sorry we are unable to edit/remove this user, please try again later.',
  allFieldsRequiredMessage: '*All Fields are required to add a user',
  tableNameHeadingText: 'User name',
  tableEmailHeadingText: 'Email',
  tableStatusHeadingText: 'Status',
  tableSpendingLimitHeadingText: 'Spending limit'
};

const mockActions = {};

const mockActionContext = buildHydratedMockActionContext();
// @ts-ignore
const mockContext: ICoreContext<{}> = {
  actionContext: mockActionContext,
  request: {
    query: {
      skip: 0
    }
  }
};

describe('BusinessOrganizationList', () => {
  let moduleProps: IBusinessOrganizationListProps<IBusinessOrganizationListData>;

  beforeAll(() => {
    moduleProps =  { ...buildMockModuleProps(mockData, mockActions, mockConfig, mockContext) as IBusinessOrganizationListProps<IBusinessOrganizationListData>,
      resources: mockResources,
      // @ts-ignore
      renderView: BusinessOrganizationListView
    };
  });

  it('renders correctly', () => {
    const component = render(<BusinessOrganizationList {...moduleProps}/>);
    expect(component).toMatchSnapshot();
  });

  it('renders correctly when data call fails', () => {
    const failedData = {
      // @ts-ignore partial mock
      users: {
        status: 'FAILED',
        result: {}
      }
    };
    const failedDataModuleProps =  { ...buildMockModuleProps(failedData, mockActions, mockConfig) as IBusinessOrganizationListProps<IBusinessOrganizationListData>,
      resources: mockResources,
      // @ts-ignore
      renderView: BusinessOrganizationListView
    };

    // @ts-ignore
    const component = mount(<BusinessOrganizationList {...failedDataModuleProps}/>);
    const errorMessage = component.find('.ms-business-organization-list__error-message');
    expect(errorMessage).toBeDefined();
  });

  it('renders correctly when users list is empty', () => {
    const emptyData = {
      // @ts-ignore partial mock
      users: {
        status: 'SUCCESS',
        result: [] as BusinessPartnerUser[]
      }
    };
    const emptyDataModuleProps =  { ...buildMockModuleProps(emptyData, mockActions, mockConfig) as IBusinessOrganizationListProps<IBusinessOrganizationListData>,
      resources: mockResources,
      // @ts-ignore
      renderView: BusinessOrganizationListView
    };

    // @ts-ignore
    const component = mount(<BusinessOrganizationList {...emptyDataModuleProps}/>);
    const errorMessage = component.find('.ms-business-organization-list__error-message');
    expect(errorMessage).toBeDefined();
  });

  it('renders correctly when users list is loading', () => {
    const loadingData = {
      // @ts-ignore partial mock
      users: {
        status: 'LOADING',
        result: {}
      }
    };
    const loadingDataModuleProps =  { ...buildMockModuleProps(loadingData, mockActions, mockConfig) as IBusinessOrganizationListProps<IBusinessOrganizationListData>,
      resources: mockResources,
      // @ts-ignore
      renderView: BusinessOrganizationListView
    };

    // @ts-ignore
    const component = mount(<BusinessOrganizationList {...loadingDataModuleProps}/>);
    const errorMessage = component.find('.ms-business-organization-list__error-message');
    expect(errorMessage).toBeDefined();
  });

  it('add user form renders correctly', () => {
    const component = mount(<BusinessOrganizationList {...moduleProps}/>);
    expect(component.state('formType')).toBe(FormType.None);

    // click on addUser button
    const addUserButton = component.find('.ms-business-organization-list__add-user-button').first();
    addUserButton.simulate('click');

    // check that content and type is correctly set
    expect(component.state('formType')).toBe(FormType.Add);
    const form = component.find('.ms-business-organization-list__modal .msc-modal__content') as React.ReactNode;
    const modalContent = render(form as React.ReactElement);
    expect(modalContent).toMatchSnapshot();
  });

  it('add user form submits correctly', () => {
    // @ts-ignore
    jest.spyOn(RetailActions, 'addOrganizationUser').mockImplementation(() => Promise.resolve({}));

    const component = mount(<BusinessOrganizationList {...moduleProps}/>);
    expect(component.state('formType')).toBe(FormType.None);

    // click on addUser button
    const addUserButton = component.find('.ms-business-organization-list__add-user-button').first();
    addUserButton.simulate('click');

    // check formType
    expect(component.state('formType')).toBe(FormType.Add);
    const form = component.find('.ms-business-organization-list__modal .msc-modal__content');

    // add valid inputs
    const inputFields  = form.find('input');
    inputFields.forEach(input => {
      const elementId = input.props().id;
      switch(elementId) {
        case 'Email':
            input.simulate('change', { target: { value: 'test@email.com', id: `${elementId}` }});
            break;
        case 'SpendingLimit':
            input.simulate('change', { target: { value: '100', id: `${elementId}` }});
            break;
        default:
            input.simulate('change', { target: { value: 'test value', id: `${elementId}` }});
      }
    });
    expect(component.state('isReady')).toBeTruthy();

    // click submit button
    const submitButton = component.find('.ms-business-organization-list__form-save').first();
    submitButton.simulate('click');
  });

  it('edit user form renders correctly', () => {
    const component = mount(<BusinessOrganizationList {...moduleProps}/>);
    expect(component.state('formType')).toBe(FormType.None);

    // click on editUser button
    const editUserButton = component.find('.ms-table__row-links-edit').first();
    editUserButton.simulate('click');

    // check that content and type is correctly set
    expect(component.state('formType')).toBe(FormType.Edit);
    const form = component.find('.ms-business-organization-list__modal .msc-modal__content') as React.ReactNode;
    const modalContent = render(form as React.ReactElement);
    expect(modalContent).toMatchSnapshot();
  });

  it('edit user form submits correctly', () => {
    // @ts-ignore
    jest.spyOn(RetailActions, 'editOrganizationUser').mockImplementation(() => Promise.resolve({}));

    const component = mount(<BusinessOrganizationList {...moduleProps}/>);
    expect(component.state('formType')).toBe(FormType.None);

    // click on editUser button
    const editUserButton = component.find('.ms-table__row-links-edit').first();
    editUserButton.simulate('click');

    // check formType
    expect(component.state('formType')).toBe(FormType.Edit);
    const form = component.find('.ms-business-organization-list__modal .msc-modal__content');

    // add valid inputs
    const inputFields  = form.find('input');
    inputFields.forEach(input => {
      const elementId = input.props().id;
      switch(elementId) {
        case 'Email':
            break;
        case 'SpendingLimit':
            input.simulate('change', { target: { value: '100', id: `${elementId}` }});
            break;
        default:
            input.simulate('change', { target: { value: 'test value', id: `${elementId}` }});
      }
    });
    expect(component.state('isReady')).toBeTruthy();

    // click submit button
    const submitButton = component.find('.ms-business-organization-list__form-save').first();
    submitButton.simulate('click');
  });

  it('delete user renders correctly', () => {
    const component = mount(<BusinessOrganizationList {...moduleProps}/>);
    expect(component.state('formType')).toBe(FormType.None);

    // click on editUser button
    const deleteUserButton = component.find('.ms-table__row-links-delete').first();
    deleteUserButton.simulate('click');

    // check that content and type is correctly set
    expect(component.state('formType')).toBe(FormType.Remove);
    const form = component.find('.ms-business-organization-list__modal .msc-modal__content');
    expect(form).toMatchSnapshot();
  });

  it('delete user submits correctly', () => {
    // @ts-ignore
    jest.spyOn(RetailActions, 'deleteOrganizationUser').mockImplementation(() => Promise.resolve({}));

    const component = mount(<BusinessOrganizationList {...moduleProps}/>);
    expect(component.state('formType')).toBe(FormType.None);

    // click on editUser button
    const deleteUserButton = component.find('.ms-table__row-links-delete').first();
    deleteUserButton.simulate('click');

    // click submit button
    const submitButton = component.find('.ms-business-organization-list__form-remove-user-button').first();
    submitButton.simulate('click');
  });

  it('view user details renders correctly', () => {
    // @ts-ignore
    const mockMobileContext: ICoreContext<{}> = {
      actionContext: mockActionContext,
      request: {
        device: {
          Type: 'Mobile'
        }
      }
    };

    const mobileModuleProps =  { ...buildMockModuleProps(mockData, mockActions, mockConfig, mockMobileContext) as IBusinessOrganizationListProps<IBusinessOrganizationListData>,
      resources: mockResources,
      // @ts-ignore
      renderView: BusinessOrganizationListView
    } as IBusinessOrganizationListProps<IBusinessOrganizationListData>;

    const component = mount(<BusinessOrganizationList {...mobileModuleProps}/>);
    const row = component.find('.ms-table__row').first();
    expect(row).toMatchSnapshot();
    const toggleButton = row.find('.ms-table__row-links-toggle').first();
    toggleButton.simulate('click', { event: {
      target: { 'data-type': 'row-0'}}
    });
    expect(row).toMatchSnapshot();
    const viewButton = component.find('.ms-table__row-links-view').first();
    viewButton.simulate('click');
    const cancelButton = component.find('.ms-business-organization-list__form-cancel').first();
    cancelButton.simulate('click');
  });
});
