import * as React from 'react';
import { Modal, ModalBody, ModalFooter, ModalHeader, Module, Node } from '@msdyn365-commerce-modules/utilities';
import { InputID } from './business-organization-list';
const BusinessFormItem = ({ wrapper, label, errorMessage, input }) => {
    return (React.createElement(Node, Object.assign({}, wrapper),
        label,
        errorMessage,
        input));
};
const BusinessUserForm = (props) => {
    const { modalClassName, FormWrapper, modalHeading, modalDescription, inputs, buttons, errorMessage, toggle } = props;
    const modalBody = (React.createElement(React.Fragment, null,
        modalDescription,
        React.createElement(Node, Object.assign({}, FormWrapper),
            inputs && inputs.map((item) => {
                return (React.createElement(BusinessFormItem, Object.assign({ key: item.key }, item)));
            }),
            errorMessage && errorMessage.map((error, index) => {
                return (React.createElement(React.Fragment, { key: index }, error));
            }))));
    const modalFooter = buttons && buttons.map((button, index) => {
        return (React.createElement(React.Fragment, { key: index }, button));
    });
    return _renderModal(modalClassName, true, modalHeading, modalBody, modalFooter, toggle);
};
const BusinessUserDetails = (props) => {
    const { modalClassName, FormWrapper, modalHeading, modalDescription, selectedUser, buttons, errorMessage, resources, toggle } = props;
    let modalBody = null;
    if (!selectedUser) {
        modalBody = errorMessage;
    }
    else {
        const { FirstName, LastName } = selectedUser;
        const userFullName = `${FirstName} ${LastName}`;
        modalBody = (React.createElement(React.Fragment, null,
            modalDescription,
            React.createElement("ul", { className: `${FormWrapper.className}-list` },
                React.createElement("li", { className: `${FormWrapper.className}-list-item-name` }, userFullName),
                Object.keys(selectedUser).map((data) => {
                    if (data === InputID.FirstName || data === InputID.LastName) {
                        return null;
                    }
                    else {
                        const label = resources[`table${data}HeadingText`] || data;
                        return React.createElement("li", { className: `${FormWrapper.className}-list-item` },
                            label,
                            ": ",
                            selectedUser[data]);
                    }
                }))));
    }
    const modalFooter = buttons && buttons.map((button, index) => {
        return (React.createElement(React.Fragment, { key: index }, button));
    });
    return _renderModal(modalClassName, true, modalHeading, modalBody, modalFooter, toggle);
};
const _getForm = (type, formProps, toggleModal) => {
    switch (type) {
        case 'ADD':
        case 'EDIT':
            return React.createElement(BusinessUserForm, Object.assign({}, formProps, { toggle: toggleModal }));
        case 'VIEW':
        case 'REMOVE':
            return React.createElement(BusinessUserDetails, Object.assign({}, formProps, { toggle: toggleModal }));
        default:
            return null;
    }
};
const _renderModal = (className, isModalOpen, headingSection, bodySection, footerSection, toggleModal) => {
    return (React.createElement(Modal, { wrapClassName: className, autoFocus: true, fade: false, applicationNode: 'renderPage', isOpen: isModalOpen, toggle: toggleModal },
        React.createElement(ModalHeader, { toggle: toggleModal }, headingSection),
        React.createElement(ModalBody, null, bodySection),
        React.createElement(ModalFooter, null, footerSection)));
};
const BusinessOrganizationList = props => {
    const { OrganizationUserList, moduleContainer, heading, noUsersText, addUserButton, organizationListTable, form, formType, toggleModal } = props;
    if (noUsersText) {
        return (React.createElement(Module, Object.assign({}, OrganizationUserList),
            React.createElement(Node, Object.assign({}, moduleContainer),
                heading,
                addUserButton,
                noUsersText)));
    }
    return (React.createElement(Module, Object.assign({}, OrganizationUserList),
        React.createElement(Node, Object.assign({}, moduleContainer),
            heading,
            addUserButton,
            organizationListTable),
        form && _getForm(formType, form, toggleModal)));
};
export default BusinessOrganizationList;
//# sourceMappingURL=business-organization-list.view.js.map