import * as React from 'react';
import { Button, getPayloadObject, getTelemetryAttributes } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
export const FormInput = ({ id, type, value, pattern, className, maxLength, isRequired, isDisabled, onChange }) => (React.createElement("input", { id: id, type: type, value: value, className: `${className}-input`, pattern: pattern !== '' ? pattern : undefined, "aria-required": isRequired, required: isRequired, maxLength: GetMaxLength(maxLength), onChange: onChange, disabled: isDisabled }));
export const FormLabel = ({ id, forId, className, text }) => (React.createElement("label", { id: `${id}_label`, className: `${className}-label`, htmlFor: forId }, text));
export const FormButton = ({ id, className, text, ariaLabel, telemetryContent, disabled, onClick }) => {
    const payLoad = getPayloadObject('click', telemetryContent, text);
    const attributes = getTelemetryAttributes(telemetryContent, payLoad);
    return (React.createElement(Button, Object.assign({ id: id, className: className, "aria-label": ariaLabel, disabled: disabled, onClick: onClick }, attributes), text));
};
export const FormFieldError = ({ id, className, type = 'page', message }) => {
    const errorClassName = `${className}__${type}-error`;
    return (React.createElement("div", { id: id, className: classnames(errorClassName, 'error', `${type}Level`), role: 'alert', "aria-live": 'assertive', "aria-hidden": 'true' }, React.createElement("p", { className: `${errorClassName}-text` }, message)));
};
const GetMaxLength = (maxLength) => {
    if (maxLength) {
        const parsedMaxLength = parseInt(maxLength, 10);
        if (!isNaN(parsedMaxLength)) {
            return parsedMaxLength;
        }
    }
    return undefined;
};
//# sourceMappingURL=small-components.js.map