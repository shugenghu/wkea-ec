/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { getPayloadObject, getTelemetryAttributes, getTelemetryObject, IModuleProps, INodeProps, IPayLoad, ITelemetryContent, onTelemetryClick } from '@msdyn365-commerce-modules/utilities';
import * as Msdyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';
import { IFooterItemConfig, IFooterItemProps, IHeadingData, ILinkData } from './footer-item.props.autogenerated';

export interface IFooterViewProps extends IFooterItemProps<IFooterItemConfig> {
    heading: React.ReactNode;
    image: React.ReactNode;
    text: React.ReactNode;
    linkText: React.ReactNode;
    className?:string;
    FooterItem: IModuleProps;
    HeadingContainer: INodeProps;
    ItemContainer: INodeProps;
    Link: INodeProps;
    EditableLink: React.ReactNode;
}

/**
 *
 * FooterItem component
 * @extends {React.PureComponent<IFooterItemProps<IFooterItemConfig>>}
 */
export class FooterItem extends React.PureComponent<IFooterItemProps<IFooterItemConfig>> {
    private telemetryContent: ITelemetryContent;
    private payLoad: IPayLoad;
    private attributes: Msdyn365.IDictionary<string> | undefined;
    constructor(props: IFooterItemProps<IFooterItemConfig>) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,
                                                   this.props.friendlyName,
                                                   this.props.telemetry);
        // Construct telemetry attribute to render
        this.payLoad = getPayloadObject('click', this.telemetryContent, '', '');
    }

    public render(): JSX.Element {
        const {heading, image, link, text} = this.props.config;
        const footerItemClassName = classnames('ms-footer__item', this.props.config.className);
        const linkText = link && link.linkText ? link.linkText : '';
        this.payLoad.contentAction.etext = linkText;
        this.attributes = getTelemetryAttributes(this.telemetryContent, this.payLoad);
        const viewProps: IFooterViewProps = {
            ... this.props,
            heading: this._createHeading(heading!),
            image: this._createImageMarkup(image!),
            text:this._createText(text!),
            linkText: this._createLinkText(link!),
            EditableLink: this._createLink(link!),
            // @ts-ignore
            FooterItem: {
                moduleProps: this.props,
                className: footerItemClassName
            },
            // @ts-ignore
            HeadingContainer: {
                className: 'ms-footer__heading'
            },
            // @ts-ignore
            ItemContainer: {
                className: 'ms-footer__link__container'
            },
             // @ts-ignore
            Link: link && link.linkUrl && link.linkUrl.destinationUrl && {
                tag: 'a',
                className: 'ms-footer__link',
                href: link.linkUrl.destinationUrl,
                title:linkText,
                target: link.openInNewTab ? '_blank' : undefined,
                onClick: onTelemetryClick(this.telemetryContent, this.payLoad, linkText),
                ...this.attributes
            },
            className:footerItemClassName
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text = event.target.value;

    public handleTextChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.text = event.target.value;

    public handleLinkTextChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.link!.linkText = event.target.value;

    private _createLink(link: ILinkData): React.ReactNode | null {
        if(link) {
            const linkText = link.linkText ? link.linkText : '';
            // TODO: Update the inner tag in the anchor link to span
            const editableLink: Msdyn365.ILinksData = {
                ariaLabel: link.ariaLabel,
                className: 'ms-footer__link',
                linkText: linkText,
                linkUrl: link.linkUrl.destinationUrl,
                openInNewTab: link.openInNewTab,
                role: 'button',
                additionalProperties: this.attributes!,
                onClick: onTelemetryClick(this.telemetryContent, this.payLoad, linkText)
            };
            return(
                <Msdyn365.Link
                    link={editableLink}
                    editProps={{onTextChange: this.handleLinkTextChange, requestContext: this.props.context.request}}
                />
            );

        }
        return null;
    }

    private _createLinkText(link: ILinkData): React.ReactNode | null {
        if(!link || !link.linkText) {
            return null;
        }

        return (<span className='ms-footer__link__text'>{link.linkText}</span>);
    }

    private _createHeading(heading: IHeadingData): React.ReactNode | null {
        if(!heading || !heading.text || !heading.text.length) {
            return null;
        }

        return (
            <Msdyn365.Text
                tag= {heading.tag || 'h2'}
                text= {heading.text}
                className='ms-footer__heading__title'
                editProps= {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}
            />
        );
    }

    private _createText(text: string): React.ReactNode | null {
        if (!text) {
            return null;
        }
        return (
                <Msdyn365.Text
                    tag= 'div'
                    text= {text}
                    className='ms-footer-item__text'
                    editProps={{onEdit: this.handleTextChange, requestContext: this.props.context.request}}
                />
        );
    }

    private _createImageMarkup(item: Msdyn365.IImageData, ariaHiddenAttr?: boolean): React.ReactNode | null {
        if(!item || !item.src || !item.src.length) {
            return null;
        }

        const defaultImageSettings: Msdyn365.IImageSettings = {
            viewports: {
                xs: { q: `w=24&h=24&m=6`, w: 0, h: 0 },
                lg: { q: `w=24&h=24&m=6`, w: 0, h: 0 }
            },
            lazyload: true
        };
        return (
            <Msdyn365.Image
                {...item}
                gridSettings={this.props.context.request.gridSettings!}
                imageSettings={item.imageSettings || defaultImageSettings}
                loadFailureBehavior='default'
                aria-hidden={ariaHiddenAttr}
                editProps={{key:this.props.config.image || {}, requestContext: this.props.context.request}}
            />
        );
    }
}

export default FooterItem;
