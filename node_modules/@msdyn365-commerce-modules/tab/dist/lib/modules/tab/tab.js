import { __decorate } from "tslib";
import * as MsDyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { createTabStateInput } from '../../data-actions/tab-state-data-action';
import { getContentID, TabItemType } from '../tab-item/tab-item';
let Tab = class Tab extends React.Component {
    constructor(props) {
        super(props);
        this.tabIndexQuery = 'activeTab';
        this.handleHeadingChange = (event) => this.props.config.heading.text = event.target.value;
        this._onClick = (index, id) => (e) => {
            const activeTabState = { activeContentIndex: index, tabId: id };
            this.props.context.actionContext.update(createTabStateInput(activeTabState), activeTabState);
            this.setState({ currentTabIndex: index });
            const requestContext = this.props.context.request;
            const newUrl = this._setGetParameter(requestContext, this.tabIndexQuery, `${this.props.id}:${String(index + 1)}`);
            requestContext && window.history.pushState({ path: newUrl }, '', newUrl);
        };
        this._onKeyDown = (index, id) => (e) => {
            debugger;
            if (e.keyCode === 13) {
                const activeTabState = { activeContentIndex: index, tabId: id };
                this.props.context.actionContext.update(createTabStateInput(activeTabState), activeTabState);
                this.setState({ currentTabIndex: index });
                const requestContext = this.props.context.request;
                const newUrl = this._setGetParameter(requestContext, this.tabIndexQuery, `${this.props.id}:${String(index + 1)}`);
                requestContext && window.history.pushState({ path: newUrl }, '', newUrl);
            }
            if (e.keyCode === 39 || e.keyCode === 37) {
                const { slots } = this.props;
                const slotLength = slots && slots.tabItems && slots.tabItems.length || 0;
                if (e.keyCode === 39) {
                    if (index + 1 === slotLength) {
                        index = -1;
                    }
                    const activeTabState = { activeContentIndex: index + 1, tabId: id };
                    this.props.context.actionContext.update(createTabStateInput(activeTabState), activeTabState);
                    this.setState({ currentTabIndex: index + 1 });
                    const requestContext = this.props.context.request;
                    const newUrl = this._setGetParameter(requestContext, this.tabIndexQuery, `${this.props.id}:${String(index + 2)}`);
                    requestContext && window.history.pushState({ path: newUrl }, '', newUrl);
                }
                else if (e.keyCode === 37) {
                    if (index === 0) {
                        index = slotLength;
                    }
                    const activeTabState = { activeContentIndex: index - 1, tabId: id };
                    this.props.context.actionContext.update(createTabStateInput(activeTabState), activeTabState);
                    this.setState({ currentTabIndex: index - 1 });
                    const requestContext = this.props.context.request;
                    const newUrl = this._setGetParameter(requestContext, this.tabIndexQuery, `${this.props.id}:${String(index)}`);
                    requestContext && window.history.pushState({ path: newUrl }, '', newUrl);
                }
            }
        };
        const { defaultTabIndex } = this.props.config;
        const { slots } = this.props;
        const slotLength = slots && slots.tabItems && slots.tabItems.length || 0;
        let initialIndex = defaultTabIndex && defaultTabIndex <= slotLength && defaultTabIndex > 0 ? defaultTabIndex - 1 : 0;
        const queryString = this.props.context && this.props.context.request && this.props.context.request.query && this.props.context.request.query.activeTab || '';
        let queryTabIndex = 0;
        if (queryString.indexOf(':') > 0) {
            const arr = queryString.split(':');
            const moduleId = arr[0];
            if (moduleId === this.props.id) {
                queryTabIndex = parseInt(arr[1], 10);
            }
        }
        initialIndex = queryTabIndex > 0 && queryTabIndex <= slotLength ? queryTabIndex - 1 : initialIndex;
        this.state = { currentTabIndex: initialIndex };
        this._getTabHeader = this._getTabHeader.bind(this);
        this._getTabContent = this._getTabContent.bind(this);
        this._onClick = this._onClick.bind(this);
        this._onKeyDown = this._onKeyDown.bind(this);
        this._setGetParameter = this._setGetParameter.bind(this);
        this.activeLink = null;
    }
    render() {
        const { slots } = this.props;
        const { heading, className } = this.props.config;
        const headingComponent = heading && (React.createElement(MsDyn365.Text, { className: 'ms-tab-header-section__heading', tag: heading.tag || 'h2', text: heading.text, editProps: { onEdit: this.handleHeadingChange, requestContext: this.props.context.request } }));
        const slotLength = slots && slots.tabItems && slots.tabItems.length || 0;
        const tabViewProps = {
            ...this.props,
            TabContainer: {
                moduleProps: this.props,
                className: classnames('ms-tab', className)
            },
            headerSection: { className: 'ms-tab-header-section' },
            tabsSection: { className: 'ms-tab-tabs-section', tag: 'ul', role: 'tablist' },
            heading: headingComponent,
            config: this.props && this.props.config,
            tabItemContainer: {
                tag: 'div',
                className: 'ms-tab-content-section',
            },
            tabContents: slotLength > 0 && slots.tabItems.map((item, index) => this._getTabContent(item, index)),
            tabHeaders: slotLength > 0 && slots.tabItems.map((item, index) => this._getTabHeader(item, index)),
        };
        return this.props.renderView(tabViewProps);
    }
    componentDidUpdate() {
        const { data } = this.props;
        const dataActionTabId = data && data.activeTabState && data.activeTabState.result && data.activeTabState.result.tabId;
        if (dataActionTabId) {
            if (this.props.id === dataActionTabId) {
                this.activeLink && this.activeLink.focus();
            }
        }
        else {
            const queryString = this.props.context && this.props.context.request && this.props.context.request.query && this.props.context.request.query.activeTab || '';
            if (queryString.indexOf(':') > 0) {
                const arr = queryString.split(':');
                const moduleId = arr[0];
                if (moduleId === this.props.id) {
                    this.activeLink && this.activeLink.focus();
                }
            }
        }
    }
    _getTabHeader(item, index) {
        const { data } = this.props;
        const activeContentIndex = data && data.activeTabState && data.activeTabState.result && data.activeTabState.result.activeContentIndex;
        const dataActionTabId = data && data.activeTabState && data.activeTabState.result && data.activeTabState.result.tabId;
        const selected = activeContentIndex !== undefined && dataActionTabId === this.props.id ? activeContentIndex === index : this.state.currentTabIndex === index;
        const contentID = getContentID(index, this.props.id);
        return (React.createElement("li", { key: index, className: 'ms-tab-tabs-section-li', tabIndex: selected ? 0 : -1, onClick: this._onClick(index, this.props.id), onKeyDown: this._onKeyDown(index, this.props.id), ref: link => { if (index === this.state.currentTabIndex) {
                this.activeLink = link;
            } }, "aria-controls": contentID, "aria-selected": selected, role: 'tab' },
            React.createElement(React.Fragment, { key: index }, React.cloneElement(item, { tabItemType: TabItemType.TabHeader, isSelected: index === this.state.currentTabIndex, itemIndex: index, tabId: this.props.id }))));
    }
    _getTabContent(item, index) {
        return (React.createElement(React.Fragment, { key: index }, React.cloneElement(item, { tabItemType: TabItemType.TabContent, isSelected: index === this.state.currentTabIndex, itemIndex: index, tabId: this.props.id })));
    }
    _setGetParameter(requestContext, paramName, paramValue) {
        let url;
        if (MsDyn365.msdyn365Commerce.isBrowser) {
            url = new URL(window.location.href);
        }
        else {
            url = new URL(requestContext.url.requestUrl.href);
        }
        const params = new window.URLSearchParams(url.search);
        params.set(paramName, paramValue);
        url.search = decodeURIComponent(params.toString());
        return url.toString();
    }
};
Tab = __decorate([
    observer
], Tab);
export default Tab;
//# sourceMappingURL=tab.js.map