import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import TabItem from '../../tab-item/tab-item';
import TabItemView from '../../tab-item/tab-item.view';
import Tab from '../tab';
import tabView from '../tab.view';
const mockTabData = {
    activeTabState: wrapInResolvedAsyncResult({
        activeContentIndex: 2,
        tabId: 'tab'
    })
};
const mockTabData1 = {
    activeTabState: wrapInResolvedAsyncResult({
        activeContentIndex: 2,
    })
};
const mockConfigWithoutTitle = {
    defaultTabIndex: 1,
    className: 'tab'
};
const mockConfigWithOutDefaultIndex = {
    heading: {
        text: 'Mock heading 1',
        tag: "h1"
    },
    className: 'tab'
};
const myReactNodeChild1 = 'whatever child module 1';
const itemSlots = {
    tabItemContent: [myReactNodeChild1]
};
const itemmockConfig = {
    tabItemTitle: 'Tab Item Title0',
};
let tabItemmoduleProps;
tabItemmoduleProps = {
    slots: itemSlots,
    ...buildMockModuleProps({}, itemmockConfig),
    renderView: TabItemView
};
const tabItemModule = React.createElement(TabItem, Object.assign({}, tabItemmoduleProps));
const slots = {
    tabItems: [tabItemModule]
};
const myReactNodeChild2 = 'whatever child module 2';
const itemSlots1 = {
    tabItemContent: [myReactNodeChild1, myReactNodeChild2]
};
let tabItemmoduleProps1;
tabItemmoduleProps1 = {
    slots: itemSlots1,
    ...buildMockModuleProps({}, itemmockConfig),
    renderView: TabItemView
};
const tabItemModule1 = React.createElement(TabItem, Object.assign({}, tabItemmoduleProps1));
const slots1 = {
    tabItems: [tabItemModule, tabItemModule1]
};
const mockActions = {};
describe('Tab integration tests', () => {
    it('renders correctly', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithOutDefaultIndex),
            renderView: tabView
        };
        const component = render(React.createElement(Tab, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly without title', () => {
        const moduleProps = {
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithoutTitle),
            renderView: tabView
        };
        const component = render(React.createElement(Tab, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('componentDidUpdate doesn\'t throw error -- Part 1', () => {
        const moduleProps = {
            slots: slots,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithOutDefaultIndex),
            renderView: tabView
        };
        moduleProps.id = 'tab';
        const wrapper = mount((React.createElement(Tab, Object.assign({}, moduleProps))));
        const tab = wrapper.instance();
        expect(() => { tab.componentDidUpdate(); }).not.toThrow();
        wrapper.unmount();
    });
    it('componentDidUpdate doesn\'t throw error -- Part 2', () => {
        const moduleProps = {
            slots: slots,
            ...buildMockModuleProps(mockTabData1, mockActions, mockConfigWithOutDefaultIndex),
            renderView: tabView
        };
        moduleProps.id = 'tab';
        const wrapper = mount((React.createElement(Tab, Object.assign({}, moduleProps))));
        const tab = wrapper.instance();
        expect(() => { tab.componentDidUpdate(); }).not.toThrow();
        wrapper.unmount();
    });
    it('renders title and content', () => {
        const moduleProps = {
            slots: slots,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithoutTitle),
            renderView: tabView
        };
        const component = render(React.createElement(Tab, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
    it('should fire change active tab events', () => {
        const moduleProps = {
            slots: slots,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithOutDefaultIndex),
            renderView: tabView
        };
        const wrapper = mount((React.createElement(Tab, Object.assign({}, moduleProps))));
        const lis = wrapper.find('li');
        expect(lis.length).toBe(1);
        const tab1 = lis.first();
        tab1.simulate('click');
        wrapper.unmount();
    });
    it('should change tab index when left and right arrow is pressed', () => {
        debugger;
        const moduleProps = {
            slots: slots1,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithOutDefaultIndex),
            renderView: tabView
        };
        const wrapper = mount((React.createElement(Tab, Object.assign({}, moduleProps))));
        const tabModule = wrapper.instance();
        const lis = wrapper.find('li');
        expect(lis.length).toBe(2);
        const tab1 = lis.first();
        const tab2 = lis.last();
        expect(tabModule.state.currentTabIndex).toBe(0);
        tab1.simulate('keyDown', { keyCode: 13 });
        expect(tabModule.state.currentTabIndex).toBe(0);
        tab1.simulate('keyDown', { keyCode: 39 });
        expect(tabModule.state.currentTabIndex).toBe(1);
        tab2.simulate('keyDown', { keyCode: 37 });
        expect(tabModule.state.currentTabIndex).toBe(0);
        wrapper.unmount();
    });
});
//# sourceMappingURL=integration.test.js.map