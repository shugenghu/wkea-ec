import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import TabItem, { TabItemType } from '../tab-item';
import TabItemView from '../tab-item.view';
const mockDataWithInactiveContent = {
    activeTabState: wrapInResolvedAsyncResult({ activeContentIndex: 1 })
};
const mockDataWithActiveContent = {
    activeTabState: wrapInResolvedAsyncResult({ activeContentIndex: 0 })
};
const mockConfig = {
    tabItemTitle: 'Tab Item Title0',
};
const myReactNodeChild1 = 'whatever child module 1';
const slots = {
    tabItemContent: [myReactNodeChild1]
};
const mockActions = {};
describe('TabItem', () => {
    it('renders correctly', () => {
        let moduleProps;
        moduleProps = {
            slots: slots,
            tabItemType: TabItemType.TabContent,
            itemIndex: 0,
            isSelected: true,
            ...buildMockModuleProps(mockDataWithActiveContent, mockActions, mockConfig),
            renderView: TabItemView
        };
        const component = render(React.createElement(TabItem, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('TabItemWithourDataAction', () => {
    it('renders correctly', () => {
        let moduleProps;
        moduleProps = {
            slots: slots,
            tabItemType: TabItemType.TabContent,
            itemIndex: 0,
            isSelected: true,
            ...buildMockModuleProps(mockActions, mockConfig),
            renderView: TabItemView
        };
        const component = render(React.createElement(TabItem, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('TabItemWithInactiveContent', () => {
    let moduleProps;
    it('render hiddenContent ', () => {
        moduleProps = {
            slots: slots,
            tabItemType: TabItemType.TabContent,
            itemIndex: 0,
            isSelected: true,
            ...buildMockModuleProps(mockDataWithInactiveContent, mockActions, mockConfig),
            renderView: TabItemView
        };
        const component = render(React.createElement(TabItem, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('TabItemHeader', () => {
    let moduleProps;
    it('render tabHeader ', () => {
        moduleProps = {
            slots: slots,
            tabItemType: TabItemType.TabHeader,
            itemIndex: 0,
            isSelected: true,
            ...buildMockModuleProps(mockDataWithInactiveContent, mockActions, mockConfig),
            renderView: TabItemView
        };
        const component = render(React.createElement(TabItem, Object.assign({}, moduleProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=integration.test.js.map