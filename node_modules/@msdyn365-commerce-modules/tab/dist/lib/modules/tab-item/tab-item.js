import { __decorate } from "tslib";
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
export var TabItemType;
(function (TabItemType) {
    TabItemType[TabItemType["TabHeader"] = 0] = "TabHeader";
    TabItemType[TabItemType["TabContent"] = 1] = "TabContent";
})(TabItemType || (TabItemType = {}));
let TabItem = class TabItem extends React.Component {
    constructor(props) {
        super(props);
        this.moduleContentClassName = 'ms-tab-item-content';
        this.moduleHeaderClassName = 'ms-tab-item-header';
        this._renderTabHeader = this._renderTabHeader.bind(this);
    }
    render() {
        const { slots, renderView, config, data, isSelected, itemIndex } = this.props;
        const index = itemIndex || 0;
        const contentID = getContentID(index, this.props.tabId || '');
        const activeContentIDResult = data && data.activeTabState && data.activeTabState.result;
        const shown = activeContentIDResult && activeContentIDResult.tabId === this.props.tabId && activeContentIDResult.activeContentIndex !== undefined ?
            activeContentIDResult.activeContentIndex === index : isSelected || false;
        const viewProps = {
            ...this.props,
            TabContentContainer: {
                moduleProps: this.props,
                className: classnames(this.moduleContentClassName, config.className)
            },
            TabHeaderContainer: {
                moduleProps: this.props,
                className: classnames(this.moduleHeaderClassName, config.className),
            },
            TabItemContent: {
                className: 'ms-tab-item-content__content',
                tag: 'section',
                'aria-hidden': !shown,
                role: 'tabpanel',
                tabIndex: shown ? 0 : -1,
                id: contentID
            },
            tabHeader: this._renderTabHeader(),
            tabSlots: slots,
        };
        return renderView(viewProps);
    }
    _renderTabHeader() {
        return (React.createElement(React.Fragment, null, this.props.config.tabItemTitle));
    }
};
TabItem = __decorate([
    observer
], TabItem);
export const getContentID = (index, id) => {
    return `tab-item-content-${id}-${index}`;
};
export default TabItem;
//# sourceMappingURL=tab-item.js.map