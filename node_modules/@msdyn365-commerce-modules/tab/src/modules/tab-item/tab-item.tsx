/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { IModuleProps, INodeProps, NodeTag } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { ITabItemData } from './tab-item.data';
import { ITabItemProps } from './tab-item.props.autogenerated';

export interface ITabItemViewProps {
    TabContentContainer: IModuleProps;
    TabHeaderContainer: IModuleProps;
    tabSlots: INodeProps;
    TabItemContent: INodeProps;
    tabItemType?: TabItemType;
    tabHeader: React.ReactNode;
}

export interface ITabItemExtentedProps extends ITabItemProps<ITabItemData> {
    tabItemType?: TabItemType;
    isSelected?: boolean;
    itemIndex?: number;
    tabId?: string;
}

export enum TabItemType {
    TabHeader,
    TabContent
}
/**
 *
 * TabItem component
 * @extends {React.Component<ITabItemExtentedProps>}
 */
@observer
class TabItem extends React.Component<ITabItemExtentedProps> {
    private moduleContentClassName: string = 'ms-tab-item-content';
    private moduleHeaderClassName: string = 'ms-tab-item-header';

    constructor(props: ITabItemProps<ITabItemData>) {
        super(props);
        this._renderTabHeader = this._renderTabHeader.bind(this);
    }

    public render(): JSX.Element {
        const { slots, renderView, config, data, isSelected, itemIndex } = this.props;
        const index = itemIndex || 0;
        const contentID = getContentID(index, this.props.tabId || '');
        const activeContentIDResult = data && data.activeTabState && data.activeTabState.result;
        const shown = activeContentIDResult && activeContentIDResult.tabId === this.props.tabId && activeContentIDResult.activeContentIndex !== undefined ?
            activeContentIDResult.activeContentIndex === index : isSelected || false;
        const viewProps = {
            ... this.props,
            TabContentContainer: {
                moduleProps: this.props,
                className: classnames(this.moduleContentClassName, config.className)
            },
            TabHeaderContainer: {
                moduleProps: this.props,
                className: classnames(this.moduleHeaderClassName, config.className),
            },
            TabItemContent: {
                className: 'ms-tab-item-content__content',
                tag: 'section' as NodeTag,
                'aria-hidden': !shown,
                role: 'tabpanel',
                tabIndex: shown ? 0 : -1,
                id: contentID
            },
            tabHeader: this._renderTabHeader(),
            tabSlots: slots,
        };
        return renderView(viewProps) as React.ReactElement;

    }

    private _renderTabHeader(): React.ReactNode {
        return (
            <>
                {this.props.config.tabItemTitle}
            </>
        );
    }

}

export const getContentID = (index: number, id: string) => {
  return `tab-item-content-${id}-${index}`;
};

export default TabItem;