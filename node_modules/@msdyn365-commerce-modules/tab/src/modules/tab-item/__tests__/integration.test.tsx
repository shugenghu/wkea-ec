/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps} from '@msdyn365-commerce/core';
/// <reference types="jest" />

// tslint:disable-next-line:no-unused-variable
import { render } from 'enzyme';
import * as React from 'react';
import { IActiveTabState } from '../../../data-actions/tab-state';
// import { interactionStyle } from '../../tab/tab.props.autogenerated';
import TabItem, { ITabItemExtentedProps, TabItemType } from '../tab-item';
import { ITabItemData } from '../tab-item.data';
import {
  ITabItemConfig
} from '../tab-item.props.autogenerated';
import TabItemView from '../tab-item.view';

const mockDataWithInactiveContent: ITabItemData = {
  activeTabState: wrapInResolvedAsyncResult({ activeContentIndex: 1 } as IActiveTabState)
};

const mockDataWithActiveContent: ITabItemData = {
  activeTabState: wrapInResolvedAsyncResult({ activeContentIndex: 0 } as IActiveTabState)
};

const mockConfig: ITabItemConfig = {
  tabItemTitle: 'Tab Item Title0',
};

const myReactNodeChild1: React.ReactNode = 'whatever child module 1';
const slots = {
  tabItemContent: [myReactNodeChild1]
        };

const mockActions = {};

describe('TabItem', () => {
  it('renders correctly', () => {
    let moduleProps: ITabItemExtentedProps;
    moduleProps = {
      slots: slots,
      tabItemType: TabItemType.TabContent,
      itemIndex: 0,
      isSelected: true,
       ...buildMockModuleProps(mockDataWithActiveContent, mockActions, mockConfig) as ITabItemExtentedProps,
       // @ts-ignore
       renderView: TabItemView
    };

    const component = render(<TabItem {...moduleProps} />);
    expect(component).toMatchSnapshot();
  });
});

describe('TabItemWithourDataAction', () => {
  it('renders correctly', () => {
    let moduleProps: ITabItemExtentedProps;
    moduleProps = {
      slots: slots,
      tabItemType: TabItemType.TabContent,
      itemIndex: 0,
      isSelected: true,
       ...buildMockModuleProps(mockActions, mockConfig) as ITabItemExtentedProps,
       // @ts-ignore
       renderView: TabItemView
    };
    // moduleProps.interactionStyle = interactionStyle.Independent;
    const component = render(<TabItem {...moduleProps} />);
    expect(component).toMatchSnapshot();
  });
});

describe('TabItemWithInactiveContent', () => {
  let moduleProps: ITabItemExtentedProps;

  it('render hiddenContent ', () => {
    moduleProps = {
      slots: slots,
      tabItemType: TabItemType.TabContent,
      itemIndex: 0,
      isSelected: true,
       ...buildMockModuleProps(mockDataWithInactiveContent, mockActions, mockConfig) as ITabItemExtentedProps,
       // @ts-ignore
       renderView: TabItemView
    };
    // moduleProps.interactionStyle = interactionStyle.Independent;
    const component = render(<TabItem {...moduleProps} />);
    expect(component).toMatchSnapshot();
  });
});

describe('TabItemHeader', () => {
  let moduleProps: ITabItemExtentedProps;

  it('render tabHeader ', () => {
    moduleProps = {
      slots: slots,
      tabItemType: TabItemType.TabHeader,
      itemIndex: 0,
      isSelected: true,
       ...buildMockModuleProps(mockDataWithInactiveContent, mockActions, mockConfig) as ITabItemExtentedProps,
       // @ts-ignore
       renderView: TabItemView
    };
    // moduleProps.interactionStyle = interactionStyle.Independent;
    const component = render(<TabItem {...moduleProps} />);
    expect(component).toMatchSnapshot();
  });
});
