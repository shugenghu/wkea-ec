import { NodeTag } from '@msdyn365-commerce-modules/utilities';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import { ITabViewProps } from '../../tab';
import { ITabProps } from '../../tab.props.autogenerated';
import TabView from '../../tab.view';

describe('tab unit tests - View', () => {
    it('renders correctly', () => {
        const moduleProps: ITabProps<{}> = buildMockModuleProps({}, {}) as ITabProps<{}>;
        const myReactNodeChild1: React.ReactNode = `whatever child module 1`;
        const myReactNodeChild2: React.ReactNode = `whatever child module 1`;
        moduleProps.slots = {tabItems: [myReactNodeChild1, myReactNodeChild2]};
        const mockProps: ITabViewProps = {
            ...moduleProps,
            heading: '{HeadingComponent}',
              TabContainer: {
                moduleProps,
                className: 'ms-tab'
              },
              headerSection: {className: 'ms-tab-header-section'},
              tabHeaderSection: {className: 'ms-tab-header-section'},
              tabsSection: {className: 'ms-tab-tabs-section'},
              tabItemContainer: {
                tag: 'div' as NodeTag,
                className: 'ms-tab-item-section',
              },
              tabContents:  '{tabContents}',
              tabHeaders: '{tabHeaders}',
        };
        const component = render(<TabView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('render null', () => {
      const moduleProps: ITabProps<{}> = buildMockModuleProps({}, {}) as ITabProps<{}>;
      const myReactNodeChild1: React.ReactNode = `whatever child module 1`;
      const myReactNodeChild2: React.ReactNode = `whatever child module 1`;
      moduleProps.slots = {tabItems: [myReactNodeChild1, myReactNodeChild2]};
      const mockProps: ITabViewProps = {
          ...moduleProps,
          heading: '',
            TabContainer: {
              moduleProps,
              className: 'ms-tab'
            },
            tabsSection: {className: 'ms-tab-tabs-section'},
            tabHeaderSection: {className: 'ms-tab-header-section'},
            headerSection: {className: 'ms-tab-header-section'},
            tabItemContainer: {
              tag: 'div' as NodeTag,
              className: 'ms-tab-item-section',
            },
            tabContents:  '',
            tabHeaders: '',
      };
      const component = render(<TabView {...mockProps} />);
      expect(component).toMatchSnapshot();
  });
});