import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import * as React from 'react';
import { IActiveTabState } from '../../../data-actions/tab-state';
import TabItem, { ITabItemExtentedProps } from '../../tab-item/tab-item';
import { ITabItemConfig } from '../../tab-item/tab-item.props.autogenerated';
import TabItemView from '../../tab-item/tab-item.view';
import Tab from '../tab';
import { ITabData } from '../tab.data';
import {
    HeadingTag,
    ITabConfig,
    ITabProps,
} from '../tab.props.autogenerated';
import tabView from '../tab.view';

const mockTabData: ITabData = {
    activeTabState: wrapInResolvedAsyncResult({
        activeContentIndex: 2,
        tabId: 'tab'
    } as IActiveTabState)
};

const mockTabData1: ITabData = {
    activeTabState: wrapInResolvedAsyncResult({
        activeContentIndex: 2,
    } as IActiveTabState)
};

const mockConfigWithoutTitle: ITabConfig = {
    defaultTabIndex: 1,
    className: 'tab'
};

const mockConfigWithOutDefaultIndex: ITabConfig = {
    heading: {
        text: 'Mock heading 1',
        tag: HeadingTag.h1
    },
    className: 'tab'
};

const myReactNodeChild1: React.ReactNode = 'whatever child module 1';
const itemSlots = {
tabItemContent: [myReactNodeChild1]
        };
const itemmockConfig: ITabItemConfig = {
    tabItemTitle: 'Tab Item Title0',
    };

let tabItemmoduleProps: ITabItemExtentedProps;
tabItemmoduleProps = {
  slots: itemSlots,
  ...buildMockModuleProps({}, itemmockConfig) as ITabItemExtentedProps,
   // @ts-ignore
   renderView: TabItemView
};
const tabItemModule = <TabItem {...tabItemmoduleProps}/>;

const slots = {
    tabItems: [tabItemModule]
};

// const mockConfigWithoutHeading: ITabConfig = {
//     className: 'tab'
// };

const myReactNodeChild2: React.ReactNode = 'whatever child module 2';
const itemSlots1 = {
tabItemContent: [myReactNodeChild1, myReactNodeChild2]
        };

let tabItemmoduleProps1: ITabItemExtentedProps;
tabItemmoduleProps1 = {
    slots: itemSlots1,
    ...buildMockModuleProps({}, itemmockConfig) as ITabItemExtentedProps,
    // @ts-ignore
    renderView: TabItemView
};
const tabItemModule1 = <TabItem {...tabItemmoduleProps1}/>;
const slots1 = {
    tabItems: [tabItemModule, tabItemModule1]
};

const mockActions = {};

describe('Tab integration tests', () => {
    it('renders correctly', () => {
        const moduleProps: ITabProps<ITabData> = {
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithOutDefaultIndex) as ITabProps<ITabData>,
            // @ts-ignore
            renderView: tabView
        };

        const component = render(<Tab {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly without title', () => {
        const moduleProps: ITabProps<ITabData> = {
            // slots: slots,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithoutTitle) as ITabProps<ITabData>,
            // @ts-ignore
            renderView: tabView
        };

        const component = render(<Tab {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('componentDidUpdate doesn\'t throw error -- Part 1', () => {
        const moduleProps: ITabProps<ITabData> = {
            slots: slots,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithOutDefaultIndex) as ITabProps<ITabData>,
            // @ts-ignore
            renderView: tabView
        };
        moduleProps.id = 'tab';

        const wrapper = mount((<Tab {...moduleProps} />));
        const tab = wrapper.instance() as Tab;
        expect(() => { tab.componentDidUpdate();}).not.toThrow();
        wrapper.unmount();
    });

    it('componentDidUpdate doesn\'t throw error -- Part 2', () => {
        const moduleProps: ITabProps<ITabData> = {
            slots: slots,
            ...buildMockModuleProps(mockTabData1, mockActions, mockConfigWithOutDefaultIndex) as ITabProps<ITabData>,
            // @ts-ignore
            renderView: tabView
        };
        moduleProps.id = 'tab';

        const wrapper = mount((<Tab {...moduleProps} />));
        const tab = wrapper.instance() as Tab;
        expect(() => { tab.componentDidUpdate();}).not.toThrow();
        wrapper.unmount();
    });

    it('renders title and content', () => {
        const moduleProps: ITabProps<ITabData> = {
            slots: slots,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithoutTitle) as ITabProps<ITabData>,
            // @ts-ignore
            renderView: tabView
        };

        const component = render(<Tab {...moduleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('should fire change active tab events', () => {
        const moduleProps: ITabProps<ITabData> = {
            slots: slots,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithOutDefaultIndex) as ITabProps<ITabData>,
            // @ts-ignore
            renderView: tabView
        };

        const wrapper = mount((<Tab {...moduleProps} />));
        const lis = wrapper.find('li');
        expect(lis.length).toBe(1);
        const tab1 = lis.first();

        tab1.simulate('click');

        wrapper.unmount();
    });

    it('should change tab index when left and right arrow is pressed', () => {
        debugger;
        const moduleProps: ITabProps<ITabData> = {
            slots: slots1,
            ...buildMockModuleProps(mockTabData, mockActions, mockConfigWithOutDefaultIndex) as ITabProps<ITabData>,
            // @ts-ignore
            renderView: tabView
        };

        const wrapper = mount((<Tab {...moduleProps} />));
        const tabModule = wrapper.instance() as Tab;
        const lis = wrapper.find('li');
        expect(lis.length).toBe(2);
        const tab1 = lis.first();
        const tab2 = lis.last();

        expect(tabModule.state.currentTabIndex).toBe(0);

        tab1.simulate('keyDown', { keyCode: 13});
        expect(tabModule.state.currentTabIndex).toBe(0);
        tab1.simulate('keyDown', { keyCode: 39});
        expect(tabModule.state.currentTabIndex).toBe(1);
        tab2.simulate('keyDown', { keyCode: 37});
        expect(tabModule.state.currentTabIndex).toBe(0);
        wrapper.unmount();
    });
});