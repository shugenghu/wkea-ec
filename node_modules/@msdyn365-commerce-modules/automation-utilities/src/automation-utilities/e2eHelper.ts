/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { Selector } from 'testcafe';
import { BrowserWorkspace } from './browserWorkspace';
import { click, expectURL, exportSarif, hover, navigateTo, screenshot, typeText } from './eventHelper';

const timeout = 15000;

// tslint:disable-next-line: completed-docs
export default class E2EHelper {
    // tslint:disable-next-line: max-line-length
    public async eventHelper(testController: TestController, deploymentEnv: string, testPage: string, selector: string, errorMessage: string, baseFolderPath: string, inputText: string = '', containsText: string = '', eventName?: string, testUrl: string = '', wait: number = 1000, moduleName: string = '', pageName: string = ''): Promise<void> {
        switch (eventName) {
            case 'click':
              await click(testController, wait, selector);
              break;
            case 'hover':
               await hover(testController, wait, selector);
               break;
            case 'typeText':
                await typeText(testController, wait, selector, inputText);
                break;
            case 'expectURL':
                await expectURL(testController, wait, containsText);
                break;
            case 'navigateTo':
                await navigateTo(testController, wait, containsText, testUrl);
                break;
            case 'hasAttribute':
                await testController
                .expect(await Selector(selector).hasAttribute(inputText))
                .ok(`Did not find ${inputText} attribute`);
                break;
            case 'valueCheck':
                if (await Selector(selector).value) {
                    await testController
                        .expect(await Selector(selector).value)
                        .eql(inputText, errorMessage);
                }
                if (await Selector(selector).textContent) {
                    await testController
                        .expect(await Selector(selector).textContent)
                        .eql(inputText, errorMessage);
                }

                break;
            case 'removeItem':
                if (await Selector(selector).exists) {
                    await testController
                        .expect(await Selector(selector).exists)
                        .ok('Either there is no item added in cart or the remove link is not rendering on cart page');
                    await click(testController, wait, selector);

                } else {
                    await hover(testController, wait, inputText);
                    await testController
                        .expect(Selector(inputText).textContent)
                        .eql(containsText, errorMessage);
                }
                break;
            case 'screenshot':
                if (moduleName.length === 0 || pageName.length === 0 || !baseFolderPath) {
                    console.log('ModuleName or PageName or folder Path  is missing for VVT test');
                    break;
                }
                await screenshot(testController,selector,timeout,pageName,moduleName,deploymentEnv,baseFolderPath);
                break;
            case 'a11y':
                const pageUrl = await BrowserWorkspace.getDocumentURLHelper();
                console.log('A11y Test for ', pageUrl);
                await exportSarif(testController, pageName, baseFolderPath);
                break;
            default:
                await testController
                    .expect(Selector(selector).with({ visibilityCheck: true, timeout: timeout }))
                    .ok(errorMessage);
        }
        if (testPage) {
            console.log('A11y Test for ', testPage);
            await exportSarif(testController, testPage, baseFolderPath);
        }
    }
}