/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as fs from 'fs-extra';
import * as path from 'path';
import { ResembleComparisonResult } from 'resemblejs';
import { Selector } from 'testcafe';

// Do not remove this and conver to an import, it will throw an esInterop error, since we are trying to import a commonJs module in an es6 file
// tslint:disable-next-line: no-require-imports
const resemble = require('resemblejs');

const environmentConfig = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'environment-config.json'), 'utf8'));

const takeScreenshotAndMatch = async (testController: TestController, pageName: string, moduleName: string, selector: string, deploymentEnv: string, baseFolderPath: string): Promise<boolean> => {
    let diffFound = false;
    const expectedScreenshotPath = path.resolve(path.join('screenshots', deploymentEnv, pageName, `${moduleName}.png`));
    console.log(expectedScreenshotPath);
    const actualScreenshotPath = path.resolve(path.join('screenshots', deploymentEnv, pageName, `${moduleName}-actual.png`));
    console.log(actualScreenshotPath);
    await testController.wait(1000);

    if (!fs.existsSync(expectedScreenshotPath)) {
        const basePath = path.resolve(path.join('screenshots',deploymentEnv, pageName));
        const baseImagePath = path.join('screenshots',deploymentEnv, pageName, `${moduleName}.png`);
        fs.mkdirpSync(basePath);
        // await testController.takeScreenshot(baseImagePath);
        await testController.takeElementScreenshot(Selector(selector).nth(0), baseImagePath);
        return true;
    }

    const pathImage = path.join('screenshots',deploymentEnv, pageName, `${moduleName}-actual.png`);
    // await testController.takeScreenshot(pathImage);
    await testController.takeElementScreenshot(Selector(selector).nth(0), pathImage);

    const options = {
        output: {
            errorColor: {
                red: 255,
                green: 0,
                blue: 0
            },
            errorType: 'movement',
            transparency: 1,
            returnEarlyThreshold: 5,
            largeImageThreshold: 1200,
            useCrossOrigin: false,
            outputDiff: true,
            ignore: 'antialiasing'
        }
    };

    resemble.outputSettings(options.output);

    resemble(expectedScreenshotPath)
        .compareTo(actualScreenshotPath)
        .onComplete((data: ResembleComparisonResult) => {
            if (data.misMatchPercentage > 5) {
                const base64String = data.getImageDataUrl();
                const base64Image = base64String.split(';base64,').pop();
                let strbase64Image = '';
                if (base64Image !== undefined) {
                    strbase64Image = base64Image;
                }
                fs.writeFileSync(path.resolve(path.join('screenshots', deploymentEnv, pageName, `${moduleName}-diff.png`)), strbase64Image, { encoding: 'base64' });
                diffFound = false;
            } else {
                diffFound = true;
            }
        });

    return diffFound;
};

const getFixtureUrl = (pageName: string, pageMockName: string, deploymentEnv: string): string => {

    if (deploymentEnv === 'localhost') {
        return `${environmentConfig.localhost.url}${pageMockName}`;
    }

    if (deploymentEnv === 'dev') {
        return `${environmentConfig.dev.url}\\${pageName}`;
    }

    if (deploymentEnv === 'r1tie') {
        return `${environmentConfig.r1tie.url}\\${pageName}`;
    }

    if (deploymentEnv === 'r2tie') {
        return `${environmentConfig.r2tie.url}\\${pageName}`;
    }

    if (deploymentEnv === 'r3tie') {
        return `${environmentConfig.r3tie.url}\\${pageName}`;
    }

    return `${environmentConfig.prod.url}\\${pageName}`;
};

// const enum metaDataProperties {
//     TestType = 'testtype',
//     Env = 'env'
// }

// const enum testTypes {
//     localhostDVT = 'localhost-dvt',
//     envDVT = 'env-dvt',
//     localhostVVT = 'localhost-vvt',
//     envVVT = 'env-vvt',
//     DVT = 'dvt',
//     VVT = 'vvt',
//     BVT = 'bvt',
//     localhost = 'localhost',
//     env = 'env'
// }

export {
    takeScreenshotAndMatch,
    getFixtureUrl
};