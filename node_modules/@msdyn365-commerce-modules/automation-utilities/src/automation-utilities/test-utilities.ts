declare var test: TestFn;
import E2EHelper from './e2eHelper';
import { ITest } from './testData';
import { getFixtureUrl } from './vvt-test-utilities';

// tslint:disable-next-line: max-func-body-length
export const testutilities = (testObj: ITest, testName: string)=> {
    const e2eHelper = new E2EHelper();
    const deploymentEnv = process.env.TESTENVIRONMENT || testObj.env || 'localhost';
    const url = getFixtureUrl('', '', deploymentEnv);
    const testPageURL = `${url}${testObj.pageUrl}`;
    const fixtureName = `'${testName}' '${testObj.category}'`;
    if ((process.env.TESTENVIRONMENT === 'localhost' || process.env.TESTENVIRONMENT === undefined) && testObj.env === 'localhost') {
        if (testObj.pageUrl.length !== 0 && testObj.enabled !== false) {
            fixture(fixtureName)
                .page(testPageURL).beforeEach(async testController => {
                    console.log(testPageURL);
                    await testController.maximizeWindow();
                });
            if (testObj.category.includes('a11y')) {
                test
                    // tslint:disable-next-line:prefer-template
                    ('Validate Accessibility Test for ' + testName, async (testController: TestController) => {
                        if (testObj.enabled && testObj.testPage) {
                            try {
                                console.log(testPageURL);
                                await e2eHelper.eventHelper(testController, testObj.env, testObj.testPage, testObj.baseFolderPath, '', '');
                            } catch (e) {
                                console.log({ error: e });
                                await testController.expect(1).eql(2, 'parameters are missing');
                            }
                        }
                    });
            }

            if (testObj.category.includes('dvt')) {
                test
                    // tslint:disable-next-line:prefer-template
                    ('Validate Dvt Test for ' + testName, async t => {
                        if (testObj.enabled) {
                            try {

                                for (const data of testObj.asserts) {
                                    if (data.eventName === 'screenshot') {
                                        console.log(data.eventName);
                                    } else {
                                        // tslint:disable-next-line: max-line-length
                                        await e2eHelper.eventHelper(t, testObj.env, '', data.selector, data.errorMessage, testObj.baseFolderPath, data.inputText, data.containsText, data.eventName, data.urlText, data.wait, data.moduleName, data.page);
                                    }
                                }
                            } catch (e) {
                                console.log({ error: e });
                                await t.expect(1).eql(2, 'parameters are missing or eventName');
                            }
                        }
                    });
            }

            if (testObj.category.includes('vvt')) {
                test
                    // tslint:disable-next-line:prefer-template
                    ('Validate Vvt Test for ' + testName, async t => {
                        if (testObj.enabled) {
                            try {
                                console.log(testPageURL);
                                for (const data of testObj.asserts) {
                                    await e2eHelper.eventHelper(t, testObj.env, '', data.selector, data.errorMessage, testObj.baseFolderPath, data.inputText, data.urlText, data.eventName, data.urlText, data.wait, data.moduleName, data.page);
                                }
                            } catch (e) {
                                console.log({ error: e });
                                await t.expect(1).eql(2, 'parameters are missing');
                            }
                        }
                    });
            }
        }
    }
    if (process.env.TESTENVIRONMENT !== 'localhost' && testObj.env !== 'localhost') {
        fixture(fixtureName)
            .page(testPageURL).beforeEach(async testController => {
                console.log(testPageURL);
                await testController.maximizeWindow();
            });
        if (testObj.category.includes('a11y')) {
            test
                // tslint:disable-next-line:prefer-template
                ('Validate Accessibility Test for ' + testName, async (testController: TestController) => {
                    if (testObj.testPage) {
                        try {
                            await e2eHelper.eventHelper(testController, testObj.env, testObj.testPage, testObj.baseFolderPath, '', '');
                        } catch (e) {
                            console.log({ error: e });
                            await testController.expect(1).eql(2, 'parameters are missing');
                        }
                    }
                });
        }

        if (testObj.category.includes('dvt')) {
        test
            // tslint:disable-next-line:prefer-template
            ('Validate Dvt Test for ' + testName, async t => {
                if (testObj.enabled) {
                    try {
                        for (const data of testObj.asserts) {
                            if (data.eventName === 'screenshot') {
                                console.log(data.eventName);
                            } else {
                                await e2eHelper.eventHelper(t, testObj.env, '', data.selector, data.errorMessage, testObj.baseFolderPath, data.inputText, data.containsText, data.eventName, data.urlText, data.wait, data.moduleName, data.page);
                            }
                        }
                    } catch (e) {
                        console.log({ error: e });
                        await t.expect(1).eql(2, 'parameters are missing or eventName');
                    }
                }
            });
        }

        if(testObj.category.includes('vvt')) {
        test
            // tslint:disable-next-line:prefer-template
            ('Validate Vvt Test for ' + testName, async t => {
                if (testObj.enabled) {
                    try {
                        for (const data of testObj.asserts) {
                            await e2eHelper.eventHelper(t, testObj.env, '', data.selector, data.errorMessage, testObj.baseFolderPath, data.inputText, data.urlText, data.eventName, data.urlText, data.wait, data.moduleName, data.page);
                        }
                    } catch (e) {
                        console.log({ error: e });
                        await t.expect(1).eql(2, 'parameters are missing');
                    }
                }
            });
        }
    }
};