/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

declare var test: TestFn;
import * as axe from 'axe-core';
import { convertAxeToSarif } from 'axe-sarif-converter';
import * as fs from 'fs-extra';
import * as path from 'path';
import { ClientFunction, Selector } from 'testcafe';
import { BrowserWorkspace } from './browserWorkspace';
import { takeScreenshotAndMatch } from './vvt-test-utilities';

export async function click(testController: TestController, wait: number, selector: string):Promise<void> {
        try {
            console.log('Clicking on ',selector);
            await testController
            .wait(wait)
            .click(Selector(selector), { speed: 0.4 });
        } catch (e) {
            await testController.expect(Selector(selector).exists).ok(`Did not found ${selector} to click`);
        }
}

export async function hover(testController: TestController, wait: number, selector: string):Promise<void> {
    try {
        console.log(`Hovering on  ${selector}`);
        await testController
        .wait(wait)
        .hover(Selector(selector), { speed: 0.4 });
    } catch (e) {
        await testController.expect(Selector(selector).exists).ok(`Did not found ${selector} to hover`);
    }
}

export async function typeText(testController: TestController, wait: number, selector: string, inputText: string):Promise<void> {
    try {
        console.log(selector);
        await testController
        .wait(wait)
        .typeText(Selector(selector), inputText, { paste: true });
    } catch (e) {
        await testController.expect(Selector(selector).exists).ok(`Did not found ${selector} to typetext`);
    }
}

export async function expectURL(testController: TestController, wait: number, containsText: string):Promise<void> {
    try {
        console.log('Expecting Url:- ',await BrowserWorkspace.getDocumentURLHelper());
        await testController
        .wait(wait)
        .expect(await BrowserWorkspace.getDocumentURLHelper())
        .contains(containsText);
    } catch (e) {
        await testController.expect(await BrowserWorkspace.getDocumentURLHelper()).notContains(containsText,`Did not find ${containsText} Page`);
    }
}

export async function navigateTo(testController: TestController, wait: number, containsText: string, testUrl: string):Promise<void> {
    try {
        console.log('Navigating to- ',await BrowserWorkspace.getDocumentURLHelper());
        await testController
        .wait(wait)
        .navigateTo(testUrl)
        .expect(BrowserWorkspace.getDocumentURLHelper())
        .contains(containsText);
    } catch (e) {
        await testController.expect(await BrowserWorkspace.getDocumentURLHelper()).notContains(containsText,`Did not find ${containsText} Page`);
    }
}

export async function screenshot(testController: TestController, selector: string, timeout: number, pageName: string, moduleName: string, deploymentEnv: string, baseFolderPath: string):Promise<void> {
    try {
        console.log('Taking the screenshot');
        const selectorElement = Selector(selector).with({ visibilityCheck: true, timeout })();
        await testController.expect(selectorElement.clientHeight).gt(0);
        const result = await takeScreenshotAndMatch(testController, pageName, moduleName, selector, deploymentEnv, baseFolderPath);
        await testController.expect(result).eql(true);
    } catch (e) {
        console.log({ error: e });
        await testController.expect(1).eql(2, 'Not able to take screenshot');
    }
}

export async function exportSarif(testController: TestController, pageName: string, baseFolderPath: string):Promise<void> {
    try {
        const hasScript = await hasAxe.with({ boundTestRun: testController })();
        if (!hasScript) {
            await injectAxe.with({ boundTestRun: testController })();
        }
        const results = <axe.AxeResults>await runAxe.with({ boundTestRun: testController })();
        console.log('Exporting the sarif results');
        exportSarifResults(pageName, baseFolderPath, results);
        console.log('Violation ',results.violations.length);
        await testController.expect(results.violations.length).eql(0, 'No violations found');
    } catch (e) {
        console.log({ error: e });
        await testController.expect(1).eql(2, 'Not able to export sarif');
    }
}

const AXE_DIR_PATH = path.dirname(require.resolve('axe-core'));
const AXE_SCRIPT = fs.readFileSync(path.join(AXE_DIR_PATH, 'axe.min.js'), 'utf8');

// @ts-ignore
const hasAxe = ClientFunction(() => !!(window.axe && window.axe.run));

// tslint:disable-next-line: no-eval
const injectAxe = ClientFunction(() => eval(AXE_SCRIPT), { dependencies: { AXE_SCRIPT } });

export const runAxe = ClientFunction((options = { runOnly: ['wcag2a', 'wcag2aa'] }) => {
    return new Promise((resolve) => {
        axe.run(document, options, (error, result) => {
            resolve(result);
        });
    });
});

export const exportSarifResults = (dirName: string, baseFolderPath: string, result: axe.AxeResults) => {

    // We use the axe-sarif-converter package for the conversion step, then write the results
    // to a file that we'll be publishing from a CI build step in azure-pipelines.yml
    const sarifResults = convertAxeToSarif(result);

    // tslint:disable-next-line: prefer-template
    fs.outputFileSync(path.resolve(baseFolderPath, 'ScanResults/' + dirName + 'TestResults.sarif'), JSON.stringify(sarifResults, null, 2), { encoding: 'utf8' });
    // tslint:disable-next-line: prefer-template
    console.log(`Exported axe results to ${path.resolve(__dirname, 'ScanResults/' + dirName + 'TestResults.sarif')}`);
};