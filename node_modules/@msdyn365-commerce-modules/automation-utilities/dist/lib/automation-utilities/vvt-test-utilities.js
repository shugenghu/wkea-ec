"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = tslib_1.__importStar(require("fs-extra"));
var path = tslib_1.__importStar(require("path"));
var testcafe_1 = require("testcafe");
// Do not remove this and conver to an import, it will throw an esInterop error, since we are trying to import a commonJs module in an es6 file
// tslint:disable-next-line: no-require-imports
var resemble = require('resemblejs');
var environmentConfig = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'environment-config.json'), 'utf8'));
var takeScreenshotAndMatch = function (testController, pageName, moduleName, selector, deploymentEnv, baseFolderPath) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var diffFound, expectedScreenshotPath, actualScreenshotPath, basePath, baseImagePath, pathImage, options;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                diffFound = false;
                expectedScreenshotPath = path.resolve(path.join('screenshots', deploymentEnv, pageName, moduleName + ".png"));
                console.log(expectedScreenshotPath);
                actualScreenshotPath = path.resolve(path.join('screenshots', deploymentEnv, pageName, moduleName + "-actual.png"));
                console.log(actualScreenshotPath);
                return [4 /*yield*/, testController.wait(1000)];
            case 1:
                _a.sent();
                if (!!fs.existsSync(expectedScreenshotPath)) return [3 /*break*/, 3];
                basePath = path.resolve(path.join('screenshots', deploymentEnv, pageName));
                baseImagePath = path.join('screenshots', deploymentEnv, pageName, moduleName + ".png");
                fs.mkdirpSync(basePath);
                // await testController.takeScreenshot(baseImagePath);
                return [4 /*yield*/, testController.takeElementScreenshot(testcafe_1.Selector(selector).nth(0), baseImagePath)];
            case 2:
                // await testController.takeScreenshot(baseImagePath);
                _a.sent();
                return [2 /*return*/, true];
            case 3:
                pathImage = path.join('screenshots', deploymentEnv, pageName, moduleName + "-actual.png");
                // await testController.takeScreenshot(pathImage);
                return [4 /*yield*/, testController.takeElementScreenshot(testcafe_1.Selector(selector).nth(0), pathImage)];
            case 4:
                // await testController.takeScreenshot(pathImage);
                _a.sent();
                options = {
                    output: {
                        errorColor: {
                            red: 255,
                            green: 0,
                            blue: 0
                        },
                        errorType: 'movement',
                        transparency: 1,
                        returnEarlyThreshold: 5,
                        largeImageThreshold: 1200,
                        useCrossOrigin: false,
                        outputDiff: true,
                        ignore: 'antialiasing'
                    }
                };
                resemble.outputSettings(options.output);
                resemble(expectedScreenshotPath)
                    .compareTo(actualScreenshotPath)
                    .onComplete(function (data) {
                    if (data.misMatchPercentage > 5) {
                        var base64String = data.getImageDataUrl();
                        var base64Image = base64String.split(';base64,').pop();
                        var strbase64Image = '';
                        if (base64Image !== undefined) {
                            strbase64Image = base64Image;
                        }
                        fs.writeFileSync(path.resolve(path.join('screenshots', deploymentEnv, pageName, moduleName + "-diff.png")), strbase64Image, { encoding: 'base64' });
                        diffFound = false;
                    }
                    else {
                        diffFound = true;
                    }
                });
                return [2 /*return*/, diffFound];
        }
    });
}); };
exports.takeScreenshotAndMatch = takeScreenshotAndMatch;
var getFixtureUrl = function (pageName, pageMockName, deploymentEnv) {
    if (deploymentEnv === 'localhost') {
        return "" + environmentConfig.localhost.url + pageMockName;
    }
    if (deploymentEnv === 'dev') {
        return environmentConfig.dev.url + "\\" + pageName;
    }
    if (deploymentEnv === 'r1tie') {
        return environmentConfig.r1tie.url + "\\" + pageName;
    }
    if (deploymentEnv === 'r2tie') {
        return environmentConfig.r2tie.url + "\\" + pageName;
    }
    if (deploymentEnv === 'r3tie') {
        return environmentConfig.r3tie.url + "\\" + pageName;
    }
    return environmentConfig.prod.url + "\\" + pageName;
};
exports.getFixtureUrl = getFixtureUrl;
//# sourceMappingURL=vvt-test-utilities.js.map