"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var axe = tslib_1.__importStar(require("axe-core"));
var axe_sarif_converter_1 = require("axe-sarif-converter");
var fs = tslib_1.__importStar(require("fs-extra"));
var path = tslib_1.__importStar(require("path"));
var testcafe_1 = require("testcafe");
var browserWorkspace_1 = require("./browserWorkspace");
var vvt_test_utilities_1 = require("./vvt-test-utilities");
function click(testController, wait, selector) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 4]);
                    console.log('Clicking on ', selector);
                    return [4 /*yield*/, testController
                            .wait(wait)
                            .click(testcafe_1.Selector(selector), { speed: 0.4 })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    e_1 = _a.sent();
                    return [4 /*yield*/, testController.expect(testcafe_1.Selector(selector).exists).ok("Did not found " + selector + " to click")];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.click = click;
function hover(testController, wait, selector) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var e_2;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 4]);
                    console.log("Hovering on  " + selector);
                    return [4 /*yield*/, testController
                            .wait(wait)
                            .hover(testcafe_1.Selector(selector), { speed: 0.4 })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    e_2 = _a.sent();
                    return [4 /*yield*/, testController.expect(testcafe_1.Selector(selector).exists).ok("Did not found " + selector + " to hover")];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.hover = hover;
function typeText(testController, wait, selector, inputText) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var e_3;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 4]);
                    console.log(selector);
                    return [4 /*yield*/, testController
                            .wait(wait)
                            .typeText(testcafe_1.Selector(selector), inputText, { paste: true })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    e_3 = _a.sent();
                    return [4 /*yield*/, testController.expect(testcafe_1.Selector(selector).exists).ok("Did not found " + selector + " to typetext")];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.typeText = typeText;
function expectURL(testController, wait, containsText) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, _b, _c, _d, _e, e_4, _f, _g;
        return tslib_1.__generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _h.trys.push([0, 4, , 7]);
                    _b = (_a = console).log;
                    _c = ['Expecting Url:- '];
                    return [4 /*yield*/, browserWorkspace_1.BrowserWorkspace.getDocumentURLHelper()];
                case 1:
                    _b.apply(_a, _c.concat([_h.sent()]));
                    _e = (_d = testController
                        .wait(wait)).expect;
                    return [4 /*yield*/, browserWorkspace_1.BrowserWorkspace.getDocumentURLHelper()];
                case 2: return [4 /*yield*/, _e.apply(_d, [_h.sent()])
                        .contains(containsText)];
                case 3:
                    _h.sent();
                    return [3 /*break*/, 7];
                case 4:
                    e_4 = _h.sent();
                    _g = (_f = testController).expect;
                    return [4 /*yield*/, browserWorkspace_1.BrowserWorkspace.getDocumentURLHelper()];
                case 5: return [4 /*yield*/, _g.apply(_f, [_h.sent()]).notContains(containsText, "Did not find " + containsText + " Page")];
                case 6:
                    _h.sent();
                    return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.expectURL = expectURL;
function navigateTo(testController, wait, containsText, testUrl) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, _b, _c, e_5, _d, _e;
        return tslib_1.__generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _f.trys.push([0, 3, , 6]);
                    _b = (_a = console).log;
                    _c = ['Navigating to- '];
                    return [4 /*yield*/, browserWorkspace_1.BrowserWorkspace.getDocumentURLHelper()];
                case 1:
                    _b.apply(_a, _c.concat([_f.sent()]));
                    return [4 /*yield*/, testController
                            .wait(wait)
                            .navigateTo(testUrl)
                            .expect(browserWorkspace_1.BrowserWorkspace.getDocumentURLHelper())
                            .contains(containsText)];
                case 2:
                    _f.sent();
                    return [3 /*break*/, 6];
                case 3:
                    e_5 = _f.sent();
                    _e = (_d = testController).expect;
                    return [4 /*yield*/, browserWorkspace_1.BrowserWorkspace.getDocumentURLHelper()];
                case 4: return [4 /*yield*/, _e.apply(_d, [_f.sent()]).notContains(containsText, "Did not find " + containsText + " Page")];
                case 5:
                    _f.sent();
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.navigateTo = navigateTo;
function screenshot(testController, selector, timeout, pageName, moduleName, deploymentEnv, baseFolderPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var selectorElement, result, e_6;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 4, , 6]);
                    console.log('Taking the screenshot');
                    selectorElement = testcafe_1.Selector(selector).with({ visibilityCheck: true, timeout: timeout })();
                    return [4 /*yield*/, testController.expect(selectorElement.clientHeight).gt(0)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, vvt_test_utilities_1.takeScreenshotAndMatch(testController, pageName, moduleName, selector, deploymentEnv, baseFolderPath)];
                case 2:
                    result = _a.sent();
                    return [4 /*yield*/, testController.expect(result).eql(true)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 4:
                    e_6 = _a.sent();
                    console.log({ error: e_6 });
                    return [4 /*yield*/, testController.expect(1).eql(2, 'Not able to take screenshot')];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.screenshot = screenshot;
function exportSarif(testController, pageName, baseFolderPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var hasScript, results, e_7;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 6, , 8]);
                    return [4 /*yield*/, hasAxe.with({ boundTestRun: testController })()];
                case 1:
                    hasScript = _a.sent();
                    if (!!hasScript) return [3 /*break*/, 3];
                    return [4 /*yield*/, injectAxe.with({ boundTestRun: testController })()];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3: return [4 /*yield*/, exports.runAxe.with({ boundTestRun: testController })()];
                case 4:
                    results = _a.sent();
                    console.log('Exporting the sarif results');
                    exports.exportSarifResults(pageName, baseFolderPath, results);
                    console.log('Violation ', results.violations.length);
                    return [4 /*yield*/, testController.expect(results.violations.length).eql(0, 'No violations found')];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 6:
                    e_7 = _a.sent();
                    console.log({ error: e_7 });
                    return [4 /*yield*/, testController.expect(1).eql(2, 'Not able to export sarif')];
                case 7:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    });
}
exports.exportSarif = exportSarif;
var AXE_DIR_PATH = path.dirname(require.resolve('axe-core'));
var AXE_SCRIPT = fs.readFileSync(path.join(AXE_DIR_PATH, 'axe.min.js'), 'utf8');
// @ts-ignore
var hasAxe = testcafe_1.ClientFunction(function () { return !!(window.axe && window.axe.run); });
// tslint:disable-next-line: no-eval
var injectAxe = testcafe_1.ClientFunction(function () { return eval(AXE_SCRIPT); }, { dependencies: { AXE_SCRIPT: AXE_SCRIPT } });
exports.runAxe = testcafe_1.ClientFunction(function (options) {
    if (options === void 0) { options = { runOnly: ['wcag2a', 'wcag2aa'] }; }
    return new Promise(function (resolve) {
        axe.run(document, options, function (error, result) {
            resolve(result);
        });
    });
});
exports.exportSarifResults = function (dirName, baseFolderPath, result) {
    // We use the axe-sarif-converter package for the conversion step, then write the results
    // to a file that we'll be publishing from a CI build step in azure-pipelines.yml
    var sarifResults = axe_sarif_converter_1.convertAxeToSarif(result);
    // tslint:disable-next-line: prefer-template
    fs.outputFileSync(path.resolve(baseFolderPath, 'ScanResults/' + dirName + 'TestResults.sarif'), JSON.stringify(sarifResults, null, 2), { encoding: 'utf8' });
    // tslint:disable-next-line: prefer-template
    console.log("Exported axe results to " + path.resolve(__dirname, 'ScanResults/' + dirName + 'TestResults.sarif'));
};
//# sourceMappingURL=eventHelper.js.map