{"version":3,"file":"eventHelper.js","sourceRoot":"","sources":["../../../src/automation-utilities/eventHelper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\ndeclare var test: TestFn;\nimport * as axe from 'axe-core';\nimport { convertAxeToSarif } from 'axe-sarif-converter';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { ClientFunction, Selector } from 'testcafe';\nimport { BrowserWorkspace } from './browserWorkspace';\nimport { takeScreenshotAndMatch } from './vvt-test-utilities';\n\nexport async function click(testController: TestController, wait: number, selector: string):Promise<void> {\n        try {\n            console.log('Clicking on ',selector);\n            await testController\n            .wait(wait)\n            .click(Selector(selector), { speed: 0.4 });\n        } catch (e) {\n            await testController.expect(Selector(selector).exists).ok(`Did not found ${selector} to click`);\n        }\n}\n\nexport async function hover(testController: TestController, wait: number, selector: string):Promise<void> {\n    try {\n        console.log(`Hovering on  ${selector}`);\n        await testController\n        .wait(wait)\n        .hover(Selector(selector), { speed: 0.4 });\n    } catch (e) {\n        await testController.expect(Selector(selector).exists).ok(`Did not found ${selector} to hover`);\n    }\n}\n\nexport async function typeText(testController: TestController, wait: number, selector: string, inputText: string):Promise<void> {\n    try {\n        console.log(selector);\n        await testController\n        .wait(wait)\n        .typeText(Selector(selector), inputText, { paste: true });\n    } catch (e) {\n        await testController.expect(Selector(selector).exists).ok(`Did not found ${selector} to typetext`);\n    }\n}\n\nexport async function expectURL(testController: TestController, wait: number, containsText: string):Promise<void> {\n    try {\n        console.log('Expecting Url:- ',await BrowserWorkspace.getDocumentURLHelper());\n        await testController\n        .wait(wait)\n        .expect(await BrowserWorkspace.getDocumentURLHelper())\n        .contains(containsText);\n    } catch (e) {\n        await testController.expect(await BrowserWorkspace.getDocumentURLHelper()).notContains(containsText,`Did not find ${containsText} Page`);\n    }\n}\n\nexport async function navigateTo(testController: TestController, wait: number, containsText: string, testUrl: string):Promise<void> {\n    try {\n        console.log('Navigating to- ',await BrowserWorkspace.getDocumentURLHelper());\n        await testController\n        .wait(wait)\n        .navigateTo(testUrl)\n        .expect(BrowserWorkspace.getDocumentURLHelper())\n        .contains(containsText);\n    } catch (e) {\n        await testController.expect(await BrowserWorkspace.getDocumentURLHelper()).notContains(containsText,`Did not find ${containsText} Page`);\n    }\n}\n\nexport async function screenshot(testController: TestController, selector: string, timeout: number, pageName: string, moduleName: string, deploymentEnv: string, baseFolderPath: string):Promise<void> {\n    try {\n        console.log('Taking the screenshot');\n        const selectorElement = Selector(selector).with({ visibilityCheck: true, timeout })();\n        await testController.expect(selectorElement.clientHeight).gt(0);\n        const result = await takeScreenshotAndMatch(testController, pageName, moduleName, selector, deploymentEnv, baseFolderPath);\n        await testController.expect(result).eql(true);\n    } catch (e) {\n        console.log({ error: e });\n        await testController.expect(1).eql(2, 'Not able to take screenshot');\n    }\n}\n\nexport async function exportSarif(testController: TestController, pageName: string, baseFolderPath: string):Promise<void> {\n    try {\n        const hasScript = await hasAxe.with({ boundTestRun: testController })();\n        if (!hasScript) {\n            await injectAxe.with({ boundTestRun: testController })();\n        }\n        const results = <axe.AxeResults>await runAxe.with({ boundTestRun: testController })();\n        console.log('Exporting the sarif results');\n        exportSarifResults(pageName, baseFolderPath, results);\n        console.log('Violation ',results.violations.length);\n        await testController.expect(results.violations.length).eql(0, 'No violations found');\n    } catch (e) {\n        console.log({ error: e });\n        await testController.expect(1).eql(2, 'Not able to export sarif');\n    }\n}\n\nconst AXE_DIR_PATH = path.dirname(require.resolve('axe-core'));\nconst AXE_SCRIPT = fs.readFileSync(path.join(AXE_DIR_PATH, 'axe.min.js'), 'utf8');\n\n// @ts-ignore\nconst hasAxe = ClientFunction(() => !!(window.axe && window.axe.run));\n\n// tslint:disable-next-line: no-eval\nconst injectAxe = ClientFunction(() => eval(AXE_SCRIPT), { dependencies: { AXE_SCRIPT } });\n\nexport const runAxe = ClientFunction((options = { runOnly: ['wcag2a', 'wcag2aa'] }) => {\n    return new Promise((resolve) => {\n        axe.run(document, options, (error, result) => {\n            resolve(result);\n        });\n    });\n});\n\nexport const exportSarifResults = (dirName: string, baseFolderPath: string, result: axe.AxeResults) => {\n\n    // We use the axe-sarif-converter package for the conversion step, then write the results\n    // to a file that we'll be publishing from a CI build step in azure-pipelines.yml\n    const sarifResults = convertAxeToSarif(result);\n\n    // tslint:disable-next-line: prefer-template\n    fs.outputFileSync(path.resolve(baseFolderPath, 'ScanResults/' + dirName + 'TestResults.sarif'), JSON.stringify(sarifResults, null, 2), { encoding: 'utf8' });\n    // tslint:disable-next-line: prefer-template\n    console.log(`Exported axe results to ${path.resolve(__dirname, 'ScanResults/' + dirName + 'TestResults.sarif')}`);\n};"]}