{"version":3,"file":"vvt-test-utilities.js","sourceRoot":"","sources":["../../../src/automation-utilities/vvt-test-utilities.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { ResembleComparisonResult } from 'resemblejs';\nimport { Selector } from 'testcafe';\n\n// Do not remove this and conver to an import, it will throw an esInterop error, since we are trying to import a commonJs module in an es6 file\n// tslint:disable-next-line: no-require-imports\nconst resemble = require('resemblejs');\n\nconst environmentConfig = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'environment-config.json'), 'utf8'));\n\nconst takeScreenshotAndMatch = async (testController: TestController, pageName: string, moduleName: string, selector: string, deploymentEnv: string, baseFolderPath: string): Promise<boolean> => {\n    let diffFound = false;\n    const expectedScreenshotPath = path.resolve(path.join('screenshots', deploymentEnv, pageName, `${moduleName}.png`));\n    console.log(expectedScreenshotPath);\n    const actualScreenshotPath = path.resolve(path.join('screenshots', deploymentEnv, pageName, `${moduleName}-actual.png`));\n    console.log(actualScreenshotPath);\n    await testController.wait(1000);\n\n    if (!fs.existsSync(expectedScreenshotPath)) {\n        const basePath = path.resolve(path.join('screenshots',deploymentEnv, pageName));\n        const baseImagePath = path.join('screenshots',deploymentEnv, pageName, `${moduleName}.png`);\n        fs.mkdirpSync(basePath);\n        // await testController.takeScreenshot(baseImagePath);\n        await testController.takeElementScreenshot(Selector(selector).nth(0), baseImagePath);\n        return true;\n    }\n\n    const pathImage = path.join('screenshots',deploymentEnv, pageName, `${moduleName}-actual.png`);\n    // await testController.takeScreenshot(pathImage);\n    await testController.takeElementScreenshot(Selector(selector).nth(0), pathImage);\n\n    const options = {\n        output: {\n            errorColor: {\n                red: 255,\n                green: 0,\n                blue: 0\n            },\n            errorType: 'movement',\n            transparency: 1,\n            returnEarlyThreshold: 5,\n            largeImageThreshold: 1200,\n            useCrossOrigin: false,\n            outputDiff: true,\n            ignore: 'antialiasing'\n        }\n    };\n\n    resemble.outputSettings(options.output);\n\n    resemble(expectedScreenshotPath)\n        .compareTo(actualScreenshotPath)\n        .onComplete((data: ResembleComparisonResult) => {\n            if (data.misMatchPercentage > 5) {\n                const base64String = data.getImageDataUrl();\n                const base64Image = base64String.split(';base64,').pop();\n                let strbase64Image = '';\n                if (base64Image !== undefined) {\n                    strbase64Image = base64Image;\n                }\n                fs.writeFileSync(path.resolve(path.join('screenshots', deploymentEnv, pageName, `${moduleName}-diff.png`)), strbase64Image, { encoding: 'base64' });\n                diffFound = false;\n            } else {\n                diffFound = true;\n            }\n        });\n\n    return diffFound;\n};\n\nconst getFixtureUrl = (pageName: string, pageMockName: string, deploymentEnv: string): string => {\n\n    if (deploymentEnv === 'localhost') {\n        return `${environmentConfig.localhost.url}${pageMockName}`;\n    }\n\n    if (deploymentEnv === 'dev') {\n        return `${environmentConfig.dev.url}\\\\${pageName}`;\n    }\n\n    if (deploymentEnv === 'r1tie') {\n        return `${environmentConfig.r1tie.url}\\\\${pageName}`;\n    }\n\n    if (deploymentEnv === 'r2tie') {\n        return `${environmentConfig.r2tie.url}\\\\${pageName}`;\n    }\n\n    if (deploymentEnv === 'r3tie') {\n        return `${environmentConfig.r3tie.url}\\\\${pageName}`;\n    }\n\n    return `${environmentConfig.prod.url}\\\\${pageName}`;\n};\n\n// const enum metaDataProperties {\n//     TestType = 'testtype',\n//     Env = 'env'\n// }\n\n// const enum testTypes {\n//     localhostDVT = 'localhost-dvt',\n//     envDVT = 'env-dvt',\n//     localhostVVT = 'localhost-vvt',\n//     envVVT = 'env-vvt',\n//     DVT = 'dvt',\n//     VVT = 'vvt',\n//     BVT = 'bvt',\n//     localhost = 'localhost',\n//     env = 'env'\n// }\n\nexport {\n    takeScreenshotAndMatch,\n    getFixtureUrl\n};"]}