"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var testcafe_1 = require("testcafe");
var browserWorkspace_1 = require("./browserWorkspace");
var eventHelper_1 = require("./eventHelper");
var timeout = 15000;
// tslint:disable-next-line: completed-docs
var E2EHelper = /** @class */ (function () {
    function E2EHelper() {
    }
    // tslint:disable-next-line: max-line-length
    E2EHelper.prototype.eventHelper = function (testController, deploymentEnv, testPage, selector, errorMessage, baseFolderPath, inputText, containsText, eventName, testUrl, wait, moduleName, pageName) {
        if (inputText === void 0) { inputText = ''; }
        if (containsText === void 0) { containsText = ''; }
        if (testUrl === void 0) { testUrl = ''; }
        if (wait === void 0) { wait = 1000; }
        if (moduleName === void 0) { moduleName = ''; }
        if (pageName === void 0) { pageName = ''; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, pageUrl;
            return tslib_1.__generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        _a = eventName;
                        switch (_a) {
                            case 'click': return [3 /*break*/, 1];
                            case 'hover': return [3 /*break*/, 3];
                            case 'typeText': return [3 /*break*/, 5];
                            case 'expectURL': return [3 /*break*/, 7];
                            case 'navigateTo': return [3 /*break*/, 9];
                            case 'hasAttribute': return [3 /*break*/, 11];
                            case 'valueCheck': return [3 /*break*/, 14];
                            case 'removeItem': return [3 /*break*/, 23];
                            case 'screenshot': return [3 /*break*/, 32];
                            case 'a11y': return [3 /*break*/, 34];
                        }
                        return [3 /*break*/, 37];
                    case 1: return [4 /*yield*/, eventHelper_1.click(testController, wait, selector)];
                    case 2:
                        _k.sent();
                        return [3 /*break*/, 39];
                    case 3: return [4 /*yield*/, eventHelper_1.hover(testController, wait, selector)];
                    case 4:
                        _k.sent();
                        return [3 /*break*/, 39];
                    case 5: return [4 /*yield*/, eventHelper_1.typeText(testController, wait, selector, inputText)];
                    case 6:
                        _k.sent();
                        return [3 /*break*/, 39];
                    case 7: return [4 /*yield*/, eventHelper_1.expectURL(testController, wait, containsText)];
                    case 8:
                        _k.sent();
                        return [3 /*break*/, 39];
                    case 9: return [4 /*yield*/, eventHelper_1.navigateTo(testController, wait, containsText, testUrl)];
                    case 10:
                        _k.sent();
                        return [3 /*break*/, 39];
                    case 11:
                        _c = (_b = testController).expect;
                        return [4 /*yield*/, testcafe_1.Selector(selector).hasAttribute(inputText)];
                    case 12: return [4 /*yield*/, _c.apply(_b, [_k.sent()])
                            .ok("Did not find " + inputText + " attribute")];
                    case 13:
                        _k.sent();
                        return [3 /*break*/, 39];
                    case 14: return [4 /*yield*/, testcafe_1.Selector(selector).value];
                    case 15:
                        if (!_k.sent()) return [3 /*break*/, 18];
                        _e = (_d = testController).expect;
                        return [4 /*yield*/, testcafe_1.Selector(selector).value];
                    case 16: return [4 /*yield*/, _e.apply(_d, [_k.sent()])
                            .eql(inputText, errorMessage)];
                    case 17:
                        _k.sent();
                        _k.label = 18;
                    case 18: return [4 /*yield*/, testcafe_1.Selector(selector).textContent];
                    case 19:
                        if (!_k.sent()) return [3 /*break*/, 22];
                        _g = (_f = testController).expect;
                        return [4 /*yield*/, testcafe_1.Selector(selector).textContent];
                    case 20: return [4 /*yield*/, _g.apply(_f, [_k.sent()])
                            .eql(inputText, errorMessage)];
                    case 21:
                        _k.sent();
                        _k.label = 22;
                    case 22: return [3 /*break*/, 39];
                    case 23: return [4 /*yield*/, testcafe_1.Selector(selector).exists];
                    case 24:
                        if (!_k.sent()) return [3 /*break*/, 28];
                        _j = (_h = testController).expect;
                        return [4 /*yield*/, testcafe_1.Selector(selector).exists];
                    case 25: return [4 /*yield*/, _j.apply(_h, [_k.sent()])
                            .ok('Either there is no item added in cart or the remove link is not rendering on cart page')];
                    case 26:
                        _k.sent();
                        return [4 /*yield*/, eventHelper_1.click(testController, wait, selector)];
                    case 27:
                        _k.sent();
                        return [3 /*break*/, 31];
                    case 28: return [4 /*yield*/, eventHelper_1.hover(testController, wait, inputText)];
                    case 29:
                        _k.sent();
                        return [4 /*yield*/, testController
                                .expect(testcafe_1.Selector(inputText).textContent)
                                .eql(containsText, errorMessage)];
                    case 30:
                        _k.sent();
                        _k.label = 31;
                    case 31: return [3 /*break*/, 39];
                    case 32:
                        if (moduleName.length === 0 || pageName.length === 0 || !baseFolderPath) {
                            console.log('ModuleName or PageName or folder Path  is missing for VVT test');
                            return [3 /*break*/, 39];
                        }
                        return [4 /*yield*/, eventHelper_1.screenshot(testController, selector, timeout, pageName, moduleName, deploymentEnv, baseFolderPath)];
                    case 33:
                        _k.sent();
                        return [3 /*break*/, 39];
                    case 34: return [4 /*yield*/, browserWorkspace_1.BrowserWorkspace.getDocumentURLHelper()];
                    case 35:
                        pageUrl = _k.sent();
                        console.log('A11y Test for ', pageUrl);
                        return [4 /*yield*/, eventHelper_1.exportSarif(testController, pageName, baseFolderPath)];
                    case 36:
                        _k.sent();
                        return [3 /*break*/, 39];
                    case 37: return [4 /*yield*/, testController
                            .expect(testcafe_1.Selector(selector).with({ visibilityCheck: true, timeout: timeout }))
                            .ok(errorMessage)];
                    case 38:
                        _k.sent();
                        _k.label = 39;
                    case 39:
                        if (!testPage) return [3 /*break*/, 41];
                        console.log('A11y Test for ', testPage);
                        return [4 /*yield*/, eventHelper_1.exportSarif(testController, testPage, baseFolderPath)];
                    case 40:
                        _k.sent();
                        _k.label = 41;
                    case 41: return [2 /*return*/];
                }
            });
        });
    };
    return E2EHelper;
}());
exports.default = E2EHelper;
//# sourceMappingURL=e2eHelper.js.map