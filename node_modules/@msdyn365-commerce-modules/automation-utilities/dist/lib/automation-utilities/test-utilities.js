"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var e2eHelper_1 = tslib_1.__importDefault(require("./e2eHelper"));
var vvt_test_utilities_1 = require("./vvt-test-utilities");
// tslint:disable-next-line: max-func-body-length
exports.testutilities = function (testObj, testName) {
    var e2eHelper = new e2eHelper_1.default();
    var deploymentEnv = process.env.TESTENVIRONMENT || testObj.env || 'localhost';
    var url = vvt_test_utilities_1.getFixtureUrl('', '', deploymentEnv);
    var testPageURL = "" + url + testObj.pageUrl;
    var fixtureName = "'" + testName + "' '" + testObj.category + "'";
    if ((process.env.TESTENVIRONMENT === 'localhost' || process.env.TESTENVIRONMENT === undefined) && testObj.env === 'localhost') {
        if (testObj.pageUrl.length !== 0 && testObj.enabled !== false) {
            fixture(fixtureName)
                .page(testPageURL).beforeEach(function (testController) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            console.log(testPageURL);
                            return [4 /*yield*/, testController.maximizeWindow()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            if (testObj.category.includes('a11y')) {
                test('Validate Accessibility Test for ' + testName, function (testController) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                    var e_1;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(testObj.enabled && testObj.testPage)) return [3 /*break*/, 5];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 5]);
                                console.log(testPageURL);
                                return [4 /*yield*/, e2eHelper.eventHelper(testController, testObj.env, testObj.testPage, testObj.baseFolderPath, '', '')];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 5];
                            case 3:
                                e_1 = _a.sent();
                                console.log({ error: e_1 });
                                return [4 /*yield*/, testController.expect(1).eql(2, 'parameters are missing')];
                            case 4:
                                _a.sent();
                                return [3 /*break*/, 5];
                            case 5: return [2 /*return*/];
                        }
                    });
                }); });
            }
            if (testObj.category.includes('dvt')) {
                test('Validate Dvt Test for ' + testName, function (t) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                    var _i, _a, data, e_2;
                    return tslib_1.__generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!testObj.enabled) return [3 /*break*/, 9];
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 7, , 9]);
                                _i = 0, _a = testObj.asserts;
                                _b.label = 2;
                            case 2:
                                if (!(_i < _a.length)) return [3 /*break*/, 6];
                                data = _a[_i];
                                if (!(data.eventName === 'screenshot')) return [3 /*break*/, 3];
                                console.log(data.eventName);
                                return [3 /*break*/, 5];
                            case 3: 
                            // tslint:disable-next-line: max-line-length
                            return [4 /*yield*/, e2eHelper.eventHelper(t, testObj.env, '', data.selector, data.errorMessage, testObj.baseFolderPath, data.inputText, data.containsText, data.eventName, data.urlText, data.wait, data.moduleName, data.page)];
                            case 4:
                                // tslint:disable-next-line: max-line-length
                                _b.sent();
                                _b.label = 5;
                            case 5:
                                _i++;
                                return [3 /*break*/, 2];
                            case 6: return [3 /*break*/, 9];
                            case 7:
                                e_2 = _b.sent();
                                console.log({ error: e_2 });
                                return [4 /*yield*/, t.expect(1).eql(2, 'parameters are missing or eventName')];
                            case 8:
                                _b.sent();
                                return [3 /*break*/, 9];
                            case 9: return [2 /*return*/];
                        }
                    });
                }); });
            }
            if (testObj.category.includes('vvt')) {
                test('Validate Vvt Test for ' + testName, function (t) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                    var _i, _a, data, e_3;
                    return tslib_1.__generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!testObj.enabled) return [3 /*break*/, 8];
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 6, , 8]);
                                console.log(testPageURL);
                                _i = 0, _a = testObj.asserts;
                                _b.label = 2;
                            case 2:
                                if (!(_i < _a.length)) return [3 /*break*/, 5];
                                data = _a[_i];
                                return [4 /*yield*/, e2eHelper.eventHelper(t, testObj.env, '', data.selector, data.errorMessage, testObj.baseFolderPath, data.inputText, data.urlText, data.eventName, data.urlText, data.wait, data.moduleName, data.page)];
                            case 3:
                                _b.sent();
                                _b.label = 4;
                            case 4:
                                _i++;
                                return [3 /*break*/, 2];
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                e_3 = _b.sent();
                                console.log({ error: e_3 });
                                return [4 /*yield*/, t.expect(1).eql(2, 'parameters are missing')];
                            case 7:
                                _b.sent();
                                return [3 /*break*/, 8];
                            case 8: return [2 /*return*/];
                        }
                    });
                }); });
            }
        }
    }
    if (process.env.TESTENVIRONMENT !== 'localhost' && testObj.env !== 'localhost') {
        fixture(fixtureName)
            .page(testPageURL).beforeEach(function (testController) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log(testPageURL);
                        return [4 /*yield*/, testController.maximizeWindow()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        if (testObj.category.includes('a11y')) {
            test('Validate Accessibility Test for ' + testName, function (testController) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var e_4;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!testObj.testPage) return [3 /*break*/, 5];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 5]);
                            return [4 /*yield*/, e2eHelper.eventHelper(testController, testObj.env, testObj.testPage, testObj.baseFolderPath, '', '')];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            e_4 = _a.sent();
                            console.log({ error: e_4 });
                            return [4 /*yield*/, testController.expect(1).eql(2, 'parameters are missing')];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        }
        if (testObj.category.includes('dvt')) {
            test('Validate Dvt Test for ' + testName, function (t) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var _i, _a, data, e_5;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!testObj.enabled) return [3 /*break*/, 9];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 7, , 9]);
                            _i = 0, _a = testObj.asserts;
                            _b.label = 2;
                        case 2:
                            if (!(_i < _a.length)) return [3 /*break*/, 6];
                            data = _a[_i];
                            if (!(data.eventName === 'screenshot')) return [3 /*break*/, 3];
                            console.log(data.eventName);
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, e2eHelper.eventHelper(t, testObj.env, '', data.selector, data.errorMessage, testObj.baseFolderPath, data.inputText, data.containsText, data.eventName, data.urlText, data.wait, data.moduleName, data.page)];
                        case 4:
                            _b.sent();
                            _b.label = 5;
                        case 5:
                            _i++;
                            return [3 /*break*/, 2];
                        case 6: return [3 /*break*/, 9];
                        case 7:
                            e_5 = _b.sent();
                            console.log({ error: e_5 });
                            return [4 /*yield*/, t.expect(1).eql(2, 'parameters are missing or eventName')];
                        case 8:
                            _b.sent();
                            return [3 /*break*/, 9];
                        case 9: return [2 /*return*/];
                    }
                });
            }); });
        }
        if (testObj.category.includes('vvt')) {
            test('Validate Vvt Test for ' + testName, function (t) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var _i, _a, data, e_6;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!testObj.enabled) return [3 /*break*/, 8];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 6, , 8]);
                            _i = 0, _a = testObj.asserts;
                            _b.label = 2;
                        case 2:
                            if (!(_i < _a.length)) return [3 /*break*/, 5];
                            data = _a[_i];
                            return [4 /*yield*/, e2eHelper.eventHelper(t, testObj.env, '', data.selector, data.errorMessage, testObj.baseFolderPath, data.inputText, data.urlText, data.eventName, data.urlText, data.wait, data.moduleName, data.page)];
                        case 3:
                            _b.sent();
                            _b.label = 4;
                        case 4:
                            _i++;
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_6 = _b.sent();
                            console.log({ error: e_6 });
                            return [4 /*yield*/, t.expect(1).eql(2, 'parameters are missing')];
                        case 7:
                            _b.sent();
                            return [3 /*break*/, 8];
                        case 8: return [2 /*return*/];
                    }
                });
            }); });
        }
    }
};
//# sourceMappingURL=test-utilities.js.map