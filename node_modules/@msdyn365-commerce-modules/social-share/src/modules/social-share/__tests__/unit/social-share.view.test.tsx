import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import { ISocialShareViewProps } from '../../social-share';
import { ISocialShareConfig, ISocialShareProps } from '../../social-share.props.autogenerated';
import SocialShareView from '../../social-share.view';

describe('tab unit tests - View', () => {
  it('renders correctly', () => {
    const moduleProps: ISocialShareProps<{}> = buildMockModuleProps({}, {}) as ISocialShareProps<{}>;
    const myReactNodeChild1: React.ReactNode = `whatever child module 1`;
    const myReactNodeChild2: React.ReactNode = `whatever child module 2`;
    moduleProps.slots = {
      socialShareItems: [myReactNodeChild1, myReactNodeChild2],
    };
    const mockProps: ISocialShareViewProps = {
      ...moduleProps,
      isConsentGiven: true,
      SocialShareItemElements: moduleProps.slots.socialShareItems,
      SocialShare: {
        moduleProps,
        className: 'ms-social-share'
      },
      SocialShareList: { className: 'ms-social-share-list' },
      SocialShareItem: { className: 'ms-social-share-Item' },
      SocialShareItemCustomization: {className: 'ms-social-share-Item'}
    };
    const component = render(<SocialShareView {...mockProps} />);
    expect(component).toMatchSnapshot();
  });
  it('render null', () => {
    const moduleProps: ISocialShareProps<ISocialShareConfig> = buildMockModuleProps({}, {}) as ISocialShareProps<ISocialShareConfig>;
    const myReactNodeChild1: React.ReactNode = `whatever child module 1`;
    const myReactNodeChild2: React.ReactNode = `whatever child module 1`;
    moduleProps.slots = {
      socialShareItems: [myReactNodeChild1, myReactNodeChild2]
    };
    const mockProps: ISocialShareViewProps = {
      ...moduleProps,
      isConsentGiven: true,
      SocialShareItemElements: [],
      SocialShare: {
        moduleProps,
        className: 'ms-social-share'
      },
      SocialShareList: { className: 'ms-social-share-list' },
      SocialShareItem: { className: 'ms-social-share-Item' },
      SocialShareItemCustomization: { className: 'ms-social-share-Item' },
    };
    const component = render(<SocialShareView {...mockProps} />);
    expect(component).toMatchSnapshot();
  });
  it('renders null if consent set false', () => {
    const moduleProps: ISocialShareProps<{}> = buildMockModuleProps({}, {}) as ISocialShareProps<{}>;
    const myReactNodeChild1: React.ReactNode = `whatever child module 1`;
    const myReactNodeChild2: React.ReactNode = `whatever child module 2`;
    moduleProps.slots = {
      socialShareItems: [myReactNodeChild1, myReactNodeChild2]
    };
    const mockProps: ISocialShareViewProps = {
      ...moduleProps,
      isConsentGiven: false,
      SocialShareItemElements: moduleProps.slots.socialShareItems,
      SocialShare: {
        moduleProps,
        className: 'ms-social-share'
      },
      SocialShareList: { className: 'ms-social-share-list' },
      SocialShareItem: { className: 'ms-social-share-Item' },
      SocialShareItemCustomization: {className: 'ms-social-share-Item'}
    };
    const component = render(<SocialShareView {...mockProps} />);
    expect(component).toMatchSnapshot();
  });
});