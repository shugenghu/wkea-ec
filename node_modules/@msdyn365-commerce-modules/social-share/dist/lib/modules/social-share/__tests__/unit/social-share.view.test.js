import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { render } from 'enzyme';
import * as React from 'react';
import SocialShareView from '../../social-share.view';
describe('tab unit tests - View', () => {
    it('renders correctly', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const myReactNodeChild1 = `whatever child module 1`;
        const myReactNodeChild2 = `whatever child module 2`;
        moduleProps.slots = {
            socialShareItems: [myReactNodeChild1, myReactNodeChild2],
        };
        const mockProps = {
            ...moduleProps,
            isConsentGiven: true,
            SocialShareItemElements: moduleProps.slots.socialShareItems,
            SocialShare: {
                moduleProps,
                className: 'ms-social-share'
            },
            SocialShareList: { className: 'ms-social-share-list' },
            SocialShareItem: { className: 'ms-social-share-Item' },
            SocialShareItemCustomization: { className: 'ms-social-share-Item' }
        };
        const component = render(React.createElement(SocialShareView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('render null', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const myReactNodeChild1 = `whatever child module 1`;
        const myReactNodeChild2 = `whatever child module 1`;
        moduleProps.slots = {
            socialShareItems: [myReactNodeChild1, myReactNodeChild2]
        };
        const mockProps = {
            ...moduleProps,
            isConsentGiven: true,
            SocialShareItemElements: [],
            SocialShare: {
                moduleProps,
                className: 'ms-social-share'
            },
            SocialShareList: { className: 'ms-social-share-list' },
            SocialShareItem: { className: 'ms-social-share-Item' },
            SocialShareItemCustomization: { className: 'ms-social-share-Item' },
        };
        const component = render(React.createElement(SocialShareView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders null if consent set false', () => {
        const moduleProps = buildMockModuleProps({}, {});
        const myReactNodeChild1 = `whatever child module 1`;
        const myReactNodeChild2 = `whatever child module 2`;
        moduleProps.slots = {
            socialShareItems: [myReactNodeChild1, myReactNodeChild2]
        };
        const mockProps = {
            ...moduleProps,
            isConsentGiven: false,
            SocialShareItemElements: moduleProps.slots.socialShareItems,
            SocialShare: {
                moduleProps,
                className: 'ms-social-share'
            },
            SocialShareList: { className: 'ms-social-share-list' },
            SocialShareItem: { className: 'ms-social-share-Item' },
            SocialShareItemCustomization: { className: 'ms-social-share-Item' }
        };
        const component = render(React.createElement(SocialShareView, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=social-share.view.test.js.map