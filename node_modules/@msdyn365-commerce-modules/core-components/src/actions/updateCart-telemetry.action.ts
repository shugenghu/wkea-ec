/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { createDataActionHook, IActionContext, IActionInput, TelemetryEvent } from '@msdyn365-commerce/core';
import { IAny, IDictionary, IMSDyn365Window } from '@msdyn365-commerce/core-internal';
import { Cart, CartLine, IDataServiceRequest, IUpdateCartLinesParam } from '@msdyn365-commerce/retail-proxy';
import { getProductInfoFromCart } from './telemetry.action.helper';

declare var window: IMSDyn365Window;

/**
 * Saves info on cart lines updated before calling data action
 * @param inputs Data action inputs
 * @param actionContext Action context
 */
const beforeUpdateCart = async (inputs: IActionInput | IActionInput[], actionContext: IActionContext) => {
    try {
        const actionInput = Array.isArray(inputs) ? <IDataServiceRequest>inputs[0] : <IDataServiceRequest>inputs;

        // If cart lines were updated
        if (actionInput.queryParams && typeof actionInput.queryParams === 'function') {
            const updateCartLinesParams = actionInput.queryParams<IUpdateCartLinesParam>();
            if (updateCartLinesParams && updateCartLinesParams.cartLines) {
                // Save info on updated cart lines for post data action hook to pick up
                actionContext.requestContext.telemetryData[`updatedCartLines`] = updateCartLinesParams.cartLines;
                return;
            }
        }
        actionContext.telemetry.debug('UpdateCart pre-data action hook failed - No updated cart lines found');
    } catch (e) {
        actionContext.telemetry.debug('UpdateCart pre-data action hook failed.', e);
    }
};

/**
 * Fires an UpdateInCart event after data action completed
 * @param _inputs Data action inputs
 * @param cart New cart object after cart lines have been added
 * @param actionContext Action context
 */
const afterUpdateCart = async (_inputs: IActionInput | IActionInput[], cart: Cart | Cart[], actionContext: IActionContext) => {
    if (window && window._msdyn365 && window._msdyn365.telemetry) {
        const updatedProducts: IDictionary<IAny> = {};
        const updatedCartLines = <CartLine[]>actionContext.requestContext.telemetryData[`updatedCartLines`];

        // If TelemetryData exists for updated cart lines, collect product info
        if (updatedCartLines) {
            updatedCartLines.forEach((cartLine: CartLine) => {
                if (cartLine && cartLine.ProductId) {
                    const updatedProduct = actionContext.requestContext.telemetryData[cartLine.ProductId];
                    if (updatedProduct) {
                        updatedProducts[cartLine.ProductId] = updatedProduct;
                    }
                }
            });
        }

        // Fire UpdateInCart event
        window._msdyn365.telemetry.logEvent(
            TelemetryEvent.UpdateInCart,
            getProductInfoFromCart(cart, updatedProducts, actionContext.requestContext)
        );
    }
};

createDataActionHook({
    actionId: '@msdyn365-commerce/retail-proxy/Carts/UpdateCartLines',
    postReaderHook: afterUpdateCart,
    preReaderHook: beforeUpdateCart
});
