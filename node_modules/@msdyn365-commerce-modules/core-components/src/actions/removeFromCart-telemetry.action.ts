/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { createDataActionHook, IActionContext, IActionInput, IMSDyn365Window, TelemetryEvent } from '@msdyn365-commerce/core';
import { Cart, CartLine, IDataServiceRequest, IRemoveCartLinesParam } from '@msdyn365-commerce/retail-proxy';
import { IProductTransaction } from '@msdyn365-commerce/telemetry-internal';
import { getProductInfoFromCart } from './telemetry.action.helper';

declare var window: IMSDyn365Window;

/**
 * Saves info on cart lines removed before calling data action
 * @param inputs Data action inputs
 * @param actionContext Action context
 */
const beforeRemoveFromCart = async (inputs: IActionInput | IActionInput[], actionContext: IActionContext) => {
    try {
        const actionInput = Array.isArray(inputs) ? <IDataServiceRequest>inputs[0] : <IDataServiceRequest>inputs;

        // If cart lines were removed
        if (actionInput.queryParams && typeof actionInput.queryParams === 'function') {
            const removeCartLinesParams = actionInput.queryParams<IRemoveCartLinesParam>();
            if (removeCartLinesParams && removeCartLinesParams.cartLineIds) {
                // Save info on removed cart lines for post data action hook to pick up
                actionContext.requestContext.telemetryData[`removedCartLineIds`] = removeCartLinesParams.cartLineIds;
                return;
            }
        }
        actionContext.telemetry.debug('RemoveFromCart pre-data action hook failed - No removed cart lines found');
    } catch (e) {
        actionContext.telemetry.debug('RemoveFromCart pre-data action hook failed.', e);
    }
};

/**
 * Fires a RemoveFromCart event after data action completed
 * @param _inputs Data action inputs
 * @param cart New cart object after cart lines have been removed
 * @param actionContext Action context
 */
const afterRemoveFromCart = async (_inputs: IActionInput | IActionInput[], cart: Cart | Cart[], actionContext: IActionContext) => {
    if (window && window._msdyn365 && window._msdyn365.telemetry) {
        const removeCartLineIds = <string[]>actionContext.requestContext.telemetryData[`removedCartLineIds`];
        const activeCart = <Cart>actionContext.requestContext.telemetryData[`activeCart`];
        const productTransaction = <IProductTransaction>actionContext.requestContext.telemetryData[TelemetryEvent.Purchase];
        const removedCartLines: CartLine[] = [];

        // Collect info on products removed from cart
        if (removeCartLineIds && activeCart && activeCart.CartLines) {
            activeCart.CartLines.forEach((cartLine: CartLine) => {
                if (
                    cartLine.ProductId &&
                    removeCartLineIds.indexOf(cartLine.LineId ? cartLine.LineId : '') !== -1 &&
                    !(
                        productTransaction &&
                        productTransaction.products &&
                        productTransaction.products.some(product => +product.productSku === cartLine.ProductId)
                    )
                ) {
                    removedCartLines.push(cartLine);
                }
            });
        }

        // Fire RemoveFromCart event if cart lines were removed
        if (removedCartLines && removedCartLines.length > 0) {
            window._msdyn365.telemetry.logEvent(
                TelemetryEvent.RemoveFromCart,
                getProductInfoFromCart(
                    { ...{}, ...cart, ...{ CartLines: removedCartLines } },
                    actionContext.requestContext.telemetryData,
                    actionContext.requestContext
                )
            );
        } else {
            actionContext.telemetry.debug('No RemoveFromCart event fired, no removed cart lines found');
        }
    }
};

createDataActionHook({
    actionId: '@msdyn365-commerce/retail-proxy/Carts/RemoveCartLines',
    postReaderHook: afterRemoveFromCart,
    preReaderHook: beforeRemoveFromCart
});
