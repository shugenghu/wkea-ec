/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { IAny, IDictionary, IRequestContext } from '@msdyn365-commerce/core-internal';
import { Cart, CartLine, SalesLine, SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { ICartInfo, IProductInfo, IProductTransaction } from '@msdyn365-commerce/telemetry-internal';

/**
 * getProductInfoFromCart
 * @param cart Cart object
 * @param productData Product data
 * @param requestContext Request Context
 */
export const getProductInfoFromCart = (cart: Cart | Cart[], productData: IDictionary<IAny>, requestContext: IRequestContext): ICartInfo => {
    // ToDo: Need to revisit this when we make sure that we can expect only one cart and not array
    cart = Array.isArray(cart) ? cart[0] : cart;
    return _getProductInfoFromCartLines(cart, productData, requestContext);
};

/**
 * _getProductInfoFromCartLines
 * @param cartObject Cart object
 * @param productData Product data
 * @param requestContext Request context
 */
const _getProductInfoFromCartLines = (cartObject: Cart, productData: IDictionary<IAny>, requestContext: IRequestContext): ICartInfo => {
    const cartLineProductUnits: IProductInfo[] = [];
    if (cartObject && cartObject.CartLines && Array.isArray(cartObject.CartLines) && cartObject.CartLines.length > 0) {
        cartObject.CartLines.forEach((cartLineitem: CartLine) => {
            if (cartLineitem.ProductId) {
                // The product id in cartLine actually contains recordId and not master product id so we can use it up here to lookup product.
                const productInfo = <IProductInfo>productData[cartLineitem.ProductId];
                if (productInfo) {
                    cartLineProductUnits.push({
                        productChannelId: '',
                        productChannelName: '',
                        productCategoryId: '',
                        productCategoryName: '',
                        productId: productInfo.productId,
                        productName: productInfo.productName,
                        productSku: productInfo.productSku,
                        productPrice: cartLineitem.Price ? cartLineitem.Price.toString() : '',
                        productQuantity: cartLineitem.Quantity ? cartLineitem.Quantity.toString() : '',
                        productCurrency: ''
                    });
                }
            }
        });
    }

    return {
        cartId: cartObject.Id,
        cartVersion: cartObject.Version ? cartObject.Version.toString() : '',
        products: cartLineProductUnits,
        orderId: cartObject.OrderNumber ? cartObject.OrderNumber.toString() : ''
    };
};

/**
 * getProductTransactionInfoFromSalesOrder
 * @param salesOrder Sales order
 * @param productData Product data
 */
export const getProductTransactionInfoFromSalesOrder = (
    salesOrder: SalesOrder | SalesOrder[],
    productData: IDictionary<IAny>
): IProductTransaction => {
    // ToDo: Need to revisit this when we make sure that we can expect only one sales order and not array
    salesOrder = Array.isArray(salesOrder) ? salesOrder[0] : salesOrder;

    return {
        id: salesOrder.Id,
        affiliation: salesOrder.ChannelId ? salesOrder.ChannelId.toString() : '',
        revenue: salesOrder.NetAmountWithoutTax,
        tax: salesOrder.TaxAmount,
        // shippingCost?: // Confirm if it is delivery mode charge amount;
        products: _getProductInfoFromSalesLines(salesOrder, productData)
    };
};

/**
 * _getProductInfoFromSalesLines
 * @param salesObject Sales object
 * @param productData Product dat
 */
const _getProductInfoFromSalesLines = (salesObject: SalesOrder, productData: IDictionary<IAny>): IProductInfo[] => {
    const saleLineProductUnits: IProductInfo[] = [];
    if (salesObject && salesObject.SalesLines && Array.isArray(salesObject.SalesLines) && salesObject.SalesLines.length > 0) {
        salesObject.SalesLines.forEach((saleLineitem: SalesLine) => {
            if (saleLineitem.ProductId) {
                // The product id in salesLine actually contains recordId and not master product id so we can use it up here to lookup product.
                const productInfo = <IProductInfo>productData[saleLineitem.ProductId];
                if (productInfo) {
                    saleLineProductUnits.push({
                        productChannelId: '',
                        productChannelName: '',
                        productCategoryId: '',
                        productCategoryName: '',
                        productId: productInfo.productId, // This is already precooked to contain master product id
                        productName: productInfo.productName,
                        productSku: productInfo.productSku, // This is a;ready precooked to contain record id
                        productPrice: saleLineitem.Price ? saleLineitem.Price.toString() : '',
                        productQuantity: saleLineitem.Quantity ? saleLineitem.Quantity.toString() : '',
                        productCurrency: ''
                    });
                }
            }
        });
    }

    return saleLineProductUnits;
};

/**
 * getProductInfoFromSimpleProduct
 * @param simpleProduct Simple product
 * @param requestContext Request context
 */
export const getProductInfoFromSimpleProduct = (simpleProduct: SimpleProduct, requestContext: IRequestContext): IProductInfo => {
    const recordId = simpleProduct.RecordId || '';

    return {
        // If master product id is not available then product record id is master product id
        productId: simpleProduct.MasterProductId ? simpleProduct.MasterProductId.toString() : recordId.toString(),
        productSku: recordId ? recordId.toString() : '',
        productName: simpleProduct.Name || simpleProduct.Description || '',
        productPrice: simpleProduct.Price ? simpleProduct.Price.toString() : '',
        productChannelId: '',
        productChannelName: '',
        productCategoryId: '',
        productCategoryName: '',
        productQuantity: '',
        productCurrency: ''
    };
};
