/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { IRequestContext } from '@msdyn365-commerce/core';
import * as React from 'react';

/**
 * Heading options
 */
export interface IHeadingData {
    /**
     *  Heading text
     */
    headingText?: string;
    /**
     * Heading tag (h1, h2, h3, h4, h5, h6)
     */
    tag?: HeadingTag;
    /**
     * Heading text size (sm, md, lg, xl)
     */
    textSize?: TextSize;
}

export type HeadingTag = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
export type TextSize = 'sm' | 'md' | 'lg' | 'xl';

/**
 * Container class options
 */
export interface IContainerProps {
    /**
     * CSS class name
     */
    className?: string;
    /**
     * Bootstrap supported container types
     */
    containerType?: string;
    /**
     * type name
     */
    typeName?: string;
    /**
     * id of container
     */
    id?: string;
    /**
     * React children
     */
    children: React.ReactNode;
    /**
     * Request context
     */
    request?: IRequestContext;
}

const getContainerType = (containerType: string | undefined) => {
    switch (containerType) {
        case 'container':
            return 'container';
        case 'fluid':
        default:
            return 'fluid';
    }
};

/**
 * HOC to create bootstrap container div. If no container type is specified children are rendered.
 * @param options IContainerClasses
 */
export const Container: React.SFC<IContainerProps> = (props: IContainerProps): JSX.Element => {
    const { containerType, className, typeName, id, children } = props;
    const customClassName = className ? ` ${className}` : '';

    return containerType ? (
        <div className={`${typeName} ${id} ${getContainerType(containerType)}${customClassName}`}>
            <div className='row'>{children}</div>
        </div>
    ) : (
        <div className={`${typeName} ${id}${customClassName}`}>{children}</div>
    );
};

export const HeadingComponent = (props: IHeadingData & { className: string }): JSX.Element | null => {
    const { tag, headingText, textSize, className } = props;
    const Tag = tag || 'h2';
    const classNameWtihHeading = textSize ? `heading ${textSize} ${className}` : `heading ${className}`;
    return (headingText && <Tag className={classNameWtihHeading}>{headingText}</Tag>) || null;
};
