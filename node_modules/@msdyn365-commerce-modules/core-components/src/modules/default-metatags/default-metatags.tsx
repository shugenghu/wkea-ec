/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

import { isNonceEnabled, SDK_FRAGMENT_NAME } from '@msdyn365-commerce/core-internal';
import { IDefaultMetatagsData } from './default-metatags.data';
import { IDefaultMetatagsProps } from './default-metatags.props.autogenerated';

/**
 *
 * DefaultPageSummaryMetadata component
 * @extends {React.PureComponent<DefaultPageSummaryProps<{}>>}
 */
class DefaultMetaTags extends React.PureComponent<IDefaultMetatagsProps<IDefaultMetatagsData>> {
    public render(): JSX.Element {
        const { data, config } = this.props;
        const nonceToken = this.props.context && isNonceEnabled(this.props.context.request);
        let metaTagsHtml: string = '';
        let metaTags;
        if (config.metaTags) {
            metaTags = nonceToken ? this._addNonceToInlineScript(config.metaTags, nonceToken) : config.metaTags;
            metaTagsHtml = metaTags && metaTags.join('\n');
        } else if (data.metaTags) {
            metaTags = data.metaTags;
            let metaTagsText = metaTags.map(simpleText => simpleText.text);
            metaTagsText = nonceToken ? this._addNonceToInlineScript(metaTagsText, nonceToken) : metaTagsText;
            metaTagsHtml = metaTagsText && metaTagsText.join('\n');
        }
        // tslint:disable-next-line:react-no-dangerous-html
        return React.createElement(SDK_FRAGMENT_NAME, { key: this.props.id, dangerouslySetInnerHTML: { __html: metaTagsHtml } });
    }

    private _addNonceToInlineScript(metaTags: string[], nonceToken: string): string[] {
        const inlineScripRegex = /<script((?:(?!src=).)*?)>(.*?)<\/script>/g;
        return metaTags
            .map(metaTag => {
                if (inlineScripRegex.test(metaTag)) {
                    return metaTag.replace(/<script/g, `<script nonce=${nonceToken}`);
                }
                return metaTag;
            })
            .filter(Boolean);
    }
}

export default DefaultMetaTags;
