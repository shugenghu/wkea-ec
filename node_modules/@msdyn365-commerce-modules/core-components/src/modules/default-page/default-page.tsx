/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { LogLevel } from '@msdyn365-commerce/telemetry-internal';
import * as React from 'react';
import { IDefaultPageProps } from './default-page.props.autogenerated';

/**
 *
 * CoreComponent component
 * @extends {React.PureComponent<IDefaultPageProps>}
 */
class DefaultPageContainer extends React.PureComponent<IDefaultPageProps<{}>> {
    constructor(props: IDefaultPageProps<{}>) {
        super(props);
    }

    public render(): JSX.Element {
        const { slots, telemetry, id, typeName } = this.props;

        let skipToMainText = this.props.config && this.props.config.skipToMainText;
        telemetry.log(LogLevel.Debug, "DefaultPageContainer rendering for '{id}/{typeName}'", { values: [id, typeName] });

        if (!skipToMainText) {
            skipToMainText =
                this.props.context.app && this.props.context.app.platform ? this.props.context.app.platform.skipToMainText : '';
        }

        return (
            <React.Fragment>
                <a className='skip-to-main' href='#main' tabIndex={0}>
                    {skipToMainText}
                </a>
                <header>
                    {slots &&
                        slots.header &&
                        slots.header.map((children: React.ReactNode) => {
                            return children;
                        })}
                </header>
                {slots && slots.subheader && (
                    <div id='subheader'>
                        {slots.subheader.map((children: React.ReactNode) => {
                            return children;
                        })}
                    </div>
                )}
                <main id='main'>
                    {slots &&
                        slots.primary &&
                        slots.primary.map((children: React.ReactNode) => {
                            return children;
                        })}
                </main>
                {slots && slots.subfooter && (
                    <div id='subfooter'>
                        {slots.subfooter.map((children: React.ReactNode) => {
                            return children;
                        })}
                    </div>
                )}
                <footer>
                    {slots &&
                        slots.footer &&
                        slots.footer.map((children: React.ReactNode) => {
                            return children;
                        })}
                </footer>
            </React.Fragment>
        );
    }
}

export default DefaultPageContainer;
