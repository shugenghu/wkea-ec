/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { isNonceEnabled, SDK_FRAGMENT_NAME } from '@msdyn365-commerce/core-internal';
import * as React from 'react';
import { isAbsoluteUrl, isRelativeUrl, logDebug, logError } from '../../utils/script-utils';
import { IDefaultInlineScriptProps } from './default-inline-script.props.autogenerated';

/**
 *
 * DefaultScript
 * @extends {React.PureComponent<IDefaultScriptProps<{}>>}
 */
class DefaultInlineScript extends React.PureComponent<IDefaultInlineScriptProps<{}>> {
    constructor(props: IDefaultInlineScriptProps<{}>) {
        super(props);
    }

    public render(): JSX.Element | null {
        const { config } = this.props;
        logDebug(`Adding script tags for '${this.props.id}/${this.props.typeName}'`, this.props.telemetry);
        const source = config.inlineScript;

        if (!source || source === '' || isAbsoluteUrl(source) || isRelativeUrl(source)) {
            logError(
                'Invalid inline script - Empty inline source defined or a url is being used as a source. Use default-external-script to load scripts from an external or relative url.',
                this.props.telemetry
            );
            return null;
        }

        if (source.includes('</script>')) {
            logError('Invalid inline script - inline script should not contain html tags', this.props.telemetry);
            return null;
        }

        const nonceToken = this.props.context && isNonceEnabled(this.props.context.request);
        const scriptHtml = `<script ${nonceToken ? `nonce='${nonceToken}'` : ''}>${source}</script>`;

        // tslint:disable:react-no-dangerous-html -- intentionally set inner html
        return React.createElement(SDK_FRAGMENT_NAME, { key: this.props.id, dangerouslySetInnerHTML: { __html: scriptHtml } });
    }
}

export default DefaultInlineScript;
