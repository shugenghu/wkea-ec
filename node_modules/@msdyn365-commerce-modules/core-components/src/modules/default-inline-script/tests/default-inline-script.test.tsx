/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import 'jest';
import React from 'react';
import ReactDOM from 'react-dom';
import DefaultInlineScript from '../default-inline-script';
import { IDefaultInlineScriptProps } from '../default-inline-script.props.autogenerated';

describe('Default Inline Script Tests', () => {
    const container = document.createElement('div');

    // tslint:disable-next-line:no-any
    it('returns null if the inlineScript is just a url', (done: any) => {
        const scriptProps: Readonly<IDefaultInlineScriptProps<{}>> = {
            config: {
                inlineScript: 'https://www.contoso.com/products?productId=12345',
                // @ts-ignore
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };

        ReactDOM.render(<DefaultInlineScript {...scriptProps} />, container);

        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });

    // tslint:disable-next-line:no-any
    it('returns null if the inlineScript is a relative url', (done: any) => {
        const scriptProps: Readonly<IDefaultInlineScriptProps<{}>> = {
            config: {
                inlineScript: 'headStart.js',
                // @ts-ignore
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };

        ReactDOM.render(<DefaultInlineScript {...scriptProps} />, container);

        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });

    // tslint:disable-next-line:no-any
    it('returns null if the inlineScript is empty string', (done: any) => {
        const scriptProps: Readonly<IDefaultInlineScriptProps<{}>> = {
            config: {
                inlineScript: '',
                // @ts-ignore
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };

        ReactDOM.render(<DefaultInlineScript {...scriptProps} />, container);

        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });

    // tslint:disable-next-line:no-any
    it('returns script tag containing url (but not just a url)', (done: any) => {
        const scriptProps: Readonly<IDefaultInlineScriptProps<{}>> = {
            config: {
                inlineScript: "console.log('https://www.contoso.com/products?productId=12345');",
                // @ts-ignore
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };

        ReactDOM.render(<DefaultInlineScript {...scriptProps} />, container);

        expect(container.getElementsByTagName('script')[0].innerHTML).toEqual(
            "console.log('https://www.contoso.com/products?productId=12345');"
        );
        done();
    });

    // tslint:disable-next-line:no-any
    it('validates if placeholders are replaced for script injector with inline script configuration', (done: any) => {
        const scriptProps: Readonly<IDefaultInlineScriptProps<{}>> = {
            config: {
                inlineScript: 'console.log("script injector loaded with productId: 12345");',
                // @ts-ignore
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };

        ReactDOM.render(<DefaultInlineScript {...scriptProps} />, container);

        expect(container.getElementsByTagName('script')[0].innerHTML).toEqual(
            'console.log("script injector loaded with productId: 12345");'
        );
        done();
    });

    // tslint:disable-next-line:no-any
    it('returns null if encountering closing script tag', (done: any) => {
        const scriptProps: Readonly<IDefaultInlineScriptProps<{}>> = {
            config: {
                inlineScript: 'console.log("script injector loaded with productId: 12345");</script><div>I am a bad div</div><script>',
                // @ts-ignore
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };

        ReactDOM.render(<DefaultInlineScript {...scriptProps} />, container);

        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });
});
