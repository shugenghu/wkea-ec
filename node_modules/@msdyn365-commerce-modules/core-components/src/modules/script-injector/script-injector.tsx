/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as MsDyn365 from '@msdyn365-commerce/core-internal';
import { LogLevel } from '@msdyn365-commerce/telemetry-internal';
import * as React from 'react';
import { IScriptInjectorProps } from './script-injector.props.autogenerated';

/**
 *
 * CoreComponent component
 * @extends {React.PureComponent<IScriptInjectorProps>}
 */
class ScriptInjector extends React.PureComponent<IScriptInjectorProps<{}>> {
    constructor(props: IScriptInjectorProps<{}>) {
        super(props);
    }

    public render(): JSX.Element | null {
        const { config } = this.props;
        this._debug(`Adding html head tags for '${this.props.id}/${this.props.typeName}'`);

        const placeHolderPropsRegEx = RegExp('%[a-zA-Z0-9-.]*%', 'g');
        let placeHolders: RegExpExecArray | null;
        const originalSource = config && config.scriptSource;
        let resolvedSource;

        if (originalSource) {
            let hasMorePlaceHolders = true;
            resolvedSource = originalSource;

            while (hasMorePlaceHolders) {
                placeHolders = placeHolderPropsRegEx.exec(originalSource);

                if (placeHolders && placeHolders.length > 0) {
                    this._debug(`extracted placeholder ${placeHolders[0]}`);
                    resolvedSource = this._resolvePlaceHolder(resolvedSource, placeHolders[0]);
                } else {
                    hasMorePlaceHolders = false;
                }
            }
        }

        if (!resolvedSource) {
            return null;
        }

        return (
            <MsDyn365.HtmlHeadInclude>
                {this._isUrl(resolvedSource) ? (
                    <script
                        src={resolvedSource}
                        async={!!config.async}
                        defer={!!config.defer}
                        data-load-point={config.loadPoint || 'bodyEnd'}
                    />
                ) : (
                    // tslint:disable-next-line: react-no-dangerous-html
                    <script
                        async={!!config.async}
                        defer={!!config.defer}
                        data-load-point={config.loadPoint || 'bodyEnd'}
                        dangerouslySetInnerHTML={{ __html: resolvedSource }}
                    />
                )}
            </MsDyn365.HtmlHeadInclude>
        );
    }

    private _debug(debugMessage: string): void {
        if (this.props.telemetry) {
            this.props.telemetry.log(LogLevel.Debug, debugMessage);
        }
    }

    private _isUrl(source: string): boolean {
        return /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/.test(source);
    }

    // tslint:disable-next-line:cyclomatic-complexity
    private _resolvePlaceHolder(resolvedSource: string, placeHolderToken: string): string {
        // expect placeholder to of the format eg: %config.id%
        const placeHolderTokens = placeHolderToken.split(/[%.]/);

        if (placeHolderTokens.length !== 4 || !resolvedSource) {
            return resolvedSource;
        }

        const propertyContext = placeHolderTokens[1];
        const propertyName = placeHolderTokens[2];

        if (propertyContext === 'props') {
            if (this.props[propertyName]) {
                resolvedSource = resolvedSource.replace(placeHolderToken, this.props[propertyName]);
                this._debug(`Replaced placeholder ${placeHolderToken} with props property ${this.props[propertyName]}`);
            }
        } else if (this.props.context && this.props.context.request) {
            switch (propertyContext) {
                case 'request':
                    if (this.props.context.request[propertyName]) {
                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request[propertyName]);
                        // tslint:disable-next-line:max-line-length
                        this._debug(
                            `Replaced placeholder ${placeHolderToken} with request property ${this.props.context.request[propertyName]}`
                        );
                    }

                    break;
                case 'user':
                    if (this.props.context.request.user && this.props.context.request.user[propertyName]) {
                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request.user[propertyName]);
                        this._debug(
                            `Replaced placeholder ${placeHolderToken} with user property ${this.props.context.request.user[propertyName]}`
                        );
                    }

                    break;
                case 'query':
                    if (this.props.context.request.query && this.props.context.request.query[propertyName]) {
                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request.query[propertyName]);
                        // tslint:disable-next-line:max-line-length
                        this._debug(
                            `Replaced placeholder ${placeHolderToken} with query parameter ${this.props.context.request.query[propertyName]}`
                        );
                    }

                    break;
                default:
            }
        }

        return resolvedSource;
    }
}

export default ScriptInjector;
