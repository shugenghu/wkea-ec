/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import msdyn365Commerce from '@msdyn365-commerce/core-internal';
import 'jest';
import React from 'react';
import ReactDOM from 'react-dom';
import ScriptInjector from '../script-injector';
import { IScriptInjectorProps, loadPoint } from '../script-injector.props.autogenerated';

describe('Script injector - Declarative API', () => {
    const container = document.createElement('div');

    const mockIsBrowser = jest.spyOn(msdyn365Commerce, 'isBrowser', 'get');

    beforeEach(() => {
        // set isBrower to false to render HtmlHeadInclude component on server side
        mockIsBrowser.mockReturnValue(false);
    });

    // tslint:disable-next-line:no-any
    it('validates if placeholders are replaced for script injector', (done: any) => {
        const scriptProps: Readonly<IScriptInjectorProps<{}>> = {
            config: {
                scriptSource: 'https://www.contoso.com/products?productId=%props.id%',
                async: true,
                defer: true,
                loadPoint: loadPoint.headStart,
                // @ts-ignore
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: ''
        };

        ReactDOM.render(<ScriptInjector {...scriptProps} />, container);

        expect(document.getElementsByTagName('script')[0].src).toEqual('https://www.contoso.com/products?productId=12345');
        const headScript: HTMLElement[] = Array.prototype.slice.call(document.querySelectorAll('head script'));
        expect(headScript.length).toBe(1);
        expect(headScript[0].getAttribute('src')).toEqual('https://www.contoso.com/products?productId=12345');
        done();
    });

    // tslint:disable-next-line:no-any
    it('validates if placeholders are replaced for script injector with inline script configuration', (done: any) => {
        const scriptProps: Readonly<IScriptInjectorProps<{}>> = {
            config: {
                scriptSource: 'console.log("script injector loaded with productId: %props.id%");',
                async: true,
                defer: true,
                loadPoint: loadPoint.headStart,
                // @ts-ignore
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: ''
        };

        ReactDOM.render(<ScriptInjector {...scriptProps} />, container);

        expect(document.getElementsByTagName('script')[0].text).toEqual('console.log("script injector loaded with productId: 12345");');
        done();
    });
});
