/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { LogLevel } from '@msdyn365-commerce/telemetry-internal';
import * as React from 'react';
import { Container, HeadingComponent } from '../../components/base-components';
import { colWidths } from '../../utils/classnames';
import { IDefaultContainerData } from './default-container.data';
import { childrenWidth as childrenWidthEnum, IDefaultContainerProps, layout as layoutEnum } from './default-container.props.autogenerated';

/**
 *
 * CoreComponent component
 * @extends {React.PureComponent<IDefaultContainerProps<IDefaultContainerData>>}
 */
class DefaultContainer extends React.PureComponent<IDefaultContainerProps<IDefaultContainerData>> {
    constructor(props: IDefaultContainerProps<IDefaultContainerData>) {
        super(props);
    }

    public render(): JSX.Element {
        const { slots, telemetry, config, data } = this.props;
        telemetry.log(LogLevel.Debug, 'Default Container rendering for \'{id}/{typeName}\'', {
            values: [this.props.id, this.props.typeName]
        });
        const heading = config.heading || data.heading;
        return (
            <Container
                containerType={config.containerType}
                className={config.className}
                typeName={this.props.typeName}
                id={this.props.id}
                request={this.props.context.request}
            >
                {heading && <HeadingComponent className='container-heading' {...heading} />}
                {slots &&
                    slots.content &&
                    slots.content.map((children: React.ReactNode, index: number) => {
                        return (
                            <div className={this._getChildColClassName()} key={index}>
                                {children}
                            </div>
                        );
                    })}
            </Container>
        );
    }

    private _getChildColClassName(): string {
        const {
            config: { layout, childrenWidth }
        } = this.props;
        switch (layout) {
            case layoutEnum.flow:
                return childrenWidth === childrenWidthEnum.auto ? 'col-12 col-md' : this._getWidthClass(childrenWidth);
            case layoutEnum.stacked:
            default:
                return 'col-12';
        }
    }

    private _getWidthClass(s?: childrenWidthEnum): string {
        return colWidths.get(s || childrenWidthEnum.four) || 'col-12';
    }
}

export default DefaultContainer;
