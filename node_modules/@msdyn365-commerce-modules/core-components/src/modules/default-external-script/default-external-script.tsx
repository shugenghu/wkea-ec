/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { SDK_FRAGMENT_NAME } from '@msdyn365-commerce/core-internal';
import * as path from 'path';
import * as React from 'react';
import { isAbsoluteUrl, isRelativeUrl, logDebug, logError } from '../../utils/script-utils';
import { IDefaultExternalScriptProps } from './default-external-script.props.autogenerated';

/**
 *
 * DefaultExternalScript component
 * @extends {React.PureComponent<IDefaultExternalScriptProps<{}>>}
 */
class DefaultExternalScript extends React.PureComponent<IDefaultExternalScriptProps<{}>> {
    constructor(props: IDefaultExternalScriptProps<{}>) {
        super(props);
    }

    public render(): JSX.Element | null {
        const { config } = this.props;
        logDebug(`Adding script tags for '${this.props.id}/${this.props.typeName}'`, this.props.telemetry);
        let source = config.scriptSource;

        let relativeBaseUrl: string = '';
        // Construct the relative base url, i.e. the base url from which statics will be served
        if (this.props.context) {
            relativeBaseUrl += this.props.context.request.url.staticCdnUrl;
            relativeBaseUrl += process.env.SUBMISSIONID || '';
        }

        if (isRelativeUrl(source)) {
            // If the source is a relative URL prepend the relative base url to the resolved source url for the actual source
            source = `${relativeBaseUrl}/${path.join(source)}`;
        } else if (source === '' || !isAbsoluteUrl(source)) {
            logError(
                'Invalid external script - not a url. The external source is not an external or relative url, please use default-inline-script if you wish to load inline scripts',
                this.props.telemetry
            );
            return null;
        }
        const scriptHtml = `<script src="${source}" async=${!!config.async} defer=${!!config.defer} ></script>`;

        // tslint:disable:react-no-dangerous-html -- intentionally set inner html
        return React.createElement(SDK_FRAGMENT_NAME, { key: this.props.id, dangerouslySetInnerHTML: { __html: scriptHtml } });
    }
}

export default DefaultExternalScript;
