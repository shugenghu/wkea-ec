/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { LogLevel } from '@msdyn365-commerce/telemetry-internal';
import React, { ReactNode } from 'react';
import { Container, HeadingComponent } from '../../components/base-components';
import { getColClassArray, showErrors } from '../../utils/classnames';
import { IDefaultContainer2SlotsData } from './default-container-2-slots.data';
import { IDefaultContainer2SlotsProps } from './default-container-2-slots.props.autogenerated';

interface IColSizes {
    left: string[];
    right: string[];
}

/**
 * Default container that displays 2 modules
 * CoreComponent component
 * @extends {React.PureComponent<IDefaultContainer2SlotsConfig<IDefaultContainer2SlotsData>>}
 */
class Default2SlotContainer extends React.PureComponent<IDefaultContainer2SlotsProps<IDefaultContainer2SlotsData>> {
    constructor(props: IDefaultContainer2SlotsProps<IDefaultContainer2SlotsData>) {
        super(props);
    }

    public render(): JSX.Element {
        const { slots, telemetry, context, config, data } = this.props;
        telemetry.log(LogLevel.Debug, 'Default 2 Slot Container rendering for \'{id}/{typeName}\'', {
            values: [this.props.id, this.props.typeName]
        });

        const content = slots && slots.content;
        const slotsClassNames = this._getColClassName();
        if (content && content.length > 2) {
            telemetry.log(LogLevel.Warning, 'Default 2 Slot Container passed more than 2 slots');
        }
        const heading = config.heading || data.heading;
        return (
            <Container
                containerType={config.containerType}
                className={config.className}
                typeName={this.props.typeName}
                id={this.props.id}
                request={this.props.context.request}
            >
                {heading && <HeadingComponent className='container-heading' {...heading} />}
                {content && content[0] && <div className={slotsClassNames.left.join(' ')}>{content[0]}</div>}
                {content && content[1] && <div className={slotsClassNames.right.join(' ')}>{content[1]}</div>}
                <>
                    {showErrors(context) &&
                        content &&
                        content.slice(2, content.length - 1).map((slot: ReactNode, index: number) => {
                            return (
                                <div className='col-12' key={index}>
                                    <div className='card'>
                                        <div className='card-header text-white bg-danger'>
                                            Slot exceeded maximum number of slots supported by container. (2)
                                        </div>
                                    </div>
                                </div>
                            );
                        })}
                </>
            </Container>
        );
    }

    /**
     * Captures left and right column classnames from this.props.config. Returns col if no options specified.
     */
    public _getColClassName = (): IColSizes => {
        const { config } = this.props;

        const classNames = getColClassArray(config);

        if (!classNames.length) {
            return {
                left: ['col'],
                right: ['col']
            };
        }

        return classNames.reduce(
            (memo: IColSizes, [left, right]: string[]) => {
                memo.left.push(left);
                memo.right.push(right);
                return memo;
            },
            { left: [], right: [] }
        );
    };
}

export default Default2SlotContainer;
