/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { ICoreContext } from '@msdyn365-commerce/core';
import * as twoSlots from '../modules/default-container-2-slots/default-container-2-slots.props.autogenerated';
import * as threeSlots from '../modules/default-container-3-slots/default-container-3-slots.props.autogenerated';

const sizePattern = /col(_(\d|auto){1,2}){2,}/;

export interface IShowErrorOptions {
    isDebug?: boolean;
    isEditor?: boolean;
}

export interface IViewPortOptions {
    xsmall?: threeSlots.xsmall | twoSlots.xsmall;
    small?: threeSlots.small | twoSlots.small;
    medium?: threeSlots.medium | twoSlots.medium;
    large?: threeSlots.large | twoSlots.large;
}

const translatePrefix = (prefix: `large` | `medium` | `small` | `xsmall` | undefined) => {
    switch (prefix && prefix.toLowerCase()) {
        case 'large':
            return 'lg';
        case 'medium':
            return 'md';
        case 'small':
            return 'sm';
        case 'xsmall':
        default:
            return '';
    }
};

/**
 * converts config option and size to bootstrap col class name
 * If size is auto or config option is invalid col-auto will be returned
 * If size is xsmall or size is invalid col-{config} will be returned
 * @param config configuration option e.g. col_12_12
 * @param size bootstrap gridsize
 */
export const getColumnSizes = (config: string, size?: `large` | `medium` | `small` | `xsmall`): string[] | boolean => {
    if (!sizePattern.exec(config)) {
        return false;
    }
    const cols = config.split('_').slice(1);
    const translatedSize = translatePrefix(size);
    const sizePrefix = (translatedSize && `-${translatedSize}`) || '';
    return cols.map((colWidth: string) => `col${sizePrefix}-${colWidth}`);
};

export const showErrors = (context?: ICoreContext): Boolean => {
    const { isDebug, isEditor }: IShowErrorOptions = (context && context.request && context.request.params) || {};
    return !!isDebug || !!isEditor;
};

/**
 * Converts viewport configuration into a two dimensional array of class names
 */
export const getColClassArray = (options: IViewPortOptions): string[][] =>
    <string[][]>(
        [
            options.xsmall && getColumnSizes(options.xsmall),
            options.small && getColumnSizes(options.small, 'small'),
            options.medium && getColumnSizes(options.medium, 'medium'),
            options.large && getColumnSizes(options.large, 'large')
        ].filter(Boolean)
    );

export const colWidths = new Map<string, string>([
    ['one', 'col-md-1'],
    ['two', 'col-md-2'],
    ['three', 'col-md-3'],
    ['four', 'col-md-4'],
    ['six', 'col-md-6'],
    ['twelve', 'col-md-12']
]);
