{"version":3,"file":"classnames.js","sourceRoot":"./src/","sources":["utils/classnames.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAMH,MAAM,WAAW,GAAG,0BAA0B,CAAC;AAc/C,MAAM,eAAe,GAAG,CAAC,MAA2D,EAAE,EAAE;IACpF,QAAQ,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE;QACpC,KAAK,OAAO;YACR,OAAO,IAAI,CAAC;QAChB,KAAK,QAAQ;YACT,OAAO,IAAI,CAAC;QAChB,KAAK,OAAO;YACR,OAAO,IAAI,CAAC;QAChB,KAAK,QAAQ,CAAC;QACd;YACI,OAAO,EAAE,CAAC;KACjB;AACL,CAAC,CAAC;AASF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,MAAc,EAAE,IAA8C,EAAsB,EAAE;IACjH,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QAC3B,OAAO,KAAK,CAAC;KAChB;IACD,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACxC,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG,CAAC,cAAc,IAAI,IAAI,cAAc,EAAE,CAAC,IAAI,EAAE,CAAC;IAClE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,QAAgB,EAAE,EAAE,CAAC,MAAM,UAAU,IAAI,QAAQ,EAAE,CAAC,CAAC;AAC1E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,OAAsB,EAAW,EAAE;IAC1D,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAsB,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAC9G,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC;AACnC,CAAC,CAAC;AAKF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,OAAyB,EAAc,EAAE,CAC1D,CACR;IACI,OAAO,CAAC,MAAM,IAAI,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC;IAChD,OAAO,CAAC,KAAK,IAAI,cAAc,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC;IACvD,OAAO,CAAC,MAAM,IAAI,cAAc,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC1D,OAAO,CAAC,KAAK,IAAI,cAAc,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC;CAC1D,CAAC,MAAM,CAAC,OAAO,CAAC,CACpB,CAAC;AAEN,MAAM,CAAC,MAAM,SAAS,GAAG,IAAI,GAAG,CAAiB;IAC7C,CAAC,KAAK,EAAE,UAAU,CAAC;IACnB,CAAC,KAAK,EAAE,UAAU,CAAC;IACnB,CAAC,OAAO,EAAE,UAAU,CAAC;IACrB,CAAC,MAAM,EAAE,UAAU,CAAC;IACpB,CAAC,KAAK,EAAE,UAAU,CAAC;IACnB,CAAC,QAAQ,EAAE,WAAW,CAAC;CAC1B,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ICoreContext } from '@msdyn365-commerce/core';\nimport * as twoSlots from '../modules/default-container-2-slots/default-container-2-slots.props.autogenerated';\nimport * as threeSlots from '../modules/default-container-3-slots/default-container-3-slots.props.autogenerated';\n\nconst sizePattern = /col(_(\\d|auto){1,2}){2,}/;\n\nexport interface IShowErrorOptions {\n    isDebug?: boolean;\n    isEditor?: boolean;\n}\n\nexport interface IViewPortOptions {\n    xsmall?: threeSlots.xsmall | twoSlots.xsmall;\n    small?: threeSlots.small | twoSlots.small;\n    medium?: threeSlots.medium | twoSlots.medium;\n    large?: threeSlots.large | twoSlots.large;\n}\n\nconst translatePrefix = (prefix: `large` | `medium` | `small` | `xsmall` | undefined) => {\n    switch (prefix && prefix.toLowerCase()) {\n        case 'large':\n            return 'lg';\n        case 'medium':\n            return 'md';\n        case 'small':\n            return 'sm';\n        case 'xsmall':\n        default:\n            return '';\n    }\n};\n\n/**\n * converts config option and size to bootstrap col class name\n * If size is auto or config option is invalid col-auto will be returned\n * If size is xsmall or size is invalid col-{config} will be returned\n * @param config configuration option e.g. col_12_12\n * @param size bootstrap gridsize\n */\nexport const getColumnSizes = (config: string, size?: `large` | `medium` | `small` | `xsmall`): string[] | boolean => {\n    if (!sizePattern.exec(config)) {\n        return false;\n    }\n    const cols = config.split('_').slice(1);\n    const translatedSize = translatePrefix(size);\n    const sizePrefix = (translatedSize && `-${translatedSize}`) || '';\n    return cols.map((colWidth: string) => `col${sizePrefix}-${colWidth}`);\n};\n\nexport const showErrors = (context?: ICoreContext): Boolean => {\n    const { isDebug, isEditor }: IShowErrorOptions = (context && context.request && context.request.params) || {};\n    return !!isDebug || !!isEditor;\n};\n\n/**\n * Converts viewport configuration into a two dimensional array of class names\n */\nexport const getColClassArray = (options: IViewPortOptions): string[][] =>\n    <string[][]>(\n        [\n            options.xsmall && getColumnSizes(options.xsmall),\n            options.small && getColumnSizes(options.small, 'small'),\n            options.medium && getColumnSizes(options.medium, 'medium'),\n            options.large && getColumnSizes(options.large, 'large')\n        ].filter(Boolean)\n    );\n\nexport const colWidths = new Map<string, string>([\n    ['one', 'col-md-1'],\n    ['two', 'col-md-2'],\n    ['three', 'col-md-3'],\n    ['four', 'col-md-4'],\n    ['six', 'col-md-6'],\n    ['twelve', 'col-md-12']\n]);\n"]}