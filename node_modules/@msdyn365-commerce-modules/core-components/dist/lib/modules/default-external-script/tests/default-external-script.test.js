/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import 'jest';
import React from 'react';
import ReactDOM from 'react-dom';
import DefaultExternalScript from '../default-external-script';
describe('Script injector - Declarative API', () => {
    const container = document.createElement('div');
    it('returns null, if the scriptSource is not a valid url', (done) => {
        const scriptProps = {
            config: {
                scriptSource: 'console.log(\'Test\');',
                async: true,
                defer: true,
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: ''
        };
        ReactDOM.render(React.createElement(DefaultExternalScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });
    it('returns null, if the relative script source does not link to a js file', (done) => {
        const scriptProps = {
            config: {
                scriptSource: 'headStart/notajsfile.html',
                async: true,
                defer: true,
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: ''
        };
        ReactDOM.render(React.createElement(DefaultExternalScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });
    it('validates that a relative script url is properly constructed with statics link', (done) => {
        const scriptProps = {
            config: {
                scriptSource: './js-statics/headStart.js',
                async: true,
                defer: true,
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            context: {
                request: {
                    url: {
                        staticCdnUrl: 'https://alpha.contoso.com/_scnr'
                    }
                }
            }
        };
        ReactDOM.render(React.createElement(DefaultExternalScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script')[0].src).toEqual('https://alpha.contoso.com/_scnr/js-statics/headStart.js');
        done();
    });
    it('validates that an external script is correctly placed', (done) => {
        const scriptProps = {
            config: {
                scriptSource: 'https://www.contoso.com/example.js',
                async: true,
                defer: true,
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: ''
        };
        ReactDOM.render(React.createElement(DefaultExternalScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script')[0].src).toEqual('https://www.contoso.com/example.js');
        done();
    });
});
//# sourceMappingURL=default-external-script.test.js.map