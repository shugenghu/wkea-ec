{"version":3,"file":"script-parser.test.js","sourceRoot":"./src/","sources":["modules/script-injector/__tests__/script-parser.test.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,gBAAgB,MAAM,kCAAkC,CAAC;AAChE,OAAO,MAAM,CAAC;AACd,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,QAAQ,MAAM,WAAW,CAAC;AACjC,OAAO,cAAc,MAAM,oBAAoB,CAAC;AAGhD,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IAC/C,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAEhD,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IAEvE,UAAU,CAAC,GAAG,EAAE;QAEZ,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAGH,EAAE,CAAC,4DAA4D,EAAE,CAAC,IAAS,EAAE,EAAE;QAC3E,MAAM,WAAW,GAAuC;YACpD,MAAM,EAAE;gBACJ,YAAY,EAAE,uDAAuD;gBACrE,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,IAAI;gBACX,SAAS,aAAqB;gBAE9B,EAAE,EAAE,OAAO;aACd;YACD,IAAI,EAAE,EAAE;YACR,WAAW,EAAE,EAAE;YACf,EAAE,EAAE,OAAO;YACX,QAAQ,EAAE,EAAE;SACf,CAAC;QAEF,QAAQ,CAAC,MAAM,CAAC,oBAAC,cAAc,oBAAK,WAAW,EAAI,EAAE,SAAS,CAAC,CAAC;QAEhE,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,kDAAkD,CAAC,CAAC;QACnH,MAAM,UAAU,GAAkB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC;QACvG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,kDAAkD,CAAC,CAAC;QACtG,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IAGH,EAAE,CAAC,6FAA6F,EAAE,CAAC,IAAS,EAAE,EAAE;QAC5G,MAAM,WAAW,GAAuC;YACpD,MAAM,EAAE;gBACJ,YAAY,EAAE,mEAAmE;gBACjF,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,IAAI;gBACX,SAAS,aAAqB;gBAE9B,EAAE,EAAE,OAAO;aACd;YACD,IAAI,EAAE,EAAE;YACR,WAAW,EAAE,EAAE;YACf,EAAE,EAAE,OAAO;YACX,QAAQ,EAAE,EAAE;SACf,CAAC;QAEF,QAAQ,CAAC,MAAM,CAAC,oBAAC,cAAc,oBAAK,WAAW,EAAI,EAAE,SAAS,CAAC,CAAC;QAEhE,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,8DAA8D,CAAC,CAAC;QAChI,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport msdyn365Commerce from '@msdyn365-commerce/core-internal';\nimport 'jest';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ScriptInjector from '../script-injector';\nimport { IScriptInjectorProps, loadPoint } from '../script-injector.props.autogenerated';\n\ndescribe('Script injector - Declarative API', () => {\n    const container = document.createElement('div');\n\n    const mockIsBrowser = jest.spyOn(msdyn365Commerce, 'isBrowser', 'get');\n\n    beforeEach(() => {\n        // set isBrower to false to render HtmlHeadInclude component on server side\n        mockIsBrowser.mockReturnValue(false);\n    });\n\n    // tslint:disable-next-line:no-any\n    it('validates if placeholders are replaced for script injector', (done: any) => {\n        const scriptProps: Readonly<IScriptInjectorProps<{}>> = {\n            config: {\n                scriptSource: 'https://www.contoso.com/products?productId=%props.id%',\n                async: true,\n                defer: true,\n                loadPoint: loadPoint.headStart,\n                // @ts-ignore\n                id: '12345'\n            },\n            data: '',\n            dataActions: [],\n            id: '12345',\n            typeName: ''\n        };\n\n        ReactDOM.render(<ScriptInjector {...scriptProps} />, container);\n\n        expect(document.getElementsByTagName('script')[0].src).toEqual('https://www.contoso.com/products?productId=12345');\n        const headScript: HTMLElement[] = Array.prototype.slice.call(document.querySelectorAll('head script'));\n        expect(headScript.length).toBe(1);\n        expect(headScript[0].getAttribute('src')).toEqual('https://www.contoso.com/products?productId=12345');\n        done();\n    });\n\n    // tslint:disable-next-line:no-any\n    it('validates if placeholders are replaced for script injector with inline script configuration', (done: any) => {\n        const scriptProps: Readonly<IScriptInjectorProps<{}>> = {\n            config: {\n                scriptSource: 'console.log(\"script injector loaded with productId: %props.id%\");',\n                async: true,\n                defer: true,\n                loadPoint: loadPoint.headStart,\n                // @ts-ignore\n                id: '12345'\n            },\n            data: '',\n            dataActions: [],\n            id: '12345',\n            typeName: ''\n        };\n\n        ReactDOM.render(<ScriptInjector {...scriptProps} />, container);\n\n        expect(document.getElementsByTagName('script')[0].text).toEqual('console.log(\"script injector loaded with productId: 12345\");');\n        done();\n    });\n});\n"]}