{"version":3,"file":"script-injector.js","sourceRoot":"./src/","sources":["modules/script-injector/script-injector.tsx"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport * as MsDyn365 from '@msdyn365-commerce/core-internal';\nimport { LogLevel } from '@msdyn365-commerce/telemetry-internal';\nimport * as React from 'react';\nimport { IScriptInjectorProps } from './script-injector.props.autogenerated';\n\n/**\n *\n * CoreComponent component\n * @extends {React.PureComponent<IScriptInjectorProps>}\n */\nclass ScriptInjector extends React.PureComponent<IScriptInjectorProps<{}>> {\n    constructor(props: IScriptInjectorProps<{}>) {\n        super(props);\n    }\n\n    public render(): JSX.Element | null {\n        const { config } = this.props;\n        this._debug(`Adding html head tags for '${this.props.id}/${this.props.typeName}'`);\n\n        const placeHolderPropsRegEx = RegExp('%[a-zA-Z0-9-.]*%', 'g');\n        let placeHolders: RegExpExecArray | null;\n        const originalSource = config && config.scriptSource;\n        let resolvedSource;\n\n        if (originalSource) {\n            let hasMorePlaceHolders = true;\n            resolvedSource = originalSource;\n\n            while (hasMorePlaceHolders) {\n                placeHolders = placeHolderPropsRegEx.exec(originalSource);\n\n                if (placeHolders && placeHolders.length > 0) {\n                    this._debug(`extracted placeholder ${placeHolders[0]}`);\n                    resolvedSource = this._resolvePlaceHolder(resolvedSource, placeHolders[0]);\n                } else {\n                    hasMorePlaceHolders = false;\n                }\n            }\n        }\n\n        if (!resolvedSource) {\n            return null;\n        }\n\n        return (\n            <MsDyn365.HtmlHeadInclude>\n                {this._isUrl(resolvedSource) ? (\n                    <script\n                        src={resolvedSource}\n                        async={!!config.async}\n                        defer={!!config.defer}\n                        data-load-point={config.loadPoint || 'bodyEnd'}\n                    />\n                ) : (\n                    // tslint:disable-next-line: react-no-dangerous-html\n                    <script\n                        async={!!config.async}\n                        defer={!!config.defer}\n                        data-load-point={config.loadPoint || 'bodyEnd'}\n                        dangerouslySetInnerHTML={{ __html: resolvedSource }}\n                    />\n                )}\n            </MsDyn365.HtmlHeadInclude>\n        );\n    }\n\n    private _debug(debugMessage: string): void {\n        if (this.props.telemetry) {\n            this.props.telemetry.log(LogLevel.Debug, debugMessage);\n        }\n    }\n\n    private _isUrl(source: string): boolean {\n        return /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/.test(source);\n    }\n\n    // tslint:disable-next-line:cyclomatic-complexity\n    private _resolvePlaceHolder(resolvedSource: string, placeHolderToken: string): string {\n        // expect placeholder to of the format eg: %config.id%\n        const placeHolderTokens = placeHolderToken.split(/[%.]/);\n\n        if (placeHolderTokens.length !== 4 || !resolvedSource) {\n            return resolvedSource;\n        }\n\n        const propertyContext = placeHolderTokens[1];\n        const propertyName = placeHolderTokens[2];\n\n        if (propertyContext === 'props') {\n            if (this.props[propertyName]) {\n                resolvedSource = resolvedSource.replace(placeHolderToken, this.props[propertyName]);\n                this._debug(`Replaced placeholder ${placeHolderToken} with props property ${this.props[propertyName]}`);\n            }\n        } else if (this.props.context && this.props.context.request) {\n            switch (propertyContext) {\n                case 'request':\n                    if (this.props.context.request[propertyName]) {\n                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request[propertyName]);\n                        // tslint:disable-next-line:max-line-length\n                        this._debug(\n                            `Replaced placeholder ${placeHolderToken} with request property ${this.props.context.request[propertyName]}`\n                        );\n                    }\n\n                    break;\n                case 'user':\n                    if (this.props.context.request.user && this.props.context.request.user[propertyName]) {\n                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request.user[propertyName]);\n                        this._debug(\n                            `Replaced placeholder ${placeHolderToken} with user property ${this.props.context.request.user[propertyName]}`\n                        );\n                    }\n\n                    break;\n                case 'query':\n                    if (this.props.context.request.query && this.props.context.request.query[propertyName]) {\n                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request.query[propertyName]);\n                        // tslint:disable-next-line:max-line-length\n                        this._debug(\n                            `Replaced placeholder ${placeHolderToken} with query parameter ${this.props.context.request.query[propertyName]}`\n                        );\n                    }\n\n                    break;\n                default:\n            }\n        }\n\n        return resolvedSource;\n    }\n}\n\nexport default ScriptInjector;\n"]}