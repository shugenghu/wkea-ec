/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import * as MsDyn365 from '@msdyn365-commerce/core-internal';
import { LogLevel } from '@msdyn365-commerce/telemetry-internal';
import * as React from 'react';
class ScriptInjector extends React.PureComponent {
    constructor(props) {
        super(props);
    }
    render() {
        const { config } = this.props;
        this._debug(`Adding html head tags for '${this.props.id}/${this.props.typeName}'`);
        const placeHolderPropsRegEx = RegExp('%[a-zA-Z0-9-.]*%', 'g');
        let placeHolders;
        const originalSource = config && config.scriptSource;
        let resolvedSource;
        if (originalSource) {
            let hasMorePlaceHolders = true;
            resolvedSource = originalSource;
            while (hasMorePlaceHolders) {
                placeHolders = placeHolderPropsRegEx.exec(originalSource);
                if (placeHolders && placeHolders.length > 0) {
                    this._debug(`extracted placeholder ${placeHolders[0]}`);
                    resolvedSource = this._resolvePlaceHolder(resolvedSource, placeHolders[0]);
                }
                else {
                    hasMorePlaceHolders = false;
                }
            }
        }
        if (!resolvedSource) {
            return null;
        }
        return (React.createElement(MsDyn365.HtmlHeadInclude, null, this._isUrl(resolvedSource) ? (React.createElement("script", { src: resolvedSource, async: !!config.async, defer: !!config.defer, "data-load-point": config.loadPoint || 'bodyEnd' })) : (React.createElement("script", { async: !!config.async, defer: !!config.defer, "data-load-point": config.loadPoint || 'bodyEnd', dangerouslySetInnerHTML: { __html: resolvedSource } }))));
    }
    _debug(debugMessage) {
        if (this.props.telemetry) {
            this.props.telemetry.log(LogLevel.Debug, debugMessage);
        }
    }
    _isUrl(source) {
        return /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/.test(source);
    }
    _resolvePlaceHolder(resolvedSource, placeHolderToken) {
        const placeHolderTokens = placeHolderToken.split(/[%.]/);
        if (placeHolderTokens.length !== 4 || !resolvedSource) {
            return resolvedSource;
        }
        const propertyContext = placeHolderTokens[1];
        const propertyName = placeHolderTokens[2];
        if (propertyContext === 'props') {
            if (this.props[propertyName]) {
                resolvedSource = resolvedSource.replace(placeHolderToken, this.props[propertyName]);
                this._debug(`Replaced placeholder ${placeHolderToken} with props property ${this.props[propertyName]}`);
            }
        }
        else if (this.props.context && this.props.context.request) {
            switch (propertyContext) {
                case 'request':
                    if (this.props.context.request[propertyName]) {
                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request[propertyName]);
                        this._debug(`Replaced placeholder ${placeHolderToken} with request property ${this.props.context.request[propertyName]}`);
                    }
                    break;
                case 'user':
                    if (this.props.context.request.user && this.props.context.request.user[propertyName]) {
                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request.user[propertyName]);
                        this._debug(`Replaced placeholder ${placeHolderToken} with user property ${this.props.context.request.user[propertyName]}`);
                    }
                    break;
                case 'query':
                    if (this.props.context.request.query && this.props.context.request.query[propertyName]) {
                        resolvedSource = resolvedSource.replace(placeHolderToken, this.props.context.request.query[propertyName]);
                        this._debug(`Replaced placeholder ${placeHolderToken} with query parameter ${this.props.context.request.query[propertyName]}`);
                    }
                    break;
                default:
            }
        }
        return resolvedSource;
    }
}
export default ScriptInjector;
//# sourceMappingURL=script-injector.js.map