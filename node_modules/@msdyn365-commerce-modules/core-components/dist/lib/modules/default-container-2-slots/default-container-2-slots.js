/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { LogLevel } from '@msdyn365-commerce/telemetry-internal';
import React from 'react';
import { Container, HeadingComponent } from '../../components/base-components';
import { getColClassArray, showErrors } from '../../utils/classnames';
class Default2SlotContainer extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleTextChange = (event) => (this.props.config.heading.headingText = event.target.value);
        this._getColClassName = () => {
            const { config } = this.props;
            const classNames = getColClassArray(config);
            if (!classNames.length) {
                return {
                    left: ['col'],
                    right: ['col']
                };
            }
            return classNames.reduce((memo, [left, right]) => {
                memo.left.push(left);
                memo.right.push(right);
                return memo;
            }, { left: [], right: [] });
        };
    }
    render() {
        const { slots, telemetry, context, config, data } = this.props;
        telemetry.log(LogLevel.Debug, "Default 2 Slot Container rendering for '{id}/{typeName}'", {
            values: [this.props.id, this.props.typeName]
        });
        const content = slots && slots.content;
        const slotsClassNames = this._getColClassName();
        if (content && content.length > 2) {
            telemetry.log(LogLevel.Warning, 'Default 2 Slot Container passed more than 2 slots');
        }
        const heading = config.heading || data.heading;
        const headingProps = {
            ...heading,
            handleTextChange: this.handleTextChange,
            requestContext: this.props.context.request
        };
        return (React.createElement(Container, { containerType: config.containerType, className: config.className, typeName: this.props.typeName, id: this.props.id, request: this.props.context.request },
            heading && React.createElement(HeadingComponent, Object.assign({ className: 'container-heading' }, headingProps)),
            content && content[0] && React.createElement("div", { className: slotsClassNames.left.join(' ') }, content[0]),
            content && content[1] && React.createElement("div", { className: slotsClassNames.right.join(' ') }, content[1]),
            React.createElement(React.Fragment, null, showErrors(context) &&
                content &&
                content.slice(2, content.length - 1).map((slot, index) => {
                    return (React.createElement("div", { className: 'col-12', key: index },
                        React.createElement("div", { className: 'card' },
                            React.createElement("div", { className: 'card-header text-white bg-danger' }, "Slot exceeded maximum number of slots supported by container. (2)"))));
                }))));
    }
}
export default Default2SlotContainer;
//# sourceMappingURL=default-container-2-slots.js.map