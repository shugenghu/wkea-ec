{"version":3,"file":"default-inline-script.js","sourceRoot":"./src/","sources":["modules/default-inline-script/default-inline-script.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAC;AACrF,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AAQ5F,MAAM,mBAAoB,SAAQ,KAAK,CAAC,aAA4C;IAChF,YAAY,KAAoC;QAC5C,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAEM,MAAM;QACT,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC9B,QAAQ,CAAC,2BAA2B,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACnG,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC;QAEnC,IAAI,CAAC,MAAM,IAAI,MAAM,KAAK,EAAE,IAAI,aAAa,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE;YAC5E,QAAQ,CACJ,uKAAuK,EACvK,IAAI,CAAC,KAAK,CAAC,SAAS,CACvB,CAAC;YACF,OAAO,IAAI,CAAC;SACf;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAC9B,QAAQ,CAAC,oEAAoE,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACrG,OAAO,IAAI,CAAC;SACf;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACpF,MAAM,UAAU,GAAG,WAAW,UAAU,CAAC,CAAC,CAAC,UAAU,UAAU,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,MAAM,WAAW,CAAC;QAG7F,OAAO,KAAK,CAAC,aAAa,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,uBAAuB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;IAC3H,CAAC;CACJ;AAED,eAAe,mBAAmB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { isNonceEnabled, SDK_FRAGMENT_NAME } from '@msdyn365-commerce/core-internal';\nimport * as React from 'react';\nimport { isAbsoluteUrl, isRelativeUrl, logDebug, logError } from '../../utils/script-utils';\nimport { IDefaultInlineScriptProps } from './default-inline-script.props.autogenerated';\n\n/**\n *\n * DefaultScript\n * @extends {React.PureComponent<IDefaultScriptProps<{}>>}\n */\nclass DefaultInlineScript extends React.PureComponent<IDefaultInlineScriptProps<{}>> {\n    constructor(props: IDefaultInlineScriptProps<{}>) {\n        super(props);\n    }\n\n    public render(): JSX.Element | null {\n        const { config } = this.props;\n        logDebug(`Adding script tags for '${this.props.id}/${this.props.typeName}'`, this.props.telemetry);\n        const source = config.inlineScript;\n\n        if (!source || source === '' || isAbsoluteUrl(source) || isRelativeUrl(source)) {\n            logError(\n                'Invalid inline script - Empty inline source defined or a url is being used as a source. Use default-external-script to load scripts from an external or relative url.',\n                this.props.telemetry\n            );\n            return null;\n        }\n\n        if (source.includes('</script>')) {\n            logError('Invalid inline script - inline script should not contain html tags', this.props.telemetry);\n            return null;\n        }\n\n        const nonceToken = this.props.context && isNonceEnabled(this.props.context.request);\n        const scriptHtml = `<script ${nonceToken ? `nonce='${nonceToken}'` : ''}>${source}</script>`;\n\n        // tslint:disable:react-no-dangerous-html -- intentionally set inner html\n        return React.createElement(SDK_FRAGMENT_NAME, { key: this.props.id, dangerouslySetInnerHTML: { __html: scriptHtml } });\n    }\n}\n\nexport default DefaultInlineScript;\n"]}