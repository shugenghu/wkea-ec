/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import 'jest';
import React from 'react';
import ReactDOM from 'react-dom';
import DefaultInlineScript from '../default-inline-script';
describe('Default Inline Script Tests', () => {
    const container = document.createElement('div');
    it('returns null if the inlineScript is just a url', (done) => {
        const scriptProps = {
            config: {
                inlineScript: 'https://www.contoso.com/products?productId=12345',
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };
        ReactDOM.render(React.createElement(DefaultInlineScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });
    it('returns null if the inlineScript is a relative url', (done) => {
        const scriptProps = {
            config: {
                inlineScript: 'headStart.js',
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };
        ReactDOM.render(React.createElement(DefaultInlineScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });
    it('returns null if the inlineScript is empty string', (done) => {
        const scriptProps = {
            config: {
                inlineScript: '',
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };
        ReactDOM.render(React.createElement(DefaultInlineScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });
    it('returns script tag containing url (but not just a url)', (done) => {
        const scriptProps = {
            config: {
                inlineScript: 'console.log(\'https://www.contoso.com/products?productId=12345\');',
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };
        ReactDOM.render(React.createElement(DefaultInlineScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script')[0].innerHTML).toEqual('console.log(\'https://www.contoso.com/products?productId=12345\');');
        done();
    });
    it('validates if placeholders are replaced for script injector with inline script configuration', (done) => {
        const scriptProps = {
            config: {
                inlineScript: 'console.log("script injector loaded with productId: 12345");',
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };
        ReactDOM.render(React.createElement(DefaultInlineScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script')[0].innerHTML).toEqual('console.log("script injector loaded with productId: 12345");');
        done();
    });
    it('returns null if encountering closing script tag', (done) => {
        const scriptProps = {
            config: {
                inlineScript: 'console.log("script injector loaded with productId: 12345");</script><div>I am a bad div</div><script>',
                id: '12345'
            },
            data: '',
            dataActions: [],
            id: '12345',
            typeName: '',
            user: 'test-user'
        };
        ReactDOM.render(React.createElement(DefaultInlineScript, Object.assign({}, scriptProps)), container);
        expect(container.getElementsByTagName('script').length).toBe(0);
        done();
    });
});
//# sourceMappingURL=default-inline-script.test.js.map