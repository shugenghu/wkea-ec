{"version":3,"file":"base-components.js","sourceRoot":"./src/","sources":["components/base-components.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAyC,IAAI,EAAE,MAAM,yBAAyB,CAAC;AACtF,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAyD/B,MAAM,gBAAgB,GAAG,CAAC,aAAiC,EAAE,EAAE;IAC3D,QAAQ,aAAa,EAAE;QACnB,KAAK,WAAW;YACZ,OAAO,WAAW,CAAC;QACvB,KAAK,OAAO,CAAC;QACb;YACI,OAAO,OAAO,CAAC;KACtB;AACL,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,SAAS,GAA+B,CAAC,KAAsB,EAAe,EAAE;IACzF,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IACnE,MAAM,eAAe,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAEzD,OAAO,aAAa,CAAC,CAAC,CAAC,CACnB,6BAAK,SAAS,EAAE,GAAG,QAAQ,IAAI,EAAE,IAAI,gBAAgB,CAAC,aAAa,CAAC,GAAG,eAAe,EAAE;QACpF,6BAAK,SAAS,EAAC,KAAK,IAAE,QAAQ,CAAO,CACnC,CACT,CAAC,CAAC,CAAC,CACA,6BAAK,SAAS,EAAE,GAAG,QAAQ,IAAI,EAAE,GAAG,eAAe,EAAE,IAAG,QAAQ,CAAO,CAC1E,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAqD,EAAsB,EAAE;IAC1G,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;IACxD,MAAM,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC;IACxB,MAAM,oBAAoB,GAAG,QAAQ,CAAC,CAAC,CAAC,WAAW,QAAQ,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC,WAAW,SAAS,EAAE,CAAC;IACpG,OAAO,CACH,CAAC,WAAW,IAAI,CACZ,oBAAC,IAAI,IACD,SAAS,EAAE,oBAAoB,EAC/B,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,WAAW,EACjB,SAAS,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,gBAAgB,EAAE,cAAc,EAAE,KAAK,CAAC,cAAc,EAAE,GACrF,CACL,CAAC;QACF,IAAI,CACP,CAAC;AACN,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ContentEditableEvent, IRequestContext, Text } from '@msdyn365-commerce/core';\nimport * as React from 'react';\n\n/**\n * Heading options\n */\nexport interface IHeadingComponentProps {\n    /**\n     *  Heading text\n     */\n    headingText?: string;\n    /**\n     * Heading tag (h1, h2, h3, h4, h5, h6)\n     */\n    tag?: HeadingTag;\n    /**\n     * Heading text size (sm, md, lg, xl)\n     */\n    textSize?: TextSize;\n\n    requestContext: IRequestContext;\n\n    handleTextChange(event: ContentEditableEvent): string;\n}\n\nexport type HeadingTag = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\nexport type TextSize = 'sm' | 'md' | 'lg' | 'xl';\n\n/**\n * Container class options\n */\nexport interface IContainerProps {\n    /**\n     * CSS class name\n     */\n    className?: string;\n    /**\n     * Bootstrap supported container types\n     */\n    containerType?: string;\n    /**\n     * type name\n     */\n    typeName?: string;\n    /**\n     * id of container\n     */\n    id?: string;\n    /**\n     * React children\n     */\n    children: React.ReactNode;\n    /**\n     * Request context\n     */\n    request?: IRequestContext;\n}\n\nconst getContainerType = (containerType: string | undefined) => {\n    switch (containerType) {\n        case 'container':\n            return 'container';\n        case 'fluid':\n        default:\n            return 'fluid';\n    }\n};\n\n/**\n * HOC to create bootstrap container div. If no container type is specified children are rendered.\n * @param options IContainerClasses\n */\nexport const Container: React.SFC<IContainerProps> = (props: IContainerProps): JSX.Element => {\n    const { containerType, className, typeName, id, children } = props;\n    const customClassName = className ? ` ${className}` : '';\n\n    return containerType ? (\n        <div className={`${typeName} ${id} ${getContainerType(containerType)}${customClassName}`}>\n            <div className='row'>{children}</div>\n        </div>\n    ) : (\n        <div className={`${typeName} ${id}${customClassName}`}>{children}</div>\n    );\n};\n\nexport const HeadingComponent = (props: IHeadingComponentProps & { className: string }): JSX.Element | null => {\n    const { tag, headingText, textSize, className } = props;\n    const Tag = tag || 'h2';\n    const classNameWithHeading = textSize ? `heading ${textSize} ${className}` : `heading ${className}`;\n    return (\n        (headingText && (\n            <Text\n                className={classNameWithHeading}\n                tag={Tag}\n                text={headingText}\n                editProps={{ onEdit: props.handleTextChange, requestContext: props.requestContext }}\n            />\n        )) ||\n        null\n    );\n};\n"]}