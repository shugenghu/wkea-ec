{"version":3,"file":"updateCart-telemetry.action.js","sourceRoot":"./src/","sources":["actions/updateCart-telemetry.action.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,oBAAoB,EAAgC,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAG7G,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AASnE,MAAM,gBAAgB,GAAG,KAAK,EAAE,MAAqC,EAAE,aAA6B,EAAE,EAAE;IACpG,IAAI;QACA,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAsB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAsB,MAAM,CAAC;QAGzG,IAAI,WAAW,CAAC,WAAW,IAAI,OAAO,WAAW,CAAC,WAAW,KAAK,UAAU,EAAE;YAC1E,MAAM,qBAAqB,GAAG,WAAW,CAAC,WAAW,EAAyB,CAAC;YAC/E,IAAI,qBAAqB,IAAI,qBAAqB,CAAC,SAAS,EAAE;gBAE1D,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,qBAAqB,CAAC,SAAS,CAAC;gBACjG,OAAO;aACV;SACJ;QACD,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;KACzG;IAAC,OAAO,CAAC,EAAE;QACR,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,yCAAyC,EAAE,CAAC,CAAC,CAAC;KAC/E;AACL,CAAC,CAAC;AAQF,MAAM,eAAe,GAAG,KAAK,EAAE,OAAsC,EAAE,IAAmB,EAAE,aAA6B,EAAE,EAAE;IACzH,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE;QAC1D,MAAM,eAAe,GAAsB,EAAE,CAAC;QAC9C,MAAM,gBAAgB,GAAe,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAGpG,IAAI,gBAAgB,EAAE;YAClB,gBAAgB,CAAC,OAAO,CAAC,CAAC,QAAkB,EAAE,EAAE;gBAC5C,IAAI,QAAQ,IAAI,QAAQ,CAAC,SAAS,EAAE;oBAChC,MAAM,cAAc,GAAG,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;oBACtF,IAAI,cAAc,EAAE;wBAChB,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,cAAc,CAAC;qBACxD;iBACJ;YACL,CAAC,CAAC,CAAC;SACN;QAGD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAC/B,cAAc,CAAC,YAAY,EAC3B,sBAAsB,CAAC,IAAI,EAAE,eAAe,EAAE,aAAa,CAAC,cAAc,CAAC,CAC9E,CAAC;KACL;AACL,CAAC,CAAC;AAEF,oBAAoB,CAAC;IACjB,QAAQ,EAAE,uDAAuD;IACjE,cAAc,EAAE,eAAe;IAC/B,aAAa,EAAE,gBAAgB;CAClC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createDataActionHook, IActionContext, IActionInput, TelemetryEvent } from '@msdyn365-commerce/core';\nimport { IAny, IDictionary, IMSDyn365Window } from '@msdyn365-commerce/core-internal';\nimport { Cart, CartLine, IDataServiceRequest, IUpdateCartLinesParam } from '@msdyn365-commerce/retail-proxy';\nimport { getProductInfoFromCart } from './telemetry.action.helper';\n\ndeclare var window: IMSDyn365Window;\n\n/**\n * Saves info on cart lines updated before calling data action\n * @param inputs Data action inputs\n * @param actionContext Action context\n */\nconst beforeUpdateCart = async (inputs: IActionInput | IActionInput[], actionContext: IActionContext) => {\n    try {\n        const actionInput = Array.isArray(inputs) ? <IDataServiceRequest>inputs[0] : <IDataServiceRequest>inputs;\n\n        // If cart lines were updated\n        if (actionInput.queryParams && typeof actionInput.queryParams === 'function') {\n            const updateCartLinesParams = actionInput.queryParams<IUpdateCartLinesParam>();\n            if (updateCartLinesParams && updateCartLinesParams.cartLines) {\n                // Save info on updated cart lines for post data action hook to pick up\n                actionContext.requestContext.telemetryData[`updatedCartLines`] = updateCartLinesParams.cartLines;\n                return;\n            }\n        }\n        actionContext.telemetry.debug('UpdateCart pre-data action hook failed - No updated cart lines found');\n    } catch (e) {\n        actionContext.telemetry.debug('UpdateCart pre-data action hook failed.', e);\n    }\n};\n\n/**\n * Fires an UpdateInCart event after data action completed\n * @param _inputs Data action inputs\n * @param cart New cart object after cart lines have been added\n * @param actionContext Action context\n */\nconst afterUpdateCart = async (_inputs: IActionInput | IActionInput[], cart: Cart | Cart[], actionContext: IActionContext) => {\n    if (window && window._msdyn365 && window._msdyn365.telemetry) {\n        const updatedProducts: IDictionary<IAny> = {};\n        const updatedCartLines = <CartLine[]>actionContext.requestContext.telemetryData[`updatedCartLines`];\n\n        // If TelemetryData exists for updated cart lines, collect product info\n        if (updatedCartLines) {\n            updatedCartLines.forEach((cartLine: CartLine) => {\n                if (cartLine && cartLine.ProductId) {\n                    const updatedProduct = actionContext.requestContext.telemetryData[cartLine.ProductId];\n                    if (updatedProduct) {\n                        updatedProducts[cartLine.ProductId] = updatedProduct;\n                    }\n                }\n            });\n        }\n\n        // Fire UpdateInCart event\n        window._msdyn365.telemetry.logEvent(\n            TelemetryEvent.UpdateInCart,\n            getProductInfoFromCart(cart, updatedProducts, actionContext.requestContext)\n        );\n    }\n};\n\ncreateDataActionHook({\n    actionId: '@msdyn365-commerce/retail-proxy/Carts/UpdateCartLines',\n    postReaderHook: afterUpdateCart,\n    preReaderHook: beforeUpdateCart\n});\n"]}