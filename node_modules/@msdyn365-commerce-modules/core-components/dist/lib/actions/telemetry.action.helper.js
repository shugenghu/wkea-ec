/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
export const getProductInfoFromCart = (cart, productData, requestContext) => {
    cart = Array.isArray(cart) ? cart[0] : cart;
    return _getProductInfoFromCartLines(cart, productData, requestContext);
};
const _getProductInfoFromCartLines = (cartObject, productData, requestContext) => {
    const cartLineProductUnits = [];
    if (cartObject && cartObject.CartLines && Array.isArray(cartObject.CartLines) && cartObject.CartLines.length > 0) {
        cartObject.CartLines.forEach((cartLineitem) => {
            if (cartLineitem.ProductId) {
                const productInfo = productData[cartLineitem.ProductId];
                if (productInfo) {
                    cartLineProductUnits.push({
                        productChannelId: '',
                        productChannelName: '',
                        productCategoryId: '',
                        productCategoryName: '',
                        productId: productInfo.productId,
                        productName: productInfo.productName,
                        productSku: productInfo.productSku,
                        productPrice: cartLineitem.Price ? cartLineitem.Price.toString() : '',
                        productQuantity: cartLineitem.Quantity ? cartLineitem.Quantity.toString() : '',
                        productCurrency: ''
                    });
                }
            }
        });
    }
    return {
        cartId: cartObject.Id,
        cartVersion: cartObject.Version ? cartObject.Version.toString() : '',
        products: cartLineProductUnits,
        orderId: cartObject.OrderNumber ? cartObject.OrderNumber.toString() : ''
    };
};
export const getProductTransactionInfoFromSalesOrder = (salesOrder, productData) => {
    salesOrder = Array.isArray(salesOrder) ? salesOrder[0] : salesOrder;
    return {
        id: salesOrder.Id,
        affiliation: salesOrder.ChannelId ? salesOrder.ChannelId.toString() : '',
        revenue: salesOrder.NetAmountWithoutTax,
        tax: salesOrder.TaxAmount,
        products: _getProductInfoFromSalesLines(salesOrder, productData)
    };
};
const _getProductInfoFromSalesLines = (salesObject, productData) => {
    const saleLineProductUnits = [];
    if (salesObject && salesObject.SalesLines && Array.isArray(salesObject.SalesLines) && salesObject.SalesLines.length > 0) {
        salesObject.SalesLines.forEach((saleLineitem) => {
            if (saleLineitem.ProductId) {
                const productInfo = productData[saleLineitem.ProductId];
                if (productInfo) {
                    saleLineProductUnits.push({
                        productChannelId: '',
                        productChannelName: '',
                        productCategoryId: '',
                        productCategoryName: '',
                        productId: productInfo.productId,
                        productName: productInfo.productName,
                        productSku: productInfo.productSku,
                        productPrice: saleLineitem.Price ? saleLineitem.Price.toString() : '',
                        productQuantity: saleLineitem.Quantity ? saleLineitem.Quantity.toString() : '',
                        productCurrency: ''
                    });
                }
            }
        });
    }
    return saleLineProductUnits;
};
export const getProductInfoFromSimpleProduct = (simpleProduct, requestContext) => {
    const recordId = simpleProduct.RecordId || '';
    return {
        productId: simpleProduct.MasterProductId ? simpleProduct.MasterProductId.toString() : recordId.toString(),
        productSku: recordId ? recordId.toString() : '',
        productName: simpleProduct.Name || simpleProduct.Description || '',
        productPrice: simpleProduct.Price ? simpleProduct.Price.toString() : '',
        productChannelId: '',
        productChannelName: '',
        productCategoryId: '',
        productCategoryName: '',
        productQuantity: '',
        productCurrency: ''
    };
};
//# sourceMappingURL=telemetry.action.helper.js.map