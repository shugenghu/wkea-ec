{"version":3,"file":"telemetry.action.helper.js","sourceRoot":"./src/","sources":["actions/telemetry.action.helper.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAny, IDictionary, IRequestContext } from '@msdyn365-commerce/core-internal';\nimport { Cart, CartLine, SalesLine, SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { ICartInfo, IProductInfo, IProductTransaction } from '@msdyn365-commerce/telemetry-internal';\n\n/**\n * getProductInfoFromCart\n * @param cart Cart object\n * @param productData Product data\n * @param requestContext Request Context\n */\nexport const getProductInfoFromCart = (cart: Cart | Cart[], productData: IDictionary<IAny>, requestContext: IRequestContext): ICartInfo => {\n    // ToDo: Need to revisit this when we make sure that we can expect only one cart and not array\n    cart = Array.isArray(cart) ? cart[0] : cart;\n    return _getProductInfoFromCartLines(cart, productData, requestContext);\n};\n\n/**\n * _getProductInfoFromCartLines\n * @param cartObject Cart object\n * @param productData Product data\n * @param requestContext Request context\n */\nconst _getProductInfoFromCartLines = (cartObject: Cart, productData: IDictionary<IAny>, requestContext: IRequestContext): ICartInfo => {\n    const cartLineProductUnits: IProductInfo[] = [];\n    if (cartObject && cartObject.CartLines && Array.isArray(cartObject.CartLines) && cartObject.CartLines.length > 0) {\n        cartObject.CartLines.forEach((cartLineitem: CartLine) => {\n            if (cartLineitem.ProductId) {\n                // The product id in cartLine actually contains recordId and not master product id so we can use it up here to lookup product.\n                const productInfo = <IProductInfo>productData[cartLineitem.ProductId];\n                if (productInfo) {\n                    cartLineProductUnits.push({\n                        productChannelId: '',\n                        productChannelName: '',\n                        productCategoryId: '',\n                        productCategoryName: '',\n                        productId: productInfo.productId,\n                        productName: productInfo.productName,\n                        productSku: productInfo.productSku,\n                        productPrice: cartLineitem.Price ? cartLineitem.Price.toString() : '',\n                        productQuantity: cartLineitem.Quantity ? cartLineitem.Quantity.toString() : '',\n                        productCurrency: ''\n                    });\n                }\n            }\n        });\n    }\n\n    return {\n        cartId: cartObject.Id,\n        cartVersion: cartObject.Version ? cartObject.Version.toString() : '',\n        products: cartLineProductUnits,\n        orderId: cartObject.OrderNumber ? cartObject.OrderNumber.toString() : ''\n    };\n};\n\n/**\n * getProductTransactionInfoFromSalesOrder\n * @param salesOrder Sales order\n * @param productData Product data\n */\nexport const getProductTransactionInfoFromSalesOrder = (\n    salesOrder: SalesOrder | SalesOrder[],\n    productData: IDictionary<IAny>\n): IProductTransaction => {\n    // ToDo: Need to revisit this when we make sure that we can expect only one sales order and not array\n    salesOrder = Array.isArray(salesOrder) ? salesOrder[0] : salesOrder;\n\n    return {\n        id: salesOrder.Id,\n        affiliation: salesOrder.ChannelId ? salesOrder.ChannelId.toString() : '',\n        revenue: salesOrder.NetAmountWithoutTax,\n        tax: salesOrder.TaxAmount,\n        // shippingCost?: // Confirm if it is delivery mode charge amount;\n        products: _getProductInfoFromSalesLines(salesOrder, productData)\n    };\n};\n\n/**\n * _getProductInfoFromSalesLines\n * @param salesObject Sales object\n * @param productData Product dat\n */\nconst _getProductInfoFromSalesLines = (salesObject: SalesOrder, productData: IDictionary<IAny>): IProductInfo[] => {\n    const saleLineProductUnits: IProductInfo[] = [];\n    if (salesObject && salesObject.SalesLines && Array.isArray(salesObject.SalesLines) && salesObject.SalesLines.length > 0) {\n        salesObject.SalesLines.forEach((saleLineitem: SalesLine) => {\n            if (saleLineitem.ProductId) {\n                // The product id in salesLine actually contains recordId and not master product id so we can use it up here to lookup product.\n                const productInfo = <IProductInfo>productData[saleLineitem.ProductId];\n                if (productInfo) {\n                    saleLineProductUnits.push({\n                        productChannelId: '',\n                        productChannelName: '',\n                        productCategoryId: '',\n                        productCategoryName: '',\n                        productId: productInfo.productId, // This is already precooked to contain master product id\n                        productName: productInfo.productName,\n                        productSku: productInfo.productSku, // This is a;ready precooked to contain record id\n                        productPrice: saleLineitem.Price ? saleLineitem.Price.toString() : '',\n                        productQuantity: saleLineitem.Quantity ? saleLineitem.Quantity.toString() : '',\n                        productCurrency: ''\n                    });\n                }\n            }\n        });\n    }\n\n    return saleLineProductUnits;\n};\n\n/**\n * getProductInfoFromSimpleProduct\n * @param simpleProduct Simple product\n * @param requestContext Request context\n */\nexport const getProductInfoFromSimpleProduct = (simpleProduct: SimpleProduct, requestContext: IRequestContext): IProductInfo => {\n    const recordId = simpleProduct.RecordId || '';\n\n    return {\n        // If master product id is not available then product record id is master product id\n        productId: simpleProduct.MasterProductId ? simpleProduct.MasterProductId.toString() : recordId.toString(),\n        productSku: recordId ? recordId.toString() : '',\n        productName: simpleProduct.Name || simpleProduct.Description || '',\n        productPrice: simpleProduct.Price ? simpleProduct.Price.toString() : '',\n        productChannelId: '',\n        productChannelName: '',\n        productCategoryId: '',\n        productCategoryName: '',\n        productQuantity: '',\n        productCurrency: ''\n    };\n};\n"]}