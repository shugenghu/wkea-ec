"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var Transition_1 = tslib_1.__importDefault(require("react-transition-group/Transition"));
var utilities_1 = require("../common/utilities");
var Collapse = (function (_super) {
    tslib_1.__extends(Collapse, _super);
    function Collapse(props) {
        var _this = _super.call(this, props) || this;
        _this._transitionStatusToClassHash = {
            entering: 'collapsing',
            entered: 'collapse show',
            exiting: 'collapsing',
            exited: 'collapse'
        };
        _this._tagRef = React.createRef();
        _this.props = props;
        _this.state = {
            height: 0
        };
        _this._onEntering = _this._onEntering.bind(_this);
        _this._onExit = _this._onExit.bind(_this);
        _this._onExited = _this._onExited.bind(_this);
        _this._onExiting = _this._onExiting.bind(_this);
        _this._reevaluateHeight = _this._reevaluateHeight.bind(_this);
        return _this;
    }
    Collapse.prototype.componentDidMount = function () {
        window && window.addEventListener('resize', this._reevaluateHeight);
        this._reevaluateHeight();
    };
    Collapse.prototype.componentWillUnmount = function () {
        window && window.removeEventListener('resize', this._reevaluateHeight);
    };
    Collapse.prototype.render = function () {
        var _this = this;
        var _a = this.props, tag = _a.tag, isOpen = _a.isOpen, className = _a.className, children = _a.children, navbar = _a.navbar, cssModule = _a.cssModule, collapseIn = _a.in, mountOnEnter = _a.mountOnEnter, unmountOnExit = _a.unmountOnExit, appear = _a.appear, enter = _a.enter, exit = _a.exit, timeout = _a.timeout, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, otherProps = tslib_1.__rest(_a, ["tag", "isOpen", "className", "children", "navbar", "cssModule", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"]);
        var Tag = tag || 'div';
        var transitionProps = {
            in: collapseIn,
            mountOnEnter: mountOnEnter,
            unmountOnExit: unmountOnExit,
            appear: appear,
            enter: enter,
            exit: exit,
            onEnter: onEnter,
            onEntering: onEntering,
            onEntered: onEntered,
            onExit: onExit,
            onExiting: onExiting,
            onExited: onExited
        };
        var height = this.state.height;
        var style = height === null || height === 0 ? null : { height: height };
        return (React.createElement(Transition_1.default, tslib_1.__assign({}, transitionProps, { in: isOpen, timeout: timeout || utilities_1.TransitionTimeouts.Collapse, onEntering: this._onEntering, onExit: this._onExit, onExiting: this._onExiting, onExited: this._onExited }), function (status) {
            var collapseClass = _this._getTransitionClass(status);
            var classes = utilities_1.mapToCssModules(classnames_1.default(className, collapseClass, navbar && 'navbar-collapse'), cssModule);
            return (React.createElement(Tag, tslib_1.__assign({}, otherProps, { className: classes, ref: _this._tagRef, style: tslib_1.__assign({}, style) }), children));
        }));
    };
    Collapse.prototype._reevaluateHeight = function () {
        var node = this._tagRef.current;
        if (node !== null && node.firstElementChild && node.firstElementChild.scrollHeight > 0) {
            this.setState({ height: node.firstElementChild.scrollHeight });
        }
    };
    Collapse.prototype._getTransitionClass = function (status) {
        return this._transitionStatusToClassHash[status] || 'collapse';
    };
    Collapse.prototype._onEntering = function (node, isAppearing) {
        this.setState({ height: node.scrollHeight });
        if (this.props.onEntering) {
            this.props.onEntering(node, isAppearing);
        }
    };
    Collapse.prototype._onExit = function (node) {
        this.setState({ height: node.scrollHeight });
        if (this.props.onExit) {
            this.props.onExit(node);
        }
    };
    Collapse.prototype._onExiting = function (node) {
        this.setState({ height: 0 });
        if (this.props.onExiting) {
            this.props.onExiting(node);
        }
    };
    Collapse.prototype._onExited = function (node) {
        this.setState({ height: null });
        if (this.props.onExited) {
            this.props.onExited(node);
        }
    };
    Collapse.defaultProps = {
        isOpen: false,
        tag: 'div',
        timeout: utilities_1.TransitionTimeouts.Collapse
    };
    return Collapse;
}(React.Component));
exports.default = Collapse;
//# sourceMappingURL=Collapse.js.map