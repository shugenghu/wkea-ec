"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var lodash_1 = require("lodash");
var React = tslib_1.__importStar(require("react"));
var Quantity = (function (_super) {
    tslib_1.__extends(Quantity, _super);
    function Quantity(props) {
        var _this = _super.call(this, props) || this;
        _this.inputRef = React.createRef();
        _this._validateMin = function () {
            var minValue = _this.props.min === undefined ? 1 : _this.props.min;
            if (isNaN(_this.state.currentInput) || (_this.state.currentInput < minValue)) {
                _this.setState({ currentInput: minValue }, function () { _this.props.onChange && _this.props.onChange(_this.state.currentInput); });
            }
            else {
                _this.props.onChange && _this.props.onChange(_this.state.currentInput);
            }
        };
        _this.state = { currentInput: props.currentCount || 1 };
        _this._handleChange = _this._handleChange.bind(_this);
        return _this;
    }
    Quantity.prototype.render = function () {
        var currentValue = this.state.currentInput;
        return (React.createElement("input", { type: 'number', min: this.props.min, className: 'msc-quantity-input', pattern: '[0-9]*', value: this.state.currentInput, onChange: this._handleChange, onBlur: this._validateMin, "aria-live": 'polite', "aria-label": "" + this.props.inputQuantityAriaLabel, role: 'spinbutton', "aria-valuemin": this.props.min, "aria-valuemax": this.props.max, "aria-valuenow": currentValue, id: this.props.id, ref: this.inputRef }));
    };
    Quantity.prototype._handleChange = function (e) {
        var _this = this;
        var currentValue = parseInt((e.target.value), 10);
        var minValue = this.props.min === undefined ? 1 : this.props.min;
        var inputElement = this.inputRef && this.inputRef.current && this.inputRef.current instanceof HTMLInputElement && this.inputRef.current;
        if (currentValue > this.props.max) {
            this.setState({ currentInput: this.props.max }, function () {
                lodash_1.debounce(function () {
                    _this.props.onChange && _this.props.onChange(_this.state.currentInput);
                }, 200)();
            });
        }
        else {
            this.setState({ currentInput: currentValue }, function () {
                lodash_1.debounce(function () {
                    if (!isNaN(_this.state.currentInput) && !(_this.state.currentInput < minValue)) {
                        _this.props.onChange && _this.props.onChange(_this.state.currentInput);
                        if (inputElement) {
                            inputElement.setAttribute('aria-valuenow', currentValue.toString());
                            inputElement.setAttribute('value', currentValue.toString());
                        }
                    }
                }, 200)();
            });
        }
    };
    Quantity.defaultProps = {
        min: 1
    };
    return Quantity;
}(React.PureComponent));
exports.default = Quantity;
//# sourceMappingURL=Quantity.js.map