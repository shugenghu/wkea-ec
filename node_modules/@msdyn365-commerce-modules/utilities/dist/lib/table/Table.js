"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var __1 = require("..");
var checkbox_1 = tslib_1.__importDefault(require("./checkbox"));
var TableDataType;
(function (TableDataType) {
    TableDataType["Number"] = "Number";
    TableDataType["Text"] = "Text";
    TableDataType["Price"] = "Price";
})(TableDataType = exports.TableDataType || (exports.TableDataType = {}));
var Table = (function (_super) {
    tslib_1.__extends(Table, _super);
    function Table(props) {
        var _this = _super.call(this, props) || this;
        _this.componentClassName = 'ms-table';
        _this.headingPrefix = 'table';
        _this._selectSortingKey = function (columnName) {
            var _a = _this.state, sortingKey = _a.sortingKey, ascendingOrder = _a.ascendingOrder;
            var newOrder = true;
            if (sortingKey === columnName) {
                newOrder = !ascendingOrder;
            }
            _this.setState({
                sortingKey: columnName,
                ascendingOrder: newOrder,
                showActions: false
            });
        };
        _this._renderHeadingRow = function (columnData) {
            var _a = _this.props, resources = _a.resources, showCheckBoxes = _a.showCheckBoxes, enableToModify = _a.enableToModify, minifyActions = _a.minifyActions, rows = _a.rows, actionLinkText = _a.actionLinkText, isSortable = _a.isSortable, checkBoxCallback = _a.checkBoxCallback;
            var _b = _this.state, sortingKey = _b.sortingKey, ascendingOrder = _b.ascendingOrder;
            var sortingClassName = ascendingOrder ? 'asc' : 'dsc';
            var columns = columnData.map(function (data, cellIndex) {
                if (!data) {
                    return;
                }
                var heading = resources["" + _this.headingPrefix + data.name + "HeadingText"] || resources[data.name + "HeadingText"] || data.name;
                var content = isSortable && data.sortable && (react_1.default.createElement("div", { className: classnames_1.default(_this.componentClassName + "__heading-sorting", sortingKey === data.name && sortingClassName), onClick: _this._selectSortingKey.bind(_this, data.name), role: 'button' }, heading)) || heading;
                return (_this.tableCell({
                    header: true,
                    className: classnames_1.default(_this.componentClassName + "__heading-row-data", data.name === 'SpendingLimit' && 'num-type'),
                    content: content,
                    cellIndex: cellIndex,
                    scope: 'col',
                }));
            });
            var radioCheckBox = showCheckBoxes && checkBoxCallback && (react_1.default.createElement(checkbox_1.default, tslib_1.__assign({}, {
                onChange: function () { checkBoxCallback(rows); },
                name: 'All'
            })));
            return (react_1.default.createElement("tr", { className: _this.componentClassName + "__heading-row" },
                showCheckBoxes && _this.tableCell({ header: true, className: _this.componentClassName + "__heading-row-data checkbox", content: radioCheckBox, cellIndex: 1, scope: 'col' }),
                columns,
                enableToModify && _this.tableCell({ header: true, className: _this.componentClassName + "__heading-row-data action-links", content: minifyActions ? '' : actionLinkText, cellIndex: 1, scope: 'col' })));
        };
        _this._renderRow = function (rows) {
            var _a = _this.props, enableToModify = _a.enableToModify, showCheckBoxes = _a.showCheckBoxes, excludedColumns = _a.excludedColumns, actions = _a.actions, checkBoxCallback = _a.checkBoxCallback, formatPrice = _a.formatPrice;
            var tableRows = rows.map(function (rowsData, index) {
                var className = index % 2 ? _this.componentClassName + "__row even-row" : _this.componentClassName + "__row odd-row";
                var showActions = false;
                var columnData = rowsData.row.map(function (cell) {
                    if (excludedColumns && excludedColumns.includes(cell.id)) {
                        return;
                    }
                    var extraClass = cell.type === TableDataType.Number || cell.type === TableDataType.Price ? 'num-type' : '';
                    var cellContent = cell.type === TableDataType.Price && formatPrice ? formatPrice(cell.value) : cell.value;
                    return _this.tableCell({ header: false, className: classnames_1.default(_this.componentClassName + "__row-data", extraClass), content: cellContent, cellIndex: index, scope: 'row' });
                });
                var radioCheckBox = showCheckBoxes && checkBoxCallback && (react_1.default.createElement(checkbox_1.default, tslib_1.__assign({}, {
                    onChange: function () { checkBoxCallback(rows); },
                    name: 'actionOptions'
                })));
                var rowKey = "row-" + index;
                if (rowKey === _this.state.selectedIndex && _this.state.showActions) {
                    className += ' selected';
                    showActions = true;
                }
                var actionButtons = actions && _this._renderActions(rowsData.row, showActions, rowKey);
                return (react_1.default.createElement("tr", { key: rowKey, className: className },
                    showCheckBoxes && _this.tableCell({ header: false, className: _this.componentClassName + "__row-data", content: radioCheckBox, cellIndex: index, scope: 'row', records: rowsData }),
                    columnData,
                    enableToModify && _this.tableCell({ header: false, className: _this.componentClassName + "__row-data", content: actionButtons, cellIndex: index, scope: 'row', records: rowsData })));
            });
            return tableRows;
        };
        _this._renderActions = function (data, showActions, key) {
            var _a = _this.props, editLinkText = _a.editLinkText, deleteLinkText = _a.deleteLinkText, viewLinkText = _a.viewLinkText, minifyActions = _a.minifyActions, minifiedButtonText = _a.minifiedButtonText, _b = _a.actions, onEdit = _b.onEdit, onDelete = _b.onDelete, onView = _b.onView;
            var handleClickEdit = onEdit !== undefined ? function () { onEdit(data); } : undefined;
            var handleClickDelete = onDelete !== undefined ? function () { onDelete(data); } : undefined;
            var handleClickView = onView !== undefined ? function () { onView(data); } : undefined;
            var actionButtons = (react_1.default.createElement(__1.Node, { className: _this.componentClassName + "__row-links" },
                handleClickView && react_1.default.createElement(__1.Button, { className: _this.componentClassName + "__row-links-view", onClick: handleClickView }, viewLinkText),
                handleClickEdit && react_1.default.createElement(__1.Button, { className: _this.componentClassName + "__row-links-edit", onClick: handleClickEdit }, editLinkText),
                handleClickDelete && react_1.default.createElement(__1.Button, { className: _this.componentClassName + "__row-links-delete", onClick: handleClickDelete }, deleteLinkText)));
            if (minifyActions) {
                return (react_1.default.createElement(__1.Node, { className: _this.componentClassName + "__row-links-minified" },
                    react_1.default.createElement(__1.Button, { className: _this.componentClassName + "__row-links-toggle", "data-type": key, onClick: _this._toggleActions }, minifiedButtonText ? minifiedButtonText : ''),
                    showActions && actionButtons));
            }
            else {
                return actionButtons;
            }
        };
        _this._toggleActions = function (event) {
            var target = event && event.target;
            var newKey = target && target.getAttribute('data-type') ? target.getAttribute('data-type') : '';
            _this.setState({
                showActions: !_this.state.showActions,
                selectedIndex: newKey
            });
        };
        _this._sortTableRow = function (table, sortingkey, ascendingOrder) {
            return table.sort(function (userOne, userTwo) {
                var userOneData = userOne.row.find(function (cell) { return cell.id === sortingkey; });
                var userTwoData = userTwo.row.find(function (cell) { return cell.id === sortingkey; });
                if (!userOneData || !userTwoData) {
                    return -1;
                }
                if (typeof userOneData.value === 'number' && typeof userTwoData.value === 'number') {
                    return ascendingOrder ? (userOneData.value - userTwoData.value) : (userTwoData.value - userOneData.value);
                }
                var cleanFirst = userOneData.value && userOneData.value.toString().toLowerCase().trim();
                var cleanSecond = userOneData.value && userTwoData.value.toString().toLowerCase().trim();
                if (!cleanFirst || !cleanSecond) {
                    return -1;
                }
                if (ascendingOrder) {
                    return cleanFirst < cleanSecond ? -1 : 1;
                }
                else {
                    return cleanFirst > cleanSecond ? -1 : 1;
                }
            });
        };
        _this._getCurrentPageData = function (tableRows, start, end) {
            if (start >= end) {
                return tableRows;
            }
            var result = [];
            for (var i = start; i < end; i++) {
                tableRows[i] && result.push(tableRows[i]);
            }
            return result;
        };
        _this.tableCell = function (props) {
            var className = props.className, header = props.header, cellIndex = props.cellIndex, scope = props.scope, colSpan = props.colSpan, content = props.content;
            return header ? (react_1.default.createElement("th", { className: className, key: "heading-" + cellIndex, scope: scope, colSpan: colSpan }, content)) : (react_1.default.createElement("td", { className: className, scope: scope, colSpan: colSpan }, content));
        };
        _this.state = {
            ascendingOrder: true,
            sortingKey: props.headings[0] && props.headings[0].name || '',
            showActions: props.minifyActions !== undefined ? !props.minifyActions : true,
            selectedIndex: ''
        };
        return _this;
    }
    Table.prototype.render = function () {
        var _a = this.props, className = _a.className, headings = _a.headings, rows = _a.rows, isSortable = _a.isSortable, showPagination = _a.showPagination, paginationProperty = _a.paginationProperty;
        var _b = this.state, sortingKey = _b.sortingKey, ascendingOrder = _b.ascendingOrder;
        var classname = classnames_1.default(this.componentClassName, className);
        var tableRows = isSortable && sortingKey ? this._sortTableRow(rows, sortingKey, ascendingOrder) : rows;
        var paginationLinks = null;
        if (showPagination) {
            var skipCount = paginationProperty.skipCount, itemPerPage = paginationProperty.itemPerPage, nextText = paginationProperty.nextText, prevText = paginationProperty.prevText, paginationText = paginationProperty.paginationText, url = paginationProperty.url;
            paginationLinks = (react_1.default.createElement(__1.UncontrolledPagination, { className: 'ms-table-business-org__pagination', role: 'navigation', "aria-label": paginationText, url: url, qsp: 'skip', items: tableRows.length, itemsPerPage: itemPerPage, startingItem: skipCount, previousText: react_1.default.createElement("div", { className: 'msc-pagination__prev' },
                    react_1.default.createElement("span", { className: 'ms-table-business-org__pagination-left', "aria-hidden": 'true' }),
                    react_1.default.createElement("span", { className: 'prev-text' }, prevText)), nextText: react_1.default.createElement("div", { className: 'msc-pagination__next' },
                    react_1.default.createElement("span", { className: 'next-text' }, nextText),
                    react_1.default.createElement("span", { className: 'ms-table-business-org__pagination-right', "aria-hidden": 'true' })), previousAriaLabel: prevText, nextAriaLabel: nextText }));
            tableRows = this._getCurrentPageData(tableRows, skipCount, skipCount + itemPerPage);
        }
        var tableBody = this._renderRow(tableRows);
        var tableHead = this._renderHeadingRow(headings);
        return (react_1.default.createElement("div", { className: this.componentClassName + "__container" },
            react_1.default.createElement("table", { className: classname },
                react_1.default.createElement("thead", null, tableHead),
                react_1.default.createElement("tbody", null, tableBody)),
            paginationLinks));
    };
    return Table;
}(react_1.default.Component));
exports.default = Table;
//# sourceMappingURL=Table.js.map