"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var utilities_1 = require("../common/utilities");
var PopperContent_1 = tslib_1.__importDefault(require("../popper-content/PopperContent"));
var Popover = (function (_super) {
    tslib_1.__extends(Popover, _super);
    function Popover(props) {
        var _this = _super.call(this, props) || this;
        _this.tabPressed = false;
        _this.props = props;
        _this.popover = null;
        _this._addTargetEvents = _this._addTargetEvents.bind(_this);
        _this._handleDocumentClick = _this._handleDocumentClick.bind(_this);
        _this._removeTargetEvents = _this._removeTargetEvents.bind(_this);
        _this.getRef = _this.getRef.bind(_this);
        _this._toggle = _this._toggle.bind(_this);
        _this._focusOutTarget = _this._focusOutTarget.bind(_this);
        _this._focusOutPopover = _this._focusOutPopover.bind(_this);
        _this._keyDown = _this._keyDown.bind(_this);
        _this._show = _this._show.bind(_this);
        _this._hide = _this._hide.bind(_this);
        _this.target = null;
        return _this;
    }
    Popover.prototype.componentDidMount = function () {
        this.target = utilities_1.getTargetElement(this.props.target);
        this._handleProps();
    };
    Popover.prototype.componentDidUpdate = function () {
        this._handleProps();
    };
    Popover.prototype.componentWillUnmount = function () {
        this._removeTargetEvents();
    };
    Popover.prototype.getRef = function (ref) {
        this.popover = ref;
    };
    Popover.prototype.render = function () {
        if (!this.props.isOpen) {
            return null;
        }
        var _a = this.props, cssModule = _a.cssModule, isOpen = _a.isOpen, target = _a.target, placementPrefix = _a.placementPrefix, hideArrow = _a.hideArrow, className = _a.className, innerClassName = _a.innerClassName, modifiers = _a.modifiers, placement = _a.placement, container = _a.container, offset = _a.offset, toggle = _a.toggle, boundariesElement = _a.boundariesElement, role = _a.role, attributes = tslib_1.__rest(_a, ["cssModule", "isOpen", "target", "placementPrefix", "hideArrow", "className", "innerClassName", "modifiers", "placement", "container", "offset", "toggle", "boundariesElement", "role"]);
        var classes = utilities_1.mapToCssModules(classnames_1.default('msc-popover-inner', this.props.innerClassName), this.props.cssModule);
        var popperClasses = utilities_1.mapToCssModules(classnames_1.default('msc-popover', 'show', this.props.className), this.props.cssModule);
        return (React.createElement(PopperContent_1.default, { className: popperClasses, target: target, isOpen: isOpen, hideArrow: hideArrow, placement: placement, placementPrefix: placementPrefix, container: container, modifiers: modifiers, focusOut: this._focusOutPopover, offset: offset, boundariesElement: boundariesElement },
            React.createElement("div", tslib_1.__assign({}, attributes, { role: role, className: classes, ref: this.getRef }))));
    };
    Popover.prototype._handleProps = function () {
        if (this.props.isOpen) {
            this._show();
        }
        else {
            this._hide();
        }
    };
    Popover.prototype._show = function () {
        this.tabPressed = false;
        this._addTargetEvents();
        if (!this.props.isOpen) {
            this._toggle();
        }
    };
    Popover.prototype._hide = function () {
        this._removeTargetEvents();
        if (this.props.isOpen) {
            this._toggle();
        }
    };
    Popover.prototype._handleDocumentClick = function (e) {
        if (!this.target) {
            return;
        }
        var target = e.target;
        if (e.target !== this.target
            && !this.target.contains(target)
            && e.target !== this.popover
            && !(this.popover && this.popover.contains(target))) {
            if (this.props.isOpen) {
                this._toggle();
            }
        }
    };
    Popover.prototype._addTargetEvents = function () {
        var _this = this;
        if (!this.target) {
            return;
        }
        if (utilities_1.canUseDOM) {
            ['click', 'touchstart'].forEach(function (event) {
                document.addEventListener(event, _this._handleDocumentClick, true);
            });
            this.target.addEventListener('focusout', this._focusOutTarget, true);
            this.target.addEventListener('keydown', this._keyDown, true);
        }
    };
    Popover.prototype._removeTargetEvents = function () {
        var _this = this;
        if (!this.target) {
            return;
        }
        if (utilities_1.canUseDOM) {
            ['click', 'touchstart'].forEach(function (event) {
                document.removeEventListener(event, _this._handleDocumentClick, true);
            });
            this.target.removeEventListener('focusout', this._focusOutTarget, true);
            this.target.removeEventListener('keydown', this._keyDown, true);
        }
    };
    Popover.prototype._focusOutPopover = function () {
        var _this = this;
        setTimeout(function () {
            var nextFocus = document.activeElement;
            if (_this.popover && !_this.popover.contains(nextFocus)) {
                _this._hide();
            }
        }, 1);
    };
    Popover.prototype._focusOutTarget = function () {
        var _this = this;
        if (this.tabPressed) {
            this.tabPressed = false;
            setTimeout(function () {
                var nextFocus = document.activeElement;
                if (_this.popover && !_this.popover.contains(nextFocus)) {
                    _this._hide();
                }
            }, 1);
        }
    };
    Popover.prototype._keyDown = function (e) {
        if (e.keyCode === 9) {
            this.tabPressed = true;
        }
        else if (this.props.isOpen && e.keyCode === 27 && this.props.toggle) {
            this.props.toggle();
        }
    };
    Popover.prototype._toggle = function () {
        if (this.props.disabled) {
            return;
        }
        if (this.props.toggle) {
            this.props.toggle();
        }
    };
    Popover.defaultProps = {
        isOpen: false,
        placement: 'right',
        toggle: function () { return; },
    };
    return Popover;
}(React.Component));
exports.default = Popover;
//# sourceMappingURL=Popover.js.map