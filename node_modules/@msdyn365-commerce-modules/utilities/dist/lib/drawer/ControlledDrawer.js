"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Msdyn365 = tslib_1.__importStar(require("@msdyn365-commerce/core"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var __1 = require("../");
var Collapse_1 = tslib_1.__importDefault(require("../collapse/Collapse"));
var ControlledDrawer = (function (_super) {
    tslib_1.__extends(ControlledDrawer, _super);
    function ControlledDrawer(props) {
        var _this = _super.call(this, props) || this;
        var _a = _this.props, openGlyph = _a.openGlyph, closeGlyph = _a.closeGlyph;
        _this._toggle = _this._toggle.bind(_this);
        _this.isManuallyToggled = false;
        _this.state = { isOpen: (props.collapseProps && props.collapseProps.isOpen) || false };
        _this.isExpanded = _this.state.isOpen;
        _this.drawerGlyphClass = classnames_1.default('drawer__glyph', _this.props.toggleGlyphClassName || '');
        _this.payLoad = __1.getPayloadObject('click', props.telemetryContent, '');
        if (_this.props.animateGlyph) {
            _this.drawerOpenGlyph = classnames_1.default([_this.drawerGlyphClass, openGlyph || closeGlyph || '']);
            _this.drawerCloseGlyph = _this.drawerOpenGlyph;
        }
        else {
            _this.drawerOpenGlyph = classnames_1.default([_this.drawerGlyphClass, openGlyph || '']);
            _this.drawerCloseGlyph = classnames_1.default([_this.drawerGlyphClass, closeGlyph || '']);
        }
        return _this;
    }
    ControlledDrawer.prototype.render = function () {
        var collapseProps = tslib_1.__assign({}, this.props.collapseProps);
        collapseProps.isOpen = this.isManuallyToggled ? this.state.isOpen : collapseProps.isOpen || false;
        collapseProps.children = this.props.children;
        var drawerClass = classnames_1.default('drawer', this.props.className || '');
        this.isManuallyToggled = false;
        this.isExpanded = collapseProps.isOpen;
        this.state = { isOpen: collapseProps.isOpen };
        this.payLoad.contentAction.etext = collapseProps.isOpen ? __1.TelemetryConstant.Collapse : __1.TelemetryConstant.Expand;
        var attributes = __1.getTelemetryAttributes(this.props.telemetryContent, this.payLoad);
        return (React.createElement("div", { className: drawerClass },
            React.createElement(__1.Button, tslib_1.__assign({}, this.props.toggleButtonProps, { onClick: this._toggle, "aria-expanded": collapseProps.isOpen, block: true, disabled: this.props.disabled, className: 'drawer__button' }, attributes), this._generateDrawerButtonInnerMarkup(collapseProps.isOpen)),
            React.createElement(Collapse_1.default, tslib_1.__assign({}, collapseProps))));
    };
    ControlledDrawer.prototype._generateDrawerButtonInnerMarkup = function (collapseState) {
        var toggleButtonText = this.props.toggleButtonText;
        var drawerButtonTextClass = classnames_1.default('drawer__buttontext', this.props.toggleButtonClassName || '');
        if (this.props.glyphPlacement === 'end') {
            return (React.createElement(React.Fragment, null,
                this._generateTitle(classnames_1.default(drawerButtonTextClass, '__start'), toggleButtonText.toString()),
                this._generateGlyphMarkup('drawer__glyph__end', collapseState)));
        }
        var isStart = this.props.glyphPlacement === 'start';
        var additionalClassName = "__" + (isStart ? 'end' : 'start');
        return (React.createElement(React.Fragment, null,
            isStart && this._generateGlyphMarkup('drawer__glyph__start', collapseState),
            this._generateTitle(classnames_1.default(drawerButtonTextClass, additionalClassName), this.props.toggleButtonText.toString())));
    };
    ControlledDrawer.prototype._generateTitle = function (titleLClassName, title) {
        if (this.props.onTextChange && this.props.requestContext) {
            return (React.createElement(Msdyn365.Text, { tag: 'span', text: title, className: titleLClassName, editProps: { onEdit: this.props.onTextChange, requestContext: this.props.requestContext } }));
        }
        else {
            return (React.createElement("span", { className: titleLClassName }, title));
        }
    };
    ControlledDrawer.prototype._generateGlyphMarkup = function (location, collapseState) {
        var glyphClass = (collapseState ? this.drawerOpenGlyph : this.drawerCloseGlyph) + " " + location;
        return (React.createElement("span", { className: glyphClass }));
    };
    ControlledDrawer.prototype._toggle = function (e) {
        e.preventDefault();
        this.isExpanded = !this.isExpanded;
        this.setState({ isOpen: this.isExpanded });
        this.isManuallyToggled = true;
        if (this.props.onToggle) {
            this.props.onToggle(this.state);
        }
    };
    return ControlledDrawer;
}(React.Component));
exports.default = ControlledDrawer;
//# sourceMappingURL=ControlledDrawer.js.map