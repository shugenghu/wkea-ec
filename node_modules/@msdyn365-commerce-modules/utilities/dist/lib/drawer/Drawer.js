"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var __1 = require("../");
var Collapse_1 = tslib_1.__importDefault(require("../collapse/Collapse"));
var Drawer = (function (_super) {
    tslib_1.__extends(Drawer, _super);
    function Drawer(props) {
        var _this = _super.call(this, props) || this;
        _this._toggle = _this._toggle.bind(_this);
        _this.isManuallyToggled = false;
        _this.state = { isOpen: (props.collapseProps && props.collapseProps.isOpen) || false };
        _this.drawerGlyphClass = classnames_1.default('drawer__glyph', _this.props.toggleGlyphClassName ?
            _this.props.toggleGlyphClassName : '');
        if (_this.props.animateGlyph) {
            _this.drawerOpenGlyph = classnames_1.default(_this.drawerGlyphClass, _this.props.openGlyph ?
                _this.props.openGlyph :
                _this.props.closeGlyph ?
                    _this.props.closeGlyph : '');
            _this.drawerCloseGlyph = _this.drawerOpenGlyph;
        }
        else {
            _this.drawerOpenGlyph = classnames_1.default(_this.drawerGlyphClass, _this.props.openGlyph ?
                _this.props.openGlyph : '');
            _this.drawerCloseGlyph = classnames_1.default(_this.drawerGlyphClass, _this.props.closeGlyph ?
                _this.props.closeGlyph : '');
        }
        return _this;
    }
    Drawer.prototype.render = function () {
        var collapseProps = tslib_1.__assign({}, this.props.collapseProps);
        if (collapseProps.isOpen === undefined || this.isManuallyToggled) {
            collapseProps.isOpen = this.state.isOpen;
        }
        else {
            this.state.isOpen = collapseProps.isOpen;
        }
        collapseProps.children = this.props.children;
        var drawerClass = classnames_1.default('drawer', this.props.className ?
            this.props.className : '');
        this.isManuallyToggled = false;
        return (React.createElement("div", { className: drawerClass },
            React.createElement(__1.Button, tslib_1.__assign({}, this.props.toggleButtonProps, { onClick: this._toggle, "aria-expanded": collapseProps.isOpen, block: true, disabled: this.props.disabled, className: 'drawer__button', color: 'secondary' }), this._generateDrawerButtonInnerMarkup(collapseProps.isOpen)),
            React.createElement(Collapse_1.default, tslib_1.__assign({}, collapseProps))));
    };
    Drawer.prototype._generateDrawerButtonInnerMarkup = function (collapseState) {
        var drawerButtonTextClass = classnames_1.default('drawer__buttontext', this.props.toggleButtonClassName ?
            this.props.toggleButtonClassName : '');
        if (this.props.glyphPlacement === 'end') {
            return (React.createElement(React.Fragment, null,
                React.createElement("span", { className: classnames_1.default(drawerButtonTextClass, '__start') }, this.props.toggleButtonText),
                this._generateGlyphMarkup('drawer__glyph__end', collapseState)));
        }
        if (this.props.glyphPlacement === 'start') {
            return (React.createElement(React.Fragment, null,
                this._generateGlyphMarkup('drawer__glyph__start', collapseState),
                React.createElement("span", { className: classnames_1.default(drawerButtonTextClass, '__end') }, this.props.toggleButtonText)));
        }
        else {
            return React.createElement("span", { className: classnames_1.default(drawerButtonTextClass, '__start') }, this.props.toggleButtonText);
        }
    };
    Drawer.prototype._generateGlyphMarkup = function (location, collapseState) {
        var glyphClass = collapseState ? this.drawerOpenGlyph : this.drawerCloseGlyph;
        glyphClass = glyphClass + " " + location;
        return (React.createElement("span", { className: glyphClass }));
    };
    Drawer.prototype._toggle = function (e) {
        e.preventDefault();
        this.setState({ isOpen: !this.state.isOpen });
        this.isManuallyToggled = true;
        if (this.props.onToggle) {
            this.props.onToggle(this.state);
        }
    };
    return Drawer;
}(React.Component));
exports.default = Drawer;
//# sourceMappingURL=Drawer.js.map