"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var __1 = require("..");
var Flipper = (function (_super) {
    tslib_1.__extends(Flipper, _super);
    function Flipper(props) {
        var _this = _super.call(this, props) || this;
        _this.payLoad = __1.getPayloadObject('click', _this.props.telemetryContent, _this.props.telemetryLabel);
        return _this;
    }
    Flipper.prototype.render = function () {
        var _a = this.props, className = _a.className, glyphProps = _a.glyphProps, size = _a.size, displayTooltip = _a.displayTooltip, disabled = _a.disabled, telemetryContent = _a.telemetryContent, telemetryLabel = _a.telemetryLabel, props = tslib_1.__rest(_a, ["className", "glyphProps", "size", "displayTooltip", "disabled", "telemetryContent", "telemetryLabel"]);
        var sizeClass = size === 'small' ? 'msc-flipper__small' : size === 'large' ? 'msc-flipper__large' : '';
        var classNames = className ? "msc-flipper " + sizeClass + " " + className : "msc-flipper " + sizeClass;
        var attribute = __1.getTelemetryAttributes(telemetryContent, this.payLoad);
        glyphProps.className = glyphProps.className + " msc-no-rtl-flip-required";
        return (React.createElement(React.Fragment, null,
            React.createElement("button", tslib_1.__assign({ id: props.id, disabled: disabled, className: classNames }, props, attribute),
                React.createElement("i", tslib_1.__assign({}, glyphProps, { "aria-hidden": true }))),
            displayTooltip && !disabled && React.createElement(__1.UncontrolledTooltip, { trigger: 'hover', target: props.id },
                " ",
                props['aria-label'])));
    };
    return Flipper;
}(React.PureComponent));
exports.default = Flipper;
//# sourceMappingURL=Flipper.js.map