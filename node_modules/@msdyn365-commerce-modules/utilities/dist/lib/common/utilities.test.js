"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utilities = tslib_1.__importStar(require("./utilities"));
describe('test clamp function', function () {
    it('when min is greater then max it returns 0', function () {
        expect(utilities.clamp(50, 100, 50)).toBe(0);
    });
});
describe('test to upper function', function () {
    it('returns empty when nothing is passed to it', function () {
        expect(utilities.toUpperCaseFirstChar('')).toBe('');
    });
    it('returns upper cased string when string is passed', function () {
        expect(utilities.toUpperCaseFirstChar('foo')).toBe('Foo');
        expect(utilities.toUpperCaseFirstChar('bar')).toBe('Bar');
        expect(utilities.toUpperCaseFirstChar('achtung')).toBe('Achtung');
    });
    it('returns upper cased string when string with one character is passed', function () {
        expect(utilities.toUpperCaseFirstChar('f')).toBe('F');
    });
});
describe('mapToCssModules test cases', function () {
    it('returns className when cssModule is null', function () {
        expect(utilities.mapToCssModules('btn-large', null)).toBe('btn-large');
    });
    it('returns empty when nothing is passed to it', function () {
        var obj = new Object();
        expect(utilities.mapToCssModules('', obj)).toBe('');
    });
});
describe('getDimensions test cases', function () {
    it('returns null when containerElement is null', function () {
        expect(utilities.getDimensions(null)).toBe(null);
    });
});
describe('isRef test cases', function () {
    it('returns false when target is null', function () {
        expect(utilities.isRef(null)).toBe(false);
    });
    it('returns false when target is not null', function () {
        var obj = new Object();
        expect(utilities.isRef(obj)).toBe(false);
    });
});
describe('isElement test cases', function () {
    it('returns false when target is null', function () {
        expect(utilities.isElement(null)).toBe(false);
    });
    it('returns false when target is not null', function () {
        var obj = new Object();
        expect(utilities.isElement(obj)).toBe(false);
    });
});
describe('getCSS', function () {
    it('Returns the inline style of the element', function () {
        var root = document.getElementById('root');
        var div1 = document.createElement('div');
        div1.setAttribute('class', 'choice-summary__item');
        div1.style.display = 'block';
        root.appendChild(div1);
        expect(utilities.getCSS(div1, 'display')).toEqual('block');
    });
    it('Returns the computed style of the element', function () {
        var root = document.getElementById('root');
        var div1 = document.createElement('div');
        div1.setAttribute('class', 'choice-summary__item');
        root.appendChild(div1);
        expect(utilities.getCSS(div1, 'display')).toEqual(undefined);
    });
});
describe('htmlCollectionToArray', function () {
    it('convers an hmltCollection to an array', function () {
        var root = document.getElementById('root');
        var div1 = document.createElement('div');
        div1.setAttribute('class', 'myclass');
        root.appendChild(div1);
        var div2 = document.createElement('div');
        div2.setAttribute('class', 'myclass');
        root.appendChild(div2);
        var collection = document.getElementsByClassName('myclass');
        expect(utilities.htmlCollectionToArray(collection)).toEqual([div1, div2]);
    });
});
describe('addThrottledEvent', function () {
    it('', function (done) {
        var counter = 0;
        var span = document.createElement('span');
        utilities.addThrottledEvent(span, 'click', function () {
            counter++;
        });
        span.click();
        span.click();
        expect(counter).toBe(1);
        setTimeout(function () {
            expect(counter).toBe(2);
            done();
        }, 250);
    });
    it('should throttle events that come in under the threshold', function (done) {
        var counter = 0;
        var span = document.createElement('span');
        utilities.addThrottledEvent(span, 'click', function () {
            counter++;
        });
        span.click();
        span.click();
        span.click();
        span.click();
        span.click();
        expect(counter).toBe(1);
        setTimeout(function () {
            expect(counter).toBe(2);
            done();
        }, 250);
    });
    it('should add an event throttle with a custom throttle', function (done) {
        var counter = 0;
        var customThreshold = 400;
        var subThreshold1 = 250;
        var subThreshold2 = customThreshold - 151;
        var span = document.createElement('span');
        utilities.addThrottledEvent(span, 'click', function () {
            counter++;
        }, customThreshold);
        span.click();
        span.click();
        expect(counter).toBe(1);
        setTimeout(function () {
            expect(counter).toBe(1);
            setTimeout(function () {
                expect(counter).toBe(2);
                done();
            }, subThreshold2);
        }, subThreshold1);
    });
});
describe('extend test cases', function () {
    it('should return null if parameters are null', function () {
        expect(utilities.extend()).toBe(null);
    });
    it('should return passed value if only one parameter is passed and it is not boolean', function () {
        var arr = 'abc';
        expect(utilities.extend(arr)).toBe('abc');
    });
    it('should return null if only one parameter is passed and it is true', function () {
        expect(utilities.extend(true)).toBe(null);
    });
    it('should return second parameter if only two parameter is passed and the first one is true', function () {
        expect(utilities.extend(true, 'abc')).toBe('abc');
    });
    it('should return second parameter if only two parameter is passed and the first one is true', function () {
        var source = {
            ttmlNamespace: '',
            ttmlStyleNamespace: '',
            ttmlParameterNamespace: '',
            ttmlMetaNamespace: '',
            idPrefix: '',
            mediaFrameRate: 30,
            mediaFrameRateMultiplier: 1,
            mediaSubFrameRate: 1,
            mediaTickRate: 1000,
            supportedTimeBase: 'media',
            rootContainerRegionDimensions: null,
            relatedMediaObjectRegion: null,
            cellResolution: {
                rows: 15, columns: 32
            },
            defaultRegionStyle: {
                backgroundColor: 'transparent',
                color: '#E8E9EA',
                direction: 'ltr',
                display: 'auto',
                displayAlign: 'before',
                extent: 'auto',
                fontFamily: 'default',
                fontSize: '1c',
                fontStyle: 'normal',
                fontWeight: 'normal',
                lineHeight: 'normal',
                opacity: 1,
                origin: 'auto',
                overflow: 'hidden', padding: 0,
                showBackground: 'always',
                textAlign: 'start',
                textDecoration: 'none',
                textOutline: 'none',
                unicodeBidi: 'normal',
                visibility: 'visible',
                wrapOption: 'normal',
                writingMode: 'lrtb'
            },
            fontMap: {
                default: 'Lucida sans typewriter, Lucida console, Consolas',
                monospaceSerif: 'Courier',
                proportionalSerif: 'Times New Roman, Serif',
                monospaceSansSerif: 'Lucida sans typewriter, Lucida console, Consolas',
                proportionalSansSerif: 'Arial, Sans-serif',
                casual: 'Verdana',
                cursive: 'Zapf-Chancery, Segoe script, Cursive',
                smallCaps: 'Arial, Helvetica',
                monospace: 'Lucida sans typewriter, Lucida console, Consolas',
                sansSerif: 'Arial, Sans-serif',
                serif: 'Times New Roman, Serif'
            }
        };
        var target = {
            idPrefix: '',
            fontMap: {
                default: 'Segoe ui, Arial'
            },
            relatedMediaObjectRegion: {
                width: 639,
                height: 319
            }
        };
        utilities.extend(true, source, target, 'ghi', undefined, 123, 456);
        utilities.extend(true, [['abc', 'def'], 'def'], [['ghi', 'jkl'], 'jkl'], 'ghi', undefined, 123, 456);
        utilities.extend(true, [[['abc', 'def'], 'abc', 'def'], 'def'], [[['abc', 'def'], 'ghi', 'jkl'], 'jkl'], 'ghi', undefined, 123, 456);
        utilities.extend(true, ['def'], [['ghi', 'jkl'], 'jkl'], 'ghi', undefined, 123, 456);
    });
});
//# sourceMappingURL=utilities.test.js.map