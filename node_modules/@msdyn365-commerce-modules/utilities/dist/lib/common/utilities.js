"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function clamp(value, min, max) {
    if (min <= max) {
        return Math.min(Math.max(value, min), max);
    }
    else {
        return 0;
    }
}
exports.clamp = clamp;
function toUpperCaseFirstChar(value) {
    if (value.length > 1) {
        return value.charAt(0).toUpperCase() + value.substr(1);
    }
    if (value.length === 1) {
        return value.charAt(0).toUpperCase();
    }
    else {
        return '';
    }
}
exports.toUpperCaseFirstChar = toUpperCaseFirstChar;
function htmlCollectionToArray(nodeList) {
    return Array.prototype.slice.call(nodeList);
}
exports.htmlCollectionToArray = htmlCollectionToArray;
function getCSS(element, property) {
    var style = element.style[property];
    if (!style) {
        style = getComputedStyle(element)[property];
    }
    return style;
}
exports.getCSS = getCSS;
function createThrottledEvent(listener, threshold) {
    var timer;
    var last = 0;
    return function (event) {
        var now = Date.now();
        if (timer) {
            clearTimeout(timer);
            timer = undefined;
        }
        if (!!last && (now < last + threshold)) {
            timer = setTimeout(function () {
                last = Date.now();
                listener(event);
            }, threshold - (now - last));
        }
        else {
            last = now;
            listener(event);
        }
    };
}
exports.createThrottledEvent = createThrottledEvent;
function addThrottledEvent(target, name, listener, threshold) {
    if (threshold === void 0) { threshold = 150; }
    var throttledEventHandler = createThrottledEvent(listener, threshold);
    target.addEventListener(name, throttledEventHandler, false);
    return throttledEventHandler;
}
exports.addThrottledEvent = addThrottledEvent;
function mapToCssModules(className, cssModule) {
    if (className === void 0) { className = ''; }
    if (!cssModule) {
        return className;
    }
    return className
        .split(' ')
        .map(function (c) { return cssModule[c] || c; })
        .join(' ');
}
exports.mapToCssModules = mapToCssModules;
function isRef(target) {
    if (!target) {
        return false;
    }
    return target.current !== undefined;
}
exports.isRef = isRef;
function isElement(target) {
    if (!target) {
        return false;
    }
    return target.addEventListener !== undefined;
}
exports.isElement = isElement;
exports.keyCodes = {
    esc: 27,
    space: 32,
    tab: 9,
    up: 38,
    down: 40,
    enter: 13
};
var warned = {};
function warnOnce(message) {
    if (!warned[message]) {
        if (typeof console !== 'undefined') {
            throw new Error(message);
        }
        warned[message] = true;
    }
}
exports.warnOnce = warnOnce;
exports.canUseDOM = !!(typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement);
function findDOMElements(target) {
    try {
        if (typeof target === 'string' && exports.canUseDOM) {
            var selection = document.querySelectorAll(target);
            if (!selection.length) {
                selection = document.querySelectorAll("#" + target);
            }
            if (!selection.length) {
                throw new Error();
            }
            return selection;
        }
        return target;
    }
    catch (_a) {
        console.error("The target '" + target + "' could not be identified in the dom, tip: check spelling");
        return null;
    }
}
exports.findDOMElements = findDOMElements;
function getTarget(target) {
    var selection = findDOMElements(target);
    if (selection && selection.length) {
        return selection[0];
    }
    return target;
}
exports.getTarget = getTarget;
function getTargetElement(target) {
    var targetElement = getTarget(target);
    if (isRef(targetElement)) {
        return targetElement.current;
    }
    if (isElement(targetElement)) {
        return targetElement;
    }
    return null;
}
exports.getTargetElement = getTargetElement;
exports.TransitionTimeouts = {
    Fade: 150,
    Collapse: 350,
    Modal: 300,
    Carousel: 600
};
exports.focusableElements = [
    'a[href]',
    'area[href]',
    'input:not([disabled]):not([type=hidden])',
    'select:not([disabled])',
    'textarea:not([disabled])',
    'button:not([disabled])',
    'iframe',
    'object',
    'embed',
    '[tabindex]:not(.modal)',
    'audio[controls]',
    'video[controls]',
    '[contenteditable]:not([contenteditable="false"])',
];
function extend() {
    var parameters = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        parameters[_i] = arguments[_i];
    }
    if (!parameters || !parameters.length) {
        return null;
    }
    var recursive = (typeof (parameters[0]) === 'boolean') && parameters[0];
    if (parameters.length < 2) {
        return recursive ? null : parameters[0];
    }
    if (recursive && (parameters.length < 3)) {
        return parameters[1];
    }
    var target = recursive ? parameters[1] : parameters[0];
    for (var paramIndex = recursive ? 2 : 1; paramIndex < parameters.length; paramIndex++) {
        if (parameters[paramIndex] !== undefined) {
            for (var _a = 0, _b = Object.keys(parameters[paramIndex]); _a < _b.length; _a++) {
                var key = _b[_a];
                if (parameters[paramIndex].hasOwnProperty(key)) {
                    var source = parameters[paramIndex][key];
                    if (recursive) {
                        var isSourceArray = Array.isArray
                            ? Array.isArray(source)
                            : ({}).toString.call(source) === '[object Array]';
                        var isTargetArray = !!target[key] && (Array.isArray
                            ? Array.isArray(target[key])
                            : ({}).toString.call(target[key]) === '[object Array]');
                        var isSourceObject = !isSourceArray && (typeof source === 'object');
                        var isTargetObject = !isTargetArray && !!target[key] && (typeof target[key] === 'object');
                        if (isSourceArray && isTargetArray) {
                            for (var arrayIndex = 0; arrayIndex < source.length; arrayIndex++) {
                                isSourceArray = Array.isArray
                                    ? Array.isArray(source[arrayIndex])
                                    : ({}).toString.call(source[arrayIndex]) === '[object Array]';
                                isTargetArray = !!target[key][arrayIndex] && (Array.isArray
                                    ? Array.isArray(target[key][arrayIndex])
                                    : ({}).toString.call(target[key][arrayIndex]) === '[object Array]');
                                isSourceObject = !isSourceArray && (typeof source[arrayIndex] === 'object');
                                isTargetObject = !isTargetArray && !!target[key][arrayIndex] && (typeof target[key][arrayIndex] === 'object');
                                if (isSourceArray) {
                                    target[key][arrayIndex] = extend(true, isTargetArray ? target[key][arrayIndex] : [], source[arrayIndex]);
                                }
                                else if (isSourceObject) {
                                    target[key][arrayIndex] = extend(true, isTargetObject ? target[key][arrayIndex] : {}, source[arrayIndex]);
                                }
                                else {
                                    target[key][arrayIndex] = source[arrayIndex];
                                }
                            }
                            continue;
                        }
                        else if (isSourceArray) {
                            target[key] = extend(true, [], source);
                            continue;
                        }
                        else if (isSourceObject) {
                            target[key] = extend(true, isTargetObject ? target[key] : {}, source);
                            continue;
                        }
                    }
                    target[key] = source;
                }
            }
        }
    }
    return target;
}
exports.extend = extend;
function getDimensions(containerElement) {
    if (containerElement === null) {
        return null;
    }
    return {
        width: containerElement.clientWidth,
        height: containerElement.clientHeight
    };
}
exports.getDimensions = getDimensions;
//# sourceMappingURL=utilities.js.map