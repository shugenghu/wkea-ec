"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var HTMLExtensions = tslib_1.__importStar(require("./htmlExtensions"));
describe('HTMLExtensions.getText test', function () {
    it('returns an elements textContent', function () {
        var element = document.createElement('div');
        var textNode = document.createTextNode('text yeah');
        element.appendChild(textNode);
        expect(HTMLExtensions.getText(element)).toBe('text yeah');
    });
    it('returns an empty string when there is no text inside an element', function () {
        var element = document.createElement('div');
        expect(HTMLExtensions.getText(element)).toBe('');
    });
    it('returns an empty string when an element is undefined', function () {
        expect(HTMLExtensions.getText(undefined)).toBe('');
    });
});
describe('HTMLExtensions.addClass test', function () {
    it('Add a class to element', function () {
        var element = document.createElement('div');
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');
    });
    it('Add multiple classes to element', function () {
        var element = document.createElement('div');
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');
        HTMLExtensions.addClass(element, 'testClass1');
        expect(element.classList[0]).toBe('testClass');
        expect(element.classList[1]).toBe('testClass1');
    });
    it('Add empty class to element', function () {
        var element = document.createElement('div');
        HTMLExtensions.addClass(element, '');
        expect(element.className).toBe('');
    });
    it('Check class is added in case classList is null', function () {
        var element = document.createElement('div');
        Object.defineProperty(element, 'classList', {
            get: function () { return null; },
            configurable: true,
        });
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');
    });
    it('Add same class to element', function () {
        var element = document.createElement('div');
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');
    });
});
describe('HTMLExtensions.hasClass test', function () {
    it('Check element has that class', function () {
        var element = document.createElement('div');
        element.className = 'testClass';
        expect(HTMLExtensions.hasClass(element, 'testClass')).toBe(true);
    });
    it('Check element doesnot has that class', function () {
        var element = document.createElement('div');
        element.className = 'testClass';
        expect(HTMLExtensions.hasClass(element, 'testClass1')).toBe(false);
    });
    it('Add multiple classes to element and check again ', function () {
        var element = document.createElement('div');
        element.classList.add('testClass');
        element.classList.add('testClass1');
        expect(HTMLExtensions.hasClass(element, 'testClass1')).toBe(true);
    });
    it('Check empty class returns false', function () {
        var element = document.createElement('div');
        element.className = 'testClass';
        expect(HTMLExtensions.hasClass(element, '')).toBe(false);
    });
});
describe('HTMLExtensions.nodeListToArray test', function () {
    it('Check attribute count', function () {
        var element = document.createElement('div');
        element.setAttribute('id', 'element1');
        element.setAttribute('name', 'abc');
        element.setAttribute('info', 'info1');
        var nodes = HTMLExtensions.nodeListToArray(element.attributes);
        expect(nodes.length).toBe(3);
    });
    it('Check after passing null it returns empty', function () {
        var element = document.createElement('div');
        var nodes = HTMLExtensions.nodeListToArray(element.attributes);
        expect(nodes.length).toBe(0);
    });
    it('Check after passing null it returns empty', function () {
        var element = null;
        var nodes = HTMLExtensions.nodeListToArray(element);
        expect(nodes.length).toBe(0);
    });
});
describe('HTMLExtensions.selectElements test', function () {
    it('Check attribute count', function () {
        var element = document.createElement('div');
        var spanElement = document.createElement('span');
        var brElement = document.createElement('br');
        var divElement = document.createElement('div');
        element.appendChild(spanElement);
        element.appendChild(brElement);
        element.appendChild(divElement);
        var elements = HTMLExtensions.selectElements('span, br', element);
        expect(elements.length).toBe(2);
    });
    it('Select div based upon class name ', function () {
        var element = document.createElement('div');
        var divElement = document.createElement('div');
        divElement.className = 'test';
        var divElement1 = document.createElement('div');
        divElement1.className = 'test';
        var divElement2 = document.createElement('div');
        element.appendChild(divElement);
        element.appendChild(divElement2);
        element.appendChild(divElement1);
        var elements = HTMLExtensions.selectElements('.test', element);
        expect(elements.length).toBe(2);
    });
    it('Select div based upon id', function () {
        var element = document.createElement('div');
        var divElement = document.createElement('div');
        divElement.id = 'test';
        var divElement1 = document.createElement('div');
        divElement1.id = 'test1';
        var divElement2 = document.createElement('div');
        element.appendChild(divElement);
        element.appendChild(divElement2);
        element.appendChild(divElement1);
        var elements = HTMLExtensions.selectElements('#test', element);
        expect(elements.length).toBe(1);
    });
    it('check empty result is returned if selector is empty', function () {
        var element = document.createElement('div');
        var divElement = document.createElement('div');
        divElement.id = 'test';
        var divElement1 = document.createElement('div');
        divElement1.id = 'test1';
        var divElement2 = document.createElement('div');
        element.appendChild(divElement);
        element.appendChild(divElement2);
        element.appendChild(divElement1);
        var elements = HTMLExtensions.selectElements('', element);
        expect(elements.length).toBe(0);
    });
});
describe('HTMLExtensions.css test', function () {
    it('Add css to div and test', function () {
        var element = document.createElement('div');
        HTMLExtensions.css(element, 'display', 'none');
        expect(HTMLExtensions.css(element, 'display')).toBe('none');
    });
    it('Apply css to null element and it should return null', function () {
        var element = null;
        HTMLExtensions.css(element, 'display', 'none');
        expect(HTMLExtensions.css(element, 'display')).toBe(null);
    });
    it('Apply css to element & check', function () {
        var element = document.createElement('div');
        HTMLExtensions.css(element, 'margin', '');
        expect(HTMLExtensions.css(element, 'margin')).toBe(undefined);
    });
});
describe('HTMLExtensions.selectFirstElement test', function () {
    it('Check it is returning the first element', function () {
        var element = document.createElement('div');
        var spanElement = document.createElement('span');
        var brElement = document.createElement('br');
        var divElement = document.createElement('div');
        element.appendChild(spanElement);
        element.appendChild(brElement);
        element.appendChild(divElement);
        var testElement = HTMLExtensions.selectFirstElement('span', element);
        expect(testElement).not.toBe(null);
    });
    it('Check it is returning the first element', function () {
        var element = document.createElement('div');
        var spanElement = document.createElement('span');
        var brElement = document.createElement('br');
        var divElement = document.createElement('div');
        element.appendChild(spanElement);
        element.appendChild(brElement);
        element.appendChild(divElement);
        var testElement = HTMLExtensions.selectFirstElement('b', element);
        expect(testElement).toBe(null);
    });
});
//# sourceMappingURL=htmlExtensions.test.js.map