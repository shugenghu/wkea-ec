"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var stringExtensions_1 = require("./stringExtensions");
function getText(element) {
    return !!element ? element.textContent || '' : '';
}
exports.getText = getText;
function addClass(element, cssClass) {
    if ((!!element) && (!stringExtensions_1.isNullOrWhiteSpace(cssClass)) && (!hasClass(element, cssClass))) {
        if (element.classList) {
            element.classList.add(cssClass);
        }
        else {
            element.className = stringExtensions_1.trim(element.className + " " + cssClass);
        }
    }
}
exports.addClass = addClass;
function hasClass(element, cssClass) {
    if ((!element) || stringExtensions_1.isNullOrWhiteSpace(cssClass)) {
        return false;
    }
    else if (element.classList) {
        return element.classList.contains(cssClass);
    }
    else {
        return ("' ' " + element.className + " ' '").indexOf("' ' " + stringExtensions_1.trim(cssClass) + "  ' '") > -1;
    }
}
exports.hasClass = hasClass;
function nodeListToArray(nodeList) {
    if (!nodeList) {
        return [];
    }
    var elements = [];
    for (var n = 0; n < nodeList.length; n++) {
        elements.push(nodeList[n]);
    }
    return elements;
}
exports.nodeListToArray = nodeListToArray;
function selectElements(selector, context) {
    return selectElementsT(selector, context);
}
exports.selectElements = selectElements;
function selectElementsT(selector, context) {
    if (stringExtensions_1.isNullOrWhiteSpace(selector) || selector === '#') {
        return [];
    }
    var currentContext = context || document;
    if (/^[\#.]?[\w-]+$/.test(selector)) {
        switch (selector[0]) {
            case '.':
                if (currentContext.getElementsByClassName) {
                    return nodeListToArray(currentContext.getElementsByClassName(selector.slice(1)));
                }
                else {
                    return nodeListToArray(currentContext.querySelectorAll(selector));
                }
            case '#':
                var element = currentContext.querySelector(selector);
                return (element ? [element] : []);
        }
        return nodeListToArray(currentContext.getElementsByTagName(selector));
    }
    return nodeListToArray(currentContext.querySelectorAll(selector));
}
exports.selectElementsT = selectElementsT;
function css(element, property, value) {
    if (!element) {
        return null;
    }
    if (!!value || value === '') {
        element.style[property] = value;
    }
    else {
        value = element.style[property];
        if (stringExtensions_1.isNullOrWhiteSpace(value)) {
            value = getComputedStyle(element);
            value = value[property];
        }
        return value;
    }
}
exports.css = css;
function removeInnerHtml(parentElement) {
    if (parentElement) {
        parentElement.innerHTML = '';
    }
}
exports.removeInnerHtml = removeInnerHtml;
function selectFirstElement(selector, context) {
    var elementsSelected = selectElementsT(selector, context);
    return (!elementsSelected || !elementsSelected.length) ? null : elementsSelected[0];
}
exports.selectFirstElement = selectFirstElement;
//# sourceMappingURL=htmlExtensions.js.map