"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var react_popper_1 = require("react-popper");
var utilities_1 = require("../common/utilities");
var PopperContent = (function (_super) {
    tslib_1.__extends(PopperContent, _super);
    function PopperContent(props) {
        var _this = _super.call(this, props) || this;
        _this._handlePlacementChange = _this._handlePlacementChange.bind(_this);
        _this.state = { isOpen: props.isOpen };
        return _this;
    }
    PopperContent.prototype.componentDidMount = function () {
        this._handleProps();
    };
    PopperContent.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.isOpen !== prevProps.isOpen) {
            this._handleProps();
        }
    };
    PopperContent.prototype.render = function () {
        return this.props.isOpen ? this._renderChildren() : null;
    };
    PopperContent.prototype._handlePlacementChange = function (data) {
        if (this.state.placement !== data.placement) {
            this.setState({ placement: data.placement });
        }
        return data;
    };
    PopperContent.prototype._handleProps = function () {
        if (this.props.container !== 'inline') {
            if (this.props.isOpen) {
                this._show();
            }
            else {
                this._hide();
            }
        }
    };
    PopperContent.prototype._hide = function () {
        this.setState({ isOpen: false });
    };
    PopperContent.prototype._show = function () {
        this.setState({ isOpen: true });
    };
    PopperContent.prototype._renderChildren = function () {
        var _a = this.props, cssModule = _a.cssModule, children = _a.children, isOpen = _a.isOpen, flip = _a.flip, offset = _a.offset, target = _a.target, fallbackPlacement = _a.fallbackPlacement, focusOut = _a.focusOut, placementPrefix = _a.placementPrefix, arrowClassNameOrUndefined = _a.arrowClassName, hideArrow = _a.hideArrow, className = _a.className, tag = _a.tag, modifiers = _a.modifiers, boundariesElement = _a.boundariesElement, attrs = tslib_1.__rest(_a, ["cssModule", "children", "isOpen", "flip", "offset", "target", "fallbackPlacement", "focusOut", "placementPrefix", "arrowClassName", "hideArrow", "className", "tag", "modifiers", "boundariesElement"]);
        var arrowClassName = utilities_1.mapToCssModules(classnames_1.default('msc-arrow', arrowClassNameOrUndefined), cssModule);
        var placement = (this.state.placement || attrs.placement || 'auto').split('-')[0];
        var popperClassName = utilities_1.mapToCssModules(classnames_1.default(className, placementPrefix ? placementPrefix + "-" + placement : placement), this.props.cssModule);
        var extendedModifiers = tslib_1.__assign({ offset: { offset: offset }, flip: { enabled: flip, behavior: fallbackPlacement }, preventOverflow: { boundariesElement: boundariesElement }, update: {
                enabled: true,
                order: 950,
                fn: this._handlePlacementChange
            } }, modifiers);
        var targetElement = utilities_1.getTargetElement(target);
        if (targetElement === null) {
            return null;
        }
        return (React.createElement(react_popper_1.Popper, tslib_1.__assign({}, attrs, { modifiers: extendedModifiers, target: targetElement, component: tag, onBlur: focusOut, className: popperClassName, "x-placement": this.state.placement || attrs.placement, style: { display: this.state.isOpen ? 'block' : 'none' } }),
            children,
            !hideArrow && React.createElement(react_popper_1.Arrow, { className: arrowClassName })));
    };
    PopperContent.defaultProps = {
        boundariesElement: 'scrollParent',
        placement: 'auto',
        hideArrow: false,
        isOpen: false,
        offset: 0,
        fallbackPlacement: 'flip',
        flip: true,
        container: 'body',
        modifiers: {}
    };
    return PopperContent;
}(React.Component));
exports.default = PopperContent;
//# sourceMappingURL=PopperContent.js.map