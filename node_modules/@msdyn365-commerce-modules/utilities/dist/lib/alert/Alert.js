"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var utilities_1 = require("../common/utilities");
var Fade_1 = tslib_1.__importDefault(require("../fade/Fade"));
var UncontrolledTooltip_1 = tslib_1.__importDefault(require("../tooltip/UncontrolledTooltip"));
var Alert = (function (_super) {
    tslib_1.__extends(Alert, _super);
    function Alert() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Alert.prototype.render = function () {
        var _a = this.props, id = _a.id, className = _a.className, closeClassName = _a.closeClassName, cssModule = _a.cssModule, tag = _a.tag, toggle = _a.toggle, color = _a.color, isOpen = _a.isOpen, children = _a.children, transition = _a.transition, fade = _a.fade, assertive = _a.assertive, includeAlertClass = _a.includeAlertClass, ariaLabel = _a["aria-label"];
        var classes = includeAlertClass ? utilities_1.mapToCssModules(classnames_1.default(className, 'msc-alert', "msc-alert-" + color), cssModule) : className;
        var closeClasses = utilities_1.mapToCssModules(classnames_1.default('close', closeClassName), cssModule);
        var alertTransition = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, Fade_1.default.defaultProps), transition), { baseClass: fade ? 'fade' : '', timeout: fade ? (transition ? transition.timeout : 0) : 0, appear: !!fade, enter: !!fade, exit: !!fade });
        var Tag = tag || 'div';
        var buttonId = fade ? 'buttonDismiss' : 'buttonFadeless';
        var innerContent = (React.createElement(React.Fragment, null,
            toggle ?
                React.createElement("div", null,
                    React.createElement("button", { type: 'button', id: buttonId, className: closeClasses, "aria-label": this.props.closeAriaLabel, onClick: toggle }),
                    React.createElement(UncontrolledTooltip_1.default, { id: 'closeTooltip', target: "#" + buttonId, placement: 'top' }, "close"))
                : null,
            children));
        var style = isOpen ? undefined : { display: 'none' };
        if (fade && assertive) {
            return (React.createElement(Tag, { style: style, id: id, className: classes, role: 'alert', "aria-live": 'assertive', "aria-label": ariaLabel },
                React.createElement(Fade_1.default, tslib_1.__assign({}, alertTransition, { tag: Tag, in: isOpen }), innerContent)));
        }
        else if (fade) {
            return (React.createElement(Fade_1.default, tslib_1.__assign({ id: id }, alertTransition, { tag: Tag, className: classes, role: 'alert', in: isOpen }), innerContent));
        }
        else {
            return (React.createElement(Tag, { style: style, id: id, className: classes, role: 'alert', "aria-live": assertive ? 'assertive' : undefined, "aria-label": ariaLabel }, innerContent));
        }
    };
    Alert.defaultProps = {
        color: 'success',
        isOpen: true,
        tag: 'div',
        closeAriaLabel: 'Close',
        fade: true,
        assertive: false,
        includeAlertClass: true,
        transition: tslib_1.__assign(tslib_1.__assign({}, Fade_1.default.defaultProps), { unmountOnExit: true })
    };
    return Alert;
}(React.Component));
exports.default = Alert;
//# sourceMappingURL=Alert.js.map