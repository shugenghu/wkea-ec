"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var LabeledDropdown = (function (_super) {
    tslib_1.__extends(LabeledDropdown, _super);
    function LabeledDropdown(props) {
        var _this = _super.call(this, props) || this;
        _this._onSelectOption = _this._onSelectOption.bind(_this);
        var selectedKey = _this.props.selectedOption.key;
        var keys = _this.props.dropdownOptions.map(function (option) { return (option.key); });
        _this.state = { selectedIndex: keys.indexOf(selectedKey) };
        return _this;
    }
    LabeledDropdown.prototype.render = function () {
        var _a = this.props, labelText = _a.labelText, labelClassname = _a.labelClassname, dropdownId = _a.dropdownId, dropdownOptions = _a.dropdownOptions, dropdownClassname = _a.dropdownClassname;
        var labelClassNames = classnames_1.default('msc-l-dropdown__label', labelClassname);
        var dropdownClassNames = classnames_1.default('msc-l-dropdown', dropdownClassname);
        var selectedIndex = this._getSelectedIndex();
        return (React.createElement(React.Fragment, null,
            React.createElement("label", { className: labelClassNames, htmlFor: dropdownId }, labelText),
            React.createElement("select", { id: dropdownId, className: dropdownClassNames, onChange: this._onSelectOption }, dropdownOptions.map(function (option, index) {
                var selected = index === selectedIndex;
                return React.createElement("option", { className: 'msc-l-dropdown__option', key: option.key, selected: selected, "aria-selected": selected }, option.value);
            }))));
    };
    LabeledDropdown.prototype._getSelectedIndex = function () {
        if (this.props.controlledByParent) {
            var selectedIndex = -1;
            var selectedKey = this.props.selectedOption.key;
            for (var i = 0; i < this.props.dropdownOptions.length; i++) {
                if (this.props.dropdownOptions[i].key === selectedKey) {
                    selectedIndex = i;
                    break;
                }
            }
            return selectedIndex;
        }
        return this.state.selectedIndex;
    };
    LabeledDropdown.prototype._onSelectOption = function (event) {
        var _a = this.props, dropdownOptions = _a.dropdownOptions, onSelectOption = _a.onSelectOption;
        var index = event.currentTarget.selectedOptions[0].index;
        var selectedOption = dropdownOptions[index];
        this.setState({ selectedIndex: index });
        onSelectOption({ selectedOption: selectedOption });
    };
    LabeledDropdown.defaultProps = {
        toggleColor: 'link'
    };
    return LabeledDropdown;
}(React.Component));
exports.default = LabeledDropdown;
//# sourceMappingURL=LabeledDropdown.js.map