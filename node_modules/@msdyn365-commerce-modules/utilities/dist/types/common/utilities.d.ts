export interface IClientDimension {
    width: number;
    height: number;
}
export interface IDictionaryStringString {
    [key: string]: string;
}
export interface IGrid {
    rows: number;
    columns: number;
}
export declare function clamp(value: number, min: number, max: number): number;
export declare function toUpperCaseFirstChar(value: string): string;
export declare function htmlCollectionToArray(nodeList: HTMLCollection): HTMLElement[];
export declare function getCSS(element: HTMLElement, property: string): string;
export declare function createThrottledEvent(listener: EventListener, threshold: number): (event: Event) => void;
export declare function addThrottledEvent(target: EventTarget, name: string, listener: EventListener, threshold?: number): (event: Event) => void;
export declare function mapToCssModules(className: string | undefined, cssModule: any): string;
export declare function isRef(target: any): boolean;
export declare function isElement(target: any): boolean;
export declare const keyCodes: {
    esc: number;
    space: number;
    tab: number;
    up: number;
    down: number;
    enter: number;
};
export declare function warnOnce(message: string): void;
export declare const canUseDOM: boolean;
export declare function findDOMElements(target: string): NodeListOf<Element> | string | null;
export declare function getTarget(target: string | HTMLElement | React.Ref<HTMLElement>): HTMLElement | React.Ref<HTMLElement> | null | string;
export declare function getTargetElement(target: string | HTMLElement | React.Ref<HTMLElement>): HTMLElement | null;
export declare const TransitionTimeouts: {
    Fade: number;
    Collapse: number;
    Modal: number;
    Carousel: number;
};
export declare type TransitionStatuses = 'entering' | 'entered' | 'exiting' | 'exited';
export declare const focusableElements: string[];
export declare function extend(...parameters: any[]): any;
export declare function getDimensions(containerElement: HTMLElement): IClientDimension | null;
