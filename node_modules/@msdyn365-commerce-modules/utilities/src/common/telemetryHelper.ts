import { IDictionary, TelemetryEvent } from '@msdyn365-commerce/core';
import { ITelemetry } from '@msdyn365-commerce/telemetry-internal';
export interface IContentAction {
    pgname: string;
    mname: string;
    etext?: string;
    recid?: string;
    etype?: string;
}

export interface IPayLoad {
    contentCategory: string;
    contentAction: IContentAction;
}

export interface ITelemetryContent {
    pageName: string;
    moduleName: string;
    telemetry?: ITelemetry;
}

export enum TelemetryConstant {
    ShopSimliarLooks = 'shop similar looks',
    PickupInStore = 'pick up in store',
    PreferredStore = 'set as preferred store',
    RemovePreferredStore = 'remove preferred store',
    IncrementQuantity = 'Increment quantity',
    DecrementQuantity = 'Decrement quantity',
    Checkout = 'Checkout',
    GuestCheckout = 'Guest checkout',
    BackToShopping = 'Back to shopping',
    ApplyPromoCode = 'Apply promo code',
    ViewMore = 'View more',
    OrderDetails = 'Order details',
    AvailablePoints = 'Available points',
    ExpiringPoints = 'Expiring points',
    AddUser = 'Add user',
    BuyItAgain = 'Buy it again',
    ContactNumber = 'ContactNumber',
    CheckoutChange = 'Change',
    Save = 'Save',
    SaveContinue = 'Save and Continue',
    Cancel = 'Cancel',
    DeliveryOptions = 'Delivery options',
    CheckoutTermsAndConditions = 'Checkout terms and conditions',
    ExpandAll = 'Expand all',
    CollapseAll = 'Collapse all',
    Expand = 'Expand',
    Collapse = 'Collapse',
    SignIn = 'Sign in',
    SignUp = 'Sign up',
    SignOut = 'Sign out',
    LoyaltyDetailLink = 'Loyalty detail ink',
    LoyaltyTermsLink = 'Loyalty terms link',
    LoyaltyTermsCancel = 'Loyalty terms cancel',
    LoyaltyTermsSubmit = 'Loyalty terms submit',
    LoyaltyTermsAgree = 'Loyalty terms agree',
    RemoveCartItem = 'Remove cart item',
    EditCart = 'Edit cart',
    BackToTop = 'Back to top',
    Logo = 'Logo',
    NavIcon = 'Navigation icon',
    ViewBagAndCheckout = 'View bag and checkout',
    ContinueShopping = 'Continue shopping',
    AddOrderTemplateToCart = 'Add order template to cart',
    PromoBannerClose = 'Close promo banner',
    WriteReview = 'Write Review',
    Next = 'Next',
    Previous = 'Previous',
    SubmitReview = 'Submit review',
    SuccessButton = 'Success',
    SearchStore = 'Search store',
    ShowAllStore = 'Show all store',
    ToggleMapView = 'Toggle map view',
    PrivacyPolicy = 'Privacy policy',
    ViewShoppingBag = 'View shopping bag',
    MyProfile = 'My profile'
}

/* Returns the payload Object.
* @param  {string} contentCategory - Content Category.
* @param  {IModule} props - Module props.
* @param  {string} moduleName - Module Name.
* @param  {string} etext - etext Name.
* @param  {string} recid - recid Name.
*/
export function getTelemetryObject(pageName: string, moduleName: string, telemetry: ITelemetry): ITelemetryContent {
    const telemetryContent: ITelemetryContent = { pageName : pageName, moduleName: moduleName, telemetry: telemetry};
    return telemetryContent;
}

/* Returns the payload Object.
* @param  {string} contentCategory - Content Category.
* @param  {IModule} props - Module props.
* @param  {string} moduleName - Module Name.
* @param  {string} etext - etext Name.
* @param  {string} recid - recid Name.
*/
export function getPayloadObject(eventType: string, telemetryContent: ITelemetryContent, etext: string, recid?: string): IPayLoad {
    const pageName = telemetryContent && telemetryContent.pageName ? telemetryContent.pageName : '';
    const moduleName = telemetryContent && telemetryContent.moduleName ? telemetryContent.moduleName : '';
    const payload: IPayLoad = {
        contentCategory: eventType,
        contentAction:  {
            pgname: pageName,
            mname: moduleName,
            etext: etext,
            recid: recid,
            etype: eventType,
        }
    };
    return payload;
}

/* Returns the telemetry Attributes.
* @param  {IModule} props - Module Props.
* @param  {IPayLoad} payLoad - Pay Load.
*/
export function getTelemetryAttributes(telemetryContent: ITelemetryContent, payLoad: IPayLoad): IDictionary<string> | undefined {
    const contentData = payLoad.contentAction.recid ? payLoad.contentAction.recid : payLoad.contentAction.etext;
    const attributes: IDictionary<string> | undefined =  telemetryContent
    && telemetryContent.telemetry
    && telemetryContent.telemetry.setTelemetryAttribute
    && telemetryContent.telemetry.setTelemetryAttribute(contentData!, payLoad.contentAction);
    return attributes;
}

/* Returns the telemetry Attributes.
* @param  {IModule} props - Module Props.
* @param  {IPayLoad} payLoad - Pay Load.
*/

export const onTelemetryClick = (telemetryContent: ITelemetryContent, payLoad: IPayLoad, linkText: string) => () => {
    payLoad.contentAction!.etext = linkText;
    if (telemetryContent && telemetryContent.telemetry) {
        telemetryContent.telemetry.logEvent(TelemetryEvent.Custom, payLoad);
    }
};
