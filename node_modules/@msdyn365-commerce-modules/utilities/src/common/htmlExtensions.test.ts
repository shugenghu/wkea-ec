import * as HTMLExtensions from './htmlExtensions';

describe('HTMLExtensions.getText test', () => {
    it('returns an elements textContent', () => {
        const element = document.createElement('div');
        const textNode = document.createTextNode('text yeah');
        element.appendChild(textNode);
        expect(HTMLExtensions.getText(element)).toBe('text yeah');
    });

    it('returns an empty string when there is no text inside an element', () => {
        const element = document.createElement('div');
        expect(HTMLExtensions.getText(element)).toBe('');
    });

    it('returns an empty string when an element is undefined', () => {
        expect(HTMLExtensions.getText(undefined)).toBe('');
    });
});

describe('HTMLExtensions.addClass test', () => {
    it('Add a class to element', () => {
        const element = document.createElement('div');
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');

    });

    it('Add multiple classes to element', () => {
        const element = document.createElement('div');
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');

        HTMLExtensions.addClass(element, 'testClass1');
        expect(element.classList[0]).toBe('testClass');
        expect(element.classList[1]).toBe('testClass1');
    });

    it('Add empty class to element', () => {
        const element = document.createElement('div');
        HTMLExtensions.addClass(element, '');
        expect(element.className).toBe('');

    });

    it('Check class is added in case classList is null', () => {
        const element = document.createElement('div');
        Object.defineProperty(element, 'classList', {
            get: () => { return null; },
            configurable: true,
        });
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');

    });

    it('Add same class to element', () => {
        const element = document.createElement('div');
        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');

        HTMLExtensions.addClass(element, 'testClass');
        expect(element.className).toBe('testClass');
    });

});

describe('HTMLExtensions.hasClass test', () => {
    it('Check element has that class', () => {
        const element = document.createElement('div');
        element.className = 'testClass';
        expect(HTMLExtensions.hasClass(element, 'testClass')).toBe(true);

    });

    it('Check element doesnot has that class', () => {
        const element = document.createElement('div');
        element.className = 'testClass';
        expect(HTMLExtensions.hasClass(element, 'testClass1')).toBe(false);

    });

    it('Add multiple classes to element and check again ', () => {
        const element = document.createElement('div');
        element.classList.add('testClass');
        element.classList.add('testClass1');

        expect(HTMLExtensions.hasClass(element, 'testClass1')).toBe(true);
    });

    it('Check empty class returns false', () => {
        const element = document.createElement('div');
        element.className = 'testClass';
        expect(HTMLExtensions.hasClass(element, '')).toBe(false);

    });

});

describe('HTMLExtensions.nodeListToArray test', () => {
    it('Check attribute count', () => {
        const element = document.createElement('div');
        element.setAttribute('id','element1');
        element.setAttribute('name', 'abc');
        element.setAttribute('info', 'info1');
        const nodes = HTMLExtensions.nodeListToArray(element.attributes);
        expect(nodes.length).toBe(3);

    });

    it('Check after passing null it returns empty', () => {
        const element = document.createElement('div');
        const nodes = HTMLExtensions.nodeListToArray(element.attributes);
        expect(nodes.length).toBe(0);

    });

    it('Check after passing null it returns empty', () => {
        const element = null;
        const nodes = HTMLExtensions.nodeListToArray(element!);
        expect(nodes.length).toBe(0);

    });

});

describe('HTMLExtensions.selectElements test', () => {
    it('Check attribute count', () => {
        const element = document.createElement('div');
        const spanElement = document.createElement('span');
        const brElement = document.createElement('br');
        const divElement = document.createElement('div');
        element.appendChild(spanElement);
        element.appendChild(brElement);
        element.appendChild(divElement);

        const elements = HTMLExtensions.selectElements('span, br', element);
        expect(elements.length).toBe(2);

    });

    it('Select div based upon class name ', () => {
        const element = document.createElement('div');
        const divElement = document.createElement('div');
        divElement.className = 'test';
        const divElement1 = document.createElement('div');
        divElement1.className = 'test';
        const divElement2 = document.createElement('div');
        element.appendChild(divElement);
        element.appendChild(divElement2);
        element.appendChild(divElement1);

        const elements = HTMLExtensions.selectElements('.test', element);
        expect(elements.length).toBe(2);

    });

    it('Select div based upon id', () => {
        const element = document.createElement('div');
        const divElement = document.createElement('div');
        divElement.id = 'test';
        const divElement1 = document.createElement('div');
        divElement1.id = 'test1';
        const divElement2 = document.createElement('div');
        element.appendChild(divElement);
        element.appendChild(divElement2);
        element.appendChild(divElement1);

        const elements = HTMLExtensions.selectElements('#test', element);
        expect(elements.length).toBe(1);

    });

    it('check empty result is returned if selector is empty', () => {
        const element = document.createElement('div');
        const divElement = document.createElement('div');
        divElement.id = 'test';
        const divElement1 = document.createElement('div');
        divElement1.id = 'test1';
        const divElement2 = document.createElement('div');
        element.appendChild(divElement);
        element.appendChild(divElement2);
        element.appendChild(divElement1);

        const elements = HTMLExtensions.selectElements('', element);
        expect(elements.length).toBe(0);

    });

});

describe('HTMLExtensions.css test', () => {
    it('Add css to div and test', () => {
        const element = document.createElement('div');
        HTMLExtensions.css(element, 'display', 'none');
        expect(HTMLExtensions.css(element, 'display')).toBe('none');

    });

    it('Apply css to null element and it should return null', () => {
        const element = null;
        HTMLExtensions.css(element!, 'display', 'none');
        expect(HTMLExtensions.css(element!, 'display')).toBe(null);

    });

    it('Apply css to element & check', () => {
        const element = document.createElement('div');
        HTMLExtensions.css(element!, 'margin', '');
        expect(HTMLExtensions.css(element!, 'margin')).toBe(undefined);

    });

});

describe('HTMLExtensions.selectFirstElement test', () => {
    it('Check it is returning the first element', () => {
        const element = document.createElement('div');
        const spanElement = document.createElement('span');
        const brElement = document.createElement('br');
        const divElement = document.createElement('div');
        element.appendChild(spanElement);
        element.appendChild(brElement);
        element.appendChild(divElement);

        const testElement = HTMLExtensions.selectFirstElement('span', element);
        expect(testElement).not.toBe(null);

    });

    it('Check it is returning the first element', () => {
        const element = document.createElement('div');
        const spanElement = document.createElement('span');
        const brElement = document.createElement('br');
        const divElement = document.createElement('div');
        element.appendChild(spanElement);
        element.appendChild(brElement);
        element.appendChild(divElement);

        const testElement = HTMLExtensions.selectFirstElement('b', element);
        expect(testElement).toBe(null);

    });
});