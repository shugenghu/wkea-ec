import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { IComponentProps, IGridSettings, IImageSettings, Image } from '@msdyn365-commerce/core';
import { ProductPrice, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { Button, getPayloadObject, getTelemetryAttributes, ITelemetryContent, TelemetryConstant } from '..';
import { Modal, ModalBody, ModalHeader } from '../modal';

export interface IPopupProps extends IComponentProps<{product: SimpleProduct | undefined; price: ProductPrice | undefined}> {
    dialogStrings?: {
        goToCartText: string;
        continueShoppingText: string;
        headerItemOneText: string;
        headerItemFormatText: string;
        headerMessageText: string;
        freePriceText: string;
        originalPriceText: string;
        currentPriceText: string;
    };

    className: string;
    imageSettings?: IImageSettings;
    gridSettings: IGridSettings | undefined;
    productQuantity: number;
    priceComponent: React.ReactNode;
    navigationUrl?: string;
    modalOpen: boolean | undefined;
    telemetryContent?: ITelemetryContent;
    setModalOpen(newValue: boolean): void;
}

export const Popup = (popupProps: IPopupProps) => {
    const {dialogStrings, className, imageSettings, gridSettings, data: {product, price}, productQuantity, priceComponent, navigationUrl, modalOpen, telemetryContent, setModalOpen, context } = popupProps;

    if (!dialogStrings || !product) {
        return null;
    }
    const payLoad = getPayloadObject('click', telemetryContent!, TelemetryConstant.ContinueShopping);
    const continueShoppingAttribute = getTelemetryAttributes(telemetryContent!, payLoad);
    payLoad.contentAction.etext = TelemetryConstant.ViewBagAndCheckout;
    const viewBagAttribute = getTelemetryAttributes(telemetryContent!, payLoad);
    const closeModal = () => { setModalOpen(false); };
    const fallbackImageUrl = getFallbackImageUrl(product.ItemId, context.actionContext.requestContext.apiSettings);
    const quantity = productQuantity !== undefined ? productQuantity : 1;
    const itemsString = quantity === 1 ? dialogStrings.headerItemOneText : dialogStrings.headerItemFormatText.replace('{0}', quantity.toString());

    const reducedDimensions: string = product.Dimensions ? product.Dimensions.reduce<string>(
        (str, productDimension) => {
            if (productDimension.DimensionValue && productDimension.DimensionValue.Value) {
                if (str) {
                    return `${str}, ${productDimension.DimensionValue.Value}`;
                }

                return `${productDimension.DimensionValue.Value}`;
            }

            return str;
        },
        '') : '';

    return (
        <Modal
            isOpen={modalOpen}
            onClosed={closeModal}
            className={`${className}__dialog`}
        >
            <ModalHeader toggle={closeModal} className={`${className}__dialog__header`}>
                <span>{itemsString}</span><span>{dialogStrings.headerMessageText}</span>
            </ModalHeader>
            <ModalBody className={`${className}__dialog__body`}>
                <Image
                    className={`${className}__dialog__image`}
                    src={ product.PrimaryImageUrl || ''}
                    fallBackSrc = {fallbackImageUrl}
                    altText={product.Name}
                    gridSettings={gridSettings || {}}
                    imageSettings={imageSettings}
                    loadFailureBehavior='empty'
                />
                <span className={`${className}__dialog__product-title`}>{product.Name}</span>
                {reducedDimensions !== '' ?
                    <div className={`${className}__dialog__product-variants`}>{reducedDimensions}</div> :
                    ''
                }
                {price ? (
                    <div className={`${className}__dialog__product-price`}>
                        {priceComponent}
                    </div>
                ) : ''}
                <Button className={`${className}__dialog__go-to-cart`} href={navigationUrl} title={dialogStrings.goToCartText} {...viewBagAttribute}>{dialogStrings.goToCartText}</Button>
                <Button className={`${className}__dialog__back-to-shopping`} onClick={closeModal} title={dialogStrings.continueShoppingText} {...continueShoppingAttribute}>{dialogStrings.continueShoppingText}</Button>
            </ModalBody>
        </Modal>
    );
};

export default Popup;