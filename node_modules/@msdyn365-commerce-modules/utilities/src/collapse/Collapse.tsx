import classNames from 'classnames';
import * as React from 'react';
import Transition from 'react-transition-group/Transition';
import { mapToCssModules, TransitionStatuses, TransitionTimeouts } from '../common/utilities';
import { ICollapseProps } from './Collapse.props';

export interface ICollapseState {
    height: number | null;
}

type IHash = {
    [key in TransitionStatuses]: string;
};

/**
 * This is the controlled version of a Collapse component, and as such the toggle behavior is expected to be handled in a parent component.
 * @see See [Uncontrolled Components - React](https://reactjs.org/docs/uncontrolled-components.html) to learn more.
 * @visibleName Collapse (controlled)
 */
export default class Collapse extends React.Component<ICollapseProps, ICollapseState> {
    public static defaultProps: Partial<ICollapseProps> = {
        isOpen: false,
        tag: 'div',
        timeout: TransitionTimeouts.Collapse
    };

    public props: ICollapseProps;
    public state: ICollapseState;
    private _transitionStatusToClassHash: IHash = {
        entering: 'collapsing',
        entered: 'collapse show',
        exiting: 'collapsing',
        exited: 'collapse'
    };
    private _tagRef: React.RefObject<HTMLElement> = React.createRef<HTMLElement>();

    constructor(props: ICollapseProps) {
        super(props);
        this.props = props;

        this.state = {
            height: 0
        };

        this._onEntering = this._onEntering.bind(this);
        this._onExit = this._onExit.bind(this);
        this._onExited = this._onExited.bind(this);
        this._onExiting = this._onExiting.bind(this);
        this._reevaluateHeight = this._reevaluateHeight.bind(this);
    }

    public componentDidMount(): void {
        window && window.addEventListener('resize', this._reevaluateHeight);
        this._reevaluateHeight();
    }

    public componentWillUnmount(): void {
        window && window.removeEventListener('resize', this._reevaluateHeight);
    }

    public render(): JSX.Element | null {
        const {
            tag,
            isOpen,
            className,
            children,
            navbar,
            cssModule,

            in: collapseIn,
            mountOnEnter,
            unmountOnExit,
            appear,
            enter,
            exit,
            timeout,
            onEnter,
            onEntering,
            onEntered,
            onExit,
            onExiting,
            onExited,

            ...otherProps
        } = this.props;

        const Tag = tag || 'div';
        const transitionProps = {
            in: collapseIn,
            mountOnEnter,
            unmountOnExit,
            appear,
            enter,
            exit,
            onEnter,
            onEntering,
            onEntered,
            onExit,
            onExiting,
            onExited
        };

        const { height } = this.state;
        const style = height === null || height === 0 ? null : { height };

        return (
            <Transition
                {...transitionProps}
                in={isOpen}
                timeout={timeout || TransitionTimeouts.Collapse}
                onEntering={this._onEntering}
                onExit={this._onExit}
                onExiting={this._onExiting}
                onExited={this._onExited}
            >
                {(status: TransitionStatuses) => {
                    const collapseClass = this._getTransitionClass(status);
                    const classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);

                    return (
                        <Tag {...otherProps} className={classes} ref={this._tagRef} style={{ ...style }}>
                            {children}
                        </Tag>
                    );
                }}
            </Transition>
        );
    }

    private _reevaluateHeight(): void {
        const node = this._tagRef.current;
        if(node !== null && node.firstElementChild && node.firstElementChild.scrollHeight > 0) {
            this.setState({ height: node.firstElementChild.scrollHeight });
        }
    }

    private _getTransitionClass(status: TransitionStatuses): string {
        return this._transitionStatusToClassHash[status] || 'collapse';
    }

    private _onEntering(node: HTMLElement, isAppearing: boolean): void {
        this.setState({ height: node.scrollHeight });

        if (this.props.onEntering) {
            this.props.onEntering(node, isAppearing);
        }
    }

    private _onExit(node: HTMLElement): void {
        this.setState({ height: node.scrollHeight });

        if (this.props.onExit) {
            this.props.onExit(node);
        }
    }

    private _onExiting(node: HTMLElement): void {
        this.setState({ height: 0 });

        if (this.props.onExiting) {
            this.props.onExiting(node);
        }
    }

    private _onExited(node: HTMLElement): void {
        this.setState({ height: null });

        if (this.props.onExited) {
            this.props.onExited(node);
        }
    }
}
