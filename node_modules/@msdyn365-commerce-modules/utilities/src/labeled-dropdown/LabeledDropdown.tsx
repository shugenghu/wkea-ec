import classNames from 'classnames';
import * as React from 'react';
import { ILabeledDropdownProps } from './LabeledDropdown.props';

export interface ILabeledDropdownState {
    selectedIndex: number;
}

/**
 * Labeled Dropdown component
 */
export default class LabeledDropdown extends React.Component<ILabeledDropdownProps, ILabeledDropdownState> {
    public static defaultProps: Partial<ILabeledDropdownProps> = {
        toggleColor: 'link'
    };

    constructor(props: ILabeledDropdownProps) {
        super(props);
        this._onSelectOption = this._onSelectOption.bind(this);
        const selectedKey = this.props.selectedOption.key;
        const keys = this.props.dropdownOptions.map(option => (option.key));
        this.state = {selectedIndex: keys.indexOf(selectedKey)};
    }

    public render(): JSX.Element {
        const {
            labelText,
            labelClassname,
            dropdownId,
            dropdownOptions,
            dropdownClassname,
        } = this.props;

        const labelClassNames = classNames('msc-l-dropdown__label', labelClassname);
        const dropdownClassNames = classNames('msc-l-dropdown', dropdownClassname);
        const selectedIndex = this._getSelectedIndex();

        return (
        <>
            <label className={labelClassNames} htmlFor={dropdownId}>{labelText}</label>
            <select id={dropdownId} className={dropdownClassNames} onChange={this._onSelectOption}>
                {dropdownOptions.map((option, index) => {
                    const selected = index === selectedIndex;
                    return <option className='msc-l-dropdown__option' key={option.key} selected={selected} aria-selected={selected}>{option.value}</option>;
                })}
            </select>
        </>
        );
    }

    private _getSelectedIndex(): number {
        if (this.props.controlledByParent) {
            let selectedIndex = -1;
            const selectedKey = this.props.selectedOption.key;
            for (let i = 0; i < this.props.dropdownOptions.length; i++) {
                if (this.props.dropdownOptions[i].key === selectedKey) {
                    selectedIndex = i;
                    break;
                }
            }

            return selectedIndex;
        }

        return this.state.selectedIndex;
    }

    private _onSelectOption(event: React.ChangeEvent<HTMLSelectElement>): void {
        const {
            dropdownOptions,
            onSelectOption
        } = this.props;
        const index = event.currentTarget.selectedOptions[0].index;
        const selectedOption = dropdownOptions[index];
        this.setState({selectedIndex: index});
        onSelectOption({selectedOption});
    }
}
