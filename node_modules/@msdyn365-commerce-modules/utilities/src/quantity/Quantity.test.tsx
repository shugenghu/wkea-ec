import { mount } from 'enzyme';
import { debounce } from 'lodash';
import * as React from 'react';
import Quantity from './Quantity';

describe('Quantity', () => {
    beforeAll(() => {
        jest.mock('lodash/debounce');

        // @ts-ignore
        debounce = jest.fn().mockImplementation(fn => {
            return fn;
        });
    });

    it('Verify input changeHandler', () => {
        const wrapper = mount((<Quantity max={30} />));
        const changeEvent = {
            target: { value: '5' }
        };
        expect(() => {
            wrapper.find('input').simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('5');
        expect(wrapper).toMatchSnapshot();
        wrapper.unmount();
    });

    it('Verify input changeHandler calls callback', () => {
        const onChangeSpy = jest.fn();
        const quantityDecrCallBack = (
            <Quantity max={30} onChange={onChangeSpy} />
        );
        const wrapper = mount(quantityDecrCallBack);
        const changeEvent = {
            target: { value: '5' }
        };
        wrapper.find('input').simulate('change', changeEvent);
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('5');
        expect(wrapper).toMatchSnapshot();
        expect(onChangeSpy).toHaveBeenCalled();
        wrapper.unmount();
    });

    it('Verify input changeHandler validating max quantity correctly', () => {
        const wrapper = mount((<Quantity max={30} />));
        const changeEvent = {
            target: { value: '31' }
        };
        wrapper.find('input').simulate('change', changeEvent);
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('30');
        expect(wrapper).toMatchSnapshot();
        wrapper.unmount();
    });

    it('Verify input changeHandler validating min quantity correctly', () => {
        const wrapper = mount((<Quantity max={30} />));
        const changeEvent = {
            target: { value: '0' }
        };
        wrapper.find('input').simulate('change', changeEvent);
        wrapper.update();
        wrapper.find('input').simulate('blur');
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('1');
        expect(wrapper).toMatchSnapshot();
        wrapper.unmount();
    });

    it('Verify input changeHandler calls callback when input is nan', () => {
        const onChangeSpy = jest.fn();
        const quantityDecrCallBack = (
            <Quantity max={30} onChange={onChangeSpy} />
        );
        const wrapper = mount(quantityDecrCallBack);
        const changeEvent = {
            target: { value: '-5' }
        };
        wrapper.find('input').simulate('change', changeEvent);
        wrapper.update();
        wrapper.find('input').simulate('blur');
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('1');
        expect(wrapper).toMatchSnapshot();
        setTimeout(() => { expect(onChangeSpy).toHaveBeenCalled();});
        wrapper.unmount();
    });

    it('Verify input changeHandler calls callback when input is more than max', () => {
        const onChangeSpy = jest.fn();
        const quantityDecrCallBack = (
            <Quantity max={30} onChange={onChangeSpy} />
        );
        const wrapper = mount(quantityDecrCallBack);
        const changeEvent2 = {
            target: { value: '31' }
        };
        wrapper.find('input').simulate('change', changeEvent2);
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('30');
        expect(wrapper).toMatchSnapshot();
        expect(onChangeSpy).toHaveBeenCalled();
        wrapper.unmount();
    });

    it('Verify input onBlur is called and value is set to min when input is below min and min prop is provided', () => {
        const onChangeSpy = jest.fn();
        const quantityDecrCallBack = (
            <Quantity max={30} min={5} onChange={onChangeSpy} />
        );
        const wrapper = mount(quantityDecrCallBack);
        const changeEvent2 = {
            target: { value: '0' }
        };
        wrapper.find('input').simulate('change', changeEvent2);
        wrapper.update();
        wrapper.find('input').simulate('blur');
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('5');
        expect(wrapper).toMatchSnapshot();
        expect(onChangeSpy).toHaveBeenCalled();
        wrapper.unmount();
    });

    it('Verify input onBlur is called and value is set to min when input is below min and min prop is not provided', () => {
        const onChangeSpy = jest.fn();
        const quantityDecrCallBack = (
            <Quantity max={30} onChange={onChangeSpy} />
        );
        const wrapper = mount(quantityDecrCallBack);
        const changeEvent2 = {
            target: { value: '0' }
        };
        wrapper.find('input').simulate('change', changeEvent2);
        wrapper.update();
        wrapper.find('input').simulate('blur');
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('1');
        expect(wrapper).toMatchSnapshot();
        expect(onChangeSpy).toHaveBeenCalled();
        wrapper.unmount();
    });

    it('Verify input onBlur is called and value is unchanged when input is above min', () => {
        const onChangeSpy = jest.fn();
        const quantityDecrCallBack = (
            <Quantity max={30} min={5} onChange={onChangeSpy} />
        );
        const wrapper = mount(quantityDecrCallBack);
        const changeEvent2 = {
            target: { value: '10' }
        };
        wrapper.find('input').simulate('change', changeEvent2);
        wrapper.update();
        wrapper.find('input').simulate('blur');
        wrapper.update();
        expect(wrapper.find('input').getDOMNode().getAttribute('value')).toEqual('10');
        expect(wrapper).toMatchSnapshot();
        expect(onChangeSpy).toHaveBeenCalled();
        wrapper.unmount();
    });
});