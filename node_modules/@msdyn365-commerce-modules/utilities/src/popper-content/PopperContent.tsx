import classNames from 'classnames';
import { Data } from 'popper.js';
import * as React from 'react';
import { Arrow, Popper as ReactPopper } from 'react-popper';
import { getTargetElement, mapToCssModules } from '../common/utilities';
import { IPopperContentProps } from './PopperContent.props';

export interface IPopperContentState {
    placement?: string;
    isOpen: boolean;
}

/**
 * Renders popper content. This is an internal helper class shared between components.
 */
export default class PopperContent extends React.Component<IPopperContentProps, IPopperContentState> {

    public static defaultProps: Partial<IPopperContentProps> = {
        boundariesElement: 'scrollParent',
        placement: 'auto',
        hideArrow: false,
        isOpen: false,
        offset: 0,
        fallbackPlacement: 'flip',
        flip: true,
        container: 'body',
        modifiers: {}
    };

    constructor(props: IPopperContentProps) {
        super(props);

        this._handlePlacementChange = this._handlePlacementChange.bind(this);
        this.state = { isOpen: props.isOpen };
    }

    public componentDidMount(): void {
        this._handleProps();
    }
    public componentDidUpdate(prevProps: IPopperContentProps): void {
        if (this.props.isOpen !== prevProps.isOpen) {
            this._handleProps();
        }
    }

    public render(): JSX.Element | null {
        return this.props.isOpen ? this._renderChildren() : null;
    }

    private _handlePlacementChange(data: Data): Data {
        if (this.state.placement !== data.placement) {
            this.setState({ placement: data.placement });
        }

        return data;
    }

    private _handleProps(): void {
        if (this.props.container !== 'inline') {
            if (this.props.isOpen) {
                this._show();
            } else {
                this._hide();
            }
        }
    }

    private _hide(): void {
        this.setState({ isOpen: false });
    }

    private _show(): void {
        this.setState({ isOpen: true });
    }

    private _renderChildren(): JSX.Element | null {
        const {
            cssModule,
            children,
            isOpen,
            flip,
            offset,
            target,
            fallbackPlacement,
            focusOut,
            placementPrefix,
            arrowClassName: arrowClassNameOrUndefined,
            hideArrow,
            className,
            tag,
            modifiers,
            boundariesElement,
            ...attrs
        } = this.props;

        const arrowClassName = mapToCssModules(
            classNames(
                'msc-arrow',
                arrowClassNameOrUndefined
            ),
            cssModule
        );

        const placement = (this.state.placement || attrs.placement || 'auto').split('-')[0];
        const popperClassName = mapToCssModules(
            classNames(
                className,
                placementPrefix ? `${placementPrefix}-${placement}` : placement
            ),
            this.props.cssModule
        );

        const extendedModifiers = {
            offset: { offset },
            flip: { enabled: flip, behavior: fallbackPlacement },
            preventOverflow: { boundariesElement },
            update: {
                enabled: true,
                order: 950,
                fn: this._handlePlacementChange
            },
            ...modifiers
        };

        const targetElement = getTargetElement(target);
        if (targetElement === null) {
            return null;
        }

        return (
            <ReactPopper
                {...attrs}
                modifiers={extendedModifiers}
                target={targetElement}
                component={tag}
                onBlur={focusOut}
                className={popperClassName}
                x-placement={this.state.placement || attrs.placement}
                style={{ display: this.state.isOpen ? 'block' : 'none' }}
            >
                {children}
                {!hideArrow && <Arrow className={arrowClassName} />}
            </ReactPopper>
        );
    }
}
