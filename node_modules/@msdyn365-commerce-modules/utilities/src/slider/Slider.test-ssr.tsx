import { render } from 'enzyme';
import 'jest';
import * as React from 'react';
import Slider from './Slider';

describe('Slider', () => {

    describe('single thumb slider renders correctly', () => {
        it('when oriented horizontally', () => {
            const slider = render(
                <Slider
                    id='slider1'
                    inForm={false}
                    className={'container'}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'horizontal'}
                    labels={[
                        {
                            labelId: 'labelId2',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId3',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={true}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_1',
                            value: 50
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
        it('when oriented horizontally with aria-valuetext', () => {
            const slider = render(
                <Slider
                    id='slider1'
                    inForm={false}
                    className={'container'}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'horizontal'}
                    labels={[
                        {
                            labelId: 'labelId2',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId3',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={true}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_1',
                            value: 50,
                            ariaValueText: '50 percent'
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
        it('when oriented vertically', () => {
            const slider = render(
                <Slider
                    id='slider2'
                    inForm={false}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'vertical'}
                    labels={[
                        {
                            labelId: 'labelId4',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId5',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={true}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_2',
                            value: 50
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
    });

    describe('dual thumb slider renders correctly', () => {
        it('when oriented horizontally', () => {
            const slider = render(
                <Slider
                    id='slider3'
                    inForm={false}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'horizontal'}
                    labels={[
                        {
                            labelId: 'labelId6',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId7',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={true}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_3',
                            value: 50
                        },
                        {
                            id: 'slider_thumb_id_4',
                            value: 60
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
        it('when oriented vertically', () => {
            const slider = render(
                <Slider
                    id='slider4'
                    inForm={false}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'vertical'}
                    labels={[
                        {
                            labelId: 'labelId8',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId9',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={true}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_5',
                            value: 50
                        },
                        {
                            id: 'slider_thumb_id_6',
                            value: 60
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
    });

    describe('slider thumbs', () => {
        it('call the handleTooltipText when passed', () => {
            const spyHandleTooltipText = jest.fn();
            const slider = render(
                <Slider
                    id='slider5'
                    inForm={false}
                    className={'container'}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'horizontal'}
                    handleTooltipText={spyHandleTooltipText}
                    labels={[
                        {
                            labelId: 'labelId10',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId11',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={true}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_7',
                            value: 50
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
            expect(spyHandleTooltipText).toHaveBeenCalled();
        });
        it('don`t render the tooltip when showTooltip is false', () => {
            const slider = render(
                <Slider
                    id='slider6'
                    inForm={false}
                    className={'container'}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'horizontal'}
                    labels={[
                        {
                            labelId: 'labelId12',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId13',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={false}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_8',
                            value: 50
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
        it('adds the classname passed in props', () => {
            const slider = render(
                <Slider
                    id='slider6'
                    inForm={false}
                    className={'container'}
                    trackThumbClass={'someClass'}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'horizontal'}
                    labels={[
                        {
                            labelId: 'labelId12',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId13',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={false}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_8',
                            value: 50
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
    });

    describe('slider with progress', () => {
        it('renders correctly', () => {
            const slider = render(
                <Slider
                    id='slider7'
                    inForm={false}
                    className={'container'}
                    fillTrackValue={63}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'horizontal'}
                    showProgressBar={true}
                    trackProgressClass={'bg-success opacity-40'}
                    labels={[
                        {
                            labelId: 'labelId13',
                            labelString: '50',
                            labelPositioning: 'start'
                        },
                        {
                            labelId: 'labelId14',
                            labelString: '100',
                            labelPositioning: 'end'
                        }
                    ]}
                    showLabels={true}
                    showTooltip={false}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_9',
                            value: 50
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
    });

    describe('slider renders correctly', () => {
        it('when labels aren\'t passed', () => {
            const slider = render(
                <Slider
                    id='slider7'
                    inForm={false}
                    className={'container'}
                    fillTrackValue={63}
                    min={50}
                    max={100}
                    ariaLabel ={'Seek bar'}
                    step={1}
                    orientation={'horizontal'}
                    trackProgressClass={'bg-success opacity-40'}
                    showLabels={false}
                    showTooltip={false}
                    sliderThumbs={[
                        {
                            id: 'slider_thumb_id_9',
                            value: 50
                        }
                    ]}
                />
            );
            expect(slider).toMatchSnapshot();
        });
    });
});
