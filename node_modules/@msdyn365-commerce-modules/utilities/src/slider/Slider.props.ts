import { IGenericFormProps } from '../common/IGenericFormProps';
import Slider from './Slider';

export interface ISliderChangeNotification {

    /** The Slider id */
    id?: string;

    /** The Slider instance */
    slider: Slider;

    /** The current value of the first thumb of the slider */
    firstThumbValue: number;

    /** The current value of the second thumb of the slider or NaN */
    secondThumbValue?: number;

    eventType: string;
}

export interface ISliderProps extends IGenericFormProps {

    /** The Slider element id for the DOM */
    id?: string;

    /** Sets the css classes on the element */
    className?: string;

    /** Sets the fill value for buffer/progress in the slider */
    fillTrackValue?: number;

    /** Sets the aria-label in the slider */
    ariaLabel?: string;

    /** list of slider labels to show which is of type ISliderLabel which specify id, positioning, label string */
    labels?: ISliderLabel[];

    /** The slider min value */
    min: number;

    /** The slider max value */
    max: number;

    /** The slider orientation */
    orientation: 'vertical' | 'horizontal';

    /** Flag to show slider labels or hide them */
    showLabels: boolean;

    /** The slider step to increase the value by */
    step: number;

    /** Flag to set whether to show a progress bar in the slider or not */
    showProgressBar?: boolean;

    /** Flag to set whether to show tooltip or not */
    showTooltip?: boolean;

    /** The slider thumb init value */
    sliderThumbs: ISliderThumbProps[];

    /** Sets the css class on the buffer/progress shown inside the slider track */
    trackProgressClass?: string;

    /** Sets the css class on the slider thumb */
    trackThumbClass?: string;

    /** aria-disabled attribute */
    'aria-disabled'?: boolean;

    /** Focus event for slider */
    onFocus?(event: React.FocusEvent<HTMLDivElement>): void;

    /** Blur event for slider */
    onBlur?(): void;

    /** Callback to handle the tooltip text in the way you want to and show the text you want to instead of the slider thumb value */
    handleTooltipText?(sliderValue: number): string;

    /** Callback that is called everytime the slider thumb is dragged or moved, this callback is called with the changed value */
    onChange?(notfication: Readonly<ISliderChangeNotification>): void;

    /** Callback that is called when the slider thumb is released this signifies the end of the slider movement */
    onChangeEnd?(notfication: Readonly<ISliderChangeNotification>): void;

    /** Callback that is called when the slider thumb is first interacted with, this indicates the start of the slider thumb movement */
    onChangeStart?(notfication: Readonly<ISliderChangeNotification>): void;
}

export interface ISliderLabel {

    /** Sets the id of the slider label instance */
    labelId: string;

    /** Sets the string of the slider label */
    labelString: string;

    /** Sets the position where you'd want the label to show up */
    labelPositioning: string;
}

export interface ISliderThumbProps {

    /** Sets the id for the slider thumb */
    id: string;

    /** aria-label attribute */
    ariaLabel?: string;

    /** Sets the value of the slider thumb */
    value: number;

    /** aria-valuetext attribute */
    ariaValueText?: string;
}
