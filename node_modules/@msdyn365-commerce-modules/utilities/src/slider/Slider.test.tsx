import { mount } from 'enzyme';
import * as React from 'react';
import { KeyCodes } from '../common/KeyCodes';
import Slider, { ISliderState } from './Slider';
import { ISliderProps } from './Slider.props';

describe('Slider component mounting tests', () => {
    it('single thumb slider componentDidMount to not throw an error', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        expect(() => { slider.componentDidMount();}).not.toThrow();
        expect(() => { slider;}).not.toThrow();
        wrapper.unmount();
    });
    it('dual thumb range slider componentDidMount to not throw an error', () => {
        const wrapper = mount(
            <Slider
                id='slider2'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId4',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId5',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_3',
                        value: 50
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 60
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        expect(() => { slider.componentDidMount();}).not.toThrow();
        wrapper.unmount();
    });
    it('single thumb slider renders with a progress bar where the slider did not throw', () => {
        const wrapper = mount(
            <Slider
                id='slider3'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                fillTrackValue={63}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId6',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId7',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                showProgressBar={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_5',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        expect(() => { slider.componentDidMount();}).not.toThrow();
        wrapper.unmount();
    });
    it('single thumb slider renders with a progress bar when filltrack is not mentioned explicitly', () => {
        const wrapper = mount(
            <Slider
                id='slider3'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId6',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId7',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                showProgressBar={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_5',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        expect(() => { slider.componentDidMount();}).not.toThrow();
        wrapper.unmount();
    });
});

describe('single thumb slider keyboard key interaction', () => {
    it('increases and decreses in value on corresponding keypress', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        // increasing values
        wrapper.find('input#slider_thumb_id_1range').simulate('change', {target:{ id: 'slider_thumb_id_1range', value: 51}});
        expect(slider.state.sliderThumbs[0].value).toBe(51);

        wrapper.find('input#slider_thumb_id_1range').simulate('change', {target:{ id: 'slider_thumb_id_1range', value: 52}});
        expect(slider.state.sliderThumbs[0].value).toBe(52);

        // decreasing values
        wrapper.find('input#slider_thumb_id_1range').simulate('change', {target:{ id: 'slider_thumb_id_1range', value: 51}});
        expect(slider.state.sliderThumbs[0].value).toBe(51);

        wrapper.find('input#slider_thumb_id_1range').simulate('change', {target:{id: 'slider_thumb_id_1range', value: 50}});
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        wrapper.unmount();
    });
    it('home key takes you to the start of the range end key takes you to the end of the rnge', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        wrapper.find('input#slider_thumb_id_1range').simulate('change', {target:{ id: 'slider_thumb_id_1range', value: 100}});
        expect(slider.state.sliderThumbs[0].value).toBe(100);

        wrapper.find('input#slider_thumb_id_1range').simulate('change', {target:{ id: 'slider_thumb_id_1range', value: 50}});
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        wrapper.unmount();
    });
    it('does not update when it\'s reached the start of range', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        // check if the slider breaks range
        wrapper.find('div#slider_thumb_id_1').simulate('keyDown', {keyCode: 37});
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        wrapper.unmount();
    });
    it('does not update when it\'s reached the end of range', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 100
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        // check if the slider breaks range
        wrapper.find('div#slider_thumb_id_1').simulate('keyDown', {keyCode: 38});
        expect(slider.state.sliderThumbs[0].value).toBe(100);
        wrapper.unmount();
    });
});

describe('dual thumb slider keyboard key interaction', () => {
    it('increases and decreses in value on corresponding keypress', () => {
        const spyOnChange = jest.fn();
        const wrapper = mount(
            <Slider
                id='slider2'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId4',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId5',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                onChange={spyOnChange}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_3',
                        value: 50
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 60
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        // increasing values
        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 51}});
        expect(slider.state.sliderThumbs[0].value).toBe(51);
        expect(slider.state.sliderThumbs[1].value).toBe(60);
        wrapper.find('input#slider_thumb_id_4range').simulate('change', {target:{ id: 'slider_thumb_id_4range', value: 61}});
        expect(slider.state.sliderThumbs[0].value).toBe(51);
        expect(slider.state.sliderThumbs[1].value).toBe(61);

        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 52}});
        expect(slider.state.sliderThumbs[0].value).toBe(52);
        expect(slider.state.sliderThumbs[1].value).toBe(61);
        wrapper.find('input#slider_thumb_id_4range').simulate('change', {target:{ id: 'slider_thumb_id_4range', value: 62}});
        expect(slider.state.sliderThumbs[0].value).toBe(52);
        expect(slider.state.sliderThumbs[1].value).toBe(62);

        // decreasing values
        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 51}});
        expect(slider.state.sliderThumbs[0].value).toBe(51);
        expect(slider.state.sliderThumbs[1].value).toBe(62);
        wrapper.find('input#slider_thumb_id_4range').simulate('change', {target:{ id: 'slider_thumb_id_4range', value: 61}});
        expect(slider.state.sliderThumbs[0].value).toBe(51);
        expect(slider.state.sliderThumbs[1].value).toBe(61);

        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 50}});
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        expect(slider.state.sliderThumbs[1].value).toBe(61);
        wrapper.find('input#slider_thumb_id_4range').simulate('change', {target:{ id: 'slider_thumb_id_4range', value: 60}});
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        expect(slider.state.sliderThumbs[1].value).toBe(60);
        expect(spyOnChange).toHaveBeenCalled();
        wrapper.unmount();
    });
    it('home keypress takes you to the start of the range for first thumb and fist thumb plus step for the second thumb', () => {
        const wrapper = mount(
            <Slider
                id='slider2'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId4',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId5',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_3',
                        value: 50
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 60
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 59}});
        expect(slider.state.sliderThumbs[0].value).toBe(59);
        expect(slider.state.sliderThumbs[1].value).toBe(60);
        wrapper.find('input#slider_thumb_id_4range').simulate('change', {target:{ id: 'slider_thumb_id_4range', value: 100}});
        expect(slider.state.sliderThumbs[0].value).toBe(59);
        expect(slider.state.sliderThumbs[1].value).toBe(100);

        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 50}});
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        expect(slider.state.sliderThumbs[1].value).toBe(100);
        wrapper.find('input#slider_thumb_id_4range').simulate('change', {target:{ id: 'slider_thumb_id_4range', value: 51}});
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        expect(slider.state.sliderThumbs[1].value).toBe(51);
        wrapper.unmount();
    });
    it('thumb values don\'t change when they are about to cross over', () => {
        const wrapper = mount(
            <Slider
                id='slider2'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId4',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId5',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_3',
                        value: 60
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 61
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        wrapper.find('input#slider_thumb_id_3range').simulate('keyDown', {keyCode: 39});
        expect(slider.state.sliderThumbs[0].value).toBe(60);
        expect(slider.state.sliderThumbs[1].value).toBe(61);
        wrapper.find('input#slider_thumb_id_4range').simulate('keyDown', {keyCode: 40});
        expect(slider.state.sliderThumbs[0].value).toBe(60);
        expect(slider.state.sliderThumbs[1].value).toBe(61);

        wrapper.find('input#slider_thumb_id_3range').simulate('keyDown', {keyCode: 38});
        expect(slider.state.sliderThumbs[0].value).toBe(60);
        expect(slider.state.sliderThumbs[1].value).toBe(61);
        wrapper.find('input#slider_thumb_id_4range').simulate('keyDown', {keyCode: 37});
        expect(slider.state.sliderThumbs[0].value).toBe(60);
        expect(slider.state.sliderThumbs[1].value).toBe(61);
        wrapper.unmount();
    });
});

describe('single thumb slider oriented horizontally mouse move and touch move events', () => {
    it('mousemove drag to increase value', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 892
            };
        });
        // increasing values
        const sliderDiv = document.getElementsByClassName('slider slider-horizontal container');
        const sliderThumb1 = document.getElementById('slider_thumb_id_1');

        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb1).not.toBe(null);

        const sliderDivElement = sliderDiv[0] as HTMLElement;
        const sliderThumb1Element = sliderThumb1 as HTMLElement;

        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');
        const getBoundingClientRect = jest.spyOn(sliderDivElement, 'getBoundingClientRect');

        getOffsetWidthSlider.mockImplementation(() => {
            return 902;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 10;
        });
        getBoundingClientRect.mockImplementation(() => {
            return {
                x:600,
                y:422,
                width:902,
                height:12,
                top: 422,
                bottom: 434,
                left:600.5,
                right:1502.5
            };
        });
        wrapper.find('div#slider_thumb_id_1').simulate('mousedown');
        document.dispatchEvent(new MouseEvent('mousemove',
                                              {
                                                cancelable: true,
                                                bubbles: false,
                                                screenX:50,
                                                screenY:0,
                                                clientX:875,
                                                clientY:20
                                              }));
        wrapper.find('div#slider_thumb_id_1').simulate('mouseup');
        expect(slider.state.sliderThumbs[0].value).toBe(65);
        wrapper.unmount();
    });
    it('touchmove drag to increase value', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 892
            };
        });
        // increasing values
        const sliderDiv = document.getElementsByClassName('slider slider-horizontal container');
        const sliderThumb1 = document.getElementById('slider_thumb_id_1');

        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb1).not.toBe(null);

        const sliderDivElement = sliderDiv[0] as HTMLElement;
        const sliderThumb1Element = sliderThumb1 as HTMLElement;

        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');
        const getBoundingClientRect = jest.spyOn(sliderDivElement, 'getBoundingClientRect');

        getOffsetWidthSlider.mockImplementation(() => {
            return 902;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 10;
        });
        getBoundingClientRect.mockImplementation(() => {
            return {
                x:600,
                y:422,
                width:902,
                height:12,
                top: 422,
                bottom: 434,
                left:600.5,
                right:1502.5
            };
        });
        wrapper.find('div#slider_thumb_id_1').simulate('touchmove', {
            touches: [{
                clientX:875,
            }]
        });
        wrapper.find('div#slider_thumb_id_1').simulate('touchend');
        expect(slider.state.sliderThumbs[0].value).toBe(65);
        wrapper.unmount();
    });
});

describe('Slider Progress Bar', () => {
    it('Click progress bar to increase value', () => {
        const wrapper = mount(
            <Slider
                id='VideoSlider'
                inForm={false}
                className={'video-slider'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                showProgressBar= {true}
                showLabels={false}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'VideoSliderThumb',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 892
            };
        });
        wrapper.find('.slider-horizontal').simulate('click');
        wrapper.find('.msc-progress').simulate('click');
        wrapper.unmount();
    });

    it('Click progress bar to call click function', () => {
        const wrapper = mount(
            <Slider
                id='VideoSlider'
                inForm={false}
                className={'video-slider'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                showProgressBar= {true}
                showLabels={false}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_3',
                        value: 0
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 60
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 892
            };
        });
        wrapper.find('.slider-horizontal').simulate('click');
        wrapper.find('.msc-progress').simulate('click');
        wrapper.unmount();
    });
});

describe('single thumb slider oriented vertically mouse move and touch move events', () => {
    it('mousemove drag to increase value', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'vertical'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 190
            };
        });
        // increasing values
        const sliderDiv = document.getElementsByClassName('slider slider-vertical container');
        const sliderThumb1 = document.getElementById('slider_thumb_id_1');

        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb1).not.toBe(null);

        const sliderDivElement = sliderDiv[0] as HTMLElement;
        const sliderThumb1Element = sliderThumb1 as HTMLElement;

        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');
        const getBoundingClientRect = jest.spyOn(sliderDivElement, 'getBoundingClientRect');

        getOffsetWidthSlider.mockImplementation(() => {
            return 902;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 10;
        });
        getBoundingClientRect.mockImplementation(() => {
            return {
                x:1046.5,
                y:250,
                width:10,
                height:200,
                top: 250,
                bottom: 450,
                left:1046.5,
                right:1506.5
            };
        });
        wrapper.find('div#slider_thumb_id_1').simulate('mousedown');
        document.dispatchEvent(new MouseEvent('mousemove',
                                              {
                                                cancelable: true,
                                                bubbles: false,
                                                clientX:1885,
                                                clientY:350
                                              }));
        wrapper.find('div#slider_thumb_id_1').simulate('mouseup');
        expect(slider.state.sliderThumbs[0].value).toBe(74);
        wrapper.unmount();
    });
    it('touchmove drag to increase value', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'vertical'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 190
            };
        });
        // increasing values
        const sliderDiv = document.getElementsByClassName('slider slider-vertical container');
        const sliderThumb1 = document.getElementById('slider_thumb_id_1');

        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb1).not.toBe(null);

        const sliderDivElement = sliderDiv[0] as HTMLElement;
        const sliderThumb1Element = sliderThumb1 as HTMLElement;

        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');
        const getBoundingClientRect = jest.spyOn(sliderDivElement, 'getBoundingClientRect');

        getOffsetWidthSlider.mockImplementation(() => {
            return 902;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 10;
        });
        getBoundingClientRect.mockImplementation(() => {
            return {
                x:1046.5,
                y:250,
                width:10,
                height:200,
                top: 250,
                bottom: 450,
                left:1046.5,
                right:1506.5
            };
        });
        wrapper.find('div#slider_thumb_id_1').simulate('touchmove', {
            touches: [{
                clientX:1885,
                clientY:350
            }]
        });
        wrapper.find('div#slider_thumb_id_1').simulate('touchend');
        expect(slider.state.sliderThumbs[0].value).toBe(74);
        wrapper.unmount();
    });
});

describe('dual thumb slider updates values', () => {
    // tslint:disable-next-line:max-func-body-length
    it('when thumbs are moved within range', () => {
        const wrapper = mount(
            <Slider
                id='slider2'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId4',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId5',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_3',
                        value: 68
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 69
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 892,
                sliderThumbs: [
                    {
                        id: 'slider_thumb_id_3',
                        value: 68
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value:69
                    }
                ]
            };
        });

        // Mouse and touch interactions
        const sliderDiv = document.getElementsByClassName('slider slider-horizontal');
        const sliderThumb1 = document.getElementById('slider_thumb_id_3');
        const sliderThumb2 = document.getElementById('slider_thumb_id_4');

        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb1).not.toBe(null);
        expect(sliderThumb2).not.toBe(null);

        const sliderDivElement = sliderDiv[0] as HTMLElement;
        const sliderThumb1Element = sliderThumb1 as HTMLElement;

        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');
        const getBoundingClientRect = jest.spyOn(sliderDivElement, 'getBoundingClientRect');

        getOffsetWidthSlider.mockImplementation(() => {
            return 902;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 10;
        });
        getBoundingClientRect.mockImplementation(() => {
            return {
                x:600,
                y:422,
                width:902,
                height:12,
                top: 422,
                bottom: 434,
                left:600.5,
                right:1502.5
            };
        });

        wrapper.find('div#slider_thumb_id_3').simulate('mousedown');
        document.dispatchEvent(new MouseEvent('mousemove',
                                              {
                                                cancelable: true,
                                                bubbles: false,
                                                screenX:50,
                                                screenY:0,
                                                clientX:300,
                                                clientY:49
                                              }));
        wrapper.find('div#slider_thumb_id_3').simulate('mouseup');
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        expect(slider.state.sliderThumbs[1].value).toBe(69);

        wrapper.find('div#slider_thumb_id_4').simulate('mousedown');
        document.dispatchEvent(new MouseEvent('mousemove',
                                              {
                                                cancelable: true,
                                                bubbles: false,
                                                screenX:50,
                                                screenY:0,
                                                clientX:1194,
                                                clientY:49
                                              }));
        wrapper.find('div#slider_thumb_id_4').simulate('mouseup');
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        expect(slider.state.sliderThumbs[1].value).toBe(83);
        wrapper.unmount();
    });
});

describe('dual thumb range sliders don\'t cross each other', () => {
    // tslint:disable-next-line:max-func-body-length
    it('when moved using a mouse or touch', () => {
        const wrapper = mount(
            <Slider
                id='slider2'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId4',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId5',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_3',
                        value: 68
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 69
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 892
            };
        });

        // Mouse and touch interactions
        const sliderDiv = document.getElementsByClassName('slider slider-horizontal');
        const sliderThumb1 = document.getElementById('slider_thumb_id_3');
        const sliderThumb2 = document.getElementById('slider_thumb_id_4');

        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb1).not.toBe(null);
        expect(sliderThumb2).not.toBe(null);

        const sliderDivElement = sliderDiv[0] as HTMLElement;
        const sliderThumb1Element = sliderThumb1 as HTMLElement;

        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');
        const getBoundingClientRect = jest.spyOn(sliderDivElement, 'getBoundingClientRect');

        getOffsetWidthSlider.mockImplementation(() => {
            return 902;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 10;
        });
        getBoundingClientRect.mockImplementation(() => {
            return {
                x:600,
                y:422,
                width:902,
                height:12,
                top: 422,
                bottom: 434,
                left:600.5,
                right:1502.5
            };
        });

        wrapper.find('div#slider_thumb_id_3').simulate('mousedown');
        document.dispatchEvent(new MouseEvent('mousemove',
                                              {
                                                cancelable: true,
                                                bubbles: false,
                                                screenX:50,
                                                screenY:0,
                                                clientX:1198,
                                                clientY:49
                                              }));
        wrapper.find('div#slider_thumb_id_3').simulate('mouseup');
        expect(slider.state.sliderThumbs[0].value).toBe(68);
        expect(slider.state.sliderThumbs[1].value).toBe(69);

        wrapper.find('div#slider_thumb_id_4').simulate('mousedown');
        document.dispatchEvent(new MouseEvent('mousemove',
                                              {
                                                cancelable: true,
                                                bubbles: false,
                                                screenX:50,
                                                screenY:0,
                                                clientX:300,
                                                clientY:49
                                              }));
        wrapper.find('div#slider_thumb_id_4').simulate('mouseup');
        expect(slider.state.sliderThumbs[0].value).toBe(68);
        expect(slider.state.sliderThumbs[1].value).toBe(69);
        wrapper.unmount();
    });
    it('when moved using a keyboard', () => {
        const wrapper = mount(
            <Slider
                id='slider2'
                inForm={false}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId4',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId5',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_3',
                        value: 68
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 69
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 892
            };
        });
        // Keyboard interactions

        // The sliders should not change or cross over
        wrapper.find('input#slider_thumb_id_3range').simulate('keyDown', {keyCode: 39});
        expect(slider.state.sliderThumbs[0].value).toBe(68);
        expect(slider.state.sliderThumbs[1].value).toBe(69);
        wrapper.find('input#slider_thumb_id_3range').simulate('keyDown', {keyCode: 38});
        expect(slider.state.sliderThumbs[0].value).toBe(68);
        expect(slider.state.sliderThumbs[1].value).toBe(69);

        wrapper.find('input#slider_thumb_id_4range').simulate('keyDown', {keyCode: 40});
        expect(slider.state.sliderThumbs[0].value).toBe(68);
        expect(slider.state.sliderThumbs[1].value).toBe(69);
        wrapper.find('input#slider_thumb_id_4range').simulate('keyDown', {keyCode: 37});
        expect(slider.state.sliderThumbs[0].value).toBe(68);
        expect(slider.state.sliderThumbs[1].value).toBe(69);

        /* If the sliders thumbs are going in the opposite direction, allow the thumbs to update,
         * i.e. if the smaller thumb value is getting smaller, and the larger thumbs value is getting larger,
         * allow the update since they won't cross over
         */

        wrapper.find('input#slider_thumb_id_4range').simulate('change', {target:{ id: 'slider_thumb_id_4range', value: 70}});
        expect(slider.state.sliderThumbs[0].value).toBe(68);
        expect(slider.state.sliderThumbs[1].value).toBe(70);
        wrapper.find('input#slider_thumb_id_4range').simulate('change', {target:{ id: 'slider_thumb_id_4range', value: 71}});
        expect(slider.state.sliderThumbs[0].value).toBe(68);
        expect(slider.state.sliderThumbs[1].value).toBe(71);

        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 67}});
        expect(slider.state.sliderThumbs[0].value).toBe(67);
        expect(slider.state.sliderThumbs[1].value).toBe(71);
        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 66}});
        expect(slider.state.sliderThumbs[0].value).toBe(66);
        expect(slider.state.sliderThumbs[1].value).toBe(71);
        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 66}});
        expect(slider.state.sliderThumbs[0].value).toBe(66);
        expect(slider.state.sliderThumbs[1].value).toBe(71);
        wrapper.find('input#slider_thumb_id_3range').simulate('change', {target:{ id: 'slider_thumb_id_3range', value: 66}});
        expect(slider.state.sliderThumbs[0].value).toBe(66);
        expect(slider.state.sliderThumbs[1].value).toBe(71);
        wrapper.unmount();
    });
});

describe('sliders send notifications on various changes', () => {
    it('send notifications on change based on keyboard', () => {
        const spyChange = jest.fn();
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                onChange={spyChange}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        wrapper.find('input#slider_thumb_id_1range').simulate('change', {target:{ id: 'slider_thumb_id_1range', value: 51}});
        expect(slider.state.sliderThumbs[0].value).toBe(51);
        expect(spyChange).toHaveBeenCalled();
        wrapper.unmount();
        spyChange.mockClear();
    });
    it('sends notifications on mouse events', () => {
        const spyChange = jest.fn();
        const spyEnd = jest.fn();
        const spyStart = jest.fn();
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'vertical'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                onChange={spyChange}
                onChangeEnd={spyEnd}
                onChangeStart={spyStart}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 190
            };
        });
        // increasing values
        const sliderDiv = document.getElementsByClassName('slider slider-vertical container');
        const sliderThumb1 = document.getElementById('slider_thumb_id_1');

        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb1).not.toBe(null);

        const sliderDivElement = sliderDiv[0] as HTMLElement;
        const sliderThumb1Element = sliderThumb1 as HTMLElement;

        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');
        const getBoundingClientRect = jest.spyOn(sliderDivElement, 'getBoundingClientRect');

        getOffsetWidthSlider.mockImplementation(() => {
            return 902;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 10;
        });
        getBoundingClientRect.mockImplementation(() => {
            return {
                x:1046.5,
                y:250,
                width:10,
                height:200,
                top: 250,
                bottom: 450,
                left:1046.5,
                right:1506.5
            };
        });
        wrapper.find('div#slider_thumb_id_1').simulate('mousedown');
        document.dispatchEvent(new MouseEvent('mousemove',
                                              {
                                                cancelable: true,
                                                bubbles: false,
                                                clientX:1885,
                                                clientY:350
                                              }));
        wrapper.find('div#slider_thumb_id_1').simulate('mouseup');
        wrapper.update();
        expect(slider.state.sliderThumbs[0].value).toBe(74);
        setTimeout(() => {
            expect(spyChange).toHaveBeenCalled();
            expect(spyEnd).toHaveBeenCalled();
            expect(spyStart).toHaveBeenCalled();
        },         100);
        wrapper.unmount();
    });
});

describe('sliders will not', () => {
    it('send notifications on tab keyboard event', () => {
        const spyChange = jest.fn();
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                onChange={spyChange}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        wrapper.find('div#slider_thumb_id_1').simulate('keyDown', {keyCode: KeyCodes.Tab});
        expect(slider.state.sliderThumbs[0].value).toBe(50);
        expect(spyChange).not.toHaveBeenCalled();
        wrapper.unmount();
        spyChange.mockClear();
    });
});

describe('slider handles resize', () => {
    it('and calls the update function which calls the resize handler', () => {
        const wrapper = mount(
            <Slider
                id='slider1'
                inForm={false}
                className={'container'}
                min={50}
                max={100}
                ariaLabel ={'Seek bar'}
                step={1}
                orientation={'horizontal'}
                labels={[
                    {
                        labelId: 'labelId2',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId3',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ]}
                showLabels={true}
                showTooltip={true}
                sliderThumbs = {[
                    {
                        id: 'slider_thumb_id_1',
                        value: 50
                    }
                ]}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const slider = wrapper.instance() as Slider;
        slider.setState((_prevState:ISliderState) => {
            return {
                limit: 902
            };
        });
        expect(slider.state.limit).toBe(902);
        const sliderDiv = document.getElementsByClassName('slider slider-horizontal');
        const sliderThumb1 = document.getElementById('slider_thumb_id_1');

        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb1).not.toBe(null);

        const sliderDivElement = sliderDiv[0] as HTMLElement;
        const sliderThumb1Element = sliderThumb1 as HTMLElement;

        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');

        getOffsetWidthSlider.mockImplementation(() => {
            return 431;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 10;
        });
        window.resizeTo(498,650);
        expect(slider.state.limit).toBe(421);
        expect(slider.state.grab).toBe(5);
        wrapper.unmount();
    });
});

describe('getDerivedStateFromProps', () => {
    it('updates the state', () => {
        const sliderProps: ISliderProps = {
            id:'slider2',
                inForm:false,
                min:50,
                max:100,
                step:1,
                orientation:'horizontal',
                labels:[
                    {
                        labelId: 'labelId4',
                        labelString: '50',
                        labelPositioning: 'start'
                    },
                    {
                        labelId: 'labelId5',
                        labelString: '100',
                        labelPositioning: 'end'
                    }
                ],
                showLabels:true,
                showTooltip:true,
                sliderThumbs: [
                    {
                        id: 'slider_thumb_id_3',
                        value: 68
                    },
                    {
                        id: 'slider_thumb_id_4',
                        value: 69
                    }
                ]
        };
        const sliderState: ISliderState = {
            sliderThumbs: [
                {
                    id: 'slider_thumb_id_3',
                    value: 60
                },
                {
                    id: 'slider_thumb_id_4',
                    value: 70
                }
            ],
            active: true,
            grab: 1,
            id: 'test1',
            limit: 1
        };
        const result = Slider.getDerivedStateFromProps(sliderProps, sliderState);
        expect(result).toMatchObject(sliderState);
    });
});