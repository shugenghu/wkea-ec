import { mount } from 'enzyme';
import * as React from 'react';

import BackToTop from './BackToTop';

describe('back-to-top', () => {
    it('renders as visible when scrolled into view', () => {
        const wrapper = mount(<BackToTop id='back-to-top-scroll-test' href='#app' aria-label='back t0 top button' />,
                              { attachTo: document.body.firstElementChild as HTMLElement });
        const backToTop = wrapper.instance() as BackToTop;
        expect(backToTop.state.attributes['aria-hidden']).toBe(true);
        // Mock scroll down enough to make the back-to-top appear
        document.body.scrollTop = window.innerHeight * 3;
        expect(document.documentElement!.clientHeight).toBe(1000);
        expect(document.body.scrollTop).toBe(3000);
        window.resizeTo(500, window.innerHeight);
        expect(document.documentElement!.clientHeight).toBe(1000);
        expect(document.body.scrollTop).toBe(3000);
        expect(backToTop.state.attributes['aria-hidden']).toBe(false);

        // Mock scroll back up enough to make the back-to-top disappear
        document.body.scrollTop = window.innerHeight - 100;
        expect(document.documentElement!.clientHeight).toBe(1000);
        expect(document.body.scrollTop).toBe(900);
        window.resizeTo(500, window.innerHeight);
        expect(document.documentElement!.clientHeight).toBe(1000);
        expect(document.body.scrollTop).toBe(900);
        expect(backToTop.state.attributes['aria-hidden']).toBe(true);

        // Mock scroll back down enough to make the back-to-top reappear
        document.body.scrollTop = window.innerHeight * 3;
        expect(document.documentElement!.clientHeight).toBe(1000);
        expect(document.body.scrollTop).toBe(3000);
        window.resizeTo(500, window.innerHeight);
        expect(document.documentElement!.clientHeight).toBe(1000);
        expect(document.body.scrollTop).toBe(3000);
        expect(backToTop.state.attributes['aria-hidden']).toBe(false);
        wrapper.unmount();
    });
});

describe('back-to-top', () => {
    it('renders as hidden when not scrolled to threshold', () => {
        document.body.scrollTop = 49; // Not enough to make the back-to-top appear
        window.resizeTo(500, 10);
        Object.defineProperty(document.documentElement, 'scrollHeight', {get: () => {return 110;}});
        expect(window.innerHeight).toBe(10);
        expect(document.documentElement!.scrollHeight).toBe(110);
        expect(document.body.scrollTop).toBe(49);

        const wrapper = mount(<BackToTop id='back-to-top-threshold-hidden-test' threshold={50} href='#app' aria-label='back to top' />,
                              { attachTo: document.body.firstElementChild as HTMLElement });
        const backToTop = wrapper.instance() as BackToTop;
        expect(backToTop.state.attributes['aria-hidden']).toBe(true);
        wrapper.unmount();
    });
});

describe('back-to-top', () => {
    it('renders as visible when scrolled to threshold', () => {

        expect(window.innerHeight).toBe(10);
        document.body.scrollTop = 50; // Enough to make the back-to-top appear
        expect(document.documentElement!.scrollHeight).toBe(110);
        expect(document.body.scrollTop).toBe(50);

        const wrapper = mount(<BackToTop id='back-to-top-threshold-visible-test' threshold={50} href='#app' aria-label='back to top' />,
                              { attachTo: document.body.firstElementChild as HTMLElement });
        const backToTop = wrapper.instance() as BackToTop;
        expect(backToTop.state.attributes['aria-hidden']).toBe(false);
        wrapper.unmount();
    });
});

describe('back-to-top', () => {
    it('scroll to top on top button click', () => {
        const wrapper = mount(<BackToTop id='back-to-top-scroll-test' href='#app' aria-label='back t0 top button' />,
                              { attachTo: document.body.firstElementChild as HTMLElement });
        const backToTop = wrapper.instance() as BackToTop;
        document.body.scrollTop = 0;
        window.resizeTo(500, window.innerHeight);
        expect(backToTop.state.attributes['aria-hidden']).toBe(true); // Check back to top link is not visible.

        document.body.scrollTop = window.innerHeight * 3;
        window.resizeTo(500, window.innerHeight);
        expect(backToTop.state.attributes['aria-hidden']).toBe(false); // Check back to top link is visible.

        jest.useFakeTimers();
        setTimeout(() => { wrapper.find('a').simulate('click'); }, 10);
        jest.runAllTimers();
        expect(wrapper.find('a').getDOMNode().getAttribute('role')).toBe('link');
        expect(document.body.scrollTop).toBe(0); // Check on the top of the page.
        expect(backToTop.state.attributes['aria-hidden']).toBe(true); // Check back to top is not visible on click.

        wrapper.unmount();
    });
});