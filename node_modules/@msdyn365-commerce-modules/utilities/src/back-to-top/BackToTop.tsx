import * as Msdyn365 from '@msdyn365-commerce/core';
import * as React from 'react';
import { getPayloadObject, getTelemetryAttributes, TelemetryConstant } from '..';
import { IBackToTopProps } from './BackToTop.props';

export interface IBackToTopStateAttributes {
    'aria-hidden': boolean;
    'tabIndex': number;
}

export interface IBackToTopState extends React.ComponentState {
    attributes: IBackToTopStateAttributes;
}
/**
 * Back To Top - This component is used to scroll to the top of the page
 */
export default class BackToTop extends React.PureComponent<IBackToTopProps, IBackToTopState> {
    public static defaultProps: Partial<IBackToTopProps> = {
        className: 'btn btn-lg btn-secondary',
        delayInMs: 0,
        scrollStepInPx: 25,
    };

    private attributes?: Msdyn365.IDictionary<string>;

    constructor(props: IBackToTopProps) {
        super(props);
        this.state = { attributes: { 'aria-hidden': true, tabIndex: -1 } };
        this._reevaluatePosition = this._reevaluatePosition.bind(this);
        this._scrollToTop = this._scrollToTop.bind(this);
        const payLoad = getPayloadObject('click', props.telemetryContent!, TelemetryConstant.BackToTop);
        this.attributes = getTelemetryAttributes(props.telemetryContent!, payLoad);
    }

    public componentDidMount(): void {
        window.addEventListener('resize', this._reevaluatePosition);
        window.addEventListener('scroll', this._reevaluatePosition);
        this._reevaluatePosition();
    }

    public componentWillUnmount(): void {
        window.removeEventListener('resize', this._reevaluatePosition);
        window.removeEventListener('scroll', this._reevaluatePosition);
    }

    public render(): JSX.Element {
        const { className, threshold, delayInMs, scrollStepInPx, ...props } = this.props;
        const children = this.props.children || (<i className='fa fa-arrow-up' />);
        if(this.props.text) {
                return (
                <a
                    className={`back-to-top ${className}`}
                    {...props}
                    {...this.state.attributes}
                    role='link'
                    onClick={this._scrollToTop}
                    {...this.attributes}
                >
                    {this._renderHeading(this.props.text)}
                </a>);
            } else {
                return (
                <a
                    className={`back-to-top ${className}`}
                    {...props}
                    {...this.state.attributes}
                    role='link'
                    onClick={this._scrollToTop}
                    {...this.attributes}
                >
                {children}
                </a>);
            }

    }

    private _renderHeading = (text: string): JSX.Element | undefined => {
        return(
            <Msdyn365.Text
                className='ms-accordion-header-section__heading'
                text={text}
                editProps = {this.props.editProps}
            />
        );
    }

    private _scrollStep(): void {
        if ((document.documentElement.scrollTop || document.body.scrollTop) === 0) {
            clearInterval(this.state.intervalId);
            this.setState({ intervalId: 0 });
            this._reevaluatePosition();
        }

        if (this.state.intervalId !== 0) {
            window.scrollTo(0, document.body.scrollTop - this.props.scrollStepInPx);
            document.body.scrollTop = document.body.scrollTop > 0 ? document.body.scrollTop - this.props.scrollStepInPx : 0;
        }
    }

    // tslint:disable-next-line:no-any
    private _scrollToTop(e: any): void {
        e.preventDefault();
        const intervalId = setInterval(this._scrollStep.bind(this), this.props.delayInMs);
        this.setState({ intervalId: intervalId });
    }

    private _reevaluatePosition(): void {
        // TODO:
        // change the threshold minimum to zero
        // add a prop for specifying multiplier of page height instead of absolute threshold
        // add clientWidth check to hide at < 768
        const scrollTop = window.pageYOffset || document.body.scrollTop;
        const height = Math.min(window.innerHeight, document.documentElement.clientHeight);
        const threshold = Math.min(this.props.threshold !== undefined ? this.props.threshold : -1, 100);
        const hide = scrollTop > 0 && threshold >= 0
            ? scrollTop < (document.documentElement.scrollHeight - height) * threshold / 100
            : scrollTop < height * 2;
        const tabIndexValue = hide ? -1 : 0;
        this.setState({ attributes: { 'aria-hidden': hide, tabIndex: tabIndexValue } });
    }
}
