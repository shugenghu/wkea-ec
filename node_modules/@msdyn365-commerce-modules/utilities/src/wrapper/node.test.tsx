/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

// tslint:disable-next-line:no-unused-variable
import { render } from 'enzyme';
import * as React from 'react';
import { Node, NodeTag } from './node';

interface IMockClassProps {
    /* Children node */
    children: React.ReactNode;
    className: string;
}

const MockClass: React.FC<IMockClassProps> = ({children, className}) => {
    return (
        <div className={className}>
            {children}
            {children}
        </div>
    );
};

describe('Node', () => {
    it('renders correctly', () => {
        const mockProps = { className: 'mock-class' };
        const component = render(<Node {...mockProps}>Child</Node>);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with span tag', () => {
        const mockProps = {
            className: 'mock-class',
            tag: 'span' as NodeTag
        };
        const component = render(<Node {...mockProps}>Child</Node>);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with custom class', () => {
        const mockProps = {
            className: 'mock-class',
            tag: MockClass
        };
        const component = render(<Node {...mockProps}>Child</Node>);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with extra attributes', () => {
        const mockProps = {
            className: 'mock-class',
            id: 'mock-id',
            'data-name': 'mock-name'
        };
        const component = render(<Node {...mockProps}>Child</Node>);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with default className', () => {
        const mockProps = {
            id: 'mock-id'
        };
        // @ts-ignore
        const component = render(<Node {...mockProps}>Child</Node>);
        expect(component).toMatchSnapshot();
    });
});
