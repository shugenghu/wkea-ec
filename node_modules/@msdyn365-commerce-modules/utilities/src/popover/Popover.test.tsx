import { mount } from 'enzyme';
import * as React from 'react';
import Popover from './Popover';

describe('Popover', () => {
    it('When click event occurs outside of popover it closes',  () => {
        const openRef: React.RefObject<HTMLAnchorElement> = React.createRef();
        const outsideRef: React.RefObject<HTMLAnchorElement> = React.createRef();

        const documentEvents = {};

        document.addEventListener = jest.fn((event, callback) => {
            documentEvents[event] = callback;
        });

        const onPopoverToggled = jest.fn();
        mount(
            <div>
                <span id='DismissPopover' ref={outsideRef}>Outside place to click</span>
                <a id='OpenPopover' ref={openRef}>Open Popover</a>
                <Popover id='popoverExample' role='tooltip' placement='top' target={openRef} toggle={onPopoverToggled} isOpen={true}>
                    <div>Popover Title</div>
                    <div>You can put your popover body message here.</div>
                </Popover>
            </div>,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        // @ts-ignore
        documentEvents.click({target: outsideRef.current});
        expect(onPopoverToggled).toBeCalledTimes(1);
    });

    it('When click event occurs inside of popover it stays open',  () => {
        const openRef: React.RefObject<HTMLAnchorElement> = React.createRef();
        const insideRef: React.RefObject<HTMLAnchorElement> = React.createRef();

        const documentEvents = {};

        document.addEventListener = jest.fn((event, callback) => {
            documentEvents[event] = callback;
        });

        const onPopoverToggled = jest.fn();
        mount(
            <div>
                <span id='DismissPopover'>Outside place to click</span>
                <a id='OpenPopover' ref={openRef}>Open Popover</a>
                <Popover id='popoverExample' role='tooltip' placement='top' target={openRef} toggle={onPopoverToggled} isOpen={true}>
                    <div>Popover Title</div>
                    <div>
                        <span ref={insideRef}>
                            Content
                        </span>
                    </div>
                </Popover>
            </div>,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        // @ts-ignore
        documentEvents.click({target: insideRef.current});
        expect(onPopoverToggled).toBeCalledTimes(0);
    });

    it('When click event occurs outside of popover it stays closed',  () => {
        const openRef: React.RefObject<HTMLAnchorElement> = React.createRef();
        const outsideRef: React.RefObject<HTMLAnchorElement> = React.createRef();

        const documentEvents = {};

        document.addEventListener = jest.fn((event, callback) => {
            documentEvents[event] = callback;
        });

        const onPopoverToggled = jest.fn();
        mount(
            <div>
                <span id='DismissPopover' ref={outsideRef}>Outside place to click</span>
                <a id='OpenPopover' ref={openRef}>Open Popover</a>
                <Popover id='popoverExample' role='tooltip' placement='top' target={openRef} toggle={onPopoverToggled} isOpen={false}>
                    <div>Popover Title</div>
                    <div>You can put your popover body message here.</div>
                </Popover>
            </div>,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        // no click event ever attached in this scenario
        // @ts-ignore
        expect(documentEvents.click).not.toBeDefined();
    });

    it('When click event occurs outside of disabled popover it stays open',  () => {
        const openRef: React.RefObject<HTMLAnchorElement> = React.createRef();
        const outsideRef: React.RefObject<HTMLAnchorElement> = React.createRef();

        const documentEvents = {};

        document.addEventListener = jest.fn((event, callback) => {
            documentEvents[event] = callback;
        });

        const onPopoverToggled = jest.fn();
        mount(
            <div>
                <span id='DismissPopover' ref={outsideRef}>Outside place to click</span>
                <a id='OpenPopover' ref={openRef}>Open Popover</a>
                <Popover id='popoverExample' role='tooltip' placement='top' target={openRef} toggle={onPopoverToggled} isOpen={true} disabled={true}>
                    <div>Popover Title</div>
                    <div>You can put your popover body message here.</div>
                </Popover>
            </div>,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        // @ts-ignore
        documentEvents.click({target: outsideRef.current});
        expect(onPopoverToggled).toBeCalledTimes(0);
    });
});
