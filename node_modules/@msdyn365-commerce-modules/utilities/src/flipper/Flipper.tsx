import * as React from 'react';
import { getPayloadObject, getTelemetryAttributes, IPayLoad, UncontrolledTooltip } from '..';
import { IFlipperProps } from './Flipper.props';

export type FlipperSize = 'small' | 'medium' | 'large';

/**
 * Flipper Component - This component is used to add
 * flippers to a carousel/jumbotron
 */
export default class Flipper extends React.PureComponent<IFlipperProps> {
    private payLoad: IPayLoad;
    constructor(props: IFlipperProps) {
        super(props);
        this.payLoad = getPayloadObject('click', this.props.telemetryContent!, this.props.telemetryLabel!);
    }
    public render(): JSX.Element {
        const { className, glyphProps, size, displayTooltip, disabled, telemetryContent, telemetryLabel, ...props } = this.props;
        const sizeClass = size === 'small' ? 'msc-flipper__small' : size === 'large' ? 'msc-flipper__large' : '';
        const classNames = className ? `msc-flipper ${sizeClass} ${className}` : `msc-flipper ${sizeClass}`;
        const attribute = getTelemetryAttributes(telemetryContent!, this.payLoad);
        // do not flip next/previous glyphs in RTL (commonly chevron-left and chevron-right)
        glyphProps.className = `${glyphProps.className} msc-no-rtl-flip-required`;

        return (
            <React.Fragment>
                <button id={props.id} disabled={disabled} className={classNames} {...props} {...attribute}>
                    <i {...glyphProps} aria-hidden={true}/>
                </button>
                {displayTooltip && !disabled && <UncontrolledTooltip trigger='hover' target={props.id}> {props['aria-label']}</UncontrolledTooltip>}
            </React.Fragment>
        );
    }
}
