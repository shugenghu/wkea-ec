
import * as React from 'react';

import { buildHydratedMockActionContext } from '@msdyn365-commerce/core';
import { mount, render } from 'enzyme';
import { ITableRowProps, TableDataType } from '.';
import Table,{IDataTableProps} from './Table';

const testRef: React.RefObject<HTMLAnchorElement> = React.createRef();
const mockRow = {
    row: [
        {
           id: 'Name',
           value: 'Test user',
           type: TableDataType.Text
        },
        {
            id: 'Email',
            value: 'test@email.com',
            type: TableDataType.Text
        },
        {
            id: 'Status',
            value: 'Active',
            type: TableDataType.Text
        },
        {
            id: 'Spending limit',
            value: '$100000',
            type: TableDataType.Price
        }
    ]
} as ITableRowProps;

const mockActionContext = buildHydratedMockActionContext();
// @ts-ignore partial mock
const mockContext: ICoreContext = {
    actionContext: mockActionContext,
    requestContext: {locale: 'en-us'},
    app: {
      routes: {
        home: '/fedev'
      }
    },
    request: {
        query: {
            skip: 10
        }
    }
};

describe('Table', () => {
    const callBack = jest.fn();
    const tableprops: IDataTableProps = {
        resources: {},
        headings: [
            {
                name: 'Name',
                sortable: true
            },
            {
                name: 'Email',
                sortable: true
            },
            {
                name: 'Status',
                sortable: true
            },
            {
                name: 'SpendingLimit',
                sortable: true
            }
        ],
        rows:[mockRow, mockRow, mockRow, mockRow],
        className: 'custom-table',
        editLinkText: 'Edit',
        deleteLinkText: 'Delete',
        actionLinkText: 'Action',
        enableToModify: true,
        showCheckBoxes: true,
        showPagination: true,
        isSortable: true,
        paginationProperty: {
            skipCount: 0,
            itemPerPage: 10,
            prevText:'Prev',
            nextText:'Next',
            paginationText: 'Text',
            url: 'testurl.com'
        },
        actions: {
            onDelete: callBack,
            onEdit: callBack,
            onView: callBack
        }
    };
    it('Verify input table render', () => {
        const wrapper = render(<Table {...tableprops}/>);
        expect(wrapper).toMatchSnapshot();
    });
    it('Handler should be call', () => {
        const wrapper = mount(<Table {...tableprops}/>);
        expect(wrapper.find('button.ms-action-link')).toBeDefined();
        wrapper.unmount();
    });
    it('should be checkboxs rendered', () => {
        tableprops.isSortable=false;
        tableprops.enableToModify=false;
        tableprops.showPagination=false;
        const wrapper = mount(<Table {...tableprops}/>);
        wrapper.find('input#checkbox').length;
        expect(wrapper.find('input#checkbox').length).toBeDefined();
        wrapper.unmount();
    });
});