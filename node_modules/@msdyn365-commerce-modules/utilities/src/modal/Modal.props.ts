import * as React from 'react';
import { IFadeProps } from '../fade/Fade.props';
import { ModalHorizontalPosition, ModalVerticalPosition } from './Modal';

/**
 * Modal properties.
 */
export default interface IModalProps extends React.HTMLAttributes<HTMLElement> {

    /** The root node of the React application, either the id or HTMLElement itself */
    applicationNode: string | HTMLElement;

    /** Reference to element that should have focus when modal is closed */
    // tslint:disable-next-line:no-any
    returnFocusRef?: React.RefObject<any>;

    /** Boolean to control the state of the popover  */
    isOpen?: boolean;

    autoFocus?: boolean;

    /** Corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'  */
    size?: string;

    keyboard?: boolean;

    /** Control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options  */
    backdrop?: boolean | 'static';

    wrapClassName?: string;
    modalClassName?: string;
    backdropClassName?: string;
    contentClassName?: string;

    /** zIndex defaults to 1000. */
    zIndex?: number | string;

    /** Boolean to control whether the fade transition occurs (default: true)  */
    fade?: boolean;

    backdropTransition?: IFadeProps;
    modalTransition?: IFadeProps;

    /** Where modal should be positioned vertically on the page */
    verticalPosition?: ModalVerticalPosition;

    /** Where modal should be positioned horizontally on the page */
    horizontalPosition?: ModalHorizontalPosition;

    /** Allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons */
    external?: React.ReactNode;

    /** Used to reference the ID of the title element in the modal  */
    'aria-labelledby'?: string;

    /** sets the state of the modal  */
    'aria-modal'?: boolean;

    /** Used to describe the contents of the modal, for accessibility */
    'aria-describedby'?: string;

    /** Defaults to "dialog"  */
    role?: string;

    /** Property to set any CSS classnames on the modal */
    className?: string;

    /** Property to set any CSS classModule on the modal */
    cssModule?: object;

    /** Callback for toggling isOpen in the controlling component  */
    toggle?(): void;

    /** Called on componentDidMount  */
    onEnter?(): void;

    /** Called on componentWillUnmount  */
    onExit?(): void;

    /** Called when done transitioning in  */
    onOpened?(): void;

    /** Called when done transitioning out */
    onClosed?(): void;
}
