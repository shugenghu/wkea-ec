import * as React from 'react';

import { mount,shallow } from 'enzyme';
import {TransitionTimeouts } from '../common/utilities';
import Modal from './Modal';
import IModalProps from './Modal.props';
import ModalBody from './ModalBody';
import ModalFooter from './ModalFooter';
import ModalHeader from './ModalHeader';
import Portal from './Portal';

const _toggle = jest.fn();
const _onExit = jest.fn();
const _onOpen = jest.fn();
const divRef:React.RefObject<HTMLDivElement> = React.createRef();
const buttonRef:React.RefObject<HTMLButtonElement> = React.createRef();
const mockDiv  = document.createElement('div');

jest.useFakeTimers();
const ComponentWithProps = (props:IModalProps) => {
    return(
            <>
                <button id='mock-div-element' ref={buttonRef} >mock html</button>
                <Modal {...props}/>
            </>
        );
  };

describe('Modal', () => {
    it('toggle() renders a close button and is called when button is clicked', () => {
        const modalHeader = shallow(<ModalHeader toggle={_toggle}>Modal title</ModalHeader>);
        const closeButton = modalHeader.find('.msc-modal__close-button');
        closeButton.simulate('click');
        expect(_toggle).toBeCalled();
        expect(modalHeader).toMatchSnapshot();
    });
    it('renders a simple modal header', () => {
        const modalHeader = shallow(<ModalHeader>Modal title</ModalHeader>);
        expect(modalHeader).toMatchSnapshot();
    });
    it('renders a simple modal body', () => {
        const modalBody = shallow(<ModalBody tag={null}>Lorem ipsum dolor sit amet.</ModalBody>);
        expect(modalBody).toMatchSnapshot();
    });
    it('renders a simple modal footer', () => {
        const modalFooter = shallow(<ModalFooter tag={null}>Test</ModalFooter>);
        expect(modalFooter).toMatchSnapshot();
    });
    it('renders a simple modal Portal with null node', () => {
        const wrapper = shallow(<Portal node={null}>Test...</Portal>,);
        expect(wrapper).toMatchSnapshot();
    });
    it('renders a simple modal Portal with div container', () => {
        const wrapper = shallow(
                <Portal node={mockDiv}>Test...</Portal>,
                { attachTo: document.body as HTMLElement }
            );
        expect(wrapper.state('defaultNode')).toBe(null);
        wrapper.setState({defaultNode:mockDiv});
        document.body.appendChild(mockDiv);
        wrapper.unmount();
    });
    it('renders modal view.', () => {
        const wrapper = shallow(
                <Modal
                    autoFocus={true}
                    fade={false}
                    applicationNode={mockDiv}
                    isOpen={true}
                    toggle={_toggle}
                    className={'Modal-test-mock'}
                    horizontalPosition={'right'}
                    verticalPosition={'top'}
                    onEnter={_toggle}
                    onExit={_toggle}
                />
        );
        expect(wrapper).toMatchSnapshot();
        wrapper.unmount();
    });
    it('renders modal with props', () => {
        const wrapper = mount(
            <ComponentWithProps
                autoFocus={true}
                fade={false}
                applicationNode={'mock-div-element'}
                returnFocusRef={buttonRef}
                isOpen={false}
                toggle={_toggle}
                className={'Modal-test-mock'}
                horizontalPosition={'right'}
                verticalPosition={'top'}
                onEnter={_toggle}
                onExit={_toggle}
                onClosed={_toggle}
                onOpened={_toggle}
                backdrop={true}
                keyboard={true}
                tabIndex={0}
                size={1}
                zIndex={0}
                modalTransition = {
                        {
                             timeout: TransitionTimeouts.Modal,
                             onEntered:_onOpen,
                             onExited :_onExit,
                        }
                    }
                backdropTransition= {
                        {
                            mountOnEnter: true,
                            timeout: TransitionTimeouts.Fade // uses standard fade transition
                        }
                    }
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
          );
        wrapper.setProps({isOpen:true});
        wrapper.setProps({zIndex :0});
       // Modal
        jest.runAllTimers();
        wrapper.find('Fade').simulate('keyDown',{keyCode: 27});
        wrapper.find('Fade').simulate('keyUp',{keyCode: 27});
        wrapper.find('Fade').simulate('keyDown',{which:9});
        wrapper.find('Fade').simulate('keyDown',{which:9,shiftKey:true});
        wrapper.find('Fade').simulate('mousedown');
        wrapper.find('Fade').simulate('click');
        // Modal close event
        wrapper.find('Fade').prop('onEntered')(mockDiv,true);
        wrapper.find('Fade').prop('onExited')(mockDiv);
        wrapper.find('Modal').instance().setState({isOpen:false});
        wrapper.find('Fade').prop('onExited')(mockDiv);
        expect(_onOpen).toBeCalled();
        expect(_onExit).toBeCalled();
        wrapper.setProps({fade:true});
        expect(_toggle).toBeCalled();
        wrapper.unmount(); // unmount modal
    });

});
