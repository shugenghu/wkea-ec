import classNames from 'classnames';
import * as React from 'react';
import { mapToCssModules } from '../common/utilities';
import Fade from '../fade/Fade';
import UncontrolledTooltip from '../tooltip/UncontrolledTooltip';
import { IAlertProps } from './Alert.props';

/**
 * Alert component
 */
export default class Alert extends React.Component<IAlertProps> {

    public static defaultProps: Partial<IAlertProps> = {
        color: 'success',
        isOpen: true,
        tag: 'div',
        closeAriaLabel: 'Close',
        fade: true,
        assertive: false,
        includeAlertClass: true,
        transition: {
            ...Fade.defaultProps,
            unmountOnExit: true,
        }
    };
    public render(): JSX.Element {
        const {
            id,
            className,
            closeClassName,
            cssModule,
            tag,
            toggle,
            color,
            isOpen,
            children,
            transition,
            fade,
            assertive,
            includeAlertClass,
            'aria-label': ariaLabel
        } = this.props;

        const classes = includeAlertClass ? mapToCssModules(
            classNames(
                className,
                'msc-alert',
                `msc-alert-${color}`,
            ),
            cssModule
        ) : className;

        const closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);

        const alertTransition = {
            ...Fade.defaultProps,
            ...transition,
            baseClass: fade ? 'fade' : '',
            timeout: fade ? (transition ? transition.timeout : 0) : 0,
            appear: !!fade,
            enter: !!fade,
            exit: !!fade,
        };

        const Tag = tag || 'div';
        const buttonId = fade ? 'buttonDismiss' : 'buttonFadeless';

        const innerContent = (
            <>
                {toggle ?
                    <div>
                        <button
                            type='button'
                            id={buttonId}
                            className={closeClasses}
                            aria-label={this.props.closeAriaLabel}
                            onClick={toggle}
                        />
                        <UncontrolledTooltip id='closeTooltip' target={`#${buttonId}`} placement='top'>
                            close
                        </UncontrolledTooltip>
                    </div>
                    : null}
                {children}
            </>
        );

        const style = isOpen ? undefined : { display: 'none' };

        // When using assertive alerts, you need to have the assertive region rendered on the page from
        // the start. When using fade, the entire fade region doesn't render. So you gotta first wrap the
        // fade region in a tag, keep that tag hidden if the alert is closed.
        //
        // Note that this current approach will have some issues if tag is something like li. But that is a bridge
        // that can be crossed when/if we need to cross it this works for divs/spans so it should be good enough for now
        if (fade && assertive) {
            return (
                <Tag style={style} id={id} className={classes} role='alert' aria-live={'assertive'} aria-label={ariaLabel}>
                    <Fade {...alertTransition} tag={Tag} in={isOpen}>
                        {innerContent}
                    </Fade>
                </Tag>
            );
        } else if (fade) {
            return (
                <Fade id={id} {...alertTransition} tag={Tag} className={classes} role='alert' in={isOpen}>
                    {innerContent}
                </Fade>
            );
        } else {
            return (
                <Tag style={style} id={id} className={classes} role='alert' aria-live={assertive ? 'assertive' : undefined} aria-label={ariaLabel}>
                    {innerContent}
                </Tag>
            );
        }

    }
}
