import * as React from 'react';

/**
 * Button properties.
 */
export interface IButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {

    /** active Property to set active state of button when it behaves as a link */
    active?: boolean;

    /** block Property to set block level styling for the button */
    block?: boolean;

    /** color Property to set the color of the button */
    color?: string;

    /** disabled Property to set if the button is disabled */
    disabled?: boolean;

    /** outline Property to set if the button is an outline button */
    outline?: boolean;

    /** tag Property to set if you want the HTML tag to be something else */
    tag?: React.ReactType;

    /** innerRef Ant inner refs for button */
    innerRef?: React.RefObject<HTMLButtonElement>;

    /** size Property to set the size of the button */
    size?: string;

    /** className Property to set any CSS classnames on the button */
    className?: string;

    /** cssModule Property to set any CSS classModule on the button */
    cssModule?: object;

    /** href Href of the button if you want it to navigate */
    href?: string;

    /** id ID of the button */
    id?:string;

    /** target of the button/link */
    target?:string;

    /** to If you use a Link tag, the to property needs to be set for routing */
    to?:string;

    // tslint:disable-next-line:jsdoc-format
    /** Property to set aria-expanded to announce the state collapse/expand on button*/
    'aria-expanded'?: boolean;

    // tslint:disable-next-line:jsdoc-format
    /** Property to set aria-controls to associate the control with the id of fade element*/
    'aria-controls'?: string;
}
