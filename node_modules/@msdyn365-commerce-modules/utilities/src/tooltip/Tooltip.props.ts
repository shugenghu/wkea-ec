import * as Popper from 'popper.js';
import * as React from 'react';
/**
 * Uncontrolled tooltip properties.
 */
export interface IUncontrolledTooltipProps extends React.HTMLAttributes<HTMLElement> {
    /** Target element, React reference, or element ID for the tooltip to attach to. */
    target: string | HTMLElement | React.RefObject<HTMLElement>;

    /** optionally override show/hide delays - default { show: 0, hide: 250 } */
    delay?: number | {show: number; hide: number};

    /** Apply class to the inner-tooltip */
    innerClassName?: string;

    /** Optionally hide tooltip when hovering over tooltip content - default true */
    autohide?: boolean;

    /** Which side of the target to attach to. */
    placement?: Popper.Placement;

    /** Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers */
    modifiers?: Popper.Modifiers;

    /** Optional prefix for the given placement. */
    placementPrefix?: string;

    /** Custom ref handler that will be assigned to the "ref" of the div wrapping the tooltip elements */
    innerRef?: React.RefObject<HTMLDivElement>;

    /** Whether the tooltip arrow should be hidden. */
    hideArrow?: boolean;

    disabled?: boolean;

    /** String containing the triggers to use. Options: 'manual', 'click', 'hover', 'focus'. Default: 'click hover focus' */
    trigger?: string;

    /** boundaries for popper, can be scrollParent, window, viewport, or any DOM element */
    boundariesElement?: Popper.Boundary | Element;

    /** Popper offser, see https://popper.js.org/popper-documentation.html#modifiers..offset */
    offset?: string | number;

    /** Apply class to the arrow-tooltip ('arrow' by default) */
    arrowClassName?: string;

    /** Property to set any CSS classnames on the tooltip */
    className?: string;

    /** Property to set any CSS classModule on the tooltip */
    cssModule?: object;

    /** Property to control flyout role */
    displayMode?: 'TOOLTIP' | 'FLYOUT';

    /** Property to set aria-describedby for the tooltip. */
    'aria-describedby'?: string;
}

export interface ITooltipProps extends IUncontrolledTooltipProps {
    /** Need to associate with aria-describedby to announce tooltip text. */
    id?: string;

    /** Boolean to control the state of the tooltip. */
    isOpen?: boolean;

    /** Callback for toggling isOpen in the controlling component. It will receive an object with info about the event that triggered it. */
    toggle?(): void;
}
