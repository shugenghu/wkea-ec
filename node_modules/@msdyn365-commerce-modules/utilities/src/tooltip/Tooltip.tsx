import classNames from 'classnames';
import * as React from 'react';
import { getTargetElement, mapToCssModules } from '../common/utilities';
import PopperContent from '../popper-content/PopperContent';
import { ITooltipProps } from './Tooltip.props';

const DEFAULT_DELAYS = {
    show: 0,
    hide: 250
};

/**
 * Tooltip component
 */
export default class Tooltip extends React.Component<ITooltipProps> {
    public static defaultProps: Partial<ITooltipProps> = {
        isOpen: false,
        hideArrow: false,
        placement: 'top',
        placementPrefix: 'msc-bs-tooltip',
        delay: DEFAULT_DELAYS,
        autohide: true,
        toggle: () => { return; }
    };

    public ref: React.RefObject<HTMLDivElement>;
    public hideTimeout?: number;
    public showTimeout?: number;
    public target: HTMLElement | null;
    public isMobile: boolean;
    public tabPressed: boolean;

    constructor(props: ITooltipProps) {
        super(props);

        this.ref = React.createRef();
        this.addTargetEvents = this.addTargetEvents.bind(this);
        this.handleDocumentClick = this.handleDocumentClick.bind(this);
        this.removeTargetEvents = this.removeTargetEvents.bind(this);
        this.toggle = this.toggle.bind(this);
        this.onMouseOverTooltip = this.onMouseOverTooltip.bind(this);
        this.onMouseLeaveTooltip = this.onMouseLeaveTooltip.bind(this);
        this.onMouseOverTooltipContent = this.onMouseOverTooltipContent.bind(this);
        this.onMouseLeaveTooltipContent = this.onMouseLeaveTooltipContent.bind(this);
        this.show = this.show.bind(this);
        this.hide = this.hide.bind(this);
        this.onFocusOutTarget = this.onFocusOutTarget.bind(this);
        this.onEscKeyDown = this.onEscKeyDown.bind(this);
        this.onEscKeyDownNative = this.onEscKeyDownNative.bind(this);
        this.target = null;
        this.isMobile = false;
        this.tabPressed = false;
        this.state = {
            tooltipOpen: props.isOpen
        };
    }

    public componentDidMount(): void {
        this.target = getTargetElement(this.props.target);
        this.addTargetEvents();
        // remove the attr from parent obj when tooltip is hidden

        const body = document.getElementsByTagName('body').item(0);
        if (body) {
            const bodyClasses = body.getAttribute('class');
            if (bodyClasses && bodyClasses.indexOf('mobile') > -1) {
                this.isMobile = true;
            }
        }

        if (this.target !== null && this.target.attributes.getNamedItem('aria-describedby') !== null) {
            this.target.attributes.removeNamedItem('aria-describedby');
        }
    }

    public componentWillUnmount(): void {
        this.clearHideTimeout();
        this.clearShowTimeout();
        this.removeTargetEvents();
    }

    public onMouseOverTooltip(e: MouseEvent): void {
        if (this.hideTimeout) {
            this.clearHideTimeout();
        }
        this.showTimeout = window.setTimeout(this.show.bind(this, e), this.getDelay('show'));
    }

    public onMouseLeaveTooltip(e: MouseEvent): void {
        if (this.showTimeout) {
            this.clearShowTimeout();
        }
        this.hideTimeout = window.setTimeout(this.hide.bind(this, e), this.getDelay('hide'));
    }

    public onMouseOverTooltipContent(): void {
        if (this.props.autohide) {
            return;
        }
        if (this.hideTimeout) {
            this.clearHideTimeout();
        }
    }

    public onMouseLeaveTooltipContent(e: React.MouseEvent<HTMLDivElement>): void {
        if (this.props.autohide) {
            return;
        }
        if (this.showTimeout) {
            this.clearShowTimeout();
        }
        this.hideTimeout = window.setTimeout(this.hide.bind(this, e.nativeEvent), this.getDelay('hide'));
    }

    public onFocusOutTarget(e: Event): void {
        if (!this.props.isOpen) {
            return;
        }

        if (this.tabPressed) {
            this.tabPressed = false;
            setTimeout(() => {
                const nextFocus = document.activeElement;

                if (!this.ref || !this.ref.current || !this.ref.current.contains(nextFocus)) {
                    this.hide(e);
                }
            },         1);
        } else {
            this.hide(e);
        }
    }

    public onEscKeyDown(e: React.KeyboardEvent<HTMLDivElement>): void {
        if (e.keyCode === 9) {
            this.tabPressed = true;
        } else if (e.key === 'Escape') {
            this.hide(e.nativeEvent);
        }
    }

    public onEscKeyDownNative(e: KeyboardEvent): void {
        if (e.keyCode === 9) {
            this.tabPressed = true;
        } else if (e.key === 'Escape') {
            this.hide(e);
        }
    }

    public getDelay(key: 'show' | 'hide'): number {
        const { delay } = this.props;
        if (typeof delay === 'object') {
            return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];
        }

        return delay || 0;
    }

    public show(e: Event): void {
        if (!this.props.isOpen) {
            this.clearShowTimeout();
            this.toggle(e);
            // create a new attr for parent obj when tooltip shown
            if (this.target !== null) {
                const ariaAttr = document.createAttribute('aria-describedby');
                ariaAttr.value = this.props.id as string;
                this.target.attributes.setNamedItem(ariaAttr);
            }
        }
    }

    public hide(e: Event): void {
        if (this.props.isOpen) {
            this.clearHideTimeout();
            this.toggle(e);

            // remove the attr from parent obj when tooltip is hidden
            if (this.target !== null && this.target.attributes.getNamedItem('aria-describedby') !== null) {
                this.target.attributes.removeNamedItem('aria-describedby');
            }
        }
    }

    public clearShowTimeout(): void {
        clearTimeout(this.showTimeout);
        this.showTimeout = undefined;
    }

    public clearHideTimeout(): void {
        clearTimeout(this.hideTimeout);
        this.hideTimeout = undefined;
    }

    public handleDocumentClick(e: Event): void {
        if (!this.target) { return; }

        const target = e.target as HTMLElement;
        if (e.target === this.target || this.target.contains(target)) {
            if (this.hideTimeout) {
                this.clearHideTimeout();
            }

            if (!this.props.isOpen) {
                this.toggle(e);
            }
        } else if (this.props.isOpen && target.getAttribute('role') !== 'tooltip') {
            if (this.showTimeout) {
                this.clearShowTimeout();
            }
            this.hideTimeout = window.setTimeout(this.hide.bind(this, e), this.getDelay('hide'));
        }
    }

    public addTargetEvents(): void {
        if (!this.target) { return; }

        if (this.props.trigger) {
            const triggers = this.props.trigger.split(' ');
            if (triggers.indexOf('manual') === -1) {
                if (triggers.indexOf('click') > -1) {
                    ['click', 'touchstart'].forEach((event: string) => {
                        document.addEventListener(event, this.handleDocumentClick, true);
                    });
                }
                if (triggers.indexOf('hover') > -1) {
                    this.target.addEventListener('mouseover', this.onMouseOverTooltip, true);
                    this.target.addEventListener('mouseout', this.onMouseLeaveTooltip, true);
                }
                if (triggers.indexOf('focus') > -1) {
                    this.target.addEventListener('focusin', this.show, true);
                    if (this.props.displayMode === 'FLYOUT') {
                        this.target.addEventListener('focusout', this.onFocusOutTarget, true);
                    } else {
                        this.target.addEventListener('focusout', this.hide, true);
                    }
                }
                this.target.addEventListener('keydown', this.onEscKeyDownNative, true);
            }
        } else {
            this.target.addEventListener('mouseover', this.onMouseOverTooltip, true);
            this.target.addEventListener('mouseout', this.onMouseLeaveTooltip, true);
            this.target.addEventListener('keydown', this.onEscKeyDownNative, true);
            this.target.addEventListener('focusin', this.show, true);
            if (this.props.displayMode === 'FLYOUT') {
                this.target.addEventListener('focusout', this.onFocusOutTarget, true);
            } else {
                this.target.addEventListener('focusout', this.hide, true);
            }

            ['click', 'touchstart'].forEach((event: string) => {
                document.addEventListener(event, this.handleDocumentClick, true);
            });
        }
    }

    public removeTargetEvents(): void {
        if (!this.target) { return; }

        this.target.removeEventListener('mouseover', this.onMouseOverTooltip, true);
        this.target.removeEventListener('mouseout', this.onMouseLeaveTooltip, true);
        this.target.removeEventListener('keydown', this.onEscKeyDownNative, true);
        this.target.removeEventListener('focusin', this.show, true);
        this.target.removeEventListener('focusout', this.onFocusOutTarget, true);
        this.target.removeEventListener('focusout', this.hide, true);

        ['click', 'touchstart'].forEach((event: string) => {
            document.removeEventListener(event, this.handleDocumentClick, true);
        });
    }

    public toggle(e: Event): void {
        if (e) {
            if (this.props.disabled) {
                e.preventDefault();
            }
            if (this.props.toggle) {
                this.props.toggle();
            }
        }
    }

    public render(): JSX.Element | null {
        if (!this.props.isOpen || this.isMobile) {
            return null;
        }

        const {
            cssModule,
            isOpen,
            target,
            placementPrefix,
            hideArrow,
            className,
            innerClassName,
            innerRef,
            modifiers,
            toggle,
            autohide,
            delay,
            placement,
            disabled,
            trigger,
            boundariesElement,
            offset,
            arrowClassName,
            displayMode,
            id,
            ...attributes
        } = this.props;

        const classes = mapToCssModules(classNames(
            displayMode === 'FLYOUT' ? 'msc-flyout-inner' : 'msc-tooltip-inner',
            this.props.innerClassName
            ),                          this.props.cssModule);

        const popperClasses = mapToCssModules(classNames(
            displayMode === 'FLYOUT' ? 'msc-flyout' : 'msc-tooltip',
            'show',
            this.props.className
            ),                                this.props.cssModule);

        return (
            <div ref={this.ref}>
                <PopperContent
                    placement={placement}
                    isOpen={isOpen || false}
                    target={target}
                    className={popperClasses}
                    hideArrow={hideArrow}
                    placementPrefix={placementPrefix}
                    boundariesElement={boundariesElement}
                    arrowClassName={arrowClassName}
                    offset={offset}
                    modifiers={modifiers}
                    cssModule={cssModule}
                >
                    <div
                        {...attributes}
                        className={classes}
                        role={displayMode === undefined || displayMode === 'TOOLTIP' ? 'tooltip' : undefined}
                        ref={innerRef}
                        id={this.props.id}
                        aria-hidden={isOpen}
                        onMouseOver={this.onMouseOverTooltipContent}
                        onMouseLeave={this.onMouseLeaveTooltipContent}
                        onKeyDown={this.onEscKeyDown}
                    />
                </PopperContent>
            </div>
        );
    }
}
