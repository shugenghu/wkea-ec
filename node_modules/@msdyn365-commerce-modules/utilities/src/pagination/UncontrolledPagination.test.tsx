/* tslint:disable:no-unused-variable */
import * as React from 'react';
import * as renderer from 'react-test-renderer';

import { mount } from 'enzyme';
import UncontrolledPagination from './UncontrolledPagination';

describe('Pagination', () => {
    const qsp = 'items';
    const role = 'navigation';
    const label = 'Page navigation example';
    mount(
        <div>
            <div id='nextId1'/>
            <div id='prevId1'/>
        </div>,
        { attachTo: document.body.firstElementChild as HTMLElement });

    it('renders page 1 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={0}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 2 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={10}
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 3 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={20}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 4 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={30}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 5 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={40}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 6 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={50}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 7 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={60}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 8 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={70}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 9 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={80}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 10 0f 10 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={90}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 1 0f 4 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={35}
                itemsPerPage={10}
                startingItem={0}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 2 0f 4 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={35}
                itemsPerPage={4}
                startingItem={4}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 3 0f 4 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={35}
                itemsPerPage={4}
                startingItem={20}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('renders 4 0f 4 pagination correctly', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={35}
                itemsPerPage={10}
                startingItem={30}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        expect(pagination.toJSON()).toMatchSnapshot();
    });

    it('puts the url with the correct qsps on the link', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={0}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        const links = pagination.root.findAllByType('a');
        expect(links[1].props.href).toBe('http://localhost/?items=20');
    });

    it('puts the url with the correct qsps on the split link', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/?items=20'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={0}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        const links = pagination.root.findAllByType('a');
        expect(links[1].props.href).toBe('http://localhost/?items=20');
    });

    it('puts the url with the correct qsps on the multiple split links', () => {
        const pagination = renderer.create(
            <UncontrolledPagination
                url='http://localhost/?items=20&skip=30'
                role={role}
                aria-label={label}
                qsp={qsp}
                items={100}
                itemsPerPage={10}
                startingItem={0}
                nextId='nextId1'
                prevId='prevId1'
                nextAreaDescribed='nextAreaDescribed1'
                prevAreaDescribed='prevAreaDescribed1'
            />
        );
        const links = pagination.root.findAllByType('a');
        expect(links[1].props.href).toBe('http://localhost/?items=20&skip=30');
    });
});
