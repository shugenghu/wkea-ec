import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';
class CarouselModule extends React.PureComponent {
    constructor(props, state) {
        super(props);
        this._handleDismissCarousel = () => {
            if (this.props.context && this.props.context.request && this.props.context.request.cookies) {
                this.props.context.request.cookies.set(`CarouselDismiss_${this.props.id}`, 'true');
                this.setState({ dismissCarousel: true });
            }
        };
        this._next = () => {
            const { slots } = this.props;
            const nextIndex = this.state.activeIndex === (slots && slots.content && slots.content.length - 1) ? 0 : this.state.activeIndex + 1;
            if (this.animating) {
                this.setState({ closeNow: true, activeIndex: nextIndex });
            }
            else {
                this.setState({ activeIndex: nextIndex });
            }
        };
        this._previous = () => {
            const slots = this.props.slots && this.props.slots.content;
            const nextIndex = this.state.activeIndex === 0 ? (slots ? slots.length - 1 : 0) : this.state.activeIndex - 1;
            if (this.animating) {
                this.setState({ closeNow: true, activeIndex: nextIndex });
            }
            else {
                this.setState({ activeIndex: nextIndex });
            }
        };
        this._onExiting = () => {
            this.animating = true;
        };
        this._onExited = () => {
            this.animating = false;
            this.setState({ closeNow: false });
        };
        this._goToIndex = (newIndex) => {
            if (this.animating) {
                return;
            }
            this.setState({ activeIndex: newIndex });
        };
        this.state = { activeIndex: 0, closeNow: false, dismissCarousel: false };
        this.animating = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
    }
    componentDidMount() {
        if (this.props.context && this.props.context.request && this.props.context.request.cookies) {
            if (this.props.context.request.cookies.get(`CarouselDismiss_${this.props.id}`) === undefined) {
                this.props.context.request.cookies.set(`CarouselDismiss_${this.props.id}`, 'false');
                this.setState({ dismissCarousel: false });
            }
        }
    }
    render() {
        if (this.state.dismissCarousel) {
            return null;
        }
        const { className } = this.props.config;
        const viewProps = {
            ...this.props,
            ...this.state,
            telemetryContent: this.telemetryContent,
            carouselContainer: {
                moduleProps: this.props,
                className: classnames('ms-carousel', className)
            },
            closeAnimation: this.state.closeNow ? 'close-now' : '',
            next: this._next,
            previous: this._previous,
            onIndicatorsClickHandler: this._goToIndex,
            handleDismissCarousel: this._handleDismissCarousel,
            handleOnExited: this._onExited,
            handleOnExiting: this._onExiting
        };
        return this.props.renderView(viewProps);
    }
}
export default CarouselModule;
//# sourceMappingURL=carousel.js.map