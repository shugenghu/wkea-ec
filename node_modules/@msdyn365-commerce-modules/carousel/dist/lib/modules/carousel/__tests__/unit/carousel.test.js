import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import * as React from 'react';
import CarouselModule from '../../carousel';
const mockData = {
    carouselId: 'carousel123'
};
const mockConfigWithFlipper = {
    transitionType: "slide",
    hideFlipper: false,
    pauseOnHover: true,
    autoplay: true
};
const mockConfigHideFlipper = {
    hideFlipper: true
};
const mockConfigHideFlipperEnableDiss = {
    hideFlipper: true,
    dismissEnabled: true
};
const mockResource = {
    flipperNext: 'next',
    flipperPrevious: 'prev',
    ariaLabelForSlide: 'Slide {0}',
    ariaLabelForDismissButton: 'cancel'
};
const mockActions = {};
describe('CarouselModule', () => {
    let modulePropsWithFlipper;
    let modulePropsHideFlipper;
    let modulePropsHideFlipperEnableDiss;
    beforeAll(() => {
        modulePropsWithFlipper = {
            ...buildMockModuleProps(mockData, mockActions, mockConfigWithFlipper), resources: mockResource,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        modulePropsHideFlipper = {
            ...buildMockModuleProps(mockData, mockActions, mockConfigHideFlipper), resources: mockResource,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        modulePropsHideFlipperEnableDiss = {
            ...buildMockModuleProps(mockData, mockActions, mockConfigHideFlipperEnableDiss), resources: mockResource,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
    });
    it('renders correctly with flipper', () => {
        const result = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsWithFlipper)));
        expect(modulePropsWithFlipper.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
    });
    it('renders correctly hide flipper', () => {
        const result = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsHideFlipper)));
        expect(modulePropsHideFlipper.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
    });
    it('renders correctly flipper with dismiss enanbled', () => {
        const result = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsHideFlipperEnableDiss)));
        expect(modulePropsHideFlipperEnableDiss.renderView).toBeCalled();
        const viewProps = result.childAt(0).props().props;
        expect(viewProps).toBeDefined();
    });
    it('should call next', () => {
        modulePropsWithFlipper.slots = { content: [[]] };
        const wrapper = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsWithFlipper)));
        const instance = wrapper.instance();
        instance._next();
        expect(wrapper.state('closeNow')).toBe(false);
    });
    it('should call next with 0 content length', () => {
        modulePropsWithFlipper.slots = { content: [] };
        const wrapper = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsWithFlipper)));
        const instance = wrapper.instance();
        instance._next();
        expect(wrapper.state('closeNow')).toBe(false);
    });
    it('should call previous with active index greater than 0', () => {
        const wrapper = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsWithFlipper)));
        wrapper.setState({ activeIndex: 4 });
        const instance = wrapper.instance();
        instance._previous();
        expect(wrapper.state('closeNow')).toBe(false);
    });
    it('should call previous', () => {
        modulePropsWithFlipper.slots = { content: [] };
        const wrapper = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsWithFlipper)));
        const instance = wrapper.instance();
        instance._previous();
        expect(wrapper.state('closeNow')).toBe(false);
    });
    it('should call onExiting', () => {
        const wrapper = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsWithFlipper)));
        const instance = wrapper.instance();
        instance._onExiting();
        expect(wrapper.state('closeNow')).toBe(false);
    });
    it('should call onExited', () => {
        const wrapper = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsWithFlipper)));
        const instance = wrapper.instance();
        instance._onExited();
        expect(wrapper.state('closeNow')).toBe(false);
    });
    it('should render with updated states', () => {
        const wrapper = mount(React.createElement(CarouselModule, Object.assign({}, modulePropsWithFlipper)));
        wrapper.setState({ closeNow: true });
        expect(modulePropsWithFlipper.renderView).toBeCalled();
        const viewProps = wrapper.childAt(0).props().props;
        expect(viewProps).toBeDefined();
    });
});
//# sourceMappingURL=carousel.test.js.map