{"version":3,"file":"carousel.js","sourceRoot":"./src/","sources":["modules/carousel/carousel.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { ICarouselData } from './carousel.data';\nimport { ICarouselProps  } from './carousel.props.autogenerated';\nimport { ICarouselState } from './carousel.state';\n\nexport interface ICarouselViewProps extends ICarouselProps<{}>, ICarouselState {\n    closeAnimation: string;\n    carouselContainer: IModuleProps;\n    telemetryContent: ITelemetryContent;\n    next(): void;\n    previous(): void;\n    onIndicatorsClickHandler():void;\n    handleDismissCarousel(): void;\n    handleOnExited(): void;\n    handleOnExiting(): void;\n}\n\n/**\n *\n * CarouselModule component\n * @extends {React.PureComponent<ICarouselProps<ICarouselData>>}\n */\nclass CarouselModule extends React.PureComponent<ICarouselProps<ICarouselData>, ICarouselState> {\n    private animating: boolean;\n    private telemetryContent: ITelemetryContent;\n\n    constructor(props: ICarouselProps<ICarouselData>, state: ICarouselState) {\n        super(props);\n        this.state = { activeIndex: 0, closeNow: false, dismissCarousel: false };\n        this.animating = false;\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,\n                                                   this.props.friendlyName,\n                                                   this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        if(this.props.context && this.props.context.request && this.props.context.request.cookies) {\n            if (this.props.context.request.cookies.get(`CarouselDismiss_${this.props.id}`) === undefined) {\n                this.props.context.request.cookies.set(`CarouselDismiss_${this.props.id}`, 'false');\n                this.setState({ dismissCarousel: false });\n            }\n        }\n    }\n\n    public render(): JSX.Element | null {\n        if (this.state.dismissCarousel) {\n            return null;\n        }\n\n        const { className } = this.props.config;\n\n        const viewProps = {\n            // Context for telemetry and raw data for C1 to do customization\n            // Including computed data, state data and methods\n            ...this.props,\n            ...this.state,\n            telemetryContent: this.telemetryContent,\n            carouselContainer: {\n                moduleProps: this.props,\n                className:  classnames('ms-carousel', className)\n            },\n            closeAnimation: this.state.closeNow ? 'close-now' : '',\n            next: this._next,\n            previous: this._previous,\n            onIndicatorsClickHandler: this._goToIndex,\n            handleDismissCarousel: this._handleDismissCarousel,\n            handleOnExited: this._onExited,\n            handleOnExiting: this._onExiting};\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    /**\n     * function implementation to dismiss the Carousel\n     */\n    private _handleDismissCarousel = (): void => {\n        if(this.props.context && this.props.context.request && this.props.context.request.cookies) {\n            this.props.context.request.cookies.set(`CarouselDismiss_${this.props.id}`, 'true');\n            this.setState({ dismissCarousel: true });\n        }\n    }\n\n    /**\n     * function implementation to move to next slide\n     */\n    private _next = (): void => {\n        const { slots } = this.props;\n        const nextIndex = this.state.activeIndex === (slots && slots.content && slots.content.length - 1) ? 0 : this.state.activeIndex + 1;\n\n        if (this.animating) {\n            this.setState({ closeNow: true,  activeIndex: nextIndex });\n        } else {\n            this.setState({ activeIndex: nextIndex });\n        }\n    }\n\n    /**\n     * function implementation to move to previous slide\n     */\n    private _previous = (): void => {\n        const slots = this.props.slots && this.props.slots.content;\n        const nextIndex = this.state.activeIndex === 0 ? (slots ? slots.length - 1 : 0) : this.state.activeIndex - 1;\n\n        if (this.animating) {\n            this.setState({ closeNow: true,  activeIndex: nextIndex });\n        } else {\n            this.setState({ activeIndex: nextIndex });\n        }\n    }\n\n    private _onExiting = (): void => {\n        this.animating = true;\n    }\n\n    private _onExited = (): void => {\n        this.animating = false;\n        this.setState({ closeNow: false });\n    }\n\n    /**\n     * function implementation to move to a given slide\n     */\n    private _goToIndex = (newIndex: number): void => {\n        if (this.animating) { return; }\n        this.setState({ activeIndex: newIndex });\n    }\n}\n\nexport default CarouselModule;\n"]}