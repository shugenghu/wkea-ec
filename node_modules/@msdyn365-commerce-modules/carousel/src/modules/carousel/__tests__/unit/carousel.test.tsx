/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildMockModuleProps} from '@msdyn365-commerce/core';
import { mount } from 'enzyme';
import * as React from 'react';
import CarouselModule, { ICarouselViewProps } from '../../carousel';
import { ICarouselData } from '../../carousel.data';
import {
  ICarouselConfig,
  ICarouselProps,
  ICarouselResources,
  transitionType
} from '../../carousel.props.autogenerated';

const mockData: ICarouselData = {
  carouselId: 'carousel123'
};

const mockConfigWithFlipper: ICarouselConfig = {
  transitionType: transitionType.slide,
  hideFlipper: false,
  pauseOnHover: true,
  autoplay: true
};

const mockConfigHideFlipper: ICarouselConfig = {
  hideFlipper: true
};

const mockConfigHideFlipperEnableDiss: ICarouselConfig = {
  hideFlipper: true,
  dismissEnabled: true
};

const mockResource: ICarouselResources = {
  flipperNext: 'next',
  flipperPrevious: 'prev',
  ariaLabelForSlide: 'Slide {0}',
  ariaLabelForDismissButton: 'cancel'
};

const mockActions = {};

describe('CarouselModule', () => {
  let modulePropsWithFlipper: ICarouselProps<ICarouselData>;
  let modulePropsHideFlipper: ICarouselProps<ICarouselData>;
  let modulePropsHideFlipperEnableDiss: ICarouselProps<ICarouselData>;

  beforeAll(() => {
    modulePropsWithFlipper = {
      ...buildMockModuleProps(mockData, mockActions, mockConfigWithFlipper) as ICarouselProps<ICarouselData>, resources: mockResource,
      // @ts-ignore
      renderView: jest.fn(props => { return <div props={props} />;})
    };

    modulePropsHideFlipper = {
      ...buildMockModuleProps(mockData, mockActions, mockConfigHideFlipper) as ICarouselProps<ICarouselData>, resources: mockResource,
      // @ts-ignore
      renderView: jest.fn(props => { return <div props={props} />;})
    };

    modulePropsHideFlipperEnableDiss = {
      ...buildMockModuleProps(mockData, mockActions, mockConfigHideFlipperEnableDiss) as ICarouselProps<ICarouselData>, resources: mockResource,
      // @ts-ignore
      renderView: jest.fn(props => { return <div props={props} />;})
    };
  });

  it('renders correctly with flipper', () => {
   const result = mount(<CarouselModule {...modulePropsWithFlipper}/>);
   expect(modulePropsWithFlipper.renderView).toBeCalled();

   const viewProps: ICarouselViewProps = result.childAt(0).props().props;
   expect(viewProps).toBeDefined();
  });

  it('renders correctly hide flipper', () => {
    const result = mount(<CarouselModule {...modulePropsHideFlipper}/>);
    expect(modulePropsHideFlipper.renderView).toBeCalled();

    const viewProps: ICarouselViewProps = result.childAt(0).props().props;
    expect(viewProps).toBeDefined();
  });

  it('renders correctly flipper with dismiss enanbled', () => {
    const result = mount(<CarouselModule {...modulePropsHideFlipperEnableDiss}/>);
    expect(modulePropsHideFlipperEnableDiss.renderView).toBeCalled();

    const viewProps: ICarouselViewProps = result.childAt(0).props().props;
    expect(viewProps).toBeDefined();
  });

  it('should call next', () => {
    modulePropsWithFlipper.slots = { content: [[]] };
    const wrapper = mount(<CarouselModule {...modulePropsWithFlipper}/>);
    const instance = wrapper.instance() as CarouselModule;
    // @ts-ignore ignore private method
    instance._next();
    expect(wrapper.state('closeNow')).toBe(false);
  });

  it('should call next with 0 content length', () => {
    modulePropsWithFlipper.slots = { content: [] };
    const wrapper = mount(<CarouselModule {...modulePropsWithFlipper}/>);
    const instance = wrapper.instance() as CarouselModule;
    // @ts-ignore ignore private method
    instance._next();
    expect(wrapper.state('closeNow')).toBe(false);
  });

  it('should call previous with active index greater than 0', () => {
    const wrapper = mount(<CarouselModule {...modulePropsWithFlipper}/>);
    wrapper.setState({ activeIndex : 4 });
    const instance = wrapper.instance() as CarouselModule;
    // @ts-ignore ignore private method
    instance._previous();
    expect(wrapper.state('closeNow')).toBe(false);
  });

  it('should call previous', () => {
    modulePropsWithFlipper.slots = { content: [] };
    const wrapper = mount(<CarouselModule {...modulePropsWithFlipper}/>);
    const instance = wrapper.instance() as CarouselModule;
    // @ts-ignore ignore private method
    instance._previous();
    expect(wrapper.state('closeNow')).toBe(false);
  });

  it('should call onExiting', () => {
    const wrapper = mount(<CarouselModule {...modulePropsWithFlipper}/>);
    const instance = wrapper.instance() as CarouselModule;
    // @ts-ignore ignore private method
    instance._onExiting();
    expect(wrapper.state('closeNow')).toBe(false);
  });

  it('should call onExited', () => {
    const wrapper = mount(<CarouselModule {...modulePropsWithFlipper}/>);
    const instance = wrapper.instance() as CarouselModule;
    // @ts-ignore ignore private method
    instance._onExited();
    expect(wrapper.state('closeNow')).toBe(false);
  });

  it('should render with updated states', () => {
    const wrapper = mount(<CarouselModule {...modulePropsWithFlipper}/>);
    wrapper.setState({ closeNow: true });
    expect(modulePropsWithFlipper.renderView).toBeCalled();

    const viewProps: ICarouselViewProps = wrapper.childAt(0).props().props;
    expect(viewProps).toBeDefined();
  });
});