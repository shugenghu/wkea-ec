/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';
import { ICarouselData } from './carousel.data';
import { ICarouselProps  } from './carousel.props.autogenerated';
import { ICarouselState } from './carousel.state';

export interface ICarouselViewProps extends ICarouselProps<{}>, ICarouselState {
    closeAnimation: string;
    carouselContainer: IModuleProps;
    telemetryContent: ITelemetryContent;
    next(): void;
    previous(): void;
    onIndicatorsClickHandler():void;
    handleDismissCarousel(): void;
    handleOnExited(): void;
    handleOnExiting(): void;
}

/**
 *
 * CarouselModule component
 * @extends {React.PureComponent<ICarouselProps<ICarouselData>>}
 */
class CarouselModule extends React.PureComponent<ICarouselProps<ICarouselData>, ICarouselState> {
    private animating: boolean;
    private telemetryContent: ITelemetryContent;

    constructor(props: ICarouselProps<ICarouselData>, state: ICarouselState) {
        super(props);
        this.state = { activeIndex: 0, closeNow: false, dismissCarousel: false };
        this.animating = false;
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,
                                                   this.props.friendlyName,
                                                   this.props.telemetry);
    }

    public componentDidMount(): void {
        if(this.props.context && this.props.context.request && this.props.context.request.cookies) {
            if (this.props.context.request.cookies.get(`CarouselDismiss_${this.props.id}`) === undefined) {
                this.props.context.request.cookies.set(`CarouselDismiss_${this.props.id}`, 'false');
                this.setState({ dismissCarousel: false });
            }
        }
    }

    public render(): JSX.Element | null {
        if (this.state.dismissCarousel) {
            return null;
        }

        const { className } = this.props.config;

        const viewProps = {
            // Context for telemetry and raw data for C1 to do customization
            // Including computed data, state data and methods
            ...this.props,
            ...this.state,
            telemetryContent: this.telemetryContent,
            carouselContainer: {
                moduleProps: this.props,
                className:  classnames('ms-carousel', className)
            },
            closeAnimation: this.state.closeNow ? 'close-now' : '',
            next: this._next,
            previous: this._previous,
            onIndicatorsClickHandler: this._goToIndex,
            handleDismissCarousel: this._handleDismissCarousel,
            handleOnExited: this._onExited,
            handleOnExiting: this._onExiting};

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    /**
     * function implementation to dismiss the Carousel
     */
    private _handleDismissCarousel = (): void => {
        if(this.props.context && this.props.context.request && this.props.context.request.cookies) {
            this.props.context.request.cookies.set(`CarouselDismiss_${this.props.id}`, 'true');
            this.setState({ dismissCarousel: true });
        }
    }

    /**
     * function implementation to move to next slide
     */
    private _next = (): void => {
        const { slots } = this.props;
        const nextIndex = this.state.activeIndex === (slots && slots.content && slots.content.length - 1) ? 0 : this.state.activeIndex + 1;

        if (this.animating) {
            this.setState({ closeNow: true,  activeIndex: nextIndex });
        } else {
            this.setState({ activeIndex: nextIndex });
        }
    }

    /**
     * function implementation to move to previous slide
     */
    private _previous = (): void => {
        const slots = this.props.slots && this.props.slots.content;
        const nextIndex = this.state.activeIndex === 0 ? (slots ? slots.length - 1 : 0) : this.state.activeIndex - 1;

        if (this.animating) {
            this.setState({ closeNow: true,  activeIndex: nextIndex });
        } else {
            this.setState({ activeIndex: nextIndex });
        }
    }

    private _onExiting = (): void => {
        this.animating = true;
    }

    private _onExited = (): void => {
        this.animating = false;
        this.setState({ closeNow: false });
    }

    /**
     * function implementation to move to a given slide
     */
    private _goToIndex = (newIndex: number): void => {
        if (this.animating) { return; }
        this.setState({ activeIndex: newIndex });
    }
}

export default CarouselModule;
