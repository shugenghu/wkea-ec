/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildHydratedMockActionContext, buildMockModuleProps} from '@msdyn365-commerce/core';
import { mount, shallow } from 'enzyme';
import * as React from 'react';
import CookieCompliance, { ICookieComplianceViewProps } from '../cookie-compliance';
import { ICookieComplianceConfig, ICookieComplianceProps, ICookieComplianceResources } from '../cookie-compliance.props.autogenerated';

const mockConfig: ICookieComplianceConfig = {
  className: 'cookie-compliance-container',
  content: 'simple text'
};

const mockResources: ICookieComplianceResources = {
  acceptCookiesButtonText: 'Accept',
  acceptCookiesAriaLabel: 'Accept cookies'
};

const mockActionContext = buildHydratedMockActionContext();

// @ts-ignore partial mock
const mockContext: ICoreContext = {
    actionContext: mockActionContext,
    requestContext: { locale: 'en-us' },
    cookies: {
      isConsentGiven: jest.fn(() => { return false; })
    }
};

// @ts-ignore partial mock
const consentGivenContext: ICoreContext = {
  actionContext: mockActionContext,
  requestContext: { locale: 'en-us' },
  cookies: {
    isConsentGiven: jest.fn(() => { return true; })
  }
};

describe('CookieCompliance', () => {
  it('renders correctly in container', () => {
    const moduleProps = {
      ...buildMockModuleProps({}, {}, mockConfig) as ICookieComplianceProps<ICookieComplianceConfig>,
      resources: mockResources,
      // @ts-ignore
      renderView: jest.fn(props => {return <div props={props}/>;})
    };
    const cookieCompliance = mount(<CookieCompliance {...moduleProps}/>);
    cookieCompliance.setState({ visible: true });

    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ICookieComplianceViewProps = cookieCompliance.childAt(0).props().props;
    expect(viewProps).toBeDefined();
    expect(viewProps.Content.className).toEqual('ms-cookie-compliance__content');
  });

  it('_onDismiss gets called', () => {
    const moduleProps = {
      ...buildMockModuleProps({}, {}, mockConfig) as ICookieComplianceProps<ICookieComplianceConfig>,
      resources: mockResources,
      // @ts-ignore
      renderView: jest.fn(props => {return <div props={props}/>;})
    };
    const cookieCompliance = shallow(<CookieCompliance {...moduleProps}/>);
    cookieCompliance.setState({ visible: true });

    expect(moduleProps.renderView).toBeCalled();
    const viewProps: ICookieComplianceViewProps = cookieCompliance.props().props;
    expect(viewProps.acceptButton).toBeDefined();
    // tslint:disable-next-line:no-any
    const acceptButton = mount(viewProps.acceptButton as any as React.ReactElement);
    expect(cookieCompliance.state('visible')).toBe(true);
    acceptButton.simulate('click');
    expect(cookieCompliance.state('visible')).toBe(false);
  });
});
