/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

// tslint:disable-next-line:no-unused-variable
import { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { buildMockRequest, RichTextComponent } from '@msdyn365-commerce/core';
import { shallow } from 'enzyme';
import * as React from 'react';
import { CookieComplianceAcceptButton, CookieComplianceLinks } from '../components';

describe('CookieCompliance Unit Tests', () => {
  it('Button renders correctly', () => {
    const mockProps = {
      acceptCookiesButtonText: 'Button text',
      acceptCookiesButtonAriaLabel: 'Button AriaLabel',
      onClose: jest.fn()
    };

    const buttonComponent = shallow(<CookieComplianceAcceptButton {...mockProps}/>);
    expect(buttonComponent).toMatchSnapshot();
  });

  it('Link renders correctly', () => {
    const mockProps = {
      links: [
        {
          linkText: 'See details.',
          linkUrl: {
              destinationUrl: '#'
          },
          ariaLabel: 'See details',
          openInNewTab: false
        }
      ],
      requestContext: buildMockRequest(),
      telemetryContent:{} as ITelemetryContent,
    };

    const linkComponent = shallow(<CookieComplianceLinks {...mockProps}/>);
    expect(linkComponent).toMatchSnapshot();
  });

  it('Multiple links renders correctly', () => {
    const mockProps = {
      links: [
        {
          linkText: 'See details.',
          linkUrl: {
              destinationUrl: '#'
          },
          ariaLabel: 'See details',
          openInNewTab: false
        },
        {
          linkText: 'See details.',
          linkUrl: {
              destinationUrl: '#'
          },
          ariaLabel: 'See details',
          openInNewTab: true
        }
      ],
      requestContext: buildMockRequest(),
      telemetryContent:{} as ITelemetryContent,
    };

    const linkComponent = shallow(<CookieComplianceLinks {...mockProps}/>);
    expect(linkComponent).toMatchSnapshot();
  });

  it('Link renders correctly when no props are empty', () => {
    const mockProps = {
      links: [],
      requestContext: buildMockRequest(),
      telemetryContent:{} as ITelemetryContent,
    };
    const linkComponent = shallow(<CookieComplianceLinks {...mockProps}/>);
    expect(linkComponent).toMatchSnapshot();
  });

  it('Text renders correctly', () => {
    const mockProps = {
      text: '<span>This is a sample RichText</span>'
    };

    const linkComponent = shallow(<RichTextComponent className='ms-cookie-compliance__text' {...mockProps}/>);
    expect(linkComponent).toMatchSnapshot();
  });
});
