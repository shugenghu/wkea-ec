import { getTelemetryObject } from '@msdyn365-commerce-modules/utilities';
import * as MsDyn365 from '@msdyn365-commerce/core';
import classnames from 'classnames';
import * as React from 'react';
import { CookieComplianceAcceptButton, CookieComplianceLinks } from './components';
class CookieCompliance extends React.PureComponent {
    constructor(props) {
        super(props);
        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);
        this.handleLinkTextChange = (linkIndex) => (event) => {
            if (this.props.config.actionLinks && this.props.config.actionLinks[linkIndex]) {
                this.props.config.actionLinks[linkIndex].linkText = event.target.value;
            }
        };
        this.handleContentChange = (event) => this.props.config.content = event.target.value;
        this.state = { visible: false };
        this.cookieRef = React.createRef();
        this._onDismiss = this._onDismiss.bind(this);
    }
    componentDidMount() {
        const { context } = this.props;
        if (context && context.request && context.request.cookies && !context.request.cookies.isConsentGiven()) {
            this.setState({ visible: true });
        }
    }
    render() {
        const { config, context, resources, telemetry } = this.props;
        const { acceptCookiesButtonText, acceptCookiesAriaLabel } = resources;
        const { visible } = this.state;
        const isConsentGiven = context && context.request && context.request.cookies && context.request.cookies.isConsentGiven();
        let moduleConfig;
        try {
            moduleConfig = config;
        }
        catch (e) {
            telemetry.error(`Something went wrong while rendering the alert module ------${e}`);
            return React.createElement("div", null, e);
        }
        if (isConsentGiven && !visible) {
            this.props.context.telemetry.error('Cookie Compliance content is empty, module wont render.');
            return null;
        }
        const viewProps = {
            ...this.props,
            onDismiss: this._onDismiss,
            CookieComplianceBanner: {
                moduleProps: this.props,
                className: classnames('ms-cookie-compliance', moduleConfig.className),
                ref: this.cookieRef,
            },
            AlertProps: {
                className: 'ms-cookie-compliance__container',
                color: 'white',
                fade: false
            },
            Content: {
                className: 'ms-cookie-compliance__content'
            },
            text: moduleConfig.content && (React.createElement(MsDyn365.RichTextComponent, { className: 'ms-cookie-compliance__text', text: moduleConfig.content, editProps: { onEdit: this.handleContentChange, requestContext: this.props.context.request } })),
            links: moduleConfig.actionLinks && moduleConfig.actionLinks.length > 0 && (React.createElement(CookieComplianceLinks, { links: moduleConfig.actionLinks, onTextChange: this.handleLinkTextChange, requestContext: this.props.context.request, telemetryContent: this.telemetryContent })),
            acceptButton: (React.createElement(CookieComplianceAcceptButton, { onClose: this._onDismiss, acceptCookiesButtonText: acceptCookiesButtonText, acceptCookiesButtonAriaLabel: acceptCookiesAriaLabel, telemetryContent: this.telemetryContent }))
        };
        return this.props.renderView(viewProps);
    }
    _onDismiss() {
        const { context } = this.props;
        if (context && context.request && context.request.cookies) {
            context.request.cookies.setConsentCookie();
            location.reload();
        }
        this.setState({ visible: false });
    }
}
export default CookieCompliance;
//# sourceMappingURL=cookie-compliance.js.map