{"version":3,"file":"components.test.js","sourceRoot":"./src/","sources":["modules/cookie-compliance/tests/components.test.tsx"],"names":[],"mappings":"AAOA,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAC9E,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AACjC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,4BAA4B,EAAE,qBAAqB,EAAE,MAAM,eAAe,CAAC;AAEpF,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,SAAS,GAAG;YAChB,uBAAuB,EAAE,aAAa;YACtC,4BAA4B,EAAE,kBAAkB;YAChD,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACnB,CAAC;QAEF,MAAM,eAAe,GAAG,OAAO,CAAC,oBAAC,4BAA4B,oBAAK,SAAS,EAAG,CAAC,CAAC;QAChF,MAAM,CAAC,eAAe,CAAC,CAAC,eAAe,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,SAAS,GAAG;YAChB,KAAK,EAAE;gBACL;oBACE,QAAQ,EAAE,cAAc;oBACxB,OAAO,EAAE;wBACL,cAAc,EAAE,GAAG;qBACtB;oBACD,SAAS,EAAE,aAAa;oBACxB,YAAY,EAAE,KAAK;iBACpB;aACF;YACD,cAAc,EAAE,gBAAgB,EAAE;YAClC,gBAAgB,EAAC,EAAuB;SACzC,CAAC;QAEF,MAAM,aAAa,GAAG,OAAO,CAAC,oBAAC,qBAAqB,oBAAK,SAAS,EAAG,CAAC,CAAC;QACvE,MAAM,CAAC,aAAa,CAAC,CAAC,eAAe,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,SAAS,GAAG;YAChB,KAAK,EAAE;gBACL;oBACE,QAAQ,EAAE,cAAc;oBACxB,OAAO,EAAE;wBACL,cAAc,EAAE,GAAG;qBACtB;oBACD,SAAS,EAAE,aAAa;oBACxB,YAAY,EAAE,KAAK;iBACpB;gBACD;oBACE,QAAQ,EAAE,cAAc;oBACxB,OAAO,EAAE;wBACL,cAAc,EAAE,GAAG;qBACtB;oBACD,SAAS,EAAE,aAAa;oBACxB,YAAY,EAAE,IAAI;iBACnB;aACF;YACD,cAAc,EAAE,gBAAgB,EAAE;YAClC,gBAAgB,EAAC,EAAuB;SACzC,CAAC;QAEF,MAAM,aAAa,GAAG,OAAO,CAAC,oBAAC,qBAAqB,oBAAK,SAAS,EAAG,CAAC,CAAC;QACvE,MAAM,CAAC,aAAa,CAAC,CAAC,eAAe,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,SAAS,GAAG;YAChB,KAAK,EAAE,EAAE;YACT,cAAc,EAAE,gBAAgB,EAAE;YAClC,gBAAgB,EAAC,EAAuB;SACzC,CAAC;QACF,MAAM,aAAa,GAAG,OAAO,CAAC,oBAAC,qBAAqB,oBAAK,SAAS,EAAG,CAAC,CAAC;QACvE,MAAM,CAAC,aAAa,CAAC,CAAC,eAAe,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,SAAS,GAAG;YAChB,IAAI,EAAE,wCAAwC;SAC/C,CAAC;QAEF,MAAM,aAAa,GAAG,OAAO,CAAC,oBAAC,iBAAiB,kBAAC,SAAS,EAAC,4BAA4B,IAAK,SAAS,EAAG,CAAC,CAAC;QAC1G,MAAM,CAAC,aAAa,CAAC,CAAC,eAAe,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// tslint:disable-next-line:no-unused-variable\nimport { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { buildMockRequest, RichTextComponent } from '@msdyn365-commerce/core';\nimport { shallow } from 'enzyme';\nimport * as React from 'react';\nimport { CookieComplianceAcceptButton, CookieComplianceLinks } from '../components';\n\ndescribe('CookieCompliance Unit Tests', () => {\n  it('Button renders correctly', () => {\n    const mockProps = {\n      acceptCookiesButtonText: 'Button text',\n      acceptCookiesButtonAriaLabel: 'Button AriaLabel',\n      onClose: jest.fn()\n    };\n\n    const buttonComponent = shallow(<CookieComplianceAcceptButton {...mockProps}/>);\n    expect(buttonComponent).toMatchSnapshot();\n  });\n\n  it('Link renders correctly', () => {\n    const mockProps = {\n      links: [\n        {\n          linkText: 'See details.',\n          linkUrl: {\n              destinationUrl: '#'\n          },\n          ariaLabel: 'See details',\n          openInNewTab: false\n        }\n      ],\n      requestContext: buildMockRequest(),\n      telemetryContent:{} as ITelemetryContent,\n    };\n\n    const linkComponent = shallow(<CookieComplianceLinks {...mockProps}/>);\n    expect(linkComponent).toMatchSnapshot();\n  });\n\n  it('Multiple links renders correctly', () => {\n    const mockProps = {\n      links: [\n        {\n          linkText: 'See details.',\n          linkUrl: {\n              destinationUrl: '#'\n          },\n          ariaLabel: 'See details',\n          openInNewTab: false\n        },\n        {\n          linkText: 'See details.',\n          linkUrl: {\n              destinationUrl: '#'\n          },\n          ariaLabel: 'See details',\n          openInNewTab: true\n        }\n      ],\n      requestContext: buildMockRequest(),\n      telemetryContent:{} as ITelemetryContent,\n    };\n\n    const linkComponent = shallow(<CookieComplianceLinks {...mockProps}/>);\n    expect(linkComponent).toMatchSnapshot();\n  });\n\n  it('Link renders correctly when no props are empty', () => {\n    const mockProps = {\n      links: [],\n      requestContext: buildMockRequest(),\n      telemetryContent:{} as ITelemetryContent,\n    };\n    const linkComponent = shallow(<CookieComplianceLinks {...mockProps}/>);\n    expect(linkComponent).toMatchSnapshot();\n  });\n\n  it('Text renders correctly', () => {\n    const mockProps = {\n      text: '<span>This is a sample RichText</span>'\n    };\n\n    const linkComponent = shallow(<RichTextComponent className='ms-cookie-compliance__text' {...mockProps}/>);\n    expect(linkComponent).toMatchSnapshot();\n  });\n});\n"]}