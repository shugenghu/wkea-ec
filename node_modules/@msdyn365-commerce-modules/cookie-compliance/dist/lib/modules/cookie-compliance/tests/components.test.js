import { buildMockRequest, RichTextComponent } from '@msdyn365-commerce/core';
import { shallow } from 'enzyme';
import * as React from 'react';
import { CookieComplianceAcceptButton, CookieComplianceLinks } from '../components';
describe('CookieCompliance Unit Tests', () => {
    it('Button renders correctly', () => {
        const mockProps = {
            acceptCookiesButtonText: 'Button text',
            acceptCookiesButtonAriaLabel: 'Button AriaLabel',
            onClose: jest.fn()
        };
        const buttonComponent = shallow(React.createElement(CookieComplianceAcceptButton, Object.assign({}, mockProps)));
        expect(buttonComponent).toMatchSnapshot();
    });
    it('Link renders correctly', () => {
        const mockProps = {
            links: [
                {
                    linkText: 'See details.',
                    linkUrl: {
                        destinationUrl: '#'
                    },
                    ariaLabel: 'See details',
                    openInNewTab: false
                }
            ],
            requestContext: buildMockRequest(),
            telemetryContent: {},
        };
        const linkComponent = shallow(React.createElement(CookieComplianceLinks, Object.assign({}, mockProps)));
        expect(linkComponent).toMatchSnapshot();
    });
    it('Multiple links renders correctly', () => {
        const mockProps = {
            links: [
                {
                    linkText: 'See details.',
                    linkUrl: {
                        destinationUrl: '#'
                    },
                    ariaLabel: 'See details',
                    openInNewTab: false
                },
                {
                    linkText: 'See details.',
                    linkUrl: {
                        destinationUrl: '#'
                    },
                    ariaLabel: 'See details',
                    openInNewTab: true
                }
            ],
            requestContext: buildMockRequest(),
            telemetryContent: {},
        };
        const linkComponent = shallow(React.createElement(CookieComplianceLinks, Object.assign({}, mockProps)));
        expect(linkComponent).toMatchSnapshot();
    });
    it('Link renders correctly when no props are empty', () => {
        const mockProps = {
            links: [],
            requestContext: buildMockRequest(),
            telemetryContent: {},
        };
        const linkComponent = shallow(React.createElement(CookieComplianceLinks, Object.assign({}, mockProps)));
        expect(linkComponent).toMatchSnapshot();
    });
    it('Text renders correctly', () => {
        const mockProps = {
            text: '<span>This is a sample RichText</span>'
        };
        const linkComponent = shallow(React.createElement(RichTextComponent, Object.assign({ className: 'ms-cookie-compliance__text' }, mockProps)));
        expect(linkComponent).toMatchSnapshot();
    });
});
//# sourceMappingURL=components.test.js.map