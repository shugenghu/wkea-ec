import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { mount, shallow } from 'enzyme';
import * as React from 'react';
import CookieCompliance from '../cookie-compliance';
const mockConfig = {
    className: 'cookie-compliance-container',
    content: 'simple text'
};
const mockResources = {
    acceptCookiesButtonText: 'Accept',
    acceptCookiesAriaLabel: 'Accept cookies'
};
const mockActionContext = buildHydratedMockActionContext();
const mockContext = {
    actionContext: mockActionContext,
    requestContext: { locale: 'en-us' },
    cookies: {
        isConsentGiven: jest.fn(() => { return false; })
    }
};
const consentGivenContext = {
    actionContext: mockActionContext,
    requestContext: { locale: 'en-us' },
    cookies: {
        isConsentGiven: jest.fn(() => { return true; })
    }
};
describe('CookieCompliance', () => {
    it('renders correctly in container', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const cookieCompliance = mount(React.createElement(CookieCompliance, Object.assign({}, moduleProps)));
        cookieCompliance.setState({ visible: true });
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = cookieCompliance.childAt(0).props().props;
        expect(viewProps).toBeDefined();
        expect(viewProps.Content.className).toEqual('ms-cookie-compliance__content');
    });
    it('_onDismiss gets called', () => {
        const moduleProps = {
            ...buildMockModuleProps({}, {}, mockConfig),
            resources: mockResources,
            renderView: jest.fn(props => { return React.createElement("div", { props: props }); })
        };
        const cookieCompliance = shallow(React.createElement(CookieCompliance, Object.assign({}, moduleProps)));
        cookieCompliance.setState({ visible: true });
        expect(moduleProps.renderView).toBeCalled();
        const viewProps = cookieCompliance.props().props;
        expect(viewProps.acceptButton).toBeDefined();
        const acceptButton = mount(viewProps.acceptButton);
        expect(cookieCompliance.state('visible')).toBe(true);
        acceptButton.simulate('click');
        expect(cookieCompliance.state('visible')).toBe(false);
    });
});
//# sourceMappingURL=cookie-compliance.test.js.map