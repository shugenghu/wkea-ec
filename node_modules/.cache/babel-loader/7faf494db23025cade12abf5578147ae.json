{"ast":null,"code":"import\"core-js/modules/es.array.reduce.js\";import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import{buildCacheKey,getSimpleProducts,ProductInput}from'@msdyn365-commerce-modules/retail-actions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getOrderShipmentsHistoryAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';const getOrderShipmentHistory=paging=>async ctx=>{return getOrderShipmentsHistoryAsync({callerContext:ctx,queryResultSettings:{Paging:{Top:paging.top,Skip:paging.skip}}},'');};const getProducts=function getProducts(){let productIds=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let channelId=arguments.length>1?arguments[1]:undefined;return ctx=>{const productInputs=productIds.map(productId=>new ProductInput(productId,ctx.requestContext.apiSettings,channelId));return getSimpleProducts(productInputs,ctx);};};export class GetSalesOrderHistoryWithHydrationsInput{constructor(paging,apiSettings){this.getCacheKey=()=>buildCacheKey(\"OrderHistory\",this.apiSettings);this.getCacheObjectType=()=>\"OrderHistory\";this.dataCacheType=()=>'request';this.apiSettings=apiSettings;this.paging=paging;}}const splitProductsByChannelId=(salesOrders,currentChannelId)=>{const productIdsByChannel={};salesOrders.forEach(salesOrder=>{var _salesOrder$SalesLine;return salesOrder===null||salesOrder===void 0?void 0:(_salesOrder$SalesLine=salesOrder.SalesLines)===null||_salesOrder$SalesLine===void 0?void 0:_salesOrder$SalesLine.forEach(line=>{const orderProductId=line.ProductId||0;const orderChannelId=salesOrder.ChannelId||currentChannelId;if(!productIdsByChannel[orderChannelId]){productIdsByChannel[orderChannelId]=[];}productIdsByChannel[orderChannelId].push(orderProductId);});});return productIdsByChannel;};export async function getSalesOrderHistoryWithHydrationsAction(input,context){if(!context){throw new Error(\"getSalesOrderWithHydrationsAction - Action context cannot be null/undefined\");}const channelId=context.requestContext.apiSettings.channelId;let salesOrders=[];try{salesOrders=await getOrderShipmentHistory(input.paging)(context);}catch(error){throw error;}if(!salesOrders||!salesOrders.length){return{salesOrders:[],products:[]};}const productIdsByChannelId=splitProductsByChannelId(salesOrders,channelId);const getProductsPromise=Object.entries(productIdsByChannelId).map((_ref)=>{let[entryChannelId,entryProductIdsList]=_ref;const getProductsCall=getProducts(entryProductIdsList,Number(entryChannelId));return getProductsCall(context);});return Promise.all(getProductsPromise).then(productList=>{const products=productList.reduce((memo,list)=>{return[...memo,...list];},[]);return{salesOrders,products};}).catch(error=>{context.telemetry.exception(error);context.telemetry.debug('Failed to get products');throw error;});}export default createObservableDataAction({id:'@msdyn365-commerce-modules/order-management/order-history/get-order-shipment-history',action:getSalesOrderHistoryWithHydrationsAction});","map":{"version":3,"sources":["modules/order-history/actions/get-order-shipment-history.ts"],"names":[],"mappings":"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","sourcesContent":["import { buildCacheKey, getSimpleProducts, ProductInput } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    ICommerceApiSettings\n} from '@msdyn365-commerce/core';\nimport { getOrderShipmentsHistoryAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';\nimport { OrderShipments, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nexport interface IPaging {\n    top: number;\n    skip: number;\n}\n\nexport interface IOrderHistory {\n    salesOrders: OrderShipments[];\n    products: SimpleProduct[];\n}\n\n/**\n * Calls the Retail API and returns the products\n */\nconst getOrderShipmentHistory = (paging: IPaging) => async (ctx: IActionContext): Promise<OrderShipments[]> => {\n    return getOrderShipmentsHistoryAsync(\n        {\n            callerContext: ctx,\n            queryResultSettings: {\n                Paging: {\n                    Top: paging.top,\n                    Skip: paging.skip\n                }\n            }\n        },\n        ''\n    );\n};\n\n/**\n * Calls the Retail API and returns the products\n */\nconst getProducts = (productIds: number[] = [], channelId?: number) => (ctx: IActionContext): Promise<SimpleProduct[]> => {\n    const productInputs = productIds.map(productId => new ProductInput(productId, ctx.requestContext.apiSettings, channelId));\n    return getSimpleProducts(productInputs, ctx);\n};\n\n/**\n *  Action input\n */\nexport class GetSalesOrderHistoryWithHydrationsInput implements IActionInput {\n    public paging: IPaging;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(paging: IPaging, apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n        this.paging = paging;\n    }\n\n    public getCacheKey = () => buildCacheKey(`OrderHistory`, this.apiSettings);\n    public getCacheObjectType = () => `OrderHistory`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Splits product ids from the given orders into lists by their channel id.\n * @param {OrderShipments[]} salesOrders Orders with the products.\n * @param {number} currentChannelId Channel id to use by default if no channel id is provided for a product.\n * @returns {{ [x: number]: number[] }} A dictionary where the key is a channel id,\n * and the value is a list of product ids in which all items correspond to the key channel id.\n * @remark The list of product ids is always non-empty.\n */\nconst splitProductsByChannelId = (\n    salesOrders: OrderShipments[],\n    currentChannelId: number): { [x: number]: number[] } => {\n\n    const productIdsByChannel: { [x: number]: number[] } = {};\n\n    salesOrders.forEach(salesOrder => salesOrder?.SalesLines?.forEach(line => {\n        const orderProductId = line.ProductId || 0;\n        const orderChannelId = salesOrder.ChannelId || currentChannelId;\n        if (!productIdsByChannel[orderChannelId]) {\n            productIdsByChannel[orderChannelId] = [];\n        }\n        productIdsByChannel[orderChannelId].push(orderProductId);\n    }));\n\n    return productIdsByChannel;\n};\n\n/**\n * Get sales order with hydrations action\n */\nexport async function getSalesOrderHistoryWithHydrationsAction(\n    input: GetSalesOrderHistoryWithHydrationsInput,\n    context: IActionContext\n): Promise<IOrderHistory> {\n    if (!context) {\n        throw new Error(`getSalesOrderWithHydrationsAction - Action context cannot be null/undefined`);\n    }\n    const channelId = context.requestContext.apiSettings.channelId;\n    let salesOrders: OrderShipments[] = [];\n\n    try {\n        salesOrders = await getOrderShipmentHistory(input.paging)(context);\n    } catch (error) {\n        throw error;\n    }\n\n    if (!salesOrders || !salesOrders.length) {\n        return {\n            salesOrders: [],\n            products: []\n        };\n    }\n\n    // Splits the data by channel ids so that the products from different channels can be processed separately.\n    const productIdsByChannelId = splitProductsByChannelId(salesOrders, channelId);\n\n    // Promise that retrieves information about the products for each channel id.\n    // Note, the list of product ids should not be empty\n    // as it will generate an empty request which will force the promise to fail.\n    const getProductsPromise = Object.entries(productIdsByChannelId).map(\n        ([entryChannelId, entryProductIdsList]) => {\n            const getProductsCall = getProducts(entryProductIdsList, Number(entryChannelId));\n            return getProductsCall(context);\n        });\n\n    return Promise.all(getProductsPromise).then(\n        (productList): IOrderHistory => {\n            const products = productList.reduce((memo, list) => {\n                return [...memo, ...list];\n            }, []); // tslint:disable-line:align\n\n            return {\n                salesOrders,\n                products\n            };\n        }).catch(error => {\n            context.telemetry.exception(error);\n            context.telemetry.debug('Failed to get products');\n            throw error;\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/order-management/order-history/get-order-shipment-history',\n    action: <IAction<IOrderHistory>>getSalesOrderHistoryWithHydrationsAction\n});"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}