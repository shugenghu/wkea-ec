{"ast":null,"code":"import\"core-js/modules/es.promise.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{createObservableDataAction}from'@msdyn365-commerce/action-internal';import{searchByCriteriaAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{CATEGORY_PAGE_NAME}from'../../consts';import{getProductImageUrls}from'../../utils/product-list-utils';export const getProductsByCategoryList=async(input,context)=>{let categoryId;const urlTokens=context.requestContext.urlTokens;// If the category ID has been provided from the list metadata use it, otherwise grab the category ID from context\nif(input.listMetadata.categoryIds&&input.listMetadata.categoryIds.length>0){categoryId=input.listMetadata.categoryIds[0];}else if(urlTokens&&urlTokens.pageType&&urlTokens.pageType.toLowerCase()===CATEGORY_PAGE_NAME&&urlTokens.recordId){categoryId=+urlTokens.recordId;}else if(urlTokens&&urlTokens.categories&&urlTokens.categories.length>0){categoryId=+urlTokens.categories[0];}else{// Unable to determine category from list meta data or context\nthrow new Error('CategoryId Missing for ProductsByCategory List');}context.telemetry.debug(\"Category Id input to ProductsByCategory action : \".concat(categoryId));const productSearchCriteria={Context:{ChannelId:+input.channelId,CatalogId:+input.catalogId},CategoryIds:[categoryId]};return searchByCriteriaAsync({callerContext:context,queryResultSettings:{Paging:{Top:input.listMetadata.pageSize||10}}},productSearchCriteria).then(products=>{context.telemetry.debug('Products returned by ProductByCategory action',products);return getProductImageUrls(products,context.requestContext.apiSettings);}).catch(error=>{context.telemetry.error(\"Error running ProductByCategory action: \".concat(error));throw new Error(error);});};export const getProductsByCategoryListAction=createObservableDataAction({action:getProductsByCategoryList,id:'@msdyn365-commerce/products-by-category'});","map":{"version":3,"sources":["../../../../src/hydrators/product-list-actions/products-by-category.action.ts"],"names":[],"mappings":"sCAAA;;;AAGG,GAEH,OAAS,0BAAT,KAA2C,oCAA3C,CAEA,OAAS,qBAAT,KAAsC,wEAAtC,CAEA,OAAS,kBAAT,KAAmC,cAAnC,CACA,OAAS,mBAAT,KAAoC,gCAApC,CAGA,MAAO,MAAM,CAAA,yBAAyB,CAAG,MAAO,KAAP,CAAgC,OAAhC,GAA2F,CAChI,GAAI,CAAA,UAAJ,CACA,KAAM,CAAA,SAAS,CAAG,OAAO,CAAC,cAAR,CAAuB,SAAzC,CAEA;AACA,GAAI,KAAK,CAAC,YAAN,CAAmB,WAAnB,EAAkC,KAAK,CAAC,YAAN,CAAmB,WAAnB,CAA+B,MAA/B,CAAwC,CAA9E,CAAiF,CAC7E,UAAU,CAAG,KAAK,CAAC,YAAN,CAAmB,WAAnB,CAA+B,CAA/B,CAAb,CACH,CAFD,IAEO,IAAI,SAAS,EAAI,SAAS,CAAC,QAAvB,EAAmC,SAAS,CAAC,QAAV,CAAmB,WAAnB,KAAqC,kBAAxE,EAA8F,SAAS,CAAC,QAA5G,CAAsH,CACzH,UAAU,CAAG,CAAC,SAAS,CAAC,QAAxB,CACH,CAFM,IAEA,IAAI,SAAS,EAAI,SAAS,CAAC,UAAvB,EAAqC,SAAS,CAAC,UAAV,CAAqB,MAArB,CAA8B,CAAvE,CAA0E,CAC7E,UAAU,CAAG,CAAC,SAAS,CAAC,UAAV,CAAqB,CAArB,CAAd,CACH,CAFM,IAEA,CACH;AACA,KAAM,IAAI,CAAA,KAAJ,CAAU,gDAAV,CAAN,CACH,CACD,OAAO,CAAC,SAAR,CAAkB,KAAlB,4DAA4E,UAA5E,GACA,KAAM,CAAA,qBAAqB,CAA0B,CACjD,OAAO,CAAE,CACL,SAAS,CAAE,CAAC,KAAK,CAAC,SADb,CAEL,SAAS,CAAE,CAAC,KAAK,CAAC,SAFb,CADwC,CAKjD,WAAW,CAAE,CAAC,UAAD,CALoC,CAArD,CAQA,MAAO,CAAA,qBAAqB,CACxB,CAAE,aAAa,CAAE,OAAjB,CAA0B,mBAAmB,CAAE,CAAE,MAAM,CAAE,CAAE,GAAG,CAAE,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA+B,EAAtC,CAAV,CAA/C,CADwB,CAExB,qBAFwB,CAArB,CAIF,IAJE,CAII,QAAD,EAAoC,CACtC,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,+CAAxB,CAAyE,QAAzE,EACA,MAAO,CAAA,mBAAmB,CAAC,QAAD,CAAW,OAAO,CAAC,cAAR,CAAuB,WAAlC,CAA1B,CACH,CAPE,EAQF,KARE,CAQI,KAAK,EAAG,CACX,OAAO,CAAC,SAAR,CAAkB,KAAlB,mDAAmE,KAAnE,GACA,KAAM,IAAI,CAAA,KAAJ,CAAU,KAAV,CAAN,CACH,CAXE,CAAP,CAYH,CApCM,CAsCP,MAAO,MAAM,CAAA,+BAA+B,CAAG,0BAA0B,CAAC,CACtE,MAAM,CAAkC,yBAD8B,CAEtE,EAAE,CAAE,yCAFkE,CAAD,CAAlE","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createObservableDataAction } from '@msdyn365-commerce/action-internal';\nimport { IAction, IActionContext } from '@msdyn365-commerce/core-internal';\nimport { searchByCriteriaAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductSearchCriteria, ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { CATEGORY_PAGE_NAME } from '../../consts';\nimport { getProductImageUrls } from '../../utils/product-list-utils';\nimport { ProductListInput } from '../hydrator-action-inputs';\n\nexport const getProductsByCategoryList = async (input: ProductListInput, context: IActionContext): Promise<ProductSearchResult[]> => {\n    let categoryId: number;\n    const urlTokens = context.requestContext.urlTokens;\n\n    // If the category ID has been provided from the list metadata use it, otherwise grab the category ID from context\n    if (input.listMetadata.categoryIds && input.listMetadata.categoryIds.length > 0) {\n        categoryId = input.listMetadata.categoryIds[0];\n    } else if (urlTokens && urlTokens.pageType && urlTokens.pageType.toLowerCase() === CATEGORY_PAGE_NAME && urlTokens.recordId) {\n        categoryId = +urlTokens.recordId;\n    } else if (urlTokens && urlTokens.categories && urlTokens.categories.length > 0) {\n        categoryId = +urlTokens.categories[0];\n    } else {\n        // Unable to determine category from list meta data or context\n        throw new Error('CategoryId Missing for ProductsByCategory List');\n    }\n    context.telemetry.debug(`Category Id input to ProductsByCategory action : ${categoryId}`);\n    const productSearchCriteria: ProductSearchCriteria = {\n        Context: {\n            ChannelId: +input.channelId,\n            CatalogId: +input.catalogId\n        },\n        CategoryIds: [categoryId]\n    };\n\n    return searchByCriteriaAsync(\n        { callerContext: context, queryResultSettings: { Paging: { Top: input.listMetadata.pageSize || 10 } } },\n        productSearchCriteria\n    )\n        .then((products: ProductSearchResult[]) => {\n            context.telemetry.debug('Products returned by ProductByCategory action', products);\n            return getProductImageUrls(products, context.requestContext.apiSettings);\n        })\n        .catch(error => {\n            context.telemetry.error(`Error running ProductByCategory action: ${error}`);\n            throw new Error(error);\n        });\n};\n\nexport const getProductsByCategoryListAction = createObservableDataAction({\n    action: <IAction<ProductSearchResult[]>>getProductsByCategoryList,\n    id: '@msdyn365-commerce/products-by-category'\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}