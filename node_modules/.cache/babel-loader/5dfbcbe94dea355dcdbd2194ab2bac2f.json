{"ast":null,"code":"import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/es.string.split.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import{addClass,css,getText,nodeListToArray}from'../utilities/htmlExtensions';import{format,isNullOrWhiteSpace,trim}from'../utilities/stringExtensions';import{extend,getDimensions}from'../utilities/utilities';import{TtmlParser}from'./ttml-parser';import{xmlNS}from'./ttml-settings';export class TtmlContext{constructor(){this.translateToHtml=(element,applicableStyleSet,preserveSpace)=>{let translation;let innerNode;const name=this._getTagNameEquivalent(element);let htmlName='';let htmlClass='';switch(name){case'ttml:region':htmlClass='cue ';case'ttml:rootcontainerregion':case'ttml:body':case'ttml:div':htmlName='div';break;case'ttml:p':htmlName='p';break;case'ttml:span':htmlName='span';break;case'ttml:br':htmlName='br';break;default:}const role=TtmlParser.getAttributeNS(element,'role',this.settings.ttmlMetaNamespace);if(role){htmlClass+=\" \".concat(role);}const agent=TtmlParser.getAttributeNS(element,'agent',this.settings.ttmlMetaNamespace);if(agent){htmlClass+=\" \".concat(agent);}if(role==='x-ruby'){htmlName='ruby';}else if(role==='x-rubybase'){htmlName='rb';}else if(role==='x-rubytext'){htmlName='rt';}if(!isNullOrWhiteSpace(htmlName)){translation=TtmlContext._defaultStyle(this.ownerDocument.createElement(htmlName));addClass(translation,trim(htmlClass));const title=TtmlParser.getAttributeNS(element,'title',this.settings.ttmlMetaNamespace);if(title){translation.setAttribute('title',title);}const id=TtmlParser.getAttributeNS(element,'id',xmlNS);if(id&&this.settings.idPrefix){translation.setAttribute('id',this.settings.idPrefix+id);}if(name==='ttml:region'){innerNode=translation.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('div')));innerNode.setAttribute('style','display:table; border-spacing:0; cell-spacing:0; cell-padding:0; width:100%; height:100%');innerNode=innerNode.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('div')));css(innerNode,'display','table-cell');if(applicableStyleSet.displayAlign){this._translateStyle(name,innerNode,{displayAlign:applicableStyleSet.displayAlign});applicableStyleSet.displayAlign='';}}if(preserveSpace&&name==='ttml:span'){innerNode=translation.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('span')));css(innerNode,'white-space','pre');}css(translation,'position','static');css(translation,'width','100%');this._translateStyle(name,translation,applicableStyleSet);}return{outerNode:translation,innerNode:innerNode?innerNode:translation};};}static _ttmlToCssTextDecoration(ttmlTextDecoration){let textDecoration='';const parts=ttmlTextDecoration.split(/\\s+/);for(const value of parts){switch(value){case'none':case'noUnderline':case'noLineThrough':case'noOverline':textDecoration='none';}}for(const value of parts){switch(value){case'none':case'noUnderline':case'noLineThrough':case'noOverline':break;case'lineThrough':textDecoration+=' line-through';break;default:textDecoration+=\" \".concat(value);}}return trim(textDecoration);}static _ttmlToCssColor(color){let mappedColor=color;color=color.toLowerCase();if(color.indexOf('rgba')===0){const parts=TtmlContext.rgbaRegEx.exec(color);if(parts&&parts.length===5){const red=parts[1];const green=parts[2];const blue=parts[3];const alpha=parseInt(parts[4],10);mappedColor=format('rgba({0},{1},{2},{3})',red,green,blue,Math.round(alpha*100/255)/100);}}else if(color.charAt(0)==='#'&&color.length===9){const red=parseInt(color.substr(1,2),16);const green=parseInt(color.substr(3,2),16);const blue=parseInt(color.substr(5,2),16);const alpha=parseInt(color.substr(7,2),16);mappedColor=format('rgba({0},{1},{2},{3})',red,green,blue,Math.round(alpha*100/255)/100);}else if(TtmlContext.TtmlNamedColorMap[color]){mappedColor=TtmlContext.TtmlNamedColorMap[color];}return mappedColor;}static _defaultStyle(element){css(element,'background-color',TtmlContext.TtmlNamedColorMap.transparent);css(element,'offset','0');css(element,'margin','0');css(element,'padding','0');css(element,'border','0');return element;}setOwnerDocument(ownerDocument){this.ownerDocument=ownerDocument;}updateRelatedMediaObjectRegion(dimensions){if(dimensions!==null&&(!this.settings.relatedMediaObjectRegion||dimensions.width!==this.settings.relatedMediaObjectRegion.width||dimensions.height!==this.settings.relatedMediaObjectRegion.height)){this.settings.relatedMediaObjectRegion={width:dimensions.width,height:dimensions.height};return true;}return false;}hasEvents(){return this.events&&!!this.events.length;}resetCurrentEvents(){this.currentEvents=[];}updateCurrentEvents(time){const timeEvents=this._getTemporallyActiveEvents(time);const currentEventsLength=this.currentEvents?this.currentEvents.length:0;const timeEventsLength=timeEvents?timeEvents.length:0;if(currentEventsLength!==timeEventsLength){this.currentEventsTime=time;this.currentEvents=timeEvents;return true;}if(this.currentEvents){for(let index=0;index<currentEventsLength;index++){if(this.currentEvents[index].time!==timeEvents[index].time){this.currentEventsTime=time;this.currentEvents=timeEvents;return true;}}}return false;}getCues(time){let cues=[];if(this.currentEventsTime!==time){this.updateCurrentEvents(time);}const preserveSpace=TtmlParser.getAttributeNS(this.root,'space',xmlNS)==='preserve';const regions=this.layout?this.layout.getElementsByTagNameNS(this.settings.ttmlNamespace,'region'):[];for(const region of regions){const regionId=TtmlParser.getAttributeNS(region,'id',xmlNS);const anonymousId=region.getAttribute('data-isanonymous');if(anonymousId||regionId){const translation=this._translate(region,this.settings.defaultRegionStyle,preserveSpace,time,this.translateToHtml);if(translation.outerNode&&translation.innerNode){const innerNode=translation.innerNode;const outerNode=translation.outerNode;for(const event of this.events){if(event.element){if(this._isInRegion(event.element,anonymousId?'':regionId)){const pruneResult=this._prune(event.element,translation.inheritableStyleSet,preserveSpace,time,this.translateToHtml);let cueBody=pruneResult.prunedElement;if(!pruneResult.hasPreservedContent&&cueBody&&!trim(getText(cueBody)).length){cueBody=null;}if(cueBody){innerNode.appendChild(cueBody);}}}}const showAlways=outerNode.getAttribute('data-showBackground')==='always';if(showAlways||innerNode.children.length){if(showAlways){outerNode.removeAttribute('data-showBackground');}cues.push(outerNode);}}}}if(cues.length){const rcr=this._translate(this.rootContainerRegion,{overflow:'hidden',padding:'0'},false,time,this.translateToHtml);for(const cue of cues){rcr.innerNode.appendChild(cue);}cues=[];cues.push(rcr.outerNode);}return cues;}_getTemporallyActiveEvents(time){return this.events.filter(event=>{return event.element?this._isTemporallyActive(event.element,time):true;});}_isTemporallyActive(element,time){return(parseInt(element.getAttribute('data-time-start'),10)||0)<=time&&time<(parseInt(element.getAttribute('data-time-end'),10)||0);}_translate(element,inheritedStyleSet,preserveSpace,time,translator){let translation;let computedStyleSet;if(this._isTemporallyActive(element,time)){const tag=this._getTagNameEquivalent(element);computedStyleSet=this._getComputedStyleSet(element,inheritedStyleSet,tag,time);if(computedStyleSet.display!=='none'){const applicableStyleSet=this._getApplicableStyleSet(computedStyleSet,tag);translation=translator(element,applicableStyleSet,preserveSpace);return{outerNode:translation.outerNode,innerNode:translation.innerNode,inheritableStyleSet:this._getInheritableStyleSet(computedStyleSet)};}}return{outerNode:null,innerNode:null,inheritableStyleSet:null};}_translateStyle(tagName,element,applicableStyleSet){for(const style in applicableStyleSet){if(applicableStyleSet[style]){this._applyStyle(element,tagName,style,applicableStyleSet[style]);}}}_prune(element,inheritedStyleSet,preserveSpace,time,translator){let ignoreAncestors=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let outerNode;let hasPreservedContent=false;let translation=this._translate(element,inheritedStyleSet,preserveSpace,time,translator);if(translation.outerNode!==null){const tag=this._getTagNameEquivalent(element);outerNode=translation.outerNode;let innerNode=translation.innerNode;for(const child of nodeListToArray(element.childNodes)){if(child.nodeType===Node.COMMENT_NODE){}else if(child.nodeType===Node.TEXT_NODE){innerNode.appendChild(document.createTextNode(child.data));if(preserveSpace&&tag==='ttml:span'){hasPreservedContent=true;}}else{let childPreserveSpace=preserveSpace;const spaceAttr=TtmlParser.getAttributeNS(child,'space',xmlNS);if(spaceAttr){childPreserveSpace=spaceAttr==='preserve';}const pruneRecord=this._prune(child,translation.inheritableStyleSet,childPreserveSpace,time,translator,true);hasPreservedContent=hasPreservedContent||pruneRecord.hasPreservedContent;if(pruneRecord.prunedElement){innerNode.appendChild(pruneRecord.prunedElement);}}}if(!ignoreAncestors){let ancestor=element.parentNode;while(ancestor!==null&&ancestor.nodeType===Node.ELEMENT_NODE&&ancestor!==this.body){translation=this._translate(ancestor,inheritedStyleSet,preserveSpace,time,translator);if(translation.outerNode){innerNode=translation.innerNode;innerNode.appendChild(outerNode);outerNode=translation.outerNode;}else{break;}ancestor=ancestor.parentNode;}}}return{prunedElement:outerNode,hasPreservedContent:hasPreservedContent};}_getComputedStyleSet(element,inheritedStyleSet,tagName,time){const computedStyleSet=extend({},inheritedStyleSet);extend(computedStyleSet,this.styleSetCache[parseInt(element.getAttribute('data-styleSet'),10)]);const sets=element.getElementsByTagNameNS(this.settings.ttmlNamespace,'set');for(const set of nodeListToArray(sets)){if(this._isTemporallyActive(set,time)){TtmlParser.applyInlineStyles(this.settings,computedStyleSet,set);}}if(tagName==='ttml:p'&&computedStyleSet.lineHeight==='normal'){const fontSizes=this._appendSpanFontSizes(element,this._getInheritableStyleSet(computedStyleSet),time,'');if(fontSizes){computedStyleSet['computed-lineHeight']=fontSizes;}}return computedStyleSet;}_getApplicableStyleSet(computedStyleSet,tagName){const applicableStyleSet={};if(computedStyleSet.extent&&this._isStyleApplicable(tagName,'extent')){applicableStyleSet.extent=computedStyleSet.extent;}if(computedStyleSet.color&&this._isStyleApplicable(tagName,'color')){applicableStyleSet.color=computedStyleSet.color;}for(const style in computedStyleSet){if(this._isStyleApplicable(tagName,style)){applicableStyleSet[style]=computedStyleSet[style];}}return applicableStyleSet;}_isStyleApplicable(tagName,style){switch(style){case'backgroundColor':case'display':case'visibility':return'ttml:body ttml:div ttml:p ttml:region ttml:rootcontainerregion ttml:span ttml:br'.indexOf(tagName)>=0;case'fontFamily':case'fontSize':case'fontStyle':case'fontWeight':return'ttml:p ttml:span ttml:br'.indexOf(tagName)>=0;case'color':case'textDecoration':case'textOutline':case'wrapOption':return'ttml:span ttml:br'.indexOf(tagName)>=0;case'direction':case'unicodeBidi':return'ttml:p ttml:span ttml:br'.indexOf(tagName)>=0;case'displayAlign':case'opacity':case'origin':case'overflow':case'padding':case'showBackground':case'writingMode':case'zIndex':return'ttml:region ttml:rootcontainerregion'.indexOf(tagName)>=0;case'extent':return'ttml:tt ttml:region ttml:rootcontainerregion'.indexOf(tagName)>=0;case'computed-lineHeight':case'lineHeight':case'textAlign':return'ttml:p'.indexOf(tagName)>=0;default:return false;}}_getInheritableStyleSet(computedStyleSet){const inheritedStyleSet={};for(const style in computedStyleSet){if(computedStyleSet.hasOwnProperty(style)){switch(style){case'backgroundColor':case'computed-lineHeight':case'display':case'displayAlign':case'extent':case'opacity':case'origin':case'overflow':case'padding':case'showBackground':case'unicodeBidi':case'writingMode':case'zIndex':break;default:inheritedStyleSet[style]=computedStyleSet[style];}}}return inheritedStyleSet;}_appendSpanFontSizes(element,inheritedStyleSet,time,value){for(const child of nodeListToArray(element.childNodes)){if(child.nodeType===Node.ELEMENT_NODE){const tag=this._getTagNameEquivalent(child);if(tag==='ttml:span'){const computedStyleSet=this._getComputedStyleSet(child,inheritedStyleSet,'ttml:span',time);const fontSize=computedStyleSet.fontSize;if(fontSize){value+=(value?',':'')+fontSize;}value=this._appendSpanFontSizes(child,this._getInheritableStyleSet(computedStyleSet),time,value);}}}return value;}_isInRegion(element,regionId){if(!regionId){return true;}const elemRegion=TtmlParser.getAttributeNS(element,'region',this.settings.ttmlNamespace);if(elemRegion===regionId){return true;}if(!elemRegion){let ancestor=element.parentNode;while(ancestor!==null&&ancestor.nodeType===Node.ELEMENT_NODE){const id=this._getRegionId(ancestor);if(id){return id===regionId;}ancestor=ancestor.parentNode;}for(const node of nodeListToArray(element.getElementsByTagName('*'))){if(this._getRegionId(node)===regionId){return true;}}}return false;}_getRegionId(element){let regionId;if(element.nodeType===Node.ELEMENT_NODE&&element.namespaceURI===this.settings.ttmlNamespace){if(TtmlParser.getLocalTagName(element)==='region'){regionId=TtmlParser.getAttributeNS(element,'id',xmlNS);}else{regionId=TtmlParser.getAttributeNS(element,'region',this.settings.ttmlNamespace);}}return regionId;}_getTagNameEquivalent(element){const tagName=TtmlParser.getLocalTagName(element);const nameSpace=element.namespaceURI;if(nameSpace===this.settings.ttmlNamespace){return\"ttml:\".concat(tagName);}if(nameSpace==='http://www.w3.org/1999/xhtml'){return tagName;}return'';}_applyStyle(element,tagName,style,value){let mappedValue=value;switch(style){case'color':case'backgroundColor':{mappedValue=TtmlContext._ttmlToCssColor(value);css(element,style,mappedValue);return;}case'direction':case'display':{css(element,style,mappedValue);return;}case'displayAlign':{switch(value){case'before':mappedValue='top';break;case'center':mappedValue='middle';break;case'after':mappedValue='bottom';}css(element,'vertical-align',mappedValue);return;}case'extent':{let width;let height;if(value!=='auto'){const coords=value.split(/\\s+/);if(coords.length===2){width=this._ttmlToCssUnits(coords[0],true);height=this._ttmlToCssUnits(coords[1],false);}}if(!width){width=\"\".concat((this.settings.rootContainerRegionDimensions?this.settings.rootContainerRegionDimensions.width:this.settings.relatedMediaObjectRegion.width).toString(),\"px\");height=\"\".concat((this.settings.rootContainerRegionDimensions?this.settings.rootContainerRegionDimensions.height:this.settings.relatedMediaObjectRegion.height).toString(),\"px\");}css(element,'position','absolute');css(element,'width',width);css(element,'min-width',width);css(element,'max-width',width);css(element,'height',height);css(element,'min-height',height);css(element,'max-height',height);return;}case'fontFamily':{if(this.settings.fontMap&&this.settings.fontMap[value]){mappedValue=this.settings.fontMap[value];}if(value==='smallCaps'){css(element,'fontVariant','small-caps');}css(element,style,mappedValue);return;}case'fontSize':{const parts=value.split(/\\s+/);const size=parts.length>1?parts[1]:parts[0];mappedValue=this._ttmlToCssFontSize(size,false,0.75,tagName==='ttml:region');css(element,style,mappedValue);return;}case'fontStyle':case'fontWeight':{css(element,style,mappedValue);return;}case'lineHeight':{mappedValue=value==='normal'?value:this._ttmlToCssFontSize(value,false);css(element,'line-height',mappedValue);return;}case'computed-lineHeight':{const values=value.split(',');let max=-1;for(const fontSize of values){mappedValue=this._ttmlToCssFontSize(fontSize,false);if(mappedValue&&mappedValue.indexOf('px')===mappedValue.length-2){const height=parseFloat(mappedValue.substr(0,mappedValue.length-2));if(!isNaN(height)&&height>max){max=height;}}}if(max>=0){css(element,'line-height',\"\".concat(max,\"px\"));}return;}case'origin':{if(value!=='auto'){const coords=value.split(/\\s+/);if(coords.length===2){css(element,'position','absolute');css(element,'left',this._ttmlToCssUnits(coords[0],true));css(element,'top',this._ttmlToCssUnits(coords[1],false));}}return;}case'opacity':{css(element,style,mappedValue);return;}case'padding':{const contextRect=getDimensions(element);const parts=value.split(/\\s+/);let first;let second;let third;let forth;switch(parts.length){case 1:first=this._ttmlToCssUnits(parts[0],false,contextRect);second=this._ttmlToCssUnits(parts[0],true,contextRect);mappedValue=format('{0} {1} {0} {1}',first,second);break;case 2:first=this._ttmlToCssUnits(parts[0],false,contextRect);second=this._ttmlToCssUnits(parts[1],true,contextRect);mappedValue=format('{0} {1} {0} {1}',first,second);break;case 3:first=this._ttmlToCssUnits(parts[0],false,contextRect);second=this._ttmlToCssUnits(parts[1],true,contextRect);third=this._ttmlToCssUnits(parts[2],false,contextRect);mappedValue=format('{0} {1} {2} {1}',first,second,third);break;case 4:first=this._ttmlToCssUnits(parts[0],false,contextRect);second=this._ttmlToCssUnits(parts[1],true,contextRect);third=this._ttmlToCssUnits(parts[2],false,contextRect);forth=this._ttmlToCssUnits(parts[3],true,contextRect);mappedValue=format('{0} {1} {2} {3}',first,second,third,forth);}css(element,'box-sizing','border-box');css(element,'border-style','solid');css(element,'border-color','transparent');css(element,'border-width',mappedValue);return;}case'textAlign':{switch(value){case'start':mappedValue='left';break;case'end':mappedValue='right';}css(element,'text-align',mappedValue);return;}case'textDecoration':{mappedValue=TtmlContext._ttmlToCssTextDecoration(value);css(element,'text-decoration',mappedValue);return;}case'textOutline':{const defaultColor=css(element,'color');css(element,'text-shadow',this._ttmlToCssTextOutline(mappedValue,defaultColor));return;}case'unicodeBidi':{switch(value){case'bidiOverride':mappedValue='bidi-override';}css(element,'unicode-bidi',mappedValue);return;}case'visibility':{css(element,style,mappedValue);return;}case'writingMode':{switch(value){case'lr':case'lrtb':{css(element,'writing-mode','horizontal-tb');css(element,'-webkit-writing-mode','horizontal-tb');css(element,'writing-mode','lr-tb');return;}case'rl':case'rltb':{css(element,'writing-mode','horizontal-tb');css(element,'-webkit-writing-mode','horizontal-tb');css(element,'writing-mode','rl-tb');return;}case'tblr':{css(element,'text-orientation','upright');css(element,'writing-mode','vertical-lr');css(element,'-webkit-text-orientation','upright');css(element,'-webkit-writing-mode','vertical-lr');css(element,'writing-mode','tb-lr');return;}case'tb':case'tbrl':{css(element,'text-orientation','upright');css(element,'writing-mode','vertical-rl');css(element,'-webkit-text-orientation','upright');css(element,'-webkit-writing-mode','vertical-rl');css(element,'writing-mode','tb-rl');return;}}return;}case'wrapOption':{css(element,'white-space',value==='noWrap'?'nowrap':value==='pre'?'pre':'normal');return;}case'zIndex':{css(element,style,mappedValue);return;}default:{css(element,style,mappedValue);return;}}}_ttmlToCssUnits(ttmlUnits,width,contextRect){let cssUnits=ttmlUnits;if(ttmlUnits){const unit=ttmlUnits.charAt(ttmlUnits.length-1);if(unit==='c'||unit==='%'){const container=this.settings.rootContainerRegionDimensions?this.settings.rootContainerRegionDimensions:this.settings.relatedMediaObjectRegion;const length=parseFloat(ttmlUnits.substr(0,ttmlUnits.length-1));let containerSize=width?container.width:container.height;let value;if(unit==='c'){const gridSize=width?this.settings.cellResolution.columns:this.settings.cellResolution.rows;value=length*containerSize/gridSize;}else if(unit==='%'){if(contextRect){containerSize=width?contextRect.width:contextRect.height;}value=containerSize*length/100;}value=Math.round(value*10)/10;cssUnits=\"\".concat(value,\"px\");}}return cssUnits;}_ttmlToCssFontSize(ttmlUnits,width){let scaleFactor=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;let isRegion=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let cssUnits=ttmlUnits;if(ttmlUnits){const unit=ttmlUnits.charAt(ttmlUnits.length-1);if(unit==='c'||isRegion&&unit==='%'){const container=this.settings.rootContainerRegionDimensions?this.settings.rootContainerRegionDimensions:this.settings.relatedMediaObjectRegion;const length=parseFloat(ttmlUnits.substr(0,ttmlUnits.length-1));const containerSize=width?container.width:container.height;const gridSize=width?this.settings.cellResolution.columns:this.settings.cellResolution.rows;let value=length*containerSize/gridSize;if(unit==='%'){value/=100;}value=Math.floor(value*scaleFactor*10)/10;cssUnits=\"\".concat(value,\"px\");}}return cssUnits;}_ttmlToCssTextOutline(textOutline,defaultColor){let textShadow='none';if(!isNullOrWhiteSpace(textOutline)&&textOutline!=='none'){let parts=textOutline.split(/\\s+/);let color='';let thickness='';let blur='';if(parts.length===1){color=defaultColor;thickness=parts[0];blur='';}else if(parts.length===3){color=parts[0];thickness=parts[1];blur=parts[2];}else if(parts.length===2){const firstChar=parts[0].charAt(0);if(firstChar>='0'&&firstChar<='9'){color=defaultColor;thickness=parts[0];blur=parts[1];}else{color=parts[0];thickness=parts[1];blur='';}}blur=this._ttmlToCssFontSize(blur,false,0.75);thickness=this._ttmlToCssFontSize(thickness,false,0.75);parts=TtmlContext.lengthRegEx.exec(thickness);if(parts&&parts.length===3){const width=Math.round(parseFloat(parts[1]));const units=parts[2];textShadow='';for(let x=-width;x<=width;x++){for(let y=-width;y<=width;y++){if(x!==0||y!==0){textShadow+=format('{0}{4} {1}{4} {2} {3}, ',x,y,blur,TtmlContext._ttmlToCssColor(color),units);}}}if(textShadow){textShadow=textShadow.substr(0,textShadow.length-2);}}}return textShadow;}}TtmlContext.lengthRegEx=/\\s*(\\d+\\.*\\d*)(.*)\\s*/;TtmlContext.rgbaRegEx=/\\s*rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)\\s*/;TtmlContext.TtmlNamedColorMap={transparent:'rgba(0,0,0,0)',black:'rgba(0,0,0,1)',silver:'rgba(192,192,192,1)',gray:'rgba(128,128,128,1)',white:'rgba(255,255,255,1)',maroon:'rgba(128,0,0,1)',red:'rgba(255,0,0,1)',purple:'rgba(128,0,128,1)',fuchsia:'rgba(255,0,255,1)',magenta:'rgba(255,0,255,1)',green:'rgba(0,128,0,1)',lime:'rgba(0,255,0,1)',olive:'rgba(128,128,0,1)',yellow:'rgba(255,255,0,1)',navy:'rgba(0,0,128,1)',blue:'rgba(0,0,255,1)',teal:'rgba(0,128,128,1)',aqua:'rgba(0,255,255,1)',cyan:'rgba(0,255,255,1)'};","map":{"version":3,"sources":["videoplayer/components/closed-captions/ttml-context.ts"],"names":[],"mappings":"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","sourcesContent":["import {addClass, css, getText, nodeListToArray} from '../utilities/htmlExtensions';\nimport {format, isNullOrWhiteSpace, trim} from '../utilities/stringExtensions';\nimport {extend, getDimensions, IClientDimension, IDictionaryStringString} from '../utilities/utilities';\nimport {ITtmlEvent, TtmlParser} from './ttml-parser';\nimport {TtmlSettings, xmlNS} from './ttml-settings';\n\n// Timed Text Markup Language (TTML).\n// See http://www.w3.org/TR/ttml1/ for more details.\n\n/*\n* @interface ITtmlContext\n* @classdesc - The TtmlContext interface contract.\n* @export\n*/\nexport interface ITtmlContext {\n    setOwnerDocument(ownerDocument: Document): void;\n    updateRelatedMediaObjectRegion(dimensions: IClientDimension): boolean;\n    resetCurrentEvents(): void;\n    hasEvents(): boolean;\n    updateCurrentEvents(time: number): boolean;\n    getCues(time: number): HTMLElement[];\n}\n\n/*\n* @interface ITtmlTranslationResult\n* @classdesc - The ITtmlTranslationResult interface contract.\n*/\ninterface ITtmlTranslationResult {\n    outerNode: HTMLElement | null;\n    innerNode: HTMLElement | null;\n    inheritableStyleSet?: IDictionaryStringString | null;\n}\n\n/*\n* @interface ITtmlPruneResult\n* @classdesc - The ITtmlPruneResult interface contract.\n*/\ninterface ITtmlPruneResult {\n    prunedElement: Element;\n    hasPreservedContent: boolean;\n}\n\n/**\n *\n * The TtmlContext. An instance of this class is returned from the TttmlParser.parse() method after it\n *              parses a ttml file. This context is then used by the VideoClosedCaptions object to get the captions\n *              for any play position of the video.\n *\n */\nexport class TtmlContext implements ITtmlContext {\n\n    /*\n    * @name - lengthRegEx\n    * @description - The regular expression pattern used in ttml->css text outline conersion.\n    * @static\n    * @private\n    * @type {RegExp}\n    */\n    private static lengthRegEx: RegExp = /\\s*(\\d+\\.*\\d*)(.*)\\s*/;\n\n    /*\n    * @name - rgbaRegEx\n    * @description - The regular expression pattern used in ttml->css color conersion.\n    * @static\n    * @private\n    * @type {RegExp}\n    */\n    private static rgbaRegEx: RegExp = /\\s*rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)\\s*/;\n\n    /*\n    * @name - TtmlNamedColorMap\n    * @description - The table used to map named ttml color values to css color values.\n    * @static\n    * @private\n    * @type {IDictionaryStringString}\n    */\n    private static TtmlNamedColorMap: IDictionaryStringString = {\n        transparent: 'rgba(0,0,0,0)',\n        black: 'rgba(0,0,0,1)',\n        silver: 'rgba(192,192,192,1)',\n        gray: 'rgba(128,128,128,1)',\n        white: 'rgba(255,255,255,1)',\n        maroon: 'rgba(128,0,0,1)',\n        red: 'rgba(255,0,0,1)',\n        purple: 'rgba(128,0,128,1)',\n        fuchsia: 'rgba(255,0,255,1)',\n        magenta: 'rgba(255,0,255,1)',\n        green: 'rgba(0,128,0,1)',\n        lime: 'rgba(0,255,0,1)',\n        olive: 'rgba(128,128,0,1)',\n        yellow: 'rgba(255,255,0,1)',\n        navy: 'rgba(0,0,128,1)',\n        blue: 'rgba(0,0,255,1)',\n        teal: 'rgba(0,128,128,1)',\n        aqua: 'rgba(0,255,255,1)',\n        cyan: 'rgba(0,255,255,1)'\n    };\n\n    /*\n    * @name - events\n    * @description - The set of all ttml events.\n    * @public\n    * @type {ITtmlEvent[]}\n    */\n    public events!: ITtmlEvent[];\n\n    /*\n    * @name - settings\n    * @description - The ttml settings.\n    * @public\n    * @type {TtmlSettings}\n    */\n    public settings!: TtmlSettings;\n\n    /*\n    * @name - styleSetCache\n    * @description - The ttml styleSet cache.\n    * @public\n    * @type {IDictionaryStringString[]}\n    */\n    public styleSetCache!: IDictionaryStringString[];\n\n    /*\n    * @name - rootContainerRegion\n    * @description - The root container region.\n    * @public\n    * @type {Element}\n    */\n    public rootContainerRegion!: Element;\n\n    /*\n    * @name - root\n    * @description - The root element.\n    * @public\n    * @type {Element}\n    */\n    public root!: Element;\n\n    /*\n    * @name - body\n    * @description - The body element.\n    * @public\n    * @type {Element}\n    */\n    public body!: Element;\n\n    /*\n    * @name - layout\n    * @description - The layout element.\n    * @public\n    * @type {Element}\n    */\n    public layout!: Element;\n\n    /*\n    * @name - ownerDocument\n    * @description - The owner document for this context. Used to create html elements.\n    * @private\n    * @type {Document}\n    */\n    private ownerDocument!: Document;\n\n    /*\n    * @name - currentEvents\n    * @description - The current set of temporally active events.\n    * @private\n    * @type {ITtmlEvent[]}\n    */\n    private currentEvents!: ITtmlEvent[];\n\n    /*\n    * @name - currentEventsTime\n    * @description - The time the currentEvents was populated.\n    * @private\n    * @type {number}\n    */\n    private currentEventsTime!: number;\n\n        /*\n    * @name - ttmlToCssTextDecoration\n    * @description - Converts a ttml text decoration style value to a css one.\n    * @static\n    * @private\n    * @param {string} ttmlTextDecoration - The ttml value.\n    * @returns {string} - The css value.\n    */\n   private static _ttmlToCssTextDecoration(ttmlTextDecoration: string): string {\n    let textDecoration = '';\n    const parts = ttmlTextDecoration.split(/\\s+/);\n\n    // Since we have no CSS for the 'no' values just replace them all with a none at the front of the list.\n    for (const value of parts) {\n        // tslint:disable-next-line: switch-default\n        switch (value) {\n            case 'none':\n            case 'noUnderline':\n            case 'noLineThrough':\n            case 'noOverline':\n                textDecoration = 'none';\n        }\n    }\n\n    // Then append all the others.\n    for (const value of parts) {\n        switch (value) {\n            case 'none':\n            case 'noUnderline':\n            case 'noLineThrough':\n            case 'noOverline':\n                break;\n            case 'lineThrough':\n                textDecoration += ' line-through';\n                break;\n            default:\n                textDecoration += ` ${value}`;\n        }\n    }\n\n    return trim(textDecoration);\n}\n\n/*\n* @name - ttmlToCssColor\n* @description - Converts a ttml text color style value to a css one.\n*                #RRGGBB and rgb(rrr,ggg,bbb) do not need conversion and are not modified.\n*                #RRGGBBAA is modified because css doesn't support it (at least as implemented in todays browsers).\n*                rgba(rrr,ggg,bbb,aaa) is converted to rgba(rrr,ggg,bbb,0-1).\n*                ttml namedColors are converted to rgb(rrr,ggg,bbb) in the unlikely event that their alpha (only) is overridden.\n* @static\n* @private\n* @param {string} color - The ttml value.\n* @returns {string} - The css value.\n*/\nprivate static _ttmlToCssColor(color: string): string {\n    let mappedColor = color;\n\n    color = color.toLowerCase();\n\n    if (color.indexOf('rgba') === 0) {\n        const parts = TtmlContext.rgbaRegEx.exec(color);\n\n        if (parts && (parts.length === 5)) {\n            const red = parts[1];\n            const green = parts[2];\n            const blue = parts[3];\n            const alpha = parseInt(parts[4], 10);\n\n            mappedColor = format('rgba({0},{1},{2},{3})', red, green, blue, Math.round(alpha * 100 / 255) / 100);\n        }\n    } else if ((color.charAt(0) === '#') && (color.length === 9)) {\n        const red = parseInt(color.substr(1, 2), 16);\n        const green = parseInt(color.substr(3, 2), 16);\n        const blue = parseInt(color.substr(5, 2), 16);\n        const alpha = parseInt(color.substr(7, 2), 16);\n\n        mappedColor = format('rgba({0},{1},{2},{3})', red, green, blue, Math.round(alpha * 100 / 255) / 100);\n    } else if (TtmlContext.TtmlNamedColorMap[color]) {\n        mappedColor = TtmlContext.TtmlNamedColorMap[color];\n    }\n\n    return mappedColor;\n}\n\n/*\n* @name - defaultStyle\n* @description - Applies default styles to the element to match the ttml defaults.\n* @static\n* @private\n* @param {HTMLElement} element - The element to set the default styles on.\n* @returns {HTMLElement} - The specified element (for chaining).\n*/\nprivate static _defaultStyle(element: HTMLElement): HTMLElement {\n    // Set some element styles to our ttml defaults for them.\n    css(element, 'background-color', TtmlContext.TtmlNamedColorMap.transparent);\n    css(element, 'offset', '0');\n    css(element, 'margin', '0');\n    css(element, 'padding', '0');\n    css(element, 'border', '0');\n    return element;\n}\n\n    /*\n    * @constructor\n    * @description - Constructor for the TtmlContext class.\n    * @public\n    */\n    constructor() {\n        // Nothing to do at this time...\n    }\n\n    /*\n    * @name - setOwnerDocument\n    * @description - Set the context's owner document. It will use this to create elements during translation.\n    * @public\n    * @param {Document} ownerDocument - The owner document for this context.\n    * @returns {void}\n    */\n    public setOwnerDocument(ownerDocument: Document): void {\n        this.ownerDocument = ownerDocument;\n    }\n\n    /*\n    * @name - updateRelatedMediaObjectRegion\n    * @description - Updates the context's media object region.\n    * @public\n    * @param {IClientDimension} dimensions - The desired dimensions for the region.\n    * @returns {boolean} - True if the dimensions where changed, otherwise false.\n    */\n    public updateRelatedMediaObjectRegion(dimensions: IClientDimension): boolean {\n        if (dimensions !== null && (!this.settings.relatedMediaObjectRegion ||\n            (dimensions.width !== this.settings.relatedMediaObjectRegion.width) ||\n            (dimensions.height !== this.settings.relatedMediaObjectRegion.height))) {\n            this.settings.relatedMediaObjectRegion = {\n                width: dimensions.width,\n                height: dimensions.height\n            };\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n    * @name - hasEvents\n    * @description - Indicates whether or not the context has events.\n    * @public\n    * @returns {boolean} - True if the context has events, otherwise false.\n    */\n    public hasEvents(): boolean {\n        return this.events && !!this.events.length;\n    }\n\n    /*\n    * @name - resetCurrentEvents\n    * @description - Resets the context's currentEvents.\n    * @public\n    * @returns {void}\n    */\n    public resetCurrentEvents(): void {\n        this.currentEvents = [];\n    }\n\n    /*\n    * @name - updateCurrentEvents\n    * @description - Updates the context's currentEvents if there are new events for the specified time.\n    * @public\n    * @param {number} time - The time to get events for.\n    * @returns {boolean} - True if the events for the specified time are different than the currentEvents, otherwise false.\n    */\n    public updateCurrentEvents(time: number): boolean {\n        const timeEvents = this._getTemporallyActiveEvents(time);\n\n        // As a shortcut compare lengths first.\n        const currentEventsLength = this.currentEvents ? this.currentEvents.length : 0;\n        const timeEventsLength = timeEvents ? timeEvents.length : 0;\n\n        if (currentEventsLength !== timeEventsLength) {\n            this.currentEventsTime = time;\n            this.currentEvents = timeEvents;\n            return true;\n        }\n\n        if (this.currentEvents) {\n            for (let index = 0; index < currentEventsLength; index++) {\n                if (this.currentEvents[index].time !== timeEvents[index].time) {\n                    this.currentEventsTime = time;\n                    this.currentEvents = timeEvents;\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /*\n    * @name - getCues\n    * @description - The set of cues that apply to the specified time.\n    * @public\n    * @param {number} time - The time to get cues for.\n    * @returns {HTMLElement[]} - The set of cues for the specified time, otherwise an empty [].\n    */\n// tslint:disable-next-line: cyclomatic-complexity\n   public getCues(time: number): HTMLElement[] {\n    let cues: HTMLElement[] = [];\n\n    if (this.currentEventsTime !== time) {\n        this.updateCurrentEvents(time);\n    }\n\n    // Find all the region elements in the TTML namespace.\n    const preserveSpace = (TtmlParser.getAttributeNS(this.root, 'space', xmlNS) === 'preserve');\n    const regions = <HTMLElement[]>(this.layout ? this.layout.getElementsByTagNameNS(this.settings.ttmlNamespace, 'region') : []);\n\n    for (const region of regions) {\n        const regionId = TtmlParser.getAttributeNS(region, 'id', xmlNS);\n        const anonymousId = region.getAttribute('data-isanonymous');\n\n        if (anonymousId || regionId) {\n            const translation = this._translate(region, this.settings.defaultRegionStyle, preserveSpace, time, this.translateToHtml);\n\n            if (translation.outerNode && translation.innerNode) {\n                const innerNode = translation.innerNode;\n                const outerNode = translation.outerNode;\n\n                // Create a new subtree for the body element, prune elements\n                // not associated with the region, and if its not empty then\n                // select it into this region by adding it to div container.\n                for (const event of this.events) {\n                    if (event.element) {\n                        if (this._isInRegion(event.element, anonymousId ? '' : regionId)) {\n                            const pruneResult = this._prune(\n                                event.element,\n                                translation.inheritableStyleSet!,\n                                preserveSpace,\n                                time,\n                                this.translateToHtml);\n                            let cueBody: Element | null = pruneResult.prunedElement;\n\n                            if ((!pruneResult.hasPreservedContent) && cueBody && (!trim(getText(cueBody)).length)) {\n                                cueBody = null;\n                            }\n\n                            if (cueBody) {\n                                innerNode.appendChild(cueBody);\n                            }\n                        }\n                    }\n                }\n\n                const showAlways = (outerNode.getAttribute('data-showBackground') === 'always');\n\n                if (showAlways || innerNode!.children.length) {\n                    if (showAlways) {\n                        // Just needed internally for the previous check, don't pass through on the cue.\n                        outerNode.removeAttribute('data-showBackground');\n                    }\n\n                    cues.push(outerNode);\n                }\n            }\n        }\n    }\n\n    // If we ended up with any displayable cues add them all to the rootContainerRegion cue.\n    if (cues.length) {\n        const rcr = this._translate(this.rootContainerRegion, { overflow: 'hidden', padding: '0' }, false, time, this.translateToHtml);\n\n        for (const cue of cues) {\n            rcr.innerNode!.appendChild(cue);\n        }\n\n        cues = [];\n        cues.push(rcr.outerNode!);\n    }\n\n    return cues;\n}\n\n    /*\n    * @name - getTemporallyActiveEvents\n    * @description - Get the list of temporally active events for the specified time.\n    * @private\n    * @param {number} time - The time to get the active events for.\n    * @returns {ITtmlEvent[]} - The set of active events for the specified time, otherwise an empty [].\n    */\n    private _getTemporallyActiveEvents(time: number): ITtmlEvent[] {\n        return this.events.filter((event) => {\n            return event.element ? this._isTemporallyActive(event.element, time) : true;\n        });\n    }\n\n    /*\n    * @name - isTemporallyActive\n    * @description - Determines whether or not the specified element is temporally active at the specified time.\n    * @private\n    * @param {HTMLElement} element - The element to check.\n    * @param {number} time - The time to check against.\n    * @returns {boolean} - True if the element is active at the specified time, otherwise false.\n    */\n    private _isTemporallyActive(element: Element, time: number): boolean {\n        return (((parseInt(element.getAttribute('data-time-start')!, 10) || 0) <= time) &&\n            (time < (parseInt(element.getAttribute('data-time-end')!, 10) || 0)));\n    }\n\n    /*\n    * @name - translate\n    * @description - Convert a ttml element into the equivalent in another format via the supplied translator function.\n    * @private\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} inheritedStyleSet - The element's inherited style set.\n    * @param {boolean} preserveSpace - Indicates whether or not space should be preserved.\n    * @param {number} time - The time to translate against. Elements and styles are temporally transient.\n    * @param {Function} translator - The translator function to use. Originally supported both xml/html but is always using html in MWF.\n    * @returns {ITtmlTranslationResult} - A ITtmlTranslationResult instance containing the translation results.\n    */\n    private _translate(\n        element: Element,\n        inheritedStyleSet: IDictionaryStringString,\n        preserveSpace: boolean,\n        time: number,\n        translator: Function): ITtmlTranslationResult {\n        let translation: ITtmlTranslationResult;\n        let computedStyleSet: IDictionaryStringString;\n\n        if (this._isTemporallyActive(element, time)) {\n            const tag = this._getTagNameEquivalent(element);\n\n            computedStyleSet = this._getComputedStyleSet(element, inheritedStyleSet, tag, time);\n\n            if (computedStyleSet.display !== 'none') {\n                const applicableStyleSet = this._getApplicableStyleSet(computedStyleSet, tag);\n\n                translation = translator(element, applicableStyleSet, preserveSpace);\n\n                return {\n                    outerNode: translation.outerNode,\n                    innerNode: translation.innerNode,\n                    inheritableStyleSet: this._getInheritableStyleSet(computedStyleSet)\n                };\n            }\n        }\n\n        return { outerNode: null, innerNode: null, inheritableStyleSet: null };\n    }\n\n/*\n* @name - translateToHtml\n* @description - Convert a ttml element into the its equivalent html element.\n* @private\n* @param {Element} element - The ttml element to translate.\n* @param {IDictionaryStringString} applicableStyleSet - The style set applicable to this element.\n* @param {boolean} preserveSpace - Indicates whether or not space should be preserved.\n* @returns {ITtmlTranslationResult} - A ITtmlTranslationResult instance containing the translation results.\n*/\n// tslint:disable-next-line: max-func-body-length\n    private translateToHtml = (\n        element: Element,\n        applicableStyleSet: IDictionaryStringString,\n        preserveSpace: boolean): ITtmlTranslationResult => {\n        let translation: HTMLElement;\n        let innerNode: HTMLElement;\n        const name = this._getTagNameEquivalent(element);\n        let htmlName = '';\n        let htmlClass = '';\n        switch (name) {\n            case 'ttml:region':\n                htmlClass = 'cue ';\n                /* falls through */\n                // break;\n            case 'ttml:rootcontainerregion':\n            case 'ttml:body':\n            case 'ttml:div':\n                htmlName = 'div';\n                break;\n            case 'ttml:p':\n                htmlName = 'p';\n                break;\n            case 'ttml:span':\n                htmlName = 'span';\n                break;\n            case 'ttml:br':\n                htmlName = 'br';\n                break;\n            default:\n        }\n\n        const role = TtmlParser.getAttributeNS(element, 'role', this.settings.ttmlMetaNamespace);\n\n        if (role) {\n            htmlClass +=  ` ${role}`;\n        }\n\n        const agent = TtmlParser.getAttributeNS(element, 'agent', this.settings.ttmlMetaNamespace);\n\n        if (agent) {\n            htmlClass += ` ${agent}`;\n        }\n\n        // Hack until display:ruby on other elements works.\n        if (role === 'x-ruby') {\n            htmlName = ('ruby');\n        } else if (role === 'x-rubybase') {\n            htmlName = ('rb');\n        } else if (role === 'x-rubytext') {\n            htmlName = ('rt');\n        }\n\n        if (!isNullOrWhiteSpace(htmlName)) {\n            translation = TtmlContext._defaultStyle(this.ownerDocument.createElement(htmlName));\n            addClass(translation, trim(htmlClass));\n\n            const title = TtmlParser.getAttributeNS(element, 'title', this.settings.ttmlMetaNamespace);\n\n            if (title) {\n                translation.setAttribute('title', title);\n            }\n\n            const id = TtmlParser.getAttributeNS(element, 'id', xmlNS);\n\n            if (id && this.settings.idPrefix) {\n                // Migrate the ttml doc id's over to the html markup.\n                // Use idPrefix to ensure there are no name clases on id's already in target doc.\n                translation.setAttribute('id', this.settings.idPrefix + id);\n            }\n\n            if (name === 'ttml:region') {\n                // To get a <region> to display properly we are actually going to need to create two nested <div>s\n                // This is because for displayAlign to work we need a table-cell <div> inside a table <div>.\n                innerNode = <HTMLElement> translation.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('div')));\n                innerNode.setAttribute('style', 'display:table; border-spacing:0; cell-spacing:0; cell-padding:0; width:100%; height:100%');\n                innerNode = <HTMLElement> innerNode.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('div')));\n                css(innerNode, 'display', 'table-cell');\n\n                // Apply the displayAlign style to inner table-cell <div>\n                if (applicableStyleSet.displayAlign) {\n                    this._translateStyle(name, innerNode, { displayAlign: applicableStyleSet.displayAlign });\n\n                    // Then remove displayAlign from the applicableStyleSet so as not to also later apply it to the outer table <div>\n                    applicableStyleSet.displayAlign = '';\n                }\n            }\n\n            // If we're preserving space add an inner <span> with 'white-space: pre'.\n            // This is how we implement preserving space in css and we need an inner\n            // span because the 'real' span will already be setting it's css white-space\n            // value to either normal or nowrap and we can't collide with that.\n            if (preserveSpace && (name === 'ttml:span')) {\n                innerNode = <HTMLElement>translation.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('span')));\n                css(innerNode, 'white-space', 'pre');\n            }\n\n            // Default some css properties that we don't want to inadvertantly end up\n            // inheriting values for that might cause adverse layout impacts for us.\n            css(translation, 'position', 'static');\n            css(translation, 'width', '100%');\n\n            // Copy style from element over to html, translating into CSS as we go.\n            this._translateStyle(name, translation, applicableStyleSet);\n        }\n\n        return { outerNode: translation!, innerNode: innerNode! ? innerNode! : translation! };\n    }\n\n    /*\n    * @name - translateStyle\n    * @description - Translate the ttml styles in a styleSet to their equivalent css styles and apply them to the specified html element.\n    * @private\n    * @param {string} tagName - The ttml element tagName. All styles do not apply to all tagNames.\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} applicableStyleSet - The style set applicable to this element.\n    * @returns {void}\n    */\n    private _translateStyle(tagName: string, element: HTMLElement, applicableStyleSet: IDictionaryStringString): void {\n    // tslint:disable-next-line: no-for-in\n        for (const style in applicableStyleSet) {\n            if (applicableStyleSet[style]) {\n                this._applyStyle(element, tagName, style, applicableStyleSet[style]);\n            }\n        }\n    }\n\n    /*\n    * @name - prune\n    * @description - Convert the element if it is in the region, then recurse into its contents.\n    *                If it ends up with no children then we dont add it to the region, we prune it.\n    * @private\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} inheritedStyleSet - The style set inherited by this element.\n    * @param {boolean} preserveSpace - Indicates whether or not space should be preserved.\n    * @param {number} time - The time to translate against. Elements and styles are temporally transient.\n    * @param {Function} translator - The translator function to use. Originally supported both xml/html but is always using html in MWF.\n    * @param {boolean} [ignoreAncestors = false] - Specifies whether or not to ignore the element's ancestors.\n    * @returns {ITtmlPruneResult} - A ITtmlPruneResult instance containing the prune results.\n    */\n    private _prune(\n        element: Element,\n        inheritedStyleSet: IDictionaryStringString,\n        preserveSpace: boolean,\n        time: number,\n        translator: Function,\n        ignoreAncestors: boolean = false): ITtmlPruneResult {\n        let outerNode: Element;\n        let hasPreservedContent = false;\n\n        let translation = this._translate(element, inheritedStyleSet, preserveSpace, time, translator);\n\n        if (translation.outerNode !== null) {\n            const tag = this._getTagNameEquivalent(element);\n\n            outerNode = translation.outerNode;\n            let innerNode = translation.innerNode;\n\n            for (const child of nodeListToArray<Node>(element.childNodes)) {\n                if (child.nodeType === Node.COMMENT_NODE) {\n                    // Do nothing.\n                } else if (child.nodeType === Node.TEXT_NODE) {\n                    innerNode!.appendChild(document.createTextNode((<Text>child).data));\n\n                    if (preserveSpace && (tag === 'ttml:span')) {\n                        hasPreservedContent = true;\n                    }\n                } else {\n                    let childPreserveSpace = preserveSpace;\n                    const spaceAttr = TtmlParser.getAttributeNS(<Element>child, 'space', xmlNS);\n\n                    if (spaceAttr) {\n                        childPreserveSpace = (spaceAttr === 'preserve');\n                    }\n\n                    const pruneRecord = this._prune(\n                        <Element>child,\n                        translation.inheritableStyleSet!,\n                        childPreserveSpace,\n                        time,\n                        translator,\n                        true);\n\n                    hasPreservedContent = hasPreservedContent || pruneRecord.hasPreservedContent;\n\n                    if (pruneRecord.prunedElement) {\n                        innerNode!.appendChild(pruneRecord.prunedElement);\n                    }\n                }\n            }\n\n            // Now traverse back till the body and build the corresponding structures.\n            if (!ignoreAncestors) {\n                let ancestor = <Element>element.parentNode;\n\n                while ((ancestor !== null) && (ancestor.nodeType === Node.ELEMENT_NODE) && (ancestor !== this.body)) {\n                    translation = this._translate(ancestor, inheritedStyleSet, preserveSpace, time, translator);\n                    if (translation.outerNode) {\n                        innerNode = translation.innerNode;\n                        innerNode!.appendChild(outerNode);\n                        outerNode = translation.outerNode;\n                    } else {\n                        break;\n                    }\n\n                    ancestor = <Element>ancestor.parentNode;\n                }\n            }\n        }\n\n        return { prunedElement: outerNode!, hasPreservedContent: hasPreservedContent };\n    }\n\n    /*\n    * @name - getComputedStyleSet\n    * @description - Build this element's ttml computed styleset.\n    *                This is used as the base styleSet to filter the inherited styleSet from for an element's children.\n    * @private\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} inheritedStyleSet - The styleSet inherited by this element.\n    * @param {string} tagName - The ttml element tagName. All styles do not apply to all tagNames.\n    * @param {number} time - The time to translate against. Elements and styles are temporally transient.\n    * @returns {IDictionaryStringString} - The resulting computed styleSet.\n    */\n    private _getComputedStyleSet(\n        element: Element,\n        inheritedStyleSet: IDictionaryStringString,\n        tagName: string,\n        time: number): IDictionaryStringString {\n        // Start off with a clone of the inherited styleset.\n        const computedStyleSet = extend({}, inheritedStyleSet);\n\n        // Iterate over this nodes ttml styles and pave them onto it's computed styleset.\n        extend(computedStyleSet, this.styleSetCache[parseInt(element.getAttribute('data-styleSet')!, 10)]);\n\n        // Apply any temporally active style animations.\n        const sets = element.getElementsByTagNameNS(this.settings.ttmlNamespace, 'set');\n\n        for (const set of nodeListToArray(sets)) {\n            if (this._isTemporallyActive(<Element>set, time)) {\n                TtmlParser.applyInlineStyles(this.settings, computedStyleSet, <Element>set);\n            }\n        }\n\n        if ((tagName === 'ttml:p') && (computedStyleSet.lineHeight === 'normal')) {\n            // Special case for <p>'s with tts:lineHeight='normal'\n            // This means use the largest tts:fontSize value of any\n            // of it's descendant <span>'s. Since we don't know what\n            // values those might be until translateStyle we'll just\n            // save them all and figure it out then.\n            const fontSizes = this._appendSpanFontSizes(element, this._getInheritableStyleSet(computedStyleSet), time, '');\n\n            if (fontSizes) {\n                computedStyleSet['computed-lineHeight'] = fontSizes;\n            }\n        }\n\n        return computedStyleSet;\n    }\n\n    /*\n    * @name - getApplicableStyleSet\n    * @description - Build this tags ttml applicable styleset from the specified computed styleSet to apply only to it.\n    * @private\n    * @param {IDictionaryStringString} computedStyleSet - The style set inherited by this element.\n    * @param {string} tagName - The ttml element tagName. All styles do not apply to all tagNames.\n    * @returns {IDictionaryStringString} - The resulting applicable styleSet.\n    */\n    private _getApplicableStyleSet(computedStyleSet: IDictionaryStringString, tagName: string): IDictionaryStringString {\n        const applicableStyleSet: IDictionaryStringString = {};\n\n        // Special case extent to the front of the list as later processing of\n        // padding will depend on it having already been set first.\n        if (computedStyleSet.extent && this._isStyleApplicable(tagName, 'extent')) {\n            applicableStyleSet.extent = computedStyleSet.extent;\n        }\n\n        // Special case color to the front of the list as later processing of\n        // textOutline will depend on it having already been set first.\n        if (computedStyleSet.color && this._isStyleApplicable(tagName, 'color')) {\n            applicableStyleSet.color = computedStyleSet.color;\n        }\n\n        // tslint:disable-next-line: no-for-in\n        for (const style in computedStyleSet) {\n            if (this._isStyleApplicable(tagName, style)) {\n                applicableStyleSet[style] = computedStyleSet[style];\n            }\n        }\n\n        return applicableStyleSet;\n    }\n\n    /*\n    * @name - isStyleApplicable\n    * @description - Determines if the specified style applies to the specified ttml tagName.\n    *                NOTE: The ttml spec doesn't mention ttml:br in the styles 'applies to' sections but\n    *                as noted in the span section everything that applies to ttml:span also applies to ttml:br\n    * @private\n    * @param {string} tagName - The ttml element tagName. All styles do not apply to all tagNames.\n    * @param {string} style - The style to check against the tagName.\n    * @returns {boolean} - True if the ttml:style applies to the ttml:tag, otherwise false.\n    */\n    private _isStyleApplicable(tagName: string, style: string): boolean {\n        switch (style) {\n            case 'backgroundColor':\n            case 'display':\n            case 'visibility':\n                return (('ttml:body ttml:div ttml:p ttml:region ttml:rootcontainerregion ttml:span ttml:br').indexOf(tagName) >= 0);\n\n            // Technically these font styles do not apply to <p>s but for some reason the resulting html/css\n            // for span/br doesnt compute line-height correctly if the entire containing <p> (div) isn't all the same...\n            case 'fontFamily':\n            case 'fontSize':\n            case 'fontStyle':\n            case 'fontWeight':\n                return ('ttml:p ttml:span ttml:br'.indexOf(tagName) >= 0);\n\n            case 'color':\n            case 'textDecoration':\n            case 'textOutline':\n            case 'wrapOption':\n                return ('ttml:span ttml:br'.indexOf(tagName) >= 0);\n\n            case 'direction':\n            case 'unicodeBidi':\n                return ('ttml:p ttml:span ttml:br'.indexOf(tagName) >= 0);\n\n            case 'displayAlign':\n            case 'opacity':\n            case 'origin':\n            case 'overflow':\n            case 'padding':\n            case 'showBackground':\n            case 'writingMode':\n            case 'zIndex':\n                return ('ttml:region ttml:rootcontainerregion'.indexOf(tagName) >= 0);\n\n            case 'extent':\n                return ('ttml:tt ttml:region ttml:rootcontainerregion'.indexOf(tagName) >= 0);\n\n            case 'computed-lineHeight':\n            case 'lineHeight':\n            case 'textAlign':\n                return ('ttml:p'.indexOf(tagName) >= 0);\n\n            default: return false;\n        }\n    }\n\n    /*\n    * @name - getInheritableStyleSet\n    * @description - Filters a computed styleSet into an inheritable styleSet subset to pass on to children.\n    *                Not all styles are inheritable.\n    * @private\n    * @param {IDictionaryStringString} computedStyleSet - The computed styleSet to filter.\n    * @returns {IDictionaryStringString} - The resulting inheritable styleSet.\n    */\n    private _getInheritableStyleSet(computedStyleSet: IDictionaryStringString): IDictionaryStringString {\n        const inheritedStyleSet: IDictionaryStringString = {};\n\n        // tslint:disable-next-line: no-for-in\n        for (const style in computedStyleSet) {\n            if (computedStyleSet.hasOwnProperty(style)) {\n                switch (style) {\n                    case 'backgroundColor':\n                    case 'computed-lineHeight':\n                    case 'display':\n                    case 'displayAlign':\n                    case 'extent':\n                    case 'opacity':\n                    case 'origin':\n                    case 'overflow':\n                    case 'padding':\n                    case 'showBackground':\n                    case 'unicodeBidi':\n                    case 'writingMode':\n                    case 'zIndex':\n                        break;\n                    default:\n                        inheritedStyleSet[style] = computedStyleSet[style];\n                }\n            }\n        }\n\n        return inheritedStyleSet;\n    }\n\n    /*\n    * @name - appendSpanFontSizes\n    * @description - Recurses through an element and it's descendants finding the font sizess of all it's <span>'s.\n    * @private\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} inheritedStyleSet - The element's inherited styleSet.\n    * @param {number} time - The time to translate against. Elements and styles are temporally transient.\n    * @param {string} value - The list of font sizes to append to.\n    * @returns {string} - The value with any additional font sizes appended to it.\n    */\n    private _appendSpanFontSizes(element: Element, inheritedStyleSet: IDictionaryStringString, time: number, value: string): string {\n        for (const child of nodeListToArray<Element>(element.childNodes)) {\n            if ((child.nodeType === Node.ELEMENT_NODE)) {\n                const tag = this._getTagNameEquivalent(child);\n\n                if (tag === 'ttml:span') {\n                    const computedStyleSet = this._getComputedStyleSet(child, inheritedStyleSet, 'ttml:span', time);\n                    const fontSize = computedStyleSet.fontSize;\n\n                    if (fontSize) {\n                        value += ((value) ? ',' : '') + fontSize;\n                    }\n\n                    value = this._appendSpanFontSizes(child, this._getInheritableStyleSet(computedStyleSet), time, value);\n                }\n            }\n        }\n\n        return value;\n    }\n\n    /*\n    * @name - isInRegion\n    * @description - Determines whether or not the specified element is associated with the specified region.\n    *                Ttml defines 5 ordered rules, where the first rule satisfied is used and remaining rules are skipped.\n    * @private\n    * @param {Element} element - The ttml element to check.\n    * @param {string} regionId - The id of the region to see if the element is associated with.\n    * @returns {boolean} - True if the specified element is within the specified region, otherwise false.\n    */\n    private _isInRegion(element: Element, regionId: string): boolean {\n\n        // Quick test: Out of normal order, but makes following rules simpler.\n        // This is a shortcut to check step #4 first\n        if (!regionId) {\n            return true;\n        }\n\n        const elemRegion = TtmlParser.getAttributeNS(element, 'region', this.settings.ttmlNamespace);\n\n        // 1. If the element specifies a region attribute, then the element is\n        // associated with the region referenced by that attribute;\n        if (elemRegion === regionId) {\n            return true;\n        }\n\n        if (!elemRegion) {\n            // 2. If some ancestor of that element specifies a region attribute, then the element is\n            // associated with the region referenced by the most immediate ancestor that specifies\n            // this attribute;\n            let ancestor = <Element>element.parentNode;\n\n            while ((ancestor !== null) && (ancestor.nodeType === Node.ELEMENT_NODE)) {\n                const id = this._getRegionId(ancestor);\n                if (id) {\n                    return id === regionId;\n                }\n                ancestor = <Element>ancestor.parentNode;\n            }\n\n            // 3. If the element contains a descendant element that specifies a region attribute,\n            // then the element is associated with the region referenced by that attribute;\n            for (const node of nodeListToArray(element.getElementsByTagName('*'))) {\n                if (this._getRegionId(<Element>node) === regionId) {\n                    return true;\n                }\n            }\n        }\n\n        // 5. The element is not associated with any region.\n        return false;\n    }\n\n    /*\n    * @name - getRegionId\n    * @description - Gets the region id for the specified element.\n    * @private\n    * @param {Element} element - The ttml element to check.\n    * @returns {string} - The id of the region the element is associated with.\n    */\n    private _getRegionId(element: Element): string {\n        let regionId: string;\n\n        if ((element.nodeType === Node.ELEMENT_NODE) && (element.namespaceURI === this.settings.ttmlNamespace)) {\n            if (TtmlParser.getLocalTagName(element) === 'region') {\n                regionId = TtmlParser.getAttributeNS(element, 'id', xmlNS);\n            } else {\n                regionId = TtmlParser.getAttributeNS(element, 'region', this.settings.ttmlNamespace);\n            }\n        }\n\n        return regionId!;\n    }\n\n    /*\n    * @name - getTagNameEquivalent\n    * @description - Gets the tagName of the element with the current ttml namespace prepended if non-standard.\n    * @private\n    * @param {Element} element - The ttml element to get the tagName of.\n    * @returns {string} - The tagName or '' if the namespace isn't one of the ttml ones.\n    */\n    private _getTagNameEquivalent(element: Element): string {\n        const tagName = TtmlParser.getLocalTagName(element);\n        const nameSpace = element.namespaceURI;\n\n        if (nameSpace === this.settings.ttmlNamespace) {\n            return `ttml:${tagName}`;\n        }\n\n        // tslint:disable-next-line: no-http-string\n        if (nameSpace === 'http://www.w3.org/1999/xhtml') {\n            return tagName;\n        }\n\n        return '';\n    }\n\n    /*\n    * @name - _applyStyle\n    * @description - Translates the ttml style/value into one or more css styles/values and applies them to the element.\n    * @private\n    * @param {HTMLElement} element - The ttml element to apply the css style(s) too.\n    * @param {string} tagName - The ttml tagName associated with the element.\n    * @param {string} style - The ttml style name.\n    * @param {string} value - The ttml style value.\n    * @returns {void}\n    */\n    // tslint:disable-next-line: max-func-body-length tslint:disable-next-line: cyclomatic-complexity\n    private _applyStyle(element: HTMLElement, tagName: string, style: string, value: string): void {\n        let mappedValue = value;\n\n        switch (style) {\n            case 'color':\n            case 'backgroundColor': {\n                mappedValue = TtmlContext._ttmlToCssColor(value);\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'direction':\n            case 'display': {\n                // No change.\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'displayAlign': {\n                // tslint:disable-next-line: switch-default\n                switch (value) {\n                    case 'before':\n                        mappedValue = 'top';\n                        break;\n                    case 'center':\n                        mappedValue = 'middle';\n                        break;\n                    case 'after':\n                        mappedValue = 'bottom';\n                }\n\n                css(element, 'vertical-align', mappedValue);\n                return;\n            }\n\n            case 'extent': {\n                let width: string;\n                let height: string;\n\n                if (value !== 'auto') {\n                    // Get the individual components.\n                    const coords = (value.split(/\\s+/));\n\n                    if (coords.length === 2) {\n                        width = this._ttmlToCssUnits(coords[0], true);\n                        height = this._ttmlToCssUnits(coords[1], false);\n                    }\n                }\n\n                if (!width!) {\n                    width = `${(this.settings.rootContainerRegionDimensions\n                        ? this.settings.rootContainerRegionDimensions.width\n                        : this.settings.relatedMediaObjectRegion!.width).toString()}px`;\n                    height = `${(this.settings.rootContainerRegionDimensions\n                        ? this.settings.rootContainerRegionDimensions.height\n                        : this.settings.relatedMediaObjectRegion!.height).toString()}px`;\n                }\n\n                css(element, 'position', 'absolute');\n                css(element, 'width', width!);\n                css(element, 'min-width', width!);\n                css(element, 'max-width', width!);\n                css(element, 'height', height!);\n                css(element, 'min-height', height!);\n                css(element, 'max-height', height!);\n                return;\n            }\n\n            case 'fontFamily': {\n                if (this.settings.fontMap && this.settings.fontMap[value]) {\n                    mappedValue = this.settings.fontMap[value];\n                }\n\n                if (value === 'smallCaps') {\n                    // Need to additionally add font-variant: small-caps.\n                    css(element, 'fontVariant', 'small-caps');\n                }\n\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'fontSize': {\n                const parts = value.split(/\\s+/);\n\n                // For two part fontSize values we use the vertical size which is in the second part.\n                const size = (parts.length > 1) ? parts[1] : parts[0];\n\n                // Set the fontsize scaleFactor to 75% (of cell size) to account for ascenders/descenders etc.\n                mappedValue = this._ttmlToCssFontSize(size, false, 0.75, tagName === 'ttml:region');\n\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'fontStyle':\n            case 'fontWeight': {\n                // No change.\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'lineHeight': {\n                // Spec doesn't qualify what % lengths mean so I'm going to assume it's % of a\n                // cell and therefore use fontSize conversion method.\n                mappedValue = (value === 'normal') ? value : this._ttmlToCssFontSize(value, false);\n\n                css(element, 'line-height', mappedValue);\n                return;\n            }\n\n            case 'computed-lineHeight': {\n                const values = value.split(',');\n                let max = -1;\n\n                for (const fontSize of values) {\n                    // Computed-lineHeight is based off of fontSize so use fontSize conversion method.\n                    mappedValue = this._ttmlToCssFontSize(fontSize, false);\n\n                    if (mappedValue && (mappedValue.indexOf('px') === mappedValue.length - 2)) {\n                        const height = parseFloat(mappedValue.substr(0, mappedValue.length - 2));\n\n                        if (!isNaN(height) && (height > max)) {\n                            max = height;\n                        }\n                    }\n                }\n\n                if (max >= 0) {\n                    css(element, 'line-height', `${max}px`);\n                }\n\n                return;\n            }\n\n            case 'origin': {\n                if (value !== 'auto') {\n                    // Get the individual components.\n                    const coords = (value.split(/\\s+/));\n\n                    if (coords.length === 2) {\n                        css(element, 'position', 'absolute');\n                        css(element, 'left', this._ttmlToCssUnits(coords[0], true));\n                        css(element, 'top', this._ttmlToCssUnits(coords[1], false));\n                    }\n                }\n\n                return;\n            }\n\n            case 'opacity': {\n                // No change.\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'padding': {\n                const contextRect = getDimensions(element);\n\n                // Get the individual components.\n                const parts = (value.split(/\\s+/));\n                let first: string;\n                let second: string;\n                let third: string;\n                let forth: string;\n\n                // tslint:disable-next-line: switch-default\n                switch (parts.length) {\n                    case 1:\n                        // Value is used for all 4 sides.\n                        first = this._ttmlToCssUnits(parts[0], false, contextRect!);\n                        second = this._ttmlToCssUnits(parts[0], true, contextRect!);\n                        mappedValue = format('{0} {1} {0} {1}', first, second);\n                        break;\n                    case 2:\n                        // First is top/bottom, second is left/right.\n                        first = this._ttmlToCssUnits(parts[0], false, contextRect!);\n                        second = this._ttmlToCssUnits(parts[1], true, contextRect!);\n                        mappedValue = format('{0} {1} {0} {1}', first, second);\n                        break;\n                    case 3:\n                        // First is top, second is left/right, third is bottom.\n                        first = this._ttmlToCssUnits(parts[0], false, contextRect!);\n                        second = this._ttmlToCssUnits(parts[1], true, contextRect!);\n                        third = this._ttmlToCssUnits(parts[2], false, contextRect!);\n                        mappedValue = format('{0} {1} {2} {1}', first, second, third);\n                        break;\n                    case 4:\n                        // Top, right, bottom, left.\n                        first = this._ttmlToCssUnits(parts[0], false, contextRect!);\n                        second = this._ttmlToCssUnits(parts[1], true, contextRect!);\n                        third = this._ttmlToCssUnits(parts[2], false, contextRect!);\n                        forth = this._ttmlToCssUnits(parts[3], true, contextRect!);\n                        mappedValue = format('{0} {1} {2} {3}', first, second, third, forth);\n                }\n\n                // Using border width to implement tts:padding as neither padding nor margin fix the size (height) of the content area.\n                css(element, 'box-sizing', 'border-box');\n                // TODO: See if we work in FF without the following commented out -moz-box-sizing line now and if so remove it.\n                ////// css(element, '-moz-box-sizing', 'border-box');\n                css(element, 'border-style', 'solid');\n                css(element, 'border-color', 'transparent');\n                // It can be helpful when debugging to change the border-color from transparent to something like rgba(255,255,200,0.5)\n                // css(element, 'border-color', 'rgba(255,255,200,0.5)');\n                css(element, 'border-width', mappedValue);\n                return;\n            }\n\n            // If you know what this was for please document it here and uncomment it.\n            // As of now the caller appeared to be doing nothing with it so commenting it out.\n            ////// case 'showBackground': {\n            ////// return this.getAttribute('data-showBackground', value);\n            ////// }\n\n            case 'textAlign': {\n                // tslint:disable-next-line: switch-default\n                switch (value) {\n                    case 'start':\n                        mappedValue = 'left';   // TODO: handle rtl correctly.\n                        break;\n                    case 'end':\n                        mappedValue = 'right';  // TODO: handle rtl correctly.\n                }\n\n                css(element, 'text-align', mappedValue);\n                return;\n            }\n\n            case 'textDecoration': {\n                mappedValue = TtmlContext._ttmlToCssTextDecoration(value);\n                css(element, 'text-decoration', mappedValue);\n                return;\n            }\n\n            case 'textOutline': {\n                const defaultColor = css(element, 'color');\n                css(element, 'text-shadow', this._ttmlToCssTextOutline(mappedValue, defaultColor));\n                return;\n            }\n\n            case 'unicodeBidi': {\n                // TODO: Handle multiple options correctly.\n                // tslint:disable-next-line: switch-default\n                switch (value) {\n                    case 'bidiOverride':\n                        mappedValue = 'bidi-override';\n                }\n                css(element, 'unicode-bidi', mappedValue);\n                return;\n            }\n\n            case 'visibility': {\n                // No change.\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'writingMode': {\n                // tslint:disable-next-line: switch-default\n                switch (value) {\n                    case 'lr':\n                    case 'lrtb': {\n                        css(element, 'writing-mode', 'horizontal-tb');          // CCS3 standard: Doesn't work yet\n                        css(element, '-webkit-writing-mode', 'horizontal-tb');  // webkit for Chrome\n                        css(element, 'writing-mode', 'lr-tb');                  // IE specific\n                        return;\n                    }\n                    case 'rl':\n                    case 'rltb': {\n                        css(element, 'writing-mode', 'horizontal-tb');          // CCS3 standard: Doesn't work yet\n                        css(element, '-webkit-writing-mode', 'horizontal-tb');  // webkit for Chrome\n                        css(element, 'writing-mode', 'rl-tb');                  // IE specific\n                        return;\n                    }\n                    case 'tblr': {\n                        css(element, 'text-orientation', 'upright');            // CCS3 standard: Doesn't work yet\n                        css(element, 'writing-mode', 'vertical-lr');            // CCS3 standard: Doesn't work yet\n                        css(element, '-webkit-text-orientation', 'upright');    // webkit for Chrome\n                        css(element, '-webkit-writing-mode', 'vertical-lr');    // webkit for Chrome\n                        css(element, 'writing-mode', 'tb-lr');                  // IE specific\n                        return;\n                    }\n                    case 'tb':\n                    case 'tbrl': {\n                        css(element, 'text-orientation', 'upright');            // CCS3 standard: Doesn't work yet\n                        css(element, 'writing-mode', 'vertical-rl');            // CCS3 standard: Doesn't work yet\n                        css(element, '-webkit-text-orientation', 'upright');    // webkit for Chrome\n                        css(element, '-webkit-writing-mode', 'vertical-rl');    // webkit for Chrome\n                        css(element, 'writing-mode', 'tb-rl');                  // IE specific\n                        return;\n                    }\n                }\n                return;\n            }\n\n            case 'wrapOption': {\n                css(element, 'white-space', value === 'noWrap' ? 'nowrap' : (value === 'pre' ? 'pre' : 'normal'));\n                return;\n            }\n\n            case 'zIndex': {\n                css(element, style, mappedValue);   // Requires global information...\n                return;\n            }\n\n            default: {\n                css(element, style, mappedValue);\n                return;\n            }\n        }\n    }\n\n    /*\n    * @name - ttmlToCssUnits\n    * @description - Converts a ttml unit string to a css one.\n    * @private\n    * @param {string} ttmlUnits - The ttml value.\n    * @param {boolean} width - Indicates whether to perform a width based or a height based conversion.\n    * @param {IClientDimension} [contextRect] - The context rectangle to use for conversion.\n    * @returns {string} - The css value.\n    */\n    private _ttmlToCssUnits(ttmlUnits: string, width: boolean, contextRect?: IClientDimension): string {\n        let cssUnits = ttmlUnits;\n\n        if (ttmlUnits) {\n            const unit = ttmlUnits.charAt(ttmlUnits.length - 1);\n\n            // Need to special case handle ttml cell metrics.\n            if ((unit === 'c') || (unit === '%')) {\n                const container = this.settings.rootContainerRegionDimensions\n                    ? this.settings.rootContainerRegionDimensions\n                    : this.settings.relatedMediaObjectRegion;\n                const length = parseFloat(ttmlUnits.substr(0, ttmlUnits.length - 1));\n                let containerSize = width ? container!.width : container!.height;\n                let value: number;\n\n                if (unit === 'c') {\n                    const gridSize = width ? this.settings.cellResolution.columns : this.settings.cellResolution.rows;\n\n                    value = length * containerSize / gridSize;\n                } else if (unit === '%') {\n                    // If % units calls also specify a contextRect use that instead of the container.\n                    if (contextRect) {\n                        containerSize = width ? contextRect.width : contextRect.height;\n                    }\n\n                    // Have to convert % to px because padding and vertical-align (displayAlign) are not\n                    // working together if the extent width/height are % instead of px.\n                    value = containerSize * length / 100;\n                }\n\n                // Round to 1 decimal place\n                value = Math.round(value! * 10) / 10;\n                cssUnits = `${value}px`;\n            }\n        }\n\n        return cssUnits;\n    }\n\n    /*\n    * @name - ttmlToCssFontSize\n    * @description - Converts a ttml font size to a css one.\n    * @private\n    * @param {string} ttmlUnits - The ttml value.\n    * @param {boolean} width - Indicates whether to perform a width based or a height based conversion.\n    * @param {number} [scaleFactor = 1] - The scale factor to use for conversion.\n    * @param {boolean} [isRegion = false] - Indicates whether or not the conversion is being done for a <region>.\n    * @returns {string} - The css value.\n    */\n    private _ttmlToCssFontSize(ttmlUnits: string, width: boolean, scaleFactor: number = 1, isRegion: boolean = false): string {\n        let cssUnits = ttmlUnits;\n\n        if (ttmlUnits) {\n            const unit = ttmlUnits.charAt(ttmlUnits.length - 1);\n\n            // Need to special case handle ttml cell metrics and % units.\n            if ((unit === 'c') || (isRegion && (unit === '%'))) {\n                const container = this.settings.rootContainerRegionDimensions\n                    ? this.settings.rootContainerRegionDimensions\n                    : this.settings.relatedMediaObjectRegion;\n                const length = parseFloat(ttmlUnits.substr(0, ttmlUnits.length - 1));\n                const containerSize = width ? container!.width : container!.height;\n                const gridSize = width ? this.settings.cellResolution.columns : this.settings.cellResolution.rows;\n                let value = length * containerSize / gridSize;\n\n                if (unit === '%') {\n                    // Length is % so divide by 100.\n                    value /= 100;\n                }\n\n                // Apply the scale factor and limit to one decimal place precision.\n                value = Math.floor(value * scaleFactor * 10) / 10;\n\n                cssUnits = `${value}px`;\n            }\n        }\n\n        return cssUnits;\n    }\n\n    /*\n    * @name - ttmlToCssTextOutline\n    * @description - Converts a ttml text outline style value to a css one.\n    * @private\n    * @param {string} textOutline - The ttml value.\n    * @param {string} defaultColor - default value of the outline color.\n    * @returns {string} - The css value.\n    */\n    private _ttmlToCssTextOutline(textOutline: string, defaultColor: string): string {\n        let textShadow = 'none';\n\n        if (!isNullOrWhiteSpace(textOutline) && (textOutline !== 'none')) {\n            let parts: string[] = textOutline.split(/\\s+/);\n            let color: string = '';\n            let thickness: string = '';\n            let blur: string = '';\n\n            if (parts.length === 1) {\n                color = defaultColor;\n                thickness = parts[0];\n                blur = '';\n            } else if (parts.length === 3) {\n                color = parts[0];\n                thickness = parts[1];\n                blur = parts[2];\n            } else if (parts.length === 2) {\n                const firstChar = parts[0].charAt(0);\n\n                if ((firstChar >= '0') && (firstChar <= '9')) {\n                    color = defaultColor;\n                    thickness = parts[0];\n                    blur = parts[1];\n                } else {\n                    color = parts[0];\n                    thickness = parts[1];\n                    blur = '';\n                }\n            }\n\n            // Spec doesn't qualify what % lengths mean so I'm going to assume it's % of a cell\n            // and therefore use fontSize conversion method with the same scaleFactor applied\n            // to fontSize since it's the font that we're outlining here.\n            blur = this._ttmlToCssFontSize(blur, false, 0.75);\n            thickness = this._ttmlToCssFontSize(thickness, false, 0.75);\n\n            parts = <string[]>TtmlContext.lengthRegEx.exec(thickness);\n\n            if (parts && (parts.length === 3)) {\n                const width = Math.round(parseFloat(parts[1]));\n                const units = parts[2];\n\n                textShadow = '';\n\n                for (let x = -width; x <= width; x++) {\n                    for (let y = -width; y <= width; y++) {\n                        if ((x !== 0) || (y !== 0)) {\n                            textShadow += format('{0}{4} {1}{4} {2} {3}, ', x, y, blur, TtmlContext._ttmlToCssColor(color), units);\n                        }\n                    }\n                }\n\n                if (textShadow) {\n                    textShadow = textShadow.substr(0, textShadow.length - 2);\n                }\n            }\n        }\n\n        return textShadow;\n    }\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}