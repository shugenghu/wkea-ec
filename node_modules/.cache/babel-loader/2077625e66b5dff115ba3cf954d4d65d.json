{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{buildCacheKey}from'@msdyn365-commerce-modules/retail-actions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getChannelsAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';const getChannels=()=>async ctx=>{return getChannelsAsync({callerContext:ctx});};export class GetChannelIdentitiesInput{constructor(apiSettings){this.getCacheKey=()=>buildCacheKey(\"ChannelIdentities\",this.apiSettings);this.getCacheObjectType=()=>\"ChannelIdentities\";this.dataCacheType=()=>'request';this.apiSettings=apiSettings;}}const createChannelIdentitiesInput=inputData=>{return new GetChannelIdentitiesInput(inputData.requestContext.apiSettings);};export async function getChannelsAction(input,ctx){if(!ctx){throw new Error(\"getChannelsAction - Action context cannot be null/undefined\");}let channels=[];try{channels=await getChannels()(ctx);}catch(error){throw error;}return{channelIdentities:channels};}export default createObservableDataAction({id:'@msdyn365-commerce-modules/order-management/get-channels',action:getChannelsAction,input:createChannelIdentitiesInput});","map":{"version":3,"sources":["actions/get-channels.ts"],"names":[],"mappings":"sCAAA,OAAS,aAAT,KAA8B,2CAA9B,CACA,OAEI,0BAFJ,KAUO,yBAVP,CAYA,OAAS,gBAAT,KAAiC,+EAAjC,CASA,KAAM,CAAA,WAAW,CAAG,IAAM,KAAO,CAAA,GAAP,EAA0D,CAChF,MAAO,CAAA,gBAAgB,CACnB,CACI,aAAa,CAAE,GADnB,CADmB,CAAvB,CAKH,CAND,CAWA,MAAM,MAAO,CAAA,yBAAyB,CAGlC,WAAA,CAAY,WAAZ,CAA6C,CAItC,KAAA,WAAA,CAAc,IAAM,aAAa,qBAAsB,KAAK,WAA3B,CAAjC,CACA,KAAA,kBAAA,CAAqB,uBAArB,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CALH,KAAK,WAAL,CAAmB,WAAnB,CACH,CALiC,CAetC,KAAM,CAAA,4BAA4B,CAAI,SAAD,EAAoD,CACrF,MAAO,IAAI,CAAA,yBAAJ,CAA8B,SAAS,CAAC,cAAV,CAAyB,WAAvD,CAAP,CACH,CAFD,CAOA,MAAO,eAAe,CAAA,iBAAf,CACH,KADG,CAEH,GAFG,CAEgB,CAEnB,GAAI,CAAC,GAAL,CAAU,CACN,KAAM,IAAI,CAAA,KAAJ,+DAAN,CACH,CAED,GAAI,CAAA,QAAQ,CAAsB,EAAlC,CAEA,GAAI,CACA,QAAQ,CAAG,KAAM,CAAA,WAAW,GAAG,GAAH,CAA5B,CACH,CAAC,MAAO,KAAP,CAAc,CACZ,KAAM,CAAA,KAAN,CACH,CAED,MAAO,CAAE,iBAAiB,CAAE,QAArB,CAAP,CACH,CAED,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,0DADkC,CAEtC,MAAM,CAA6B,iBAFG,CAGtC,KAAK,CAAE,4BAH+B,CAAD,CAAzC","sourcesContent":["import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    IAny,\n    ICommerceApiSettings,\n    ICreateActionContext,\n    IGeneric\n} from '@msdyn365-commerce/core';\nimport { ChannelIdentity } from '@msdyn365-commerce/retail-proxy';\nimport { getChannelsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\ninterface IChannelIdentity {\n    channelIdentities: ChannelIdentity[];\n}\n\n/**\n * Calls the Retail API and returns the channels\n */\nconst getChannels = () => async (ctx: IActionContext): Promise<ChannelIdentity[]> => {\n    return getChannelsAsync(\n        {\n            callerContext: ctx\n        }\n    );\n};\n\n/**\n *  Action input\n */\nexport class GetChannelIdentitiesInput implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`ChannelIdentities`, this.apiSettings);\n    public getCacheObjectType = () => `ChannelIdentities`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createChannelIdentitiesInput = (inputData: ICreateActionContext<IGeneric<IAny>>) => {\n    return new GetChannelIdentitiesInput(inputData.requestContext.apiSettings);\n};\n\n/**\n * Get channels action\n */\nexport async function getChannelsAction(\n    input: GetChannelIdentitiesInput,\n    ctx: IActionContext\n): Promise<IChannelIdentity> {\n    if (!ctx) {\n        throw new Error(`getChannelsAction - Action context cannot be null/undefined`);\n    }\n\n    let channels: ChannelIdentity[] = [];\n\n    try {\n        channels = await getChannels()(ctx);\n    } catch (error) {\n        throw error;\n    }\n\n    return { channelIdentities: channels };\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/order-management/get-channels',\n    action: <IAction<IChannelIdentity>>getChannelsAction,\n    input: createChannelIdentitiesInput\n});\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}