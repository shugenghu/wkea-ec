{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getOrgUnitLocationsByAreaAsync,getStoreHoursAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';/**\r\n * Get selected variant action input class\r\n */export var GetOrgUnitLocationsByAreaInput=function GetOrgUnitLocationsByAreaInput(_Latitude,_Longitude,_Radius,_DistanceUnitValue,_IgnoreLocation){_classCallCheck(this,GetOrgUnitLocationsByAreaInput);this.getCacheKey=function(){return\"GetOrgUnitLocationsByAreaInput\";};this.getCacheObjectType=function(){return'GetOrgUnitLocationsByAreaInput';};this.dataCacheType=function(){return'none';};this.Latitude=_Latitude;this.Longitude=_Longitude;this.Radius=_Radius;this.DistanceUnitValue=_DistanceUnitValue;this.IgnoreLocation=_IgnoreLocation;};/**\r\n * CreateInput method for the getSelectedVariant data action\r\n * @param inputData The input data passed to the createInput method\r\n */export var createGetOrgUnitLocationsByAreaInput=function createGetOrgUnitLocationsByAreaInput(inputData){return new GetOrgUnitLocationsByAreaInput();};/**\r\n * Action method for the getSelectedVariant data action\r\n * @param input The action input class\r\n * @param ctx The action context\r\n */export function getOrgUnitLocationsByArea(_x,_x2){return _getOrgUnitLocationsByArea.apply(this,arguments);}/**\r\n * Action method that obtains the store information\r\n * @param orgUnitLocation The org unit location\r\n * @param storeMap a map that contains store information group by the inventory location id\r\n * @param ctx The action context\r\n */function _getOrgUnitLocationsByArea(){_getOrgUnitLocationsByArea=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){var searchArea;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!((input.Radius===undefined||!input.Latitude||!input.Longitude)&&!input.IgnoreLocation)){_context.next=2;break;}return _context.abrupt(\"return\",[]);case 2:searchArea={Latitude:input.Latitude,Longitude:input.Longitude,Radius:input.Radius,DistanceUnitValue:input.DistanceUnitValue||0// 0 is miles\n};return _context.abrupt(\"return\",getOrgUnitLocationsByAreaAsync({callerContext:ctx},searchArea).then(function(stores){var locationPromiseList=stores.map(function(store){return _getLocationWithHours(store,ctx);});return Promise.all(locationPromiseList);})[\"catch\"](function(error){ctx.trace('[GetOrgUnitLocationsByArea] error getting Locations');ctx.trace(error.message);ctx.telemetry.error(error.message);ctx.telemetry.debug(\"[GetOrgUnitLocationsByArea] error getting Locations\");return[];}));case 4:case\"end\":return _context.stop();}}},_callee);}));return _getOrgUnitLocationsByArea.apply(this,arguments);}function _getLocationWithHours(_x3,_x4){return _getLocationWithHours2.apply(this,arguments);}/**\r\n * The complete getOrgUnitLocationsByArea data action\r\n */function _getLocationWithHours2(){_getLocationWithHours2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(orgUnitLocation,ctx){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(!orgUnitLocation||!orgUnitLocation.OrgUnitNumber)){_context2.next=2;break;}return _context2.abrupt(\"return\",{OrgUnitAvailability:undefined});case 2:return _context2.abrupt(\"return\",getStoreHoursAsync({callerContext:ctx},orgUnitLocation.OrgUnitNumber).then(function(hours){var availability={OrgUnitLocation:orgUnitLocation};if(hours&&!(hours instanceof Error)){return{OrgUnitAvailability:availability,StoreHours:hours};}return{OrgUnitAvailability:availability};})[\"catch\"](function(error){ctx.trace('[GetFullAvailableInventoryNearby] error getting availability with hours');ctx.trace(error.message);ctx.telemetry.exception(error);ctx.telemetry.debug(\"[GetFullAvailableInventoryNearby] error getting availability with hours\");return{OrgUnitAvailability:{}};}));case 3:case\"end\":return _context2.stop();}}},_callee2);}));return _getLocationWithHours2.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-store-location-information',action:getOrgUnitLocationsByArea,input:createGetOrgUnitLocationsByAreaInput});","map":{"version":3,"sources":["../../src/get-store-location-information.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { OrgUnitAvailability, OrgUnitLocation, SearchArea, StoreHours } from '@msdyn365-commerce/retail-proxy';\nimport { getOrgUnitLocationsByAreaAsync, getStoreHoursAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { IFullOrgUnitAvailability } from './utilities/full-org-unit-availability';\n\n/**\n * Get selected variant action input class\n */\nexport class GetOrgUnitLocationsByAreaInput implements IActionInput {\n    public Latitude?: number;\n    public Longitude?: number;\n    public Radius?: number;\n    public DistanceUnitValue?: number;\n    public IgnoreLocation?: boolean;\n\n    constructor(_Latitude?: number, _Longitude?: number, _Radius?: number, _DistanceUnitValue?: number, _IgnoreLocation?: boolean) {\n        this.Latitude = _Latitude;\n        this.Longitude = _Longitude;\n        this.Radius = _Radius;\n        this.DistanceUnitValue = _DistanceUnitValue;\n        this.IgnoreLocation = _IgnoreLocation;\n    }\n\n    public getCacheKey = () => `GetOrgUnitLocationsByAreaInput`;\n    public getCacheObjectType = () => 'GetOrgUnitLocationsByAreaInput';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * CreateInput method for the getSelectedVariant data action\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetOrgUnitLocationsByAreaInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetOrgUnitLocationsByAreaInput => {\n    return new GetOrgUnitLocationsByAreaInput();\n};\n\n/**\n * Action method for the getSelectedVariant data action\n * @param input The action input class\n * @param ctx The action context\n */\nexport async function getOrgUnitLocationsByArea(\n    input: GetOrgUnitLocationsByAreaInput,\n    ctx: IActionContext\n): Promise<IFullOrgUnitAvailability[] | undefined> {\n\n    if ((input.Radius === undefined || !input.Latitude || !input.Longitude) && !input.IgnoreLocation) {\n        // No valid location we want to return empty array so module can show no locations message\n        return [];\n    }\n\n    const searchArea: SearchArea = {\n        Latitude: input.Latitude,\n        Longitude: input.Longitude,\n        Radius: input.Radius,\n        DistanceUnitValue: input.DistanceUnitValue || 0 // 0 is miles\n    };\n\n    return getOrgUnitLocationsByAreaAsync({ callerContext: ctx }, searchArea)\n        .then((stores: OrgUnitLocation[]) => {\n            const locationPromiseList = stores.map(store => _getLocationWithHours(store, ctx));\n            return Promise.all(locationPromiseList);\n        })\n        .catch((error: Error) => {\n            ctx.trace('[GetOrgUnitLocationsByArea] error getting Locations');\n            ctx.trace(error.message);\n            ctx.telemetry.error(error.message);\n            ctx.telemetry.debug(`[GetOrgUnitLocationsByArea] error getting Locations`);\n            return [];\n        });\n}\n\n/**\n * Action method that obtains the store information\n * @param orgUnitLocation The org unit location\n * @param storeMap a map that contains store information group by the inventory location id\n * @param ctx The action context\n */\nasync function _getLocationWithHours(\n    orgUnitLocation: OrgUnitLocation,\n    ctx: IActionContext): Promise<IFullOrgUnitAvailability> {\n    if (!orgUnitLocation || !orgUnitLocation.OrgUnitNumber) {\n        return { OrgUnitAvailability: undefined };\n    }\n\n    return getStoreHoursAsync({ callerContext: ctx }, orgUnitLocation.OrgUnitNumber)\n        .then((hours: StoreHours) => {\n\n            const availability: OrgUnitAvailability = {\n                OrgUnitLocation: orgUnitLocation\n            };\n\n            if (hours && !(hours instanceof Error)) {\n                return { OrgUnitAvailability: availability, StoreHours: hours };\n            }\n\n            return { OrgUnitAvailability: availability };\n        })\n        .catch((error: Error) => {\n            ctx.trace('[GetFullAvailableInventoryNearby] error getting availability with hours');\n            ctx.trace(error.message);\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[GetFullAvailableInventoryNearby] error getting availability with hours`);\n            return { OrgUnitAvailability: {} };\n        });\n}\n\n/**\n * The complete getOrgUnitLocationsByArea data action\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-store-location-information',\n    action: <IAction<IFullOrgUnitAvailability[] | undefined>>getOrgUnitLocationsByArea,\n    input: createGetOrgUnitLocationsByAreaInput\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}