{"ast":null,"code":"\"use strict\";require(\"core-js/modules/es.regexp.to-string.js\");Object.defineProperty(exports,\"__esModule\",{value:true});var tslib_1=require(\"tslib\");var Msdyn365=tslib_1.__importStar(require(\"@msdyn365-commerce/core\"));var classnames_1=tslib_1.__importDefault(require(\"classnames\"));var React=tslib_1.__importStar(require(\"react\"));var __1=require(\"../\");var Collapse_1=tslib_1.__importDefault(require(\"../collapse/Collapse\"));var ControlledDrawer=function(_super){tslib_1.__extends(ControlledDrawer,_super);function ControlledDrawer(props){var _this=_super.call(this,props)||this;var _a=_this.props,openGlyph=_a.openGlyph,closeGlyph=_a.closeGlyph;_this._toggle=_this._toggle.bind(_this);_this.isManuallyToggled=false;_this.state={isOpen:props.collapseProps&&props.collapseProps.isOpen||false};_this.isExpanded=_this.state.isOpen;_this.drawerGlyphClass=classnames_1.default('drawer__glyph',_this.props.toggleGlyphClassName||'');_this.payLoad=__1.getPayloadObject('click',props.telemetryContent,'');if(_this.props.animateGlyph){_this.drawerOpenGlyph=classnames_1.default([_this.drawerGlyphClass,openGlyph||closeGlyph||'']);_this.drawerCloseGlyph=_this.drawerOpenGlyph;}else{_this.drawerOpenGlyph=classnames_1.default([_this.drawerGlyphClass,openGlyph||'']);_this.drawerCloseGlyph=classnames_1.default([_this.drawerGlyphClass,closeGlyph||'']);}return _this;}ControlledDrawer.prototype.render=function(){var collapseProps=tslib_1.__assign({},this.props.collapseProps);collapseProps.isOpen=this.isManuallyToggled?this.state.isOpen:collapseProps.isOpen||false;collapseProps.children=this.props.children;var drawerClass=classnames_1.default('drawer',this.props.className||'');this.isManuallyToggled=false;this.isExpanded=collapseProps.isOpen;this.state={isOpen:collapseProps.isOpen};this.payLoad.contentAction.etext=collapseProps.isOpen?__1.TelemetryConstant.Collapse:__1.TelemetryConstant.Expand;var attributes=__1.getTelemetryAttributes(this.props.telemetryContent,this.payLoad);return React.createElement(\"div\",{className:drawerClass},React.createElement(__1.Button,tslib_1.__assign({},this.props.toggleButtonProps,{onClick:this._toggle,\"aria-expanded\":collapseProps.isOpen,block:true,disabled:this.props.disabled,className:'drawer__button'},attributes),this._generateDrawerButtonInnerMarkup(collapseProps.isOpen)),React.createElement(Collapse_1.default,tslib_1.__assign({},collapseProps)));};ControlledDrawer.prototype._generateDrawerButtonInnerMarkup=function(collapseState){var toggleButtonText=this.props.toggleButtonText;var drawerButtonTextClass=classnames_1.default('drawer__buttontext',this.props.toggleButtonClassName||'');if(this.props.glyphPlacement==='end'){return React.createElement(React.Fragment,null,this._generateTitle(classnames_1.default(drawerButtonTextClass,'__start'),toggleButtonText.toString()),this._generateGlyphMarkup('drawer__glyph__end',collapseState));}var isStart=this.props.glyphPlacement==='start';var additionalClassName=\"__\"+(isStart?'end':'start');return React.createElement(React.Fragment,null,isStart&&this._generateGlyphMarkup('drawer__glyph__start',collapseState),this._generateTitle(classnames_1.default(drawerButtonTextClass,additionalClassName),this.props.toggleButtonText.toString()));};ControlledDrawer.prototype._generateTitle=function(titleLClassName,title){if(this.props.onTextChange&&this.props.requestContext){return React.createElement(Msdyn365.Text,{tag:'span',text:title,className:titleLClassName,editProps:{onEdit:this.props.onTextChange,requestContext:this.props.requestContext}});}else{return React.createElement(\"span\",{className:titleLClassName},title);}};ControlledDrawer.prototype._generateGlyphMarkup=function(location,collapseState){var glyphClass=(collapseState?this.drawerOpenGlyph:this.drawerCloseGlyph)+\" \"+location;return React.createElement(\"span\",{className:glyphClass});};ControlledDrawer.prototype._toggle=function(e){e.preventDefault();this.isExpanded=!this.isExpanded;this.setState({isOpen:this.isExpanded});this.isManuallyToggled=true;if(this.props.onToggle){this.props.onToggle(this.state);}};return ControlledDrawer;}(React.Component);exports.default=ControlledDrawer;","map":{"version":3,"sources":["/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/node_modules/@msdyn365-commerce-modules/utilities/src/drawer/ControlledDrawer.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as Msdyn365 from '@msdyn365-commerce/core';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Button, getPayloadObject, getTelemetryAttributes, IPayLoad, TelemetryConstant } from '../';\nimport Collapse from '../collapse/Collapse';\nimport { ICollapseProps } from '../collapse/Collapse.props';\nimport { IDrawerProps } from './Drawer.props';\n\nexport interface IControlledDrawerState {\n    isOpen: boolean;\n}\n\nexport type GlyphPlacement = 'start' | 'end';\n\n/**\n * ControlledDrawer - This is a full width controlled collapse where the button glyph changes\n * when the drawer is open and closed. The toggle function can be managed by the parent.\n */\n\nexport default class ControlledDrawer extends React.Component<IDrawerProps, IControlledDrawerState> {\n    private drawerOpenGlyph: string;\n    private drawerCloseGlyph: string;\n    private drawerGlyphClass: string;\n    private isManuallyToggled: boolean;\n    private isExpanded: boolean;\n    private payLoad: IPayLoad;\n    constructor(props: IDrawerProps) {\n        super(props);\n        const { openGlyph, closeGlyph } = this.props;\n        this._toggle = this._toggle.bind(this);\n        this.isManuallyToggled = false;\n        this.state = { isOpen: (props.collapseProps && props.collapseProps.isOpen) || false };\n        this.isExpanded = this.state.isOpen;\n        this.drawerGlyphClass = classnames('drawer__glyph', this.props.toggleGlyphClassName || '');\n        this.payLoad = getPayloadObject('click', props.telemetryContent!, '');\n\n        if (this.props.animateGlyph) {\n            this.drawerOpenGlyph = classnames([this.drawerGlyphClass, openGlyph || closeGlyph || '']);\n            this.drawerCloseGlyph = this.drawerOpenGlyph;\n        } else {\n            this.drawerOpenGlyph = classnames([this.drawerGlyphClass, openGlyph || '']);\n            this.drawerCloseGlyph = classnames([this.drawerGlyphClass, closeGlyph || '']);\n        }\n    }\n\n    public render(): JSX.Element {\n        const collapseProps = {...this.props.collapseProps} as ICollapseProps;\n        collapseProps.isOpen = this.isManuallyToggled ? this.state.isOpen : collapseProps.isOpen || false;\n        collapseProps.children = this.props.children;\n        const drawerClass = classnames('drawer', this.props.className || '');\n        this.isManuallyToggled = false;\n        this.isExpanded = collapseProps.isOpen;\n        this.state = {isOpen: collapseProps.isOpen};\n        this.payLoad.contentAction.etext = collapseProps.isOpen ? TelemetryConstant.Collapse : TelemetryConstant.Expand;\n        const attributes = getTelemetryAttributes(this.props.telemetryContent!, this.payLoad);\n        return (\n            <div className={drawerClass}>\n                <Button\n                    {...this.props.toggleButtonProps}\n                    onClick={this._toggle}\n                    aria-expanded={collapseProps.isOpen}\n                    block\n                    disabled={this.props.disabled}\n                    className={'drawer__button'}\n                    {...attributes}\n                >\n                    {this._generateDrawerButtonInnerMarkup(collapseProps.isOpen)}\n                </Button>\n                <Collapse {...collapseProps} />\n            </div>\n        );\n    }\n\n    private _generateDrawerButtonInnerMarkup(collapseState: boolean): JSX.Element {\n        const {toggleButtonText} = this.props;\n        const drawerButtonTextClass = classnames('drawer__buttontext', this.props.toggleButtonClassName || '');\n        if (this.props.glyphPlacement === 'end') {\n            return (\n                <>\n                    {this._generateTitle(classnames(drawerButtonTextClass, '__start'), toggleButtonText.toString())}\n                    {this._generateGlyphMarkup('drawer__glyph__end', collapseState)}\n                </>\n            );\n        }\n\n        const isStart = this.props.glyphPlacement === 'start';\n        const additionalClassName = `__${isStart ? 'end' : 'start'}`;\n        return (\n            <>\n                {isStart && this._generateGlyphMarkup('drawer__glyph__start', collapseState)}\n                {this._generateTitle(classnames(drawerButtonTextClass, additionalClassName), this.props.toggleButtonText.toString())}\n            </>\n        );\n    }\n\n    private _generateTitle(titleLClassName: string, title: string): JSX.Element {\n        if(this.props.onTextChange && this.props.requestContext) {\n            return(\n                <Msdyn365.Text\n                    tag='span'\n                    text={title}\n                    className={titleLClassName}\n                    editProps={{onEdit: this.props.onTextChange, requestContext: this.props.requestContext}}\n                />\n            );\n        } else {\n            return(\n                <span className={titleLClassName}>{title}</span>\n            );\n        }\n    }\n    private _generateGlyphMarkup(location: string, collapseState:boolean): JSX.Element {\n        const glyphClass = `${collapseState? this.drawerOpenGlyph: this.drawerCloseGlyph} ${location}`;\n        return (\n            <span className={glyphClass} />\n        );\n    }\n\n    private _toggle(e: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void {\n        e.preventDefault();\n        this.isExpanded = !this.isExpanded;\n        this.setState({ isOpen: this.isExpanded });\n        this.isManuallyToggled = true;\n        if (this.props.onToggle) {\n            this.props.onToggle(this.state);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}