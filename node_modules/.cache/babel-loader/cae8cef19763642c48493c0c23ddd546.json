{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport { generateImageUrl } from '@msdyn365-commerce-modules/retail-actions';\nimport { createObservableDataAction } from '@msdyn365-commerce/core';\nimport { getSearchSuggestionsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g'; // @ts-ignore\n\nexport var SuggestionType;\n\n(function (SuggestionType) {\n  SuggestionType[\"Category\"] = \"ScopedCategory\";\n  SuggestionType[\"Keyword\"] = \"Keyword\";\n  SuggestionType[\"Product\"] = \"Product\";\n  SuggestionType[\"None\"] = \"None\";\n})(SuggestionType || (SuggestionType = {}));\n/**\n * Input class for auto suggest search input\n */\n\n\nexport var AutoSuggestInput = function AutoSuggestInput(searchText, top, suggestionType, hitPrefix, hitSuffix) {\n  _classCallCheck(this, AutoSuggestInput);\n\n  this.getCacheKey = function () {\n    return \"AutoSuggestSearchSuggestions\";\n  };\n\n  this.getCacheObjectType = function () {\n    return 'AutoSuggestSearchSuggestions';\n  };\n\n  this.dataCacheType = function () {\n    return 'none';\n  };\n\n  this.searchQuery = searchText;\n  this.topResultsCount = top;\n  this.suggestionType = suggestionType;\n  this.hitPrefix = hitPrefix;\n  this.hitSuffix = hitSuffix;\n};\n\nvar createInput = function createInput(inputData) {\n  return new AutoSuggestInput();\n};\n/**\n * Calls the Retail API and returns a auto-suggest suggestions\n */\n\n\nexport function getSearchSuggestionsAction(_x, _x2) {\n  return _getSearchSuggestionsAction.apply(this, arguments);\n}\n\nfunction _getSearchSuggestionsAction() {\n  _getSearchSuggestionsAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, ctx) {\n    var autosuggest, autoSuggestPromises;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!input || !input.searchQuery)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('[getSearchSuggestionsAction]No valid Input was provided, failing');\n\n          case 2:\n            autosuggest = {};\n            autoSuggestPromises = [_getAutoSuggest(input, autosuggest, ctx)];\n            return _context.abrupt(\"return\", Promise.all(autoSuggestPromises).then(function () {\n              return autosuggest;\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getSearchSuggestionsAction.apply(this, arguments);\n}\n\nfunction _getAutoSuggest(_x3, _x4, _x5) {\n  return _getAutoSuggest2.apply(this, arguments);\n}\n\nfunction _getAutoSuggest2() {\n  _getAutoSuggest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input, autosuggest, ctx) {\n    var searchCriteria, searchSuggestions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            searchCriteria = {\n              ProductSearchCriteria: {\n                SearchCondition: input.searchQuery && input.searchQuery.length > 0 ? input.searchQuery : '',\n                Context: {\n                  ChannelId: +ctx.requestContext.apiSettings.channelId,\n                  CatalogId: +ctx.requestContext.apiSettings.catalogId\n                }\n              },\n              HitPrefix: input.hitPrefix,\n              HitSuffix: input.hitSuffix,\n              SuggestionType: input.suggestionType\n            };\n            _context2.next = 3;\n            return getSearchSuggestionsAsync({\n              callerContext: ctx,\n              queryResultSettings: {\n                Paging: {\n                  Top: input.topResultsCount\n                }\n              }\n            }, searchCriteria);\n\n          case 3:\n            searchSuggestions = _context2.sent;\n\n            if (searchSuggestions && searchSuggestions.length > 0) {\n              // Generate image url\n              searchSuggestions.map(function (item) {\n                return item.ImageUrl = item.ImageUrl ? generateImageUrl(item.ImageUrl, ctx.requestContext.apiSettings) : '';\n              });\n              autosuggest.AllSearchResults = searchSuggestions;\n            } else {\n              ctx.telemetry.error(\"[getSearchSuggestionsAction] unable to get availabilites for search with suggestion type \".concat(searchCriteria.SuggestionType));\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAutoSuggest2.apply(this, arguments);\n}\n\nexport default createObservableDataAction({\n  id: '@msdyn365-commerce-modules/search/get-auto-suggest-suggestions',\n  action: getSearchSuggestionsAction,\n  input: createInput\n});","map":{"version":3,"sources":["/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/node_modules/source-map-loader/index.js!/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/src/modules/search/actions/get-auto-suggest-suggestions.ts"],"names":[],"mappings":"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","sourcesContent":["import { generateImageUrl } from '@msdyn365-commerce-modules/retail-actions';\nimport { Autosuggestions } from '@msdyn365-commerce/commerce-entities';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput,\n    ICreateActionContext\n} from '@msdyn365-commerce/core';\nimport { SearchSuggestion, SearchSuggestionCriteria } from '@msdyn365-commerce/retail-proxy';\nimport {\n    getSearchSuggestionsAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\n// @ts-ignore\nexport const enum SuggestionType {\n    Category = 'ScopedCategory',\n    Keyword = 'Keyword',\n    Product = 'Product',\n    None = 'None'\n}\n\n/**\n * Input class for auto suggest search input\n */\nexport class AutoSuggestInput implements IActionInput {\n    public searchQuery?: string;\n    public topResultsCount?: number;\n    public suggestionType?: string;\n    public hitPrefix?: string;\n    public hitSuffix?: string;\n\n    constructor(searchText?: string, top?: number, suggestionType?: string, hitPrefix?: string, hitSuffix?: string) {\n        this.searchQuery = searchText;\n        this.topResultsCount = top;\n        this.suggestionType = suggestionType;\n        this.hitPrefix = hitPrefix;\n        this.hitSuffix = hitSuffix;\n    }\n\n    public getCacheKey = () => `AutoSuggestSearchSuggestions`;\n    public getCacheObjectType = () => 'AutoSuggestSearchSuggestions';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nconst createInput = (inputData: ICreateActionContext) => {\n    return new AutoSuggestInput();\n};\n\n/**\n * Calls the Retail API and returns a auto-suggest suggestions\n */\nexport async function getSearchSuggestionsAction(input: AutoSuggestInput, ctx: IActionContext): Promise<Autosuggestions | null> {\n    // If no input is provided fail out\n    if (!input || !input.searchQuery) {\n        throw new Error('[getSearchSuggestionsAction]No valid Input was provided, failing');\n    }\n\n    const autosuggest: Autosuggestions = {};\n\n    const autoSuggestPromises = [\n        _getAutoSuggest(input, autosuggest, ctx),\n    ];\n    return Promise.all(autoSuggestPromises).then(() => {\n        return autosuggest;\n    });\n}\n\nasync function _getAutoSuggest(\n    input: AutoSuggestInput,\n    autosuggest: Autosuggestions,\n    ctx: IActionContext\n): Promise<void> {\n    const searchCriteria: SearchSuggestionCriteria = {\n        ProductSearchCriteria: {\n            SearchCondition: input.searchQuery && input.searchQuery.length > 0 ? input.searchQuery : '',\n            Context: {\n                ChannelId: +ctx.requestContext.apiSettings.channelId,\n                CatalogId: +ctx.requestContext.apiSettings.catalogId\n            }\n        },\n        HitPrefix: input.hitPrefix,\n        HitSuffix: input.hitSuffix,\n        SuggestionType: input.suggestionType\n    };\n\n    const searchSuggestions = await getSearchSuggestionsAsync(\n        { callerContext: ctx, queryResultSettings: { Paging: { Top: input.topResultsCount } } },\n        searchCriteria\n    );\n\n    if (searchSuggestions && searchSuggestions.length > 0) {\n        // Generate image url\n        searchSuggestions.map(\n            (item: SearchSuggestion) =>\n                (item.ImageUrl = item.ImageUrl ? generateImageUrl(item.ImageUrl, ctx.requestContext.apiSettings) : '')\n        );\n\n        autosuggest.AllSearchResults = searchSuggestions;\n    } else {\n        ctx.telemetry.error(`[getSearchSuggestionsAction] unable to get availabilites for search with suggestion type ${searchCriteria.SuggestionType}`);\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/search/get-auto-suggest-suggestions',\n    action: <IAction<Autosuggestions>>getSearchSuggestionsAction,\n    input: createInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}