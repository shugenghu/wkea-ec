{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.string.replace.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import{getMediaLocationsForSelectedVariant,MediaLocationsForSelectedVariantInput}from'@msdyn365-commerce-modules/retail-actions';export async function getValidProductImages(productId,channelId,actionContext,imageSettings){const actionInput=new MediaLocationsForSelectedVariantInput(productId,channelId);return getMediaLocationsForSelectedVariant(actionInput,actionContext).then(mediaLocations=>{if(mediaLocations){return Promise.all(mediaLocations.map(mediaLocation=>validateMediaLocaionAsync(mediaLocation,imageSettings))).then(pairs=>{return pairs.filter(pair=>pair[1]).map(pair=>pair[0]);});}return[];}).catch(error=>{actionContext.telemetry.exception(error);actionContext.telemetry.debug('Unable to get Media Locations for Selected Variant');return[];});}export async function validateProductImages(mediaLocations,actionContext,imageSettings){return Promise.all(mediaLocations.map(mediaLocation=>validateMediaLocaionAsync(mediaLocation,imageSettings))).then(pairs=>{return pairs.filter(pair=>pair[1]).map(pair=>pair[0]);}).catch(error=>{actionContext.telemetry.exception(error);actionContext.telemetry.debug('Unable to validate prodcut images');return[];});}async function validateMediaLocaionAsync(mediaLocation,imageSettings){const imageData={src:mediaLocation.Uri||'',altText:mediaLocation.AltText||''};const imageSettingsVal=imageSettings.viewports.lg.q.replace(/['\"]+/g,'');if(imageData.src===''){return[imageData,false];}const imageConcatVal=\"\".concat(imageData.src)+\"&\"+\"\".concat(imageSettingsVal);return new Promise(resolve=>{try{const http=new XMLHttpRequest();http.open('HEAD',imageConcatVal,true);http.onload=()=>{resolve([imageData,http.status===200||http.status===201]);};http.onerror=()=>{resolve([imageData,false]);};http.send();}catch(e){resolve([imageData,false]);}});}","map":{"version":3,"sources":["modules/media-gallery/utils/get-valid-product-images.ts"],"names":[],"mappings":"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","sourcesContent":["import { getMediaLocationsForSelectedVariant, MediaLocationsForSelectedVariantInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { IActionContext, IImageData, IImageSettings } from '@msdyn365-commerce/core';\nimport { MediaLocation } from '@msdyn365-commerce/retail-proxy';\n\nexport async function getValidProductImages(productId: number, channelId: number, actionContext: IActionContext, imageSettings: IImageSettings): Promise<IImageData[]> {\n    const actionInput = new MediaLocationsForSelectedVariantInput(\n        productId,\n        channelId,\n    );\n\n    return getMediaLocationsForSelectedVariant(actionInput, actionContext)\n        .then(mediaLocations => {\n            if (mediaLocations) {\n                return Promise.all(mediaLocations.map((mediaLocation) => validateMediaLocaionAsync(mediaLocation, imageSettings)))\n                    .then(pairs => {\n                        return pairs.filter(pair => pair[1]).map(pair => pair[0]);\n                    });\n            }\n\n            return [];\n        }).catch(error => {\n            actionContext.telemetry.exception(error);\n            actionContext.telemetry.debug('Unable to get Media Locations for Selected Variant');\n            return [];\n        });\n}\n\nexport async function validateProductImages(mediaLocations: MediaLocation[], actionContext: IActionContext, imageSettings: IImageSettings): Promise<IImageData[]> {\n    return Promise.all(mediaLocations.map((mediaLocation) => validateMediaLocaionAsync(mediaLocation, imageSettings)))\n        .then(pairs => {\n            return pairs.filter(pair => pair[1]).map(pair => pair[0]);\n        }).catch(error => {\n            actionContext.telemetry.exception(error);\n            actionContext.telemetry.debug('Unable to validate prodcut images');\n            return [];\n        });\n}\n\nasync function validateMediaLocaionAsync(mediaLocation: MediaLocation, imageSettings: IImageSettings): Promise<[IImageData, boolean]> {\n    const imageData = {\n        src: mediaLocation.Uri || '',\n        altText: mediaLocation.AltText || ''\n    };\n\n    const imageSettingsVal = ((imageSettings.viewports.lg!.q!).replace(/['\"]+/g, ''));\n\n    if (imageData.src === '') {\n        return [imageData, false];\n    }\n\n    const imageConcatVal = `${imageData.src}` + `&` + `${imageSettingsVal}`;\n\n    return new Promise<[IImageData, boolean]>((resolve) => {\n        try {\n            const http = new XMLHttpRequest();\n            http.open('HEAD', imageConcatVal, true);\n\n            http.onload = () => {\n                resolve([imageData, http.status === 200 || http.status === 201]);\n            };\n\n            http.onerror = () => {\n                resolve([imageData, false]);\n            };\n\n            http.send();\n        } catch (e) {\n            resolve([imageData, false]);\n        }\n    });\n}\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}