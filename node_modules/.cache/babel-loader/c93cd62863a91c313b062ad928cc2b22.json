{"ast":null,"code":"import\"core-js/modules/es.promise.js\";/**\r\n * Generic input type for use with generic data actions\r\n */export class GenericInput{constructor(cacheKey,result,cacheObjectType){this.getCacheKey=()=>\"Generic-\".concat(this.cacheKey);this.getCacheObjectType=()=>\"\".concat(this.cacheObjectType);this.dataCacheType=()=>'none';this.cacheKey=cacheKey;this.cacheObjectType=cacheObjectType;this.result=result;}}/**\r\n * Generic data action that is just used for passing data around the app\r\n *\r\n * Note that this doesn't actually expose a data action, its just a base action\r\n * that others can use to create a data action with their own input\r\n */export async function getGenericAction(input,ctx){return input.result;}","map":{"version":3,"sources":["../../src/generic-data-action.ts"],"names":[],"mappings":"sCAGA;;AAEG,GACH,MAAM,MAAO,CAAA,YAAY,CAKrB,WAAA,CAAY,QAAZ,CAA8B,MAA9B,CAAyC,eAAzC,CAAgE,CAMzD,KAAA,WAAA,CAAc,sBAAiB,KAAK,QAAtB,CAAd,CACA,KAAA,kBAAA,CAAqB,cAAS,KAAK,eAAd,CAArB,CACA,KAAA,aAAA,CAAgB,IAAiB,MAAjC,CAPH,KAAK,QAAL,CAAgB,QAAhB,CACA,KAAK,eAAL,CAAuB,eAAvB,CACA,KAAK,MAAL,CAAc,MAAd,CACH,CAToB,CAgBzB;;;;;AAKG,GACH,MAAO,eAAe,CAAA,gBAAf,CAAmC,KAAnC,CAA2D,GAA3D,CAA8E,CACjF,MAAO,CAAA,KAAK,CAAC,MAAb,CACH","sourcesContent":["import { CacheType, IActionInput } from '@msdyn365-commerce/core';\nimport { IActionContext } from '@msdyn365-commerce/core';\n\n/**\n * Generic input type for use with generic data actions\n */\nexport class GenericInput<T = {}> implements IActionInput {\n    public result: T;\n    public cacheKey: string;\n    public cacheObjectType: string;\n\n    constructor(cacheKey: string, result: T, cacheObjectType: string) {\n        this.cacheKey = cacheKey;\n        this.cacheObjectType = cacheObjectType;\n        this.result = result;\n    }\n\n    public getCacheKey = () => `Generic-${this.cacheKey}`;\n    public getCacheObjectType = () => `${this.cacheObjectType}`;\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * Generic data action that is just used for passing data around the app\n *\n * Note that this doesn't actually expose a data action, its just a base action\n * that others can use to create a data action with their own input\n */\nexport async function getGenericAction<T>(input: GenericInput<T>, ctx: IActionContext): Promise<T> {\n    return input.result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}