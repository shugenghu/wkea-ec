{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import{buildCacheKey,getSimpleProducts,ProductInput}from'@msdyn365-commerce-modules/retail-actions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getOrderShipmentsHistoryAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';var getOrderShipmentHistory=function getOrderShipmentHistory(paging){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",getOrderShipmentsHistoryAsync({callerContext:ctx,queryResultSettings:{Paging:{Top:paging.top,Skip:paging.skip}}},''));case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};var getProducts=function getProducts(){var productIds=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var channelId=arguments.length>1?arguments[1]:undefined;return function(ctx){var productInputs=productIds.map(function(productId){return new ProductInput(productId,ctx.requestContext.apiSettings,channelId);});return getSimpleProducts(productInputs,ctx);};};export var GetSalesOrderHistoryWithHydrationsInput=function GetSalesOrderHistoryWithHydrationsInput(paging,apiSettings){var _this=this;_classCallCheck(this,GetSalesOrderHistoryWithHydrationsInput);this.getCacheKey=function(){return buildCacheKey(\"OrderHistory\",_this.apiSettings);};this.getCacheObjectType=function(){return\"OrderHistory\";};this.dataCacheType=function(){return'request';};this.apiSettings=apiSettings;this.paging=paging;};var splitProductsByChannelId=function splitProductsByChannelId(salesOrders,currentChannelId){var productIdsByChannel={};salesOrders.forEach(function(salesOrder){var _salesOrder$SalesLine;return salesOrder===null||salesOrder===void 0?void 0:(_salesOrder$SalesLine=salesOrder.SalesLines)===null||_salesOrder$SalesLine===void 0?void 0:_salesOrder$SalesLine.forEach(function(line){var orderProductId=line.ProductId||0;var orderChannelId=salesOrder.ChannelId||currentChannelId;if(!productIdsByChannel[orderChannelId]){productIdsByChannel[orderChannelId]=[];}productIdsByChannel[orderChannelId].push(orderProductId);});});return productIdsByChannel;};export function getSalesOrderHistoryWithHydrationsAction(_x2,_x3){return _getSalesOrderHistoryWithHydrationsAction.apply(this,arguments);}function _getSalesOrderHistoryWithHydrationsAction(){_getSalesOrderHistoryWithHydrationsAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input,context){var channelId,salesOrders,productIdsByChannelId,getProductsPromise;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(context){_context2.next=2;break;}throw new Error(\"getSalesOrderWithHydrationsAction - Action context cannot be null/undefined\");case 2:channelId=context.requestContext.apiSettings.channelId;salesOrders=[];_context2.prev=4;_context2.next=7;return getOrderShipmentHistory(input.paging)(context);case 7:salesOrders=_context2.sent;_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](4);throw _context2.t0;case 13:if(!(!salesOrders||!salesOrders.length)){_context2.next=15;break;}return _context2.abrupt(\"return\",{salesOrders:[],products:[]});case 15:productIdsByChannelId=splitProductsByChannelId(salesOrders,channelId);getProductsPromise=Object.entries(productIdsByChannelId).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),entryChannelId=_ref3[0],entryProductIdsList=_ref3[1];var getProductsCall=getProducts(entryProductIdsList,Number(entryChannelId));return getProductsCall(context);});return _context2.abrupt(\"return\",Promise.all(getProductsPromise).then(function(productList){var products=productList.reduce(function(memo,list){return[].concat(_toConsumableArray(memo),_toConsumableArray(list));},[]);return{salesOrders:salesOrders,products:products};})[\"catch\"](function(error){context.telemetry.exception(error);context.telemetry.debug('Failed to get products');throw error;}));case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[4,10]]);}));return _getSalesOrderHistoryWithHydrationsAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/order-management/order-history/get-order-shipment-history',action:getSalesOrderHistoryWithHydrationsAction});","map":{"version":3,"sources":["modules/order-history/actions/get-order-shipment-history.ts"],"names":[],"mappings":"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","sourcesContent":["import { buildCacheKey, getSimpleProducts, ProductInput } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    ICommerceApiSettings\n} from '@msdyn365-commerce/core';\nimport { getOrderShipmentsHistoryAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';\nimport { OrderShipments, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nexport interface IPaging {\n    top: number;\n    skip: number;\n}\n\nexport interface IOrderHistory {\n    salesOrders: OrderShipments[];\n    products: SimpleProduct[];\n}\n\n/**\n * Calls the Retail API and returns the products\n */\nconst getOrderShipmentHistory = (paging: IPaging) => async (ctx: IActionContext): Promise<OrderShipments[]> => {\n    return getOrderShipmentsHistoryAsync(\n        {\n            callerContext: ctx,\n            queryResultSettings: {\n                Paging: {\n                    Top: paging.top,\n                    Skip: paging.skip\n                }\n            }\n        },\n        ''\n    );\n};\n\n/**\n * Calls the Retail API and returns the products\n */\nconst getProducts = (productIds: number[] = [], channelId?: number) => (ctx: IActionContext): Promise<SimpleProduct[]> => {\n    const productInputs = productIds.map(productId => new ProductInput(productId, ctx.requestContext.apiSettings, channelId));\n    return getSimpleProducts(productInputs, ctx);\n};\n\n/**\n *  Action input\n */\nexport class GetSalesOrderHistoryWithHydrationsInput implements IActionInput {\n    public paging: IPaging;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(paging: IPaging, apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n        this.paging = paging;\n    }\n\n    public getCacheKey = () => buildCacheKey(`OrderHistory`, this.apiSettings);\n    public getCacheObjectType = () => `OrderHistory`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Splits product ids from the given orders into lists by their channel id.\n * @param {OrderShipments[]} salesOrders Orders with the products.\n * @param {number} currentChannelId Channel id to use by default if no channel id is provided for a product.\n * @returns {{ [x: number]: number[] }} A dictionary where the key is a channel id,\n * and the value is a list of product ids in which all items correspond to the key channel id.\n * @remark The list of product ids is always non-empty.\n */\nconst splitProductsByChannelId = (\n    salesOrders: OrderShipments[],\n    currentChannelId: number): { [x: number]: number[] } => {\n\n    const productIdsByChannel: { [x: number]: number[] } = {};\n\n    salesOrders.forEach(salesOrder => salesOrder?.SalesLines?.forEach(line => {\n        const orderProductId = line.ProductId || 0;\n        const orderChannelId = salesOrder.ChannelId || currentChannelId;\n        if (!productIdsByChannel[orderChannelId]) {\n            productIdsByChannel[orderChannelId] = [];\n        }\n        productIdsByChannel[orderChannelId].push(orderProductId);\n    }));\n\n    return productIdsByChannel;\n};\n\n/**\n * Get sales order with hydrations action\n */\nexport async function getSalesOrderHistoryWithHydrationsAction(\n    input: GetSalesOrderHistoryWithHydrationsInput,\n    context: IActionContext\n): Promise<IOrderHistory> {\n    if (!context) {\n        throw new Error(`getSalesOrderWithHydrationsAction - Action context cannot be null/undefined`);\n    }\n    const channelId = context.requestContext.apiSettings.channelId;\n    let salesOrders: OrderShipments[] = [];\n\n    try {\n        salesOrders = await getOrderShipmentHistory(input.paging)(context);\n    } catch (error) {\n        throw error;\n    }\n\n    if (!salesOrders || !salesOrders.length) {\n        return {\n            salesOrders: [],\n            products: []\n        };\n    }\n\n    // Splits the data by channel ids so that the products from different channels can be processed separately.\n    const productIdsByChannelId = splitProductsByChannelId(salesOrders, channelId);\n\n    // Promise that retrieves information about the products for each channel id.\n    // Note, the list of product ids should not be empty\n    // as it will generate an empty request which will force the promise to fail.\n    const getProductsPromise = Object.entries(productIdsByChannelId).map(\n        ([entryChannelId, entryProductIdsList]) => {\n            const getProductsCall = getProducts(entryProductIdsList, Number(entryChannelId));\n            return getProductsCall(context);\n        });\n\n    return Promise.all(getProductsPromise).then(\n        (productList): IOrderHistory => {\n            const products = productList.reduce((memo, list) => {\n                return [...memo, ...list];\n            }, []); // tslint:disable-line:align\n\n            return {\n                salesOrders,\n                products\n            };\n        }).catch(error => {\n            context.telemetry.exception(error);\n            context.telemetry.debug('Failed to get products');\n            throw error;\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/order-management/order-history/get-order-shipment-history',\n    action: <IAction<IOrderHistory>>getSalesOrderHistoryWithHydrationsAction\n});"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}