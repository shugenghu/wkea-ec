{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";import{AddressItemDisplayType,AddressItemType,AddressValidationRuleType}from'./address-format.data';export var AddressMetaData=/*#__PURE__*/function(){function AddressMetaData(resources,excluded,required){_classCallCheck(this,AddressMetaData);this.metaData=[];this.requiredFieldRegEx='\\\\S';this.resourcesPrefix='address';this.maxLength=64;this.resources=resources||{};this.excludedTypes=excluded||[];this.requiredFields=required!==undefined?required:[AddressItemType.Name,AddressItemType.ZipCode,AddressItemType.City,AddressItemType.State,AddressItemType.ThreeLetterISORegionName,AddressItemType.Street];this._init();}_createClass(AddressMetaData,[{key:\"getItemFormat\",value:function getItemFormat(id){return this.metaData.find(function(item){return item.type===id;});}},{key:\"_init\",value:function _init(){this._addItem(AddressItemType.Name,AddressItemDisplayType.Input);this._addItem(AddressItemType.Phone,AddressItemDisplayType.Input);this._addItem(AddressItemType.ZipCode,AddressItemDisplayType.Input);this._addItem(AddressItemType.City,AddressItemDisplayType.Input);this._addItem(AddressItemType.County,AddressItemDisplayType.Input);this._addItem(AddressItemType.State,AddressItemDisplayType.Dropdown);this._addItem(AddressItemType.ThreeLetterISORegionName,AddressItemDisplayType.Dropdown);this._addItem(AddressItemType.Street,AddressItemDisplayType.Input);this._addItem(AddressItemType.District,AddressItemDisplayType.Input);this._addItem(AddressItemType.StreetNumber,AddressItemDisplayType.Input);this._addItem(AddressItemType.BuildingCompliment,AddressItemDisplayType.Input);this._addItem(AddressItemType.Postbox,AddressItemDisplayType.Input);this._addItem(AddressItemType.House_RU,AddressItemDisplayType.Input);this._addItem(AddressItemType.Flat_RU,AddressItemDisplayType.Input);this._addItem(AddressItemType.CountryOKSMCode_RU,AddressItemDisplayType.Input);this._addItem(AddressItemType.AddressTypeValue,AddressItemDisplayType.Dropdown);this._addItem(AddressItemType.IsPrimary,AddressItemDisplayType.Checkbox);}},{key:\"_addItem\",value:function _addItem(type,displayType){if(this.excludedTypes.includes(type)){return;}var nameKey=AddressItemType[type].replace('_','');var validationRules=this._validationRules(type,nameKey);var isRequired=false;validationRules.forEach(function(rule){if(rule.type===AddressValidationRuleType.Required){isRequired=true;}});var optionalString=this.resources[\"\".concat(this.resourcesPrefix).concat(nameKey,\"LabelOptional\")]||this.resources[\"\".concat(this.resourcesPrefix).concat(nameKey,\"Label\")];var item={type:type,displayType:displayType,name:AddressItemType[type],label:isRequired?this.resources[\"\".concat(this.resourcesPrefix).concat(nameKey,\"Label\")]:optionalString,maxLength:this.maxLength,validationRules:validationRules,isNewLine:true};this.metaData.push(item);}},{key:\"_validationRules\",value:function _validationRules(type,name){var validationRules=[];for(var _i=0,_Object$keys=Object.keys(AddressValidationRuleType);_i<_Object$keys.length;_i++){var ruleType=_Object$keys[_i];var key=\"\".concat(this.resourcesPrefix).concat(name).concat(ruleType);var message=this.resources[\"\".concat(key,\"ErrorMessage\")];switch(ruleType){case AddressValidationRuleType.Required:{if(this.requiredFields.find(function(itemType){return itemType===type;})){validationRules.push(this._validationRule(ruleType,this.requiredFieldRegEx,message));}break;}default:}}return validationRules;}},{key:\"_validationRule\",value:function _validationRule(type,regEx,message){return{type:type,regEx:regEx,message:message};}}]);return AddressMetaData;}();","map":{"version":3,"sources":["common/address-meta-data.ts"],"names":[],"mappings":"wIAAA,OACI,sBADJ,CAC4B,eAD5B,CAC6C,yBAD7C,KAGO,uBAHP,CASA,UAAa,CAAA,eAAb,yBAUI,yBAAY,SAAZ,CAAyC,QAAzC,CAAuE,QAAvE,CAAmG,uCAR3F,KAAA,QAAA,CAA2B,EAA3B,CAEA,KAAA,kBAAA,CAA6B,KAA7B,CACA,KAAA,eAAA,CAA0B,SAA1B,CACA,KAAA,SAAA,CAAoB,EAApB,CAKJ,KAAK,SAAL,CAAiB,SAAS,EAAI,EAA9B,CACA,KAAK,aAAL,CAAqB,QAAQ,EAAI,EAAjC,CACA,KAAK,cAAL,CAAsB,QAAQ,GAAK,SAAb,CAAyB,QAAzB,CAAoC,CAAC,eAAe,CAAC,IAAjB,CAAuB,eAAe,CAAC,OAAvC,CAAgD,eAAe,CAAC,IAAhE,CAAsE,eAAe,CAAC,KAAtF,CAA6F,eAAe,CAAC,wBAA7G,CAAuI,eAAe,CAAC,MAAvJ,CAA1D,CACA,KAAK,KAAL,GACH,CAfL,gFAiByB,EAjBzB,CAiBmC,CAC3B,MAAO,MAAK,QAAL,CAAc,IAAd,CAAmB,SAAC,IAAD,CAAS,CAC/B,MAAO,CAAA,IAAI,CAAC,IAAL,GAAc,EAArB,CACH,CAFM,CAAP,CAGH,CArBL,qCAuBiB,CACT,KAAK,QAAL,CAAc,eAAe,CAAC,IAA9B,CAAoC,sBAAsB,CAAC,KAA3D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,KAA9B,CAAqC,sBAAsB,CAAC,KAA5D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,OAA9B,CAAuC,sBAAsB,CAAC,KAA9D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,IAA9B,CAAoC,sBAAsB,CAAC,KAA3D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,MAA9B,CAAsC,sBAAsB,CAAC,KAA7D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,KAA9B,CAAqC,sBAAsB,CAAC,QAA5D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,wBAA9B,CAAwD,sBAAsB,CAAC,QAA/E,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,MAA9B,CAAsC,sBAAsB,CAAC,KAA7D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,QAA9B,CAAwC,sBAAsB,CAAC,KAA/D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,YAA9B,CAA4C,sBAAsB,CAAC,KAAnE,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,kBAA9B,CAAkD,sBAAsB,CAAC,KAAzE,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,OAA9B,CAAuC,sBAAsB,CAAC,KAA9D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,QAA9B,CAAwC,sBAAsB,CAAC,KAA/D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,OAA9B,CAAuC,sBAAsB,CAAC,KAA9D,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,kBAA9B,CAAkD,sBAAsB,CAAC,KAAzE,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,gBAA9B,CAAgD,sBAAsB,CAAC,QAAvE,EACA,KAAK,QAAL,CAAc,eAAe,CAAC,SAA9B,CAAyC,sBAAsB,CAAC,QAAhE,EACH,CAzCL,0CA2CqB,IA3CrB,CA2C4C,WA3C5C,CA2C+E,CACvE,GAAI,KAAK,aAAL,CAAmB,QAAnB,CAA4B,IAA5B,CAAJ,CAAuC,CACnC,OACH,CAED,GAAM,CAAA,OAAO,CAAG,eAAe,CAAC,IAAD,CAAf,CAAsB,OAAtB,CAA8B,GAA9B,CAAmC,EAAnC,CAAhB,CAGA,GAAM,CAAA,eAAe,CAAG,KAAK,gBAAL,CAAsB,IAAtB,CAA4B,OAA5B,CAAxB,CACA,GAAI,CAAA,UAAU,CAAG,KAAjB,CACA,eAAe,CAAC,OAAhB,CAAwB,SAAA,IAAI,CAAG,CAC3B,GAAI,IAAI,CAAC,IAAL,GAAc,yBAAyB,CAAC,QAA5C,CAAsD,CAClD,UAAU,CAAG,IAAb,CACH,CACJ,CAJD,EAOA,GAAM,CAAA,cAAc,CAAG,KAAK,SAAL,WAAkB,KAAK,eAAvB,SAAyC,OAAzC,oBAAoE,KAAK,SAAL,WAAkB,KAAK,eAAvB,SAAyC,OAAzC,UAA3F,CACA,GAAM,CAAA,IAAI,CAAiB,CACvB,IAAI,CAAJ,IADuB,CAEvB,WAAW,CAAX,WAFuB,CAGvB,IAAI,CAAE,eAAe,CAAC,IAAD,CAHE,CAIvB,KAAK,CAAE,UAAU,CAAG,KAAK,SAAL,WAAkB,KAAK,eAAvB,SAAyC,OAAzC,UAAH,CAA8D,cAJxD,CAKvB,SAAS,CAAE,KAAK,SALO,CAMvB,eAAe,CAAE,eANM,CAOvB,SAAS,CAAE,IAPY,CAA3B,CAUA,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,EACH,CAxEL,0DA0E6B,IA1E7B,CA0EoD,IA1EpD,CA0EgE,CACxD,GAAM,CAAA,eAAe,CAA6B,EAAlD,CAEA,0BAAuB,MAAM,CAAC,IAAP,CAAY,yBAAZ,CAAvB,6BAA+D,CAA1D,GAAM,CAAA,QAAQ,iBAAd,CACD,GAAM,CAAA,GAAG,WAAM,KAAK,eAAX,SAA6B,IAA7B,SAAoC,QAApC,CAAT,CACA,GAAM,CAAA,OAAO,CAAG,KAAK,SAAL,WAAkB,GAAlB,iBAAhB,CACA,OAAQ,QAAR,EACI,IAAK,CAAA,yBAAyB,CAAC,QAA/B,CAAyC,CACrC,GAAI,KAAK,cAAL,CAAoB,IAApB,CAAyB,SAAC,QAAD,QAA+B,CAAA,QAAQ,GAAK,IAA5C,EAAzB,CAAJ,CAAgF,CAC5E,eAAe,CAAC,IAAhB,CAAqB,KAAK,eAAL,CAAqB,QAArB,CAA+B,KAAK,kBAApC,CAAwD,OAAxD,CAArB,EACH,CACD,MACH,CACD,QAPJ,CASH,CACD,MAAO,CAAA,eAAP,CACH,CA3FL,wDA6F4B,IA7F5B,CA6F6D,KA7F7D,CA6F4E,OA7F5E,CA6F2F,CACnF,MAAO,CACH,IAAI,CAAJ,IADG,CAEH,KAAK,CAAL,KAFG,CAGH,OAAO,CAAP,OAHG,CAAP,CAKH,CAnGL","sourcesContent":["import {\n    AddressItemDisplayType, AddressItemType, AddressValidationRuleType, IAddressItem,\n    IAddressValidationRule\n} from './address-format.data';\nimport { IAddressResource } from './address-module.data';\n\n/**\n * Address meta data\n */\nexport class AddressMetaData {\n\n    private metaData: IAddressItem[] = [];\n    private resources: IAddressResource;\n    private requiredFieldRegEx: string = '\\\\S';\n    private resourcesPrefix: string = 'address';\n    private maxLength: number = 64;\n    private requiredFields: AddressItemType[];\n    private excludedTypes: AddressItemType[];\n\n    constructor(resources: IAddressResource, excluded?: AddressItemType[], required?: AddressItemType[]) {\n        this.resources = resources || {};\n        this.excludedTypes = excluded || [];\n        this.requiredFields = required !== undefined ? required : [AddressItemType.Name, AddressItemType.ZipCode, AddressItemType.City, AddressItemType.State, AddressItemType.ThreeLetterISORegionName, AddressItemType.Street];\n        this._init();\n    }\n\n    public getItemFormat(id: number): IAddressItem | undefined {\n        return this.metaData.find((item) => {\n            return item.type === id;\n        });\n    }\n\n    private _init(): void {\n        this._addItem(AddressItemType.Name, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.Phone, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.ZipCode, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.City, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.County, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.State, AddressItemDisplayType.Dropdown);\n        this._addItem(AddressItemType.ThreeLetterISORegionName, AddressItemDisplayType.Dropdown);\n        this._addItem(AddressItemType.Street, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.District, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.StreetNumber, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.BuildingCompliment, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.Postbox, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.House_RU, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.Flat_RU, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.CountryOKSMCode_RU, AddressItemDisplayType.Input);\n        this._addItem(AddressItemType.AddressTypeValue, AddressItemDisplayType.Dropdown);\n        this._addItem(AddressItemType.IsPrimary, AddressItemDisplayType.Checkbox);\n    }\n\n    private _addItem(type: AddressItemType, displayType: AddressItemDisplayType): void {\n        if (this.excludedTypes.includes(type)) {\n            return;\n        }\n\n        const nameKey = AddressItemType[type].replace('_', '');\n\n        // find out if currentItem is required field\n        const validationRules = this._validationRules(type, nameKey);\n        let isRequired = false;\n        validationRules.forEach(rule => {\n            if (rule.type === AddressValidationRuleType.Required) {\n                isRequired = true;\n            }\n        });\n\n        // if no optional string is provided in resource file, use the original label text\n        const optionalString = this.resources[`${this.resourcesPrefix}${nameKey}LabelOptional`] || this.resources[`${this.resourcesPrefix}${nameKey}Label`];\n        const item: IAddressItem = {\n            type,\n            displayType,\n            name: AddressItemType[type],\n            label: isRequired ? this.resources[`${this.resourcesPrefix}${nameKey}Label`] : optionalString,\n            maxLength: this.maxLength,\n            validationRules: validationRules,\n            isNewLine: true\n        };\n\n        this.metaData.push(item);\n    }\n\n    private _validationRules(type: AddressItemType, name: string): IAddressValidationRule[] {\n        const validationRules: IAddressValidationRule[] = [];\n\n        for (const ruleType of Object.keys(AddressValidationRuleType)) {\n            const key = `${this.resourcesPrefix}${name}${ruleType}`;\n            const message = this.resources[`${key}ErrorMessage`];\n            switch (ruleType) {\n                case AddressValidationRuleType.Required: {\n                    if (this.requiredFields.find((itemType: AddressItemType) => itemType === type)) {\n                        validationRules.push(this._validationRule(ruleType, this.requiredFieldRegEx, message));\n                    }\n                    break;\n                }\n                default:\n            }\n        }\n        return validationRules;\n    }\n\n    private _validationRule(type: AddressValidationRuleType, regEx: string, message: string): IAddressValidationRule {\n        return {\n            type,\n            regEx,\n            message\n        };\n    }\n\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}