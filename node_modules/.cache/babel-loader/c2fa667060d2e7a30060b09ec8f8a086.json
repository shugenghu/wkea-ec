{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{updateCartLinesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';export default async function updateCartLineQuantityInternal(cart,cartLineId,newQuantity,actionContext){if(!cart||!cart.CartLines){return{cart:undefined,status:'FAILED'};}const matchingLines=cart.CartLines.filter(cartLine=>cartLine.LineId===cartLineId);if(matchingLines.length===0){return{cart:undefined,status:'FAILED'};}const copyCartLine=_objectSpread({},matchingLines[0]);copyCartLine.Quantity=Math.min(newQuantity,actionContext.requestContext.app.config.maxQuantityForCartLineItem||10);return updateCartLinesAsync({callerContext:actionContext},cart.Id,[copyCartLine],null).then(newCart=>{return{cart:newCart,status:'SUCCESS'};}).catch(error=>{actionContext.telemetry.warning(error);actionContext.telemetry.debug('Unable to Update Cart Line');return{cart:undefined,status:'FAILED'};});}","map":{"version":3,"sources":["cart-state/update-cart-line-quantity.ts"],"names":[],"mappings":"y4BACA,OAAS,oBAAT,KAAqC,qEAArC,CAIA,cAAe,eAAe,CAAA,8BAAf,CAA8C,IAA9C,CAAgF,UAAhF,CAAoG,WAApG,CAAyH,aAAzH,CAAsJ,CACjK,GAAI,CAAC,IAAD,EAAS,CAAC,IAAI,CAAC,SAAnB,CAA8B,CAC1B,MAAO,CAAE,IAAI,CAAE,SAAR,CAAmB,MAAM,CAAE,QAA3B,CAAP,CACH,CAED,KAAM,CAAA,aAAa,CAAG,IAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,QAAQ,EAAI,QAAQ,CAAC,MAAT,GAAoB,UAAtD,CAAtB,CAEA,GAAI,aAAa,CAAC,MAAd,GAAyB,CAA7B,CAAgC,CAC5B,MAAO,CAAE,IAAI,CAAE,SAAR,CAAmB,MAAM,CAAE,QAA3B,CAAP,CACH,CAED,KAAM,CAAA,YAAY,kBAAiB,aAAa,CAAC,CAAD,CAA9B,CAAlB,CAEA,YAAY,CAAC,QAAb,CAAwB,IAAI,CAAC,GAAL,CAAS,WAAT,CAAsB,aAAa,CAAC,cAAd,CAA6B,GAA7B,CAAiC,MAAjC,CAAwC,0BAAxC,EAAsE,EAA5F,CAAxB,CAEA,MAAO,CAAA,oBAAoB,CAAC,CAAE,aAAa,CAAE,aAAjB,CAAD,CAAkC,IAAI,CAAC,EAAvC,CAA2C,CAAC,YAAD,CAA3C,CAA2D,IAA3D,CAApB,CACF,IADE,CACG,OAAO,EAAG,CACZ,MAAmC,CAAE,IAAI,CAAE,OAAR,CAAiB,MAAM,CAAE,SAAzB,CAAnC,CACH,CAHE,EAIF,KAJE,CAII,KAAK,EAAG,CACX,aAAa,CAAC,SAAd,CAAwB,OAAxB,CAAgC,KAAhC,EACA,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAA8B,4BAA9B,EAEA,MAAmC,CAAE,IAAI,CAAE,SAAR,CAAmB,MAAM,CAAE,QAA3B,CAAnC,CACH,CATE,CAAP,CAUH","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { updateCartLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { Cart, CartLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { ICartActionResultWithCart } from './cart-action-result';\n\nexport default async function updateCartLineQuantityInternal(cart: Readonly<Cart | undefined>, cartLineId: string, newQuantity: number, actionContext: IActionContext): Promise<ICartActionResultWithCart> {\n    if (!cart || !cart.CartLines) {\n        return { cart: undefined, status: 'FAILED'};\n    }\n\n    const matchingLines = cart.CartLines.filter(cartLine => cartLine.LineId === cartLineId);\n\n    if (matchingLines.length === 0) {\n        return { cart: undefined, status: 'FAILED'};\n    }\n\n    const copyCartLine: CartLine = {...matchingLines[0]};\n\n    copyCartLine.Quantity = Math.min(newQuantity, actionContext.requestContext.app.config.maxQuantityForCartLineItem || 10);\n\n    return updateCartLinesAsync({ callerContext: actionContext}, cart.Id, [copyCartLine], null)\n        .then(newCart => {\n            return <ICartActionResultWithCart> { cart: newCart, status: 'SUCCESS'};\n        })\n        .catch(error => {\n            actionContext.telemetry.warning(error);\n            actionContext.telemetry.debug('Unable to Update Cart Line');\n\n            return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED'};\n        });\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}