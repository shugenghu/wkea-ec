{"ast":null,"code":"import{DataServiceQuery}from'../DataServiceQuery';import{PickingListClass}from'../Entities/CommerceModels.g';import{executeAction}from'../retail-action';function pickingListsQuery(orderId){var key=orderId?{OrderId:orderId}:null;return new DataServiceQuery(\"PickingLists\",\"PickingList\",PickingListClass,key);}export function createCreateInput(entity){return pickingListsQuery().create(entity);}export function createPickingListAsync(context,entity){const request=createCreateInput(entity);return executeAction(request,context);}export function createUpdateInput(entity){return pickingListsQuery(entity.OrderId).update(entity);}export function updateAsync(context,entity){const request=createUpdateInput(entity);return executeAction(request,context);}export function createDeleteAsync(entity){return pickingListsQuery(entity.OrderId).delete();}export function deleteAsync(context,entity){const request=createDeleteAsync(entity);return executeAction(request,context);}export function createReadAsync(orderId){return pickingListsQuery(orderId).read();}export function readAsync(context,orderId){const request=createReadAsync(orderId);return executeAction(request,context);}export function createReadAllAsync(queryResultSettings){return pickingListsQuery().resultSettings(queryResultSettings).read();}export function readAllAsync(context){const request=createReadAllAsync(context.queryResultSettings);return executeAction(request,context);}export function createCommitInput(orderId){const query=pickingListsQuery(orderId);return query.createDataServiceRequestForOperation('Commit',true,'','',{bypassCache:'get',returnEntity:''},{});}export function commitAsync(context,orderId){const request=createCommitInput(orderId);return executeAction(request,context);}","map":{"version":3,"sources":["../../src/DataActions/PickingListsDataActions.g.ts"],"names":[],"mappings":"AAEI,OAAS,gBAAT,KAAiC,qBAAjC,CAEA,OAAS,gBAAT,KAAiC,8BAAjC,CAEA,OAAS,aAAT,KAA8B,kBAA9B,CAGA,QAAS,CAAA,iBAAT,CAA2B,OAA3B,CAA2C,CACzC,GAAI,CAAA,GAAG,CAAI,OAAD,CAAY,CAAE,OAAO,CAAE,OAAX,CAAZ,CAAmC,IAA7C,CACA,MAAO,IAAI,CAAA,gBAAJ,CAAqB,cAArB,CAAqC,aAArC,CAAoD,gBAApD,CAAsE,GAAtE,CAAP,CACD,CAED,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAA+C,CACjD,MAAO,CAAA,iBAAiB,GAAG,MAApB,CAA2B,MAA3B,CAAP,CACH,CACD,MAAM,SAAU,CAAA,sBAAV,CAAiC,OAAjC,CAAoD,MAApD,CAAuE,CACzE,KAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAc,OAAd,CAAuB,OAAvB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAA+C,CACjD,MAAO,CAAA,iBAAiB,CAAC,MAAM,CAAC,OAAR,CAAjB,CAAkC,MAAlC,CAAyC,MAAzC,CAAP,CACH,CACD,MAAM,SAAU,CAAA,WAAV,CAAsB,OAAtB,CAAyC,MAAzC,CAA4D,CAC9D,KAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAc,OAAd,CAAuB,OAAvB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAA+C,CACjD,MAAO,CAAA,iBAAiB,CAAC,MAAM,CAAC,OAAR,CAAjB,CAAkC,MAAlC,EAAP,CACH,CACD,MAAM,SAAU,CAAA,WAAV,CAAsB,OAAtB,CAAyC,MAAzC,CAA4D,CAC9D,KAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAa,OAAb,CAAsB,OAAtB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,eAAV,CAA0B,OAA1B,CAAyC,CAC3C,MAAO,CAAA,iBAAiB,CAAC,OAAD,CAAjB,CAA2B,IAA3B,EAAP,CACH,CACD,MAAM,SAAU,CAAA,SAAV,CAAoB,OAApB,CAAuC,OAAvC,CAAsD,CACxD,KAAM,CAAA,OAAO,CAAG,eAAe,CAAC,OAAD,CAA/B,CACA,MAAO,CAAA,aAAa,CAAc,OAAd,CAAuB,OAAvB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,kBAAV,CAA6B,mBAA7B,CAAsE,CACxE,MAAO,CAAA,iBAAiB,GAAG,cAApB,CAAmC,mBAAnC,EAAwD,IAAxD,EAAP,CACH,CACD,MAAM,SAAU,CAAA,YAAV,CAAuB,OAAvB,CAAwC,CAC1C,KAAM,CAAA,OAAO,CAAG,kBAAkB,CAAC,OAAO,CAAC,mBAAT,CAAlC,CACA,MAAO,CAAA,aAAa,CAAgB,OAAhB,CAAyB,OAAzB,CAApB,CACH,CAED,MAAM,SAAU,CAAA,iBAAV,CAA4B,OAA5B,CAA2C,CAC7C,KAAM,CAAA,KAAK,CAAG,iBAAiB,CAAC,OAAD,CAA/B,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,QAA3C,CAAqD,IAArD,CAA2D,EAA3D,CAA+D,EAA/D,CAAmE,CAAE,WAAW,CAAE,KAAf,CAAsB,YAAY,CAAE,EAApC,CAAnE,CAA4G,EAA5G,CAAP,CACH,CAED,MAAM,SAAU,CAAA,WAAV,CAAsB,OAAtB,CAAyC,OAAzC,CAAwD,CAC1D,KAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,OAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAa,OAAb,CAAsB,OAAtB,CAApB,CACH","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { PickingList } from '../Entities/CommerceTypes.g';\n    import { PickingListClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function pickingListsQuery(orderId?: string): DataServiceQuery {\n      var key = (orderId) ? { OrderId: orderId } : null;\n      return new DataServiceQuery(\"PickingLists\", \"PickingList\", PickingListClass, key);\n    }\n    \n    export function createCreateInput(entity: PickingList): IDataServiceRequest {\n        return pickingListsQuery().create(entity);\n    }\n    export function createPickingListAsync(context: IContext, entity: PickingList): AsyncResult<PickingList> {\n        const request = createCreateInput(entity, );\n        return executeAction<PickingList>(request, context);\n    }\n    export function createUpdateInput(entity: PickingList): IDataServiceRequest {\n        return pickingListsQuery(entity.OrderId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: PickingList): AsyncResult<PickingList> {\n        const request = createUpdateInput(entity, );\n        return executeAction<PickingList>(request, context);\n    }\n    export function createDeleteAsync(entity: PickingList): IDataServiceRequest {\n        return pickingListsQuery(entity.OrderId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: PickingList): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(orderId: string): IDataServiceRequest {\n        return pickingListsQuery(orderId).read();\n    }\n    export function readAsync(context: IContext, orderId: string): AsyncResult<PickingList> {\n        const request = createReadAsync(orderId, );\n        return executeAction<PickingList>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return pickingListsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<PickingList[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<PickingList[]>(request, context);\n    }\n    \n    export function createCommitInput(orderId: string): IDataServiceRequest {      \n        const query = pickingListsQuery(orderId);\n        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });\n    }    \n    \n    export function commitAsync(context: IContext, orderId: string):AsyncResult<NullResult> {\n        const request = createCommitInput(orderId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    "],"sourceRoot":""},"metadata":{},"sourceType":"module"}