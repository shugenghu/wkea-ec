{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{getCheckoutState}from'@msdyn365-commerce/global-state';import{checkoutAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';import{getTenderTypesAsync,resolveCardTypesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';export var OPERATIONS={PayCard:201,PayGiftCertificate:214,PayLoyalty:207,PayCustomerAccount:202};var getCardTypeId=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx){var cardPrefix,response,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:cardPrefix=_args.length>1&&_args[1]!==undefined?_args[1]:'';_context.prev=1;_context.next=4;return resolveCardTypesAsync({callerContext:ctx},cardPrefix,-1);case 4:response=_context.sent;if(!(response&&response.length>0)){_context.next=7;break;}return _context.abrupt(\"return\",response[0].TypeId);case 7:_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](1);ctx.telemetry.error('Call to resolveCardTypesAsync failed.',_context.t0);case 12:return _context.abrupt(\"return\",undefined);case 13:case\"end\":return _context.stop();}}},_callee,null,[[1,9]]);}));return function getCardTypeId(_x){return _ref.apply(this,arguments);};}();var findTenderIdTypeByOperationId=function findTenderIdTypeByOperationId(tenderTypes,operationId){var matchedTenderType=tenderTypes.find(function(tenderType){return tenderType.OperationId===operationId;});if(matchedTenderType){return matchedTenderType.TenderTypeId;}return;};var roundNumber=function roundNumber(value){return Number(value.toFixed(2));};function getLoyaltyTenderLine(_x2,_x3){return _getLoyaltyTenderLine.apply(this,arguments);}function _getLoyaltyTenderLine(){_getLoyaltyTenderLine=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ctx,LoyaltyCardId){var Amount,Currency,tenderTypes,TenderTypeId,_args3=arguments;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:Amount=_args3.length>2&&_args3[2]!==undefined?_args3[2]:0;Currency=_args3.length>3&&_args3[3]!==undefined?_args3[3]:'USD';_context3.next=4;return getTenderTypesAsync({callerContext:ctx,queryResultSettings:{}})[\"catch\"](function(error){throw error;});case 4:tenderTypes=_context3.sent;if(tenderTypes){_context3.next=7;break;}throw new Error('Fail to get gift card tender line');case 7:TenderTypeId=findTenderIdTypeByOperationId(tenderTypes,OPERATIONS.PayLoyalty);return _context3.abrupt(\"return\",{'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine','Amount@odata.type':'#Decimal',Currency:Currency,TenderTypeId:TenderTypeId,Amount:Amount,LoyaltyCardId:LoyaltyCardId});case 9:case\"end\":return _context3.stop();}}},_callee3);}));return _getLoyaltyTenderLine.apply(this,arguments);}function getGiftCardTenderLine(_x4){return _getGiftCardTenderLine.apply(this,arguments);}function _getGiftCardTenderLine(){_getGiftCardTenderLine=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ctx){var GiftCardId,Amount,Currency,tenderTypeId,giftCardPin,giftCardExpirationYear,giftCardExpirationMonth,TenderTypeId,tenderTypes,GiftCardPin,GiftCardExpirationYear,GiftCardExpirationMonth,_args4=arguments;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:GiftCardId=_args4.length>1&&_args4[1]!==undefined?_args4[1]:'';Amount=_args4.length>2&&_args4[2]!==undefined?_args4[2]:0;Currency=_args4.length>3&&_args4[3]!==undefined?_args4[3]:'USD';tenderTypeId=_args4.length>4?_args4[4]:undefined;giftCardPin=_args4.length>5?_args4[5]:undefined;giftCardExpirationYear=_args4.length>6?_args4[6]:undefined;giftCardExpirationMonth=_args4.length>7?_args4[7]:undefined;TenderTypeId=tenderTypeId;if(TenderTypeId){_context4.next=15;break;}_context4.next=11;return getTenderTypesAsync({callerContext:ctx,queryResultSettings:{}})[\"catch\"](function(error){throw error;});case 11:tenderTypes=_context4.sent;if(tenderTypes){_context4.next=14;break;}throw new Error('Fail to get gift card tender line');case 14:TenderTypeId=findTenderIdTypeByOperationId(tenderTypes,OPERATIONS.PayGiftCertificate);case 15:GiftCardPin=giftCardPin;GiftCardExpirationYear=giftCardExpirationYear;GiftCardExpirationMonth=giftCardExpirationMonth;return _context4.abrupt(\"return\",{'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine','Amount@odata.type':'#Decimal',Currency:Currency,TenderTypeId:TenderTypeId,Amount:Amount,GiftCardId:GiftCardId,GiftCardPin:GiftCardPin,GiftCardExpirationYear:GiftCardExpirationYear,GiftCardExpirationMonth:GiftCardExpirationMonth});case 19:case\"end\":return _context4.stop();}}},_callee4);}));return _getGiftCardTenderLine.apply(this,arguments);}function getCreditCardTenderLine(_x5,_x6){return _getCreditCardTenderLine.apply(this,arguments);}function _getCreditCardTenderLine(){_getCreditCardTenderLine=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ctx,tokenizedPaymentCard){var cardPrefix,Amount,Currency,billingAddress,tenderTypes,cartTypeId,TenderTypeId,cardTenderLine,_args5=arguments;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:cardPrefix=_args5.length>2&&_args5[2]!==undefined?_args5[2]:'';Amount=_args5.length>3&&_args5[3]!==undefined?_args5[3]:0;Currency=_args5.length>4&&_args5[4]!==undefined?_args5[4]:'USD';billingAddress=_args5.length>5?_args5[5]:undefined;_context5.next=6;return getTenderTypesAsync({callerContext:ctx,queryResultSettings:{}})[\"catch\"](function(error){throw error;});case 6:tenderTypes=_context5.sent;cartTypeId=tokenizedPaymentCard.CardTypeId;if(cartTypeId){_context5.next=12;break;}_context5.next=11;return getCardTypeId(ctx,cardPrefix);case 11:cartTypeId=_context5.sent;case 12:if(tenderTypes){_context5.next=14;break;}throw new Error('Fail to get card tender type');case 14:if(cartTypeId){_context5.next=16;break;}throw new Error('Fail to get card type id');case 16:TenderTypeId=findTenderIdTypeByOperationId(tenderTypes,OPERATIONS.PayCard);cardTenderLine={'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine','Amount@odata.type':'#Decimal',Currency:Currency,Amount:Amount,TenderTypeId:TenderTypeId,CardTypeId:cartTypeId};cardTenderLine.TokenizedPaymentCard=_objectSpread(_objectSpread(_objectSpread({},tokenizedPaymentCard),{},{CardTypeId:cartTypeId,'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.TokenizedPaymentCard',House:tokenizedPaymentCard.House||'N/A'},tokenizedPaymentCard.CardTokenInfo&&{CardTokenInfo:_objectSpread(_objectSpread({},tokenizedPaymentCard.CardTokenInfo),{},{'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CardTokenInfo'})}),billingAddress&&{Phone:billingAddress.Phone,Country:billingAddress.ThreeLetterISORegionName,Address1:billingAddress.Street,City:billingAddress.City,State:billingAddress.State,Zip:billingAddress.ZipCode});return _context5.abrupt(\"return\",cardTenderLine);case 20:case\"end\":return _context5.stop();}}},_callee5);}));return _getCreditCardTenderLine.apply(this,arguments);}function createCustomerAccountTenderLine(_x7,_x8){return _createCustomerAccountTenderLine.apply(this,arguments);}function _createCustomerAccountTenderLine(){_createCustomerAccountTenderLine=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ctx,Amount){var Currency,CustomerId,tenderTypes,TenderTypeId,_args6=arguments;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:Currency=_args6.length>2&&_args6[2]!==undefined?_args6[2]:'USD';CustomerId=null;if(!ctx.requestContext.user.isAuthenticated){ctx.telemetry.error('A customer id is required to pay with customer account');}_context6.next=5;return getTenderTypesAsync({callerContext:ctx,queryResultSettings:{}})[\"catch\"](function(error){throw error;});case 5:tenderTypes=_context6.sent;if(!tenderTypes){ctx.telemetry.error('No tender types found for this channel');}TenderTypeId=findTenderIdTypeByOperationId(tenderTypes,OPERATIONS.PayCustomerAccount);if(!TenderTypeId){ctx.telemetry.error('No customer account tender type');}return _context6.abrupt(\"return\",{'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine','Amount@odata.type':'#Decimal',Currency:Currency,TenderTypeId:TenderTypeId,Amount:Amount,CustomerId:CustomerId});case 10:case\"end\":return _context6.stop();}}},_callee6);}));return _createCustomerAccountTenderLine.apply(this,arguments);}export default/*#__PURE__*/(function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx){var checkoutState,cartState,channelConfiguration,giftCardExtends,tokenizedPaymentCard,cardPrefix,guestCheckoutEmail,billingAddress,loyaltyAmount,Currency,amountDue,cartTenderLines,getTenderLinePromises,loyaltyCardNumber,chargedAmount,loyaltyTenderLinePromise,_chargedAmount2,customerAccountTenderLinePromise,creditCardTenderLinePromise,salesOrder;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getCheckoutState(ctx)[\"catch\"](function(error){throw error;});case 2:checkoutState=_context2.sent;cartState=checkoutState.checkoutCart;channelConfiguration=ctx.requestContext.channel;if(!(!cartState||!Object.keys(cartState).length||!checkoutState||!channelConfiguration)){_context2.next=7;break;}throw new Error('Fail to placeOrder');case 7:giftCardExtends=checkoutState.giftCardExtends,tokenizedPaymentCard=checkoutState.tokenizedPaymentCard,cardPrefix=checkoutState.cardPrefix,guestCheckoutEmail=checkoutState.guestCheckoutEmail,billingAddress=checkoutState.billingAddress,loyaltyAmount=checkoutState.loyaltyAmount;Currency=channelConfiguration.Currency;amountDue=cartState.cart.AmountDue||0;getTenderLinePromises=[];loyaltyCardNumber=cartState.cart.LoyaltyCardId;if(loyaltyAmount&&loyaltyCardNumber){chargedAmount=roundNumber(Math.min(loyaltyAmount,amountDue));loyaltyTenderLinePromise=getLoyaltyTenderLine(ctx,loyaltyCardNumber,chargedAmount,Currency);getTenderLinePromises.push(loyaltyTenderLinePromise);amountDue=roundNumber(amountDue-chargedAmount);}if(giftCardExtends&&giftCardExtends.length){giftCardExtends.some(function(giftCardExtend){if(giftCardExtend.Balance&&amountDue>0){var _giftCardExtend$Expir,_giftCardExtend$Expir2;var _chargedAmount=roundNumber(Math.min(giftCardExtend.Balance,amountDue));var tenderTypeId=giftCardExtend.TenderTypeId;var giftCardPin=giftCardExtend.Pin;var giftCardExpirationYear=giftCardExtend.ExpirationDate?parseInt((_giftCardExtend$Expir=giftCardExtend.ExpirationDate)===null||_giftCardExtend$Expir===void 0?void 0:_giftCardExtend$Expir.split('/')[1],10):undefined;var giftCardExpirationMonth=giftCardExtend.ExpirationDate?parseInt((_giftCardExtend$Expir2=giftCardExtend.ExpirationDate)===null||_giftCardExtend$Expir2===void 0?void 0:_giftCardExtend$Expir2.split('/')[0],10):undefined;var creditCardTenderLinePromise=getGiftCardTenderLine(ctx,giftCardExtend.Id,_chargedAmount,Currency,tenderTypeId,giftCardPin,giftCardExpirationYear,giftCardExpirationMonth);getTenderLinePromises.push(creditCardTenderLinePromise);amountDue=roundNumber(amountDue-_chargedAmount);}return amountDue===0;});}if(checkoutState.customerAccountAmount>0){_chargedAmount2=roundNumber(Math.min(checkoutState.customerAccountAmount,amountDue));customerAccountTenderLinePromise=createCustomerAccountTenderLine(ctx,_chargedAmount2,Currency);getTenderLinePromises.push(customerAccountTenderLinePromise);amountDue=roundNumber(amountDue-_chargedAmount2);}if(!(amountDue>0)){_context2.next=20;break;}if(tokenizedPaymentCard){_context2.next=18;break;}throw new Error('Fail to placeOrder: no token found');case 18:creditCardTenderLinePromise=getCreditCardTenderLine(ctx,tokenizedPaymentCard,cardPrefix,amountDue,Currency,billingAddress);getTenderLinePromises.push(creditCardTenderLinePromise);case 20:if(!(getTenderLinePromises.length>0)){_context2.next=26;break;}_context2.next=23;return Promise.all(getTenderLinePromises)[\"catch\"](function(error){throw error;});case 23:cartTenderLines=_context2.sent;if(!(!cartTenderLines||!cartTenderLines.length)){_context2.next=26;break;}throw new Error('Fail to placeOrder: fail to get cart tender lines');case 26:_context2.next=28;return checkoutAsync({callerContext:ctx,bypassCache:'get'},cartState.cart.Id,guestCheckoutEmail,undefined,undefined,cartTenderLines||null,cartState.cart.Version)[\"catch\"](function(error){throw error;});case 28:salesOrder=_context2.sent;if(salesOrder){_context2.next=31;break;}throw new Error('Fail to placeOrder: fail to checkout');case 31:return _context2.abrupt(\"return\",salesOrder);case 32:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x9){return _ref2.apply(this,arguments);};})();","map":{"version":3,"sources":["modules/checkout/methods/checkout.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { getCheckoutState } from '@msdyn365-commerce/global-state';\nimport { checkoutAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport {\n    getTenderTypesAsync, resolveCardTypesAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport {\n    Address, CardType, CartTenderLine, RetailOperation, SalesOrder, TenderType, TokenizedPaymentCard\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nexport const OPERATIONS = {\n    PayCard: 201,\n    PayGiftCertificate: 214,\n    PayLoyalty: 207,\n    PayCustomerAccount: 202\n};\n\nconst getCardTypeId = async (ctx: IActionContext, cardPrefix: string = ''): Promise<string | undefined> => {\n    try {\n        const response = await resolveCardTypesAsync({ callerContext: ctx }, cardPrefix, CardType.Unknown);\n        if (response && response.length > 0) {\n            return response[0].TypeId;\n        }\n    } catch (error) {\n        ctx.telemetry.error('Call to resolveCardTypesAsync failed.', error);\n    }\n    return undefined;\n};\n\nconst findTenderIdTypeByOperationId = (tenderTypes: TenderType[], operationId: RetailOperation): string | undefined => {\n    const matchedTenderType = tenderTypes.find(tenderType => tenderType.OperationId === operationId);\n    if (matchedTenderType) {\n        return matchedTenderType.TenderTypeId;\n    }\n    return;\n};\n\nconst roundNumber = (value: number) => Number(value.toFixed(2));\n\nasync function getLoyaltyTenderLine(\n    ctx: IActionContext,\n    LoyaltyCardId: string,\n    Amount: number = 0,\n    Currency: string = 'USD'\n): Promise<CartTenderLine> {\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    if (!tenderTypes) {\n        throw new Error('Fail to get gift card tender line');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayLoyalty);\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        LoyaltyCardId\n    };\n}\n\nasync function getGiftCardTenderLine(\n    ctx: IActionContext,\n    GiftCardId: string = '',\n    Amount: number = 0,\n    Currency: string = 'USD',\n    tenderTypeId?: string,\n    giftCardPin?: string,\n    giftCardExpirationYear?: number,\n    giftCardExpirationMonth?: number\n): Promise<CartTenderLine> {\n    let TenderTypeId = tenderTypeId;\n\n    if (!TenderTypeId) {\n        const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n            throw error;\n        });\n        if (!tenderTypes) {\n            throw new Error('Fail to get gift card tender line');\n        }\n        TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayGiftCertificate);\n    }\n\n    const GiftCardPin = giftCardPin;\n    const GiftCardExpirationYear = giftCardExpirationYear;\n    const GiftCardExpirationMonth = giftCardExpirationMonth;\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        GiftCardId,\n        GiftCardPin,\n        GiftCardExpirationYear,\n        GiftCardExpirationMonth\n    };\n}\n\nasync function getCreditCardTenderLine(\n    ctx: IActionContext,\n    tokenizedPaymentCard: TokenizedPaymentCard,\n    cardPrefix: string = '',\n    Amount: number = 0,\n    Currency: string = 'USD',\n    billingAddress?: Address\n): Promise<CartTenderLine> {\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    let cartTypeId = tokenizedPaymentCard.CardTypeId;\n\n    if (!cartTypeId) {\n        cartTypeId = await getCardTypeId(ctx, cardPrefix);\n    }\n\n    if (!tenderTypes) {\n        throw new Error('Fail to get card tender type');\n    }\n\n    if (!cartTypeId) {\n        throw new Error('Fail to get card type id');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayCard);\n    const cardTenderLine: CartTenderLine = {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        Amount,\n        TenderTypeId,\n        CardTypeId: cartTypeId\n    };\n    cardTenderLine.TokenizedPaymentCard = {\n        ...tokenizedPaymentCard,\n        CardTypeId: cartTypeId,\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.TokenizedPaymentCard',\n        House: tokenizedPaymentCard.House || 'N/A',\n        ...(tokenizedPaymentCard.CardTokenInfo && {\n            CardTokenInfo: {\n                ...tokenizedPaymentCard.CardTokenInfo,\n                // @ts-ignore\n                // tslint:disable-next-line:prefer-type-cast\n                '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CardTokenInfo'\n            }\n        }),\n        ...(billingAddress && {\n            Phone: billingAddress.Phone,\n            Country: billingAddress.ThreeLetterISORegionName,\n            Address1: billingAddress.Street,\n            City: billingAddress.City,\n            State: billingAddress.State,\n            Zip: billingAddress.ZipCode\n        })\n    };\n\n    return cardTenderLine;\n}\n\nasync function createCustomerAccountTenderLine(\n    ctx: IActionContext,\n    Amount: number,\n    Currency: string = 'USD',\n): Promise<CartTenderLine> {\n    const CustomerId = null;\n    if (!ctx.requestContext.user.isAuthenticated) {\n       ctx.telemetry.error('A customer id is required to pay with customer account');\n    }\n\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    if (!tenderTypes) {\n        ctx.telemetry.error('No tender types found for this channel');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayCustomerAccount);\n    if (!TenderTypeId) {\n        ctx.telemetry.error('No customer account tender type');\n    }\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        // @ts-ignore\n        CustomerId\n    };\n}\n\n// tslint:disable-next-line:max-func-body-length\nexport default async (ctx: IActionContext): Promise<SalesOrder> => {\n    const checkoutState = await getCheckoutState(ctx).catch(error => {\n        throw error;\n    });\n\n    const cartState = checkoutState.checkoutCart;\n\n    const channelConfiguration = ctx.requestContext.channel;\n\n    if (!cartState || !Object.keys(cartState).length || !checkoutState || !channelConfiguration) {\n        throw new Error('Fail to placeOrder');\n    }\n\n    const {\n        giftCardExtends,\n        tokenizedPaymentCard,\n        cardPrefix,\n        guestCheckoutEmail,\n        billingAddress,\n        loyaltyAmount\n    } = checkoutState;\n    const { Currency } = channelConfiguration;\n\n    let amountDue = cartState.cart.AmountDue || 0;\n    let cartTenderLines;\n    const getTenderLinePromises = [];\n    const loyaltyCardNumber = cartState.cart.LoyaltyCardId;\n\n    // Pay by loyalty first\n    if (loyaltyAmount && loyaltyCardNumber) {\n        const chargedAmount = roundNumber(Math.min(loyaltyAmount, amountDue));\n        const loyaltyTenderLinePromise = getLoyaltyTenderLine(ctx, loyaltyCardNumber, chargedAmount, Currency);\n        getTenderLinePromises.push(loyaltyTenderLinePromise);\n        amountDue = roundNumber(amountDue - chargedAmount);\n    }\n\n    // Then by gift card\n    if (giftCardExtends && giftCardExtends.length) {\n        giftCardExtends.some(giftCardExtend => {\n            if (giftCardExtend.Balance && amountDue > 0) {\n                const chargedAmount = roundNumber(Math.min(giftCardExtend.Balance, amountDue));\n                const tenderTypeId = giftCardExtend.TenderTypeId;\n                const giftCardPin = giftCardExtend.Pin;\n                const giftCardExpirationYear = giftCardExtend.ExpirationDate ? parseInt(giftCardExtend.ExpirationDate?.split('/')[1], 10) : undefined;\n                const giftCardExpirationMonth = giftCardExtend.ExpirationDate ? parseInt(giftCardExtend.ExpirationDate?.split('/')[0], 10) : undefined;\n                const creditCardTenderLinePromise = getGiftCardTenderLine(ctx, giftCardExtend.Id, chargedAmount, Currency, tenderTypeId, giftCardPin, giftCardExpirationYear, giftCardExpirationMonth);\n                getTenderLinePromises.push(creditCardTenderLinePromise);\n                amountDue = roundNumber(amountDue - chargedAmount);\n            }\n            return amountDue === 0;\n        });\n    }\n\n    // Then by customer account\n    if (checkoutState.customerAccountAmount > 0) {\n            const chargedAmount = roundNumber(Math.min(checkoutState.customerAccountAmount, amountDue));\n            const customerAccountTenderLinePromise = createCustomerAccountTenderLine(ctx, chargedAmount, Currency);\n            getTenderLinePromises.push(customerAccountTenderLinePromise);\n            amountDue = roundNumber(amountDue - chargedAmount);\n    }\n\n    // Pay the rest by credit card\n    if (amountDue > 0) {\n        if (!tokenizedPaymentCard) {\n            throw new Error('Fail to placeOrder: no token found');\n        }\n        const creditCardTenderLinePromise = getCreditCardTenderLine(\n            ctx,\n            tokenizedPaymentCard,\n            cardPrefix,\n            amountDue,\n            Currency,\n            billingAddress\n        );\n        getTenderLinePromises.push(creditCardTenderLinePromise);\n    }\n\n    if (getTenderLinePromises.length > 0) {\n        // When payment methods is required\n        cartTenderLines = await Promise.all(getTenderLinePromises).catch(error => {\n            throw error;\n        });\n\n        if (!cartTenderLines || !cartTenderLines.length) {\n            throw new Error('Fail to placeOrder: fail to get cart tender lines');\n        }\n    }\n\n    // Proceed checkout\n    const salesOrder = await checkoutAsync(\n        { callerContext: ctx, bypassCache: 'get' },\n        cartState.cart.Id,\n        guestCheckoutEmail,\n        // @ts-ignore fields tokenizedPaymentCard and receiptNumberSequence are optional\n        undefined,\n        undefined,\n        cartTenderLines || null,\n        cartState.cart.Version\n        // @ts-ignore\n    ).catch(error => {\n        throw error;\n    });\n\n    if (!salesOrder) {\n        throw new Error('Fail to placeOrder: fail to checkout');\n    }\n\n    return salesOrder;\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}