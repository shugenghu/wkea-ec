{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-any\n/**\r\n * State of an experiment\r\n */export var EXPERIMENTATION_CACHE_TYPE='EXPERIMENTATION';export var EXPERIMENTATION_DATAFILE_CACHE_TYPE='EXPERIMENTATIONDATAFILE';export var State;(function(State){State[\"Draft\"]=\"Draft\";State[\"Active\"]=\"Active\";State[\"Running\"]=\"Running\";State[\"Paused\"]=\"Paused\";State[\"Archived\"]=\"Archived\";})(State||(State={}));export var RefreshType;(function(RefreshType){RefreshType[\"DataFile\"]=\"DataFile\";RefreshType[\"Experiments\"]=\"Experiments\";})(RefreshType||(RefreshType={}));","map":{"version":3,"sources":["../../../src/contract/IExperimentation.ts"],"names":[],"mappings":"AAAA;;;AAGG,G,CAKH;AACA;;AAEG,GAEH,MAAO,IAAM,CAAA,0BAA0B,CAAG,iBAAnC,CACP,MAAO,IAAM,CAAA,mCAAmC,CAAG,yBAA5C,CAEP,MAAA,IAAY,CAAA,KAAZ,CAAA,CAAA,SAAY,KAAZ,CAAiB,CACb,KAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CACA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CACA,KAAA,CAAA,SAAA,CAAA,CAAA,SAAA,CACA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CACA,KAAA,CAAA,UAAA,CAAA,CAAA,UAAA,CACH,CAND,EAAY,KAAK,GAAL,KAAK,CAAA,EAAA,CAAjB,EAQA,MAAA,IAAY,CAAA,WAAZ,CAAA,CAAA,SAAY,WAAZ,CAAuB,CACnB,WAAA,CAAA,UAAA,CAAA,CAAA,UAAA,CACA,WAAA,CAAA,aAAA,CAAA,CAAA,aAAA,CACH,CAHD,EAAY,WAAW,GAAX,WAAW,CAAA,EAAA,CAAvB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IDictionary, IExpLogger, TelemetryEvent, TelemetryEventContent } from '@msdyn365-commerce/telemetry-internal';\nimport { ISecretManager } from '../interfaces';\n\n// tslint:disable:no-any\n/**\n * State of an experiment\n */\n\nexport const EXPERIMENTATION_CACHE_TYPE = 'EXPERIMENTATION';\nexport const EXPERIMENTATION_DATAFILE_CACHE_TYPE = 'EXPERIMENTATIONDATAFILE';\n\nexport enum State {\n    Draft = 'Draft',\n    Active = 'Active',\n    Running = 'Running',\n    Paused = 'Paused',\n    Archived = 'Archived'\n}\n\nexport enum RefreshType {\n    DataFile = 'DataFile',\n    Experiments = 'Experiments'\n}\n\n/**\n * refresh options.\n * @param refreshFunction the call back function that refresh will trigger.\n * @param parameters the parameters for the refresh function. If no parameters need, pass an empty array.\n */\nexport interface IExperimentRefreshOptions {\n    refreshType: RefreshType;\n    parameters: any[];\n}\n\nexport interface IActiveExperiments {\n    userId: string;\n    activeExperiments: IVariants[];\n    moduleIdToExperimentIdMap?: IDictionary<string>;\n}\n\n/**\n * Variations on each experiment\n */\nexport interface IVariations {\n    // friendly name of a variation\n    // required\n    friendlyName: string;\n\n    // unique id or key for the variation\n    // required\n    id: string;\n\n    // variation status\n    // required. Can be defaulted to active\n    status: State;\n\n    // variation weight\n    // Optional\n    weight?: string;\n}\n\n/**\n * Experiments\n */\nexport interface IExperiments {\n    // Friendly name\n    // Required\n    friendlyName: string;\n\n    // unique id or key of the experiment\n    // required\n    id: string;\n\n    // variation status\n    // required\n    status: State;\n\n    // array of variations\n    // required\n    variations: IVariations[];\n\n    // Created Date\n    createdDate?: string;\n\n    // Last modified date\n    lastModifiedDate?: string;\n\n    // Last modified by\n    lastModifiedBy?: string;\n\n    // Description\n    description?: string;\n\n    // Type\n    type?: string;\n\n    // Link url\n    link?: string;\n\n    resultLink?: string;\n}\n\n/**\n * Experiment results to display connector name and experiments[] related to the connector\n */\nexport interface IExperimentsResult {\n    name?: string;\n    experiments?: IExperiments[];\n}\n\n/**\n * Experiments\n */\n\nexport interface IVariants {\n    // Unique Id or key of the variant\n    // Required\n    variantId: string;\n\n    // unique id or key of the experiment\n    // required\n    experimentId: string;\n\n    // unique id of the module that this experiment is associated with\n    moduleId?: string;\n}\n\nexport interface IExperimentationProvider {\n    /**\n     * Allows the experimentation connector to do any startup related tasks\n     * using the config provided by the partner.\n     *\n     * This method is only called once during server startup.\n     * @param config The config provided by the partner in connector settings.\n     * @param secretManager Class used to retrieve secrets stored in retail server key vault\n     */\n    initialize(config: any, secretManager?: ISecretManager): Promise<boolean>;\n\n    /**\n     * Returns the configuration that should be passed to the experimentation connector\n     * when it is initialized client-side\n     */\n    getConfigForClientSideInit(): Promise<any>;\n\n    /**\n     * Initailizes the experimentation provider on the browser (client-side) so that\n     * it may activate experiments for a user.\n     *\n     * @param config The config that is required to initialize the experimentation connector\n     * client-side. The result of getConfigForClientSideInit() is passed into this method\n     */\n    initializeClientSide(config: any): boolean;\n\n    /**\n     * Returns a list of all the experiments currently configured whether active or not.\n     * This list will be cached and periodically refreshed.\n     * @param retailServerBaseUrl The retail server base URL.\n     * @param connectorName The optimizely conector name.\n     * @param page Optional argument that specifies the page to return.\n     * @param items Optional argument that specifies the maximum number of objects to return per request.\n     */\n    getExperiments(retailServerBaseUrl: string, connectorName: string, page?: string, items?: string): Promise<IExperimentsResult>;\n\n    /**\n     * Returns a list of experiments and variants a user will be a part of based\n     * off the userId. Optional attributes can provide the connector with additional criteria\n     * to determine which experiments a user should be a part of.\n     *\n     * @param userId userId unique to a user if signed in or unique to a session if user is anonymous.\n     * userId will be generated from hash if user is signed-in to deterministically generate sanatized userIds.\n     * @param attributes Optional user related attributes\n     */\n    getVariantsForUser(userId: string, attributes?: { [index: string]: string }): IVariants[];\n\n    /**\n     * Activates experiment(s) a user is currently being served. This call will be made\n     * client-side after the connector has been initialized client-side\n     *\n     * @param userId userId unique to a user if signed in or unique to a session if user is anonymous.\n     * userId will be generated from hash if user is signed-in to deterministically generate sanatized userIds.\n     * @param experiments The experiments the user is participating in.\n     * @param attributes Optional user related attributes\n     */\n    activateExperiment(userId: string, experiments: IVariants[], attributes?: { [index: string]: string }): boolean;\n}\n\nexport interface IExperimentationListener {\n    /**\n     * Initailizes the experimentation listener on the browser (client-side) so that\n     * it may keep track of any conversion events related to the current experiements.\n     *\n     * @param config The config that is required to initialize the experimentation connector\n     * client-side. The result of getConfigForClientSideInit() is passed into this method\n     * @param userId The current user being served the experiment and tracked.\n     */\n    initializeClientSide(config: any, userId: string): boolean;\n\n    /**\n     * Tracks a successful user conversion event.\n     *\n     * @param eventType The event type that occured\n     * @param payload Any additional tags or data related to the conversion event\n     */\n    trackEvent(eventType: TelemetryEvent, payload: TelemetryEventContent): void;\n}\n\nexport interface IExperimentationConnector {\n    name: string;\n    provider: IExperimentationProvider;\n    listener?: IExpLogger;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}