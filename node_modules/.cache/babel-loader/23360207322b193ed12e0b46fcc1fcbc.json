{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{buildCacheKey}from'@msdyn365-commerce-modules/retail-actions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCountryRegionsAction,GetCountryRegionsInput}from'./get-country-regions';import{getStateProvinceAction,GetStateProvincesInput}from'./get-state-provinces';export var GetCountryStateInput=function GetCountryStateInput(locale,apiSettings){var _this=this;_classCallCheck(this,GetCountryStateInput);this.getCacheKey=function(){return buildCacheKey(\"CountryStateInfo-\".concat(_this.locale),_this.apiSettings);};this.getCacheObjectType=function(){return'StateProvinceInfo';};this.dataCacheType=function(){return'request';};this.locale=locale;this.apiSettings=apiSettings;};var createInput=function createInput(inputData){var _inputData$requestCon=inputData.requestContext,locale=_inputData$requestCon.locale,apiSettings=_inputData$requestCon.apiSettings;if(!(inputData.requestContext&&locale)){throw new Error('Unable to create country regions input.  Locale is not provided.');}return new GetCountryStateInput(locale,apiSettings);};export function getCountryStateAction(_x,_x2){return _getCountryStateAction.apply(this,arguments);}function _getCountryStateAction(){_getCountryStateAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){var countryInput,countryRegionsInfo,channelConfiguration,marketISOCode,currentCountryRegion,countryRegionId,stateInput;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:countryInput=new GetCountryRegionsInput(input.locale,input.apiSettings);_context.next=3;return getCountryRegionsAction(countryInput,ctx);case 3:countryRegionsInfo=_context.sent;channelConfiguration=ctx.requestContext.channel;marketISOCode=channelConfiguration&&channelConfiguration.ChannelCountryRegionISOCode||'US';currentCountryRegion=countryRegionsInfo.find(function(countryRegion){return(countryRegion.ISOCode||'')===marketISOCode;});countryRegionId=currentCountryRegion&&currentCountryRegion.CountryRegionId||'USA';stateInput=new GetStateProvincesInput(countryRegionId,input.apiSettings);return _context.abrupt(\"return\",getStateProvinceAction(stateInput,ctx));case 10:case\"end\":return _context.stop();}}},_callee);}));return _getCountryStateAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/address/get-country-state',action:getCountryStateAction,input:createInput});","map":{"version":3,"sources":["actions/get-country-state.ts"],"names":[],"mappings":"8MAAA,OAAS,aAAT,KAA8B,2CAA9B,CACA,OACe,0BADf,KAGO,yBAHP,CAQA,OAAS,uBAAT,CAAkC,sBAAlC,KAAgE,uBAAhE,CACA,OAAS,sBAAT,CAAiC,sBAAjC,KAA+D,uBAA/D,CAKA,UAAa,CAAA,oBAAb,CAII,8BAAY,MAAZ,CAA4B,WAA5B,CAA6D,2DAKtD,KAAA,WAAA,CAAc,iBAAM,CAAA,aAAa,4BAAqB,KAAI,CAAC,MAA1B,EAAoC,KAAI,CAAC,WAAzC,CAAnB,EAAd,CACA,KAAA,kBAAA,CAAqB,iBAAM,mBAAN,EAArB,CACA,KAAA,aAAA,CAAgB,iBAAiB,SAAjB,EAAhB,CANH,KAAK,MAAL,CAAc,MAAd,CACA,KAAK,WAAL,CAAmB,WAAnB,CACH,CAPL,CAiBA,GAAM,CAAA,WAAW,CAAG,QAAd,CAAA,WAAc,CAAC,SAAD,CAA0E,2BAC1D,SAAS,CAAC,cADgD,CAClF,MADkF,uBAClF,MADkF,CAC1E,WAD0E,uBAC1E,WAD0E,CAE1F,GAAI,EAAE,SAAS,CAAC,cAAV,EAA4B,MAA9B,CAAJ,CAA2C,CACvC,KAAM,IAAI,CAAA,KAAJ,CAAU,kEAAV,CAAN,CACH,CACD,MAAO,IAAI,CAAA,oBAAJ,CAAyB,MAAzB,CAAiC,WAAjC,CAAP,CACH,CAND,CAQA,eAAsB,CAAA,qBAAtB,8D,iHAAO,iBAAqC,KAArC,CAAkE,GAAlE,yOACG,YADH,CACkB,GAAI,CAAA,sBAAJ,CAA2B,KAAK,CAAC,MAAjC,CAAyC,KAAK,CAAC,WAA/C,CADlB,uBAE8B,CAAA,uBAAuB,CAAC,YAAD,CAAe,GAAf,CAFrD,QAEG,kBAFH,eAIG,oBAJH,CAI0B,GAAG,CAAC,cAAJ,CAAmB,OAJ7C,CAMG,aANH,CAMmB,oBAAoB,EAAI,oBAAoB,CAAC,2BAA7C,EAA4E,IAN/F,CAOG,oBAPH,CAO0B,kBAAkB,CAAC,IAAnB,CAAwB,SAAA,aAAa,QAAI,CAAC,aAAa,CAAC,OAAd,EAAyB,EAA1B,IAAkC,aAAtC,EAArC,CAP1B,CAQG,eARH,CAQsB,oBAAoB,EAAI,oBAAoB,CAAC,eAA9C,EAAkE,KARvF,CAUG,UAVH,CAUgB,GAAI,CAAA,sBAAJ,CAA2B,eAA3B,CAA4C,KAAK,CAAC,WAAlD,CAVhB,iCAWI,sBAAsB,CAAC,UAAD,CAAa,GAAb,CAX1B,yD,wDAcP,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,sDADkC,CAEtC,MAAM,CAAgC,qBAFA,CAGtC,KAAK,CAAE,WAH+B,CAAD,CAAzC","sourcesContent":["import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny,\n    ICommerceApiSettings, ICreateActionContext, IGeneric\n} from '@msdyn365-commerce/core';\nimport {\n    CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getCountryRegionsAction, GetCountryRegionsInput } from './get-country-regions';\nimport { getStateProvinceAction, GetStateProvincesInput } from './get-state-provinces';\n\n/**\n * Input class for get country regions data action\n */\nexport class GetCountryStateInput implements IActionInput {\n    public locale: string;\n    public apiSettings: ICommerceApiSettings;\n\n    constructor(locale: string, apiSettings: ICommerceApiSettings) {\n        this.locale = locale;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`CountryStateInfo-${this.locale}`, this.apiSettings);\n    public getCacheObjectType = () => 'StateProvinceInfo';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetCountryStateInput => {\n    const { locale, apiSettings } = inputData.requestContext;\n    if (!(inputData.requestContext && locale)) {\n        throw new Error('Unable to create country regions input.  Locale is not provided.');\n    }\n    return new GetCountryStateInput(locale, apiSettings);\n};\n\nexport async function getCountryStateAction(input: GetCountryStateInput, ctx: IActionContext): Promise<StateProvinceInfo[]> {\n    const countryInput = new GetCountryRegionsInput(input.locale, input.apiSettings);\n    const countryRegionsInfo = await getCountryRegionsAction(countryInput, ctx);\n\n    const channelConfiguration = ctx.requestContext.channel;\n\n    const marketISOCode = channelConfiguration && channelConfiguration.ChannelCountryRegionISOCode || 'US';\n    const currentCountryRegion = countryRegionsInfo.find(countryRegion => (countryRegion.ISOCode || '') === marketISOCode);\n    const countryRegionId = (currentCountryRegion && currentCountryRegion.CountryRegionId) || 'USA';\n\n    const stateInput = new GetStateProvincesInput(countryRegionId, input.apiSettings);\n    return getStateProvinceAction(stateInput, ctx);\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/address/get-country-state',\n    action: <IAction<CountryRegionInfo[]>>getCountryStateAction,\n    input: createInput\n});"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}