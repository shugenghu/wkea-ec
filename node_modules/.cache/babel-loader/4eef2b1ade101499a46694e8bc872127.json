{"ast":null,"code":"import{getParameterizeFeatureFlags,getUrlSync}from'@msdyn365-commerce/core';import{parameterize}from'./parameterize';/**\r\n * Builds slugs for category\r\n */export function getCategorySlug(category,categoryMap,parameterizeFeatureFlags){if(!category||!category.Name){// invalid category\nreturn'';}const categoryName=parameterize(category.Name,undefined,parameterizeFeatureFlags,category.NeutralizedName);if(!category.ParentCategory||category.ParentCategory===0){// base case assign url\ncategory.Slug=category.Slug||\"/\".concat(categoryName);}else if(category.ParentCategory){category.Slug=category.Slug||\"\".concat(getCategorySlug(categoryMap[category.ParentCategory],categoryMap,parameterizeFeatureFlags),\"/\").concat(categoryName);}return category.Slug||'';}/**\r\n * Gets Url for category hierarchy. Returns string and adds url to Url property of category hierarchy\r\n * @param category Category to generate URL for\r\n * @param categoryMap Dictionary of all categories\r\n */export function getCategoryUrl(category,ctx,categoryMap){if(!category.Url&&ctx&&categoryMap){if(!category.Slug){const parameterizeFeatureFlags=ctx.requestContext?getParameterizeFeatureFlags(ctx):{};category.Slug=getCategorySlug(category,categoryMap,parameterizeFeatureFlags);}category.Url=getUrlSync('category',ctx,{category});}return category.Url;}","map":{"version":3,"sources":["../../../../src/utilities/Url-builder/category-url-builder.ts"],"names":[],"mappings":"AACA,OAAS,2BAAT,CAAsC,UAAtC,KAAmG,yBAAnG,CACA,OAAS,YAAT,KAA6B,gBAA7B,CAMA;;AAEG,GACH,MAAM,SAAU,CAAA,eAAV,CAA0B,QAA1B,CAAuD,WAAvD,CAAkF,wBAAlF,CAAqI,CACvI,GAAI,CAAC,QAAD,EAAa,CAAC,QAAQ,CAAC,IAA3B,CAAiC,CAC7B;AACA,MAAO,EAAP,CACH,CACD,KAAM,CAAA,YAAY,CAAG,YAAY,CAAC,QAAQ,CAAC,IAAV,CAAgB,SAAhB,CAA2B,wBAA3B,CAAqD,QAAQ,CAAC,eAA9D,CAAjC,CACA,GAAI,CAAC,QAAQ,CAAC,cAAV,EAA4B,QAAQ,CAAC,cAAT,GAA4B,CAA5D,CAA+D,CAC3D;AACA,QAAQ,CAAC,IAAT,CAAgB,QAAQ,CAAC,IAAT,aAAqB,YAArB,CAAhB,CACH,CAHD,IAGO,IAAI,QAAQ,CAAC,cAAb,CAA6B,CAChC,QAAQ,CAAC,IAAT,CAAgB,QAAQ,CAAC,IAAT,YAAoB,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAV,CAAZ,CAAuC,WAAvC,CAAoD,wBAApD,CAAnC,aAAoH,YAApH,CAAhB,CACH,CAED,MAAO,CAAA,QAAQ,CAAC,IAAT,EAAiB,EAAxB,CACH,CAED;;;;AAIG,GACH,MAAM,SAAU,CAAA,cAAV,CAAyB,QAAzB,CAAsD,GAAtD,CAA4E,WAA5E,CAAsG,CACxG,GAAI,CAAC,QAAQ,CAAC,GAAV,EAAiB,GAAjB,EAAwB,WAA5B,CAAyC,CACrC,GAAI,CAAC,QAAQ,CAAC,IAAd,CAAoB,CAChB,KAAM,CAAA,wBAAwB,CAA8B,GAAG,CAAC,cAAJ,CAAoB,2BAA2B,CAAC,GAAD,CAA/C,CAAqD,EAAjH,CACA,QAAQ,CAAC,IAAT,CAAgB,eAAe,CAAC,QAAD,CAAW,WAAX,CAAwB,wBAAxB,CAA/B,CACH,CACD,QAAQ,CAAC,GAAT,CAAe,UAAU,CAAC,UAAD,CAAa,GAAb,CAAkB,CAAE,QAAF,CAAlB,CAAzB,CACH,CACD,MAAO,CAAA,QAAQ,CAAC,GAAhB,CACH","sourcesContent":["import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';\nimport { getParameterizeFeatureFlags, getUrlSync, IActionContext, IParameterizeFeatureFlags } from '@msdyn365-commerce/core';\nimport { parameterize } from './parameterize';\n\ninterface ICategoryMap {\n    [RecordId: number]: CategoryHierarchy;\n}\n\n/**\n * Builds slugs for category\n */\nexport function getCategorySlug(category: CategoryHierarchy, categoryMap: ICategoryMap, parameterizeFeatureFlags?:IParameterizeFeatureFlags): string {\n    if (!category || !category.Name) {\n        // invalid category\n        return '';\n    }\n    const categoryName = parameterize(category.Name, undefined, parameterizeFeatureFlags, category.NeutralizedName);\n    if (!category.ParentCategory || category.ParentCategory === 0) {\n        // base case assign url\n        category.Slug = category.Slug || `/${categoryName}`;\n    } else if (category.ParentCategory) {\n        category.Slug = category.Slug || `${getCategorySlug(categoryMap[category.ParentCategory], categoryMap, parameterizeFeatureFlags)}/${categoryName}`;\n    }\n\n    return category.Slug || '';\n}\n\n/**\n * Gets Url for category hierarchy. Returns string and adds url to Url property of category hierarchy\n * @param category Category to generate URL for\n * @param categoryMap Dictionary of all categories\n */\nexport function getCategoryUrl(category: CategoryHierarchy, ctx?: IActionContext, categoryMap?: ICategoryMap): string | undefined {\n    if (!category.Url && ctx && categoryMap) {\n        if (!category.Slug) {\n            const parameterizeFeatureFlags: IParameterizeFeatureFlags = ctx.requestContext? getParameterizeFeatureFlags(ctx):{};\n            category.Slug = getCategorySlug(category, categoryMap, parameterizeFeatureFlags);\n        }\n        category.Url = getUrlSync('category', ctx, { category });\n    }\n    return category.Url;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}