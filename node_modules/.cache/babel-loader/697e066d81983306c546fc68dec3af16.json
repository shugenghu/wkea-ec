{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.string.includes.js\";import{getUrlSync}from'@msdyn365-commerce/core';import checkout from'./checkout';import emptyActiveCart from'./empty-active-cart';export default(async(ctx,checkoutState,orderedProducts,redirect)=>{let salesOrder;try{salesOrder=await checkout(ctx);}catch(error){throw error;}try{await emptyActiveCart(ctx);}catch(error){throw error;}if(redirect){const orderConfirmationUrl=getUrlSync('orderConfirmation',ctx)||'';if(!orderConfirmationUrl){throw new Error('Error: No orderConfirmationUrl');}const separator=orderConfirmationUrl.includes('?')?'&':'?';const url=\"\".concat(orderConfirmationUrl).concat(separator,\"transactionId=\").concat(salesOrder.Id);window.location.assign(url);}else{if(checkoutState){const result=await checkoutState.updateSalesOrder({newSalesOrder:salesOrder,newOrderedProducts:orderedProducts||[]});if(result.status==='FAILED'){throw new Error('Error: Updating error state failed');}}else{throw new Error('Error: No checkout state');}}});","map":{"version":3,"sources":["modules/checkout/methods/place-order.ts"],"names":[],"mappings":"oFAIA,OAAS,UAAT,KAA2C,yBAA3C,CAGA,MAAO,CAAA,QAAP,KAAqB,YAArB,CACA,MAAO,CAAA,eAAP,KAA4B,qBAA5B,CAEA,eAAe,MAAO,GAAP,CAA4B,aAA5B,CAAuE,eAAvE,CAAqH,QAArH,GAA0I,CACrJ,GAAI,CAAA,UAAJ,CAGA,GAAI,CACA,UAAU,CAAG,KAAM,CAAA,QAAQ,CAAC,GAAD,CAA3B,CACH,CAAC,MAAO,KAAP,CAAc,CACZ,KAAM,CAAA,KAAN,CACH,CAGD,GAAI,CACA,KAAM,CAAA,eAAe,CAAC,GAAD,CAArB,CACH,CAAC,MAAO,KAAP,CAAc,CACZ,KAAM,CAAA,KAAN,CACH,CAED,GAAI,QAAJ,CAAc,CAEV,KAAM,CAAA,oBAAoB,CAAG,UAAU,CAAC,mBAAD,CAAsB,GAAtB,CAAV,EAAwC,EAArE,CACA,GAAI,CAAC,oBAAL,CAA2B,CACvB,KAAM,IAAI,CAAA,KAAJ,CAAU,gCAAV,CAAN,CACH,CAED,KAAM,CAAA,SAAS,CAAG,oBAAoB,CAAC,QAArB,CAA8B,GAA9B,EAAqC,GAArC,CAA2C,GAA7D,CACA,KAAM,CAAA,GAAG,WAAM,oBAAN,SAA6B,SAA7B,0BAAuD,UAAU,CAAC,EAAlE,CAAT,CACA,MAAM,CAAC,QAAP,CAAgB,MAAhB,CAAuB,GAAvB,EACH,CAVD,IAUO,CACH,GAAI,aAAJ,CAAmB,CACf,KAAM,CAAA,MAAM,CAAG,KAAM,CAAA,aAAa,CAAC,gBAAd,CAA+B,CAAE,aAAa,CAAE,UAAjB,CAA6B,kBAAkB,CAAE,eAAe,EAAI,EAApE,CAA/B,CAArB,CAEA,GAAI,MAAM,CAAC,MAAP,GAAkB,QAAtB,CAAgC,CAC5B,KAAM,IAAI,CAAA,KAAJ,CAAU,oCAAV,CAAN,CACH,CACJ,CAND,IAMO,CACH,KAAM,IAAI,CAAA,KAAJ,CAAU,0BAAV,CAAN,CACH,CACJ,CACJ,CAtCD","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getUrlSync, IActionContext } from '@msdyn365-commerce/core';\nimport { ICheckoutState } from '@msdyn365-commerce/global-state';\nimport { SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport checkout from './checkout';\nimport emptyActiveCart from './empty-active-cart';\n\nexport default async (ctx: IActionContext, checkoutState: ICheckoutState | undefined, orderedProducts: SimpleProduct[] | undefined, redirect: boolean) => {\n    let salesOrder: SalesOrder;\n\n    // Proceed checkout\n    try {\n        salesOrder = await checkout(ctx);\n    } catch (error) {\n        throw error;\n    }\n\n    // Remove purchased items from the active cart\n    try {\n        await emptyActiveCart(ctx);\n    } catch (error) {\n        throw error;\n    }\n\n    if (redirect) {\n        // Redirect to the order confirmation page\n        const orderConfirmationUrl = getUrlSync('orderConfirmation', ctx) || '';\n        if (!orderConfirmationUrl) {\n            throw new Error('Error: No orderConfirmationUrl');\n        }\n\n        const separator = orderConfirmationUrl.includes('?') ? '&' : '?';\n        const url = `${orderConfirmationUrl}${separator}transactionId=${salesOrder.Id}`;\n        window.location.assign(url);\n    } else {\n        if (checkoutState) {\n            const result = await checkoutState.updateSalesOrder({ newSalesOrder: salesOrder, newOrderedProducts: orderedProducts || [] });\n\n            if (result.status === 'FAILED') {\n                throw new Error('Error: Updating error state failed');\n            }\n        } else {\n            throw new Error('Error: No checkout state');\n        }\n    }\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}