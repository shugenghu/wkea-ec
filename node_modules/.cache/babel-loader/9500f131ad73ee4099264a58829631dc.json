{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */'use strict';/**\r\n * Call all the functions on the queue with optional data and clears the queue.\r\n *\r\n * @param {Function[]} functionQueue The queue of functions to be called.\r\n * @param {any} callerContext The caller context for the callback.\r\n * @param {any} [data] Optional parameter to be passed as the function argument.\r\n */import\"core-js/modules/web.dom-collections.iterator.js\";export function callFunctions(functionQueue,callerContext,data){if(functionQueue===undefined||functionQueue===null||functionQueue.length===0){return;}for(const func of functionQueue){func.call(callerContext,data);}// clears the queue after calling all callbacks\nfunctionQueue=[];}/**\r\n * Queues a function to be called later.\r\n *\r\n * @param {Function[]} functionQueue The queue of functions to be called.\r\n * @param {Function} callback The function to be queued.\r\n */export function queueFunction(functionQueue,callback){if(!(callback===undefined||callback===null)){functionQueue.push(callback);}}/**\r\n * Help execute async calls in a sequence.\r\n *\r\n * @param {any[]} array The elements array.\r\n * @param {(entity, () => void) => void)} iterator Async iterator callback.\r\n * @param {any} [then] Success callback.\r\n */export function forEachAsync(array,iterator,then){function next(i){if(i<array.length){iterator(array[i],()=>{next(i+1);},i);}else{if(then){then();}}}next(0);}","map":{"version":3,"sources":["../../src/extensions/FunctionQueueHelper.ts"],"names":[],"mappings":"AAAA;;;AAGG,GAEH,aAEA;;;;;;AAMG,G,wDACH,MAAM,SAAU,CAAA,aAAV,CAAwB,aAAxB,CAAmD,aAAnD,CAAuE,IAAvE,CAAiF,CACnF,GAAI,aAAa,GAAK,SAAlB,EAA+B,aAAa,GAAK,IAAjD,EAAyD,aAAa,CAAC,MAAd,GAAyB,CAAtF,CAAyF,CACrF,OACH,CAED,IAAK,KAAM,CAAA,IAAX,GAAmB,CAAA,aAAnB,CAAkC,CAC9B,IAAI,CAAC,IAAL,CAAU,aAAV,CAAyB,IAAzB,EACH,CAED;AACA,aAAa,CAAG,EAAhB,CACH,CAED;;;;;AAKG,GACH,MAAM,SAAU,CAAA,aAAV,CAAwB,aAAxB,CAAmD,QAAnD,CAAqE,CACvE,GAAI,EAAE,QAAQ,GAAK,SAAb,EAA0B,QAAQ,GAAK,IAAzC,CAAJ,CAAoD,CAChD,aAAa,CAAC,IAAd,CAAmB,QAAnB,EACH,CACJ,CAED;;;;;;AAMG,GACH,MAAM,SAAU,CAAA,YAAV,CAAuB,KAAvB,CAAqC,QAArC,CAAoD,IAApD,CAA8D,CAChE,QAAS,CAAA,IAAT,CAAc,CAAd,CAAoB,CAChB,GAAI,CAAC,CAAG,KAAK,CAAC,MAAd,CAAsB,CAClB,QAAQ,CACJ,KAAK,CAAC,CAAD,CADD,CAEJ,IAAK,CACD,IAAI,CAAC,CAAC,CAAG,CAAL,CAAJ,CACH,CAJG,CAKJ,CALI,CAAR,CAOH,CARD,IAQO,CACH,GAAI,IAAJ,CAAU,CACN,IAAI,GACP,CACJ,CACJ,CAED,IAAI,CAAC,CAAD,CAAJ,CACH","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n'use strict';\n\n/**\n * Call all the functions on the queue with optional data and clears the queue.\n *\n * @param {Function[]} functionQueue The queue of functions to be called.\n * @param {any} callerContext The caller context for the callback.\n * @param {any} [data] Optional parameter to be passed as the function argument.\n */\nexport function callFunctions(functionQueue: Function[], callerContext: any, data?: any): void {\n    if (functionQueue === undefined || functionQueue === null || functionQueue.length === 0) {\n        return;\n    }\n\n    for (const func of functionQueue) {\n        func.call(callerContext, data);\n    }\n\n    // clears the queue after calling all callbacks\n    functionQueue = [];\n}\n\n/**\n * Queues a function to be called later.\n *\n * @param {Function[]} functionQueue The queue of functions to be called.\n * @param {Function} callback The function to be queued.\n */\nexport function queueFunction(functionQueue: Function[], callback: Function): void {\n    if (!(callback === undefined || callback === null)) {\n        functionQueue.push(callback);\n    }\n}\n\n/**\n * Help execute async calls in a sequence.\n *\n * @param {any[]} array The elements array.\n * @param {(entity, () => void) => void)} iterator Async iterator callback.\n * @param {any} [then] Success callback.\n */\nexport function forEachAsync(array: any[], iterator: any, then?: any) {\n    function next(i: any) {\n        if (i < array.length) {\n            iterator(\n                array[i],\n                () => {\n                    next(i + 1);\n                },\n                i\n            );\n        } else {\n            if (then) {\n                then();\n            }\n        }\n    }\n\n    next(0);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}