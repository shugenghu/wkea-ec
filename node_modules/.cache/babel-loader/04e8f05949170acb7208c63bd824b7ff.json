{"ast":null,"code":"import\"core-js/modules/es.promise.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{createObservableDataAction}from'@msdyn365-commerce/action-internal';import{searchByTextAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{getProductImageUrls}from'../../utils/product-list-utils';export const getProductsBySearchList=async(input,context)=>{let searchText;if(input.listMetadata.searchText){searchText=input.listMetadata.searchText;}else if(context.requestContext.query&&context.requestContext.query&&context.requestContext.query.q){searchText=context.requestContext.query.q;}else{throw new Error('Search text missing for ProductsBySearch. Query string ?q={searchText} or search text in list meta data must be present.');}return searchByTextAsync({callerContext:context,queryResultSettings:{Paging:{Top:input.listMetadata.pageSize||10}}},input.channelId,input.catalogId,searchText).then(products=>{context.telemetry.debug('Products returned by productsBySearch action:',products);return getProductImageUrls(products,context.requestContext.apiSettings);}).catch(error=>{context.telemetry.error(\"Error running productsBySearch action: \".concat(error));throw new Error(error);});};export const getProductsBySearchListAction=createObservableDataAction({action:getProductsBySearchList,id:'@msdyn365-commerce/products-by-search'});","map":{"version":3,"sources":["../../../../src/hydrators/product-list-actions/products-by-search.action.ts"],"names":[],"mappings":"sCAAA;;;AAGG,GAEH,OAAS,0BAAT,KAA2C,oCAA3C,CAEA,OAAS,iBAAT,KAAkC,wEAAlC,CAEA,OAAS,mBAAT,KAAoC,gCAApC,CAGA,MAAO,MAAM,CAAA,uBAAuB,CAAG,MAAO,KAAP,CAAgC,OAAhC,GAA2F,CAC9H,GAAI,CAAA,UAAJ,CACA,GAAI,KAAK,CAAC,YAAN,CAAmB,UAAvB,CAAmC,CAC/B,UAAU,CAAG,KAAK,CAAC,YAAN,CAAmB,UAAhC,CACH,CAFD,IAEO,IAAI,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAAgC,OAAO,CAAC,cAAR,CAAuB,KAAvD,EAAgE,OAAO,CAAC,cAAR,CAAuB,KAAvB,CAA6B,CAAjG,CAAoG,CACvG,UAAU,CAAG,OAAO,CAAC,cAAR,CAAuB,KAAvB,CAA6B,CAA1C,CACH,CAFM,IAEA,CACH,KAAM,IAAI,CAAA,KAAJ,CACF,0HADE,CAAN,CAGH,CAED,MAAO,CAAA,iBAAiB,CACpB,CAAE,aAAa,CAAE,OAAjB,CAA0B,mBAAmB,CAAE,CAAE,MAAM,CAAE,CAAE,GAAG,CAAE,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA+B,EAAtC,CAAV,CAA/C,CADoB,CAEpB,KAAK,CAAC,SAFc,CAGpB,KAAK,CAAC,SAHc,CAIpB,UAJoB,CAAjB,CAMF,IANE,CAMI,QAAD,EAAoC,CACtC,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,+CAAxB,CAAyE,QAAzE,EACA,MAAO,CAAA,mBAAmB,CAAC,QAAD,CAAW,OAAO,CAAC,cAAR,CAAuB,WAAlC,CAA1B,CACH,CATE,EAUF,KAVE,CAUI,KAAK,EAAG,CACX,OAAO,CAAC,SAAR,CAAkB,KAAlB,kDAAkE,KAAlE,GACA,KAAM,IAAI,CAAA,KAAJ,CAAU,KAAV,CAAN,CACH,CAbE,CAAP,CAcH,CA1BM,CA4BP,MAAO,MAAM,CAAA,6BAA6B,CAAG,0BAA0B,CAAC,CACpE,MAAM,CAAkC,uBAD4B,CAEpE,EAAE,CAAE,uCAFgE,CAAD,CAAhE","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createObservableDataAction } from '@msdyn365-commerce/action-internal';\nimport { IAction, IActionContext } from '@msdyn365-commerce/core-internal';\nimport { searchByTextAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { getProductImageUrls } from '../../utils/product-list-utils';\nimport { ProductListInput } from '../hydrator-action-inputs';\n\nexport const getProductsBySearchList = async (input: ProductListInput, context: IActionContext): Promise<ProductSearchResult[]> => {\n    let searchText: string;\n    if (input.listMetadata.searchText) {\n        searchText = input.listMetadata.searchText;\n    } else if (context.requestContext.query && context.requestContext.query && context.requestContext.query.q) {\n        searchText = context.requestContext.query.q;\n    } else {\n        throw new Error(\n            'Search text missing for ProductsBySearch. Query string ?q={searchText} or search text in list meta data must be present.'\n        );\n    }\n\n    return searchByTextAsync(\n        { callerContext: context, queryResultSettings: { Paging: { Top: input.listMetadata.pageSize || 10 } } },\n        input.channelId,\n        input.catalogId,\n        searchText\n    )\n        .then((products: ProductSearchResult[]) => {\n            context.telemetry.debug('Products returned by productsBySearch action:', products);\n            return getProductImageUrls(products, context.requestContext.apiSettings);\n        })\n        .catch(error => {\n            context.telemetry.error(`Error running productsBySearch action: ${error}`);\n            throw new Error(error);\n        });\n};\n\nexport const getProductsBySearchListAction = createObservableDataAction({\n    action: <IAction<ProductSearchResult[]>>getProductsBySearchList,\n    id: '@msdyn365-commerce/products-by-search'\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}