{"ast":null,"code":"import{getSalesLine}from'./get-sales-line';export var getSalesLines=function getSalesLines(_ref){var moduleName=_ref.moduleName,moduleComponentProps=_ref.moduleComponentProps,salesLines=_ref.salesLines,products=_ref.products,shipments=_ref.shipments,resources=_ref.resources,isCurrentChannel=_ref.isCurrentChannel,imageOnly=_ref.imageOnly,showCompleteAddress=_ref.showCompleteAddress,telemetryContent=_ref.telemetryContent;return salesLines.map(function(salesLine){var product=products.find(function(_product){return _product.RecordId===salesLine.ProductId;})||{};var shipment=shipments&&shipments.find(function(_shipment){var _shipment$ShipmentLin;return(_shipment$ShipmentLin=_shipment.ShipmentLines)===null||_shipment$ShipmentLin===void 0?void 0:_shipment$ShipmentLin.find(function(_shipmentLine){return _shipmentLine.ItemId===product.ItemId;});});return getSalesLine({moduleName:moduleName,moduleComponentProps:moduleComponentProps,product:product,shipment:shipment,salesLine:salesLine,isCurrentChannel:isCurrentChannel,resources:resources,imageOnly:imageOnly,showCompleteAddress:showCompleteAddress,telemetryContent:telemetryContent});});};export var getSalesLinesInput=function getSalesLinesInput(props,moduleName,order,products,priceContext,showCompleteAddress,telemetryContent){if(!order||!order.SalesLines||!order.SalesLines.length){return;}var resources=props.resources,imageSettings=props.config.imageSettings,_props$context=props.context,actionContext=_props$context.actionContext,_props$context$reques=_props$context.request,gridSettings=_props$context$reques.gridSettings,channelId=_props$context$reques.apiSettings.channelId;var isCurrentChannel=!order.ChannelId||order.ChannelId===channelId;return{moduleName:moduleName,moduleComponentProps:props,isCurrentChannel:isCurrentChannel,salesLines:order.SalesLines,products:products,shipments:order.Shipments,priceContext:priceContext,resources:resources,actionContext:actionContext,gridSettings:gridSettings,imageSettings:imageSettings,showCompleteAddress:showCompleteAddress,telemetryContent:telemetryContent};};","map":{"version":3,"sources":["common/get-sales-lines.tsx"],"names":[],"mappings":"AAOA,OAAS,YAAT,KAA8D,kBAA9D,CAqBA,MAAO,IAAM,CAAA,aAAa,CAAG,QAAhB,CAAA,aAAgB,MAWW,IAVpC,CAAA,UAUoC,MAVpC,UAUoC,CATpC,oBASoC,MATpC,oBASoC,CARpC,UAQoC,MARpC,UAQoC,CAPpC,QAOoC,MAPpC,QAOoC,CANpC,SAMoC,MANpC,SAMoC,CALpC,SAKoC,MALpC,SAKoC,CAJpC,gBAIoC,MAJpC,gBAIoC,CAHpC,SAGoC,MAHpC,SAGoC,CAFpC,mBAEoC,MAFpC,mBAEoC,CADpC,gBACoC,MADpC,gBACoC,CACpC,MAAO,CAAA,UAAU,CAAC,GAAX,CAAe,SAAA,SAAS,CAAG,CAC9B,GAAM,CAAA,OAAO,CAAG,QAAQ,CAAC,IAAT,CAAc,SAAA,QAAQ,QAAI,CAAA,QAAQ,CAAC,QAAT,GAAsB,SAAS,CAAC,SAApC,EAAtB,GAAyE,EAAzF,CACA,GAAM,CAAA,QAAQ,CAAG,SAAS,EAAI,SAAS,CAAC,IAAV,CAAe,SAAA,SAAS,yDAAI,SAAS,CAAC,aAAd,gDAAI,sBAAyB,IAAzB,CAA8B,SAAA,aAAa,QAAI,CAAA,aAAa,CAAC,MAAd,GAAyB,OAAO,CAAC,MAArC,EAA3C,CAAJ,EAAxB,CAA9B,CACA,MAAO,CAAA,YAAY,CAAC,CAChB,UAAU,CAAV,UADgB,CAEhB,oBAAoB,CAApB,oBAFgB,CAGhB,OAAO,CAAP,OAHgB,CAIhB,QAAQ,CAAR,QAJgB,CAKhB,SAAS,CAAT,SALgB,CAMhB,gBAAgB,CAAhB,gBANgB,CAOhB,SAAS,CAAT,SAPgB,CAQhB,SAAS,CAAT,SARgB,CAShB,mBAAmB,CAAnB,mBATgB,CAUhB,gBAAgB,CAAhB,gBAVgB,CAAD,CAAnB,CAYH,CAfM,CAAP,CAgBH,CA5BM,CAkCP,MAAO,IAAM,CAAA,kBAAkB,CAAG,QAArB,CAAA,kBAAqB,CAC9B,KAD8B,CAE9B,UAF8B,CAG9B,KAH8B,CAI9B,QAJ8B,CAK9B,YAL8B,CAM9B,mBAN8B,CAO9B,gBAP8B,CAQG,CACjC,GAAI,CAAC,KAAD,EAAU,CAAC,KAAK,CAAC,UAAjB,EAA+B,CAAC,KAAK,CAAC,UAAN,CAAiB,MAArD,CAA6D,CACzD,OACH,CAHgC,GAM7B,CAAA,SAN6B,CAe7B,KAf6B,CAM7B,SAN6B,CAOnB,aAPmB,CAe7B,KAf6B,CAO7B,MAP6B,CAOnB,aAPmB,gBAe7B,KAf6B,CAQ7B,OAR6B,CASzB,aATyB,gBASzB,aATyB,sCAUzB,OAVyB,CAWrB,YAXqB,uBAWrB,YAXqB,CAYN,SAZM,uBAYrB,WAZqB,CAYN,SAZM,CAiBjC,GAAM,CAAA,gBAAgB,CAAG,CAAC,KAAK,CAAC,SAAP,EAAoB,KAAK,CAAC,SAAN,GAAoB,SAAjE,CAEA,MAAO,CACH,UAAU,CAAV,UADG,CAEH,oBAAoB,CAAE,KAFnB,CAGH,gBAAgB,CAAhB,gBAHG,CAIH,UAAU,CAAE,KAAK,CAAC,UAJf,CAKH,QAAQ,CAAR,QALG,CAMH,SAAS,CAAE,KAAK,CAAC,SANd,CAOH,YAAY,CAAE,YAPX,CAQH,SAAS,CAAT,SARG,CASH,aAAa,CAAE,aATZ,CAUH,YAAY,CAAE,YAVX,CAWH,aAAa,CAAE,aAXZ,CAYH,mBAAmB,CAAE,mBAZlB,CAaH,gBAAgB,CAAE,gBAbf,CAAP,CAeH,CA1CM","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { IActionContext, IGridSettings, IImageSettings } from '@msdyn365-commerce/core';\nimport { OrderShipments, SalesLine, SalesOrder, Shipment, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { getSalesLine, ISalesLine, ISalesLineResources } from './get-sales-line';\nimport { IModuleComponentProps, IPriceContext } from './utilities';\n\nexport interface IGetSalesLinesInput {\n    moduleName: string;\n    moduleComponentProps: IModuleComponentProps;\n    isCurrentChannel: boolean;\n\n    salesLines: SalesLine[];\n    products: SimpleProduct[];\n    shipments?: Shipment[];\n    priceContext: IPriceContext;\n    resources: ISalesLineResources;\n    actionContext: IActionContext;\n    gridSettings: IGridSettings;\n    imageSettings?: IImageSettings;\n    imageOnly?: boolean;\n    showCompleteAddress?: boolean;\n    telemetryContent?: ITelemetryContent;\n}\n\nexport const getSalesLines = ({\n    moduleName,\n    moduleComponentProps,\n    salesLines,\n    products,\n    shipments,\n    resources,\n    isCurrentChannel,\n    imageOnly,\n    showCompleteAddress,\n    telemetryContent\n}: IGetSalesLinesInput): ISalesLine[] => {\n    return salesLines.map(salesLine => {\n        const product = products.find(_product => _product.RecordId === salesLine.ProductId) || ({} as SimpleProduct);\n        const shipment = shipments && shipments.find(_shipment => _shipment.ShipmentLines?.find(_shipmentLine => _shipmentLine.ItemId === product.ItemId));\n        return getSalesLine({\n            moduleName,\n            moduleComponentProps,\n            product,\n            shipment,\n            salesLine,\n            isCurrentChannel,\n            resources,\n            imageOnly,\n            showCompleteAddress,\n            telemetryContent\n        });\n    });\n};\n\ninterface IProps extends IModuleComponentProps {\n    resources: ISalesLineResources;\n}\n\nexport const getSalesLinesInput = (\n    props: IProps,\n    moduleName: string,\n    order: SalesOrder | OrderShipments,\n    products: SimpleProduct[],\n    priceContext: IPriceContext,\n    showCompleteAddress?: boolean,\n    telemetryContent?: ITelemetryContent\n): IGetSalesLinesInput | undefined => {\n    if (!order || !order.SalesLines || !order.SalesLines.length) {\n        return;\n    }\n\n    const {\n        resources,\n        config: { imageSettings },\n        context: {\n            actionContext,\n            request: {\n                gridSettings,\n                apiSettings: { channelId }\n            }\n        }\n    } = props;\n\n    const isCurrentChannel = !order.ChannelId || order.ChannelId === channelId;\n\n    return {\n        moduleName,\n        moduleComponentProps: props,\n        isCurrentChannel,\n        salesLines: order.SalesLines,\n        products,\n        shipments: order.Shipments,\n        priceContext: priceContext,\n        resources,\n        actionContext: actionContext,\n        gridSettings: gridSettings!,\n        imageSettings: imageSettings,\n        showCompleteAddress: showCompleteAddress,\n        telemetryContent: telemetryContent\n    };\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}