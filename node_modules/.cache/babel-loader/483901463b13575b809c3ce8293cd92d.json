{"ast":null,"code":"import\"core-js/modules/es.string.split.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import*as React from'react';import{css,removeInnerHtml,selectElements,selectFirstElement}from'../utilities/htmlExtensions';import{PlayerUtility}from'../utilities/player-utility';import{format}from'../utilities/stringExtensions';import{getDimensions}from'../utilities/utilities';import{TtmlParser}from'./ttml-parser';import{closedCaptionsSettingsMap,closedCaptionsSettingsOptions}from'./video-closed-captions-settings';export default class ClosedCaptions extends React.Component{constructor(props){super(props);this.userPreferences={text:{},window:{}};this.closedCaptionDiv=/*#__PURE__*/React.createRef();this.lastPlayPosition=0;this.ttmlContext=null;this.resetCaptions();this.clicked=this.clicked.bind(this);}render(){const{className}=this.props;const closedCaptionDivStyle={bottom:this.props.isVideoControlVisible?'2.5em':'0',transition:'bottom 0.5s ease-in 0s'};return/*#__PURE__*/React.createElement(\"div\",{role:'none',className:className,ref:this.closedCaptionDiv,\"aria-hidden\":!this.props.showClosedCaptions,style:closedCaptionDivStyle,onClick:this.clicked});}clicked(){this.props.onClosedCaptionClick();}componentDidMount(){if(this.props.ccURL){this._setCcLanguage(this.props.ccURL);}window&&window.addEventListener('resize',()=>{if(this.props.showClosedCaptions){this.updateCaptions(this.props.currentTime);}});}shouldComponentUpdate(nextProps){let shouldRender=false;if(nextProps.showClosedCaptions||this.props.showClosedCaptions!==nextProps.showClosedCaptions){shouldRender=true;}return shouldRender;}componentWillUnmount(){window&&window.removeEventListener('resize',()=>{if(this.props.showClosedCaptions){this.updateCaptions(this.props.currentTime);}});}componentDidUpdate(prevProps){if(this.props.showClosedCaptions){if(prevProps.ccLanguage!==this.props.ccLanguage){if(this.props.ccURL){this._setCcLanguage(this.props.ccURL);}}this.applySettings();this.resetCaptions();this.updateCaptions(this.props.currentTime);if(prevProps.isVideoControlVisible!==this.props.isVideoControlVisible){this.applySettings();this.resetCaptions();window.setTimeout(()=>{this.updateCaptions(this.props.currentTime);},500);}}}showSampleCaptions(){this.ttmlContext=null;const mockCaptions=new DOMParser().parseFromString(\"<?xml version='1.0' encoding='utf-8'?>\\n<tt xml:lang='en-us' xmlns='http://www.w3.org/ns/ttml' xmlns:tts='http://www.w3.org/ns/ttml#styling'\\nxmlns:ttm='http://www.w3.org/ns/ttml#metadata'>\\n    <head>\\n    <metadata>\\n        <ttm:title>Media.wvx.aib</ttm:title>\\n        <ttm:copyright>Copyright (c) 2013 Microsoft Corporation.  All rights reserved.</ttm:copyright>\\n    </metadata>\\n    <styling>\\n        <style xml:id='Style1' tts:fontFamily='proportionalSansSerif' tts:fontSize='0.8c' tts:textAlign='center'\\n        tts:color='white' />\\n    </styling>\\n    <layout>\\n        <region style='Style1' xml:id='CaptionArea' tts:origin='0c 12.6c' tts:extent='32c 2.4c'\\n        tts:backgroundColor='rgba(0,0,0,160)' tts:displayAlign='center' tts:padding='0.3c 0.5c' />\\n    </layout>\\n    </head>\\n    <body region='CaptionArea'>\\n    <div>\\n        <p begin='00:00:01.140' end='99:99:99.999'>EXAMPLE CAPTIONS!</p>\\n    </div>\\n    </body>\\n</tt>\",'text/xml');this._onClosedCaptionsLoaded(mockCaptions);const dimensions=getDimensions(this.closedCaptionDiv.current);this.ttmlContext.updateRelatedMediaObjectRegion(dimensions);this.closedCaptionDiv.current.style.bottom='2.5rem';}updateCaptions(playPosition){let output='';this.lastPlayPosition=playPosition;if(this.ttmlContext&&this.ttmlContext.hasEvents()){const tick=Math.floor(playPosition*1000);const dimensions=getDimensions(this.closedCaptionDiv.current);if(this.ttmlContext.updateRelatedMediaObjectRegion(dimensions)){this.resetCaptions();}if(this.ttmlContext.updateCurrentEvents(tick)){removeInnerHtml(this.closedCaptionDiv.current);for(const cue of this.ttmlContext.getCues(tick)){this._applyUserPreferencesOverrides(cue);css(cue,'background-color','');output=cue.outerHTML;}this.closedCaptionDiv.current.innerHTML=output;}}}resetCaptions(){if(this.ttmlContext){this.ttmlContext.resetCurrentEvents();}if(this.closedCaptionDiv.current){removeInnerHtml(this.closedCaptionDiv.current);}this.applySettings();}applySettings(){const prefs={};const currentSettings=this.props.tempClosedCaptionsSettings?this.props.tempClosedCaptionsSettings:this.props.currentClosedCaptionsSettings;for(const settingKey in currentSettings){if(currentSettings.hasOwnProperty(settingKey)){const optionValue=this._getOptionValue(settingKey,currentSettings[settingKey]);if(optionValue){prefs[settingKey]=\"\".concat(closedCaptionsSettingsMap[settingKey].value).concat(optionValue);}}}this.userPreferences.text=this._getPrefsCss(prefs,'text');this.userPreferences.window=this._getPrefsCss(prefs,'window');}_loadClosedCaptions(href){PlayerUtility.ajax(href,result=>this._onClosedCaptionsLoaded(result),()=>{if(this.props.errorCallback){this.props.errorCallback({errorType:'Player.error.loadClosedCaptions.ajax',errorDesc:\"Ajax call failed: ' \".concat(href)});}});}_onClosedCaptionsLoaded(ttmlDocument){if(!ttmlDocument){if(this.props.errorCallback){this.props.errorCallback({errorType:'Player.error.onClosedCaptionsLoaded.ttmlDoc',errorDesc:'No ttmlDocument found'});}return;}const id=this.closedCaptionDiv.current.id?\"\".concat(this.closedCaptionDiv.current.id,\" '-'\"):'';const settingsOverrides={idPrefix:id,fontMap:{default:'Segoe ui, Arial'},relatedMediaObjectRegion:getDimensions(this.closedCaptionDiv.current)};try{this.ttmlContext=TtmlParser.parse(ttmlDocument,settingsOverrides);if(this.ttmlContext){this.ttmlContext.setOwnerDocument(this.closedCaptionDiv.current.ownerDocument);if(this.ttmlContext.hasEvents()){this.updateCaptions(this.lastPlayPosition);}}}catch(e){if(this.props.errorCallback){this.props.errorCallback({errorType:'Player.error.onClosedCaptionsLoaded.ttmlParser',errorDesc:\"'TtmlDocument parser error: ' \".concat(e.message)});}}}_applyUserPreferencesOverrides(cue){if(!this.userPreferences){return;}if(this.userPreferences.text){for(const element of selectElements('span, br',cue)){for(const property in this.userPreferences.text){if(this.userPreferences.text.hasOwnProperty(property)){css(element,property,this.userPreferences.text[property]);}}}}if(this.userPreferences.window){const winElement=selectFirstElement('p',cue);if(winElement){for(const property in this.userPreferences.window){if(this.userPreferences.window.hasOwnProperty(property)){css(winElement,property,this.userPreferences.window[property]);}}}}}_setCcLanguage(href){this.ttmlContext=null;this.resetCaptions();if(!href){return;}this._loadClosedCaptions(href);}_getOptionValue(settingKey,optionKey){const setting=closedCaptionsSettingsMap[settingKey];if(setting){const option=closedCaptionsSettingsOptions[setting.option];return option&&option.map[optionKey];}return'';}_getPrefsCss(prefs,prefix){const prefsCss={};for(const pref in prefs){if(prefs.hasOwnProperty(pref)){const propVal=prefs[pref];if(pref.indexOf(prefix)===0&&pref.indexOf('opacity')<0){if(propVal&&propVal.length>0){const styles=propVal.split(';');for(const style of styles){const pVal=style.split(':');if(pVal.length>1){prefsCss[pVal[0].trim()]=pVal[1].trim();}}}}}}for(const pref in prefs){if(prefs.hasOwnProperty(pref)){const propVal=prefs[pref];if(pref.indexOf(prefix)===0&&pref.indexOf('opacity')>0){const pVal=propVal.split(':');if(pVal.length>1){const colorValue=prefsCss[pVal[0].trim()];const opacityValue=pVal[1].trim();prefsCss[pVal[0].trim()]=this._formatAsRgba(colorValue,opacityValue);}}}}return prefsCss;}_formatAsRgba(cssColor,opacity){let result=format('rgba(0,0,0,{0})',opacity);const colorStart=cssColor?cssColor.indexOf('#'):-1;if(colorStart>=0){const fullColorString=cssColor.substr(colorStart+1);const colorLenght=fullColorString.length/3;if(colorLenght>0){const red=parseInt(fullColorString.substr(0,colorLenght),16);const green=parseInt(fullColorString.substr(colorLenght,colorLenght),16);const blue=parseInt(fullColorString.substr(colorLenght*2,colorLenght),16);result=format('rgba({0},{1},{2},{3})',red,green,blue,opacity);}}return result;}}","map":{"version":3,"sources":["videoplayer/components/closed-captions/video-closed-captions.tsx"],"names":[],"mappings":"mGAAA,MAAO,GAAK,CAAA,KAAZ,KAAuB,OAAvB,CAEA,OAAS,GAAT,CAAc,eAAd,CAA+B,cAA/B,CAA+C,kBAA/C,KAAyE,6BAAzE,CACA,OAAS,aAAT,KAA8B,6BAA9B,CACA,OAAS,MAAT,KAAuB,+BAAvB,CACA,OAAS,aAAT,KAAuD,wBAAvD,CAGA,OAAS,UAAT,KAA2B,eAA3B,CAEA,OAAS,yBAAT,CAAoC,6BAApC,KAAyE,kCAAzE,CAOA,cAAc,MAAO,CAAA,cAAP,QAA8B,CAAA,KAAK,CAAC,SAA+B,CA0C7E,WAAA,CAAY,KAAZ,CAAuC,CACnC,MAAM,KAAN,EA1BI,KAAA,eAAA,CAAsC,CAC1C,IAAI,CAAE,EADoC,CAE1C,MAAM,CAAE,EAFkC,CAAtC,CAKA,KAAA,gBAAA,cAAoD,KAAK,CAAC,SAAN,EAApD,CAUA,KAAA,gBAAA,CAA2B,CAA3B,CAQA,KAAA,WAAA,CAAmC,IAAnC,CAIJ,KAAK,aAAL,GACA,KAAK,OAAL,CAAe,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAf,CACH,CAEM,MAAM,EAAA,CACT,KAAM,CAAE,SAAF,EAAgB,KAAK,KAA3B,CACA,KAAM,CAAA,qBAAqB,CAAG,CAC1B,MAAM,CAAE,KAAK,KAAL,CAAW,qBAAX,CAAmC,OAAnC,CAA6C,GAD3B,CAE1B,UAAU,CAAE,wBAFc,CAA9B,CAIA,mBAEI,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CAAK,IAAI,CAAC,MAAV,CAAiB,SAAS,CAAE,SAA5B,CAAuC,GAAG,CAAE,KAAK,gBAAjD,CAAiE,cAAe,CAAC,KAAK,KAAL,CAAW,kBAA5F,CAAgH,KAAK,CAAE,qBAAvH,CAA8I,OAAO,CAAE,KAAK,OAA5J,CAAA,CAFJ,CAKH,CAEM,OAAO,EAAA,CACV,KAAK,KAAL,CAAW,oBAAX,GACH,CAEM,iBAAiB,EAAA,CACpB,GAAG,KAAK,KAAL,CAAW,KAAd,CAAqB,CACjB,KAAK,cAAL,CAAoB,KAAK,KAAL,CAAW,KAA/B,EACH,CACD,MAAM,EAAI,MAAM,CAAC,gBAAP,CAAwB,QAAxB,CAAkC,IAAK,CAC7C,GAAG,KAAK,KAAL,CAAW,kBAAd,CAAkC,CAC9B,KAAK,cAAL,CAAoB,KAAK,KAAL,CAAW,WAA/B,EACH,CACJ,CAJS,CAAV,CAKH,CAEM,qBAAqB,CAAC,SAAD,CAAgC,CACxD,GAAI,CAAA,YAAY,CAAG,KAAnB,CACA,GAAG,SAAS,CAAC,kBAAV,EAAiC,KAAK,KAAL,CAAW,kBAAX,GAAkC,SAAS,CAAC,kBAAhF,CAAqG,CACjG,YAAY,CAAG,IAAf,CACH,CACD,MAAO,CAAA,YAAP,CACH,CAEM,oBAAoB,EAAA,CACvB,MAAM,EAAI,MAAM,CAAC,mBAAP,CAA2B,QAA3B,CAAqC,IAAK,CAChD,GAAG,KAAK,KAAL,CAAW,kBAAd,CAAkC,CAC9B,KAAK,cAAL,CAAoB,KAAK,KAAL,CAAW,WAA/B,EACH,CACJ,CAJS,CAAV,CAKH,CAEM,kBAAkB,CAAC,SAAD,CAAgC,CACrD,GAAG,KAAK,KAAL,CAAW,kBAAd,CAAkC,CAC9B,GAAG,SAAS,CAAC,UAAV,GAA0B,KAAK,KAAL,CAAW,UAAxC,CAAqD,CACjD,GAAG,KAAK,KAAL,CAAW,KAAd,CAAqB,CACjB,KAAK,cAAL,CAAoB,KAAK,KAAL,CAAW,KAA/B,EACH,CACJ,CACD,KAAK,aAAL,GACA,KAAK,aAAL,GACA,KAAK,cAAL,CAAoB,KAAK,KAAL,CAAW,WAA/B,EACA,GAAG,SAAS,CAAC,qBAAV,GAAoC,KAAK,KAAL,CAAW,qBAAlD,CAAyE,CACrE,KAAK,aAAL,GACA,KAAK,aAAL,GAEA,MAAM,CAAC,UAAP,CAAkB,IAAK,CACvB,KAAK,cAAL,CAAoB,KAAK,KAAL,CAAW,WAA/B,EACC,CAFD,CAEkB,GAFlB,EAGH,CACJ,CACJ,CAQM,kBAAkB,EAAA,CACrB,KAAK,WAAL,CAAmB,IAAnB,CACA,KAAM,CAAA,YAAY,CAAgB,GAAI,CAAA,SAAJ,GAAgB,eAAhB,w7BAsBgC,UAtBhC,CAAlC,CAwBA,KAAK,uBAAL,CAA6B,YAA7B,EACA,KAAM,CAAA,UAAU,CAAG,aAAa,CAAC,KAAK,gBAAL,CAAsB,OAAvB,CAAhC,CACA,KAAK,WAAL,CAAkB,8BAAlB,CAAiD,UAAjD,EACA,KAAK,gBAAL,CAAsB,OAAtB,CAA+B,KAA/B,CAAqC,MAArC,CAA8C,QAA9C,CACH,CAUM,cAAc,CAAC,YAAD,CAAqB,CACtC,GAAI,CAAA,MAAM,CAAW,EAArB,CACA,KAAK,gBAAL,CAAwB,YAAxB,CAEA,GAAI,KAAK,WAAL,EAAoB,KAAK,WAAL,CAAiB,SAAjB,EAAxB,CAAsD,CAClD,KAAM,CAAA,IAAI,CAAG,IAAI,CAAC,KAAL,CAAW,YAAY,CAAI,IAA3B,CAAb,CAEA,KAAM,CAAA,UAAU,CAAG,aAAa,CAAC,KAAK,gBAAL,CAAsB,OAAvB,CAAhC,CACA,GAAI,KAAK,WAAL,CAAiB,8BAAjB,CAAgD,UAAhD,CAAJ,CAAkE,CAE9D,KAAK,aAAL,GACH,CAED,GAAI,KAAK,WAAL,CAAiB,mBAAjB,CAAqC,IAArC,CAAJ,CAAgD,CAE5C,eAAe,CAAC,KAAK,gBAAL,CAAsB,OAAvB,CAAf,CAEA,IAAK,KAAM,CAAA,GAAX,GAAkB,MAAK,WAAL,CAAiB,OAAjB,CAAyB,IAAzB,CAAlB,CAAkD,CAC9C,KAAK,8BAAL,CAAoC,GAApC,EAIA,GAAG,CAAC,GAAD,CAAM,kBAAN,CAA0B,EAA1B,CAAH,CACA,MAAM,CAAG,GAAG,CAAC,SAAb,CACH,CAGD,KAAK,gBAAL,CAAsB,OAAtB,CAA+B,SAA/B,CAA2C,MAA3C,CACH,CACJ,CACJ,CASM,aAAa,EAAA,CAChB,GAAI,KAAK,WAAT,CAAsB,CAClB,KAAK,WAAL,CAAiB,kBAAjB,GACH,CAED,GAAI,KAAK,gBAAL,CAAsB,OAA1B,CAAoC,CAChC,eAAe,CAAC,KAAK,gBAAL,CAAsB,OAAvB,CAAf,CACH,CACD,KAAK,aAAL,GACH,CAQM,aAAa,EAAA,CAChB,KAAM,CAAA,KAAK,CAA4B,EAAvC,CAEA,KAAM,CAAA,eAAe,CAAG,KAAK,KAAL,CAAW,0BAAX,CAAwC,KAAK,KAAL,CAAW,0BAAnD,CAAgF,KAAK,KAAL,CAAW,6BAAnH,CAEA,IAAK,KAAM,CAAA,UAAX,GAAyB,CAAA,eAAzB,CAA0C,CACtC,GAAI,eAAe,CAAC,cAAhB,CAA+B,UAA/B,CAAJ,CAAgD,CAC5C,KAAM,CAAA,WAAW,CAAG,KAAK,eAAL,CAAqB,UAArB,CAAiC,eAAe,CAAC,UAAD,CAAhD,CAApB,CAEA,GAAI,WAAJ,CAAiB,CACb,KAAK,CAAC,UAAD,CAAL,WAAuB,yBAAyB,CAAC,UAAD,CAAzB,CAAsC,KAA7D,SAAqE,WAArE,EACH,CACJ,CACJ,CAED,KAAK,eAAL,CAAqB,IAArB,CAA4B,KAAK,YAAL,CAAkB,KAAlB,CAAyB,MAAzB,CAA5B,CACA,KAAK,eAAL,CAAqB,MAArB,CAA8B,KAAK,YAAL,CAAkB,KAAlB,CAAyB,QAAzB,CAA9B,CACH,CASO,mBAAmB,CAAC,IAAD,CAAa,CAEpC,aAAa,CAAC,IAAd,CAAmB,IAAnB,CAA0B,MAAD,EAAiB,KAAK,uBAAL,CAA6B,MAA7B,CAA1C,CAAgF,IAAK,CACjF,GAAI,KAAK,KAAL,CAAW,aAAf,CAA8B,CAC1B,KAAK,KAAL,CAAW,aAAX,CAAyB,CACrB,SAAS,CAAE,sCADU,CAErB,SAAS,+BAAyB,IAAzB,CAFY,CAAzB,EAIH,CACJ,CAPD,EAQH,CASO,uBAAuB,CAAC,YAAD,CAA0B,CACrD,GAAI,CAAC,YAAL,CAAmB,CACf,GAAI,KAAK,KAAL,CAAW,aAAf,CAA8B,CAC1B,KAAK,KAAL,CAAW,aAAX,CAAyB,CACrB,SAAS,CAAE,6CADU,CAErB,SAAS,CAAE,uBAFU,CAAzB,EAIH,CACD,OACH,CAID,KAAM,CAAA,EAAE,CAAG,KAAK,gBAAL,CAAsB,OAAtB,CAA+B,EAA/B,WAAwC,KAAK,gBAAL,CAAsB,OAAtB,CAA+B,EAAvE,SAAmF,EAA9F,CACA,KAAM,CAAA,iBAAiB,CAAkB,CACrC,QAAQ,CAAE,EAD2B,CAErC,OAAO,CAAE,CAAE,OAAO,CAAE,iBAAX,CAF4B,CAGrC,wBAAwB,CAAE,aAAa,CAAC,KAAK,gBAAL,CAAsB,OAAvB,CAHF,CAAzC,CAMA,GAAI,CACA,KAAK,WAAL,CAAmB,UAAU,CAAC,KAAX,CAAiB,YAAjB,CAA+B,iBAA/B,CAAnB,CAEA,GAAI,KAAK,WAAT,CAAsB,CAClB,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,KAAK,gBAAL,CAAsB,OAAtB,CAA+B,aAAjE,EAEA,GAAI,KAAK,WAAL,CAAiB,SAAjB,EAAJ,CAAkC,CAC9B,KAAK,cAAL,CAAoB,KAAK,gBAAzB,EACH,CACJ,CACJ,CAAC,MAAO,CAAP,CAAU,CACR,GAAI,KAAK,KAAL,CAAW,aAAf,CAA8B,CAC1B,KAAK,KAAL,CAAW,aAAX,CAAyB,CACrB,SAAS,CAAE,gDADU,CAErB,SAAS,yCAAmC,CAAC,CAAC,OAArC,CAFY,CAAzB,EAIH,CACJ,CACJ,CASO,8BAA8B,CAAC,GAAD,CAAiB,CACnD,GAAI,CAAC,KAAK,eAAV,CAA2B,CACvB,OACH,CAED,GAAI,KAAK,eAAL,CAAqB,IAAzB,CAA+B,CAC3B,IAAK,KAAM,CAAA,OAAX,GAAsB,CAAA,cAAc,CAAC,UAAD,CAAa,GAAb,CAApC,CAAuD,CAEnD,IAAK,KAAM,CAAA,QAAX,GAAuB,MAAK,eAAL,CAAqB,IAA5C,CAAkD,CAC9C,GAAI,KAAK,eAAL,CAAqB,IAArB,CAA0B,cAA1B,CAAyC,QAAzC,CAAJ,CAAwD,CACpD,GAAG,CAAC,OAAD,CAAU,QAAV,CAAoB,KAAK,eAAL,CAAqB,IAArB,CAA0B,QAA1B,CAApB,CAAH,CACH,CACJ,CACJ,CACJ,CAED,GAAI,KAAK,eAAL,CAAqB,MAAzB,CAAiC,CAC7B,KAAM,CAAA,UAAU,CAAuB,kBAAkB,CAAC,GAAD,CAAM,GAAN,CAAzD,CACA,GAAI,UAAJ,CAAgB,CAEZ,IAAK,KAAM,CAAA,QAAX,GAAuB,MAAK,eAAL,CAAqB,MAA5C,CAAoD,CAChD,GAAI,KAAK,eAAL,CAAqB,MAArB,CAA4B,cAA5B,CAA2C,QAA3C,CAAJ,CAA0D,CACtD,GAAG,CAAC,UAAD,CAAa,QAAb,CAAuB,KAAK,eAAL,CAAqB,MAArB,CAA4B,QAA5B,CAAvB,CAAH,CACH,CACJ,CACJ,CACJ,CACJ,CASO,cAAc,CAAC,IAAD,CAAa,CAC/B,KAAK,WAAL,CAAmB,IAAnB,CACA,KAAK,aAAL,GACA,GAAI,CAAC,IAAL,CAAW,CACP,OACH,CACD,KAAK,mBAAL,CAAyB,IAAzB,EACH,CAUO,eAAe,CAAC,UAAD,CAAqB,SAArB,CAAsC,CACzD,KAAM,CAAA,OAAO,CAAG,yBAAyB,CAAC,UAAD,CAAzC,CACA,GAAI,OAAJ,CAAa,CACT,KAAM,CAAA,MAAM,CAAG,6BAA6B,CAAC,OAAO,CAAC,MAAT,CAA5C,CACA,MAAO,CAAA,MAAM,EAAI,MAAM,CAAC,GAAP,CAAW,SAAX,CAAjB,CACH,CACD,MAAO,EAAP,CACH,CAUO,YAAY,CAAC,KAAD,CAAiC,MAAjC,CAA+C,CAC/D,KAAM,CAAA,QAAQ,CAA4B,EAA1C,CAIA,IAAK,KAAM,CAAA,IAAX,GAAmB,CAAA,KAAnB,CAA0B,CACtB,GAAI,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAJ,CAAgC,CAC5B,KAAM,CAAA,OAAO,CAAG,KAAK,CAAC,IAAD,CAArB,CAEA,GAAI,IAAI,CAAC,OAAL,CAAa,MAAb,IAAyB,CAAzB,EAA8B,IAAI,CAAC,OAAL,CAAa,SAAb,EAA0B,CAA5D,CAA+D,CAC3D,GAAI,OAAO,EAAK,OAAO,CAAC,MAAR,CAAiB,CAAjC,CAAqC,CACjC,KAAM,CAAA,MAAM,CAAG,OAAO,CAAC,KAAR,CAAc,GAAd,CAAf,CAEA,IAAK,KAAM,CAAA,KAAX,GAAoB,CAAA,MAApB,CAA4B,CACxB,KAAM,CAAA,IAAI,CAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAb,CAEA,GAAI,IAAI,CAAC,MAAL,CAAc,CAAlB,CAAqB,CACjB,QAAQ,CAAC,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,EAAD,CAAR,CAA2B,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,EAA3B,CACH,CACJ,CACJ,CACJ,CACJ,CACJ,CAKD,IAAK,KAAM,CAAA,IAAX,GAAmB,CAAA,KAAnB,CAA0B,CACtB,GAAI,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAJ,CAAgC,CAC5B,KAAM,CAAA,OAAO,CAAG,KAAK,CAAC,IAAD,CAArB,CACA,GAAI,IAAI,CAAC,OAAL,CAAa,MAAb,IAAyB,CAAzB,EAA8B,IAAI,CAAC,OAAL,CAAa,SAAb,EAA0B,CAA5D,CAA+D,CAC3D,KAAM,CAAA,IAAI,CAAG,OAAO,CAAC,KAAR,CAAc,GAAd,CAAb,CAEA,GAAI,IAAI,CAAC,MAAL,CAAc,CAAlB,CAAqB,CACjB,KAAM,CAAA,UAAU,CAAG,QAAQ,CAAC,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,EAAD,CAA3B,CACA,KAAM,CAAA,YAAY,CAAG,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,EAArB,CACA,QAAQ,CAAC,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,EAAD,CAAR,CAA2B,KAAK,aAAL,CAAmB,UAAnB,CAA+B,YAA/B,CAA3B,CACH,CACJ,CACJ,CACJ,CAED,MAAO,CAAA,QAAP,CACH,CAUO,aAAa,CAAC,QAAD,CAAmB,OAAnB,CAAkC,CACnD,GAAI,CAAA,MAAM,CAAG,MAAM,CAAC,iBAAD,CAAoB,OAApB,CAAnB,CACA,KAAM,CAAA,UAAU,CAAG,QAAQ,CAAG,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAH,CAA2B,CAAC,CAAvD,CAEA,GAAI,UAAU,EAAI,CAAlB,CAAqB,CACjB,KAAM,CAAA,eAAe,CAAG,QAAQ,CAAC,MAAT,CAAgB,UAAU,CAAG,CAA7B,CAAxB,CACA,KAAM,CAAA,WAAW,CAAI,eAAe,CAAC,MAAjB,CAA2B,CAA/C,CAEA,GAAI,WAAW,CAAG,CAAlB,CAAqB,CACjB,KAAM,CAAA,GAAG,CAAG,QAAQ,CAAC,eAAe,CAAC,MAAhB,CAAuB,CAAvB,CAA0B,WAA1B,CAAD,CAAyC,EAAzC,CAApB,CACA,KAAM,CAAA,KAAK,CAAG,QAAQ,CAAC,eAAe,CAAC,MAAhB,CAAuB,WAAvB,CAAoC,WAApC,CAAD,CAAmD,EAAnD,CAAtB,CACA,KAAM,CAAA,IAAI,CAAG,QAAQ,CAAC,eAAe,CAAC,MAAhB,CAAuB,WAAW,CAAG,CAArC,CAAwC,WAAxC,CAAD,CAAuD,EAAvD,CAArB,CACA,MAAM,CAAG,MAAM,CAAC,uBAAD,CAA0B,GAA1B,CAA+B,KAA/B,CAAsC,IAAtC,CAA4C,OAA5C,CAAf,CACH,CACJ,CAED,MAAO,CAAA,MAAP,CACH,CAhc4E","sourcesContent":["import * as React from 'react';\nimport { ICurrentClosedCaptionsSettings } from '../data/player-constants';\nimport { css, removeInnerHtml, selectElements, selectFirstElement } from '../utilities/htmlExtensions';\nimport { PlayerUtility } from '../utilities/player-utility';\nimport { format } from '../utilities/stringExtensions';\nimport { getDimensions, IDictionaryStringString } from '../utilities/utilities';\nimport { IClosedCaptionsProps } from './ClosedCaptionsProps';\nimport { ITtmlContext } from './ttml-context';\nimport { TtmlParser } from './ttml-parser';\nimport { ITtmlSettings } from './ttml-settings';\nimport { closedCaptionsSettingsMap, closedCaptionsSettingsOptions } from './video-closed-captions-settings';\n\n/**\n *\n * closedCaptions React component for video player\n *\n */\nexport default class ClosedCaptions extends React.Component<IClosedCaptionsProps> {\n\n    /**\n     * @name - currentSettings\n     * @description - The current closed captions settings.\n     * @private\n     * @type {IDictionaryStringString}\n     */\n    public currentSettings: ICurrentClosedCaptionsSettings | undefined;\n\n    /**\n     * @name - userPreferences\n     * @description - The user preference overrides for the closed captions.\n     * @static\n     * @public\n     * @type {ICcUserPreferences}\n     */\n    private userPreferences: ICcUserPreferences = {\n        text: {},\n        window: {}\n    };\n\n    private closedCaptionDiv: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n\n    /**\n     * @name - lastPlayPosition\n     * @description - The last player position passed to updateCaptions.\n     *                This is used to call updateCaptions again when the cc language is changed.\n     *                Play could be paused at that time.\n     * @private\n     * @type {number}\n     */\n    private lastPlayPosition: number = 0;\n\n    /**\n     * @name - ttmlContext\n     * @description - The ttmlContext for the current ttml document.\n     * @private\n     * @type {ITtmlContext}\n     */\n    private ttmlContext: ITtmlContext | null = null;\n\n    constructor(props: IClosedCaptionsProps) {\n        super(props);\n        this.resetCaptions();\n        this.clicked = this.clicked.bind(this);\n    }\n\n    public render(): JSX.Element {\n        const { className } = this.props;\n        const closedCaptionDivStyle = {\n            bottom: this.props.isVideoControlVisible ? '2.5em' : '0',\n            transition: 'bottom 0.5s ease-in 0s'\n        };\n        return (\n            // tslint:disable-next-line: jsx-self-close\n            <div role='none' className={className} ref={this.closedCaptionDiv} aria-hidden={!this.props.showClosedCaptions} style={closedCaptionDivStyle} onClick={this.clicked}>\n            </div>\n        );\n    }\n\n    public clicked(): void {\n        this.props.onClosedCaptionClick();\n    }\n\n    public componentDidMount(): void {\n        if(this.props.ccURL) {\n            this._setCcLanguage(this.props.ccURL);\n        }\n        window && window.addEventListener('resize', () => {\n            if(this.props.showClosedCaptions) {\n                this.updateCaptions(this.props.currentTime);\n            }\n        });\n    }\n\n    public shouldComponentUpdate(nextProps: IClosedCaptionsProps): boolean {\n        let shouldRender = false;\n        if(nextProps.showClosedCaptions || (this.props.showClosedCaptions !== nextProps.showClosedCaptions)) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n\n    public componentWillUnmount(): void {\n        window && window.removeEventListener('resize', () => {\n            if(this.props.showClosedCaptions) {\n                this.updateCaptions(this.props.currentTime);\n            }\n        });\n    }\n\n    public componentDidUpdate(prevProps: IClosedCaptionsProps): void {\n        if(this.props.showClosedCaptions) {\n            if(prevProps.ccLanguage! !== this.props.ccLanguage!) {\n                if(this.props.ccURL) {\n                    this._setCcLanguage(this.props.ccURL);\n                }\n            }\n            this.applySettings();\n            this.resetCaptions();\n            this.updateCaptions(this.props.currentTime);\n            if(prevProps.isVideoControlVisible !== this.props.isVideoControlVisible) {\n                this.applySettings();\n                this.resetCaptions();\n                // Setting up a delay so that right height and width is calculated\n                window.setTimeout(() => {\n                this.updateCaptions(this.props.currentTime);\n                },                500);\n            }\n        }\n    }\n\n    /**\n     * @name - showSampleCaptions\n     * @description - Displays a mocked caption container with content, used to show the caption preset preview\n     * @public\n     * @returns {void}\n     */\n    public showSampleCaptions(): void {\n        this.ttmlContext = null;\n        const mockCaptions: XMLDocument = new DOMParser().parseFromString(`<?xml version='1.0' encoding='utf-8'?>\n<tt xml:lang='en-us' xmlns='http://www.w3.org/ns/ttml' xmlns:tts='http://www.w3.org/ns/ttml#styling'\nxmlns:ttm='http://www.w3.org/ns/ttml#metadata'>\n    <head>\n    <metadata>\n        <ttm:title>Media.wvx.aib</ttm:title>\n        <ttm:copyright>Copyright (c) 2013 Microsoft Corporation.  All rights reserved.</ttm:copyright>\n    </metadata>\n    <styling>\n        <style xml:id='Style1' tts:fontFamily='proportionalSansSerif' tts:fontSize='0.8c' tts:textAlign='center'\n        tts:color='white' />\n    </styling>\n    <layout>\n        <region style='Style1' xml:id='CaptionArea' tts:origin='0c 12.6c' tts:extent='32c 2.4c'\n        tts:backgroundColor='rgba(0,0,0,160)' tts:displayAlign='center' tts:padding='0.3c 0.5c' />\n    </layout>\n    </head>\n    <body region='CaptionArea'>\n    <div>\n        <p begin='00:00:01.140' end='99:99:99.999'>EXAMPLE CAPTIONS!</p>\n    </div>\n    </body>\n</tt>`,                                                                   'text/xml');\n\n        this._onClosedCaptionsLoaded(mockCaptions);\n        const dimensions = getDimensions(this.closedCaptionDiv.current!);\n        this.ttmlContext!.updateRelatedMediaObjectRegion(dimensions!);\n        this.closedCaptionDiv.current!.style.bottom = '2.5rem';\n    }\n\n    /**\n     * @name - updateCaptions\n     * @description - Update the captionContainer with the captions that correspond to the current time\n     * @public\n     * @param {number} playPosition - The video's play position to sync the captions to.\n     * @returns {void}\n     */\n// tslint:disable-next-line: max-func-body-length\n    public updateCaptions(playPosition: number): void {\n        let output: string = '';\n        this.lastPlayPosition = playPosition;\n\n        if (this.ttmlContext && this.ttmlContext.hasEvents()) {\n            const tick = Math.floor(playPosition  * 1000);\n\n            const dimensions = getDimensions(this.closedCaptionDiv.current!);\n            if (this.ttmlContext.updateRelatedMediaObjectRegion(dimensions!)) {\n                // Call resetCaptions to force an update since the relatedMediaObjectRegion size has changed.\n                this.resetCaptions();\n            }\n\n            if (this.ttmlContext.updateCurrentEvents(tick)) {\n\n                removeInnerHtml(this.closedCaptionDiv.current!);\n\n                for (const cue of this.ttmlContext.getCues(tick)) {\n                    this._applyUserPreferencesOverrides(cue);\n                    // background color is not honored in high contrast mode,\n                    // thus remove it from this wrapper div to avoid video not getting displayed in high contrast mode\n                    // with close captions enabled\n                    css(cue, 'background-color', '');\n                    output = cue.outerHTML;\n                }\n\n                // tslint:disable-next-line: no-inner-html\n                this.closedCaptionDiv.current!.innerHTML = output;\n            }\n        }\n    }\n\n    /**\n     * @name - resetCaptions\n     * @description - Resets the ttml caption container.\n     *                This should be called when user preferences change.\n     * @public\n     * @returns {void}\n     */\n    public resetCaptions(): void {\n        if (this.ttmlContext) {\n            this.ttmlContext.resetCurrentEvents();\n        }\n\n        if (this.closedCaptionDiv.current!) {\n            removeInnerHtml(this.closedCaptionDiv.current!);\n        }\n        this.applySettings();\n    }\n\n    /**\n     * @name - applySettings\n     * @description - Applies the closed captions settings.\n     * @public\n     * @returns {void}\n     */\n    public applySettings(): void {\n        const prefs: IDictionaryStringString = {};\n\n        const currentSettings = this.props.tempClosedCaptionsSettings ? this.props.tempClosedCaptionsSettings : this.props.currentClosedCaptionsSettings;\n    // tslint:disable-next-line: no-for-in\n        for (const settingKey in currentSettings) {\n            if (currentSettings.hasOwnProperty(settingKey)) {\n                const optionValue = this._getOptionValue(settingKey, currentSettings[settingKey]);\n\n                if (optionValue) {\n                    prefs[settingKey] = `${closedCaptionsSettingsMap[settingKey].value}${optionValue}`;\n                }\n            }\n        }\n\n        this.userPreferences.text = this._getPrefsCss(prefs, 'text');\n        this.userPreferences.window = this._getPrefsCss(prefs, 'window');\n    }\n\n    /**\n     * @name - loadClosedCaptions\n     * @description - Loads the close captioning ttml file.\n     * @private\n     * @param {string} href - The cc href.\n     * @returns {void}\n     */\n    private _loadClosedCaptions(href: string): void {\n        // tslint:disable-next-line: no-any\n        PlayerUtility.ajax(href, (result: any) => this._onClosedCaptionsLoaded(result), () => {\n            if (this.props.errorCallback) {\n                this.props.errorCallback({\n                    errorType: 'Player.error.loadClosedCaptions.ajax',\n                    errorDesc: `Ajax call failed: ' ${href}`\n                });\n            }\n        });\n    }\n\n    /**\n     * @name - onClosedCaptionsLoaded\n     * @description - Close captioning ttml file loaded handler.\n     * @private\n     * @param {XMLDocument} ttmlDocument - The ttml document containing the closed captions.\n     * @returns {void}\n     */\n    private _onClosedCaptionsLoaded(ttmlDocument: XMLDocument): void {\n        if (!ttmlDocument) {\n            if (this.props.errorCallback) {\n                this.props.errorCallback({\n                    errorType: 'Player.error.onClosedCaptionsLoaded.ttmlDoc',\n                    errorDesc: 'No ttmlDocument found'\n                });\n            }\n            return;\n        }\n\n        // this.closedCaptionDiv.current!.setAttribute(ClosedCaptions.ariaHidden, 'false');\n\n        const id = this.closedCaptionDiv.current!.id ? (`${this.closedCaptionDiv.current!.id} '-'`) : '';\n        const settingsOverrides: ITtmlSettings = {\n            idPrefix: id,\n            fontMap: { default: 'Segoe ui, Arial' },\n            relatedMediaObjectRegion: getDimensions(this.closedCaptionDiv.current!)\n        };\n\n        try {\n            this.ttmlContext = TtmlParser.parse(ttmlDocument, settingsOverrides);\n\n            if (this.ttmlContext) {\n                this.ttmlContext.setOwnerDocument(this.closedCaptionDiv.current!.ownerDocument!);\n\n                if (this.ttmlContext.hasEvents()) {\n                    this.updateCaptions(this.lastPlayPosition);\n                }\n            }\n        } catch (e) {\n            if (this.props.errorCallback) {\n                this.props.errorCallback({\n                    errorType: 'Player.error.onClosedCaptionsLoaded.ttmlParser',\n                    errorDesc: `'TtmlDocument parser error: ' ${e.message}`\n                });\n            }\n        }\n    }\n\n    /**\n     * @name - applyUserPreferencesOverrides\n     * @description - Applies user preference overrides to the specified cue.\n     * @private\n     * @param {HTMLElement} cue - The cue to apply any overrides to.\n     * @returns {void}\n     */\n    private _applyUserPreferencesOverrides(cue: HTMLElement): void {\n        if (!this.userPreferences) {\n            return;\n        }\n\n        if (this.userPreferences.text) {\n            for (const element of selectElements('span, br', cue)) {\n                // tslint:disable-next-line: no-for-in\n                for (const property in this.userPreferences.text) {\n                    if (this.userPreferences.text.hasOwnProperty(property)) {\n                        css(element, property, this.userPreferences.text[property]);\n                    }\n                }\n            }\n        }\n\n        if (this.userPreferences.window) {\n            const winElement: HTMLElement | null = selectFirstElement('p', cue);\n            if (winElement) {\n                // tslint:disable-next-line: no-for-in\n                for (const property in this.userPreferences.window) {\n                    if (this.userPreferences.window.hasOwnProperty(property)) {\n                        css(winElement, property, this.userPreferences.window[property]);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @name - setCcLanguage\n     * @description - Updates the component if there is any change to its underlying DOM.\n     * @private\n     * @param {string} href - The ttml href.\n     * @returns {void}\n     */\n    private _setCcLanguage(href: string): void {\n        this.ttmlContext = null;\n        this.resetCaptions();\n        if (!href) {\n            return;\n        }\n        this._loadClosedCaptions(href);\n    }\n\n    /**\n     * @name - getOptionValue\n     * @description - Gets the value of closed captions settings option.\n     * @private\n     * @param {string} settingKey - The closed ceptions settings key.\n     * @param {string} optionKey - The closed captions option key.\n     * @returns {void}\n     */\n    private _getOptionValue(settingKey: string, optionKey: string): string {\n        const setting = closedCaptionsSettingsMap[settingKey];\n        if (setting) {\n            const option = closedCaptionsSettingsOptions[setting.option];\n            return option && option.map[optionKey];\n        }\n        return '';\n    }\n\n    /**\n     * @name - getPrefsCss\n     * @description - Gets the css for the preferences.\n     * @private\n     * @param {IDictionaryStringString} pref - The preferences to get css for.\n     * @param {string} prefix - The closed captions type (text/window).\n     * @returns {IDictionaryStringString}\n     */\n    private _getPrefsCss(prefs: IDictionaryStringString, prefix: string): IDictionaryStringString {\n        const prefsCss: IDictionaryStringString = {};\n\n        //  First store all the non-transparency values\n        // tslint:disable-next-line: no-for-in\n        for (const pref in prefs) {\n            if (prefs.hasOwnProperty(pref)) {\n                const propVal = prefs[pref];\n\n                if (pref.indexOf(prefix) === 0 && pref.indexOf('opacity') < 0) {\n                    if (propVal && (propVal.length > 0)) {\n                        const styles = propVal.split(';');\n\n                        for (const style of styles) {\n                            const pVal = style.split(':');\n\n                            if (pVal.length > 1) {\n                                prefsCss[pVal[0].trim()] = pVal[1].trim();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        //  Then go through all the transparency values and\n        //  map them onto their non-transparent color counterparts\n        // tslint:disable-next-line: no-for-in\n        for (const pref in prefs) {\n            if (prefs.hasOwnProperty(pref)) {\n                const propVal = prefs[pref];\n                if (pref.indexOf(prefix) === 0 && pref.indexOf('opacity') > 0) {\n                    const pVal = propVal.split(':');\n\n                    if (pVal.length > 1) {\n                        const colorValue = prefsCss[pVal[0].trim()];\n                        const opacityValue = pVal[1].trim();\n                        prefsCss[pVal[0].trim()] = this._formatAsRgba(colorValue, opacityValue);\n                    }\n                }\n            }\n        }\n\n        return prefsCss;\n    }\n\n    /**\n     * @name - formatAsRgba\n     * @description - Formats the color value from css to rgba value.\n     * @private\n     * @param {string} cssColor - The css color value.\n     * @param {string} opacity - The opacity value.\n     * @returns {string}\n     */\n    private _formatAsRgba(cssColor: string, opacity: string): string {\n        let result = format('rgba(0,0,0,{0})', opacity);\n        const colorStart = cssColor ? cssColor.indexOf('#') : -1;\n\n        if (colorStart >= 0) {\n            const fullColorString = cssColor.substr(colorStart + 1);\n            const colorLenght = (fullColorString.length) / 3;\n\n            if (colorLenght > 0) {\n                const red = parseInt(fullColorString.substr(0, colorLenght), 16);\n                const green = parseInt(fullColorString.substr(colorLenght, colorLenght), 16);\n                const blue = parseInt(fullColorString.substr(colorLenght * 2, colorLenght), 16);\n                result = format('rgba({0},{1},{2},{3})', red, green, blue, opacity);\n            }\n        }\n\n        return result;\n    }\n}\n\n/**\n * @interface ICcUserPreferences\n * @classdesc - Describes the closed caption user preferences data structure.\n * @export\n */\nexport interface ICcUserPreferences {\n    text: IDictionaryStringString;\n    window: IDictionaryStringString;\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}