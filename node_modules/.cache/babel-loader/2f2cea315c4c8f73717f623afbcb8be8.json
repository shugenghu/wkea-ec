{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{addAddress,AddressManagementInput,updateAddress,updatePrimaryAddress}from'@msdyn365-commerce-modules/retail-actions';import{getStateProvinceAction,GetStateProvincesInput}from'../actions/get-state-provinces';export class AddressCommon{constructor(context,resources,telemetry){this.getDefaultCountryRegionId=(countryRegionId,countryRegions,market)=>{const marketISOCode=market||'US';const currentCountryRegion=countryRegions.find(countryRegion=>(countryRegion.ISOCode||'')===marketISOCode);return currentCountryRegion&&currentCountryRegion.CountryRegionId||countryRegionId;};this.parseRetailException=resources=>{return{errorTitle:resources.addressErrorMessageTitle,errorMessage:resources.addressGenericErrorMessage};};this.isAuthenticatedFlow=()=>{return this.context.request.user.isAuthenticated;};this.getStateProvinces=async countryRegionId=>{let response=[];if(this.context&&this.context.actionContext){try{const input=new GetStateProvincesInput(countryRegionId,this.context.request.apiSettings);response=await getStateProvinceAction(input,this.context.actionContext);}catch(error){if(this.telemetry){this.telemetry.error(\"Error encountered \".concat(error));this.telemetry.debug('Unable to get state provinces');}}}return Promise.resolve(response);};this.addCustomerAddress=address=>{return this.submitCustomerAddress(addAddress,address);};this.updateCustomerAddress=address=>{return this.submitCustomerAddress(updateAddress,address);};this.updateCustomerPrimaryAddress=address=>{return this.submitCustomerAddress(updatePrimaryAddress,address);};this.submitCustomerAddress=(addressAction,address)=>{address.AddressTypeValue=address.AddressTypeValue||7;const input=new AddressManagementInput(address);return this.execAddressAction(addressAction,input,address);};this.execAddressAction=async(addressAction,input,address)=>{let response={};if(this.context&&this.context.actionContext){try{const addresses=await addressAction(input,this.context.actionContext);if(addresses.length>0){response.address=address.RecordId?address:addresses[addresses.length-1];}response.customerAddresses=addresses;}catch(error){if(this.telemetry){this.telemetry.error(\"Error encountered \".concat(error));this.telemetry.debug('Unable to exec address action');}response=this.parseRetailException(this.resources);}}return Promise.resolve(response);};this.context=context;this.resources=resources;this.telemetry=telemetry;}}","map":{"version":3,"sources":["common/address-common.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    addAddress, AddressManagementInput, updateAddress, updatePrimaryAddress\n} from '@msdyn365-commerce-modules/retail-actions';\nimport { IActionInput, ICoreContext, IObservableAction, ITelemetry } from '@msdyn365-commerce/core';\nimport {\n    Address, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getStateProvinceAction, GetStateProvincesInput } from '../actions/get-state-provinces';\nimport { IAddressResource, IAddressResponse } from './address-module.data';\n\n/**\n *\n * Address common\n */\nexport class AddressCommon {\n\n    private context: ICoreContext;\n    private resources: IAddressResource;\n    private telemetry: ITelemetry;\n\n    constructor(context: ICoreContext, resources: IAddressResource, telemetry: ITelemetry) {\n        this.context = context;\n        this.resources = resources;\n        this.telemetry = telemetry;\n    }\n\n    public getDefaultCountryRegionId = (countryRegionId: string, countryRegions: CountryRegionInfo[], market?: string): string => {\n        const marketISOCode = market || 'US';\n        const currentCountryRegion = countryRegions.find(countryRegion => (countryRegion.ISOCode || '') === marketISOCode);\n        return (currentCountryRegion && currentCountryRegion.CountryRegionId) || countryRegionId;\n    }\n\n    public parseRetailException = (resources: IAddressResource): IAddressResponse => {\n        return {\n            errorTitle: resources.addressErrorMessageTitle,\n            errorMessage: resources.addressGenericErrorMessage\n        };\n    }\n\n    public isAuthenticatedFlow = (): boolean => {\n        return this.context.request.user.isAuthenticated;\n    }\n\n    public getStateProvinces = async (countryRegionId: string): Promise<StateProvinceInfo[]> => {\n        let response: StateProvinceInfo[] = [];\n        if (this.context && this.context.actionContext) {\n            try {\n                const input = new GetStateProvincesInput(countryRegionId, this.context.request.apiSettings);\n                response = await getStateProvinceAction(input, this.context.actionContext);\n            } catch (error) {\n                if (this.telemetry) {\n                    this.telemetry.error(`Error encountered ${error}`);\n                    this.telemetry.debug('Unable to get state provinces');\n                }\n            }\n        }\n        return Promise.resolve(response);\n    }\n\n    public addCustomerAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(addAddress, address);\n    };\n\n    public updateCustomerAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(updateAddress, address);\n    };\n\n    public updateCustomerPrimaryAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(updatePrimaryAddress, address);\n    };\n\n    private submitCustomerAddress = (addressAction: IObservableAction<Address[]>, address: Address): Promise<IAddressResponse> => {\n        address.AddressTypeValue = address.AddressTypeValue || 7; // 7 sets it to HOME by default\n\n        const input = new AddressManagementInput(address);\n        return this.execAddressAction(addressAction, input, address);\n    };\n\n    private execAddressAction = async (addressAction: IObservableAction<Address[]>, input: IActionInput | IActionInput[], address: Address): Promise<IAddressResponse> => {\n        let response: IAddressResponse = {};\n\n        if (this.context && this.context.actionContext) {\n            try {\n                const addresses = await addressAction(input, this.context.actionContext);\n                if (addresses.length > 0) {\n                    response.address = address.RecordId ? address : addresses[addresses.length - 1];\n                }\n                response.customerAddresses = addresses;\n            } catch (error) {\n                if (this.telemetry) {\n                    this.telemetry.error(`Error encountered ${error}`);\n                    this.telemetry.debug('Unable to exec address action');\n                }\n                response = this.parseRetailException(this.resources);\n            }\n        }\n        return Promise.resolve(response);\n    };\n}\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}