{"ast":null,"code":"import\"core-js/modules/es.string.replace.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import{MenuCategories,PlayerConstants}from'../data/player-constants';import{ClosedCaptionTypes,MediaQuality,MediaTypes}from'../data/player-metadata';import{startsWith}from'../utilities/stringExtensions';import{PlayerLocKeys}from'./localization-helper';export default class PlayerHelper{constructor(props,localizationHelper){this.onErrorCallback=(errorType,message)=>{console.log(\"ErrorType : \".concat(errorType,\", Message : \").concat(message));};this.playerProps=props;this.localizationHelper=localizationHelper;}getMetadata(){this._mapVideoFiles();this._setCCFiles();this._setAudioTracks();return this.playerProps.playerData.metaData;}updatePlayerProps(props){this.playerProps=props;this._clearVideoPlayerMetaData();}getOptionMenu(){const audioTracks=this._getAudioTracksMenu();if(audioTracks===null){return null;}else{const optionMenuItems=[];optionMenuItems.push({id:this.addIdPrefix('audioTracks'),label:this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),selected:false,selectable:false,subMenu:audioTracks});return{category:MenuCategories.Options,id:this.addIdPrefix(MenuCategories.Options),label:'Options',items:optionMenuItems};}}getPosterFrameUrl(){let posterFrameUrl='';if(!this.playerProps.playerData.options.hidePosterFrame&&this.playerProps.playerData.metaData.posterframeUrl){posterFrameUrl=this._removeProtocolFromUrl(this.playerProps.playerData.metaData.posterframeUrl);if(this.playerProps.playerData.options.thumbnailFullWidth){if(posterFrameUrl.indexOf('?')>0){posterFrameUrl=\"\".concat(posterFrameUrl,'&w=').concat(PlayerConstants.thumbnailFullWidth,'&h=').concat(PlayerConstants.thumbnailFullHeight);}else{posterFrameUrl=\"\".concat(posterFrameUrl,'?w=').concat(PlayerConstants.thumbnailFullWidth,'&h=').concat(PlayerConstants.thumbnailFullHeight);}}}return posterFrameUrl;}getVideoFileToPlay(){let videoFile={url:'',mediaType:MediaTypes.MP4,quality:MediaQuality.LO};const videoMetaData=this.playerProps.playerData.metaData;const mpVideoFiles=this._getVideoFileByType(MediaTypes.MP4,videoMetaData.videoFiles);const hdVideoFile=this._getVideoFileByQuality(MediaQuality.HDX,mpVideoFiles);if(hdVideoFile!==null){videoFile=hdVideoFile;}else{const hqVideoFile=this._getVideoFileByQuality(MediaQuality.HQ,mpVideoFiles);if(hqVideoFile!==null){videoFile=hqVideoFile;}else{const sdVideoFile=this._getVideoFileByQuality(MediaQuality.SD,mpVideoFiles);if(sdVideoFile!==null){videoFile=sdVideoFile;}else{const loVideoFile=this._getVideoFileByQuality(MediaQuality.LO,mpVideoFiles);if(loVideoFile!==null){videoFile=loVideoFile;}}}}return videoFile;}isEmptyOrUndefined(value){if(value===undefined||value===''){return true;}return false;}addIdPrefix(childId){const prefix=this.isEmptyOrUndefined(this.playerProps.playerId)?null:\"\".concat(this.playerProps.playerId,\"-\");return prefix&&!startsWith(childId,prefix,false)?prefix+childId:childId;}removeIdPrefix(childId){const prefix=this.isEmptyOrUndefined(this.playerProps.playerId)?null:\"\".concat(this.playerProps.playerId,\"-\");return prefix&&startsWith(childId,prefix,false)?childId.substring(prefix.length):childId;}_getAudioTracksMenu(){const audioTracksMenuItems=[];const videoMetaData=this.playerProps.playerData.metaData;if(videoMetaData.audioTracks!==undefined&&videoMetaData.audioTracks.length>0){let descriptiveAudioTrackCount=0;for(const track of videoMetaData.audioTracks){if(track.isDescriptiveAudio){descriptiveAudioTrackCount++;}}let trackIndex=0;for(const audioTrack of videoMetaData.audioTracks){let label;let languageCode='';if(audioTrack.isDescriptiveAudio){const descriptiveAudioLabel=this.localizationHelper.getLocalizedValue(PlayerLocKeys.descriptive_audio);if(descriptiveAudioTrackCount>1){const language=this.localizationHelper.getLanguageNameFromLocale(audioTrack.languageCode);label=\"\".concat(descriptiveAudioLabel,\" - \").concat(language);}else{label=descriptiveAudioLabel;}languageCode=\"daudio-\".concat(audioTrack.languageCode.toLowerCase());}else{label=this.localizationHelper.getLanguageNameFromLocale(audioTrack.languageCode);languageCode=audioTrack.languageCode.toLowerCase();}const audioMenuItem={label:label,language:languageCode,data:audioTrack.url,id:this.addIdPrefix(\"audio-\".concat(trackIndex)),selected:false,selectable:true,persistOnClick:true};audioTracksMenuItems.push(audioMenuItem);trackIndex++;}audioTracksMenuItems.unshift({id:'',label:this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks_default),ariaLabel:this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks_default),language:'default',data:'default',selectable:true,selected:false,persistOnClick:true});audioTracksMenuItems.unshift({id:'',label:this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),ariaLabel:\"\".concat(this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),\" - go back to previous menu\"),selectable:false,selected:false,persistOnClick:false,isBackButton:true});return{category:MenuCategories.AudioTracks,id:this.addIdPrefix(MenuCategories.AudioTracks),label:this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),items:audioTracksMenuItems};}else{return null;}}_clearVideoPlayerMetaData(){this.playerProps.playerData.metaData.videoFiles=[];this.playerProps.playerData.metaData.audioTracks=[];this.playerProps.playerData.metaData.ccFiles=[];}_setCCFiles(){const videoMetaData=this.playerProps.playerData.metaData;const ccFiles=[];if(!(videoMetaData.ccFiles&&videoMetaData.ccFiles.length>0)){if(videoMetaData.videoBinaryReferences&&videoMetaData.videoBinaryReferences.length>0){for(const binaryRef of videoMetaData.videoBinaryReferences){if(binaryRef.extension&&binaryRef.extension==='ttml'||binaryRef.$type==='videoClosedCaptionBinaryReference'){const ccFile={ccType:ClosedCaptionTypes.TTML,locale:binaryRef.locale,url:binaryRef.sourceHref};ccFiles.push(ccFile);}}this.playerProps.playerData.metaData.ccFiles=ccFiles;}}}_setAudioTracks(){const videoMetaData=this.playerProps.playerData.metaData;const audioTracks=[];if(videoMetaData.videoBinaryReferences&&videoMetaData.videoBinaryReferences.length>0){for(const binaryRef of videoMetaData.videoBinaryReferences){if(binaryRef.$type&&binaryRef.$type==='audioBinaryReference'){const audioTrack={isDescriptiveAudio:binaryRef.audioType==='descriptiveAudio',bitrate:binaryRef.bitrate,languageCode:binaryRef.locale===undefined?'':binaryRef.locale,name:binaryRef.alias,url:binaryRef.clientHref};audioTracks.push(audioTrack);}}}this.playerProps.playerData.metaData.audioTracks=audioTracks;}_mapVideoFiles(){const videoMetaData=this.playerProps.playerData.metaData;if(!videoMetaData.videoFiles||videoMetaData.videoFiles.length===0){const videoFiles=[];const videoBinaryFiles=videoMetaData.videoBinaryReferences;if(videoBinaryFiles&&videoBinaryFiles.length>0){for(const binaryRef of videoBinaryFiles){if(binaryRef.format){if(binaryRef.format==='1001'){continue;}const mediaTypeAndQuality=this._getMediaTypeAndQuality(binaryRef.format);let urlRef;if(mediaTypeAndQuality.mediaType===MediaTypes.MP4){urlRef=binaryRef.clientHref;}else{urlRef=binaryRef.sourceHref;}if(urlRef){urlRef=this._removeProtocolFromUrl(urlRef);}if(urlRef){videoFiles.push({url:urlRef,quality:mediaTypeAndQuality.quality,mediaType:mediaTypeAndQuality.mediaType,formatCode:binaryRef.format});}}}}this.playerProps.playerData.metaData.videoFiles=videoFiles;}}_getMediaTypeAndQuality(format){let mType=MediaTypes.MP4;let mQuality=MediaQuality.SD;switch(format){case'101':mType=MediaTypes.MP4;mQuality=MediaQuality.LO;break;case'102':mType=MediaTypes.MP4;mQuality=MediaQuality.SD;break;case'103':mType=MediaTypes.MP4;mQuality=MediaQuality.HQ;break;case'104':mType=MediaTypes.MP4;mQuality=MediaQuality.HDX;break;case'105':mType=MediaTypes.MP4;mQuality=MediaQuality.HD;break;case'1004':mType=MediaTypes.SMOOTH;break;case'1006':mType=MediaTypes.HLS;break;case'1007':mType=MediaTypes.DASH;break;default:mType=MediaTypes.MP4;mQuality=MediaQuality.SD;}return{mediaType:mType,quality:mQuality};}_removeProtocolFromUrl(url){return url.replace(/(^\\w+:|^)\\/\\//,'//');}_getVideoFileByQuality(quality,videoFiles){let videoFile=null;for(const file of videoFiles){if(file.quality===quality){videoFile=file;break;}}return videoFile;}_getVideoFileByType(mediaType,videoFiles){const videoFile=[];for(const file of videoFiles){if(file.mediaType===mediaType){videoFile.push(file);}}return videoFile;}}","map":{"version":3,"sources":["videoplayer/components/helper/playerHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { IPlayerProps } from '../../players/player/Player.props';\nimport { IPlayerMenu, IPlayerMenuItem, MenuCategories, PlayerConstants } from '../data/player-constants';\nimport { IAudioTrack } from '../data/player-interface';\nimport { ClosedCaptionTypes, IBinaryReference, ICCFile, IVideoFile, IVideoMetadata, MediaQuality, MediaTypes } from '../data/player-metadata';\nimport { startsWith } from '../utilities/stringExtensions';\nimport LocalizationHelper, {PlayerLocKeys } from './localization-helper';\n\n/**\n *\n * Player helper class\n *\n */\nexport default class PlayerHelper {\n\n    private playerProps: IPlayerProps;\n    private localizationHelper: LocalizationHelper;\n\n    constructor(props: IPlayerProps, localizationHelper: LocalizationHelper) {\n        this.playerProps = props;\n        this.localizationHelper = localizationHelper;\n    }\n\n    public getMetadata(): IVideoMetadata {\n        this._mapVideoFiles();\n        this._setCCFiles();\n        this._setAudioTracks();\n        return this.playerProps.playerData.metaData;\n    }\n\n    public updatePlayerProps(props: IPlayerProps): void {\n        this.playerProps = props;\n        this._clearVideoPlayerMetaData();\n    }\n\n    public getOptionMenu(): IPlayerMenu | null {\n\n        const audioTracks = this._getAudioTracksMenu();\n        if(audioTracks === null) {\n            return null;\n        } else {\n            const optionMenuItems: IPlayerMenuItem[] = [];\n\n            optionMenuItems.push({\n                id: this.addIdPrefix('audioTracks'),\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),\n                selected: false,\n                selectable: false,\n                subMenu: audioTracks\n            });\n\n            return {\n                category: MenuCategories.Options,\n                id: this.addIdPrefix(MenuCategories.Options),\n                label: 'Options',\n                items: optionMenuItems,\n            };\n        }\n    }\n\n    /**\n     * @name - getPosterFrameUrl\n     * @description - get Poster Frame URL.\n     * @private\n     * @returns {string}\n     */\n    public getPosterFrameUrl(): string {\n        let posterFrameUrl = '';\n        if(!this.playerProps.playerData.options.hidePosterFrame && this.playerProps.playerData.metaData.posterframeUrl) {\n            posterFrameUrl = this._removeProtocolFromUrl(this.playerProps.playerData.metaData.posterframeUrl);\n            if(this.playerProps.playerData.options.thumbnailFullWidth) {\n                if(posterFrameUrl.indexOf('?') > 0) {\n                    posterFrameUrl = `${posterFrameUrl}${'&w='}${PlayerConstants.thumbnailFullWidth}${'&h='}${PlayerConstants.thumbnailFullHeight}`;\n                } else {\n                    posterFrameUrl = `${posterFrameUrl}${'?w='}${PlayerConstants.thumbnailFullWidth}${'&h='}${PlayerConstants.thumbnailFullHeight}`;\n                }\n\n            }\n        }\n        return posterFrameUrl;\n    }\n\n    public getVideoFileToPlay(): IVideoFile {\n        let videoFile: IVideoFile = {\n            url: '',\n            mediaType: MediaTypes.MP4,\n            quality: MediaQuality.LO\n        };\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n\n        const mpVideoFiles = this._getVideoFileByType(MediaTypes.MP4, videoMetaData.videoFiles!);\n        const hdVideoFile = this._getVideoFileByQuality(MediaQuality.HDX, mpVideoFiles);\n        if(hdVideoFile !== null) {\n            videoFile = hdVideoFile;\n        } else {\n            const hqVideoFile = this._getVideoFileByQuality(MediaQuality.HQ, mpVideoFiles);\n            if(hqVideoFile !== null) {\n                videoFile = hqVideoFile ;\n            } else {\n                const sdVideoFile = this._getVideoFileByQuality(MediaQuality.SD, mpVideoFiles);\n                if(sdVideoFile !== null) {\n                    videoFile = sdVideoFile ;\n                } else {\n                    const loVideoFile = this._getVideoFileByQuality(MediaQuality.LO, mpVideoFiles);\n                    if(loVideoFile !== null) {\n                        videoFile = loVideoFile;\n                    }\n                }\n            }\n        }\n        return videoFile;\n    }\n\n    /**\n     * @name - onErrorCallback\n     * @description - Cal`lback function when error happen.\n     * @private\n     * @returns {void}\n     */\n    public onErrorCallback = (errorType: string, message: string): void => {\n        console.log(`ErrorType : ${errorType}, Message : ${message}`);\n    }\n\n    public isEmptyOrUndefined(value?:string): boolean {\n        if(value === undefined || value === '') {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @name - addIdPrefix\n     * @description - Adds the id prefix to form a child id.\n     * @private\n     * @param {string} childId - The child id to prefix.\n     * @returns {string} - The prefixed id or the original id if no prefix is built.\n     */\n    public addIdPrefix(childId: string): string {\n        const prefix = (this.isEmptyOrUndefined(this.playerProps.playerId))\n            ? null\n            : `${this.playerProps.playerId}-`;\n\n        return (prefix && !startsWith(childId, prefix, false)) ? (prefix + childId) : childId;\n    }\n\n    /**\n     * @name - removeIdPrefix\n     * @description - Removes the id prefix from a child id.\n     * @public\n     * @param {string} childId - The child id to prefix.\n     * @returns {string} - The un-prefixed id or the original id if no prefix was found.\n     */\n    public removeIdPrefix(childId: string): string {\n        const prefix = (this.isEmptyOrUndefined(this.playerProps.playerId))\n            ? null\n            : `${this.playerProps.playerId}-`;\n\n        return (prefix && startsWith(childId, prefix, false)) ? childId.substring(prefix.length) : childId;\n    }\n\n    private _getAudioTracksMenu(): IPlayerMenu | null {\n        const audioTracksMenuItems: IPlayerMenuItem[] = [];\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n        if(videoMetaData.audioTracks !== undefined && videoMetaData.audioTracks.length > 0) {\n\n            // check if there are multiple \"Descriptive Audio\" tracks, in which case we will want to show language\n            let descriptiveAudioTrackCount = 0;\n            for (const track of videoMetaData.audioTracks) {\n                if (track.isDescriptiveAudio) {\n                    descriptiveAudioTrackCount++;\n                }\n            }\n\n            let trackIndex: number = 0;\n            for (const audioTrack of videoMetaData.audioTracks) {\n\n                let label: string;\n                let languageCode: string = '';\n                if (audioTrack.isDescriptiveAudio) {\n                    // Descriptive audio labels look like:\n                    //   \"Descriptive audio\" -- when only one descriptive audio track exists\n                    // or\n                    //   \"Descriptive audio - English\" -- if there is more than one descriptive audio track\n                    const descriptiveAudioLabel = this.localizationHelper.getLocalizedValue(PlayerLocKeys.descriptive_audio);\n                    if (descriptiveAudioTrackCount > 1) {\n                        const language = this.localizationHelper.getLanguageNameFromLocale(audioTrack.languageCode);\n                        label = `${descriptiveAudioLabel} - ${language}`;\n                    } else {\n                        label = descriptiveAudioLabel;\n                    }\n                    languageCode = `daudio-${audioTrack.languageCode.toLowerCase()}`;\n                } else {\n                    // Regular tracks display language of the stream only.\n                    label = this.localizationHelper.getLanguageNameFromLocale(audioTrack.languageCode);\n                    languageCode = audioTrack.languageCode.toLowerCase();\n                }\n\n                const audioMenuItem: IPlayerMenuItem = {\n                    label: label,\n                    language: languageCode,\n                    data: audioTrack.url,\n                    id: this.addIdPrefix(`audio-${trackIndex}`),\n                    selected: false,\n                    selectable: true,\n                    persistOnClick: true\n                };\n\n                audioTracksMenuItems.push(audioMenuItem);\n                trackIndex++;\n            }\n\n            audioTracksMenuItems.unshift({\n                id: '',\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks_default),\n                ariaLabel: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks_default),\n                language: 'default',\n                data: 'default',\n                selectable: true,\n                selected: false,\n                persistOnClick: true,\n            });\n\n            audioTracksMenuItems.unshift({\n                id: '',\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),\n                ariaLabel: `${this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks)} - go back to previous menu`,\n                selectable: false,\n                selected: false,\n                persistOnClick: false,\n                isBackButton: true\n            });\n            return {\n                category: MenuCategories.AudioTracks,\n                id: this.addIdPrefix(MenuCategories.AudioTracks),\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),\n                items: audioTracksMenuItems,\n            };\n        } else {\n            return null;\n        }\n    }\n    private _clearVideoPlayerMetaData(): void {\n        this.playerProps.playerData.metaData.videoFiles = [];\n        this.playerProps.playerData.metaData.audioTracks = [];\n        this.playerProps.playerData.metaData.ccFiles = [];\n    }\n\n    private _setCCFiles(): void {\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n        const ccFiles: ICCFile[] = [];\n        if(!(videoMetaData.ccFiles && videoMetaData.ccFiles.length > 0)) {\n            if(videoMetaData.videoBinaryReferences && videoMetaData.videoBinaryReferences.length > 0) {\n                for (const binaryRef of videoMetaData.videoBinaryReferences) {\n                    // skip all other format except ttml/closedcaption\n                    if (((binaryRef.extension && binaryRef.extension === 'ttml') || binaryRef.$type === 'videoClosedCaptionBinaryReference')) {\n                        const ccFile: ICCFile = {\n                            ccType: ClosedCaptionTypes.TTML,\n                            locale: binaryRef.locale!,\n                            url: binaryRef.sourceHref!\n                        };\n                        ccFiles.push(ccFile);\n                    }\n                }\n                this.playerProps.playerData.metaData.ccFiles = ccFiles;\n            }\n        }\n    }\n\n    private _setAudioTracks(): void {\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n        const audioTracks: IAudioTrack[] = [];\n        if(videoMetaData.videoBinaryReferences && videoMetaData.videoBinaryReferences.length > 0) {\n            for (const binaryRef of videoMetaData.videoBinaryReferences) {\n                if (binaryRef.$type && binaryRef.$type === 'audioBinaryReference') {\n                    const audioTrack: IAudioTrack = {\n                      isDescriptiveAudio: binaryRef.audioType === 'descriptiveAudio',\n                      bitrate: binaryRef.bitrate!,\n                      languageCode: binaryRef.locale === undefined ? '' : binaryRef.locale,\n                      name: binaryRef.alias!,\n                      url: binaryRef.clientHref!\n                    };\n                    audioTracks.push(audioTrack);\n                }\n            }\n        }\n        this.playerProps.playerData.metaData.audioTracks =  audioTracks;\n    }\n\n    private _mapVideoFiles(): void {\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n        if(!videoMetaData.videoFiles || videoMetaData.videoFiles.length === 0) {\n            const videoFiles: IVideoFile[] = [];\n            const videoBinaryFiles: IBinaryReference[] = videoMetaData.videoBinaryReferences!;\n            if(videoBinaryFiles && videoBinaryFiles.length > 0)  {\n                for (const binaryRef of videoBinaryFiles) {\n                    if (binaryRef.format) {\n                        // skip the unsupported 1001 format\n                        if ((binaryRef.format === '1001')) {\n                            continue;\n                        }\n\n                        // handle all other video/audio format\n                        const mediaTypeAndQuality = this._getMediaTypeAndQuality(binaryRef.format);\n                        let urlRef;\n                        if (mediaTypeAndQuality.mediaType === MediaTypes.MP4) {\n                            urlRef = binaryRef.clientHref;\n                        } else {\n                            urlRef = binaryRef.sourceHref;\n                        }\n\n                        if (urlRef) {\n                            urlRef = this._removeProtocolFromUrl(urlRef);\n                        }\n\n                        if (urlRef) {\n                            videoFiles.push({\n                                url: urlRef,\n                                quality: mediaTypeAndQuality.quality,\n                                mediaType: mediaTypeAndQuality.mediaType,\n                                formatCode: binaryRef.format\n                            });\n                        }\n                    }\n                }\n            }\n            this.playerProps.playerData.metaData.videoFiles = videoFiles;\n        }\n    }\n\n    /**\n     * @name - getMediaTypeAndQuality\n     * @description - Gets video quality and media type from stream name.\n     * @private\n     * @param {string} streamName - The stream name.\n     * @returns {any}\n     */\n    private _getMediaTypeAndQuality(format: string): { mediaType: MediaTypes; quality: MediaQuality } {\n        let mType: MediaTypes = MediaTypes.MP4;\n        let mQuality: MediaQuality = MediaQuality.SD;\n\n        switch (format) {\n            case '101':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.LO;\n                break;\n            case '102':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.SD;\n                break;\n            case '103':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.HQ;\n                break;\n            case '104':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.HDX;\n                break;\n            case '105':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.HD;\n                break;\n            case '1004':\n                mType = MediaTypes.SMOOTH;\n                break;\n            case '1006':\n                mType = MediaTypes.HLS;\n                break;\n            case '1007':\n                mType = MediaTypes.DASH;\n                break;\n            default:\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.SD;\n        }\n\n        return {\n            mediaType: mType,\n            quality: mQuality\n        };\n    }\n\n    /*\n     * @name - removeProtocolFromUrl\n     * @description - Removes protocol from url.\n     * @private\n     * @param {string} url - The url.\n     * @returns {string}\n     */\n    private _removeProtocolFromUrl(url: string): string {\n        return url.replace(/(^\\w+:|^)\\/\\//, '//');\n    }\n\n    /*\n    * @name - getVideoFileByQuality\n    * @description - Gets the video file of specified quality\n    * @private\n    * @param {MediaQuality} quality - The desired quality to look for.\n    * @param\n    * @returns {IVideoFile}\n    */\n    private _getVideoFileByQuality(quality: MediaQuality, videoFiles: IVideoFile[]): IVideoFile | null {\n        let videoFile = null;\n        for (const file of videoFiles) {\n            if (file.quality === quality) {\n                videoFile = file;\n                break;\n            }\n        }\n\n        return videoFile;\n    }\n\n    /*\n    * @name - getVideoFileByType\n    * @description - Gets the video file of specified type\n    * @private\n    * @param {MediaTypes} mediaType - The media type to look for.\n    * @returns {IVideoFile}\n    */\n    private _getVideoFileByType(mediaType: MediaTypes, videoFiles: IVideoFile[]): IVideoFile[] {\n        const videoFile: IVideoFile[] = [];\n        for (const file of videoFiles) {\n            if (file.mediaType === mediaType) {\n                videoFile.push(file);\n            }\n        }\n        return videoFile;\n    }\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}