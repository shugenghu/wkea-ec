{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{createObservableDataAction}from'@msdyn365-commerce/core';import{generateProductImageUrl,getSelectedProductIdFromActionInput}from'./utilities/utils';import{getByIdAsync,getVariantsByDimensionValuesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';/**\r\n * Get selected variant action input class\r\n */export class SelectedVariantInput{constructor(productId,channelId,matchingDimensionValues){this.getCacheKey=()=>\"SelectedVariant\";this.getCacheObjectType=()=>'SimpleProduct';this.dataCacheType=()=>'none';this.productId=productId;this.channelId=channelId;this.matchingDimensionValues=matchingDimensionValues||[];}}/**\r\n * CreateInput method for the getSelectedVariant data action\r\n * @param inputData The input data passed to the createInput method\r\n */const createInput=inputData=>{const productId=getSelectedProductIdFromActionInput(inputData);if(productId){return new SelectedVariantInput(+productId,+inputData.requestContext.apiSettings.channelId,[]);}else{throw new Error('Unable to create SelectedVariantInput, no productId found on module config or query');}};/**\r\n * Action method for the getSelectedVariant data aciton\r\n * @param input The action input class\r\n * @param ctx The action context\r\n */async function getSelectedVariantAction(input,ctx){let product=null;const response=await getByIdAsync({callerContext:ctx},input.productId,input.channelId);const baseProduct=Array.isArray(response)?response[0]:response;// Need to dereference this before editing it. Otherwise we might not\n// properly get the mobx events because if things aren't properly observable\n// they won't fire when you set them, and then if you don't deref the value in\n// the cache will match the value when you try to save it, so it won't detect any\n// changes there either\nproduct=_objectSpread({},baseProduct);if(product){let baseProductHadUnmatchedDimension=false;if(product.Dimensions){product.Dimensions.map(dimension=>{const matchedTargetDimension=input.matchingDimensionValues.find(targetDimension=>targetDimension.DimensionTypeValue===dimension.DimensionTypeValue);if(matchedTargetDimension){dimension.DimensionValue=matchedTargetDimension.DimensionValue;}else{baseProductHadUnmatchedDimension=true;}});}if(!baseProductHadUnmatchedDimension&&input.matchingDimensionValues.length>0){const variants=await getVariantsByDimensionValuesAsync({callerContext:ctx,queryResultSettings:{}},baseProduct.RecordId,input.channelId,input.matchingDimensionValues);if(variants&&variants.length>0){product=variants[0];}}const newImageUrl=generateProductImageUrl(product,ctx.requestContext.apiSettings);if(newImageUrl){product.PrimaryImageUrl=newImageUrl;}}return product;}/**\r\n * The complete getSelectedVariant data action\r\n */export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-selected-variant',action:getSelectedVariantAction,input:createInput});","map":{"version":3,"sources":["../../src/get-selected-variant.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { generateProductImageUrl, getSelectedProductIdFromActionInput } from './utilities/utils';\n\nimport { getByIdAsync, getVariantsByDimensionValuesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductDimension, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\n/**\n * Get selected variant action input class\n */\nexport class SelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public matchingDimensionValues: ProductDimension[];\n\n    constructor(productId: number, channelId: number, matchingDimensionValues?: ProductDimension[]) {\n        this.productId = productId;\n        this.channelId = channelId;\n        this.matchingDimensionValues = matchingDimensionValues || [];\n    }\n\n    public getCacheKey = () => `SelectedVariant`;\n    public getCacheObjectType = () => 'SimpleProduct';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * CreateInput method for the getSelectedVariant data action\n * @param inputData The input data passed to the createInput method\n */\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): SelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new SelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId, []);\n    } else {\n        throw new Error('Unable to create SelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * Action method for the getSelectedVariant data aciton\n * @param input The action input class\n * @param ctx The action context\n */\nasync function getSelectedVariantAction(input: SelectedVariantInput, ctx: IActionContext): Promise<SimpleProduct | null> {\n    let product: SimpleProduct | null = null;\n\n    const response = await getByIdAsync({ callerContext: ctx }, input.productId, input.channelId);\n\n    const baseProduct: SimpleProduct = Array.isArray(response) ? response[0] : response;\n\n    // Need to dereference this before editing it. Otherwise we might not\n    // properly get the mobx events because if things aren't properly observable\n    // they won't fire when you set them, and then if you don't deref the value in\n    // the cache will match the value when you try to save it, so it won't detect any\n    // changes there either\n    product = { ...baseProduct };\n\n    if (product) {\n        let baseProductHadUnmatchedDimension: boolean = false;\n        if (product.Dimensions) {\n            product.Dimensions.map(dimension => {\n                const matchedTargetDimension = input.matchingDimensionValues.find(\n                    targetDimension => targetDimension.DimensionTypeValue === dimension.DimensionTypeValue\n                );\n\n                if (matchedTargetDimension) {\n                    dimension.DimensionValue = matchedTargetDimension.DimensionValue;\n                } else {\n                    baseProductHadUnmatchedDimension = true;\n                }\n            });\n        }\n\n        if (!baseProductHadUnmatchedDimension && input.matchingDimensionValues.length > 0) {\n            const variants = await getVariantsByDimensionValuesAsync(\n                { callerContext: ctx, queryResultSettings: {} },\n                baseProduct.RecordId,\n                input.channelId,\n                input.matchingDimensionValues\n            );\n\n            if (variants && variants.length > 0) {\n                product = variants[0];\n            }\n        }\n\n        const newImageUrl = generateProductImageUrl(product, ctx.requestContext.apiSettings);\n\n        if (newImageUrl) {\n            product.PrimaryImageUrl = newImageUrl;\n        }\n    }\n\n    return product;\n}\n\n/**\n * The complete getSelectedVariant data action\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-selected-variant',\n    action: <IAction<SimpleProduct | null>>getSelectedVariantAction,\n    input: createInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}