{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import msdyn365Commerce from'@msdyn365-commerce/core-internal';/**\r\n * Context for session storage handling\r\n *\r\n * @export\r\n * @class CookieContext\r\n */export var SessionStorageContext=function SessionStorageContext(_cookieContext){var _this=this;_classCallCheck(this,SessionStorageContext);/**\r\n         * Gets the value stored in the session storage.\r\n         * Returns an empty object if no such value exists.\r\n         *\r\n         * @param {string} key - The key string.\r\n         */this.getDataFromStorage=function(key){if(key){return _this.get(key).value||{};}return{};};/**\r\n         * Sets a new key pair value in the session storage.\r\n         *\r\n         * @param {string} key - The key string.\r\n         * @param {object} value - The data object.\r\n         */this.setDataInStorage=function(key,value){if(key&&value){_this.set(key,value);}};/**\r\n         * Gets the checkout cart stored in the session storage.\r\n         * Returns an empty object if no such value exists.\r\n         *\r\n         * @param {string} key - The key string.\r\n         */this.getCheckoutCartData=function(key){if(key){return key?_this.getDataFromStorage(_this.getCheckoutCartKey(key)):{};}return{};};/**\r\n         * Sets checkout cart value in the session storage.\r\n         *\r\n         * @param {string} key - The key string.\r\n         * @param {object} value - The cart data object.\r\n         */this.setCheckoutCartData=function(key,value){if(key&&value){_this.setDataInStorage(_this.getCheckoutCartKey(key),value);}};/**\r\n         * Remove session storage by giving key\r\n         *\r\n         * @param {string} key - The key string.\r\n         */this.removeDataFromStorage=function(key){if(key){_this.remove(key);}};/**\r\n         * Remove checkout cart data from the session storage by giving key\r\n         *\r\n         * @param {string} key - The key string. If key is not provided clear all data from session storage that contais the checkout cart key prefix.\r\n         */this.removeCheckoutCartData=function(key){if(key){_this.removeDataFromStorage(_this.getCheckoutCartKey(key));}else{var keyList=Object.keys(sessionStorage);keyList.map(function(k){if(k.startsWith(\"\".concat(msdyn365Commerce.checkoutCartKeyPrefix,\"-\"))){_this.removeDataFromStorage(k);}});}};/**\r\n         * Get session storage value.\r\n         * If server side, no-op.\r\n         *\r\n         * @param {string} key - The key string\r\n         * @return {ISessionStorageValue} value with status\r\n         */this.get=function(key){if(key&&msdyn365Commerce.isBrowser){var objString=sessionStorage.getItem(key);if(objString){var obj=JSON.parse(objString);return{name:key,value:obj,status:obj?'FOUND':'NOT_FOUND'};}}return{name:key,value:undefined,status:'NOT_FOUND'};};/**\r\n         * Set session storage data.\r\n         * If server side, no-op.\r\n         *\r\n         * @param {string} key - The key string\r\n         * @param {T} value - The session storage value\r\n         */this.set=function(key,value){if(key&&msdyn365Commerce.isBrowser){sessionStorage.setItem(key,JSON.stringify(value));}};/**\r\n         * Remove session storage data by giving key\r\n         * If server side, no-op.\r\n         *\r\n         * @param {string} key - The key string\r\n         */this.remove=function(key){if(key&&msdyn365Commerce.isBrowser){sessionStorage.removeItem(key);}};/**\r\n         * Build the checkout cart key for the session storage\r\n         */this.getCheckoutCartKey=function(key){var checkoutCartCookie=_this._cookieContext.getCheckoutCartCookie();if(checkoutCartCookie){return\"\".concat(msdyn365Commerce.checkoutCartKeyPrefix,\"-\").concat(checkoutCartCookie,\"-\").concat(key);}return'';};this._cookieContext=_cookieContext;};","map":{"version":3,"sources":["../../../src/utils/session-storage-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport msdyn365Commerce, { ISessionStorageContext, ISessionStorageValue } from '@msdyn365-commerce/core-internal';\nimport { CookieContext } from './cookie-utils';\n\n/**\n * Context for session storage handling\n *\n * @export\n * @class CookieContext\n */\nexport class SessionStorageContext implements ISessionStorageContext {\n    private _cookieContext: CookieContext;\n\n    constructor(_cookieContext: CookieContext) {\n        this._cookieContext = _cookieContext;\n    }\n\n    /**\n     * Gets the value stored in the session storage.\n     * Returns an empty object if no such value exists.\n     *\n     * @param {string} key - The key string.\n     */\n    public getDataFromStorage = (key: string): object => {\n        if (key) {\n            return this.get<object>(key).value || {};\n        }\n        return {};\n    };\n\n    /**\n     * Sets a new key pair value in the session storage.\n     *\n     * @param {string} key - The key string.\n     * @param {object} value - The data object.\n     */\n    public setDataInStorage = (key: string, value: object): void => {\n        if (key && value) {\n            this.set<object>(key, value);\n        }\n    };\n\n    /**\n     * Gets the checkout cart stored in the session storage.\n     * Returns an empty object if no such value exists.\n     *\n     * @param {string} key - The key string.\n     */\n    public getCheckoutCartData = (key: string): object => {\n        if (key) {\n            return key ? this.getDataFromStorage(this.getCheckoutCartKey(key)) : {};\n        }\n        return {};\n    };\n\n    /**\n     * Sets checkout cart value in the session storage.\n     *\n     * @param {string} key - The key string.\n     * @param {object} value - The cart data object.\n     */\n    public setCheckoutCartData = (key: string, value: object): void => {\n        if (key && value) {\n            this.setDataInStorage(this.getCheckoutCartKey(key), value);\n        }\n    };\n\n    /**\n     * Remove session storage by giving key\n     *\n     * @param {string} key - The key string.\n     */\n    public removeDataFromStorage = (key: string): void => {\n        if (key) {\n            this.remove(key);\n        }\n    };\n\n    /**\n     * Remove checkout cart data from the session storage by giving key\n     *\n     * @param {string} key - The key string. If key is not provided clear all data from session storage that contais the checkout cart key prefix.\n     */\n    public removeCheckoutCartData = (key?: string): void => {\n        if (key) {\n            this.removeDataFromStorage(this.getCheckoutCartKey(key));\n        } else {\n            const keyList = Object.keys(sessionStorage);\n            keyList.map(k => {\n                if (k.startsWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-`)) {\n                    this.removeDataFromStorage(k);\n                }\n            });\n        }\n    };\n\n    /**\n     * Get session storage value.\n     * If server side, no-op.\n     *\n     * @param {string} key - The key string\n     * @return {ISessionStorageValue} value with status\n     */\n    private get = <T>(key: string): ISessionStorageValue<T> => {\n        if (key && msdyn365Commerce.isBrowser) {\n            const objString = sessionStorage.getItem(key);\n            if (objString) {\n                const obj = JSON.parse(objString);\n                return { name: key, value: <T>obj, status: obj ? 'FOUND' : 'NOT_FOUND' };\n            }\n        }\n        return { name: key, value: undefined, status: 'NOT_FOUND' };\n    };\n\n    /**\n     * Set session storage data.\n     * If server side, no-op.\n     *\n     * @param {string} key - The key string\n     * @param {T} value - The session storage value\n     */\n    private set = <T>(key: string, value: T): void => {\n        if (key && msdyn365Commerce.isBrowser) {\n            sessionStorage.setItem(key, JSON.stringify(value));\n        }\n    };\n\n    /**\n     * Remove session storage data by giving key\n     * If server side, no-op.\n     *\n     * @param {string} key - The key string\n     */\n    private remove = (key: string): void => {\n        if (key && msdyn365Commerce.isBrowser) {\n            sessionStorage.removeItem(key);\n        }\n    };\n\n    /**\n     * Build the checkout cart key for the session storage\n     */\n    private getCheckoutCartKey = (key: string): string => {\n        const checkoutCartCookie = this._cookieContext.getCheckoutCartCookie();\n        if (checkoutCartCookie) {\n            return `${msdyn365Commerce.checkoutCartKeyPrefix}-${checkoutCartCookie}-${key}`;\n        }\n        return '';\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}