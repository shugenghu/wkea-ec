{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{createObservableDataAction}from'@msdyn365-commerce/core';import getSelectedVariant,{SelectedVariantInput}from'./get-selected-variant';import{getSelectedProductIdFromActionInput}from'./utilities/utils';import{getDimensionValuesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';/**\r\n * Input class for the getDimensionsForSelectedVariant data action\r\n */export class GetDimensionsForSelectedVariantInput{constructor(productId,channelId,matchingDimensionValues){this.getCacheKey=()=>\"DimensionsForSelectedVariant\";this.getCacheObjectType=()=>'DimensionsForSelectedVariantInput';this.dataCacheType=()=>'none';this.productId=productId;this.channelId=channelId;this.matchingDimensionValues=matchingDimensionValues||[];}}/**\r\n * Create input method for the getDimensionsForSelectedVariant data action\r\n * @param inputData The input data passed to the createInput method\r\n */const createDimensionsForSelectedVariantInput=inputData=>{const productId=getSelectedProductIdFromActionInput(inputData);if(productId){return new GetDimensionsForSelectedVariantInput(+productId,+inputData.requestContext.apiSettings.channelId,[]);}else{throw new Error('Unable to create DimensionsForSelectedVariantInput, no productId found on module config or query');}};/**\r\n * Action Method for the getDimensionsForSelectedVariant Data Action\r\n */async function getDimensionsForSelectedVariantAction(input,ctx){const selectedVariantInput=new SelectedVariantInput(input.productId,input.channelId,input.matchingDimensionValues);const activeProduct=await getSelectedVariant(selectedVariantInput,ctx);if(activeProduct&&activeProduct.Dimensions&&activeProduct.Dimensions.length>0){const results=[];for(const dimension of activeProduct.Dimensions){const dimensionValues=await getDimensionValuesAsync({callerContext:ctx,queryResultSettings:{}},activeProduct.MasterProductId?activeProduct.MasterProductId:activeProduct.RecordId,input.channelId,dimension.DimensionTypeValue,input.matchingDimensionValues.filter(value=>value.DimensionTypeValue!==dimension.DimensionTypeValue),// @ts-ignore: KitVariantResolution context should be nullable\nnull);const fullDimension=_objectSpread(_objectSpread({},dimension),{},{DimensionValues:dimensionValues});results.push(fullDimension);}return results;}return[];}/**\r\n * The GetDimensionsForSelectedVariantDataAction\r\n * Get the currently selected Variant via the getSelectedVariant data action, and the gets the\r\n * available product dimensions for the variant via the getDimensionValues RetailServer API\r\n */export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-dimensions/for-selected-variant',action:getDimensionsForSelectedVariantAction,input:createDimensionsForSelectedVariantInput});","map":{"version":3,"sources":["../../src/get-dimensions-for-selected-variant.ts"],"names":[],"mappings":"i8BAEA,OAAS,0BAAT,KAAiF,yBAAjF,CAEA,MAAO,CAAA,kBAAP,EAA6B,oBAA7B,KAAyD,wBAAzD,CACA,OAAS,mCAAT,KAAoD,mBAApD,CAEA,OAAS,uBAAT,KAAwC,wEAAxC,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,oCAAoC,CAK7C,WAAA,CAAY,SAAZ,CAA+B,SAA/B,CAAkD,uBAAlD,CAA8F,CAMvF,KAAA,WAAA,CAAc,kCAAd,CACA,KAAA,kBAAA,CAAqB,IAAM,mCAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,MAAjC,CAPH,KAAK,SAAL,CAAiB,SAAjB,CACA,KAAK,SAAL,CAAiB,SAAjB,CACA,KAAK,uBAAL,CAA+B,uBAAuB,EAAI,EAA1D,CACH,CAT4C,CAgBjD;;;AAGG,GACH,KAAM,CAAA,uCAAuC,CAAI,SAAD,EAA0E,CACtH,KAAM,CAAA,SAAS,CAAG,mCAAmC,CAAC,SAAD,CAArD,CAEA,GAAI,SAAJ,CAAe,CACX,MAAO,IAAI,CAAA,oCAAJ,CAAyC,CAAC,SAA1C,CAAqD,CAAC,SAAS,CAAC,cAAV,CAAyB,WAAzB,CAAqC,SAA3F,CAAsG,EAAtG,CAAP,CACH,CAFD,IAEO,CACH,KAAM,IAAI,CAAA,KAAJ,CAAU,kGAAV,CAAN,CACH,CACJ,CARD,CAUA;;AAEG,GACH,cAAe,CAAA,qCAAf,CACI,KADJ,CAEI,GAFJ,CAEuB,CAEnB,KAAM,CAAA,oBAAoB,CAAG,GAAI,CAAA,oBAAJ,CAAyB,KAAK,CAAC,SAA/B,CAA0C,KAAK,CAAC,SAAhD,CAA2D,KAAK,CAAC,uBAAjE,CAA7B,CAEA,KAAM,CAAA,aAAa,CAAyB,KAAM,CAAA,kBAAkB,CAAC,oBAAD,CAAuB,GAAvB,CAApE,CAEA,GAAI,aAAa,EAAI,aAAa,CAAC,UAA/B,EAA6C,aAAa,CAAC,UAAd,CAAyB,MAAzB,CAAkC,CAAnF,CAAsF,CAClF,KAAM,CAAA,OAAO,CAA2B,EAAxC,CAEA,IAAK,KAAM,CAAA,SAAX,GAAwB,CAAA,aAAa,CAAC,UAAtC,CAAkD,CAC9C,KAAM,CAAA,eAAe,CAAG,KAAM,CAAA,uBAAuB,CACjD,CAAE,aAAa,CAAE,GAAjB,CAAsB,mBAAmB,CAAE,EAA3C,CADiD,CAEjD,aAAa,CAAC,eAAd,CAAgC,aAAa,CAAC,eAA9C,CAAgE,aAAa,CAAC,QAF7B,CAGjD,KAAK,CAAC,SAH2C,CAIjD,SAAS,CAAC,kBAJuC,CAKjD,KAAK,CAAC,uBAAN,CAA8B,MAA9B,CAAqC,KAAK,EAAI,KAAK,CAAC,kBAAN,GAA6B,SAAS,CAAC,kBAArF,CALiD,CAMjD;AACA,IAPiD,CAArD,CAUA,KAAM,CAAA,aAAa,gCACZ,SADY,MAEf,eAAe,CAAE,eAFF,EAAnB,CAKA,OAAO,CAAC,IAAR,CAAa,aAAb,EACH,CAED,MAAO,CAAA,OAAP,CACH,CAED,MAAO,EAAP,CACH,CAED;;;;AAIG,GACH,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,+EADkC,CAEtC,MAAM,CAAmC,qCAFH,CAGtC,KAAK,CAAE,uCAH+B,CAAD,CAAzC","sourcesContent":["import { ProductDimensionFull } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionContext, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductDimension, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport getSelectedVariant, { SelectedVariantInput } from './get-selected-variant';\nimport { getSelectedProductIdFromActionInput } from './utilities/utils';\n\nimport { getDimensionValuesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\n\n/**\n * Input class for the getDimensionsForSelectedVariant data action\n */\nexport class GetDimensionsForSelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public matchingDimensionValues: ProductDimension[];\n\n    constructor(productId: number, channelId: number, matchingDimensionValues?: ProductDimension[]) {\n        this.productId = productId;\n        this.channelId = channelId;\n        this.matchingDimensionValues = matchingDimensionValues || [];\n    }\n\n    public getCacheKey = () => `DimensionsForSelectedVariant`;\n    public getCacheObjectType = () => 'DimensionsForSelectedVariantInput';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * Create input method for the getDimensionsForSelectedVariant data action\n * @param inputData The input data passed to the createInput method\n */\nconst createDimensionsForSelectedVariantInput = (inputData: ICreateActionContext<IGeneric<IAny>>): SelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new GetDimensionsForSelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId, []);\n    } else {\n        throw new Error('Unable to create DimensionsForSelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * Action Method for the getDimensionsForSelectedVariant Data Action\n */\nasync function getDimensionsForSelectedVariantAction(\n    input: GetDimensionsForSelectedVariantInput,\n    ctx: IActionContext\n): Promise<ProductDimensionFull[]> {\n    const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId, input.matchingDimensionValues);\n\n    const activeProduct: SimpleProduct | null = await getSelectedVariant(selectedVariantInput, ctx);\n\n    if (activeProduct && activeProduct.Dimensions && activeProduct.Dimensions.length > 0) {\n        const results: ProductDimensionFull[] = [];\n\n        for (const dimension of activeProduct.Dimensions) {\n            const dimensionValues = await getDimensionValuesAsync(\n                { callerContext: ctx, queryResultSettings: {} },\n                activeProduct.MasterProductId ? activeProduct.MasterProductId : activeProduct.RecordId,\n                input.channelId,\n                dimension.DimensionTypeValue,\n                input.matchingDimensionValues.filter(value => value.DimensionTypeValue !== dimension.DimensionTypeValue),\n                // @ts-ignore: KitVariantResolution context should be nullable\n                null\n            );\n\n            const fullDimension: ProductDimensionFull = {\n                ...dimension,\n                DimensionValues: dimensionValues,\n            };\n\n            results.push(fullDimension);\n        }\n\n        return results;\n    }\n\n    return [];\n}\n\n/**\n * The GetDimensionsForSelectedVariantDataAction\n * Get the currently selected Variant via the getSelectedVariant data action, and the gets the\n * available product dimensions for the variant via the getDimensionValues RetailServer API\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-dimensions/for-selected-variant',\n    action: <IAction<ProductDimensionFull[]>>getDimensionsForSelectedVariantAction,\n    input: createDimensionsForSelectedVariantInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}