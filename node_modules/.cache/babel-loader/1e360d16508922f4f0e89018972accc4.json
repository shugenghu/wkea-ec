{"ast":null,"code":"import{DataServiceQuery}from'../DataServiceQuery';import{TransferOrderClass,TransferOrderLineClass,CommentClass,TransferOrderJournalClass,ReceiptClass}from'../Entities/CommerceModels.g';import{executeAction}from'../retail-action';function transferOrdersQuery(orderId){var key=orderId?{OrderId:orderId}:null;return new DataServiceQuery(\"TransferOrders\",\"TransferOrder\",TransferOrderClass,key);}export function createCreateInput(entity){return transferOrdersQuery().create(entity);}export function createTransferOrderAsync(context,entity){const request=createCreateInput(entity);return executeAction(request,context);}export function createUpdateInput(entity){return transferOrdersQuery(entity.OrderId).update(entity);}export function updateAsync(context,entity){const request=createUpdateInput(entity);return executeAction(request,context);}export function createDeleteAsync(entity){return transferOrdersQuery(entity.OrderId).delete();}export function deleteAsync(context,entity){const request=createDeleteAsync(entity);return executeAction(request,context);}export function createReadAsync(orderId){return transferOrdersQuery(orderId).read();}export function readAsync(context,orderId){const request=createReadAsync(orderId);return executeAction(request,context);}export function createReadAllAsync(queryResultSettings){return transferOrdersQuery().resultSettings(queryResultSettings).read();}export function readAllAsync(context){const request=createReadAllAsync(context.queryResultSettings);return executeAction(request,context);}export function createCommitInput(orderId,skipNotValidLines){const query=transferOrdersQuery(orderId);return query.createDataServiceRequestForOperation('Commit',true,'','',{bypassCache:'get',returnEntity:''},{skipNotValidLines:skipNotValidLines});}export function commitAsync(context,orderId,skipNotValidLines){const request=createCommitInput(orderId,skipNotValidLines);return executeAction(request,context);}export function createGetTransferOrderLinesInput(queryResultSettings,orderId){const query=transferOrdersQuery(orderId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetTransferOrderLines',true,TransferOrderLineClass,'true',{bypassCache:'none',returnEntity:'TransferOrderLine'},{});}export function getTransferOrderLinesAsync(context,orderId){const request=createGetTransferOrderLinesInput(context.queryResultSettings,orderId);return executeAction(request,context);}export function createCreateTransferOrderLinesInput(queryResultSettings,orderId,transferOrderLines){const query=transferOrdersQuery(orderId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('CreateTransferOrderLines',true,TransferOrderLineClass,'true',{bypassCache:'get',returnEntity:'TransferOrderLine'},{transferOrderLines:transferOrderLines});}export function createTransferOrderLinesAsync(context,orderId,transferOrderLines){const request=createCreateTransferOrderLinesInput(context.queryResultSettings,orderId,transferOrderLines);return executeAction(request,context);}export function createUpdateTransferOrderLinesInput(queryResultSettings,orderId,transferOrderLines){const query=transferOrdersQuery(orderId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('UpdateTransferOrderLines',true,TransferOrderLineClass,'true',{bypassCache:'get',returnEntity:'TransferOrderLine'},{transferOrderLines:transferOrderLines});}export function updateTransferOrderLinesAsync(context,orderId,transferOrderLines){const request=createUpdateTransferOrderLinesInput(context.queryResultSettings,orderId,transferOrderLines);return executeAction(request,context);}export function createGetTransferOrderCommentsInput(queryResultSettings,orderId){const query=transferOrdersQuery(orderId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetTransferOrderComments',true,CommentClass,'true',{bypassCache:'none',returnEntity:'Comment'},{});}export function getTransferOrderCommentsAsync(context,orderId){const request=createGetTransferOrderCommentsInput(context.queryResultSettings,orderId);return executeAction(request,context);}export function createAddTransferOrderCommentInput(orderId,authorStaffId,commentText){const query=transferOrdersQuery(orderId);return query.createDataServiceRequestForOperation('AddTransferOrderComment',true,CommentClass,'false',{bypassCache:'get',returnEntity:'Comment'},{AuthorStaffId:authorStaffId,CommentText:commentText});}export function addTransferOrderCommentAsync(context,orderId,authorStaffId,commentText){const request=createAddTransferOrderCommentInput(orderId,authorStaffId,commentText);return executeAction(request,context);}export function createDeleteTransferOrderLinesInput(queryResultSettings,orderId,transferOrderLines){const query=transferOrdersQuery(orderId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('DeleteTransferOrderLines',true,TransferOrderLineClass,'true',{bypassCache:'get',returnEntity:'TransferOrderLine'},{transferOrderLines:transferOrderLines});}export function deleteTransferOrderLinesAsync(context,orderId,transferOrderLines){const request=createDeleteTransferOrderLinesInput(context.queryResultSettings,orderId,transferOrderLines);return executeAction(request,context);}export function createGetTransferOrderJournalsInput(queryResultSettings,orderId){const query=transferOrdersQuery(orderId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetTransferOrderJournals',true,TransferOrderJournalClass,'true',{bypassCache:'none',returnEntity:'TransferOrderJournal'},{});}export function getTransferOrderJournalsAsync(context,orderId){const request=createGetTransferOrderJournalsInput(context.queryResultSettings,orderId);return executeAction(request,context);}export function createGetTransferPackingSlipInput(queryResultSettings,orderId,voucherId,receiptRetrievalCriteria){const query=transferOrdersQuery(orderId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetTransferPackingSlip',true,ReceiptClass,'true',{bypassCache:'none',returnEntity:'Receipt'},{voucherId:voucherId,receiptRetrievalCriteria:receiptRetrievalCriteria});}export function getTransferPackingSlipAsync(context,orderId,voucherId,receiptRetrievalCriteria){const request=createGetTransferPackingSlipInput(context.queryResultSettings,orderId,voucherId,receiptRetrievalCriteria);return executeAction(request,context);}","map":{"version":3,"sources":["../../src/DataActions/TransferOrdersDataActions.g.ts"],"names":[],"mappings":"AAEI,OAAS,gBAAT,KAAiC,qBAAjC,CAEA,OAAS,kBAAT,CAA6B,sBAA7B,CAAqD,YAArD,CAAmE,yBAAnE,CAA8F,YAA9F,KAAkH,8BAAlH,CAEA,OAAS,aAAT,KAA8B,kBAA9B,CAGA,QAAS,CAAA,mBAAT,CAA6B,OAA7B,CAA6C,CAC3C,GAAI,CAAA,GAAG,CAAI,OAAD,CAAY,CAAE,OAAO,CAAE,OAAX,CAAZ,CAAmC,IAA7C,CACA,MAAO,IAAI,CAAA,gBAAJ,CAAqB,gBAArB,CAAuC,eAAvC,CAAwD,kBAAxD,CAA4E,GAA5E,CAAP,CACD,CAED,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAAiD,CACnD,MAAO,CAAA,mBAAmB,GAAG,MAAtB,CAA6B,MAA7B,CAAP,CACH,CACD,MAAM,SAAU,CAAA,wBAAV,CAAmC,OAAnC,CAAsD,MAAtD,CAA2E,CAC7E,KAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAgB,OAAhB,CAAyB,OAAzB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAAiD,CACnD,MAAO,CAAA,mBAAmB,CAAC,MAAM,CAAC,OAAR,CAAnB,CAAoC,MAApC,CAA2C,MAA3C,CAAP,CACH,CACD,MAAM,SAAU,CAAA,WAAV,CAAsB,OAAtB,CAAyC,MAAzC,CAA8D,CAChE,KAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAgB,OAAhB,CAAyB,OAAzB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAAiD,CACnD,MAAO,CAAA,mBAAmB,CAAC,MAAM,CAAC,OAAR,CAAnB,CAAoC,MAApC,EAAP,CACH,CACD,MAAM,SAAU,CAAA,WAAV,CAAsB,OAAtB,CAAyC,MAAzC,CAA8D,CAChE,KAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAa,OAAb,CAAsB,OAAtB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,eAAV,CAA0B,OAA1B,CAAyC,CAC3C,MAAO,CAAA,mBAAmB,CAAC,OAAD,CAAnB,CAA6B,IAA7B,EAAP,CACH,CACD,MAAM,SAAU,CAAA,SAAV,CAAoB,OAApB,CAAuC,OAAvC,CAAsD,CACxD,KAAM,CAAA,OAAO,CAAG,eAAe,CAAC,OAAD,CAA/B,CACA,MAAO,CAAA,aAAa,CAAgB,OAAhB,CAAyB,OAAzB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,kBAAV,CAA6B,mBAA7B,CAAsE,CACxE,MAAO,CAAA,mBAAmB,GAAG,cAAtB,CAAqC,mBAArC,EAA0D,IAA1D,EAAP,CACH,CACD,MAAM,SAAU,CAAA,YAAV,CAAuB,OAAvB,CAAwC,CAC1C,KAAM,CAAA,OAAO,CAAG,kBAAkB,CAAC,OAAO,CAAC,mBAAT,CAAlC,CACA,MAAO,CAAA,aAAa,CAAkB,OAAlB,CAA2B,OAA3B,CAApB,CACH,CAED,MAAM,SAAU,CAAA,iBAAV,CAA4B,OAA5B,CAA6C,iBAA7C,CAA8E,CAChF,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAjC,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,QAA3C,CAAqD,IAArD,CAA2D,EAA3D,CAA+D,EAA/D,CAAmE,CAAE,WAAW,CAAE,KAAf,CAAsB,YAAY,CAAE,EAApC,CAAnE,CAA4G,CAAC,iBAAiB,CAAE,iBAApB,CAA5G,CAAP,CACH,CAED,MAAM,SAAU,CAAA,WAAV,CAAsB,OAAtB,CAAyC,OAAzC,CAA0D,iBAA1D,CAA2F,CAC7F,KAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,OAAD,CAAU,iBAAV,CAAjC,CACA,MAAO,CAAA,aAAa,CAAa,OAAb,CAAsB,OAAtB,CAApB,CACH,CAED,MAAM,SAAU,CAAA,gCAAV,CAA2C,mBAA3C,CAAsF,OAAtF,CAAqG,CACvG,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAnB,CAA6B,cAA7B,CAA4C,mBAA5C,CAAd,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,uBAA3C,CAAoE,IAApE,CAA0E,sBAA1E,CAAkG,MAAlG,CAA0G,CAAE,WAAW,CAAE,MAAf,CAAuB,YAAY,CAAE,mBAArC,CAA1G,CAAqK,EAArK,CAAP,CACH,CAED,MAAM,SAAU,CAAA,0BAAV,CAAqC,OAArC,CAAwD,OAAxD,CAAuE,CACzE,KAAM,CAAA,OAAO,CAAG,gCAAgC,CAAC,OAAO,CAAC,mBAAT,CAA8B,OAA9B,CAAhD,CACA,MAAO,CAAA,aAAa,CAAsB,OAAtB,CAA+B,OAA/B,CAApB,CACH,CAED,MAAM,SAAU,CAAA,mCAAV,CAA8C,mBAA9C,CAAyF,OAAzF,CAA0G,kBAA1G,CAAwJ,CAC1J,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAnB,CAA6B,cAA7B,CAA4C,mBAA5C,CAAd,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,0BAA3C,CAAuE,IAAvE,CAA6E,sBAA7E,CAAqG,MAArG,CAA6G,CAAE,WAAW,CAAE,KAAf,CAAsB,YAAY,CAAE,mBAApC,CAA7G,CAAuK,CAAC,kBAAkB,CAAE,kBAArB,CAAvK,CAAP,CACH,CAED,MAAM,SAAU,CAAA,6BAAV,CAAwC,OAAxC,CAA2D,OAA3D,CAA4E,kBAA5E,CAA0H,CAC5H,KAAM,CAAA,OAAO,CAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAT,CAA8B,OAA9B,CAAuC,kBAAvC,CAAnD,CACA,MAAO,CAAA,aAAa,CAAsB,OAAtB,CAA+B,OAA/B,CAApB,CACH,CAED,MAAM,SAAU,CAAA,mCAAV,CAA8C,mBAA9C,CAAyF,OAAzF,CAA0G,kBAA1G,CAAwJ,CAC1J,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAnB,CAA6B,cAA7B,CAA4C,mBAA5C,CAAd,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,0BAA3C,CAAuE,IAAvE,CAA6E,sBAA7E,CAAqG,MAArG,CAA6G,CAAE,WAAW,CAAE,KAAf,CAAsB,YAAY,CAAE,mBAApC,CAA7G,CAAuK,CAAC,kBAAkB,CAAE,kBAArB,CAAvK,CAAP,CACH,CAED,MAAM,SAAU,CAAA,6BAAV,CAAwC,OAAxC,CAA2D,OAA3D,CAA4E,kBAA5E,CAA0H,CAC5H,KAAM,CAAA,OAAO,CAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAT,CAA8B,OAA9B,CAAuC,kBAAvC,CAAnD,CACA,MAAO,CAAA,aAAa,CAAsB,OAAtB,CAA+B,OAA/B,CAApB,CACH,CAED,MAAM,SAAU,CAAA,mCAAV,CAA8C,mBAA9C,CAAyF,OAAzF,CAAwG,CAC1G,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAnB,CAA6B,cAA7B,CAA4C,mBAA5C,CAAd,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,0BAA3C,CAAuE,IAAvE,CAA6E,YAA7E,CAA2F,MAA3F,CAAmG,CAAE,WAAW,CAAE,MAAf,CAAuB,YAAY,CAAE,SAArC,CAAnG,CAAoJ,EAApJ,CAAP,CACH,CAED,MAAM,SAAU,CAAA,6BAAV,CAAwC,OAAxC,CAA2D,OAA3D,CAA0E,CAC5E,KAAM,CAAA,OAAO,CAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAT,CAA8B,OAA9B,CAAnD,CACA,MAAO,CAAA,aAAa,CAAY,OAAZ,CAAqB,OAArB,CAApB,CACH,CAED,MAAM,SAAU,CAAA,kCAAV,CAA6C,OAA7C,CAA8D,aAA9D,CAA4F,WAA5F,CAAsH,CACxH,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAjC,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,yBAA3C,CAAsE,IAAtE,CAA4E,YAA5E,CAA0F,OAA1F,CAAmG,CAAE,WAAW,CAAE,KAAf,CAAsB,YAAY,CAAE,SAApC,CAAnG,CAAmJ,CAAC,aAAa,CAAE,aAAhB,CAA+B,WAAW,CAAE,WAA5C,CAAnJ,CAAP,CACH,CAED,MAAM,SAAU,CAAA,4BAAV,CAAuC,OAAvC,CAA0D,OAA1D,CAA2E,aAA3E,CAAyG,WAAzG,CAAmI,CACrI,KAAM,CAAA,OAAO,CAAG,kCAAkC,CAAC,OAAD,CAAU,aAAV,CAAyB,WAAzB,CAAlD,CACA,MAAO,CAAA,aAAa,CAAU,OAAV,CAAmB,OAAnB,CAApB,CACH,CAED,MAAM,SAAU,CAAA,mCAAV,CAA8C,mBAA9C,CAAyF,OAAzF,CAA0G,kBAA1G,CAAwJ,CAC1J,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAnB,CAA6B,cAA7B,CAA4C,mBAA5C,CAAd,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,0BAA3C,CAAuE,IAAvE,CAA6E,sBAA7E,CAAqG,MAArG,CAA6G,CAAE,WAAW,CAAE,KAAf,CAAsB,YAAY,CAAE,mBAApC,CAA7G,CAAuK,CAAC,kBAAkB,CAAE,kBAArB,CAAvK,CAAP,CACH,CAED,MAAM,SAAU,CAAA,6BAAV,CAAwC,OAAxC,CAA2D,OAA3D,CAA4E,kBAA5E,CAA0H,CAC5H,KAAM,CAAA,OAAO,CAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAT,CAA8B,OAA9B,CAAuC,kBAAvC,CAAnD,CACA,MAAO,CAAA,aAAa,CAAsB,OAAtB,CAA+B,OAA/B,CAApB,CACH,CAED,MAAM,SAAU,CAAA,mCAAV,CAA8C,mBAA9C,CAAyF,OAAzF,CAAwG,CAC1G,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAnB,CAA6B,cAA7B,CAA4C,mBAA5C,CAAd,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,0BAA3C,CAAuE,IAAvE,CAA6E,yBAA7E,CAAwG,MAAxG,CAAgH,CAAE,WAAW,CAAE,MAAf,CAAuB,YAAY,CAAE,sBAArC,CAAhH,CAA8K,EAA9K,CAAP,CACH,CAED,MAAM,SAAU,CAAA,6BAAV,CAAwC,OAAxC,CAA2D,OAA3D,CAA0E,CAC5E,KAAM,CAAA,OAAO,CAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAT,CAA8B,OAA9B,CAAnD,CACA,MAAO,CAAA,aAAa,CAAyB,OAAzB,CAAkC,OAAlC,CAApB,CACH,CAED,MAAM,SAAU,CAAA,iCAAV,CAA4C,mBAA5C,CAAuF,OAAvF,CAAwG,SAAxG,CAAkI,wBAAlI,CAA2L,CAC7L,KAAM,CAAA,KAAK,CAAG,mBAAmB,CAAC,OAAD,CAAnB,CAA6B,cAA7B,CAA4C,mBAA5C,CAAd,CACA,MAAO,CAAA,KAAK,CAAC,oCAAN,CAA2C,wBAA3C,CAAqE,IAArE,CAA2E,YAA3E,CAAyF,MAAzF,CAAiG,CAAE,WAAW,CAAE,MAAf,CAAuB,YAAY,CAAE,SAArC,CAAjG,CAAkJ,CAAC,SAAS,CAAE,SAAZ,CAAuB,wBAAwB,CAAE,wBAAjD,CAAlJ,CAAP,CACH,CAED,MAAM,SAAU,CAAA,2BAAV,CAAsC,OAAtC,CAAyD,OAAzD,CAA0E,SAA1E,CAAoG,wBAApG,CAA6J,CAC/J,KAAM,CAAA,OAAO,CAAG,iCAAiC,CAAC,OAAO,CAAC,mBAAT,CAA8B,OAA9B,CAAuC,SAAvC,CAAkD,wBAAlD,CAAjD,CACA,MAAO,CAAA,aAAa,CAAY,OAAZ,CAAqB,OAArB,CAApB,CACH","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { TransferOrder, TransferOrderLine, Comment, TransferOrderJournal, ReceiptRetrievalCriteria, Receipt } from '../Entities/CommerceTypes.g';\n    import { TransferOrderClass, TransferOrderLineClass, CommentClass, TransferOrderJournalClass, ReceiptClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function transferOrdersQuery(orderId?: string): DataServiceQuery {\n      var key = (orderId) ? { OrderId: orderId } : null;\n      return new DataServiceQuery(\"TransferOrders\", \"TransferOrder\", TransferOrderClass, key);\n    }\n    \n    export function createCreateInput(entity: TransferOrder): IDataServiceRequest {\n        return transferOrdersQuery().create(entity);\n    }\n    export function createTransferOrderAsync(context: IContext, entity: TransferOrder): AsyncResult<TransferOrder> {\n        const request = createCreateInput(entity, );\n        return executeAction<TransferOrder>(request, context);\n    }\n    export function createUpdateInput(entity: TransferOrder): IDataServiceRequest {\n        return transferOrdersQuery(entity.OrderId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: TransferOrder): AsyncResult<TransferOrder> {\n        const request = createUpdateInput(entity, );\n        return executeAction<TransferOrder>(request, context);\n    }\n    export function createDeleteAsync(entity: TransferOrder): IDataServiceRequest {\n        return transferOrdersQuery(entity.OrderId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: TransferOrder): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(orderId: string): IDataServiceRequest {\n        return transferOrdersQuery(orderId).read();\n    }\n    export function readAsync(context: IContext, orderId: string): AsyncResult<TransferOrder> {\n        const request = createReadAsync(orderId, );\n        return executeAction<TransferOrder>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return transferOrdersQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<TransferOrder[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<TransferOrder[]>(request, context);\n    }\n    \n    export function createCommitInput(orderId: string, skipNotValidLines: boolean | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId);\n        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, {skipNotValidLines: skipNotValidLines });\n    }    \n    \n    export function commitAsync(context: IContext, orderId: string, skipNotValidLines: boolean | null):AsyncResult<NullResult> {\n        const request = createCommitInput(orderId, skipNotValidLines, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createGetTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'none', returnEntity: 'TransferOrderLine'}, { });\n    }    \n    \n    export function getTransferOrderLinesAsync(context: IContext, orderId: string):AsyncResult<TransferOrderLine[]> {\n        const request = createGetTransferOrderLinesInput(context.queryResultSettings, orderId, );\n        return executeAction<TransferOrderLine[]>(request, context);\n    }          \n          \n    export function createCreateTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('CreateTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });\n    }    \n    \n    export function createTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {\n        const request = createCreateTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );\n        return executeAction<TransferOrderLine[]>(request, context);\n    }          \n          \n    export function createUpdateTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('UpdateTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });\n    }    \n    \n    export function updateTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {\n        const request = createUpdateTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );\n        return executeAction<TransferOrderLine[]>(request, context);\n    }          \n          \n    export function createGetTransferOrderCommentsInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTransferOrderComments', true, CommentClass, 'true', { bypassCache: 'none', returnEntity: 'Comment'}, { });\n    }    \n    \n    export function getTransferOrderCommentsAsync(context: IContext, orderId: string):AsyncResult<Comment[]> {\n        const request = createGetTransferOrderCommentsInput(context.queryResultSettings, orderId, );\n        return executeAction<Comment[]>(request, context);\n    }          \n          \n    export function createAddTransferOrderCommentInput(orderId: string, authorStaffId: string | null, commentText: string | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId);\n        return query.createDataServiceRequestForOperation('AddTransferOrderComment', true, CommentClass, 'false', { bypassCache: 'get', returnEntity: 'Comment'}, {AuthorStaffId: authorStaffId, CommentText: commentText });\n    }    \n    \n    export function addTransferOrderCommentAsync(context: IContext, orderId: string, authorStaffId: string | null, commentText: string | null):AsyncResult<Comment> {\n        const request = createAddTransferOrderCommentInput(orderId, authorStaffId, commentText, );\n        return executeAction<Comment>(request, context);\n    }          \n          \n    export function createDeleteTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('DeleteTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });\n    }    \n    \n    export function deleteTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {\n        const request = createDeleteTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );\n        return executeAction<TransferOrderLine[]>(request, context);\n    }          \n          \n    export function createGetTransferOrderJournalsInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTransferOrderJournals', true, TransferOrderJournalClass, 'true', { bypassCache: 'none', returnEntity: 'TransferOrderJournal'}, { });\n    }    \n    \n    export function getTransferOrderJournalsAsync(context: IContext, orderId: string):AsyncResult<TransferOrderJournal[]> {\n        const request = createGetTransferOrderJournalsInput(context.queryResultSettings, orderId, );\n        return executeAction<TransferOrderJournal[]>(request, context);\n    }          \n          \n    export function createGetTransferPackingSlipInput(queryResultSettings: IQueryResultSettings, orderId: string, voucherId: string | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTransferPackingSlip', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {voucherId: voucherId, receiptRetrievalCriteria: receiptRetrievalCriteria });\n    }    \n    \n    export function getTransferPackingSlipAsync(context: IContext, orderId: string, voucherId: string | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null):AsyncResult<Receipt[]> {\n        const request = createGetTransferPackingSlipInput(context.queryResultSettings, orderId, voucherId, receiptRetrievalCriteria, );\n        return executeAction<Receipt[]>(request, context);\n    }          \n          \n    "],"sourceRoot":""},"metadata":{},"sourceType":"module"}