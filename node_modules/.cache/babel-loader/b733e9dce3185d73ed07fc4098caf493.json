{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */export var getProductInfoFromCart=function getProductInfoFromCart(cart,productData,requestContext){cart=Array.isArray(cart)?cart[0]:cart;return _getProductInfoFromCartLines(cart,productData,requestContext);};var _getProductInfoFromCartLines=function _getProductInfoFromCartLines(cartObject,productData,requestContext){var cartLineProductUnits=[];if(cartObject&&cartObject.CartLines&&Array.isArray(cartObject.CartLines)&&cartObject.CartLines.length>0){cartObject.CartLines.forEach(function(cartLineitem){if(cartLineitem.ProductId){var productInfo=productData[cartLineitem.ProductId];if(productInfo){cartLineProductUnits.push({productChannelId:'',productChannelName:'',productCategoryId:'',productCategoryName:'',productId:productInfo.productId,productName:productInfo.productName,productSku:productInfo.productSku,productPrice:cartLineitem.Price?cartLineitem.Price.toString():'',productQuantity:cartLineitem.Quantity?cartLineitem.Quantity.toString():'',productCurrency:''});}}});}return{cartId:cartObject.Id,cartVersion:cartObject.Version?cartObject.Version.toString():'',products:cartLineProductUnits,orderId:cartObject.OrderNumber?cartObject.OrderNumber.toString():''};};export var getProductTransactionInfoFromSalesOrder=function getProductTransactionInfoFromSalesOrder(salesOrder,productData){salesOrder=Array.isArray(salesOrder)?salesOrder[0]:salesOrder;return{id:salesOrder.Id,affiliation:salesOrder.ChannelId?salesOrder.ChannelId.toString():'',revenue:salesOrder.NetAmountWithoutTax,tax:salesOrder.TaxAmount,products:_getProductInfoFromSalesLines(salesOrder,productData)};};var _getProductInfoFromSalesLines=function _getProductInfoFromSalesLines(salesObject,productData){var saleLineProductUnits=[];if(salesObject&&salesObject.SalesLines&&Array.isArray(salesObject.SalesLines)&&salesObject.SalesLines.length>0){salesObject.SalesLines.forEach(function(saleLineitem){if(saleLineitem.ProductId){var productInfo=productData[saleLineitem.ProductId];if(productInfo){saleLineProductUnits.push({productChannelId:'',productChannelName:'',productCategoryId:'',productCategoryName:'',productId:productInfo.productId,productName:productInfo.productName,productSku:productInfo.productSku,productPrice:saleLineitem.Price?saleLineitem.Price.toString():'',productQuantity:saleLineitem.Quantity?saleLineitem.Quantity.toString():'',productCurrency:''});}}});}return saleLineProductUnits;};export var getProductInfoFromSimpleProduct=function getProductInfoFromSimpleProduct(simpleProduct,requestContext){simpleProduct=Array.isArray(simpleProduct)?simpleProduct[0]:simpleProduct;var recordId=simpleProduct.RecordId||'';return{productId:simpleProduct.MasterProductId?simpleProduct.MasterProductId.toString():recordId.toString(),productSku:recordId?recordId.toString():'',productName:simpleProduct.Name||simpleProduct.Description||'',productPrice:simpleProduct.Price?simpleProduct.Price.toString():'',productChannelId:'',productChannelName:'',productCategoryId:'',productCategoryName:'',productQuantity:'',productCurrency:''};};","map":{"version":3,"sources":["actions/telemetry.action.helper.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAny, IDictionary, IRequestContext } from '@msdyn365-commerce/core-internal';\nimport { Cart, CartLine, SalesLine, SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { ICartInfo, IProductInfo, IProductTransaction } from '@msdyn365-commerce/telemetry-internal';\n\n/**\n * getProductInfoFromCart\n * @param cart Cart object\n * @param productData Product data\n * @param requestContext Request Context\n */\nexport const getProductInfoFromCart = (cart: Cart | Cart[], productData: IDictionary<IAny>, requestContext: IRequestContext): ICartInfo => {\n    // ToDo: Need to revisit this when we make sure that we can expect only one cart and not array\n    cart = Array.isArray(cart) ? cart[0] : cart;\n    return _getProductInfoFromCartLines(cart, productData, requestContext);\n};\n\n/**\n * _getProductInfoFromCartLines\n * @param cartObject Cart object\n * @param productData Product data\n * @param requestContext Request context\n */\nconst _getProductInfoFromCartLines = (cartObject: Cart, productData: IDictionary<IAny>, requestContext: IRequestContext): ICartInfo => {\n    const cartLineProductUnits: IProductInfo[] = [];\n    if (cartObject && cartObject.CartLines && Array.isArray(cartObject.CartLines) && cartObject.CartLines.length > 0) {\n        cartObject.CartLines.forEach((cartLineitem: CartLine) => {\n            if (cartLineitem.ProductId) {\n                // The product id in cartLine actually contains recordId and not master product id so we can use it up here to lookup product.\n                const productInfo = <IProductInfo>productData[cartLineitem.ProductId];\n                if (productInfo) {\n                    cartLineProductUnits.push({\n                        productChannelId: '',\n                        productChannelName: '',\n                        productCategoryId: '',\n                        productCategoryName: '',\n                        productId: productInfo.productId,\n                        productName: productInfo.productName,\n                        productSku: productInfo.productSku,\n                        productPrice: cartLineitem.Price ? cartLineitem.Price.toString() : '',\n                        productQuantity: cartLineitem.Quantity ? cartLineitem.Quantity.toString() : '',\n                        productCurrency: ''\n                    });\n                }\n            }\n        });\n    }\n\n    return {\n        cartId: cartObject.Id,\n        cartVersion: cartObject.Version ? cartObject.Version.toString() : '',\n        products: cartLineProductUnits,\n        orderId: cartObject.OrderNumber ? cartObject.OrderNumber.toString() : ''\n    };\n};\n\n/**\n * getProductTransactionInfoFromSalesOrder\n * @param salesOrder Sales order\n * @param productData Product data\n */\nexport const getProductTransactionInfoFromSalesOrder = (\n    salesOrder: SalesOrder | SalesOrder[],\n    productData: IDictionary<IAny>\n): IProductTransaction => {\n    // ToDo: Need to revisit this when we make sure that we can expect only one sales order and not array\n    salesOrder = Array.isArray(salesOrder) ? salesOrder[0] : salesOrder;\n\n    return {\n        id: salesOrder.Id,\n        affiliation: salesOrder.ChannelId ? salesOrder.ChannelId.toString() : '',\n        revenue: salesOrder.NetAmountWithoutTax,\n        tax: salesOrder.TaxAmount,\n        // shippingCost?: // Confirm if it is delivery mode charge amount;\n        products: _getProductInfoFromSalesLines(salesOrder, productData)\n    };\n};\n\n/**\n * _getProductInfoFromSalesLines\n * @param salesObject Sales object\n * @param productData Product dat\n */\nconst _getProductInfoFromSalesLines = (salesObject: SalesOrder, productData: IDictionary<IAny>): IProductInfo[] => {\n    const saleLineProductUnits: IProductInfo[] = [];\n    if (salesObject && salesObject.SalesLines && Array.isArray(salesObject.SalesLines) && salesObject.SalesLines.length > 0) {\n        salesObject.SalesLines.forEach((saleLineitem: SalesLine) => {\n            if (saleLineitem.ProductId) {\n                // The product id in salesLine actually contains recordId and not master product id so we can use it up here to lookup product.\n                const productInfo = <IProductInfo>productData[saleLineitem.ProductId];\n                if (productInfo) {\n                    saleLineProductUnits.push({\n                        productChannelId: '',\n                        productChannelName: '',\n                        productCategoryId: '',\n                        productCategoryName: '',\n                        productId: productInfo.productId, // This is already precooked to contain master product id\n                        productName: productInfo.productName,\n                        productSku: productInfo.productSku, // This is a;ready precooked to contain record id\n                        productPrice: saleLineitem.Price ? saleLineitem.Price.toString() : '',\n                        productQuantity: saleLineitem.Quantity ? saleLineitem.Quantity.toString() : '',\n                        productCurrency: ''\n                    });\n                }\n            }\n        });\n    }\n\n    return saleLineProductUnits;\n};\n\n/**\n * getProductInfoFromSimpleProduct\n * @param simpleProduct Simple product\n * @param requestContext Request context\n */\nexport const getProductInfoFromSimpleProduct = (\n    simpleProduct: SimpleProduct | SimpleProduct[],\n    requestContext: IRequestContext\n): IProductInfo => {\n    // ToDo: Need to revisit this when we make sure that we can expect only one cart and not array\n    simpleProduct = Array.isArray(simpleProduct) ? simpleProduct[0] : simpleProduct;\n\n    const recordId = simpleProduct.RecordId || '';\n\n    return {\n        // If master product id is not available then product record id is master product id\n        productId: simpleProduct.MasterProductId ? simpleProduct.MasterProductId.toString() : recordId.toString(),\n        productSku: recordId ? recordId.toString() : '',\n        productName: simpleProduct.Name || simpleProduct.Description || '',\n        productPrice: simpleProduct.Price ? simpleProduct.Price.toString() : '',\n        productChannelId: '',\n        productChannelName: '',\n        productCategoryId: '',\n        productCategoryName: '',\n        productQuantity: '',\n        productCurrency: ''\n    };\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}