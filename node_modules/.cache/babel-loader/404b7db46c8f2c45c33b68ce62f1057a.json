{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{ActiveCartProductsInput,getActiveCartProductsAction,getAvailabilitiesForCartLineItems,getDeliveryOptionsForCartLineItems,ProductAvailabilitiesForCartLineItems,ProductDeliveryOptionsForCartLineItems}from'@msdyn365-commerce-modules/retail-actions';import{getCartState}from'@msdyn365-commerce/global-state';export const createInput=()=>{return new ActiveCartProductsInput();};export async function getMiniCartData(ctx){const miniCartData={};const cartState=await getCartState(ctx);const cart=cartState.cart;if(cart&&cart.CartLines&&cart.CartLines.length){await getActiveCartProductsAction(new ActiveCartProductsInput(),ctx).then(products=>{if(products){miniCartData.products=products;}}).catch(error=>{ctx.telemetry.exception(error);throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');});await getAvailabilitiesForCartLineItems(new ProductAvailabilitiesForCartLineItems(ctx.requestContext.apiSettings),ctx).then(availableQuantity=>{if(availableQuantity){miniCartData.productAvailabilites=availableQuantity;}}).catch(error=>{ctx.telemetry.exception(error);throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');});await getDeliveryOptionsForCartLineItems(new ProductDeliveryOptionsForCartLineItems(ctx.requestContext.apiSettings),ctx).then(deliveryOptions=>{if(deliveryOptions){miniCartData.deliveryOptions=deliveryOptions;}}).catch(error=>{ctx.telemetry.exception(error);throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');});}return miniCartData;}","map":{"version":3,"sources":["modules/cart-icon/utils/get-products-in-mini-cart.ts"],"names":[],"mappings":"sCAAA,OAAS,uBAAT,CAAkC,2BAAlC,CAA+D,iCAA/D,CAAkG,kCAAlG,CAAoK,qCAApK,CAA2M,sCAA3M,KAAyP,2CAAzP,CAEA,OAAS,YAAT,KAA6B,iCAA7B,CAYA,MAAO,MAAM,CAAA,WAAW,CAAG,IAAK,CAC5B,MAAO,IAAI,CAAA,uBAAJ,EAAP,CACH,CAFM,CAOP,MAAO,eAAe,CAAA,eAAf,CAA+B,GAA/B,CAAkD,CACrD,KAAM,CAAA,YAAY,CAAkB,EAApC,CAEA,KAAM,CAAA,SAAS,CAAG,KAAM,CAAA,YAAY,CAAC,GAAD,CAApC,CACA,KAAM,CAAA,IAAI,CAAG,SAAS,CAAC,IAAvB,CAGA,GAAI,IAAI,EAAI,IAAI,CAAC,SAAb,EAA0B,IAAI,CAAC,SAAL,CAAe,MAA7C,CAAqD,CACjD,KAAM,CAAA,2BAA2B,CAC7B,GAAI,CAAA,uBAAJ,EAD6B,CAE7B,GAF6B,CAA3B,CAID,IAJC,CAII,QAAQ,EAAG,CACb,GAAI,QAAJ,CAAc,CACV,YAAY,CAAC,QAAb,CAAwB,QAAxB,CACH,CACJ,CARC,EASD,KATC,CASK,KAAK,EAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,4EAAV,CAAN,CACH,CAZC,CAAN,CAcA,KAAM,CAAA,iCAAiC,CACnC,GAAI,CAAA,qCAAJ,CAA0C,GAAG,CAAC,cAAJ,CAAmB,WAA7D,CADmC,CAEnC,GAFmC,CAAjC,CAID,IAJC,CAII,iBAAiB,EAAG,CACtB,GAAI,iBAAJ,CAAuB,CACnB,YAAY,CAAC,oBAAb,CAAqC,iBAArC,CACH,CACJ,CARC,EASD,KATC,CASK,KAAK,EAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,4EAAV,CAAN,CACH,CAZC,CAAN,CAcA,KAAM,CAAA,kCAAkC,CACpC,GAAI,CAAA,sCAAJ,CAA2C,GAAG,CAAC,cAAJ,CAAmB,WAA9D,CADoC,CAEpC,GAFoC,CAAlC,CAID,IAJC,CAII,eAAe,EAAG,CACpB,GAAI,eAAJ,CAAqB,CACjB,YAAY,CAAC,eAAb,CAA+B,eAA/B,CACH,CACJ,CARC,EASD,KATC,CASK,KAAK,EAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,4EAAV,CAAN,CACH,CAZC,CAAN,CAaH,CAED,MAAO,CAAA,YAAP,CACH","sourcesContent":["import { ActiveCartProductsInput, getActiveCartProductsAction, getAvailabilitiesForCartLineItems, getDeliveryOptionsForCartLineItems, IProductInventoryInformation, ProductAvailabilitiesForCartLineItems, ProductDeliveryOptionsForCartLineItems } from '@msdyn365-commerce-modules/retail-actions';\nimport { IActionContext } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { ProductDeliveryOptions, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\n\n/**\n * IMiniCartData entity interface.\n */\nexport interface IMiniCartData {\n    products?: SimpleProduct[];\n    productAvailabilites?: IProductInventoryInformation[];\n    deliveryOptions?: ProductDeliveryOptions[];\n}\n\nexport const createInput = () => {\n    return new ActiveCartProductsInput();\n};\n\n/**\n * Calls the Retail API and returns a mini cart data\n */\nexport async function getMiniCartData(ctx: IActionContext): Promise<IMiniCartData> {\n    const miniCartData: IMiniCartData = {};\n\n    const cartState = await getCartState(ctx);\n    const cart = cartState.cart;\n\n    // If there are cart lines, make call to get products\n    if (cart && cart.CartLines && cart.CartLines.length) {\n        await getActiveCartProductsAction(\n            new ActiveCartProductsInput(),\n            ctx\n        )\n            .then(products => {\n                if (products) {\n                    miniCartData.products = products;\n                }\n            })\n            .catch(error => {\n                ctx.telemetry.exception(error);\n                throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');\n            });\n\n        await getAvailabilitiesForCartLineItems(\n            new ProductAvailabilitiesForCartLineItems(ctx.requestContext.apiSettings),\n            ctx\n        )\n            .then(availableQuantity => {\n                if (availableQuantity) {\n                    miniCartData.productAvailabilites =  availableQuantity;\n                }\n            })\n            .catch(error => {\n                ctx.telemetry.exception(error);\n                throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');\n            });\n\n        await getDeliveryOptionsForCartLineItems(\n            new ProductDeliveryOptionsForCartLineItems(ctx.requestContext.apiSettings),\n            ctx\n        )\n            .then(deliveryOptions => {\n                if (deliveryOptions) {\n                    miniCartData.deliveryOptions = deliveryOptions;\n                }\n            })\n            .catch(error => {\n                ctx.telemetry.exception(error);\n                throw new Error('[getActiveCartWithProdcuts]Unable to hydrate cart with product information');\n            });\n    }\n\n    return miniCartData;\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}