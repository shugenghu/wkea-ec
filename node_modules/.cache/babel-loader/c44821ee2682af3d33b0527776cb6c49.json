{"ast":null,"code":"import _typeof from\"@babel/runtime/helpers/esm/typeof\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=o[Symbol.iterator]();},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-floating-promises\nimport{p}from'../helpers';import{LogLevel}from'../interfaces';import{getFilteredData}from'../privacy/dynamics-privacy-helper';import{safeStringify}from'./logging-helper';/**\r\n * This is a logger that stores logs so they can be sent back with the response\r\n */export var RetainLogger=/*#__PURE__*/function(){function RetainLogger(){_classCallCheck(this,RetainLogger);this.logList=[];}/**\r\n     * @internal\r\n     * Retains a trace message\r\n     * @param logLevel LogLevel of the message\r\n     * @param context Telemetry context to add to log\r\n     * @param messageTemplate Structured log formatted string\r\n     * @param placeholders List of placeholders in messageTemplate along with position in string\r\n     * @param values Arguments to replace placeholders\r\n     * @param customTags Array of strings to attach to log\r\n     */_createClass(RetainLogger,[{key:\"sendLog\",value:function sendLog(logLevel,context,messageTemplate,// tslint:disable-next-line:no-any\nplaceholders,customTags,exception){// Add message template\nthis.logList.push({logLevel:logLevel,message:messageTemplate});// Add arguments\nvar _iterator=_createForOfIteratorHelper(placeholders.values()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var value=_step.value;// Get filtered data out of placeholder if it is a privacy object\nvar data=getFilteredData(value);this.logList.push({logLevel:logLevel,message:safeStringify(data)});}}catch(err){_iterator.e(err);}finally{_iterator.f();}}/**\r\n     * @internal\r\n     * Retains a trace message\r\n     * @param logLevel Severity level of the log\r\n     * @param message String to log\r\n     * @param args Any additional objects to log\r\n     * @param context Additional properties to add to the log\r\n     */},{key:\"log\",value:function log(logLevel,message,args,context){var _this=this;this.logList.push({logLevel:logLevel,message:message});// Append extra arguments to the message as strings (stringifying json objects as necessary)\nargs.forEach(function(arg){p(function(){var data=String(arg);if(_typeof(arg)==='object'){try{data=JSON.stringify(arg);}catch(err){// If the data is unable to be stringified\n// eat the error and log data as is\n}}_this.logList.push({logLevel:logLevel,message:data});});});}/**\r\n     * @internal\r\n     * Retains an error object\r\n     * @param error Error object to log\r\n     * @param context Additional properties to add to the log\r\n     */},{key:\"exception\",value:function exception(_exception,context){this.logList.push({logLevel:LogLevel.Error,message:\"\".concat(_exception.name,\": \").concat(_exception.message)});}/**\r\n     * @internal\r\n     * Retains a metric\r\n     * @param name Name of the metric to log\r\n     * @param value Value of the metric to log\r\n     * @param context Additional properties to add to the log\r\n     */},{key:\"trackMetric\",value:function trackMetric(name,value,context){var logLevel=LogLevel.Information;var message=\"\".concat(name,\": \").concat(value);this.logList.push({logLevel:logLevel,message:message});}},{key:\"trackEvent\",value:function trackEvent(name,properties,measurements){var message=JSON.stringify({eventName:name,properties:properties,measurements:measurements});this.logList.push({message:message,logLevel:LogLevel.Information});}/**\r\n     * Track a page view\r\n     *\r\n     * @param {string} name\r\n     * @param {string} [url]\r\n     */},{key:\"trackPageView\",value:function trackPageView(name,url){this.trackEvent('trackPageView',{url:url});}/**\r\n     * Track request\r\n     * @param options the request options\r\n     */},{key:\"trackDependency\",value:function trackDependency(options){this.trackEvent('trackRequest',options);}},{key:\"getLogs\",value:function getLogs(){return this.logList;}}]);return RetainLogger;}();","map":{"version":3,"sources":["../../../src/loggers/retain-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-floating-promises\nimport { p } from '../helpers';\nimport { ILog, ITelemetryContext, ITraceLogger, LogLevel } from '../interfaces';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { getFilteredData } from '../privacy/dynamics-privacy-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * This is a logger that stores logs so they can be sent back with the response\n */\nexport class RetainLogger implements ITraceLogger {\n    private logList: ILog[] = [];\n\n    /**\n     * @internal\n     * Retains a trace message\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Add message template\n        this.logList.push({ logLevel, message: messageTemplate });\n\n        // Add arguments\n        for (const value of placeholders.values()) {\n            // Get filtered data out of placeholder if it is a privacy object\n            const data = getFilteredData(value);\n\n            this.logList.push({ logLevel, message: safeStringify(data) });\n        }\n    }\n\n    /**\n     * @internal\n     * Retains a trace message\n     * @param logLevel Severity level of the log\n     * @param message String to log\n     * @param args Any additional objects to log\n     * @param context Additional properties to add to the log\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        this.logList.push({ logLevel, message });\n        // Append extra arguments to the message as strings (stringifying json objects as necessary)\n        args.forEach((arg: unknown) => {\n            p(() => {\n                let data: string = String(arg);\n                if (typeof arg === 'object') {\n                    try {\n                        data = JSON.stringify(arg);\n                    } catch (err) {\n                        // If the data is unable to be stringified\n                        // eat the error and log data as is\n                    }\n                }\n                this.logList.push({ logLevel, message: data });\n            });\n        });\n    }\n\n    /**\n     * @internal\n     * Retains an error object\n     * @param error Error object to log\n     * @param context Additional properties to add to the log\n     */\n    public exception(exception: Error, context: ITelemetryContext): void {\n        this.logList.push({ logLevel: LogLevel.Error, message: `${exception.name}: ${exception.message}` });\n    }\n\n    /**\n     * @internal\n     * Retains a metric\n     * @param name Name of the metric to log\n     * @param value Value of the metric to log\n     * @param context Additional properties to add to the log\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        const logLevel: LogLevel = LogLevel.Information;\n        const message: string = `${name}: ${value}`;\n\n        this.logList.push({ logLevel, message });\n    }\n\n    public trackEvent<TProperties, TMeasurements>(name: string, properties?: TProperties, measurements?: TMeasurements): void {\n        const message = JSON.stringify({\n            eventName: name,\n            properties,\n            measurements\n        });\n        this.logList.push({ message, logLevel: LogLevel.Information });\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        this.trackEvent('trackPageView', { url });\n    }\n\n    /**\n     * Track request\n     * @param options the request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        this.trackEvent('trackRequest', options);\n    }\n\n    public getLogs(): ILog[] {\n        return this.logList;\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}