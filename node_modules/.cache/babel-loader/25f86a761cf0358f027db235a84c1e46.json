{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"@babel/runtime/helpers/esm/toConsumableArray\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{createAddressManagementInput,doAddressManagementOperation}from'./add-address';// TODO: Centralize this logic in a common utility area\nexport function updateAddressHandler(customer,address){customer.Addresses=customer.Addresses||[];if(address.IsPrimary){customer.Addresses.forEach(function(cur){return cur.IsPrimary=false;});}customer.Addresses=[].concat(_toConsumableArray(customer.Addresses.filter(function(cur){return cur.RecordId!==address.RecordId;})),[address]);return customer;}export function updateAddressAction(_x,_x2){return _updateAddressAction.apply(this,arguments);}/**\r\n * The updateAddress data action\r\n * Calls the read RetailServer API to get information about a customer\r\n * Merge the passed address information with the address information from\r\n * the retireved customer, and then updates that customer via the update RetailServer API.\r\n */function _updateAddressAction(){_updateAddressAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",doAddressManagementOperation(input,ctx,updateAddressHandler));case 1:case\"end\":return _context.stop();}}},_callee);}));return _updateAddressAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/update-address',action:updateAddressAction,input:createAddressManagementInput});","map":{"version":3,"sources":["../../src/update-address.ts"],"names":[],"mappings":"oNACA,OAAS,0BAAT,KAAuE,yBAAvE,CAEA,OAAS,4BAAT,CAAuC,4BAAvC,KAAoG,eAApG,CAEA;AACA,MAAM,SAAU,CAAA,oBAAV,CAA+B,QAA/B,CAAmD,OAAnD,CAAmE,CACrE,QAAQ,CAAC,SAAT,CAAqB,QAAQ,CAAC,SAAT,EAAsB,EAA3C,CACA,GAAI,OAAO,CAAC,SAAZ,CAAuB,CACnB,QAAQ,CAAC,SAAT,CAAmB,OAAnB,CAA2B,SAAA,GAAG,QAAI,CAAA,GAAG,CAAC,SAAJ,CAAgB,KAApB,EAA9B,EACH,CACD,QAAQ,CAAC,SAAT,8BAAyB,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAA0B,SAAA,GAAG,QAAI,CAAA,GAAG,CAAC,QAAJ,GAAiB,OAAO,CAAC,QAA7B,EAA7B,CAAzB,GAA8F,OAA9F,GACA,MAAO,CAAA,QAAP,CACH,CAED,eAAsB,CAAA,mBAAtB,4DAIA;;;;;AAKG,G,6GATI,iBAAmC,KAAnC,CAAmE,GAAnE,kJACI,4BAA4B,CAAC,KAAD,CAAQ,GAAR,CAAa,oBAAb,CADhC,wD,sDAUP,cAAe,CAAA,0BAA0B,CAAY,CACjD,EAAE,CAAE,0DAD6C,CAEjD,MAAM,CAAsB,mBAFqB,CAGjD,KAAK,CAAuD,4BAHX,CAAZ,CAAzC","sourcesContent":["import { IAction, IActionContext, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IAny, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { Address, Customer } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { createAddressManagementInput, doAddressManagementOperation, IAddressManagementInput } from './add-address';\n\n// TODO: Centralize this logic in a common utility area\nexport function updateAddressHandler(customer: Customer, address: Address): Customer {\n    customer.Addresses = customer.Addresses || [];\n    if (address.IsPrimary) {\n        customer.Addresses.forEach(cur => cur.IsPrimary = false)\n    }\n    customer.Addresses = [...customer.Addresses.filter(cur => cur.RecordId !== address.RecordId), address];\n    return customer;\n}\n\nexport async function updateAddressAction(input: IAddressManagementInput, ctx: IActionContext): Promise<Address[]> {\n    return doAddressManagementOperation(input, ctx, updateAddressHandler);\n}\n\n/**\n * The updateAddress data action\n * Calls the read RetailServer API to get information about a customer\n * Merge the passed address information with the address information from\n * the retireved customer, and then updates that customer via the update RetailServer API.\n */\nexport default createObservableDataAction<Address[]>({\n    id: '@msdyn365-commerce-modules/retail-actions/update-address',\n    action: <IAction<Address[]>>updateAddressAction,\n    input: <(args: ICreateActionContext) => IActionInput>(<IAny>createAddressManagementInput)\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}