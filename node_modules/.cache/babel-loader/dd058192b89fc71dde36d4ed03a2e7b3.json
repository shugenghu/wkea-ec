{"ast":null,"code":"import\"core-js/modules/web.dom-collections.iterator.js\";/**\r\n * The function that maps a ProductWareHouse object into a ProductAvailabilityQuantity\r\n */export function mapProductInventoryInformation(ctx,productsWarehouseInventory){const productInventoryInformation=[];if(ctx.requestContext.app.config.enableStockCheck===undefined||ctx.requestContext.app.config.enableStockCheck===false){return productInventoryInformation;}if(productsWarehouseInventory&&productsWarehouseInventory.length>0){for(const product of productsWarehouseInventory){switch(ctx.requestContext.app.config.inventoryLevel){case'physicalAvailable':// Inventory level is enabled with Physical inventory\nconst physicalProductMap=mapInventoryWithPhysicalBufferEnabled(ctx,product);if(physicalProductMap){productInventoryInformation.push(physicalProductMap);}break;case'totalAvailable':// Inventory level is enabled with Total available inventory\nconst totalAvailableProductMap=mapInventoryWithTotalAvailableBufferEnabled(ctx,product);if(totalAvailableProductMap){productInventoryInformation.push(totalAvailableProductMap);}break;default:// when inventory level is inventoryThreshold or not defined\nconst productMap=mapInventoryWithThresholdEnabled(ctx,product);if(productMap){productInventoryInformation.push(productMap);}break;}}}return productInventoryInformation;}export function mapInventoryWithThresholdEnabled(ctx,productWarehouseInventoryAvailability){if(productWarehouseInventoryAvailability&&productWarehouseInventoryAvailability.ProductId&&productWarehouseInventoryAvailability.TotalAvailable!==undefined){const productQty=productWarehouseInventoryAvailability.TotalAvailable-ctx.requestContext.app.config.outOfStockThreshold;const productAvailableQuantity={ProductId:productWarehouseInventoryAvailability.ProductId,AvailableQuantity:productQty>0?productQty:0};return{ProductAvailableQuantity:productAvailableQuantity,IsProductAvailable:productAvailableQuantity.AvailableQuantity&&productAvailableQuantity.AvailableQuantity>0?true:false,InventLocationId:productWarehouseInventoryAvailability.InventLocationId};}return null;}export function mapInventoryWithPhysicalBufferEnabled(ctx,productWarehouseInventoryAvailability){const shouldRenderLabel=displayLabelEnabled(ctx,productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode);if(productWarehouseInventoryAvailability&&productWarehouseInventoryAvailability.ProductId&&productWarehouseInventoryAvailability.TotalAvailable!==undefined){// As per the new buffer logic from RS, \n//if code is out of stock then we set the available quantity to 0 regardless of the actual value from API\nconst productQuantity=productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode==='OOS'?0:productWarehouseInventoryAvailability.PhysicalAvailable;const productAvailableQuantity={ProductId:productWarehouseInventoryAvailability.ProductId,AvailableQuantity:productQuantity};return{ProductAvailableQuantity:productAvailableQuantity,StockLevelCode:shouldRenderLabel?productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode:undefined,StockLevelLabel:shouldRenderLabel?productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelLabel:undefined,IsProductAvailable:productAvailableQuantity.AvailableQuantity!=undefined&&productAvailableQuantity.AvailableQuantity>0,InventLocationId:productWarehouseInventoryAvailability.InventLocationId};}return null;}export function mapInventoryWithTotalAvailableBufferEnabled(ctx,productWarehouseInventoryAvailability){const shouldRenderLabel=displayLabelEnabled(ctx,productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode);if(productWarehouseInventoryAvailability&&productWarehouseInventoryAvailability.ProductId&&productWarehouseInventoryAvailability.TotalAvailable!==undefined){// As per the new buffer logic from RS, \n//if code is out of stock then we set the available quantity to 0 regardless of the actual value from API\nconst productQuantity=productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode==='OOS'?0:productWarehouseInventoryAvailability.TotalAvailable;const productAvailableQuantity={ProductId:productWarehouseInventoryAvailability.ProductId,AvailableQuantity:productQuantity};return{ProductAvailableQuantity:productAvailableQuantity,StockLevelCode:shouldRenderLabel?productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode:undefined,StockLevelLabel:shouldRenderLabel?productWarehouseInventoryAvailability.TotalAvailableInventoryLevelLabel:undefined,IsProductAvailable:productAvailableQuantity.AvailableQuantity!=undefined&&productAvailableQuantity.AvailableQuantity>0,InventLocationId:productWarehouseInventoryAvailability.InventLocationId};}return null;}export function displayLabelEnabled(ctx,inventoryCode){if(!inventoryCode){return false;}switch(ctx.requestContext.app.config.inventoryRanges){case'lowAndOutofStock':if(inventoryCode!=='AVAIL'){return true;}break;case'outOfStock':if(inventoryCode=='OOS'){return true;}break;case'all':return true;}return false;}","map":{"version":3,"sources":["../../../src/utilities/product-inventory-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { ProductAvailableQuantity, ProductWarehouseInventoryAvailability } from '@msdyn365-commerce/retail-proxy';\nimport { IProductInventoryInformation } from './product-inventory-information';\n\n/**\n * The function that maps a ProductWareHouse object into a ProductAvailabilityQuantity\n */\nexport function mapProductInventoryInformation(ctx: IActionContext,productsWarehouseInventory?: ProductWarehouseInventoryAvailability[]): IProductInventoryInformation[] {\n    const productInventoryInformation: IProductInventoryInformation[] = [];\n\n    if(ctx.requestContext.app.config.enableStockCheck === undefined || ctx.requestContext.app.config.enableStockCheck === false) {\n        return productInventoryInformation;\n    }\n\n    if(productsWarehouseInventory && productsWarehouseInventory.length > 0) {\n        for(const product of productsWarehouseInventory) {\n            switch(ctx.requestContext.app.config.inventoryLevel){\n                case 'physicalAvailable':\n                    // Inventory level is enabled with Physical inventory\n                    const physicalProductMap = mapInventoryWithPhysicalBufferEnabled(ctx, product);\n                    if(physicalProductMap){\n                        productInventoryInformation.push(physicalProductMap);\n                    }\n                    break;\n                case 'totalAvailable':\n                    // Inventory level is enabled with Total available inventory\n                    const totalAvailableProductMap = mapInventoryWithTotalAvailableBufferEnabled(ctx, product);\n                    if(totalAvailableProductMap){\n                        productInventoryInformation.push(totalAvailableProductMap);\n                    }\n                    break;\n                default:\n                    // when inventory level is inventoryThreshold or not defined\n                    const productMap = mapInventoryWithThresholdEnabled(ctx, product);\n                    if(productMap){\n                        productInventoryInformation.push(productMap);\n                    }\n                    break;\n            }\n        }\n    }\n    return productInventoryInformation;\n}\n\nexport function mapInventoryWithThresholdEnabled(ctx: IActionContext, productWarehouseInventoryAvailability: ProductWarehouseInventoryAvailability) : IProductInventoryInformation | null {\n    if(productWarehouseInventoryAvailability && productWarehouseInventoryAvailability.ProductId && productWarehouseInventoryAvailability.TotalAvailable!==undefined) {\n        const productQty = productWarehouseInventoryAvailability.TotalAvailable - ctx.requestContext.app.config.outOfStockThreshold;\n        const productAvailableQuantity: ProductAvailableQuantity = {\n            ProductId: productWarehouseInventoryAvailability.ProductId, \n            AvailableQuantity: productQty > 0? productQty : 0\n        }\n\n        return {\n            ProductAvailableQuantity:productAvailableQuantity,\n            IsProductAvailable: productAvailableQuantity.AvailableQuantity && productAvailableQuantity.AvailableQuantity > 0 ? true : false,\n            InventLocationId: productWarehouseInventoryAvailability.InventLocationId\n        };\n    }\n\n    return null;\n}\n\nexport function mapInventoryWithPhysicalBufferEnabled(ctx: IActionContext, productWarehouseInventoryAvailability: ProductWarehouseInventoryAvailability): IProductInventoryInformation | null {\n    const shouldRenderLabel = displayLabelEnabled(ctx, productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode);\n\n    if(productWarehouseInventoryAvailability && productWarehouseInventoryAvailability.ProductId && productWarehouseInventoryAvailability.TotalAvailable !== undefined) {\n        // As per the new buffer logic from RS, \n        //if code is out of stock then we set the available quantity to 0 regardless of the actual value from API\n        const productQuantity = productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode === 'OOS' \n            ? 0 \n            :productWarehouseInventoryAvailability.PhysicalAvailable;\n\n        const productAvailableQuantity: ProductAvailableQuantity = {\n            ProductId: productWarehouseInventoryAvailability.ProductId, \n            AvailableQuantity: productQuantity\n        }\n        return {\n            ProductAvailableQuantity:productAvailableQuantity,\n            StockLevelCode: shouldRenderLabel? productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelCode: undefined,\n            StockLevelLabel: shouldRenderLabel? productWarehouseInventoryAvailability.PhysicalAvailableInventoryLevelLabel: undefined,\n            IsProductAvailable: productAvailableQuantity.AvailableQuantity != undefined && (productAvailableQuantity.AvailableQuantity > 0),\n            InventLocationId: productWarehouseInventoryAvailability.InventLocationId\n        };\n    }\n\n    return null;\n}\n\nexport function mapInventoryWithTotalAvailableBufferEnabled(ctx: IActionContext, productWarehouseInventoryAvailability: ProductWarehouseInventoryAvailability): IProductInventoryInformation | null {\n    const shouldRenderLabel = displayLabelEnabled(ctx, productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode);\n    if(productWarehouseInventoryAvailability && productWarehouseInventoryAvailability.ProductId && productWarehouseInventoryAvailability.TotalAvailable !== undefined) {\n       // As per the new buffer logic from RS, \n        //if code is out of stock then we set the available quantity to 0 regardless of the actual value from API\n        const productQuantity = productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode === 'OOS' \n            ? 0 \n            :productWarehouseInventoryAvailability.TotalAvailable;\n\n        const productAvailableQuantity: ProductAvailableQuantity = {\n            ProductId: productWarehouseInventoryAvailability.ProductId, \n            AvailableQuantity: productQuantity\n        }\n        return {\n            ProductAvailableQuantity:productAvailableQuantity,\n            StockLevelCode: shouldRenderLabel? productWarehouseInventoryAvailability.TotalAvailableInventoryLevelCode: undefined,\n            StockLevelLabel: shouldRenderLabel? productWarehouseInventoryAvailability.TotalAvailableInventoryLevelLabel: undefined,\n            IsProductAvailable: productAvailableQuantity.AvailableQuantity != undefined && (productAvailableQuantity.AvailableQuantity > 0),\n            InventLocationId: productWarehouseInventoryAvailability.InventLocationId\n        };\n    }\n\n    return null;\n}\n\nexport function displayLabelEnabled(ctx: IActionContext,  inventoryCode?:string) : boolean {\n   if(!inventoryCode){\n       return false;\n   }\n\n    switch(ctx.requestContext.app.config.inventoryRanges) {\n        case 'lowAndOutofStock':\n                if(inventoryCode !== 'AVAIL'){\n                    return true;\n                }\n            break;\n        case 'outOfStock':\n                if(inventoryCode == 'OOS'){\n                    return true;\n                }\n            break;\n        case 'all':\n            return true;\n    }\n    return false;\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}