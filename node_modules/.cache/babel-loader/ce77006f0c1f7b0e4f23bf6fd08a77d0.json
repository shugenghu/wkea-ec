{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{addCartLinesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';// tslint:disable-next-line:cyclomatic-complexity\nexport default async function addProductToCartInternal(cart,cartLineToAdd,actionContext,availableQuantity,enableStockCheck,isAddServiceItemToCart){if(!cart.CartLines){return{cart:undefined,status:'FAILED'};}const maxQuantityForCartLineItem=actionContext.requestContext.app.config.maxQuantityForCartLineItem;let quantityLimit;if(enableStockCheck===false){quantityLimit=maxQuantityForCartLineItem||10;}else{if(maxQuantityForCartLineItem===undefined&&availableQuantity===undefined){quantityLimit=10;}else if(availableQuantity===undefined){quantityLimit=maxQuantityForCartLineItem;}else if(maxQuantityForCartLineItem===undefined){quantityLimit=availableQuantity;}else{quantityLimit=Math.min(maxQuantityForCartLineItem,availableQuantity);}}let elementFoundAt=-1;const productIdToFind=cartLineToAdd.ProductId;for(let i=0;i<cart.CartLines.length;i++){if(cart.CartLines[i].ProductId===productIdToFind&&(cart.CartLines[i].DeliveryMode||'')===(cartLineToAdd.DeliveryMode||'')&&(cart.CartLines[i].FulfillmentStoreId||'')===(cartLineToAdd.FulfillmentStoreId||'')){elementFoundAt=i;break;}}if(!isAddServiceItemToCart&&elementFoundAt!==-1){const cartLineToUpdate=_objectSpread({},cart.CartLines[elementFoundAt]);const curQuantity=cartLineToUpdate.Quantity||0;if(curQuantity+(cartLineToAdd.Quantity||1)>quantityLimit){return{cart:{Id:cart.Id,CartLines:cart.CartLines},status:'FAILED',substatus:'MAXQUANTITY'};}}const newCartLine=_objectSpread({},cartLineToAdd);if(!isAddServiceItemToCart&&cartLineToAdd&&cartLineToAdd.Quantity&&cartLineToAdd.Quantity>quantityLimit){return{cart:{Id:cart.Id,CartLines:cart.CartLines},status:'FAILED',substatus:'MAXQUANTITY'};}newCartLine.Quantity=cartLineToAdd.Quantity||1;if(cart.Version){return addCartLinesAsync({callerContext:actionContext},cart.Id,[newCartLine],cart.Version).then(newCart=>{return{cart:newCart,status:'SUCCESS'};}).catch(error=>{actionContext.telemetry.trace(error);actionContext.telemetry.trace('Unable to add Cart Line');return{cart:undefined,status:'FAILED'};});}else{actionContext.telemetry.warning('Unable to update Cart Line, Cart Version could not be found');}return{cart:undefined,status:'FAILED'};}","map":{"version":3,"sources":["cart-state/add-product-to-cart.ts"],"names":[],"mappings":"y4BACA,OAAS,iBAAT,KAAkC,qEAAlC,CAIA;AACA,cAAe,eAAe,CAAA,wBAAf,CAAwC,IAAxC,CAA8D,aAA9D,CAAuF,aAAvF,CAAsH,iBAAtH,CACwC,gBADxC,CACoE,sBADpE,CACoG,CAC/G,GAAI,CAAC,IAAI,CAAC,SAAV,CAAqB,CACjB,MAAO,CAAE,IAAI,CAAE,SAAR,CAAmB,MAAM,CAAE,QAA3B,CAAP,CACH,CAED,KAAM,CAAA,0BAA0B,CAAG,aAAa,CAAC,cAAd,CAA6B,GAA7B,CAAiC,MAAjC,CAAwC,0BAA3E,CACA,GAAI,CAAA,aAAJ,CAEA,GAAI,gBAAgB,GAAK,KAAzB,CAAgC,CAC5B,aAAa,CAAG,0BAA0B,EAAI,EAA9C,CACH,CAFD,IAEO,CACH,GAAI,0BAA0B,GAAK,SAA/B,EAA4C,iBAAiB,GAAK,SAAtE,CAAiF,CAC7E,aAAa,CAAG,EAAhB,CACH,CAFD,IAEO,IAAI,iBAAiB,GAAK,SAA1B,CAAqC,CACxC,aAAa,CAAG,0BAAhB,CACH,CAFM,IAEA,IAAI,0BAA0B,GAAK,SAAnC,CAA8C,CACjD,aAAa,CAAG,iBAAhB,CACH,CAFM,IAEA,CACH,aAAa,CAAG,IAAI,CAAC,GAAL,CAAS,0BAAT,CAAqC,iBAArC,CAAhB,CACH,CACJ,CAED,GAAI,CAAA,cAAc,CAAU,CAAC,CAA7B,CACA,KAAM,CAAA,eAAe,CAAG,aAAa,CAAC,SAAtC,CAEA,IAAK,GAAI,CAAA,CAAC,CAAG,CAAb,CAAgB,CAAC,CAAG,IAAI,CAAC,SAAL,CAAe,MAAnC,CAA2C,CAAC,EAA5C,CAAgD,CAC5C,GAAI,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,SAAlB,GAAgC,eAAhC,EACA,CAAC,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,YAAlB,EAAkC,EAAnC,KAA4C,aAAa,CAAC,YAAd,EAA8B,EAA1E,CADA,EAEA,CAAC,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,kBAAlB,EAAwC,EAAzC,KAAkD,aAAa,CAAC,kBAAd,EAAoC,EAAtF,CAFJ,CAE+F,CAC3F,cAAc,CAAG,CAAjB,CAEA,MACH,CACJ,CAED,GAAI,CAAC,sBAAD,EAA2B,cAAc,GAAK,CAAC,CAAnD,CAAsD,CAClD,KAAM,CAAA,gBAAgB,kBAAO,IAAI,CAAC,SAAL,CAAe,cAAf,CAAP,CAAtB,CACA,KAAM,CAAA,WAAW,CAAG,gBAAgB,CAAC,QAAjB,EAA6B,CAAjD,CAEA,GAAI,WAAW,EAAI,aAAa,CAAC,QAAd,EAA0B,CAA9B,CAAX,CAA8C,aAAlD,CAAiE,CAC7D,MAAO,CACH,IAAI,CAAE,CACF,EAAE,CAAE,IAAI,CAAC,EADP,CAEF,SAAS,CAAE,IAAI,CAAC,SAFd,CADH,CAKH,MAAM,CAAE,QALL,CAMH,SAAS,CAAE,aANR,CAAP,CAQH,CACJ,CAED,KAAM,CAAA,WAAW,kBAAO,aAAP,CAAjB,CAEA,GAAI,CAAC,sBAAD,EAA2B,aAA3B,EAA4C,aAAa,CAAC,QAA1D,EAAsE,aAAa,CAAC,QAAd,CAAyB,aAAnG,CAAkH,CAC9G,MAAO,CACH,IAAI,CAAE,CACF,EAAE,CAAE,IAAI,CAAC,EADP,CAEF,SAAS,CAAE,IAAI,CAAC,SAFd,CADH,CAKH,MAAM,CAAE,QALL,CAMH,SAAS,CAAE,aANR,CAAP,CAQH,CAED,WAAW,CAAC,QAAZ,CAAuB,aAAa,CAAC,QAAd,EAA0B,CAAjD,CAEA,GAAI,IAAI,CAAC,OAAT,CAAkB,CACd,MAAO,CAAA,iBAAiB,CAAC,CAAE,aAAa,CAAE,aAAjB,CAAD,CAAmC,IAAI,CAAC,EAAxC,CAA4C,CAAC,WAAD,CAA5C,CAA2D,IAAI,CAAC,OAAhE,CAAjB,CACN,IADM,CACD,OAAO,EAAG,CACZ,MAAmC,CAAE,IAAI,CAAE,OAAR,CAAiB,MAAM,CAAE,SAAzB,CAAnC,CACH,CAHM,EAGJ,KAHI,CAGE,KAAK,EAAG,CACb,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAA8B,KAA9B,EACA,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAA8B,yBAA9B,EAEA,MAAmC,CAAE,IAAI,CAAE,SAAR,CAAmB,MAAM,CAAE,QAA3B,CAAnC,CACH,CARM,CAAP,CASH,CAVD,IAUO,CACH,aAAa,CAAC,SAAd,CAAwB,OAAxB,CAAgC,6DAAhC,EACH,CAED,MAAmC,CAAE,IAAI,CAAE,SAAR,CAAmB,MAAM,CAAE,QAA3B,CAAnC,CACH","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { addCartLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { Cart, CartLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { ICartActionResultWithCart } from './cart-action-result';\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport default async function addProductToCartInternal(cart: Readonly<Cart>, cartLineToAdd: CartLine, actionContext: IActionContext, availableQuantity?: number,\n                                                       enableStockCheck?: boolean, isAddServiceItemToCart?: boolean): Promise<ICartActionResultWithCart> {\n    if (!cart.CartLines) {\n        return { cart: undefined, status: 'FAILED' };\n    }\n\n    const maxQuantityForCartLineItem = actionContext.requestContext.app.config.maxQuantityForCartLineItem;\n    let quantityLimit: number;\n\n    if (enableStockCheck === false) {\n        quantityLimit = maxQuantityForCartLineItem || 10;\n    } else {\n        if (maxQuantityForCartLineItem === undefined && availableQuantity === undefined) {\n            quantityLimit = 10;\n        } else if (availableQuantity === undefined) {\n            quantityLimit = maxQuantityForCartLineItem;\n        } else if (maxQuantityForCartLineItem === undefined) {\n            quantityLimit = availableQuantity;\n        } else {\n            quantityLimit = Math.min(maxQuantityForCartLineItem, availableQuantity);\n        }\n    }\n\n    let elementFoundAt:number = -1;\n    const productIdToFind = cartLineToAdd.ProductId;\n\n    for (let i = 0; i < cart.CartLines.length; i++) {\n        if (cart.CartLines[i].ProductId === productIdToFind &&\n            (cart.CartLines[i].DeliveryMode || '') === (cartLineToAdd.DeliveryMode || '') &&\n            (cart.CartLines[i].FulfillmentStoreId || '') === (cartLineToAdd.FulfillmentStoreId || '')) {\n            elementFoundAt = i;\n\n            break;\n        }\n    }\n\n    if (!isAddServiceItemToCart && elementFoundAt !== -1) {\n        const cartLineToUpdate = {...cart.CartLines[elementFoundAt]};\n        const curQuantity = cartLineToUpdate.Quantity || 0;\n\n        if (curQuantity + (cartLineToAdd.Quantity || 1) > quantityLimit) {\n            return {\n                cart: {\n                    Id: cart.Id,\n                    CartLines: cart.CartLines\n                },\n                status: 'FAILED',\n                substatus: 'MAXQUANTITY'\n            };\n        }\n    }\n\n    const newCartLine = {...cartLineToAdd};\n\n    if (!isAddServiceItemToCart && cartLineToAdd && cartLineToAdd.Quantity && cartLineToAdd.Quantity > quantityLimit) {\n        return {\n            cart: {\n                Id: cart.Id,\n                CartLines: cart.CartLines\n            },\n            status: 'FAILED',\n            substatus: 'MAXQUANTITY'\n        };\n    }\n\n    newCartLine.Quantity = cartLineToAdd.Quantity || 1;\n\n    if (cart.Version) {\n        return addCartLinesAsync({ callerContext: actionContext }, cart.Id, [newCartLine], cart.Version)\n        .then(newCart => {\n            return <ICartActionResultWithCart> { cart: newCart, status: 'SUCCESS' };\n        }).catch(error => {\n            actionContext.telemetry.trace(error);\n            actionContext.telemetry.trace('Unable to add Cart Line');\n\n            return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED' };\n        });\n    } else {\n        actionContext.telemetry.warning('Unable to update Cart Line, Cart Version could not be found');\n    }\n\n    return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED' };\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}