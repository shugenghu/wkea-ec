{"ast":null,"code":"import{TelemetryBase}from'./telemetry-base';/**\r\n * Telemetry client containing trace loggers\r\n */export class InternalTelemetry extends TelemetryBase{/**\r\n     * Creates a new instance of InternalTelemetry.\r\n     */constructor(){super();this.setTelemetryModuleContext=moduleContext=>{return()=>{// Create copy of telemetry object with specified module context\n// TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?\nconst telemetryWithContext=new InternalTelemetry();telemetryWithContext._enableDataAnalytics=this._enableDataAnalytics;telemetryWithContext._webAnalyticsPlugin=this._webAnalyticsPlugin;telemetryWithContext._traceLoggers=this._traceLoggers;telemetryWithContext._eventLoggers=this._eventLoggers;telemetryWithContext._expLogger=this._expLogger;telemetryWithContext._attributeRenderers=this._attributeRenderers;telemetryWithContext._telemetryContext.requestContext=this._telemetryContext.requestContext;telemetryWithContext._telemetryContext.moduleContext=moduleContext;return telemetryWithContext;};};/**\r\n         * Logs a structured message at the given log level, with optional custom tags and/or an exception\r\n         * @param logLevel LogLevel of the message\r\n         * @param messageTemplate String to log, denoting placeholders with {placeholder}.\r\n         * Example input string: \"Hello {signedInUser}! Good {morningOrEvening}!\"\r\n         * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.\r\n         * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.\r\n         */this.log=(logLevel,messageTemplate,logOptions)=>{this._log(logLevel,messageTemplate,logOptions);};}}","map":{"version":3,"sources":["../../../src/telemetry/internal-telemetry.ts"],"names":[],"mappings":"AAMA,OAAS,aAAT,KAA8B,kBAA9B,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,iBAAP,QAAiC,CAAA,aAAa,CAChD;;AAEG,OACH,WAAA,EAAA,CACI,QAGG,KAAA,yBAAA,CAA6B,aAAD,EAA2C,CAC1E,MAAO,IAAK,CACR;AACA;AACA,KAAM,CAAA,oBAAoB,CAAG,GAAI,CAAA,iBAAJ,EAA7B,CACA,oBAAoB,CAAC,oBAArB,CAA4C,KAAK,oBAAjD,CACA,oBAAoB,CAAC,mBAArB,CAA2C,KAAK,mBAAhD,CACA,oBAAoB,CAAC,aAArB,CAAqC,KAAK,aAA1C,CACA,oBAAoB,CAAC,aAArB,CAAqC,KAAK,aAA1C,CACA,oBAAoB,CAAC,UAArB,CAAkC,KAAK,UAAvC,CACA,oBAAoB,CAAC,mBAArB,CAA2C,KAAK,mBAAhD,CACA,oBAAoB,CAAC,iBAArB,CAAuC,cAAvC,CAAwD,KAAK,iBAAL,CAAuB,cAA/E,CACA,oBAAoB,CAAC,iBAArB,CAAuC,aAAvC,CAAuD,aAAvD,CAEA,MAAO,CAAA,oBAAP,CACH,CAdD,CAeH,CAhBM,CAkBP;;;;;;;AAOG,WACI,KAAA,GAAA,CAAM,CAAC,QAAD,CAAqB,eAArB,CAA8C,UAA9C,GAAgG,CACzG,KAAK,IAAL,CAAU,QAAV,CAAoB,eAApB,CAAqC,UAArC,EACH,CAFM,CA5BN,CAN+C","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { IInternalTelemetry, ITelemetryModuleContext, LogLevel } from '../interfaces';\nimport { InternalTelemetryLogOptions } from './internal-telemetry-log-options';\nimport { TelemetryBase } from './telemetry-base';\n\n/**\n * Telemetry client containing trace loggers\n */\nexport class InternalTelemetry extends TelemetryBase implements IInternalTelemetry {\n    /**\n     * Creates a new instance of InternalTelemetry.\n     */\n    public constructor() {\n        super();\n    }\n\n    public setTelemetryModuleContext = (moduleContext: ITelemetryModuleContext) => {\n        return () => {\n            // Create copy of telemetry object with specified module context\n            // TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?\n            const telemetryWithContext = new InternalTelemetry();\n            telemetryWithContext._enableDataAnalytics = this._enableDataAnalytics;\n            telemetryWithContext._webAnalyticsPlugin = this._webAnalyticsPlugin;\n            telemetryWithContext._traceLoggers = this._traceLoggers;\n            telemetryWithContext._eventLoggers = this._eventLoggers;\n            telemetryWithContext._expLogger = this._expLogger;\n            telemetryWithContext._attributeRenderers = this._attributeRenderers;\n            telemetryWithContext._telemetryContext.requestContext = this._telemetryContext.requestContext;\n            telemetryWithContext._telemetryContext.moduleContext = moduleContext;\n\n            return telemetryWithContext;\n        };\n    };\n\n    /**\n     * Logs a structured message at the given log level, with optional custom tags and/or an exception\n     * @param logLevel LogLevel of the message\n     * @param messageTemplate String to log, denoting placeholders with {placeholder}.\n     * Example input string: \"Hello {signedInUser}! Good {morningOrEvening}!\"\n     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.\n     * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.\n     */\n    public log = (logLevel: LogLevel, messageTemplate: string, logOptions?: InternalTelemetryLogOptions): void => {\n        this._log(logLevel, messageTemplate, logOptions);\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}