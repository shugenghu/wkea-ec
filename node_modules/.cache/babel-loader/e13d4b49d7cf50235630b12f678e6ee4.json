{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import{buildCacheKey,mapProductInventoryInformation}from'@msdyn365-commerce-modules/retail-actions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getEstimatedAvailabilityAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{ActiveWishlistInput,getActiveWishlistItems}from'./get-items-in-wishlists';export class ProductAvailabilitiesForWishlistItems{constructor(apiSettings){this.getCacheKey=()=>buildCacheKey(\"ActiveWishlistItemsAvailability\",this.apiSettings);this.getCacheObjectType=()=>\"ActiveWishlistItemsAvailability\";this.dataCacheType=()=>'request';this.apiSettings=apiSettings;}}const createInput=inputData=>{return new ProductAvailabilitiesForWishlistItems(inputData.requestContext.apiSettings);};export async function getAvailabilitiesForWishlistItems(input,ctx){if(!input){throw new Error('[getAvailabilitiesForWishlistItems]No valid Input was provided, failing');}const products=await getActiveWishlistItems(new ActiveWishlistInput(),ctx);if(!products){ctx.trace('[getAvailabilitiesForWishlistItems] Not able to get products in wishlist');return[];}const validProducts=[];for(const product of products){if(product.ProductDetails&&product.ProductDetails.RecordId){validProducts.push(product.ProductDetails.RecordId);}}if(validProducts.length===0){ctx.trace('[getAvailabilitiesForWishlistItems] No products in wishlist');return[];}const productAvailabilites=await getEstimatedAvailabilityAsync({callerContext:ctx},{ProductIds:validProducts,DefaultWarehouseOnly:true});if(productAvailabilites&&productAvailabilites){return mapProductInventoryInformation(ctx,productAvailabilites===null||productAvailabilites===void 0?void 0:productAvailabilites.ProductWarehouseInventoryAvailabilities);}else{ctx.trace('[getAvailabilitiesForWishlistItems] unable to get availabilites for product');return[];}}export default createObservableDataAction({id:'@msdyn365-commerce-modules/wishlist/wishlist-items/get-product-availabilities-wishlist-items',action:getAvailabilitiesForWishlistItems,input:createInput});","map":{"version":3,"sources":["modules/wishlist-items/actions/get-product-availabilities-wishlist-items.ts"],"names":[],"mappings":"8FAAA,OAAS,aAAT,CAAsD,8BAAtD,KAA4F,2CAA5F,CACA,OAAoB,0BAApB,KAAyJ,yBAAzJ,CACA,OAAS,6BAAT,KAA8C,wEAA9C,CACA,OAAS,mBAAT,CAA8B,sBAA9B,KAA4D,0BAA5D,CAKA,MAAM,MAAO,CAAA,qCAAqC,CAG9C,WAAA,CAAY,WAAZ,CAA6C,CAItC,KAAA,WAAA,CAAc,IAAM,aAAa,mCAAoC,KAAK,WAAzC,CAAjC,CACA,KAAA,kBAAA,CAAqB,qCAArB,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CALH,KAAK,WAAL,CAAmB,WAAnB,CACH,CAL6C,CAYlD,KAAM,CAAA,WAAW,CAAI,SAAD,EAAoD,CACpE,MAAO,IAAI,CAAA,qCAAJ,CAA0C,SAAS,CAAC,cAAV,CAAyB,WAAnE,CAAP,CACH,CAFD,CAOA,MAAO,eAAe,CAAA,iCAAf,CAAiD,KAAjD,CAA+F,GAA/F,CAAkH,CAErH,GAAI,CAAC,KAAL,CAAY,CACR,KAAM,IAAI,CAAA,KAAJ,CAAU,yEAAV,CAAN,CACH,CAED,KAAM,CAAA,QAAQ,CAAG,KAAM,CAAA,sBAAsB,CAAC,GAAI,CAAA,mBAAJ,EAAD,CAA4B,GAA5B,CAA7C,CAEA,GAAG,CAAC,QAAJ,CAAc,CACV,GAAG,CAAC,KAAJ,CAAU,0EAAV,EACA,MAAuC,EAAvC,CACH,CAED,KAAM,CAAA,aAAa,CAAa,EAAhC,CAEA,IAAI,KAAM,CAAA,OAAV,GAAqB,CAAA,QAArB,CAA+B,CAC3B,GAAG,OAAO,CAAC,cAAR,EAA0B,OAAO,CAAC,cAAR,CAAuB,QAApD,CAA8D,CAC1D,aAAa,CAAC,IAAd,CAAmB,OAAO,CAAC,cAAR,CAAuB,QAA1C,EACH,CACJ,CAED,GAAI,aAAa,CAAC,MAAd,GAAyB,CAA7B,CAAgC,CAC5B,GAAG,CAAC,KAAJ,CAAU,6DAAV,EACA,MAAuC,EAAvC,CACH,CAED,KAAM,CAAA,oBAAoB,CAAG,KAAM,CAAA,6BAA6B,CAAC,CAAC,aAAa,CAAC,GAAf,CAAD,CAAsB,CAAC,UAAU,CAAE,aAAb,CAA4B,oBAAoB,CAAC,IAAjD,CAAtB,CAAhE,CAEA,GAAG,oBAAoB,EAAI,oBAA3B,CAAiD,CAC7C,MAAO,CAAA,8BAA8B,CAAC,GAAD,CAAM,oBAAN,SAAM,oBAAN,iBAAM,oBAAoB,CAAE,uCAA5B,CAArC,CACH,CAFD,IAEO,CACH,GAAG,CAAC,KAAJ,CAAU,6EAAV,EACA,MAAuC,EAAvC,CACH,CACJ,CAED,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,8FADkC,CAEtC,MAAM,CAA2C,iCAFX,CAGtC,KAAK,CAAE,WAH+B,CAAD,CAAzC","sourcesContent":["import { buildCacheKey, IProductInventoryInformation, mapProductInventoryInformation } from '@msdyn365-commerce-modules/retail-actions';\nimport { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getEstimatedAvailabilityAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ActiveWishlistInput, getActiveWishlistItems } from './get-items-in-wishlists';\n\n/**\n * Input class for availabilites for items in wishlist\n */\nexport class ProductAvailabilitiesForWishlistItems implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`ActiveWishlistItemsAvailability`, this.apiSettings);\n    public getCacheObjectType = () => `ActiveWishlistItemsAvailability`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>) => {\n    return new ProductAvailabilitiesForWishlistItems(inputData.requestContext.apiSettings);\n};\n\n/**\n * Calls the Retail API to get wishlist which will be cached the then finds the quantities for each item\n */\nexport async function getAvailabilitiesForWishlistItems(input: ProductAvailabilitiesForWishlistItems, ctx: IActionContext): Promise<IProductInventoryInformation[]> {\n    // If no input is provided fail out\n    if (!input) {\n        throw new Error('[getAvailabilitiesForWishlistItems]No valid Input was provided, failing');\n    }\n\n    const products = await getActiveWishlistItems(new ActiveWishlistInput(), ctx);\n\n    if(!products) {\n        ctx.trace('[getAvailabilitiesForWishlistItems] Not able to get products in wishlist');\n        return <IProductInventoryInformation[]>[];\n    }\n\n    const validProducts: number[] = [];\n\n    for(const product of products) {\n        if(product.ProductDetails && product.ProductDetails.RecordId) {\n            validProducts.push(product.ProductDetails.RecordId);\n        }\n    }\n\n    if (validProducts.length === 0) {\n        ctx.trace('[getAvailabilitiesForWishlistItems] No products in wishlist');\n        return <IProductInventoryInformation[]>[];\n    }\n\n    const productAvailabilites = await getEstimatedAvailabilityAsync({callerContext:ctx}, {ProductIds: validProducts, DefaultWarehouseOnly:true});\n\n    if(productAvailabilites && productAvailabilites) {\n        return mapProductInventoryInformation(ctx, productAvailabilites?.ProductWarehouseInventoryAvailabilities);\n    } else {\n        ctx.trace('[getAvailabilitiesForWishlistItems] unable to get availabilites for product');\n        return <IProductInventoryInformation[]>[];\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/wishlist/wishlist-items/get-product-availabilities-wishlist-items',\n    action: <IAction<IProductInventoryInformation[]>>getAvailabilitiesForWishlistItems,\n    input: createInput\n});"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}