{"ast":null,"code":"export const PlayerConstants={defaultVolume:0.8,defaultVolumeSliderSteps:5,defaultVideoSliderSteps:1,defaultControlPanelTimeout:6500,defaultPositionUpdateThreshold:0.1,defaultMaskLevel:40,defaultPlayGlyphIcon:'fas fa-play',defaultPauseGlyphIcon:'fas fa-pause',defaultMuteGlyphIcon:'fas fa-volume-up',defaultUnMuteGlyphIcon:'fas fa-volume-off',defaultFullScreenGlyphIcon:'fas fa-expand',defaultExitFullScreenGlyphIcon:'fas fa-compress',closedCaptionGlyphClassName:'fas fa-closed-captioning',thumbnailFullWidth:1110,thumbnailFullHeight:624,ccLangPrefKey:'vidccpref',seekBarLabel:'Seek bar',regxForAgeGateInputValidation:/^[0-9\\b]+$/,mutePrefKey:'vidmut',volumePrefKey:'vidvol'};export const VideoPlayerNames={videoplayerContainer:'msc-videoplayer',mediaType:'video/mp4'};export const MenuCategories={AudioTracks:'audio-tracks',ClosedCaption:'close-caption',ClosedCaptionSettings:'cc-settings',PlaybackSpeed:'playback-speed',Quality:'quality',Share:'share',Download:'download',Options:'options'};export const MediaEvents=['abort','canplay','canplaythrough','emptied','ended','error','loadeddata','loadedmetadata','loadstart','pause','play','playing','progress','ratechange','readystatechange','seeked','seeking','stalled','suspend','timeupdate','volumechange','waiting'];export var VideoErrorCodes;(function(VideoErrorCodes){VideoErrorCodes[VideoErrorCodes[\"BufferingFirstByteTimeout\"]=2000]=\"BufferingFirstByteTimeout\";VideoErrorCodes[VideoErrorCodes[\"MediaErrorAborted\"]=2100]=\"MediaErrorAborted\";VideoErrorCodes[VideoErrorCodes[\"MediaErrorNetwork\"]=2101]=\"MediaErrorNetwork\";VideoErrorCodes[VideoErrorCodes[\"MediaErrorDecode\"]=2102]=\"MediaErrorDecode\";VideoErrorCodes[VideoErrorCodes[\"MediaErrorSourceNotSupported\"]=2103]=\"MediaErrorSourceNotSupported\";VideoErrorCodes[VideoErrorCodes[\"MediaErrorUnknown\"]=2104]=\"MediaErrorUnknown\";VideoErrorCodes[VideoErrorCodes[\"MediaSelectionNoMedia\"]=2200]=\"MediaSelectionNoMedia\";})(VideoErrorCodes||(VideoErrorCodes={}));","map":{"version":3,"sources":["videoplayer/components/data/player-constants.ts"],"names":[],"mappings":"AAIA,MAAO,MAAM,CAAA,eAAe,CAAG,CAC3B,aAAa,CAAE,GADY,CAE3B,wBAAwB,CAAE,CAFC,CAG3B,uBAAuB,CAAE,CAHE,CAI3B,0BAA0B,CAAE,IAJD,CAK3B,8BAA8B,CAAE,GALL,CAM3B,gBAAgB,CAAE,EANS,CAO3B,oBAAoB,CAAE,aAPK,CAQ3B,qBAAqB,CAAE,cARI,CAS3B,oBAAoB,CAAE,kBATK,CAU3B,sBAAsB,CAAE,mBAVG,CAW3B,0BAA0B,CAAE,eAXD,CAY3B,8BAA8B,CAAE,iBAZL,CAa3B,2BAA2B,CAAE,0BAbF,CAc3B,kBAAkB,CAAE,IAdO,CAe3B,mBAAmB,CAAE,GAfM,CAgB3B,aAAa,CAAE,WAhBY,CAiB3B,YAAY,CAAE,UAjBa,CAkB3B,6BAA6B,CAAG,YAlBL,CAmB3B,WAAW,CAAE,QAnBc,CAoB3B,aAAa,CAAE,QApBY,CAAxB,CA0BP,MAAO,MAAM,CAAA,gBAAgB,CAAG,CAC5B,oBAAoB,CAAE,iBADM,CAE5B,SAAS,CAAE,WAFiB,CAAzB,CAKP,MAAO,MAAM,CAAA,cAAc,CAAG,CAC1B,WAAW,CAAE,cADa,CAE1B,aAAa,CAAE,eAFW,CAG1B,qBAAqB,CAAE,aAHG,CAI1B,aAAa,CAAE,gBAJW,CAK1B,OAAO,CAAE,SALiB,CAM1B,KAAK,CAAE,OANmB,CAO1B,QAAQ,CAAE,UAPgB,CAQ1B,OAAO,CAAE,SARiB,CAAvB,CAWP,MAAO,MAAM,CAAA,WAAW,CAAG,CAAC,OAAD,CACvB,SADuB,CAEvB,gBAFuB,CAGvB,SAHuB,CAIvB,OAJuB,CAKvB,OALuB,CAMvB,YANuB,CAOvB,gBAPuB,CAQvB,WARuB,CASvB,OATuB,CAUvB,MAVuB,CAWvB,SAXuB,CAYvB,UAZuB,CAavB,YAbuB,CAcvB,kBAduB,CAevB,QAfuB,CAgBvB,SAhBuB,CAiBvB,SAjBuB,CAkBvB,SAlBuB,CAmBvB,YAnBuB,CAoBvB,cApBuB,CAqBvB,SArBuB,CAApB,CAkFP,MAAA,IAAY,CAAA,eAAZ,CAAA,CAAA,SAAY,eAAZ,CAA2B,CAEvB,eAAA,CAAA,eAAA,CAAA,2BAAA,CAAA,CAAA,IAAA,CAAA,CAAA,2BAAA,CAGA,eAAA,CAAA,eAAA,CAAA,mBAAA,CAAA,CAAA,IAAA,CAAA,CAAA,mBAAA,CACA,eAAA,CAAA,eAAA,CAAA,mBAAA,CAAA,CAAA,IAAA,CAAA,CAAA,mBAAA,CACA,eAAA,CAAA,eAAA,CAAA,kBAAA,CAAA,CAAA,IAAA,CAAA,CAAA,kBAAA,CACA,eAAA,CAAA,eAAA,CAAA,8BAAA,CAAA,CAAA,IAAA,CAAA,CAAA,8BAAA,CACA,eAAA,CAAA,eAAA,CAAA,mBAAA,CAAA,CAAA,IAAA,CAAA,CAAA,mBAAA,CAGA,eAAA,CAAA,eAAA,CAAA,uBAAA,CAAA,CAAA,IAAA,CAAA,CAAA,uBAAA,CACH,CAbD,EAAY,eAAe,GAAf,eAAe,CAAA,EAAA,CAA3B","sourcesContent":["\n/**\n * @description - Player constants\n */\nexport const PlayerConstants = {\n    defaultVolume: 0.8,\n    defaultVolumeSliderSteps: 5,\n    defaultVideoSliderSteps: 1,\n    defaultControlPanelTimeout: 6500,\n    defaultPositionUpdateThreshold: 0.1,\n    defaultMaskLevel: 40,\n    defaultPlayGlyphIcon: 'fas fa-play',\n    defaultPauseGlyphIcon: 'fas fa-pause',\n    defaultMuteGlyphIcon: 'fas fa-volume-up',\n    defaultUnMuteGlyphIcon: 'fas fa-volume-off',\n    defaultFullScreenGlyphIcon: 'fas fa-expand',\n    defaultExitFullScreenGlyphIcon: 'fas fa-compress',\n    closedCaptionGlyphClassName: 'fas fa-closed-captioning',\n    thumbnailFullWidth: 1110,\n    thumbnailFullHeight: 624,\n    ccLangPrefKey: 'vidccpref',\n    seekBarLabel: 'Seek bar',\n    regxForAgeGateInputValidation : /^[0-9\\b]+$/,\n    mutePrefKey: 'vidmut',\n    volumePrefKey: 'vidvol'\n};\n\n/**\n * @description - names used for video and player html elements\n */\nexport const VideoPlayerNames = {\n    videoplayerContainer: 'msc-videoplayer',\n    mediaType: 'video/mp4'\n};\n\nexport const MenuCategories = {\n    AudioTracks: 'audio-tracks',\n    ClosedCaption: 'close-caption',\n    ClosedCaptionSettings: 'cc-settings',\n    PlaybackSpeed: 'playback-speed',\n    Quality: 'quality',\n    Share: 'share',\n    Download: 'download',\n    Options: 'options'\n};\n\nexport const MediaEvents = ['abort',\n    'canplay',\n    'canplaythrough',\n    'emptied',\n    'ended',\n    'error',\n    'loadeddata',\n    'loadedmetadata',\n    'loadstart',\n    'pause',\n    'play',\n    'playing',\n    'progress',\n    'ratechange',\n    'readystatechange',\n    'seeked',\n    'seeking',\n    'stalled',\n    'suspend',\n    'timeupdate',\n    'volumechange',\n    'waiting'];\n\nexport interface IPlayPosition {\n    /**\n     * @name startTime\n     * @type {number}\n     * @description Start position of the buffer, in seconds.\n     *              For VoD this is usually 0.\n     *              For live stream this is a position of beginning of DVR window, relative to the stream start time.\n     */\n    startTime: number;\n\n    /**\n     * @name endTime\n     * @type {number}\n     * @description End position of the buffer, in seconds.\n     *              For VoD this is normally a video duration.\n     *              For live stream this is normally a \"live\" position, relative to the stream start time.\n     */\n    endTime: number;\n\n    /**\n     * @name currentTime\n     * @type {number}\n     * @description Position currently on the screen, relative to the stream start time, in seconds.\n     */\ncurrentTime: number;\n    /**\n     * @name bufferedDuration\n     * @type {number}\n     * @description buffered duration of the video.\n     */\n    bufferedDuration: number;\n}\n\nexport interface ICurrentClosedCaptionsSettings {\n    preset: string;\n    text_font: string;\n    text_color: string;\n    text_opacity: string;\n    text_size: string;\n    text_edge_style: string;\n    text_background_color: string;\n    text_background_opacity: string;\n    window_color: string;\n    window_opacity: string;\n}\n\n/*\n* @name - PlayerEvents\n* @description - Player states.\n* @type {IPlayerState}\n*/\nexport type PlayerStates = 'init' | 'playerLoaded' | 'loading' |\n                        'ready'  | 'playing' | 'paused' | 'buffering' |\n                        'seeking' | 'ended' | 'error' | 'stopped';\n\n/*\n* @enum VideoErrorCodes\n* @description - Enum for supported media quality.\n*/\nexport enum VideoErrorCodes {\n    // Buffering.\n    BufferingFirstByteTimeout = 2000,\n\n    // Media element errors.\n    MediaErrorAborted = 2100,\n    MediaErrorNetwork = 2101,\n    MediaErrorDecode = 2102,\n    MediaErrorSourceNotSupported = 2103,\n    MediaErrorUnknown = 2104,\n\n    // Media selection.\n    MediaSelectionNoMedia = 2200,\n}\n\n/*\n* @interface IVideoErrorData\n* @description - The data contract interface used for storing references to video error data.\n*/\nexport interface IVideoErrorData {\n    errorCode: VideoErrorCodes;\n    message?: string;\n}\n\n/*\n* @interface IVideoErrorMessageData\n* @description - The data contract interface used for supplying content to an error message.\n* @export\n*/\nexport interface IVideoErrorMessageData {\n    title?: string;\n    message?: string;\n}\n\n/**\n * @interface - IPlayerMenuItem\n * @interfacedesc - The IPlayerMenuItem interface that defines the data structure used to store menu item information.\n * @export\n */\nexport interface IPlayerMenuItem {\n    id: string;\n    label: string;\n    className?: string;\n    language?: string;\n    data?: string;\n    image?: string;\n    itemCount?: number;\n    itemIndex?: number;\n    imageAlt?: string;\n    glyph?: string;\n    selected?: boolean;\n    selectable?: boolean;\n    hasMouseHoverEvents?: boolean;\n    persistOnClick?: boolean;\n    isBackButton?: boolean;\n    ariaLabel?: string;\n    subMenu?: IPlayerMenu;\n    hasFocus?: boolean;\n}\n\n/**\n * @interface - IPlayerMenu\n * @interfacedesc - The IPlayerMenu interface that defines the data structure used to store menu information.\n * @export\n */\nexport interface IPlayerMenu {\n    id: string;\n    category: string;\n    items: IPlayerMenuItem[];\n    label?: string;\n    glyph?: string;\n    cssClass?: string;\n    hideBackButton?: boolean;\n}\n\nexport interface IPlayerMenuItemClickNotification {\n    category: string;\n    id: string;\n    data?: string;\n}\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}