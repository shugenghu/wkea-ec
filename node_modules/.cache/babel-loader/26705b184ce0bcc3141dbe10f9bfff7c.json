{"ast":null,"code":"import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import\"core-js/modules/web.url.js\";import MsDyn365 from'@msdyn365-commerce/core';const compressedRefinerKeys=['DataTypeValue','LeftValueBoundString','RefinerRecordId','RefinerSourceValue','RightValueBoundString','UnitText'];export const hydrateRefinersFromUrl=requestContext=>{const compressedRefinerArray=parseQueryParam('refiners',requestContext);if(!compressedRefinerArray||!compressedRefinerArray.length){return[];}return compressedRefinerArray.map(compressedRefiner=>{try{const parsedRefiner={};compressedRefinerKeys.forEach((refinerKey,index)=>{parsedRefiner[refinerKey]=compressedRefiner[index];});return parsedRefiner;}catch(e){return undefined;}}).filter(Boolean);};export const compressRefiners=refiners=>{const compressedRefiners=[];refiners.forEach(refiner=>{const compressedRefiner=[];compressedRefinerKeys.forEach(refinerKey=>{compressedRefiner.push(refiner[refinerKey]);});compressedRefiners.push(compressedRefiner);});return compressedRefiners;};export const buildListPageUrl=(fullUrl,refiners,sortingColumns,skipCount)=>{if(refiners!==undefined){if(!refiners.length){fullUrl.searchParams.delete('refiners');}else{fullUrl.searchParams.set('refiners',JSON.stringify(compressRefiners(refiners)));}fullUrl.searchParams.delete('skip');return fullUrl.href;}if(sortingColumns!==undefined){if(!sortingColumns.length){fullUrl.searchParams.delete('sorting');}else{fullUrl.searchParams.set('sorting',JSON.stringify(sortingColumns));}fullUrl.searchParams.delete('skip');return fullUrl.href;}if(skipCount){fullUrl.searchParams.set('skip',skipCount.toString());}return fullUrl.href;};export const parseQueryParam=(key,requestContext)=>{if(requestContext.query&&requestContext.query[key]){return JSON.parse(decodeURIComponent(requestContext.query[key]));}return null;};export const getCurrentUrl=requestContext=>{if(MsDyn365.isBrowser){return new URL(window.location.href);}else{if(requestContext.url.requestUrl.href){return new URL(requestContext.url.requestUrl.href);}else{return new URL(requestContext.url.requestUrl);}}};","map":{"version":3,"sources":["modules/search-result-container/actions/url-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport MsDyn365, { IRequestContext } from '@msdyn365-commerce/core';\nimport { ProductRefinerValue, SortColumn } from '@msdyn365-commerce/retail-proxy';\n\n/**\n * Refiner Compression:\n * Refiners contains a non-trivial amount of data that is required to successfully make\n * a refiner-based API call. To allow for deep-linking of refiners in the URL, refiner data\n * must be compressed so that URL max length is not exceeded. Refiners will be compressed into\n * the following array style index-based format:\n * [DataTypeValue, LeftValueBoundString, RefinerRecordId, RefinerSourceValue, RightValueBoundString, UnitText]\n */\nconst compressedRefinerKeys = ['DataTypeValue', 'LeftValueBoundString', 'RefinerRecordId', 'RefinerSourceValue', 'RightValueBoundString', 'UnitText'];\n\n/**\n * Hydrates compressed refiner data from URL\n * @param fullUrl The full URL of the page\n */\nexport const hydrateRefinersFromUrl = (requestContext: IRequestContext): ProductRefinerValue[] => {\n    const compressedRefinerArray = parseQueryParam<(string | number)[][]>('refiners', requestContext);\n    if (!compressedRefinerArray || !compressedRefinerArray.length) {\n        return [];\n    }\n\n    return <ProductRefinerValue[]>compressedRefinerArray.map((compressedRefiner) => {\n        try {\n            const parsedRefiner: ProductRefinerValue = {};\n            compressedRefinerKeys.forEach((refinerKey, index) => {\n                // @ts-ignore: This line is intentionally not typesafe\n                parsedRefiner[refinerKey] = compressedRefiner[index];\n            });\n            return parsedRefiner;\n        } catch(e) {\n            return undefined;\n        }\n    }).filter(Boolean);\n};\n\n/**\n * Compressed a list of refiners for use in URLs\n * @param refiners The uncompressed refiners\n */\nexport const compressRefiners = (refiners: ProductRefinerValue[]) => {\n    const compressedRefiners: (string | number)[][] = [];\n\n    refiners.forEach((refiner) => {\n        const compressedRefiner: (string | number)[] = [];\n        compressedRefinerKeys.forEach((refinerKey) => {\n            // @ts-ignore: This line is intentionally not typesafe\n            compressedRefiner.push(refiner[refinerKey]);\n        });\n        compressedRefiners.push(compressedRefiner);\n    });\n\n    return compressedRefiners;\n};\n\n/**\n * Method which creates a URL contiaining serialized active refiners\n * @param fullUrl The Current URL of the page\n * @param refiners The refiners which should be added to the URL\n */\nexport const buildListPageUrl = (fullUrl: URL, refiners?: ProductRefinerValue[], sortingColumns?: SortColumn[], skipCount?: number) => {\n    // Refiner Change flow\n    if (refiners !== undefined) {\n        if (!refiners.length) {\n            fullUrl.searchParams.delete('refiners');\n        } else {\n            fullUrl.searchParams.set('refiners', JSON.stringify(compressRefiners(refiners)));\n        }\n\n        // Adding or removing a refiner means we want to always load page 1\n        fullUrl.searchParams.delete('skip');\n        return fullUrl.href;\n    }\n\n    if (sortingColumns !== undefined) {\n        if(!sortingColumns.length) {\n            fullUrl.searchParams.delete('sorting');\n        } else {\n            fullUrl.searchParams.set('sorting', JSON.stringify(sortingColumns));\n        }\n\n        // Changing the sort means always load page 1\n        fullUrl.searchParams.delete('skip');\n        return fullUrl.href;\n    }\n\n    if (skipCount) {\n        fullUrl.searchParams.set('skip', skipCount.toString());\n    }\n\n    return fullUrl.href;\n};\n\n/**\n * Parses a query param from the query object of the request context\n * @param key The query parameter key\n * @param requestContext The request context\n */\nexport const parseQueryParam = <T>(key: string, requestContext: IRequestContext): T | null => {\n    if(requestContext.query && requestContext.query[key]) {\n        return <T>JSON.parse(decodeURIComponent(requestContext.query[key]));\n    }\n    return null;\n};\n\n/**\n * Gets the current URL of the page from the request context\n * @param requestContext The request context\n */\nexport const getCurrentUrl = (requestContext: IRequestContext): URL => {\n    if(MsDyn365.isBrowser) {\n        return new URL(window.location.href);\n    } else {\n        // NOTE: Typing on requestURL is incorrect\n        if (requestContext.url.requestUrl.href) {\n            return new URL(requestContext.url.requestUrl.href);\n        } else {\n            return new URL(<string><unknown>(requestContext.url.requestUrl));\n        }\n    }\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}