{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{BODY_START_LOAD_POINT,DATA_LOAD_POINT,HEAD_ELEMENT_IDENTIFIER_ATTR,HEAD_START_LOAD_POINT}from'./IHtmlHeadModel';var DOMAttributeNames={acceptCharset:'accept-charset',className:'class',htmlFor:'for',httpEquiv:'http-equiv'};/**\r\n * update title of the page\r\n * @function updateTitle\r\n * @param {HtmlHeadElement} title - final derived title component\r\n */var updateTitle=function updateTitle(titleComponent){var title='';if(titleComponent){var children=titleComponent.props.children;title=typeof children==='string'?children:'';}switch(titleComponent&&titleComponent.props['data-ms-action']){case'format':// @ts-ignore\nif(window&&window.___initialData___&&window.___initialData___.pageRoot){// @ts-ignore\nvar titleTemplate=window.___initialData___.pageRoot.titleTemplate;title=titleTemplate.replace(/\\{0\\}/,title);}break;case'append':title=document.title!==title?\"\".concat(document.title,\" \").concat(title):title;break;case'override':default:}if(document.title!==title){document.title=title;}};/**\r\n * update head tag on change, on client side\r\n * @function reactElementToDOM\r\n * @param {HtmlHeadElement} element - final react element that needs to be added to DOM\r\n * @return {HTMLElement} - html dom element\r\n */var reactElementToDOM=function reactElementToDOM(element){var tagType=typeof element.type==='string'?element.type:'';var el=document.createElement(tagType);Object.keys(element.props).forEach(function(property){if(property!=='children'&&property!=='dangerouslySetInnerHTML'){var attr=DOMAttributeNames[property]||property.toLowerCase();el.setAttribute(attr,element.props[property]);}});// @ts-ignore\nvar _element$props=element.props,children=_element$props.children,dangerouslySetInnerHTML=_element$props.dangerouslySetInnerHTML;if(el&&dangerouslySetInnerHTML){// tslint:disable-next-line:no-inner-html\nel.innerHTML=dangerouslySetInnerHTML.__html||'';}else if(el&&children){el.textContent=typeof children==='string'?children:children.join('');}return el;};/**\r\n * Filters a script based on the filterFromBody parameter\r\n * If filterFromBody is true, only those scripts that have head load points will\r\n * return true. Otherwise, only scripts with body load points will return true.\r\n *\r\n * @param filterBody Set to true to filter out scripts in body. False to filter out scripts in the head\r\n * @param t The script node\r\n */var filterScripts=function filterScripts(filterBody,t){var el=t;if(el.tagName==='SCRIPT'){var attrVal=el.getAttribute(DATA_LOAD_POINT);if(attrVal==='bodyStart'||attrVal==='bodyEnd'||attrVal===null){return filterBody?false:true;}}return filterBody?true:false;};/**\r\n * Adds an HTML node to a particular slot\r\n *\r\n * @param slot The parent Element to which the HTML node should be added\r\n * @param loadPointToLookFor The load point type to look for to determine if the node should be prepended to append to the parent node\r\n * @param t The HTML node to add\r\n */var addElementToHtmlSlot=function addElementToHtmlSlot(slot,loadPointToLookFor,t){var loadPoint=t.getAttribute(DATA_LOAD_POINT);if(loadPoint&&loadPoint===loadPointToLookFor){slot.prepend(t);}else{slot.appendChild(t);}};/**\r\n * update head tag on change, on client side\r\n * @function doUpdateHead\r\n * @param {HtmlHead} head - final list of merged tags\r\n * @return {HtmlHead} - final list of merged tags\r\n */var updateElements=function updateElements(tagType,components){var headEl=document.getElementsByTagName('head')[0];var bodyEl=document.getElementsByTagName('body')[0];var oldTags=Array.prototype.slice.call(headEl.querySelectorAll(\"\".concat(tagType,\".\").concat(HEAD_ELEMENT_IDENTIFIER_ATTR)));// sepcial condition for scripts: read script tags from body tag as well\nif(tagType==='script'){var bodyScriptTags=Array.prototype.slice.call(bodyEl.querySelectorAll(\"script.\".concat(HEAD_ELEMENT_IDENTIFIER_ATTR)));oldTags=oldTags.concat(bodyScriptTags);}var newTags=components.map(reactElementToDOM).filter(function(newTag){var len=oldTags.length;for(var i=0;i<len;i++){var oldTag=oldTags[i];oldTag.removeAttribute('data-reactroot');if(oldTag.isEqualNode(newTag)){oldTags.splice(i,1);return false;}else if(oldTag.nodeName==='SCRIPT'&&(oldTag.innerHTML===newTag.innerHTML||oldTag.getAttribute('src')===newTag.getAttribute('src'))){oldTags.splice(i,1);return false;}}return true;});// Remove all the old tags and add new tags in the correct places\noldTags.forEach(function(t){return t.parentNode&&t.parentNode.removeChild(t);});// First, filter out all the script tags that are in the body and then reinsert\n// the new tags in the head in their appropriate locations based on the load-point (if applicable)\nnewTags.filter(function(t){return filterScripts(true,t);}).forEach(function(t){addElementToHtmlSlot(headEl,HEAD_START_LOAD_POINT,t);});// If any script tags were defined in the body, add these script tags back into the body\n// based on their load-points\nnewTags.filter(function(t){return filterScripts(false,t);}).forEach(function(t){addElementToHtmlSlot(bodyEl,BODY_START_LOAD_POINT,t);});};/**\r\n * update head tag on change, on client side\r\n * @function doUpdateHead\r\n * @param {HtmlHead} head - final list of merged tags\r\n */var doUpdateHead=function doUpdateHead(head){var tags={};head.tags.forEach(function(h){var headType=h.type.toString();var components=tags[headType]||[];components.push(h);tags[headType]=components;});var titleTag=tags.title;updateTitle(titleTag&&titleTag.length>0?titleTag[0]:null);var types=['meta','link','style','script'];types.forEach(function(tagType){updateElements(tagType,tags[tagType]||[]);});};/**\r\n * update head on change, on client side\r\n * @function updateHead\r\n * @param {HtmlHead} head - final list of merged tags\r\n */export var updateHead=function updateHead(head){doUpdateHead(head);};","map":{"version":3,"sources":["../../../../src/components/head-injector/html-head-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IGeneric } from '../../interfaces';\nimport {\n    BODY_START_LOAD_POINT,\n    DATA_LOAD_POINT,\n    HEAD_ELEMENT_IDENTIFIER_ATTR,\n    HEAD_START_LOAD_POINT,\n    HtmlHeadElement,\n    IHtmlHead\n} from './IHtmlHeadModel';\nconst DOMAttributeNames: IGeneric<unknown> = {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv'\n};\n\n/**\n * update title of the page\n * @function updateTitle\n * @param {HtmlHeadElement} title - final derived title component\n */\nconst updateTitle = (titleComponent: HtmlHeadElement): void => {\n    let title: string = '';\n    if (titleComponent) {\n        const { children } = titleComponent.props;\n        title = typeof children === 'string' ? children : '';\n    }\n\n    switch (titleComponent && titleComponent.props['data-ms-action']) {\n        case 'format':\n            // @ts-ignore\n            if (window && window.___initialData___ && window.___initialData___.pageRoot) {\n                // @ts-ignore\n                const titleTemplate = window.___initialData___.pageRoot.titleTemplate;\n                title = titleTemplate.replace(/\\{0\\}/, title);\n            }\n\n            break;\n        case 'append':\n            title = document.title !== title ? `${document.title} ${title}` : title;\n            break;\n        case 'override':\n        default:\n    }\n\n    if (document.title !== title) {\n        document.title = title;\n    }\n};\n\n/**\n * update head tag on change, on client side\n * @function reactElementToDOM\n * @param {HtmlHeadElement} element - final react element that needs to be added to DOM\n * @return {HTMLElement} - html dom element\n */\nconst reactElementToDOM = (element: HtmlHeadElement): HTMLElement => {\n    const tagType = typeof element.type === 'string' ? element.type : '';\n    const el = document.createElement(tagType);\n    Object.keys(element.props).forEach((property: string) => {\n        if (property !== 'children' && property !== 'dangerouslySetInnerHTML') {\n            const attr = DOMAttributeNames[property] || property.toLowerCase();\n            el.setAttribute(attr, element.props[property]);\n        }\n    });\n\n    // @ts-ignore\n    const { children, dangerouslySetInnerHTML } = element.props;\n    if (el && dangerouslySetInnerHTML) {\n        // tslint:disable-next-line:no-inner-html\n        el.innerHTML = dangerouslySetInnerHTML.__html || '';\n    } else if (el && children) {\n        el.textContent = typeof children === 'string' ? children : children.join('');\n    }\n\n    return el;\n};\n\n/**\n * Filters a script based on the filterFromBody parameter\n * If filterFromBody is true, only those scripts that have head load points will\n * return true. Otherwise, only scripts with body load points will return true.\n *\n * @param filterBody Set to true to filter out scripts in body. False to filter out scripts in the head\n * @param t The script node\n */\nconst filterScripts = (filterBody: boolean, t: Node): boolean => {\n    const el = <Element>t;\n    if (el.tagName === 'SCRIPT') {\n        const attrVal = el.getAttribute(DATA_LOAD_POINT);\n        if (attrVal === 'bodyStart' || attrVal === 'bodyEnd' || attrVal === null) {\n            return filterBody ? false : true;\n        }\n    }\n    return filterBody ? true : false;\n};\n\n/**\n * Adds an HTML node to a particular slot\n *\n * @param slot The parent Element to which the HTML node should be added\n * @param loadPointToLookFor The load point type to look for to determine if the node should be prepended to append to the parent node\n * @param t The HTML node to add\n */\nconst addElementToHtmlSlot = (slot: HTMLElement, loadPointToLookFor: string, t: Node) => {\n    const loadPoint = (<Element>t).getAttribute(DATA_LOAD_POINT);\n    if (loadPoint && loadPoint === loadPointToLookFor) {\n        slot.prepend(t);\n    } else {\n        slot.appendChild(t);\n    }\n};\n\n/**\n * update head tag on change, on client side\n * @function doUpdateHead\n * @param {HtmlHead} head - final list of merged tags\n * @return {HtmlHead} - final list of merged tags\n */\nconst updateElements = (tagType: string, components: HtmlHeadElement[]): void => {\n    const headEl = document.getElementsByTagName('head')[0];\n    const bodyEl = document.getElementsByTagName('body')[0];\n    let oldTags: HTMLElement[] = Array.prototype.slice.call(headEl.querySelectorAll(`${tagType}.${HEAD_ELEMENT_IDENTIFIER_ATTR}`));\n    // sepcial condition for scripts: read script tags from body tag as well\n    if (tagType === 'script') {\n        const bodyScriptTags = Array.prototype.slice.call(bodyEl.querySelectorAll(`script.${HEAD_ELEMENT_IDENTIFIER_ATTR}`));\n        oldTags = oldTags.concat(bodyScriptTags);\n    }\n    const newTags = components.map(reactElementToDOM).filter((newTag: HTMLElement) => {\n        const len = oldTags.length;\n        for (let i = 0; i < len; i++) {\n            const oldTag = oldTags[i];\n            oldTag.removeAttribute('data-reactroot');\n            if (oldTag.isEqualNode(newTag)) {\n                oldTags.splice(i, 1);\n                return false;\n            } else if (\n                oldTag.nodeName === 'SCRIPT' &&\n                (oldTag.innerHTML === newTag.innerHTML || oldTag.getAttribute('src') === newTag.getAttribute('src'))\n            ) {\n                oldTags.splice(i, 1);\n                return false;\n            }\n        }\n        return true;\n    });\n    // Remove all the old tags and add new tags in the correct places\n    oldTags.forEach((t: Node) => t.parentNode && t.parentNode.removeChild(t));\n    // First, filter out all the script tags that are in the body and then reinsert\n    // the new tags in the head in their appropriate locations based on the load-point (if applicable)\n    newTags\n        .filter((t: Node) => {\n            return filterScripts(true, t);\n        })\n        .forEach((t: Node) => {\n            addElementToHtmlSlot(headEl, HEAD_START_LOAD_POINT, t);\n        });\n    // If any script tags were defined in the body, add these script tags back into the body\n    // based on their load-points\n    newTags\n        .filter((t: Node) => {\n            return filterScripts(false, t);\n        })\n        .forEach((t: Node) => {\n            addElementToHtmlSlot(bodyEl, BODY_START_LOAD_POINT, t);\n        });\n};\n\n/**\n * update head tag on change, on client side\n * @function doUpdateHead\n * @param {HtmlHead} head - final list of merged tags\n */\nconst doUpdateHead = (head: IHtmlHead): void => {\n    const tags: IGeneric<unknown> = {};\n    head.tags.forEach((h: HtmlHeadElement) => {\n        const headType = h.type.toString();\n        const components = tags[headType] || [];\n        components.push(h);\n        tags[headType] = components;\n    });\n\n    const titleTag = tags.title;\n    updateTitle(titleTag && titleTag.length > 0 ? titleTag[0] : null);\n\n    const types = ['meta', 'link', 'style', 'script'];\n    types.forEach((tagType: string) => {\n        updateElements(tagType, tags[tagType] || []);\n    });\n};\n\n/**\n * update head on change, on client side\n * @function updateHead\n * @param {HtmlHead} head - final list of merged tags\n */\nexport const updateHead = (head: IHtmlHead): void => {\n    doUpdateHead(head);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}