{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.regexp.constructor.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/es.string.replace.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{__decorate}from\"tslib\";import classnames from'classnames';import{observable,reaction,set}from'mobx';import{observer}from'mobx-react';import*as React from'react';import{getTelemetryObject}from'@msdyn365-commerce-modules/utilities';import{AddressCommon}from'../../common/address-common';import{AddressFormat}from'../../common/address-format';import{AddressItemType}from'../../common/address-format.data';import{AddressMetaData}from'../../common/address-meta-data';import{AddressOperation,AddressType}from'../../common/address-module.data';import{AddressAddUpdate}from'../../common/components/address-add';import{AddressList}from'../../common/components/address-list';let AccountManagementAddress=class AccountManagementAddress extends React.Component{constructor(props){super(props);this.countryRegionId='USA';this.defaultAddressType=6;this._renderAddOrUpdateAddress=()=>{return AddressAddUpdate({isUpdating:this.isUpdating,resources:this.resources,addressType:AddressType.Shipping,addressFormat:this.addressFormat.getAddressFormat(this.addUpdateAddress.ThreeLetterISORegionName||this.countryRegionId),defaultCountryRegionId:this.countryRegionId,defaultAddressType:this.defaultAddressType,selectedAddress:this.addUpdateAddress,validationError:this.validationError,addressActionResponse:this.addressActionResponse,dropdownDisplayData:this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText,this.stateProvinceInfo),telemetryContent:this.telemetryContent,onInputChange:this._onAddressAddUpdateInputChange,onDropdownChange:this._onAddressAddUpdateDropdownChange,onSave:this._onAddressAddUpdateSubmit,onCancel:this._resetView});};this._renderListAddress=()=>{const{config}=this.props;return AddressList({isUpdating:this.isUpdating,selectedAddress:this.selectedAddress,addressFormat:this.addressFormat,addresses:this.customerAddresses,addressPurposes:this.addressPurposes,resources:this.resources,heading:config.heading,primaryAddressSectionHeading:config.primaryAddressSectionHeading,otherAddressSectionHeading:config.otherAddressSectionHeading,contextRequest:this.props.context.request,telemetryContent:this.telemetryContent,onEditAddress:this._goToEditAddress,onRemoveAddress:this._onRemoveAddress,onAddAddress:this._goToAddAddress,onUpdatePrimaryAddress:this._onSubmitUpdatePrimaryAddress});};this.onAddressAddUpdate=(name,value)=>{set(this.addUpdateAddress,{[name]:value});this.addressFormat.validateAddressFormat(this.addUpdateAddress,this.validationError,this.countryRegionId,name);};this._onAddressAddUpdateInputChange=event=>{if(event.target.type==='checkbox'){this.onAddressAddUpdate(event.target.name,event.target.checked);}else{const value=(event.target.value||'').replace(new RegExp('[<>]','gi'),'');this.onAddressAddUpdate(event.target.name,value);}};this._onAddressAddUpdateDropdownChange=event=>{if(event.target.name===AddressItemType[AddressItemType.AddressTypeValue]){this.onAddressAddUpdate(event.target.name,+event.target.value);}else{this.onAddressAddUpdate(event.target.name,event.target.value);}if(event.target.name===AddressItemType[AddressItemType.ThreeLetterISORegionName]){this._onCountryChange(event.target.value);}};this._onAddressUpdate=(response,onSuccess)=>{this.isUpdating=true;response.then(result=>{if(result.address){this.hasError=false;onSuccess(result);}else{this.hasError=true;this.addressActionResponse=result;}this.isUpdating=false;},()=>{this.hasError=true;this.isUpdating=false;});};this._onAddressAddUpdateSubmit=()=>{if(!this.addressFormat.validateAddressFormat(this.addUpdateAddress,this.validationError,this.countryRegionId)){return;}let response;if(this.addressCommon.isAuthenticatedFlow()){response=this.currentOperation===AddressOperation.Update?this.addressCommon.updateCustomerAddress(this.addUpdateAddress):this.addressCommon.addCustomerAddress(this.addUpdateAddress);}else{response=Promise.resolve({address:this.addUpdateAddress});}this._onAddressUpdate(response,this._onAddOrUpdateSuccess);};this._onCountryChange=countryRegionId=>{this.countryRegionId=countryRegionId;set(this.addUpdateAddress,{['ThreeLetterISORegionName']:countryRegionId});};this._getAddressFormatExcludeList=()=>{const{config}=this.props;const addressFormatExcludeList=[];if(!config.showAddressType){addressFormatExcludeList.push(AddressItemType.AddressTypeValue);}addressFormatExcludeList.push(AddressItemType.IsPrimary);return addressFormatExcludeList;};this._getStateProvinces=()=>{if(!this.countryRegionId||!(this.currentOperation===AddressOperation.Add||this.currentOperation===AddressOperation.Update)){return;}this.addressCommon.getStateProvinces(this.countryRegionId).then(result=>{const stateInfo=result.some(state=>state.StateId===this.addUpdateAddress.State);if(!stateInfo){set(this.addUpdateAddress,{['State']:''});}this.stateProvinceInfo=result;});};this._updateCurrentOperation=operation=>{this.currentOperation=operation;};this._onSubmitUpdatePrimaryAddress=address=>{this.selectedAddress=address;const response=this.addressCommon.updateCustomerPrimaryAddress(address);this._onAddressUpdate(response,this._onUpdatePrimaryAddressSuccess);};this._goToEditAddress=address=>{this.addUpdateAddress=_objectSpread({},address);this.countryRegionId=this.addUpdateAddress.ThreeLetterISORegionName||'USA';this._updateCurrentOperation(AddressOperation.Update);};this._onRemoveAddress=address=>{address.Deactivate=true;const response=this.addressCommon.updateCustomerAddress(address);this._onAddressUpdate(response,this._onAddOrUpdateSuccess);};this._goToAddAddress=()=>{this.addUpdateAddress={};this._setDefaultCountryRegionId();set(this.addUpdateAddress,{['ThreeLetterISORegionName']:this.countryRegionId});set(this.addUpdateAddress,{['AddressTypeValue']:this.defaultAddressType});this._setDefaultCountryRegionId();this._updateCurrentOperation(AddressOperation.Add);};this._onAddOrUpdateSuccess=response=>{if(response.customerAddresses){this.customerAddresses=response.customerAddresses;}this._resetView();};this._onUpdatePrimaryAddressSuccess=response=>{if(response.customerAddresses){this.customerAddresses=response.customerAddresses;}};this._resetView=()=>{this.selectedAddress=undefined;this._updateCurrentOperation(AddressOperation.List);};const{context,data,resources,telemetry}=this.props;this.resources=resources;this.currentOperation=AddressOperation.List;this.countryRegions=data.countryRegions.result||[];this.addressPurposes=data.addressPurposes.result||[];this.customerAddresses=data.address.result||[];this.addUpdateAddress={};this.validationError={};this.addressCommon=new AddressCommon(context,resources,telemetry);this.addressFormat=new AddressFormat(this.countryRegions,new AddressMetaData(_objectSpread({},resources),this._getAddressFormatExcludeList()),this.addressPurposes);this.telemetryContent=getTelemetryObject(this.props.context.request.telemetryPageName,this.props.friendlyName,this.props.telemetry);}componentDidMount(){this.props.data.countryRegions.then(()=>{this._setDefaultCountryRegionId();});reaction(()=>this.countryRegionId,()=>this._getStateProvinces());reaction(()=>this.currentOperation,()=>{this._getStateProvinces();});}render(){const{renderView,config}=this.props;const viewProps=_objectSpread(_objectSpread({},this.props),{},{currentOperation:this.currentOperation,selectedAddress:this.selectedAddress,addUpdateAddress:this.addUpdateAddress,countryRegionId:this.countryRegionId,stateProvinceInfo:this.stateProvinceInfo,customerAddresses:this.customerAddresses,validationError:this.validationError,addressActionResponse:this.addressActionResponse,isUpdating:this.isUpdating,hasError:this.hasError,className:config.className,viewState:{isShowAddresList:this.currentOperation===AddressOperation.List,isShowAddOrUpdateAddress:this.currentOperation!==AddressOperation.List},AccountAddressManagement:{moduleProps:this.props,className:classnames('ms-account-management-address',config.className)},showAddressList:this._renderListAddress(),showAddOrUpdateAddress:this._renderAddOrUpdateAddress()});return renderView(viewProps);}_setDefaultCountryRegionId(){const{request}=this.props.context;const market=request&&request.channel&&request.channel.ChannelCountryRegionISOCode;this.countryRegionId=this.addressCommon.getDefaultCountryRegionId(this.countryRegionId,this.countryRegions,market);}};__decorate([observable],AccountManagementAddress.prototype,\"currentOperation\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"selectedAddress\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"countryRegionId\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"stateProvinceInfo\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"customerAddresses\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"addUpdateAddress\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"validationError\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"addressActionResponse\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"isUpdating\",void 0);__decorate([observable],AccountManagementAddress.prototype,\"hasError\",void 0);AccountManagementAddress=__decorate([observer],AccountManagementAddress);export default AccountManagementAddress;","map":{"version":3,"sources":["modules/account-management-address/account-management-address.tsx"],"names":[],"mappings":"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","sourcesContent":["\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { observable, reaction, set } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport {\n    Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { AddressCommon } from '../../common/address-common';\nimport { AddressFormat } from '../../common/address-format';\nimport { AddressItemType } from '../../common/address-format.data';\nimport { AddressMetaData } from '../../common/address-meta-data';\nimport {\n    AddressOperation, AddressType, IAddressResource, IAddressResponse\n} from '../../common/address-module.data';\nimport { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';\nimport { AddressList, IAddressListProps } from '../../common/components/address-list';\nimport { IAccountManagementAddressData } from './account-management-address.data';\nimport { IAccountManagementAddressProps } from './account-management-address.props.autogenerated';\n\nexport interface IAccountManagementAddressViewState {\n    isShowAddresList: boolean;\n    isShowAddOrUpdateAddress: boolean;\n}\n\nexport interface IAccountManagementAddressViewProps extends React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>> {\n    className: string;\n    currentOperation: AddressOperation;\n    selectedAddress?: Address;\n    addUpdateAddress: Address;\n    countryRegionId: string;\n    stateProvinceInfo?: StateProvinceInfo[];\n    customerAddresses: Address[];\n    validationError: object;\n    addressActionResponse?: IAddressResponse;\n    viewState: IAccountManagementAddressViewState;\n    AccountAddressManagement: IModuleProps;\n    isUpdating: boolean;\n    showAddressList: IAddressListProps;\n    showAddOrUpdateAddress: IAddressAddUpdateProps;\n}\n\n/**\n *\n * Address component\n * @extends {React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>>}\n */\n@observer\nclass AccountManagementAddress extends React.Component<IAccountManagementAddressProps<IAccountManagementAddressData>> {\n    @observable private currentOperation: AddressOperation;\n    @observable private selectedAddress?: Address;\n    @observable private countryRegionId: string = 'USA';\n    @observable private stateProvinceInfo?: StateProvinceInfo[];\n    @observable private customerAddresses: Address[];\n    @observable private addUpdateAddress: Address;\n    @observable private validationError: object;\n    @observable private addressActionResponse?: IAddressResponse;\n    @observable private isUpdating?: boolean;\n    @observable private hasError?: boolean;\n\n    private addressCommon: AddressCommon;\n    private addressFormat: AddressFormat;\n    private countryRegions: CountryRegionInfo[];\n    private addressPurposes: AddressPurpose[];\n    private resources: IAddressResource;\n    private defaultAddressType: number = 6; // Default to Home\n    private telemetryContent: ITelemetryContent;\n\n    constructor(props: IAccountManagementAddressProps<IAccountManagementAddressData>) {\n        super(props);\n        const { context, data, resources, telemetry } = this.props;\n\n        this.resources = resources;\n        this.currentOperation = AddressOperation.List;\n        this.countryRegions = data.countryRegions.result || [];\n        this.addressPurposes = data.addressPurposes.result || [];\n        this.customerAddresses = data.address.result || [];\n        this.addUpdateAddress = {};\n        this.validationError = {};\n        this.addressCommon = new AddressCommon(context, resources, telemetry);\n        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this.props.data.countryRegions.then(() => {\n            this._setDefaultCountryRegionId();\n        });\n\n        reaction(\n            () => this.countryRegionId,\n            () => this._getStateProvinces()\n        );\n\n        reaction(\n            () => this.currentOperation,\n            () => {\n                this._getStateProvinces();\n            }\n        );\n    }\n\n    public render(): JSX.Element {\n        const { renderView, config } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            currentOperation: this.currentOperation,\n            selectedAddress: this.selectedAddress,\n            addUpdateAddress: this.addUpdateAddress,\n            countryRegionId: this.countryRegionId,\n            stateProvinceInfo: this.stateProvinceInfo,\n            customerAddresses: this.customerAddresses,\n            validationError: this.validationError,\n            addressActionResponse: this.addressActionResponse,\n            isUpdating: this.isUpdating,\n            hasError: this.hasError,\n            className: config.className,\n            viewState: {\n                isShowAddresList: this.currentOperation === AddressOperation.List,\n                isShowAddOrUpdateAddress: this.currentOperation !== AddressOperation.List,\n            },\n            AccountAddressManagement: {\n                moduleProps: this.props,\n                className: classnames('ms-account-management-address', config.className)\n            },\n            showAddressList: this._renderListAddress(),\n            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()\n        };\n\n        return renderView(viewProps) as React.ReactElement;\n    }\n\n    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {\n        return AddressAddUpdate(\n            {\n                isUpdating: this.isUpdating,\n                resources: this.resources,\n                addressType: AddressType.Shipping,\n                addressFormat: this.addressFormat.getAddressFormat((this.addUpdateAddress.ThreeLetterISORegionName) || this.countryRegionId),\n                defaultCountryRegionId: this.countryRegionId,\n                defaultAddressType: this.defaultAddressType,\n                selectedAddress: this.addUpdateAddress,\n                validationError: this.validationError,\n                addressActionResponse: this.addressActionResponse,\n                dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText, this.stateProvinceInfo),\n                telemetryContent: this.telemetryContent,\n                onInputChange: this._onAddressAddUpdateInputChange,\n                onDropdownChange: this._onAddressAddUpdateDropdownChange,\n                onSave: this._onAddressAddUpdateSubmit,\n                onCancel: this._resetView\n            }\n        );\n    }\n\n    private _renderListAddress = (): IAddressListProps => {\n        const { config } = this.props;\n\n        return AddressList(\n            {\n                isUpdating: this.isUpdating,\n                selectedAddress: this.selectedAddress,\n                addressFormat: this.addressFormat,\n                addresses: this.customerAddresses,\n                addressPurposes: this.addressPurposes,\n                resources: this.resources,\n                heading: config.heading,\n                primaryAddressSectionHeading: config.primaryAddressSectionHeading,\n                otherAddressSectionHeading: config.otherAddressSectionHeading,\n                contextRequest: this.props.context.request,\n                telemetryContent: this.telemetryContent,\n                onEditAddress: this._goToEditAddress,\n                onRemoveAddress: this._onRemoveAddress,\n                onAddAddress: this._goToAddAddress,\n                onUpdatePrimaryAddress: this._onSubmitUpdatePrimaryAddress\n            }\n        );\n    };\n\n    private onAddressAddUpdate = (name: string, value: string | boolean | number) => {\n        set(this.addUpdateAddress, { [name]: value });\n        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);\n    }\n\n    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        if (event.target.type === 'checkbox') {\n            this.onAddressAddUpdate(event.target.name, event.target.checked);\n        } else {\n            const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');\n            this.onAddressAddUpdate(event.target.name, value);\n        }\n    }\n\n    private _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        if (event.target.name === AddressItemType[AddressItemType.AddressTypeValue]) {\n            this.onAddressAddUpdate(event.target.name, +event.target.value);\n        } else {\n            this.onAddressAddUpdate(event.target.name, event.target.value);\n        }\n        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {\n            this._onCountryChange(event.target.value);\n        }\n    }\n\n    private _onAddressUpdate = (response: Promise<IAddressResponse>, onSuccess: (response: IAddressResponse) => void): void => {\n\n        this.isUpdating = true;\n        response.then(\n            (result: IAddressResponse) => {\n                if (result.address) {\n                    this.hasError = false;\n                    onSuccess(result);\n                } else {\n                    this.hasError = true;\n                    this.addressActionResponse = result;\n                }\n                this.isUpdating = false;\n            },\n            () => {\n                this.hasError = true;\n                this.isUpdating = false;\n            }\n        );\n    }\n\n    private _onAddressAddUpdateSubmit = (): void => {\n        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {\n            return;\n        }\n        let response: Promise<IAddressResponse>;\n        if (this.addressCommon.isAuthenticatedFlow()) {\n            response = this.currentOperation === AddressOperation.Update ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress) : this.addressCommon.addCustomerAddress(this.addUpdateAddress);\n        } else {\n            response = Promise.resolve({ address: this.addUpdateAddress });\n        }\n\n        this._onAddressUpdate(response, this._onAddOrUpdateSuccess);\n    }\n\n    private _onCountryChange = (countryRegionId: string) => {\n        this.countryRegionId = countryRegionId;\n        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });\n    }\n\n    private _getAddressFormatExcludeList = (): AddressItemType[] => {\n        const { config } = this.props;\n        const addressFormatExcludeList: AddressItemType[] = [];\n\n        if (!config.showAddressType) {\n            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);\n        }\n\n        addressFormatExcludeList.push(AddressItemType.IsPrimary);\n\n        return addressFormatExcludeList;\n    }\n\n    private _getStateProvinces = (): void => {\n        if (!this.countryRegionId || !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)) {\n            return;\n        }\n\n        // tslint:disable-next-line:no-floating-promises\n        this.addressCommon.getStateProvinces(this.countryRegionId).then(\n            (result: StateProvinceInfo[]) => {\n                const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);\n                // Reset state if selected state not found in the list.\n                if (!stateInfo) {\n                    set(this.addUpdateAddress, { ['State']: '' });\n                }\n                this.stateProvinceInfo = result;\n            });\n    }\n\n    private _setDefaultCountryRegionId(): void {\n        const { request } = this.props.context;\n        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;\n\n        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);\n    }\n\n    private _updateCurrentOperation = (operation: AddressOperation) => {\n        this.currentOperation = operation;\n    }\n\n    private _onSubmitUpdatePrimaryAddress = (address: Address): void => {\n        this.selectedAddress = address;\n        const response = this.addressCommon.updateCustomerPrimaryAddress(address);\n        this._onAddressUpdate(response, this._onUpdatePrimaryAddressSuccess);\n    }\n\n    private _goToEditAddress = (address: Address): void => {\n        this.addUpdateAddress = { ...address };\n        this.countryRegionId = this.addUpdateAddress.ThreeLetterISORegionName || 'USA';\n        this._updateCurrentOperation(AddressOperation.Update);\n    }\n\n    private _onRemoveAddress = (address: Address): void => {\n        address.Deactivate = true;\n        const response = this.addressCommon.updateCustomerAddress(address);\n        this._onAddressUpdate(response, this._onAddOrUpdateSuccess);\n    }\n\n    private _goToAddAddress = (): void => {\n        this.addUpdateAddress = {};\n        this._setDefaultCountryRegionId();\n        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: this.countryRegionId });\n        set(this.addUpdateAddress, { ['AddressTypeValue']: this.defaultAddressType });\n        this._setDefaultCountryRegionId();\n        this._updateCurrentOperation(AddressOperation.Add);\n    }\n\n    private _onAddOrUpdateSuccess = (response: IAddressResponse): void => {\n        if (response.customerAddresses) {\n            this.customerAddresses = response.customerAddresses;\n        }\n        this._resetView();\n    }\n\n    private _onUpdatePrimaryAddressSuccess = (response: IAddressResponse): void => {\n        if (response.customerAddresses) {\n            this.customerAddresses = response.customerAddresses;\n        }\n    }\n\n    private _resetView = (): void => {\n        this.selectedAddress = undefined;\n        this._updateCurrentOperation(AddressOperation.List);\n    }\n}\n\nexport default AccountManagementAddress;"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}