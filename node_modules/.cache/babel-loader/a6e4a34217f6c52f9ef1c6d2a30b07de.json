{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */var pageName='pgname';var moduleName='mname';var eventType='etype';/**\r\n * Commerce Insights attribute renderer that generates a 'data-m' telemetry attribute\r\n */export var expAttributeRenderer=function expAttributeRenderer(telemetryId,// tslint:disable-next-line:no-any\nadditionalTelemetryData){if(additionalTelemetryData&&pageName in additionalTelemetryData&&moduleName in additionalTelemetryData){var eventName=\"\".concat(additionalTelemetryData[pageName],\".\").concat(additionalTelemetryData[moduleName],\".\").concat(telemetryId);if(additionalTelemetryData[eventType]){eventName+=\".\".concat(additionalTelemetryData[eventType]);}return{'data-exp-event-id':eventName};}else{return{};}};","map":{"version":3,"sources":["../../../src/attribute-renderers/exp-attribute-renderer.ts"],"names":[],"mappings":"AAAA;;;AAGG,GAKH,GAAM,CAAA,QAAQ,CAAG,QAAjB,CACA,GAAM,CAAA,UAAU,CAAG,OAAnB,CACA,GAAM,CAAA,SAAS,CAAG,OAAlB,CAEA;;AAEG,GACH,MAAO,IAAM,CAAA,oBAAoB,CAA2B,QAA/C,CAAA,oBAA+C,CACxD,WADwD,CAExD;AACA,uBAHwD,CAInC,CACrB,GAAI,uBAAuB,EAAI,QAAQ,GAAI,CAAA,uBAAvC,EAAkE,UAAU,GAAI,CAAA,uBAApF,CAA6G,CACzG,GAAI,CAAA,SAAS,WAAM,uBAAuB,CAAC,QAAD,CAA7B,aAA2C,uBAAuB,CAAC,UAAD,CAAlE,aAAkF,WAAlF,CAAb,CACA,GAAI,uBAAuB,CAAC,SAAD,CAA3B,CAAwC,CACpC,SAAS,aAAQ,uBAAuB,CAAC,SAAD,CAA/B,CAAT,CACH,CACD,MAAO,CACH,oBAAqB,SADlB,CAAP,CAGH,CARD,IAQO,CACH,MAAO,EAAP,CACH,CACJ,CAhBM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IDataAttributeRenderer } from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\n\nconst pageName = 'pgname';\nconst moduleName = 'mname';\nconst eventType = 'etype';\n\n/**\n * Commerce Insights attribute renderer that generates a 'data-m' telemetry attribute\n */\nexport const expAttributeRenderer: IDataAttributeRenderer = (\n    telemetryId: string,\n    // tslint:disable-next-line:no-any\n    additionalTelemetryData?: any\n): IDictionary<string> => {\n    if (additionalTelemetryData && pageName in additionalTelemetryData && moduleName in additionalTelemetryData) {\n        let eventName = `${additionalTelemetryData[pageName]}.${additionalTelemetryData[moduleName]}.${telemetryId}`;\n        if (additionalTelemetryData[eventType]) {\n            eventName += `.${additionalTelemetryData[eventType]}`;\n        }\n        return {\n            'data-exp-event-id': eventName\n        };\n    } else {\n        return {};\n    }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}