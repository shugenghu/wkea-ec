{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{get,observable,set,transaction}from'mobx';/**\r\n * ClientCache implementation\r\n *\r\n * @class ClientCache\r\n * @implements {ICache}\r\n * @internal\r\n */export class ClientCache{constructor(){this.internalCache={};}/**\r\n     * Gets an item from the cache, and returning it wrapped in a ICacheItem\r\n     * @param type A string representing the type of the cache item\r\n     * @param key The key of the cache item\r\n     */Get(type,key){if(!type){throw new Error('Cannot send null arguments');}if(!key){return null;}type=type.toUpperCase();key=key.toUpperCase();return this.internalCache[type]?this.internalCache[type][key]:null;}/**\r\n     * Puts an item into the cache\r\n     * @param type A string representing the type of the cache item\r\n     * @param key The key of the cache item\r\n     * @param item The item to be put into the cache\r\n     */Put(type,key,item){if(!type||!key){throw new Error('Cannot send null arguments');}type=type.toUpperCase();key=key.toUpperCase();if(this.internalCache[type]===undefined){this.internalCache[type]={};}return transaction(()=>{let cacheItem=this.internalCache[type][key];if(cacheItem){set(cacheItem,'Item',item);}else{cacheItem=observable({Item:item},undefined,{deep:true,name:\"T:\".concat(type,\"_K:\").concat(key)});this.internalCache[type][key]=cacheItem;}return cacheItem;});}/**\r\n     * Gets the value only for a specific item from the cache\r\n     * This differs from the Get() method as this will not return a MobX observable value\r\n     * @param type A string representing the type of the cache item\r\n     * @param key The key of the cache item\r\n     */GetValue(type,key){const item=this.Get(type,key);return item?this.Value(item):null;}/**\r\n     * Get the value out of a cache item\r\n     * This returns the raw value of the item, it will *not* be a MobX observable value\r\n     * @param item The observable cache item to retireve the value from\r\n     */Value(item){return get(item,'Item');}}export default ClientCache;","map":{"version":3,"sources":["../../../src/cache/client-cache.ts"],"names":[],"mappings":"AAAA;;;AAGG,GAKH,OAAS,GAAT,CAAc,UAAd,CAA0B,GAA1B,CAA+B,WAA/B,KAAkD,MAAlD,CAEA;;;;;;AAMG,GACH,MAAM,MAAO,CAAA,WAAW,CAAxB,WAAA,EAAA,CACY,KAAA,aAAA,CAAmE,EAAnE,CAwEX,CAtEG;;;;AAIG,OACI,GAAG,CAAI,IAAJ,CAAkB,GAAlB,CAA6B,CACnC,GAAI,CAAC,IAAL,CAAW,CACP,KAAM,IAAI,CAAA,KAAJ,CAAU,4BAAV,CAAN,CACH,CAED,GAAI,CAAC,GAAL,CAAU,CACN,MAAO,KAAP,CACH,CAED,IAAI,CAAG,IAAI,CAAC,WAAL,EAAP,CACA,GAAG,CAAG,GAAG,CAAC,WAAJ,EAAN,CACA,MAAO,MAAK,aAAL,CAAmB,IAAnB,EAA0C,KAAK,aAAL,CAAmB,IAAnB,EAAyB,GAAzB,CAA1C,CAA0E,IAAjF,CACH,CAED;;;;;AAKG,OACI,GAAG,CAAI,IAAJ,CAAkB,GAAlB,CAA+B,IAA/B,CAAsC,CAC5C,GAAI,CAAC,IAAD,EAAS,CAAC,GAAd,CAAmB,CACf,KAAM,IAAI,CAAA,KAAJ,CAAU,4BAAV,CAAN,CACH,CAED,IAAI,CAAG,IAAI,CAAC,WAAL,EAAP,CACA,GAAG,CAAG,GAAG,CAAC,WAAJ,EAAN,CACA,GAAI,KAAK,aAAL,CAAmB,IAAnB,IAA6B,SAAjC,CAA4C,CACxC,KAAK,aAAL,CAAmB,IAAnB,EAA2B,EAA3B,CACH,CACD,MAAO,CAAA,WAAW,CAAgB,IAAK,CACnC,GAAI,CAAA,SAAS,CAAe,KAAK,aAAL,CAAmB,IAAnB,EAAyB,GAAzB,CAA5B,CACA,GAAI,SAAJ,CAAe,CACX,GAAG,CAAC,SAAD,CAAY,MAAZ,CAAoB,IAApB,CAAH,CACH,CAFD,IAEO,CACH,SAAS,CAAG,UAAU,CAAC,CAAE,IAAI,CAAE,IAAR,CAAD,CAAiB,SAAjB,CAA4B,CAC9C,IAAI,CAAE,IADwC,CAE9C,IAAI,aAAO,IAAP,eAAiB,GAAjB,CAF0C,CAA5B,CAAtB,CAIA,KAAK,aAAL,CAAmB,IAAnB,EAAyB,GAAzB,EAAgC,SAAhC,CACH,CAED,MAAsB,CAAA,SAAtB,CACH,CAbiB,CAAlB,CAcH,CAED;;;;;AAKG,OACI,QAAQ,CAAI,IAAJ,CAAkB,GAAlB,CAA6B,CACxC,KAAM,CAAA,IAAI,CAAG,KAAK,GAAL,CAAY,IAAZ,CAAkB,GAAlB,CAAb,CACA,MAAO,CAAA,IAAI,CAAG,KAAK,KAAL,CAAc,IAAd,CAAH,CAAyB,IAApC,CACH,CAED;;;;AAIG,OACI,KAAK,CAAI,IAAJ,CAAuB,CAC/B,MAAO,CAAA,GAAG,CAAC,IAAD,CAAO,MAAP,CAAV,CACH,CAxEmB,CA2ExB,cAAe,CAAA,WAAf","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:function-name\n// @TODO: change property names to be cammelCased\nimport { ICache, ICacheItem } from '@msdyn365-commerce/core-internal';\nimport { get, observable, set, transaction } from 'mobx';\n\n/**\n * ClientCache implementation\n *\n * @class ClientCache\n * @implements {ICache}\n * @internal\n */\nexport class ClientCache implements ICache {\n    private internalCache: { [type: string]: { [key: string]: ICacheItem } } = {};\n\n    /**\n     * Gets an item from the cache, and returning it wrapped in a ICacheItem\n     * @param type A string representing the type of the cache item\n     * @param key The key of the cache item\n     */\n    public Get<T>(type: string, key: string): ICacheItem<T> | null {\n        if (!type) {\n            throw new Error('Cannot send null arguments');\n        }\n\n        if (!key) {\n            return null;\n        }\n\n        type = type.toUpperCase();\n        key = key.toUpperCase();\n        return this.internalCache[type] ? <ICacheItem<T>>this.internalCache[type][key] : null;\n    }\n\n    /**\n     * Puts an item into the cache\n     * @param type A string representing the type of the cache item\n     * @param key The key of the cache item\n     * @param item The item to be put into the cache\n     */\n    public Put<T>(type: string, key: string, item: T): ICacheItem<T> {\n        if (!type || !key) {\n            throw new Error('Cannot send null arguments');\n        }\n\n        type = type.toUpperCase();\n        key = key.toUpperCase();\n        if (this.internalCache[type] === undefined) {\n            this.internalCache[type] = {};\n        }\n        return transaction<ICacheItem<T>>(() => {\n            let cacheItem: ICacheItem = this.internalCache[type][key];\n            if (cacheItem) {\n                set(cacheItem, 'Item', item);\n            } else {\n                cacheItem = observable({ Item: item }, undefined, {\n                    deep: true,\n                    name: `T:${type}_K:${key}`\n                });\n                this.internalCache[type][key] = cacheItem;\n            }\n\n            return <ICacheItem<T>>cacheItem;\n        });\n    }\n\n    /**\n     * Gets the value only for a specific item from the cache\n     * This differs from the Get() method as this will not return a MobX observable value\n     * @param type A string representing the type of the cache item\n     * @param key The key of the cache item\n     */\n    public GetValue<T>(type: string, key: string): T | null {\n        const item = this.Get<T>(type, key);\n        return item ? this.Value<T>(item) : null;\n    }\n\n    /**\n     * Get the value out of a cache item\n     * This returns the raw value of the item, it will *not* be a MobX observable value\n     * @param item The observable cache item to retireve the value from\n     */\n    public Value<T>(item: ICacheItem<T>): T {\n        return get(item, 'Item');\n    }\n}\n\nexport default ClientCache;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}