{"ast":null,"code":"import\"core-js/modules/es.promise.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{EXCEPTION_PRODUCT_LIST_ACTION,INVALID_PRODUCT_LIST_TYPE}from'@msdyn365-commerce/telemetry-internal';import{ProductListInput,ProductListType}from'./hydrator-action-inputs';import{getProductsByCategoryListAction}from'./product-list-actions/products-by-category.action';import{getProductsByRecommendationListAction}from'./product-list-actions/products-by-recommendation.action';import{getProductsByRelationshipIdListAction}from'./product-list-actions/products-by-relationship-id.action';import{getProductsBySearchListAction}from'./product-list-actions/products-by-search.action';/**\r\n * Method to hydrate a product list from metadata provided by CMS\r\n * @param listMetaData The metadata for the product list from CMS\r\n */export const hydrateProductList=async(listMetaData,context)=>{let action;switch(ProductListType[listMetaData.listType]){case ProductListType.productBySearch:action=getProductsBySearchListAction;break;case ProductListType.productByCategory:action=getProductsByCategoryListAction;break;case ProductListType.relatedProducts:action=getProductsByRelationshipIdListAction;break;case ProductListType.editorial:case ProductListType.algo:case ProductListType.recommendation:action=getProductsByRecommendationListAction;break;default:context.telemetry.error(INVALID_PRODUCT_LIST_TYPE,listMetaData.listType);listMetaData.products=[];listMetaData.listMetadata={error:INVALID_PRODUCT_LIST_TYPE};}if(action!==undefined){return action(new ProductListInput(listMetaData,context),context).then(productList=>{listMetaData.products=productList;}).catch(error=>{context.telemetry.error(EXCEPTION_PRODUCT_LIST_ACTION);context.telemetry.exception(error);listMetaData.products=[];listMetaData.listMetadata={error:EXCEPTION_PRODUCT_LIST_ACTION};});}return;};","map":{"version":3,"sources":["../../../src/hydrators/product-list-hydrator.ts"],"names":[],"mappings":"sCAAA;;;AAGG,GAKH,OAAS,6BAAT,CAAwC,yBAAxC,KAAyE,uCAAzE,CACA,OAA+B,gBAA/B,CAAiD,eAAjD,KAAwE,0BAAxE,CACA,OAAS,+BAAT,KAAgD,oDAAhD,CACA,OAAS,qCAAT,KAAsD,0DAAtD,CACA,OAAS,qCAAT,KAAsD,2DAAtD,CACA,OAAS,6BAAT,KAA8C,kDAA9C,CAEA;;;AAGG,GACH,MAAO,MAAM,CAAA,kBAAkB,CAAG,MAAO,YAAP,CAA2C,OAA3C,GAAqF,CACnH,GAAI,CAAA,MAAJ,CACA,OAAQ,eAAe,CAAC,YAAY,CAAC,QAAd,CAAvB,EACI,IAAK,CAAA,eAAe,CAAC,eAArB,CACI,MAAM,CAAG,6BAAT,CACA,MACJ,IAAK,CAAA,eAAe,CAAC,iBAArB,CACI,MAAM,CAAG,+BAAT,CACA,MACJ,IAAK,CAAA,eAAe,CAAC,eAArB,CACI,MAAM,CAAG,qCAAT,CACA,MACJ,IAAK,CAAA,eAAe,CAAC,SAArB,CACA,IAAK,CAAA,eAAe,CAAC,IAArB,CACA,IAAK,CAAA,eAAe,CAAC,cAArB,CACI,MAAM,CAAG,qCAAT,CACA,MACJ,QACI,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,yBAAxB,CAAmD,YAAY,CAAC,QAAhE,EACyB,YAAc,CAAC,QAAf,CAA0B,EAA1B,CACA,YAAc,CAAC,YAAf,CAA8B,CAAE,KAAK,CAAE,yBAAT,CAA9B,CAlBjC,CAqBA,GAAI,MAAM,GAAK,SAAf,CAA0B,CACtB,MAAO,CAAA,MAAM,CAAC,GAAI,CAAA,gBAAJ,CAAqB,YAArB,CAAmC,OAAnC,CAAD,CAA8C,OAA9C,CAAN,CACF,IADE,CACG,WAAW,EAAG,CACS,YAAc,CAAC,QAAf,CAA0B,WAA1B,CAC5B,CAHE,EAIF,KAJE,CAII,KAAK,EAAG,CACX,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,6BAAxB,EACA,OAAO,CAAC,SAAR,CAAkB,SAAlB,CAA4B,KAA5B,EACyB,YAAc,CAAC,QAAf,CAA0B,EAA1B,CACA,YAAc,CAAC,YAAf,CAA8B,CAAE,KAAK,CAAE,6BAAT,CAA9B,CAC5B,CATE,CAAP,CAUH,CAED,OACH,CArCM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { CacheType, IActionContext, IActionInput, ICommerceApiSettings, IObservableAction } from '@msdyn365-commerce/core-internal';\nimport { IProductList } from '@msdyn365-commerce/retail-proxy/dist/data-types';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { EXCEPTION_PRODUCT_LIST_ACTION, INVALID_PRODUCT_LIST_TYPE } from '@msdyn365-commerce/telemetry-internal';\nimport { IProductListMetaData, ProductListInput, ProductListType } from './hydrator-action-inputs';\nimport { getProductsByCategoryListAction } from './product-list-actions/products-by-category.action';\nimport { getProductsByRecommendationListAction } from './product-list-actions/products-by-recommendation.action';\nimport { getProductsByRelationshipIdListAction } from './product-list-actions/products-by-relationship-id.action';\nimport { getProductsBySearchListAction } from './product-list-actions/products-by-search.action';\n\n/**\n * Method to hydrate a product list from metadata provided by CMS\n * @param listMetaData The metadata for the product list from CMS\n */\nexport const hydrateProductList = async (listMetaData: IProductListMetaData, context: IActionContext): Promise<void> => {\n    let action: IObservableAction<ProductSearchResult[]> | undefined;\n    switch (ProductListType[listMetaData.listType]) {\n        case ProductListType.productBySearch:\n            action = getProductsBySearchListAction;\n            break;\n        case ProductListType.productByCategory:\n            action = getProductsByCategoryListAction;\n            break;\n        case ProductListType.relatedProducts:\n            action = getProductsByRelationshipIdListAction;\n            break;\n        case ProductListType.editorial:\n        case ProductListType.algo:\n        case ProductListType.recommendation:\n            action = getProductsByRecommendationListAction;\n            break;\n        default:\n            context.telemetry.error(INVALID_PRODUCT_LIST_TYPE, listMetaData.listType);\n            (<IProductList>(<unknown>listMetaData)).products = [];\n            (<IProductList>(<unknown>listMetaData)).listMetadata = { error: INVALID_PRODUCT_LIST_TYPE };\n    }\n\n    if (action !== undefined) {\n        return action(new ProductListInput(listMetaData, context), context)\n            .then(productList => {\n                (<IProductList>(<unknown>listMetaData)).products = productList;\n            })\n            .catch(error => {\n                context.telemetry.error(EXCEPTION_PRODUCT_LIST_ACTION);\n                context.telemetry.exception(error);\n                (<IProductList>(<unknown>listMetaData)).products = [];\n                (<IProductList>(<unknown>listMetaData)).listMetadata = { error: EXCEPTION_PRODUCT_LIST_ACTION };\n            });\n    }\n\n    return;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}