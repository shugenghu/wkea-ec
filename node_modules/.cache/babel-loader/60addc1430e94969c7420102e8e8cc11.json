{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{createDataActionHook}from'@msdyn365-commerce/core';import{TelemetryEvent}from'@msdyn365-commerce/telemetry-internal';import{getProductInfoFromCart}from'./telemetry.action.helper';var beforeAddToCart=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputs,actionContext){var actionInput,addCartLinesParams;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;actionInput=Array.isArray(inputs)?inputs[0]:inputs;if(!(actionInput.queryParams&&typeof actionInput.queryParams==='function')){_context.next=7;break;}addCartLinesParams=actionInput.queryParams();if(!(addCartLinesParams&&addCartLinesParams.cartLines)){_context.next=7;break;}actionContext.requestContext.telemetryData[\"addedCartLines\"]=addCartLinesParams.cartLines;return _context.abrupt(\"return\");case 7:actionContext.telemetry.debug('AddToCart pre-data action hook failed - No added cart lines found');_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);actionContext.telemetry.debug('AddToCart pre-data action hook failed.',_context.t0);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function beforeAddToCart(_x,_x2){return _ref.apply(this,arguments);};}();var afterAddToCart=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_inputs,cart,actionContext){var addedProducts,addedCartLines;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(window&&window._msdyn365&&window._msdyn365.telemetry){addedProducts={};addedCartLines=actionContext.requestContext.telemetryData[\"addedCartLines\"];if(addedCartLines){addedCartLines.forEach(function(cartLine){if(cartLine&&cartLine.ProductId){var addedProduct=actionContext.requestContext.telemetryData[cartLine.ProductId];if(addedProduct){addedProducts[cartLine.ProductId]=addedProduct;}}});}window._msdyn365.telemetry.logEvent(TelemetryEvent.AddToCart,getProductInfoFromCart(cart,addedProducts,actionContext.requestContext));}case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function afterAddToCart(_x3,_x4,_x5){return _ref2.apply(this,arguments);};}();createDataActionHook({actionId:'@msdyn365-commerce/retail-proxy/Carts/AddCartLines',postReaderHook:afterAddToCart,preReaderHook:beforeAddToCart});","map":{"version":3,"sources":["actions/addToCart-telemetry.action.ts"],"names":[],"mappings":"uIAAA;;;AAGG,GAEH,OAAS,oBAAT,KAAmE,yBAAnE,CAGA,OAAS,cAAT,KAA+B,uCAA/B,CACA,OAAS,sBAAT,KAAuC,2BAAvC,CASA,GAAM,CAAA,eAAe,0FAAG,iBAAO,MAAP,CAA8C,aAA9C,qKAEV,WAFU,CAEI,KAAK,CAAC,OAAN,CAAc,MAAd,EAA6C,MAAM,CAAC,CAAD,CAAnD,CAA8E,MAFlF,MAKZ,WAAW,CAAC,WAAZ,EAA2B,MAAO,CAAA,WAAW,CAAC,WAAnB,GAAmC,UALlD,0BAMN,kBANM,CAMe,WAAW,CAAC,WAAZ,EANf,MAOR,kBAAkB,EAAI,kBAAkB,CAAC,SAPjC,0BASR,aAAa,CAAC,cAAd,CAA6B,aAA7B,mBAA+D,kBAAkB,CAAC,SAAlF,CATQ,wCAahB,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAA8B,mEAA9B,EAbgB,iFAehB,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAA8B,wCAA9B,cAfgB,qEAAH,kBAAf,CAAA,eAAe,gDAArB,CAyBA,GAAM,CAAA,cAAc,2FAAG,kBAAO,OAAP,CAA+C,IAA/C,CAAoE,aAApE,uJACnB,GAAI,MAAM,EAAI,MAAM,CAAC,SAAjB,EAA8B,MAAM,CAAC,SAAP,CAAiB,SAAnD,CAA8D,CACpD,aADoD,CACjB,EADiB,CAEpD,cAFoD,CAEvB,aAAa,CAAC,cAAd,CAA6B,aAA7B,kBAFuB,CAK1D,GAAI,cAAJ,CAAoB,CAChB,cAAc,CAAC,OAAf,CAAuB,SAAC,QAAD,CAAuB,CAC1C,GAAI,QAAQ,EAAI,QAAQ,CAAC,SAAzB,CAAoC,CAChC,GAAM,CAAA,YAAY,CAAG,aAAa,CAAC,cAAd,CAA6B,aAA7B,CAA2C,QAAQ,CAAC,SAApD,CAArB,CACA,GAAI,YAAJ,CAAkB,CACd,aAAa,CAAC,QAAQ,CAAC,SAAV,CAAb,CAAoC,YAApC,CACH,CACJ,CACJ,CAPD,EAQH,CAGD,MAAM,CAAC,SAAP,CAAiB,SAAjB,CAA2B,QAA3B,CACI,cAAc,CAAC,SADnB,CAEI,sBAAsB,CAAC,IAAD,CAAO,aAAP,CAAsB,aAAa,CAAC,cAApC,CAF1B,EAIH,CAtBkB,wDAAH,kBAAd,CAAA,cAAc,sDAApB,CAyBA,oBAAoB,CAAC,CACjB,QAAQ,CAAE,oDADO,CAEjB,cAAc,CAAE,cAFC,CAGjB,aAAa,CAAE,eAHE,CAAD,CAApB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createDataActionHook, IActionContext, IActionInput } from '@msdyn365-commerce/core';\nimport { IAny, IDictionary, IMSDyn365Window } from '@msdyn365-commerce/core-internal';\nimport { Cart, CartLine, IAddCartLinesParam, IDataServiceRequest } from '@msdyn365-commerce/retail-proxy';\nimport { TelemetryEvent } from '@msdyn365-commerce/telemetry-internal';\nimport { getProductInfoFromCart } from './telemetry.action.helper';\n\ndeclare var window: IMSDyn365Window;\n\n/**\n * Saves info on cart lines added before calling data action\n * @param inputs Data action inputs\n * @param actionContext Action context\n */\nconst beforeAddToCart = async (inputs: IActionInput | IActionInput[], actionContext: IActionContext) => {\n    try {\n        const actionInput = Array.isArray(inputs) ? <IDataServiceRequest>inputs[0] : <IDataServiceRequest>inputs;\n\n        // If cart lines were added\n        if (actionInput.queryParams && typeof actionInput.queryParams === 'function') {\n            const addCartLinesParams = actionInput.queryParams<IAddCartLinesParam>();\n            if (addCartLinesParams && addCartLinesParams.cartLines) {\n                // Save info on added cart lines for post data action hook to pick up\n                actionContext.requestContext.telemetryData[`addedCartLines`] = addCartLinesParams.cartLines;\n                return;\n            }\n        }\n        actionContext.telemetry.debug('AddToCart pre-data action hook failed - No added cart lines found');\n    } catch (e) {\n        actionContext.telemetry.debug('AddToCart pre-data action hook failed.', e);\n    }\n};\n\n/**\n * Fires an AddToCart event after data action completed\n * @param _inputs Data action inputs\n * @param cart New cart object after cart lines have been added\n * @param actionContext Action context\n */\nconst afterAddToCart = async (_inputs: IActionInput | IActionInput[], cart: Cart | Cart[], actionContext: IActionContext) => {\n    if (window && window._msdyn365 && window._msdyn365.telemetry) {\n        const addedProducts: IDictionary<IAny> = {};\n        const addedCartLines = <CartLine[]>actionContext.requestContext.telemetryData[`addedCartLines`];\n\n        // If TelemetryData exists for added cart lines, collect product info\n        if (addedCartLines) {\n            addedCartLines.forEach((cartLine: CartLine) => {\n                if (cartLine && cartLine.ProductId) {\n                    const addedProduct = actionContext.requestContext.telemetryData[cartLine.ProductId];\n                    if (addedProduct) {\n                        addedProducts[cartLine.ProductId] = addedProduct;\n                    }\n                }\n            });\n        }\n\n        // Fire AddToCart event\n        window._msdyn365.telemetry.logEvent(\n            TelemetryEvent.AddToCart,\n            getProductInfoFromCart(cart, addedProducts, actionContext.requestContext)\n        );\n    }\n};\n\ncreateDataActionHook({\n    actionId: '@msdyn365-commerce/retail-proxy/Carts/AddCartLines',\n    postReaderHook: afterAddToCart,\n    preReaderHook: beforeAddToCart\n});\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}