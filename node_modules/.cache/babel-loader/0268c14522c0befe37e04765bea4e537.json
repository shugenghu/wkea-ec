{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ /**\r\n * Action Error Wrapper\r\n */export class ActionError extends Error{constructor(error){super();this.name=ActionError.Name;if(error instanceof Error){this.message=error.message;this.error=error;}else{if(error===\"Timeout\"/* Timeout */){this.status=error;this.message='Action Timeout';}else if(error===\"Hook Timeout\"/* HookTimeout */){this.status=error;this.message='Action hook Timeout';}else if(error===\"Service Unavailable\"/* ServiceUnavailable */){this.status=error;this.message='Action failed due to service unavailable';}else if(typeof error==='string'){this.message=error;}else{this.error=error;}}// As of Typescript 2.1 if we extend the Error object the prototype must be set explicitly\n// See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nObject.setPrototypeOf(this,ActionError.prototype);}/**\r\n     * Checks if an object is an action error\r\n     */static isActionError(error){return error instanceof Error&&error.name===ActionError.Name;}static isTimeoutError(error){return error&&error.status===\"Timeout\"/* Timeout */;}static isServiceUnavailable(error){return error&&error.status===\"Service Unavailable\"/* ServiceUnavailable */;}}ActionError.Name='ActionError';","map":{"version":3,"sources":["../../src/action-error.ts"],"names":[],"mappings":"AAAA;;;AAGG,G,CAWH;;AAEG,GACH,MAAM,MAAO,CAAA,WAAP,QAA2B,CAAA,KAAK,CA0BlC,WAAA,CAAY,KAAZ,CAAwB,CACpB,QACA,KAAK,IAAL,CAAY,WAAW,CAAC,IAAxB,CACA,GAAI,KAAK,WAAY,CAAA,KAArB,CAA4B,CACxB,KAAK,OAAL,CAAe,KAAK,CAAC,OAArB,CACA,KAAK,KAAL,CAAa,KAAb,CACH,CAHD,IAGO,CACH,GAAI,KAAK,GAAA,SAAA,aAAT,CAAyC,CACrC,KAAK,MAAL,CAAiC,KAAjC,CACA,KAAK,OAAL,CAAe,gBAAf,CACH,CAHD,IAGO,IAAI,KAAK,GAAA,cAAA,iBAAT,CAA6C,CAChD,KAAK,MAAL,CAAiC,KAAjC,CACA,KAAK,OAAL,CAAe,qBAAf,CACH,CAHM,IAGA,IAAI,KAAK,GAAA,qBAAA,wBAAT,CAAoD,CACvD,KAAK,MAAL,CAAiC,KAAjC,CACA,KAAK,OAAL,CAAe,0CAAf,CACH,CAHM,IAGA,IAAI,MAAO,CAAA,KAAP,GAAiB,QAArB,CAA+B,CAClC,KAAK,OAAL,CAAe,KAAf,CACH,CAFM,IAEA,CACH,KAAK,KAAL,CAAa,KAAb,CACH,CACJ,CAED;AACA;AACA,MAAM,CAAC,cAAP,CAAsB,IAAtB,CAA4B,WAAW,CAAC,SAAxC,EACH,CA9CD;;AAEG,OACI,MAAO,CAAA,aAAP,CAAqB,KAArB,CAAmC,CACtC,MAAO,CAAA,KAAK,WAAY,CAAA,KAAjB,EAAwC,KAAM,CAAC,IAAP,GAAgB,WAAW,CAAC,IAA3E,CACH,CAEM,MAAO,CAAA,cAAP,CAAsB,KAAtB,CAAoC,CACvC,MAAO,CAAA,KAAK,EAAkB,KAAM,CAAC,MAAP,GAAa,SAAA,aAA3C,CACH,CAEM,MAAO,CAAA,oBAAP,CAA4B,KAA5B,CAA0C,CAC7C,MAAO,CAAA,KAAK,EAAkB,KAAM,CAAC,MAAP,GAAa,qBAAA,wBAA3C,CACH,CAnBiC,CACX,WAAA,CAAA,IAAA,CAAe,aAAf","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n/**\n * Known action error failure states\n */\nexport const enum ActionErrorStatus {\n    Timeout = 'Timeout',\n    HookTimeout = 'Hook Timeout',\n    ServiceUnavailable = 'Service Unavailable'\n}\n\n/**\n * Action Error Wrapper\n */\nexport class ActionError extends Error {\n    public static readonly Name: string = 'ActionError';\n\n    public error?: unknown;\n    public status?: ActionErrorStatus;\n\n    /**\n     * Checks if an object is an action error\n     */\n    public static isActionError(error: unknown): boolean {\n        return error instanceof Error && (<ActionError>error).name === ActionError.Name;\n    }\n\n    public static isTimeoutError(error: unknown): boolean {\n        return error && (<ActionError>error).status === ActionErrorStatus.Timeout;\n    }\n\n    public static isServiceUnavailable(error: unknown): boolean {\n        return error && (<ActionError>error).status === ActionErrorStatus.ServiceUnavailable;\n    }\n\n    /**\n     * Action Errors\n     * @param error Original Error\n     */\n    constructor(error: ActionErrorStatus | Error);\n    constructor(error: Error) {\n        super();\n        this.name = ActionError.Name;\n        if (error instanceof Error) {\n            this.message = error.message;\n            this.error = error;\n        } else {\n            if (error === ActionErrorStatus.Timeout) {\n                this.status = <ActionErrorStatus>error;\n                this.message = 'Action Timeout';\n            } else if (error === ActionErrorStatus.HookTimeout) {\n                this.status = <ActionErrorStatus>error;\n                this.message = 'Action hook Timeout';\n            } else if (error === ActionErrorStatus.ServiceUnavailable) {\n                this.status = <ActionErrorStatus>error;\n                this.message = 'Action failed due to service unavailable';\n            } else if (typeof error === 'string') {\n                this.message = error;\n            } else {\n                this.error = error;\n            }\n        }\n\n        // As of Typescript 2.1 if we extend the Error object the prototype must be set explicitly\n        // See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ActionError.prototype);\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}