{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{addAddress,AddressManagementInput,updateAddress,updatePrimaryAddress}from'@msdyn365-commerce-modules/retail-actions';import{getStateProvinceAction,GetStateProvincesInput}from'../actions/get-state-provinces';export var AddressCommon=function AddressCommon(context,resources,telemetry){var _this=this;_classCallCheck(this,AddressCommon);this.getDefaultCountryRegionId=function(countryRegionId,countryRegions,market){var marketISOCode=market||'US';var currentCountryRegion=countryRegions.find(function(countryRegion){return(countryRegion.ISOCode||'')===marketISOCode;});return currentCountryRegion&&currentCountryRegion.CountryRegionId||countryRegionId;};this.parseRetailException=function(resources){return{errorTitle:resources.addressErrorMessageTitle,errorMessage:resources.addressGenericErrorMessage};};this.isAuthenticatedFlow=function(){return _this.context.request.user.isAuthenticated;};this.getStateProvinces=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(countryRegionId){var response,input;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:response=[];if(!(_this.context&&_this.context.actionContext)){_context.next=12;break;}_context.prev=2;input=new GetStateProvincesInput(countryRegionId,_this.context.request.apiSettings);_context.next=6;return getStateProvinceAction(input,_this.context.actionContext);case 6:response=_context.sent;_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](2);if(_this.telemetry){_this.telemetry.error(\"Error encountered \".concat(_context.t0));_this.telemetry.debug('Unable to get state provinces');}case 12:return _context.abrupt(\"return\",Promise.resolve(response));case 13:case\"end\":return _context.stop();}}},_callee,null,[[2,9]]);}));return function(_x){return _ref.apply(this,arguments);};}();this.addCustomerAddress=function(address){return _this.submitCustomerAddress(addAddress,address);};this.updateCustomerAddress=function(address){return _this.submitCustomerAddress(updateAddress,address);};this.updateCustomerPrimaryAddress=function(address){return _this.submitCustomerAddress(updatePrimaryAddress,address);};this.submitCustomerAddress=function(addressAction,address){address.AddressTypeValue=address.AddressTypeValue||7;var input=new AddressManagementInput(address);return _this.execAddressAction(addressAction,input,address);};this.execAddressAction=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(addressAction,input,address){var response,addresses;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:response={};if(!(_this.context&&_this.context.actionContext)){_context2.next=14;break;}_context2.prev=2;_context2.next=5;return addressAction(input,_this.context.actionContext);case 5:addresses=_context2.sent;if(addresses.length>0){response.address=address.RecordId?address:addresses[addresses.length-1];}response.customerAddresses=addresses;_context2.next=14;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](2);if(_this.telemetry){_this.telemetry.error(\"Error encountered \".concat(_context2.t0));_this.telemetry.debug('Unable to exec address action');}response=_this.parseRetailException(_this.resources);case 14:return _context2.abrupt(\"return\",Promise.resolve(response));case 15:case\"end\":return _context2.stop();}}},_callee2,null,[[2,10]]);}));return function(_x2,_x3,_x4){return _ref2.apply(this,arguments);};}();this.context=context;this.resources=resources;this.telemetry=telemetry;};","map":{"version":3,"sources":["common/address-common.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    addAddress, AddressManagementInput, updateAddress, updatePrimaryAddress\n} from '@msdyn365-commerce-modules/retail-actions';\nimport { IActionInput, ICoreContext, IObservableAction, ITelemetry } from '@msdyn365-commerce/core';\nimport {\n    Address, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getStateProvinceAction, GetStateProvincesInput } from '../actions/get-state-provinces';\nimport { IAddressResource, IAddressResponse } from './address-module.data';\n\n/**\n *\n * Address common\n */\nexport class AddressCommon {\n\n    private context: ICoreContext;\n    private resources: IAddressResource;\n    private telemetry: ITelemetry;\n\n    constructor(context: ICoreContext, resources: IAddressResource, telemetry: ITelemetry) {\n        this.context = context;\n        this.resources = resources;\n        this.telemetry = telemetry;\n    }\n\n    public getDefaultCountryRegionId = (countryRegionId: string, countryRegions: CountryRegionInfo[], market?: string): string => {\n        const marketISOCode = market || 'US';\n        const currentCountryRegion = countryRegions.find(countryRegion => (countryRegion.ISOCode || '') === marketISOCode);\n        return (currentCountryRegion && currentCountryRegion.CountryRegionId) || countryRegionId;\n    }\n\n    public parseRetailException = (resources: IAddressResource): IAddressResponse => {\n        return {\n            errorTitle: resources.addressErrorMessageTitle,\n            errorMessage: resources.addressGenericErrorMessage\n        };\n    }\n\n    public isAuthenticatedFlow = (): boolean => {\n        return this.context.request.user.isAuthenticated;\n    }\n\n    public getStateProvinces = async (countryRegionId: string): Promise<StateProvinceInfo[]> => {\n        let response: StateProvinceInfo[] = [];\n        if (this.context && this.context.actionContext) {\n            try {\n                const input = new GetStateProvincesInput(countryRegionId, this.context.request.apiSettings);\n                response = await getStateProvinceAction(input, this.context.actionContext);\n            } catch (error) {\n                if (this.telemetry) {\n                    this.telemetry.error(`Error encountered ${error}`);\n                    this.telemetry.debug('Unable to get state provinces');\n                }\n            }\n        }\n        return Promise.resolve(response);\n    }\n\n    public addCustomerAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(addAddress, address);\n    };\n\n    public updateCustomerAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(updateAddress, address);\n    };\n\n    public updateCustomerPrimaryAddress = (address: Address): Promise<IAddressResponse> => {\n        return this.submitCustomerAddress(updatePrimaryAddress, address);\n    };\n\n    private submitCustomerAddress = (addressAction: IObservableAction<Address[]>, address: Address): Promise<IAddressResponse> => {\n        address.AddressTypeValue = address.AddressTypeValue || 7; // 7 sets it to HOME by default\n\n        const input = new AddressManagementInput(address);\n        return this.execAddressAction(addressAction, input, address);\n    };\n\n    private execAddressAction = async (addressAction: IObservableAction<Address[]>, input: IActionInput | IActionInput[], address: Address): Promise<IAddressResponse> => {\n        let response: IAddressResponse = {};\n\n        if (this.context && this.context.actionContext) {\n            try {\n                const addresses = await addressAction(input, this.context.actionContext);\n                if (addresses.length > 0) {\n                    response.address = address.RecordId ? address : addresses[addresses.length - 1];\n                }\n                response.customerAddresses = addresses;\n            } catch (error) {\n                if (this.telemetry) {\n                    this.telemetry.error(`Error encountered ${error}`);\n                    this.telemetry.debug('Unable to exec address action');\n                }\n                response = this.parseRetailException(this.resources);\n            }\n        }\n        return Promise.resolve(response);\n    };\n}\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}