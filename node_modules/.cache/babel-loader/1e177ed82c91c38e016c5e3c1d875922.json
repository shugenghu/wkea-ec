{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{RequestCache}from'@msdyn365-commerce/cache-internal';import{EXCEPTION_PARSE_ISSUE,LogLevel}from'@msdyn365-commerce/telemetry-internal';import{sha256}from'js-sha256';import{getContentSecurityPolicy}from'../../utils/base-page-utils';import{getPageConfig}from'../parse-request';import serverRenderVnext from'../server-render.vnext';import{handleServerException}from'./request-router-helper';export var renderDefaultRouter=function renderDefaultRouter(req,res,next,content,context,_ref){var clientStats=_ref.clientStats;Promise.resolve().then(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var telemetry,_context$features,isEditor,enableAuthoringRemoveAndAddModule,pageConfig,rootComponentResponse,contentSecurityPolicyHeader,contentSecurityPolicy,serverCookies,i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:telemetry=res.locals.telemetry;_context.prev=1;if(content){_context.next=4;break;}throw new Error(EXCEPTION_PARSE_ISSUE);case 4:isEditor=context.params.isEditor;enableAuthoringRemoveAndAddModule=(_context$features=context.features)===null||_context$features===void 0?void 0:_context$features.enableAuthoringRemoveAndAddModule;pageConfig=getPageConfig(content,telemetry);// If OneRF sends back config errors for a particular module, OneRF will automatically set the module type to placeholder. However,\n// in editor mode, and iff authoring helper client side refresh feature is enabled (enableAuthoringRemoveAndAddModule)\n// we want to control this logic client side to enable client refresh once the module receives valid information\n// Therefore, we change the typename back to its original type and let safe-render-module decide whether to render a placeholder or not\nif(isEditor&&enableAuthoringRemoveAndAddModule&&content&&content.slots){changePlaceholdersBackToOriginalModuleType(content.slots);}telemetry.setTelemetryRequestContext({siteId:'[[Placeholder]]',pageType:context.urlTokens.pageType,pageId:content.pageRoot.id});if(!res.locals.isMockRequest){// set channel from res.locals as it's initially set in middleware or has errored out\ncontext.channel=res.locals.getOrgUnitConfigurationAsyncResult;}// generate nonce token based on request id, and save it to requestContext\ngenerateNonceToken(context);rootComponentResponse='';if(!(content.slots&&content.slots.length)){_context.next=16;break;}_context.next=15;return serverRenderVnext({content:content,options:{clientStats:clientStats},context:context,telemetry:telemetry,moduleTelemetry:res.locals.moduleTelemetry,pageConfig:pageConfig,// set request cache or re-use one created from route validation\nrequestCache:res.locals.requestCache||new RequestCache()});case 15:rootComponentResponse=_context.sent;case 16:// Add Content-Security-Policy Header\n// If report-only mode set Content-Security-Policy-Report-Only header\ncontentSecurityPolicyHeader='Content-Security-Policy';if(context.app&&context.app.contentSecurityPolicy&&context.app.contentSecurityPolicy.enableReportOnlyMode){contentSecurityPolicyHeader='Content-Security-Policy-Report-Only';}contentSecurityPolicy=getContentSecurityPolicy(context);// Set header if policies exist and if CSP is enabled\nif(contentSecurityPolicy){res.setHeader(contentSecurityPolicyHeader,contentSecurityPolicy);}// Apppend server side cookies to response header if present\n// @ts-ignore not part of public contract\nserverCookies=context.cookies?context.cookies.serverCookies:[];if(serverCookies.length>0){// In local dev scenario, because we directly return this response,\n// send the response with the Set-Cookie headers to set the cookies from server side\nif(process.env.NODE_ENV==='development'){for(i=0;i<serverCookies.length;i++){res.setHeader('Set-Cookie',serverCookies[i]);}}res.setHeader('X-Server-Cookies',serverCookies);}telemetry.log(LogLevel.Debug,'End of Page Render... Sending response');res.send(rootComponentResponse);_context.next=29;break;case 26:_context.prev=26;_context.t0=_context[\"catch\"](1);handleServerException(res,'Server Exception',_context.t0,telemetry);case 29:case\"end\":return _context.stop();}}},_callee,null,[[1,26]]);})))[\"catch\"](function(e){var telemetry=res.locals.telemetry;telemetry.log(LogLevel.Error,'Failed to render page',{exception:e});next();});};var changePlaceholdersBackToOriginalModuleType=function changePlaceholdersBackToOriginalModuleType(slots){for(var i=0;i<slots.length;i++){var curModule=slots[i];if(curModule.configErrors&&curModule.configErrors.length>0){var _curModule$config;// OneRF will send the original module type in the config but in case it cannot be derived fall back to using\n// placeholder\n// @ts-ignore\nvar originalModuleType=(_curModule$config=curModule.config)===null||_curModule$config===void 0?void 0:_curModule$config.moduleType;if(originalModuleType){curModule.typeName=originalModuleType;}}}};var generateNonceToken=function generateNonceToken(requestContext){if(!requestContext||!requestContext.app||!requestContext.app.contentSecurityPolicy||requestContext.app.contentSecurityPolicy.disableContentSecurityPolicy||!requestContext.app.contentSecurityPolicy.enableNonce){return;}var requestId=requestContext.operationId;var nonceToken=sha256(requestId);requestContext.app.contentSecurityPolicy?requestContext.app.contentSecurityPolicy.nonceToken=nonceToken:null;};","map":{"version":3,"sources":["../../../../src/_server/request-routers/render-default-router.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { RequestCache } from '@msdyn365-commerce/cache-internal';\nimport { IModuleContract, IPageResponse, IRequestContext } from '@msdyn365-commerce/core-internal';\nimport { EXCEPTION_PARSE_ISSUE, InternalTelemetry, LogLevel, Telemetry } from '@msdyn365-commerce/telemetry-internal';\nimport { NextFunction, Request, Response } from 'express';\nimport { sha256 } from 'js-sha256';\nimport { inspect } from 'util';\nimport { getContentSecurityPolicy } from '../../utils/base-page-utils';\nimport { getPageConfig } from '../parse-request';\nimport serverRenderVnext from '../server-render.vnext';\nimport { handleServerException } from './request-router-helper';\n\nexport const renderDefaultRouter = (\n    req: Request,\n    res: Response,\n    next: NextFunction,\n    content: IPageResponse,\n    context: IRequestContext,\n    { clientStats }: { clientStats: {} }\n) => {\n    Promise.resolve()\n        .then(async () => {\n            const { telemetry }: { telemetry: InternalTelemetry } = res.locals;\n            try {\n                if (!content) {\n                    throw new Error(EXCEPTION_PARSE_ISSUE);\n                }\n\n                const isEditor = context.params.isEditor;\n                const enableAuthoringRemoveAndAddModule = context.features?.enableAuthoringRemoveAndAddModule;\n                const pageConfig = getPageConfig(content, telemetry);\n\n                // If OneRF sends back config errors for a particular module, OneRF will automatically set the module type to placeholder. However,\n                // in editor mode, and iff authoring helper client side refresh feature is enabled (enableAuthoringRemoveAndAddModule)\n                // we want to control this logic client side to enable client refresh once the module receives valid information\n                // Therefore, we change the typename back to its original type and let safe-render-module decide whether to render a placeholder or not\n                if (isEditor && enableAuthoringRemoveAndAddModule && content && content.slots) {\n                    changePlaceholdersBackToOriginalModuleType(content.slots);\n                }\n\n                telemetry.setTelemetryRequestContext({\n                    siteId: '[[Placeholder]]',\n                    pageType: context.urlTokens.pageType,\n                    pageId: content.pageRoot.id\n                });\n\n                if (!res.locals.isMockRequest) {\n                    // set channel from res.locals as it's initially set in middleware or has errored out\n                    context.channel = res.locals.getOrgUnitConfigurationAsyncResult;\n                }\n                // generate nonce token based on request id, and save it to requestContext\n                generateNonceToken(context);\n                let rootComponentResponse: string = '';\n                if (content.slots && content.slots.length) {\n                    rootComponentResponse = await serverRenderVnext({\n                        content,\n                        options: { clientStats },\n                        context,\n                        telemetry,\n                        moduleTelemetry: res.locals.moduleTelemetry,\n                        pageConfig,\n                        // set request cache or re-use one created from route validation\n                        requestCache: res.locals.requestCache || new RequestCache()\n                    });\n                }\n                // Add Content-Security-Policy Header\n\n                // If report-only mode set Content-Security-Policy-Report-Only header\n                let contentSecurityPolicyHeader: string = 'Content-Security-Policy';\n                if (context.app && context.app.contentSecurityPolicy && context.app.contentSecurityPolicy.enableReportOnlyMode) {\n                    contentSecurityPolicyHeader = 'Content-Security-Policy-Report-Only';\n                }\n                const contentSecurityPolicy = getContentSecurityPolicy(context);\n                // Set header if policies exist and if CSP is enabled\n                if (contentSecurityPolicy) {\n                    res.setHeader(contentSecurityPolicyHeader, contentSecurityPolicy);\n                }\n\n                // Apppend server side cookies to response header if present\n                // @ts-ignore not part of public contract\n                const serverCookies = context.cookies ? context.cookies.serverCookies : [];\n                if (serverCookies.length > 0) {\n                    // In local dev scenario, because we directly return this response,\n                    // send the response with the Set-Cookie headers to set the cookies from server side\n                    if (process.env.NODE_ENV === 'development') {\n                        for (let i = 0; i < serverCookies.length; i++) {\n                            res.setHeader('Set-Cookie', serverCookies[i]);\n                        }\n                    }\n                    res.setHeader('X-Server-Cookies', serverCookies);\n                }\n\n                telemetry.log(LogLevel.Debug, 'End of Page Render... Sending response');\n\n                res.send(rootComponentResponse);\n            } catch (e) {\n                handleServerException(res, 'Server Exception', e, telemetry);\n            }\n        })\n        .catch((e: Error) => {\n            const { telemetry }: { telemetry: InternalTelemetry } = res.locals;\n            telemetry.log(LogLevel.Error, 'Failed to render page', { exception: e });\n            next();\n        });\n};\n\nconst changePlaceholdersBackToOriginalModuleType = (slots: IModuleContract[]) => {\n    for (let i = 0; i < slots.length; i++) {\n        const curModule = slots[i];\n        if (curModule.configErrors && curModule.configErrors.length > 0) {\n            // OneRF will send the original module type in the config but in case it cannot be derived fall back to using\n            // placeholder\n            // @ts-ignore\n            const originalModuleType = curModule.config?.moduleType;\n            if (originalModuleType) {\n                curModule.typeName = originalModuleType;\n            }\n        }\n    }\n};\n\nconst generateNonceToken = (requestContext:IRequestContext) => {\n    if (!requestContext || !requestContext.app || !requestContext.app.contentSecurityPolicy || requestContext.app.contentSecurityPolicy.disableContentSecurityPolicy || !requestContext.app.contentSecurityPolicy.enableNonce) {\n        return;\n    }\n    const requestId = requestContext.operationId;\n    const nonceToken = sha256(requestId);\n    requestContext.app.contentSecurityPolicy? requestContext.app.contentSecurityPolicy.nonceToken = nonceToken:null;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}