{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-floating-promises\nimport{LogLevel,NumericLogLevel}from'../interfaces';import{TelemetryBase}from'./telemetry-base';/**\r\n * Telemetry client containing trace loggers\r\n */export class Telemetry extends TelemetryBase{/**\r\n     * Creates a new instance of Telemetry.\r\n     */constructor(){var _this;super();_this=this;/**\r\n         * Logs a trace message with the Trace log level\r\n         * @param message The string to log\r\n         * @param args Any extra arguments to log. Will be converted to strings and appended to message\r\n         */this.trace=function(message){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}_this._logTrace(LogLevel.Trace,message,args);};/**\r\n         * Logs a trace message with the Debug log level\r\n         * @param message The string to log\r\n         * @param args Any extra arguments to log. Will be converted to strings and appended to message\r\n         */this.debug=function(message){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}_this._logTrace(LogLevel.Debug,message,args);};/**\r\n         * Logs a trace message with the Information log level\r\n         * @param message The string to log\r\n         * @param args Any extra arguments to log. Will be converted to strings and appended to message\r\n         */this.information=function(message){for(var _len3=arguments.length,args=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){args[_key3-1]=arguments[_key3];}_this._logTrace(LogLevel.Information,message,args);};/**\r\n         * Logs a trace message with the Warning log level\r\n         * @param message The string to log\r\n         * @param args Any extra arguments to log. Will be converted to strings and appended to message\r\n         */this.warning=function(message){for(var _len4=arguments.length,args=new Array(_len4>1?_len4-1:0),_key4=1;_key4<_len4;_key4++){args[_key4-1]=arguments[_key4];}_this._logTrace(LogLevel.Warning,message,args);};/**\r\n         * Logs a trace message with the Error log level\r\n         * @param message The string to log\r\n         * @param args Any extra arguments to log. Will be converted to strings and appended to message\r\n         */this.error=function(message){for(var _len5=arguments.length,args=new Array(_len5>1?_len5-1:0),_key5=1;_key5<_len5;_key5++){args[_key5-1]=arguments[_key5];}_this._logTrace(LogLevel.Error,message,args);};/**\r\n         * Logs a trace message with the Critical log level\r\n         * @param message The string to log\r\n         * @param args Any extra arguments to log. Will be converted to strings and appended to message\r\n         */this.critical=function(message){for(var _len6=arguments.length,args=new Array(_len6>1?_len6-1:0),_key6=1;_key6<_len6;_key6++){args[_key6-1]=arguments[_key6];}_this._logTrace(LogLevel.Critical,message,args);};/**\r\n         * Logs an Error object as an exception\r\n         * @param error The Error object to log\r\n         */this.exception=error=>{this.notifyTraceLoggers(logger=>logger.exception(error,this._telemetryContext));};/**\r\n         * Sets the properties specific to the current module that should be added to every log\r\n         * @param moduleContext Contains the context items specific to the current module\r\n         */this.setTelemetryModuleContext=moduleContext=>{return()=>{// Create copy of telemetry object with specified module context\n// TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?\nconst telemetryWithContext=new Telemetry();telemetryWithContext._enableDataAnalytics=this._enableDataAnalytics;telemetryWithContext._webAnalyticsPlugin=this._webAnalyticsPlugin;telemetryWithContext._traceLoggers=this._traceLoggers;telemetryWithContext._eventLoggers=this._eventLoggers;telemetryWithContext._expLogger=this._expLogger;telemetryWithContext._attributeRenderers=this._attributeRenderers;telemetryWithContext._telemetryContext.requestContext=this._telemetryContext.requestContext;telemetryWithContext._telemetryContext.moduleContext=moduleContext;return telemetryWithContext;};};/**\r\n         * Logs a structured message at the given log level, with optional custom tags and/or an exception\r\n         * @param logLevel LogLevel of the message\r\n         * @param messageTemplate String to log, denoting placeholders with {placeholder}.\r\n         * Example input string: \"Hello {signedInUser}! Good {morningOrEvening}!\"\r\n         * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.\r\n         * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.\r\n         */this.log=(logLevel,messageTemplate,logOptions)=>{this._log(logLevel,messageTemplate,logOptions);};/**\r\n         * Logs a trace message with the given LogLevel\r\n         * @param logLevel LogLevel of the trace message\r\n         * @param message The string to log\r\n         * @param args Any extra arguments to log. Will be converted to strings and appended to message\r\n         */this._logTrace=(logLevel,message,args)=>{const requestedLogLevel=NumericLogLevel[logLevel];const minLogLevel=process.env.SDK_MIN_LOG_LEVEL;if(minLogLevel<=requestedLogLevel){this.notifyTraceLoggers(logger=>logger.log(logLevel,message,args,this._telemetryContext));}};}}","map":{"version":3,"sources":["../../../src/telemetry/telemetry.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-floating-promises\nimport { ITelemetry, ITelemetryModuleContext, LogLevel, NumericLogLevel } from '../interfaces';\nimport { TelemetryBase } from './telemetry-base';\nimport { TelemetryLogOptions } from './telemetry-log-options';\n\n/**\n * Telemetry client containing trace loggers\n */\nexport class Telemetry extends TelemetryBase implements ITelemetry {\n    /**\n     * Creates a new instance of Telemetry.\n     */\n    public constructor() {\n        super();\n    }\n\n    /**\n     * Logs a trace message with the Trace log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public trace = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Trace, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Debug log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public debug = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Debug, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Information log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public information = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Information, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Warning log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public warning = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Warning, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Error log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public error = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Error, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Critical log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public critical = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Critical, message, args);\n    };\n\n    /**\n     * Logs an Error object as an exception\n     * @param error The Error object to log\n     */\n    public exception = (error: Error): void => {\n        this.notifyTraceLoggers(logger => logger.exception(error, this._telemetryContext));\n    };\n\n    /**\n     * Sets the properties specific to the current module that should be added to every log\n     * @param moduleContext Contains the context items specific to the current module\n     */\n    public setTelemetryModuleContext = (moduleContext: ITelemetryModuleContext) => {\n        return () => {\n            // Create copy of telemetry object with specified module context\n            // TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?\n            const telemetryWithContext = new Telemetry();\n            telemetryWithContext._enableDataAnalytics = this._enableDataAnalytics;\n            telemetryWithContext._webAnalyticsPlugin = this._webAnalyticsPlugin;\n            telemetryWithContext._traceLoggers = this._traceLoggers;\n            telemetryWithContext._eventLoggers = this._eventLoggers;\n            telemetryWithContext._expLogger = this._expLogger;\n            telemetryWithContext._attributeRenderers = this._attributeRenderers;\n            telemetryWithContext._telemetryContext.requestContext = this._telemetryContext.requestContext;\n            telemetryWithContext._telemetryContext.moduleContext = moduleContext;\n\n            return telemetryWithContext;\n        };\n    };\n\n    /**\n     * Logs a structured message at the given log level, with optional custom tags and/or an exception\n     * @param logLevel LogLevel of the message\n     * @param messageTemplate String to log, denoting placeholders with {placeholder}.\n     * Example input string: \"Hello {signedInUser}! Good {morningOrEvening}!\"\n     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.\n     * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.\n     */\n    public log = (logLevel: LogLevel, messageTemplate: string, logOptions?: TelemetryLogOptions): void => {\n        this._log(logLevel, messageTemplate, logOptions);\n    };\n\n    /**\n     * Logs a trace message with the given LogLevel\n     * @param logLevel LogLevel of the trace message\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    private _logTrace = (logLevel: LogLevel, message: string, args: unknown[]): void => {\n        const requestedLogLevel = NumericLogLevel[logLevel];\n        const minLogLevel = <number>(<unknown>process.env.SDK_MIN_LOG_LEVEL);\n        if (minLogLevel <= requestedLogLevel) {\n            this.notifyTraceLoggers(logger => logger.log(logLevel, message, args, this._telemetryContext));\n        }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}