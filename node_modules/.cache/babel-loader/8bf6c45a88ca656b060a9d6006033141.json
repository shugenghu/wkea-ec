{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // fix until babel-plugin-univeral-import changes go in...\nexport var fixChunkName=function fixChunkName(args){var actualChunkName=args.chunkName();// do we have 'the bug' in our named chunk? we can tell because id naming via babel plugin has the same issue\nvar matches=/[._]/.exec(args.id);var replaceRegEx=/[./_]/gi;// if we have a match, should be this..\nif(matches){actualChunkName=actualChunkName.substr(0,matches.index).concat(actualChunkName.substr(matches.index).replace(replaceRegEx,'-'));}else{actualChunkName=args.id.concat(actualChunkName.substr(args.id.length).replace(replaceRegEx,'-'));}return actualChunkName;};export var getDefaultOrResult=function getDefaultOrResult(obj){return obj&&obj[\"default\"]?obj[\"default\"]:obj;};","map":{"version":3,"sources":["../../../../src/utilities/internal/dynamic-import-extensions-helpers.ts"],"names":[],"mappings":"AAAA;;;AAGG,G,CAWH;AACA,MAAO,IAAM,CAAA,YAAY,CAAG,QAAf,CAAA,YAAe,CAAC,IAAD,CAA2B,CACnD,GAAI,CAAA,eAAe,CAAG,IAAI,CAAC,SAAL,EAAtB,CACA;AACA,GAAM,CAAA,OAAO,CAAG,OAAO,IAAP,CAAY,IAAI,CAAC,EAAjB,CAAhB,CACA,GAAM,CAAA,YAAY,CAAG,SAArB,CACA;AACA,GAAI,OAAJ,CAAa,CACT,eAAe,CAAG,eAAe,CAAC,MAAhB,CAAuB,CAAvB,CAA0B,OAAO,CAAC,KAAlC,EAAyC,MAAzC,CAAgD,eAAe,CAAC,MAAhB,CAAuB,OAAO,CAAC,KAA/B,EAAsC,OAAtC,CAA8C,YAA9C,CAA4D,GAA5D,CAAhD,CAAlB,CACH,CAFD,IAEO,CACH,eAAe,CAAG,IAAI,CAAC,EAAL,CAAQ,MAAR,CAAe,eAAe,CAAC,MAAhB,CAAuB,IAAI,CAAC,EAAL,CAAQ,MAA/B,EAAuC,OAAvC,CAA+C,YAA/C,CAA6D,GAA7D,CAAf,CAAlB,CACH,CAED,MAAO,CAAA,eAAP,CACH,CAbM,CAeP,MAAO,IAAM,CAAA,kBAAkB,CAAG,QAArB,CAAA,kBAAqB,CAAC,GAAD,QAAiD,CAAA,GAAG,EAAI,GAAG,WAAV,CAAqB,GAAG,WAAxB,CAAmC,GAApF,EAA3B","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable no-single-line-block-comment no-reserved-keywords\n\n// keep private methods here to easily export & test without exposing as public exports\nimport { IUniversalImport } from '../../interfaces';\n\nexport interface IESModule {\n    default: Function;\n}\n\n// fix until babel-plugin-univeral-import changes go in...\nexport const fixChunkName = (args: IUniversalImport) => {\n    let actualChunkName = args.chunkName();\n    // do we have 'the bug' in our named chunk? we can tell because id naming via babel plugin has the same issue\n    const matches = /[._]/.exec(args.id);\n    const replaceRegEx = /[./_]/gi;\n    // if we have a match, should be this..\n    if (matches) {\n        actualChunkName = actualChunkName.substr(0, matches.index).concat(actualChunkName.substr(matches.index).replace(replaceRegEx, '-'));\n    } else {\n        actualChunkName = args.id.concat(actualChunkName.substr(args.id.length).replace(replaceRegEx, '-'));\n    }\n\n    return actualChunkName;\n};\n\nexport const getDefaultOrResult = (obj?: IESModule): Function | {} | undefined => (obj && obj.default ? obj.default : obj);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}