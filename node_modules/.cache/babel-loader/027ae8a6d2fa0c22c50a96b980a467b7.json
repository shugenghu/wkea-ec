{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";import _inherits from\"@babel/runtime/helpers/esm/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/esm/getPrototypeOf\";function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=o[Symbol.iterator]();},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import{__decorate}from\"tslib\";import*as React from'react';import{getTelemetryObject}from'@msdyn365-commerce-modules/utilities';import classnames from'classnames';import{observable,set}from'mobx';import{AddressCommon}from'../../common/address-common';import{AddressFormat}from'../../common/address-format';import{AddressItemDisplayType,AddressItemType,AddressValidationRuleType}from'../../common/address-format.data';import{AddressMetaData}from'../../common/address-meta-data';import{AddressType}from'../../common/address-module.data';import{AddressAddUpdate}from'../../common/components/address-add';var BusinessAccountAddress=/*#__PURE__*/function(_React$Component){_inherits(BusinessAccountAddress,_React$Component);var _super=_createSuper(BusinessAccountAddress);function BusinessAccountAddress(props){var _this;_classCallCheck(this,BusinessAccountAddress);_this=_super.call(this,props);_this.countryRegionId='USA';_this.defaultAddressType=8;_this.excludedList=[AddressItemType.Name,AddressItemType.AddressTypeValue,AddressItemType.IsPrimary];_this._resetAddressFields=function(){var addressFormat=_this.addressFormat.getAddressFormat(_this.countryRegionId);addressFormat.map(function(addressFormatItem){switch(addressFormatItem.displayType){case AddressItemDisplayType.Input:_this.addUpdateAddress[addressFormatItem.name]='';break;case AddressItemDisplayType.Checkbox:_this.addUpdateAddress[addressFormatItem.name]=false;break;default:switch(addressFormatItem.type){case AddressItemType.ThreeLetterISORegionName:_this.addUpdateAddress[addressFormatItem.name]=_this.countryRegionId;break;case AddressItemType.AddressTypeValue:_this.addUpdateAddress[addressFormatItem.name]=_this.defaultAddressType;break;case AddressItemType.State:_this.addUpdateAddress[addressFormatItem.name]='';break;default:_this.addUpdateAddress[addressFormatItem.name]=undefined;}}});};_this._renderAddOrUpdateAddress=function(){return AddressAddUpdate({isUpdating:_this.isUpdating,resources:_this.resources,addressType:AddressType.Company,addressFormat:_this.addressFormat.getAddressFormat(_this.countryRegionId),defaultCountryRegionId:_this.countryRegionId,defaultAddressType:_this.defaultAddressType,selectedAddress:_this.addUpdateAddress,validationError:_this.validationError,hasError:_this.props.hasError,addressActionResponse:_this.addressActionResponse,telemetryContent:_this.telemetryContent,dropdownDisplayData:_this.addressFormat.getPrefilledAddressDropdownData(_this.resources.addressStateDefaultSelectionText,_this.stateProvinceInfo),onInputChange:_this._onAddressAddUpdateInputChange,onDropdownChange:_this._onAddressAddUpdateDropdownChange});};_this._onAddressAddUpdateInputChange=function(event){_this._updateAddress(event.target.name,event.target.value);};_this._onAddressAddUpdateDropdownChange=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(event.target.name===AddressItemType[AddressItemType.ThreeLetterISORegionName])){_context.next=5;break;}_context.next=3;return _this._updateCountryRegionId(event.target.value);case 3:_context.next=6;break;case 5:_this._updateAddress(event.target.name,event.target.value);case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this._updateAddress=function(name,value){var _this$props=_this.props,updateForm=_this$props.updateForm,isRequired=_this$props.isRequired,resources=_this$props.resources;var cleanValue=value;if(typeof value==='string'){cleanValue=(value||'').replace(new RegExp('[<>]','gi'),'');}set(_this.addUpdateAddress,_defineProperty({},name,cleanValue));if(_this._isEmpty()){if(isRequired){updateForm(true,undefined);}else{_this.addressFormat=new AddressFormat(_this.countryRegions,new AddressMetaData(_objectSpread({},resources),_this.excludedList,[]),_this.addressPurposes);updateForm(false,_this.addUpdateAddress);}}else{_this.addressFormat=new AddressFormat(_this.countryRegions,new AddressMetaData(_objectSpread({},resources),_this.excludedList,undefined),_this.addressPurposes);if(_this.addressFormat.validateAddressFormat(_this.addUpdateAddress,_this.validationError,_this.countryRegionId)){updateForm(false,_this.addUpdateAddress);}else{updateForm(true,undefined);}}};_this._isEmpty=function(){var addressFormat=_this.addressFormat.getAddressFormat(_this.countryRegionId);for(var i=0;i<addressFormat.length;i++){var addressFormatItem=addressFormat[i];if(addressFormatItem.type!==AddressItemType.ThreeLetterISORegionName||_this._isInputRequired(addressFormatItem)){var addressItemValue=_this.addUpdateAddress[addressFormatItem.name];if(addressItemValue||addressItemValue&&addressItemValue!==''){return false;}}}return true;};_this._isInputRequired=function(addressFormatItem){if(addressFormatItem===null||!addressFormatItem.validationRules||addressFormatItem.validationRules.length===0){return false;}var _iterator=_createForOfIteratorHelper(addressFormatItem.validationRules),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var validationRule=_step.value;if(validationRule.type===AddressValidationRuleType.Required){return false;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return true;};_this._updateCountryRegionId=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_this.countryRegionId=value;_context2.next=3;return _this.addressCommon.getStateProvinces(_this.countryRegionId).then(function(result){var stateInfo=result.some(function(state){return state.StateId===_this.addUpdateAddress.State;});if(!stateInfo){_this._updateAddress('State','');}_this.stateProvinceInfo=result;});case 3:_this._updateAddress('ThreeLetterISORegionName',_this.countryRegionId);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();var _this$props2=_this.props,context=_this$props2.context,data=_this$props2.data,resources=_this$props2.resources,telemetry=_this$props2.telemetry;_this.addUpdateAddress={};_this.resources=resources;_this.countryRegions=data.countryRegions.result||[];_this.addressPurposes=data.addressPurposes.result||[];_this.stateProvinceInfo=data.countryStates.result||[];_this.addressFormat=new AddressFormat(_this.countryRegions,new AddressMetaData(_objectSpread({},resources),_this.excludedList,props.isRequired?undefined:[]),_this.addressPurposes);_this.addressCommon=new AddressCommon(context,resources,telemetry);_this.validationError={};_this.telemetryContent=getTelemetryObject(_this.props.context.request.telemetryPageName,_this.props.friendlyName,_this.props.telemetry);return _this;}_createClass(BusinessAccountAddress,[{key:\"componentDidMount\",value:function componentDidMount(){this._setDefaultCountryRegionId();}},{key:\"render\",value:function render(){var _this$props3=this.props,renderView=_this$props3.renderView,config=_this$props3.config,hasError=_this$props3.hasError,resetAddress=_this$props3.resetAddress;if(resetAddress){this._resetAddressFields();}var viewProps=_objectSpread(_objectSpread({},this.props),{},{countryRegionId:this.countryRegionId,stateProvinceInfo:this.stateProvinceInfo,validationError:this.validationError,addressActionResponse:this.addressActionResponse,hasError:hasError,className:config.className,BusinessAccountAddress:{moduleProps:this.props,className:classnames('ms-business-account-address',config.className)},showAddOrUpdateAddress:this._renderAddOrUpdateAddress()});return renderView(viewProps);}},{key:\"_setDefaultCountryRegionId\",value:function _setDefaultCountryRegionId(){var request=this.props.context.request;var market=request&&request.channel&&request.channel.ChannelCountryRegionISOCode;this._updateCountryRegionId(this.addressCommon.getDefaultCountryRegionId(this.countryRegionId,this.countryRegions,market));set(this.addUpdateAddress,{AddressTypeValue:this.defaultAddressType});}}]);return BusinessAccountAddress;}(React.Component);__decorate([observable],BusinessAccountAddress.prototype,\"addUpdateAddress\",void 0);__decorate([observable],BusinessAccountAddress.prototype,\"countryRegionId\",void 0);__decorate([observable],BusinessAccountAddress.prototype,\"stateProvinceInfo\",void 0);__decorate([observable],BusinessAccountAddress.prototype,\"validationError\",void 0);export default BusinessAccountAddress;","map":{"version":3,"sources":["modules/business-account-address/business-account-address.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\n\nimport { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo } from '@msdyn365-commerce/retail-proxy';\nimport classnames from 'classnames';\nimport { observable, set } from 'mobx';\nimport { AddressCommon } from '../../common/address-common';\nimport { AddressFormat } from '../../common/address-format';\nimport { AddressItemDisplayType, AddressItemType, AddressValidationRuleType, IAddressItem } from '../../common/address-format.data';\nimport { AddressMetaData } from '../../common/address-meta-data';\nimport { AddressOperation, AddressType, IAddressResource, IAddressResponse } from '../../common/address-module.data';\nimport { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';\nimport { IBusinessAccountAddressData } from './business-account-address.data';\nimport { IBusinessAccountAddressProps } from './business-account-address.props.autogenerated';\n\nexport interface IBusinessAccountAddressExtendedProps extends IBusinessAccountAddressProps<IBusinessAccountAddressData> {\n    hasError: boolean;\n    isRequired: boolean;\n    resetAddress: boolean;\n    updateForm(errors: boolean, currentAddress?: Address): void;\n}\n\nexport interface IBusinessAccountAddressState {\n    countryId?: string;\n    states?: StateProvinceInfo[];\n}\n\nexport interface IBusinessAccountAddressViewProps {\n    className: string;\n    currentOperation: AddressOperation;\n    selectedAddress?: Address;\n    addUpdateAddress: Address;\n    addressListSelectedAddress: Address;\n    countryRegionId: string;\n    stateProvinceInfo?: StateProvinceInfo[];\n    customerAddresses: Address[];\n    validationError: object;\n    addressActionResponse?: IAddressResponse;\n    BusinessAccountAddress: IModuleProps;\n    isUpdating: boolean;\n    hasError: boolean;\n    showAddOrUpdateAddress: IAddressAddUpdateProps;\n}\n\n/**\n *\n * Address component\n * @extends {React.Component<IBusinessAccountAddressProps<IBusinessAccountAddressData>, IBusinessAccountAddressState>}\n */\nclass BusinessAccountAddress extends React.Component<IBusinessAccountAddressExtendedProps, IBusinessAccountAddressState> {\n    @observable private addUpdateAddress: Address;\n    @observable private countryRegionId: string = 'USA';\n    @observable private stateProvinceInfo?: StateProvinceInfo[];\n    @observable private validationError: object;\n\n    private addressActionResponse?: IAddressResponse;\n    private isUpdating?: boolean;\n    private addressCommon: AddressCommon;\n    private addressFormat: AddressFormat;\n    private countryRegions: CountryRegionInfo[];\n    private addressPurposes: AddressPurpose[];\n    private resources: IAddressResource;\n    private defaultAddressType: number = 8; // Default to Business\n    private excludedList: AddressItemType[] = [AddressItemType.Name, AddressItemType.AddressTypeValue, AddressItemType.IsPrimary]; // Default to hiding Name and AddressType inputs\n    private telemetryContent: ITelemetryContent;\n\n    constructor(props: IBusinessAccountAddressExtendedProps) {\n        super(props);\n\n        const { context, data, resources, telemetry } = this.props;\n        this.addUpdateAddress = {};\n        this.resources = resources;\n        this.countryRegions = data.countryRegions.result || [];\n        this.addressPurposes = data.addressPurposes.result || [];\n        this.stateProvinceInfo = data.countryStates.result || [];\n        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, props.isRequired ? undefined : []), this.addressPurposes);\n        this.addressCommon = new AddressCommon(context, resources, telemetry);\n        this.validationError = {};\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this._setDefaultCountryRegionId();\n    }\n\n    public render(): JSX.Element | null {\n        const { renderView, config, hasError, resetAddress } = this.props;\n\n        // business-sign-up will pass this flag when cancel button is clicked\n        if (resetAddress) {\n            this._resetAddressFields();\n        }\n\n        const viewProps = {\n            ...this.props,\n            countryRegionId: this.countryRegionId,\n            stateProvinceInfo: this.stateProvinceInfo,\n            validationError: this.validationError,\n            addressActionResponse: this.addressActionResponse,\n            hasError: hasError,\n            className: config.className,\n            BusinessAccountAddress: {\n                moduleProps: this.props,\n                className: classnames('ms-business-account-address', config.className)\n            },\n            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()\n        };\n\n        return renderView(viewProps) as React.ReactElement;\n    }\n\n    public _resetAddressFields = () => {\n        const addressFormat = this.addressFormat.getAddressFormat(this.countryRegionId);\n\n        addressFormat.map(addressFormatItem => {\n            switch (addressFormatItem.displayType) {\n                case AddressItemDisplayType.Input:\n                    this.addUpdateAddress[addressFormatItem.name] = '';\n                    break;\n                case AddressItemDisplayType.Checkbox:\n                    this.addUpdateAddress[addressFormatItem.name] = false;\n                    break;\n                default:\n                    switch(addressFormatItem.type) {\n                        case AddressItemType.ThreeLetterISORegionName:\n                            this.addUpdateAddress[addressFormatItem.name] = this.countryRegionId;\n                            break;\n                        case AddressItemType.AddressTypeValue:\n                            this.addUpdateAddress[addressFormatItem.name] = this.defaultAddressType;\n                            break;\n                        case AddressItemType.State:\n                            this.addUpdateAddress[addressFormatItem.name] = '';\n                            break;\n                        default:\n                            this.addUpdateAddress[addressFormatItem.name] = undefined;\n                    }\n            }\n        });\n    }\n\n    // set validationError and hasError to hide error messages since in the B2B\n    // request form, no errors would visually show since user wont be able to submit\n    // until form is filled and correct\n    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {\n        return AddressAddUpdate({\n            isUpdating: this.isUpdating,\n            resources: this.resources,\n            addressType: AddressType.Company,\n            addressFormat: this.addressFormat.getAddressFormat(this.countryRegionId),\n            defaultCountryRegionId: this.countryRegionId,\n            defaultAddressType: this.defaultAddressType,\n            selectedAddress: this.addUpdateAddress,\n            validationError: this.validationError,\n            hasError: this.props.hasError,\n            addressActionResponse: this.addressActionResponse,\n            telemetryContent: this.telemetryContent,\n            dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(\n                this.resources.addressStateDefaultSelectionText,\n                this.stateProvinceInfo\n            ),\n            onInputChange: this._onAddressAddUpdateInputChange,\n            onDropdownChange: this._onAddressAddUpdateDropdownChange\n        });\n    };\n    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this._updateAddress(event.target.name, event.target.value);\n    };\n\n    private _onAddressAddUpdateDropdownChange = async (event: React.ChangeEvent<HTMLSelectElement>): Promise<void> => {\n        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {\n            await this._updateCountryRegionId(event.target.value);\n        } else {\n            this._updateAddress(event.target.name, event.target.value);\n        }\n    };\n\n    private _updateAddress = (name: string, value: string | number) => {\n        const { updateForm, isRequired, resources } = this.props;\n        let cleanValue = value;\n        if (typeof(value) === 'string') {\n            cleanValue = (value || '').replace(new RegExp('[<>]', 'gi'), '');\n        }\n        set(this.addUpdateAddress, { [name]: cleanValue });\n\n        if (this._isEmpty()) {\n            if (isRequired) {\n                updateForm(true, undefined);\n            } else {\n                // reset addressFormat as if address was NOT a required field\n                this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, []), this.addressPurposes);\n                updateForm(false, this.addUpdateAddress);\n            }\n        } else {\n            // get new addressFormat as if address was a required field\n            this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this.excludedList, undefined), this.addressPurposes);\n            // verify with new rules\n            if (this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {\n                updateForm(false, this.addUpdateAddress);\n            } else {\n                updateForm(true, undefined);\n            }\n        }\n    };\n\n    // walk through array and check if valued is defined or value is not an empty string\n    private _isEmpty = () => {\n        const addressFormat = this.addressFormat.getAddressFormat(this.countryRegionId);\n        for (let i = 0; i < addressFormat.length; i ++) {\n            const addressFormatItem = addressFormat[i];\n            if (addressFormatItem.type !== AddressItemType.ThreeLetterISORegionName || this._isInputRequired(addressFormatItem)) {\n                const addressItemValue = this.addUpdateAddress[addressFormatItem.name];\n\n                // check each input field, if value is defined and not an empty string --> address is not empty\n                if (addressItemValue || (addressItemValue && addressItemValue !== '')) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private _isInputRequired = (addressFormatItem: IAddressItem): boolean => {\n        if (addressFormatItem === null || !addressFormatItem.validationRules || addressFormatItem.validationRules.length === 0) {\n            return false;\n        }\n\n        for (const validationRule of addressFormatItem.validationRules) {\n            if (validationRule.type === AddressValidationRuleType.Required) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private _setDefaultCountryRegionId(): void {\n        const { request } = this.props.context;\n        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;\n\n        // tslint:disable: no-floating-promises\n        this._updateCountryRegionId(this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market));\n\n        // set default AddressType\n        set(this.addUpdateAddress, { AddressTypeValue: this.defaultAddressType });\n    }\n\n    private _updateCountryRegionId = async (value: string) => {\n        this.countryRegionId = value;\n\n        await this.addressCommon.getStateProvinces(this.countryRegionId).then((result: StateProvinceInfo[]) => {\n            const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);\n            // Reset state if selected state not found in the list.\n            if (!stateInfo) {\n                this._updateAddress('State', '');\n            }\n\n            this.stateProvinceInfo = result;\n        });\n\n        this._updateAddress('ThreeLetterISORegionName', this.countryRegionId);\n    }\n}\n\nexport default BusinessAccountAddress;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}