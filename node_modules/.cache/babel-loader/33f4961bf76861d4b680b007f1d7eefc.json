{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.regexp.to-string.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCartState}from'@msdyn365-commerce/global-state';import{getSimpleProducts,ProductInput}from'./index';/**\r\n * Input class for activeCartWithProducts data action\r\n */export class ActiveCartProductsInput{constructor(){this.getCacheKey=()=>\"ActiveCartProducts\";this.getCacheObjectType=()=>'ActiveCartProducts';this.dataCacheType=()=>'none';}}const createInput=inputData=>{return new ActiveCartProductsInput();};/**\r\n * Calls the Retail API and returns a cart object based on the passed GetCartInput\r\n */export async function getActiveCartProductsAction(input,ctx){// If no cart ID is provided in input, we need to create a cart object\nif(!input){throw new Error('[getActiveCartWithProducts]No valid Input was provided, failing');}const cartState=await getCartState(ctx);const cart=cartState.cart;// If there are cart lines, make call to get products\nif(cart&&cart.CartLines&&cart.CartLines.length){ctx.trace('Getting cart product information...');return getSimpleProducts(cart.CartLines.map(cartLine=>{if(cartLine.ProductId){return new ProductInput(cartLine.ProductId,ctx.requestContext.apiSettings);}return undefined;}).filter(Boolean),ctx).then(products=>{if(products){return products;}else{return[];}}).catch(error=>{ctx.trace(error.toString());ctx.telemetry.error(error.message);ctx.telemetry.debug(\"[getActiveCartWithProducts]Unable to hydrate cart with product information\");throw new Error('[getActiveCartWithProducts]Unable to hydrate cart with product information');});}ctx.trace('[getActiveCartWithProducts]No Products Found in cart');return[];}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-products-in-active-cart',action:getActiveCartProductsAction,input:createInput});","map":{"version":3,"sources":["../../src/get-products-in-active-cart.ts"],"names":[],"mappings":"qFAAA,OAAoB,0BAApB,KAAmH,yBAAnH,CACA,OAAS,YAAT,KAA6B,iCAA7B,CAGA,OAAS,iBAAT,CAA4B,YAA5B,KAAgD,SAAhD,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,uBAAuB,CAApC,WAAA,EAAA,CACW,KAAA,WAAA,CAAc,wBAAd,CACA,KAAA,kBAAA,CAAqB,IAAM,oBAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,MAAjC,CACV,CAJmC,CAMpC,KAAM,CAAA,WAAW,CAAI,SAAD,EAAoC,CACpD,MAAO,IAAI,CAAA,uBAAJ,EAAP,CACH,CAFD,CAIA;;AAEG,GACH,MAAO,eAAe,CAAA,2BAAf,CAA2C,KAA3C,CAA2E,GAA3E,CAA8F,CACjG;AACA,GAAI,CAAC,KAAL,CAAY,CACR,KAAM,IAAI,CAAA,KAAJ,CAAU,iEAAV,CAAN,CACH,CAED,KAAM,CAAA,SAAS,CAAG,KAAM,CAAA,YAAY,CAAC,GAAD,CAApC,CACA,KAAM,CAAA,IAAI,CAAG,SAAS,CAAC,IAAvB,CAEA;AACA,GAAI,IAAI,EAAI,IAAI,CAAC,SAAb,EAA0B,IAAI,CAAC,SAAL,CAAe,MAA7C,CAAqD,CACjD,GAAG,CAAC,KAAJ,CAAU,qCAAV,EACA,MAAO,CAAA,iBAAiB,CACJ,IAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,QAAQ,EAAG,CAC1C,GAAI,QAAQ,CAAC,SAAb,CAAwB,CACpB,MAAO,IAAI,CAAA,YAAJ,CAAiB,QAAQ,CAAC,SAA1B,CAAqC,GAAG,CAAC,cAAJ,CAAmB,WAAxD,CAAP,CACH,CACD,MAAO,CAAA,SAAP,CACH,CALe,EAKb,MALa,CAKN,OALM,CADI,CAOpB,GAPoB,CAAjB,CASF,IATE,CASI,QAAD,EAA8B,CAChC,GAAI,QAAJ,CAAc,CACV,MAAO,CAAA,QAAP,CACH,CAFD,IAEO,CACH,MAAO,EAAP,CACH,CACJ,CAfE,EAgBF,KAhBE,CAgBK,KAAD,EAAiB,CACpB,GAAG,CAAC,KAAJ,CAAU,KAAK,CAAC,QAAN,EAAV,EACA,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,KAAK,CAAC,OAA1B,EACA,GAAG,CAAC,SAAJ,CAAc,KAAd,+EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,4EAAV,CAAN,CACH,CArBE,CAAP,CAsBH,CAED,GAAG,CAAC,KAAJ,CAAU,sDAAV,EACA,MAAwB,EAAxB,CACH,CAED,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,uEADkC,CAEtC,MAAM,CAA4B,2BAFI,CAGtC,KAAK,CAAE,WAH+B,CAAD,CAAzC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getSimpleProducts, ProductInput } from './index';\n\n/**\n * Input class for activeCartWithProducts data action\n */\nexport class ActiveCartProductsInput implements IActionInput {\n    public getCacheKey = () => `ActiveCartProducts`;\n    public getCacheObjectType = () => 'ActiveCartProducts';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nconst createInput = (inputData: ICreateActionContext) => {\n    return new ActiveCartProductsInput();\n};\n\n/**\n * Calls the Retail API and returns a cart object based on the passed GetCartInput\n */\nexport async function getActiveCartProductsAction(input: ActiveCartProductsInput, ctx: IActionContext): Promise<SimpleProduct[]> {\n    // If no cart ID is provided in input, we need to create a cart object\n    if (!input) {\n        throw new Error('[getActiveCartWithProducts]No valid Input was provided, failing');\n    }\n\n    const cartState = await getCartState(ctx);\n    const cart = cartState.cart;\n\n    // If there are cart lines, make call to get products\n    if (cart && cart.CartLines && cart.CartLines.length) {\n        ctx.trace('Getting cart product information...');\n        return getSimpleProducts(\n            <ProductInput[]>cart.CartLines.map(cartLine => {\n                if (cartLine.ProductId) {\n                    return new ProductInput(cartLine.ProductId, ctx.requestContext.apiSettings);\n                }\n                return undefined;\n            }).filter(Boolean),\n            ctx\n        )\n            .then((products: SimpleProduct[]) => {\n                if (products) {\n                    return products;\n                } else {\n                    return [];\n                }\n            })\n            .catch((error: Error) => {\n                ctx.trace(error.toString());\n                ctx.telemetry.error(error.message);\n                ctx.telemetry.debug(`[getActiveCartWithProducts]Unable to hydrate cart with product information`);\n                throw new Error('[getActiveCartWithProducts]Unable to hydrate cart with product information');\n            });\n    }\n\n    ctx.trace('[getActiveCartWithProducts]No Products Found in cart');\n    return <SimpleProduct[]>[];\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-products-in-active-cart',\n    action: <IAction<SimpleProduct[]>>getActiveCartProductsAction,\n    input: createInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}