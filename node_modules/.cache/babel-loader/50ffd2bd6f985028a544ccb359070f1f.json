{"ast":null,"code":"import\"core-js/modules/es.promise.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{msdyn365Commerce,RefreshType}from'@msdyn365-commerce/core-internal';export const DEFAULT_EXPERIMENT_TTL=1800;export const DEFAULT_EXPERIMENT_TTR=60;export const DEFAULT_EXPERIMENT_DATAFILE_TTL=1800;export const DEFAULT_EXPERIMENT_DATAFILE_TTR=60;export const readCachedExperimentsEntries=async(cacheKey,experimentRefreshOptions,expProvider,expConnectorName,retailServerBaseURL)=>{const experimentationAppCache=msdyn365Commerce.experimentationCache;let experimentEntry;if(experimentationAppCache){const experimentItem=experimentationAppCache.get(cacheKey);if(experimentItem&&experimentItem.shouldRefresh){// doing background refresh here.\n// tslint:disable-next-line:no-any\nconst refresh=new Promise((res,rej)=>{let newExperimentsResult;switch(experimentRefreshOptions.refreshType){case RefreshType.DataFile:newExperimentsResult=expProvider.getConfigForClientSideInit();break;case RefreshType.Experiments:newExperimentsResult=expProvider.getExperiments(retailServerBaseURL,expConnectorName);break;default:}res(newExperimentsResult);});refresh.then(experimentsRefreshRaw=>{let experimentsRefresh;switch(experimentRefreshOptions.refreshType){case RefreshType.DataFile:experimentsRefresh=JSON.stringify(experimentsRefreshRaw);break;case RefreshType.Experiments:experimentsRefresh=experimentsRefreshRaw.experiments;break;default:experimentsRefresh=experimentsRefreshRaw;}if(experimentsRefresh){experimentationAppCache.put(cacheKey,{item:experimentsRefresh});}}).catch();}experimentEntry=experimentItem?experimentItem.item:undefined;}return experimentEntry;};export const saveCachedExperimentsEntries=async(cacheKey,experimentationsItem)=>{return msdyn365Commerce.experimentationCache&&msdyn365Commerce.experimentationCache.put(cacheKey,{item:experimentationsItem})||false;};","map":{"version":3,"sources":["../../src/experimentation-cache-utils.ts"],"names":[],"mappings":"sCAAA;;;AAGG,GAEH,OAA8D,gBAA9D,CAAgF,WAAhF,KAAmG,kCAAnG,CAGA,MAAO,MAAM,CAAA,sBAAsB,CAAG,IAA/B,CACP,MAAO,MAAM,CAAA,sBAAsB,CAAG,EAA/B,CACP,MAAO,MAAM,CAAA,+BAA+B,CAAG,IAAxC,CACP,MAAO,MAAM,CAAA,+BAA+B,CAAG,EAAxC,CAEP,MAAO,MAAM,CAAA,4BAA4B,CAAG,MACxC,QADwC,CAExC,wBAFwC,CAGxC,WAHwC,CAIxC,gBAJwC,CAKxC,mBALwC,GAMhB,CACxB,KAAM,CAAA,uBAAuB,CAAG,gBAAgB,CAAC,oBAAjD,CACA,GAAI,CAAA,eAAJ,CACA,GAAI,uBAAJ,CAA6B,CACzB,KAAM,CAAA,cAAc,CAAG,uBAAuB,CAAC,GAAxB,CAA+B,QAA/B,CAAvB,CACA,GAAI,cAAc,EAAI,cAAc,CAAC,aAArC,CAAoD,CAChD;AACA;AACA,KAAM,CAAA,OAAO,CAAG,GAAI,CAAA,OAAJ,CAAiB,CAAC,GAAD,CAAM,GAAN,GAAa,CAC1C,GAAI,CAAA,oBAAJ,CACA,OAAQ,wBAAwB,CAAC,WAAjC,EACI,IAAK,CAAA,WAAW,CAAC,QAAjB,CACI,oBAAoB,CAAG,WAAW,CAAC,0BAAZ,EAAvB,CACA,MACJ,IAAK,CAAA,WAAW,CAAC,WAAjB,CACI,oBAAoB,CAAG,WAAW,CAAC,cAAZ,CAA2B,mBAA3B,CAAgD,gBAAhD,CAAvB,CACA,MACJ,QAPJ,CASA,GAAG,CAAC,oBAAD,CAAH,CACH,CAZe,CAAhB,CAaA,OAAO,CACF,IADL,CACU,qBAAqB,EAAG,CAC1B,GAAI,CAAA,kBAAJ,CACA,OAAQ,wBAAwB,CAAC,WAAjC,EACI,IAAK,CAAA,WAAW,CAAC,QAAjB,CACI,kBAAkB,CAAG,IAAI,CAAC,SAAL,CAAe,qBAAf,CAArB,CACA,MACJ,IAAK,CAAA,WAAW,CAAC,WAAjB,CACI,kBAAkB,CAAG,qBAAqB,CAAC,WAA3C,CACA,MACJ,QACI,kBAAkB,CAAG,qBAArB,CARR,CAUA,GAAI,kBAAJ,CAAwB,CACpB,uBAAuB,CAAC,GAAxB,CAA4B,QAA5B,CAAsC,CAAE,IAAI,CAAE,kBAAR,CAAtC,EACH,CACJ,CAhBL,EAiBK,KAjBL,GAkBH,CACD,eAAe,CAAG,cAAc,CAAG,cAAc,CAAC,IAAlB,CAAyB,SAAzD,CACH,CACD,MAAO,CAAA,eAAP,CACH,CAjDM,CAmDP,MAAO,MAAM,CAAA,4BAA4B,CAAG,MAAU,QAAV,CAA+B,oBAA/B,GAA4E,CACpH,MACK,CAAA,gBAAgB,CAAC,oBAAjB,EAAyC,gBAAgB,CAAC,oBAAjB,CAAsC,GAAtC,CAA6C,QAA7C,CAAuD,CAAE,IAAI,CAAE,oBAAR,CAAvD,CAA1C,EACA,KAFJ,CAIH,CALM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IExperimentationProvider, IExperimentRefreshOptions, msdyn365Commerce, RefreshType } from '@msdyn365-commerce/core-internal';\nimport { ICacheKey } from './ICache';\n\nexport const DEFAULT_EXPERIMENT_TTL = 1800;\nexport const DEFAULT_EXPERIMENT_TTR = 60;\nexport const DEFAULT_EXPERIMENT_DATAFILE_TTL = 1800;\nexport const DEFAULT_EXPERIMENT_DATAFILE_TTR = 60;\n\nexport const readCachedExperimentsEntries = async <T>(\n    cacheKey: ICacheKey,\n    experimentRefreshOptions: IExperimentRefreshOptions,\n    expProvider: IExperimentationProvider,\n    expConnectorName: string,\n    retailServerBaseURL: string\n): Promise<T | undefined> => {\n    const experimentationAppCache = msdyn365Commerce.experimentationCache;\n    let experimentEntry: T | undefined;\n    if (experimentationAppCache) {\n        const experimentItem = experimentationAppCache.get<T>(cacheKey);\n        if (experimentItem && experimentItem.shouldRefresh) {\n            // doing background refresh here.\n            // tslint:disable-next-line:no-any\n            const refresh = new Promise<any>((res, rej) => {\n                let newExperimentsResult;\n                switch (experimentRefreshOptions.refreshType) {\n                    case RefreshType.DataFile:\n                        newExperimentsResult = expProvider.getConfigForClientSideInit();\n                        break;\n                    case RefreshType.Experiments:\n                        newExperimentsResult = expProvider.getExperiments(retailServerBaseURL, expConnectorName);\n                        break;\n                    default:\n                }\n                res(newExperimentsResult);\n            });\n            refresh\n                .then(experimentsRefreshRaw => {\n                    let experimentsRefresh;\n                    switch (experimentRefreshOptions.refreshType) {\n                        case RefreshType.DataFile:\n                            experimentsRefresh = JSON.stringify(experimentsRefreshRaw);\n                            break;\n                        case RefreshType.Experiments:\n                            experimentsRefresh = experimentsRefreshRaw.experiments;\n                            break;\n                        default:\n                            experimentsRefresh = experimentsRefreshRaw;\n                    }\n                    if (experimentsRefresh) {\n                        experimentationAppCache.put(cacheKey, { item: experimentsRefresh });\n                    }\n                })\n                .catch();\n        }\n        experimentEntry = experimentItem ? experimentItem.item : undefined;\n    }\n    return experimentEntry;\n};\n\nexport const saveCachedExperimentsEntries = async <T>(cacheKey: ICacheKey, experimentationsItem: T): Promise<boolean> => {\n    return (\n        (msdyn365Commerce.experimentationCache && msdyn365Commerce.experimentationCache.put<T>(cacheKey, { item: experimentationsItem })) ||\n        false\n    );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}