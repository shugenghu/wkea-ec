{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _uniq from\"lodash/uniq\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import CombinedStream from'combined-stream';import*as fs from'fs';import*as path from'path';import{fileExists}from'../../utils/helpers';/**\r\n * Separator for concat partial IDs\r\n */export var URL_SEPARATOR='!';/**\r\n * Prefix for including JS files\r\n */export var HASHED_STATICS_PREFIX='_j/';/**\r\n * Max number of URLs to generator\r\n */export var MAX_JS_ASSETS=Number(process.env.MAX_JS_ASSETS||1);/**\r\n * Map hashed URL to actual asset files\r\n *\r\n * @param requestedAssets hashed asset string\r\n * @param clientStats webpack client stats\r\n */export var mapAssetUrlToFiles=function mapAssetUrlToFiles(requestedAssets,clientStats){var result=[];if(!requestedAssets){return result;}var requestedIds=_uniq(requestedAssets.split(URL_SEPARATOR)||[]);var requestedChunks=[];requestedIds.forEach(function(chunkId){var targetIndex=clientStats.chunks.findIndex(function(item){return String(item.id)===String(decodeURIComponent(chunkId));});if(targetIndex!==-1){Array.prototype.push.apply(requestedChunks,clientStats.chunks[targetIndex].files);}});// dedupe again as there may be commmon chunks between top level dependencies\nreturn _uniq(requestedChunks.filter(function(pathToFile){return pathToFile.endsWith('.js');}));};/**\r\n * Private helper functions below, exported for ease in testing\r\n */ /**\r\n * Takes in a single array of N items and splits it into an array with numPart arrays\r\n *\r\n * @param array The array of to split\r\n * @param numParts The max number of arrays to return\r\n * @private\r\n */export var splitToMaxNArrays=function splitToMaxNArrays(array,numParts){var res=[];var m=array.length/numParts+array.length%numParts;while(array.length){res.push(array.splice(0,m));}return res;};/**\r\n * Generates a set of magic asset urls\r\n * @param usedAssetChunks The required assets for the current render pass\r\n */export var generateAssetUrls=function generateAssetUrls(baseUrl,usedAssetChunks){var numMax=arguments.length>2&&arguments[2]!==undefined?arguments[2]:MAX_JS_ASSETS;if(!usedAssetChunks||usedAssetChunks.chunkIds&&!usedAssetChunks.chunkIds.length){return[];}return splitToMaxNArrays(usedAssetChunks.chunkIds||[],numMax).map(function(array){return\"\".concat(baseUrl).concat(HASHED_STATICS_PREFIX).concat(encodeURIComponent(array.join(URL_SEPARATOR)));});};/**\r\n * Helper function to map the public folder to the currently requested file\r\n *\r\n * @param publicDir Public directory from app root, env.PUBLIC_DIR\r\n * @param filePath Current statics file path\r\n * @private\r\n */export var mapPublicDirToPath=function mapPublicDirToPath(publicDir){return function(filePath){return path.resolve(path.join(publicDir,filePath));};};/**\r\n *\r\n * @param filePaths File paths of files we need to stream\r\n * @param res\r\n * @returns {CombinedStream} combined stream response\r\n * @private\r\n */ /**\r\n *  TODO: remove use of any once the following PR gets merged in\r\n *  https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30295 to properly update type definitions\r\n */ // tslint:disable-next-line:no-any\nexport var createFileStreamResponse=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(filePaths,publicDir,telemetry){var realFilePathsPromises,realFilePaths,jsStream;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!filePaths||!filePaths.length)){_context.next=2;break;}return _context.abrupt(\"return\");case 2:realFilePathsPromises=filePaths.map(mapPublicDirToPath(publicDir)).map(function(item){return fileExists(item,telemetry);});_context.next=5;return Promise.all(realFilePathsPromises).then(function(possibleFilePaths){return possibleFilePaths&&possibleFilePaths.filter(Boolean)||[];});case 5:realFilePaths=_context.sent;if(realFilePaths.length){_context.next=8;break;}return _context.abrupt(\"return\");case 8:jsStream=CombinedStream.create();realFilePaths.forEach(function(filePath){jsStream.append(fs.createReadStream(filePath));jsStream.append('\\n;');});return _context.abrupt(\"return\",jsStream);case 11:case\"end\":return _context.stop();}}},_callee);}));return function createFileStreamResponse(_x,_x2,_x3){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["../../../../src/_server/statics-pipeline/statics-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IGeneric } from '@msdyn365-commerce/core-internal';\nimport { IInternalTelemetry } from '@msdyn365-commerce/telemetry-internal';\nimport CombinedStream from 'combined-stream';\nimport * as fs from 'fs';\nimport { uniq } from 'lodash';\nimport * as path from 'path';\nimport { fileExists } from '../../utils/helpers';\nimport { IndexableType, IUsedChunks } from '../chunking';\n\n/**\n * Separator for concat partial IDs\n */\nexport const URL_SEPARATOR = '!';\n/**\n * Prefix for including JS files\n */\nexport const HASHED_STATICS_PREFIX = '_j/';\n/**\n * Max number of URLs to generator\n */\nexport const MAX_JS_ASSETS = Number(process.env.MAX_JS_ASSETS || 1);\n\n/**\n * Map hashed URL to actual asset files\n *\n * @param requestedAssets hashed asset string\n * @param clientStats webpack client stats\n */\nexport const mapAssetUrlToFiles = (requestedAssets: string, clientStats: IGeneric<{}>): string[] => {\n    const result: string[] = [];\n    if (!requestedAssets) {\n        return result;\n    }\n    const requestedIds = uniq(requestedAssets.split(URL_SEPARATOR) || []);\n    const requestedChunks: string[] = [];\n    requestedIds.forEach((chunkId: string) => {\n        const targetIndex = clientStats.chunks.findIndex(\n            (item: { id: IndexableType }) => String(item.id) === String(decodeURIComponent(chunkId))\n        );\n        if (targetIndex !== -1) {\n            Array.prototype.push.apply(requestedChunks, clientStats.chunks[targetIndex].files);\n        }\n    });\n\n    // dedupe again as there may be commmon chunks between top level dependencies\n    return uniq(requestedChunks.filter((pathToFile: string) => pathToFile.endsWith('.js')));\n};\n\n/**\n * Private helper functions below, exported for ease in testing\n */\n\n/**\n * Takes in a single array of N items and splits it into an array with numPart arrays\n *\n * @param array The array of to split\n * @param numParts The max number of arrays to return\n * @private\n */\nexport const splitToMaxNArrays = <TArray>(array: TArray[], numParts: number) => {\n    const res: TArray[][] = [];\n    const m = array.length / numParts + (array.length % numParts);\n    while (array.length) {\n        res.push(array.splice(0, m));\n    }\n\n    return res;\n};\n\n/**\n * Generates a set of magic asset urls\n * @param usedAssetChunks The required assets for the current render pass\n */\nexport const generateAssetUrls = (baseUrl: string, usedAssetChunks: IUsedChunks, numMax: number = MAX_JS_ASSETS): string[] => {\n    if (!usedAssetChunks || (usedAssetChunks.chunkIds && !usedAssetChunks.chunkIds.length)) {\n        return [];\n    }\n\n    return splitToMaxNArrays(usedAssetChunks.chunkIds || [], numMax).map(\n        (array: IndexableType[]) => `${baseUrl}${HASHED_STATICS_PREFIX}${encodeURIComponent(array.join(URL_SEPARATOR))}`\n    );\n};\n\n/**\n * Helper function to map the public folder to the currently requested file\n *\n * @param publicDir Public directory from app root, env.PUBLIC_DIR\n * @param filePath Current statics file path\n * @private\n */\nexport const mapPublicDirToPath = (publicDir: string) => (filePath: string) => path.resolve(path.join(publicDir, filePath));\n\n/**\n *\n * @param filePaths File paths of files we need to stream\n * @param res\n * @returns {CombinedStream} combined stream response\n * @private\n */\n/**\n *  TODO: remove use of any once the following PR gets merged in\n *  https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30295 to properly update type definitions\n */\n// tslint:disable-next-line:no-any\nexport const createFileStreamResponse = async (filePaths: string[], publicDir: string, telemetry: IInternalTelemetry): Promise<any> => {\n    if (!filePaths || !filePaths.length) {\n        return;\n    }\n    const realFilePathsPromises = filePaths.map(mapPublicDirToPath(publicDir)).map((item: string) => fileExists(item, telemetry));\n    const realFilePaths = await Promise.all(realFilePathsPromises).then(\n        (possibleFilePaths: string[]) => (possibleFilePaths && possibleFilePaths.filter(Boolean)) || []\n    );\n    if (!realFilePaths.length) {\n        return;\n    }\n    const jsStream = CombinedStream.create();\n    realFilePaths.forEach((filePath: string) => {\n        jsStream.append(fs.createReadStream(filePath));\n        jsStream.append('\\n;');\n    });\n    return jsStream;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}