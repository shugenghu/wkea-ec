{"ast":null,"code":"import _typeof from\"@babel/runtime/helpers/esm/typeof\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{parameterize}from'./parameterize';// Query params that must be appened to any URL generated when in preview mode\nvar PASSTHROUGH_QUERY_PARAMS=['locale','market','sitepath','hostoverride','preview','domain'];var categorySegment=function categorySegment(context,ctx){if(!context){return'';}if(context.categories){var parameterizeFeatureFlags=getParameterizeFeatureFlagsWithRequestContext(ctx&&ctx.requestContext);return context.categories.map(function(record){return\"/\".concat(parameterize(record.Name,undefined,parameterizeFeatureFlags,record.NeutralizedName));}).join('');}else if(context.category){return context.category.Slug;}return'';};var categoryMoniker=function categoryMoniker(context){if(context){if(context.categories){return\"/\".concat(context.categories[context.categories.length-1].RecordId,\".c\");}if(context.category){return\"/\".concat(context.category.RecordId,\".c\");}}return'';};var productMoniker=function productMoniker(context,ctx){if(context){if(context.product&&context.product.Name!==''){var parameterizeFeatureFlags=getParameterizeFeatureFlagsWithRequestContext(ctx&&ctx.requestContext);return\"/\".concat(parameterize(context.product.Name,undefined,parameterizeFeatureFlags,context.product.NeutralizedName),\"/\").concat(context.product.RecordId,\".p\");}else if(context.product){return\"/\".concat(context.product.RecordId,\".p\");}}return'';};var listMoniker=function listMoniker(context,ctx){var parameterizeFeatureFlags=getParameterizeFeatureFlagsWithRequestContext(ctx&&ctx.requestContext);return context&&context.list?\"/\".concat(parameterize(context.list.Name,undefined,parameterizeFeatureFlags,context.list.NeutralizedName),\".l\"):'';};var platformRoutes={category:function category(context,ctx){return\"\".concat(categorySegment(context,ctx)).concat(categoryMoniker(context));},product:function product(context,ctx){return\"\".concat(categorySegment(context,ctx)).concat(productMoniker(context,ctx));},list:listMoniker};/**\r\n * Forces strings to have a leading slash and no trailing slash\r\n */var ensureSlashConsistency=function ensureSlashConsistency(name){if(name[0]!=='/'){name=\"/\".concat(name);}if(name[name.length-1]==='/'){name=name.slice(0,-1);}return name;};/**\r\n * Correctly appends site path if required in the context\r\n * @param route Current route\r\n * @param ctx Action Context\r\n */var populateSitePath=function populateSitePath(route,ctx){var sitePath=ctx&&ctx.requestContext&&ctx.requestContext.sitePath;sitePath&&route.unshift(sitePath);return route;};/**\r\n * Appends any query params that should be appended if preview mode is set to true\r\n * and returns the final result\r\n *\r\n * @param route The partially constructed destination url\r\n * @param queryParams The list of query params in the initial request\r\n */export var appendQueryParams=function appendQueryParams(route,queryParams){if(route&&queryParams&&(queryParams.preview||queryParams.domain)){var query=Object.keys(queryParams).map(function(key){return PASSTHROUGH_QUERY_PARAMS.indexOf(key)!==-1?\"\".concat(key,\"=\").concat(queryParams[key]):'';}).filter(Boolean).join('&');return query.length?\"\".concat(route).concat(route.indexOf('?')===-1?'?':'&').concat(query):route;}return route||'';};var appendQueryString=function appendQueryString(route,context){return appendQueryParams(route,context&&context.requestContext&&context.requestContext.query);};function getRoutePath(route,ctx,routeContext){var returnUrl='';if(route){if(typeof route==='function'){route=route(routeContext,ctx);}returnUrl=populateSitePath([route],ctx).map(ensureSlashConsistency).join('');}return appendQueryString(returnUrl,ctx);}/**\r\n * Gets the corresponding route for the given page type\r\n * @param pageType the type of page that needs to be routed to.\r\n * @param ctx current action context.\r\n */export var getUrlSync=function getUrlSync(pageType,ctx){var routeContext=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var route;if(platformRoutes[pageType]){return getRoutePath(platformRoutes[pageType],ctx,routeContext);}var requestContext=ctx&&ctx.requestContext;if(requestContext){route=requestContext.query&&requestContext.query[pageType];if(route){return getRoutePath(route,ctx,routeContext);}var appRoutes=requestContext.app&&requestContext.app.routes;if(appRoutes){var pageRouteFromAppSettings=appRoutes[pageType];if(pageRouteFromAppSettings&&_typeof(pageRouteFromAppSettings)==='object'){return appendQueryString(pageRouteFromAppSettings.destinationUrl,ctx);}else if(pageRouteFromAppSettings&&typeof pageRouteFromAppSettings==='string'){return getRoutePath(pageRouteFromAppSettings,ctx,routeContext);}}}return getRoutePath(pageType,ctx,routeContext);};export var getCategoriesUrlSync=function getCategoriesUrlSync(categoriesPath,ctx){var categoriesPathUrls=[];var tempSegments=[];if(categoriesPath&&categoriesPath.Segments){categoriesPath.Segments.map(function(seg){tempSegments.push({Name:seg.CategoryName||'',RecordId:seg.CategoryId||''});var context={categories:tempSegments};categoriesPathUrls.push({Name:seg.CategoryName,Url:getUrlSync(\"category\"/* Category */,ctx,context)||''});});}return categoriesPathUrls;};/**\r\n * Gets localized friendlyName from category NameTranslations object based on the locale\r\n * @param locale Locale from current requestContext\r\n * @param nameTranslations LocalizedNames for a given category.\r\n */export var getFriendlyName=function getFriendlyName(locale,nameTranslations){var nameTranslation;if(locale&&nameTranslations&&nameTranslations.length>0){nameTranslation=nameTranslations.find(function(item){return item.Language.toLowerCase()===locale.toLowerCase();});}return nameTranslation&&nameTranslation.Text;};/**\r\n * Return ParameterizedFeatureFlags based on requestContext\r\n * @param ctx Action Context\r\n */export var getParameterizeFeatureFlags=function getParameterizeFeatureFlags(ctx){return{enableUrlEncoding:ctx&&ctx.requestContext.features&&ctx.requestContext.features.enableUrlEncoding||false,enableUrlLocalization:ctx&&ctx.requestContext.features&&ctx.requestContext.features.enableUrlLocalization||false};};/**\r\n * Return ParameterizedFeatureFlags based on requestContext\r\n * @param ctx Request Context\r\n */export var getParameterizeFeatureFlagsWithRequestContext=function getParameterizeFeatureFlagsWithRequestContext(ctx){return{enableUrlEncoding:ctx&&ctx.features&&ctx.features.enableUrlEncoding||false,enableUrlLocalization:ctx&&ctx.features&&ctx.features.enableUrlLocalization||false};};","map":{"version":3,"sources":["../../../src/utilities/page-type-url-builder.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { TextValueTranslation } from '@msdyn365-commerce/retail-proxy';\nimport { IActionContext, IAny, IDictionary, IRequestContext } from '../interfaces';\nimport { ICategoryPath, ICategoryUrl } from '../interfaces/ICategoryPathInterfaces';\nimport { IParameterizeFeatureFlags, parameterize } from './parameterize';\n\nexport const enum PageType {\n    Product = 'product',\n    Category = 'category',\n    List = 'list',\n    Cart = 'cart',\n    Checkout = 'checkout',\n    Account = 'account',\n    OrderHistory = 'order-history',\n    OrderLookup = 'order-lookup',\n    Wishlist = 'wishlist',\n    GiftcardBalance = 'giftcard-balance',\n    FindStores = 'find-stores'\n}\n\n// Query params that must be appened to any URL generated when in preview mode\nconst PASSTHROUGH_QUERY_PARAMS = ['locale', 'market', 'sitepath', 'hostoverride', 'preview', 'domain'];\n\ntype segment = { Name: string; RecordId: string | number };\ntype categoryContext = { categories?: { Name: string; RecordId: string | number; NeutralizedName?: string }[] };\ntype categorySlugContext = { category?: { Slug: string; RecordId: string | number } };\ntype productContext = { product?: { Name: string; RecordId: string | number; NeutralizedName?: string } };\ntype listContext = { list?: { Name: string; NeutralizedName?: string } };\n\ntype pageTypeContext = categoryContext & productContext & listContext & productContext & { [property: string]: IAny };\ntype routeBuilder = (context?: pageTypeContext, ctx?: IActionContext) => string;\ntype IRouteDiconary = IDictionary<routeBuilder>;\n\nconst categorySegment = (context?: categoryContext & categorySlugContext, ctx?: IActionContext) => {\n    if (!context) {\n        return '';\n    }\n    if (context.categories) {\n        const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlagsWithRequestContext(\n            ctx && ctx.requestContext\n        );\n        return context.categories\n            .map(record => `/${parameterize(record.Name, undefined, parameterizeFeatureFlags, record.NeutralizedName)}`)\n            .join('');\n    } else if (context.category) {\n        return context.category.Slug;\n    }\n    return '';\n};\nconst categoryMoniker = (context?: categoryContext & categorySlugContext) => {\n    if (context) {\n        if (context.categories) {\n            return `/${context.categories[context.categories.length - 1].RecordId}.c`;\n        }\n        if (context.category) {\n            return `/${context.category.RecordId}.c`;\n        }\n    }\n    return '';\n};\n\nconst productMoniker = (context?: productContext, ctx?: IActionContext) => {\n    if (context) {\n        if (context.product && context.product.Name !== '') {\n            const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlagsWithRequestContext(\n                ctx && ctx.requestContext\n            );\n            return `/${parameterize(context.product.Name, undefined, parameterizeFeatureFlags, context.product.NeutralizedName)}/${\n                context.product.RecordId\n            }.p`;\n        } else if (context.product) {\n            return `/${context.product.RecordId}.p`;\n        }\n    }\n    return '';\n};\n\nconst listMoniker = (context?: listContext, ctx?: IActionContext) => {\n    const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlagsWithRequestContext(ctx && ctx.requestContext);\n    return context && context.list\n        ? `/${parameterize(context.list.Name, undefined, parameterizeFeatureFlags, context.list.NeutralizedName)}.l`\n        : '';\n};\n\nconst platformRoutes: IRouteDiconary = {\n    category: (context, ctx?) => `${categorySegment(context, ctx)}${categoryMoniker(context)}`,\n    product: (context, ctx?) => `${categorySegment(context, ctx)}${productMoniker(context, ctx)}`,\n    list: listMoniker\n};\n\n/**\n * Forces strings to have a leading slash and no trailing slash\n */\nconst ensureSlashConsistency = (name: string) => {\n    if (name[0] !== '/') {\n        name = `/${name}`;\n    }\n    if (name[name.length - 1] === '/') {\n        name = name.slice(0, -1);\n    }\n    return name;\n};\n\n/**\n * Correctly appends site path if required in the context\n * @param route Current route\n * @param ctx Action Context\n */\nconst populateSitePath = (route: string[], ctx: IActionContext): string[] => {\n    const sitePath = ctx && ctx.requestContext && ctx.requestContext.sitePath;\n    sitePath && route.unshift(sitePath);\n    return route;\n};\n\n/**\n * Appends any query params that should be appended if preview mode is set to true\n * and returns the final result\n *\n * @param route The partially constructed destination url\n * @param queryParams The list of query params in the initial request\n */\nexport const appendQueryParams = (route: string | undefined, queryParams?: IDictionary<string>): string => {\n    if (route && queryParams && (queryParams.preview || queryParams.domain)) {\n        const query = Object.keys(queryParams)\n            .map(key => (PASSTHROUGH_QUERY_PARAMS.indexOf(key) !== -1 ? `${key}=${queryParams[key]}` : ''))\n            .filter(Boolean)\n            .join('&');\n\n        return query.length ? `${route}${route.indexOf('?') === -1 ? '?' : '&'}${query}` : route;\n    }\n\n    return route || '';\n};\n\nconst appendQueryString = (route: string | undefined, context: IActionContext) => {\n    return appendQueryParams(route, context && context.requestContext && context.requestContext.query);\n};\n\nfunction getRoutePath(route: string | routeBuilder | undefined, ctx: IActionContext, routeContext: pageTypeContext): string {\n    let returnUrl = '';\n    if (route) {\n        if (typeof route === 'function') {\n            route = route(routeContext, ctx);\n        }\n        returnUrl = populateSitePath([route], ctx)\n            .map(ensureSlashConsistency)\n            .join('');\n    }\n\n    return appendQueryString(returnUrl, ctx);\n}\n\n/**\n * Gets the corresponding route for the given page type\n * @param pageType the type of page that needs to be routed to.\n * @param ctx current action context.\n */\nexport const getUrlSync = (pageType: PageType | string, ctx: IActionContext, routeContext: pageTypeContext = {}): string | undefined => {\n    let route: string | routeBuilder | undefined;\n    if (platformRoutes[pageType]) {\n        return getRoutePath(platformRoutes[pageType], ctx, routeContext);\n    }\n\n    const requestContext: IRequestContext = ctx && ctx.requestContext;\n    if (requestContext) {\n        route = requestContext.query && requestContext.query[pageType];\n        if (route) {\n            return getRoutePath(route, ctx, routeContext);\n        }\n\n        const appRoutes = requestContext.app && requestContext.app.routes;\n        if (appRoutes) {\n            const pageRouteFromAppSettings = appRoutes[pageType];\n            if (pageRouteFromAppSettings && typeof pageRouteFromAppSettings === 'object') {\n                return appendQueryString(pageRouteFromAppSettings.destinationUrl, ctx);\n            } else if (pageRouteFromAppSettings && typeof pageRouteFromAppSettings === 'string') {\n                return getRoutePath(pageRouteFromAppSettings, ctx, routeContext);\n            }\n        }\n    }\n\n    return getRoutePath(pageType, ctx, routeContext);\n};\n\nexport const getCategoriesUrlSync = (categoriesPath: ICategoryPath, ctx: IActionContext): ICategoryUrl[] | undefined => {\n    const categoriesPathUrls: ICategoryUrl[] = [];\n    const tempSegments: segment[] = [];\n    if (categoriesPath && categoriesPath.Segments) {\n        categoriesPath.Segments.map(seg => {\n            tempSegments.push({\n                Name: seg.CategoryName || '',\n                RecordId: seg.CategoryId || ''\n            });\n            const context = {\n                categories: tempSegments\n            };\n            categoriesPathUrls.push({\n                Name: seg.CategoryName,\n                Url: getUrlSync(PageType.Category, ctx, context) || ''\n            });\n        });\n    }\n\n    return categoriesPathUrls;\n};\n\n/**\n * Gets localized friendlyName from category NameTranslations object based on the locale\n * @param locale Locale from current requestContext\n * @param nameTranslations LocalizedNames for a given category.\n */\nexport const getFriendlyName = (locale?: string, nameTranslations?: TextValueTranslation[]): string | undefined => {\n    let nameTranslation: TextValueTranslation | undefined;\n    if (locale && nameTranslations && nameTranslations.length > 0) {\n        nameTranslation = nameTranslations.find(item => item.Language!.toLowerCase() === locale.toLowerCase());\n    }\n\n    return nameTranslation && nameTranslation.Text;\n};\n\n/**\n * Return ParameterizedFeatureFlags based on requestContext\n * @param ctx Action Context\n */\nexport const getParameterizeFeatureFlags = (ctx?: IActionContext): IParameterizeFeatureFlags => {\n    return {\n        enableUrlEncoding: (ctx && ctx.requestContext.features && ctx.requestContext.features.enableUrlEncoding) || false,\n        enableUrlLocalization: (ctx && ctx.requestContext.features && ctx.requestContext.features.enableUrlLocalization) || false\n    };\n};\n\n/**\n * Return ParameterizedFeatureFlags based on requestContext\n * @param ctx Request Context\n */\nexport const getParameterizeFeatureFlagsWithRequestContext = (ctx?: IRequestContext): IParameterizeFeatureFlags => {\n    return {\n        enableUrlEncoding: (ctx && ctx.features && ctx.features.enableUrlEncoding) || false,\n        enableUrlLocalization: (ctx && ctx.features && ctx.features.enableUrlLocalization) || false\n    };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}