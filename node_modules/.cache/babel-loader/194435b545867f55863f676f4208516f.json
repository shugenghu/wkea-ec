{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.regexp.constructor.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/es.string.replace.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{__decorate}from\"tslib\";import classnames from'classnames';import{computed,observable,reaction,set}from'mobx';import{observer}from'mobx-react';import*as React from'react';import{withModuleState}from'@msdyn365-commerce-modules/checkout-utilities';import{getTelemetryObject}from'@msdyn365-commerce-modules/utilities';import{AddressCommon}from'../../common/address-common';import{AddressFormat}from'../../common/address-format';import{AddressItemType}from'../../common/address-format.data';import{AddressMetaData}from'../../common/address-meta-data';import{AddressOperation,AddressType}from'../../common/address-module.data';import{AddressAddUpdate}from'../../common/components/address-add';import{AddressSelect}from'../../common/components/address-select';import{AddressShow}from'../../common/components/address-show';let CheckoutShippingAddress=class CheckoutShippingAddress extends React.Component{constructor(props){super(props);this.countryRegionId='USA';this.addressListSelectedAddress={};this.defaultAddressType=6;this._renderAddOrUpdateAddress=()=>{const addressFormat=this.currentOperation===AddressOperation.Add&&this.addressCommon.isAuthenticatedFlow()?this.addressFormat:this.addressFormat;return AddressAddUpdate({isUpdating:this.isUpdating,resources:this.resources,addressType:AddressType.Shipping,addressFormat:addressFormat.getAddressFormat(this.addUpdateAddress.ThreeLetterISORegionName||this.countryRegionId),defaultCountryRegionId:this.countryRegionId,defaultAddressType:this.defaultAddressType,selectedAddress:this.addUpdateAddress,validationError:this.validationError,hasError:this.hasError,addressActionResponse:this.addressActionResponse,telemetryContent:this.telemetryContent,dropdownDisplayData:addressFormat.getPrefilledAddressDropdownData(this.resources.addressStateDefaultSelectionText,this.stateProvinceInfo),onInputChange:this._onAddressAddUpdateInputChange,onDropdownChange:this._onAddressAddUpdateDropdownChange,hasExternalSubmitGroup:this.props.moduleState.hasExternalSubmitGroup,onSave:this.onSubmit,onCancel:!this.selectedAddress&&!this.addressCommon.isAuthenticatedFlow()?()=>{}:this._resetView});};this._renderSelectAddress=()=>{return AddressSelect({addressFormat:this.addressFormat,addresses:this.customerAddresses,resources:this.resources,addressPurposes:this.addressPurposes,selectedAddress:this.addressListSelectedAddress,onAddressOptionChange:this._onAddressOptionChange,hasExternalSubmitGroup:this.props.moduleState.hasExternalSubmitGroup,telemetryContent:this.telemetryContent,onAddAddress:this._goToAddAddress,onSave:this._onSelectAddress,onCancel:!this.selectedAddress?()=>{}:this._resetView});};this._onAddressOptionChange=event=>{const addressRecordId=event.currentTarget.value;const selectedAddress=this.customerAddresses.find(address=>(address.RecordId||'').toString()===addressRecordId);if(selectedAddress){this.addressListSelectedAddress=selectedAddress;}};this.onAddressAddUpdate=(name,value)=>{set(this.addUpdateAddress,{[name]:value});this.addressFormat.validateAddressFormat(this.addUpdateAddress,this.validationError,this.countryRegionId,name);};this._onAddressAddUpdateInputChange=event=>{if(event.target.type==='checkbox'){this.onAddressAddUpdate(event.target.name,event.target.checked);}else{const value=(event.target.value||'').replace(new RegExp('[<>]','gi'),'');this.onAddressAddUpdate(event.target.name,value);}};this._onAddressAddUpdateDropdownChange=event=>{this.onAddressAddUpdate(event.target.name,event.target.value);if(event.target.name===AddressItemType[AddressItemType.ThreeLetterISORegionName]){this._onCountryChange(event.target.value);}};this._onAddressAddUpdateSubmit=()=>{if(!this.addressFormat.validateAddressFormat(this.addUpdateAddress,this.validationError,this.countryRegionId)){return;}let response;if(this.addressCommon.isAuthenticatedFlow()){response=this.currentOperation===AddressOperation.Update?this.addressCommon.updateCustomerAddress(this.addUpdateAddress):this.addressCommon.addCustomerAddress(this.addUpdateAddress);}else{response=Promise.resolve({address:this.addUpdateAddress});}this.isUpdating=true;this._updateModuleState();response.then(result=>{this.isUpdating=false;if(result.address){this.hasError=false;this._onAddOrUpdateSuccess(result);}else{this.hasError=true;this.addressActionResponse=result;this._updateModuleState();}},()=>{this.hasError=true;this.isUpdating=false;this._updateModuleState();});};this._onCountryChange=countryRegionId=>{this.countryRegionId=countryRegionId;set(this.addUpdateAddress,{['ThreeLetterISORegionName']:countryRegionId});};this._getAddressFormatExcludeList=()=>{const{config}=this.props;const addressFormatExcludeList=[];if(!config.showAddressType){addressFormatExcludeList.push(AddressItemType.AddressTypeValue);}addressFormatExcludeList.push(AddressItemType.IsPrimary);return addressFormatExcludeList;};this._getStateProvinces=()=>{if(!this.countryRegionId||!(this.currentOperation===AddressOperation.Add||this.currentOperation===AddressOperation.Update)){return;}this.addressCommon.getStateProvinces(this.countryRegionId).then(result=>{const stateInfo=result.some(state=>state.StateId===this.addUpdateAddress.State);if(!stateInfo){set(this.addUpdateAddress,{['State']:''});}this.stateProvinceInfo=result;});};this._getDefaultAddress=()=>{if(this.customerAddresses){const primaryAddress=this.customerAddresses.find(address=>address.IsPrimary);return primaryAddress||(this.customerAddresses.length>0?this.customerAddresses[0]:undefined);}return undefined;};this._initModuleState=()=>{this.props.moduleState.init({status:this._canShip()?'updating':'disabled',onEdit:this.onEdit,onCancel:this.onCancel,onSubmit:this.onSubmit});if(this._canShip()){const defaultAddress=this._getShippingAddressFromCartLines()||this._getDefaultAddress();if(defaultAddress){this._updateCurrentOperation(AddressOperation.Show,defaultAddress);this._setShippingAddress(defaultAddress);this._updateModuleState();}else{this._updateCurrentOperation(AddressOperation.Add);}}};this.onSubmit=()=>{switch(this.currentOperation){case AddressOperation.Add:case AddressOperation.Update:this._onAddressAddUpdateSubmit();break;case AddressOperation.List:this._onSelectAddress();break;default:this.props.telemetry.error('Invalid operation');}};this.onCancel=()=>{switch(this.currentOperation){case AddressOperation.Add:case AddressOperation.Update:if(!(!this.selectedAddress&&!this.addressCommon.isAuthenticatedFlow())){this._resetView();}break;case AddressOperation.List:if(this.selectedAddress){this._resetView();}break;default:this.props.telemetry.error('Invalid operation');}};this.onEdit=()=>{if(this.addressCommon.isAuthenticatedFlow()&&this.shippingAddress){this._updateCurrentOperation(AddressOperation.List,this.shippingAddress);}else if(this.shippingAddress){this._updateCurrentOperation(AddressOperation.Update,this.shippingAddress);}this._updateModuleState();};this._getShippingAddressFromCartLines=()=>{const{request}=this.props.context;const pickupDeliveryModeCode=request&&request.channel&&request.channel.PickupDeliveryModeCode;const cartLines=(this.props.data.checkout.result&&this.props.data.checkout.result.checkoutCart.cart.CartLines||[]).filter(cartLine=>cartLine.DeliveryMode&&cartLine.DeliveryMode!==''?cartLine.DeliveryMode!==pickupDeliveryModeCode:cartLine);if(cartLines&&cartLines.length>0){return cartLines[0].ShippingAddress;}return undefined;};this._canShip=()=>{const{checkout}=this.props.data;const{request}=this.props.context;const pickupDeliveryModeCode=request&&request.channel&&request.channel.PickupDeliveryModeCode;if(!checkout.result||!request.channel||checkout.result.checkoutCart.isEmpty){return false;}return checkout.result.checkoutCart.cart.CartLines.some(cartLine=>cartLine.DeliveryMode&&cartLine.DeliveryMode!==''?cartLine.DeliveryMode!==pickupDeliveryModeCode:cartLine);};this._onSelectAddress=()=>{this._updateCurrentOperation(AddressOperation.Show,this.addressListSelectedAddress);this._setShippingAddress(this.addressListSelectedAddress);this._updateModuleState();};this._goToAddAddress=()=>{this._setDefaultCountryRegionId();this._updateCurrentOperation(AddressOperation.Add);};this._onAddOrUpdateSuccess=response=>{if(response.customerAddresses){this.customerAddresses=response.customerAddresses;}if(response.address){this._updateCurrentOperation(AddressOperation.Show,response.address);this._setShippingAddress(response.address);this._updateModuleState();}};this._setShippingAddress=address=>{if(this.props.data.checkout.result){const newShippingAddress=_objectSpread({},address);if(address.ThreeLetterISORegionName&&!newShippingAddress.TwoLetterISORegionName){newShippingAddress.TwoLetterISORegionName=this.addressFormat.getTwoLetterISORegionName(address.ThreeLetterISORegionName);}this.props.data.checkout.result.updateShippingAddress({newShippingAddress});}};this._resetView=()=>{switch(this.currentOperation){case AddressOperation.Add:case AddressOperation.Update:this._updateCurrentOperation(this.addressCommon.isAuthenticatedFlow()?AddressOperation.List:AddressOperation.Show,this.shippingAddress);break;default:this._updateCurrentOperation(AddressOperation.Show,this.shippingAddress);}this._updateModuleState();};this._updateCurrentOperation=(operation,selectedAddress)=>{this.currentOperation=operation;this.selectedAddress=selectedAddress;if(this.currentOperation===AddressOperation.Add||this.currentOperation===AddressOperation.Update){this.addUpdateAddress=_objectSpread({},this.selectedAddress)||{};set(this.addUpdateAddress,{['ThreeLetterISORegionName']:this.addUpdateAddress.ThreeLetterISORegionName||this.countryRegionId});set(this.addUpdateAddress,{['AddressTypeValue']:this.addUpdateAddress.AddressTypeValue||this.defaultAddressType});}else if(this.currentOperation===AddressOperation.List){this.addressListSelectedAddress=_objectSpread({},this.selectedAddress)||{};}};this._updateModuleState=()=>{if(this.currentOperation===AddressOperation.Show){this.props.moduleState.onReady();}else if(this.isUpdating){this.props.moduleState.onPending();}else{this.props.moduleState.onUpdating();}};const{context,data,resources,telemetry}=this.props;this.addUpdateAddress={};this.resources=resources;this.currentOperation=AddressOperation.List;this.countryRegions=data.countryRegions.result||[];this.addressPurposes=data.addressPurposes.result||[];this.customerAddresses=data.address.result||[];this.stateProvinceInfo=data.countryStates.result||[];this.addressCommon=new AddressCommon(context,resources,telemetry);this.addressFormat=new AddressFormat(this.countryRegions,new AddressMetaData(_objectSpread({},resources),this._getAddressFormatExcludeList()),this.addressPurposes);this.validationError={};this.telemetryContent=getTelemetryObject(this.props.context.request.telemetryPageName,this.props.friendlyName,this.props.telemetry);}componentDidMount(){this.props.data.checkout.then(()=>{this._setDefaultCountryRegionId();this._initModuleState();});reaction(()=>this.countryRegionId,()=>this._getStateProvinces());reaction(()=>this.currentOperation,()=>{this._getStateProvinces();});}render(){if(!this._canShip()){return null;}const{renderView,config}=this.props;const viewProps=_objectSpread(_objectSpread({},this.props),{},{currentOperation:this.currentOperation,selectedAddress:this.selectedAddress,addUpdateAddress:this.addUpdateAddress,addressListSelectedAddress:this.addressListSelectedAddress,countryRegionId:this.countryRegionId,stateProvinceInfo:this.stateProvinceInfo,customerAddresses:this.customerAddresses,validationError:this.validationError,addressActionResponse:this.addressActionResponse,isUpdating:this.isUpdating,hasError:this.hasError,className:config.className,viewState:{isShowAddress:this.currentOperation===AddressOperation.Show&&this.selectedAddress,isShowAddresList:this.currentOperation===AddressOperation.List&&this.customerAddresses.length>0,isShowAddOrUpdateAddress:this.currentOperation===AddressOperation.Add||this.currentOperation===AddressOperation.Update},CheckoutShippingAddress:{moduleProps:this.props,className:classnames('ms-checkout-shipping-address',config.className)},showAddress:this._renderShowAddress(),showAddressSelect:this._renderSelectAddress(),showAddOrUpdateAddress:this._renderAddOrUpdateAddress()});return renderView(viewProps);}_renderShowAddress(){if(this.selectedAddress){return AddressShow({address:this.selectedAddress,addressFormat:this.addressFormat.getAddressFormat(this.selectedAddress.ThreeLetterISORegionName||''),addressPurposes:this.addressPurposes});}return null;}_setDefaultCountryRegionId(){const{request}=this.props.context;const market=request&&request.channel&&request.channel.ChannelCountryRegionISOCode;this.countryRegionId=this.addressCommon.getDefaultCountryRegionId(this.countryRegionId,this.countryRegions,market);}get shippingAddress(){return this.props.data.checkout.result&&this.props.data.checkout.result.shippingAddress;}};__decorate([observable],CheckoutShippingAddress.prototype,\"currentOperation\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"selectedAddress\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"addUpdateAddress\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"countryRegionId\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"stateProvinceInfo\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"customerAddresses\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"validationError\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"addressActionResponse\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"isUpdating\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"hasError\",void 0);__decorate([observable],CheckoutShippingAddress.prototype,\"addressListSelectedAddress\",void 0);__decorate([computed],CheckoutShippingAddress.prototype,\"shippingAddress\",null);CheckoutShippingAddress=__decorate([withModuleState,observer],CheckoutShippingAddress);export default CheckoutShippingAddress;","map":{"version":3,"sources":["modules/checkout-shipping-address/checkout-shipping-address.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { computed, observable, reaction, set } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport { IModuleStateProps, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';\nimport { getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo } from '@msdyn365-commerce/retail-proxy';\n\nimport { AddressCommon } from '../../common/address-common';\nimport { AddressFormat } from '../../common/address-format';\nimport { AddressItemType } from '../../common/address-format.data';\nimport { AddressMetaData } from '../../common/address-meta-data';\nimport { AddressOperation, AddressType, IAddressResource, IAddressResponse } from '../../common/address-module.data';\nimport { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';\nimport { AddressSelect, IAddressSelectProps } from '../../common/components/address-select';\nimport { AddressShow, IAddressShowProps } from '../../common/components/address-show';\nimport { ICheckoutShippingAddressData } from './checkout-shipping-address.data';\nimport { ICheckoutShippingAddressProps } from './checkout-shipping-address.props.autogenerated';\n\nexport interface ICheckoutAddressProps extends ICheckoutShippingAddressProps<ICheckoutShippingAddressData>, IModuleStateProps { }\n\nexport interface ICheckoutShippingAddressViewState {\n    isShowAddress: boolean;\n    isShowAddresList: boolean;\n    isShowAddOrUpdateAddress: boolean;\n}\n\nexport interface ICheckoutShippingAddressViewProps extends ICheckoutAddressProps {\n    className: string;\n    currentOperation: AddressOperation;\n    selectedAddress?: Address;\n    addUpdateAddress: Address;\n    addressListSelectedAddress: Address;\n    countryRegionId: string;\n    stateProvinceInfo?: StateProvinceInfo[];\n    customerAddresses: Address[];\n    validationError: object;\n    addressActionResponse?: IAddressResponse;\n    viewState: ICheckoutShippingAddressViewState;\n    CheckoutShippingAddress: IModuleProps;\n    isUpdating: boolean;\n    hasError: boolean;\n    showAddress: IAddressShowProps;\n    showAddressSelect: IAddressSelectProps;\n    showAddOrUpdateAddress: IAddressAddUpdateProps;\n}\n\n/**\n *\n * Address component\n * @extends {React.Component<ICheckoutShippingAddressProps<ICheckoutShippingAddressData>>}\n */\n// @ts-ignore\n@withModuleState\n@observer\nclass CheckoutShippingAddress extends React.Component<ICheckoutAddressProps> {\n    @observable private currentOperation: AddressOperation;\n    @observable private selectedAddress?: Address;\n    @observable private addUpdateAddress: Address;\n    @observable private countryRegionId: string = 'USA';\n    @observable private stateProvinceInfo?: StateProvinceInfo[];\n    @observable private customerAddresses: Address[];\n    @observable private validationError: object;\n    @observable private addressActionResponse?: IAddressResponse;\n    @observable private isUpdating?: boolean;\n    @observable private hasError?: boolean;\n    @observable private addressListSelectedAddress: Address = {};\n\n    private addressCommon: AddressCommon;\n    private addressFormat: AddressFormat;\n    private countryRegions: CountryRegionInfo[];\n    private addressPurposes: AddressPurpose[];\n    private resources: IAddressResource;\n    private defaultAddressType: number = 6; // Default to Home\n    private telemetryContent?: ITelemetryContent;\n\n    constructor(props: ICheckoutAddressProps) {\n        super(props);\n        const { context, data, resources, telemetry } = this.props;\n\n        this.addUpdateAddress = {};\n        this.resources = resources;\n        this.currentOperation = AddressOperation.List;\n        this.countryRegions = data.countryRegions.result || [];\n        this.addressPurposes = data.addressPurposes.result || [];\n        this.customerAddresses = data.address.result || [];\n        this.stateProvinceInfo = data.countryStates.result || [];\n        this.addressCommon = new AddressCommon(context, resources, telemetry);\n        this.addressFormat = new AddressFormat(this.countryRegions, new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()), this.addressPurposes);\n        this.validationError = {};\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this.props.data.checkout.then(() => {\n            this._setDefaultCountryRegionId();\n            this._initModuleState();\n        });\n\n        reaction(\n            () => this.countryRegionId,\n            () => this._getStateProvinces()\n        );\n\n        reaction(\n            () => this.currentOperation,\n            () => {\n                this._getStateProvinces();\n            }\n        );\n    }\n\n    public render(): JSX.Element | null {\n        if (!this._canShip()) {\n            return null;\n        }\n\n        const { renderView, config } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            currentOperation: this.currentOperation,\n            selectedAddress: this.selectedAddress,\n            addUpdateAddress: this.addUpdateAddress,\n            addressListSelectedAddress: this.addressListSelectedAddress,\n            countryRegionId: this.countryRegionId,\n            stateProvinceInfo: this.stateProvinceInfo,\n            customerAddresses: this.customerAddresses,\n            validationError: this.validationError,\n            addressActionResponse: this.addressActionResponse,\n            isUpdating: this.isUpdating,\n            hasError: this.hasError,\n            className: config.className,\n            viewState: {\n                isShowAddress: this.currentOperation === AddressOperation.Show && this.selectedAddress,\n                isShowAddresList: this.currentOperation === AddressOperation.List && this.customerAddresses.length > 0,\n                isShowAddOrUpdateAddress:\n                    this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update\n            },\n            CheckoutShippingAddress: {\n                moduleProps: this.props,\n                className: classnames('ms-checkout-shipping-address', config.className)\n            },\n            showAddress: this._renderShowAddress(),\n            showAddressSelect: this._renderSelectAddress(),\n            showAddOrUpdateAddress: this._renderAddOrUpdateAddress()\n        };\n\n        return renderView(viewProps) as React.ReactElement;\n    }\n\n    private _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {\n        const addressFormat = this.currentOperation === AddressOperation.Add && this.addressCommon.isAuthenticatedFlow() ? this.addressFormat : this.addressFormat;\n        return AddressAddUpdate({\n            isUpdating: this.isUpdating,\n            resources: this.resources,\n            addressType: AddressType.Shipping,\n            addressFormat: addressFormat.getAddressFormat(this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId),\n            defaultCountryRegionId: this.countryRegionId,\n            defaultAddressType: this.defaultAddressType,\n            selectedAddress: this.addUpdateAddress,\n            validationError: this.validationError,\n            hasError: this.hasError,\n            addressActionResponse: this.addressActionResponse,\n            telemetryContent: this.telemetryContent,\n            dropdownDisplayData: addressFormat.getPrefilledAddressDropdownData(\n                this.resources.addressStateDefaultSelectionText,\n                this.stateProvinceInfo\n            ),\n            onInputChange: this._onAddressAddUpdateInputChange,\n            onDropdownChange: this._onAddressAddUpdateDropdownChange,\n            hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,\n            onSave: this.onSubmit,\n            // tslint:disable-next-line: no-empty\n            onCancel: !this.selectedAddress && !this.addressCommon.isAuthenticatedFlow() ? () => { } : this._resetView\n        });\n    };\n\n    private _renderSelectAddress = (): IAddressSelectProps => {\n        return AddressSelect({\n            addressFormat: this.addressFormat,\n            addresses: this.customerAddresses,\n            resources: this.resources,\n            addressPurposes: this.addressPurposes,\n            selectedAddress: this.addressListSelectedAddress,\n            onAddressOptionChange: this._onAddressOptionChange,\n            hasExternalSubmitGroup: this.props.moduleState.hasExternalSubmitGroup,\n            telemetryContent: this.telemetryContent,\n            onAddAddress: this._goToAddAddress,\n            onSave: this._onSelectAddress,\n            // tslint:disable-next-line: no-empty\n            onCancel: !this.selectedAddress ? () => { } : this._resetView\n        });\n    };\n\n    private _renderShowAddress(): IAddressShowProps | null {\n        if (this.selectedAddress) {\n            return AddressShow({\n                address: this.selectedAddress,\n                addressFormat: this.addressFormat.getAddressFormat(this.selectedAddress.ThreeLetterISORegionName || ''),\n                addressPurposes: this.addressPurposes\n            });\n        }\n\n        return null;\n    }\n\n    private _onAddressOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const addressRecordId = event.currentTarget.value;\n        const selectedAddress = this.customerAddresses.find(address => (address.RecordId || '').toString() === addressRecordId);\n        if (selectedAddress) {\n            this.addressListSelectedAddress = selectedAddress;\n        }\n    };\n\n    private onAddressAddUpdate = (name: string, value: string | boolean) => {\n        set(this.addUpdateAddress, { [name]: value });\n        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);\n    };\n\n    private _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        if (event.target.type === 'checkbox') {\n            this.onAddressAddUpdate(event.target.name, event.target.checked);\n        } else {\n            const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');\n            this.onAddressAddUpdate(event.target.name, value);\n        }\n    };\n\n    private _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.onAddressAddUpdate(event.target.name, event.target.value);\n\n        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {\n            this._onCountryChange(event.target.value);\n        }\n    };\n\n    private _onAddressAddUpdateSubmit = (): void => {\n        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {\n            return;\n        }\n\n        let response: Promise<IAddressResponse>;\n        if (this.addressCommon.isAuthenticatedFlow()) {\n            response =\n                this.currentOperation === AddressOperation.Update\n                    ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress)\n                    : this.addressCommon.addCustomerAddress(this.addUpdateAddress);\n        } else {\n            response = Promise.resolve({ address: this.addUpdateAddress });\n        }\n\n        this.isUpdating = true;\n        this._updateModuleState();\n\n        response.then(\n            (result: IAddressResponse) => {\n                this.isUpdating = false;\n\n                if (result.address) {\n                    this.hasError = false;\n                    this._onAddOrUpdateSuccess(result);\n                } else {\n                    this.hasError = true;\n                    this.addressActionResponse = result;\n                    this._updateModuleState();\n                }\n            },\n            () => {\n                this.hasError = true;\n                this.isUpdating = false;\n                this._updateModuleState();\n            }\n        );\n    };\n\n    private _onCountryChange = (countryRegionId: string) => {\n        this.countryRegionId = countryRegionId;\n        set(this.addUpdateAddress, { ['ThreeLetterISORegionName']: countryRegionId });\n    };\n\n    private _getAddressFormatExcludeList = (): AddressItemType[] => {\n        const { config } = this.props;\n        const addressFormatExcludeList: AddressItemType[] = [];\n\n        if (!config.showAddressType) {\n            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);\n        }\n\n        addressFormatExcludeList.push(AddressItemType.IsPrimary);\n\n        return addressFormatExcludeList;\n    }\n\n    private _getStateProvinces = (): void => {\n        if (\n            !this.countryRegionId ||\n            !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)\n        ) {\n            return;\n        }\n\n        // tslint:disable-next-line:no-floating-promises\n        this.addressCommon.getStateProvinces(this.countryRegionId).then((result: StateProvinceInfo[]) => {\n            const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);\n            // Reset state if selected state not found in the list.\n            if (!stateInfo) {\n                set(this.addUpdateAddress, { ['State']: '' });\n            }\n\n            this.stateProvinceInfo = result;\n        });\n    };\n\n    private _setDefaultCountryRegionId(): void {\n        const { request } = this.props.context;\n        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;\n\n        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);\n    }\n\n    private _getDefaultAddress = (): Address | undefined => {\n        if (this.customerAddresses) {\n            const primaryAddress = this.customerAddresses.find((address: Address) => address.IsPrimary);\n            return primaryAddress || (this.customerAddresses.length > 0 ? this.customerAddresses[0] : undefined);\n        }\n        return undefined;\n    };\n\n    private _initModuleState = (): void => {\n        this.props.moduleState.init({\n            status: this._canShip() ? 'updating' : 'disabled',\n            onEdit: this.onEdit,\n            onCancel: this.onCancel,\n            onSubmit: this.onSubmit\n        });\n\n        if (this._canShip()) {\n            const defaultAddress = this._getShippingAddressFromCartLines() || this._getDefaultAddress();\n            if (defaultAddress) {\n                this._updateCurrentOperation(AddressOperation.Show, defaultAddress);\n                this._setShippingAddress(defaultAddress);\n                this._updateModuleState();\n            } else {\n                this._updateCurrentOperation(AddressOperation.Add);\n            }\n        }\n    };\n\n    private onSubmit = (): void => {\n        switch (this.currentOperation) {\n            case AddressOperation.Add:\n            case AddressOperation.Update:\n                this._onAddressAddUpdateSubmit();\n                break;\n            case AddressOperation.List:\n                this._onSelectAddress();\n                break;\n            default:\n                this.props.telemetry.error('Invalid operation');\n        }\n    };\n\n    private onCancel = (): void => {\n        switch (this.currentOperation) {\n            case AddressOperation.Add:\n            case AddressOperation.Update:\n                if (!(!this.selectedAddress && !this.addressCommon.isAuthenticatedFlow())) {\n                    this._resetView();\n                }\n\n                break;\n            case AddressOperation.List:\n                if (this.selectedAddress) {\n                    this._resetView();\n                }\n                break;\n            default:\n                this.props.telemetry.error('Invalid operation');\n        }\n    };\n\n    private onEdit = (): void => {\n        if (this.addressCommon.isAuthenticatedFlow() && this.shippingAddress) {\n            this._updateCurrentOperation(AddressOperation.List, this.shippingAddress);\n        } else if (this.shippingAddress) {\n            this._updateCurrentOperation(AddressOperation.Update, this.shippingAddress);\n        }\n\n        this._updateModuleState();\n    };\n\n    private _getShippingAddressFromCartLines = (): Address | undefined => {\n        const { request } = this.props.context;\n        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;\n\n        const cartLines = ((this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart.CartLines) || []).filter(\n            cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine\n        );\n\n        if (cartLines && cartLines.length > 0) {\n            return cartLines[0].ShippingAddress;\n        }\n\n        return undefined;\n    };\n\n    private _canShip = (): boolean => {\n        const { checkout } = this.props.data;\n        const { request } = this.props.context;\n        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;\n        if (!checkout.result || !request.channel || checkout.result.checkoutCart.isEmpty) {\n            return false;\n        }\n        // @ts-ignore: Type-checker not realizing above request.channel check\n        return checkout.result.checkoutCart.cart.CartLines.some(cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine);\n    };\n\n    private _onSelectAddress = () => {\n        this._updateCurrentOperation(AddressOperation.Show, this.addressListSelectedAddress);\n        this._setShippingAddress(this.addressListSelectedAddress);\n        this._updateModuleState();\n    };\n\n    private _goToAddAddress = () => {\n        this._setDefaultCountryRegionId();\n        this._updateCurrentOperation(AddressOperation.Add);\n    };\n\n    private _onAddOrUpdateSuccess = (response: IAddressResponse) => {\n        if (response.customerAddresses) {\n            this.customerAddresses = response.customerAddresses;\n        }\n\n        if (response.address) {\n            this._updateCurrentOperation(AddressOperation.Show, response.address);\n            this._setShippingAddress(response.address);\n            this._updateModuleState();\n        }\n    };\n\n    private _setShippingAddress = (address: Address): void => {\n        if (this.props.data.checkout.result) {\n            const newShippingAddress = { ...address };\n\n            if (address.ThreeLetterISORegionName && !newShippingAddress.TwoLetterISORegionName) {\n                newShippingAddress.TwoLetterISORegionName = this.addressFormat.getTwoLetterISORegionName(address.ThreeLetterISORegionName);\n            }\n\n            // tslint:disable-next-line:no-floating-promises\n            this.props.data.checkout.result.updateShippingAddress({ newShippingAddress });\n        }\n    };\n\n    @computed get shippingAddress(): Address | undefined {\n        return this.props.data.checkout.result && this.props.data.checkout.result.shippingAddress;\n    }\n\n    private _resetView = (): void => {\n        switch (this.currentOperation) {\n            case AddressOperation.Add:\n            case AddressOperation.Update:\n                this._updateCurrentOperation(\n                    this.addressCommon.isAuthenticatedFlow() ? AddressOperation.List : AddressOperation.Show,\n                    this.shippingAddress\n                );\n                break;\n            default:\n                this._updateCurrentOperation(AddressOperation.Show, this.shippingAddress);\n        }\n        this._updateModuleState();\n    };\n\n    private _updateCurrentOperation = (operation: AddressOperation, selectedAddress?: Address) => {\n        this.currentOperation = operation;\n        this.selectedAddress = selectedAddress;\n\n        if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {\n            this.addUpdateAddress = { ...this.selectedAddress } || {};\n            set(this.addUpdateAddress, {\n                ['ThreeLetterISORegionName']: this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId\n            });\n            set(this.addUpdateAddress, {\n                ['AddressTypeValue']: this.addUpdateAddress.AddressTypeValue || this.defaultAddressType\n            });\n        } else if (this.currentOperation === AddressOperation.List) {\n            this.addressListSelectedAddress = { ...this.selectedAddress } || {};\n        }\n    };\n\n    private _updateModuleState = () => {\n        if (this.currentOperation === AddressOperation.Show) {\n            this.props.moduleState.onReady();\n        } else if (this.isUpdating) {\n            this.props.moduleState.onPending();\n        } else {\n            this.props.moduleState.onUpdating();\n        }\n    };\n}\n\nexport default CheckoutShippingAddress;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}