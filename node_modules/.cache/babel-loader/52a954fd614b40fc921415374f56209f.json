{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCartState}from'@msdyn365-commerce/global-state';import{getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';import{getOrgUnitConfigurationAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';import{getLoyalty,GetLoyaltyCardInput}from'./index';import{buildCacheKey}from'./index';/**\r\n *  Input class for the getLoyaltyCard data action\r\n */export class GetLoyaltyTransactionEstimationInput{constructor(apiSettings,userAccountNumber){this.getCacheKey=()=>buildCacheKey(\"GetLoyaltyCardTransactionEstimation-\".concat(this.userAccountNumber),this.apiSettings);this.getCacheObjectType=()=>'GetLoyaltyCardTransactionEstimation';this.dataCacheType=()=>'request';this.userAccountNumber=userAccountNumber;this.apiSettings=apiSettings;}}/**\r\n * createInput method for the getLoyaltyCard method\r\n * @param inputData The input data passed to the createInput method\r\n */export const createGetLoyaltyTransactionEstimationInput=inputData=>{const{requestContext}=inputData;if(!requestContext.user.isAuthenticated){return new GetLoyaltyTransactionEstimationInput(inputData.requestContext.apiSettings);}return new GetLoyaltyTransactionEstimationInput(inputData.requestContext.apiSettings);};/**\r\n * The action method for the getLoyaltyCard data action\r\n * @param input The action input\r\n * @param ctx The action context\r\n */export async function getLoyaltyTransactionEstimationAction(input,ctx){if(!ctx.requestContext.user.isAuthenticated){return{};}const promises=[_getCart(ctx),_getLoyalty(input,ctx),_getOrgUnits(ctx)];return Promise.all(promises).then(result=>{if(result&&result.length>=2&&result[1].CardNumber){return getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync({callerContext:ctx},result[0].Id,result[1].CardNumber,result[2].Currency||'').then(points=>{return points;}).catch(e=>{ctx.telemetry.exception(e);ctx.telemetry.debug(\"Error getting Loyalty Point Redemption Estimate\");throw new Error('Error getting Loyalty Point Redemption Estimate');});}return{};}).catch(e=>{return{};});}async function _getCart(ctx){const cartState=await getCartState(ctx);return cartState.cart;}async function _getLoyalty(input,ctx){const loyaltyCardInput=new GetLoyaltyCardInput(input.apiSettings);return getLoyalty(loyaltyCardInput,ctx);}async function _getOrgUnits(ctx){return getOrgUnitConfigurationAsync({callerContext:ctx,queryResultSettings:{}});}/**\r\n * The getLoyaltyTransactionEstimation data action\r\n * Returns the loyalty card belonging to the customer\r\n */export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-loyalty-transaction-estimation',action:getLoyaltyTransactionEstimationAction,input:createGetLoyaltyTransactionEstimationInput});","map":{"version":3,"sources":["../../src/get-loyalty-transaction-estimation.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICommerceApiSettings, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { Cart, ChannelConfiguration, LoyaltyCard, LoyaltyPointRedemptionEstimate } from '@msdyn365-commerce/retail-proxy';\nimport { getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { getOrgUnitConfigurationAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { getLoyalty,  GetLoyaltyCardInput } from './index';\nimport { buildCacheKey } from './index';\n\n/**\n *  Input class for the getLoyaltyCard data action\n */\nexport class GetLoyaltyTransactionEstimationInput implements IActionInput {\n    public userAccountNumber?: string;\n    public apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings, userAccountNumber?: string) {\n        this.userAccountNumber = userAccountNumber;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`GetLoyaltyCardTransactionEstimation-${this.userAccountNumber}`, this.apiSettings);\n    public getCacheObjectType = () => 'GetLoyaltyCardTransactionEstimation';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * createInput method for the getLoyaltyCard method\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetLoyaltyTransactionEstimationInput = (inputData: ICreateActionContext): GetLoyaltyTransactionEstimationInput => {\n    const { requestContext } = inputData;\n    if (!requestContext.user.isAuthenticated) {\n        return new GetLoyaltyTransactionEstimationInput(inputData.requestContext.apiSettings);\n    }\n\n    return new GetLoyaltyTransactionEstimationInput(inputData.requestContext.apiSettings);\n};\n\n/**\n * The action method for the getLoyaltyCard data action\n * @param input The action input\n * @param ctx The action context\n */\nexport async function getLoyaltyTransactionEstimationAction(input: GetLoyaltyTransactionEstimationInput, ctx: IActionContext): Promise<LoyaltyPointRedemptionEstimate> {\n\n    if (! ctx.requestContext.user.isAuthenticated) {\n        return <LoyaltyPointRedemptionEstimate>{};\n    }\n\n    const promises: [Promise<Cart>,Promise<LoyaltyCard>, Promise<ChannelConfiguration>] = [ _getCart(ctx), _getLoyalty(input, ctx), _getOrgUnits(ctx) ];\n    return Promise.all(promises)\n        .then((result) => {\n            if(result && result.length >=2 && result[1].CardNumber)\n            {\n            return getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync({ callerContext: ctx }, result[0].Id, result[1].CardNumber!, result[2].Currency || '')\n                .then(points => {\n                    return points;\n                })\n                .catch(e => {\n                    ctx.telemetry.exception(e);\n                    ctx.telemetry.debug(`Error getting Loyalty Point Redemption Estimate`);\n                    throw new Error('Error getting Loyalty Point Redemption Estimate');\n                });\n            }\n            return <LoyaltyPointRedemptionEstimate>{};\n        })\n        .catch(e => {\n            return <LoyaltyPointRedemptionEstimate>{};\n        });\n}\n\nasync function _getCart(ctx: IActionContext): Promise<Cart> {\n    const cartState = await getCartState(ctx);\n\n    return cartState.cart;\n}\n\nasync function _getLoyalty(input: GetLoyaltyTransactionEstimationInput, ctx: IActionContext): Promise<LoyaltyCard> {\n    const loyaltyCardInput = new GetLoyaltyCardInput(input.apiSettings);\n    return getLoyalty(loyaltyCardInput, ctx);\n}\n\nasync function _getOrgUnits(ctx: IActionContext): Promise<ChannelConfiguration> {\n    return getOrgUnitConfigurationAsync({callerContext: ctx, queryResultSettings: {}});\n}\n\n/**\n * The getLoyaltyTransactionEstimation data action\n * Returns the loyalty card belonging to the customer\n */\nexport default createObservableDataAction<LoyaltyCard>({\n    id: '@msdyn365-commerce-modules/retail-actions/get-loyalty-transaction-estimation',\n    action: <IAction<LoyaltyCard>>getLoyaltyTransactionEstimationAction,\n    input: <(args: ICreateActionContext) => IActionInput>createGetLoyaltyTransactionEstimationInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}