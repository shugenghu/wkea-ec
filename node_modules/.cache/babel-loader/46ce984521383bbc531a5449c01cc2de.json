{"ast":null,"code":"/**\r\n * Wrapper for query result settings, which guarantees some properties that are optional in the real subject\r\n * and includes some common utilities for data actions\r\n */export class QueryResultSettingsProxy{/**\r\n     * private constructor, expect instances to be created with the factory method\r\n     */constructor(queryResultSettings){this.queryResultSettings=queryResultSettings;}get QueryResultSettings(){return this.queryResultSettings;}/**\r\n     * Gets the hints for the cache key based on query result settings\r\n     */get cacheKeyHint(){// the factory method guarantees values are defined\nconst topHint=\"top-\".concat(this.queryResultSettings.Paging.Top);const skipHint=\"skip-\".concat(this.queryResultSettings.Paging.Skip);const sortingHintData=(this.queryResultSettings.Sorting.Columns||[]).map(column=>{return\"\".concat(column.ColumnName,\"--\").concat(column.IsDescending&&'desc'||'asc');}).join(',')||undefined;const sortingHint=\"sortBy-\".concat(sortingHintData);return\"\".concat(topHint,\"|\").concat(skipHint,\"|\").concat(sortingHint);}/**\r\n     * Factory method for data actions\r\n     * @param inputData input data\r\n     */static fromInputData(inputData){const{requestContext,config}=inputData;return QueryResultSettingsProxy.fromModuleData(requestContext,config);}/**\r\n     * Factory method for modules\r\n     * @param requestContext requestContext\r\n     * @param config module config from props\r\n     */static fromModuleData(requestContext,config){const sortingCriteria=config&&config.sortingCriteria||undefined;const query=requestContext&&requestContext.query;const top=query&&query.top||undefined;const skip=query&&query.skip||undefined;const queryResultSettings={Paging:{Skip:skip&&Number(skip)||0,Top:top&&Number(top)||(config===null||config===void 0?void 0:config.itemsPerPage)||50},Sorting:sortingCriteria||{}};return new QueryResultSettingsProxy(queryResultSettings);}/**\r\n     * Factory method\r\n     */static getDefault(){return new QueryResultSettingsProxy({Paging:{},Sorting:{}});}}","map":{"version":3,"sources":["../../../src/utilities/QueryResultSettingsProxy.ts"],"names":[],"mappings":"AAIA;;;AAGG,GACH,MAAM,MAAO,CAAA,wBAAwB,CA4DjC;;AAEG,OACH,WAAA,CACI,mBADJ,CAC4C,CAExC,KAAK,mBAAL,CAA2B,mBAA3B,CACH,CA/DA,GAAI,CAAA,mBAAJ,EAAuB,CACpB,MAAO,MAAK,mBAAZ,CACH,CAED;;AAEG,OACH,GAAI,CAAA,YAAJ,EAAgB,CACZ;AACA,KAAM,CAAA,OAAO,eAAU,KAAK,mBAAL,CAAyB,MAAzB,CAAiC,GAA3C,CAAb,CACA,KAAM,CAAA,QAAQ,gBAAW,KAAK,mBAAL,CAAyB,MAAzB,CAAiC,IAA5C,CAAd,CACA,KAAM,CAAA,eAAe,CAAG,CAAC,KAAK,mBAAL,CAAyB,OAAzB,CAAkC,OAAlC,EAA6C,EAA9C,EAAkD,GAAlD,CAAuD,MAAD,EAAuB,CACjG,gBAAU,MAAM,CAAC,UAAjB,cAAgC,MAAM,CAAC,YAAP,EAAuB,MAAvB,EAAiC,KAAjE,EACH,CAFuB,EAErB,IAFqB,CAEhB,GAFgB,GAER,SAFhB,CAGA,KAAM,CAAA,WAAW,kBAAa,eAAb,CAAjB,CACA,gBAAU,OAAV,aAAqB,QAArB,aAAiC,WAAjC,EACH,CAED;;;AAGG,OACI,MAAO,CAAA,aAAP,CAAqB,SAArB,CAAoE,CACvE,KAAM,CAAE,cAAF,CAAkB,MAAlB,EAA6B,SAAnC,CACA,MAAO,CAAA,wBAAwB,CAAC,cAAzB,CAAwC,cAAxC,CAAwD,MAAxD,CAAP,CACH,CAED;;;;AAIG,OACI,MAAO,CAAA,cAAP,CAAsB,cAAtB,CAAuD,MAAvD,CAA+F,CAClG,KAAM,CAAA,eAAe,CAAG,MAAM,EAAI,MAAM,CAAC,eAAjB,EAAoC,SAA5D,CACA,KAAM,CAAA,KAAK,CAAG,cAAc,EAAI,cAAc,CAAC,KAA/C,CACA,KAAM,CAAA,GAAG,CAAG,KAAK,EAAI,KAAK,CAAC,GAAf,EAAsB,SAAlC,CACA,KAAM,CAAA,IAAI,CAAG,KAAK,EAAI,KAAK,CAAC,IAAf,EAAuB,SAApC,CAEA,KAAM,CAAA,mBAAmB,CAAG,CACxB,MAAM,CAAE,CACJ,IAAI,CAAG,IAAI,EAAI,MAAM,CAAC,IAAD,CAAd,EAAwB,CAD3B,CAEJ,GAAG,CAAG,GAAG,EAAI,MAAM,CAAC,GAAD,CAAb,GAAsB,MAAtB,SAAsB,MAAtB,iBAAsB,MAAM,CAAE,YAA9B,GAA8C,EAFhD,CADgB,CAKxB,OAAO,CAAE,eAAe,EAAI,EALJ,CAA5B,CAQA,MAAO,IAAI,CAAA,wBAAJ,CAA6B,mBAA7B,CAAP,CACH,CAED;;AAEG,OACI,MAAO,CAAA,UAAP,EAAiB,CACpB,MAAO,IAAI,CAAA,wBAAJ,CAA6B,CAAE,MAAM,CAAE,EAAV,CAAc,OAAO,CAAE,EAAvB,CAA7B,CAAP,CACH,CA1DgC","sourcesContent":["import { IAny, ICreateActionContext, IGeneric, IRequestContext } from '@msdyn365-commerce/core';\nimport { QueryResultSettings, SortColumn } from '@msdyn365-commerce/retail-proxy';\nimport { IQueryResultSettingsModuleConfig } from './IQueryResultSettingsModuleConfig';\n\n/**\n * Wrapper for query result settings, which guarantees some properties that are optional in the real subject\n * and includes some common utilities for data actions\n */\nexport class QueryResultSettingsProxy {\n    // real subject\n    private queryResultSettings: QueryResultSettings;\n\n     get QueryResultSettings(): QueryResultSettings {\n        return this.queryResultSettings;\n    }\n\n    /**\n     * Gets the hints for the cache key based on query result settings\n     */\n    get cacheKeyHint(): string {\n        // the factory method guarantees values are defined\n        const topHint = `top-${this.queryResultSettings.Paging!.Top!}`;\n        const skipHint = `skip-${this.queryResultSettings.Paging!.Skip!}`;\n        const sortingHintData = (this.queryResultSettings.Sorting!.Columns || []).map((column: SortColumn) => {\n            return `${column.ColumnName}--${column.IsDescending && 'desc' || 'asc'}`;\n        }).join(',') || undefined;\n        const sortingHint = `sortBy-${sortingHintData}`;\n        return `${topHint}|${skipHint}|${sortingHint}`;\n    }\n\n    /**\n     * Factory method for data actions\n     * @param inputData input data\n     */\n    public static fromInputData(inputData: ICreateActionContext<IGeneric<IAny>>): QueryResultSettingsProxy {\n        const { requestContext, config } = inputData;\n        return QueryResultSettingsProxy.fromModuleData(requestContext, config as IQueryResultSettingsModuleConfig);\n    }\n\n    /**\n     * Factory method for modules\n     * @param requestContext requestContext\n     * @param config module config from props\n     */\n    public static fromModuleData(requestContext: IRequestContext, config: IQueryResultSettingsModuleConfig): QueryResultSettingsProxy {\n        const sortingCriteria = config && config.sortingCriteria || undefined;\n        const query = requestContext && requestContext.query;\n        const top = query && query.top || undefined;\n        const skip = query && query.skip || undefined;\n\n        const queryResultSettings = {\n            Paging: {\n                Skip: (skip && Number(skip) || 0),\n                Top: (top && Number(top) || config?.itemsPerPage || 50)\n            },\n            Sorting: sortingCriteria || {}\n        };\n\n        return new QueryResultSettingsProxy(queryResultSettings);\n    }\n\n    /**\n     * Factory method\n     */\n    public static getDefault(): QueryResultSettingsProxy {\n        return new QueryResultSettingsProxy({ Paging: {}, Sorting: {} });\n    }\n\n    /**\n     * private constructor, expect instances to be created with the factory method\n     */\n    private constructor(\n        queryResultSettings: QueryResultSettings\n    ) {\n        this.queryResultSettings = queryResultSettings;\n    }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}