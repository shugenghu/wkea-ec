{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCurrentAsync,getUsersAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';import{buildCacheKey}from'./utilities/utils';/**\r\n * Input class for get customer data action\r\n */export class OrganizationUsersInput{constructor(apiSettings){this.getCacheKey=()=>buildCacheKey('OrganizationUsers',this.apiSettings);this.getCacheObjectType=()=>'BusinessPartner';this.dataCacheType=()=>'request';this.apiSettings=apiSettings;}}export const createGetOrganizationUsersInput=inputData=>{const{requestContext}=inputData;// Check if the user is authenticated.\nif(!requestContext.user.isAuthenticated){throw new Error('User is not logged in.');}return new OrganizationUsersInput(requestContext.apiSettings);};export async function getOrganizationUsers(input,ctx){return getCurrentAsync({callerContext:ctx}).then(businessPartner=>{return getUsersAsync({callerContext:ctx},businessPartner.BusinessPartnerId).then(users=>{return users;}).catch(error=>{ctx.telemetry.exception(error);ctx.trace('[get-organization-users] Unable to load users');throw new Error('[get-organization-users] Unable to load users');});}).catch(error=>{ctx.telemetry.exception(error);ctx.telemetry.debug('[get-organization-users] Unable to get BusinessPartner');throw new Error('[get-organization-users] Unable to get BusinessPartner');});}export default createObservableDataAction({id:'get-organization-users',action:getOrganizationUsers,input:createGetOrganizationUsersInput});","map":{"version":3,"sources":["../../src/get-organization-users.ts"],"names":[],"mappings":"sCAAA,OAAoB,0BAApB,KAAyI,yBAAzI,CAEA,OAAS,eAAT,CAA0B,aAA1B,KAA+C,gFAA/C,CACA,OAAS,aAAT,KAA8B,mBAA9B,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,sBAAsB,CAG/B,WAAA,CAAY,WAAZ,CAA6C,CAGtC,KAAA,WAAA,CAAc,IAAM,aAAa,CAAC,mBAAD,CAAsB,KAAK,WAA3B,CAAjC,CACA,KAAA,kBAAA,CAAqB,IAAM,iBAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CAJH,KAAK,WAAL,CAAmB,WAAnB,CACH,CAL8B,CAWnC,MAAO,MAAM,CAAA,+BAA+B,CAAI,SAAD,EAAkD,CAC7F,KAAM,CAAE,cAAF,EAAqB,SAA3B,CAEA;AACA,GAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,eAAzB,CAA0C,CACtC,KAAM,IAAI,CAAA,KAAJ,CAAU,wBAAV,CAAN,CACH,CAED,MAAO,IAAI,CAAA,sBAAJ,CAA2B,cAAc,CAAC,WAA1C,CAAP,CACH,CATM,CAWP,MAAO,eAAe,CAAA,oBAAf,CAAoC,KAApC,CAAmE,GAAnE,CAAsF,CACzF,MAAO,CAAA,eAAe,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAf,CACF,IADE,CACG,eAAe,EAAG,CACpB,MAAO,CAAA,aAAa,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAyB,eAAe,CAAC,iBAAzC,CAAb,CACF,IADE,CACI,KAAD,EAAU,CACZ,MAAO,CAAA,KAAP,CACH,CAHE,EAIF,KAJE,CAII,KAAK,EAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,GAAG,CAAC,KAAJ,CAAU,+CAAV,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,+CAAV,CAAN,CACH,CARE,CAAP,CASH,CAXE,EAYF,KAZE,CAYI,KAAK,EAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,wDAApB,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,wDAAV,CAAN,CACH,CAhBE,CAAP,CAiBH,CACD,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,wBADkC,CAEtC,MAAM,CAA2C,oBAFX,CAGtC,KAAK,CAAE,+BAH+B,CAAD,CAAzC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICommerceApiSettings, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { BusinessPartnerUser } from '@msdyn365-commerce/retail-proxy';\nimport { getCurrentAsync, getUsersAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';\nimport { buildCacheKey } from './utilities/utils';\n\n/**\n * Input class for get customer data action\n */\nexport class OrganizationUsersInput implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n    public getCacheKey = () => buildCacheKey('OrganizationUsers', this.apiSettings);\n    public getCacheObjectType = () => 'BusinessPartner';\n    public dataCacheType = (): CacheType => 'request';\n}\n\nexport const createGetOrganizationUsersInput = (inputData: ICreateActionContext): IActionInput => {\n    const { requestContext } = inputData;\n\n    // Check if the user is authenticated.\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('User is not logged in.');\n    }\n\n    return new OrganizationUsersInput(requestContext.apiSettings);\n};\n\nexport async function getOrganizationUsers(input: OrganizationUsersInput, ctx: IActionContext): Promise<BusinessPartnerUser[]> {\n    return getCurrentAsync({ callerContext: ctx })\n        .then(businessPartner => {\n            return getUsersAsync({ callerContext: ctx }, businessPartner.BusinessPartnerId)\n                .then((users) => {\n                    return users;\n                })\n                .catch(error => {\n                    ctx.telemetry.exception(error);\n                    ctx.trace('[get-organization-users] Unable to load users');\n                    throw new Error('[get-organization-users] Unable to load users');\n                });\n        })\n        .catch(error => {\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug('[get-organization-users] Unable to get BusinessPartner');\n            throw new Error('[get-organization-users] Unable to get BusinessPartner');\n        });\n}\nexport default createObservableDataAction({\n    id: 'get-organization-users',\n    action: <IAction<BusinessPartnerUser[]>><unknown>getOrganizationUsers,\n    input: createGetOrganizationUsersInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}