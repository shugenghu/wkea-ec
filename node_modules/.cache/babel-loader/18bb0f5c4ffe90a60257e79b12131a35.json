{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{CONTAINER_TYPE,getRenderingHelper}from'./drag-and-drop-utils';const ICON_TYPE={container:{className:'ms-container-icon',d:'M0 1664v-256h128v256H0zM256 0v128H0V0h256zM0 2048v-256h128v256H0zM1792 0v128h-256V0h256zM0 1280v-256h128v256H0zm640-896h768l384 640-384 640H640l-384-640 384-640zm696 1152l307-512-307-512H712l-307 512 307 512h624zM640 0v128H384V0h256zM0 896V640h128v256H0zM1024 0v128H768V0h256zm384 0v128h-256V0h256zm512 1792v-256h128v256h-128zm0-768V768h128v256h-128zm0 384v-256h128v256h-128zm0-768V384h128v256h-128zm0-640h128v256h-128V0zM0 512V256h128v256H0zm640 1536v-128h256v128H640zm-384 0v-128h256v128H256zm1152 0v-128h256v128h-256zm-384 0v-128h256v128h-256zm768 0v-128h256v128h-256z',viewBox:'30 0 2048 2048',iconType:'container',isDroppable:true},module:{className:'ms-module-icon',d:'M1536 128l512 896-512 896H512L0 1024l512-896h1024zm-74 1664l439-768-439-768H586l-439 768 439 768h876z',viewBox:'30 0 2048 2048',iconType:'module',isDroppable:true},fragment:{className:'ms-fragment-icon',d:'M768 896H256L0 448 256 0h512l256 448-256 448zM330 128L147 448l183 320h364l183-320-183-320H330zm-74 896h512l256 448-256 448H256L0 1472l256-448zm438 768l183-320-183-320H330l-183 320 183 320h364zm970-1280l256 448-256 448h-512L896 960l256-448h512zm-74 768l183-320-183-320h-364l-183 320 183 320h364z',viewBox:'0 0 1920 1920',iconType:'fragment',isDroppable:true},notDroppable:{className:'ms-not-droppable-icon',d:'M939 171q129 0 249 33t224 95 190 146 147 190 94 225 34 249q0 129-33 249t-95 224-146 191-190 147-225 94-249 34q-130 0-250-33t-224-95-190-147-147-190-94-224-34-250q0-129 33-249t95-224 147-190 190-147 224-94 250-34zm0 1740q111 0 213-28t192-81 162-126 125-162 81-191 29-214q0-110-28-212t-81-192-126-162-163-126-191-81-213-29q-111 0-213 28t-192 81-162 126-125 162-81 191-29 214q0 111 28 213t81 192 125 162 163 126 191 80 214 29zm-470-887h939v171H469v-171z',viewBox:'20 170 1877 1877',iconType:'notDroppable',isDroppable:false}};// The styles for these classes are defined in base-page.tsx\nconst DRAG_IMAGE_CLASS_NAME='ms-drag-image';const DRAG_ICON_BOX_CLASS_NAME='ms-drag-icon-box';const DRAG_TEXT_BOX_CLASS_NAME='ms-drag-text-box';const DRAG_TEXT_CONTENT_CLASS_NAME='ms-drag-text-content';// tslint:disable-next-line:no-http-string\nconst SVG_URL='http://www.w3.org/2000/svg';/**\r\n * Provides the drag and drop image control\r\n */export class DragAndDropImage{constructor(){/**\r\n         * Update the drag image position.\r\n         * @param x The position of the image on the x-axis.\r\n         * @param y The position of the image on the y-axis.\r\n         */this.updatePosition=(x,y)=>{if(this.dragImage){this.dragImage.style.display='';this.dragImage.style.left=\"\".concat(x,\"px\");this.dragImage.style.top=\"\".concat(y,\"px\");}};/**\r\n         * Hide image.\r\n         */this.hide=()=>{if(this.dragImage){this.dragImage.style.display='none';}};/**\r\n         * Set transparent image to be used as the data transfer image.\r\n         * @returns {HTMLElement | null} The transparent image element.\r\n         */this.setTransparentImage=()=>{this.transparentImage=document.createElement('div');document.body.appendChild(this.transparentImage);return this.transparentImage;};/**\r\n         * Check if the status of the image is droppable.\r\n         * @returns {boolean} If the current status of the image is droppable.\r\n         */this.isStatusDroppable=()=>{return!!this.dragImage&&this.iconType!=='notDroppable';};/**\r\n         * Check if the status of the image is not droppable.\r\n         * @returns {boolean} If the current status of the image is not droppable.\r\n         */this.isStatusNotDroppable=()=>{return!!this.dragImage&&this.iconType==='notDroppable';};/**\r\n         * Create or update the drop allowed image element if necessary.\r\n         * @param dragElementDataInfo The drag element data info.\r\n         * @param x The position of the image on the x-axis.\r\n         * @param y The position of the image on the y-axis.\r\n         */this.setDropAllowedImage=(dragElementDataInfo,x,y)=>{this._setDragImage(this._getIconInfo(dragElementDataInfo),this._getImageName(dragElementDataInfo),x,y);};/**\r\n         * Create or update the drop not allowed image element if necessary.\r\n         * @param x The position of the image on the x-axis.\r\n         * @param y The position of the image on the y-axis.\r\n         */this.setDropNotAllowedImage=(x,y)=>{this._setDragImage(this._getIconInfo(),'Move not allowed',x,y);};/**\r\n         * Clear the drag and drop image.\r\n         */this.clear=()=>{if(this.dragImage){this.dragImage.remove();}if(this.transparentImage){this.transparentImage.remove();}this.dragImage=null;this.transparentImage=null;this.iconType=null;};/**\r\n         * Create or update the drag image element if necessary.\r\n         * @param iconInfo The info about the icon to be displayed in the drag image.\r\n         * @param textContent The text content to be placed inside the text box.\r\n         * @param x The position of the image on the x-axis.\r\n         * @param y The position of the image on the y-axis.\r\n         */this._setDragImage=(iconInfo,textContent,x,y)=>{if(!this.dragImage){this.dragImage=this._createDragImage(iconInfo,textContent,x,y);document.body.appendChild(this.dragImage);}else if(this.iconType&&this.iconType!==iconInfo.iconType){const droppableClassName=iconInfo.isDroppable?'droppable':'not-droppable';const textBox=this.dragImage.querySelector(\".\".concat(DRAG_TEXT_BOX_CLASS_NAME));if(textBox){const text=textBox.querySelector(\".\".concat(DRAG_TEXT_CONTENT_CLASS_NAME));if(text){text.className=\"\".concat(DRAG_TEXT_CONTENT_CLASS_NAME,\" \").concat(droppableClassName);text.textContent=textContent;textBox.className=\"\".concat(DRAG_TEXT_BOX_CLASS_NAME,\" \").concat(droppableClassName);}}const iconBox=this.dragImage.querySelector(\".\".concat(DRAG_ICON_BOX_CLASS_NAME));if(iconBox){iconBox.className=\"\".concat(DRAG_ICON_BOX_CLASS_NAME,\" \").concat(droppableClassName);const iconPath=iconBox.querySelector(\".\".concat(ICON_TYPE[this.iconType].className));if(iconPath){iconPath.setAttribute('class',iconInfo.className);}const iconSVG=iconBox.querySelector(\"svg\");if(iconSVG){iconSVG.setAttribute('viewBox',iconInfo.viewBox);}}}this.iconType=iconInfo.iconType;};/**\r\n         * Create the drag image element.\r\n         * @param iconInfo The info about the icon to be displayed in the drag image.\r\n         * @param textContent The text content to be placed inside the text box.\r\n         * @param x The position of the image on the x-axis.\r\n         * @param y The position of the image on the y-axis.\r\n         * @returns {HTMLElement} The drag image element.\r\n         */this._createDragImage=(iconInfo,textContent,x,y)=>{const image=document.createElement('div');image.className=DRAG_IMAGE_CLASS_NAME;image.style.left=\"\".concat(x,\"px\");image.style.top=\"\".concat(y,\"px\");const iconBox=this._createDragIcon(iconInfo);const textBox=this._createDragText(textContent,iconInfo.isDroppable);image.appendChild(iconBox);image.appendChild(textBox);return image;};/**\r\n         * Create the icon box for the drag image element.\r\n         * @param iconInfo The info about the icon to be displayed in the drag image.\r\n         * @returns {HTMLElement} The drag icon element.\r\n         */this._createDragIcon=iconInfo=>{const iconBox=document.createElement('div');iconBox.className=\"\".concat(DRAG_ICON_BOX_CLASS_NAME,\" \").concat(iconInfo.isDroppable?'droppable':'not-droppable');const svg=document.createElementNS(SVG_URL,'svg');svg.setAttribute('viewBox',iconInfo.viewBox);const path=document.createElementNS(SVG_URL,'path');path.setAttribute('class',iconInfo.className);path.setAttribute('d',iconInfo.d);svg.appendChild(path);iconBox.appendChild(svg);return iconBox;};/**\r\n         * Create the drag image element.\r\n         * @param textContent The text content to be placed inside the text box.\r\n         * @param isDroppable If the textbox is for droppable elements.\r\n         * @returns {HTMLElement} The drag text content.\r\n         */this._createDragText=(textContent,isDroppable)=>{const droppableClassName=isDroppable?'droppable':'not-droppable';const textBox=document.createElement('div');textBox.className=\"\".concat(DRAG_TEXT_BOX_CLASS_NAME,\" \").concat(droppableClassName);const text=document.createElement('p');text.className=\"\".concat(DRAG_TEXT_CONTENT_CLASS_NAME,\" \").concat(droppableClassName);text.textContent=textContent;textBox.appendChild(text);return textBox;};this.dragImage=null;this.transparentImage=null;this.iconType=null;}/**\r\n     * Get the name to be displayed on the drag image.\r\n     * @param dragElementDataInfo The drag element data info.\r\n     * @returns {string} The name to be displayed on the drag image.\r\n     */_getImageName(dragElementDataInfo){let dragImageName=dragElementDataInfo.dataInfo.friendlyName;if(dragElementDataInfo.dataInfo.isFragment){const helper=getRenderingHelper();if(helper&&helper.getFragmentDisplayName){dragImageName=helper.getFragmentDisplayName(dragElementDataInfo.dataInfo.id);}}return dragImageName;}/**\r\n     * Get the information about the icon to be used inside the drag image.\r\n     * @param dragElementDataInfo The drag element data info.\r\n     * @returns {IconInfo} The info about the icon to be used inside the drag image.\r\n     */_getIconInfo(dragElementDataInfo){if(!dragElementDataInfo){return ICON_TYPE.notDroppable;}else if(dragElementDataInfo.dataInfo.isFragment||dragElementDataInfo.dataInfo.isFragmentModule){return ICON_TYPE.fragment;}else if(dragElementDataInfo.dataInfo.moduleType===CONTAINER_TYPE){return ICON_TYPE.container;}else{return ICON_TYPE.module;}}}const dragAndDropImage=new DragAndDropImage();export default dragAndDropImage;","map":{"version":3,"sources":["../../../../src/utilities/drag-and-drop/drag-and-drop-image.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { CONTAINER_TYPE, ElementDataInfo, getRenderingHelper } from './drag-and-drop-utils';\n\ntype IconType = 'container' | 'module' | 'fragment' | 'notDroppable';\ntype IconInfo = { className: string; viewBox: string; iconType: IconType; isDroppable: boolean; d: string };\ntype IconTypeDictionary = Record<IconType, IconInfo>;\nconst ICON_TYPE: IconTypeDictionary = {\n    container: {\n        className: 'ms-container-icon',\n        d:\n            'M0 1664v-256h128v256H0zM256 0v128H0V0h256zM0 2048v-256h128v256H0zM1792 0v128h-256V0h256zM0 1280v-256h128v256H0zm640-896h768l384 640-384 640H640l-384-640 384-640zm696 1152l307-512-307-512H712l-307 512 307 512h624zM640 0v128H384V0h256zM0 896V640h128v256H0zM1024 0v128H768V0h256zm384 0v128h-256V0h256zm512 1792v-256h128v256h-128zm0-768V768h128v256h-128zm0 384v-256h128v256h-128zm0-768V384h128v256h-128zm0-640h128v256h-128V0zM0 512V256h128v256H0zm640 1536v-128h256v128H640zm-384 0v-128h256v128H256zm1152 0v-128h256v128h-256zm-384 0v-128h256v128h-256zm768 0v-128h256v128h-256z',\n        viewBox: '30 0 2048 2048',\n        iconType: 'container',\n        isDroppable: true\n    },\n    module: {\n        className: 'ms-module-icon',\n        d: 'M1536 128l512 896-512 896H512L0 1024l512-896h1024zm-74 1664l439-768-439-768H586l-439 768 439 768h876z',\n        viewBox: '30 0 2048 2048',\n        iconType: 'module',\n        isDroppable: true\n    },\n    fragment: {\n        className: 'ms-fragment-icon',\n        d:\n            'M768 896H256L0 448 256 0h512l256 448-256 448zM330 128L147 448l183 320h364l183-320-183-320H330zm-74 896h512l256 448-256 448H256L0 1472l256-448zm438 768l183-320-183-320H330l-183 320 183 320h364zm970-1280l256 448-256 448h-512L896 960l256-448h512zm-74 768l183-320-183-320h-364l-183 320 183 320h364z',\n        viewBox: '0 0 1920 1920',\n        iconType: 'fragment',\n        isDroppable: true\n    },\n    notDroppable: {\n        className: 'ms-not-droppable-icon',\n        d:\n            'M939 171q129 0 249 33t224 95 190 146 147 190 94 225 34 249q0 129-33 249t-95 224-146 191-190 147-225 94-249 34q-130 0-250-33t-224-95-190-147-147-190-94-224-34-250q0-129 33-249t95-224 147-190 190-147 224-94 250-34zm0 1740q111 0 213-28t192-81 162-126 125-162 81-191 29-214q0-110-28-212t-81-192-126-162-163-126-191-81-213-29q-111 0-213 28t-192 81-162 126-125 162-81 191-29 214q0 111 28 213t81 192 125 162 163 126 191 80 214 29zm-470-887h939v171H469v-171z',\n        viewBox: '20 170 1877 1877',\n        iconType: 'notDroppable',\n        isDroppable: false\n    }\n};\n// The styles for these classes are defined in base-page.tsx\nconst DRAG_IMAGE_CLASS_NAME = 'ms-drag-image';\nconst DRAG_ICON_BOX_CLASS_NAME = 'ms-drag-icon-box';\nconst DRAG_TEXT_BOX_CLASS_NAME = 'ms-drag-text-box';\nconst DRAG_TEXT_CONTENT_CLASS_NAME = 'ms-drag-text-content';\n// tslint:disable-next-line:no-http-string\nconst SVG_URL = 'http://www.w3.org/2000/svg';\n\n/**\n * Provides the drag and drop image control\n */\nexport class DragAndDropImage {\n    private dragImage: HTMLElement | null;\n    private transparentImage: HTMLElement | null;\n    private iconType: IconType | null;\n\n    constructor() {\n        this.dragImage = null;\n        this.transparentImage = null;\n        this.iconType = null;\n    }\n\n    /**\n     * Update the drag image position.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     */\n    public updatePosition = (x: number, y: number): void => {\n        if (this.dragImage) {\n            this.dragImage.style.display = '';\n            this.dragImage.style.left = `${x}px`;\n            this.dragImage.style.top = `${y}px`;\n        }\n    };\n\n    /**\n     * Hide image.\n     */\n    public hide = (): void => {\n        if (this.dragImage) {\n            this.dragImage.style.display = 'none';\n        }\n    };\n\n    /**\n     * Set transparent image to be used as the data transfer image.\n     * @returns {HTMLElement | null} The transparent image element.\n     */\n    public setTransparentImage = (): HTMLElement => {\n        this.transparentImage = document.createElement('div');\n        document.body.appendChild(this.transparentImage);\n        return this.transparentImage;\n    };\n\n    /**\n     * Check if the status of the image is droppable.\n     * @returns {boolean} If the current status of the image is droppable.\n     */\n    public isStatusDroppable = (): boolean => {\n        return !!this.dragImage && this.iconType !== 'notDroppable';\n    };\n\n    /**\n     * Check if the status of the image is not droppable.\n     * @returns {boolean} If the current status of the image is not droppable.\n     */\n    public isStatusNotDroppable = (): boolean => {\n        return !!this.dragImage && this.iconType === 'notDroppable';\n    };\n\n    /**\n     * Create or update the drop allowed image element if necessary.\n     * @param dragElementDataInfo The drag element data info.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     */\n    public setDropAllowedImage = (dragElementDataInfo: ElementDataInfo, x: number, y: number): void => {\n        this._setDragImage(this._getIconInfo(dragElementDataInfo), this._getImageName(dragElementDataInfo), x, y);\n    };\n\n    /**\n     * Create or update the drop not allowed image element if necessary.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     */\n    public setDropNotAllowedImage = (x: number, y: number): void => {\n        this._setDragImage(this._getIconInfo(), 'Move not allowed', x, y);\n    };\n\n    /**\n     * Clear the drag and drop image.\n     */\n    public clear = (): void => {\n        if (this.dragImage) {\n            this.dragImage.remove();\n        }\n        if (this.transparentImage) {\n            this.transparentImage.remove();\n        }\n        this.dragImage = null;\n        this.transparentImage = null;\n        this.iconType = null;\n    };\n\n    /**\n     * Get the name to be displayed on the drag image.\n     * @param dragElementDataInfo The drag element data info.\n     * @returns {string} The name to be displayed on the drag image.\n     */\n    private _getImageName(dragElementDataInfo: ElementDataInfo): string {\n        let dragImageName = dragElementDataInfo.dataInfo.friendlyName;\n        if (dragElementDataInfo.dataInfo.isFragment) {\n            const helper = getRenderingHelper();\n            if (helper && helper.getFragmentDisplayName) {\n                dragImageName = helper.getFragmentDisplayName(dragElementDataInfo.dataInfo.id);\n            }\n        }\n        return dragImageName;\n    }\n\n    /**\n     * Get the information about the icon to be used inside the drag image.\n     * @param dragElementDataInfo The drag element data info.\n     * @returns {IconInfo} The info about the icon to be used inside the drag image.\n     */\n    private _getIconInfo(dragElementDataInfo?: ElementDataInfo): IconInfo {\n        if (!dragElementDataInfo) {\n            return ICON_TYPE.notDroppable;\n        } else if (dragElementDataInfo.dataInfo.isFragment || dragElementDataInfo.dataInfo.isFragmentModule) {\n            return ICON_TYPE.fragment;\n        } else if (dragElementDataInfo.dataInfo.moduleType === CONTAINER_TYPE) {\n            return ICON_TYPE.container;\n        } else {\n            return ICON_TYPE.module;\n        }\n    }\n\n    /**\n     * Create or update the drag image element if necessary.\n     * @param iconInfo The info about the icon to be displayed in the drag image.\n     * @param textContent The text content to be placed inside the text box.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     */\n    private _setDragImage = (iconInfo: IconInfo, textContent: string, x: number, y: number): void => {\n        if (!this.dragImage) {\n            this.dragImage = this._createDragImage(iconInfo, textContent, x, y);\n            document.body.appendChild(this.dragImage);\n        } else if (this.iconType && this.iconType !== iconInfo.iconType) {\n            const droppableClassName = iconInfo.isDroppable ? 'droppable' : 'not-droppable';\n            const textBox = this.dragImage.querySelector(`.${DRAG_TEXT_BOX_CLASS_NAME}`);\n            if (textBox) {\n                const text = textBox.querySelector(`.${DRAG_TEXT_CONTENT_CLASS_NAME}`);\n                if (text) {\n                    text.className = `${DRAG_TEXT_CONTENT_CLASS_NAME} ${droppableClassName}`;\n                    text.textContent = textContent;\n                    textBox.className = `${DRAG_TEXT_BOX_CLASS_NAME} ${droppableClassName}`;\n                }\n            }\n            const iconBox = this.dragImage.querySelector(`.${DRAG_ICON_BOX_CLASS_NAME}`);\n            if (iconBox) {\n                iconBox.className = `${DRAG_ICON_BOX_CLASS_NAME} ${droppableClassName}`;\n                const iconPath = iconBox.querySelector(`.${ICON_TYPE[this.iconType].className}`);\n                if (iconPath) {\n                    iconPath.setAttribute('class', iconInfo.className);\n                }\n                const iconSVG = iconBox.querySelector(`svg`);\n                if (iconSVG) {\n                    iconSVG.setAttribute('viewBox', iconInfo.viewBox);\n                }\n            }\n        }\n        this.iconType = iconInfo.iconType;\n    };\n\n    /**\n     * Create the drag image element.\n     * @param iconInfo The info about the icon to be displayed in the drag image.\n     * @param textContent The text content to be placed inside the text box.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     * @returns {HTMLElement} The drag image element.\n     */\n    private _createDragImage = (iconInfo: IconInfo, textContent: string, x: number, y: number): HTMLElement => {\n        const image = document.createElement('div');\n        image.className = DRAG_IMAGE_CLASS_NAME;\n        image.style.left = `${x}px`;\n        image.style.top = `${y}px`;\n\n        const iconBox = this._createDragIcon(iconInfo);\n        const textBox = this._createDragText(textContent, iconInfo.isDroppable);\n\n        image.appendChild(iconBox);\n        image.appendChild(textBox);\n\n        return image;\n    };\n\n    /**\n     * Create the icon box for the drag image element.\n     * @param iconInfo The info about the icon to be displayed in the drag image.\n     * @returns {HTMLElement} The drag icon element.\n     */\n    private _createDragIcon = (iconInfo: IconInfo): HTMLElement => {\n        const iconBox = document.createElement('div');\n        iconBox.className = `${DRAG_ICON_BOX_CLASS_NAME} ${iconInfo.isDroppable ? 'droppable' : 'not-droppable'}`;\n\n        const svg = document.createElementNS(SVG_URL, 'svg');\n        svg.setAttribute('viewBox', iconInfo.viewBox);\n\n        const path = document.createElementNS(SVG_URL, 'path');\n        path.setAttribute('class', iconInfo.className);\n        path.setAttribute('d', iconInfo.d);\n\n        svg.appendChild(path);\n        iconBox.appendChild(svg);\n\n        return iconBox;\n    };\n\n    /**\n     * Create the drag image element.\n     * @param textContent The text content to be placed inside the text box.\n     * @param isDroppable If the textbox is for droppable elements.\n     * @returns {HTMLElement} The drag text content.\n     */\n    private _createDragText = (textContent: string, isDroppable: boolean): HTMLElement => {\n        const droppableClassName = isDroppable ? 'droppable' : 'not-droppable';\n        const textBox = document.createElement('div');\n        textBox.className = `${DRAG_TEXT_BOX_CLASS_NAME} ${droppableClassName}`;\n\n        const text = document.createElement('p');\n        text.className = `${DRAG_TEXT_CONTENT_CLASS_NAME} ${droppableClassName}`;\n        text.textContent = textContent;\n\n        textBox.appendChild(text);\n\n        return textBox;\n    };\n}\nconst dragAndDropImage = new DragAndDropImage();\nexport default dragAndDropImage;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}