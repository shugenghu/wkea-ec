{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";import _inherits from\"@babel/runtime/helpers/esm/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/esm/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import{__decorate}from\"tslib\";import{Button,format,getPayloadObject,getTelemetryAttributes,getTelemetryObject,TelemetryConstant}from'@msdyn365-commerce-modules/utilities';import*as Msdyn365 from'@msdyn365-commerce/core';import{getLoyaltyRewardPointActivityTimelineAsync,getLoyaltyRewardPointsExpiringSoonAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';import classnames from'classnames';import{observer}from'mobx-react';import*as React from'react';import{AccountLoyaltyLabel,AccountLoyaltyModalLabel}from'./components';var AccountLoyalty=/*#__PURE__*/function(_React$PureComponent){_inherits(AccountLoyalty,_React$PureComponent);var _super=_createSuper(AccountLoyalty);function AccountLoyalty(props){var _this;_classCallCheck(this,AccountLoyalty);_this=_super.call(this,props);_this.handleHeadingChange=function(event){return _this.props.config.heading.text=event.target.value;};_this._populateModalData=function(focusRef,loyaltyCard,currentLoyaltyPoints,expiring){return function(){if(!loyaltyCard||!loyaltyCard.CardNumber||!currentLoyaltyPoints.RewardPointId){_this.props.context.telemetry.error('Modal data is empty, module wont render');return null;}var actionContext=_this.props.context.actionContext;_this.setState({isModalOpen:true,currentModalData:currentLoyaltyPoints,isModalExpiring:expiring,modalID:'',currentFocus:focusRef});if(expiring){getLoyaltyRewardPointsExpiringSoonAsync({callerContext:actionContext,queryResultSettings:{}},loyaltyCard.CardNumber,currentLoyaltyPoints.RewardPointId,30).then(function(points){_this.setState({pointsActivity:points});})[\"catch\"](function(error){_this.props.telemetry.exception(error);_this.props.telemetry.debug('Failed to get reward point activity');});}else{getLoyaltyRewardPointActivityTimelineAsync({callerContext:actionContext,queryResultSettings:{}},loyaltyCard.CardNumber,currentLoyaltyPoints.RewardPointId).then(function(points){_this.setState({pointsActivity:points});})[\"catch\"](function(error){_this.props.telemetry.error(error.message);_this.props.telemetry.debug('Failed to get reward point activity');});}return;};};_this._closeModal=function(){_this.setState({isModalOpen:false,currentModalData:undefined,pointsActivity:undefined});};_this._buttonAvailableRef=/*#__PURE__*/React.createRef();_this._buttonExpireRef=/*#__PURE__*/React.createRef();_this.state={isModalOpen:false,currentModalData:undefined,isModalExpiring:false,modalID:'',pointsActivity:undefined};_this.telemetryContent=getTelemetryObject(_this.props.context.request.telemetryPageName,_this.props.friendlyName,_this.props.telemetry);_this.payLoad=getPayloadObject('click',_this.telemetryContent,TelemetryConstant.BackToShopping);return _this;}_createClass(AccountLoyalty,[{key:\"render\",value:function render(){var _this$props$config=this.props.config,className=_this$props$config.className,heading=_this$props$config.heading;var loyaltyCard=this.props.data.loyaltyCard;var _this$props$resources=this.props.resources,loyaltyCardLabel=_this$props$resources.loyaltyCardLabel,totalAvailablePointsLabel=_this$props$resources.totalAvailablePointsLabel,backToShoppingText=_this$props$resources.backToShoppingText;var actionContext=this.props.context.actionContext;var isModalOpen=this.state.isModalOpen;var backToShopAttributes=getTelemetryAttributes(this.telemetryContent,this.payLoad);if(!loyaltyCard||!loyaltyCard.result||!loyaltyCard.result.CardNumber){this.props.context.telemetry.error('Loyalty card content is empty, module wont render');return null;}var loyaltyCardData=loyaltyCard.result;var rewardPoints=loyaltyCard&&loyaltyCardData.RewardPoints;var homeLink=Msdyn365.getUrlSync('home',actionContext)||'';var viewProps=_objectSpread(_objectSpread({},this.props),{},{AccountLoyalty:{moduleProps:this.props,className:classnames('ms-account-loyalty',className)},totalPoints:rewardPoints&&this._getTotalPoints(),className:classnames('msc-account-loyalty',className),rewardPoints:loyaltyCardData.RewardPoints&&loyaltyCardData.RewardPoints.length>0&&this._renderRewardPoints(loyaltyCardData),pointsModal:isModalOpen&&this._renderModal()||{isOpen:false,returnFocusRef:this.state.currentFocus},Info:{className:'ms-account-loyalty__info'},Points:{className:'ms-account-loyalty__points'},Breakdown:{className:'ms-account-loyalty__breakdown'},RewardPoints:{className:'ms-account-loyalty__reward-points'},PointsBreakdown:{className:'ms-account-loyalty__point-breakdown'},Button:{className:'ms-account-loyalty__link'},heading:heading&&/*#__PURE__*/React.createElement(Msdyn365.Text,{className:'ms-account-loyalty__heading',text:heading.text,tag:heading.tag||'h2',editProps:{onEdit:this.handleHeadingChange,requestContext:this.props.context.request}}),infoLabel:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__info-label',text:loyaltyCardLabel}),cardNumber:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__card-number',text:loyaltyCardData.CardNumber}),joinDate:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__join-date',text:this._formatJoinDate(this._parseDate(loyaltyCardData.LoyaltyEnrollmentDateLocal))}),pointsLabel:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__total-points-label',text:totalAvailablePointsLabel}),points:rewardPoints&&/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__total-points',text:this._getTotalPoints()}),homeButton:rewardPoints&&/*#__PURE__*/React.createElement(\"a\",Object.assign({className:'ms-account-loyalty__home-link msc-btn',href:homeLink},backToShopAttributes),backToShoppingText)});return this.props.renderView(viewProps);}},{key:\"_formatJoinDate\",value:function _formatJoinDate(date){return format(this.props.resources.joinDateFormatted,new Intl.DateTimeFormat(this.props.context.actionContext.requestContext.locale,{month:'long',day:'numeric',year:'numeric'}).format(new Date(date)));}},{key:\"_renderRewardPoints\",value:function _renderRewardPoints(loyaltyCard){var _this2=this;return loyaltyCard.RewardPoints.map(function(loyaltyPoints,index){var availableId=loyaltyPoints.RewardPointId&&\"\".concat(loyaltyPoints.RewardPointId,\"-available-\").concat(index)||'available-points';var expiringId=loyaltyPoints.RewardPointId&&\"\".concat(loyaltyPoints.RewardPointId,\"-expiring-\").concat(index)||'expiring-points';var _this2$props$resource=_this2.props.resources,availablePointsLabel=_this2$props$resource.availablePointsLabel,expiringPointsFormatLabel=_this2$props$resource.expiringPointsFormatLabel;_this2.payLoad.contentAction.etext=TelemetryConstant.AvailablePoints;var availablePointsAttributes=getTelemetryAttributes(_this2.telemetryContent,_this2.payLoad);_this2.payLoad.contentAction.etext=TelemetryConstant.ExpiringPoints;var expiringPointsAttributes=getTelemetryAttributes(_this2.telemetryContent,_this2.payLoad);return{label:/*#__PURE__*/React.createElement(AccountLoyaltyModalLabel,{className:'ms-account-loyalty__points-title',text:loyaltyPoints.Description}),availableModalLabel:loyaltyPoints.ActivePoints!==undefined&&/*#__PURE__*/React.createElement(AccountLoyaltyModalLabel,{className:'ms-account-loyalty__available-points-label',text:availablePointsLabel,labelFor:availableId}),availableModalTrigger:loyaltyPoints.ActivePoints!==undefined&&/*#__PURE__*/React.createElement(Button,Object.assign({className:'ms-account-loyalty__points-trigger',color:'link',onClick:_this2._populateModalData(_this2._buttonAvailableRef,loyaltyCard,loyaltyPoints,false),innerRef:_this2._buttonAvailableRef},availablePointsAttributes),loyaltyPoints.ActivePoints.toString()),expiringModalLabel:loyaltyPoints.PointsExpiringSoon!==undefined&&/*#__PURE__*/React.createElement(AccountLoyaltyModalLabel,{className:'ms-account-loyalty__expiring-points-label',text:format(expiringPointsFormatLabel,30),labelFor:expiringId}),expiringModalTrigger:loyaltyPoints.PointsExpiringSoon!==undefined&&/*#__PURE__*/React.createElement(Button,Object.assign({className:'ms-account-loyalty__points-trigger',color:'link',onClick:_this2._populateModalData(_this2._buttonExpireRef,loyaltyCard,loyaltyPoints,true),innerRef:_this2._buttonExpireRef},expiringPointsAttributes),loyaltyPoints.PointsExpiringSoon.toString())};});}},{key:\"_renderModal\",value:function _renderModal(){var _this$props$resources2=this.props.resources,totalAvailablePointsLabel=_this$props$resources2.totalAvailablePointsLabel,loyaltyActivityDateLabel=_this$props$resources2.loyaltyActivityDateLabel,loyaltyActivityBalanceLabel=_this$props$resources2.loyaltyActivityBalanceLabel;var _this$state=this.state,isModalOpen=_this$state.isModalOpen,currentModalData=_this$state.currentModalData;if(!isModalOpen||!currentModalData){this.props.context.telemetry.error('Account loyalty modal content is empty, module wont render');return null;}return{isOpen:isModalOpen,returnFocusRef:this.state.currentFocus,horizontalPosition:'center',verticalPosition:'center',modalClassName:'ms-account-loyalty__points-modal',modalHeaderClassName:'ms-account-loyalty__points-modal-header',modalHeader:currentModalData.Description||'',modalBodyClassName:'ms-account-loyalty__points-modal-body',ModalBodyTop:{className:'ms-account-loyalty__points-modal-body-top'},ModalBodyHeaders:{className:'ms-account-loyalty__points-modal-body-header'},rewardPointsActivity:this._renderPointsActivity(),pointsDescription:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__points-modal-name',text:totalAvailablePointsLabel}),totalPoints:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__points-modal-total',text:this._getPoints()}),date:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__points-modal-date',text:loyaltyActivityDateLabel}),balanceLabel:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__points-modal-balance',text:loyaltyActivityBalanceLabel}),onClose:this._closeModal};}},{key:\"_getTotalPoints\",value:function _getTotalPoints(){var rewardPoints=this.props.data.loyaltyCard.result&&this.props.data.loyaltyCard.result.RewardPoints;var total=0;rewardPoints.forEach(function(loyaltyPoints){total+=loyaltyPoints.ActivePoints||0;});return total;}},{key:\"_getPoints\",value:function _getPoints(){var _this$state2=this.state,currentModalData=_this$state2.currentModalData,isModalExpiring=_this$state2.isModalExpiring;return\"\".concat((isModalExpiring?currentModalData.PointsExpiringSoon:currentModalData.ActivePoints)||0);}},{key:\"_renderPointsActivity\",value:function _renderPointsActivity(){var _this3=this;var pointsActivity=this.state.pointsActivity;if(!pointsActivity){this.props.context.telemetry.error('Points activity content is empty, module wont render');return undefined;}return pointsActivity.map(function(activity){return{Activity:{className:'ms-account-loyalty__points-modal-activity'},activityType:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__points-modal-type',text:_this3._getTimelineType(activity)}),activityDate:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__points-modal-date',text:_this3.props.context.cultureFormatter.formatDate(_this3._parseDate(activity.ActivityDate))}),activityPoints:/*#__PURE__*/React.createElement(AccountLoyaltyLabel,{className:'ms-account-loyalty__points-modal-points',text:activity.LoyaltyPoints&&activity.LoyaltyPoints||''})};});}},{key:\"_parseDate\",value:function _parseDate(date){if(typeof date==='string'){var dateString=date.toString();dateString=dateString.replace(/-/g,'/');dateString=dateString.substring(0,10);return new Date(dateString);}else{return new Date(date.getUTCFullYear(),date.getUTCMonth(),date.getUTCDate());}}},{key:\"_getTimelineType\",value:function _getTimelineType(pointActivity){if(pointActivity.LoyaltyRewardPointTimelineEntryType){return pointActivity.LoyaltyRewardPointTimelineEntryType;}var _this$props$resources3=this.props.resources,earnedPointsLabel=_this$props$resources3.earnedPointsLabel,redeemedPointsLabel=_this$props$resources3.redeemedPointsLabel,adjustedPointsLabel=_this$props$resources3.adjustedPointsLabel;switch(pointActivity.ExtensibleLoyaltyRewardPointActivityEntryTypeValue){case 1:return earnedPointsLabel;case 3:return redeemedPointsLabel;case 5:return adjustedPointsLabel;default:return'';}}}]);return AccountLoyalty;}(React.PureComponent);AccountLoyalty=__decorate([observer],AccountLoyalty);export default AccountLoyalty;","map":{"version":3,"sources":["modules/account-loyalty/account-loyalty.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Button, format, getPayloadObject, getTelemetryAttributes, getTelemetryObject, IModuleProps, INodeProps, IPayLoad, ITelemetryContent, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport { LoyaltyCard, LoyaltyRewardPoint, LoyaltyRewardPointActivity } from '@msdyn365-commerce/retail-proxy';\nimport { getLoyaltyRewardPointActivityTimelineAsync, getLoyaltyRewardPointsExpiringSoonAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport classnames from 'classnames';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\nimport { IAccountLoyaltyData } from './account-loyalty.data';\nimport { IAccountLoyaltyProps } from './account-loyalty.props.autogenerated';\nimport { AccountLoyaltyLabel, AccountLoyaltyModalLabel } from './components';\n\nexport interface IAccountLoyaltyViewProps extends IAccountLoyaltyProps<{}> {\n    AccountLoyalty: IModuleProps;\n    className: string;\n    totalPoints: number;\n    heading?: React.ReactNode;\n    Info: INodeProps;\n    infoLabel: React.ReactNode;\n    cardNumber: React.ReactNode;\n    joinDate: React.ReactNode;\n    Points: INodeProps;\n    pointsLabel: React.ReactNode;\n    points: React.ReactNode;\n    Breakdown: INodeProps;\n    RewardPoints: INodeProps;\n    PointsBreakdown: INodeProps;\n    rewardPoints?: IAccountLoyaltyRewardPointProps[];\n    Button: INodeProps;\n    homeButton: React.ReactNode;\n    pointsModal: IAccountLoyaltyModalProps;\n}\n\nexport interface IAccountLoyaltyState {\n    isModalOpen: boolean;\n    currentModalData?: LoyaltyRewardPoint;\n    isModalExpiring: boolean;\n    modalID: string;\n    currentFocus?: React.RefObject<HTMLElement>;\n    pointsActivity: LoyaltyRewardPointActivity[] | undefined;\n}\n\nexport interface IAccountLoyaltyRewardPointProps {\n    label: React.ReactNode;\n    availableModalLabel: React.ReactNode;\n    availableModalTrigger: React.ReactNode;\n    expiringModalLabel: React.ReactNode;\n    expiringModalTrigger: React.ReactNode;\n}\n\nexport type horizontalModalPosition = 'left' | 'center' | 'right';\nexport type verticalModalPosition = 'top' | 'center' | 'bottom';\n\nexport interface IAccountLoyaltyModalProps {\n    isOpen: boolean;\n    horizontalPosition?: horizontalModalPosition;\n    verticalPosition?: verticalModalPosition;\n    modalClassName?: string;\n    modalHeaderClassName?: string;\n    modalHeader?: string;\n    modalBodyClassName?: string;\n    ModalBodyTop: INodeProps;\n    pointsDescription?: React.ReactNode;\n    totalPoints?: React.ReactNode;\n    ModalBodyHeaders: INodeProps;\n    date?: React.ReactNode;\n    balanceLabel?: React.ReactNode;\n    rewardPointsActivity?: IAccountLoyaltyActivityProps[];\n    returnFocusRef?: React.RefObject<HTMLElement>;\n    onClose(): void;\n}\n\nexport interface IAccountLoyaltyActivityProps {\n    Activity: INodeProps;\n    activityType: React.ReactNode;\n    activityDate: React.ReactNode;\n    activityPoints: React.ReactNode;\n}\n\nexport interface IProps extends IAccountLoyaltyProps<IAccountLoyaltyData> { }\n\n/**\n *\n * AccountLoyalty component\n * @extends {React.Component<IAccountLoyaltyProps<IAccountLoyaltyData>>}\n */\n@observer\nclass AccountLoyalty extends React.PureComponent<IProps, IAccountLoyaltyState> {\n    private _buttonAvailableRef: React.RefObject<HTMLButtonElement>;\n    private _buttonExpireRef: React.RefObject<HTMLButtonElement>;\n    private telemetryContent?: ITelemetryContent;\n    private payLoad: IPayLoad;\n\n    constructor(props: IAccountLoyaltyProps<IAccountLoyaltyData>) {\n        super(props);\n        this._buttonAvailableRef = React.createRef();\n        this._buttonExpireRef = React.createRef();\n        this.state = {\n            isModalOpen: false,\n            currentModalData: undefined,\n            isModalExpiring: false,\n            modalID: '',\n            pointsActivity: undefined\n        };\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n        this.payLoad = getPayloadObject('click', this.telemetryContent, TelemetryConstant.BackToShopping);\n    }\n\n    public render(): JSX.Element | null {\n        const { className, heading } = this.props.config;\n        const { loyaltyCard } = this.props.data;\n        const { loyaltyCardLabel, totalAvailablePointsLabel, backToShoppingText } = this.props.resources;\n        const { actionContext } = this.props.context;\n        const { isModalOpen } = this.state;\n        const backToShopAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);\n\n        if (!loyaltyCard || !loyaltyCard.result ||  !loyaltyCard.result.CardNumber) {\n            this.props.context.telemetry.error('Loyalty card content is empty, module wont render');\n            return null;\n        }\n\n        const loyaltyCardData = loyaltyCard.result;\n        const rewardPoints = loyaltyCard && loyaltyCardData.RewardPoints;\n        const homeLink = Msdyn365.getUrlSync('home', actionContext) || '';\n\n        const viewProps = {\n            ...this.props,\n            AccountLoyalty: {\n                moduleProps: this.props,\n                className: classnames('ms-account-loyalty', className),\n            },\n            totalPoints: rewardPoints && this._getTotalPoints(),\n            className: classnames('msc-account-loyalty', className),\n            rewardPoints: loyaltyCardData.RewardPoints && loyaltyCardData.RewardPoints.length > 0 && this._renderRewardPoints(loyaltyCardData),\n            pointsModal: isModalOpen && this._renderModal() || { isOpen: false, returnFocusRef: this.state.currentFocus },\n            Info: { className: 'ms-account-loyalty__info' },\n            Points: { className: 'ms-account-loyalty__points' },\n            Breakdown: { className: 'ms-account-loyalty__breakdown' },\n            RewardPoints: { className: 'ms-account-loyalty__reward-points' },\n            PointsBreakdown: { className: 'ms-account-loyalty__point-breakdown' },\n            Button: { className: 'ms-account-loyalty__link' },\n            heading: heading &&\n                (\n                    <Msdyn365.Text\n                        className='ms-account-loyalty__heading'\n                        text={heading.text}\n                        tag={heading.tag || 'h2'}\n                        editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}\n                    />\n                ),\n\n            // account info\n            infoLabel:\n               (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__info-label'\n                        text={loyaltyCardLabel}\n                    />\n               ),\n            cardNumber:\n                (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__card-number'\n                        text={loyaltyCardData.CardNumber}\n                    />\n                ),\n            joinDate:\n                (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__join-date'\n                        text={this._formatJoinDate(this._parseDate(loyaltyCardData.LoyaltyEnrollmentDateLocal!))}\n                    />\n                ),\n\n            // points\n            pointsLabel:\n                (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__total-points-label'\n                        text={totalAvailablePointsLabel}\n                    />\n                ),\n            points: rewardPoints &&\n               (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__total-points'\n                        text={this._getTotalPoints()}\n                    />\n               ),\n\n            homeButton: rewardPoints &&\n                (\n                    <a\n                        className='ms-account-loyalty__home-link msc-btn'\n                        href={homeLink}\n                        {...backToShopAttributes}\n                    >\n                        { backToShoppingText }\n                    </a>\n                )\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text= event.target.value;\n\n    private _formatJoinDate(date: Date): string {\n        return format(this.props.resources.joinDateFormatted,\n                      new Intl.DateTimeFormat(this.props.context.actionContext.requestContext.locale, { month: 'long', day: 'numeric', year: 'numeric' }).format(new Date(date)));\n    }\n\n    private _renderRewardPoints(loyaltyCard: LoyaltyCard): IAccountLoyaltyRewardPointProps[] {\n        return loyaltyCard.RewardPoints!.map((loyaltyPoints, index) => {\n            const availableId =  loyaltyPoints.RewardPointId && `${ loyaltyPoints.RewardPointId }-available-${ index }` || 'available-points';\n            const expiringId = loyaltyPoints.RewardPointId && `${ loyaltyPoints.RewardPointId }-expiring-${ index }` || 'expiring-points';\n            const { availablePointsLabel, expiringPointsFormatLabel } = this.props.resources;\n            this.payLoad.contentAction.etext = TelemetryConstant.AvailablePoints;\n            const availablePointsAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);\n            this.payLoad.contentAction.etext = TelemetryConstant.ExpiringPoints;\n            const expiringPointsAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);\n\n            return ({\n                label:\n                    (\n                        <AccountLoyaltyModalLabel\n                            className='ms-account-loyalty__points-title'\n                            text={loyaltyPoints.Description}\n                        />\n                    ),\n                availableModalLabel: loyaltyPoints.ActivePoints !== undefined &&\n                    (\n                        <AccountLoyaltyModalLabel\n                            className='ms-account-loyalty__available-points-label'\n                            text={availablePointsLabel}\n                            labelFor={availableId}\n                        />\n                    ),\n                availableModalTrigger: loyaltyPoints.ActivePoints !== undefined &&\n                    (\n                        <Button\n                            className='ms-account-loyalty__points-trigger'\n                            color='link'\n                            onClick={this._populateModalData(this._buttonAvailableRef, loyaltyCard, loyaltyPoints, false)}\n                            innerRef={this._buttonAvailableRef}\n                            {...availablePointsAttributes}\n                        >\n                            {loyaltyPoints.ActivePoints.toString()}\n                        </Button>\n                    ),\n                expiringModalLabel: loyaltyPoints.PointsExpiringSoon !== undefined &&\n                    (\n                        <AccountLoyaltyModalLabel\n                            className='ms-account-loyalty__expiring-points-label'\n                            text={format(expiringPointsFormatLabel, 30)}\n                            labelFor={expiringId}\n                        />\n                    ),\n                expiringModalTrigger: loyaltyPoints.PointsExpiringSoon !== undefined &&\n                    (\n                        <Button\n                            className='ms-account-loyalty__points-trigger'\n                            color='link'\n                            onClick={this._populateModalData(this._buttonExpireRef, loyaltyCard, loyaltyPoints, true)}\n                            innerRef={this._buttonExpireRef}\n                            {...expiringPointsAttributes}\n                        >\n                            {loyaltyPoints.PointsExpiringSoon.toString()}\n                        </Button>\n                    )\n            });\n        });\n    }\n\n    private _renderModal(): IAccountLoyaltyModalProps | null {\n        const { totalAvailablePointsLabel, loyaltyActivityDateLabel, loyaltyActivityBalanceLabel } = this.props.resources;\n        const { isModalOpen, currentModalData } = this.state;\n\n        if (!isModalOpen || !currentModalData) {\n            // return empty modal\n            this.props.context.telemetry.error('Account loyalty modal content is empty, module wont render');\n            return null;\n        }\n\n        return {\n            isOpen: isModalOpen,\n            returnFocusRef: this.state.currentFocus,\n            horizontalPosition: 'center',\n            verticalPosition: 'center',\n            modalClassName: 'ms-account-loyalty__points-modal',\n            modalHeaderClassName: 'ms-account-loyalty__points-modal-header',\n            modalHeader: currentModalData.Description || '',\n            modalBodyClassName: 'ms-account-loyalty__points-modal-body',\n            ModalBodyTop: { className: 'ms-account-loyalty__points-modal-body-top' },\n            ModalBodyHeaders: { className: 'ms-account-loyalty__points-modal-body-header' },\n            rewardPointsActivity: this._renderPointsActivity(),\n            pointsDescription:\n                (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__points-modal-name'\n                        text={totalAvailablePointsLabel}\n                    />\n                ),\n            totalPoints:\n                (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__points-modal-total'\n                        text={this._getPoints()}\n                    />\n                ),\n            date:\n                (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__points-modal-date'\n                        text={loyaltyActivityDateLabel}\n                    />\n                ),\n            balanceLabel:\n                (\n                    <AccountLoyaltyLabel\n                        className='ms-account-loyalty__points-modal-balance'\n                        text={loyaltyActivityBalanceLabel}\n                    />\n                ),\n            onClose: this._closeModal\n        };\n    }\n\n    private _getTotalPoints(): number {\n        const rewardPoints = this.props.data.loyaltyCard.result && this.props.data.loyaltyCard.result.RewardPoints;\n\n        let total = 0;\n        rewardPoints!.forEach(loyaltyPoints => {\n            total += loyaltyPoints.ActivePoints || 0;\n        });\n\n        return total;\n    }\n\n    private _getPoints(): string {\n        const { currentModalData, isModalExpiring } = this.state;\n\n        return `${(isModalExpiring ? currentModalData!.PointsExpiringSoon : currentModalData!.ActivePoints) || 0}`;\n    }\n\n    private _renderPointsActivity(): IAccountLoyaltyActivityProps[] | undefined {\n        const { pointsActivity } = this.state;\n\n        if (!pointsActivity) {\n            this.props.context.telemetry.error('Points activity content is empty, module wont render');\n            return undefined;\n        }\n\n        return pointsActivity.map((activity) => {\n            return ({\n                Activity: { className: 'ms-account-loyalty__points-modal-activity' },\n                activityType:\n                    (\n                        <AccountLoyaltyLabel\n                            className='ms-account-loyalty__points-modal-type'\n                            text={this._getTimelineType(activity)}\n                        />\n                    ),\n                activityDate:\n                    (\n                        <AccountLoyaltyLabel\n                            className='ms-account-loyalty__points-modal-date'\n                            text={this.props.context.cultureFormatter.formatDate(this._parseDate(activity.ActivityDate!))}\n                        />\n                    ),\n                activityPoints:\n                    (\n                        <AccountLoyaltyLabel\n                            className='ms-account-loyalty__points-modal-points'\n                            text={activity.LoyaltyPoints && activity.LoyaltyPoints || ''}\n                        />\n                    )\n            });\n        });\n    }\n\n    private _parseDate(date: Date | string): Date {\n        /* Dates for loyalty are coming as formatted strings yyyy-mm-ddT:00:00.000z\n           Javascript was interpreting this as an iso format, thus causing the wrong date to be rendered */\n        if (typeof date === 'string') {\n            let dateString = date.toString();\n            dateString = dateString.replace(/-/g, '/');\n            dateString = dateString.substring(0, 10);\n            return new Date(dateString);\n        } else {\n            return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n        }\n    }\n\n    private _getTimelineType(pointActivity: LoyaltyRewardPointActivity): string {\n        if (pointActivity.LoyaltyRewardPointTimelineEntryType) {\n            return pointActivity.LoyaltyRewardPointTimelineEntryType;\n        }\n\n        const { earnedPointsLabel, redeemedPointsLabel, adjustedPointsLabel } = this.props.resources;\n        switch (pointActivity.ExtensibleLoyaltyRewardPointActivityEntryTypeValue) {\n            case 1:\n                return earnedPointsLabel;\n            case 3:\n                return redeemedPointsLabel;\n            case 5:\n                return adjustedPointsLabel;\n            default:\n                return '';\n        }\n    }\n\n    private _populateModalData = (focusRef: React.RefObject<HTMLElement>, loyaltyCard: LoyaltyCard, currentLoyaltyPoints: LoyaltyRewardPoint, expiring: boolean) => () =>  {\n        if (!loyaltyCard || !loyaltyCard.CardNumber || !currentLoyaltyPoints.RewardPointId) {\n            this.props.context.telemetry.error('Modal data is empty, module wont render');\n            return null;\n        }\n\n        const { actionContext } = this.props.context;\n        // open modal\n        this.setState({\n            isModalOpen: true,\n            currentModalData: currentLoyaltyPoints,\n            isModalExpiring: expiring,\n            modalID: '',\n            currentFocus: focusRef,\n        });\n\n        if (expiring) {\n            getLoyaltyRewardPointsExpiringSoonAsync({ callerContext: actionContext, queryResultSettings: {} }, loyaltyCard.CardNumber, currentLoyaltyPoints.RewardPointId, 30)\n                .then((points: LoyaltyRewardPointActivity[]) => {\n                    this.setState({pointsActivity: points});\n                })\n                .catch((error: Error) => {\n                    this.props.telemetry.exception(error);\n                    this.props.telemetry.debug('Failed to get reward point activity');\n                });\n        } else {\n            getLoyaltyRewardPointActivityTimelineAsync({ callerContext: actionContext, queryResultSettings: {} }, loyaltyCard.CardNumber, currentLoyaltyPoints.RewardPointId)\n                .then((points: LoyaltyRewardPointActivity[]) => {\n                    this.setState({pointsActivity: points});\n                })\n                .catch((error: Error) => {\n                    this.props.telemetry.error(error.message);\n                    this.props.telemetry.debug('Failed to get reward point activity');\n                });\n        }\n\n        return;\n    }\n\n    private _closeModal = () => {\n        this.setState({\n            isModalOpen: false,\n            currentModalData: undefined,\n            pointsActivity: undefined\n        });\n    }\n}\n\nexport default AccountLoyalty;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}