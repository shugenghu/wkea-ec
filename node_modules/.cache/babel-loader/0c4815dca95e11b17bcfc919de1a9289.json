{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getActivePricesAsync,getProductRatingsAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import getSimpleProducts,{ProductInput}from'./get-simple-products';import{buildCacheKey,generateKey,getProductDetailsCriteriaFromActionInput}from'./utilities/utils';import*as semver from'semver';/**\r\n * Full Product Input\r\n */export var FullProductInput=function FullProductInput(productId,apiSettings,criteria){var _this=this;_classCallCheck(this,FullProductInput);this.getCacheKey=function(){var _this$ProductDetailsC=_this.ProductDetailsCriteria,getPrice=_this$ProductDetailsC.getPrice,getRating=_this$ProductDetailsC.getRating;return buildCacheKey(generateKey([_this.productId,getPrice,getRating]),_this.apiSettings);};this.getCacheObjectType=function(){return'FullProduct';};this.dataCacheType=function(){return'application';};this.productId=typeof productId==='string'?parseInt(productId,10):productId;this.ProductDetailsCriteria=criteria;this.apiSettings=apiSettings;this.channelId=apiSettings.channelId;};/**\r\n * Class to define criteria to get full product like price, ratings etc.\r\n */export var ProductDetailsCriteria=function ProductDetailsCriteria(getPrice,getRating){_classCallCheck(this,ProductDetailsCriteria);this.getPrice=getPrice||false;this.getRating=getRating||false;};/**\r\n * Creates the input required to make the retail api call\r\n */export var createInput=function createInput(inputData){var productIds=inputData.config&&inputData.config.productIds;var productDetailsCriteria=getProductDetailsCriteriaFromActionInput(inputData);if(typeof productIds==='string'){productIds=productIds.split(',');}if(Array.isArray(productIds)&&productIds.length){return productIds.map(function(productId){return new FullProductInput(+productId,inputData.requestContext.apiSettings,productDetailsCriteria);});}return[];};/**\r\n * Calls the Retail API and returns the product based on the passed ProductInput\r\n */export function getFullProductsAction(_x,_x2){return _getFullProductsAction.apply(this,arguments);}function _getFullProductsAction(){_getFullProductsAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputs,ctx){var apiSettings,productInputs;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!Array.isArray(inputs)||!inputs.length)){_context.next=3;break;}ctx.trace('[getFullProductsAction] Invalid or empty inputs passed.');return _context.abrupt(\"return\",{});case 3:apiSettings=ctx.requestContext.apiSettings;productInputs=inputs.map(function(input){return new ProductInput(input.productId,apiSettings);});return _context.abrupt(\"return\",getSimpleProducts(productInputs,ctx).then(function(result){return result.map(function(product){return{ProductDetails:product};});}).then(function(productCollection){var validProductIds=new Set(productCollection.map(function(input){return input.ProductDetails&&input.ProductDetails.RecordId;}));var ratingsAndPricePromises=[_getActivePrices(inputs,validProductIds,productCollection,ctx),_getProductRatings(inputs,validProductIds,productCollection,ctx)];return Promise.all(ratingsAndPricePromises).then(function(){return productCollection;});})[\"catch\"](function(e){ctx.telemetry.exception(e);ctx.telemetry.debug(\"Unable to get Simple products\");return[];}));case 6:case\"end\":return _context.stop();}}},_callee);}));return _getFullProductsAction.apply(this,arguments);}function _getActivePrices(_x3,_x4,_x5,_x6){return _getActivePrices2.apply(this,arguments);}function _getActivePrices2(){_getActivePrices2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(inputs,validProductIds,productCollection,ctx){var projectDomain,validInputs;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:projectDomain={ChannelId:+ctx.requestContext.apiSettings.channelId,CatalogId:0};validInputs=inputs.map(function(input){if(input.ProductDetailsCriteria.getPrice&&validProductIds.has(input.productId)){return input.productId;}}).filter(Boolean);return _context2.abrupt(\"return\",getActivePricesAsync({callerContext:ctx,queryResultSettings:{}},projectDomain,validInputs,new Date(),null,[],true// @ts-ignore\n).then(function(result){// @ts-ignore\nresult.forEach(function(productPrice){var fullProduct=productCollection.find(function(x){return x.ProductDetails&&x.ProductDetails.RecordId===productPrice.ProductId;});if(fullProduct){// If RS Verison < 9.16.0 (aka 10.0.6), customer contextual price won't be\n// included so instead just use AdjustedPrice\nif(semver.lt(ctx.requestContext.apiSettings.retailServerProxyVersion,'9.16.0')){productPrice.CustomerContextualPrice=productPrice.AdjustedPrice;}fullProduct.ProductPrice=productPrice;}});})[\"catch\"](function(error){var telemetry=ctx.telemetry;telemetry.debug('[getActivePricesAsync] Unable to get active price.');telemetry.exception(error);}));case 3:case\"end\":return _context2.stop();}}},_callee2);}));return _getActivePrices2.apply(this,arguments);}function _getProductRatings(_x7,_x8,_x9,_x10){return _getProductRatings2.apply(this,arguments);}function _getProductRatings2(){_getProductRatings2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(inputs,validProductIds,productCollection,ctx){var validInputs;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:validInputs=inputs.map(function(input){if(input.ProductDetailsCriteria.getRating&&validProductIds.has(input.productId)){return input.productId;}}).filter(Boolean);return _context3.abrupt(\"return\",getProductRatingsAsync({callerContext:ctx,queryResultSettings:{}},validInputs).then(function(result){result.forEach(function(productRating){var fullProduct=productCollection.find(function(x){return x.ProductDetails&&x.ProductDetails.RecordId===productRating.ProductId;});if(fullProduct){fullProduct.ProductRating=productRating;}});})[\"catch\"](function(err){var telemetry=ctx.telemetry;telemetry.debug(\"[getProductRatingsAsync] Unable to get product ratings.\");telemetry.exception(err);}));case 2:case\"end\":return _context3.stop();}}},_callee3);}));return _getProductRatings2.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-full-products',action:getFullProductsAction,input:createInput,isBatched:true});","map":{"version":3,"sources":["../../src/get-full-products.ts"],"names":[],"mappings":"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","sourcesContent":["import { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProjectionDomain } from '@msdyn365-commerce/retail-proxy';\n\nimport { getActivePricesAsync, getProductRatingsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport getSimpleProducts, { ProductInput } from './get-simple-products';\nimport { buildCacheKey, generateKey, getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\nimport * as semver from 'semver';\n\n/**\n * Full Product Input\n */\nexport class FullProductInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public ProductDetailsCriteria: ProductDetailsCriteria;\n\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(productId: number | string, apiSettings: ICommerceApiSettings, criteria: ProductDetailsCriteria) {\n        this.productId = typeof productId === 'string' ? parseInt(productId, 10) : productId;\n        this.ProductDetailsCriteria = criteria;\n        this.apiSettings = apiSettings;\n        this.channelId = apiSettings.channelId;\n    }\n\n    public getCacheKey = () => {\n        const { getPrice, getRating } = this.ProductDetailsCriteria;\n        return buildCacheKey(generateKey([this.productId, getPrice, getRating]), this.apiSettings);\n    };\n    public getCacheObjectType = () => 'FullProduct';\n    public dataCacheType = (): CacheType => 'application';\n}\n\n/**\n * Class to define criteria to get full product like price, ratings etc.\n */\nexport class ProductDetailsCriteria {\n    public getPrice: boolean;\n    public getRating: boolean;\n    constructor(getPrice?: boolean, getRating?: boolean) {\n        this.getPrice = getPrice || false;\n        this.getRating = getRating || false;\n    }\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nexport const createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput[] => {\n    let productIds = inputData.config && inputData.config.productIds;\n    const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n    if (typeof productIds === 'string') {\n        productIds = productIds.split(',');\n    }\n    if (Array.isArray(productIds) && productIds.length) {\n        return productIds.map((productId: string) => {\n            return new FullProductInput(+productId, inputData.requestContext.apiSettings, productDetailsCriteria);\n        });\n    }\n        return [];\n};\n\n/**\n * Calls the Retail API and returns the product based on the passed ProductInput\n */\nexport async function getFullProductsAction(inputs: FullProductInput[], ctx: IActionContext): Promise<FullProduct[]> {\n    if (!Array.isArray(inputs) || !inputs.length) {\n        ctx.trace('[getFullProductsAction] Invalid or empty inputs passed.');\n        return <FullProduct[]>{};\n    }\n\n    const { apiSettings } = ctx.requestContext;\n    const productInputs = inputs.map(\n        (input: FullProductInput): ProductInput => {\n            return new ProductInput(input.productId, apiSettings);\n        }\n    );\n\n    return getSimpleProducts(productInputs, ctx)\n        .then(result => {\n            return result.map(product => {\n            return { ProductDetails: product };\n        });\n        })\n        .then((productCollection: FullProduct[]) => {\n    const validProductIds = new Set(productCollection.map(input => input.ProductDetails && input.ProductDetails.RecordId));\n\n            const ratingsAndPricePromises = [\n                _getActivePrices(inputs, validProductIds, productCollection, ctx),\n                _getProductRatings(inputs, validProductIds, productCollection, ctx)\n            ];\n    return Promise.all(ratingsAndPricePromises).then(() => {\n        return productCollection;\n      });\n        })\n        .catch(e => {\n            ctx.telemetry.exception(e);\n            ctx.telemetry.debug(`Unable to get Simple products`);\n            return [];\n        });\n}\n\nasync function _getActivePrices(\n    inputs: FullProductInput[],\n    validProductIds: Set<number>,\n    productCollection: FullProduct[],\n    ctx: IActionContext\n): Promise<void> {\n    const projectDomain: ProjectionDomain = { ChannelId: +ctx.requestContext.apiSettings.channelId, CatalogId: 0 };\n    const validInputs = <number[]>inputs\n        .map(input => {\n        if (input.ProductDetailsCriteria.getPrice && validProductIds.has(input.productId)) {\n            return input.productId;\n        }\n        })\n        .filter(Boolean);\n\n     return getActivePricesAsync(\n            { callerContext: ctx, queryResultSettings: {} },\n            projectDomain,\n            validInputs,\n            new Date(),\n            null,\n            [],\n            true\n            // @ts-ignore\n        ).then(result => {\n            // @ts-ignore\n            result.forEach(productPrice => {\n                const fullProduct: FullProduct | undefined = productCollection.find(x=> {\n                    return x.ProductDetails &&  x.ProductDetails.RecordId === productPrice.ProductId;\n                   });\n                if (fullProduct) {\n                    // If RS Verison < 9.16.0 (aka 10.0.6), customer contextual price won't be\n                    // included so instead just use AdjustedPrice\n                    if (semver.lt(ctx.requestContext.apiSettings.retailServerProxyVersion, '9.16.0')) {\n                        productPrice.CustomerContextualPrice = productPrice.AdjustedPrice;\n                    }\n                    fullProduct.ProductPrice = productPrice;\n                }\n            });\n        })\n        .catch((error: Error) => {\n            const telemetry = ctx.telemetry;\n            telemetry.debug('[getActivePricesAsync] Unable to get active price.');\n            telemetry.exception(error);\n        });\n }\n\nasync function _getProductRatings(\n    inputs: FullProductInput[],\n    validProductIds: Set<number>,\n    productCollection: FullProduct[],\n    ctx: IActionContext\n): Promise<void> {\n    const validInputs = <number[]>inputs\n        .map(input => {\n       if (input.ProductDetailsCriteria.getRating && validProductIds.has(input.productId)) {\n           return input.productId;\n       }\n        })\n        .filter(Boolean);\n\n    return getProductRatingsAsync({ callerContext: ctx, queryResultSettings: {} }, validInputs)\n        .then(result => {\n            result.forEach(productRating => {\n                const fullProduct: FullProduct | undefined = productCollection.find(x=> {\n                    return x.ProductDetails &&  x.ProductDetails.RecordId === productRating.ProductId;\n                });\n                if (fullProduct) {\n                    fullProduct.ProductRating = productRating;\n                }\n            });\n        })\n        .catch(err => {\n            const telemetry = ctx.telemetry;\n            telemetry.debug(`[getProductRatingsAsync] Unable to get product ratings.`);\n            telemetry.exception(err);\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-full-products',\n    action: <IAction<FullProduct[]>>getFullProductsAction,\n    input: createInput,\n    isBatched: true\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}