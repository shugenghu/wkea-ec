{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-any\nimport{EXCEPTION_INVALID_ARGUMENT,NAME_CULTURE_INFO_FORMATTER_EXCEPTION}from'@msdyn365-commerce/telemetry-internal';import memoizeFormatConstructor from'intl-format-cache';import areIntlLocalesSupported from'intl-locales-supported';const numericIdentifier='numeric';/**\r\n * CultureInfoFormatter provides functions that support the localized formatting\r\n * of currencies, numbers, dates and times.\r\n */export class CultureInfoFormatter{/**\r\n     * Constructs a new instance of this formatter using the given locale.\r\n     * Default value for locale is 'en-US'\r\n     *\r\n     * @param locale A string containing a BCP-47 locale tag e.g. 'en', 'en-us', 'fr-fr'. Default value of 'en-US'\r\n     * For more information see https://tools.ietf.org/html/bcp47\r\n     */constructor(locale,currencyCode){/**\r\n         * Returns a localized currency formatted version of a price.\r\n         *\r\n         * @param price Either a string or number representing the price that will be localized and formatted\r\n         * @param currencyCode Optional argument. The three letter currency code that will be used for formatting the currency.\r\n         * If the currency code is not provided the locale will be used to determine the best fit currency code.\r\n         */this.formatCurrency=(price,currencyCode)=>{CultureInfoFormatter._validateInput(price===undefined,'formatCurrency','price');price=price||0;if(!this.currencyFormatter){this.currencyFormatter=this.numFormatterConstructor(this.locale,{style:'currency',currency:currencyCode||this.currencyCode});}return!currencyCode?this.currencyFormatter.format(+price):this.formatNumber(+price,{style:'currency',currency:currencyCode});};/**\r\n         * Returns a localized formatted version of a number\r\n         *\r\n         * @param value The number that will be localized and formatted\r\n         * @param options An optional argument that controls the formatting.\r\n         */this.formatNumber=(value,options)=>{CultureInfoFormatter._validateInput(value===undefined,'formatNumber','value');value=value||0;if(!this.numberFormatter){this.numberFormatter=this.numFormatterConstructor(this.locale);}// If no options are given to us, we can use the basic cached formatter\nreturn options!==undefined?this.numFormatterConstructor(this.locale,options).format(value):this.numberFormatter.format(value);};/**\r\n         * Returns a localized formatted version of a date\r\n         *\r\n         * @param date Date object representing the date that will be localized and formatted\r\n         * @param options An optional argument that controls the formatting.\r\n         */this.formatDate=(date,options)=>{CultureInfoFormatter._validateInput(!date,'formatDate','date');if(!this.dateFormatter){this.dateFormatter=this.dateFormatterConstructor(this.locale);}// If no options are given to us, we can use the basic cached formatter\nreturn options!==undefined?this.dateFormatterConstructor(this.locale,options).format(date):this.dateFormatter.format(date);};/**\r\n         * Returns a localized formatted version of a time\r\n         *\r\n         * @param time Date object representing the time that will be localized and formatted\r\n         * @param options An optional argument that controls the formatting\r\n         */this.formatTime=(time,options)=>{CultureInfoFormatter._validateInput(!time,'formatTime','time');if(!this.timeFormatter){this.timeFormatter=this.dateFormatterConstructor(this.locale,{hour:numericIdentifier,minute:numericIdentifier});}// If no options are given to us, we can use the basic cached formatter\nif(options!==undefined){options.hour='numeric';options.minute='numeric';return this.dateFormatterConstructor(this.locale,options).format(time);}return this.timeFormatter.format(time);};CultureInfoFormatter._validateInput(!locale,'CultureInfoFormatter','locale');CultureInfoFormatter._validateInput(!currencyCode,'CultureInfoFormatter','currencyCode');this.locale=locale;this.currencyCode=currencyCode;// If we are running server side or the browser does not support the locale, use the polyfill for Intl\nif(process.env.CURRENT_ENVIRONMENT==='node'||!areIntlLocalesSupported(this.locale)){// Intl doesn't have the data we need, so load the\n// polyfill and replace the constructors with need with the polyfill's.\n// tslint:disable-next-line:no-require-imports\nconst IntlPolyfill=require('intl');Intl.NumberFormat=IntlPolyfill.NumberFormat;Intl.DateTimeFormat=IntlPolyfill.DateTimeFormat;}// Create cached number, date and time formatter for basic formatting\nthis.numFormatterConstructor=memoizeFormatConstructor(Intl.NumberFormat);this.dateFormatterConstructor=memoizeFormatConstructor(Intl.DateTimeFormat);}static _validateInput(validation,methodName,argName){if(validation){throw new Error(\"\".concat(NAME_CULTURE_INFO_FORMATTER_EXCEPTION,\": \").concat(EXCEPTION_INVALID_ARGUMENT(methodName,argName)));}}}","map":{"version":3,"sources":["../../../src/utilities/culture-info-formatter.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-any\nimport { EXCEPTION_INVALID_ARGUMENT, NAME_CULTURE_INFO_FORMATTER_EXCEPTION } from '@msdyn365-commerce/telemetry-internal';\nimport memoizeFormatConstructor from 'intl-format-cache';\nimport areIntlLocalesSupported from 'intl-locales-supported';\nimport { ICultureInfoFormatter, IDateFormatOptions, INumberFormatOptions, ITimeFormatOptions } from '../interfaces';\n\nconst numericIdentifier = 'numeric';\n\n/**\n * CultureInfoFormatter provides functions that support the localized formatting\n * of currencies, numbers, dates and times.\n */\nexport class CultureInfoFormatter implements ICultureInfoFormatter {\n    private locale: string;\n    private numberFormatter: Intl.NumberFormat | undefined;\n    private dateFormatter: Intl.DateTimeFormat | undefined;\n    private timeFormatter: Intl.DateTimeFormat | undefined;\n    private currencyFormatter: Intl.NumberFormat | undefined;\n    private numFormatterConstructor: any;\n    private dateFormatterConstructor: any;\n    private currencyCode: string;\n\n    private static _validateInput(validation: boolean, methodName: string, argName: string): void {\n        if (validation) {\n            throw new Error(`${NAME_CULTURE_INFO_FORMATTER_EXCEPTION}: ${EXCEPTION_INVALID_ARGUMENT(methodName, argName)}`);\n        }\n    }\n\n    /**\n     * Constructs a new instance of this formatter using the given locale.\n     * Default value for locale is 'en-US'\n     *\n     * @param locale A string containing a BCP-47 locale tag e.g. 'en', 'en-us', 'fr-fr'. Default value of 'en-US'\n     * For more information see https://tools.ietf.org/html/bcp47\n     */\n    constructor(locale: string, currencyCode: string) {\n        CultureInfoFormatter._validateInput(!locale, 'CultureInfoFormatter', 'locale');\n        CultureInfoFormatter._validateInput(!currencyCode, 'CultureInfoFormatter', 'currencyCode');\n\n        this.locale = locale;\n        this.currencyCode = currencyCode;\n        // If we are running server side or the browser does not support the locale, use the polyfill for Intl\n        if (process.env.CURRENT_ENVIRONMENT === 'node' || !areIntlLocalesSupported(this.locale)) {\n            // Intl doesn't have the data we need, so load the\n            // polyfill and replace the constructors with need with the polyfill's.\n            // tslint:disable-next-line:no-require-imports\n            const IntlPolyfill = require('intl');\n            Intl.NumberFormat = IntlPolyfill.NumberFormat;\n            Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat;\n        }\n\n        // Create cached number, date and time formatter for basic formatting\n        this.numFormatterConstructor = memoizeFormatConstructor(Intl.NumberFormat);\n        this.dateFormatterConstructor = memoizeFormatConstructor(Intl.DateTimeFormat);\n    }\n\n    /**\n     * Returns a localized currency formatted version of a price.\n     *\n     * @param price Either a string or number representing the price that will be localized and formatted\n     * @param currencyCode Optional argument. The three letter currency code that will be used for formatting the currency.\n     * If the currency code is not provided the locale will be used to determine the best fit currency code.\n     */\n    public formatCurrency: (price: string | number, currencyCode?: string) => string = (\n        price: string | number,\n        currencyCode?: string\n    ): string => {\n        CultureInfoFormatter._validateInput(price === undefined, 'formatCurrency', 'price');\n        price = price || 0;\n\n        if (!this.currencyFormatter) {\n            this.currencyFormatter = <Intl.NumberFormat>this.numFormatterConstructor(this.locale, {\n                style: 'currency',\n                currency: currencyCode || this.currencyCode\n            });\n        }\n\n        return !currencyCode\n            ? this.currencyFormatter.format(+price)\n            : this.formatNumber(+price, { style: 'currency', currency: currencyCode });\n    };\n\n    /**\n     * Returns a localized formatted version of a number\n     *\n     * @param value The number that will be localized and formatted\n     * @param options An optional argument that controls the formatting.\n     */\n    public formatNumber = (value: number, options?: INumberFormatOptions): string => {\n        CultureInfoFormatter._validateInput(value === undefined, 'formatNumber', 'value');\n        value = value || 0;\n\n        if (!this.numberFormatter) {\n            this.numberFormatter = <Intl.NumberFormat>this.numFormatterConstructor(this.locale);\n        }\n        // If no options are given to us, we can use the basic cached formatter\n        return options !== undefined\n            ? this.numFormatterConstructor(this.locale, options).format(value)\n            : this.numberFormatter.format(value);\n    };\n\n    /**\n     * Returns a localized formatted version of a date\n     *\n     * @param date Date object representing the date that will be localized and formatted\n     * @param options An optional argument that controls the formatting.\n     */\n    public formatDate = (date: Date, options?: IDateFormatOptions): string => {\n        CultureInfoFormatter._validateInput(!date, 'formatDate', 'date');\n\n        if (!this.dateFormatter) {\n            this.dateFormatter = <Intl.DateTimeFormat>this.dateFormatterConstructor(this.locale);\n        }\n        // If no options are given to us, we can use the basic cached formatter\n        return options !== undefined ? this.dateFormatterConstructor(this.locale, options).format(date) : this.dateFormatter.format(date);\n    };\n\n    /**\n     * Returns a localized formatted version of a time\n     *\n     * @param time Date object representing the time that will be localized and formatted\n     * @param options An optional argument that controls the formatting\n     */\n    public formatTime = (time: Date, options?: ITimeFormatOptions): string => {\n        CultureInfoFormatter._validateInput(!time, 'formatTime', 'time');\n\n        if (!this.timeFormatter) {\n            this.timeFormatter = <Intl.DateTimeFormat>(\n                this.dateFormatterConstructor(this.locale, { hour: numericIdentifier, minute: numericIdentifier })\n            );\n        }\n        // If no options are given to us, we can use the basic cached formatter\n        if (options !== undefined) {\n            options.hour = 'numeric';\n            options.minute = 'numeric';\n            return this.dateFormatterConstructor(this.locale, options).format(time);\n        }\n        return this.timeFormatter.format(time);\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}