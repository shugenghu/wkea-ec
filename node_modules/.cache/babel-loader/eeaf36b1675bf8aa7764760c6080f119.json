{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{buildCacheKey}from'./utilities/utils';import getCustomer,{GetCustomerInput}from'./get-customer';/**\r\n *  Input class for the getAddress data action\r\n */export class AddressInput{constructor(apiSettings,userAccountNumber){this.getCacheKey=()=>buildCacheKey(\"GetAddress-\".concat(this.userAccountNumber),this.apiSettings);this.getCacheObjectType=()=>'GetAddress';this.dataCacheType=()=>'request';this.userAccountNumber=userAccountNumber;this.apiSettings=apiSettings;}}/**\r\n * createInput method for the getAddress method\r\n * @param inputData The input data passed to the createInput method\r\n */export const createGetAddressInput=inputData=>{const{requestContext}=inputData;if(!requestContext.user.isAuthenticated){throw new Error('Unable to create address input.  User is not authenticated.');}return new AddressInput(inputData.requestContext.apiSettings);};/**\r\n * The action method for the getAddress data action\r\n * @param input The action input\r\n * @param ctx The action context\r\n */export async function getAddressAction(input,ctx){const customerInput=new GetCustomerInput(ctx.requestContext.apiSettings,input.userAccountNumber);const customer=await getCustomer(customerInput,ctx);if(!customer){throw new Error('Not able to get customer');}return customer.Addresses||[];}/**\r\n * The getAddress data action\r\n * Gets a customers information via the read RetailServer API\r\n * Returns address information associated with the retrieved customer\r\n */export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-address',action:getAddressAction,input:createGetAddressInput});","map":{"version":3,"sources":["../../src/get-address.ts"],"names":[],"mappings":"sCACA,OAAS,0BAAT,KAAiE,yBAAjE,CAGA,OAAS,aAAT,KAA8B,mBAA9B,CACA,MAAO,CAAA,WAAP,EAAsB,gBAAtB,KAA8C,gBAA9C,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,YAAY,CAIrB,WAAA,CAAY,WAAZ,CAA+C,iBAA/C,CAAyE,CAKlE,KAAA,WAAA,CAAc,IAAM,aAAa,sBAAe,KAAK,iBAApB,EAAyC,KAAK,WAA9C,CAAjC,CACA,KAAA,kBAAA,CAAqB,IAAM,YAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CANH,KAAK,iBAAL,CAAyB,iBAAzB,CACA,KAAK,WAAL,CAAmB,WAAnB,CACH,CAPoB,CAczB;;;AAGG,GACH,MAAO,MAAM,CAAA,qBAAqB,CAAI,SAAD,EAAkD,CACnF,KAAM,CAAE,cAAF,EAAqB,SAA3B,CACA,GAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,eAAzB,CAA0C,CACtC,KAAM,IAAI,CAAA,KAAJ,CAAU,6DAAV,CAAN,CACH,CAED,MAAO,IAAI,CAAA,YAAJ,CAAiB,SAAS,CAAC,cAAV,CAAyB,WAA1C,CAAP,CACH,CAPM,CASP;;;;AAIG,GACH,MAAO,eAAe,CAAA,gBAAf,CAAgC,KAAhC,CAAqD,GAArD,CAAwE,CAC3E,KAAM,CAAA,aAAa,CAAG,GAAI,CAAA,gBAAJ,CAAqB,GAAG,CAAC,cAAJ,CAAmB,WAAxC,CAAqD,KAAK,CAAC,iBAA3D,CAAtB,CACA,KAAM,CAAA,QAAQ,CAAG,KAAM,CAAA,WAAW,CAAC,aAAD,CAAgB,GAAhB,CAAlC,CAEA,GAAI,CAAC,QAAL,CAAe,CACX,KAAM,IAAI,CAAA,KAAJ,CAAU,0BAAV,CAAN,CACH,CAED,MAAO,CAAA,QAAQ,CAAC,SAAT,EAAsB,EAA7B,CACH,CAED;;;;AAIG,GACH,cAAe,CAAA,0BAA0B,CAAY,CACjD,EAAE,CAAE,uDAD6C,CAEjD,MAAM,CAAsB,gBAFqB,CAGjD,KAAK,CAAgD,qBAHJ,CAAZ,CAAzC","sourcesContent":["import { CacheType, IAction, IActionContext, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { Address } from '@msdyn365-commerce/retail-proxy';\n\nimport { buildCacheKey } from './utilities/utils';\nimport getCustomer, { GetCustomerInput } from './get-customer';\n\n/**\n *  Input class for the getAddress data action\n */\nexport class AddressInput implements IActionInput {\n    public userAccountNumber?: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings, userAccountNumber?: string) {\n        this.userAccountNumber = userAccountNumber;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`GetAddress-${this.userAccountNumber}`, this.apiSettings);\n    public getCacheObjectType = () => 'GetAddress';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * createInput method for the getAddress method\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetAddressInput = (inputData: ICreateActionContext): IActionInput => {\n    const { requestContext } = inputData;\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('Unable to create address input.  User is not authenticated.');\n    }\n\n    return new AddressInput(inputData.requestContext.apiSettings);\n};\n\n/**\n * The action method for the getAddress data action\n * @param input The action input\n * @param ctx The action context\n */\nexport async function getAddressAction(input: AddressInput, ctx: IActionContext): Promise<Address[]> {\n    const customerInput = new GetCustomerInput(ctx.requestContext.apiSettings, input.userAccountNumber);\n    const customer = await getCustomer(customerInput, ctx);\n\n    if (!customer) {\n        throw new Error('Not able to get customer');\n    }\n\n    return customer.Addresses || [];\n}\n\n/**\n * The getAddress data action\n * Gets a customers information via the read RetailServer API\n * Returns address information associated with the retrieved customer\n */\nexport default createObservableDataAction<Address[]>({\n    id: '@msdyn365-commerce-modules/retail-actions/get-address',\n    action: <IAction<Address[]>>getAddressAction,\n    input: <(args: ICreateActionContext) => IActionInput>createGetAddressInput\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}