{"ast":null,"code":"import\"core-js/modules/web.dom-collections.for-each.js\";import _uniq from\"lodash/uniq\";/**\n * Gets list of used module types.\n */export const getRequestedModules=windowInitialData=>{let result={modules:[]};if(!windowInitialData._moduleList||windowInitialData._moduleList.length===0){return result;}windowInitialData._moduleList.forEach(moduleType=>{result.modules.push(moduleType.typeName);});// Include requested theme modules\nif(windowInitialData._themeModulesList&&windowInitialData._themeModulesList.length>0){result.modules=result.modules.concat(result.modules,windowInitialData._themeModulesList);}return result;};/**\n * Gets keys for used assets (modules) that were utilized on the server-side render pass. Object is\n * initialized from the page viewmodel used to initialize the clientRenderer\n */export const getUniqueRequestedAssets=windowInitialData=>{let result={modules:[]};if(!windowInitialData){return result;}try{result=getRequestedModules(windowInitialData);}catch(e){console.error(e);}return{modules:_uniq(result.modules)};};/**\n * Checks if we have that key in the requested asset keys. If so, we'll allow the value and register the\n * databinder, module, or reducer (reducers reference 'key', databinders & modules use 'name').  If we don't receive\n * a set of keys at all, then register everything\n * @param {string[]} requestedAssetKeys The valid & incldued modules\n * @returns {Function} Returns function with signature of \"(string) => boolean\"\n */export const filterToUsedAssets=requestedAssetKeys=>{// curry!\nreturn partnerModule=>!requestedAssetKeys?true:requestedAssetKeys.indexOf(partnerModule.name||partnerModule.key)!==-1;};","map":{"version":3,"sources":["/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/node_modules/@msdyn365-commerce/bootloader/common/index.js"],"names":["getRequestedModules","windowInitialData","result","modules","_moduleList","length","forEach","moduleType","push","typeName","_themeModulesList","concat","getUniqueRequestedAssets","e","console","error","filterToUsedAssets","requestedAssetKeys","partnerModule","indexOf","name","key"],"mappings":"uFAOA;AACA;AACA,GACA,MAAO,MAAMA,CAAAA,mBAAmB,CAAGC,iBAAiB,EAAI,CACpD,GAAIC,CAAAA,MAAM,CAAG,CACTC,OAAO,CAAE,EADA,CAAb,CAIA,GAAI,CAACF,iBAAiB,CAACG,WAAnB,EAAkCH,iBAAiB,CAACG,WAAlB,CAA8BC,MAA9B,GAAyC,CAA/E,CAAkF,CAC9E,MAAOH,CAAAA,MAAP,CACH,CACDD,iBAAiB,CAACG,WAAlB,CAA8BE,OAA9B,CAAsCC,UAAU,EAAI,CAChDL,MAAM,CAACC,OAAP,CAAeK,IAAf,CAAoBD,UAAU,CAACE,QAA/B,EACH,CAFD,EAIA;AACA,GAAIR,iBAAiB,CAACS,iBAAlB,EAAuCT,iBAAiB,CAACS,iBAAlB,CAAoCL,MAApC,CAA6C,CAAxF,CAA2F,CACvFH,MAAM,CAACC,OAAP,CAAiBD,MAAM,CAACC,OAAP,CAAeQ,MAAf,CAAsBT,MAAM,CAACC,OAA7B,CAAsCF,iBAAiB,CAACS,iBAAxD,CAAjB,CACH,CAED,MAAOR,CAAAA,MAAP,CACH,CAlBM,CAoBP;AACA;AACA;AACA,GACA,MAAO,MAAMU,CAAAA,wBAAwB,CAAGX,iBAAiB,EAAI,CACzD,GAAIC,CAAAA,MAAM,CAAG,CACTC,OAAO,CAAE,EADA,CAAb,CAGA,GAAI,CAACF,iBAAL,CAAwB,CACpB,MAAOC,CAAAA,MAAP,CACH,CAED,GAAI,CACAA,MAAM,CAAGF,mBAAmB,CAACC,iBAAD,CAA5B,CACH,CAAC,MAAOY,CAAP,CAAU,CACRC,OAAO,CAACC,KAAR,CAAcF,CAAd,EACH,CAED,MAAO,CACHV,OAAO,CAAE,MAAKD,MAAM,CAACC,OAAZ,CADN,CAAP,CAGH,CAjBM,CAmBP;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,MAAMa,CAAAA,kBAAkB,CAAGC,kBAAkB,EAAI,CACpD;AACA,MAAOC,CAAAA,aAAa,EAAK,CAACD,kBAAD,CAAsB,IAAtB,CAA6BA,kBAAkB,CAACE,OAAnB,CAA2BD,aAAa,CAACE,IAAd,EAAsBF,aAAa,CAACG,GAA/D,IAAwE,CAAC,CAA/H,CACH,CAHM","sourcesContent":["/*******************************************************************************\n* Copyright (c) Microsoft Corporation.\n* All rights reserved. See LICENSE in the project root for license information.\n*******************************************************************************/\n\n\nimport { uniq } from 'lodash';\n/**\n * Gets list of used module types.\n */\nexport const getRequestedModules = windowInitialData => {\n    let result = {\n        modules: []\n    };\n\n    if (!windowInitialData._moduleList || windowInitialData._moduleList.length === 0) {\n        return result;\n    }\n    windowInitialData._moduleList.forEach(moduleType => {\n        result.modules.push(moduleType.typeName);\n    });\n\n    // Include requested theme modules\n    if (windowInitialData._themeModulesList && windowInitialData._themeModulesList.length > 0) {\n        result.modules = result.modules.concat(result.modules, windowInitialData._themeModulesList);\n    }\n\n    return result;\n};\n\n/**\n * Gets keys for used assets (modules) that were utilized on the server-side render pass. Object is\n * initialized from the page viewmodel used to initialize the clientRenderer\n */\nexport const getUniqueRequestedAssets = windowInitialData => {\n    let result = {\n        modules: []\n    };\n    if (!windowInitialData) {\n        return result;\n    }\n\n    try {\n        result = getRequestedModules(windowInitialData);\n    } catch (e) {\n        console.error(e);\n    }\n\n    return {\n        modules: uniq(result.modules)\n    };\n};\n\n/**\n * Checks if we have that key in the requested asset keys. If so, we'll allow the value and register the\n * databinder, module, or reducer (reducers reference 'key', databinders & modules use 'name').  If we don't receive\n * a set of keys at all, then register everything\n * @param {string[]} requestedAssetKeys The valid & incldued modules\n * @returns {Function} Returns function with signature of \"(string) => boolean\"\n */\n\nexport const filterToUsedAssets = requestedAssetKeys => {\n    // curry!\n    return partnerModule => (!requestedAssetKeys ? true : requestedAssetKeys.indexOf(partnerModule.name || partnerModule.key) !== -1);\n};\n"]},"metadata":{},"sourceType":"module"}