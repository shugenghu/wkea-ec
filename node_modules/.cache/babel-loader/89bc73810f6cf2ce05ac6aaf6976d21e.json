{"ast":null,"code":"import\"core-js/modules/es.regexp.constructor.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import{get,set}from'mobx';import{AddressItemType}from'./address-format.data';export class AddressFormat{constructor(countryRegionsInfo,addressMetaData,addressPurposes){this.getPrefilledAddressDropdownData=(stateDefaultSelectionText,stateProvinceInfo)=>{const defaultStateText={key:'',value:stateDefaultSelectionText};const dropdownData={};dropdownData[AddressItemType[AddressItemType.ThreeLetterISORegionName]]=this.getCountryFormat();dropdownData[AddressItemType[AddressItemType.State]]=this.getStateFormat(stateProvinceInfo);dropdownData[AddressItemType[AddressItemType.State]].unshift(defaultStateText);dropdownData[AddressItemType[AddressItemType.AddressTypeValue]]=this.getAddressTypeFormat();return dropdownData;};this.getTwoLetterISORegionName=countryRegionId=>{const countryRegionInfo=this._getCountryRegionInfo(countryRegionId);return countryRegionInfo.ISOCode;};this.validateAddressFormat=(address,validationError,countryRegionId,propertyName)=>{let isValid=true;let validationtor;const addressFormat=this.getAddressFormat(address.ThreeLetterISORegionName||countryRegionId);addressFormat.forEach(addressFormatItem=>{if(!propertyName||propertyName&&addressFormatItem.name===propertyName){validationtor=this._inputValidation(addressFormatItem,validationError,address);if(validationtor!==undefined){isValid=validationtor;}}});return isValid;};this._validateRegEx=(address,propertyName,validationRule)=>{if(validationRule.regEx&&validationRule.regEx.length>0){const regex=new RegExp(validationRule.regEx);return regex.test(get(address,propertyName)||'');}return true;};this.countryRegionsInfo=countryRegionsInfo;this.addressMetaData=addressMetaData;this.addressPurposes=addressPurposes;}getAddressFormat(countryRegionId){const countryRegionInfo=this._getCountryRegionInfo(countryRegionId);if(countryRegionInfo){return this._getAddressDisplayFormat(countryRegionInfo);}return[];}getCountryFormat(){return(this.countryRegionsInfo||[]).map(countryRegion=>{return{key:countryRegion.CountryRegionId,value:countryRegion.ShortName};});}getStateFormat(stateProvinceInfo){return(stateProvinceInfo||[]).map(state=>{return{key:state.StateId,value:state.StateName};});}getAddressTypeFormat(){return(this.addressPurposes||[]).map(addressPurpose=>{return{key:addressPurpose.AddressType,value:addressPurpose.Name};});}_inputValidation(addressFormatItem,validationError,address){set(validationError,{[addressFormatItem.name]:null});for(const validationRule of addressFormatItem.validationRules||[]){if(!this._validateRegEx(address,addressFormatItem.name,validationRule)){set(validationError,{[addressFormatItem.name]:validationRule.message});return false;}}return undefined;}_getCountryRegionInfo(countryRegionId){return(this.countryRegionsInfo||[]).find(countryRegion=>{return(countryRegion.CountryRegionId||'').toLowerCase()===countryRegionId.toLowerCase();});}_getAddressDisplayFormat(countryRegionInfo){const addressDisplayItem=[];if(countryRegionInfo&&countryRegionInfo.AddressFormatLines){const AddressTypeItem=this._extendAddressDisplayFormat(AddressItemType.AddressTypeValue,true);if(AddressTypeItem){addressDisplayItem.push(AddressTypeItem);}const nameDisplayItem=this._extendAddressDisplayFormat(AddressItemType.Name,true);if(nameDisplayItem){addressDisplayItem.push(nameDisplayItem);}countryRegionInfo.AddressFormatLines.forEach(formatLine=>{if(formatLine.AddressComponentNameValue){const addressItem=this.addressMetaData.getItemFormat(formatLine.AddressComponentNameValue);if(addressItem){addressItem.isNewLine=formatLine.NewLine||false;addressDisplayItem.push(addressItem);}}});const phoneDisplayItem=this._extendAddressDisplayFormat(AddressItemType.Phone,false);if(phoneDisplayItem){addressDisplayItem.push(phoneDisplayItem);}const isPrimaryDisplayItem=this._extendAddressDisplayFormat(AddressItemType.IsPrimary,false);if(isPrimaryDisplayItem){addressDisplayItem.push(isPrimaryDisplayItem);}}return addressDisplayItem;}_extendAddressDisplayFormat(type,isNewLine){const addressItem=this.addressMetaData.getItemFormat(type);if(addressItem){addressItem.isNewLine=isNewLine;}return addressItem;}}","map":{"version":3,"sources":["common/address-format.ts"],"names":[],"mappings":"gNAIA,OAAS,GAAT,CAAc,GAAd,KAAyB,MAAzB,CAMA,OACI,eADJ,KAEO,uBAFP,CASA,MAAM,MAAO,CAAA,aAAa,CAKtB,WAAA,CAAY,kBAAZ,CAAqD,eAArD,CAAuF,eAAvF,CAAwH,CAyCjH,KAAA,+BAAA,CAAkC,CAAC,yBAAD,CAAoC,iBAApC,GAAsG,CAC3I,KAAM,CAAA,gBAAgB,CAAG,CACrB,GAAG,CAAE,EADgB,CAErB,KAAK,CAAE,yBAFc,CAAzB,CAIA,KAAM,CAAA,YAAY,CAA0B,EAA5C,CAEA,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,wBAAjB,CAAhB,CAAZ,CAA0E,KAAK,gBAAL,EAA1E,CACA,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,KAAjB,CAAhB,CAAZ,CAAuD,KAAK,cAAL,CAAoB,iBAApB,CAAvD,CACA,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,KAAjB,CAAhB,CAAZ,CAAqD,OAArD,CAA6D,gBAA7D,EACA,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,gBAAjB,CAAhB,CAAZ,CAAkE,KAAK,oBAAL,EAAlE,CAEA,MAAO,CAAA,YAAP,CACH,CAbM,CAeA,KAAA,yBAAA,CAA6B,eAAD,EAAgD,CAC/E,KAAM,CAAA,iBAAiB,CAAG,KAAK,qBAAL,CAA2B,eAA3B,CAA1B,CAEA,MAAO,CAAA,iBAAkB,CAAC,OAA1B,CACH,CAJM,CAMA,KAAA,qBAAA,CAAwB,CAAC,OAAD,CAAmB,eAAnB,CAA6C,eAA7C,CAAsE,YAAtE,GAAwG,CACnI,GAAI,CAAA,OAAO,CAAY,IAAvB,CACA,GAAI,CAAA,aAAJ,CACA,KAAM,CAAA,aAAa,CAAG,KAAK,gBAAL,CAAuB,OAAO,CAAC,wBAAT,EAAsC,eAA5D,CAAtB,CAEA,aAAa,CAAC,OAAd,CAAsB,iBAAiB,EAAG,CACtC,GAAI,CAAC,YAAD,EAAkB,YAAY,EAAI,iBAAiB,CAAC,IAAlB,GAA2B,YAAjE,CAAgF,CAC5E,aAAa,CAAG,KAAK,gBAAL,CAAsB,iBAAtB,CAAyC,eAAzC,CAA0D,OAA1D,CAAhB,CACA,GAAI,aAAa,GAAK,SAAtB,CAAiC,CAC7B,OAAO,CAAG,aAAV,CACH,CACJ,CACJ,CAPD,EASA,MAAO,CAAA,OAAP,CACH,CAfM,CA0BC,KAAA,cAAA,CAAiB,CAAC,OAAD,CAAmB,YAAnB,CAAyC,cAAzC,GAA4F,CACjH,GAAI,cAAc,CAAC,KAAf,EAAwB,cAAc,CAAC,KAAf,CAAqB,MAArB,CAA8B,CAA1D,CAA6D,CACzD,KAAM,CAAA,KAAK,CAAG,GAAI,CAAA,MAAJ,CAAW,cAAc,CAAC,KAA1B,CAAd,CACA,MAAO,CAAA,KAAK,CAAC,IAAN,CAAW,GAAG,CAAC,OAAD,CAAU,YAAV,CAAH,EAA8B,EAAzC,CAAP,CACH,CACD,MAAO,KAAP,CACH,CANO,CAvFJ,KAAK,kBAAL,CAA0B,kBAA1B,CACA,KAAK,eAAL,CAAuB,eAAvB,CACA,KAAK,eAAL,CAAuB,eAAvB,CACH,CAEM,gBAAgB,CAAC,eAAD,CAAwB,CAC3C,KAAM,CAAA,iBAAiB,CAAG,KAAK,qBAAL,CAA2B,eAA3B,CAA1B,CACA,GAAI,iBAAJ,CAAuB,CACnB,MAAO,MAAK,wBAAL,CAA8B,iBAA9B,CAAP,CACH,CACD,MAAO,EAAP,CACH,CAEM,gBAAgB,EAAA,CACnB,MAAO,CAAC,KAAK,kBAAL,EAA2B,EAA5B,EAAgC,GAAhC,CAAoC,aAAa,EAAG,CACvD,MAAO,CACH,GAAG,CAAE,aAAa,CAAC,eADhB,CAEH,KAAK,CAAE,aAAa,CAAC,SAFlB,CAAP,CAIH,CALM,CAAP,CAMH,CAEM,cAAc,CAAC,iBAAD,CAAwC,CACzD,MAAO,CAAC,iBAAiB,EAAI,EAAtB,EAA0B,GAA1B,CAA8B,KAAK,EAAG,CACzC,MAAO,CACH,GAAG,CAAE,KAAK,CAAC,OADR,CAEH,KAAK,CAAE,KAAK,CAAC,SAFV,CAAP,CAIH,CALM,CAAP,CAMH,CAEM,oBAAoB,EAAA,CACvB,MAAO,CAAC,KAAK,eAAL,EAAwB,EAAzB,EAA6B,GAA7B,CAAiC,cAAc,EAAG,CACrD,MAAO,CACH,GAAG,CAAE,cAAc,CAAC,WADjB,CAEH,KAAK,CAAE,cAAc,CAAC,IAFnB,CAAP,CAIH,CALM,CAAP,CAMH,CAuCO,gBAAgB,CAAC,iBAAD,CAAkC,eAAlC,CAA4D,OAA5D,CAA4E,CAChG,GAAG,CAAC,eAAD,CAAkB,CAAE,CAAC,iBAAiB,CAAC,IAAnB,EAA0B,IAA5B,CAAlB,CAAH,CACA,IAAK,KAAM,CAAA,cAAX,GAA8B,CAAA,iBAAiB,CAAC,eAAlB,EAAqC,EAAnE,CAAwE,CACpE,GAAI,CAAC,KAAK,cAAL,CAAoB,OAApB,CAA6B,iBAAiB,CAAC,IAA/C,CAAqD,cAArD,CAAL,CAA2E,CACvE,GAAG,CAAC,eAAD,CAAkB,CAAE,CAAC,iBAAiB,CAAC,IAAnB,EAA0B,cAAc,CAAC,OAA3C,CAAlB,CAAH,CACA,MAAO,MAAP,CACH,CACJ,CACD,MAAO,CAAA,SAAP,CACH,CASO,qBAAqB,CAAC,eAAD,CAAwB,CACjD,MAAO,CAAC,KAAK,kBAAL,EAA2B,EAA5B,EAAgC,IAAhC,CAAqC,aAAa,EAAG,CACxD,MAAQ,CAAC,aAAa,CAAC,eAAd,EAAiC,EAAlC,EAAsC,WAAtC,KAAwD,eAAe,CAAC,WAAhB,EAAhE,CACH,CAFM,CAAP,CAGH,CAEO,wBAAwB,CAAC,iBAAD,CAAqC,CACjE,KAAM,CAAA,kBAAkB,CAAmB,EAA3C,CAEA,GAAI,iBAAiB,EAAI,iBAAiB,CAAC,kBAA3C,CAA+D,CAC3D,KAAM,CAAA,eAAe,CAAG,KAAK,2BAAL,CAAiC,eAAe,CAAC,gBAAjD,CAAmE,IAAnE,CAAxB,CACA,GAAI,eAAJ,CAAqB,CACjB,kBAAkB,CAAC,IAAnB,CAAwB,eAAxB,EACH,CAED,KAAM,CAAA,eAAe,CAAG,KAAK,2BAAL,CAAiC,eAAe,CAAC,IAAjD,CAAuD,IAAvD,CAAxB,CACA,GAAI,eAAJ,CAAqB,CACjB,kBAAkB,CAAC,IAAnB,CAAwB,eAAxB,EACH,CAED,iBAAiB,CAAC,kBAAlB,CAAqC,OAArC,CAA6C,UAAU,EAAG,CACtD,GAAI,UAAU,CAAC,yBAAf,CAA0C,CACtC,KAAM,CAAA,WAAW,CAAG,KAAK,eAAL,CAAqB,aAArB,CAAmC,UAAU,CAAC,yBAA9C,CAApB,CACA,GAAI,WAAJ,CAAiB,CACb,WAAW,CAAC,SAAZ,CAAwB,UAAU,CAAC,OAAX,EAAsB,KAA9C,CACA,kBAAkB,CAAC,IAAnB,CAAwB,WAAxB,EACH,CACJ,CACJ,CARD,EAUA,KAAM,CAAA,gBAAgB,CAAG,KAAK,2BAAL,CAAiC,eAAe,CAAC,KAAjD,CAAwD,KAAxD,CAAzB,CACA,GAAI,gBAAJ,CAAsB,CAClB,kBAAkB,CAAC,IAAnB,CAAwB,gBAAxB,EACH,CAED,KAAM,CAAA,oBAAoB,CAAG,KAAK,2BAAL,CAAiC,eAAe,CAAC,SAAjD,CAA4D,KAA5D,CAA7B,CACA,GAAI,oBAAJ,CAA0B,CACtB,kBAAkB,CAAC,IAAnB,CAAwB,oBAAxB,EACH,CACJ,CAED,MAAO,CAAA,kBAAP,CACH,CAEO,2BAA2B,CAAC,IAAD,CAAwB,SAAxB,CAA0C,CACzE,KAAM,CAAA,WAAW,CAAG,KAAK,eAAL,CAAqB,aAArB,CAAmC,IAAnC,CAApB,CACA,GAAI,WAAJ,CAAiB,CACb,WAAW,CAAC,SAAZ,CAAwB,SAAxB,CACH,CACD,MAAO,CAAA,WAAP,CACH,CAvJqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { get, set } from 'mobx';\n\nimport {\n    Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport {\n    AddressItemType, IAddressDropdownsData, IAddressItem, IAddressValidationRule\n} from './address-format.data';\nimport { AddressMetaData } from './address-meta-data';\n\n/**\n *\n * Retail Service Address format parser\n */\nexport class AddressFormat {\n    private countryRegionsInfo?: CountryRegionInfo[];\n    private addressPurposes?: AddressPurpose[];\n    private addressMetaData: AddressMetaData;\n\n    constructor(countryRegionsInfo: CountryRegionInfo[], addressMetaData: AddressMetaData, addressPurposes: AddressPurpose[]) {\n        this.countryRegionsInfo = countryRegionsInfo;\n        this.addressMetaData = addressMetaData;\n        this.addressPurposes = addressPurposes;\n    }\n\n    public getAddressFormat(countryRegionId: string): IAddressItem[] {\n        const countryRegionInfo = this._getCountryRegionInfo(countryRegionId);\n        if (countryRegionInfo) {\n            return this._getAddressDisplayFormat(countryRegionInfo);\n        }\n        return [];\n    }\n\n    public getCountryFormat(): { key?: string; value?: string }[] {\n        return (this.countryRegionsInfo || []).map(countryRegion => {\n            return {\n                key: countryRegion.CountryRegionId,\n                value: countryRegion.ShortName\n            };\n        });\n    }\n\n    public getStateFormat(stateProvinceInfo?: StateProvinceInfo[]): { key?: string; value?: string }[] {\n        return (stateProvinceInfo || []).map(state => {\n            return {\n                key: state.StateId,\n                value: state.StateName\n            };\n        });\n    }\n\n    public getAddressTypeFormat(): { key?: number; value?: string }[] {\n        return (this.addressPurposes || []).map(addressPurpose => {\n            return {\n                key: addressPurpose.AddressType,\n                value: addressPurpose.Name\n            };\n        });\n    }\n\n    public getPrefilledAddressDropdownData = (stateDefaultSelectionText: string, stateProvinceInfo?: StateProvinceInfo[]): IAddressDropdownsData => {\n        const defaultStateText = {\n            key: '',\n            value: stateDefaultSelectionText\n        };\n        const dropdownData: IAddressDropdownsData = {};\n\n        dropdownData[AddressItemType[AddressItemType.ThreeLetterISORegionName]] = this.getCountryFormat();\n        dropdownData[AddressItemType[AddressItemType.State]] = this.getStateFormat(stateProvinceInfo);\n        dropdownData[AddressItemType[AddressItemType.State]].unshift(defaultStateText);\n        dropdownData[AddressItemType[AddressItemType.AddressTypeValue]] = this.getAddressTypeFormat();\n\n        return dropdownData;\n    }\n\n    public getTwoLetterISORegionName = (countryRegionId: string): string | undefined => {\n        const countryRegionInfo = this._getCountryRegionInfo(countryRegionId);\n\n        return countryRegionInfo!.ISOCode;\n    }\n\n    public validateAddressFormat = (address: Address, validationError: Address, countryRegionId: string, propertyName?: string): boolean => {\n        let isValid: boolean = true;\n        let validationtor;\n        const addressFormat = this.getAddressFormat((address.ThreeLetterISORegionName) || countryRegionId);\n\n        addressFormat.forEach(addressFormatItem => {\n            if (!propertyName || (propertyName && addressFormatItem.name === propertyName)) {\n                validationtor = this._inputValidation(addressFormatItem, validationError, address);\n                if (validationtor !== undefined) {\n                    isValid = validationtor;\n                }\n            }\n        });\n\n        return isValid;\n    }\n    private _inputValidation(addressFormatItem: IAddressItem, validationError: Address, address: Address): boolean | undefined {\n        set(validationError, { [addressFormatItem.name]: null });\n        for (const validationRule of (addressFormatItem.validationRules || [])) {\n            if (!this._validateRegEx(address, addressFormatItem.name, validationRule)) {\n                set(validationError, { [addressFormatItem.name]: validationRule.message });\n                return false;\n            }\n        }\n        return undefined;\n    }\n    private _validateRegEx = (address: Address, propertyName: string, validationRule: IAddressValidationRule): boolean => {\n        if (validationRule.regEx && validationRule.regEx.length > 0) {\n            const regex = new RegExp(validationRule.regEx);\n            return regex.test(get(address, propertyName) || '');\n        }\n        return true;\n    }\n\n    private _getCountryRegionInfo(countryRegionId: string): CountryRegionInfo | undefined {\n        return (this.countryRegionsInfo || []).find(countryRegion => {\n            return ((countryRegion.CountryRegionId || '').toLowerCase() === countryRegionId.toLowerCase());\n        });\n    }\n\n    private _getAddressDisplayFormat(countryRegionInfo: CountryRegionInfo): IAddressItem[] {\n        const addressDisplayItem: IAddressItem[] = [];\n\n        if (countryRegionInfo && countryRegionInfo.AddressFormatLines) {\n            const AddressTypeItem = this._extendAddressDisplayFormat(AddressItemType.AddressTypeValue, true);\n            if (AddressTypeItem) {\n                addressDisplayItem.push(AddressTypeItem);\n            }\n\n            const nameDisplayItem = this._extendAddressDisplayFormat(AddressItemType.Name, true);\n            if (nameDisplayItem) {\n                addressDisplayItem.push(nameDisplayItem);\n            }\n\n            countryRegionInfo.AddressFormatLines.forEach(formatLine => {\n                if (formatLine.AddressComponentNameValue) {\n                    const addressItem = this.addressMetaData.getItemFormat(formatLine.AddressComponentNameValue);\n                    if (addressItem) {\n                        addressItem.isNewLine = formatLine.NewLine || false;\n                        addressDisplayItem.push(addressItem);\n                    }\n                }\n            });\n\n            const phoneDisplayItem = this._extendAddressDisplayFormat(AddressItemType.Phone, false);\n            if (phoneDisplayItem) {\n                addressDisplayItem.push(phoneDisplayItem);\n            }\n\n            const isPrimaryDisplayItem = this._extendAddressDisplayFormat(AddressItemType.IsPrimary, false);\n            if (isPrimaryDisplayItem) {\n                addressDisplayItem.push(isPrimaryDisplayItem);\n            }\n        }\n\n        return addressDisplayItem;\n    }\n\n    private _extendAddressDisplayFormat(type: AddressItemType, isNewLine: boolean): IAddressItem | undefined {\n        const addressItem = this.addressMetaData.getItemFormat(type);\n        if (addressItem) {\n            addressItem.isNewLine = isNewLine;\n        }\n        return addressItem;\n    }\n}\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}