{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.string.split.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getFeatureStatesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';/**\r\n *  Input class for the getFeatureState data action\r\n */export class FeatureStateInput{constructor(featureName){this.getCacheKey=()=>\"\".concat(this.featureName);this.getCacheObjectType=()=>'FeatureState';this.dataCacheType=()=>'instance';this.featureName=featureName;}}/**\r\n * createInput method for the getFeatureState method\r\n * @param inputData The input data passed to the createInput method\r\n */export const createGetFeatureStateInput=inputData=>{// Ensure your module has a config property 'featureName'\nif(inputData.config&&inputData.config.featureName){// Create and return an input for the data action using the module configuration data.\nreturn new FeatureStateInput(inputData.config.featureName);}else{throw new Error(\"Default data definition for a feature check must also include config parameter \\\"featureName\\\" in your module.\");}};/**\r\n * The action method for the getFeatureState data action\r\n * @param input The action input\r\n * @param ctx The action context\r\n */export async function getFeatureStateAction(input,ctx){const featureNames=input.featureName?input.featureName.split(\",\").map(featureName=>featureName.trim()):['Dynamics.AX.Application.RetailB2BEcommerceFeature'];const featureState=await getFeatureStatesAsync({callerContext:ctx},featureNames);return featureState;}/**\r\n * The getFeatureState data action\r\n * Gets the feature state via the read RetailServer API\r\n * Returns address information associated with the retrieved customer\r\n */export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-feature-state',action:getFeatureStateAction,input:createGetFeatureStateInput});","map":{"version":3,"sources":["../../src/get-feature-state.ts"],"names":[],"mappings":"iFAAA,OAAoB,0BAApB,KAAmI,yBAAnI,CAGA,OAAS,qBAAT,KAAsC,+EAAtC,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,iBAAiB,CAG1B,WAAA,CAAY,WAAZ,CAAgC,CAIzB,KAAA,WAAA,CAAc,cAAS,KAAK,WAAd,CAAd,CACA,KAAA,kBAAA,CAAqB,IAAM,cAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,UAAjC,CALH,KAAK,WAAL,CAAmB,WAAnB,CACH,CALyB,CAY9B;;;AAGG,GACH,MAAO,MAAM,CAAA,0BAA0B,CAAI,SAAD,EAAkE,CACxG;AACA,GAAG,SAAS,CAAC,MAAV,EAAoB,SAAS,CAAC,MAAV,CAAiB,WAAxC,CAAqD,CACjD;AACA,MAAO,IAAI,CAAA,iBAAJ,CAAsB,SAAS,CAAC,MAAV,CAAiB,WAAvC,CAAP,CACH,CAHD,IAGO,CACH,KAAM,IAAI,CAAA,KAAJ,kHAAN,CACH,CACJ,CARM,CAUP;;;;AAIG,GACH,MAAO,eAAe,CAAA,qBAAf,CAAqC,KAArC,CAA+D,GAA/D,CAAkF,CACrF,KAAM,CAAA,YAAY,CAAa,KAAK,CAAC,WAAN,CAAoB,KAAK,CAAC,WAAN,CAAkB,KAAlB,CAAwB,GAAxB,EAA6B,GAA7B,CAAiC,WAAW,EAAI,WAAW,CAAC,IAAZ,EAAhD,CAApB,CACzB,CAAC,mDAAD,CADN,CAGA,KAAM,CAAA,YAAY,CAAG,KAAM,CAAA,qBAAqB,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAyB,YAAzB,CAAhD,CACA,MAAO,CAAA,YAAP,CACH,CAED;;;;AAIG,GACH,cAAe,CAAA,0BAA0B,CAAiB,CACtD,EAAE,CAAE,6DADkD,CAEtD,MAAM,CAA2B,qBAFqB,CAGtD,KAAK,CAAE,0BAH+C,CAAjB,CAAzC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { FeatureState } from '@msdyn365-commerce/retail-proxy';\n\nimport { getFeatureStatesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\n/**\n *  Input class for the getFeatureState data action\n */\nexport class FeatureStateInput implements IActionInput {\n    public featureName?: string;\n\n    constructor(featureName?: string) {\n        this.featureName = featureName;\n    }\n\n    public getCacheKey = () => `${this.featureName}`;\n    public getCacheObjectType = () => 'FeatureState';\n    public dataCacheType = (): CacheType => 'instance';\n}\n\n/**\n * createInput method for the getFeatureState method\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetFeatureStateInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    // Ensure your module has a config property 'featureName'\n    if(inputData.config && inputData.config.featureName) {\n        // Create and return an input for the data action using the module configuration data.\n        return new FeatureStateInput(inputData.config.featureName);\n    } else {\n        throw new Error(`Default data definition for a feature check must also include config parameter \"featureName\" in your module.`);\n    }\n};\n\n/**\n * The action method for the getFeatureState data action\n * @param input The action input\n * @param ctx The action context\n */\nexport async function getFeatureStateAction(input: FeatureStateInput, ctx: IActionContext): Promise<FeatureState[]> {\n    const featureNames: string[] = input.featureName ? input.featureName.split(\",\").map(featureName => featureName.trim())\n        : ['Dynamics.AX.Application.RetailB2BEcommerceFeature'];\n\n    const featureState = await getFeatureStatesAsync({ callerContext: ctx }, featureNames);\n    return featureState;\n}\n\n/**\n * The getFeatureState data action\n * Gets the feature state via the read RetailServer API\n * Returns address information associated with the retrieved customer\n */\nexport default createObservableDataAction<FeatureState[]>({\n    id: '@msdyn365-commerce-modules/retail-actions/get-feature-state',\n    action: <IAction<FeatureState[]>>getFeatureStateAction,\n    input: createGetFeatureStateInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}