{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=o[Symbol.iterator]();},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import{get,set}from'mobx';import{AddressItemType}from'./address-format.data';export var AddressFormat=/*#__PURE__*/function(){function AddressFormat(countryRegionsInfo,addressMetaData,addressPurposes){var _this=this;_classCallCheck(this,AddressFormat);this.getPrefilledAddressDropdownData=function(stateDefaultSelectionText,stateProvinceInfo){var defaultStateText={key:'',value:stateDefaultSelectionText};var dropdownData={};dropdownData[AddressItemType[AddressItemType.ThreeLetterISORegionName]]=_this.getCountryFormat();dropdownData[AddressItemType[AddressItemType.State]]=_this.getStateFormat(stateProvinceInfo);dropdownData[AddressItemType[AddressItemType.State]].unshift(defaultStateText);dropdownData[AddressItemType[AddressItemType.AddressTypeValue]]=_this.getAddressTypeFormat();return dropdownData;};this.getTwoLetterISORegionName=function(countryRegionId){var countryRegionInfo=_this._getCountryRegionInfo(countryRegionId);return countryRegionInfo.ISOCode;};this.validateAddressFormat=function(address,validationError,countryRegionId,propertyName){var isValid=true;var validationtor;var addressFormat=_this.getAddressFormat(address.ThreeLetterISORegionName||countryRegionId);addressFormat.forEach(function(addressFormatItem){if(!propertyName||propertyName&&addressFormatItem.name===propertyName){validationtor=_this._inputValidation(addressFormatItem,validationError,address);if(validationtor!==undefined){isValid=validationtor;}}});return isValid;};this._validateRegEx=function(address,propertyName,validationRule){if(validationRule.regEx&&validationRule.regEx.length>0){var regex=new RegExp(validationRule.regEx);return regex.test(get(address,propertyName)||'');}return true;};this.countryRegionsInfo=countryRegionsInfo;this.addressMetaData=addressMetaData;this.addressPurposes=addressPurposes;}_createClass(AddressFormat,[{key:\"getAddressFormat\",value:function getAddressFormat(countryRegionId){var countryRegionInfo=this._getCountryRegionInfo(countryRegionId);if(countryRegionInfo){return this._getAddressDisplayFormat(countryRegionInfo);}return[];}},{key:\"getCountryFormat\",value:function getCountryFormat(){return(this.countryRegionsInfo||[]).map(function(countryRegion){return{key:countryRegion.CountryRegionId,value:countryRegion.ShortName};});}},{key:\"getStateFormat\",value:function getStateFormat(stateProvinceInfo){return(stateProvinceInfo||[]).map(function(state){return{key:state.StateId,value:state.StateName};});}},{key:\"getAddressTypeFormat\",value:function getAddressTypeFormat(){return(this.addressPurposes||[]).map(function(addressPurpose){return{key:addressPurpose.AddressType,value:addressPurpose.Name};});}},{key:\"_inputValidation\",value:function _inputValidation(addressFormatItem,validationError,address){set(validationError,_defineProperty({},addressFormatItem.name,null));var _iterator=_createForOfIteratorHelper(addressFormatItem.validationRules||[]),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var validationRule=_step.value;if(!this._validateRegEx(address,addressFormatItem.name,validationRule)){set(validationError,_defineProperty({},addressFormatItem.name,validationRule.message));return false;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return undefined;}},{key:\"_getCountryRegionInfo\",value:function _getCountryRegionInfo(countryRegionId){return(this.countryRegionsInfo||[]).find(function(countryRegion){return(countryRegion.CountryRegionId||'').toLowerCase()===countryRegionId.toLowerCase();});}},{key:\"_getAddressDisplayFormat\",value:function _getAddressDisplayFormat(countryRegionInfo){var _this2=this;var addressDisplayItem=[];if(countryRegionInfo&&countryRegionInfo.AddressFormatLines){var AddressTypeItem=this._extendAddressDisplayFormat(AddressItemType.AddressTypeValue,true);if(AddressTypeItem){addressDisplayItem.push(AddressTypeItem);}var nameDisplayItem=this._extendAddressDisplayFormat(AddressItemType.Name,true);if(nameDisplayItem){addressDisplayItem.push(nameDisplayItem);}countryRegionInfo.AddressFormatLines.forEach(function(formatLine){if(formatLine.AddressComponentNameValue){var addressItem=_this2.addressMetaData.getItemFormat(formatLine.AddressComponentNameValue);if(addressItem){addressItem.isNewLine=formatLine.NewLine||false;addressDisplayItem.push(addressItem);}}});var phoneDisplayItem=this._extendAddressDisplayFormat(AddressItemType.Phone,false);if(phoneDisplayItem){addressDisplayItem.push(phoneDisplayItem);}var isPrimaryDisplayItem=this._extendAddressDisplayFormat(AddressItemType.IsPrimary,false);if(isPrimaryDisplayItem){addressDisplayItem.push(isPrimaryDisplayItem);}}return addressDisplayItem;}},{key:\"_extendAddressDisplayFormat\",value:function _extendAddressDisplayFormat(type,isNewLine){var addressItem=this.addressMetaData.getItemFormat(type);if(addressItem){addressItem.isNewLine=isNewLine;}return addressItem;}}]);return AddressFormat;}();","map":{"version":3,"sources":["common/address-format.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { get, set } from 'mobx';\n\nimport {\n    Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport {\n    AddressItemType, IAddressDropdownsData, IAddressItem, IAddressValidationRule\n} from './address-format.data';\nimport { AddressMetaData } from './address-meta-data';\n\n/**\n *\n * Retail Service Address format parser\n */\nexport class AddressFormat {\n    private countryRegionsInfo?: CountryRegionInfo[];\n    private addressPurposes?: AddressPurpose[];\n    private addressMetaData: AddressMetaData;\n\n    constructor(countryRegionsInfo: CountryRegionInfo[], addressMetaData: AddressMetaData, addressPurposes: AddressPurpose[]) {\n        this.countryRegionsInfo = countryRegionsInfo;\n        this.addressMetaData = addressMetaData;\n        this.addressPurposes = addressPurposes;\n    }\n\n    public getAddressFormat(countryRegionId: string): IAddressItem[] {\n        const countryRegionInfo = this._getCountryRegionInfo(countryRegionId);\n        if (countryRegionInfo) {\n            return this._getAddressDisplayFormat(countryRegionInfo);\n        }\n        return [];\n    }\n\n    public getCountryFormat(): { key?: string; value?: string }[] {\n        return (this.countryRegionsInfo || []).map(countryRegion => {\n            return {\n                key: countryRegion.CountryRegionId,\n                value: countryRegion.ShortName\n            };\n        });\n    }\n\n    public getStateFormat(stateProvinceInfo?: StateProvinceInfo[]): { key?: string; value?: string }[] {\n        return (stateProvinceInfo || []).map(state => {\n            return {\n                key: state.StateId,\n                value: state.StateName\n            };\n        });\n    }\n\n    public getAddressTypeFormat(): { key?: number; value?: string }[] {\n        return (this.addressPurposes || []).map(addressPurpose => {\n            return {\n                key: addressPurpose.AddressType,\n                value: addressPurpose.Name\n            };\n        });\n    }\n\n    public getPrefilledAddressDropdownData = (stateDefaultSelectionText: string, stateProvinceInfo?: StateProvinceInfo[]): IAddressDropdownsData => {\n        const defaultStateText = {\n            key: '',\n            value: stateDefaultSelectionText\n        };\n        const dropdownData: IAddressDropdownsData = {};\n\n        dropdownData[AddressItemType[AddressItemType.ThreeLetterISORegionName]] = this.getCountryFormat();\n        dropdownData[AddressItemType[AddressItemType.State]] = this.getStateFormat(stateProvinceInfo);\n        dropdownData[AddressItemType[AddressItemType.State]].unshift(defaultStateText);\n        dropdownData[AddressItemType[AddressItemType.AddressTypeValue]] = this.getAddressTypeFormat();\n\n        return dropdownData;\n    }\n\n    public getTwoLetterISORegionName = (countryRegionId: string): string | undefined => {\n        const countryRegionInfo = this._getCountryRegionInfo(countryRegionId);\n\n        return countryRegionInfo!.ISOCode;\n    }\n\n    public validateAddressFormat = (address: Address, validationError: Address, countryRegionId: string, propertyName?: string): boolean => {\n        let isValid: boolean = true;\n        let validationtor;\n        const addressFormat = this.getAddressFormat((address.ThreeLetterISORegionName) || countryRegionId);\n\n        addressFormat.forEach(addressFormatItem => {\n            if (!propertyName || (propertyName && addressFormatItem.name === propertyName)) {\n                validationtor = this._inputValidation(addressFormatItem, validationError, address);\n                if (validationtor !== undefined) {\n                    isValid = validationtor;\n                }\n            }\n        });\n\n        return isValid;\n    }\n    private _inputValidation(addressFormatItem: IAddressItem, validationError: Address, address: Address): boolean | undefined {\n        set(validationError, { [addressFormatItem.name]: null });\n        for (const validationRule of (addressFormatItem.validationRules || [])) {\n            if (!this._validateRegEx(address, addressFormatItem.name, validationRule)) {\n                set(validationError, { [addressFormatItem.name]: validationRule.message });\n                return false;\n            }\n        }\n        return undefined;\n    }\n    private _validateRegEx = (address: Address, propertyName: string, validationRule: IAddressValidationRule): boolean => {\n        if (validationRule.regEx && validationRule.regEx.length > 0) {\n            const regex = new RegExp(validationRule.regEx);\n            return regex.test(get(address, propertyName) || '');\n        }\n        return true;\n    }\n\n    private _getCountryRegionInfo(countryRegionId: string): CountryRegionInfo | undefined {\n        return (this.countryRegionsInfo || []).find(countryRegion => {\n            return ((countryRegion.CountryRegionId || '').toLowerCase() === countryRegionId.toLowerCase());\n        });\n    }\n\n    private _getAddressDisplayFormat(countryRegionInfo: CountryRegionInfo): IAddressItem[] {\n        const addressDisplayItem: IAddressItem[] = [];\n\n        if (countryRegionInfo && countryRegionInfo.AddressFormatLines) {\n            const AddressTypeItem = this._extendAddressDisplayFormat(AddressItemType.AddressTypeValue, true);\n            if (AddressTypeItem) {\n                addressDisplayItem.push(AddressTypeItem);\n            }\n\n            const nameDisplayItem = this._extendAddressDisplayFormat(AddressItemType.Name, true);\n            if (nameDisplayItem) {\n                addressDisplayItem.push(nameDisplayItem);\n            }\n\n            countryRegionInfo.AddressFormatLines.forEach(formatLine => {\n                if (formatLine.AddressComponentNameValue) {\n                    const addressItem = this.addressMetaData.getItemFormat(formatLine.AddressComponentNameValue);\n                    if (addressItem) {\n                        addressItem.isNewLine = formatLine.NewLine || false;\n                        addressDisplayItem.push(addressItem);\n                    }\n                }\n            });\n\n            const phoneDisplayItem = this._extendAddressDisplayFormat(AddressItemType.Phone, false);\n            if (phoneDisplayItem) {\n                addressDisplayItem.push(phoneDisplayItem);\n            }\n\n            const isPrimaryDisplayItem = this._extendAddressDisplayFormat(AddressItemType.IsPrimary, false);\n            if (isPrimaryDisplayItem) {\n                addressDisplayItem.push(isPrimaryDisplayItem);\n            }\n        }\n\n        return addressDisplayItem;\n    }\n\n    private _extendAddressDisplayFormat(type: AddressItemType, isNewLine: boolean): IAddressItem | undefined {\n        const addressItem = this.addressMetaData.getItemFormat(type);\n        if (addressItem) {\n            addressItem.isNewLine = isNewLine;\n        }\n        return addressItem;\n    }\n}\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}