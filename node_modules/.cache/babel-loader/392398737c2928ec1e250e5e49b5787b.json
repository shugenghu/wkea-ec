{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"@babel/runtime/helpers/esm/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/esm/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import{TelemetryBase}from'./telemetry-base';/**\r\n * Telemetry client containing trace loggers\r\n */export var InternalTelemetry=/*#__PURE__*/function(_TelemetryBase){_inherits(InternalTelemetry,_TelemetryBase);var _super=_createSuper(InternalTelemetry);/**\r\n     * Creates a new instance of InternalTelemetry.\r\n     */function InternalTelemetry(){var _this;_classCallCheck(this,InternalTelemetry);_this=_super.call(this);_this.setTelemetryModuleContext=function(moduleContext){return function(){// Create copy of telemetry object with specified module context\n// TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?\nvar telemetryWithContext=new InternalTelemetry();telemetryWithContext._enableDataAnalytics=_this._enableDataAnalytics;telemetryWithContext._webAnalyticsPlugin=_this._webAnalyticsPlugin;telemetryWithContext._traceLoggers=_this._traceLoggers;telemetryWithContext._eventLoggers=_this._eventLoggers;telemetryWithContext._expLogger=_this._expLogger;telemetryWithContext._attributeRenderers=_this._attributeRenderers;telemetryWithContext._telemetryContext.requestContext=_this._telemetryContext.requestContext;telemetryWithContext._telemetryContext.moduleContext=moduleContext;return telemetryWithContext;};};/**\r\n         * Logs a structured message at the given log level, with optional custom tags and/or an exception\r\n         * @param logLevel LogLevel of the message\r\n         * @param messageTemplate String to log, denoting placeholders with {placeholder}.\r\n         * Example input string: \"Hello {signedInUser}! Good {morningOrEvening}!\"\r\n         * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.\r\n         * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.\r\n         */_this.log=function(logLevel,messageTemplate,logOptions){_this._log(logLevel,messageTemplate,logOptions);};return _this;}return InternalTelemetry;}(TelemetryBase);","map":{"version":3,"sources":["../../../src/telemetry/internal-telemetry.ts"],"names":[],"mappings":"m9BAMA,OAAS,aAAT,KAA8B,kBAA9B,CAEA;;AAEG,GACH,UAAa,CAAA,iBAAb,8HACI;;AAEG,OACH,4BAAA,mDACI,wBAGG,MAAA,yBAAA,CAA4B,SAAC,aAAD,CAA2C,CAC1E,MAAO,WAAK,CACR;AACA;AACA,GAAM,CAAA,oBAAoB,CAAG,GAAI,CAAA,iBAAJ,EAA7B,CACA,oBAAoB,CAAC,oBAArB,CAA4C,MAAK,oBAAjD,CACA,oBAAoB,CAAC,mBAArB,CAA2C,MAAK,mBAAhD,CACA,oBAAoB,CAAC,aAArB,CAAqC,MAAK,aAA1C,CACA,oBAAoB,CAAC,aAArB,CAAqC,MAAK,aAA1C,CACA,oBAAoB,CAAC,UAArB,CAAkC,MAAK,UAAvC,CACA,oBAAoB,CAAC,mBAArB,CAA2C,MAAK,mBAAhD,CACA,oBAAoB,CAAC,iBAArB,CAAuC,cAAvC,CAAwD,MAAK,iBAAL,CAAuB,cAA/E,CACA,oBAAoB,CAAC,iBAArB,CAAuC,aAAvC,CAAuD,aAAvD,CAEA,MAAO,CAAA,oBAAP,CACH,CAdD,CAeH,CAhBM,CAkBP;;;;;;;AAOG,WACI,MAAA,GAAA,CAAM,SAAC,QAAD,CAAqB,eAArB,CAA8C,UAA9C,CAAgG,CACzG,MAAK,IAAL,CAAU,QAAV,CAAoB,eAApB,CAAqC,UAArC,EACH,CAFM,CA9BP,aAEC,CANL,2BAAuC,aAAvC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { IInternalTelemetry, ITelemetryModuleContext, LogLevel } from '../interfaces';\nimport { InternalTelemetryLogOptions } from './internal-telemetry-log-options';\nimport { TelemetryBase } from './telemetry-base';\n\n/**\n * Telemetry client containing trace loggers\n */\nexport class InternalTelemetry extends TelemetryBase implements IInternalTelemetry {\n    /**\n     * Creates a new instance of InternalTelemetry.\n     */\n    public constructor() {\n        super();\n    }\n\n    public setTelemetryModuleContext = (moduleContext: ITelemetryModuleContext) => {\n        return () => {\n            // Create copy of telemetry object with specified module context\n            // TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?\n            const telemetryWithContext = new InternalTelemetry();\n            telemetryWithContext._enableDataAnalytics = this._enableDataAnalytics;\n            telemetryWithContext._webAnalyticsPlugin = this._webAnalyticsPlugin;\n            telemetryWithContext._traceLoggers = this._traceLoggers;\n            telemetryWithContext._eventLoggers = this._eventLoggers;\n            telemetryWithContext._expLogger = this._expLogger;\n            telemetryWithContext._attributeRenderers = this._attributeRenderers;\n            telemetryWithContext._telemetryContext.requestContext = this._telemetryContext.requestContext;\n            telemetryWithContext._telemetryContext.moduleContext = moduleContext;\n\n            return telemetryWithContext;\n        };\n    };\n\n    /**\n     * Logs a structured message at the given log level, with optional custom tags and/or an exception\n     * @param logLevel LogLevel of the message\n     * @param messageTemplate String to log, denoting placeholders with {placeholder}.\n     * Example input string: \"Hello {signedInUser}! Good {morningOrEvening}!\"\n     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.\n     * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.\n     */\n    public log = (logLevel: LogLevel, messageTemplate: string, logOptions?: InternalTelemetryLogOptions): void => {\n        this._log(logLevel, messageTemplate, logOptions);\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}