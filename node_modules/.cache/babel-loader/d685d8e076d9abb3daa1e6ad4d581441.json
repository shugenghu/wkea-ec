{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import getFullProducts,{FullProductInput,ProductDetailsCriteria}from'../get-full-products';/**\r\n * If refinement criteria is set, then gets refined products.\r\n * @param input refinable products input\r\n * @param ctx action context\r\n * @param getRefinedProducts callback function to get a promise (e.g. refineSearchByCategoryAsync, refineSearchByTextAsync)\r\n * that is executed to get refined products or full set of products.\r\n */export async function getRefinedFullProducts(input,ctx,getRefinedProducts){if(!input||!input.refinementCriteria){ctx.trace('[getFullProductsByRefineSearchCategoryAction] Invalid input.');return{};}if(!input.refinementCriteria.length){ctx.trace('[getFullProductsByRefineSearchCategoryAction] No refiners specified.');return{};}const{apiSettings}=ctx.requestContext;let fullProductInputs=[];const searchResults=await getRefinedProducts();if(!searchResults){ctx.telemetry.error('[getFullProductsByRefineSearchCategoryAction] no searchResults returned');}else{fullProductInputs=searchResults.map(product=>{return new FullProductInput(product.RecordId,apiSettings,input.productDetailsCriteria||new ProductDetailsCriteria());});}if(fullProductInputs.length){const productResult=await getFullProducts(fullProductInputs,ctx);return{productSearchResult:productResult,refinementCriteria:input.refinementCriteria};}else{return{productSearchResult:[],refinementCriteria:input.refinementCriteria};}}","map":{"version":3,"sources":["../../../src/utilities/refiner-utils.ts"],"names":[],"mappings":"sCAGA,MAAO,CAAA,eAAP,EAA0B,gBAA1B,CAA4C,sBAA5C,KAA0E,sBAA1E,CAUA;;;;;;AAMG,GACH,MAAO,eAAe,CAAA,sBAAf,CACH,KADG,CAEH,GAFG,CAGH,kBAHG,CAGqD,CAGxD,GAAI,CAAC,KAAD,EAAU,CAAC,KAAK,CAAC,kBAArB,CAAyC,CACrC,GAAG,CAAC,KAAJ,CAAU,8DAAV,EACA,MAAuC,EAAvC,CACH,CAED,GAAI,CAAC,KAAK,CAAC,kBAAN,CAAyB,MAA9B,CAAsC,CAClC,GAAG,CAAC,KAAJ,CAAU,sEAAV,EACA,MAAuC,EAAvC,CACH,CACD,KAAM,CAAE,WAAF,EAAkB,GAAG,CAAC,cAA5B,CAEA,GAAI,CAAA,iBAAiB,CAAuB,EAA5C,CAEA,KAAM,CAAA,aAAa,CAAG,KAAM,CAAA,kBAAkB,EAA9C,CACA,GAAI,CAAC,aAAL,CAAoB,CAChB,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,yEAApB,EACH,CAFD,IAEO,CACH,iBAAiB,CAAG,aAAa,CAAC,GAAd,CACf,OAAD,EAAmD,CAC/C,MAAO,IAAI,CAAA,gBAAJ,CAAqB,OAAO,CAAC,QAA7B,CAAuC,WAAvC,CAAoD,KAAK,CAAC,sBAAN,EAAgC,GAAI,CAAA,sBAAJ,EAApF,CAAP,CACH,CAHe,CAApB,CAKH,CAED,GAAI,iBAAiB,CAAC,MAAtB,CAA8B,CAC1B,KAAM,CAAA,aAAa,CAAG,KAAM,CAAA,eAAe,CAAC,iBAAD,CAAoB,GAApB,CAA3C,CACA,MAAO,CACH,mBAAmB,CAAE,aADlB,CAEH,kBAAkB,CAAE,KAAK,CAAC,kBAFvB,CAAP,CAIH,CAND,IAMO,CACH,MAAO,CACH,mBAAmB,CAAE,EADlB,CAEH,kBAAkB,CAAE,KAAK,CAAC,kBAFvB,CAAP,CAIH,CACJ","sourcesContent":["import { IRefineFullProductSearchOutput } from '@msdyn365-commerce/commerce-entities';\nimport { IActionContext } from '@msdyn365-commerce/core';\nimport { ProductRefinerValue, ProductSearchResult } from '@msdyn365-commerce/retail-proxy';\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from '../get-full-products';\n\n/**\n * Common refinable products input includes both product detail criteria and refinement criteria.\n */\nexport interface IRefinableProductsInput {\n    refinementCriteria: ProductRefinerValue[];\n    productDetailsCriteria?: ProductDetailsCriteria;\n}\n\n/**\n * If refinement criteria is set, then gets refined products.\n * @param input refinable products input\n * @param ctx action context\n * @param getRefinedProducts callback function to get a promise (e.g. refineSearchByCategoryAsync, refineSearchByTextAsync)\n * that is executed to get refined products or full set of products.\n */\nexport async function getRefinedFullProducts(\n    input: IRefinableProductsInput,\n    ctx: IActionContext,\n    getRefinedProducts: () => Promise<ProductSearchResult[]>\n): Promise<IRefineFullProductSearchOutput> {\n\n    if (!input || !input.refinementCriteria) {\n        ctx.trace('[getFullProductsByRefineSearchCategoryAction] Invalid input.');\n        return <IRefineFullProductSearchOutput>{};\n    }\n\n    if (!input.refinementCriteria.length) {\n        ctx.trace('[getFullProductsByRefineSearchCategoryAction] No refiners specified.');\n        return <IRefineFullProductSearchOutput>{};\n    }\n    const { apiSettings } = ctx.requestContext;\n\n    let fullProductInputs: FullProductInput[] = [];\n\n    const searchResults = await getRefinedProducts();\n    if (!searchResults) {\n        ctx.telemetry.error('[getFullProductsByRefineSearchCategoryAction] no searchResults returned');\n    } else {\n        fullProductInputs = searchResults.map(\n            (product: ProductSearchResult): FullProductInput => {\n                return new FullProductInput(product.RecordId, apiSettings, input.productDetailsCriteria || new ProductDetailsCriteria());\n            }\n        );\n    }\n\n    if (fullProductInputs.length) {\n        const productResult = await getFullProducts(fullProductInputs, ctx);\n        return {\n            productSearchResult: productResult,\n            refinementCriteria: input.refinementCriteria\n        };\n    } else {\n        return {\n            productSearchResult: [],\n            refinementCriteria: input.refinementCriteria\n        };\n    }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}