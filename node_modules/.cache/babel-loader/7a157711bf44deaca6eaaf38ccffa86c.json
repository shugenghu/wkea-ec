{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{buildCacheKey}from'@msdyn365-commerce-modules/retail-actions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCountryRegionsAction,GetCountryRegionsInput}from'./get-country-regions';import{getStateProvinceAction,GetStateProvincesInput}from'./get-state-provinces';export class GetCountryStateInput{constructor(locale,apiSettings){this.getCacheKey=()=>buildCacheKey(\"CountryStateInfo-\".concat(this.locale),this.apiSettings);this.getCacheObjectType=()=>'StateProvinceInfo';this.dataCacheType=()=>'request';this.locale=locale;this.apiSettings=apiSettings;}}const createInput=inputData=>{const{locale,apiSettings}=inputData.requestContext;if(!(inputData.requestContext&&locale)){throw new Error('Unable to create country regions input.  Locale is not provided.');}return new GetCountryStateInput(locale,apiSettings);};export async function getCountryStateAction(input,ctx){const countryInput=new GetCountryRegionsInput(input.locale,input.apiSettings);const countryRegionsInfo=await getCountryRegionsAction(countryInput,ctx);const channelConfiguration=ctx.requestContext.channel;const marketISOCode=channelConfiguration&&channelConfiguration.ChannelCountryRegionISOCode||'US';const currentCountryRegion=countryRegionsInfo.find(countryRegion=>(countryRegion.ISOCode||'')===marketISOCode);const countryRegionId=currentCountryRegion&&currentCountryRegion.CountryRegionId||'USA';const stateInput=new GetStateProvincesInput(countryRegionId,input.apiSettings);return getStateProvinceAction(stateInput,ctx);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/address/get-country-state',action:getCountryStateAction,input:createInput});","map":{"version":3,"sources":["actions/get-country-state.ts"],"names":[],"mappings":"sCAAA,OAAS,aAAT,KAA8B,2CAA9B,CACA,OACe,0BADf,KAGO,yBAHP,CAQA,OAAS,uBAAT,CAAkC,sBAAlC,KAAgE,uBAAhE,CACA,OAAS,sBAAT,CAAiC,sBAAjC,KAA+D,uBAA/D,CAKA,MAAM,MAAO,CAAA,oBAAoB,CAI7B,WAAA,CAAY,MAAZ,CAA4B,WAA5B,CAA6D,CAKtD,KAAA,WAAA,CAAc,IAAM,aAAa,4BAAqB,KAAK,MAA1B,EAAoC,KAAK,WAAzC,CAAjC,CACA,KAAA,kBAAA,CAAqB,IAAM,mBAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CANH,KAAK,MAAL,CAAc,MAAd,CACA,KAAK,WAAL,CAAmB,WAAnB,CACH,CAP4B,CAiBjC,KAAM,CAAA,WAAW,CAAI,SAAD,EAA0E,CAC1F,KAAM,CAAE,MAAF,CAAU,WAAV,EAA0B,SAAS,CAAC,cAA1C,CACA,GAAI,EAAE,SAAS,CAAC,cAAV,EAA4B,MAA9B,CAAJ,CAA2C,CACvC,KAAM,IAAI,CAAA,KAAJ,CAAU,kEAAV,CAAN,CACH,CACD,MAAO,IAAI,CAAA,oBAAJ,CAAyB,MAAzB,CAAiC,WAAjC,CAAP,CACH,CAND,CAQA,MAAO,eAAe,CAAA,qBAAf,CAAqC,KAArC,CAAkE,GAAlE,CAAqF,CACxF,KAAM,CAAA,YAAY,CAAG,GAAI,CAAA,sBAAJ,CAA2B,KAAK,CAAC,MAAjC,CAAyC,KAAK,CAAC,WAA/C,CAArB,CACA,KAAM,CAAA,kBAAkB,CAAG,KAAM,CAAA,uBAAuB,CAAC,YAAD,CAAe,GAAf,CAAxD,CAEA,KAAM,CAAA,oBAAoB,CAAG,GAAG,CAAC,cAAJ,CAAmB,OAAhD,CAEA,KAAM,CAAA,aAAa,CAAG,oBAAoB,EAAI,oBAAoB,CAAC,2BAA7C,EAA4E,IAAlG,CACA,KAAM,CAAA,oBAAoB,CAAG,kBAAkB,CAAC,IAAnB,CAAwB,aAAa,EAAI,CAAC,aAAa,CAAC,OAAd,EAAyB,EAA1B,IAAkC,aAA3E,CAA7B,CACA,KAAM,CAAA,eAAe,CAAI,oBAAoB,EAAI,oBAAoB,CAAC,eAA9C,EAAkE,KAA1F,CAEA,KAAM,CAAA,UAAU,CAAG,GAAI,CAAA,sBAAJ,CAA2B,eAA3B,CAA4C,KAAK,CAAC,WAAlD,CAAnB,CACA,MAAO,CAAA,sBAAsB,CAAC,UAAD,CAAa,GAAb,CAA7B,CACH,CAED,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,sDADkC,CAEtC,MAAM,CAAgC,qBAFA,CAGtC,KAAK,CAAE,WAH+B,CAAD,CAAzC","sourcesContent":["import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny,\n    ICommerceApiSettings, ICreateActionContext, IGeneric\n} from '@msdyn365-commerce/core';\nimport {\n    CountryRegionInfo, StateProvinceInfo\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getCountryRegionsAction, GetCountryRegionsInput } from './get-country-regions';\nimport { getStateProvinceAction, GetStateProvincesInput } from './get-state-provinces';\n\n/**\n * Input class for get country regions data action\n */\nexport class GetCountryStateInput implements IActionInput {\n    public locale: string;\n    public apiSettings: ICommerceApiSettings;\n\n    constructor(locale: string, apiSettings: ICommerceApiSettings) {\n        this.locale = locale;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`CountryStateInfo-${this.locale}`, this.apiSettings);\n    public getCacheObjectType = () => 'StateProvinceInfo';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetCountryStateInput => {\n    const { locale, apiSettings } = inputData.requestContext;\n    if (!(inputData.requestContext && locale)) {\n        throw new Error('Unable to create country regions input.  Locale is not provided.');\n    }\n    return new GetCountryStateInput(locale, apiSettings);\n};\n\nexport async function getCountryStateAction(input: GetCountryStateInput, ctx: IActionContext): Promise<StateProvinceInfo[]> {\n    const countryInput = new GetCountryRegionsInput(input.locale, input.apiSettings);\n    const countryRegionsInfo = await getCountryRegionsAction(countryInput, ctx);\n\n    const channelConfiguration = ctx.requestContext.channel;\n\n    const marketISOCode = channelConfiguration && channelConfiguration.ChannelCountryRegionISOCode || 'US';\n    const currentCountryRegion = countryRegionsInfo.find(countryRegion => (countryRegion.ISOCode || '') === marketISOCode);\n    const countryRegionId = (currentCountryRegion && currentCountryRegion.CountryRegionId) || 'USA';\n\n    const stateInput = new GetStateProvincesInput(countryRegionId, input.apiSettings);\n    return getStateProvinceAction(stateInput, ctx);\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/address/get-country-state',\n    action: <IAction<CountryRegionInfo[]>>getCountryStateAction,\n    input: createInput\n});"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}