{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{msdyn365Commerce}from'@msdyn365-commerce/core-internal';import{LogLevel}from'@msdyn365-commerce/telemetry-internal';import express from'express';import{getFailedModulesList}from'../Definition/moduleDefinition';var healthy=true;process.on('SIGTERM',function(){healthy=false;});var healthCheck=function healthCheck(req,res){var telemetry=res.locals.telemetry;Promise.resolve().then(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var moduleBindings,failedModuleDefinitions;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(healthy){_context.next=3;break;}telemetry.log(LogLevel.Information,'Server is in shutdown mode, due to sigterm signal');return _context.abrupt(\"return\",res.status(503));case 3:// @ts-ignore\nmoduleBindings=msdyn365Commerce.getAllModuleBinder();if(!(!moduleBindings||!moduleBindings.length)){_context.next=7;break;}telemetry.log(LogLevel.Error,'Environment is unhealthy. no modules found');return _context.abrupt(\"return\",res.status(503).send('Environment is unhealthy. no modules found'));case 7:failedModuleDefinitions=getFailedModulesList();if(!failedModuleDefinitions.length){_context.next=11;break;}telemetry.log(LogLevel.Error,'Environment is unhealthy, contains modules with definition errors');return _context.abrupt(\"return\",res.status(503).send('Environment is unhealthy, contains modules with definition errors'));case 11:return _context.abrupt(\"return\",res.status(200).send(\"Environment is healthy!\"));case 12:case\"end\":return _context.stop();}}},_callee);})))[\"catch\"](function(error){telemetry.log(LogLevel.Error,'Environment check encountered error',{exception:error});return res.status(503).send({message:'Environment check encountered error',exception:error});});};export default function(){var healthRouter=express.Router();healthRouter.get('/keepalive',function(req,res){return res.status(200).send('Server is up!');}).get('/environmenthealth',healthCheck).get('/containerhealth',healthCheck);return healthRouter;}","map":{"version":3,"sources":["../../../../src/_server/request-routers/health-router.ts"],"names":[],"mappings":"uIAAA;;;AAGG,GACH,OAAS,gBAAT,KAAiC,kCAAjC,CACA,OAA4B,QAA5B,KAA4C,uCAA5C,CACA,MAAO,CAAA,OAAP,KAAmD,SAAnD,CAEA,OAAS,oBAAT,KAAqC,gCAArC,CAEA,GAAI,CAAA,OAAO,CAAG,IAAd,CACA,OAAO,CAAC,EAAR,CAAW,SAAX,CAAsB,UAAK,CACvB,OAAO,CAAG,KAAV,CACH,CAFD,EAIA,GAAM,CAAA,WAAW,CAAG,QAAd,CAAA,WAAc,CAAC,GAAD,CAAe,GAAf,CAAgC,CAChD,GAAM,CAAA,SAAS,CAAsB,GAAG,CAAC,MAAJ,CAAW,SAAhD,CACA,OAAO,CAAC,OAAR,GACK,IADL,sEACU,iLACG,OADH,yBAEE,SAAS,CAAC,GAAV,CAAc,QAAQ,CAAC,WAAvB,CAAoC,mDAApC,EAFF,gCAGS,GAAG,CAAC,MAAJ,CAAW,GAAX,CAHT,SAKF;AACM,cANJ,CAMkD,gBAAiB,CAAC,kBAAlB,EANlD,MAOE,CAAC,cAAD,EAAmB,CAAC,cAAc,CAAC,MAPrC,0BAQE,SAAS,CAAC,GAAV,CAAc,QAAQ,CAAC,KAAvB,CAA8B,4CAA9B,EARF,gCASS,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,4CAArB,CATT,SAWI,uBAXJ,CAW8B,oBAAoB,EAXlD,KAYE,uBAAuB,CAAC,MAZ1B,0BAaE,SAAS,CAAC,GAAV,CAAc,QAAQ,CAAC,KAAvB,CAA8B,mEAA9B,EAbF,gCAcS,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,mEAArB,CAdT,0CAiBK,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,2BAjBL,yDADV,aAoBW,SAAA,KAAK,CAAG,CACX,SAAS,CAAC,GAAV,CAAc,QAAQ,CAAC,KAAvB,CAA8B,qCAA9B,CAAqE,CAAE,SAAS,CAAE,KAAb,CAArE,EACA,MAAO,CAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,CAAE,OAAO,CAAE,qCAAX,CAAkD,SAAS,CAAE,KAA7D,CAArB,CAAP,CACH,CAvBL,EAwBH,CA1BD,CA4BA,cAAc,WAAA,CACV,GAAM,CAAA,YAAY,CAAG,OAAO,CAAC,MAAR,EAArB,CAEA,YAAY,CACP,GADL,CACS,YADT,CACuB,SAAC,GAAD,CAAe,GAAf,QAAiC,CAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,eAArB,CAAjC,EADvB,EAEK,GAFL,CAES,oBAFT,CAE+B,WAF/B,EAGK,GAHL,CAGS,kBAHT,CAG6B,WAH7B,EAKA,MAAO,CAAA,YAAP,CACH","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { msdyn365Commerce } from '@msdyn365-commerce/core-internal';\nimport { InternalTelemetry, LogLevel } from '@msdyn365-commerce/telemetry-internal';\nimport express, { Request, Response, Router } from 'express';\nimport { IMSDyn365CommerceExtension } from '../../app-initialization/models';\nimport { getFailedModulesList } from '../Definition/moduleDefinition';\n\nlet healthy = true;\nprocess.on('SIGTERM', () => {\n    healthy = false;\n});\n\nconst healthCheck = (req: Request, res: Response) => {\n    const telemetry: InternalTelemetry = res.locals.telemetry;\n    Promise.resolve()\n        .then(async () => {\n            if (!healthy) {\n                telemetry.log(LogLevel.Information, 'Server is in shutdown mode, due to sigterm signal');\n                return res.status(503);\n            }\n            // @ts-ignore\n            const moduleBindings = (<IMSDyn365CommerceExtension>msdyn365Commerce).getAllModuleBinder();\n            if (!moduleBindings || !moduleBindings.length) {\n                telemetry.log(LogLevel.Error, 'Environment is unhealthy. no modules found');\n                return res.status(503).send('Environment is unhealthy. no modules found');\n            }\n            const failedModuleDefinitions = getFailedModulesList();\n            if (failedModuleDefinitions.length) {\n                telemetry.log(LogLevel.Error, 'Environment is unhealthy, contains modules with definition errors');\n                return res.status(503).send('Environment is unhealthy, contains modules with definition errors');\n            }\n\n            return res.status(200).send(`Environment is healthy!`);\n        })\n        .catch(error => {\n            telemetry.log(LogLevel.Error, 'Environment check encountered error', { exception: error });\n            return res.status(503).send({ message: 'Environment check encountered error', exception: error });\n        });\n};\n\nexport default function(): Router {\n    const healthRouter = express.Router();\n\n    healthRouter\n        .get('/keepalive', (req: Request, res: Response) => res.status(200).send('Server is up!'))\n        .get('/environmenthealth', healthCheck)\n        .get('/containerhealth', healthCheck);\n\n    return healthRouter;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}