{"ast":null,"code":"import\"core-js/modules/es.object.assign.js\";import\"core-js/modules/es.string.replace.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import createDOMPurify from'dompurify';import React,{Component}from'react';import ContentEditable from'react-contenteditable';import{FieldType}from'./editable-field';import{getEditableFieldClassName}from'./utils';/**\r\n * Component class for text field\r\n */export class TextField extends Component{constructor(props){super(props);this.state={displayHtml:props.fieldProps.text};this._onChange=this._onChange.bind(this);this._onBlur=this._onBlur.bind(this);this.isEmpty=false;}componentWillReceiveProps(nextProps){if(this.props.fieldProps.text!==nextProps.fieldProps.text){this.isEmpty=this._isTextEmpty(nextProps.fieldProps.text);// hook to handle props changes - when a field is changed between edit enabled/disabled states\nthis.state={displayHtml:this._getDisplayText(nextProps.fieldProps.text)};}}render(){if(!!this.props.disabled){return this.props.fieldProps.text?/*#__PURE__*/React.createElement(ContentEditable,{html:this.state.displayHtml,tagName:this.props.fieldProps.tag,disabled:true,onChange:this._onChange,className:getEditableFieldClassName(true,this.props.fieldProps.className,this.props.requestContext)}):null;}return/*#__PURE__*/React.createElement(ContentEditable,Object.assign({html:this.state.displayHtml,tagName:this.props.fieldProps.tag,disabled:false,onChange:this._onChange||this._onChange,onFocus:this.props.onFocus,onBlur:this.props.onBlur||this._onBlur,onMouseOver:this.props.onMouseOver,onMouseOut:this.props.onMouseOut,className:getEditableFieldClassName(false,this.props.fieldProps.className,this.props.requestContext)},this.props.fieldProps.additionalProperties||{}));}_onChange(event){if(this.props.onChange){const displayValue=this.props.type===FieldType.Text||this.props.type===FieldType.Link?event.currentTarget.innerText:event.target.value;this.isEmpty=this._isTextEmpty(displayValue);this.setState({displayHtml:!this.isEmpty?displayValue:''});event.target.value=displayValue;this.props.onChange(event);}}_onBlur(event){if(this.isEmpty&&!!this.props.fieldProps.required){this.setState({displayHtml:this._getDisplayText(this.props.fieldProps.text)});}}_getDisplayText(text){return!!this.props.fieldProps.required&&this.isEmpty?this.props.placeholderText||'Click to Edit':text;}_isTextEmpty(text){const DOMPurify=createDOMPurify(window);const sanitizedText=DOMPurify.sanitize(text,{ALLOWED_TAGS:[]}).replace(/\\n/,'');return sanitizedText==='';}}","map":{"version":3,"sources":["../../../../src/utilities/editable-fields/text-field.tsx"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport createDOMPurify from 'dompurify';\nimport React, { Component } from 'react';\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable';\nimport { FieldType, IEditableFieldProps, IText } from './editable-field';\nimport { getEditableFieldClassName } from './utils';\n\n/**\n * Component class for text field\n */\nexport class TextField extends Component<IEditableFieldProps<IText>, { displayHtml: string }> {\n    private isEmpty: boolean;\n    constructor(props: { isFocused: boolean } & IEditableFieldProps<IText>) {\n        super(props);\n        this.state = {\n            displayHtml: props.fieldProps.text\n        };\n\n        this._onChange = this._onChange.bind(this);\n        this._onBlur = this._onBlur.bind(this);\n        this.isEmpty = false;\n    }\n\n    public componentWillReceiveProps(nextProps: IEditableFieldProps<IText>): void {\n        if (this.props.fieldProps.text !== nextProps.fieldProps.text) {\n            this.isEmpty = this._isTextEmpty(nextProps.fieldProps.text);\n\n            // hook to handle props changes - when a field is changed between edit enabled/disabled states\n            this.state = {\n                displayHtml: this._getDisplayText(nextProps.fieldProps.text)\n            };\n        }\n    }\n\n    public render(): JSX.Element | null {\n        if (!!this.props.disabled) {\n            return this.props.fieldProps.text ? (\n                <ContentEditable\n                    html={this.state.displayHtml}\n                    tagName={this.props.fieldProps.tag}\n                    disabled={true}\n                    onChange={this._onChange}\n                    className={getEditableFieldClassName(true, this.props.fieldProps.className, this.props.requestContext)}\n                />\n            ) : null;\n        }\n\n        return (\n            <ContentEditable\n                html={this.state.displayHtml}\n                tagName={this.props.fieldProps.tag}\n                disabled={false}\n                onChange={this._onChange || this._onChange}\n                onFocus={this.props.onFocus}\n                onBlur={this.props.onBlur || this._onBlur}\n                onMouseOver={this.props.onMouseOver}\n                onMouseOut={this.props.onMouseOut}\n                className={getEditableFieldClassName(false, this.props.fieldProps.className, this.props.requestContext)}\n                {...(this.props.fieldProps.additionalProperties || {})}\n            />\n        );\n    }\n\n    private _onChange(event: ContentEditableEvent): void {\n        if (this.props.onChange) {\n            const displayValue =\n                this.props.type === FieldType.Text || this.props.type === FieldType.Link\n                    ? event.currentTarget.innerText\n                    : event.target.value;\n            this.isEmpty = this._isTextEmpty(displayValue);\n            this.setState({\n                displayHtml: !this.isEmpty ? displayValue : ''\n            });\n            event.target.value = displayValue;\n            this.props.onChange(event);\n        }\n    }\n\n    private _onBlur(event: React.FocusEvent<HTMLDivElement>): void {\n        if (this.isEmpty && !!this.props.fieldProps.required) {\n            this.setState({\n                displayHtml: this._getDisplayText(this.props.fieldProps.text)\n            });\n        }\n    }\n\n    private _getDisplayText(text: string): string {\n        return !!this.props.fieldProps.required && this.isEmpty ? this.props.placeholderText || 'Click to Edit' : text;\n    }\n\n    private _isTextEmpty(text: string): boolean {\n        const DOMPurify = createDOMPurify(window);\n        const sanitizedText = DOMPurify.sanitize(text, {\n            ALLOWED_TAGS: []\n        }).replace(/\\n/, '');\n\n        return sanitizedText === '';\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}