{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";import _inherits from\"@babel/runtime/helpers/esm/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/esm/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import{__decorate}from\"tslib\";import classnames from'classnames';import{observable}from'mobx';import{observer}from'mobx-react';import*as React from'react';import{getTelemetryObject,Modal,ModalBody}from'@msdyn365-commerce-modules/utilities';import*as Msdyn365 from'@msdyn365-commerce/core';import PasswordResetButtonComponent from'./components/password-reset-button';import PasswordResetErrorComponent from'./components/password-reset-error';import PasswordResetInputComponent from'./components/password-reset-input';import PasswordResetLabelComponent from'./components/password-reset-label';import PasswordResetLoadingIconComponent from'./components/password-reset-loading-icon';import PasswordResetLoadingMessageComponent from'./components/password-reset-loading-message';var PasswordReset=/*#__PURE__*/function(_React$Component){_inherits(PasswordReset,_React$Component);var _super=_createSuper(PasswordReset);function PasswordReset(props){var _this;_classCallCheck(this,PasswordReset);_this=_super.call(this,props);_this.moduleClassName='ms-password-reset';_this.handleHeadingChange=function(event){return _this.props.config.heading.text=event.target.value;};_this._onInit=function(){_this._prePopulateData();_this._updateErrorMessage();_this.initializationTimer=setInterval(function(){_this._isInitializationSuccessful();},100);setTimeout(function(){clearInterval(_this.initializationTimer);},10000);};_this._isInitializationSuccessful=function(){if(window&&window['$diags']&&window['$diags']['initializationSuccessful']){clearInterval(_this.initializationTimer);_this.isInitialized=true;}};_this._prePopulateData=function(){if(window['SA_FIELDS']&&window['SA_FIELDS']['AttributeFields']){window['SA_FIELDS']['AttributeFields'].map(function(obj){switch(obj.ID.toLowerCase()){case'newpassword':{_this.newPasswordRegex=obj.PAT;break;}case'reenterpassword':{_this.reenterPasswordRegex=obj.PAT;break;}default:}});}};_this._updateErrorMessage=function(){var resources=_this.props.resources;if(window&&window['CONTENT']){var message={verifying_blurb:resources.loadingMessage};Object.assign(window['CONTENT'],message);}};var passwordDefaultRegex='^((?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\\\\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\\\\d)(?=.*[^A-Za-z0-9]))([A-Za-z\\\\d@#$%^&*\\\\-_+=[\\\\]{}|\\\\\\\\:\\',?/`~\\'();!]|\\\\.(?!@)){8,16}$';_this.newPasswordRegex=passwordDefaultRegex;_this.reenterPasswordRegex=passwordDefaultRegex;_this.isInitialized=false;_this.telemetryContent=getTelemetryObject(_this.props.context.request.telemetryPageName,_this.props.friendlyName,_this.props.telemetry);return _this;}_createClass(PasswordReset,[{key:\"componentDidMount\",value:function componentDidMount(){this._onInit();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){if(this.isInitialized&&window&&window['$element']&&window['$element']['initialize']){window['$element']['initialize']();}}},{key:\"render\",value:function render(){var _this$props=this.props,config=_this$props.config,resources=_this$props.resources;var viewProps=_objectSpread(_objectSpread({},this.props),{},{viewState:{isShowLoading:!this.isInitialized},passwordReset:{moduleProps:this.props,className:classnames(this.moduleClassName,config.className)},loading:{modal:{tag:Modal,isOpen:true},modalBody:{tag:ModalBody},icon:/*#__PURE__*/React.createElement(PasswordResetLoadingIconComponent,{className:this.moduleClassName}),message:/*#__PURE__*/React.createElement(PasswordResetLoadingMessageComponent,{className:this.moduleClassName,message:resources.loadingMessage})},defaultAADConainer:{id:'api',style:{display:'none'}},aadConainer:{id:this.isInitialized?'api':null,className:\"\".concat(this.moduleClassName,\"__container\")},heading:config.heading&&/*#__PURE__*/React.createElement(Msdyn365.Text,Object.assign({className:\"\".concat(this.moduleClassName,\"__heading\")},config.heading,{editProps:{onEdit:this.handleHeadingChange,requestContext:this.props.context.request}})),passwordResetLocalAccount:this._renderLocalAccount()});return this.props.renderView(viewProps);}},{key:\"_renderLocalAccount\",value:function _renderLocalAccount(){var resources=this.props.resources;return{localAccount:{id:'attributeList',className:\"\".concat(this.moduleClassName,\"__account-items attr\")},items:[this._renderInput('newPassword','password',resources.newPasswordLabelText,this.newPasswordRegex),this._renderInput('reenterPassword','password',resources.confirmPasswordLabelText,this.reenterPasswordRegex)],errorMessage:[/*#__PURE__*/React.createElement(PasswordResetErrorComponent,{key:'passwordEntryMismatch',id:'passwordEntryMismatch',className:this.moduleClassName,message:resources.passwordEntryMismatchError}),/*#__PURE__*/React.createElement(PasswordResetErrorComponent,{key:'requiredFieldMissing',id:'requiredFieldMissing',className:this.moduleClassName,message:resources.requiredFieldMissingError}),/*#__PURE__*/React.createElement(PasswordResetErrorComponent,{key:'email_fail_throttled',id:'fieldIncorrect',className:this.moduleClassName,message:resources.fieldIncorrectError}),/*#__PURE__*/React.createElement(PasswordResetErrorComponent,{key:'claimVerificationServerError',id:'claimVerificationServerError',className:this.moduleClassName})],buttonsWrapper:{className:\"\".concat(this.moduleClassName,\"__buttons\")},buttons:[/*#__PURE__*/React.createElement(PasswordResetButtonComponent,{key:'continue',id:'continue',className:\"\".concat(this.moduleClassName,\"__continue-button\"),ariaLabel:resources.saveButtonAriaLabel,text:resources.saveButtonText,telemetryContent:this.telemetryContent}),/*#__PURE__*/React.createElement(PasswordResetButtonComponent,{key:'cancel',id:'cancel',className:\"\".concat(this.moduleClassName,\"__cancel-button\"),ariaLabel:resources.cancelButtonText,text:resources.cancelButtonText,telemetryContent:this.telemetryContent})],verificationSuccessModal:{className:\"\".concat(this.moduleClassName,\"__verifying-modal verifying-modal\")},verificationSuccessModalMessage:{id:'verifying_blurb',className:\"\".concat(this.moduleClassName,\"__verifying-modal-message\")}};}},{key:\"_renderInput\",value:function _renderInput(id,type,labelText,pattern){var className=\"\".concat(this.moduleClassName,\"__account-item\");return{wrapper:{className:classnames(className,\"\".concat(className,\"-\").concat(id),'entry-item','attrEntry')},key:id,label:/*#__PURE__*/React.createElement(PasswordResetLabelComponent,Object.assign({},{id:id,forId:id,className:className,text:labelText})),errorMessage:/*#__PURE__*/React.createElement(PasswordResetErrorComponent,Object.assign({},{className:this.moduleClassName,type:'item'})),input:/*#__PURE__*/React.createElement(PasswordResetInputComponent,Object.assign({},{id:id,type:type,pattern:pattern,className:className}))};}}]);return PasswordReset;}(React.Component);__decorate([observable],PasswordReset.prototype,\"newPasswordRegex\",void 0);__decorate([observable],PasswordReset.prototype,\"reenterPasswordRegex\",void 0);__decorate([observable],PasswordReset.prototype,\"isInitialized\",void 0);PasswordReset=__decorate([observer],PasswordReset);export default PasswordReset;","map":{"version":3,"sources":["modules/password-reset/password-reset.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport {\n    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody\n} from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\n\nimport PasswordResetButtonComponent from './components/password-reset-button';\nimport PasswordResetErrorComponent from './components/password-reset-error';\nimport PasswordResetInputComponent from './components/password-reset-input';\nimport PasswordResetLabelComponent from './components/password-reset-label';\nimport PasswordResetLoadingIconComponent from './components/password-reset-loading-icon';\nimport PasswordResetLoadingMessageComponent from './components/password-reset-loading-message';\nimport { IPasswordResetConfig, IPasswordResetProps } from './password-reset.props.autogenerated';\n\nexport interface IPasswordResetViewState {\n    isShowLoading: boolean;\n}\n\nexport interface IPasswordResetItem {\n    wrapper: INodeProps;\n    key: string;\n    label: React.ReactNode;\n    errorMessage: React.ReactNode;\n    input: React.ReactNode;\n}\n\nexport interface IPasswordResetLocalAccount {\n    localAccount: INodeProps;\n    items: IPasswordResetItem[];\n    errorMessage: React.ReactNode[];\n    buttonsWrapper: INodeProps;\n    buttons: React.ReactNode[];\n    verificationSuccessModal: INodeProps;\n    verificationSuccessModalMessage: INodeProps;\n}\n\nexport interface IPasswordResetLoading {\n    modal: INodeProps;\n    modalBody: INodeProps;\n    icon: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IPasswordResetViewProps {\n    className: string;\n    viewState: IPasswordResetViewState;\n    loading: IPasswordResetLoading;\n    passwordReset: IModuleProps;\n    defaultAADConainer: INodeProps;\n    aadConainer: INodeProps;\n    heading: React.ReactNode;\n    passwordResetLocalAccount: IPasswordResetLocalAccount;\n}\n\n/**\n *\n * PasswordReset component\n * @extends {React.Component<IPasswordResetProps<IPasswordResetConfig>>}\n */\n@observer\nclass PasswordReset extends React.Component<IPasswordResetProps<IPasswordResetConfig>> {\n\n    private moduleClassName: string = 'ms-password-reset';\n    private telemetryContent?: ITelemetryContent;\n    @observable private newPasswordRegex: string;\n    @observable private reenterPasswordRegex: string;\n\n    @observable private isInitialized: boolean;\n\n    // tslint:disable-next-line:no-any\n    private initializationTimer: any;\n\n    constructor(props: IPasswordResetProps<IPasswordResetConfig>) {\n        super(props);\n        // tslint:disable-next-line:max-line-length\n        const passwordDefaultRegex = '^((?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\\\\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\\\\d)(?=.*[^A-Za-z0-9]))([A-Za-z\\\\d@#$%^&*\\\\-_+=[\\\\]{}|\\\\\\\\:\\',?/`~\\'();!]|\\\\.(?!@)){8,16}$';\n        this.newPasswordRegex = passwordDefaultRegex;\n        this.reenterPasswordRegex = passwordDefaultRegex;\n        this.isInitialized = false;\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this._onInit();\n    }\n\n    // After successful AAD initialization, call initialize method provided by AAD to attach events.\n    public componentDidUpdate(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {\n            // tslint:disable-next-line:no-string-literal\n            window['$element']['initialize']();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { config, resources } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            viewState: {\n                isShowLoading: !this.isInitialized\n            },\n            passwordReset: {\n                moduleProps: this.props,\n                className: classnames(this.moduleClassName, config.className)\n            },\n            loading: {\n                modal: {\n                    tag: Modal,\n                    isOpen: true\n                },\n                modalBody: {\n                    tag: ModalBody\n                },\n                icon: <PasswordResetLoadingIconComponent className={this.moduleClassName} />,\n                message: <PasswordResetLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,\n            },\n            defaultAADConainer: {\n                id: 'api',\n                style: { display: 'none' }\n            },\n            aadConainer: {\n                id: this.isInitialized ? 'api' : null,\n                className: `${this.moduleClassName}__container`\n            },\n            heading: config.heading &&\n            <Msdyn365.Text className={`${this.moduleClassName}__heading`} {...config.heading}  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}/>,\n            passwordResetLocalAccount: this._renderLocalAccount()\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text= event.target.value;\n\n    public _onInit = () => {\n        this._prePopulateData();\n        this._updateErrorMessage();\n        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.\n        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);\n        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);\n    }\n\n    // After successful AAD initialization, remove waiting and preload any data, if needed.\n    private _isInitializationSuccessful = () => {\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {\n            clearInterval(this.initializationTimer);\n            this.isInitialized = true;\n        }\n    }\n\n    private _prePopulateData = () => {\n        // tslint:disable-next-line:no-string-literal\n        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {\n            // tslint:disable-next-line:no-string-literal\n            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PAT: string }) => {\n                switch (obj.ID.toLowerCase()) {\n                    case 'newpassword': {\n                        this.newPasswordRegex = obj.PAT;\n                        break;\n                    }\n                    case 'reenterpassword': {\n                        this.reenterPasswordRegex = obj.PAT;\n                        break;\n                    }\n                    default:\n                }\n            });\n        }\n    }\n\n    private _updateErrorMessage = () => {\n        const { resources } = this.props;\n\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['CONTENT']) {\n\n            const message = {\n                verifying_blurb: resources.loadingMessage\n            };\n\n            // tslint:disable-next-line:no-string-literal\n            Object.assign(window['CONTENT'], message);\n        }\n    }\n\n    private _renderLocalAccount(): IPasswordResetLocalAccount {\n        const { resources } = this.props;\n        return {\n            localAccount: {\n                id: 'attributeList',\n                className: `${this.moduleClassName}__account-items attr`\n            },\n            items: [\n                this._renderInput('newPassword', 'password', resources.newPasswordLabelText, this.newPasswordRegex),\n                this._renderInput('reenterPassword', 'password', resources.confirmPasswordLabelText, this.reenterPasswordRegex),\n            ],\n            errorMessage: [\n                <PasswordResetErrorComponent key='passwordEntryMismatch' id='passwordEntryMismatch' className={this.moduleClassName} message={resources.passwordEntryMismatchError} />,\n                <PasswordResetErrorComponent key='requiredFieldMissing' id='requiredFieldMissing' className={this.moduleClassName} message={resources.requiredFieldMissingError} />,\n                <PasswordResetErrorComponent key='email_fail_throttled' id='fieldIncorrect' className={this.moduleClassName} message={resources.fieldIncorrectError} />,\n                <PasswordResetErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />\n            ],\n            buttonsWrapper: {\n                className: `${this.moduleClassName}__buttons`,\n            },\n            buttons: [\n                <PasswordResetButtonComponent key='continue' id='continue' className={`${this.moduleClassName}__continue-button`} ariaLabel={resources.saveButtonAriaLabel} text={resources.saveButtonText} telemetryContent={this.telemetryContent} />,\n                <PasswordResetButtonComponent key='cancel' id='cancel' className={`${this.moduleClassName}__cancel-button`} ariaLabel={resources.cancelButtonText} text={resources.cancelButtonText} telemetryContent={this.telemetryContent} />\n            ],\n            verificationSuccessModal: {\n                className: `${this.moduleClassName}__verifying-modal verifying-modal`\n            },\n            verificationSuccessModalMessage: {\n                id: 'verifying_blurb',\n                className: `${this.moduleClassName}__verifying-modal-message`\n            }\n        };\n    }\n\n    private _renderInput(id: string, type: string, labelText: string, pattern?: string): IPasswordResetItem {\n        const className = `${this.moduleClassName}__account-item`;\n        return (\n            {\n                wrapper: {\n                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')\n                },\n                key: id,\n                label: (\n                    <PasswordResetLabelComponent\n                        {\n                        ...{\n                            id: id,\n                            forId: id,\n                            className: className,\n                            text: labelText\n                        }\n                        }\n                    />\n                ),\n                errorMessage: (\n                    <PasswordResetErrorComponent\n                        {\n                        ...{\n                            className: this.moduleClassName,\n                            type: 'item'\n                        }\n                        }\n                    />\n                ),\n                input: (\n                    <PasswordResetInputComponent\n                        {\n                        ...{\n                            id: id,\n                            type: type,\n                            pattern: pattern,\n                            className: className\n                        }\n                        }\n                    />\n                )\n\n            }\n        );\n    }\n\n}\n\nexport default PasswordReset;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}