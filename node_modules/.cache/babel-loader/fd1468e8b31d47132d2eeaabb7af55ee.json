{"ast":null,"code":"import\"core-js/modules/es.object.assign.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import*as React from'react';const withVisibilyObserver=WrappedComponent=>{class VisibilyObserver extends React.Component{constructor(){super(...arguments);this.state={isVisible:false,errorMessage:'',observer:undefined};this.selfRef=/*#__PURE__*/React.createRef();this.initMutationObserver=()=>{const targetNode=document.getElementsByTagName('body')&&document.getElementsByTagName('body')[0];if(!targetNode){this.setState({errorMessage:'No body element found'});return;}if(!MutationObserver){this.setState({errorMessage:'MutationObserver is not supported'});return;}const config={attributes:true,childList:true,subtree:true};const _observer=new MutationObserver(()=>this.handleVisibilityChange());_observer.observe(targetNode,config);this.setState({observer:_observer});};this.stopMutationObserver=()=>{this.state.observer&&this.state.observer.disconnect();};this.handleVisibilityChange=()=>{const isVisible=!!this.selfRef.current&&this.selfRef.current.offsetWidth>0&&this.selfRef.current.offsetHeight>0;if(!this.state.isVisible&&isVisible){this.setState({isVisible});this.stopMutationObserver();}};}componentDidMount(){this.initMutationObserver();}componentWillUnmount(){this.stopMutationObserver();}render(){return/*#__PURE__*/React.createElement(\"div\",{className:'ms-checkout-payment-instrument__mutation-observer',ref:this.selfRef},/*#__PURE__*/React.createElement(WrappedComponent,Object.assign({},this.props,{visibilityObserver:this.state})));}}return VisibilyObserver;};export default withVisibilyObserver;","map":{"version":3,"sources":["modules/checkout-payment-instrument/components/with-visibility-observer.tsx"],"names":[],"mappings":"oGAIA,MAAO,GAAK,CAAA,KAAZ,KAAuB,OAAvB,CAYA,KAAM,CAAA,oBAAoB,CAAsC,gBAAnC,EAAuG,CAMhI,KAAM,CAAA,gBAAN,QAA+B,CAAA,KAAK,CAAC,SAAY,CAAjD,WAAA,EAAA,C,oBACW,KAAA,KAAA,CAAgC,CACnC,SAAS,CAAE,KADwB,CAEnC,YAAY,CAAE,EAFqB,CAGnC,QAAQ,CAAE,SAHyB,CAAhC,CAMC,KAAA,OAAA,cAA2C,KAAK,CAAC,SAAN,EAA3C,CAkBA,KAAA,oBAAA,CAAuB,IAAW,CAEtC,KAAM,CAAA,UAAU,CAAG,QAAQ,CAAC,oBAAT,CAA8B,MAA9B,GAAyC,QAAQ,CAAC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAA5D,CACA,GAAI,CAAC,UAAL,CAAiB,CACb,KAAK,QAAL,CAAc,CACV,YAAY,CAAE,uBADJ,CAAd,EAGA,OACH,CAED,GAAI,CAAC,gBAAL,CAAuB,CACnB,KAAK,QAAL,CAAc,CACV,YAAY,CAAE,mCADJ,CAAd,EAGA,OACH,CAGD,KAAM,CAAA,MAAM,CAAG,CAAE,UAAU,CAAE,IAAd,CAAoB,SAAS,CAAE,IAA/B,CAAqC,OAAO,CAAE,IAA9C,CAAf,CAGA,KAAM,CAAA,SAAS,CAAG,GAAI,CAAA,gBAAJ,CAAqB,IAAM,KAAK,sBAAL,EAA3B,CAAlB,CACA,SAAS,CAAC,OAAV,CAAkB,UAAlB,CAA8B,MAA9B,EAEA,KAAK,QAAL,CAAc,CACV,QAAQ,CAAE,SADA,CAAd,EAGH,CA3BO,CA6BA,KAAA,oBAAA,CAAuB,IAAW,CACtC,KAAK,KAAL,CAAW,QAAX,EAAuB,KAAK,KAAL,CAAW,QAAX,CAAoB,UAApB,EAAvB,CACH,CAFO,CAIA,KAAA,sBAAA,CAAyB,IAAW,CAExC,KAAM,CAAA,SAAS,CAAG,CAAC,CAAC,KAAK,OAAL,CAAa,OAAf,EAA0B,KAAK,OAAL,CAAa,OAAb,CAAqB,WAArB,CAAmC,CAA7D,EAAkE,KAAK,OAAL,CAAa,OAAb,CAAqB,YAArB,CAAoC,CAAxH,CACA,GAAI,CAAC,KAAK,KAAL,CAAW,SAAZ,EAAyB,SAA7B,CAAwC,CACpC,KAAK,QAAL,CAAc,CACV,SADU,CAAd,EAGA,KAAK,oBAAL,GACH,CACJ,CATO,CAUX,CA3DU,iBAAiB,EAAA,CACpB,KAAK,oBAAL,GACH,CAEM,oBAAoB,EAAA,CACvB,KAAK,oBAAL,GACH,CAEM,MAAM,EAAA,CACT,mBACI,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CAAK,SAAS,CAAC,mDAAf,CAAmE,GAAG,CAAE,KAAK,OAA7E,CAAA,cACI,KAAA,CAAA,aAAA,CAAC,gBAAD,CAAiB,MAAA,CAAA,MAAA,CAAA,EAAA,CAAK,KAAK,KAAV,CAAe,CAAE,kBAAkB,CAAE,KAAK,KAA3B,CAAf,CAAjB,CADJ,CADJ,CAKH,CAvB4C,CAsEjD,MAAO,CAAA,gBAAP,CACH,CA7ED,CA+EA,cAAe,CAAA,oBAAf","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\n\ninterface IVisibilyObserverState {\n    isVisible?: boolean;\n    errorMessage?: string;\n    observer?: MutationObserver;\n}\n\nexport interface IVisibilyObserverProps {\n    visibilityObserver?: IVisibilyObserverState;\n}\n\nconst withVisibilyObserver = <P extends IVisibilyObserverProps>(WrappedComponent: React.ComponentType<P>): React.ComponentType<P> => {\n    /**\n     *\n     * VisibilyObserver component\n     * @extends {React.Component<P>}\n     */\n    class VisibilyObserver extends React.Component<P> {\n        public state: IVisibilyObserverState = {\n            isVisible: false,\n            errorMessage: '',\n            observer: undefined\n        };\n\n        private selfRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n        public componentDidMount(): void {\n            this.initMutationObserver();\n        }\n\n        public componentWillUnmount(): void {\n            this.stopMutationObserver();\n        }\n\n        public render(): JSX.Element | null {\n            return (\n                <div className='ms-checkout-payment-instrument__mutation-observer' ref={this.selfRef}>\n                    <WrappedComponent {...this.props} visibilityObserver={this.state} />\n                </div>\n            );\n        }\n\n        private initMutationObserver = (): void => {\n            // Select the node that will be observed for mutations\n            const targetNode = document.getElementsByTagName('body') && document.getElementsByTagName('body')[0];\n            if (!targetNode) {\n                this.setState({\n                    errorMessage: 'No body element found'\n                });\n                return;\n            }\n\n            if (!MutationObserver) {\n                this.setState({\n                    errorMessage: 'MutationObserver is not supported'\n                });\n                return;\n            }\n\n            // Options for the observer (which mutations to observe)\n            const config = { attributes: true, childList: true, subtree: true };\n\n            // Create an observer instance linked to the callback function\n            const _observer = new MutationObserver(() => this.handleVisibilityChange());\n            _observer.observe(targetNode, config);\n\n            this.setState({\n                observer: _observer\n            });\n        };\n\n        private stopMutationObserver = (): void => {\n            this.state.observer && this.state.observer.disconnect();\n        };\n\n        private handleVisibilityChange = (): void => {\n            // If module is visible or not\n            const isVisible = !!this.selfRef.current && this.selfRef.current.offsetWidth > 0 && this.selfRef.current.offsetHeight > 0;\n            if (!this.state.isVisible && isVisible) {\n                this.setState({\n                    isVisible\n                });\n                this.stopMutationObserver();\n            }\n        };\n    }\n\n    return VisibilyObserver;\n};\n\nexport default withVisibilyObserver;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}