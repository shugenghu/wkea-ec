{"ast":null,"code":"import\"core-js/modules/es.object.assign.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import React from'react';import{placeholderImageUrl}from'../../components/image';import{getEditableFieldClassName}from'./utils';export const ImageField=props=>{const onKeyPress=event=>{// 'enter' key\nif(event.charCode===13&&props.onChange){event.preventDefault();props.onChange(event);}};const editableProps=props.disabled?{}:{onKeyPress:onKeyPress,onDoubleClick:props.onChange,onMouseOver:props.onMouseOver,onFocus:props.onFocus,onBlur:props.onBlur,onMouseOut:props.onMouseOut,tabIndex:0};// tslint:disable-next-line: no-any\nconst fieldProps=_objectSpread(_objectSpread({},props.fieldProps),{},{editProps:undefined});// If the image source is the placeholder image, set it's height to 1px\nif(props.fieldProps.src===placeholderImageUrl&&(!props.fieldProps['data-src']||props.fieldProps['data-src']===placeholderImageUrl)){fieldProps.height='1px';}return/*#__PURE__*/React.createElement(\"img\",Object.assign({},fieldProps,editableProps,{className:getEditableFieldClassName(props.disabled,props.fieldProps.className,props.requestContext)},props.fieldProps.additionalProperties||{}));};","map":{"version":3,"sources":["../../../../src/utilities/editable-fields/image-field.tsx"],"names":[],"mappings":"+4BAAA;;;AAGG,GAEH,MAAO,CAAA,KAAP,KAAkB,OAAlB,CACA,OAAS,mBAAT,KAAoC,wBAApC,CAGA,OAAS,yBAAT,KAA0C,SAA1C,CAEA,MAAO,MAAM,CAAA,UAAU,CAAI,KAAD,EAA+C,CACrE,KAAM,CAAA,UAAU,CAAI,KAAD,EAAiD,CAChE;AACA,GAAI,KAAK,CAAC,QAAN,GAAmB,EAAnB,EAAyB,KAAK,CAAC,QAAnC,CAA6C,CACzC,KAAK,CAAC,cAAN,GACA,KAAK,CAAC,QAAN,CAAe,KAAf,EACH,CACJ,CAND,CAQA,KAAM,CAAA,aAAa,CAAG,KAAK,CAAC,QAAN,CAChB,EADgB,CAEhB,CACI,UAAU,CAAE,UADhB,CAEI,aAAa,CAAE,KAAK,CAAC,QAFzB,CAGI,WAAW,CAAE,KAAK,CAAC,WAHvB,CAII,OAAO,CAAE,KAAK,CAAC,OAJnB,CAKI,MAAM,CAAE,KAAK,CAAC,MALlB,CAMI,UAAU,CAAE,KAAK,CAAC,UANtB,CAOI,QAAQ,CAAE,CAPd,CAFN,CAYA;AACA,KAAM,CAAA,UAAU,gCACT,KAAK,CAAC,UADG,MAEZ,SAAS,CAAE,SAFC,EAAhB,CAKA;AACA,GACI,KAAK,CAAC,UAAN,CAAiB,GAAjB,GAAyB,mBAAzB,GACC,CAAC,KAAK,CAAC,UAAN,CAAiB,UAAjB,CAAD,EAAiC,KAAK,CAAC,UAAN,CAAiB,UAAjB,IAAiC,mBADnE,CADJ,CAGE,CACE,UAAU,CAAC,MAAX,CAAoB,KAApB,CACH,CACD,mBACI,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,CACQ,UADR,CAEQ,aAFR,CAEqB,CACjB,SAAS,CAAE,yBAAyB,CAAC,KAAK,CAAC,QAAP,CAAiB,KAAK,CAAC,UAAN,CAAiB,SAAlC,CAA6C,KAAK,CAAC,cAAnD,CADnB,CAFrB,CAIS,KAAK,CAAC,UAAN,CAAiB,oBAAjB,EAAyC,EAJlD,CAAA,CADJ,CAQH,CA1CM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport React from 'react';\nimport { placeholderImageUrl } from '../../components/image';\nimport { IAny, IGeneric } from '../../interfaces';\nimport { IEditableFieldProps } from './editable-field';\nimport { getEditableFieldClassName } from './utils';\n\nexport const ImageField = (props: IEditableFieldProps<IGeneric<IAny>>) => {\n    const onKeyPress = (event: React.KeyboardEvent<HTMLImageElement>) => {\n        // 'enter' key\n        if (event.charCode === 13 && props.onChange) {\n            event.preventDefault();\n            props.onChange(event);\n        }\n    };\n\n    const editableProps = props.disabled\n        ? {}\n        : {\n              onKeyPress: onKeyPress,\n              onDoubleClick: props.onChange,\n              onMouseOver: props.onMouseOver,\n              onFocus: props.onFocus,\n              onBlur: props.onBlur,\n              onMouseOut: props.onMouseOut,\n              tabIndex: 0\n          };\n\n    // tslint:disable-next-line: no-any\n    const fieldProps: any = {\n        ...props.fieldProps,\n        editProps: undefined\n    };\n\n    // If the image source is the placeholder image, set it's height to 1px\n    if (\n        props.fieldProps.src === placeholderImageUrl &&\n        (!props.fieldProps['data-src'] || props.fieldProps['data-src'] === placeholderImageUrl)\n    ) {\n        fieldProps.height = '1px';\n    }\n    return (\n        <img\n            {...fieldProps}\n            {...editableProps}\n            className={getEditableFieldClassName(props.disabled, props.fieldProps.className, props.requestContext)}\n            {...(props.fieldProps.additionalProperties || {})}\n        />\n    );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}