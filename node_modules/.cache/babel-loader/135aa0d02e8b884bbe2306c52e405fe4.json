{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{EXCEPTION_PRODUCT_LIST_ACTION,INVALID_PRODUCT_LIST_TYPE}from'@msdyn365-commerce/telemetry-internal';import{ProductListInput,ProductListType}from'./hydrator-action-inputs';import{getProductsByCategoryListAction}from'./product-list-actions/products-by-category.action';import{getProductsByRecommendationListAction}from'./product-list-actions/products-by-recommendation.action';import{getProductsByRelationshipIdListAction}from'./product-list-actions/products-by-relationship-id.action';import{getProductsBySearchListAction}from'./product-list-actions/products-by-search.action';/**\r\n * Method to hydrate a product list from metadata provided by CMS\r\n * @param listMetaData The metadata for the product list from CMS\r\n */export var hydrateProductList=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listMetaData,context){var action;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=ProductListType[listMetaData.listType];_context.next=_context.t0===ProductListType.productBySearch?3:_context.t0===ProductListType.productByCategory?5:_context.t0===ProductListType.relatedProducts?7:_context.t0===ProductListType.editorial?9:_context.t0===ProductListType.algo?9:_context.t0===ProductListType.recommendation?9:11;break;case 3:action=getProductsBySearchListAction;return _context.abrupt(\"break\",14);case 5:action=getProductsByCategoryListAction;return _context.abrupt(\"break\",14);case 7:action=getProductsByRelationshipIdListAction;return _context.abrupt(\"break\",14);case 9:action=getProductsByRecommendationListAction;return _context.abrupt(\"break\",14);case 11:context.telemetry.error(INVALID_PRODUCT_LIST_TYPE,listMetaData.listType);listMetaData.products=[];listMetaData.listMetadata={error:INVALID_PRODUCT_LIST_TYPE};case 14:if(!(action!==undefined)){_context.next=16;break;}return _context.abrupt(\"return\",action(new ProductListInput(listMetaData,context),context).then(function(productList){listMetaData.products=productList;})[\"catch\"](function(error){context.telemetry.error(EXCEPTION_PRODUCT_LIST_ACTION);context.telemetry.exception(error);listMetaData.products=[];listMetaData.listMetadata={error:EXCEPTION_PRODUCT_LIST_ACTION};}));case 16:return _context.abrupt(\"return\");case 17:case\"end\":return _context.stop();}}},_callee);}));return function hydrateProductList(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["../../../src/hydrators/product-list-hydrator.ts"],"names":[],"mappings":"uIAAA;;;AAGG,GAKH,OAAS,6BAAT,CAAwC,yBAAxC,KAAyE,uCAAzE,CACA,OAA+B,gBAA/B,CAAiD,eAAjD,KAAwE,0BAAxE,CACA,OAAS,+BAAT,KAAgD,oDAAhD,CACA,OAAS,qCAAT,KAAsD,0DAAtD,CACA,OAAS,qCAAT,KAAsD,2DAAtD,CACA,OAAS,6BAAT,KAA8C,kDAA9C,CAEA;;;AAGG,GACH,MAAO,IAAM,CAAA,kBAAkB,0FAAG,iBAAO,YAAP,CAA2C,OAA3C,yIAEtB,eAAe,CAAC,YAAY,CAAC,QAAd,CAFO,6BAGrB,eAAe,CAAC,eAHK,iBAMrB,eAAe,CAAC,iBANK,iBASrB,eAAe,CAAC,eATK,iBAYrB,eAAe,CAAC,SAZK,iBAarB,eAAe,CAAC,IAbK,iBAcrB,eAAe,CAAC,cAdK,mBAItB,MAAM,CAAG,6BAAT,CAJsB,0CAOtB,MAAM,CAAG,+BAAT,CAPsB,0CAUtB,MAAM,CAAG,qCAAT,CAVsB,0CAetB,MAAM,CAAG,qCAAT,CAfsB,2CAkBtB,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,yBAAxB,CAAmD,YAAY,CAAC,QAAhE,EACyB,YAAc,CAAC,QAAf,CAA0B,EAA1B,CACA,YAAc,CAAC,YAAf,CAA8B,CAAE,KAAK,CAAE,yBAAT,CAA9B,CApBH,aAuB1B,MAAM,GAAK,SAvBe,2DAwBnB,MAAM,CAAC,GAAI,CAAA,gBAAJ,CAAqB,YAArB,CAAmC,OAAnC,CAAD,CAA8C,OAA9C,CAAN,CACF,IADE,CACG,SAAA,WAAW,CAAG,CACS,YAAc,CAAC,QAAf,CAA0B,WAA1B,CAC5B,CAHE,WAII,SAAA,KAAK,CAAG,CACX,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,6BAAxB,EACA,OAAO,CAAC,SAAR,CAAkB,SAAlB,CAA4B,KAA5B,EACyB,YAAc,CAAC,QAAf,CAA0B,EAA1B,CACA,YAAc,CAAC,YAAf,CAA8B,CAAE,KAAK,CAAE,6BAAT,CAA9B,CAC5B,CATE,CAxBmB,kGAAH,kBAAlB,CAAA,kBAAkB,gDAAxB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { CacheType, IActionContext, IActionInput, ICommerceApiSettings, IObservableAction } from '@msdyn365-commerce/core-internal';\nimport { IProductList } from '@msdyn365-commerce/retail-proxy/dist/data-types';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { EXCEPTION_PRODUCT_LIST_ACTION, INVALID_PRODUCT_LIST_TYPE } from '@msdyn365-commerce/telemetry-internal';\nimport { IProductListMetaData, ProductListInput, ProductListType } from './hydrator-action-inputs';\nimport { getProductsByCategoryListAction } from './product-list-actions/products-by-category.action';\nimport { getProductsByRecommendationListAction } from './product-list-actions/products-by-recommendation.action';\nimport { getProductsByRelationshipIdListAction } from './product-list-actions/products-by-relationship-id.action';\nimport { getProductsBySearchListAction } from './product-list-actions/products-by-search.action';\n\n/**\n * Method to hydrate a product list from metadata provided by CMS\n * @param listMetaData The metadata for the product list from CMS\n */\nexport const hydrateProductList = async (listMetaData: IProductListMetaData, context: IActionContext): Promise<void> => {\n    let action: IObservableAction<ProductSearchResult[]> | undefined;\n    switch (ProductListType[listMetaData.listType]) {\n        case ProductListType.productBySearch:\n            action = getProductsBySearchListAction;\n            break;\n        case ProductListType.productByCategory:\n            action = getProductsByCategoryListAction;\n            break;\n        case ProductListType.relatedProducts:\n            action = getProductsByRelationshipIdListAction;\n            break;\n        case ProductListType.editorial:\n        case ProductListType.algo:\n        case ProductListType.recommendation:\n            action = getProductsByRecommendationListAction;\n            break;\n        default:\n            context.telemetry.error(INVALID_PRODUCT_LIST_TYPE, listMetaData.listType);\n            (<IProductList>(<unknown>listMetaData)).products = [];\n            (<IProductList>(<unknown>listMetaData)).listMetadata = { error: INVALID_PRODUCT_LIST_TYPE };\n    }\n\n    if (action !== undefined) {\n        return action(new ProductListInput(listMetaData, context), context)\n            .then(productList => {\n                (<IProductList>(<unknown>listMetaData)).products = productList;\n            })\n            .catch(error => {\n                context.telemetry.error(EXCEPTION_PRODUCT_LIST_ACTION);\n                context.telemetry.exception(error);\n                (<IProductList>(<unknown>listMetaData)).products = [];\n                (<IProductList>(<unknown>listMetaData)).listMetadata = { error: EXCEPTION_PRODUCT_LIST_ACTION };\n            });\n    }\n\n    return;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}