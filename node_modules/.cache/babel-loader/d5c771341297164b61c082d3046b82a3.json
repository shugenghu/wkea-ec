{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getActivePricesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{getSelectedProductIdFromActionInput,getSelectedVariant,SelectedVariantInput,getCustomer}from'./index';import*as semver from'semver';import{GetCustomerInput}from'./get-customer';/**\r\n * Input class for the GetPriceForSelectedVariant Data Action\r\n */export var PriceForSelectedVariantInput=function PriceForSelectedVariantInput(productId,channelId,selectedProduct,customerId){_classCallCheck(this,PriceForSelectedVariantInput);this.getCacheKey=function(){return\"PriceForSelectedVariant\";};this.getCacheObjectType=function(){return'Price';};this.dataCacheType=function(){return'none';};this.productId=productId;this.channelId=channelId;this.selectedProduct=selectedProduct;this.customerId=customerId||'';};/**\r\n * The createInput method for the GetPriceForSelectedVariantDataAction\r\n * @param inputData The input data for the createInput method\r\n */export var createActivePriceForSelectedVariantInput=function createActivePriceForSelectedVariantInput(inputData){var productId=getSelectedProductIdFromActionInput(inputData);if(productId){return new PriceForSelectedVariantInput(+productId,+inputData.requestContext.apiSettings.channelId,undefined);}else{throw new Error('Unable to create PriceForSelectedVariantInput, no productId found on module config or query');}};/**\r\n * The Action Method for the GetPriceForSelectedVariant Data Action\r\n * Pulls the currently selected variant from the cache using the getSelectedVariant data action, and gets it's current contextual price\r\n * via the getActivePrice RetailServer API\r\n */export function getPriceForSelectedVariantAction(_x,_x2){return _getPriceForSelectedVariantAction.apply(this,arguments);}function _getPriceForSelectedVariantAction(){_getPriceForSelectedVariantAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){var affliations,customerInput,customer;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:affliations=[];if(!(ctx.requestContext&&ctx.requestContext.user&&ctx.requestContext.user.isAuthenticated)){_context.next=7;break;}customerInput=new GetCustomerInput(ctx.requestContext.apiSettings);_context.next=5;return getCustomer(customerInput,ctx);case 5:customer=_context.sent;if(customer&&customer.CustomerAffiliations){customer.CustomerAffiliations.forEach(function(affliation){var aff={AffiliationId:affliation.RetailAffiliationId,CustomerId:customer.AccountNumber};affliations.push(aff);});}case 7:return _context.abrupt(\"return\",Promise.resolve()// @ts-ignore: Promise vs. ObservablePromise typing conflict\n.then(function(){var activeProduct=input.selectedProduct;if(!activeProduct){var selectedVariantInput=new SelectedVariantInput(input.productId,input.channelId);return getSelectedVariant(selectedVariantInput,ctx);}return activeProduct;}).then(function(productResult){var projectDomain={ChannelId:+ctx.requestContext.apiSettings.channelId,CatalogId:+ctx.requestContext.apiSettings.catalogId};var activeProduct=productResult;if(activeProduct){return getActivePricesAsync({callerContext:ctx,queryResultSettings:{}},projectDomain,[activeProduct.RecordId],new Date(),input.customerId||null,affliations,true// @ts-ignore\n).then(function(response){if(response&&response.length>0){var productPrice=response[0];// If RS Verison < 9.16.0 (aka 10.0.6), customer contextual price won't be\n// included so instead just use AdjustedPrice\nif(semver.lt(ctx.requestContext.apiSettings.retailServerProxyVersion,'9.16.0')){productPrice.CustomerContextualPrice=productPrice.AdjustedPrice;}return productPrice;}throw new Error('[getPriceForSelectedVariantAction]Invalid response recieved from calculateProductPrice');});}return null;})[\"catch\"](function(error){ctx.trace(error.message);ctx.telemetry.exception(error);ctx.telemetry.debug(\"[getPriceForSelectedVariantAction]Error executing action\");throw new Error('[getPriceForSelectedVariantAction]Error executing action');}));case 8:case\"end\":return _context.stop();}}},_callee);}));return _getPriceForSelectedVariantAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-price-for-selected-variant',action:getPriceForSelectedVariantAction,input:createActivePriceForSelectedVariantInput});","map":{"version":3,"sources":["../../src/get-price-for-selected-variant.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ProductPrice, ProjectionDomain, SimpleProduct, AffiliationLoyaltyTier, CustomerAffiliation } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getActivePricesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { getSelectedProductIdFromActionInput, getSelectedVariant, SelectedVariantInput, getCustomer } from './index';\n\nimport * as semver from 'semver';\nimport { GetCustomerInput } from './get-customer';\n\n/**\n * Input class for the GetPriceForSelectedVariant Data Action\n */\nexport class PriceForSelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public selectedProduct: SimpleProduct | undefined;\n    public customerId?: string;\n\n    constructor(productId: number, channelId: number, selectedProduct?: SimpleProduct, customerId?: string) {\n        this.productId = productId;\n        this.channelId = channelId;\n        this.selectedProduct = selectedProduct;\n        this.customerId = customerId || '';\n    }\n\n    public getCacheKey = () => `PriceForSelectedVariant`;\n    public getCacheObjectType = () => 'Price';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * The createInput method for the GetPriceForSelectedVariantDataAction\n * @param inputData The input data for the createInput method\n */\nexport const createActivePriceForSelectedVariantInput = (inputData: ICreateActionContext<IGeneric<IAny>>): PriceForSelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new PriceForSelectedVariantInput(\n            +productId,\n            +inputData.requestContext.apiSettings.channelId,\n            undefined);\n    } else {\n        throw new Error('Unable to create PriceForSelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * The Action Method for the GetPriceForSelectedVariant Data Action\n * Pulls the currently selected variant from the cache using the getSelectedVariant data action, and gets it's current contextual price\n * via the getActivePrice RetailServer API\n */\nexport async function getPriceForSelectedVariantAction(\n    input: PriceForSelectedVariantInput,\n    ctx: IActionContext\n): Promise<ProductPrice | null> {\n    let affliations:AffiliationLoyaltyTier[] = [];\n    if(ctx.requestContext && ctx.requestContext.user && ctx.requestContext.user.isAuthenticated)\n    {\n        const customerInput = new GetCustomerInput(ctx.requestContext.apiSettings);\n        const customer = await getCustomer(customerInput, ctx);\n        if(customer && customer.CustomerAffiliations)\n        {\n            customer.CustomerAffiliations.forEach((affliation: CustomerAffiliation) => {\n                var aff:AffiliationLoyaltyTier = {AffiliationId:affliation.RetailAffiliationId, CustomerId: customer.AccountNumber}\n                affliations.push(aff);\n                \n            });\n        }\n    }\n    return Promise.resolve()\n        // @ts-ignore: Promise vs. ObservablePromise typing conflict\n        .then(() => {\n            const activeProduct: SimpleProduct | undefined = input.selectedProduct;\n\n            if (!activeProduct) {\n                const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);\n\n                return getSelectedVariant(selectedVariantInput, ctx);\n            }\n\n            return activeProduct;\n        })\n        .then<ProductPrice | null>((productResult: SimpleProduct | null) => {\n            const projectDomain: ProjectionDomain = { ChannelId: +ctx.requestContext.apiSettings.channelId, CatalogId: +ctx.requestContext.apiSettings.catalogId };\n\n            const activeProduct: SimpleProduct | undefined = <SimpleProduct | undefined>productResult;           \n            if (activeProduct) {\n                \n                return getActivePricesAsync(\n                    { callerContext: ctx, queryResultSettings: {} },\n                    projectDomain,\n                    [activeProduct.RecordId],\n                    new Date(),\n                    input.customerId || null,\n                    affliations,\n                    true\n                    // @ts-ignore\n                ).then(response => {\n                    if(response && response.length > 0) {\n                        const productPrice = response[0];\n\n                        // If RS Verison < 9.16.0 (aka 10.0.6), customer contextual price won't be\n                        // included so instead just use AdjustedPrice\n                        if (semver.lt(ctx.requestContext.apiSettings.retailServerProxyVersion, '9.16.0')) {\n                            productPrice.CustomerContextualPrice = productPrice.AdjustedPrice;\n                        }\n\n                        return productPrice;\n                    }\n                    throw new Error('[getPriceForSelectedVariantAction]Invalid response recieved from calculateProductPrice');\n                });\n            }\n\n            return null;\n        })\n        .catch((error: Error) => {\n            ctx.trace(error.message);\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[getPriceForSelectedVariantAction]Error executing action`);\n            throw new Error('[getPriceForSelectedVariantAction]Error executing action');\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-price-for-selected-variant',\n    action: <IAction<ProductPrice | null>>getPriceForSelectedVariantAction,\n    input: createActivePriceForSelectedVariantInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}