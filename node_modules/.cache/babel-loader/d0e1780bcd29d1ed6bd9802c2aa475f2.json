{"ast":null,"code":"export class TtmlTimeParser{constructor(_mediaFrameRate,_mediaTickRate){this.mediaFrameRate=_mediaFrameRate;this.mediaTickRate=_mediaTickRate;}parse(ttmlTime){if(!ttmlTime){return 0;}const absoluteTime=TtmlTimeParser.absoluteTimeRegex.exec(ttmlTime);if(absoluteTime&&absoluteTime.length>3){const hours=parseInt(absoluteTime[1],10)*60*60;const minutes=parseInt(absoluteTime[2],10)*60;const seconds=parseInt(absoluteTime[3],10);let subseconds=0;if(absoluteTime[5]){subseconds=parseFloat(absoluteTime[4])*1000;}if(absoluteTime[6]){subseconds=Math.round(parseFloat(absoluteTime[6])*this._getTimeUnitMultiplier('f'));}return(hours+minutes+seconds)*1000+subseconds;}const relativeTime=TtmlTimeParser.relativeTimeRegex.exec(ttmlTime);if(relativeTime&&relativeTime.length>3){return Math.round(parseFloat(relativeTime[1])*this._getTimeUnitMultiplier(relativeTime[3]));}return 0;}_getTimeUnitMultiplier(timeUnit){switch(timeUnit){case'h':return 1000*60*60;case'ms':return 1;case'm':return 1000*60;case's':return 1000;case'f':return 1000/this.mediaFrameRate;case't':return 1000/this.mediaTickRate;default:return 0;}}}TtmlTimeParser.absoluteTimeRegex=/^(\\d{1,}):(\\d{2}):(\\d{2})((\\.\\d{1,})|:(\\d{2,}(\\.\\d{1,})?))?$/;TtmlTimeParser.relativeTimeRegex=/^(\\d+(\\.\\d+)?)(ms|[hmsft])$/;","map":{"version":3,"sources":["videoplayer/components/closed-captions/ttml-time-parser.ts"],"names":[],"mappings":"AAQA,MAAM,MAAO,CAAA,cAAc,CA8CvB,WAAA,CAAY,eAAZ,CAAqC,cAArC,CAA2D,CACvD,KAAK,cAAL,CAAsB,eAAtB,CACA,KAAK,aAAL,CAAqB,cAArB,CACH,CASM,KAAK,CAAC,QAAD,CAAiB,CACzB,GAAI,CAAC,QAAL,CAAe,CACX,MAAO,EAAP,CACH,CAED,KAAM,CAAA,YAAY,CAAG,cAAc,CAAC,iBAAf,CAAiC,IAAjC,CAAsC,QAAtC,CAArB,CAEA,GAAI,YAAY,EAAK,YAAY,CAAC,MAAb,CAAsB,CAA3C,CAA+C,CAC3C,KAAM,CAAA,KAAK,CAAG,QAAQ,CAAC,YAAY,CAAC,CAAD,CAAb,CAAkB,EAAlB,CAAR,CAAgC,EAAhC,CAAqC,EAAnD,CACA,KAAM,CAAA,OAAO,CAAG,QAAQ,CAAC,YAAY,CAAC,CAAD,CAAb,CAAkB,EAAlB,CAAR,CAAgC,EAAhD,CACA,KAAM,CAAA,OAAO,CAAG,QAAQ,CAAC,YAAY,CAAC,CAAD,CAAb,CAAkB,EAAlB,CAAxB,CACA,GAAI,CAAA,UAAU,CAAG,CAAjB,CAEA,GAAI,YAAY,CAAC,CAAD,CAAhB,CAAqB,CACjB,UAAU,CAAG,UAAU,CAAC,YAAY,CAAC,CAAD,CAAb,CAAV,CAA8B,IAA3C,CACH,CAED,GAAI,YAAY,CAAC,CAAD,CAAhB,CAAqB,CACjB,UAAU,CAAG,IAAI,CAAC,KAAL,CAAW,UAAU,CAAC,YAAY,CAAC,CAAD,CAAb,CAAV,CAA8B,KAAK,sBAAL,CAA4B,GAA5B,CAAzC,CAAb,CACH,CAED,MAAQ,CAAC,KAAK,CAAG,OAAR,CAAkB,OAAnB,EAA8B,IAA/B,CAAuC,UAA9C,CACH,CAED,KAAM,CAAA,YAAY,CAAG,cAAc,CAAC,iBAAf,CAAiC,IAAjC,CAAsC,QAAtC,CAArB,CAEA,GAAI,YAAY,EAAK,YAAY,CAAC,MAAb,CAAsB,CAA3C,CAA+C,CAC3C,MAAO,CAAA,IAAI,CAAC,KAAL,CAAW,UAAU,CAAC,YAAY,CAAC,CAAD,CAAb,CAAV,CAA8B,KAAK,sBAAL,CAA4B,YAAY,CAAC,CAAD,CAAxC,CAAzC,CAAP,CACH,CAED,MAAO,EAAP,CACH,CASO,sBAAsB,CAAC,QAAD,CAAiB,CAC3C,OAAQ,QAAR,EACI,IAAK,GAAL,CACI,MAAO,MAAO,EAAP,CAAY,EAAnB,CACJ,IAAK,IAAL,CACI,MAAO,EAAP,CACJ,IAAK,GAAL,CACI,MAAO,MAAO,EAAd,CACJ,IAAK,GAAL,CACI,MAAO,KAAP,CACJ,IAAK,GAAL,CACI,MAAO,MAAO,KAAK,cAAnB,CACJ,IAAK,GAAL,CACI,MAAO,MAAO,KAAK,aAAnB,CACJ,QACI,MAAO,EAAP,CAdR,CAgBH,CAnHsB,CAWR,cAAA,CAAA,iBAAA,CAA4B,8DAA5B,CAUA,cAAA,CAAA,iBAAA,CAA4B,6BAA5B","sourcesContent":["// Timed Text Markup Language (TTML).\n// See http://www.w3.org/TR/ttml1/ for more details.\n\n/**\n * TtmlTimeParser class\n * @classdesc - The TtmlTimeParser class is used to parse ttml time expressions which can be absolute or relative.\n * @export\n */\nexport class TtmlTimeParser {\n    /**\n     * @name - absoluteTimeRegex\n     * @description - Regex to parse absolute ttml times. (clock-time)\n     *                hours \":\" minutes \":\" seconds ( fraction | \":\" frames ( \".\" sub-frames )? )?\n     *                NOTE: (johnlemi)  Our clocktime regex matches 1 or 2 digits for hours instead of 2 because even\n     *                though the spec says 2 we have some existing ttml from the Office team with end attrs with 1 hour digit\n     * @static\n     * @private\n     * @type {string}\n     */\n    private static absoluteTimeRegex: RegExp = /^(\\d{1,}):(\\d{2}):(\\d{2})((\\.\\d{1,})|:(\\d{2,}(\\.\\d{1,})?))?$/;\n\n    /**\n     * @name - relativeTimeRegex\n     * @description - Regex to parse relative ttml times. (offset-time)\n     *                time-count fraction? metric\n     * @static\n     * @private\n     * @type {string}\n     */\n    private static relativeTimeRegex: RegExp = /^(\\d+(\\.\\d+)?)(ms|[hmsft])$/;\n\n    /**\n     * @name - mediaFrameRate\n     * @description - mediaFrameRate\n     * @private\n     * @type {string}\n     */\n    private mediaFrameRate: number;\n\n    /**\n     * @name - mediaTickRate\n     * @description - mediaTickRate\n     * @private\n     * @type {string}\n     */\n    private mediaTickRate: number;\n\n    /**\n     * @constructor\n     * @description - Constructor for the TtmlTimeParser class.\n     * @public\n     * @param {number} mediaFrameRate - The ttml media frame rate.\n     * @param {number} mediaTickRate - The ttml media tick rate.\n     */\n    constructor(_mediaFrameRate: number, _mediaTickRate: number) {\n        this.mediaFrameRate = _mediaFrameRate;\n        this.mediaTickRate = _mediaTickRate;\n    }\n\n    /**\n     * @name - parse\n     * @description - Parses a ttml time expression string into a number.\n     * @public\n     * @param {string} ttmlTime - The time expression to parse.\n     * @returns {number} - The number the time expression represents, or 0 if the exression doesn't match.\n     */\n    public parse(ttmlTime: string): number {\n        if (!ttmlTime) {\n            return 0;\n        }\n\n        const absoluteTime = TtmlTimeParser.absoluteTimeRegex.exec(ttmlTime);\n\n        if (absoluteTime && (absoluteTime.length > 3)) {\n            const hours = parseInt(absoluteTime[1], 10) * 60 * 60;\n            const minutes = parseInt(absoluteTime[2], 10) * 60;\n            const seconds = parseInt(absoluteTime[3], 10);\n            let subseconds = 0;\n\n            if (absoluteTime[5]) {\n                subseconds = parseFloat(absoluteTime[4]) * 1000;\n            }\n\n            if (absoluteTime[6]) {\n                subseconds = Math.round(parseFloat(absoluteTime[6]) * this._getTimeUnitMultiplier('f'));\n            }\n\n            return ((hours + minutes + seconds) * 1000) + subseconds;\n        }\n\n        const relativeTime = TtmlTimeParser.relativeTimeRegex.exec(ttmlTime);\n\n        if (relativeTime && (relativeTime.length > 3)) {\n            return Math.round(parseFloat(relativeTime[1]) * this._getTimeUnitMultiplier(relativeTime[3]));\n        }\n\n        return 0;\n    }\n\n    /**\n     * @name - getTimeUnitMultiplier\n     * @description - Converts a ttml time unit expression string into a multiplier number.\n     * @private\n     * @param {string} timeUnit - The time unit expression.\n     * @returns {number} - The multiplier value, or 0 if the unit exression doesn't match.\n     */\n    private _getTimeUnitMultiplier(timeUnit: string): number {\n        switch (timeUnit) {\n            case 'h':\n                return 1000 * 60 * 60;\n            case 'ms':\n                return 1;\n            case 'm':\n                return 1000 * 60;\n            case 's':\n                return 1000;\n            case 'f':\n                return 1000 / this.mediaFrameRate;\n            case 't':\n                return 1000 / this.mediaTickRate;\n            default:\n                return 0;\n        }\n    }\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}