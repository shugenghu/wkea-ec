{"ast":null,"code":"import\"core-js/modules/es.array.reduce.js\";import\"core-js/modules/es.promise.js\";import{__decorate}from\"tslib\";import{action,computed,observable}from'mobx';import{GlobalState}from'../global-state/global-state';import addProductToCartInternal from'./add-product-to-cart';import addPromoCodeInternal from'./add-promo-code';import clearCartLineDeliveryModeInternal from'./clear-cart-line-delivery-mode';import clearCartLinesDeliveryInformation from'./clear-cart-lines-delivery-information';import getOrCreateActiveCart from'./get-or-create-active-cart';import refreshCartInternal from'./refresh-cart';import removeAllPromoCodesInternal from'./remove-all-promo-codes';import removeCartLineInternal from'./remove-cart-lines';import removePromoCodesInternal from'./remove-promo-codes';import updateCart from'./update-cart';import updateCartLineDeliverySpecificationsInternal from'./update-cart-line-delivery-specifications';import updateCartLineQuantityInternal from'./update-cart-line-quantity';import updateLoyaltyCardIdInternal from'./update-loyalty-card-id';import updateReceiptEmail from'./update-receipt-email';/**\r\n * Cart state information\r\n */export class BaseCartState extends GlobalState{constructor(actionContext){super(actionContext);this._cart={};this._attributeValues=[];this._extensionProperties=[];}get cart(){return this._cart;}get attributeValues(){return this._attributeValues;}get extensionProperties(){return this._extensionProperties;}get totalItemsInCart(){if(this._cart.CartLines){return this._cart.CartLines.map(cartLine=>cartLine.Quantity||1).reduce((total,num)=>total+num,0);}return 0;}get isEmpty(){return!(this._cart.CartLines&&this._cart.CartLines.length>0);}async initialize(){if(this.isInitialized){return;}const newCart=await getOrCreateActiveCart(this.actionContext);if(newCart){this._cart=newCart;this._status='READY';}else{this._status='ERROR';}this.isInitialized=true;}/**\r\n     * Refreshes the cart by getting it from the server\r\n     *\r\n     * Other actions should keep cart up to date so shouldn't need to call this\r\n     * outside of initialization but still might be scenarios where a manual\r\n     * refresh is needed\r\n     */async refreshCart(input){return this._doAsyncAction(async()=>{const newCart=await refreshCartInternal(this.cart.Id,this.actionContext);if(newCart){this._cart=newCart;return{status:'SUCCESS'};}return{status:'FAILED'};});}/**\r\n     * Adds the specified product to the current cart. If product is already in cart\r\n     * will update its cart line, otherwise will add a new cart line to the cart\r\n     *\r\n     * @param product The product to add to the cart\r\n     * @param count: How many copies of the product to add\r\n     * @param location: The org unit location, used for BuyOnlinePickupInStore scenarios\r\n     * (If you want item to simply be shipped, leave this parameter undefined)\r\n     */async addProductToCart(input){return this._doAsyncAction(async()=>{const cartLine={CatalogId:this.actionContext.requestContext.apiSettings.catalogId,Description:input.product.Description,// TODO: Investigate this value and what it represents\nEntryMethodTypeValue:3,ItemId:input.product.ItemId,ProductId:input.product.RecordId,Quantity:input.count||1,TrackingId:'',UnitOfMeasureSymbol:input.product.DefaultUnitOfMeasure};if(input.location){if(!this.actionContext.requestContext.channel){return{status:'FAILED'};}cartLine.DeliveryMode=this.actionContext.requestContext.channel.PickupDeliveryModeCode;cartLine.FulfillmentStoreId=cartLine.WarehouseId=input.location.OrgUnitNumber;cartLine.ShippingAddress=this._buildAddressFromOrgUnitLocation(input.location);}// check if the product is service or not by product type\n// tslint:disable-next-line:prefer-type-cast\nconst PRODUCTASSERVICE=2;const isAddServiceItemToCart=input.product.ItemTypeValue===PRODUCTASSERVICE;return this._doCartOperationWithRetry(()=>addProductToCartInternal(this.cart,cartLine,this.actionContext,input.availableQuantity,input.enableStockCheck,isAddServiceItemToCart));});}/**\r\n     * Removes the cart lines with the provided ids from the cart\r\n     *\r\n     * @param cartLineIds The cart lines to remove\r\n     */async removeCartLines(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>removeCartLineInternal(this.cart,input.cartLineIds,this.actionContext));});}/**\r\n     * Clears the pickup location information from the provided cart line,\r\n     * resulting in it getting shipped to the customer\r\n     *\r\n     * @param cartLineId The cart line to clear the location from\r\n     */async clearCartLinePickupLocation(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>clearCartLineDeliveryModeInternal(this.cart,input.cartLineId,this.actionContext));});}/**\r\n     * Clears the delivery mode, and other information for the shipping cart lines.\r\n     */async clearCartLinesDeliveryInformation(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>clearCartLinesDeliveryInformation(this.cart,this.actionContext));});}/**\r\n     * Marks the provided cartline for pickup in store, with the provided location as\r\n     * the pickup location\r\n     *\r\n     * @param cartLineId The cart line to mark for pickup\r\n     * @param location The location to set for pickup\r\n     */async updateCartLinePickupLocation(input){return this._doAsyncAction(async()=>{if(!this.actionContext.requestContext.channel){return{status:'FAILED'};}const cartLineDeliverySpecification={LineId:input.cartLineId,DeliverySpecification:{DeliveryModeId:this.actionContext.requestContext.channel.PickupDeliveryModeCode,DeliveryPreferenceTypeValue:2,PickUpStoreId:input.location.OrgUnitNumber,DeliveryAddress:this._buildAddressFromOrgUnitLocation(input.location)}};return this._doCartOperationWithRetry(()=>updateCartLineDeliverySpecificationsInternal(this.cart,[cartLineDeliverySpecification],this.actionContext));});}/**\r\n     * Updates the delivery mode for items in the cart with the desired delivery mode, preserving BOPIS status for stuff already marked as BOPIS\r\n     *\r\n     * @param deliveryModeId The delivery mode to use\r\n     */async updateCartDeliverySpecification(input){return this._doAsyncAction(async()=>{if(input.deliveryModeId.trim()===''){return{status:'FAILED',substatus:'EMPTYINPUT'};}const pickupDeliveryModeCode=this.actionContext.requestContext.channel&&this.actionContext.requestContext.channel.PickupDeliveryModeCode;const cartLinesForShipping=(this.cart.CartLines||[]).filter(cartLine=>cartLine.DeliveryMode&&cartLine.DeliveryMode!==''?cartLine.DeliveryMode!==pickupDeliveryModeCode:cartLine);if(cartLinesForShipping.length>0){const deliverySpecifications=cartLinesForShipping.map(cartLine=>{return{LineId:cartLine.LineId,DeliverySpecification:{DeliveryModeId:input.deliveryModeId,DeliveryPreferenceTypeValue:1,DeliveryAddress:input.shippingAddress}};});return this._doCartOperationWithRetry(()=>updateCartLineDeliverySpecificationsInternal(this.cart,deliverySpecifications,this.actionContext));}return{status:'FAILED',substatus:'NOCONTENT'};});}/**\r\n     * Updates the quantity of the cart line\r\n     *\r\n     * @param cartLineId The cart line to update the quantity\r\n     * @param newQuantity The new quantity to use (note that if this exceeds max quantity, will set quantity to max quantity)\r\n     */async updateCartLineQuantity(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>updateCartLineQuantityInternal(this.cart,input.cartLineId,input.newQuantity,this.actionContext));});}/**\r\n     * Updates the loyalty card ID on the card\r\n     *\r\n     * @param loyaltyCardId The loyalty card id to use\r\n     */async updateLoyaltyCardId(input){if(!input.loyaltyCardNumber){return{status:'FAILED',substatus:'EMPTYINPUT'};}return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>updateLoyaltyCardIdInternal(this.cart,input.loyaltyCardNumber,this.actionContext));});}/**\r\n     * Adds promo code to the cart\r\n     *\r\n     * @param promoCode The promo code to add\r\n     */addPromoCode(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>addPromoCodeInternal(this.cart,input.promoCode,this.actionContext));});}/**\r\n     * Removes promo codes from the cart\r\n     *\r\n     * @param promoCodes The promo codes to remove\r\n     */removePromoCodes(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>removePromoCodesInternal(this.cart,input.promoCodes,this.actionContext));});}/**\r\n     * Removes all promo code from the cart\r\n     */removeAllPromoCodes(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>removeAllPromoCodesInternal(this.cart,this.actionContext));});}/**\r\n     * Updates receipt email\r\n     *\r\n     * @param newEmail The receipt email\r\n     */async updateReceiptEmail(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>updateReceiptEmail(this.cart,input.newEmail,this.actionContext));});}/**\r\n     * Updates the attribute values\r\n     *\r\n     * @param newAttributeValues The new attribute values to update\r\n     */async updateAttributeValues(input){this._attributeValues=input.newAttributeValues;const newCartObject={Id:this.cart.Id,AttributeValues:input.newAttributeValues};return this.updateCart({newCartObject:newCartObject});}/**\r\n     * Updates the extension properties\r\n     *\r\n     * @param newExtensionProperties The new Extension properties to update\r\n     */async updateExtensionProperties(input){this._extensionProperties=input.newExtensionProperties;const newCartObject={Id:this.cart.Id,ExtensionProperties:input.newExtensionProperties};return this.updateCart({newCartObject:newCartObject});}/**\r\n     * Updates cart object\r\n     *\r\n     * @param newCart The cart object\r\n     */async updateCart(input){return this._doAsyncAction(async()=>{return this._doCartOperationWithRetry(()=>updateCart(this.cart,input.newCartObject,this.actionContext));});}async _doCartOperationWithRetry(callback){let callbackResult=await callback();if(callbackResult.status==='SUCCESS'||!this._shouldRetrySubstatus(callbackResult.substatus)){if(callbackResult.cart){this._cart=callbackResult.cart;}}else{const refreshCartResult=await this.refreshCart({});if(refreshCartResult.status==='SUCCESS'){callbackResult=await callback();if(callbackResult.status==='SUCCESS'||!this._shouldRetrySubstatus(callbackResult.substatus)){if(callbackResult.cart){this._cart=callbackResult.cart;}}}}return{status:callbackResult.status,substatus:callbackResult.substatus};}_shouldRetrySubstatus(subsatus){if(!subsatus){return true;}// all substatus currently don't result in a retry\nreturn false;}_buildAddressFromOrgUnitLocation(location){return{RecordId:location.PostalAddressId,Name:location.OrgUnitName,FullAddress:location.Address,Street:location.Street,StreetNumber:location.StreetNumber,City:location.City,DistrictName:location.DistrictName,BuildingCompliment:location.BuildingCompliment,Postbox:location.Postbox,ThreeLetterISORegionName:location.Country,ZipCode:location.Zip,County:location.County,CountyName:location.CountyName,State:location.State,StateName:location.StateName};}}__decorate([observable],BaseCartState.prototype,\"_cart\",void 0);__decorate([computed],BaseCartState.prototype,\"cart\",null);__decorate([observable],BaseCartState.prototype,\"_attributeValues\",void 0);__decorate([computed],BaseCartState.prototype,\"attributeValues\",null);__decorate([observable],BaseCartState.prototype,\"_extensionProperties\",void 0);__decorate([computed],BaseCartState.prototype,\"extensionProperties\",null);__decorate([computed],BaseCartState.prototype,\"totalItemsInCart\",null);__decorate([computed],BaseCartState.prototype,\"isEmpty\",null);__decorate([action],BaseCartState.prototype,\"refreshCart\",null);__decorate([action],BaseCartState.prototype,\"addProductToCart\",null);__decorate([action],BaseCartState.prototype,\"removeCartLines\",null);__decorate([action],BaseCartState.prototype,\"clearCartLinePickupLocation\",null);__decorate([action],BaseCartState.prototype,\"clearCartLinesDeliveryInformation\",null);__decorate([action],BaseCartState.prototype,\"updateCartLinePickupLocation\",null);__decorate([action],BaseCartState.prototype,\"updateCartDeliverySpecification\",null);__decorate([action],BaseCartState.prototype,\"updateCartLineQuantity\",null);__decorate([action],BaseCartState.prototype,\"updateLoyaltyCardId\",null);__decorate([action],BaseCartState.prototype,\"addPromoCode\",null);__decorate([action],BaseCartState.prototype,\"removePromoCodes\",null);__decorate([action],BaseCartState.prototype,\"removeAllPromoCodes\",null);__decorate([action],BaseCartState.prototype,\"updateReceiptEmail\",null);__decorate([action],BaseCartState.prototype,\"updateAttributeValues\",null);__decorate([action],BaseCartState.prototype,\"updateExtensionProperties\",null);__decorate([action],BaseCartState.prototype,\"updateCart\",null);","map":{"version":3,"sources":["cart-state/base-cart-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { Address, Cart, CartLine, OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { action, computed, observable } from 'mobx';\n\nimport { AttributeValueBase, CommerceProperty, ReleasedProductType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { GlobalState } from '../global-state/global-state';\nimport { ICartActionResult, ICartActionSubStatus, ICartState } from '../state-interfaces/i-cart-state';\nimport addProductToCartInternal from './add-product-to-cart';\nimport addPromoCodeInternal from './add-promo-code';\nimport { ICartActionResultWithCart } from './cart-action-result';\nimport clearCartLineDeliveryModeInternal from './clear-cart-line-delivery-mode';\nimport clearCartLinesDeliveryInformation from './clear-cart-lines-delivery-information';\nimport getOrCreateActiveCart from './get-or-create-active-cart';\nimport refreshCartInternal from './refresh-cart';\nimport removeAllPromoCodesInternal from './remove-all-promo-codes';\nimport removeCartLineInternal from './remove-cart-lines';\nimport removePromoCodesInternal from './remove-promo-codes';\nimport updateCart from './update-cart';\nimport updateCartLineDeliverySpecificationsInternal from './update-cart-line-delivery-specifications';\nimport updateCartLineQuantityInternal from './update-cart-line-quantity';\nimport updateLoyaltyCardIdInternal from './update-loyalty-card-id';\nimport updateReceiptEmail from './update-receipt-email';\n\n/**\n * Cart state information\n */\nexport class BaseCartState extends GlobalState implements ICartState {\n    @observable protected _cart: Cart;\n\n    @computed public get cart(): Readonly<Cart> {\n        return this._cart;\n    }\n\n    @observable protected _attributeValues: AttributeValueBase[];\n\n    @computed public get attributeValues(): AttributeValueBase[] {\n        return this._attributeValues;\n    }\n\n    @observable protected _extensionProperties: CommerceProperty[];\n\n    @computed public get extensionProperties(): CommerceProperty[] {\n        return this._extensionProperties;\n    }\n\n    @computed public get totalItemsInCart(): number {\n        if (this._cart.CartLines) {\n            return this._cart.CartLines.map(cartLine => cartLine.Quantity || 1).reduce((total, num) => total + num, 0);\n        }\n\n        return 0;\n    }\n\n    @computed public get isEmpty(): boolean {\n        return !(this._cart.CartLines && this._cart.CartLines.length > 0);\n    }\n\n    constructor(actionContext: IActionContext) {\n        super(actionContext);\n        this._cart = <Cart>{};\n        this._attributeValues = [];\n        this._extensionProperties = [];\n    }\n\n    public async initialize(): Promise<void> {\n        if (this.isInitialized) {\n            return;\n        }\n\n        const newCart = await getOrCreateActiveCart(this.actionContext);\n\n        if (newCart) {\n            this._cart = newCart;\n            this._status = 'READY';\n        } else {\n            this._status = 'ERROR';\n        }\n\n        this.isInitialized = true;\n    }\n\n    /**\n     * Refreshes the cart by getting it from the server\n     *\n     * Other actions should keep cart up to date so shouldn't need to call this\n     * outside of initialization but still might be scenarios where a manual\n     * refresh is needed\n     */\n    @action\n    public async refreshCart(input: { additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            const newCart = await refreshCartInternal(this.cart.Id, this.actionContext);\n\n            if (newCart) {\n                this._cart = newCart;\n\n                return { status: 'SUCCESS' };\n            }\n\n            return { status: 'FAILED' };\n        });\n    }\n\n    /**\n     * Adds the specified product to the current cart. If product is already in cart\n     * will update its cart line, otherwise will add a new cart line to the cart\n     *\n     * @param product The product to add to the cart\n     * @param count: How many copies of the product to add\n     * @param location: The org unit location, used for BuyOnlinePickupInStore scenarios\n     * (If you want item to simply be shipped, leave this parameter undefined)\n     */\n    @action\n    public async addProductToCart(input: {product: SimpleProduct; count?: number; location?: OrgUnitLocation; additionalProperties?: object; availableQuantity?: number; enableStockCheck?: boolean}): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            const cartLine: CartLine = {\n                CatalogId: this.actionContext.requestContext.apiSettings.catalogId,\n                Description: input.product.Description,\n                // TODO: Investigate this value and what it represents\n                EntryMethodTypeValue: 3,\n                ItemId: input.product.ItemId,\n                ProductId: input.product.RecordId,\n                Quantity: input.count || 1,\n                TrackingId: '',\n                UnitOfMeasureSymbol: input.product.DefaultUnitOfMeasure\n            };\n\n            if (input.location) {\n                if (!this.actionContext.requestContext.channel) {\n                    return { status: 'FAILED' };\n                }\n\n                cartLine.DeliveryMode = this.actionContext.requestContext.channel.PickupDeliveryModeCode;\n                cartLine.FulfillmentStoreId = cartLine.WarehouseId = input.location.OrgUnitNumber;\n                cartLine.ShippingAddress = this._buildAddressFromOrgUnitLocation(input.location);\n            }\n\n            // check if the product is service or not by product type\n            // tslint:disable-next-line:prefer-type-cast\n            const PRODUCTASSERVICE = 2 as ReleasedProductType.Service;\n            const isAddServiceItemToCart = input.product.ItemTypeValue === PRODUCTASSERVICE;\n\n            return this._doCartOperationWithRetry(() => addProductToCartInternal(this.cart, cartLine, this.actionContext, input.availableQuantity, input.enableStockCheck, isAddServiceItemToCart));\n        });\n    }\n\n    /**\n     * Removes the cart lines with the provided ids from the cart\n     *\n     * @param cartLineIds The cart lines to remove\n     */\n    @action\n    public async removeCartLines(input: { cartLineIds: string[]; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => removeCartLineInternal(this.cart, input.cartLineIds, this.actionContext));\n        });\n    }\n\n    /**\n     * Clears the pickup location information from the provided cart line,\n     * resulting in it getting shipped to the customer\n     *\n     * @param cartLineId The cart line to clear the location from\n     */\n    @action\n    public async clearCartLinePickupLocation(input: { cartLineId: string; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => clearCartLineDeliveryModeInternal(this.cart, input.cartLineId, this.actionContext));\n        });\n    }\n\n    /**\n     * Clears the delivery mode, and other information for the shipping cart lines.\n     */\n    @action\n    public async clearCartLinesDeliveryInformation(input: { additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => clearCartLinesDeliveryInformation(this.cart, this.actionContext));\n        });\n    }\n\n    /**\n     * Marks the provided cartline for pickup in store, with the provided location as\n     * the pickup location\n     *\n     * @param cartLineId The cart line to mark for pickup\n     * @param location The location to set for pickup\n     */\n    @action\n    public async updateCartLinePickupLocation(input: { cartLineId: string; location: OrgUnitLocation; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            if (!this.actionContext.requestContext.channel) {\n                return { status: 'FAILED' };\n            }\n\n            const cartLineDeliverySpecification = {\n                LineId: input.cartLineId,\n                DeliverySpecification: {\n                    DeliveryModeId: this.actionContext.requestContext.channel.PickupDeliveryModeCode,\n                    DeliveryPreferenceTypeValue: 2, // Pick up in store\n                    PickUpStoreId: input.location.OrgUnitNumber,\n                    DeliveryAddress: this._buildAddressFromOrgUnitLocation(input.location)\n                }\n            };\n\n            return this._doCartOperationWithRetry(() => updateCartLineDeliverySpecificationsInternal(this.cart, [cartLineDeliverySpecification], this.actionContext));\n        });\n    }\n\n    /**\n     * Updates the delivery mode for items in the cart with the desired delivery mode, preserving BOPIS status for stuff already marked as BOPIS\n     *\n     * @param deliveryModeId The delivery mode to use\n     */\n    @action\n    public async updateCartDeliverySpecification(input: { deliveryModeId: string; shippingAddress: Address | undefined; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            if (input.deliveryModeId.trim() === '') {\n                return { status: 'FAILED', substatus: 'EMPTYINPUT' };\n            }\n\n            const pickupDeliveryModeCode =\n                this.actionContext.requestContext.channel && this.actionContext.requestContext.channel.PickupDeliveryModeCode;\n\n            const cartLinesForShipping = (this.cart.CartLines || []).filter(\n                cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine\n            );\n\n            if (cartLinesForShipping.length > 0) {\n                const deliverySpecifications = cartLinesForShipping.map(cartLine => {\n                    return {\n                        LineId: cartLine.LineId,\n                        DeliverySpecification: {\n                            DeliveryModeId: input.deliveryModeId,\n                            DeliveryPreferenceTypeValue: 1, // Ship\n                            DeliveryAddress: input.shippingAddress\n                        }\n                    };\n                });\n\n                return this._doCartOperationWithRetry(() => updateCartLineDeliverySpecificationsInternal(this.cart, deliverySpecifications, this.actionContext));\n            }\n\n            return { status: 'FAILED', substatus: 'NOCONTENT' };\n        });\n    }\n\n    /**\n     * Updates the quantity of the cart line\n     *\n     * @param cartLineId The cart line to update the quantity\n     * @param newQuantity The new quantity to use (note that if this exceeds max quantity, will set quantity to max quantity)\n     */\n    @action\n    public async updateCartLineQuantity(input: { cartLineId: string; newQuantity: number; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => updateCartLineQuantityInternal(this.cart, input.cartLineId, input.newQuantity, this.actionContext));\n        });\n    }\n\n    /**\n     * Updates the loyalty card ID on the card\n     *\n     * @param loyaltyCardId The loyalty card id to use\n     */\n    @action\n    public async updateLoyaltyCardId(input: { loyaltyCardNumber: string | undefined; additionalProperties?: object }): Promise<ICartActionResult> {\n        if (!input.loyaltyCardNumber) {\n            return { status: 'FAILED', substatus: 'EMPTYINPUT' };\n        }\n\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => updateLoyaltyCardIdInternal(this.cart, input.loyaltyCardNumber!, this.actionContext));\n        });\n    }\n\n    /**\n     * Adds promo code to the cart\n     *\n     * @param promoCode The promo code to add\n     */\n    @action\n    public addPromoCode(input: { promoCode: string; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => addPromoCodeInternal(this.cart, input.promoCode, this.actionContext));\n        });\n    }\n\n    /**\n     * Removes promo codes from the cart\n     *\n     * @param promoCodes The promo codes to remove\n     */\n    @action\n    public removePromoCodes(input: { promoCodes: string[]; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => removePromoCodesInternal(this.cart, input.promoCodes, this.actionContext));\n        });\n    }\n\n    /**\n     * Removes all promo code from the cart\n     */\n    @action\n    public removeAllPromoCodes(input: { additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => removeAllPromoCodesInternal(this.cart, this.actionContext));\n        });\n    }\n\n    /**\n     * Updates receipt email\n     *\n     * @param newEmail The receipt email\n     */\n    @action\n    public async updateReceiptEmail(input: { newEmail: string; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => updateReceiptEmail(this.cart, input.newEmail, this.actionContext));\n        });\n    }\n\n    /**\n     * Updates the attribute values\n     *\n     * @param newAttributeValues The new attribute values to update\n     */\n    @action\n    public async updateAttributeValues(input: { newAttributeValues: AttributeValueBase[]; additionalProperties?: object }): Promise<ICartActionResult> {\n        this._attributeValues = input.newAttributeValues;\n        const newCartObject: Cart = {\n            Id: this.cart.Id,\n            AttributeValues: input.newAttributeValues\n        };\n        return this.updateCart({ newCartObject: newCartObject });\n    }\n\n    /**\n     * Updates the extension properties\n     *\n     * @param newExtensionProperties The new Extension properties to update\n     */\n    @action\n    public async updateExtensionProperties(input: { newExtensionProperties: CommerceProperty[]; additionalProperties?: object }): Promise<ICartActionResult> {\n        this._extensionProperties = input.newExtensionProperties;\n        const newCartObject: Cart = {\n            Id: this.cart.Id,\n            ExtensionProperties: input.newExtensionProperties\n        };\n        return this.updateCart({ newCartObject: newCartObject });\n    }\n\n    /**\n     * Updates cart object\n     *\n     * @param newCart The cart object\n     */\n    @action\n    public async updateCart(input: { newCartObject: Cart; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => updateCart(this.cart, input.newCartObject, this.actionContext));\n        });\n    }\n\n    private async _doCartOperationWithRetry(callback: () => Promise<ICartActionResultWithCart>): Promise<ICartActionResult> {\n        let callbackResult = await callback();\n\n        if (callbackResult.status === 'SUCCESS' || !this._shouldRetrySubstatus(callbackResult.substatus)) {\n            if (callbackResult.cart) {\n                this._cart = callbackResult.cart;\n            }\n        } else {\n            const refreshCartResult = await this.refreshCart({});\n\n            if (refreshCartResult.status === 'SUCCESS') {\n                callbackResult = await callback();\n\n                if (callbackResult.status === 'SUCCESS' || !this._shouldRetrySubstatus(callbackResult.substatus)) {\n                    if (callbackResult.cart) {\n                        this._cart = callbackResult.cart;\n                    }\n                }\n            }\n        }\n\n        return { status: callbackResult.status, substatus: callbackResult.substatus };\n    }\n\n    private _shouldRetrySubstatus(subsatus?: ICartActionSubStatus): boolean {\n        if (!subsatus) {\n            return true;\n        }\n\n        // all substatus currently don't result in a retry\n        return false;\n    }\n\n    private _buildAddressFromOrgUnitLocation(location: OrgUnitLocation): Address {\n        return {\n            RecordId: location.PostalAddressId,\n            Name: location.OrgUnitName,\n            FullAddress: location.Address,\n            Street: location.Street,\n            StreetNumber: location.StreetNumber,\n            City: location.City,\n            DistrictName: location.DistrictName,\n            BuildingCompliment: location.BuildingCompliment,\n            Postbox: location.Postbox,\n            ThreeLetterISORegionName: location.Country,\n            ZipCode: location.Zip,\n            County: location.County,\n            CountyName: location.CountyName,\n            State: location.State,\n            StateName: location.StateName\n        };\n    }\n}\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}