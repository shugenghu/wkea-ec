{"ast":null,"code":"import\"core-js/modules/es.string.ends-with.js\";import\"core-js/modules/es.string.replace.js\";import\"core-js/modules/es.string.starts-with.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{parseSearchData}from'./input-data-parser';export const wrapInResolvedAsyncResult=input=>{return{status:'SUCCESS',result:input,metadata:{}};};export const wrapInRejectedAsyncResult=input=>{return{status:'FAILED',result:input,metadata:{}};};export const buildQueryResultSettings=inputData=>{try{const searchInputData=parseSearchData(inputData);const search=searchInputData.q;if(!search){throw new Error('Query string ?q={searchText} is needed for search actions.');}const top=searchInputData.maxItems&&Number(searchInputData.maxItems)||searchInputData.top;return{Paging:{Top:top,Skip:searchInputData.skip}};}catch(e){return{};}};/**\r\n * Utility function to extract the active productId in the following priority:\r\n * First query param (productId), then UrlToken (itemId), then module config\r\n * @param inputData The Action Input data\r\n */export const getSelectedProductIdFromActionInput=inputData=>{if(inputData&&inputData.requestContext&&inputData.requestContext.query&&inputData.requestContext.query.productId){return inputData.requestContext.query.productId;}else if(inputData&&inputData.requestContext&&inputData.requestContext.urlTokens&&inputData.requestContext.urlTokens.itemId){return inputData.requestContext.urlTokens.itemId;}else if(inputData&&inputData.config&&inputData.config.productId){return inputData.config.productId;}return undefined;};/**\r\n * Generates a Image URL based on data return from retail server\r\n * @param imageUrl The image url returned by Retail Server\r\n * @param ctx The request context\r\n */export const generateImageUrl=(imageUrl,apiSettings)=>{if(imageUrl){// Images hosted in CMS include schema\nif(imageUrl.startsWith('http')){return imageUrl;}// Images hosted in Retail Server must be encoded and joined with the base image url\nreturn apiSettings.baseImageUrl+encodeURIComponent(imageUrl);}else{// d365Commerce.telemetry.warning(`Unable to generate a proper Image URL for Product: ${product.RecordId}`);\nreturn undefined;}};/**\r\n * Generates a Image URL for a product based on data return from retail server\r\n * @param product The Product returned by Retail Server\r\n * @param ctx The request context\r\n */export const generateProductImageUrl=(product,apiSettings)=>{return generateImageUrl(product.PrimaryImageUrl,apiSettings);};/**\r\n * Creates a CartLine object from the passed data\r\n * @param product The product\r\n * @param quantity The quantity\r\n * @param catalogId The catalog\r\n */export const buildCartLine=(product,quantity,catalogId)=>{return{CatalogId:catalogId||0,Description:product.Description,// TODO: Investigate this value and what it represents\nEntryMethodTypeValue:3,ItemId:product.ItemId,ProductId:product.RecordId,Quantity:quantity||1,TrackingId:'',UnitOfMeasureSymbol:product.DefaultUnitOfMeasure};};/**\r\n * Creates a CommerceListLine (also know as WishlistLine) object from the passed data\r\n * @param productId The RecordId of the Product to be added\r\n * @param customerId The account number of the customer\r\n * @param wishlistId The Id of the commerce list\r\n */export const buildWishlistLine=(productId,customerId,wishlistId)=>{return{CommerceListId:wishlistId,ProductId:productId,CustomerId:customerId};};/**\r\n * Utility function to prepare the product details criteria before getting full product:\r\n * @param inputData The Action Input data\r\n */export const getProductDetailsCriteriaFromActionInput=inputData=>{if(inputData&&inputData.config){return{getPrice:!inputData.config.hidePrice,getRating:!inputData.config.hideRating};}return{getPrice:true,getRating:true};};/**\r\n * Transforms search text into the expected 'search terms' format, expected by refiner APIs.\r\n * @param searchText free-form text used for searching for products or categories of products\r\n */export const ensureSearchTextIsFormedProperly=searchText=>{const prefix=searchText.startsWith(\"'\")?'':\"'\";const suffix=searchText.endsWith(\"'\")?'':\"'\";return\"\".concat(prefix).concat(searchText).concat(suffix);};export const ensureSafeSearchText=searchText=>{return searchText.replace(/[^0-9a-zA-Z\\s]+/g,'');};export const buildCacheKey=(base,apiSettings,locale)=>{return\"\".concat(base,\"-chanId:\").concat(apiSettings.channelId,\"-catId:\").concat(apiSettings.catalogId).concat(locale?\"-\".concat(locale):'');};export const buildCacheKeyWithUrlTokens=(base,requestContext)=>{const urlTokens=requestContext.urlTokens;const defaultCacheKey=buildCacheKey(base,requestContext.apiSettings,requestContext.locale);return urlTokens?\"\".concat(defaultCacheKey,\"-\").concat(urlTokens.itemId,\"-\").concat(urlTokens.recordId,\"-\").concat(urlTokens.pageType):defaultCacheKey;};export const generateKey=(args,options)=>{const{handler,separator}=_objectSpread(_objectSpread({},{separator:'-',handler:undefined}),options||{});return args.map(arg=>{if(arg===null||arg===undefined){if(handler){return handler(arg);}}return arg;}).join(separator);};/**\r\n * Gets the fall back image url for a variant image.\r\n * @param itemId Item id of a product.\r\n * @param apiSettings Api setting from request context.\r\n */export const getFallbackImageUrl=(itemId,apiSettings)=>{if(!itemId){return'';}const productUrl=\"Products/\".concat(itemId,\"_000_001.png\");return generateImageUrl(productUrl,apiSettings);};","map":{"version":3,"sources":["../../../src/utilities/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAny, ICommerceApiSettings, ICreateActionContext, IGeneric, IRequestContext } from '@msdyn365-commerce/core';\nimport { AsyncResult } from '@msdyn365-commerce/retail-proxy';\nimport {\n    CartLine,\n    CommerceListLine,\n    ProductSearchResult,\n    QueryResultSettings,\n    SimpleProduct\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { ProductDetailsCriteria } from '../get-full-products';\nimport { parseSearchData } from './input-data-parser';\n\nexport const wrapInResolvedAsyncResult = <T = unknown>(input: T | null | undefined): AsyncResult<T> => {\n    return <AsyncResult<T>>{\n        status: 'SUCCESS',\n        result: input,\n        metadata: {}\n    };\n};\n\nexport const wrapInRejectedAsyncResult = <T = unknown>(input: T | null | undefined): AsyncResult<T> => {\n    return <AsyncResult<T>>{\n        status: 'FAILED',\n        result: input,\n        metadata: {}\n    };\n};\n\nexport const buildQueryResultSettings = (inputData: ICreateActionContext<IGeneric<IAny>, IGeneric<IAny>>): QueryResultSettings => {\n    try {\n        const searchInputData = parseSearchData(inputData);\n        const search = searchInputData.q;\n        if (!search) {\n            throw new Error('Query string ?q={searchText} is needed for search actions.');\n        }\n        const top = (searchInputData.maxItems && Number(searchInputData.maxItems)) || searchInputData.top;\n        return { Paging: { Top: top, Skip: searchInputData.skip } };\n    } catch (e) {\n        return {};\n    }\n};\n\n/**\n * Utility function to extract the active productId in the following priority:\n * First query param (productId), then UrlToken (itemId), then module config\n * @param inputData The Action Input data\n */\nexport const getSelectedProductIdFromActionInput = (inputData: ICreateActionContext<IGeneric<IAny>>): string | undefined => {\n    if (inputData && inputData.requestContext && inputData.requestContext.query && inputData.requestContext.query.productId) {\n        return inputData.requestContext.query.productId;\n    } else if (inputData && inputData.requestContext && inputData.requestContext.urlTokens && inputData.requestContext.urlTokens.itemId) {\n        return inputData.requestContext.urlTokens.itemId;\n    } else if (inputData && inputData.config && inputData.config.productId) {\n        return inputData.config.productId;\n    }\n    return undefined;\n};\n\n/**\n * Generates a Image URL based on data return from retail server\n * @param imageUrl The image url returned by Retail Server\n * @param ctx The request context\n */\nexport const generateImageUrl = (imageUrl: string | undefined, apiSettings: ICommerceApiSettings): string | undefined => {\n    if (imageUrl) {\n        // Images hosted in CMS include schema\n        if (imageUrl.startsWith('http')) {\n            return imageUrl;\n        }\n\n        // Images hosted in Retail Server must be encoded and joined with the base image url\n        return apiSettings.baseImageUrl + encodeURIComponent(imageUrl);\n    } else {\n        // d365Commerce.telemetry.warning(`Unable to generate a proper Image URL for Product: ${product.RecordId}`);\n        return undefined;\n    }\n};\n\n/**\n * Generates a Image URL for a product based on data return from retail server\n * @param product The Product returned by Retail Server\n * @param ctx The request context\n */\nexport const generateProductImageUrl = (\n    product: SimpleProduct | ProductSearchResult,\n    apiSettings: ICommerceApiSettings\n): string | undefined => {\n    return generateImageUrl(product.PrimaryImageUrl, apiSettings);\n};\n\n/**\n * Creates a CartLine object from the passed data\n * @param product The product\n * @param quantity The quantity\n * @param catalogId The catalog\n */\nexport const buildCartLine = (product: SimpleProduct, quantity?: number, catalogId?: number): CartLine => {\n    return {\n        CatalogId: catalogId || 0,\n        Description: product.Description,\n        // TODO: Investigate this value and what it represents\n        EntryMethodTypeValue: 3,\n        ItemId: product.ItemId,\n        ProductId: product.RecordId,\n        Quantity: quantity || 1,\n        TrackingId: '',\n        UnitOfMeasureSymbol: product.DefaultUnitOfMeasure\n    };\n};\n\n/**\n * Creates a CommerceListLine (also know as WishlistLine) object from the passed data\n * @param productId The RecordId of the Product to be added\n * @param customerId The account number of the customer\n * @param wishlistId The Id of the commerce list\n */\nexport const buildWishlistLine = (productId: number, customerId: string, wishlistId: number): CommerceListLine => {\n    return {\n        CommerceListId: wishlistId,\n        ProductId: productId,\n        CustomerId: customerId\n    };\n};\n\n/**\n * Utility function to prepare the product details criteria before getting full product:\n * @param inputData The Action Input data\n */\nexport const getProductDetailsCriteriaFromActionInput = (inputData: ICreateActionContext<IGeneric<IAny>>): ProductDetailsCriteria => {\n    if (inputData && inputData.config) {\n        return {\n            getPrice: !inputData.config.hidePrice,\n            getRating: !inputData.config.hideRating\n        };\n    }\n    return {\n        getPrice: true,\n        getRating: true\n    };\n};\n\n/**\n * Transforms search text into the expected 'search terms' format, expected by refiner APIs.\n * @param searchText free-form text used for searching for products or categories of products\n */\nexport const ensureSearchTextIsFormedProperly = (searchText: string): string => {\n    const prefix = searchText.startsWith(`'`) ? '' : `'`;\n    const suffix = searchText.endsWith(`'`) ? '' : `'`;\n    return `${prefix}${searchText}${suffix}`;\n};\n\nexport const ensureSafeSearchText = (searchText: string): string => {\n    return searchText.replace(/[^0-9a-zA-Z\\s]+/g, '');\n};\n\nexport const buildCacheKey = (base: string, apiSettings: ICommerceApiSettings, locale?:string): string => {\n    return `${base}-chanId:${apiSettings.channelId}-catId:${apiSettings.catalogId}${locale?`-${locale}`:''}`;\n};\n\nexport const buildCacheKeyWithUrlTokens = (base: string, requestContext: IRequestContext): string => {\n    const urlTokens = requestContext.urlTokens;\n    const defaultCacheKey = buildCacheKey(base, requestContext.apiSettings, requestContext.locale);\n    return urlTokens\n        ? `${defaultCacheKey}-${urlTokens.itemId}-${urlTokens.recordId}-${urlTokens.pageType}`\n        : defaultCacheKey;\n};\n\n/**\n * Generates a key from set of arguments as inputs\n *\n * @param args argument list of pivots to generate key from\n * @param handler handler function for null/undefined values\n */\n\ntype TKeyTypes = string | number | boolean | null | undefined;\ninterface IGenerateKeyOptions {\n    separator?: string;\n    handler?(input: null | undefined): string;\n}\nexport const generateKey = (args: TKeyTypes[], options?: IGenerateKeyOptions): string => {\n    const { handler, separator }: IGenerateKeyOptions = { ...{ separator: '-', handler: undefined }, ...(options || {}) };\n    return args\n        .map(arg => {\n            if (arg === null || arg === undefined) {\n                if (handler) {\n                    return handler(arg);\n                }\n            }\n            return arg;\n        })\n        .join(separator);\n};\n\n/**\n * Gets the fall back image url for a variant image.\n * @param itemId Item id of a product.\n * @param apiSettings Api setting from request context.\n */\nexport const getFallbackImageUrl = (itemId: string | undefined, apiSettings: ICommerceApiSettings): string | undefined => {\n    if (!itemId) {\n        return '';\n    }\n\n    const productUrl = `Products/${itemId}_000_001.png`;\n    return generateImageUrl(productUrl, apiSettings);\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}