{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{TTLCache}from'./ttl-cache';/**\r\n * Class which handles vectorizing requests\r\n */class RequestVectorizer{constructor(options){this._cache=new TTLCache(options);// binds\nthis.next=this.next.bind(this);}/**\r\n     * The next request in the sequence\r\n     *\r\n     * @param {string} requestId\r\n     * @returns {string} the next vectorized request\r\n     */next(requestId){const value=this._cache.get(requestId);const nextValue=value===undefined?0:value+1;this._cache.set(requestId,nextValue);return\"\".concat(requestId).concat(RequestVectorizer.SEP).concat(nextValue);}}// differentiate vectors generated client/server side\nRequestVectorizer.SEP=process.env.CURRENT_ENVIRONMENT==='node'?'.':'/';const RequestVectorizerInstance=new RequestVectorizer();export{RequestVectorizerInstance,RequestVectorizer};","map":{"version":3,"sources":["../../../../src/_server/inteceptors/request-vectorizer.ts"],"names":[],"mappings":"AAAA;;;AAGG,GAEH,OAAS,QAAT,KAAyB,aAAzB,CAOA;;AAEG,GACH,KAAM,CAAA,iBAAiB,CAKnB,WAAA,CAAY,OAAZ,CAA+C,CAC3C,KAAK,MAAL,CAAc,GAAI,CAAA,QAAJ,CAAa,OAAb,CAAd,CACA;AACA,KAAK,IAAL,CAAY,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,CAAZ,CACH,CAED;;;;;AAKG,OACI,IAAI,CAAC,SAAD,CAAkB,CACzB,KAAM,CAAA,KAAK,CAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,SAAhB,CAAd,CACA,KAAM,CAAA,SAAS,CAAG,KAAK,GAAK,SAAV,CAAsB,CAAtB,CAA0B,KAAK,CAAG,CAApD,CACA,KAAK,MAAL,CAAY,GAAZ,CAAgB,SAAhB,CAA2B,SAA3B,EACA,gBAAU,SAAV,SAAsB,iBAAiB,CAAC,GAAxC,SAA8C,SAA9C,EACH,CAtBkB,CACnB;AACc,iBAAA,CAAA,GAAA,CAAc,OAAO,CAAC,GAAR,CAAY,mBAAZ,GAAoC,MAApC,CAA6C,GAA7C,CAAmD,GAAjE,CAsBlB,KAAM,CAAA,yBAAyB,CAAG,GAAI,CAAA,iBAAJ,EAAlC,CACA,OAAS,yBAAT,CAAoC,iBAApC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { TTLCache } from './ttl-cache';\n\nexport interface IRequestVectorizerOptions {\n    removalThresholdInMs?: number;\n    intervalForRemovalInMs?: number;\n}\n\n/**\n * Class which handles vectorizing requests\n */\nclass RequestVectorizer {\n    // differentiate vectors generated client/server side\n    public static SEP: string = process.env.CURRENT_ENVIRONMENT === 'node' ? '.' : '/';\n    private _cache: TTLCache<number>;\n\n    constructor(options?: IRequestVectorizerOptions) {\n        this._cache = new TTLCache(options);\n        // binds\n        this.next = this.next.bind(this);\n    }\n\n    /**\n     * The next request in the sequence\n     *\n     * @param {string} requestId\n     * @returns {string} the next vectorized request\n     */\n    public next(requestId: string): string {\n        const value = this._cache.get(requestId);\n        const nextValue = value === undefined ? 0 : value + 1;\n        this._cache.set(requestId, nextValue);\n        return `${requestId}${RequestVectorizer.SEP}${nextValue}`;\n    }\n}\nconst RequestVectorizerInstance = new RequestVectorizer();\nexport { RequestVectorizerInstance, RequestVectorizer };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}