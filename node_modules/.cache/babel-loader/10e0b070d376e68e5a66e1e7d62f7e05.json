{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var tslib_1=require(\"tslib\");var classnames_1=tslib_1.__importDefault(require(\"classnames\"));var React=tslib_1.__importStar(require(\"react\"));var __1=require(\"../\");var Collapse_1=tslib_1.__importDefault(require(\"../collapse/Collapse\"));var Drawer=function(_super){tslib_1.__extends(Drawer,_super);function Drawer(props){var _this=_super.call(this,props)||this;_this._toggle=_this._toggle.bind(_this);_this.isManuallyToggled=false;_this.state={isOpen:props.collapseProps&&props.collapseProps.isOpen||false};_this.drawerGlyphClass=classnames_1.default('drawer__glyph',_this.props.toggleGlyphClassName?_this.props.toggleGlyphClassName:'');if(_this.props.animateGlyph){_this.drawerOpenGlyph=classnames_1.default(_this.drawerGlyphClass,_this.props.openGlyph?_this.props.openGlyph:_this.props.closeGlyph?_this.props.closeGlyph:'');_this.drawerCloseGlyph=_this.drawerOpenGlyph;}else{_this.drawerOpenGlyph=classnames_1.default(_this.drawerGlyphClass,_this.props.openGlyph?_this.props.openGlyph:'');_this.drawerCloseGlyph=classnames_1.default(_this.drawerGlyphClass,_this.props.closeGlyph?_this.props.closeGlyph:'');}return _this;}Drawer.prototype.render=function(){var collapseProps=tslib_1.__assign({},this.props.collapseProps);if(collapseProps.isOpen===undefined||this.isManuallyToggled){collapseProps.isOpen=this.state.isOpen;}else{this.state.isOpen=collapseProps.isOpen;}collapseProps.children=this.props.children;var drawerClass=classnames_1.default('drawer',this.props.className?this.props.className:'');this.isManuallyToggled=false;return React.createElement(\"div\",{className:drawerClass},React.createElement(__1.Button,tslib_1.__assign({},this.props.toggleButtonProps,{onClick:this._toggle,\"aria-expanded\":collapseProps.isOpen,block:true,disabled:this.props.disabled,className:'drawer__button',color:'secondary'}),this._generateDrawerButtonInnerMarkup(collapseProps.isOpen)),React.createElement(Collapse_1.default,tslib_1.__assign({},collapseProps)));};Drawer.prototype._generateDrawerButtonInnerMarkup=function(collapseState){var drawerButtonTextClass=classnames_1.default('drawer__buttontext',this.props.toggleButtonClassName?this.props.toggleButtonClassName:'');if(this.props.glyphPlacement==='end'){return React.createElement(React.Fragment,null,React.createElement(\"span\",{className:classnames_1.default(drawerButtonTextClass,'__start')},this.props.toggleButtonText),this._generateGlyphMarkup('drawer__glyph__end',collapseState));}if(this.props.glyphPlacement==='start'){return React.createElement(React.Fragment,null,this._generateGlyphMarkup('drawer__glyph__start',collapseState),React.createElement(\"span\",{className:classnames_1.default(drawerButtonTextClass,'__end')},this.props.toggleButtonText));}else{return React.createElement(\"span\",{className:classnames_1.default(drawerButtonTextClass,'__start')},this.props.toggleButtonText);}};Drawer.prototype._generateGlyphMarkup=function(location,collapseState){var glyphClass=collapseState?this.drawerOpenGlyph:this.drawerCloseGlyph;glyphClass=glyphClass+\" \"+location;return React.createElement(\"span\",{className:glyphClass});};Drawer.prototype._toggle=function(e){e.preventDefault();this.setState({isOpen:!this.state.isOpen});this.isManuallyToggled=true;if(this.props.onToggle){this.props.onToggle(this.state);}};return Drawer;}(React.Component);exports.default=Drawer;","map":{"version":3,"sources":["/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/node_modules/@msdyn365-commerce-modules/utilities/src/drawer/Drawer.tsx"],"names":[],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { Button } from '../';\nimport Collapse from '../collapse/Collapse';\nimport { ICollapseProps } from '../collapse/Collapse.props';\nimport { IDrawerProps } from './Drawer.props';\n\nexport interface IDrawerState {\n    isOpen: boolean;\n}\n\nexport type GlyphPlacement = 'start' | 'end';\n\n/**\n * Drawer - This is a full width uncontrolled collapse where the button glyph changes\n * when the drawer is open and closed\n */\n\nexport default class Drawer extends React.Component<IDrawerProps, IDrawerState> {\n    public state: IDrawerState;\n    private drawerOpenGlyph: string;\n    private drawerCloseGlyph: string;\n    private drawerGlyphClass: string;\n    private isManuallyToggled: boolean;\n\n    constructor(props: IDrawerProps) {\n        super(props);\n        this._toggle = this._toggle.bind(this);\n        this.isManuallyToggled = false;\n        this.state = { isOpen: (props.collapseProps && props.collapseProps.isOpen) || false };\n        this.drawerGlyphClass = classnames('drawer__glyph',\n            // tslint:disable-next-line:align\n            this.props.toggleGlyphClassName ?\n                this.props.toggleGlyphClassName : '');\n\n        if (this.props.animateGlyph) {\n            this.drawerOpenGlyph = classnames(this.drawerGlyphClass,\n                // tslint:disable-next-line:align\n                this.props.openGlyph ?\n                    this.props.openGlyph :\n                    this.props.closeGlyph ?\n                        this.props.closeGlyph : '');\n            this.drawerCloseGlyph = this.drawerOpenGlyph;\n        } else {\n            this.drawerOpenGlyph = classnames(this.drawerGlyphClass,\n                // tslint:disable-next-line:align\n                this.props.openGlyph ?\n                    this.props.openGlyph : '');\n            this.drawerCloseGlyph = classnames(this.drawerGlyphClass,\n                // tslint:disable-next-line:align\n                this.props.closeGlyph ?\n                    this.props.closeGlyph : '');\n        }\n    }\n\n    public render(): JSX.Element {\n        const collapseProps = { ...this.props.collapseProps } as ICollapseProps;\n\n        // If the drawer is manually toggled by pressing the button, then we use the internal state\n        if (collapseProps.isOpen === undefined || this.isManuallyToggled) {\n            collapseProps.isOpen = this.state.isOpen;\n        } else {\n            this.state.isOpen = collapseProps.isOpen;\n        }\n        collapseProps.children = this.props.children;\n        const drawerClass = classnames('drawer',\n            // tslint:disable-next-line:align\n            this.props.className ?\n                this.props.className : '');\n        this.isManuallyToggled = false;\n        return (\n            <div className={drawerClass}>\n                <Button\n                    {...this.props.toggleButtonProps}\n                    onClick={this._toggle}\n                    aria-expanded={collapseProps.isOpen}\n                    block\n                    disabled={this.props.disabled}\n                    className={'drawer__button'}\n                    color='secondary'\n                >\n                    {this._generateDrawerButtonInnerMarkup(collapseProps.isOpen)}\n                </Button>\n                <Collapse {...collapseProps} />\n            </div>\n        );\n    }\n\n    private _generateDrawerButtonInnerMarkup(collapseState: boolean): JSX.Element {\n        const drawerButtonTextClass = classnames('drawer__buttontext',\n            // tslint:disable-next-line:align\n            this.props.toggleButtonClassName ?\n                this.props.toggleButtonClassName : '');\n        if (this.props.glyphPlacement === 'end') {\n            return (\n                <>\n                    <span className={classnames(drawerButtonTextClass, '__start')}>{this.props.toggleButtonText}</span>\n                    {this._generateGlyphMarkup('drawer__glyph__end', collapseState)}\n                </>\n            );\n        }\n\n        if (this.props.glyphPlacement === 'start') {\n            return (\n                <>\n                    {this._generateGlyphMarkup('drawer__glyph__start', collapseState)}\n                    <span className={classnames(drawerButtonTextClass, '__end')}>{this.props.toggleButtonText}</span>\n                </>\n            );\n        } else {\n            return <span className={classnames(drawerButtonTextClass, '__start')}>{this.props.toggleButtonText}</span>;\n        }\n    }\n\n    private _generateGlyphMarkup(location: string, collapseState: boolean): JSX.Element {\n        let glyphClass = collapseState ? this.drawerOpenGlyph : this.drawerCloseGlyph;\n        glyphClass = `${glyphClass} ${location}`;\n        return (\n            <span className={glyphClass} />\n        );\n    }\n\n    private _toggle(e: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void {\n        e.preventDefault();\n        this.setState({ isOpen: !this.state.isOpen });\n        this.isManuallyToggled = true;\n        if (this.props.onToggle) {\n            this.props.onToggle(this.state);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}