{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{EVENT_COMMERCE_REQUEST_START,EVENT_COMMERCE_REQUEST_STOP,InternalTelemetry,StaticTelemetry,TelemetryBase}from'@msdyn365-commerce/telemetry-internal';import axios from'axios';// Default timeout is 10 seconds\nconst defaultTimeout=10000;/**\r\n * Helper class to call the commerce retail server\r\n */export class CommerceRequest{constructor(context){this.post=async args=>{const{httpOptions}=this.parseOptions(args);return this.sendCommerceRequest(args.requestUrl,'post',args.body,httpOptions);};this.get=async args=>{const{httpOptions}=this.parseOptions(args);return this.sendCommerceRequest(args.requestUrl,'get',null,httpOptions);};this.parseOptions=args=>{const apiSettings=this.apiSettings;const{options}=args;const requestId=options&&options.headers&&(options.headers.requestId||options.headers.operationId)||this.requestContext.operationId||TelemetryBase.generateGuid();const httpOptions=_objectSpread(_objectSpread({},{headers:{oun:apiSettings.oun,requestId}}),args.options);return{httpOptions};};/**\r\n         * Creates a basic Axios Request Config that is shared across commerce and standard HTTP calls\r\n         * @param requestUrl The url of the request\r\n         * @param httpMethod The HTTP method of the request\r\n         * @param body The body content of the request\r\n         * @param options The options associated with the request\r\n         */this.createDefaultRequest=(requestUrl,httpMethod,body,options)=>{return{method:httpMethod||'get',url:requestUrl,data:body,timeout:options?options.timeout||defaultTimeout:defaultTimeout,headers:options?options.headers||{}:{}};};/**\r\n         * Sets retail server specific headers needed for auth\r\n         * @param requestConfig The current configuration settings of the request\r\n         * @param apiSettings The retail server API configuration settings\r\n         */this.setRetailServerRequestHeaders=requestConfig=>{if(!requestConfig.headers){requestConfig.headers={};}requestConfig.headers['from-keystone']='true';requestConfig.headers.oun=requestConfig.headers.oun||'';requestConfig.headers.Accept=requestConfig.headers.Accept||'application/json;odata=nometadata';requestConfig.headers.ContentType=requestConfig.headers.ContentType||'application/json;odata=verbose';return requestConfig;};/**\r\n         * Parses an OData Response and returns just the return type of the call without the extra OData Metadata\r\n         */this.parseODataResponse=response=>{if(response&&response.value&&response['@odata.context']){return response.value;}else{return response;}};/**\r\n         * Send an retail server request\r\n         * @param requestUrl The url of the request\r\n         * @param httpMethod The HTTP method of the request\r\n         * @param body The body content of the request\r\n         * @param options The options associated with the request\r\n         */this.sendCommerceRequest=async(requestUrl,httpMethod,body,options)=>{const apiVersion=requestUrl.indexOf('?')===-1?'?api-version=7.3':'&api-version=7.3';requestUrl=\"\".concat(this.apiSettings.baseUrl).concat(requestUrl).concat(apiVersion);let request=this.createDefaultRequest(requestUrl,httpMethod,body,options);// generate telemetryid to track event\nconst requestId=InternalTelemetry.generateGuid();// Add pre-call telemetry here\nStaticTelemetry.trackEvent(EVENT_COMMERCE_REQUEST_START,{id:requestId});// Add the retail server request headers\n// Ideally these will be pulled via our zone implementation so they can be completely hidden from the end user\nrequest=this.setRetailServerRequestHeaders(request);// Send the request\nreturn axios.request(request).then(response=>{// Add any post-call telemetry here\nStaticTelemetry.trackEvent(EVENT_COMMERCE_REQUEST_STOP,{statusCode:\"\".concat(response.status),success:'true',id:requestId});// Parse OData and return response\nreturn _objectSpread(_objectSpread({},response),{},{data:this.parseODataResponse(response.data)});}).catch(error=>{StaticTelemetry.trackEvent(EVENT_COMMERCE_REQUEST_STOP,{statusCode:\"\".concat(error.code),success:'false',id:requestId});// Return either passed error response or empty response to user\nreturn error.response||{};});};if(!context){throw Error('Context passed in as null, cannot call API');}const requestContext=context.requestContext;if(!requestContext||!requestContext.apiSettings||!requestContext.apiSettings.baseUrl){throw Error('Context passed is not of type ActionContext, cannot call API');}this.apiSettings=requestContext.apiSettings;this.requestContext=requestContext;}}","map":{"version":3,"sources":["../../../src/models/commerce-request.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport {\n    EVENT_COMMERCE_REQUEST_START,\n    EVENT_COMMERCE_REQUEST_STOP,\n    IEventCommerceRequestStopProperties,\n    InternalTelemetry,\n    StaticTelemetry,\n    TelemetryBase\n} from '@msdyn365-commerce/telemetry-internal';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport { IAny, IGeneric } from '..';\nimport { ICommerceApiSettings } from '../contract';\nimport { HTTPMethod, IActionContext, IHTTPError, IHTTPRequestOptions, IHTTPResponse, IODataResponse, IRequestContext } from '../interfaces';\n\n// Default timeout is 10 seconds\nconst defaultTimeout = 10000;\n\n/**\n * Helper class to call the commerce retail server\n */\nexport class CommerceRequest {\n    private readonly apiSettings: ICommerceApiSettings;\n    private readonly requestContext: IRequestContext;\n\n    constructor(context: IActionContext) {\n        if (!context) {\n            throw Error('Context passed in as null, cannot call API');\n        }\n\n        const requestContext = <IRequestContext>(<IGeneric<IAny>>context).requestContext;\n        if (!requestContext || !requestContext.apiSettings || !requestContext.apiSettings.baseUrl) {\n            throw Error('Context passed is not of type ActionContext, cannot call API');\n        }\n\n        this.apiSettings = requestContext.apiSettings;\n        this.requestContext = requestContext;\n    }\n\n    public post = async <T>(args: { requestUrl: string; body?: unknown; options?: IHTTPRequestOptions }): Promise<IHTTPResponse<T>> => {\n        const { httpOptions } = this.parseOptions(args);\n        return this.sendCommerceRequest(args.requestUrl, 'post', args.body, httpOptions);\n    };\n\n    public get = async <T>(args: {\n        requestUrl: string;\n        context: IRequestContext;\n        options?: IHTTPRequestOptions;\n    }): Promise<IHTTPResponse<T>> => {\n        const { httpOptions } = this.parseOptions(args);\n        return this.sendCommerceRequest(args.requestUrl, 'get', null, httpOptions);\n    };\n\n    private parseOptions = (args: { requestUrl: string; body?: unknown; options?: IHTTPRequestOptions }) => {\n        const apiSettings = this.apiSettings;\n        const { options } = args;\n        const requestId =\n            (options && options.headers && (options.headers.requestId || options.headers.operationId)) ||\n            this.requestContext.operationId ||\n            TelemetryBase.generateGuid();\n        const httpOptions: IHTTPRequestOptions = {\n            ...{ headers: { oun: apiSettings.oun, requestId } },\n            ...args.options\n        };\n        return { httpOptions };\n    };\n\n    /**\n     * Creates a basic Axios Request Config that is shared across commerce and standard HTTP calls\n     * @param requestUrl The url of the request\n     * @param httpMethod The HTTP method of the request\n     * @param body The body content of the request\n     * @param options The options associated with the request\n     */\n    private createDefaultRequest = (\n        requestUrl: string,\n        httpMethod?: HTTPMethod,\n        body?: unknown,\n        options?: IHTTPRequestOptions\n    ): AxiosRequestConfig => {\n        return {\n            method: httpMethod || 'get',\n            url: requestUrl,\n            data: body,\n            timeout: options ? options.timeout || defaultTimeout : defaultTimeout,\n            headers: options ? options.headers || {} : {}\n        };\n    };\n\n    /**\n     * Sets retail server specific headers needed for auth\n     * @param requestConfig The current configuration settings of the request\n     * @param apiSettings The retail server API configuration settings\n     */\n    private setRetailServerRequestHeaders = (requestConfig: AxiosRequestConfig) => {\n        if (!requestConfig.headers) {\n            requestConfig.headers = {};\n        }\n\n        requestConfig.headers['from-keystone'] = 'true';\n        requestConfig.headers.oun = requestConfig.headers.oun || '';\n        requestConfig.headers.Accept = requestConfig.headers.Accept || 'application/json;odata=nometadata';\n        requestConfig.headers.ContentType = requestConfig.headers.ContentType || 'application/json;odata=verbose';\n\n        return requestConfig;\n    };\n\n    /**\n     * Parses an OData Response and returns just the return type of the call without the extra OData Metadata\n     */\n    private parseODataResponse = <T>(response?: IODataResponse<T>): T => {\n        if (response && response.value && response['@odata.context']) {\n            return response.value;\n        } else {\n            return <T>(<unknown>response);\n        }\n    };\n\n    /**\n     * Send an retail server request\n     * @param requestUrl The url of the request\n     * @param httpMethod The HTTP method of the request\n     * @param body The body content of the request\n     * @param options The options associated with the request\n     */\n    private sendCommerceRequest = async <T>(\n        requestUrl: string,\n        httpMethod?: HTTPMethod,\n        body?: unknown,\n        options?: IHTTPRequestOptions\n    ): Promise<IHTTPResponse<T>> => {\n        const apiVersion = requestUrl.indexOf('?') === -1 ? '?api-version=7.3' : '&api-version=7.3';\n        requestUrl = `${this.apiSettings.baseUrl}${requestUrl}${apiVersion}`;\n        let request = this.createDefaultRequest(requestUrl, httpMethod, body, options);\n        // generate telemetryid to track event\n        const requestId = InternalTelemetry.generateGuid();\n\n        // Add pre-call telemetry here\n        StaticTelemetry.trackEvent(EVENT_COMMERCE_REQUEST_START, { id: requestId });\n\n        // Add the retail server request headers\n        // Ideally these will be pulled via our zone implementation so they can be completely hidden from the end user\n        request = this.setRetailServerRequestHeaders(request);\n\n        // Send the request\n        return axios\n            .request(request)\n            .then((response: IHTTPResponse<IODataResponse<T>>) => {\n                // Add any post-call telemetry here\n                StaticTelemetry.trackEvent<IEventCommerceRequestStopProperties, {}>(EVENT_COMMERCE_REQUEST_STOP, {\n                    statusCode: `${response.status}`,\n                    success: 'true',\n                    id: requestId\n                });\n\n                // Parse OData and return response\n                return {\n                    ...response,\n                    data: this.parseODataResponse(response.data)\n                };\n            })\n            .catch((error: IHTTPError) => {\n                StaticTelemetry.trackEvent<IEventCommerceRequestStopProperties, {}>(EVENT_COMMERCE_REQUEST_STOP, {\n                    statusCode: `${error.code}`,\n                    success: 'false',\n                    id: requestId\n                });\n\n                // Return either passed error response or empty response to user\n                return error.response || <IHTTPResponse>{};\n            });\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}