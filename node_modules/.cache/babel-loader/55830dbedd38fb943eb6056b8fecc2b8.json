{"ast":null,"code":"import\"core-js/modules/es.string.split.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import _get2 from\"lodash/get\";import _cloneDeep2 from\"lodash/cloneDeep\";import{MODULE_ACTION_KEY,MODULE_CACHE_KEY,MODULE_CONFIG_ERRORS_KEY,MODULE_CONFIG_KEY,MODULE_DATA_KEY,MODULE_DEFERRED_KEY}from'../consts';/**\r\n * Resolves any image/video types in the module config as given by authoring in a fragment or a module\r\n * into what is required to render these images/videos on SDK side\r\n */export const resolveTypesInConfig=(config,moduleId,moduleType,moduleLayout,themeSettings)=>{resolveTypesInConfigHelper(config,moduleId,moduleType,moduleLayout,[],themeSettings);};const resolveTypesInConfigHelper=(obj,moduleId,moduleType,moduleLayout,pathToField,themeSettings)=>{if(!obj){return;}else if(Array.isArray(obj)){for(let i=0;i<obj.length;i++){resolveTypesInConfigHelper(obj[i],moduleId,moduleType,moduleLayout,pathToField.concat([\"\".concat(i)]),themeSettings);}}else if(typeof obj==='object'&&obj){Object.keys(obj).forEach(value=>{const updatedPathToField=pathToField.concat([\"\".concat(value)]);if(obj[value].type==='imageFileData'){var _imageData$binaryMeta,_imageData$binaryMeta2,_imageData$binaryMeta3,_imageData$binaryMeta4,_imageData$variantInf,_imageData$variantInf2,_imageData$variantInf3,_imageData$variantInf4,_imageData$binaryMeta5;const imageData=obj[value];// Construct the viewport image settings information using the current theme and module\nconst viewportInfo=constructViewportInformationForImage(moduleType,moduleLayout,updatedPathToField,((_imageData$binaryMeta=imageData.binaryMetadata)===null||_imageData$binaryMeta===void 0?void 0:_imageData$binaryMeta.quality)||80,themeSettings,(_imageData$binaryMeta2=imageData.binaryMetadata)===null||_imageData$binaryMeta2===void 0?void 0:_imageData$binaryMeta2.focalRegion,(_imageData$binaryMeta3=imageData.binaryMetadata)===null||_imageData$binaryMeta3===void 0?void 0:_imageData$binaryMeta3.cropRegions,(_imageData$binaryMeta4=imageData.binaryMetadata)===null||_imageData$binaryMeta4===void 0?void 0:_imageData$binaryMeta4.extension).viewports;obj[value]={src:imageData.publicUrl,$type:'image',altText:(_imageData$variantInf=imageData.variantInfo)===null||_imageData$variantInf===void 0?void 0:(_imageData$variantInf2=_imageData$variantInf.variantProperties)===null||_imageData$variantInf2===void 0?void 0:_imageData$variantInf2.altText,title:(_imageData$variantInf3=imageData.variantInfo)===null||_imageData$variantInf3===void 0?void 0:(_imageData$variantInf4=_imageData$variantInf3.variantProperties)===null||_imageData$variantInf4===void 0?void 0:_imageData$variantInf4.title,imageSettings:{quality:(_imageData$binaryMeta5=imageData.binaryMetadata)===null||_imageData$binaryMeta5===void 0?void 0:_imageData$binaryMeta5.quality,viewports:viewportInfo}};}else if(obj[value].type==='videoFileData'){var _authoringVideoData$b,_authoringVideoData$b2,_authoringVideoData$b3,_authoringVideoData$v,_authoringVideoData$b4,_authoringVideoData$b5,_authoringVideoData$b6,_authoringVideoData$b7;const authoringVideoData=obj[value];const videoData={binaryReferences:(_authoringVideoData$b=authoringVideoData.binaryMetadata)===null||_authoringVideoData$b===void 0?void 0:_authoringVideoData$b.binaryReferences,title:(_authoringVideoData$b2=authoringVideoData.binaryMetadata)===null||_authoringVideoData$b2===void 0?void 0:_authoringVideoData$b2.title,playTime:(_authoringVideoData$b3=authoringVideoData.binaryMetadata)===null||_authoringVideoData$b3===void 0?void 0:_authoringVideoData$b3.playtime,fileName:authoringVideoData.sourceUrl,interactiveTriggersEnabled:(_authoringVideoData$v=authoringVideoData.variantProperties)===null||_authoringVideoData$v===void 0?void 0:_authoringVideoData$v.interactiveTriggersEnabled,thumbnail:{$type:'image',source:authoringVideoData.thumbnailUrl,imageQuality:'80',altText:(_authoringVideoData$b4=authoringVideoData.binaryMetadata)===null||_authoringVideoData$b4===void 0?void 0:(_authoringVideoData$b5=_authoringVideoData$b4.thumbnail)===null||_authoringVideoData$b5===void 0?void 0:_authoringVideoData$b5.title,title:(_authoringVideoData$b6=authoringVideoData.binaryMetadata)===null||_authoringVideoData$b6===void 0?void 0:(_authoringVideoData$b7=_authoringVideoData$b6.thumbnail)===null||_authoringVideoData$b7===void 0?void 0:_authoringVideoData$b7.altText}};obj[value]=constructVideoInformation(videoData,moduleId);}else{resolveTypesInConfigHelper(obj[value],moduleId,moduleType,moduleLayout,updatedPathToField,themeSettings);}});}};/**\r\n * Constructs the viewport information for an image using the current module and theme settings\r\n * Also constructs the query string for the image resizer\r\n *\r\n * @param moduleId The id of the module\r\n * @param moduleConfig The config object for the module\r\n * @param pathToField The path to the image the field\r\n * @param quality The image quality selected\r\n * @param themeSettings The current theme settings\r\n * @param focalRegion The image focal region settings\r\n * @param cropRegions The image crop region per layout/viewport settings\r\n * @param format The image format\r\n */export const constructViewportInformationForImage=function constructViewportInformationForImage(moduleName,moduleLayout,pathToField,quality,themeSettings){let focalRegion=arguments.length>5&&arguments[5]!==undefined?arguments[5]:{};let cropRegions=arguments.length>6&&arguments[6]!==undefined?arguments[6]:[];let format=arguments.length>7?arguments[7]:undefined;const imageSettings={viewports:{xs:{width:800,height:600},sm:{width:1200,height:900},md:{width:1600,height:900},lg:{width:1600,height:700},xl:{width:1600,height:700}}};// Drill down into the theme settings object for the current module, current module layout and image property name\nif(themeSettings&&themeSettings.modules&&moduleLayout){const themeSettingsForModule=themeSettings.modules[moduleName];if(themeSettingsForModule){const themeSettingsForLayout=themeSettingsForModule.properties[moduleLayout];if(themeSettingsForLayout){const imageViewportProperties=_get2(themeSettingsForLayout.properties,pathToField,{properties:imageSettings}).properties;// Clone the image viewport properties from theme settings\n// so that the proxy traps do not affect the global themesettings\nimageSettings.viewports=_cloneDeep2(imageViewportProperties);}}}// Construct the query string to use for the image resizer given the width, height and quality selected\nObject.keys(imageSettings.viewports).forEach(viewport=>{const currentViewport=imageSettings.viewports[viewport];const width=getWidth(currentViewport);const height=getHeight(currentViewport);currentViewport.q=constructImageQueryString(width,height,quality,focalRegion,cropRegions,moduleName,moduleLayout,pathToField,viewport,format);});return imageSettings;};const getWidth=currentViewport=>{if(currentViewport.w){return currentViewport.w;}else if(currentViewport.width){return currentViewport.width;}return undefined;};const getHeight=currentViewport=>{if(currentViewport.h){return currentViewport.h;}else if(currentViewport.height){return currentViewport.height;}return undefined;};/**\r\n * Constructs the image resizer query param string\r\n * taking into account width, height, quality, focal point and crop regions\r\n */const constructImageQueryString=(width,height,quality,focalRegion,cropRegions,moduleName,moduleLayout,pathToField,viewport,format)=>{// Set the base properties\nconst resizerProperties={w:width,h:height,q:quality,m:'6'};// If focal region properties exist set the focal point information\nif(focalRegion&&focalRegion.x1&&focalRegion.y1){resizerProperties.o='t';resizerProperties.x=\"\".concat(focalRegion.x1);resizerProperties.y=\"\".concat(focalRegion.y1);}const pathToFieldString=pathToField.join('|');const cropRegion=cropRegions.find(value=>value.name===\"\".concat(moduleName,\"|\").concat(moduleLayout,\"|\").concat(pathToFieldString,\"|\").concat(viewport,\"|\").concat(width,\"x\").concat(height));// If crop region exists for the particular viewport and layout\n// If both focal and crop region information exist, crop region takes precedence\nif(cropRegion){resizerProperties.o=undefined;resizerProperties.m='8';resizerProperties.x=\"\".concat(cropRegion.left);resizerProperties.y=\"\".concat(cropRegion.top);resizerProperties.s=\"\".concat(cropRegion.width);resizerProperties.d=\"\".concat(cropRegion.height);}// Add format information if available\nif(format){resizerProperties.f=format.slice(1);}let queryString='';Object.keys(resizerProperties).forEach(key=>{if(resizerProperties[key]){queryString+=\"\".concat(key,\"=\").concat(resizerProperties[key],\"&\");}});// Remove trailing ampersand if length greater than 0\nreturn queryString.length>0?queryString.slice(0,-1):queryString;};// Moves an element in the given array to the newIndex,\n// pushing all elements after the new index to the right\nexport const moveArrayItem=(array,newIndex,newElement)=>{array.splice(newIndex,0,newElement);};/**\r\n * Deletes all the cache entries for a specific module id\r\n *\r\n * @param moduleId The module id of the module whose cache entries are to be deleted\r\n * @param cache The cache object\r\n */export const deleteCacheEntriesForModuleId=(moduleId,cache)=>{// Delete module from all cache types\ncache.del({typeName:MODULE_CONFIG_ERRORS_KEY,key:moduleId});cache.del({typeName:MODULE_CONFIG_KEY,key:moduleId});cache.del({typeName:MODULE_CACHE_KEY,key:moduleId});cache.del({typeName:MODULE_ACTION_KEY,key:moduleId});cache.del({typeName:MODULE_DATA_KEY,key:moduleId});cache.del({typeName:MODULE_DEFERRED_KEY,key:moduleId});};/**\r\n * Constructs a video object used to render a video using data given by authoring\r\n *\r\n * @param videoData The video data given by authoring\r\n * @param moduleId The module id of the module for which this information is being constructed\r\n */export const constructVideoInformation=(videoData,moduleId,id)=>{// Used to generate unique keys so that even reused module ID will still trigger re-render of player component\nconst uniqueTime=new Date().getTime();return{$type:'video',id:\"\".concat(moduleId,\":\").concat(uniqueTime),_links:{binaryReferences:videoData.binaryReferences},playTime:videoData.playTime,title:videoData.title,fileName:videoData.fileName,thumbnail:{$type:'image',src:videoData.thumbnail.source,title:videoData.thumbnail.title,quality:videoData.thumbnail.imageQuality},interactiveTriggersEnabled:videoData.interactiveTriggersEnabled||false};};/**\r\n * Gets the property value of the specified property key\r\n * from a data-i attribute string\r\n *\r\n * @param dataIAttribute data-i attribute string\r\n * @param key property key\r\n */export const getPropertyFromDataIAttribute=(dataIAttribute,key)=>{var _dataIAttribute;dataIAttribute=dataIAttribute.slice(1,-1);const properties=(_dataIAttribute=dataIAttribute)===null||_dataIAttribute===void 0?void 0:_dataIAttribute.split(',');const obj={};properties===null||properties===void 0?void 0:properties.forEach(property=>{const keyValuePairs=property.split(':');obj[keyValuePairs[0]]=keyValuePairs[1];});return obj[key];};","map":{"version":3,"sources":["../../../src/utils/authoring-tools-helper-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable: no-any\nimport { ICache } from '@msdyn365-commerce/cache-internal';\nimport { IPartnerThemeSettings } from '@msdyn365-commerce/core-internal';\nimport { cloneDeep as _cloneDeep, get as _get, set as _set } from 'lodash';\nimport {\n    MODULE_ACTION_KEY,\n    MODULE_CACHE_KEY,\n    MODULE_CONFIG_ERRORS_KEY,\n    MODULE_CONFIG_KEY,\n    MODULE_DATA_KEY,\n    MODULE_DEFERRED_KEY\n} from '../consts';\n\nexport interface IImageData {\n    $type: string;\n    altText: string;\n    source: string;\n    imageQuality: string;\n    title: string;\n    focalRegion?: IFocalRegion;\n    cropRegions?: ICropRegion[];\n    format?: string;\n}\n\n/**\n * cms datatype for focal region\n */\nexport interface IFocalRegion {\n    x1?: number;\n    y1?: number;\n    x2?: number;\n    y2?: number;\n}\n\n/**\n * cms datatype for crop region\n */\n\nexport interface ICropRegion {\n    top?: number;\n    left?: number;\n    width?: number;\n    height?: number;\n    targetWidth?: number;\n    targetHeight?: number;\n    name: string;\n}\n\nexport interface IBinaryReference {\n    format?: string;\n    clientHref?: string;\n    alias?: string;\n    contentType?: string;\n    extension?: string;\n    sourceHref?: string;\n}\n\nexport interface IVideoData {\n    fileName: string;\n    title: string;\n    playTime: number;\n    thumbnail: IImageData;\n    interactiveTriggersEnabled?: boolean;\n    binaryReferences: IBinaryReference[];\n}\n\ninterface IImageResizerQueryParams {\n    /* Image width */\n    w: string;\n\n    /* Image height */\n    h: string;\n\n    /* Image quality */\n    q: string;\n\n    /* Image mode, 6 represents focal point mode and 8 represents crop region mode.\n    6 is the default value if neither focal or crop region information is present */\n    m: string;\n\n    /* Used to toggle focal mode. If o=t use focal crop. If o=f disable focal point crop */\n    o?: string;\n\n    /* X cooridnate for focal point or crop region start */\n    x?: string;\n\n    /* Y coordinate for focal point or crop region start */\n    y?: string;\n\n    /* Image size, used with crop regions */\n    s?: string;\n\n    /* Image depth, used with crop regions */\n    d?: string;\n\n    /* Image format, e.g. jpg, png */\n    f?: string;\n}\n\n/**\n * Resolves any image/video types in the module config as given by authoring in a fragment or a module\n * into what is required to render these images/videos on SDK side\n */\nexport const resolveTypesInConfig = (\n    config: any,\n    moduleId: string,\n    moduleType: string,\n    moduleLayout: string | undefined,\n    themeSettings: IPartnerThemeSettings\n) => {\n    resolveTypesInConfigHelper(config, moduleId, moduleType, moduleLayout, [], themeSettings);\n};\n\nconst resolveTypesInConfigHelper = (\n    obj: any,\n    moduleId: string,\n    moduleType: string,\n    moduleLayout: string | undefined,\n    pathToField: string[],\n    themeSettings: IPartnerThemeSettings\n) => {\n    if (!obj) {\n        return;\n    } else if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            resolveTypesInConfigHelper(obj[i], moduleId, moduleType, moduleLayout, pathToField.concat([`${i}`]), themeSettings);\n        }\n    } else if (typeof obj === 'object' && obj) {\n        Object.keys(obj).forEach((value: string) => {\n            const updatedPathToField = pathToField.concat([`${value}`]);\n            if (obj[value].type === 'imageFileData') {\n                const imageData = obj[value];\n\n                // Construct the viewport image settings information using the current theme and module\n                const viewportInfo = constructViewportInformationForImage(\n                    moduleType,\n                    moduleLayout,\n                    updatedPathToField,\n                    imageData.binaryMetadata?.quality || 80,\n                    themeSettings,\n                    imageData.binaryMetadata?.focalRegion,\n                    imageData.binaryMetadata?.cropRegions,\n                    imageData.binaryMetadata?.extension\n                ).viewports;\n                obj[value] = {\n                    src: imageData.publicUrl,\n                    $type: 'image',\n                    altText: imageData.variantInfo?.variantProperties?.altText,\n                    title: imageData.variantInfo?.variantProperties?.title,\n                    imageSettings: {\n                        quality: imageData.binaryMetadata?.quality,\n                        viewports: viewportInfo\n                    }\n                };\n            } else if (obj[value].type === 'videoFileData') {\n                const authoringVideoData = obj[value];\n                const videoData: IVideoData = {\n                    binaryReferences: authoringVideoData.binaryMetadata?.binaryReferences,\n                    title: authoringVideoData.binaryMetadata?.title,\n                    playTime: authoringVideoData.binaryMetadata?.playtime,\n                    fileName: authoringVideoData.sourceUrl,\n                    interactiveTriggersEnabled: authoringVideoData.variantProperties?.interactiveTriggersEnabled,\n                    thumbnail: {\n                        $type: 'image',\n                        source: authoringVideoData.thumbnailUrl,\n                        imageQuality: '80',\n                        altText: authoringVideoData.binaryMetadata?.thumbnail?.title,\n                        title: authoringVideoData.binaryMetadata?.thumbnail?.altText\n                    }\n                };\n                obj[value] = constructVideoInformation(videoData, moduleId);\n            } else {\n                resolveTypesInConfigHelper(obj[value], moduleId, moduleType, moduleLayout, updatedPathToField, themeSettings);\n            }\n        });\n    }\n};\n\n/**\n * Constructs the viewport information for an image using the current module and theme settings\n * Also constructs the query string for the image resizer\n *\n * @param moduleId The id of the module\n * @param moduleConfig The config object for the module\n * @param pathToField The path to the image the field\n * @param quality The image quality selected\n * @param themeSettings The current theme settings\n * @param focalRegion The image focal region settings\n * @param cropRegions The image crop region per layout/viewport settings\n * @param format The image format\n */\nexport const constructViewportInformationForImage = (\n    moduleName: string,\n    moduleLayout: string | undefined,\n    pathToField: string[],\n    quality: string,\n    themeSettings: IPartnerThemeSettings,\n    focalRegion: IFocalRegion = {},\n    cropRegions: ICropRegion[] = [],\n    format?: string\n): any => {\n    const imageSettings = {\n        viewports: {\n            xs: {\n                width: 800,\n                height: 600\n            },\n            sm: {\n                width: 1200,\n                height: 900\n            },\n            md: {\n                width: 1600,\n                height: 900\n            },\n            lg: {\n                width: 1600,\n                height: 700\n            },\n            xl: {\n                width: 1600,\n                height: 700\n            }\n        }\n    };\n\n    // Drill down into the theme settings object for the current module, current module layout and image property name\n    if (themeSettings && themeSettings.modules && moduleLayout) {\n        const themeSettingsForModule = themeSettings.modules[moduleName];\n        if (themeSettingsForModule) {\n            const themeSettingsForLayout = themeSettingsForModule.properties[moduleLayout];\n            if (themeSettingsForLayout) {\n                const imageViewportProperties = _get(themeSettingsForLayout.properties, pathToField, { properties: imageSettings })\n                    .properties;\n                // Clone the image viewport properties from theme settings\n                // so that the proxy traps do not affect the global themesettings\n                imageSettings.viewports = _cloneDeep(imageViewportProperties);\n            }\n        }\n    }\n\n    // Construct the query string to use for the image resizer given the width, height and quality selected\n    Object.keys(imageSettings.viewports).forEach((viewport: string) => {\n        const currentViewport = imageSettings.viewports[viewport];\n        const width = getWidth(currentViewport);\n        const height = getHeight(currentViewport);\n        currentViewport.q = constructImageQueryString(\n            width,\n            height,\n            quality,\n            focalRegion,\n            cropRegions,\n            moduleName,\n            moduleLayout,\n            pathToField,\n            viewport,\n            format\n        );\n    });\n    return imageSettings;\n};\n\nconst getWidth = (currentViewport: any) => {\n    if (currentViewport.w) {\n        return currentViewport.w;\n    } else if (currentViewport.width) {\n        return currentViewport.width;\n    }\n    return undefined;\n};\n\nconst getHeight = (currentViewport: any) => {\n    if (currentViewport.h) {\n        return currentViewport.h;\n    } else if (currentViewport.height) {\n        return currentViewport.height;\n    }\n    return undefined;\n};\n\n/**\n * Constructs the image resizer query param string\n * taking into account width, height, quality, focal point and crop regions\n */\nconst constructImageQueryString = (\n    width: string,\n    height: string,\n    quality: string,\n    focalRegion: IFocalRegion,\n    cropRegions: ICropRegion[],\n    moduleName: string,\n    moduleLayout: string | undefined,\n    pathToField: string[],\n    viewport: string,\n    format?: string\n): string => {\n    // Set the base properties\n    const resizerProperties: IImageResizerQueryParams = {\n        w: width,\n        h: height,\n        q: quality,\n        m: '6'\n    };\n\n    // If focal region properties exist set the focal point information\n    if (focalRegion && focalRegion.x1 && focalRegion.y1) {\n        resizerProperties.o = 't';\n        resizerProperties.x = `${focalRegion.x1}`;\n        resizerProperties.y = `${focalRegion.y1}`;\n    }\n\n    const pathToFieldString = pathToField.join('|');\n    const cropRegion = cropRegions.find(\n        (value: ICropRegion) => value.name === `${moduleName}|${moduleLayout}|${pathToFieldString}|${viewport}|${width}x${height}`\n    );\n    // If crop region exists for the particular viewport and layout\n    // If both focal and crop region information exist, crop region takes precedence\n    if (cropRegion) {\n        resizerProperties.o = undefined;\n        resizerProperties.m = '8';\n        resizerProperties.x = `${cropRegion.left}`;\n        resizerProperties.y = `${cropRegion.top}`;\n        resizerProperties.s = `${cropRegion.width}`;\n        resizerProperties.d = `${cropRegion.height}`;\n    }\n\n    // Add format information if available\n    if (format) {\n        resizerProperties.f = format.slice(1);\n    }\n\n    let queryString: string = '';\n    Object.keys(resizerProperties).forEach((key: string) => {\n        if (resizerProperties[key]) {\n            queryString += `${key}=${resizerProperties[key]}&`;\n        }\n    });\n    // Remove trailing ampersand if length greater than 0\n    return queryString.length > 0 ? queryString.slice(0, -1) : queryString;\n};\n\n// Moves an element in the given array to the newIndex,\n// pushing all elements after the new index to the right\nexport const moveArrayItem = (array: any[], newIndex: number, newElement: any): void => {\n    array.splice(newIndex, 0, newElement);\n};\n\n/**\n * Deletes all the cache entries for a specific module id\n *\n * @param moduleId The module id of the module whose cache entries are to be deleted\n * @param cache The cache object\n */\nexport const deleteCacheEntriesForModuleId = (moduleId: string, cache: ICache): void => {\n    // Delete module from all cache types\n    cache.del({ typeName: MODULE_CONFIG_ERRORS_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_CONFIG_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_CACHE_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_ACTION_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_DATA_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_DEFERRED_KEY, key: moduleId });\n};\n\n/**\n * Constructs a video object used to render a video using data given by authoring\n *\n * @param videoData The video data given by authoring\n * @param moduleId The module id of the module for which this information is being constructed\n */\nexport const constructVideoInformation = (videoData: IVideoData, moduleId: string, id?: string): any => {\n    // Used to generate unique keys so that even reused module ID will still trigger re-render of player component\n    const uniqueTime = new Date().getTime();\n    return {\n        $type: 'video',\n        id: `${moduleId}:${uniqueTime}`,\n        _links: {\n            binaryReferences: videoData.binaryReferences\n        },\n        playTime: videoData.playTime,\n        title: videoData.title,\n        fileName: videoData.fileName,\n        thumbnail: {\n            $type: 'image',\n            src: videoData.thumbnail.source,\n            title: videoData.thumbnail.title,\n            quality: videoData.thumbnail.imageQuality\n        },\n        interactiveTriggersEnabled: videoData.interactiveTriggersEnabled || false\n    };\n};\n\n/**\n * Gets the property value of the specified property key\n * from a data-i attribute string\n *\n * @param dataIAttribute data-i attribute string\n * @param key property key\n */\nexport const getPropertyFromDataIAttribute = (dataIAttribute: string, key: string) => {\n    dataIAttribute = dataIAttribute.slice(1, -1);\n    const properties = dataIAttribute?.split(',');\n    const obj = {};\n    properties?.forEach((property: string) => {\n        const keyValuePairs = property.split(':');\n        obj[keyValuePairs[0]] = keyValuePairs[1];\n    });\n    return obj[key];\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}