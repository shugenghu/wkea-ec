{"ast":null,"code":"import\"core-js/modules/es.regexp.constructor.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/es.string.replace.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import\"core-js/modules/web.dom-collections.iterator.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-floating-promises\nimport{LogLevel}from'../interfaces';/**\r\n * Default console logger\r\n * This is a default logger that just logs messages directly to the console\r\n */class GenericConsoleLogger{constructor(){this.options={};}initialize(options){this.options=options;}/**\r\n     * @internal\r\n     * Logs a message to the console, prefixed with custom tags, and with arguments following\r\n     * @param logLevel LogLevel of the message\r\n     * @param context Telemetry context to add to log\r\n     * @param messageTemplate Structured log formatted string\r\n     * @param placeholders List of placeholders in messageTemplate along with position in string\r\n     * @param values Arguments to replace placeholders\r\n     * @param customTags Array of strings to attach to log\r\n     */sendLog(logLevel,context,messageTemplate,// tslint:disable-next-line:no-any\nplaceholders,customTags,exception){// Determine console output method based on log level\nlet printFunction;switch(logLevel){case LogLevel.Critical:case LogLevel.Error:printFunction=console.error;break;case LogLevel.Warning:printFunction=console.warn;break;case LogLevel.Information:case LogLevel.Debug:case LogLevel.Trace:// Don't print debug and info messages to console unless in debug mode\nif(!this.options.isDebug){return;}default:printFunction=console.log;}// Output tags and message template\nlet tagsString='';if(customTags!==undefined){customTags.forEach(tag=>{tagsString+=\"[\".concat(tag,\"]\");});}tagsString&&printFunction(tagsString);let message=messageTemplate;// Output arguments\nfor(const[key,value]of placeholders.entries()){let messageValue;// If Dynamics privacy object only print data value, else print object\nif(value.__isDynamicsPrivacy){messageValue=value.data;}else{messageValue=value;}if(messageValue.toString()==='[object Object]'){messageValue=JSON.stringify(messageValue,null,2);}message=message.replace(new RegExp(\"{\".concat(key,\"}\"),'g'),messageValue);}printFunction(\"[\".concat(logLevel,\"] \").concat(message));// Print exception if present\nif(exception!==undefined){printFunction(exception.stack);}}/**\r\n     * @internal\r\n     * Logs a message to the console based on LogLevel\r\n     */log(logLevel,message,args,context){switch(logLevel){case LogLevel.Information:// @ts-ignore\nthis.options.isInfo&&this._printMessages(console.log,message,args);break;case LogLevel.Debug:this.options.isDebug&&this._printMessages(console.log,message,args);break;case LogLevel.Trace:this._printMessages(console.log,message,args);break;case LogLevel.Warning:this._printMessages(console.warn,message,args);break;case LogLevel.Critical:case LogLevel.Error:this._printMessages(console.error,message,args);break;default:}}/**\r\n     * @internal\r\n     * Logs an exception object to the console\r\n     */exception(error,context){if(error){console.error(error.stack);}}/**\r\n     * @internal\r\n     * Tracks a metric\r\n     * @param name Metric name\r\n     * @param value Metric value\r\n     */trackMetric(name,value,context){console.log(\"\".concat(name,\": \").concat(value));}trackEvent(name,properties,measurements,context){const event={name:name,time:new Date(),properties,measurements};this.log(LogLevel.Information,name,[event],context);}/**\r\n     * Track a page view\r\n     *\r\n     * @param {string} name\r\n     * @param {string} [url]\r\n     */trackPageView(name,url){this.trackEvent('trackPageView',{url});}/**\r\n     * Track request\r\n     * @param options the request options\r\n     */trackDependency(options){this.trackEvent('trackRequest',options);}/**\r\n     * Prints the given message and arguments to the console via the given function\r\n     * @param printFunction Function to use to print\r\n     * @param message String to print\r\n     * @param args Additional args to print\r\n     */_printMessages(printFunction,message,args){printFunction(message);args.forEach(arg=>{printFunction(arg);});}}const singletonLoggerInstance=new GenericConsoleLogger();export{singletonLoggerInstance as GenericConsoleLogger};","map":{"version":3,"sources":["../../../src/loggers/generic-console-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-floating-promises\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\n/**\n * Default console logger\n * This is a default logger that just logs messages directly to the console\n */\nclass GenericConsoleLogger implements ITraceLogger {\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console, prefixed with custom tags, and with arguments following\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Determine console output method based on log level\n        let printFunction: Function;\n        switch (logLevel) {\n            case LogLevel.Critical:\n            case LogLevel.Error:\n                printFunction = console.error;\n                break;\n            case LogLevel.Warning:\n                printFunction = console.warn;\n                break;\n            case LogLevel.Information:\n            case LogLevel.Debug:\n            case LogLevel.Trace:\n                // Don't print debug and info messages to console unless in debug mode\n                if (!this.options.isDebug) {\n                    return;\n                }\n            default:\n                printFunction = console.log;\n        }\n\n        // Output tags and message template\n        let tagsString = '';\n        if (customTags !== undefined) {\n            customTags.forEach(tag => {\n                tagsString += `[${tag}]`;\n            });\n        }\n        tagsString && printFunction(tagsString);\n        let message = messageTemplate;\n\n        // Output arguments\n        for (const [key, value] of placeholders.entries()) {\n            let messageValue;\n            // If Dynamics privacy object only print data value, else print object\n            if (value.__isDynamicsPrivacy) {\n                messageValue = value.data;\n            } else {\n                messageValue = value;\n            }\n            if (messageValue.toString() === '[object Object]') {\n                messageValue = JSON.stringify(messageValue, null, 2);\n            }\n            message = message.replace(new RegExp(`{${key}}`, 'g'), messageValue);\n        }\n        printFunction(`[${logLevel}] ${message}`);\n\n        // Print exception if present\n        if (exception !== undefined) {\n            printFunction(exception.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console based on LogLevel\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        switch (logLevel) {\n            case LogLevel.Information:\n                // @ts-ignore\n                this.options.isInfo && this._printMessages(console.log, message, args);\n                break;\n            case LogLevel.Debug:\n                this.options.isDebug && this._printMessages(console.log, message, args);\n                break;\n            case LogLevel.Trace:\n                this._printMessages(console.log, message, args);\n                break;\n            case LogLevel.Warning:\n                this._printMessages(console.warn, message, args);\n                break;\n            case LogLevel.Critical:\n            case LogLevel.Error:\n                this._printMessages(console.error, message, args);\n                break;\n            default:\n        }\n    }\n\n    /**\n     * @internal\n     * Logs an exception object to the console\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        if (error) {\n            console.error(error.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Tracks a metric\n     * @param name Metric name\n     * @param value Metric value\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        console.log(`${name}: ${value}`);\n    }\n\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        const event = {\n            name: name,\n            time: new Date(),\n            properties,\n            measurements\n        };\n        this.log(LogLevel.Information, name, [event], <ITelemetryContext>context);\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        this.trackEvent('trackPageView', { url });\n    }\n\n    /**\n     * Track request\n     * @param options the request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        this.trackEvent('trackRequest', options);\n    }\n\n    /**\n     * Prints the given message and arguments to the console via the given function\n     * @param printFunction Function to use to print\n     * @param message String to print\n     * @param args Additional args to print\n     */\n    private _printMessages(printFunction: Function, message: string, args: unknown[]): void {\n        printFunction(message);\n        args.forEach(arg => {\n            printFunction(arg);\n        });\n    }\n}\n\nconst singletonLoggerInstance = new GenericConsoleLogger();\nexport { singletonLoggerInstance as GenericConsoleLogger };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}