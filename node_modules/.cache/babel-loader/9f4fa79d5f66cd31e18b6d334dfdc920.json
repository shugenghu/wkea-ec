{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{EVENT_HTTP_SERVICE_START,EVENT_HTTP_SERVICE_STOP,InternalTelemetry,StaticTelemetry}from'@msdyn365-commerce/telemetry-internal';import axios from'axios';import msdyn365Commerce from'../msdyn365-commerce';// Default timeout is 10 seconds\nconst defaultTimeout=10000;/**\r\n * Sets retail server specific headers needed for auth\r\n * @param requestConfig The current configuration settings of the request\r\n * @param apiSettings The retail server API configuration settings\r\n */const setRetailServerRequestHeaders=requestConfig=>{if(!requestConfig.headers){requestConfig.headers={};}requestConfig.headers['from-keystone']='true';requestConfig.headers.oun=requestConfig.headers.oun||msdyn365Commerce.apiSettings.oun||'';requestConfig.headers.Accept=requestConfig.headers.Accept||'application/json;odata=nometadata';requestConfig.headers.ContentType=requestConfig.headers.ContentType||'application/json;odata=verbose';return requestConfig;};/**\r\n * Parses an OData Response and returns just the return type of the call without the extra OData Metadata\r\n */const parseODataResponse=response=>{if(response&&response.value&&response['@odata.context']){return response.value;}else{return response;}};/**\r\n * Creates a basic Axios Request Config that is shared across commerce and standard HTTP calls\r\n * @param requestUrl The url of the request\r\n * @param httpMethod The HTTP method of the request\r\n * @param body The body content of the request\r\n * @param options The options associated with the request\r\n */const createDefaultRequest=(requestUrl,httpMethod,body,options)=>{return{method:httpMethod||'get',url:requestUrl,data:body,timeout:options?options.timeout||defaultTimeout:defaultTimeout,headers:options?options.headers||{}:{}};};/**\r\n * Send an retail server request\r\n * @param requestUrl The url of the request\r\n * @param httpMethod The HTTP method of the request\r\n * @param body The body content of the request\r\n * @param options The options associated with the request\r\n */export const sendCommerceRequest=async(requestUrl,httpMethod,body,options)=>{let request=createDefaultRequest(requestUrl,httpMethod,body,options);const requestId=InternalTelemetry.generateGuid();// Add pre-call telemetry here\nStaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_START,{id:requestId});// Add the retail server request headers\n// Ideally these will be pulled via our zone implementation so they can be completely hidden from the end user\nrequest=setRetailServerRequestHeaders(request);// Send the request\nreturn axios.request(request).then(response=>{// Add any post-call telemetry here\nStaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_STOP,{statusCode:\"\".concat(response.status),success:'true',id:requestId});// Parse OData and return response\nreturn _objectSpread(_objectSpread({},response),{},{data:parseODataResponse(response.data)});}).catch(error=>{// Add error handling telemetry and response here\nStaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_STOP,{statusCode:\"\".concat(error.code),success:'false',id:requestId});// Return either passed error response or empty response to user\nreturn error.response||{};});};/**\r\n * Send an external HTTP request\r\n * @param requestUrl The url of the request\r\n * @param httpMethod The HTTP method of the request\r\n * @param body The body content of the request\r\n * @param options The options associated with the request\r\n */export const sendRequest=async(requestUrl,httpMethod,body,options)=>{const request=createDefaultRequest(requestUrl,httpMethod,body,options);const requestId=InternalTelemetry.generateGuid();// Add pre-call telemetry here\nStaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_START,{id:requestId});// Send the request\nreturn axios.request(request).then(response=>{// Add any post-call telemetry here\nStaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_STOP,{statusCode:\"\".concat(response.status),success:'true',id:requestId});// Return response\nreturn response;}).catch(error=>{StaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_STOP,{statusCode:\"\".concat(error.code),success:'false',id:requestId});// Return either passed error response or empty response to user\nreturn error.response||{};});};","map":{"version":3,"sources":["../../../src/utilities/http-service.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport {\n    EVENT_HTTP_SERVICE_START,\n    EVENT_HTTP_SERVICE_STOP,\n    IEventHttpServiceStopProperties,\n    InternalTelemetry,\n    StaticTelemetry\n} from '@msdyn365-commerce/telemetry-internal';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport { HTTPMethod, IHTTPError, IHTTPRequestOptions, IHTTPResponse, IODataResponse } from '../interfaces';\nimport msdyn365Commerce from '../msdyn365-commerce';\n\n// Default timeout is 10 seconds\nconst defaultTimeout = 10000;\n\n/**\n * Sets retail server specific headers needed for auth\n * @param requestConfig The current configuration settings of the request\n * @param apiSettings The retail server API configuration settings\n */\nconst setRetailServerRequestHeaders = (requestConfig: AxiosRequestConfig) => {\n    if (!requestConfig.headers) {\n        requestConfig.headers = {};\n    }\n\n    requestConfig.headers['from-keystone'] = 'true';\n    requestConfig.headers.oun = requestConfig.headers.oun || msdyn365Commerce.apiSettings.oun || '';\n    requestConfig.headers.Accept = requestConfig.headers.Accept || 'application/json;odata=nometadata';\n    requestConfig.headers.ContentType = requestConfig.headers.ContentType || 'application/json;odata=verbose';\n\n    return requestConfig;\n};\n\n/**\n * Parses an OData Response and returns just the return type of the call without the extra OData Metadata\n */\nconst parseODataResponse = <T>(response?: IODataResponse<T>): T => {\n    if (response && response.value && response['@odata.context']) {\n        return response.value;\n    } else {\n        return <T>(<unknown>response);\n    }\n};\n\n/**\n * Creates a basic Axios Request Config that is shared across commerce and standard HTTP calls\n * @param requestUrl The url of the request\n * @param httpMethod The HTTP method of the request\n * @param body The body content of the request\n * @param options The options associated with the request\n */\nconst createDefaultRequest = (\n    requestUrl: string,\n    httpMethod?: HTTPMethod,\n    body?: unknown,\n    options?: IHTTPRequestOptions\n): AxiosRequestConfig => {\n    return {\n        method: httpMethod || 'get',\n        url: requestUrl,\n        data: body,\n        timeout: options ? options.timeout || defaultTimeout : defaultTimeout,\n        headers: options ? options.headers || {} : {}\n    };\n};\n\n/**\n * Send an retail server request\n * @param requestUrl The url of the request\n * @param httpMethod The HTTP method of the request\n * @param body The body content of the request\n * @param options The options associated with the request\n */\nexport const sendCommerceRequest = async <T>(\n    requestUrl: string,\n    httpMethod?: HTTPMethod,\n    body?: unknown,\n    options?: IHTTPRequestOptions\n): Promise<IHTTPResponse<T>> => {\n    let request = createDefaultRequest(requestUrl, httpMethod, body, options);\n    const requestId = InternalTelemetry.generateGuid();\n\n    // Add pre-call telemetry here\n    StaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_START, { id: requestId });\n\n    // Add the retail server request headers\n    // Ideally these will be pulled via our zone implementation so they can be completely hidden from the end user\n    request = setRetailServerRequestHeaders(request);\n\n    // Send the request\n    return axios\n        .request(request)\n        .then((response: IHTTPResponse<IODataResponse<T>>) => {\n            // Add any post-call telemetry here\n            StaticTelemetry.trackEvent<IEventHttpServiceStopProperties, {}>(EVENT_HTTP_SERVICE_STOP, {\n                statusCode: `${response.status}`,\n                success: 'true',\n                id: requestId\n            });\n\n            // Parse OData and return response\n            return {\n                ...response,\n                data: parseODataResponse(response.data)\n            };\n        })\n        .catch((error: IHTTPError) => {\n            // Add error handling telemetry and response here\n            StaticTelemetry.trackEvent<IEventHttpServiceStopProperties, {}>(EVENT_HTTP_SERVICE_STOP, {\n                statusCode: `${error.code}`,\n                success: 'false',\n                id: requestId\n            });\n\n            // Return either passed error response or empty response to user\n            return error.response || <IHTTPResponse>{};\n        });\n};\n\n/**\n * Send an external HTTP request\n * @param requestUrl The url of the request\n * @param httpMethod The HTTP method of the request\n * @param body The body content of the request\n * @param options The options associated with the request\n */\nexport const sendRequest = async <T>(\n    requestUrl: string,\n    httpMethod?: HTTPMethod,\n    body?: unknown,\n    options?: IHTTPRequestOptions\n): Promise<IHTTPResponse<T>> => {\n    const request = createDefaultRequest(requestUrl, httpMethod, body, options);\n    const requestId = InternalTelemetry.generateGuid();\n\n    // Add pre-call telemetry here\n    StaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_START, { id: requestId });\n\n    // Send the request\n    return axios\n        .request(request)\n        .then((response: IHTTPResponse<T>) => {\n            // Add any post-call telemetry here\n            StaticTelemetry.trackEvent<IEventHttpServiceStopProperties, {}>(EVENT_HTTP_SERVICE_STOP, {\n                statusCode: `${response.status}`,\n                success: 'true',\n                id: requestId\n            });\n\n            // Return response\n            return response;\n        })\n        .catch((error: IHTTPError) => {\n            StaticTelemetry.trackEvent<IEventHttpServiceStopProperties, {}>(EVENT_HTTP_SERVICE_STOP, {\n                statusCode: `${error.code}`,\n                success: 'false',\n                id: requestId\n            });\n\n            // Return either passed error response or empty response to user\n            return error.response || <IHTTPResponse>{};\n        });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}