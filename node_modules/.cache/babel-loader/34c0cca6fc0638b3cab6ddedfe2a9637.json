{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/es.string.replace.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-any\nimport{toJS}from'mobx';import{ApiVersion,EntityIdentifier}from'./Entities/CommerceTypes.g';import{AsyncResult,isAsyncResult}from'./async-result';import{ICacheSource}from'./Interfaces';import{RetailLogger,Tracer,Utils}from'./logging';import{ErrorParser}from'./exceptions/ErrorParser';import{convertToString,EMPTY,format,hasElements,isEmpty,isNullOrWhitespace,isObjectNotEmptyOrNull}from'./extensions/StringExtensions';import{ODataHttpRequest}from'./externals/DataJS.New';import{LogLevel}from'./interfaces/ITelemetry';export const ODATA_TOTAL_COUNT_PROPERTY='@odata.count';export const ODATA_HAS_NEXT_PAGE_PROPERTY='@odata.nextLink';export const GET='GET';export const POST='POST';export const PATCH='PATCH';export const DELETE='DELETE';export const GET_FROM_RETURNIDENTIFIER='___GET__FROM__RETURNIDENTIIER___';const ApiTimeoutInMilliSecond=10000;const OPERATINGUNITNUMBER_HEADERNAME='OUN';const AUTHORIZATION_HEADERNAME='Authorization';const ACCEPT_LANGUAGE='Accept-Language';const REQUEST_ID='RequestId';const DEFAULT_HEADER={Prefer:'return=representation'};/***\r\n * Parses the odata result returned from server.\r\n *\r\n * @param {any} data The result returned from server.\r\n * @param {any} resultType The entity type to parse the result as.\r\n */export function parseOdataResult(data,resultType){if(!data){return data;}if(!data.value){return resultType?new resultType(data):data;}const resultSet=data.value;if(resultType){if(Object.prototype.toString.call(resultSet)==='[object Array]'){for(let i=0;i<resultSet.length;i++){resultSet[i]=new resultType(resultSet[i]);}}}// hasNextPage only apply to array which is typeof 'object'\ntypeof resultSet==='object'?resultSet.hasNextPage=!(data[ODATA_HAS_NEXT_PAGE_PROPERTY]===undefined):null;return resultSet;}/**\r\n * Represents a data service request object.\r\n */export class DataServiceRequest{constructor(query){this._cacheKeyFromReturnType=[];this.getActionId=()=>this._actionId;this.getCacheObjectType=()=>this._cacheObjectType;this.getCacheKey=()=>this._cacheKeyFromInput;this.dataCacheType=()=>DataServiceRequest.getDataCacheType(this._query);this.shouldCacheOutput=()=>true;this.overrideCacheType=bypassCache=>{bypassCache&&(this._query.options.bypassCache=bypassCache);};Tracer.Information('DataServiceRequest.constructor()');this._query=toJS(query,{recurseEverything:true});this._hasOperationName=false;switch(query.action){case'Read':case'ReadAll':this._method=GET;break;case'Create':this._method=POST;break;case'Update':this._method=PATCH;break;case'Delete':this._method=DELETE;break;default:if(query.isAction){// Sets the HTTP method to be POST for actions\nthis._method=POST;}else{// Sets the HTTP method to be GET for functions\nthis._method=GET;}this._hasOperationName=true;}this._actionId=DataServiceRequest.getActionIdFromInput(query);this._cacheObjectType=DataServiceRequest.getCacheObjectValueFromReturnType(query.options.returnEntity);// TODO - handle Key when it is array like SHIFT case\nconst entityIdentifier=this._cacheObjectType==='SimpleProduct'?'Product':this._cacheObjectType;this._cacheKeyIdentifierFromReturnType=EntityIdentifier[entityIdentifier]&&EntityIdentifier[entityIdentifier].Key;this._cacheKeyFromInput=DataServiceRequest.buildCacheFromInput(this._query,this._cacheKeyIdentifierFromReturnType);}get batchRequestUri(){return this._callerContext.requestContext.apiSettings.baseUrl+'/$batch';}/**\r\n     * Gets Locale for the current data service factory instance.\r\n     */get locale(){return this._callerContext.requestContext.locale;}/**\r\n     * Sets Locale for the current data service factory instance.\r\n     */set locale(locale){this._callerContext.requestContext.locale=locale;}/**\r\n     * Gets query parameters for data service request.\r\n     */queryParams(){return this._query.data.parameters;}static buildBatchRequest(batchRequestUri,requests){let requestId=1;// Creates an empty batch request.\nconst odataBatchRequest={requestUri:batchRequestUri,method:POST,data:{__batchRequests:[]}};const batchRequests=odataBatchRequest.data.__batchRequests;let changeRequests;requests.forEach(request=>{request._id=requestId++;const odataRequest={requestUri:request._requestUri,method:request._method,data:DataServiceRequest.toJson(request._query.data),headers:{'Content-ID':request.id(),Prefer:'return=representation'}};if(request._method===GET){batchRequests.push(odataRequest);}else{if(!changeRequests){changeRequests=[];batchRequests.push({__changeRequests:changeRequests});}changeRequests.push(odataRequest);}});return odataBatchRequest;}/**\r\n     * Parse the batch responses.\r\n     * @param {any[]} batchResponses The server responses.\r\n     * @param {any[]} requests The request objects.\r\n     * @param {any[]} responses The responses passed down to the success callback.\r\n     */static parseBatchResponses(batchResponses,requests,responses){let errors=new Array();batchResponses.forEach(response=>{if(response.__changeResponses){errors=errors.concat(DataServiceRequest.parseBatchResponses(response.__changeResponses,requests,responses));}else{if(!response.message){const requestId=parseInt(response.headers['Content-ID'],10);responses[requestId]=parseOdataResult(response.data,requests[requestId-1]._query.returnType);}else{errors=errors.concat(ErrorParser.parseErrorMessage(response));}}});return errors;}/**\r\n     * TODO - check if below function can be replaced with JSON.stringify.\r\n     * Helper function to convert data into a stringified JSON object.\r\n     * @param {any} parent The container of the element.\r\n     * @param {any} data The data to be converted to a stringified JSON object.\r\n     * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.\r\n     */static toJson(data,parent,modifyDataInPlace){let clone=data;if(data===null){return null;}else if(typeof data!=='object'){// if data type is primitive type, no need to process further\n// as calling jquery extend or calling foreach prop on string type\n// will transform string to array of chars which will be incorrect result.\nreturn data;}if(data&&data.parameters){data=data.parameters;parent=null;}else{parent=data;}// clones the data object instead of changing it, if no modifications in place\nif(!modifyDataInPlace){clone=_objectSpread({},data);}for(const prop in clone){if(clone.hasOwnProperty(prop)){const property=clone[prop];// only non-undefined properties are added to the object\nif(typeof property!=='undefined'){let value;if(property===null){value=null;}else if(typeof property==='object'){if(property instanceof Array){value=DataServiceRequest.arrayToJson(property,parent,modifyDataInPlace);}else if(property instanceof Date){value=DataServiceRequest.toDateTimeOffset(property);}else{// recursively stringifies objects\nvalue=DataServiceRequest.toJson(property,clone,modifyDataInPlace);}}else{value=property;}clone[prop]=value;}}}return clone;}/**\r\n     * Helper function to convert array into a stringified JSON object following OData specifications.\r\n     * @param {Array} array The data to be converted to a stringified JSON object.\r\n     * @param {any} parent The container of the array.\r\n     * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.\r\n     */static arrayToJson(array,parent,modifyDataInPlace){const data=[];for(let i=0;i<array.length;i++){data[i]=DataServiceRequest.toJson(array[i],array,modifyDataInPlace);}// if array is not a top level data on an action\nreturn data;}/**\r\n     * Add offset fields to Date object for serialization purposes.\r\n     * @param {Date} dateTime The date.\r\n     * @return {Date} The date with __edmType and __offset fields injected.\r\n     */static toDateTimeOffset(dateTime){// @ts-ignore\nif(!dateTime.__edmType||!dateTime.__offset){const pad=val=>val<10?'0'+val:val.toString();const sign=dateTime.getTimezoneOffset()>0?'-':'+';const offset=Math.abs(dateTime.getTimezoneOffset());const hours=pad(Math.floor(offset/60));const minutes=pad(offset%60);// @ts-ignore\ndateTime.__edmType='Edm.DateTimeOffset';// @ts-ignore\ndateTime.__offset=sign+hours+':'+minutes;}return dateTime;}/**\r\n     * Formats entity key(s) in request Uri.\r\n     * @param {any} key The key dictionary.\r\n     * @return {string} The formated string of the key(s).\r\n     */static formatKey(key){let result=EMPTY;if(key){const formattedKey=[];let propertyName=EMPTY;for(const property in key){if(key.hasOwnProperty(property)){propertyName=property;if(typeof key[propertyName]==='string'){formattedKey.push(propertyName+\"='\".concat(key[propertyName],\"'\"));}else{formattedKey.push(propertyName+'='+key[propertyName]);}}}if(formattedKey.length===1){if(typeof key[propertyName]==='string'){result=\"'\".concat(key[propertyName],\"'\");}else{result=key[propertyName];}}else{result=formattedKey.join();}}return result;}/**\r\n     * Formats function parameters in request Uri.\r\n     * @param {any} parameters The parameter dictionary.\r\n     * @return {string} The formated and encoded string of the parameters.\r\n     */static formatFunctionParameter(parameters){let result=EMPTY;if(parameters){for(const parameter in parameters){if(parameters.hasOwnProperty(parameter)){const paramValue=parameters[parameter];if(!isEmpty(result)){result+=',';}if(paramValue===undefined){// handles undefined value\ncontinue;}else if(typeof paramValue==='string'){// handles string type value\nresult+=parameter+\"='\".concat(encodeURIComponent(paramValue),\"'\");}else{// handles null and other types value\nresult+=parameter+'='+encodeURIComponent(paramValue);}}}}return result;}// TODO - use node url api for url parsing\nstatic addParameter(requestUri,key,value){if(value){let parameterSeparator='?';if(requestUri.indexOf(parameterSeparator)>0){parameterSeparator='&';}return requestUri+parameterSeparator+key+'='+value;}else{return requestUri;}}static getActionIdFromInput(query){return\"@msdyn365-commerce/retail-proxy/\".concat(query.entitySet,\"/\").concat(query.action);}static getCacheObjectValueFromReturnType(returnType){// return type can be actual class itself like CategoryClass instead of string 'CategoryClass'\nconst cacheObjectTypeValue=typeof returnType==='function'?returnType.name:returnType;return cacheObjectTypeValue.replace('Class','');}static buildCacheFromInput(query,cacheKeyIdentifierFromReturnType){// TODO if return type have distinct primary key (and not a collection), cache key for action will be computed primary key\nlet cacheKey={};// if query have key like { RecordId: 56873008 }\nquery.key&&(cacheKey=_objectSpread({},query.key));// parameters are input to function like query.createDataServiceRequestForOperation('GetCategories', true, CategoryClass, 'true', { channelId })\n//     => {channelId} is parameters.\nquery.data&&query.data.parameters&&(cacheKey=_objectSpread(_objectSpread({},cacheKey),query.data.parameters));query.resultSettings&&(cacheKey=_objectSpread(_objectSpread(_objectSpread({},cacheKey),query.resultSettings.Paging),query.resultSettings.Sorting));query.filterSettings&&(cacheKey['filter']=query.filterSettings);isObjectNotEmptyOrNull(query.tokens)&&(cacheKey['token']=query.tokens);// TODO - add OUN in cache key\nconst cacheKeyValue=convertToString(cacheKey)||(cacheKeyIdentifierFromReturnType?GET_FROM_RETURNIDENTIFIER:\"\".concat(query.entitySet,\"|\").concat(query.entityType,\"|NOKEY\"));Tracer.Information(\"{CacheKey - CacheValue} : \".concat(cacheKey,\" - \").concat(cacheKeyValue));return cacheKeyValue;}static getDataCacheType(query){// cache all result in request cacheisObjectNotEmptyOrNull\n//\n// Follow following rule for app cache\n// -------------------------------------------------------------------------------------\n//        scenario                                 app cache\n// -------------------------------------------------------------------------------------\n// 1. if returnType is  -                             true\n//          a. Category\n//          b. Product\n//          c. OrgUnit\n//          d. ProductCatalog\n//          e. Warehouse\nif(query.entitySet==='Carts'&&query.action==='GetMaxLoyaltyPointsToRedeemForTransactionBalance'){return'none';}return query.options.bypassCache==='get'||query.options.bypassCache==='getAndPut'?'none':'request';}/**\r\n     * Gets the Request Identifier.\r\n     * Auto-generated unique identifier if executed in batch. Used to fetch the response from batch result array.\r\n     */id(){return this._id;}saveCacheEntries(data,requestCache,appCache,isCacheTypeApplication){// if return Entity is collection\n//        if entity type has identifier/primary key\n//              1. cache array of primay key value of returned entity collection on input cache key\n//              2. cache individual entity on primary key\n//        else\n//              1. cache output on input cache key\n//\n// else  if entity type has identifier/primary key\n//           2. cache output entity on primary key\nif(!data||!this._cacheKeyFromInput&&!this._cacheKeyIdentifierFromReturnType){return;}if(data instanceof AsyncResult){// For a loading Promise, cache based on input cachekey, and then cache output again once complete\nif(data.status==='LOADING'){data.then(result=>{if(this._totalCount!==undefined){data.metadata.count=this._totalCount;}this._saveEntityToCache(result,requestCache,appCache,isCacheTypeApplication);return result;});requestCache.put({typeName:this._cacheObjectType,key:this._cacheKeyFromInput},{item:data});if(appCache&&isCacheTypeApplication){appCache.put({typeName:this._cacheObjectType,key:this._cacheKeyFromInput},{item:data});}// For a completed promise, save the action results to the cache\n}else{if(this._totalCount!==undefined){data.metadata.count=this._totalCount;}this._saveEntityToCache(data.result,requestCache,appCache,isCacheTypeApplication);return data.result;}}else{return this._saveEntityToCache(data,requestCache,appCache,isCacheTypeApplication);}}_saveEntityToCache(data,requestCache,appCache,isCacheTypeApplication){if(!data||!this._cacheKeyFromInput&&!this._cacheKeyIdentifierFromReturnType){return;}const cacheEntries={};const results=data;// using Object.prototype instead of Array.isArray because results can be Observable Array which cann't be detected with Array.isArray\nif(!this._query.isReturnTypeACollection||Object.prototype.toString.call(results)!=='[object Array]'){if(this._cacheKeyIdentifierFromReturnType){const key=\"\".concat(this._cacheKeyIdentifierFromReturnType,\"-\").concat(results[this._cacheKeyIdentifierFromReturnType]);cacheEntries[key]=results;if(this._cacheKeyFromInput){let existingCacheItem=requestCache.get({typeName:this._cacheObjectType,key:this._cacheKeyFromInput});if(existingCacheItem){existingCacheItem=_objectSpread({},existingCacheItem);}if(existingCacheItem&&existingCacheItem.item&&(!(existingCacheItem.item instanceof AsyncResult)||existingCacheItem.item.status==='SUCCESS')&&(typeof existingCacheItem.item!=='object'||existingCacheItem.item['$ref']!==true)){cacheEntries[this._cacheKeyFromInput]=results;}else{cacheEntries[this._cacheKeyFromInput]={$ref:true,type:this._cacheObjectType,identifier:this._cacheKeyIdentifierFromReturnType,key:[key],count:this._totalCount};}}}else{cacheEntries[this._cacheKeyFromInput]=results;}}else if(!this._cacheKeyIdentifierFromReturnType){cacheEntries[this._cacheKeyFromInput]=results;}else{const cacheValue=results.map(result=>{const identifierValue=result[this._cacheKeyIdentifierFromReturnType];if(identifierValue){const key=\"\".concat(this._cacheKeyIdentifierFromReturnType,\"-\").concat(identifierValue);cacheEntries[key]=result;return key;}}).filter(Boolean);let existingCacheItem=requestCache.get({typeName:this._cacheObjectType,key:this._cacheKeyFromInput});if(existingCacheItem){existingCacheItem=_objectSpread({},existingCacheItem);}if(existingCacheItem.item&&(!(existingCacheItem.item instanceof AsyncResult)||existingCacheItem.item.status==='SUCCESS')&&(typeof existingCacheItem.item!=='object'||existingCacheItem.item['$ref']!==true)){cacheEntries[this._cacheKeyFromInput]=results;}else{cacheEntries[this._cacheKeyFromInput]={$ref:true,type:this._cacheObjectType,identifier:this._cacheKeyIdentifierFromReturnType,isCollection:this._query.isReturnTypeACollection,key:cacheValue,count:this._totalCount};}}if(cacheEntries){Object.keys(cacheEntries).map(entryKey=>{requestCache.put({typeName:this._cacheObjectType,key:entryKey},{item:cacheEntries[entryKey]});if(appCache&&isCacheTypeApplication){appCache.put({typeName:this._cacheObjectType,key:entryKey},{item:cacheEntries[entryKey]});}});}return cacheEntries;}readCacheEntries(requestCache,appCache,shouldReadFromAppCache,telemetry){if(!requestCache||!this._cacheKeyFromInput&&this._cacheKeyFromReturnType.length===0){return;}if(this._cacheKeyFromInput===GET_FROM_RETURNIDENTIFIER||this._cacheKeyIdentifierFromReturnType&&this._cacheKeyFromReturnType.length!==0){const entries=this.readCacheEntriesBasedOnCacheKeyFromReturnType(requestCache,appCache,shouldReadFromAppCache,telemetry);if(entries){return entries;}}const cacheKey={typeName:this._cacheObjectType,key:this._cacheKeyFromInput};let cachedValueBasedOnInput=requestCache.get(cacheKey);if(cachedValueBasedOnInput){cachedValueBasedOnInput=_objectSpread({},cachedValueBasedOnInput);}else if(shouldReadFromAppCache&&appCache){cachedValueBasedOnInput=appCache.copyTo(cacheKey,requestCache);}if(!cachedValueBasedOnInput||cachedValueBasedOnInput.shouldRefresh){return this.readCacheEntriesBasedOnCacheKeyFromReturnType(requestCache,appCache,shouldReadFromAppCache,telemetry);}if(cachedValueBasedOnInput.item instanceof AsyncResult){if(cachedValueBasedOnInput.item.status!=='LOADING'){cachedValueBasedOnInput.item=cachedValueBasedOnInput.item.result||cachedValueBasedOnInput.item.error;}else{const asyncResult=cachedValueBasedOnInput.item.then(result=>{if(typeof result!=='object'||result['$ref']!==true){return result;}return this._resolveCacheEntryReference(result,requestCache,appCache,shouldReadFromAppCache);});return asyncResult;}}if(typeof cachedValueBasedOnInput.item!=='object'||cachedValueBasedOnInput.item['$ref']!==true){return cachedValueBasedOnInput.item;}return this._resolveCacheEntryReference(cachedValueBasedOnInput.item,requestCache,appCache,shouldReadFromAppCache,isAsyncResult(cachedValueBasedOnInput.item));}_resolveCacheEntryReference(item,requestCache,appCache,shouldReadFromAppCache,isWrappingPromise){const cacheValueAsArray=item['key'].map(key=>{const value=requestCache.get({typeName:this._cacheObjectType,key});if(!value&&shouldReadFromAppCache&&appCache){appCache.copyTo({typeName:this._cacheObjectType,key},requestCache);}if(!value||!value.item||value.shouldRefresh){return undefined;}if(isAsyncResult(value.item)){return value.item.result;}return value.item;}).filter(data=>data!==undefined&&data!==null);if(item['key'].length>cacheValueAsArray.length){return;}// If we are returning a Promise that represents a future collection, we need to unwrap it\nreturn cacheValueAsArray&&cacheValueAsArray.length>0?this._query.isReturnTypeACollection&&!isWrappingPromise?cacheValueAsArray:cacheValueAsArray[0]:undefined;}readCacheEntriesBasedOnCacheKeyFromReturnType(requestCache,appCache,shouldReadFromAppCache,telemetry){if(this._cacheKeyFromReturnType.length===0){return null;}const cacheEntries=this._cacheKeyFromReturnType.map(entry=>{const key=\"\".concat(this._cacheKeyIdentifierFromReturnType,\"-\").concat(entry);let cacheValue=requestCache.get({typeName:this._cacheObjectType,key});if(!cacheValue&&shouldReadFromAppCache&&appCache){cacheValue=appCache.copyTo({typeName:this._cacheObjectType,key},requestCache);}if(!cacheValue||!cacheValue.item||cacheValue.shouldRefresh){return null;}switch(cacheValue.s){case ICacheSource.AppCache:{telemetry&&telemetry.log(LogLevel.Information,'dataAction: {actionInput.typename}\\tsource: {cacheSource}',{values:[this._cacheObjectType,'AppCache']});break;}case ICacheSource.RequestCache:{telemetry&&telemetry.log(LogLevel.Information,'dataAction: {actionInput.typename}\\tsource: {cacheSource}',{values:[this._cacheObjectType,'RequestCache']});break;}default:{telemetry&&telemetry.log(LogLevel.Information,'dataAction: {actionInput.typename}\\tsource: {cacheSource}',{values:[this._cacheObjectType,'Undefined']});break;}}return cacheValue.item;}).filter(Boolean);return cacheEntries&&cacheEntries.length>0?this._query.isReturnTypeACollection?cacheEntries:cacheEntries[0]:null;}/**\r\n     * Executes the request.\r\n     * @param {any} callerContext The caller context.\r\n     * @return {IAsyncResult<T>} The async result.\r\n     */execute(callerContext){if(!callerContext.requestContext||!callerContext.requestContext.apiSettings||!callerContext.requestContext.apiSettings.oun||!callerContext.requestContext.apiSettings.baseUrl){throw new Error(\"CallerContext missing required request parameters - [\".concat(JSON.stringify(callerContext.requestContext),\"]\"));}if(!callerContext.requestContext.locale){throw new Error(\"CallerContext missing locale - [\".concat(JSON.stringify(callerContext.requestContext),\"]\"));}this._callerContext=callerContext;this._requestUri=this.getRequestUri();let result;const headers=this.buildQueryHeader();if(!this._query.isReturnTypeACollection||this._query.resultSettings&&this._query.resultSettings.Paging&&this._query.resultSettings.Paging.Top&&this._query.resultSettings.Paging.Top>=0){result=this.loadPage(headers);}else{result=this.getAllPages(headers,0);}return result;}// Need to build batch handler ----------- PENDING\n/**\r\n     * Executes the batch requests.\r\n     * @param {DataServiceRequest[]} requests The collection of requests to execute.\r\n     * @param {any} [callerContext] The caller context.\r\n     * @return {IAsyncResult<Array>} The async result.  Responses at index I correlates to request with identifier I.\r\n     */executeBatch(requests,callerContext){if(!callerContext.requestContext||!callerContext.requestContext.apiSettings||!callerContext.requestContext.apiSettings.oun||!callerContext.requestContext.apiSettings.baseUrl){throw new Error(\"CallerContext missing required request parameters - [\".concat(JSON.stringify(callerContext.requestContext),\"]\"));}if(!callerContext.requestContext.locale){throw new Error(\"CallerContext missing locale - [\".concat(JSON.stringify(callerContext.requestContext),\"]\"));}this._callerContext=callerContext;this._requestUri=this.getRequestUri();return new Promise((resolve,reject)=>{ODataHttpRequest(DataServiceRequest.buildBatchRequest(this.batchRequestUri,requests),data=>{const responses=new Array();const errors=DataServiceRequest.parseBatchResponses(data.__batchResponses,requests,responses);if(errors.length===0){Tracer.Information(this.batchRequestUri+' success');resolve(responses);}else{Tracer.Errors(errors,this.batchRequestUri+' failed.');reject(errors);}},error=>{Tracer.Error(this.batchRequestUri+' failed');reject(ErrorParser.parseErrorMessage(error));});});}/**\r\n     * Gets the Request Uri.\r\n     */getRequestUri(){let requestUri=this._callerContext.requestContext.apiSettings.baseUrl+'Commerce';if(this._query.entitySet){requestUri=\"\".concat(requestUri,\"/\").concat(this._query.entitySet);if(this._query.key){requestUri=\"\".concat(requestUri,\"(\").concat(DataServiceRequest.formatKey(this._query.key),\")\");}else if(this._query.entitySet==='Customers'&&this._query.key!==null&&this._query.key!==undefined){requestUri=\"\".concat(requestUri,\"('')\");}}// Appends the action (POST) or function (GET) name to the Uri\nif(this._hasOperationName){requestUri+='/'+this._query.action;// Construct OData function Url with parameters. [e.g. Func(), Func(param1='',param2='')]\nif(!this._query.isAction&&this._query.data&&this._query.data.parameters){requestUri+='('+DataServiceRequest.formatFunctionParameter(this._query.data.parameters)+')';}}if(this._query.isReturnTypeACollection){requestUri=DataServiceRequest.addParameter(requestUri,'$top',this._query.resultSettings&&this._query.resultSettings.Paging?this._query.resultSettings.Paging.Top:ApiTimeoutInMilliSecond);// Config.defaultPageSize);\nrequestUri=DataServiceRequest.addParameter(requestUri,'$skip',this._query.resultSettings&&this._query.resultSettings.Paging?this._query.resultSettings.Paging.Skip:0);requestUri=DataServiceRequest.addParameter(requestUri,'$inlinecount',this._query.inlineCount?'allpages':null);if(this._query.resultSettings.count){requestUri=DataServiceRequest.addParameter(requestUri,'$count','true');}requestUri=DataServiceRequest.addParameter(requestUri,'$filter',this._query.filterSettings?this._query.filterSettings:0);if(this._query.resultSettings&&this._query.resultSettings.Sorting&&this._query.resultSettings.Sorting.Columns){this._query.resultSettings.Sorting.Columns.forEach(column=>{if(!isNullOrWhitespace(column.ColumnName||EMPTY)){const orderByColumn=format('{0}%20{1}',column.ColumnName,column.IsDescending?'desc':'asc');requestUri=DataServiceRequest.addParameter(requestUri,'$orderby',orderByColumn);}});}}if(this._query.expands&&hasElements(this._query.expands)){requestUri=DataServiceRequest.addParameter(requestUri,'$expand',this._query.expands.join());}if(!isNullOrWhitespace(ApiVersion)){requestUri=DataServiceRequest.addParameter(requestUri,'api-version',ApiVersion);}return requestUri;}/**\r\n     * Executes paginated requests for all entities.\r\n     * @param {AsyncResult{T}} asyncResult The async result.\r\n     * @param {{ [headerName: string]: string }} headerName the headers for the request.\r\n     * @param {number} skip The offset.\r\n     * @param {Array<T>} The array result.\r\n     */getAllPages(headers,skip,results){skip=skip||0;const top=1000;// Config.defaultPageSize;\nthis._query.resultSettings=this._query.resultSettings||{};this._query.resultSettings.Paging=this._query.resultSettings.Paging||{};this._query.resultSettings.Paging.Top=top;results=results||[];return this.loadPage(headers,skip).then(loadPageResults=>{if(loadPageResults){if(typeof loadPageResults.length==='number'){results=results.concat(loadPageResults);if(loadPageResults.length<top){// This page contains less items than top\nif(loadPageResults.hasNextPage){// This means the pagesize defined on server side is smaller than the top\nskip+=loadPageResults.length;return this.getAllPages(headers,skip,results);// Try to fetch the next page\n}else{// No more pages need to fetch\nreturn Promise.resolve(results);}}else{// This page contains exact amount of item as the top, should not contain more\nskip+=top;return this.getAllPages(headers,skip,results);// Try to fetch the next page\n}}else{// The pageResult is a single item\nresults.push(loadPageResults);return Promise.resolve(results);}}}).catch(error=>{return Promise.reject(error);});}/**\r\n     * Builds the header to be sent as part of the request.\r\n     * @returns {{ [headerName: string]: string }} a key value pair collection of header names and header values.\r\n     */buildQueryHeader(){const headers={};headers['from-keystone']='true';// copy default values from default header\nfor(const headerName in DEFAULT_HEADER){if(DEFAULT_HEADER.hasOwnProperty(headerName)){headers[headerName]=DEFAULT_HEADER[headerName];}}// Copy operating unit number if present for C2 (if an operation is done by a customer or by anonymous user) scenarios.\nif(!isNullOrWhitespace(this._callerContext.requestContext.apiSettings.oun)){headers[OPERATINGUNITNUMBER_HEADERNAME]=this._callerContext.requestContext.apiSettings.oun;}// Add accept-language header to send user preferred locale to server.\nheaders[ACCEPT_LANGUAGE]=this._callerContext.requestContext.locale;// Add custom AppInsights headers\nheaders[REQUEST_ID]=this._callerContext.requestContext.operationId;// add any tokens as part of the header\nfor(const tokenName in this._query.tokens){if(this._query.tokens.hasOwnProperty(tokenName)){const tokenValue=this._query.tokens[tokenName];if(!isNullOrWhitespace(tokenValue)){headers[tokenName]=tokenValue;}}}// Now check whether authentication token is present or not, if present it will be added into Authorization header.\nif(this._callerContext&&this._callerContext.requestContext.user&&!isNullOrWhitespace(this._callerContext.requestContext.user.token)){headers[AUTHORIZATION_HEADERNAME]=\"id_token \".concat(this._callerContext.requestContext.user.token);}// Check if an Bearer access token is being provided. If present it will be added into Authorization header\nif(this._callerContext&&this._callerContext.requestContext&&!isNullOrWhitespace(this._callerContext.requestContext.accessToken)){headers[AUTHORIZATION_HEADERNAME]=\"Bearer \".concat(this._callerContext.requestContext.accessToken);}return headers;}/**\r\n     * Executes request for one page.\r\n     * @param {AsyncResult<T>} The async result.\r\n     * @param {{ [headerName: string]: string }} headerName the headers for the request.\r\n     */loadPage(headers,skip){if(skip){this._query.resultSettings=this._query.resultSettings||{};this._query.resultSettings.Paging=this._query.resultSettings.Paging||{};this._query.resultSettings.Paging.Skip=skip;}const requestId=Utils.generateGuid();RetailLogger.modelManagersRetailServerRequestStarted(requestId,this._requestUri);return new Promise((resolve,reject)=>{// This is the pipe for all OData API calls.\nODataHttpRequest({requestUri:this.getRequestUri(),method:this._method,data:DataServiceRequest.toJson(this._query.data),headers},data=>{RetailLogger.modelManagersRetailServerRequestFinished(requestId,this._requestUri);const resultSet=parseOdataResult(data,this._query.returnType);// Set the total count on the DataServiceRequest\nif(data&&data[ODATA_TOTAL_COUNT_PROPERTY]){this._totalCount=data[ODATA_TOTAL_COUNT_PROPERTY];}if(this._cacheKeyIdentifierFromReturnType){if(Object.prototype.toString.call(resultSet)==='[object Array]'){this._cacheKeyFromReturnType.concat(resultSet.map(result=>result[this._cacheKeyIdentifierFromReturnType]).filter(Boolean));}else if(typeof resultSet==='object'){this._cacheKeyFromReturnType.push(resultSet[this._cacheKeyIdentifierFromReturnType]);}}resolve(resultSet);},error=>{RetailLogger.modelManagersRetailServerRequestError(requestId,this._requestUri,error.message);reject(ErrorParser.parseErrorMessage(error));});});}}","map":{"version":3,"sources":["../src/DataServiceRequest.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any\nimport { toJS } from 'mobx';\n\nimport { ApiVersion, EntityIdentifier, SortColumn } from './Entities/CommerceTypes.g';\n\nimport { AsyncResult, isAsyncResult } from './async-result';\n\nimport { BypassCache, CacheType, ICache, ICacheSource, ICallerContext, IDataServiceQueryInternal, IDataServiceRequest } from './Interfaces';\nimport { RetailLogger, Tracer, Utils } from './logging';\n\nimport { ProxyError } from './exceptions';\nimport { ErrorParser } from './exceptions/ErrorParser';\nimport {\n    convertToString,\n    EMPTY,\n    format,\n    hasElements,\n    isEmpty,\n    isNullOrWhitespace,\n    isObjectNotEmptyOrNull\n} from './extensions/StringExtensions';\n\nimport { IODataRequest, ODataHttpRequest } from './externals/DataJS.New';\nimport { ITelemetry, LogLevel } from './interfaces/ITelemetry';\n\nexport const ODATA_TOTAL_COUNT_PROPERTY = '@odata.count';\nexport const ODATA_HAS_NEXT_PAGE_PROPERTY = '@odata.nextLink';\nexport const GET: string = 'GET';\nexport const POST: string = 'POST';\nexport const PATCH: string = 'PATCH';\nexport const DELETE: string = 'DELETE';\nexport const GET_FROM_RETURNIDENTIFIER: string = '___GET__FROM__RETURNIDENTIIER___';\n\nconst ApiTimeoutInMilliSecond = 10000;\nconst OPERATINGUNITNUMBER_HEADERNAME = 'OUN';\nconst AUTHORIZATION_HEADERNAME = 'Authorization';\nconst ACCEPT_LANGUAGE = 'Accept-Language';\nconst REQUEST_ID = 'RequestId';\nconst DEFAULT_HEADER: { [headerName: string]: string } = {\n    Prefer: 'return=representation'\n};\n\n/***\n * Parses the odata result returned from server.\n *\n * @param {any} data The result returned from server.\n * @param {any} resultType The entity type to parse the result as.\n */\nexport function parseOdataResult(data: any, resultType: any): any {\n    if (!data) {\n        return data;\n    }\n\n    if (!data.value) {\n        return resultType ? new resultType(data) : data;\n    }\n\n    const resultSet = data.value;\n\n    if (resultType) {\n        if (Object.prototype.toString.call(resultSet) === '[object Array]') {\n            for (let i = 0; i < resultSet.length; i++) {\n                resultSet[i] = new resultType(resultSet[i]);\n            }\n        }\n    }\n\n    // hasNextPage only apply to array which is typeof 'object'\n    (typeof resultSet === 'object') ? resultSet.hasNextPage = !(data[ODATA_HAS_NEXT_PAGE_PROPERTY] === undefined) : null;\n    return resultSet;\n}\n\n/**\n * Represents a data service request object.\n */\nexport class DataServiceRequest implements IDataServiceRequest {\n    private get batchRequestUri(): string {\n        return this._callerContext.requestContext.apiSettings.baseUrl + '/$batch';\n    }\n\n    /**\n     * Gets Locale for the current data service factory instance.\n     */\n    public get locale(): string {\n        return this._callerContext.requestContext.locale;\n    }\n\n    /**\n     * Sets Locale for the current data service factory instance.\n     */\n    public set locale(locale: string) {\n        this._callerContext.requestContext.locale = locale;\n    }\n\n    /**\n     * Gets query parameters for data service request.\n     */\n    public queryParams<T>(): T {\n        return this._query.data.parameters as T;\n    }\n\n    private _actionId: string;\n    private _cacheObjectType: string;\n    private _cacheKeyFromInput: string;\n    private _cacheKeyFromReturnType: string[] = [];\n    private _cacheKeyIdentifierFromReturnType: string;\n\n    private _query: IDataServiceQueryInternal;\n    private _callerContext: ICallerContext;\n    private _requestUri: string;\n    private _method: string;\n    private _id: number;\n    private _hasOperationName: boolean;\n    private _totalCount: number;\n\n    private static buildBatchRequest(batchRequestUri: string, requests: DataServiceRequest[]): IODataRequest {\n        let requestId = 1;\n\n        // Creates an empty batch request.\n        const odataBatchRequest: IODataRequest = {\n            requestUri: batchRequestUri,\n            method: POST,\n            data: { __batchRequests: [] }\n        };\n\n        const batchRequests = odataBatchRequest.data.__batchRequests;\n        let changeRequests: IODataRequest[];\n\n        requests.forEach(request => {\n            request._id = requestId++;\n\n            const odataRequest: IODataRequest = {\n                requestUri: request._requestUri,\n                method: request._method,\n                data: DataServiceRequest.toJson(request._query.data),\n                headers: { 'Content-ID': request.id(), Prefer: 'return=representation' }\n            };\n\n            if (request._method === GET) {\n                batchRequests.push(odataRequest);\n            } else {\n                if (!changeRequests) {\n                    changeRequests = [];\n                    batchRequests.push({ __changeRequests: changeRequests });\n                }\n                changeRequests.push(odataRequest);\n            }\n        });\n\n        return odataBatchRequest;\n    }\n\n    /**\n     * Parse the batch responses.\n     * @param {any[]} batchResponses The server responses.\n     * @param {any[]} requests The request objects.\n     * @param {any[]} responses The responses passed down to the success callback.\n     */\n    private static parseBatchResponses(batchResponses: any[], requests: any[], responses: any[]): ProxyError[] {\n        let errors: ProxyError[] = new Array();\n\n        batchResponses.forEach(response => {\n            if (response.__changeResponses) {\n                errors = errors.concat(DataServiceRequest.parseBatchResponses(response.__changeResponses, requests, responses));\n            } else {\n                if (!response.message) {\n                    const requestId = parseInt(response.headers['Content-ID'], 10);\n\n                    responses[requestId] = parseOdataResult(response.data, requests[requestId - 1]._query.returnType);\n                } else {\n                    errors = errors.concat(ErrorParser.parseErrorMessage(response));\n                }\n            }\n        });\n\n        return errors;\n    }\n\n    /**\n     * TODO - check if below function can be replaced with JSON.stringify.\n     * Helper function to convert data into a stringified JSON object.\n     * @param {any} parent The container of the element.\n     * @param {any} data The data to be converted to a stringified JSON object.\n     * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.\n     */\n    private static toJson(data: any, parent?: any, modifyDataInPlace?: boolean): string {\n        let clone = data;\n\n        if (data === null) {\n            return null;\n        } else if (typeof data !== 'object') {\n            // if data type is primitive type, no need to process further\n            // as calling jquery extend or calling foreach prop on string type\n            // will transform string to array of chars which will be incorrect result.\n            return data;\n        }\n\n        if (data && data.parameters) {\n            data = data.parameters;\n            parent = null;\n        } else {\n            parent = data;\n        }\n\n        // clones the data object instead of changing it, if no modifications in place\n        if (!modifyDataInPlace) {\n            clone = { ...data };\n        }\n\n        for (const prop in clone) {\n            if (clone.hasOwnProperty(prop)) {\n                const property = clone[prop];\n\n                // only non-undefined properties are added to the object\n                if (typeof property !== 'undefined') {\n                    let value;\n                    if (property === null) {\n                        value = null;\n                    } else if (typeof property === 'object') {\n                        if (property instanceof Array) {\n                            value = DataServiceRequest.arrayToJson(property, parent, modifyDataInPlace);\n                        } else if (property instanceof Date) {\n                            value = DataServiceRequest.toDateTimeOffset(property);\n                        } else {\n                            // recursively stringifies objects\n                            value = DataServiceRequest.toJson(property, clone, modifyDataInPlace);\n                        }\n                    } else {\n                        value = property;\n                    }\n\n                    clone[prop] = value;\n                }\n            }\n        }\n\n        return clone;\n    }\n\n    /**\n     * Helper function to convert array into a stringified JSON object following OData specifications.\n     * @param {Array} array The data to be converted to a stringified JSON object.\n     * @param {any} parent The container of the array.\n     * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.\n     */\n    private static arrayToJson(array: any[], parent: any, modifyDataInPlace?: boolean): any {\n        const data = [];\n        for (let i = 0; i < array.length; i++) {\n            data[i] = DataServiceRequest.toJson(array[i], array, modifyDataInPlace);\n        }\n\n        // if array is not a top level data on an action\n        return data;\n    }\n\n    /**\n     * Add offset fields to Date object for serialization purposes.\n     * @param {Date} dateTime The date.\n     * @return {Date} The date with __edmType and __offset fields injected.\n     */\n    private static toDateTimeOffset(dateTime: Date): Date {\n        // @ts-ignore\n        if (!dateTime.__edmType || !dateTime.__offset) {\n            const pad: (val: number) => string = (val: number) => (val < 10 ? '0' + val : val.toString());\n            const sign: string = dateTime.getTimezoneOffset() > 0 ? '-' : '+';\n            const offset: number = Math.abs(dateTime.getTimezoneOffset());\n            const hours: string = pad(Math.floor(offset / 60));\n            const minutes: string = pad(offset % 60);\n\n            // @ts-ignore\n            dateTime.__edmType = 'Edm.DateTimeOffset';\n            // @ts-ignore\n            dateTime.__offset = sign + hours + ':' + minutes;\n        }\n\n        return dateTime;\n    }\n\n    /**\n     * Formats entity key(s) in request Uri.\n     * @param {any} key The key dictionary.\n     * @return {string} The formated string of the key(s).\n     */\n    private static formatKey(key: any): string {\n        let result: string = EMPTY;\n\n        if (key) {\n            const formattedKey = [];\n            let propertyName: string = EMPTY;\n\n            for (const property in key) {\n                if (key.hasOwnProperty(property)) {\n                    propertyName = property;\n                    if (typeof key[propertyName] === 'string') {\n                        formattedKey.push(propertyName + `='${key[propertyName]}'`);\n                    } else {\n                        formattedKey.push(propertyName + '=' + key[propertyName]);\n                    }\n                }\n            }\n\n            if (formattedKey.length === 1) {\n                if (typeof key[propertyName] === 'string') {\n                    result = `'${key[propertyName]}'`;\n                } else {\n                    result = key[propertyName];\n                }\n            } else {\n                result = formattedKey.join();\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Formats function parameters in request Uri.\n     * @param {any} parameters The parameter dictionary.\n     * @return {string} The formated and encoded string of the parameters.\n     */\n    private static formatFunctionParameter(parameters: any): string {\n        let result: string = EMPTY;\n\n        if (parameters) {\n            for (const parameter in parameters) {\n                if (parameters.hasOwnProperty(parameter)) {\n                    const paramValue = parameters[parameter];\n\n                    if (!isEmpty(result)) {\n                        result += ',';\n                    }\n\n                    if (paramValue === undefined) {\n                        // handles undefined value\n                        continue;\n                    } else if (typeof paramValue === 'string') {\n                        // handles string type value\n                        result += parameter + `='${encodeURIComponent(paramValue)}'`;\n                    } else {\n                        // handles null and other types value\n                        result += parameter + '=' + encodeURIComponent(paramValue);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    // TODO - use node url api for url parsing\n    private static addParameter(requestUri: string, key: string, value: any): string {\n        if (value) {\n            let parameterSeparator = '?';\n\n            if (requestUri.indexOf(parameterSeparator) > 0) {\n                parameterSeparator = '&';\n            }\n\n            return requestUri + parameterSeparator + key + '=' + value;\n        } else {\n            return requestUri;\n        }\n    }\n\n    private static getActionIdFromInput(query: IDataServiceQueryInternal) {\n        return `@msdyn365-commerce/retail-proxy/${query.entitySet}/${query.action}`;\n    }\n\n    private static getCacheObjectValueFromReturnType(returnType: any): string {\n        // return type can be actual class itself like CategoryClass instead of string 'CategoryClass'\n        const cacheObjectTypeValue = typeof returnType === 'function' ? returnType.name : returnType;\n        return cacheObjectTypeValue.replace('Class', '');\n    }\n\n    private static buildCacheFromInput(query: IDataServiceQueryInternal, cacheKeyIdentifierFromReturnType: string): string {\n        // TODO if return type have distinct primary key (and not a collection), cache key for action will be computed primary key\n\n        let cacheKey = {};\n        // if query have key like { RecordId: 56873008 }\n        query.key && (cacheKey = { ...query.key });\n        // parameters are input to function like query.createDataServiceRequestForOperation('GetCategories', true, CategoryClass, 'true', { channelId })\n        //     => {channelId} is parameters.\n        query.data && query.data.parameters && (cacheKey = { ...cacheKey, ...(query.data.parameters as {}) });\n        query.resultSettings &&\n            (cacheKey = {\n                ...cacheKey,\n                ...query.resultSettings.Paging,\n                ...query.resultSettings.Sorting\n            });\n        query.filterSettings && (cacheKey['filter'] = query.filterSettings);\n        isObjectNotEmptyOrNull(query.tokens) && (cacheKey['token'] = query.tokens);\n        // TODO - add OUN in cache key\n        const cacheKeyValue =\n            convertToString(cacheKey) ||\n            (cacheKeyIdentifierFromReturnType ? GET_FROM_RETURNIDENTIFIER : `${query.entitySet}|${query.entityType}|NOKEY`);\n        Tracer.Information(`{CacheKey - CacheValue} : ${cacheKey} - ${cacheKeyValue}`);\n        return cacheKeyValue;\n    }\n\n    private static getDataCacheType(query: IDataServiceQueryInternal): CacheType {\n        // cache all result in request cacheisObjectNotEmptyOrNull\n        //\n        // Follow following rule for app cache\n        // -------------------------------------------------------------------------------------\n        //        scenario                                 app cache\n        // -------------------------------------------------------------------------------------\n        // 1. if returnType is  -                             true\n        //          a. Category\n        //          b. Product\n        //          c. OrgUnit\n        //          d. ProductCatalog\n        //          e. Warehouse\n        if (query.entitySet === 'Carts' && query.action === 'GetMaxLoyaltyPointsToRedeemForTransactionBalance') {\n            return 'none';\n        }\n\n        return query.options.bypassCache === 'get' || query.options.bypassCache === 'getAndPut' ? 'none' : 'request';\n    }\n\n    constructor(query: IDataServiceQueryInternal) {\n        Tracer.Information('DataServiceRequest.constructor()');\n        this._query = toJS(query, { recurseEverything: true });\n        this._hasOperationName = false;\n\n        switch (query.action) {\n            case 'Read':\n            case 'ReadAll':\n                this._method = GET;\n                break;\n\n            case 'Create':\n                this._method = POST;\n                break;\n\n            case 'Update':\n                this._method = PATCH;\n                break;\n\n            case 'Delete':\n                this._method = DELETE;\n                break;\n\n            default:\n                if (query.isAction) {\n                    // Sets the HTTP method to be POST for actions\n                    this._method = POST;\n                } else {\n                    // Sets the HTTP method to be GET for functions\n                    this._method = GET;\n                }\n\n                this._hasOperationName = true;\n        }\n\n        this._actionId = DataServiceRequest.getActionIdFromInput(query);\n\n        this._cacheObjectType = DataServiceRequest.getCacheObjectValueFromReturnType(query.options.returnEntity);\n        // TODO - handle Key when it is array like SHIFT case\n        const entityIdentifier = this._cacheObjectType === 'SimpleProduct' ? 'Product' : this._cacheObjectType;\n        this._cacheKeyIdentifierFromReturnType = EntityIdentifier[entityIdentifier] && EntityIdentifier[entityIdentifier].Key;\n\n        this._cacheKeyFromInput = DataServiceRequest.buildCacheFromInput(this._query, this._cacheKeyIdentifierFromReturnType);\n    }\n\n    /**\n     * Gets the Request Identifier.\n     * Auto-generated unique identifier if executed in batch. Used to fetch the response from batch result array.\n     */\n    public id(): number {\n        return this._id;\n    }\n\n    public getActionId = () => this._actionId;\n\n    public getCacheObjectType = () => this._cacheObjectType;\n\n    public getCacheKey = () => this._cacheKeyFromInput;\n\n    public dataCacheType = () => DataServiceRequest.getDataCacheType(this._query);\n\n    public shouldCacheOutput = () => true;\n\n    public overrideCacheType = (bypassCache: BypassCache) => {\n        bypassCache && (this._query.options.bypassCache = bypassCache);\n    }\n\n    public saveCacheEntries(\n        data: AsyncResult<any> | any,\n        requestCache: ICache,\n        appCache: ICache,\n        isCacheTypeApplication: boolean\n    ): { [cacheKey: string]: any } | undefined {\n        // if return Entity is collection\n        //        if entity type has identifier/primary key\n        //              1. cache array of primay key value of returned entity collection on input cache key\n        //              2. cache individual entity on primary key\n        //        else\n        //              1. cache output on input cache key\n        //\n        // else  if entity type has identifier/primary key\n        //           2. cache output entity on primary key\n\n        if (!data || (!this._cacheKeyFromInput && !this._cacheKeyIdentifierFromReturnType)) {\n            return;\n        }\n\n        if (data instanceof AsyncResult) {\n            // For a loading Promise, cache based on input cachekey, and then cache output again once complete\n            if (data.status === 'LOADING') {\n                data.then(result => {\n                    if (this._totalCount !== undefined) {\n                        data.metadata.count = this._totalCount;\n                    }\n\n                    this._saveEntityToCache(result, requestCache, appCache, isCacheTypeApplication);\n                    return result;\n                });\n\n                requestCache.put({ typeName: this._cacheObjectType, key: this._cacheKeyFromInput }, { item: data });\n\n                if (appCache && isCacheTypeApplication) {\n                    appCache.put({ typeName: this._cacheObjectType, key: this._cacheKeyFromInput }, { item: data });\n                }\n                // For a completed promise, save the action results to the cache\n            } else {\n                if (this._totalCount !== undefined) {\n                    data.metadata.count = this._totalCount;\n                }\n\n                this._saveEntityToCache(data.result, requestCache, appCache, isCacheTypeApplication);\n                return data.result;\n            }\n        } else {\n            return this._saveEntityToCache(data, requestCache, appCache, isCacheTypeApplication);\n        }\n    }\n\n    private _saveEntityToCache(\n        data: any,\n        requestCache: ICache,\n        appCache: ICache,\n        isCacheTypeApplication: boolean\n    ): { [cacheKey: string]: any } | undefined {\n        if (!data || (!this._cacheKeyFromInput && !this._cacheKeyIdentifierFromReturnType)) {\n            return;\n        }\n\n        const cacheEntries = {};\n        const results = data;\n\n        // using Object.prototype instead of Array.isArray because results can be Observable Array which cann't be detected with Array.isArray\n        if (!this._query.isReturnTypeACollection || Object.prototype.toString.call(results) !== '[object Array]') {\n            if (this._cacheKeyIdentifierFromReturnType) {\n                const key = `${this._cacheKeyIdentifierFromReturnType}-${results[this._cacheKeyIdentifierFromReturnType]}`;\n                cacheEntries[key] = results;\n\n                if (this._cacheKeyFromInput) {\n                    let existingCacheItem = requestCache.get({ typeName: this._cacheObjectType, key: this._cacheKeyFromInput });\n                    if (existingCacheItem) {\n                        existingCacheItem = { ...existingCacheItem };\n                    }\n                    if (\n                        existingCacheItem &&\n                        existingCacheItem.item &&\n                        (!(existingCacheItem.item instanceof AsyncResult) || existingCacheItem.item.status === 'SUCCESS') &&\n                        (typeof existingCacheItem.item !== 'object' || existingCacheItem.item['$ref'] !== true)\n                    ) {\n                        cacheEntries[this._cacheKeyFromInput] = results;\n                    } else {\n                        cacheEntries[this._cacheKeyFromInput] = {\n                            $ref: true,\n                            type: this._cacheObjectType,\n                            identifier: this._cacheKeyIdentifierFromReturnType,\n                            key: [key],\n                            count: this._totalCount\n                        };\n                    }\n                }\n            } else {\n                cacheEntries[this._cacheKeyFromInput] = results;\n            }\n        } else if (!this._cacheKeyIdentifierFromReturnType) {\n            cacheEntries[this._cacheKeyFromInput] = results;\n        } else {\n            const cacheValue = results\n                .map(result => {\n                    const identifierValue = result[this._cacheKeyIdentifierFromReturnType];\n                    if (identifierValue) {\n                        const key = `${this._cacheKeyIdentifierFromReturnType}-${identifierValue}`;\n                        cacheEntries[key] = result;\n                        return key;\n                    }\n                })\n                .filter(Boolean);\n\n            let existingCacheItem = requestCache.get({ typeName: this._cacheObjectType, key: this._cacheKeyFromInput });\n            if (existingCacheItem) {\n                existingCacheItem = { ...existingCacheItem };\n            }\n            if (\n                existingCacheItem.item &&\n                (!(existingCacheItem.item instanceof AsyncResult) || existingCacheItem.item.status === 'SUCCESS') &&\n                (typeof existingCacheItem.item !== 'object' || existingCacheItem.item['$ref'] !== true)\n            ) {\n                cacheEntries[this._cacheKeyFromInput] = results;\n            } else {\n                cacheEntries[this._cacheKeyFromInput] = {\n                    $ref: true,\n                    type: this._cacheObjectType,\n                    identifier: this._cacheKeyIdentifierFromReturnType,\n                    isCollection: this._query.isReturnTypeACollection,\n                    key: cacheValue,\n                    count: this._totalCount\n                };\n            }\n        }\n\n        if (cacheEntries) {\n            Object.keys(cacheEntries).map(entryKey => {\n                requestCache.put({ typeName: this._cacheObjectType, key: entryKey }, { item: cacheEntries[entryKey] });\n\n                if (appCache && isCacheTypeApplication) {\n                    appCache.put({ typeName: this._cacheObjectType, key: entryKey }, { item: cacheEntries[entryKey] });\n                }\n            });\n        }\n\n        return cacheEntries;\n    }\n\n    public readCacheEntries(requestCache: ICache, appCache: ICache, shouldReadFromAppCache?: boolean, telemetry?: ITelemetry): any {\n        if (!requestCache || (!this._cacheKeyFromInput && this._cacheKeyFromReturnType.length === 0)) {\n            return;\n        }\n\n        if (\n            this._cacheKeyFromInput === GET_FROM_RETURNIDENTIFIER ||\n            (this._cacheKeyIdentifierFromReturnType && this._cacheKeyFromReturnType.length !== 0)\n        ) {\n            const entries = this.readCacheEntriesBasedOnCacheKeyFromReturnType(requestCache, appCache, shouldReadFromAppCache, telemetry);\n            if (entries) {\n                return entries;\n            }\n        }\n\n        const cacheKey = { typeName: this._cacheObjectType, key: this._cacheKeyFromInput };\n        let cachedValueBasedOnInput = requestCache.get(cacheKey);\n        if (cachedValueBasedOnInput) {\n            cachedValueBasedOnInput = { ...cachedValueBasedOnInput };\n        } else if (shouldReadFromAppCache && appCache) {\n            cachedValueBasedOnInput = appCache.copyTo(cacheKey, requestCache);\n        }\n\n        if (!cachedValueBasedOnInput || cachedValueBasedOnInput.shouldRefresh) {\n            return this.readCacheEntriesBasedOnCacheKeyFromReturnType(requestCache, appCache, shouldReadFromAppCache, telemetry);\n        }\n\n        if (cachedValueBasedOnInput.item instanceof AsyncResult) {\n            if (cachedValueBasedOnInput.item.status !== 'LOADING') {\n                cachedValueBasedOnInput.item = cachedValueBasedOnInput.item.result || cachedValueBasedOnInput.item.error;\n            } else {\n                const asyncResult = cachedValueBasedOnInput.item.then(result => {\n                    if (typeof result !== 'object' || result['$ref'] !== true) {\n                        return result;\n                    }\n\n                    return this._resolveCacheEntryReference(result, requestCache, appCache, shouldReadFromAppCache);\n                });\n                return asyncResult;\n            }\n        }\n\n        if (typeof cachedValueBasedOnInput.item !== 'object' || cachedValueBasedOnInput.item['$ref'] !== true) {\n            return cachedValueBasedOnInput.item;\n        }\n\n        return this._resolveCacheEntryReference(\n            cachedValueBasedOnInput.item,\n            requestCache,\n            appCache,\n            shouldReadFromAppCache,\n            isAsyncResult(cachedValueBasedOnInput.item)\n        );\n    }\n\n    private _resolveCacheEntryReference(\n        item: any,\n        requestCache: ICache,\n        appCache: ICache,\n        shouldReadFromAppCache?: boolean,\n        isWrappingPromise?: boolean\n    ) {\n        const cacheValueAsArray = (item['key'] as string[])\n            .map(key => {\n                const value = requestCache.get({ typeName: this._cacheObjectType, key });\n\n                if (!value && shouldReadFromAppCache && appCache) {\n                    appCache.copyTo({ typeName: this._cacheObjectType, key }, requestCache);\n                }\n\n                if (!value || !value.item || value.shouldRefresh) {\n                    return undefined;\n                }\n\n                if (isAsyncResult(value.item)) {\n                    return value.item.result;\n                }\n\n                return value.item;\n            })\n            .filter(data => data !== undefined && data !== null);\n\n        if ((item['key'] as string[]).length > cacheValueAsArray.length) {\n            return;\n        }\n\n        // If we are returning a Promise that represents a future collection, we need to unwrap it\n        return cacheValueAsArray && cacheValueAsArray.length > 0\n            ? this._query.isReturnTypeACollection && !isWrappingPromise\n                ? cacheValueAsArray\n                : cacheValueAsArray[0]\n            : undefined;\n    }\n\n    private readCacheEntriesBasedOnCacheKeyFromReturnType(\n        requestCache: ICache,\n        appCache: ICache,\n        shouldReadFromAppCache: boolean,\n        telemetry?: ITelemetry\n    ): any {\n        if (this._cacheKeyFromReturnType.length === 0) {\n            return null;\n        }\n\n        const cacheEntries = this._cacheKeyFromReturnType\n            .map(entry => {\n                const key = `${this._cacheKeyIdentifierFromReturnType}-${entry}`;\n                let cacheValue = requestCache.get({ typeName: this._cacheObjectType, key });\n\n                if (!cacheValue && shouldReadFromAppCache && appCache) {\n                    cacheValue = appCache.copyTo({ typeName: this._cacheObjectType, key }, requestCache);\n                }\n\n                if (!cacheValue || !cacheValue.item || cacheValue.shouldRefresh) {\n                    return null;\n                }\n                switch (cacheValue.s!) {\n                    case ICacheSource.AppCache: {\n                        telemetry &&\n                            telemetry.log(LogLevel.Information, 'dataAction: {actionInput.typename}\\tsource: {cacheSource}', {\n                                values: [this._cacheObjectType, 'AppCache']\n                            });\n                        break;\n                    }\n                    case ICacheSource.RequestCache: {\n                        telemetry &&\n                            telemetry.log(LogLevel.Information, 'dataAction: {actionInput.typename}\\tsource: {cacheSource}', {\n                                values: [this._cacheObjectType, 'RequestCache']\n                            });\n                        break;\n                    }\n                    default: {\n                        telemetry &&\n                            telemetry.log(LogLevel.Information, 'dataAction: {actionInput.typename}\\tsource: {cacheSource}', {\n                                values: [this._cacheObjectType, 'Undefined']\n                            });\n                        break;\n                    }\n                }\n\n                return cacheValue.item;\n            })\n            .filter(Boolean);\n\n        return cacheEntries && cacheEntries.length > 0 ? (this._query.isReturnTypeACollection ? cacheEntries : cacheEntries[0]) : null;\n    }\n\n    /**\n     * Executes the request.\n     * @param {any} callerContext The caller context.\n     * @return {IAsyncResult<T>} The async result.\n     */\n    public execute<T>(callerContext: ICallerContext): Promise<T> {\n        if (\n            !callerContext.requestContext ||\n            !callerContext.requestContext.apiSettings ||\n            !callerContext.requestContext.apiSettings.oun ||\n            !callerContext.requestContext.apiSettings.baseUrl\n        ) {\n            throw new Error(`CallerContext missing required request parameters - [${JSON.stringify(callerContext.requestContext)}]`);\n        }\n\n        if (!callerContext.requestContext.locale) {\n            throw new Error(`CallerContext missing locale - [${JSON.stringify(callerContext.requestContext)}]`);\n        }\n\n        this._callerContext = callerContext;\n        this._requestUri = this.getRequestUri();\n        let result: Promise<T>;\n        const headers: { [headerName: string]: string } = this.buildQueryHeader();\n\n        if (\n            !this._query.isReturnTypeACollection ||\n            (this._query.resultSettings &&\n                this._query.resultSettings.Paging &&\n                this._query.resultSettings.Paging.Top &&\n                this._query.resultSettings.Paging.Top >= 0)\n        ) {\n            result = this.loadPage<T>(headers);\n        } else {\n            result = this.getAllPages<T>(headers, 0);\n        }\n\n        return result;\n    }\n\n    // Need to build batch handler ----------- PENDING\n    /**\n     * Executes the batch requests.\n     * @param {DataServiceRequest[]} requests The collection of requests to execute.\n     * @param {any} [callerContext] The caller context.\n     * @return {IAsyncResult<Array>} The async result.  Responses at index I correlates to request with identifier I.\n     */\n    public executeBatch(requests: DataServiceRequest[], callerContext?: ICallerContext): Promise<any[]> {\n        if (\n            !callerContext.requestContext ||\n            !callerContext.requestContext.apiSettings ||\n            !callerContext.requestContext.apiSettings.oun ||\n            !callerContext.requestContext.apiSettings.baseUrl\n        ) {\n            throw new Error(`CallerContext missing required request parameters - [${JSON.stringify(callerContext.requestContext)}]`);\n        }\n\n        if (!callerContext.requestContext.locale) {\n            throw new Error(`CallerContext missing locale - [${JSON.stringify(callerContext.requestContext)}]`);\n        }\n\n        this._callerContext = callerContext;\n        this._requestUri = this.getRequestUri();\n\n        return new Promise((resolve, reject) => {\n            ODataHttpRequest(\n                DataServiceRequest.buildBatchRequest(this.batchRequestUri, requests),\n                (data: any) => {\n                    const responses: any[] = new Array();\n                    const errors: ProxyError[] = DataServiceRequest.parseBatchResponses(data.__batchResponses, requests, responses);\n\n                    if (errors.length === 0) {\n                        Tracer.Information(this.batchRequestUri + ' success');\n                        resolve(responses);\n                    } else {\n                        Tracer.Errors(errors, this.batchRequestUri + ' failed.');\n                        reject(errors);\n                    }\n                },\n                (error: any) => {\n                    Tracer.Error(this.batchRequestUri + ' failed');\n                    reject(ErrorParser.parseErrorMessage(error));\n                }\n            );\n        });\n    }\n\n    /**\n     * Gets the Request Uri.\n     */\n    private getRequestUri(): string {\n        let requestUri: string = this._callerContext.requestContext.apiSettings.baseUrl + 'Commerce';\n        if (this._query.entitySet) {\n            requestUri = `${requestUri}/${this._query.entitySet}`;\n\n            if (this._query.key) {\n                requestUri = `${requestUri}(${DataServiceRequest.formatKey(this._query.key)})`;\n            } else if (this._query.entitySet === 'Customers' && this._query.key !== null && this._query.key !== undefined) {\n                requestUri = `${requestUri}('')`;\n            }\n        }\n\n        // Appends the action (POST) or function (GET) name to the Uri\n        if (this._hasOperationName) {\n            requestUri += '/' + this._query.action;\n\n            // Construct OData function Url with parameters. [e.g. Func(), Func(param1='',param2='')]\n            if (!this._query.isAction && this._query.data && this._query.data.parameters) {\n                requestUri += '(' + DataServiceRequest.formatFunctionParameter(this._query.data.parameters) + ')';\n            }\n        }\n\n        if (this._query.isReturnTypeACollection) {\n            requestUri = DataServiceRequest.addParameter(\n                requestUri,\n                '$top',\n                this._query.resultSettings && this._query.resultSettings.Paging\n                    ? this._query.resultSettings.Paging.Top\n                    : ApiTimeoutInMilliSecond\n            ); // Config.defaultPageSize);\n            requestUri = DataServiceRequest.addParameter(\n                requestUri,\n                '$skip',\n                this._query.resultSettings && this._query.resultSettings.Paging ? this._query.resultSettings.Paging.Skip : 0\n            );\n            requestUri = DataServiceRequest.addParameter(requestUri, '$inlinecount', this._query.inlineCount ? 'allpages' : null);\n\n            if (this._query.resultSettings.count) {\n                requestUri = DataServiceRequest.addParameter(requestUri, '$count', 'true');\n            }\n\n            requestUri = DataServiceRequest.addParameter(\n                requestUri,\n                '$filter',\n                this._query.filterSettings ? this._query.filterSettings : 0\n            );\n\n            if (this._query.resultSettings && this._query.resultSettings.Sorting && this._query.resultSettings.Sorting.Columns) {\n                this._query.resultSettings.Sorting.Columns.forEach((column: SortColumn) => {\n                    if (!isNullOrWhitespace(column.ColumnName || EMPTY)) {\n                        const orderByColumn: string = format('{0}%20{1}', column.ColumnName, column.IsDescending ? 'desc' : 'asc');\n\n                        requestUri = DataServiceRequest.addParameter(requestUri, '$orderby', orderByColumn);\n                    }\n                });\n            }\n        }\n\n        if (this._query.expands && hasElements(this._query.expands)) {\n            requestUri = DataServiceRequest.addParameter(requestUri, '$expand', this._query.expands.join());\n        }\n\n        if (!isNullOrWhitespace(ApiVersion)) {\n            requestUri = DataServiceRequest.addParameter(requestUri, 'api-version', ApiVersion);\n        }\n\n        return requestUri;\n    }\n\n    /**\n     * Executes paginated requests for all entities.\n     * @param {AsyncResult{T}} asyncResult The async result.\n     * @param {{ [headerName: string]: string }} headerName the headers for the request.\n     * @param {number} skip The offset.\n     * @param {Array<T>} The array result.\n     */\n    private getAllPages<T>(headers: { [headerName: string]: string }, skip: number, results?: T[]): Promise<T> {\n        skip = skip || 0;\n        const top = 1000; // Config.defaultPageSize;\n        this._query.resultSettings = this._query.resultSettings || {};\n        this._query.resultSettings.Paging = this._query.resultSettings.Paging || {};\n        this._query.resultSettings.Paging.Top = top;\n        results = results || [];\n\n        return this.loadPage<T>(headers, skip)\n            .then((loadPageResults: T) => {\n                if (loadPageResults) {\n                    if (typeof (loadPageResults as any).length === 'number') {\n                        results = results.concat(loadPageResults);\n\n                        if ((loadPageResults as any).length < top) {\n                            // This page contains less items than top\n                            if ((loadPageResults as any).hasNextPage) {\n                                // This means the pagesize defined on server side is smaller than the top\n                                skip += (loadPageResults as any).length;\n                                return this.getAllPages<T>(headers, skip, results); // Try to fetch the next page\n                            } else {\n                                // No more pages need to fetch\n                                return Promise.resolve((results as any) as T);\n                            }\n                        } else {\n                            // This page contains exact amount of item as the top, should not contain more\n                            skip += top;\n                            return this.getAllPages<T>(headers, skip, results); // Try to fetch the next page\n                        }\n                    } else {\n                        // The pageResult is a single item\n                        results.push((loadPageResults as unknown) as T);\n                        return Promise.resolve((results as unknown) as T);\n                    }\n                }\n            })\n            .catch(error => {\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Builds the header to be sent as part of the request.\n     * @returns {{ [headerName: string]: string }} a key value pair collection of header names and header values.\n     */\n    private buildQueryHeader(): { [headerName: string]: string } {\n        const headers: { [headerName: string]: string } = {};\n        headers['from-keystone'] = 'true';\n\n        // copy default values from default header\n        for (const headerName in DEFAULT_HEADER) {\n            if (DEFAULT_HEADER.hasOwnProperty(headerName)) {\n                headers[headerName] = DEFAULT_HEADER[headerName];\n            }\n        }\n\n        // Copy operating unit number if present for C2 (if an operation is done by a customer or by anonymous user) scenarios.\n        if (!isNullOrWhitespace(this._callerContext.requestContext.apiSettings.oun)) {\n            headers[OPERATINGUNITNUMBER_HEADERNAME] = this._callerContext.requestContext.apiSettings.oun;\n        }\n\n        // Add accept-language header to send user preferred locale to server.\n        headers[ACCEPT_LANGUAGE] = this._callerContext.requestContext.locale;\n\n        // Add custom AppInsights headers\n        headers[REQUEST_ID] = this._callerContext.requestContext.operationId;\n\n        // add any tokens as part of the header\n        for (const tokenName in this._query.tokens) {\n            if (this._query.tokens.hasOwnProperty(tokenName)) {\n                const tokenValue: string = this._query.tokens[tokenName];\n\n                if (!isNullOrWhitespace(tokenValue)) {\n                    headers[tokenName] = tokenValue;\n                }\n            }\n        }\n\n        // Now check whether authentication token is present or not, if present it will be added into Authorization header.\n        if (\n            this._callerContext &&\n            this._callerContext.requestContext.user &&\n            !isNullOrWhitespace(this._callerContext.requestContext.user.token)\n        ) {\n            headers[AUTHORIZATION_HEADERNAME] = `id_token ${this._callerContext.requestContext.user.token}`;\n        }\n\n        // Check if an Bearer access token is being provided. If present it will be added into Authorization header\n        if (\n            this._callerContext &&\n            this._callerContext.requestContext &&\n            !isNullOrWhitespace(this._callerContext.requestContext.accessToken)\n        ) {\n            headers[AUTHORIZATION_HEADERNAME] = `Bearer ${this._callerContext.requestContext.accessToken}`;\n        }\n\n        return headers;\n    }\n\n    /**\n     * Executes request for one page.\n     * @param {AsyncResult<T>} The async result.\n     * @param {{ [headerName: string]: string }} headerName the headers for the request.\n     */\n    private loadPage<T>(headers: { [headerName: string]: string }, skip?: number): Promise<T> {\n        if (skip) {\n            this._query.resultSettings = this._query.resultSettings || {};\n            this._query.resultSettings.Paging = this._query.resultSettings.Paging || {};\n            this._query.resultSettings.Paging.Skip = skip;\n        }\n\n        const requestId = Utils.generateGuid();\n        RetailLogger.modelManagersRetailServerRequestStarted(requestId, this._requestUri);\n\n        return new Promise((resolve, reject) => {\n            // This is the pipe for all OData API calls.\n            ODataHttpRequest(\n                {\n                    requestUri: this.getRequestUri(),\n                    method: this._method,\n                    data: DataServiceRequest.toJson(this._query.data),\n                    headers\n                },\n                (data: any) => {\n                    RetailLogger.modelManagersRetailServerRequestFinished(requestId, this._requestUri);\n                    const resultSet = parseOdataResult(data, this._query.returnType);\n\n                    // Set the total count on the DataServiceRequest\n                    if (data && data[ODATA_TOTAL_COUNT_PROPERTY]) {\n                        this._totalCount = data[ODATA_TOTAL_COUNT_PROPERTY];\n                    }\n\n                    if (this._cacheKeyIdentifierFromReturnType) {\n                        if (Object.prototype.toString.call(resultSet) === '[object Array]') {\n                            this._cacheKeyFromReturnType.concat(\n                                resultSet.map(result => result[this._cacheKeyIdentifierFromReturnType]).filter(Boolean)\n                            );\n                        } else if (typeof resultSet === 'object') {\n                            this._cacheKeyFromReturnType.push(resultSet[this._cacheKeyIdentifierFromReturnType]);\n                        }\n                    }\n\n                    resolve(resultSet);\n                },\n                (error: any) => {\n                    RetailLogger.modelManagersRetailServerRequestError(requestId, this._requestUri, error.message);\n                    reject(ErrorParser.parseErrorMessage(error));\n                }\n            );\n        });\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}