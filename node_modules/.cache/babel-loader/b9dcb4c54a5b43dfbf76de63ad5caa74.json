{"ast":null,"code":"\"use strict\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */Object.defineProperty(exports,\"__esModule\",{value:true});var tslib_1=require(\"tslib\");// tslint:disable:no-any no-require-imports no-var-requires no-console\nvar chalk_1=tslib_1.__importDefault(require(\"chalk\"));var path_1=tslib_1.__importDefault(require(\"path\"));var stackTrace=require('stack-trace');var util_1=require(\"util\");var log=console.log,warn=console.warn;/**\r\n * console tracing for build scripts\r\n */var Trace=/** @class */function(){function Trace(){var _this=this;this.getStackInfo=process.env.NODE_DEBUG==='detail'?this._getStackTrace:this._getStackTracDetailed;/**\r\n         * Custom format logger\r\n         */this.log=function(loggerFunction,thingToLog){loggerFunction(thingToLog);};this.info=function(arg){_this._log(chalk_1[\"default\"].cyan,arg,_this.info);};this.debug=function(arg){if(!_this.isDebug){return;}_this._log(chalk_1[\"default\"].magenta,arg,_this.debug);};this.warn=function(arg){_this._log(chalk_1[\"default\"].yellow,arg,_this.warn);};this.error=function(arg,err){_this._log(chalk_1[\"default\"].red,arg,err||_this.error);};this.startTimer=function(label,additionalMessage){log(chalk_1[\"default\"].yellow(\"Start -- \"),chalk_1[\"default\"].yellow(label),\"  \",chalk_1[\"default\"].yellow(additionalMessage||''));var now=Date.now();if(_this.timers.has(label)){warn(chalk_1[\"default\"].redBright(\"[WARN] There is already a timer label '\"+label+\"', your timings might be inaccurate\"));}_this.timers.set(label,now);};this.stopTimer=function(label,additionalMessage){var endTime=Date.now();if(_this.timers.has(label)){// @ts-ignore -- we check for key existence\nlog(label+\": \"+(endTime-_this.timers.get(label))+\"ms\");_this.timers[\"delete\"](label);}else{log(chalk_1[\"default\"].redBright(\"[WARN] No timer with label \"+label));}log(chalk_1[\"default\"].yellow(\"End -- \"),chalk_1[\"default\"].yellow(label),\"  \",chalk_1[\"default\"].yellow(additionalMessage||''));};this._log=function(chalkFunc,arg,func){if(!_this.isDebug){log(chalkFunc('--'),chalkFunc(typeof arg==='string'?arg:util_1.inspect(arg,{depth:null})));}else if(typeof arg==='string'){log(chalkFunc(_this.getStackInfo(_this.info)+\" : \"),chalkFunc(arg),chalkFunc(_this.getStackInfo(func)));}else{log(chalkFunc(\"\\n\"+_this.getStackInfo(func)+\" ------------------\"));log(chalkFunc(util_1.inspect(arg,{depth:null})));log(chalkFunc(\"----------------------XXXXX----------------------\\n\\n\"));}};this.isDebug=process.env.NODE_DEBUG!=='false'&&!!process.env.NODE_DEBUG;this.timers=new Map();log(\"process.env.NODE_DEBUG --> [\"+process.env.NODE_DEBUG+\"][\"+this.isDebug+\"]\");}Trace.prototype._getStackTrace=function(func){try{var traceLogger=stackTrace.get(func)[0];return\"[\"+path_1[\"default\"].basename(traceLogger.getFileName())+\"][\"+traceLogger.getLineNumber()+\"]\";}catch(e){return'[]';}};Trace.prototype._getStackTracDetailed=function(func){try{var traceMessage=stackTrace.get(func).map(function(traceLogger){return\"[\"+path_1[\"default\"].basename(traceLogger.getFileName())+\"]\\n                         [\"+path_1[\"default\"].basename(traceLogger.getMethodName())+\"]\\n                         [\"+traceLogger.getLineNumber()+\"]\";});return traceMessage.join('-');}catch(e){return'[]';}};return Trace;}();exports.trace=new Trace();","map":{"version":3,"sources":["../../../src/server/console-trace.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any no-require-imports no-var-requires no-console\nimport chalk from 'chalk';\nimport path from 'path';\nconst stackTrace = require('stack-trace');\nimport { inspect } from 'util';\n\nconst { log, warn } = console;\n\n/**\n * console tracing for build scripts\n */\nclass Trace {\n    private timers: Map<string, number>;\n    private isDebug: boolean;\n    private getStackInfo: Function = process.env.NODE_DEBUG === 'detail' ? this._getStackTrace : this._getStackTracDetailed;\n\n    constructor() {\n        this.isDebug = process.env.NODE_DEBUG !== 'false' && !!process.env.NODE_DEBUG;\n        this.timers = new Map();\n        log(`process.env.NODE_DEBUG --> [${process.env.NODE_DEBUG}][${this.isDebug}]`);\n    }\n\n    /**\n     * Custom format logger\n     */\n    public log = (loggerFunction: Function, thingToLog: any) => {\n        loggerFunction(thingToLog);\n    };\n\n    public info = (arg: any): void => {\n        this._log(chalk.cyan, arg, this.info);\n    };\n\n    public debug = (arg: any): void => {\n        if (!this.isDebug) {\n            return;\n        }\n        this._log(chalk.magenta, arg, this.debug);\n    };\n\n    public warn = (arg: any): void => {\n        this._log(chalk.yellow, arg, this.warn);\n    };\n\n    public error = (arg: any, err?: Error): void => {\n        this._log(chalk.red, arg, err || this.error);\n    };\n\n    public startTimer = (label: string, additionalMessage?: string): void => {\n        log(chalk.yellow(`Start -- `), chalk.yellow(label), `  `, chalk.yellow(additionalMessage || ''));\n        const now = Date.now();\n        if (this.timers.has(label)) {\n            warn(chalk.redBright(`[WARN] There is already a timer label '${label}', your timings might be inaccurate`));\n        }\n        this.timers.set(label, now);\n    };\n\n    public stopTimer = (label: string, additionalMessage?: string): void => {\n        const endTime = Date.now();\n        if (this.timers.has(label)) {\n            // @ts-ignore -- we check for key existence\n            log(`${label}: ${endTime - this.timers.get(label)}ms`);\n            this.timers.delete(label);\n        } else {\n            log(chalk.redBright(`[WARN] No timer with label ${label}`));\n        }\n        log(chalk.yellow(`End -- `), chalk.yellow(label), `  `, chalk.yellow(additionalMessage || ''));\n    };\n\n    private _log = (chalkFunc: (...text: string[]) => string, arg: any, func: Function | Error): void => {\n        if (!this.isDebug) {\n            log(chalkFunc('--'), chalkFunc(typeof arg === 'string' ? arg : inspect(arg, { depth: null })));\n        } else if (typeof arg === 'string') {\n            log(chalkFunc(`${this.getStackInfo(this.info)} : `), chalkFunc(arg), chalkFunc(this.getStackInfo(func)));\n        } else {\n            log(chalkFunc(`\\n${this.getStackInfo(func)} ------------------`));\n            log(chalkFunc(inspect(arg, { depth: null })));\n            log(chalkFunc(`----------------------XXXXX----------------------\\n\\n`));\n        }\n    };\n\n    private _getStackTrace(func: Function | Error): string {\n        try {\n            const traceLogger = stackTrace.get(func)[0];\n            return `[${path.basename(traceLogger.getFileName())}][${traceLogger.getLineNumber()}]`;\n        } catch (e) {\n            return '[]';\n        }\n    }\n\n    private _getStackTracDetailed(func: Function | Error): string {\n        try {\n            const traceMessage = stackTrace.get(func).map(\n                (traceLogger: any) =>\n                    `[${path.basename(traceLogger.getFileName())}]\n                         [${path.basename(traceLogger.getMethodName())}]\n                         [${traceLogger.getLineNumber()}]`\n            );\n            return traceMessage.join('-');\n        } catch (e) {\n            return '[]';\n        }\n    }\n}\n\nexport const trace = new Trace();\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}