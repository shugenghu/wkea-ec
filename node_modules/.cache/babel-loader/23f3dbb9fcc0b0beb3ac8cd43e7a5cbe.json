{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.regexp.to-string.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{updateProductListLinesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';import getPaginatedOrderTemplateLines,{GetPaginatedOrderTemplateLinesInput}from'./get-paginated-order-template-lines';/**\r\n *  Input class for the UpdateOrderTemplate data action.\r\n */export class UpdateOrderTemplateInput{constructor(orderTemplateId,productId,quantity,unitOfMeasure){this.getCacheKey=()=>'UpdateOrderTemplateInput';this.getCacheObjectType=()=>'UpdateOrderTemplateInput';this.dataCacheType=()=>'none';this.orderTemplateId=orderTemplateId;this.productId=productId;this.quantity=quantity;this.unitOfMeasure=unitOfMeasure||'ea';}}/**\r\n * createInput method for the UpdateOrderTemplate method.\r\n * @param {ICreateActionContext} inputData The input data passed to the createInput method.\r\n * @param {string} orderTemplateId The id of order template to update.\r\n * @param {number} productId The id of a product to add.\r\n * @param {number} quantity How many items of this product to add.\r\n */export const updateOrderTemplateInput=(inputData,orderTemplateId,productId,quantity,unitOfMeasure)=>{const{requestContext}=inputData;if(!requestContext.user.isAuthenticated){throw new Error('Unable to create order template. User is not authenticated.');}return new UpdateOrderTemplateInput(orderTemplateId,productId,quantity,unitOfMeasure);};/**\r\n * The action method for the UpdateOrderTemplate data action.\r\n * @param {UpdateOrderTemplateInput} input The action input.\r\n * @param {IActionContext} ctx The action context.\r\n */export async function updateOrderTemplateAction(input,ctx){try{if(!ctx.requestContext.user.isAuthenticated){throw Error('User token was not found when updating the order template');}const getLinesInput=new GetPaginatedOrderTemplateLinesInput(input.orderTemplateId,{},input.productId.toString());const linesState=await getPaginatedOrderTemplateLines(getLinesInput,ctx);if(!linesState){throw Error('Order template was not found when updating the order template');}const linesToUpdate=linesState.lines.filter(line=>line.productListLine.ProductId===input.productId);if(linesToUpdate.length!==1){throw Error('Unable to find the line to update when updating the order template');}const lineToUpdate=linesToUpdate[0].productListLine;lineToUpdate.UnitOfMeasure=input.unitOfMeasure;lineToUpdate.Quantity=input.quantity;const updatedLines=await updateProductListLinesAsync({callerContext:ctx},input.orderTemplateId,[lineToUpdate]);if(!updatedLines||updatedLines.length!==1){throw Error('Server returned invalid lines when updating order template');}const updatedLine=updatedLines.filter(line=>line.ProductId===input.productId);if(updatedLine.length!==1||updatedLine[0].Quantity!==input.quantity||updatedLine[0].UnitOfMeasure!==input.unitOfMeasure){throw Error('Server did not update the line when updating order template');}return updatedLine[0];}catch(error){ctx.telemetry.error('Not able to add an item to order template',error);throw error;}}/**\r\n * The UpdateOrderTemplate Data Action.\r\n * Returns product list line that was added to the order template.\r\n */export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/order-templates/update-order-template-line',action:updateOrderTemplateAction,input:updateOrderTemplateInput});","map":{"version":3,"sources":["../../../src/order-templates/update-order-template-line.ts"],"names":[],"mappings":"qFAAA,OACI,0BADJ,KAKgC,yBALhC,CAMA,OAAS,2BAAT,KAA4C,4EAA5C,CAEA,MAAO,CAAA,8BAAP,EAAyC,mCAAzC,KAAoF,sCAApF,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,wBAAwB,CAMjC,WAAA,CAAY,eAAZ,CAAqC,SAArC,CAAwD,QAAxD,CAA0E,aAA1E,CAA+F,CAOxF,KAAA,WAAA,CAAc,IAAM,0BAApB,CACA,KAAA,kBAAA,CAAqB,IAAM,0BAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,MAAjC,CARH,KAAK,eAAL,CAAuB,eAAvB,CACA,KAAK,SAAL,CAAiB,SAAjB,CACA,KAAK,QAAL,CAAgB,QAAhB,CACA,KAAK,aAAL,CAAqB,aAAa,EAAI,IAAtC,CACH,CAXgC,CAkBrC;;;;;;AAMG,GACH,MAAO,MAAM,CAAA,wBAAwB,CAAG,CACpC,SADoC,CACH,eADG,CACsB,SADtB,CACyC,QADzC,CAC2D,aAD3D,GAC8G,CAElJ,KAAM,CAAE,cAAF,EAAqB,SAA3B,CACA,GAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,eAAzB,CAA0C,CACtC,KAAM,IAAI,CAAA,KAAJ,CAAU,6DAAV,CAAN,CACH,CACD,MAAO,IAAI,CAAA,wBAAJ,CAA6B,eAA7B,CAA8C,SAA9C,CAAyD,QAAzD,CAAmE,aAAnE,CAAP,CACH,CARM,CAUP;;;;AAIG,GACH,MAAO,eAAe,CAAA,yBAAf,CAAyC,KAAzC,CAA0E,GAA1E,CAA6F,CAChG,GAAI,CACA,GAAI,CAAC,GAAG,CAAC,cAAJ,CAAmB,IAAnB,CAAwB,eAA7B,CAA8C,CAC1C,KAAM,CAAA,KAAK,CAAC,2DAAD,CAAX,CACH,CACD,KAAM,CAAA,aAAa,CAAG,GAAI,CAAA,mCAAJ,CAAwC,KAAK,CAAC,eAA9C,CAA+D,EAA/D,CAAmE,KAAK,CAAC,SAAN,CAAgB,QAAhB,EAAnE,CAAtB,CACA,KAAM,CAAA,UAAU,CAAG,KAAM,CAAA,8BAA8B,CAAC,aAAD,CAAgB,GAAhB,CAAvD,CACA,GAAI,CAAC,UAAL,CAAiB,CACb,KAAM,CAAA,KAAK,CAAC,+DAAD,CAAX,CACH,CAED,KAAM,CAAA,aAAa,CAAG,UAAU,CAAC,KAAX,CAAiB,MAAjB,CAAwB,IAAI,EAAI,IAAI,CAAC,eAAL,CAAqB,SAArB,GAAmC,KAAK,CAAC,SAAzE,CAAtB,CACA,GAAI,aAAa,CAAC,MAAd,GAAyB,CAA7B,CAAgC,CAC5B,KAAM,CAAA,KAAK,CAAC,oEAAD,CAAX,CACH,CAED,KAAM,CAAA,YAAY,CAAG,aAAa,CAAC,CAAD,CAAb,CAAiB,eAAtC,CAEA,YAAY,CAAC,aAAb,CAA6B,KAAK,CAAC,aAAnC,CACA,YAAY,CAAC,QAAb,CAAwB,KAAK,CAAC,QAA9B,CAEA,KAAM,CAAA,YAAY,CAAsB,KAAM,CAAA,2BAA2B,CAAC,CACtE,aAAa,CAAE,GADuD,CAAD,CAEtE,KAAK,CAAC,eAFgE,CAE/C,CAAC,YAAD,CAF+C,CAAzE,CAIA,GAAI,CAAC,YAAD,EAAiB,YAAY,CAAC,MAAb,GAAwB,CAA7C,CAAgD,CAC5C,KAAM,CAAA,KAAK,CAAC,4DAAD,CAAX,CACH,CACD,KAAM,CAAA,WAAW,CAAG,YAAY,CAAC,MAAb,CAAoB,IAAI,EAAI,IAAI,CAAC,SAAL,GAAmB,KAAK,CAAC,SAArD,CAApB,CACA,GAAI,WAAW,CAAC,MAAZ,GAAuB,CAAvB,EAA4B,WAAW,CAAC,CAAD,CAAX,CAAe,QAAf,GAA4B,KAAK,CAAC,QAA9D,EAA0E,WAAW,CAAC,CAAD,CAAX,CAAe,aAAf,GAAiC,KAAK,CAAC,aAArH,CAAoI,CAChI,KAAM,CAAA,KAAK,CAAC,6DAAD,CAAX,CACH,CACD,MAAO,CAAA,WAAW,CAAC,CAAD,CAAlB,CACH,CAAC,MAAO,KAAP,CAAc,CACZ,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,2CAApB,CAAiE,KAAjE,EACA,KAAM,CAAA,KAAN,CACH,CACJ,CAED;;;AAGG,GACH,cAAe,CAAA,0BAA0B,CAAkB,CACvD,EAAE,CAAE,sFADmD,CAEvD,MAAM,CAA4B,yBAFqB,CAGvD,KAAK,CAAE,wBAHgD,CAAlB,CAAzC","sourcesContent":["import { CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    ICreateActionContext } from '@msdyn365-commerce/core';\nimport { updateProductListLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';\nimport { ProductListLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport getPaginatedOrderTemplateLines, { GetPaginatedOrderTemplateLinesInput } from './get-paginated-order-template-lines';\n\n/**\n *  Input class for the UpdateOrderTemplate data action.\n */\nexport class UpdateOrderTemplateInput implements IActionInput {\n    public readonly orderTemplateId: string;\n    public readonly productId: number;\n    public readonly quantity: number;\n    public readonly unitOfMeasure: string;\n\n    constructor(orderTemplateId: string, productId: number, quantity: number, unitOfMeasure: string) {\n        this.orderTemplateId = orderTemplateId;\n        this.productId = productId;\n        this.quantity = quantity;\n        this.unitOfMeasure = unitOfMeasure || 'ea';\n    }\n\n    public getCacheKey = () => 'UpdateOrderTemplateInput';\n    public getCacheObjectType = () => 'UpdateOrderTemplateInput';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * createInput method for the UpdateOrderTemplate method.\n * @param {ICreateActionContext} inputData The input data passed to the createInput method.\n * @param {string} orderTemplateId The id of order template to update.\n * @param {number} productId The id of a product to add.\n * @param {number} quantity How many items of this product to add.\n */\nexport const updateOrderTemplateInput = (\n    inputData: ICreateActionContext, orderTemplateId: string, productId: number, quantity: number, unitOfMeasure: string): UpdateOrderTemplateInput => {\n\n    const { requestContext } = inputData;\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('Unable to create order template. User is not authenticated.');\n    }\n    return new UpdateOrderTemplateInput(orderTemplateId, productId, quantity, unitOfMeasure);\n};\n\n/**\n * The action method for the UpdateOrderTemplate data action.\n * @param {UpdateOrderTemplateInput} input The action input.\n * @param {IActionContext} ctx The action context.\n */\nexport async function updateOrderTemplateAction(input: UpdateOrderTemplateInput, ctx: IActionContext): Promise<ProductListLine> {\n    try {\n        if (!ctx.requestContext.user.isAuthenticated) {\n            throw Error('User token was not found when updating the order template');\n        }\n        const getLinesInput = new GetPaginatedOrderTemplateLinesInput(input.orderTemplateId, {}, input.productId.toString());\n        const linesState = await getPaginatedOrderTemplateLines(getLinesInput, ctx);\n        if (!linesState) {\n            throw Error('Order template was not found when updating the order template');\n        }\n\n        const linesToUpdate = linesState.lines.filter(line => line.productListLine.ProductId === input.productId);\n        if (linesToUpdate.length !== 1) {\n            throw Error('Unable to find the line to update when updating the order template');\n        }\n\n        const lineToUpdate = linesToUpdate[0].productListLine;\n\n        lineToUpdate.UnitOfMeasure = input.unitOfMeasure;\n        lineToUpdate.Quantity = input.quantity;\n\n        const updatedLines: ProductListLine[] = await updateProductListLinesAsync({\n            callerContext: ctx\n        }, input.orderTemplateId, [lineToUpdate]);\n\n        if (!updatedLines || updatedLines.length !== 1) {\n            throw Error('Server returned invalid lines when updating order template');\n        }\n        const updatedLine = updatedLines.filter(line => line.ProductId === input.productId);\n        if (updatedLine.length !== 1 || updatedLine[0].Quantity !== input.quantity || updatedLine[0].UnitOfMeasure !== input.unitOfMeasure) {\n            throw Error('Server did not update the line when updating order template');\n        }\n        return updatedLine[0];\n    } catch (error) {\n        ctx.telemetry.error('Not able to add an item to order template', error);\n        throw error;\n    }\n}\n\n/**\n * The UpdateOrderTemplate Data Action.\n * Returns product list line that was added to the order template.\n */\nexport default createObservableDataAction<ProductListLine>({\n    id: '@msdyn365-commerce-modules/retail-actions/order-templates/update-order-template-line',\n    action: <IAction<ProductListLine>>updateOrderTemplateAction,\n    input: updateOrderTemplateInput\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}