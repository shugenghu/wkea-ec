{"ast":null,"code":"import{extend}from'../utilities/utilities';export const xmlNS='http://www.w3.org/XML/1998/namespace';export class TtmlSettings{constructor(settingsOverrides){this.ttmlNamespace='http://www.w3.org/ns/ttml';this.ttmlStyleNamespace='http://www.w3.org/ns/ttml#styling';this.ttmlParameterNamespace='http://www.w3.org/ns/ttml#parameter';this.ttmlMetaNamespace='http://www.w3.org/ns/ttml#metadata';this.idPrefix='';this.mediaFrameRate=30;this.mediaFrameRateMultiplier=1;this.mediaSubFrameRate=1;this.mediaTickRate=1000;this.supportedTimeBase='media';this.rootContainerRegionDimensions=null;this.relatedMediaObjectRegion=null;this.cellResolution={rows:15,columns:32};this.defaultRegionStyle={backgroundColor:'transparent',color:'#E8E9EA',direction:'ltr',display:'auto',displayAlign:'before',extent:'auto',fontFamily:'default',fontSize:'1c',fontStyle:'normal',fontWeight:'normal',lineHeight:'normal',opacity:'1',origin:'auto',overflow:'hidden',padding:'0',showBackground:'always',textAlign:'start',textDecoration:'none',textOutline:'none',unicodeBidi:'normal',visibility:'visible',wrapOption:'normal',writingMode:'lrtb'};this.fontMap={};this.fontMap.default='Lucida sans typewriter, Lucida console, Consolas';this.fontMap.monospaceSerif='Courier';this.fontMap.proportionalSerif='Times New Roman, Serif';this.fontMap.monospaceSansSerif='Lucida sans typewriter, Lucida console, Consolas';this.fontMap.proportionalSansSerif='Arial, Sans-serif';this.fontMap.casual='Verdana';this.fontMap.cursive='Zapf-Chancery, Segoe script, Cursive';this.fontMap.smallCaps='Arial, Helvetica';this.fontMap.monospace='Lucida sans typewriter, Lucida console, Consolas';this.fontMap.sansSerif='Arial, Sans-serif';this.fontMap.serif='Times New Roman, Serif';if(settingsOverrides){extend(this,settingsOverrides);}}}","map":{"version":3,"sources":["videoplayer/components/closed-captions/ttml-settings.ts"],"names":[],"mappings":"AAAA,OAAQ,MAAR,KAAuE,wBAAvE,CAMA,MAAO,MAAM,CAAA,KAAK,CAAG,sCAAd,CA+BP,MAAM,MAAO,CAAA,YAAY,CAmKrB,WAAA,CAAY,iBAAZ,CAA6C,CA3JtC,KAAA,aAAA,CAAwB,2BAAxB,CASA,KAAA,kBAAA,CAA6B,mCAA7B,CASA,KAAA,sBAAA,CAAiC,qCAAjC,CASA,KAAA,iBAAA,CAA4B,oCAA5B,CAQA,KAAA,QAAA,CAAmB,EAAnB,CAQA,KAAA,cAAA,CAAyB,EAAzB,CAQA,KAAA,wBAAA,CAAmC,CAAnC,CAQA,KAAA,iBAAA,CAA4B,CAA5B,CAQA,KAAA,aAAA,CAAwB,IAAxB,CAQA,KAAA,iBAAA,CAA4B,OAA5B,CAQA,KAAA,6BAAA,CAAyD,IAAzD,CAQA,KAAA,wBAAA,CAAoD,IAApD,CAQA,KAAA,cAAA,CAAwB,CAAE,IAAI,CAAE,EAAR,CAAY,OAAO,CAAE,EAArB,CAAxB,CAQA,KAAA,kBAAA,CAA8C,CACjD,eAAe,CAAE,aADgC,CAEjD,KAAK,CAAE,SAF0C,CAGjD,SAAS,CAAE,KAHsC,CAIjD,OAAO,CAAE,MAJwC,CAKjD,YAAY,CAAE,QALmC,CAMjD,MAAM,CAAE,MANyC,CAOjD,UAAU,CAAE,SAPqC,CAQjD,QAAQ,CAAE,IARuC,CASjD,SAAS,CAAE,QATsC,CAUjD,UAAU,CAAE,QAVqC,CAWjD,UAAU,CAAE,QAXqC,CAYjD,OAAO,CAAE,GAZwC,CAajD,MAAM,CAAE,MAbyC,CAcjD,QAAQ,CAAE,QAduC,CAejD,OAAO,CAAE,GAfwC,CAgBjD,cAAc,CAAE,QAhBiC,CAiBjD,SAAS,CAAE,OAjBsC,CAkBjD,cAAc,CAAE,MAlBiC,CAmBjD,WAAW,CAAE,MAnBoC,CAoBjD,WAAW,CAAE,QApBoC,CAqBjD,UAAU,CAAE,SArBqC,CAsBjD,UAAU,CAAE,QAtBqC,CAuBjD,WAAW,CAAE,MAvBoC,CAA9C,CAgCA,KAAA,OAAA,CAAmC,EAAnC,CAmBH,KAAK,OAAL,CAAa,OAAb,CAAuB,kDAAvB,CACA,KAAK,OAAL,CAAa,cAAb,CAA8B,SAA9B,CACA,KAAK,OAAL,CAAa,iBAAb,CAAiC,wBAAjC,CACA,KAAK,OAAL,CAAa,kBAAb,CAAkC,kDAAlC,CACA,KAAK,OAAL,CAAa,qBAAb,CAAqC,mBAArC,CACA,KAAK,OAAL,CAAa,MAAb,CAAsB,SAAtB,CACA,KAAK,OAAL,CAAa,OAAb,CAAuB,sCAAvB,CACA,KAAK,OAAL,CAAa,SAAb,CAAyB,kBAAzB,CAGA,KAAK,OAAL,CAAa,SAAb,CAAyB,kDAAzB,CACA,KAAK,OAAL,CAAa,SAAb,CAAyB,mBAAzB,CACA,KAAK,OAAL,CAAa,KAAb,CAAqB,wBAArB,CAEA,GAAI,iBAAJ,CAAuB,CACnB,MAAM,CAAC,IAAD,CAAO,iBAAP,CAAN,CACH,CACJ,CAvLoB","sourcesContent":["import {extend, IClientDimension, IDictionaryStringString, IGrid} from '../utilities/utilities';\n\n// Timed Text Markup Language (TTML).\n// See http://www.w3.org/TR/ttml1/ for more details.\n\n// tslint:disable-next-line: no-http-string\nexport const xmlNS = 'http://www.w3.org/XML/1998/namespace';\n\n/**\n * @interface ITtmlSettings\n * @classdesc - The ITtmlSettings interface contract.\n */\nexport interface ITtmlSettings {\n    ttmlNamespace?: string;\n    ttmlStyleNamespace?: string;\n    ttmlParameterNamespace?: string;\n    ttmlMetaNamespace?: string;\n    idPrefix?: string;\n    mediaFrameRate?: number;\n    mediaFrameRateMultiplier?: number;\n    mediaSubFrameRate?: number;\n    mediaTickRate?: number;\n    supportedTimeBase?: string;\n    rootContainerRegionDimensions?: IClientDimension | null;\n    relatedMediaObjectRegion?: IClientDimension | null;\n    cellResolution?: IGrid;\n    defaultRegionStyle?: IDictionaryStringString;\n    fontMap?: IDictionaryStringString;\n    log?: Function;\n}\n\n/**\n *\n * The TtmlSettings class.\n * The TtmlSettings class is used to pass settings between the ttml parser, the ttml context, and the outside world.\n * It supplies default values which can be overridden via overrides passed to the constructor.\n */\nexport class TtmlSettings implements ITtmlSettings {\n    /**\n     * @name - ttmlNamespace\n     * @description - The ttml namespace to use.\n     * @public\n     * @type {string}\n     */\n    // tslint:disable-next-line: no-http-string\n    public ttmlNamespace: string = 'http://www.w3.org/ns/ttml';\n\n    /**\n     * @name - ttmlStyleNamespace\n     * @description - The ttml style namespace to use.\n     * @public\n     * @type {string}\n     */\n    // tslint:disable-next-line: no-http-string\n    public ttmlStyleNamespace: string = 'http://www.w3.org/ns/ttml#styling';\n\n    /**\n     * @name - ttmlParameterNamespace\n     * @description - The ttml parameter namespace to use.\n     * @public\n     * @type {string}\n     */\n    // tslint:disable-next-line: no-http-string\n    public ttmlParameterNamespace: string = 'http://www.w3.org/ns/ttml#parameter';\n\n    /**\n     * @name - ttmlMetaNamespace\n     * @description - The ttml metadata namespace to use.\n     * @public\n     * @type {string}\n     */\n    // tslint:disable-next-line: no-http-string\n    public ttmlMetaNamespace: string = 'http://www.w3.org/ns/ttml#metadata';\n\n    /**\n     * @name - idPrefix\n     * @description - The id prefix to use so ids copied from the ttml doc are unique.\n     * @public\n     * @type {string}\n     */\n    public idPrefix: string = '';\n\n    /**\n     * @name - mediaFrameRate\n     * @description - The media frame rate to use.\n     * @public\n     * @type {number}\n     */\n    public mediaFrameRate: number = 30;\n\n    /**\n     * @name - mediaFrameRateMultiplier\n     * @description - The media frame rate multiplier to use.\n     * @public\n     * @type {number}\n     */\n    public mediaFrameRateMultiplier: number = 1;\n\n    /**\n     * @name - mediaSubFrameRate\n     * @description - The media sub frame rate to use.\n     * @public\n     * @type {number}\n     */\n    public mediaSubFrameRate: number = 1;\n\n    /**\n     * @name - mediaTickRate\n     * @description - The media tick rate to use.\n     * @public\n     * @type {number}\n     */\n    public mediaTickRate: number = 1000;\n\n    /**\n     * @name - supportedTimeBase\n     * @description - The support timebase value.\n     * @public\n     * @type {string}\n     */\n    public supportedTimeBase: string = 'media';\n\n    /**\n     * @name - rootContainerRegionDimensions\n     * @description - The root container's dimensions.\n     * @public\n     * @type {IClientDimension}\n     */\n    public rootContainerRegionDimensions: IClientDimension | null = null;\n\n    /**\n     * @name - relatedMediaObjectRegion\n     * @description - The media object's dimensions.\n     * @public\n     * @type {IClientDimension}\n     */\n    public relatedMediaObjectRegion: IClientDimension | null = null;\n\n    /**\n     * @name - cellResolution\n     * @description - The default cell grid.\n     * @public\n     * @type {IGrid}\n     */\n    public cellResolution: IGrid = { rows: 15, columns: 32 };\n\n    /**\n     * @name - defaultRegionStyle\n     * @description - The default region style.\n     * @public\n     * @type {IDictionaryStringString}\n     */\n    public defaultRegionStyle: IDictionaryStringString = {\n        backgroundColor: 'transparent',\n        color: '#E8E9EA',\n        direction: 'ltr',\n        display: 'auto',\n        displayAlign: 'before',\n        extent: 'auto',\n        fontFamily: 'default',\n        fontSize: '1c',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        lineHeight: 'normal',\n        opacity: '1',\n        origin: 'auto',\n        overflow: 'hidden',\n        padding: '0',\n        showBackground: 'always',\n        textAlign: 'start',\n        textDecoration: 'none',\n        textOutline: 'none',\n        unicodeBidi: 'normal',\n        visibility: 'visible',\n        wrapOption: 'normal',\n        writingMode: 'lrtb'\n    };\n\n    /**\n     * @name - fontMap\n     * @description - The default font map.\n     * @public\n     * @type {IDictionaryStringString}\n     */\n    public fontMap: IDictionaryStringString = {};\n\n    /**\n     * @name - log\n     * @description - The logging function to use in debug mode.\n     * @public\n     * @type {Function}\n     */\n    public log: Function | undefined;\n\n    /**\n     * @constructor\n     * @description - Constructor for the TtmlSettings class.\n     * @public\n     * @param {ITtmlSettings} [settingsOverrides] - Optional settings overrides for this TtmlSettings instance.\n     */\n    constructor(settingsOverrides?: ITtmlSettings) {\n        // These are from the Simple Delivery Profile\n        // Per spec recommendation that default be monospace sans serif.\n        this.fontMap.default = 'Lucida sans typewriter, Lucida console, Consolas';\n        this.fontMap.monospaceSerif = 'Courier';\n        this.fontMap.proportionalSerif = 'Times New Roman, Serif';\n        this.fontMap.monospaceSansSerif = 'Lucida sans typewriter, Lucida console, Consolas';\n        this.fontMap.proportionalSansSerif = 'Arial, Sans-serif';\n        this.fontMap.casual = 'Verdana';\n        this.fontMap.cursive = 'Zapf-Chancery, Segoe script, Cursive';\n        this.fontMap.smallCaps = 'Arial, Helvetica';\n\n        // These are others from the broader ttml (v1.0)\n        this.fontMap.monospace = 'Lucida sans typewriter, Lucida console, Consolas';\n        this.fontMap.sansSerif = 'Arial, Sans-serif';\n        this.fontMap.serif = 'Times New Roman, Serif';\n\n        if (settingsOverrides) {\n            extend(this, settingsOverrides);\n        }\n    }\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}