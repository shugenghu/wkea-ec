{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */export const NumericLogLevel={trace:0,debug:1,information:2,warning:3,error:4,critical:5,none:-1};","map":{"version":3,"sources":["../../../src/interfaces/ITelemetry.ts"],"names":[],"mappings":"AAAA;;;AAGG,GAOH,MAAO,MAAM,CAAA,eAAe,CAAG,CAC3B,KAAK,CAAE,CADoB,CAE3B,KAAK,CAAE,CAFoB,CAG3B,WAAW,CAAE,CAHc,CAI3B,OAAO,CAAE,CAJkB,CAK3B,KAAK,CAAE,CALoB,CAM3B,QAAQ,CAAE,CANiB,CAO3B,IAAI,CAAE,CAAC,CAPoB,CAAxB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any\n\nimport { ITelemetryCommon, ITelemetryModuleContext, LogLevel } from '../interfaces';\nimport { TelemetryLogOptions } from '../telemetry';\n\nexport const NumericLogLevel = {\n    trace: 0,\n    debug: 1,\n    information: 2,\n    warning: 3,\n    error: 4,\n    critical: 5,\n    none: -1\n};\n\n/*\n * Type definition for a log\n */\nexport type ILog = { logLevel: LogLevel; message: string };\n\n/**\n * Interface exposing methods for trace logging, telemetry event logging, and data attribute rendering\n * @property trace          {Function}  - Logs the given message at a Trace level\n * @property debug          {Function}  - Logs the given message at a Debug level\n * @property information    {Function}  - Logs the given message at a Information level\n * @property warning        {Function}  - Logs the given message at a Warning level\n * @property error          {Function}  - Logs the given message at a Error level\n * @property critical       {Function}  - Logs the given message at a Critical level\n * @property exception      {Function}  - Logs the given error object\n */\nexport interface ITelemetry extends ITelemetryCommon {\n    /**\n     * Logs a structured message at the given log level, with optional custom tags and/or an exception\n     * @param logLevel LogLevel of the message\n     * @param messageTemplate String to log, denoting placeholders with {placeholder}\n     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object\n     */\n    log(logLevel: LogLevel, messageTemplate: string, logOptions?: TelemetryLogOptions): void;\n\n    /**\n     * Logs a trace message with the Trace log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    trace(message: string, ...args: any): void;\n    /**\n     * Logs a trace message with the Debug log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    debug(message: string, ...args: any): void;\n    /**\n     * Logs a trace message with the Information log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    information(message: string, ...args: any): void;\n    /**\n     * Logs a trace message with the Warning log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    warning(message: string, ...args: any): void;\n    /**\n     * Logs a trace message with the Error log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    error(message: string, ...args: any): void;\n    /**\n     * Logs a trace message with the Critical log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    critical(message: string, ...args: any): void;\n\n    /**\n     * Logs an Error object as an exception\n     * @param error The Error object to log\n     */\n    exception(error: Error): void;\n\n    /**\n     * Sets the portion of the telemetry context that will be attached to all logs for a module\n     * @param moduleContext Part of the telemetry context that lasts during a module rendering\n     */\n    setTelemetryModuleContext(moduleContext: ITelemetryModuleContext): () => ITelemetry;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}