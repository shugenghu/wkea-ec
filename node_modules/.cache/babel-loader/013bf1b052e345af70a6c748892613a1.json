{"ast":null,"code":"import\"core-js/modules/web.dom-collections.for-each.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{getFilteredData}from'../privacy/dynamics-privacy-helper';import{safeStringify}from'./logging-helper';/**\r\n * Key value for Custom Tags custom dimension in AppInsights events\r\n */export const customTagsKey='custom-tags';/**\r\n * Key value for Message Template custom dimension in AppInsights events\r\n */export const messageTemplateKey='message-template';/**\r\n * Key value for Module ID custom dimension in AppInsights events\r\n */export const moduleIdKey='Module ID';/**\r\n * Key value for Module Type custom dimension in AppInsights events\r\n */export const moduleTypeKey='Module Type';/**\r\n * Key value for Page Type custom dimension in AppInsights events\r\n */export const pageTypeKey='Page Type';/**\r\n * Key value for Page Type custom dimension in AppInsights events\r\n */export const cmsPageIdKey='CMS Page ID';/**\r\n * Builds custom properties list from telemetry context and message template arguments\r\n * @param context Telemetry context from which the properties will be pulled\r\n * @param placeholders List of placeholders in messageTemplate along with position in string\r\n * @param values Arguments to replace placeholders\r\n */export function buildPropertiesList(context,// tslint:disable-next-line:no-any\nplaceholders,customTags){// Start properties list with those from telemetry context\nconst properties=getPropertiesFromContext(context);// Add message template arguments as custom properties\nplaceholders.forEach((value,key)=>{// Get filtered data out of placeholder if it is a privacy object\nconst data=getFilteredData(value);// Add placeholder to list of custom parameters\nproperties[\"param_\".concat(key)]=safeStringify(data);});// Add custom tags to properties\nif(customTags){properties[customTagsKey]=[].join.apply(customTags,[', ']);}return properties;}/**\r\n * Converts the given telemetry context into AppInsights readable properties\r\n * @param context Telemetry context from which the properties will be pulled\r\n */export function getPropertiesFromContext(context){const properties={};// Only add context to properties if they have been set (non-empty string)\nif(context.moduleContext.moduleId){properties[moduleIdKey]=context.moduleContext.moduleId;}if(context.moduleContext.moduleType){properties[moduleTypeKey]=context.moduleContext.moduleType;}if(context.requestContext.pageId){properties[cmsPageIdKey]=context.requestContext.pageId;}if(context.requestContext.pageType){properties[pageTypeKey]=context.requestContext.pageType;}return properties;}/**\r\n * Given a severity level and if debug flag is set or not, this method will return true if we should bypass logs\r\n * @param severityLevel - SeverityLevel enum\r\n * @param isDebug - boolean\r\n */export function shouldSkipLogging(severityLevel,isDebug){// Do not send events marked as None or Debug to AppInsights\n// Do not send events marked as trace to AppInsights, if debug mode is not on\nreturn severityLevel===undefined||!isDebug&&severityLevel===0;}","map":{"version":3,"sources":["../../../src/loggers/app-insights-helper.ts"],"names":[],"mappings":"wDAAA;;;AAGG,GAKH,OAAS,eAAT,KAAgC,oCAAhC,CACA,OAAS,aAAT,KAA8B,kBAA9B,CAEA;;AAEG,GACH,MAAO,MAAM,CAAA,aAAa,CAAW,aAA9B,CAEP;;AAEG,GACH,MAAO,MAAM,CAAA,kBAAkB,CAAW,kBAAnC,CAEP;;AAEG,GACH,MAAO,MAAM,CAAA,WAAW,CAAW,WAA5B,CAEP;;AAEG,GACH,MAAO,MAAM,CAAA,aAAa,CAAW,aAA9B,CAEP;;AAEG,GACH,MAAO,MAAM,CAAA,WAAW,CAAW,WAA5B,CAEP;;AAEG,GACH,MAAO,MAAM,CAAA,YAAY,CAAW,aAA7B,CAEP;;;;;AAKG,GACH,MAAM,SAAU,CAAA,mBAAV,CACF,OADE,CAEF;AACA,YAHE,CAIF,UAJE,CAImB,CAErB;AACA,KAAM,CAAA,UAAU,CAAwB,wBAAwB,CAAC,OAAD,CAAhE,CAEA;AACA,YAAY,CAAC,OAAb,CAAqB,CAAC,KAAD,CAAQ,GAAR,GAAe,CAChC;AACA,KAAM,CAAA,IAAI,CAAG,eAAe,CAAC,KAAD,CAA5B,CAEA;AACA,UAAU,iBAAU,GAAV,EAAV,CAA6B,aAAa,CAAC,IAAD,CAA1C,CACH,CAND,EAQA;AACA,GAAI,UAAJ,CAAgB,CACZ,UAAU,CAAC,aAAD,CAAV,CAA4B,GAAG,IAAH,CAAQ,KAAR,CAAc,UAAd,CAA0B,CAAC,IAAD,CAA1B,CAA5B,CACH,CAED,MAAO,CAAA,UAAP,CACH,CAED;;;AAGG,GACH,MAAM,SAAU,CAAA,wBAAV,CAAmC,OAAnC,CAA6D,CAC/D,KAAM,CAAA,UAAU,CAAwB,EAAxC,CACA;AACA,GAAI,OAAO,CAAC,aAAR,CAAsB,QAA1B,CAAoC,CAChC,UAAU,CAAC,WAAD,CAAV,CAA0B,OAAO,CAAC,aAAR,CAAsB,QAAhD,CACH,CACD,GAAI,OAAO,CAAC,aAAR,CAAsB,UAA1B,CAAsC,CAClC,UAAU,CAAC,aAAD,CAAV,CAA4B,OAAO,CAAC,aAAR,CAAsB,UAAlD,CACH,CACD,GAAI,OAAO,CAAC,cAAR,CAAuB,MAA3B,CAAmC,CAC/B,UAAU,CAAC,YAAD,CAAV,CAA2B,OAAO,CAAC,cAAR,CAAuB,MAAlD,CACH,CACD,GAAI,OAAO,CAAC,cAAR,CAAuB,QAA3B,CAAqC,CACjC,UAAU,CAAC,WAAD,CAAV,CAA0B,OAAO,CAAC,cAAR,CAAuB,QAAjD,CACH,CAED,MAAO,CAAA,UAAP,CACH,CAED;;;;AAIG,GACH,MAAM,SAAU,CAAA,iBAAV,CAA4B,aAA5B,CAAsE,OAAtE,CAAsF,CACxF;AACA;AAEA,MAAO,CAAA,aAAa,GAAK,SAAlB,EAAgC,CAAC,OAAD,EAAY,aAAa,GAAK,CAArE,CACH","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { SeverityLevel } from 'applicationinsights/out/Declarations/Contracts';\nimport { ITelemetryContext } from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\nimport { getFilteredData } from '../privacy/dynamics-privacy-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * Key value for Custom Tags custom dimension in AppInsights events\n */\nexport const customTagsKey: string = 'custom-tags';\n\n/**\n * Key value for Message Template custom dimension in AppInsights events\n */\nexport const messageTemplateKey: string = 'message-template';\n\n/**\n * Key value for Module ID custom dimension in AppInsights events\n */\nexport const moduleIdKey: string = 'Module ID';\n\n/**\n * Key value for Module Type custom dimension in AppInsights events\n */\nexport const moduleTypeKey: string = 'Module Type';\n\n/**\n * Key value for Page Type custom dimension in AppInsights events\n */\nexport const pageTypeKey: string = 'Page Type';\n\n/**\n * Key value for Page Type custom dimension in AppInsights events\n */\nexport const cmsPageIdKey: string = 'CMS Page ID';\n\n/**\n * Builds custom properties list from telemetry context and message template arguments\n * @param context Telemetry context from which the properties will be pulled\n * @param placeholders List of placeholders in messageTemplate along with position in string\n * @param values Arguments to replace placeholders\n */\nexport function buildPropertiesList(\n    context: ITelemetryContext,\n    // tslint:disable-next-line:no-any\n    placeholders: Map<string, any>,\n    customTags?: string[]\n): IDictionary<string> {\n    // Start properties list with those from telemetry context\n    const properties: IDictionary<string> = getPropertiesFromContext(context);\n\n    // Add message template arguments as custom properties\n    placeholders.forEach((value, key) => {\n        // Get filtered data out of placeholder if it is a privacy object\n        const data = getFilteredData(value);\n\n        // Add placeholder to list of custom parameters\n        properties[`param_${key}`] = safeStringify(data);\n    });\n\n    // Add custom tags to properties\n    if (customTags) {\n        properties[customTagsKey] = [].join.apply(customTags, [', ']);\n    }\n\n    return properties;\n}\n\n/**\n * Converts the given telemetry context into AppInsights readable properties\n * @param context Telemetry context from which the properties will be pulled\n */\nexport function getPropertiesFromContext(context: ITelemetryContext): IDictionary<string> {\n    const properties: IDictionary<string> = {};\n    // Only add context to properties if they have been set (non-empty string)\n    if (context.moduleContext.moduleId) {\n        properties[moduleIdKey] = context.moduleContext.moduleId;\n    }\n    if (context.moduleContext.moduleType) {\n        properties[moduleTypeKey] = context.moduleContext.moduleType;\n    }\n    if (context.requestContext.pageId) {\n        properties[cmsPageIdKey] = context.requestContext.pageId;\n    }\n    if (context.requestContext.pageType) {\n        properties[pageTypeKey] = context.requestContext.pageType;\n    }\n\n    return properties;\n}\n\n/**\n * Given a severity level and if debug flag is set or not, this method will return true if we should bypass logs\n * @param severityLevel - SeverityLevel enum\n * @param isDebug - boolean\n */\nexport function shouldSkipLogging(severityLevel: SeverityLevel | undefined, isDebug: boolean): boolean {\n    // Do not send events marked as None or Debug to AppInsights\n    // Do not send events marked as trace to AppInsights, if debug mode is not on\n\n    return severityLevel === undefined || (!isDebug && severityLevel === 0);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}