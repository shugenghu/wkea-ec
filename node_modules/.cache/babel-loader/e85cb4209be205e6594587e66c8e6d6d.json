{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{appendQueryParams,getUrlSync}from'@msdyn365-commerce/core-internal';import{EXCEPTION_LINK_ACTION}from'@msdyn365-commerce/telemetry-internal';import{CategoryLinkInput,ProductLinkInput}from'./hydrator-action-inputs';import{getPageTypeContextByIdAction}from'./link-actions/page-type-context-by-id';/**\r\n * Takes a Link object from the Page Response and uses URL Builder to construct a destination url and transform the\r\n * existing link structure to expose two porperties type and destinationUrl\r\n *\r\n * @param linkObject The current link object being modified\r\n * @param context The current action context\r\n */export var hydrateLink=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(linkObject,context){var destinationUrl,queryParams,routeContext,_routeContext;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=linkObject.type;_context.next=_context.t0==='internalLink'?3:_context.t0==='externalLink'?3:_context.t0==='productLink'?8:_context.t0==='categoryLink'?25:42;break;case 3:if(!linkObject.destinationUrl){_context.next=7;break;}// Append the pass through query parameters\nqueryParams=context.requestContext&&context.requestContext.query||{};destinationUrl=appendQueryParams(linkObject.destinationUrl,queryParams);return _context.abrupt(\"break\",43);case 7:return _context.abrupt(\"return\");case 8:if(!(linkObject.productId&&linkObject.categoryId)){_context.next=24;break;}_context.prev=9;_context.next=12;return getPageTypeContextByIdAction(new ProductLinkInput(context.requestContext.apiSettings,linkObject.categoryId,linkObject.productId),context);case 12:routeContext=_context.sent;// Create the URL and break\ndestinationUrl=getUrlSync('product',context,routeContext);_context.next=23;break;case 16:_context.prev=16;_context.t1=_context[\"catch\"](9);context.telemetry.error(EXCEPTION_LINK_ACTION);context.telemetry.exception(_context.t1);linkObject.destinationUrl='';linkObject.error=EXCEPTION_LINK_ACTION;return _context.abrupt(\"return\");case 23:return _context.abrupt(\"break\",43);case 24:return _context.abrupt(\"return\");case 25:if(!linkObject.categoryId){_context.next=41;break;}_context.prev=26;_context.next=29;return getPageTypeContextByIdAction(new CategoryLinkInput(context.requestContext.apiSettings,linkObject.categoryId),context);case 29:_routeContext=_context.sent;// Create the URL and break\ndestinationUrl=getUrlSync('category',context,_routeContext);_context.next=40;break;case 33:_context.prev=33;_context.t2=_context[\"catch\"](26);context.telemetry.error(EXCEPTION_LINK_ACTION);context.telemetry.exception(_context.t2);linkObject.destinationUrl='';linkObject.error=EXCEPTION_LINK_ACTION;return _context.abrupt(\"return\");case 40:return _context.abrupt(\"break\",43);case 41:return _context.abrupt(\"return\");case 42:return _context.abrupt(\"return\");case 43:// Set the computed destinationUrl and delete the other properties\nlinkObject.destinationUrl=destinationUrl;delete linkObject.categoryId;delete linkObject.productId;case 46:case\"end\":return _context.stop();}}},_callee,null,[[9,16],[26,33]]);}));return function hydrateLink(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["../../../src/hydrators/link-hydrator.ts"],"names":[],"mappings":"uIAAA;;;AAGG,GACH,OAAS,iBAAT,CAA4B,UAA5B,KAA2E,kCAA3E,CACA,OAAS,qBAAT,KAAsC,uCAAtC,CACA,OAAS,iBAAT,CAA2D,gBAA3D,KAAmF,0BAAnF,CACA,OAAS,4BAAT,KAA6C,wCAA7C,CAEA;;;;;;AAMG,GACH,MAAO,IAAM,CAAA,WAAW,0FAAG,iBAAO,UAAP,CAAgC,OAAhC,wLAIf,UAAU,CAAC,IAJI,6BAOd,cAPc,iBAQd,cARc,iBAgBd,aAhBc,iBAsCd,cAtCc,wBASX,UAAU,CAAC,cATA,yBAUX;AACM,WAXK,CAWU,OAAO,CAAC,cAAR,EAA0B,OAAO,CAAC,cAAR,CAAuB,KAAlD,EAA4D,EAXrE,CAYX,cAAc,CAAG,iBAAiB,CAAC,UAAU,CAAC,cAAZ,CAA4B,WAA5B,CAAlC,CAZW,uFAkBX,UAAU,CAAC,SAAX,EAAwB,UAAU,CAAC,UAlBxB,kEAsBc,CAAA,4BAA4B,CAC7C,GAAI,CAAA,gBAAJ,CAAqB,OAAO,CAAC,cAAR,CAAuB,WAA5C,CAAyD,UAAU,CAAC,UAApE,CAAgF,UAAU,CAAC,SAA3F,CAD6C,CAE7C,OAF6C,CAtB1C,SAsBP,YAtBO,eA0BP;AACA,cAAc,CAAG,UAAU,CAAC,SAAD,CAAY,OAAZ,CAAqB,YAArB,CAA3B,CA3BO,iFA6BP,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,qBAAxB,EACA,OAAO,CAAC,SAAR,CAAkB,SAAlB,cACA,UAAU,CAAC,cAAX,CAA4B,EAA5B,CACA,UAAU,CAAC,KAAX,CAAmB,qBAAnB,CAhCO,iIAwCX,UAAU,CAAC,UAxCA,kEA4Cc,CAAA,4BAA4B,CAC7C,GAAI,CAAA,iBAAJ,CAAsB,OAAO,CAAC,cAAR,CAAuB,WAA7C,CAA0D,UAAU,CAAC,UAArE,CAD6C,CAE7C,OAF6C,CA5C1C,SA4CP,aA5CO,eAgDP;AACA,cAAc,CAAG,UAAU,CAAC,UAAD,CAAa,OAAb,CAAsB,aAAtB,CAA3B,CAjDO,kFAmDP,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,qBAAxB,EACA,OAAO,CAAC,SAAR,CAAkB,SAAlB,cACA,UAAU,CAAC,cAAX,CAA4B,EAA5B,CACA,UAAU,CAAC,KAAX,CAAmB,qBAAnB,CAtDO,sKAkEvB;AACA,UAAU,CAAC,cAAX,CAA4B,cAA5B,CACA,MAAO,CAAA,UAAU,CAAC,UAAlB,CACA,MAAO,CAAA,UAAU,CAAC,SAAlB,CArEuB,6EAAH,kBAAX,CAAA,WAAW,gDAAjB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { appendQueryParams, getUrlSync, IActionContext, IDictionary } from '@msdyn365-commerce/core-internal';\nimport { EXCEPTION_LINK_ACTION } from '@msdyn365-commerce/telemetry-internal';\nimport { CategoryLinkInput, IPageTypeContext, IServerLink, ProductLinkInput } from './hydrator-action-inputs';\nimport { getPageTypeContextByIdAction } from './link-actions/page-type-context-by-id';\n\n/**\n * Takes a Link object from the Page Response and uses URL Builder to construct a destination url and transform the\n * existing link structure to expose two porperties type and destinationUrl\n *\n * @param linkObject The current link object being modified\n * @param context The current action context\n */\nexport const hydrateLink = async (linkObject: IServerLink, context: IActionContext) => {\n    let destinationUrl: string | undefined;\n    // In each switch case if the required information is not present to construct the URL\n    // The object will be return unmodified\n    switch (linkObject.type) {\n        // In the case of internal and external links, no transform is needed\n        // If destination url is present set the destination url and break\n        case 'internalLink':\n        case 'externalLink':\n            if (linkObject.destinationUrl) {\n                // Append the pass through query parameters\n                const queryParams = (context.requestContext && context.requestContext.query) || {};\n                destinationUrl = appendQueryParams(linkObject.destinationUrl, queryParams);\n                break;\n            }\n            return;\n        case 'productLink':\n            // To build the url for a productLink we need the product and category ids\n            if (linkObject.productId && linkObject.categoryId) {\n                // Grab the route context using the action\n                let routeContext: IPageTypeContext;\n                try {\n                    routeContext = await getPageTypeContextByIdAction(\n                        new ProductLinkInput(context.requestContext.apiSettings, linkObject.categoryId, linkObject.productId),\n                        context\n                    );\n                    // Create the URL and break\n                    destinationUrl = getUrlSync('product', context, routeContext);\n                } catch (err) {\n                    context.telemetry.error(EXCEPTION_LINK_ACTION);\n                    context.telemetry.exception(err);\n                    linkObject.destinationUrl = '';\n                    linkObject.error = EXCEPTION_LINK_ACTION;\n                    return;\n                }\n                break;\n            }\n            return;\n        case 'categoryLink':\n            // To build the url for the categoryLink we need the category id\n            if (linkObject.categoryId) {\n                // Grab the route context using the action\n                let routeContext: IPageTypeContext;\n                try {\n                    routeContext = await getPageTypeContextByIdAction(\n                        new CategoryLinkInput(context.requestContext.apiSettings, linkObject.categoryId),\n                        context\n                    );\n                    // Create the URL and break\n                    destinationUrl = getUrlSync('category', context, routeContext);\n                } catch (err) {\n                    context.telemetry.error(EXCEPTION_LINK_ACTION);\n                    context.telemetry.exception(err);\n                    linkObject.destinationUrl = '';\n                    linkObject.error = EXCEPTION_LINK_ACTION;\n                    return;\n                }\n                break;\n            }\n            return;\n        default:\n            // If it is not one of these types or does not contain the information required for the link\n            // building do not modify the data\n            return;\n    }\n\n    // Set the computed destinationUrl and delete the other properties\n    linkObject.destinationUrl = destinationUrl;\n    delete linkObject.categoryId;\n    delete linkObject.productId;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}