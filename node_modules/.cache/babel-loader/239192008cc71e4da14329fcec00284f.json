{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{getParameterizeFeatureFlags}from'@msdyn365-commerce/core';import{createObservableDataAction}from'@msdyn365-commerce/core';import{buildCacheKey}from'.';import getCategoryHierarchy,{CategoriesInput}from'./get-categories-hierarchy';import{parameterize}from'./utilities/Url-builder';/**\r\n * Input class for GetCurrentCategory data action\r\n */export var CurrentCategoryInput=function CurrentCategoryInput(context){var _this=this;_classCallCheck(this,CurrentCategoryInput);this.getCacheKey=function(){return buildCacheKey(\"\".concat(_this.categoryId||_this.categorySlug),_this.apiSettings);};this.getCacheObjectType=function(){return'Current-Category';};this.dataCacheType=function(){return'application';};var categoryId;var categorySlug;if(context.query&&context.query.categoryId){categoryId=Number(context.query.categoryId);if(Number.isNaN(categoryId)){throw new Error('Failed to cast category id into a number.');}// @ts-ignore: RecordId URLToken not typed yet\n}else if(context.urlTokens&&context.urlTokens.recordId){// @ts-ignore: RecordId URLToken not typed yet\ncategoryId=Number(context.urlTokens.recordId);if(Number.isNaN(categoryId)){throw new Error('Failed to cast category id into a number.');}}else if(context.urlTokens&&context.urlTokens.categories&&context.urlTokens.categories.length){var categories=context.urlTokens.categories;if(!categories.length){throw new Error('Failed to get category name from urlTokens');}// TODO: fix getParameterizeFeatureFlags to take requestContext as input.\nvar tempActionContext={requestContext:context};categorySlug=\"/\".concat(categories.map(function(category){// @ts-ignore TODO: fix getParameterizeFeatureFlags to take requestContext as an input\nvar parameterizeFeatureFlags=getParameterizeFeatureFlags(tempActionContext);return parameterize(category,undefined,parameterizeFeatureFlags);}).join('/'));}this.categoryId=categoryId;this.categorySlug=categorySlug;this.apiSettings=context.apiSettings;};/**\r\n * Creates a current category input from an ICreateActionContext\r\n */export var createGetCurrentCategoryInput=function createGetCurrentCategoryInput(inputData){if(inputData&&inputData.requestContext){return new CurrentCategoryInput(inputData.requestContext);}throw new Error('Please specify categoryId query string in request.');};/**\r\n * Rescrusive Search Method to find a given category amongts a complete CategoryHierarcy\r\n * @param categories The current Category Hierarchy\r\n * @param categorySlug The category slug being searched for\r\n * @param categoryId The category Id being search for\r\n */export function searchCategory(categories,categorySlug,categoryId){var foundCategory;categories.forEach(function(cat){if(categoryId&&cat.RecordId===categoryId||categorySlug&&cat.Slug===categorySlug){return foundCategory=cat;}else if(cat.Children&&cat.Children.length){var matchingChild=searchCategory(cat.Children,categorySlug,categoryId);if(matchingChild){foundCategory=matchingChild;}}});return foundCategory;}/**\r\n * Action method for the getCurrentCategory Data Action\r\n * @param input The action input class\r\n * @param ctx The action context\r\n */export function getCurrentCategoryAction(_x,_x2){return _getCurrentCategoryAction.apply(this,arguments);}/**\r\n * The getCurrentCategory data action\r\n * First makes a call to the getCategories RetailServer API\r\n * to get a list of every available category, then returns a CategoryHierarchy\r\n * based on the categoryId query param set in the URL of the request\r\n */function _getCurrentCategoryAction(){_getCurrentCategoryAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){var categoryInput,categories,category;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(input.categorySlug||input.categoryId)){_context.next=13;break;}categoryInput=new CategoriesInput(ctx.requestContext,true);_context.next=4;return getCategoryHierarchy(categoryInput,ctx);case 4:categories=_context.sent;if(categories){_context.next=8;break;}ctx.trace('[getCurrentCategory] Unable to get categories from server');return _context.abrupt(\"return\");case 8:category=searchCategory(categories,input.categorySlug,input.categoryId);if(category){_context.next=12;break;}ctx.trace('[getCurrentCategory] Unable to find category');return _context.abrupt(\"return\");case 12:return _context.abrupt(\"return\",category);case 13:case\"end\":return _context.stop();}}},_callee);}));return _getCurrentCategoryAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-current-category',action:getCurrentCategoryAction,input:createGetCurrentCategoryInput});","map":{"version":3,"sources":["../../src/get-current-category.ts"],"names":[],"mappings":"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","sourcesContent":["import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, getParameterizeFeatureFlags, IAction, IActionInput, ICommerceApiSettings, IParameterizeFeatureFlags } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric, IRequestContext } from '@msdyn365-commerce/core';\nimport { buildCacheKey } from '.';\nimport getCategoryHierarchy, { CategoriesInput } from './get-categories-hierarchy';\nimport { parameterize } from './utilities/Url-builder';\n\n/**\n * Input class for GetCurrentCategory data action\n */\nexport class CurrentCategoryInput implements IActionInput {\n    public categoryId?: number;\n    public categorySlug?: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(context: IRequestContext) {\n        let categoryId;\n        let categorySlug;\n        if (context.query && context.query.categoryId) {\n            categoryId = Number(context.query.categoryId);\n\n            if (Number.isNaN(categoryId)) {\n                throw new Error('Failed to cast category id into a number.');\n            }\n        // @ts-ignore: RecordId URLToken not typed yet\n        } else if (context.urlTokens && context.urlTokens.recordId) {\n        // @ts-ignore: RecordId URLToken not typed yet\n            categoryId = Number(context.urlTokens.recordId);\n            if (Number.isNaN(categoryId)) {\n                throw new Error('Failed to cast category id into a number.');\n            }\n        } else if (context.urlTokens && context.urlTokens.categories && context.urlTokens.categories.length) {\n            const categories: string[] = <string[]>(<unknown>context.urlTokens.categories);\n\n            if (!categories.length) {\n                throw new Error('Failed to get category name from urlTokens');\n            }\n            // TODO: fix getParameterizeFeatureFlags to take requestContext as input.\n            const tempActionContext = {\n                requestContext:context\n            }\n            categorySlug = `/${categories\n                .map(category => {\n                    // @ts-ignore TODO: fix getParameterizeFeatureFlags to take requestContext as an input\n                    const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlags(tempActionContext);\n                    return parameterize(category,undefined, parameterizeFeatureFlags);\n                })\n                .join('/')}`;\n        }\n        this.categoryId = categoryId;\n        this.categorySlug = categorySlug;\n        this.apiSettings = context.apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`${this.categoryId || this.categorySlug}`, this.apiSettings);\n    public getCacheObjectType = () => 'Current-Category';\n    public dataCacheType = (): CacheType => 'application';\n}\n\n/**\n * Creates a current category input from an ICreateActionContext\n */\nexport const createGetCurrentCategoryInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    if (inputData && inputData.requestContext) {\n        return new CurrentCategoryInput(inputData.requestContext);\n    }\n\n    throw new Error('Please specify categoryId query string in request.');\n};\n\n/**\n * Rescrusive Search Method to find a given category amongts a complete CategoryHierarcy\n * @param categories The current Category Hierarchy\n * @param categorySlug The category slug being searched for\n * @param categoryId The category Id being search for\n */\nexport function searchCategory(categories: CategoryHierarchy[], categorySlug?: string, categoryId?: number): CategoryHierarchy | undefined {\n    let foundCategory;\n    categories.forEach((cat: CategoryHierarchy) => {\n        if ((categoryId && cat.RecordId === categoryId) || (categorySlug && cat.Slug === categorySlug)) {\n            return (foundCategory = cat);\n        } else if (cat.Children && cat.Children.length) {\n            const matchingChild = searchCategory(cat.Children, categorySlug, categoryId);\n            if (matchingChild) {\n                foundCategory = matchingChild;\n            }\n        }\n    });\n    return foundCategory;\n}\n\n/**\n * Action method for the getCurrentCategory Data Action\n * @param input The action input class\n * @param ctx The action context\n */\nexport async function getCurrentCategoryAction(input: CurrentCategoryInput, ctx: IActionContext): Promise<CategoryHierarchy | undefined> {\n    if (input.categorySlug || input.categoryId) {\n        const categoryInput = new CategoriesInput(ctx.requestContext, true);\n        const categories = await getCategoryHierarchy(categoryInput, ctx);\n        if (!categories) {\n            ctx.trace('[getCurrentCategory] Unable to get categories from server');\n            return;\n        }\n\n        const category = searchCategory(categories, input.categorySlug, input.categoryId);\n        if (!category) {\n            ctx.trace('[getCurrentCategory] Unable to find category');\n            return;\n        }\n        return category;\n    }\n}\n\n/**\n * The getCurrentCategory data action\n * First makes a call to the getCategories RetailServer API\n * to get a list of every available category, then returns a CategoryHierarchy\n * based on the categoryId query param set in the URL of the request\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-current-category',\n    action: <IAction<CategoryHierarchy>>getCurrentCategoryAction,\n    input: createGetCurrentCategoryInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}