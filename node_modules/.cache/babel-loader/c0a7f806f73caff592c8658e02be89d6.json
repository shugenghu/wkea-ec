{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.for-each.js\";/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/import{createObservableDataAction}from'@msdyn365-commerce/core';import{getRelatedProductsAsync,getRelationTypesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import getFullProducts,{FullProductInput}from'./get-full-products';import{QueryResultSettingsProxy}from'./utilities/QueryResultSettingsProxy';import{getProductDetailsCriteriaFromActionInput}from'./utilities/utils';/**\r\n * GetRelatedProducts Input Action\r\n */export class GetRelatedProductsInput{constructor(productId,catalogId,relationType,queryResultSettingsProxy,criteria){this.getCacheKey=()=>\"\".concat(this.productId,\"|\").concat(this.catalogId,\"|\").concat(this.relationType.toLowerCase(),\"|\").concat(this.queryResultSettingsProxy.cacheKeyHint,\"|\").concat(this.ProductDetailsCriteria.getPrice);this.getCacheObjectType=()=>'GetRelatedProducts';this.dataCacheType=()=>'none';this.productId=productId;this.catalogId=catalogId;this.relationType=relationType;this.queryResultSettingsProxy=queryResultSettingsProxy;this.ProductDetailsCriteria=criteria;}}/**\r\n * Creates the input required to make GetRelatedProducts retail api call\r\n */export const createGetRelatedProductsInput=inputData=>{if(inputData&&inputData.requestContext&&inputData.config){const catalogId=inputData.requestContext.apiSettings.catalogId;const relationType=inputData.config.relationType;// @ts-ignore: URLTokens not properly types\nlet productId=inputData.requestContext.urlTokens?Number(inputData.requestContext.urlTokens.recordId):0;const productDetailsCriteria=getProductDetailsCriteriaFromActionInput(inputData);if(!relationType){throw new Error('Input relation type is invalid.');}// Query string may override the product id from url\nif(inputData.requestContext.query&&inputData.requestContext.query.productId){productId=Number(inputData.requestContext.query.productId);}if(Number.isNaN(productId)||productId<=0){throw new Error('No valid product id available in url or query string.');}if(Number.isNaN(catalogId)){throw new Error('Failed to cast catalog id into a number.');}const queryResultSettingsProxy=QueryResultSettingsProxy.fromInputData(inputData);return new GetRelatedProductsInput(productId,catalogId,relationType,queryResultSettingsProxy,productDetailsCriteria);}throw new Error('Invalid input data or request context');};export function searchProductRelationType(productRelationTypes,_productRelationType){let foundProductRelationTypeId;_productRelationType=_productRelationType.toLowerCase();productRelationTypes.forEach(productRelationType=>{if(productRelationType.Name&&productRelationType.Name.toLowerCase()===_productRelationType){return foundProductRelationTypeId=productRelationType.RecordId;}});return foundProductRelationTypeId;}async function getRelatedProductsAction(input,ctx){const apiSettings=ctx.requestContext.apiSettings;const querySettings=input.queryResultSettingsProxy.QueryResultSettings;const productRelationTypes=await getRelationTypesAsync({callerContext:ctx,queryResultSettings:querySettings},input.productId,+apiSettings.channelId,input.catalogId);if(!productRelationTypes){ctx.trace(\"[getProductRelationType] Unable to get product relation types for product \".concat(input.productId));return[];}const productRelationTypeId=searchProductRelationType(productRelationTypes,input.relationType);if(!productRelationTypeId){ctx.trace(\"[getRelatedProducts] Unable to find relation type \".concat(input.relationType,\" for product \").concat(input.productId));return[];}const productInputs=await getRelatedProductsAsync({callerContext:ctx,queryResultSettings:querySettings},input.productId,+apiSettings.channelId,input.catalogId,productRelationTypeId).then(response=>{if(response&&response.length){return response.map(product=>{return new FullProductInput(product.RecordId,apiSettings,input.ProductDetailsCriteria);});}ctx.trace('[getRelatedProductsAction] Invalid response from server');return[];}).catch(error=>{ctx.trace(error.message);ctx.trace(error.stack||'');ctx.telemetry.exception(error);ctx.telemetry.debug(\"[getRelatedProductsAction] Unable to Fetch Products.\");ctx.trace(\"[getRelatedProductsAction] Unable to Fetch Products.\");return[];});if(productInputs.length>0){return getFullProducts(productInputs,ctx);}else{return[];}}/**\r\n * The getRelatedProducts data action\r\n * Uses a productId URL Token and finds the relation types for said product\r\n * using the getRelationTypes RetailServer API, and then finds and retusn all products that\r\n * share that relation type via the getRelatedProducts RetailServer API\r\n */export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-related-products',action:getRelatedProductsAction,input:createGetRelatedProductsInput});","map":{"version":3,"sources":["../../src/get-related-products.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getRelatedProductsAsync, getRelationTypesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductRelationType, ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from './get-full-products';\nimport { QueryResultSettingsProxy } from './utilities/QueryResultSettingsProxy';\nimport { getProductDetailsCriteriaFromActionInput } from './utilities/utils';\n\n/**\n * GetRelatedProducts Input Action\n */\nexport class GetRelatedProductsInput implements IActionInput {\n    public readonly productId: number;\n    public readonly catalogId: number;\n    public readonly relationType: string;\n    public ProductDetailsCriteria: ProductDetailsCriteria;\n    public readonly queryResultSettingsProxy: QueryResultSettingsProxy;\n\n    constructor(\n        productId: number,\n        catalogId: number,\n        relationType: string,\n        queryResultSettingsProxy: QueryResultSettingsProxy,\n        criteria: ProductDetailsCriteria\n    ) {\n        this.productId = productId;\n        this.catalogId = catalogId;\n        this.relationType = relationType;\n        this.queryResultSettingsProxy = queryResultSettingsProxy;\n        this.ProductDetailsCriteria = criteria;\n    }\n\n    public getCacheKey = () =>\n        `${this.productId}|${this.catalogId}|${this.relationType.toLowerCase()}|${this.queryResultSettingsProxy.cacheKeyHint}|${\n            this.ProductDetailsCriteria.getPrice\n        }`;\n    public getCacheObjectType = () => 'GetRelatedProducts';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * Creates the input required to make GetRelatedProducts retail api call\n */\nexport const createGetRelatedProductsInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    if (inputData && inputData.requestContext && inputData.config) {\n        const catalogId = inputData.requestContext.apiSettings.catalogId;\n        const relationType = inputData.config.relationType;\n\n        // @ts-ignore: URLTokens not properly types\n        let productId = inputData.requestContext.urlTokens ? Number(inputData.requestContext.urlTokens.recordId) : 0;\n        const productDetailsCriteria = getProductDetailsCriteriaFromActionInput(inputData);\n        if (!relationType) {\n            throw new Error('Input relation type is invalid.');\n        }\n\n        // Query string may override the product id from url\n        if (inputData.requestContext.query && inputData.requestContext.query.productId) {\n            productId = Number(inputData.requestContext.query.productId);\n        }\n\n        if (Number.isNaN(productId) || productId <= 0) {\n            throw new Error('No valid product id available in url or query string.');\n        }\n\n        if (Number.isNaN(catalogId)) {\n            throw new Error('Failed to cast catalog id into a number.');\n        }\n\n        const queryResultSettingsProxy = QueryResultSettingsProxy.fromInputData(inputData);\n        return new GetRelatedProductsInput(productId, catalogId, relationType, queryResultSettingsProxy, productDetailsCriteria);\n    }\n\n    throw new Error('Invalid input data or request context');\n};\n\nexport function searchProductRelationType(productRelationTypes: ProductRelationType[], _productRelationType: string): number | undefined {\n    let foundProductRelationTypeId;\n    _productRelationType = _productRelationType.toLowerCase();\n    productRelationTypes.forEach((productRelationType: ProductRelationType) => {\n        if (productRelationType.Name && productRelationType.Name.toLowerCase() === _productRelationType) {\n            return (foundProductRelationTypeId = productRelationType.RecordId);\n        }\n    });\n\n    return foundProductRelationTypeId;\n}\n\nasync function getRelatedProductsAction(input: GetRelatedProductsInput, ctx: IActionContext): Promise<FullProduct[]> {\n    const apiSettings = ctx.requestContext.apiSettings;\n    const querySettings = input.queryResultSettingsProxy.QueryResultSettings;\n\n    const productRelationTypes = await getRelationTypesAsync(\n        { callerContext: ctx, queryResultSettings: querySettings },\n        input.productId,\n        +apiSettings.channelId,\n        input.catalogId\n    );\n    if (!productRelationTypes) {\n        ctx.trace(`[getProductRelationType] Unable to get product relation types for product ${input.productId}`);\n        return <FullProduct[]>[];\n    }\n    const productRelationTypeId = searchProductRelationType(productRelationTypes, input.relationType);\n    if (!productRelationTypeId) {\n        ctx.trace(`[getRelatedProducts] Unable to find relation type ${input.relationType} for product ${input.productId}`);\n        return <FullProduct[]>[];\n    }\n\n    const productInputs = await getRelatedProductsAsync(\n        { callerContext: ctx, queryResultSettings: querySettings },\n        input.productId,\n        +apiSettings.channelId,\n        input.catalogId,\n        productRelationTypeId\n    )\n        .then(response => {\n            if (response && response.length) {\n                return response.map(\n                    (product: ProductSearchResult): FullProductInput => {\n                        return new FullProductInput(product.RecordId, apiSettings, input.ProductDetailsCriteria);\n                    }\n                );\n            }\n\n            ctx.trace('[getRelatedProductsAction] Invalid response from server');\n            return <FullProductInput[]>[];\n        })\n        .catch((error: Error) => {\n            ctx.trace(error.message);\n            ctx.trace(error.stack || '');\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[getRelatedProductsAction] Unable to Fetch Products.`);\n            ctx.trace(`[getRelatedProductsAction] Unable to Fetch Products.`);\n            return <FullProductInput[]>[];\n        });\n\n    if (productInputs.length > 0) {\n        return getFullProducts(productInputs, ctx);\n    } else {\n        return <FullProduct[]>[];\n    }\n}\n\n/**\n * The getRelatedProducts data action\n * Uses a productId URL Token and finds the relation types for said product\n * using the getRelationTypes RetailServer API, and then finds and retusn all products that\n * share that relation type via the getRelatedProducts RetailServer API\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-related-products',\n    action: <IAction<FullProduct[]>>getRelatedProductsAction,\n    input: createGetRelatedProductsInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}