{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */","map":{"version":3,"sources":["../../src/Interfaces/IDataServiceRequest.ts"],"names":[],"mappings":"AAAA;;;AAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { BypassCache, ICache } from './ICache';\nimport { ICallerContext } from './ICallerContext';\nimport { ITelemetry } from './ITelemetry';\n\n/**\n * Interface which specifies the caching information for a given action\n */\nexport interface IActionInput {\n    /**\n     * Returns the type which is used for caching, could be the same as the response entity\n     */\n    getCacheObjectType(): string;\n\n    /**\n     * Returns the key which is used for caching, usually the ID\n     */\n    getCacheKey(): string;\n\n    /**\n     * funtion to provide action input hook to override read from cache\n     */\n    readCacheEntries?(requestCache: ICache, appCache: ICache, shouldReadFromAppCache?: boolean, telemetry?: ITelemetry): any;\n\n    /**\n     * funtion to provide action input hook to override write in cache\n     */\n    saveCacheEntries?(\n        results: any,\n        requestCache: ICache,\n        appCache: ICache,\n        isCacheTypeApplication: boolean\n    ): { [cacheKey: string]: any } | undefined;\n\n    /**\n     * Is the return type cache-able\n     */\n    shouldCacheOutput(): boolean;\n}\n\n/**\n * Interface for data service request.\n */\nexport interface IDataServiceRequest extends IActionInput {\n    /**\n     * Locale for the current data service request.\n     */\n    locale: string;\n\n    /**\n     * Request Identifier.\n     * Autogenerated unique identifier if executed in batch. Used to fetch the response from batch result array.\n     */\n    id(): number;\n\n    /**\n     * Query parameters\n     * Query parameters for data service request\n     */\n    queryParams<T>(): T;\n\n    /**\n     * Execute the request.\n     * @param {any} callerContext The caller context.\n     * @return {IAsyncResult<T>} The async result.\n     */\n    execute<T>(callerContext: any): Promise<T>;\n\n    /**\n     * Executes the batch requests.\n     * @param {IDataServiceRequest[]} requests The collection of requests to execute.\n     * @param {any} [callerContext] The caller context.\n     * @return {IAsyncResult<Array>} The async result.  Responses at index I correlates to request with identifier I.\n     */\n    executeBatch(requests: IDataServiceRequest[], callerContext?: ICallerContext): Promise<any[]>;\n\n    /**\n     * override cache type.\n     * @param {BypassCache} bypassCache cache type.\n     */\n    overrideCacheType(bypassCache: BypassCache): void;\n}\n\n/**\n * Interface for cache options that will be used during action execution\n */\nexport interface IDataServiceOptions {\n    /**\n     * return type\n     */\n    returnEntity: string;\n    /**\n     * property to indicate if read from cache needs to be skipped\n     */\n    bypassCache: BypassCache;\n}\n\n/**\n * Represents a null result.\n */\n// tslint:disable:no-empty-interface\n// tslint:disable-next-line:interface-name\nexport interface NullResult {}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}