{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _debounce from \"lodash/debounce\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createSearchStateInput } from '@msdyn365-commerce-modules/search-utilities';\nimport { getTelemetryObject, KeyCodes } from '@msdyn365-commerce-modules/utilities';\nimport { getUrlSync } from '@msdyn365-commerce/core';\nimport { getProductSearchRefinersAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport getSearchSuggestionsAction, { AutoSuggestInput, SuggestionType } from './actions/get-auto-suggest-suggestions';\nimport { CategorySuggestionsComponent, FormComponent, KeywordSuggestionsComponent, LabelComponent, ProductSuggestionsComponent } from './components';\n/**\n *\n * Search module\n * @extends {React.Component<ISearchProps<ISearchData>, ISearchState>}\n */\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.hitPrefix = '{';\n    this.hitSuffix = '}';\n    this.waitTime = 500; // tslint:disable-next-line:no-any\n\n    this._focusOutTarget = e => {\n      const {\n        suggestions\n      } = this.state;\n\n      if (suggestions && suggestions.AllSearchResults && e.target.closest('.ms-search') === null) {\n        this._clearAutoSuggestState();\n      }\n    };\n\n    this._keyup = e => {\n      const {\n        suggestions\n      } = this.state;\n\n      if (suggestions && suggestions.AllSearchResults && e.keyCode === KeyCodes.Escape) {\n        this._clearAutoSuggestState();\n      } else if (this.state.isSearchFormExpanded && e.keyCode === KeyCodes.Escape) {\n        if (this.state.isSearchFormExpanded) {\n          this.setState({\n            isSearchFormExpanded: false\n          });\n        }\n      }\n\n      if (!(this.formReference.current && this.formReference.current.contains(e.target) || this.autoSuggestResultDiv.current && this.autoSuggestResultDiv.current.contains(e.target))) {\n        if (suggestions && suggestions.AllSearchResults) {\n          this._clearAutoSuggestState();\n        }\n\n        if (this.state.isSearchFormExpanded) {\n          this.setState({\n            isSearchFormExpanded: false\n          });\n        }\n      }\n    };\n\n    this._clearAutoSuggestState = () => {\n      const {\n        context: {\n          actionContext\n        },\n        data: {\n          searchState\n        }\n      } = this.props;\n\n      if (this.searchTextInput.current && this.searchTextInput.current.value.length > 0) {\n        searchState.searchText = '';\n        searchState.defaultBasicSearchUrl = '';\n        searchState.searchQueryStringParameter = '';\n        actionContext ? actionContext.update(createSearchStateInput(searchState), searchState) : null;\n        this.searchTextInput.current.value = '';\n      }\n\n      this.setState({\n        searchText: '',\n        suggestions: undefined,\n        searchRefiners: undefined\n      });\n    };\n\n    this._handleInputChange = query => {\n      if (!query || query.length < this.maxChars) {\n        this.setState({\n          searchText: query\n        });\n      }\n\n      if (this.cancellabelDebounce) {\n        this.cancellabelDebounce.cancel();\n      }\n\n      const {\n        telemetry,\n        context,\n        data: {\n          searchState\n        }\n      } = this.props;\n\n      if (context) {\n        if (query && query.length > 0) {\n          if (query.length > this.maxChars) {\n            return;\n          }\n\n          this.cancellabelDebounce = _debounce(() => {\n            getSearchSuggestionsAction(new AutoSuggestInput(query, this.topResultsCount, this._getSuggestionType(this.inputSuggestionType), this.hitPrefix, this.hitSuffix), context.actionContext).then(results => {\n              this._getSearchRefiners(query).then(refiners => {\n                this.setState({\n                  suggestions: results,\n                  searchRefiners: refiners,\n                  autoSuggestAriaLabel: this._setAutoSuggestResultCount(results)\n                });\n              }).catch(error => {\n                this.setState({\n                  suggestions: results,\n                  searchRefiners: undefined,\n                  autoSuggestAriaLabel: this._setAutoSuggestResultCount(results)\n                });\n                telemetry.exception(error);\n                telemetry.debug('Unable to get refiners results');\n              });\n            }).catch(error => {\n              this.setState({\n                suggestions: undefined,\n                searchRefiners: undefined,\n                autoSuggestAriaLabel: this._setAutoSuggestResultCount()\n              });\n              telemetry.exception(error);\n              telemetry.debug('Unable to get auto suggest results');\n            });\n          }, this.waitTime);\n          setTimeout(() => {\n            this.cancellabelDebounce();\n          }, 0);\n          searchState.searchText = query;\n        } else {\n          this.setState({\n            suggestions: undefined,\n            searchRefiners: undefined\n          });\n          searchState.searchText = '';\n        }\n\n        context.actionContext.update(createSearchStateInput(searchState), searchState);\n      }\n    };\n\n    this._getSuggestionType = suggestionTypes => {\n      if (suggestionTypes && suggestionTypes.length > 0) {\n        const distinctSuggestionTypes = [];\n        suggestionTypes && suggestionTypes.forEach((suggestionTypeItem, index) => {\n          suggestionTypeItem.SuggestionType && distinctSuggestionTypes.push(suggestionTypeItem.SuggestionType.charAt(0).toUpperCase() + suggestionTypeItem.SuggestionType.slice(1));\n        });\n        return distinctSuggestionTypes.join(',');\n      }\n\n      return 'Keyword, Product, ScopedCategory';\n    };\n\n    this._handleSubmit = e => {\n      const {\n        config: {\n          disableSubmitSearch\n        },\n        context: {\n          actionContext,\n          app: {\n            config: {\n              searchQueryStringParameter\n            }\n          }\n        }\n      } = this.props;\n      const query = this.searchTextInput.current && this.searchTextInput.current.value;\n      e.preventDefault();\n\n      if (!query || query && query.length === 0 || disableSubmitSearch) {\n        this.searchTextInput && this.searchTextInput.current && this.searchTextInput.current.focus();\n      } else {\n        const searchQsp = searchQueryStringParameter || 'q';\n\n        const searchURL = this._appendQueryParams(getUrlSync('search', actionContext) || '', query, searchQsp);\n\n        document.location.href = searchURL;\n      }\n    };\n\n    this._handleCancelSearchChange = () => {\n      const {\n        isSearchFormExpanded,\n        suggestions\n      } = this.state;\n\n      if (!isSearchFormExpanded) {\n        this.setState({\n          isSearchFormExpanded: true,\n          searchText: '',\n          isInitialState: false\n        });\n      } else {\n        if (suggestions && suggestions.AllSearchResults) {\n          this._clearAutoSuggestState();\n        }\n\n        this.setState({\n          isSearchFormExpanded: false\n        });\n      }\n    };\n\n    this._appendQueryParams = (route, query, qsp) => {\n      if (route && route.length > 0) {\n        return query && query.length > 0 ? \"\".concat(route).concat(route.indexOf('?') === -1 ? '?' : '&').concat(qsp, \"=\").concat(query) : route;\n      }\n\n      return '';\n    };\n\n    this._setAutoSuggestResultCount = result => {\n      if (this.autoSuggestResultScreenReaderDiv.current !== null) {\n        const ariaLiveRegion = this.autoSuggestResultScreenReaderDiv.current;\n        const suggestResultString = this.props.resources.autoSuggestFoundMessage;\n        const emptyResultString = this.props.resources.noAutoSuggestionMessage;\n        ariaLiveRegion.innerText = result && result.AllSearchResults && result.AllSearchResults.length > 0 ? suggestResultString : emptyResultString;\n        ariaLiveRegion.setAttribute('aria-live', 'assertive');\n        return ariaLiveRegion.innerText;\n      } else {\n        return '';\n      }\n    };\n\n    this.searchTextInput = /*#__PURE__*/React.createRef();\n    this.searchCollapsedLabel = /*#__PURE__*/React.createRef();\n    this.autoSuggestResultScreenReaderDiv = /*#__PURE__*/React.createRef();\n    this.autoSuggestResultDiv = /*#__PURE__*/React.createRef();\n    this.formReference = /*#__PURE__*/React.createRef();\n    this.state = {\n      isSearchFormExpanded: false,\n      searchText: '',\n      searchKeywordSuggestClass: 'ms-search__autoSuggest__keyword',\n      searchProductSuggestClass: 'ms-search__autoSuggest__product',\n      searchCategorySuggestClass: 'ms-search__autoSuggest__category',\n      suggestions: undefined,\n      searchRefiners: undefined,\n      autoSuggestAriaLabel: '',\n      isInitialState: true\n    };\n    this.maxChars = this.props.context && this.props.context.app && this.props.context.app.config && this.props.context.app.config.searchInputMaxLength || 50;\n    this.inputSuggestionType = this.props.config && this.props.config.suggestionTypeCriterion;\n    this.topResultsCount = this.props.config && this.props.config.topResultsCount ? this.props.config.topResultsCount : 5;\n    this.searchFormClass = 'ms-search__form';\n    this.searchLabelClass = 'ms-search__label';\n    this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName, this.props.friendlyName, this.props.telemetry);\n  }\n\n  async componentDidMount() {\n    document.body && document.body.addEventListener('mousedown', this._focusOutTarget);\n    window && window.addEventListener('keyup', this._keyup);\n  }\n\n  componentWillUnmount() {\n    document.body && document.body.removeEventListener('mousedown', this._focusOutTarget, false);\n    window && window.removeEventListener('keyup', this._keyup, false);\n  }\n\n  componentDidUpdate() {\n    const {\n      config: {\n        hideSearchLabel\n      }\n    } = this.props;\n    const {\n      isSearchFormExpanded,\n      isInitialState\n    } = this.state;\n\n    if (!this.props.context.request.params.isEditor) {\n      if (!hideSearchLabel && isSearchFormExpanded) {\n        this.searchTextInput && this.searchTextInput.current && this.searchTextInput.current.focus();\n      } else if (!isInitialState) {\n        this.searchCollapsedLabel && this.searchCollapsedLabel.current && this.searchCollapsedLabel.current.focus();\n      }\n    }\n  } // tslint:disable-next-line: cyclomatic-complexity max-func-body-length\n\n\n  render() {\n    const {\n      context,\n      resources: {\n        searchtext,\n        searchLabelArialLabel,\n        cancelBtnAriaLabel,\n        searchBtnAriaLabel,\n        submitBtnAriaLabel\n      },\n      config: {\n        hideSearchLabel,\n        disableSubmitSearch,\n        searchplaceholderText,\n        className = ''\n      }\n    } = this.props;\n    const {\n      isSearchFormExpanded,\n      searchText,\n      searchKeywordSuggestClass,\n      searchProductSuggestClass,\n      searchCategorySuggestClass,\n      suggestions,\n      searchRefiners\n    } = this.state;\n    const searchQsp = context && context.app && context.app.config && context.app.config.searchQueryStringParameter || 'q';\n    const searchPageURL = getUrlSync('search', context && context.actionContext) || '';\n\n    const searchURL = this._appendQueryParams(searchPageURL, searchText, searchQsp);\n\n    const searchPlaceholder = searchplaceholderText && searchplaceholderText.length > 0 ? searchplaceholderText : 'Search in Fabrikam';\n    const keywordSuggestions = suggestions && suggestions.AllSearchResults && suggestions.AllSearchResults.filter(i => i.SuggestionType === SuggestionType.Keyword || i.SuggestionType === SuggestionType.None);\n    const productSuggestions = suggestions && suggestions.AllSearchResults && suggestions.AllSearchResults.filter(i => i.SuggestionType === SuggestionType.Product);\n    const categorySuggestions = suggestions && suggestions.AllSearchResults && suggestions.AllSearchResults.filter(i => i.SuggestionType === SuggestionType.Category);\n\n    const viewProps = _objectSpread(_objectSpread({}, this.props), {}, {\n      Search: {\n        moduleProps: this.props,\n        className: \"\".concat(classnames('ms-search', className), \" \").concat(disableSubmitSearch ? 'no-submit' : 'with-submit')\n      },\n      AutoSuggestAriaLabel: {\n        tag: 'div',\n        className: 'msc-autoSuggest__screen-reader',\n        'aria-live': 'assertive',\n        ref: this.autoSuggestResultScreenReaderDiv\n      },\n      AutoSuggestAriaLabelText: this.state.autoSuggestAriaLabel,\n      searchText: this.state.searchText,\n      AutoSuggest: {\n        ref: this.autoSuggestResultDiv,\n        className: 'ms-search__autoSuggest'\n      },\n      KeywordSuggest: {\n        className: searchKeywordSuggestClass\n      },\n      ProductSuggest: {\n        className: searchProductSuggestClass\n      },\n      CategorySuggest: {\n        className: searchCategorySuggestClass\n      },\n      SearchForm: {\n        className: \"\".concat(this.searchFormClass, \" \").concat(isSearchFormExpanded ? 'bx-show' : 'bx-hide')\n      },\n      FormWrapper: {\n        tag: 'form',\n        ref: this.formReference,\n        className: 'ms-search__searchForm',\n        'aria-label': 'Search',\n        name: 'searchForm',\n        role: 'Search',\n        action: searchURL,\n        autoComplete: 'off',\n        onSubmit: this._handleSubmit\n      },\n      UlKeyword: {\n        tag: 'ul',\n        className: classnames('msc-autoSuggest__keywordResults-items', className)\n      },\n      UlProduct: {\n        tag: 'ul',\n        className: classnames('msc-autoSuggest__productResults-items', className)\n      },\n      UlCategory: {\n        tag: 'ul',\n        className: classnames('msc-autoSuggest__categoryResults-items', className)\n      },\n      label: LabelComponent({\n        isSearchFormExpanded: isSearchFormExpanded,\n        searchLabelClass: \"\".concat(this.searchLabelClass, \" \").concat(isSearchFormExpanded ? 'bx-hide' : 'bx-show'),\n        searchtext: searchtext,\n        searchLabelArialLabel: searchLabelArialLabel,\n        searchCollapsedLabel: this.searchCollapsedLabel,\n        hideSearchLabel: hideSearchLabel,\n        handleCancelSearchChange: this._handleCancelSearchChange,\n        telemetryContent: this.telemetryContent\n      }),\n      form: FormComponent({\n        ariaLabelCancel: cancelBtnAriaLabel,\n        ariaLabelSearch: searchBtnAriaLabel,\n        ariaLabelSubmit: submitBtnAriaLabel,\n        hideSearchLabel: hideSearchLabel,\n        searchTextInput: this.searchTextInput,\n        isSearchFormExpanded: isSearchFormExpanded,\n        disableSubmitSearch: disableSubmitSearch,\n        handleInputChange: this._handleInputChange,\n        handleCancelSearchChange: this._handleCancelSearchChange,\n        maxChars: this.maxChars,\n        searchQsp: searchQsp,\n        searchPlaceholder: searchPlaceholder,\n        query: searchText\n      }),\n      autosuggestKeyword: searchText && searchText.length > 0 && keywordSuggestions && keywordSuggestions.length > 0 ? KeywordSuggestionsComponent({\n        searchKeywordSuggestClass: searchKeywordSuggestClass,\n        searchPageURL: searchPageURL,\n        searchQsp: searchQsp,\n        hitPrefix: this.hitPrefix,\n        hitSuffix: this.hitSuffix,\n        autoSuggestProps: this.props,\n        searchText: searchText,\n        suggestions: keywordSuggestions,\n        telemetryContent: this.telemetryContent\n      }) : undefined,\n      autosuggestProduct: searchText && searchText.length > 0 && productSuggestions && productSuggestions.length > 0 ? ProductSuggestionsComponent({\n        searchProductSuggestClass: searchProductSuggestClass,\n        searchPageURL: searchPageURL,\n        searchQsp: searchQsp,\n        hitPrefix: this.hitPrefix,\n        hitSuffix: this.hitSuffix,\n        autoSuggestProps: this.props,\n        searchText: searchText,\n        suggestions: productSuggestions,\n        telemetry: this.props.telemetry,\n        moduleType: this.props.typeName,\n        moduleId: this.props.id,\n        telemetryContent: this.telemetryContent\n      }) : undefined,\n      autosuggestCategory: searchText && searchText.length > 0 && categorySuggestions && categorySuggestions.length > 0 ? CategorySuggestionsComponent({\n        searchCategorySuggestClass: searchCategorySuggestClass,\n        searchPageURL: searchPageURL,\n        searchQsp: searchQsp,\n        hitPrefix: this.hitPrefix,\n        hitSuffix: this.hitSuffix,\n        autoSuggestProps: this.props,\n        searchText: searchText,\n        suggestions: categorySuggestions,\n        searchRefiners: searchRefiners,\n        telemetryContent: this.telemetryContent\n      }) : undefined,\n      callbacks: {\n        handleCancelSearchChange: this._handleCancelSearchChange\n      },\n      isSearchFormExpanded: this.state.isSearchFormExpanded\n    });\n\n    return this.props.renderView(viewProps);\n  }\n\n  async _getSearchRefiners(searchText) {\n    const {\n      actionContext: ctx\n    } = this.props.context;\n    return getProductSearchRefinersAsync({\n      callerContext: ctx\n    }, {\n      SearchCondition: searchText,\n      Context: {\n        ChannelId: +ctx.requestContext.apiSettings.channelId,\n        CatalogId: +ctx.requestContext.apiSettings.catalogId\n      }\n    });\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/node_modules/source-map-loader/index.js!/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/src/modules/search/search.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createSearchStateInput } from '@msdyn365-commerce-modules/search-utilities';\nimport { getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, KeyCodes } from '@msdyn365-commerce-modules/utilities';\nimport { Autosuggestions } from '@msdyn365-commerce/commerce-entities';\nimport { getUrlSync } from '@msdyn365-commerce/core';\nimport { ProductRefiner } from '@msdyn365-commerce/retail-proxy';\nimport { getProductSearchRefinersAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport classnames from 'classnames';\nimport { debounce } from 'lodash';\nimport * as React from 'react';\n\nimport getSearchSuggestionsAction, { AutoSuggestInput, SuggestionType } from './actions/get-auto-suggest-suggestions';\nimport {\n    CategorySuggestionsComponent,\n    FormComponent,\n    ISearchCategoryViewProps,\n    ISearchKeywordViewProps,\n    ISearchProductViewProps,\n    KeywordSuggestionsComponent,\n    LabelComponent,\n    ProductSuggestionsComponent\n} from './components';\nimport { ISearchData } from './search.data';\nimport { ISearchProps, ISuggestionTypeCriterionData } from './search.props.autogenerated';\n\nexport interface ISearchState {\n    isSearchFormExpanded: boolean;\n    searchText: string;\n    searchKeywordSuggestClass: string;\n    searchProductSuggestClass: string;\n    searchCategorySuggestClass: string;\n    suggestions: Autosuggestions | undefined;\n    searchRefiners?: ProductRefiner[] | undefined;\n    autoSuggestAriaLabel: string;\n    isInitialState: boolean;\n}\n\nexport interface ISearchViewProps extends ISearchProps<ISearchData> {\n    Search: IModuleProps;\n    AutoSuggestAriaLabel: INodeProps;\n    AutoSuggestAriaLabelText: string;\n    searchText: string;\n    AutoSuggest: INodeProps;\n    KeywordSuggest: INodeProps;\n    ProductSuggest: INodeProps;\n    CategorySuggest: INodeProps;\n    SearchForm: INodeProps;\n    FormWrapper: INodeProps;\n    UlKeyword: INodeProps;\n    UlProduct: INodeProps;\n    UlCategory: INodeProps;\n    label: React.ReactNode;\n    form: React.ReactNode;\n    autosuggestKeyword?: ISearchKeywordViewProps;\n    autosuggestProduct?: ISearchProductViewProps;\n    autosuggestCategory?: ISearchCategoryViewProps;\n    callbacks: {\n        handleCancelSearchChange(): void;\n    };\n    isSearchFormExpanded: boolean;\n}\n\n/**\n *\n * Search module\n * @extends {React.Component<ISearchProps<ISearchData>, ISearchState>}\n */\nclass Search extends React.Component<ISearchProps<ISearchData>, ISearchState> {\n    private searchTextInput: React.RefObject<HTMLInputElement>;\n    private searchCollapsedLabel: React.RefObject<HTMLButtonElement>;\n    private formReference: React.RefObject<HTMLButtonElement>;\n    private maxChars: number;\n    private inputSuggestionType?: ISuggestionTypeCriterionData[];\n    private topResultsCount?: number;\n    private hitPrefix: string = '{';\n    private hitSuffix: string = '}';\n    private waitTime: number = 500;\n    private autoSuggestResultScreenReaderDiv: React.RefObject<HTMLDivElement>;\n    private autoSuggestResultDiv: React.RefObject<HTMLDivElement>;\n    private searchFormClass: string;\n    private searchLabelClass: string;\n    private telemetryContent: ITelemetryContent;\n    // @ts-ignore\n    private cancellabelDebounce: debounce;\n\n    constructor(props: ISearchProps<ISearchData>) {\n        super(props);\n        this.searchTextInput = React.createRef();\n        this.searchCollapsedLabel = React.createRef();\n        this.autoSuggestResultScreenReaderDiv = React.createRef();\n        this.autoSuggestResultDiv = React.createRef();\n        this.formReference = React.createRef();\n        this.state = {\n            isSearchFormExpanded: false,\n            searchText: '',\n            searchKeywordSuggestClass: 'ms-search__autoSuggest__keyword',\n            searchProductSuggestClass: 'ms-search__autoSuggest__product',\n            searchCategorySuggestClass: 'ms-search__autoSuggest__category',\n            suggestions: undefined,\n            searchRefiners: undefined,\n            autoSuggestAriaLabel: '',\n            isInitialState: true\n        };\n        this.maxChars =\n            (this.props.context &&\n                this.props.context.app &&\n                this.props.context.app.config &&\n                this.props.context.app.config.searchInputMaxLength) ||\n            50;\n        this.inputSuggestionType = this.props.config && this.props.config.suggestionTypeCriterion;\n        this.topResultsCount = this.props.config && this.props.config.topResultsCount ? this.props.config.topResultsCount : 5;\n        this.searchFormClass = 'ms-search__form';\n        this.searchLabelClass = 'ms-search__label';\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public async componentDidMount(): Promise<void> {\n        document.body && document.body.addEventListener('mousedown', this._focusOutTarget);\n        window && window.addEventListener('keyup', this._keyup);\n    }\n\n    public componentWillUnmount(): void {\n        document.body && document.body.removeEventListener('mousedown', this._focusOutTarget, false);\n        window && window.removeEventListener('keyup', this._keyup, false);\n    }\n\n    public componentDidUpdate(): void {\n        const {\n            config: { hideSearchLabel }\n        } = this.props;\n        const { isSearchFormExpanded, isInitialState } = this.state;\n\n        if (!this.props.context.request.params.isEditor) {\n            if (!hideSearchLabel && isSearchFormExpanded) {\n                this.searchTextInput && this.searchTextInput.current && this.searchTextInput.current.focus();\n            } else if (!isInitialState) {\n                this.searchCollapsedLabel && this.searchCollapsedLabel.current && this.searchCollapsedLabel.current.focus();\n            }\n        }\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity max-func-body-length\n    public render(): JSX.Element {\n        const {\n            context,\n            resources: { searchtext, searchLabelArialLabel, cancelBtnAriaLabel, searchBtnAriaLabel, submitBtnAriaLabel},\n            config: { hideSearchLabel, disableSubmitSearch, searchplaceholderText, className = '' }\n        } = this.props;\n\n        const {\n            isSearchFormExpanded,\n            searchText,\n            searchKeywordSuggestClass,\n            searchProductSuggestClass,\n            searchCategorySuggestClass,\n            suggestions,\n            searchRefiners\n        } = this.state;\n\n        const searchQsp = (context && context.app && context.app.config && context.app.config.searchQueryStringParameter) || 'q';\n        const searchPageURL = getUrlSync('search', context && context.actionContext) || '';\n        const searchURL = this._appendQueryParams(searchPageURL, searchText, searchQsp);\n        const searchPlaceholder = searchplaceholderText && searchplaceholderText.length > 0 ? searchplaceholderText : 'Search in Fabrikam';\n\n        const keywordSuggestions =\n            suggestions &&\n            suggestions.AllSearchResults &&\n            suggestions.AllSearchResults.filter(\n                i => i.SuggestionType === SuggestionType.Keyword || i.SuggestionType === SuggestionType.None\n            );\n        const productSuggestions =\n            suggestions &&\n            suggestions.AllSearchResults &&\n            suggestions.AllSearchResults.filter(i => i.SuggestionType === SuggestionType.Product);\n        const categorySuggestions =\n            suggestions &&\n            suggestions.AllSearchResults &&\n            suggestions.AllSearchResults.filter(i => i.SuggestionType === SuggestionType.Category);\n\n        const viewProps: ISearchViewProps = {\n            ...(this.props as ISearchProps<ISearchData>),\n\n            Search: {\n                moduleProps: this.props,\n                className: `${classnames('ms-search', className)} ${disableSubmitSearch ? 'no-submit' : 'with-submit'}`,\n            },\n            AutoSuggestAriaLabel: {\n                tag: 'div',\n                className: 'msc-autoSuggest__screen-reader',\n                'aria-live': 'assertive',\n                ref: this.autoSuggestResultScreenReaderDiv\n            },\n            AutoSuggestAriaLabelText: this.state.autoSuggestAriaLabel,\n            searchText: this.state.searchText,\n            AutoSuggest: {\n                ref: this.autoSuggestResultDiv,\n                className: 'ms-search__autoSuggest'\n            },\n            KeywordSuggest: {\n                className: searchKeywordSuggestClass\n            },\n            ProductSuggest: {\n                className: searchProductSuggestClass\n            },\n            CategorySuggest: {\n                className: searchCategorySuggestClass\n            },\n            SearchForm: {\n                className: `${this.searchFormClass} ${isSearchFormExpanded ? 'bx-show' : 'bx-hide'}`\n            },\n            FormWrapper: {\n                tag: 'form',\n                ref: this.formReference,\n                className: 'ms-search__searchForm',\n                'aria-label': 'Search',\n                name: 'searchForm',\n                role: 'Search',\n                action: searchURL,\n                autoComplete: 'off',\n                onSubmit: this._handleSubmit\n            },\n            UlKeyword: {\n                tag: 'ul',\n                className: classnames('msc-autoSuggest__keywordResults-items', className)\n            },\n            UlProduct: {\n                tag: 'ul',\n                className: classnames('msc-autoSuggest__productResults-items', className)\n            },\n            UlCategory: {\n                tag: 'ul',\n                className: classnames('msc-autoSuggest__categoryResults-items', className)\n            },\n            label:LabelComponent({\n                isSearchFormExpanded: isSearchFormExpanded,\n                searchLabelClass: `${this.searchLabelClass} ${isSearchFormExpanded ? 'bx-hide' : 'bx-show'}`,\n                searchtext: searchtext,\n                searchLabelArialLabel: searchLabelArialLabel,\n                searchCollapsedLabel: this.searchCollapsedLabel,\n                hideSearchLabel: hideSearchLabel,\n                handleCancelSearchChange: this._handleCancelSearchChange,\n                telemetryContent: this.telemetryContent\n            }),\n            form: FormComponent({\n                ariaLabelCancel: cancelBtnAriaLabel,\n                ariaLabelSearch: searchBtnAriaLabel,\n                ariaLabelSubmit: submitBtnAriaLabel,\n                hideSearchLabel: hideSearchLabel,\n                searchTextInput: this.searchTextInput,\n                isSearchFormExpanded: isSearchFormExpanded,\n                disableSubmitSearch: disableSubmitSearch,\n                handleInputChange: this._handleInputChange,\n                handleCancelSearchChange: this._handleCancelSearchChange,\n                maxChars: this.maxChars,\n                searchQsp: searchQsp,\n                searchPlaceholder: searchPlaceholder,\n                query: searchText\n            }),\n            autosuggestKeyword:\n                searchText && searchText.length > 0 && keywordSuggestions && keywordSuggestions.length > 0\n                    ? KeywordSuggestionsComponent({\n                          searchKeywordSuggestClass: searchKeywordSuggestClass,\n                          searchPageURL: searchPageURL,\n                          searchQsp: searchQsp,\n                          hitPrefix: this.hitPrefix,\n                          hitSuffix: this.hitSuffix,\n                          autoSuggestProps: this.props,\n                          searchText: searchText,\n                          suggestions: keywordSuggestions,\n                          telemetryContent: this.telemetryContent\n                      })\n                    : undefined,\n            autosuggestProduct:\n                searchText && searchText.length > 0 && productSuggestions && productSuggestions.length > 0\n                    ? ProductSuggestionsComponent({\n                          searchProductSuggestClass: searchProductSuggestClass,\n                          searchPageURL: searchPageURL,\n                          searchQsp: searchQsp,\n                          hitPrefix: this.hitPrefix,\n                          hitSuffix: this.hitSuffix,\n                          autoSuggestProps: this.props,\n                          searchText: searchText,\n                          suggestions: productSuggestions,\n                          telemetry: this.props.telemetry,\n                          moduleType: this.props.typeName,\n                          moduleId: this.props.id,\n                          telemetryContent: this.telemetryContent\n                      })\n                    : undefined,\n            autosuggestCategory:\n                searchText && searchText.length > 0 && categorySuggestions && categorySuggestions.length > 0\n                    ? CategorySuggestionsComponent({\n                          searchCategorySuggestClass: searchCategorySuggestClass,\n                          searchPageURL: searchPageURL,\n                          searchQsp: searchQsp,\n                          hitPrefix: this.hitPrefix,\n                          hitSuffix: this.hitSuffix,\n                          autoSuggestProps: this.props,\n                          searchText: searchText,\n                          suggestions: categorySuggestions,\n                          searchRefiners: searchRefiners,\n                          telemetryContent: this.telemetryContent\n                      })\n                    : undefined,\n            callbacks: {\n                handleCancelSearchChange: this._handleCancelSearchChange\n            },\n            isSearchFormExpanded: this.state.isSearchFormExpanded\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    // tslint:disable-next-line:no-any\n    private _focusOutTarget = (e: any): void => {\n        const { suggestions } = this.state;\n\n        if (\n            suggestions &&\n            suggestions.AllSearchResults &&\n            e.target.closest('.ms-search') === null\n        ) {\n            this._clearAutoSuggestState();\n        }\n    };\n\n    private _keyup = (e: KeyboardEvent): void => {\n        const { suggestions } = this.state;\n\n        if (suggestions && suggestions.AllSearchResults && e.keyCode === KeyCodes.Escape) {\n            this._clearAutoSuggestState();\n        } else if(this.state.isSearchFormExpanded && e.keyCode === KeyCodes.Escape) {\n            if(this.state.isSearchFormExpanded) {\n                this.setState({ isSearchFormExpanded: false });\n            }\n        }\n\n        if (!((this.formReference.current && this.formReference.current.contains(e.target as unknown as Node)) ||\n        (this.autoSuggestResultDiv.current && this.autoSuggestResultDiv.current.contains(e.target as unknown as Node)))) {\n            if (suggestions && suggestions.AllSearchResults) {\n                this._clearAutoSuggestState();\n            }\n\n            if(this.state.isSearchFormExpanded) {\n                this.setState({ isSearchFormExpanded: false });\n            }\n        }\n    };\n\n    private _clearAutoSuggestState = (): void => {\n        const {\n            context: { actionContext },\n            data: { searchState }\n        } = this.props;\n\n        if (this.searchTextInput.current && this.searchTextInput.current.value.length > 0) {\n            searchState.searchText = '';\n            searchState.defaultBasicSearchUrl = '';\n            searchState.searchQueryStringParameter = '';\n            actionContext ? actionContext.update(createSearchStateInput(searchState), searchState) : null;\n            this.searchTextInput.current.value = '';\n        }\n\n        this.setState({ searchText: '', suggestions: undefined, searchRefiners: undefined });\n    };\n\n    private _handleInputChange = (query: string): void => {\n        if (!query || query.length < this.maxChars) {\n            this.setState({ searchText: query });\n        }\n\n        if (this.cancellabelDebounce) {\n            this.cancellabelDebounce.cancel();\n        }\n\n        const {\n            telemetry,\n            context,\n            data: { searchState }\n        } = this.props;\n\n        if (context) {\n            if (query && query.length > 0) {\n                if (query.length > this.maxChars) {\n                    return;\n                }\n\n                this.cancellabelDebounce = debounce(() => {\n                    getSearchSuggestionsAction(\n                        new AutoSuggestInput(\n                            query,\n                            this.topResultsCount,\n                            this._getSuggestionType(this.inputSuggestionType),\n                            this.hitPrefix,\n                            this.hitSuffix\n                        ),\n                        context.actionContext\n                    )\n                        .then(results => {\n                            this._getSearchRefiners(query)\n                                .then(refiners => {\n                                    this.setState({ suggestions: results, searchRefiners: refiners,\n                                        autoSuggestAriaLabel: this._setAutoSuggestResultCount(results) });\n                                })\n                                .catch(error => {\n                                    this.setState({ suggestions: results, searchRefiners: undefined,\n                                        autoSuggestAriaLabel: this._setAutoSuggestResultCount(results) });\n                                    telemetry.exception(error);\n                                    telemetry.debug('Unable to get refiners results');\n                                });\n                        })\n                        .catch(error => {\n                            this.setState({ suggestions: undefined, searchRefiners: undefined,\n                                autoSuggestAriaLabel: this._setAutoSuggestResultCount() });\n                            telemetry.exception(error);\n                            telemetry.debug('Unable to get auto suggest results');\n                        });\n                },                                  this.waitTime);\n\n                setTimeout(() => {\n                    this.cancellabelDebounce();\n                },         0);\n\n                searchState.searchText = query;\n            } else {\n                this.setState({ suggestions: undefined, searchRefiners: undefined });\n                searchState.searchText = '';\n            }\n            context.actionContext.update(createSearchStateInput(searchState), searchState);\n        }\n    };\n\n    private _getSuggestionType = (suggestionTypes?: ISuggestionTypeCriterionData[]): string => {\n        if (suggestionTypes && suggestionTypes.length > 0) {\n            const distinctSuggestionTypes: string[] = [];\n            suggestionTypes && suggestionTypes.forEach((suggestionTypeItem, index) => {\n                suggestionTypeItem.SuggestionType && distinctSuggestionTypes.push(suggestionTypeItem.SuggestionType.charAt(0).toUpperCase() + suggestionTypeItem.SuggestionType.slice(1));\n            });\n            return distinctSuggestionTypes.join(',');\n        }\n        return 'Keyword, Product, ScopedCategory';\n    };\n\n    private async _getSearchRefiners(searchText: string): Promise<ProductRefiner[]> {\n        const { actionContext: ctx } = this.props.context;\n        return getProductSearchRefinersAsync(\n            { callerContext: ctx },\n            {\n                SearchCondition: searchText,\n                Context: {\n                    ChannelId: +ctx.requestContext.apiSettings.channelId,\n                    CatalogId: +ctx.requestContext.apiSettings.catalogId\n                }\n            }\n        );\n    }\n\n    private _handleSubmit = (\n        e: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement> | React.FormEvent<HTMLFormElement>\n    ): void => {\n        const {\n            config: { disableSubmitSearch },\n            context: {\n                actionContext,\n                app: {\n                    config: { searchQueryStringParameter }\n                }\n            }\n        } = this.props;\n\n        const query = this.searchTextInput.current && this.searchTextInput.current.value;\n        e.preventDefault();\n\n        if (!query || (query && query.length === 0) || disableSubmitSearch) {\n            this.searchTextInput && this.searchTextInput.current && this.searchTextInput.current.focus();\n        } else {\n            const searchQsp = searchQueryStringParameter || 'q';\n            const searchURL = this._appendQueryParams(getUrlSync('search', actionContext) || '', query, searchQsp);\n            document.location.href = searchURL;\n        }\n    };\n\n    private _handleCancelSearchChange = (): void => {\n        const { isSearchFormExpanded, suggestions } = this.state;\n\n        if (!isSearchFormExpanded) {\n            this.setState({\n                isSearchFormExpanded: true,\n                searchText: '',\n                isInitialState: false\n            });\n        } else {\n            if (suggestions && suggestions.AllSearchResults) {\n                this._clearAutoSuggestState();\n            }\n\n            this.setState({ isSearchFormExpanded: false });\n        }\n    };\n\n    private _appendQueryParams = (route: string, query: string, qsp: string): string => {\n        if (route && route.length > 0) {\n            return query && query.length > 0 ? `${route}${route.indexOf('?') === -1 ? '?' : '&'}${qsp}=${query}` : route;\n        }\n        return '';\n    };\n\n    private _setAutoSuggestResultCount = (result?: Autosuggestions) => {\n        if (this.autoSuggestResultScreenReaderDiv.current !== null) {\n            const ariaLiveRegion = this.autoSuggestResultScreenReaderDiv.current;\n            const suggestResultString = this.props.resources.autoSuggestFoundMessage;\n            const emptyResultString = this.props.resources.noAutoSuggestionMessage;\n            ariaLiveRegion.innerText = result && (result.AllSearchResults && result.AllSearchResults.length > 0) ? suggestResultString : emptyResultString;\n            ariaLiveRegion.setAttribute('aria-live','assertive');\n            return ariaLiveRegion.innerText;\n        } else {\n            return '';\n        }\n    };\n}\n\nexport default Search;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}