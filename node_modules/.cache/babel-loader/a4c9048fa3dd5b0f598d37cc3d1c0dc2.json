{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{addProductListLinesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';/**\r\n *  Input class for the AddItemToOrderTemplate data action.\r\n */export var AddItemToOrderTemplateInput=function AddItemToOrderTemplateInput(orderTemplateId,productId,quantity,unitOfMeasure){_classCallCheck(this,AddItemToOrderTemplateInput);this.getCacheKey=function(){return'AddItemToOrderTemplateInput';};this.getCacheObjectType=function(){return'AddItemToOrderTemplateInput';};this.dataCacheType=function(){return'none';};this.orderTemplateId=orderTemplateId;this.productId=productId;this.quantity=quantity;this.unitOfMeasure=unitOfMeasure||'ea';};/**\r\n * createInput method for the AddItemToOrderTemplate method.\r\n * @param {ICreateActionContext} inputData The input data passed to the createInput method.\r\n * @param {string} orderTemplateId The id of order template to update.\r\n * @param {number} productId The id of a product to add.\r\n * @param {number} quantity How many items of this product to add.\r\n */export var addItemToOrderTemplateInput=function addItemToOrderTemplateInput(inputData,orderTemplateId,productId,quantity,unitOfMeasure){var requestContext=inputData.requestContext;if(!requestContext.user.isAuthenticated){throw new Error('Unable to create order template. User is not authenticated.');}return new AddItemToOrderTemplateInput(orderTemplateId,productId,quantity,unitOfMeasure);};/**\r\n * The action method for the AddItemToOrderTemplate data action.\r\n * @param {AddItemToOrderTemplateInput} input The action input.\r\n * @param {IActionContext} ctx The action context.\r\n */export function addItemToOrderTemplateAction(_x,_x2){return _addItemToOrderTemplateAction.apply(this,arguments);}/**\r\n * The AddItemToOrderTemplate Data Action.\r\n * Returns product list line that was added to the order template.\r\n */function _addItemToOrderTemplateAction(){_addItemToOrderTemplateAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){var productListLineToAdd,productListLine;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;productListLineToAdd={ProductListId:input.orderTemplateId,ProductId:input.productId,Quantity:input.quantity,UnitOfMeasure:input.unitOfMeasure};_context.next=4;return addProductListLinesAsync({callerContext:ctx},input.orderTemplateId,[productListLineToAdd]);case 4:productListLine=_context.sent;if(!(productListLine&&productListLine.length===1&&productListLine[0]&&productListLine[0].ProductListId)){_context.next=9;break;}return _context.abrupt(\"return\",productListLine[0]);case 9:ctx.telemetry.error('Product list line was not returned when adding it to order template');throw Error('Product list line was not returned when adding it to order template');case 11:_context.next=17;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);ctx.telemetry.error('Not able to add an item to order template',_context.t0);throw _context.t0;case 17:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return _addItemToOrderTemplateAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/order-templates/add-item-to-order-template',action:addItemToOrderTemplateAction,input:addItemToOrderTemplateInput});","map":{"version":3,"sources":["../../../src/order-templates/add-item-to-order-template.ts"],"names":[],"mappings":"8MAAA,OACI,0BADJ,KAKgC,yBALhC,CAMA,OAAS,wBAAT,KAAyC,4EAAzC,CAGA;;AAEG,GACH,UAAa,CAAA,2BAAb,CAMI,qCAAY,eAAZ,CAAqC,SAArC,CAAwD,QAAxD,CAA0E,aAA1E,CAA+F,mDAOxF,KAAA,WAAA,CAAc,iBAAM,6BAAN,EAAd,CACA,KAAA,kBAAA,CAAqB,iBAAM,6BAAN,EAArB,CACA,KAAA,aAAA,CAAgB,iBAAiB,MAAjB,EAAhB,CARH,KAAK,eAAL,CAAuB,eAAvB,CACA,KAAK,SAAL,CAAiB,SAAjB,CACA,KAAK,QAAL,CAAgB,QAAhB,CACA,KAAK,aAAL,CAAqB,aAAa,EAAI,IAAtC,CACH,CAXL,CAkBA;;;;;;AAMG,GACH,MAAO,IAAM,CAAA,2BAA2B,CAAG,QAA9B,CAAA,2BAA8B,CACvC,SADuC,CACN,eADM,CACmB,SADnB,CACsC,QADtC,CACwD,aADxD,CAC8G,IAE7I,CAAA,cAF6I,CAE1H,SAF0H,CAE7I,cAF6I,CAGrJ,GAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,eAAzB,CAA0C,CACtC,KAAM,IAAI,CAAA,KAAJ,CAAU,6DAAV,CAAN,CACH,CACD,MAAO,IAAI,CAAA,2BAAJ,CAAgC,eAAhC,CAAiD,SAAjD,CAA4D,QAA5D,CAAsE,aAAtE,CAAP,CACH,CARM,CAUP;;;;AAIG,GACH,eAAsB,CAAA,4BAAtB,qEAyBA;;;AAGG,G,+HA5BI,iBAA4C,KAA5C,CAAgF,GAAhF,2KAEO,oBAFP,CAE+C,CAC1C,aAAa,CAAE,KAAK,CAAC,eADqB,CAE1C,SAAS,CAAE,KAAK,CAAC,SAFyB,CAG1C,QAAQ,CAAE,KAAK,CAAC,QAH0B,CAI1C,aAAa,CAAE,KAAK,CAAC,aAJqB,CAF/C,uBASkD,CAAA,wBAAwB,CAAC,CACtE,aAAa,CAAE,GADuD,CAAD,CAEtE,KAAK,CAAC,eAFgE,CAE/C,CAAC,oBAAD,CAF+C,CAT1E,QASO,eATP,oBAaK,eAAe,EAAI,eAAe,CAAC,MAAhB,GAA2B,CAA9C,EAAmD,eAAe,CAAC,CAAD,CAAlE,EAAyE,eAAe,CAAC,CAAD,CAAf,CAAmB,aAbjG,0DAcY,eAAe,CAAC,CAAD,CAd3B,SAgBK,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,qEAApB,EAhBL,KAiBW,CAAA,KAAK,CAAC,qEAAD,CAjBhB,0FAoBC,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,2CAApB,cApBD,uF,+DA6BP,cAAe,CAAA,0BAA0B,CAAkB,CACvD,EAAE,CAAE,sFADmD,CAEvD,MAAM,CAA4B,4BAFqB,CAGvD,KAAK,CAAE,2BAHgD,CAAlB,CAAzC","sourcesContent":["import { CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    ICreateActionContext } from '@msdyn365-commerce/core';\nimport { addProductListLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';\nimport { ProductListLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\n/**\n *  Input class for the AddItemToOrderTemplate data action.\n */\nexport class AddItemToOrderTemplateInput implements IActionInput {\n    public readonly orderTemplateId: string;\n    public readonly productId: number;\n    public readonly quantity: number;\n    public readonly unitOfMeasure: string;\n\n    constructor(orderTemplateId: string, productId: number, quantity: number, unitOfMeasure: string) {\n        this.orderTemplateId = orderTemplateId;\n        this.productId = productId;\n        this.quantity = quantity;\n        this.unitOfMeasure = unitOfMeasure || 'ea';\n    }\n\n    public getCacheKey = () => 'AddItemToOrderTemplateInput';\n    public getCacheObjectType = () => 'AddItemToOrderTemplateInput';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * createInput method for the AddItemToOrderTemplate method.\n * @param {ICreateActionContext} inputData The input data passed to the createInput method.\n * @param {string} orderTemplateId The id of order template to update.\n * @param {number} productId The id of a product to add.\n * @param {number} quantity How many items of this product to add.\n */\nexport const addItemToOrderTemplateInput = (\n    inputData: ICreateActionContext, orderTemplateId: string, productId: number, quantity: number, unitOfMeasure: string): AddItemToOrderTemplateInput => {\n\n    const { requestContext } = inputData;\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('Unable to create order template. User is not authenticated.');\n    }\n    return new AddItemToOrderTemplateInput(orderTemplateId, productId, quantity, unitOfMeasure);\n};\n\n/**\n * The action method for the AddItemToOrderTemplate data action.\n * @param {AddItemToOrderTemplateInput} input The action input.\n * @param {IActionContext} ctx The action context.\n */\nexport async function addItemToOrderTemplateAction(input: AddItemToOrderTemplateInput, ctx: IActionContext): Promise<ProductListLine> {\n    try {\n        const productListLineToAdd: ProductListLine = {\n            ProductListId: input.orderTemplateId,\n            ProductId: input.productId,\n            Quantity: input.quantity,\n            UnitOfMeasure: input.unitOfMeasure\n        };\n\n        const productListLine: ProductListLine[] = await addProductListLinesAsync({\n            callerContext: ctx\n        }, input.orderTemplateId, [productListLineToAdd]);\n\n        if (productListLine && productListLine.length === 1 && productListLine[0] && productListLine[0].ProductListId) {\n            return productListLine[0];\n        } else {\n            ctx.telemetry.error('Product list line was not returned when adding it to order template');\n            throw Error('Product list line was not returned when adding it to order template');\n        }\n    } catch (error) {\n        ctx.telemetry.error('Not able to add an item to order template', error);\n        throw error;\n    }\n}\n\n/**\n * The AddItemToOrderTemplate Data Action.\n * Returns product list line that was added to the order template.\n */\nexport default createObservableDataAction<ProductListLine>({\n    id: '@msdyn365-commerce-modules/retail-actions/order-templates/add-item-to-order-template',\n    action: <IAction<ProductListLine>>addItemToOrderTemplateAction,\n    input: addItemToOrderTemplateInput\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}