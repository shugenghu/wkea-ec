{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable-next-line:no-any\nconst appCache={};/**\r\n * SimpleCache implementation\r\n *\r\n * @class SimpleCache\r\n * @implements {ICache}\r\n * @internal\r\n */export default class SimpleCache{constructor(useRequestCache){this.localCache=useRequestCache?{}:appCache;}Get(type,key){if(!type||!key){throw new Error('Cannot send null arguments');}type=type.toUpperCase();key=key.toUpperCase();if(!!this.localCache[type]){return this.localCache[type][key];}return null;}Put(type,key,item){if(!type||!key){throw new Error('Cannot send null arguments');}type=type.toUpperCase();key=key.toUpperCase();if(this.localCache[type]===undefined){this.localCache[type]={};}const cacheItem={Item:item};this.localCache[type][key]=cacheItem;return cacheItem;}GetValue(type,key){const item=this.Get(type,key);return item?this.Value(item):null;}Value(item){return item.Item;}}","map":{"version":3,"sources":["../../../src/cache/simple-cache.ts"],"names":[],"mappings":"AAAA;;;AAGG,G,CAKH;AACA,KAAM,CAAA,QAAQ,CAAQ,EAAtB,CAEA;;;;;;AAMG,GACH,cAAc,MAAO,CAAA,WAAW,CAE5B,WAAA,CAAY,eAAZ,CAAoC,CAChC,KAAK,UAAL,CAAkB,eAAe,CAAG,EAAH,CAAQ,QAAzC,CACH,CAEM,GAAG,CAAI,IAAJ,CAAkB,GAAlB,CAA6B,CACnC,GAAI,CAAC,IAAD,EAAS,CAAC,GAAd,CAAmB,CACf,KAAM,IAAI,CAAA,KAAJ,CAAU,4BAAV,CAAN,CACH,CAED,IAAI,CAAG,IAAI,CAAC,WAAL,EAAP,CACA,GAAG,CAAG,GAAG,CAAC,WAAJ,EAAN,CACA,GAAI,CAAC,CAAC,KAAK,UAAL,CAAgB,IAAhB,CAAN,CAA6B,CACzB,MAAsB,MAAK,UAAL,CAAgB,IAAhB,EAAsB,GAAtB,CAAtB,CACH,CAED,MAAO,KAAP,CACH,CAEM,GAAG,CAAI,IAAJ,CAAkB,GAAlB,CAA+B,IAA/B,CAAsC,CAC5C,GAAI,CAAC,IAAD,EAAS,CAAC,GAAd,CAAmB,CACf,KAAM,IAAI,CAAA,KAAJ,CAAU,4BAAV,CAAN,CACH,CAED,IAAI,CAAG,IAAI,CAAC,WAAL,EAAP,CACA,GAAG,CAAG,GAAG,CAAC,WAAJ,EAAN,CACA,GAAI,KAAK,UAAL,CAAgB,IAAhB,IAA0B,SAA9B,CAAyC,CACrC,KAAK,UAAL,CAAgB,IAAhB,EAAwB,EAAxB,CACH,CAED,KAAM,CAAA,SAAS,CAAkB,CAAE,IAAI,CAAE,IAAR,CAAjC,CAEA,KAAK,UAAL,CAAgB,IAAhB,EAAsB,GAAtB,EAA6B,SAA7B,CACA,MAAO,CAAA,SAAP,CACH,CAEM,QAAQ,CAAI,IAAJ,CAAkB,GAAlB,CAA6B,CACxC,KAAM,CAAA,IAAI,CAAG,KAAK,GAAL,CAAY,IAAZ,CAAkB,GAAlB,CAAb,CACA,MAAO,CAAA,IAAI,CAAG,KAAK,KAAL,CAAc,IAAd,CAAH,CAAyB,IAApC,CACH,CAEM,KAAK,CAAI,IAAJ,CAAuB,CAC/B,MAAO,CAAA,IAAI,CAAC,IAAZ,CACH,CA5C2B","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:function-name\nimport { ICache, ICacheItem } from '@msdyn365-commerce/core-internal';\n\n// tslint:disable-next-line:no-any\nconst appCache: any = {};\n\n/**\n * SimpleCache implementation\n *\n * @class SimpleCache\n * @implements {ICache}\n * @internal\n */\nexport default class SimpleCache implements ICache {\n    public localCache: { [type: string]: { [key: string]: ICacheItem } };\n    constructor(useRequestCache: boolean) {\n        this.localCache = useRequestCache ? {} : appCache;\n    }\n\n    public Get<T>(type: string, key: string): ICacheItem<T> | null {\n        if (!type || !key) {\n            throw new Error('Cannot send null arguments');\n        }\n\n        type = type.toUpperCase();\n        key = key.toUpperCase();\n        if (!!this.localCache[type]) {\n            return <ICacheItem<T>>this.localCache[type][key];\n        }\n\n        return null;\n    }\n\n    public Put<T>(type: string, key: string, item: T): ICacheItem<T> | null {\n        if (!type || !key) {\n            throw new Error('Cannot send null arguments');\n        }\n\n        type = type.toUpperCase();\n        key = key.toUpperCase();\n        if (this.localCache[type] === undefined) {\n            this.localCache[type] = {};\n        }\n\n        const cacheItem: ICacheItem<T> = { Item: item };\n\n        this.localCache[type][key] = cacheItem;\n        return cacheItem;\n    }\n\n    public GetValue<T>(type: string, key: string): T | null {\n        const item = this.Get<T>(type, key);\n        return item ? this.Value<T>(item) : null;\n    }\n\n    public Value<T>(item: ICacheItem<T>): T {\n        return item.Item;\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}