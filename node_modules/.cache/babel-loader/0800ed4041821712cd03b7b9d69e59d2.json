{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCurrentAsync,getUsersAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';import{buildCacheKey}from'./utilities/utils';/**\r\n * Input class for get customer data action\r\n */export var OrganizationUsersInput=function OrganizationUsersInput(apiSettings){var _this=this;_classCallCheck(this,OrganizationUsersInput);this.getCacheKey=function(){return buildCacheKey('OrganizationUsers',_this.apiSettings);};this.getCacheObjectType=function(){return'BusinessPartner';};this.dataCacheType=function(){return'request';};this.apiSettings=apiSettings;};export var createGetOrganizationUsersInput=function createGetOrganizationUsersInput(inputData){var requestContext=inputData.requestContext;// Check if the user is authenticated.\nif(!requestContext.user.isAuthenticated){throw new Error('User is not logged in.');}return new OrganizationUsersInput(requestContext.apiSettings);};export function getOrganizationUsers(_x,_x2){return _getOrganizationUsers.apply(this,arguments);}function _getOrganizationUsers(){_getOrganizationUsers=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",getCurrentAsync({callerContext:ctx}).then(function(businessPartner){return getUsersAsync({callerContext:ctx},businessPartner.BusinessPartnerId).then(function(users){return users;})[\"catch\"](function(error){ctx.telemetry.exception(error);ctx.trace('[get-organization-users] Unable to load users');throw new Error('[get-organization-users] Unable to load users');});})[\"catch\"](function(error){ctx.telemetry.exception(error);ctx.telemetry.debug('[get-organization-users] Unable to get BusinessPartner');throw new Error('[get-organization-users] Unable to get BusinessPartner');}));case 1:case\"end\":return _context.stop();}}},_callee);}));return _getOrganizationUsers.apply(this,arguments);}export default createObservableDataAction({id:'get-organization-users',action:getOrganizationUsers,input:createGetOrganizationUsersInput});","map":{"version":3,"sources":["../../src/get-organization-users.ts"],"names":[],"mappings":"8MAAA,OAAoB,0BAApB,KAAyI,yBAAzI,CAEA,OAAS,eAAT,CAA0B,aAA1B,KAA+C,gFAA/C,CACA,OAAS,aAAT,KAA8B,mBAA9B,CAEA;;AAEG,GACH,UAAa,CAAA,sBAAb,CAGI,gCAAY,WAAZ,CAA6C,6DAGtC,KAAA,WAAA,CAAc,iBAAM,CAAA,aAAa,CAAC,mBAAD,CAAsB,KAAI,CAAC,WAA3B,CAAnB,EAAd,CACA,KAAA,kBAAA,CAAqB,iBAAM,iBAAN,EAArB,CACA,KAAA,aAAA,CAAgB,iBAAiB,SAAjB,EAAhB,CAJH,KAAK,WAAL,CAAmB,WAAnB,CACH,CALL,CAWA,MAAO,IAAM,CAAA,+BAA+B,CAAG,QAAlC,CAAA,+BAAkC,CAAC,SAAD,CAAkD,IACrF,CAAA,cADqF,CAClE,SADkE,CACrF,cADqF,CAG7F;AACA,GAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,eAAzB,CAA0C,CACtC,KAAM,IAAI,CAAA,KAAJ,CAAU,wBAAV,CAAN,CACH,CAED,MAAO,IAAI,CAAA,sBAAJ,CAA2B,cAAc,CAAC,WAA1C,CAAP,CACH,CATM,CAWP,eAAsB,CAAA,oBAAtB,6D,+GAAO,iBAAoC,KAApC,CAAmE,GAAnE,kJACI,eAAe,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAf,CACF,IADE,CACG,SAAA,eAAe,CAAG,CACpB,MAAO,CAAA,aAAa,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAyB,eAAe,CAAC,iBAAzC,CAAb,CACF,IADE,CACG,SAAC,KAAD,CAAU,CACZ,MAAO,CAAA,KAAP,CACH,CAHE,WAII,SAAA,KAAK,CAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,GAAG,CAAC,KAAJ,CAAU,+CAAV,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,+CAAV,CAAN,CACH,CARE,CAAP,CASH,CAXE,WAYI,SAAA,KAAK,CAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,wDAApB,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,wDAAV,CAAN,CACH,CAhBE,CADJ,wD,uDAmBP,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,wBADkC,CAEtC,MAAM,CAA2C,oBAFX,CAGtC,KAAK,CAAE,+BAH+B,CAAD,CAAzC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICommerceApiSettings, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { BusinessPartnerUser } from '@msdyn365-commerce/retail-proxy';\nimport { getCurrentAsync, getUsersAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';\nimport { buildCacheKey } from './utilities/utils';\n\n/**\n * Input class for get customer data action\n */\nexport class OrganizationUsersInput implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n    public getCacheKey = () => buildCacheKey('OrganizationUsers', this.apiSettings);\n    public getCacheObjectType = () => 'BusinessPartner';\n    public dataCacheType = (): CacheType => 'request';\n}\n\nexport const createGetOrganizationUsersInput = (inputData: ICreateActionContext): IActionInput => {\n    const { requestContext } = inputData;\n\n    // Check if the user is authenticated.\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('User is not logged in.');\n    }\n\n    return new OrganizationUsersInput(requestContext.apiSettings);\n};\n\nexport async function getOrganizationUsers(input: OrganizationUsersInput, ctx: IActionContext): Promise<BusinessPartnerUser[]> {\n    return getCurrentAsync({ callerContext: ctx })\n        .then(businessPartner => {\n            return getUsersAsync({ callerContext: ctx }, businessPartner.BusinessPartnerId)\n                .then((users) => {\n                    return users;\n                })\n                .catch(error => {\n                    ctx.telemetry.exception(error);\n                    ctx.trace('[get-organization-users] Unable to load users');\n                    throw new Error('[get-organization-users] Unable to load users');\n                });\n        })\n        .catch(error => {\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug('[get-organization-users] Unable to get BusinessPartner');\n            throw new Error('[get-organization-users] Unable to get BusinessPartner');\n        });\n}\nexport default createObservableDataAction({\n    id: 'get-organization-users',\n    action: <IAction<BusinessPartnerUser[]>><unknown>getOrganizationUsers,\n    input: createGetOrganizationUsersInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}