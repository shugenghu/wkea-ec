{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{readAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';import{buildCacheKey}from'./utilities/utils';/**\r\n * Input class for get customer data action\r\n */export class GetCustomerInput{constructor(apiSettings,accountNumber){this.getCacheKey=()=>buildCacheKey(\"Customer-\".concat(this.customerAccountNumber),this.apiSettings);this.getCacheObjectType=()=>'Customer';this.dataCacheType=()=>'request';this.customerAccountNumber=accountNumber;this.apiSettings=apiSettings;}}/**\r\n * Creates the input required to make the retail api call\r\n */const createInput=inputData=>{const{user,apiSettings}=inputData.requestContext;if(!user.token||!user.isAuthenticated){throw new Error('[getCustomer][createInput]: User is not Authenticated.');}return new GetCustomerInput(apiSettings);};const getCustomerAction=async(input,ctx)=>{if(input&&ctx.requestContext.user.isAuthenticated){// TO-DO- Need to clean up this code once SDK releases new proxy that handles null.\nreturn readAsync({callerContext:ctx},input.customerAccountNumber||'').then(response=>{return Array.isArray(response)?response[0]:response;});}ctx.trace('[getCustomer]Invalid input passed to action');return{};};export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-customer',action:getCustomerAction,input:createInput});","map":{"version":3,"sources":["../../src/get-customer.ts"],"names":[],"mappings":"sCACA,OAAS,0BAAT,KAAiG,yBAAjG,CAEA,OAAS,SAAT,KAA0B,yEAA1B,CACA,OAAS,aAAT,KAA8B,mBAA9B,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,gBAAgB,CAIzB,WAAA,CAAY,WAAZ,CAA+C,aAA/C,CAAqE,CAK9D,KAAA,WAAA,CAAc,IAAM,aAAa,oBAAa,KAAK,qBAAlB,EAA2C,KAAK,WAAhD,CAAjC,CACA,KAAA,kBAAA,CAAqB,IAAM,UAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CANH,KAAK,qBAAL,CAA6B,aAA7B,CACA,KAAK,WAAL,CAAmB,WAAnB,CACH,CAPwB,CAc7B;;AAEG,GACH,KAAM,CAAA,WAAW,CAAI,SAAD,EAAsE,CACtF,KAAM,CAAE,IAAF,CAAQ,WAAR,EAAwB,SAAS,CAAC,cAAxC,CACA,GAAI,CAAC,IAAI,CAAC,KAAN,EAAe,CAAC,IAAI,CAAC,eAAzB,CAA0C,CACtC,KAAM,IAAI,CAAA,KAAJ,CAAU,wDAAV,CAAN,CACH,CAED,MAAO,IAAI,CAAA,gBAAJ,CAAqB,WAArB,CAAP,CACH,CAPD,CASA,KAAM,CAAA,iBAAiB,CAAG,MAAO,KAAP,CAAgC,GAAhC,GAA0E,CAChG,GAAI,KAAK,EAAI,GAAG,CAAC,cAAJ,CAAmB,IAAnB,CAAwB,eAArC,CAAsD,CAClD;AACA,MAAO,CAAA,SAAS,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAyB,KAAK,CAAC,qBAAN,EAA+B,EAAxD,CAAT,CAAqE,IAArE,CAA0E,QAAQ,EAAG,CACxF,MAAO,CAAA,KAAK,CAAC,OAAN,CAAc,QAAd,EAA0B,QAAQ,CAAC,CAAD,CAAlC,CAAwC,QAA/C,CACH,CAFM,CAAP,CAGH,CAED,GAAG,CAAC,KAAJ,CAAU,6CAAV,EACA,MAAiB,EAAjB,CACH,CAVD,CAYA,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,wDADkC,CAEtC,MAAM,CAAqB,iBAFW,CAGtC,KAAK,CAAE,WAH+B,CAAD,CAAzC","sourcesContent":["import { CacheType, IAction, IActionInput, ICommerceApiSettings } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { Customer } from '@msdyn365-commerce/retail-proxy';\nimport { readAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';\nimport { buildCacheKey } from './utilities/utils';\n\n/**\n * Input class for get customer data action\n */\nexport class GetCustomerInput implements IActionInput {\n    public customerAccountNumber?: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings, accountNumber?: string) {\n        this.customerAccountNumber = accountNumber;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`Customer-${this.customerAccountNumber}`, this.apiSettings);\n    public getCacheObjectType = () => 'Customer';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetCustomerInput => {\n    const { user, apiSettings } = inputData.requestContext;\n    if (!user.token || !user.isAuthenticated) {\n        throw new Error('[getCustomer][createInput]: User is not Authenticated.');\n    }\n\n    return new GetCustomerInput(apiSettings);\n};\n\nconst getCustomerAction = async (input: GetCustomerInput, ctx: IActionContext): Promise<Customer> => {\n    if (input && ctx.requestContext.user.isAuthenticated) {\n        // TO-DO- Need to clean up this code once SDK releases new proxy that handles null.\n        return readAsync({ callerContext: ctx }, input.customerAccountNumber || '').then(response => {\n            return Array.isArray(response) ? response[0] : response;\n        });\n    }\n\n    ctx.trace('[getCustomer]Invalid input passed to action');\n    return <Customer>{};\n};\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-customer',\n    action: <IAction<Customer>>getCustomerAction,\n    input: createInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}