{"ast":null,"code":"import\"core-js/modules/es.promise.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{createObservableDataAction}from'@msdyn365-commerce/action-internal';import{getRelatedProductsAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{getProductImageUrls}from'../../utils/product-list-utils';const actionInputError=missingType=>{throw new Error(\"Input \".concat(missingType,\" is missing and required to run GetProductsByRelationship action\"));};export const getProductsByRelationshipIdList=async(input,context)=>{let productId;let relationshipId;// Grab the product ID from the list meta data or context\nif(input.listMetadata.productIds&&input.listMetadata.productIds.length>0){productId=input.listMetadata.productIds[0];}else if(context.requestContext.urlTokens&&context.requestContext.urlTokens.itemId){productId=+context.requestContext.urlTokens.itemId;}else{actionInputError('productId');}// The relationship ID must be provided with the list meta data\nif(input.listMetadata.relationshipId){relationshipId=+input.listMetadata.relationshipId;}else{actionInputError('relationshipId');}context.telemetry.debug(\"Product Id input to productByRelationship action: \".concat(productId));context.telemetry.debug(\"Relationship Id input to productByRelationship action: \".concat(relationshipId));return getRelatedProductsAsync({callerContext:context,queryResultSettings:{Paging:{Top:input.listMetadata.pageSize||10}}},productId,input.channelId,input.catalogId,relationshipId).then(products=>{context.telemetry.debug('Products returned by getRelatedProducts action',products);return getProductImageUrls(products,context.requestContext.apiSettings);}).catch(error=>{context.telemetry.error(\"Error running getRelatedProducts action: \".concat(error));throw new Error(error);});};export const getProductsByRelationshipIdListAction=createObservableDataAction({action:getProductsByRelationshipIdList,id:'@msdyn365-commerce/products-by-relationship-id'});","map":{"version":3,"sources":["../../../../src/hydrators/product-list-actions/products-by-relationship-id.action.ts"],"names":[],"mappings":"sCAAA;;;AAGG,GAEH,OAAS,0BAAT,KAA2C,oCAA3C,CAEA,OAAS,uBAAT,KAAwC,wEAAxC,CAEA,OAAS,mBAAT,KAAoC,gCAApC,CAGA,KAAM,CAAA,gBAAgB,CAAI,WAAD,EAAwB,CAC7C,KAAM,IAAI,CAAA,KAAJ,iBAAmB,WAAnB,qEAAN,CACH,CAFD,CAIA,MAAO,MAAM,CAAA,+BAA+B,CAAG,MAAO,KAAP,CAAgC,OAAhC,GAA2F,CACtI,GAAI,CAAA,SAAJ,CACA,GAAI,CAAA,cAAJ,CACA;AACA,GAAI,KAAK,CAAC,YAAN,CAAmB,UAAnB,EAAiC,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,MAA9B,CAAuC,CAA5E,CAA+E,CAC3E,SAAS,CAAG,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,CAA9B,CAAZ,CACH,CAFD,IAEO,IAAI,OAAO,CAAC,cAAR,CAAuB,SAAvB,EAAoC,OAAO,CAAC,cAAR,CAAuB,SAAvB,CAAiC,MAAzE,CAAiF,CACpF,SAAS,CAAG,CAAC,OAAO,CAAC,cAAR,CAAuB,SAAvB,CAAiC,MAA9C,CACH,CAFM,IAEA,CACH,gBAAgB,CAAC,WAAD,CAAhB,CACH,CACD;AACA,GAAI,KAAK,CAAC,YAAN,CAAmB,cAAvB,CAAuC,CACnC,cAAc,CAAG,CAAC,KAAK,CAAC,YAAN,CAAmB,cAArC,CACH,CAFD,IAEO,CACH,gBAAgB,CAAC,gBAAD,CAAhB,CACH,CACD,OAAO,CAAC,SAAR,CAAkB,KAAlB,6DAA6E,SAA7E,GACA,OAAO,CAAC,SAAR,CAAkB,KAAlB,kEAAkF,cAAlF,GAEA,MAAO,CAAA,uBAAuB,CAC1B,CAAE,aAAa,CAAE,OAAjB,CAA0B,mBAAmB,CAAE,CAAE,MAAM,CAAE,CAAE,GAAG,CAAE,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA+B,EAAtC,CAAV,CAA/C,CAD0B,CAE1B,SAF0B,CAG1B,KAAK,CAAC,SAHoB,CAI1B,KAAK,CAAC,SAJoB,CAK1B,cAL0B,CAAvB,CAOF,IAPE,CAOI,QAAD,EAAoC,CACtC,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,gDAAxB,CAA0E,QAA1E,EACA,MAAO,CAAA,mBAAmB,CAAC,QAAD,CAAW,OAAO,CAAC,cAAR,CAAuB,WAAlC,CAA1B,CACH,CAVE,EAWF,KAXE,CAWI,KAAK,EAAG,CACX,OAAO,CAAC,SAAR,CAAkB,KAAlB,oDAAoE,KAApE,GACA,KAAM,IAAI,CAAA,KAAJ,CAAU,KAAV,CAAN,CACH,CAdE,CAAP,CAeH,CAnCM,CAqCP,MAAO,MAAM,CAAA,qCAAqC,CAAG,0BAA0B,CAAC,CAC5E,MAAM,CAAkC,+BADoC,CAE5E,EAAE,CAAE,gDAFwE,CAAD,CAAxE","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createObservableDataAction } from '@msdyn365-commerce/action-internal';\nimport { IAction, IActionContext } from '@msdyn365-commerce/core-internal';\nimport { getRelatedProductsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { getProductImageUrls } from '../../utils/product-list-utils';\nimport { ProductListInput } from '../hydrator-action-inputs';\n\nconst actionInputError = (missingType: string) => {\n    throw new Error(`Input ${missingType} is missing and required to run GetProductsByRelationship action`);\n};\n\nexport const getProductsByRelationshipIdList = async (input: ProductListInput, context: IActionContext): Promise<ProductSearchResult[]> => {\n    let productId;\n    let relationshipId;\n    // Grab the product ID from the list meta data or context\n    if (input.listMetadata.productIds && input.listMetadata.productIds.length > 0) {\n        productId = input.listMetadata.productIds[0];\n    } else if (context.requestContext.urlTokens && context.requestContext.urlTokens.itemId) {\n        productId = +context.requestContext.urlTokens.itemId;\n    } else {\n        actionInputError('productId');\n    }\n    // The relationship ID must be provided with the list meta data\n    if (input.listMetadata.relationshipId) {\n        relationshipId = +input.listMetadata.relationshipId;\n    } else {\n        actionInputError('relationshipId');\n    }\n    context.telemetry.debug(`Product Id input to productByRelationship action: ${productId}`);\n    context.telemetry.debug(`Relationship Id input to productByRelationship action: ${relationshipId}`);\n\n    return getRelatedProductsAsync(\n        { callerContext: context, queryResultSettings: { Paging: { Top: input.listMetadata.pageSize || 10 } } },\n        productId,\n        input.channelId,\n        input.catalogId,\n        relationshipId\n    )\n        .then((products: ProductSearchResult[]) => {\n            context.telemetry.debug('Products returned by getRelatedProducts action', products);\n            return getProductImageUrls(products, context.requestContext.apiSettings);\n        })\n        .catch(error => {\n            context.telemetry.error(`Error running getRelatedProducts action: ${error}`);\n            throw new Error(error);\n        });\n};\n\nexport const getProductsByRelationshipIdListAction = createObservableDataAction({\n    action: <IAction<ProductSearchResult[]>>getProductsByRelationshipIdList,\n    id: '@msdyn365-commerce/products-by-relationship-id'\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}