{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{SeverityLevel}from'applicationinsights/out/Declarations/Contracts';import{LogLevel}from'../interfaces';import{buildPropertiesList,getPropertiesFromContext,messageTemplateKey,shouldSkipLogging}from'./app-insights-helper';import{safeStringify}from'./logging-helper';/**\r\n * Node logger that sends messages to Application Insights\r\n */export var AppInsightsNodeLogger=/*#__PURE__*/function(){/**\r\n     * Creates a new instance of AppInsights Logger\r\n     * @param instrumentationKey The instrumentation key for the Application Insights instance\r\n     */function AppInsightsNodeLogger(telemetryClient){_classCallCheck(this,AppInsightsNodeLogger);this.options={};this._client=telemetryClient;// TODO: node logger should be a singleton Bug# 391909\n// this._client.trackEvent({ name: 'Server version of Application Insights registered' });\n}_createClass(AppInsightsNodeLogger,[{key:\"initialize\",value:function initialize(options){this.options=options;}/**\r\n     * @internal\r\n     * Logs a trace message to AppInsights\r\n     * @param logLevel LogLevel of the message\r\n     * @param context Telemetry context to add to log\r\n     * @param messageTemplate Structured log formatted string\r\n     * @param placeholders List of placeholders in messageTemplate along with position in string\r\n     * @param values Arguments to replace placeholders\r\n     * @param customTags Array of strings to attach to log\r\n     */},{key:\"sendLog\",value:function sendLog(logLevel,context,messageTemplate,// tslint:disable-next-line:no-any\nplaceholders,customTags,exception){// Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\nvar severityLevel=AppInsightsNodeLogger._severityLevelMapping.get(logLevel);if(shouldSkipLogging(severityLevel,this.options.isDebug)){return;}// Build properties list with telemetry context and message template arguments\nvar properties=buildPropertiesList(context,placeholders,customTags);if(exception===undefined){// Send log to AppInsights as trace event\nthis._client.trackTrace({message:messageTemplate,severity:severityLevel,properties:properties});}else{// Attach message template as custom property\nproperties[messageTemplateKey]=\"[\".concat(logLevel,\"] \").concat(messageTemplate);// Send log to AppInsights as exception event\nthis._client.trackException({exception:exception,properties:properties});}}/**\r\n     * @internal\r\n     * Logs a trace message to AppInsights\r\n     * @param logLevel Severity level of the log\r\n     * @param message String to log\r\n     * @param args Any additional objects to log\r\n     * @param context Additional properties to add to the log\r\n     */},{key:\"log\",value:function log(logLevel,message,args,context){// Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\nvar severityLevel=AppInsightsNodeLogger._severityLevelMapping.get(logLevel);if(shouldSkipLogging(severityLevel,this.options.isDebug)){return;}// Append any extra arguments to the message\nvar fullMessage=message;args.forEach(function(arg){fullMessage=fullMessage.concat('\\n',safeStringify(arg));});// Send trace to AppInsights\nthis._client.trackTrace({message:fullMessage,severity:severityLevel,properties:getPropertiesFromContext(context)});}/**\r\n     * @internal\r\n     * Logs an error object to AppInsights as an exception\r\n     * @param error Error object to log\r\n     * @param context Additional properties to add to the log\r\n     */},{key:\"exception\",value:function exception(error,context){this._client.trackException({exception:error,properties:getPropertiesFromContext(context)});}/**\r\n     * @internal\r\n     * Logs a metric to AppInsights\r\n     * @param name Name of the metric to log\r\n     * @param value Value of the metric to log\r\n     * @param context Additional properties to add to the log\r\n     */},{key:\"trackMetric\",value:function trackMetric(name,value,context){this._client.trackMetric({name:name,value:value,properties:getPropertiesFromContext(context)});}/**\r\n     * Track a structured event with app insights\r\n     *\r\n     * @template TProperties interface for properties\r\n     * @template TMeasurements interface for measurements to go with the event\r\n     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options\r\n     */},{key:\"trackEvent\",value:function trackEvent(name,properties,measurements,context){this._client.trackEvent({name:name,time:new Date(),properties:properties,measurements:measurements});}/**\r\n     * Track a page view\r\n     *\r\n     * @param {string} name\r\n     * @param {string} [url]\r\n     */},{key:\"trackPageView\",value:function trackPageView(name,url){// noop -- non server-side rendered page views should be tracked\n}/**\r\n     * Track dependency\r\n     * @param options the dependency options\r\n     */},{key:\"trackDependency\",value:function trackDependency(options){if(options){var url=options.url;this._client.trackDependency({dependencyTypeName:options.dependencyName||'UnspecifiedDependency',duration:options.duration,name:\"\".concat(options.method,\" \").concat(options.name),resultCode:options.resultCode,success:options.success,data:url&&url.hostname||'',properties:options.properties,target:options.target||url&&url.hostname});}}}]);return AppInsightsNodeLogger;}();/**\r\n * Mapping between telemetry framework LogLevel and AppInsights Node Severity Levels\r\n */AppInsightsNodeLogger._severityLevelMapping=new Map([[LogLevel.Trace,SeverityLevel.Verbose],[LogLevel.Information,SeverityLevel.Information],[LogLevel.Warning,SeverityLevel.Warning],[LogLevel.Error,SeverityLevel.Error],[LogLevel.Critical,SeverityLevel.Critical]]);","map":{"version":3,"sources":["../../../src/loggers/app-insights-node-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { TelemetryClient } from 'applicationinsights';\nimport { SeverityLevel } from 'applicationinsights/out/Declarations/Contracts';\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { buildPropertiesList, getPropertiesFromContext, messageTemplateKey, shouldSkipLogging } from './app-insights-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * Node logger that sends messages to Application Insights\n */\nexport class AppInsightsNodeLogger implements ITraceLogger {\n    /**\n     * Mapping between telemetry framework LogLevel and AppInsights Node Severity Levels\n     */\n    private static _severityLevelMapping: Map<LogLevel, SeverityLevel> = new Map([\n        [LogLevel.Trace, SeverityLevel.Verbose],\n        [LogLevel.Information, SeverityLevel.Information],\n        [LogLevel.Warning, SeverityLevel.Warning],\n        [LogLevel.Error, SeverityLevel.Error],\n        [LogLevel.Critical, SeverityLevel.Critical]\n    ]);\n\n    /**\n     * Application Insights client\n     */\n    private _client: TelemetryClient;\n\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    /**\n     * Creates a new instance of AppInsights Logger\n     * @param instrumentationKey The instrumentation key for the Application Insights instance\n     */\n    public constructor(telemetryClient: TelemetryClient) {\n        this._client = telemetryClient;\n        // TODO: node logger should be a singleton Bug# 391909\n        // this._client.trackEvent({ name: 'Server version of Application Insights registered' });\n    }\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a trace message to AppInsights\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\n        const severityLevel = AppInsightsNodeLogger._severityLevelMapping.get(logLevel);\n\n        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {\n            return;\n        }\n\n        // Build properties list with telemetry context and message template arguments\n        const properties: IDictionary<string> = buildPropertiesList(context, placeholders, customTags);\n\n        if (exception === undefined) {\n            // Send log to AppInsights as trace event\n            this._client.trackTrace({\n                message: messageTemplate,\n                severity: severityLevel,\n                properties: properties\n            });\n        } else {\n            // Attach message template as custom property\n            properties[messageTemplateKey] = `[${logLevel}] ${messageTemplate}`;\n\n            // Send log to AppInsights as exception event\n            this._client.trackException({\n                exception: exception,\n                properties: properties\n            });\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a trace message to AppInsights\n     * @param logLevel Severity level of the log\n     * @param message String to log\n     * @param args Any additional objects to log\n     * @param context Additional properties to add to the log\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\n        const severityLevel = AppInsightsNodeLogger._severityLevelMapping.get(logLevel);\n\n        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {\n            return;\n        }\n\n        // Append any extra arguments to the message\n        let fullMessage = message;\n        args.forEach(arg => {\n            fullMessage = fullMessage.concat('\\n', safeStringify(arg));\n        });\n\n        // Send trace to AppInsights\n        this._client.trackTrace({\n            message: fullMessage,\n            severity: severityLevel,\n            properties: getPropertiesFromContext(context)\n        });\n    }\n\n    /**\n     * @internal\n     * Logs an error object to AppInsights as an exception\n     * @param error Error object to log\n     * @param context Additional properties to add to the log\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        this._client.trackException({ exception: error, properties: getPropertiesFromContext(context) });\n    }\n\n    /**\n     * @internal\n     * Logs a metric to AppInsights\n     * @param name Name of the metric to log\n     * @param value Value of the metric to log\n     * @param context Additional properties to add to the log\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        this._client.trackMetric({ name: name, value: value, properties: getPropertiesFromContext(context) });\n    }\n\n    /**\n     * Track a structured event with app insights\n     *\n     * @template TProperties interface for properties\n     * @template TMeasurements interface for measurements to go with the event\n     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options\n     */\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        this._client.trackEvent({\n            name: name,\n            time: new Date(),\n            properties: <IDictionary<string>>(<unknown>properties),\n            measurements: <IDictionary<number>>(<unknown>measurements)\n        });\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        // noop -- non server-side rendered page views should be tracked\n    }\n\n    /**\n     * Track dependency\n     * @param options the dependency options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        if (options) {\n            const url = options.url;\n            this._client.trackDependency({\n                dependencyTypeName: options.dependencyName || 'UnspecifiedDependency',\n                duration: options.duration,\n                name: `${options.method} ${options.name}`,\n                resultCode: options.resultCode,\n                success: options.success,\n                data: (url && url.hostname) || '',\n                properties: options.properties,\n                target: options.target || (url && url.hostname)\n            });\n        }\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}