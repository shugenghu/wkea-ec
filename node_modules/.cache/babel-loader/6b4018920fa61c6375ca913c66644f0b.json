{"ast":null,"code":"import \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport { getRichTextHtml } from '@msdyn365-commerce/core';\nimport { format, getPayloadObject, getTelemetryAttributes } from '@msdyn365-commerce-modules/utilities';\nlet payLoad;\n/**\n *\n * CategorySuggestionsComponent\n */\n\nexport const CategorySuggestionsComponent = props => {\n  const {\n    suggestions,\n    searchText,\n    autoSuggestProps: {\n      resources: {\n        categorySuggestionHeading\n      }\n    }\n  } = props;\n\n  if (!suggestions) {\n    return undefined;\n  }\n\n  const reactNodes = [];\n  payLoad = getPayloadObject('click', props.telemetryContent, '');\n  suggestions.map(item => {\n    reactNodes.push(_assembleNode(item, props));\n  });\n\n  const titleNode = _renderTitle(categorySuggestionHeading, searchText);\n\n  return {\n    title: titleNode,\n    text: reactNodes\n  };\n};\n\nconst _renderTitle = (categorySuggestionHeading, searchText) => {\n  const categoryAutoSuggestionHeading = categorySuggestionHeading ? format(categorySuggestionHeading, searchText) : \"Search \\\"\".concat(searchText, \"\\\" in categories\");\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: 'msc-autoSuggest__categoryResults-title'\n  }, categoryAutoSuggestionHeading);\n};\n\nconst _assembleNode = (item, props) => {\n  const {\n    searchText,\n    hitPrefix,\n    hitSuffix\n  } = props;\n  const splitValue = item.Value && item.Value.split('|').pop();\n  const ariaLabel = splitValue ? splitValue.replace(new RegExp(\"[\".concat(hitPrefix, \"]\"), 'gi'), '').replace(new RegExp(\"[\".concat(hitSuffix, \"]\"), 'gi'), '') : item.Value && item.Value.replace(new RegExp(\"[\".concat(hitPrefix, \"]\"), 'gi'), '').replace(new RegExp(\"[\".concat(hitSuffix, \"]\"), 'gi'), '');\n  payLoad.contentAction.etext = item.Value;\n  const attribute = getTelemetryAttributes(props.telemetryContent, payLoad);\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: 'msc-autoSuggest__categoryResults-item',\n    key: item.Id\n  }, /*#__PURE__*/React.createElement(\"a\", Object.assign({\n    \"aria-label\": ariaLabel,\n    href: _generateLink(item, searchText, props)\n  }, attribute), _generateLink(item, searchText, props) && _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix)));\n};\n\nconst _generateLink = (suggestion, searchText, props) => {\n  return suggestion && suggestion.Id ? _getCategoryLink(suggestion.Id, searchText, props) : '';\n};\n\nconst _getCategoryLink = (id, searchText, props) => {\n  const {\n    searchPageURL,\n    searchQsp,\n    searchRefiners\n  } = props;\n  const route = searchPageURL || '';\n  const urlPath = \"\".concat(route).concat(route.indexOf('?') === -1 ? '?' : '&').concat(searchQsp, \"=\").concat(searchText);\n  const categoryRefiners = searchRefiners && searchRefiners.find(refiners => {\n    return refiners.KeyName === 'Category';\n  });\n  const refiner = categoryRefiners && categoryRefiners.Values && categoryRefiners.Values.find(item => {\n    return item.RefinerRecordId === parseInt(id, 10);\n  });\n  const encodedRefiner = refiner && encodeURIComponent(JSON.stringify(compressRefiners([refiner])));\n  return encodedRefiner ? \"\".concat(urlPath, \"&refiners=\").concat(encodedRefiner) : urlPath;\n};\n\nconst _getHighlightedText = (suggestion, hitPrefix, hitSuffix) => {\n  let formattedText = suggestion.replace(new RegExp(\"[\".concat(hitPrefix, \"]\"), 'gi'), '<strong>').replace(new RegExp(\"[\".concat(hitSuffix, \"]\"), 'gi'), '</strong>');\n  formattedText = formattedText.split('|').pop() || ''; // tslint:disable:react-no-dangerous-html\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: getRichTextHtml(formattedText)\n  });\n}; // TODO: This code is currently duplicated in categoryautosuggest need to either remove one of these files\n// or move this code to a common place\n\n\nconst compressedRefinerKeys = ['DataTypeValue', 'LeftValueBoundString', 'RefinerRecordId', 'RefinerSourceValue', 'RightValueBoundString', 'UnitText'];\n/**\n * Compressed a list of refiners for use in URLs\n * @param refiners The uncompressed refiners\n */\n\nconst compressRefiners = refiners => {\n  const compressedRefiners = [];\n  refiners.forEach(refiner => {\n    const compressedRefiner = [];\n    compressedRefinerKeys.forEach(refinerKey => {\n      // @ts-ignore: This line is intentionally not typesafe\n      compressedRefiner.push(refiner[refinerKey]);\n    });\n    compressedRefiners.push(compressedRefiner);\n  });\n  return compressedRefiners;\n};","map":{"version":3,"sources":["/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/node_modules/source-map-loader/index.js!/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/src/modules/search/components/search.categorysuggest.tsx"],"names":[],"mappings":";;;;;;;AAAA;;;AAGgG;AAEhG,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,eAAT,QAAgC,yBAAhC;AAGA,SAAS,MAAT,EAAiB,gBAAjB,EAAmC,sBAAnC,QAA8F,sCAA9F;AAsBA,IAAI,OAAJ;AAEA;;;AAGG;;AACH,OAAO,MAAM,4BAA4B,GAAI,KAAD,IAA6E;AACrH,QAAM;AACF,IAAA,WADE;AAEF,IAAA,UAFE;AAGF,IAAA,gBAAgB,EAAE;AACd,MAAA,SAAS,EAAE;AAAE,QAAA;AAAF;AADG;AAHhB,MAMF,KANJ;;AAQA,MAAI,CAAC,WAAL,EAAkB;AACd,WAAO,SAAP;AACH;;AAED,QAAM,UAAU,GAAsB,EAAtC;AACA,EAAA,OAAO,GAAG,gBAAgB,CAAC,OAAD,EAAU,KAAK,CAAC,gBAAhB,EAAmC,EAAnC,CAA1B;AAEA,EAAA,WAAW,CAAC,GAAZ,CAAgB,IAAI,IAAG;AACnB,IAAA,UAAU,CAAC,IAAX,CAAgB,aAAa,CAAC,IAAD,EAAO,KAAP,CAA7B;AACH,GAFD;;AAIA,QAAM,SAAS,GAAG,YAAY,CAAC,yBAAD,EAA4B,UAA5B,CAA9B;;AAEA,SAAO;AAAE,IAAA,KAAK,EAAE,SAAT;AAAoB,IAAA,IAAI,EAAE;AAA1B,GAAP;AACH,CAvBM;;AAyBP,MAAM,YAAY,GAAG,CAAC,yBAAD,EAAoC,UAApC,KAA0D;AAC3E,QAAM,6BAA6B,GAAG,yBAAyB,GACzD,MAAM,CAAC,yBAAD,EAA4B,UAA5B,CADmD,sBAE9C,UAF8C,qBAA/D;AAIA,sBAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,IAAA,SAAS,EAAC;AAAd,GAAA,EAAwD,6BAAxD,CAAP;AACH,CAND;;AAQA,MAAM,aAAa,GAAG,CAAC,IAAD,EAAyB,KAAzB,KAA+D;AACjF,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA,SAAd;AAAyB,IAAA;AAAzB,MAAuC,KAA7C;AAEA,QAAM,UAAU,GAAG,IAAI,CAAC,KAAL,IAAc,IAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,GAAjB,EAAsB,GAAtB,EAAjC;AACA,QAAM,SAAS,GAAG,UAAU,GACtB,UAAU,CAAC,OAAX,CAAmB,IAAI,MAAJ,YAAe,SAAf,QAA6B,IAA7B,CAAnB,EAAuD,EAAvD,EAA2D,OAA3D,CAAmE,IAAI,MAAJ,YAAe,SAAf,QAA6B,IAA7B,CAAnE,EAAuG,EAAvG,CADsB,GAEtB,IAAI,CAAC,KAAL,IAAc,IAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,IAAI,MAAJ,YAAe,SAAf,QAA6B,IAA7B,CAAnB,EAAuD,EAAvD,EAA2D,OAA3D,CAAmE,IAAI,MAAJ,YAAe,SAAf,QAA6B,IAA7B,CAAnE,EAAuG,EAAvG,CAFpB;AAGA,EAAA,OAAO,CAAC,aAAR,CAAsB,KAAtB,GAA8B,IAAI,CAAC,KAAnC;AACA,QAAM,SAAS,GAAG,sBAAsB,CAAC,KAAK,CAAC,gBAAP,EAA0B,OAA1B,CAAxC;AACA,sBACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,IAAA,SAAS,EAAC,uCAAd;AAAsD,IAAA,GAAG,EAAE,IAAI,CAAC;AAAhE,GAAA,eACI,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAA,kBAAe,SAAf;AAA0B,IAAA,IAAI,EAAE,aAAa,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAnB;AAA7C,GAAA,EAA4E,SAA5E,CAAA,EACK,aAAa,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAnB,CAAb,IAA0C,mBAAmB,CAAC,IAAI,CAAC,KAAL,GAAa,IAAI,CAAC,KAAlB,GAA0B,EAA3B,EAA+B,SAA/B,EAA0C,SAA1C,CADlE,CADJ,CADJ;AAOH,CAhBD;;AAkBA,MAAM,aAAa,GAAG,CAAC,UAAD,EAA+B,UAA/B,EAAmD,KAAnD,KAAiG;AACnH,SAAO,UAAU,IAAI,UAAU,CAAC,EAAzB,GAA8B,gBAAgB,CAAC,UAAU,CAAC,EAAZ,EAAgB,UAAhB,EAA4B,KAA5B,CAA9C,GAAmF,EAA1F;AACH,CAFD;;AAIA,MAAM,gBAAgB,GAAG,CAAC,EAAD,EAAa,UAAb,EAAiC,KAAjC,KAA+E;AACpG,QAAM;AAAE,IAAA,aAAF;AAAiB,IAAA,SAAjB;AAA4B,IAAA;AAA5B,MAA+C,KAArD;AAEA,QAAM,KAAK,GAAG,aAAa,IAAI,EAA/B;AACA,QAAM,OAAO,aAAM,KAAN,SAAc,KAAK,CAAC,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAxB,GAA4B,GAA5B,GAAkC,GAAhD,SAAsD,SAAtD,cAAmE,UAAnE,CAAb;AACA,QAAM,gBAAgB,GAClB,cAAc,IACd,cAAc,CAAC,IAAf,CAAoB,QAAQ,IAAG;AAC3B,WAAO,QAAQ,CAAC,OAAT,KAAqB,UAA5B;AACH,GAFD,CAFJ;AAKA,QAAM,OAAO,GACT,gBAAgB,IAChB,gBAAgB,CAAC,MADjB,IAEA,gBAAgB,CAAC,MAAjB,CAAwB,IAAxB,CAA6B,IAAI,IAAG;AAChC,WAAO,IAAI,CAAC,eAAL,KAAyB,QAAQ,CAAC,EAAD,EAAK,EAAL,CAAxC;AACH,GAFD,CAHJ;AAOA,QAAM,cAAc,GAAG,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,SAAL,CAAe,gBAAgB,CAAC,CAAC,OAAD,CAAD,CAA/B,CAAD,CAApD;AAEA,SAAO,cAAc,aAAM,OAAN,uBAA0B,cAA1B,IAA6C,OAAlE;AACH,CApBD;;AAsBA,MAAM,mBAAmB,GAAG,CAAC,UAAD,EAAqB,SAArB,EAAwC,SAAxC,KAA0E;AAClG,MAAI,aAAa,GAAG,UAAU,CACzB,OADe,CACP,IAAI,MAAJ,YAAe,SAAf,QAA6B,IAA7B,CADO,EAC6B,UAD7B,EAEf,OAFe,CAEP,IAAI,MAAJ,YAAe,SAAf,QAA6B,IAA7B,CAFO,EAE6B,WAF7B,CAApB;AAGA,EAAA,aAAa,GAAG,aAAa,CAAC,KAAd,CAAoB,GAApB,EAAyB,GAAzB,MAAkC,EAAlD,CAJkG,CAMlG;;AACA,sBAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,uBAAuB,EAAE,eAAe,CAAC,aAAD;AAA9C,GAAA,CAAP;AACH,CARD,C,CAUA;AACA;;;AACA,MAAM,qBAAqB,GAAG,CAAC,eAAD,EAAkB,sBAAlB,EAA0C,iBAA1C,EAA6D,oBAA7D,EAAmF,uBAAnF,EAA4G,UAA5G,CAA9B;AAEA;;;AAGG;;AACH,MAAM,gBAAgB,GAAI,QAAD,IAAoC;AACzD,QAAM,kBAAkB,GAA0B,EAAlD;AAEA,EAAA,QAAQ,CAAC,OAAT,CAAkB,OAAD,IAAY;AACzB,UAAM,iBAAiB,GAAwB,EAA/C;AACA,IAAA,qBAAqB,CAAC,OAAtB,CAA+B,UAAD,IAAe;AACzC;AACA,MAAA,iBAAiB,CAAC,IAAlB,CAAuB,OAAO,CAAC,UAAD,CAA9B;AACH,KAHD;AAIA,IAAA,kBAAkB,CAAC,IAAnB,CAAwB,iBAAxB;AACH,GAPD;AASA,SAAO,kBAAP;AACH,CAbD","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { getRichTextHtml } from '@msdyn365-commerce/core';\nimport { ProductRefiner, ProductRefinerValue, SearchSuggestion } from '@msdyn365-commerce/retail-proxy';\n\nimport { format, getPayloadObject, getTelemetryAttributes, IPayLoad, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { ISearchData } from '../search.data';\nimport { ISearchProps } from '../search.props.autogenerated';\n\nexport interface ISearchCategorySuggestProps {\n    searchCategorySuggestClass: string;\n    searchPageURL: string;\n    searchQsp: string | undefined;\n    hitPrefix: string;\n    hitSuffix: string;\n    autoSuggestProps: ISearchProps<ISearchData>;\n    searchText: string;\n    searchRefiners: ProductRefiner[] | undefined;\n    suggestions: SearchSuggestion[] | undefined;\n    telemetryContent?: ITelemetryContent;\n}\n\nexport interface ISearchCategoryViewProps {\n    title: React.ReactNode;\n    text: React.ReactNode[];\n}\n\nlet payLoad: IPayLoad;\n\n/**\n *\n * CategorySuggestionsComponent\n */\nexport const CategorySuggestionsComponent = (props: ISearchCategorySuggestProps): ISearchCategoryViewProps | undefined => {\n    const {\n        suggestions,\n        searchText,\n        autoSuggestProps: {\n            resources: { categorySuggestionHeading }\n        }\n    } = props;\n\n    if (!suggestions) {\n        return undefined;\n    }\n\n    const reactNodes: React.ReactNode[] = [];\n    payLoad = getPayloadObject('click', props.telemetryContent!, '');\n\n    suggestions.map(item => {\n        reactNodes.push(_assembleNode(item, props));\n    });\n\n    const titleNode = _renderTitle(categorySuggestionHeading, searchText);\n\n    return { title: titleNode, text: reactNodes };\n};\n\nconst _renderTitle = (categorySuggestionHeading: string, searchText: string) => {\n    const categoryAutoSuggestionHeading = categorySuggestionHeading\n        ? format(categorySuggestionHeading, searchText)\n        : `Search \"${searchText}\" in categories`;\n\n    return <li className='msc-autoSuggest__categoryResults-title'>{categoryAutoSuggestionHeading}</li>;\n};\n\nconst _assembleNode = (item: SearchSuggestion, props: ISearchCategorySuggestProps) => {\n    const { searchText, hitPrefix, hitSuffix } = props;\n\n    const splitValue = item.Value && item.Value.split('|').pop();\n    const ariaLabel = splitValue\n        ? splitValue.replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '')\n        : item.Value && item.Value.replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');\n    payLoad.contentAction.etext = item.Value;\n    const attribute = getTelemetryAttributes(props.telemetryContent!, payLoad);\n    return (\n        <li className='msc-autoSuggest__categoryResults-item' key={item.Id}>\n            <a aria-label={ariaLabel} href={_generateLink(item, searchText, props)} {...attribute}>\n                {_generateLink(item, searchText, props) && _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix)}\n            </a>\n        </li>\n    );\n};\n\nconst _generateLink = (suggestion: SearchSuggestion, searchText: string, props: ISearchCategorySuggestProps): string => {\n    return suggestion && suggestion.Id ? _getCategoryLink(suggestion.Id, searchText, props) : '';\n};\n\nconst _getCategoryLink = (id: string, searchText: string, props: ISearchCategorySuggestProps): string => {\n    const { searchPageURL, searchQsp, searchRefiners } = props;\n\n    const route = searchPageURL || '';\n    const urlPath = `${route}${route.indexOf('?') === -1 ? '?' : '&'}${searchQsp}=${searchText}`;\n    const categoryRefiners =\n        searchRefiners &&\n        searchRefiners.find(refiners => {\n            return refiners.KeyName === 'Category';\n        });\n    const refiner =\n        categoryRefiners &&\n        categoryRefiners.Values &&\n        categoryRefiners.Values.find(item => {\n            return item.RefinerRecordId === parseInt(id, 10);\n        });\n\n    const encodedRefiner = refiner && encodeURIComponent(JSON.stringify(compressRefiners([refiner])));\n\n    return encodedRefiner ? `${urlPath}&refiners=${encodedRefiner}` : urlPath;\n};\n\nconst _getHighlightedText = (suggestion: string, hitPrefix: string, hitSuffix: string): JSX.Element => {\n    let formattedText = suggestion\n        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')\n        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');\n    formattedText = formattedText.split('|').pop() || '';\n\n    // tslint:disable:react-no-dangerous-html\n    return <span dangerouslySetInnerHTML={getRichTextHtml(formattedText)} />;\n};\n\n// TODO: This code is currently duplicated in categoryautosuggest need to either remove one of these files\n// or move this code to a common place\nconst compressedRefinerKeys = ['DataTypeValue', 'LeftValueBoundString', 'RefinerRecordId', 'RefinerSourceValue', 'RightValueBoundString', 'UnitText'];\n\n/**\n * Compressed a list of refiners for use in URLs\n * @param refiners The uncompressed refiners\n */\nconst compressRefiners = (refiners: ProductRefinerValue[]) => {\n    const compressedRefiners: (string | number)[][] = [];\n\n    refiners.forEach((refiner) => {\n        const compressedRefiner: (string | number)[] = [];\n        compressedRefinerKeys.forEach((refinerKey) => {\n            // @ts-ignore: This line is intentionally not typesafe\n            compressedRefiner.push(refiner[refinerKey]);\n        });\n        compressedRefiners.push(compressedRefiner);\n    });\n\n    return compressedRefiners;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}