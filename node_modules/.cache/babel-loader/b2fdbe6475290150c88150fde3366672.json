{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import getFullProducts,{FullProductInput,ProductDetailsCriteria}from'../get-full-products';/**\r\n * If refinement criteria is set, then gets refined products.\r\n * @param input refinable products input\r\n * @param ctx action context\r\n * @param getRefinedProducts callback function to get a promise (e.g. refineSearchByCategoryAsync, refineSearchByTextAsync)\r\n * that is executed to get refined products or full set of products.\r\n */export function getRefinedFullProducts(_x,_x2,_x3){return _getRefinedFullProducts.apply(this,arguments);}function _getRefinedFullProducts(){_getRefinedFullProducts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx,getRefinedProducts){var apiSettings,fullProductInputs,searchResults,productResult;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!input||!input.refinementCriteria)){_context.next=3;break;}ctx.trace('[getFullProductsByRefineSearchCategoryAction] Invalid input.');return _context.abrupt(\"return\",{});case 3:if(input.refinementCriteria.length){_context.next=6;break;}ctx.trace('[getFullProductsByRefineSearchCategoryAction] No refiners specified.');return _context.abrupt(\"return\",{});case 6:apiSettings=ctx.requestContext.apiSettings;fullProductInputs=[];_context.next=10;return getRefinedProducts();case 10:searchResults=_context.sent;if(!searchResults){ctx.telemetry.error('[getFullProductsByRefineSearchCategoryAction] no searchResults returned');}else{fullProductInputs=searchResults.map(function(product){return new FullProductInput(product.RecordId,apiSettings,input.productDetailsCriteria||new ProductDetailsCriteria());});}if(!fullProductInputs.length){_context.next=19;break;}_context.next=15;return getFullProducts(fullProductInputs,ctx);case 15:productResult=_context.sent;return _context.abrupt(\"return\",{productSearchResult:productResult,refinementCriteria:input.refinementCriteria});case 19:return _context.abrupt(\"return\",{productSearchResult:[],refinementCriteria:input.refinementCriteria});case 20:case\"end\":return _context.stop();}}},_callee);}));return _getRefinedFullProducts.apply(this,arguments);}","map":{"version":3,"sources":["../../../src/utilities/refiner-utils.ts"],"names":[],"mappings":"uIAGA,MAAO,CAAA,eAAP,EAA0B,gBAA1B,CAA4C,sBAA5C,KAA0E,sBAA1E,CAUA;;;;;;AAMG,GACH,eAAsB,CAAA,sBAAtB,mE,mHAAO,iBACH,KADG,CAEH,GAFG,CAGH,kBAHG,qLAMC,CAAC,KAAD,EAAU,CAAC,KAAK,CAAC,kBANlB,0BAOC,GAAG,CAAC,KAAJ,CAAU,8DAAV,EAPD,gCAQwC,EARxC,YAWE,KAAK,CAAC,kBAAN,CAAyB,MAX3B,yBAYC,GAAG,CAAC,KAAJ,CAAU,sEAAV,EAZD,gCAawC,EAbxC,SAeK,WAfL,CAeqB,GAAG,CAAC,cAfzB,CAeK,WAfL,CAiBC,iBAjBD,CAiByC,EAjBzC,wBAmByB,CAAA,kBAAkB,EAnB3C,SAmBG,aAnBH,eAoBH,GAAI,CAAC,aAAL,CAAoB,CAChB,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,yEAApB,EACH,CAFD,IAEO,CACH,iBAAiB,CAAG,aAAa,CAAC,GAAd,CAChB,SAAC,OAAD,CAAmD,CAC/C,MAAO,IAAI,CAAA,gBAAJ,CAAqB,OAAO,CAAC,QAA7B,CAAuC,WAAvC,CAAoD,KAAK,CAAC,sBAAN,EAAgC,GAAI,CAAA,sBAAJ,EAApF,CAAP,CACH,CAHe,CAApB,CAKH,CA5BE,IA8BC,iBAAiB,CAAC,MA9BnB,iDA+B6B,CAAA,eAAe,CAAC,iBAAD,CAAoB,GAApB,CA/B5C,SA+BO,aA/BP,+CAgCQ,CACH,mBAAmB,CAAE,aADlB,CAEH,kBAAkB,CAAE,KAAK,CAAC,kBAFvB,CAhCR,0CAqCQ,CACH,mBAAmB,CAAE,EADlB,CAEH,kBAAkB,CAAE,KAAK,CAAC,kBAFvB,CArCR,yD","sourcesContent":["import { IRefineFullProductSearchOutput } from '@msdyn365-commerce/commerce-entities';\nimport { IActionContext } from '@msdyn365-commerce/core';\nimport { ProductRefinerValue, ProductSearchResult } from '@msdyn365-commerce/retail-proxy';\nimport getFullProducts, { FullProductInput, ProductDetailsCriteria } from '../get-full-products';\n\n/**\n * Common refinable products input includes both product detail criteria and refinement criteria.\n */\nexport interface IRefinableProductsInput {\n    refinementCriteria: ProductRefinerValue[];\n    productDetailsCriteria?: ProductDetailsCriteria;\n}\n\n/**\n * If refinement criteria is set, then gets refined products.\n * @param input refinable products input\n * @param ctx action context\n * @param getRefinedProducts callback function to get a promise (e.g. refineSearchByCategoryAsync, refineSearchByTextAsync)\n * that is executed to get refined products or full set of products.\n */\nexport async function getRefinedFullProducts(\n    input: IRefinableProductsInput,\n    ctx: IActionContext,\n    getRefinedProducts: () => Promise<ProductSearchResult[]>\n): Promise<IRefineFullProductSearchOutput> {\n\n    if (!input || !input.refinementCriteria) {\n        ctx.trace('[getFullProductsByRefineSearchCategoryAction] Invalid input.');\n        return <IRefineFullProductSearchOutput>{};\n    }\n\n    if (!input.refinementCriteria.length) {\n        ctx.trace('[getFullProductsByRefineSearchCategoryAction] No refiners specified.');\n        return <IRefineFullProductSearchOutput>{};\n    }\n    const { apiSettings } = ctx.requestContext;\n\n    let fullProductInputs: FullProductInput[] = [];\n\n    const searchResults = await getRefinedProducts();\n    if (!searchResults) {\n        ctx.telemetry.error('[getFullProductsByRefineSearchCategoryAction] no searchResults returned');\n    } else {\n        fullProductInputs = searchResults.map(\n            (product: ProductSearchResult): FullProductInput => {\n                return new FullProductInput(product.RecordId, apiSettings, input.productDetailsCriteria || new ProductDetailsCriteria());\n            }\n        );\n    }\n\n    if (fullProductInputs.length) {\n        const productResult = await getFullProducts(fullProductInputs, ctx);\n        return {\n            productSearchResult: productResult,\n            refinementCriteria: input.refinementCriteria\n        };\n    } else {\n        return {\n            productSearchResult: [],\n            refinementCriteria: input.refinementCriteria\n        };\n    }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}