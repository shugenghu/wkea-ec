{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getOrgUnitLocationsByAreaAsync,getStoreHoursAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';import{getEstimatedAvailabilityAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{mapProductInventoryInformation}from'./utilities/product-inventory-utils';/**\r\n * Get selected variant action input class\r\n */export var GetFullAvailableInventoryNearbyInput=function GetFullAvailableInventoryNearbyInput(_productId,_latitude,_longitude,_radius,_DistanceUnitValue,_IgnoreLocation){_classCallCheck(this,GetFullAvailableInventoryNearbyInput);this.getCacheKey=function(){return\"GetFullAvailableInventoryNearbyInputCache\";};this.getCacheObjectType=function(){return'GetFullAvailableInventoryNearbyInput';};this.dataCacheType=function(){return'none';};this.productId=_productId;this.latitude=_latitude;this.longitude=_longitude;this.radius=_radius;this.DistanceUnitValue=_DistanceUnitValue;this.IgnoreLocation=_IgnoreLocation;};/**\r\n * CreateInput method for the getSelectedVariant data action\r\n * @param inputData The input data passed to the createInput method\r\n */export var createGetFullAvailableInventoryNearbyInput=function createGetFullAvailableInventoryNearbyInput(inputData){return new GetFullAvailableInventoryNearbyInput();};/**\r\n * Action method for the getSelectedVariant data aciton\r\n * @param input The action input class\r\n * @param ctx The action context\r\n */export function getFullAvailableInventoryNearbyAction(_x,_x2){return _getFullAvailableInventoryNearbyAction.apply(this,arguments);}/**\r\n * Action method that obtains the store information along with store hours and product availability\r\n * @param orgUnitLocation The org unit location\r\n * @param productWarehouseInventoryInformation The product ware house information\r\n * @param storeMap a map that contains store information group by the inventory location id\r\n * @param ctx The action context\r\n */function _getFullAvailableInventoryNearbyAction(){_getFullAvailableInventoryNearbyAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(input,ctx){var searchArea;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(input.productId){_context3.next=2;break;}return _context3.abrupt(\"return\",undefined);case 2:if(!((!input.radius&&input.radius!==0||!input.latitude||!input.longitude)&&!input.IgnoreLocation)){_context3.next=4;break;}return _context3.abrupt(\"return\",[]);case 4:searchArea={Latitude:input.latitude,Longitude:input.longitude,Radius:input.radius,DistanceUnitValue:input.DistanceUnitValue||0// 0 is miles\n};return _context3.abrupt(\"return\",getEstimatedAvailabilityAsync({callerContext:ctx},{ProductIds:[input.productId],SearchArea:searchArea,DefaultWarehouseOnly:false,FilterByChannelFulfillmentGroup:true}).then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(productWarehouseInformation){var productInventoryInformation;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:productInventoryInformation=mapProductInventoryInformation(ctx,productWarehouseInformation===null||productWarehouseInformation===void 0?void 0:productWarehouseInformation.ProductWarehouseInventoryAvailabilities);return _context2.abrupt(\"return\",getOrgUnitLocationsByAreaAsync({callerContext:ctx},searchArea).then(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(stores){var storeMap,availabilityPromiseList;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Constructing a store mapping based on the InventoryId.\nstoreMap=new Map();stores.forEach(function(store){if(store.InventoryLocationId){storeMap.set(store.InventoryLocationId,store);}});availabilityPromiseList=stores.map(function(store){return _getAvailabilityWithHours(store,productInventoryInformation,storeMap,ctx);});return _context.abrupt(\"return\",Promise.all(availabilityPromiseList));case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x8){return _ref2.apply(this,arguments);};}())[\"catch\"](function(error){ctx.trace('[GetFullAvailableInventoryNearby] error getting Available Inventory Nearby');ctx.trace(error.message);ctx.telemetry.error(error.message);ctx.telemetry.debug(\"[GetFullAvailableInventoryNearby] error getting Available Inventory Nearby\");return[];}));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x7){return _ref.apply(this,arguments);};}())[\"catch\"](function(error){ctx.trace('[GetFullAvailableInventoryNearby][getEstimatedAvailabilityAsync] error getting availability product warehouse information.');ctx.trace(error.message);ctx.telemetry.error(error.message);ctx.telemetry.debug(\"[GetFullAvailableInventoryNearby][getEstimatedAvailabilityAsync] error getting availability product warehouse information.\");return[];}));case 6:case\"end\":return _context3.stop();}}},_callee3);}));return _getFullAvailableInventoryNearbyAction.apply(this,arguments);}function _getAvailabilityWithHours(_x3,_x4,_x5,_x6){return _getAvailabilityWithHours2.apply(this,arguments);}/**\r\n * The complete getFullAvailableInventoryNearby data action\r\n */function _getAvailabilityWithHours2(){_getAvailabilityWithHours2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(orgUnitLocation,productInventoryInformation,storeMap,ctx){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(!orgUnitLocation||!orgUnitLocation.OrgUnitNumber)){_context4.next=2;break;}return _context4.abrupt(\"return\",{OrgUnitAvailability:undefined});case 2:return _context4.abrupt(\"return\",getStoreHoursAsync({callerContext:ctx},orgUnitLocation.OrgUnitNumber).then(function(hours){var itemAvailabilities=[];if(productInventoryInformation&&storeMap){productInventoryInformation.forEach(function(element){if(element.InventLocationId&&storeMap.has(element.InventLocationId)&&element.InventLocationId===orgUnitLocation.InventoryLocationId){var _element$ProductAvail;itemAvailabilities.push({AvailableQuantity:(_element$ProductAvail=element.ProductAvailableQuantity)===null||_element$ProductAvail===void 0?void 0:_element$ProductAvail.AvailableQuantity});}});}var availability={OrgUnitLocation:orgUnitLocation,ItemAvailabilities:itemAvailabilities};if(hours&&!(hours instanceof Error)){return{OrgUnitAvailability:availability,StoreHours:hours,ProductInventoryInformation:productInventoryInformation};}return{OrgUnitAvailability:availability,ProductInventoryInformation:productInventoryInformation};})[\"catch\"](function(error){ctx.trace('[GetFullAvailableInventoryNearby] error getting availability with hours');ctx.trace(error.message);ctx.telemetry.exception(error);ctx.telemetry.debug(\"[GetFullAvailableInventoryNearby] error getting availability with hours\");return{OrgUnitAvailability:{}};}));case 3:case\"end\":return _context4.stop();}}},_callee4);}));return _getAvailabilityWithHours2.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-full-available-inventory-nearby',action:getFullAvailableInventoryNearbyAction,input:createGetFullAvailableInventoryNearbyInput});","map":{"version":3,"sources":["../../src/get-full-available-inventory-nearby.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { ItemAvailability, OrgUnitAvailability, OrgUnitLocation, ProductWarehouseInventoryInformation, SearchArea, StoreHours } from '@msdyn365-commerce/retail-proxy';\nimport { getOrgUnitLocationsByAreaAsync, getStoreHoursAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { getEstimatedAvailabilityAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { IFullOrgUnitAvailability } from './utilities/full-org-unit-availability';\nimport { IProductInventoryInformation } from './utilities/product-inventory-information';\nimport { mapProductInventoryInformation } from './utilities/product-inventory-utils';\n\n/**\n * Get selected variant action input class\n */\nexport class GetFullAvailableInventoryNearbyInput implements IActionInput {\n   public latitude?: number;\n   public longitude?: number;\n   public radius?: number;\n   public productId?: number;\n   public DistanceUnitValue?: number;\n   public IgnoreLocation?: boolean;\n\n   constructor(_productId?: number, _latitude?: number, _longitude?: number, _radius?: number, _DistanceUnitValue?: number, _IgnoreLocation?: boolean) {\n       this.productId = _productId;\n       this.latitude = _latitude;\n       this.longitude = _longitude;\n       this.radius = _radius;\n       this.DistanceUnitValue = _DistanceUnitValue;\n       this.IgnoreLocation = _IgnoreLocation;\n   }\n\n   public getCacheKey = () => `GetFullAvailableInventoryNearbyInputCache`;\n   public getCacheObjectType = () => 'GetFullAvailableInventoryNearbyInput';\n   public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * CreateInput method for the getSelectedVariant data action\n * @param inputData The input data passed to the createInput method\n */\nexport const createGetFullAvailableInventoryNearbyInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetFullAvailableInventoryNearbyInput => {\n    return new GetFullAvailableInventoryNearbyInput();\n};\n\n/**\n * Action method for the getSelectedVariant data aciton\n * @param input The action input class\n * @param ctx The action context\n */\nexport async function getFullAvailableInventoryNearbyAction(\n    input: GetFullAvailableInventoryNearbyInput,\n    ctx: IActionContext\n): Promise<IFullOrgUnitAvailability[] | undefined> {\n    // No valid product we want to return undefined so module knows there are no results yet\n    if (!input.productId) {\n        return undefined;\n    }\n\n    if (((!input.radius && input.radius !== 0) || !input.latitude || !input.longitude) && !input.IgnoreLocation) {\n        // No valid location we want to return empty array so module can show no locations message\n        return [];\n    }\n\n    const searchArea: SearchArea = {\n        Latitude: input.latitude,\n        Longitude: input.longitude,\n        Radius: input.radius,\n        DistanceUnitValue: input.DistanceUnitValue || 0 // 0 is miles\n    };\n\n    return getEstimatedAvailabilityAsync({callerContext: ctx}, {ProductIds: [input.productId], SearchArea: searchArea, DefaultWarehouseOnly:false, FilterByChannelFulfillmentGroup: true})\n    .then(async (productWarehouseInformation: ProductWarehouseInventoryInformation) => {\n        const productInventoryInformation = mapProductInventoryInformation(ctx, productWarehouseInformation?.ProductWarehouseInventoryAvailabilities);\n        return getOrgUnitLocationsByAreaAsync({callerContext: ctx}, searchArea)\n        .then(async (stores: OrgUnitLocation[]) => {\n            // Constructing a store mapping based on the InventoryId.\n            const storeMap = new Map<string, OrgUnitLocation>();\n            stores.forEach(store => {\n                if(store.InventoryLocationId) {\n                    storeMap.set(store.InventoryLocationId, store);\n                }\n            });\n            const availabilityPromiseList = stores.map(store => _getAvailabilityWithHours(store, productInventoryInformation, storeMap,ctx));\n            return Promise.all(availabilityPromiseList);\n        })\n        .catch((error: Error) => {\n            ctx.trace('[GetFullAvailableInventoryNearby] error getting Available Inventory Nearby');\n            ctx.trace(error.message);\n            ctx.telemetry.error(error.message);\n            ctx.telemetry.debug(`[GetFullAvailableInventoryNearby] error getting Available Inventory Nearby`);\n            return [];\n        });\n    })\n    .catch((error: Error) => {\n        ctx.trace('[GetFullAvailableInventoryNearby][getEstimatedAvailabilityAsync] error getting availability product warehouse information.');\n        ctx.trace(error.message);\n        ctx.telemetry.error(error.message);\n        ctx.telemetry.debug(`[GetFullAvailableInventoryNearby][getEstimatedAvailabilityAsync] error getting availability product warehouse information.`);\n        return [];\n    });\n}\n\n/**\n * Action method that obtains the store information along with store hours and product availability\n * @param orgUnitLocation The org unit location\n * @param productWarehouseInventoryInformation The product ware house information\n * @param storeMap a map that contains store information group by the inventory location id\n * @param ctx The action context\n */\nasync function _getAvailabilityWithHours(\n    orgUnitLocation: OrgUnitLocation,\n    productInventoryInformation: IProductInventoryInformation[],\n    storeMap: Map<string, OrgUnitLocation>,\n    ctx: IActionContext): Promise<IFullOrgUnitAvailability> {\n        if (!orgUnitLocation || !orgUnitLocation.OrgUnitNumber) {\n            return { OrgUnitAvailability: undefined };\n        }\n\n        return getStoreHoursAsync({ callerContext: ctx}, orgUnitLocation.OrgUnitNumber)\n            .then((hours: StoreHours) => {\n                const itemAvailabilities: ItemAvailability[] = [];\n                if(productInventoryInformation\n                && storeMap) {\n                        productInventoryInformation.forEach(element => {\n                            if(element.InventLocationId && storeMap.has(element.InventLocationId) && element.InventLocationId === orgUnitLocation.InventoryLocationId) {\n                                itemAvailabilities.push({AvailableQuantity:element.ProductAvailableQuantity?.AvailableQuantity});\n                            }\n                    });\n                }\n\n                const availability: OrgUnitAvailability = {\n                    OrgUnitLocation: orgUnitLocation,\n                    ItemAvailabilities: itemAvailabilities\n                };\n\n                if (hours && !(hours instanceof Error)) {\n                    return { OrgUnitAvailability: availability, StoreHours: hours, ProductInventoryInformation: productInventoryInformation };\n                }\n\n                return { OrgUnitAvailability: availability, ProductInventoryInformation: productInventoryInformation };\n            })\n            .catch((error: Error) => {\n                ctx.trace('[GetFullAvailableInventoryNearby] error getting availability with hours');\n                ctx.trace(error.message);\n                ctx.telemetry.exception(error);\n                ctx.telemetry.debug(`[GetFullAvailableInventoryNearby] error getting availability with hours`);\n                return { OrgUnitAvailability: {} };\n            });\n}\n\n/**\n * The complete getFullAvailableInventoryNearby data action\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-full-available-inventory-nearby',\n    action: <IAction<IFullOrgUnitAvailability[] | undefined>>getFullAvailableInventoryNearbyAction,\n    input: createGetFullAvailableInventoryNearbyInput\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}