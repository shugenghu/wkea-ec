{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{convertToString}from'@msdyn365-commerce/retail-proxy';import{getProductListLinesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';import{FullProductInput,getFullProducts,getProductDetailsCriteriaFromActionInput,QueryResultSettingsProxy}from'..';import{OrderTemplateLine}from'../utilities/order-templates';/**\r\n *  Input class for the GetOrderTemplates data action\r\n */export class GetPaginatedOrderTemplateLinesInput{constructor(orderTemplateId,queryResultSettings,searchText){this.getCacheKey=()=>\"GetPaginatedOrderTemplateLines|\".concat(this.orderTemplateId,\"|\").concat(convertToString(this.queryResultSettings),\"|\").concat(this.searchText);this.getCacheObjectType=()=>'GetPaginatedOrderTemplateLines';this.dataCacheType=()=>'none';this.orderTemplateId=orderTemplateId;this.queryResultSettings=queryResultSettings;this.searchText=searchText||'';}}/**\r\n * createInput method for the GetOrderTemplate method\r\n * @param inputData The input data passed to the createInput method.\r\n */export const createGetPaginatedOrderTemplateLinesInput=(inputData,orderTemplateId,searchText)=>{const queryResultSettings=QueryResultSettingsProxy.fromInputData(inputData).QueryResultSettings;queryResultSettings.count=true;return new GetPaginatedOrderTemplateLinesInput(orderTemplateId,queryResultSettings,searchText);};/**\r\n * The action method for the GetPaginatedOrderTemplateLines data action\r\n * @param input The action input\r\n * @param context The action context\r\n */export async function getPaginatedOrderTemplateLinesAction(input,context){if(!context.requestContext.user.isAuthenticated){throw new Error('Unable to get full order templates. User is not authenticated.');}const orderTemplateLinesState={lines:[],totalCount:0};const promise=getProductListLinesAsync({callerContext:context,queryResultSettings:input.queryResultSettings},input.orderTemplateId,input.searchText);// tslint:disable-line:align\nconst productListLines=await promise;const productInputs=[];if(productListLines&&productListLines.length>0){orderTemplateLinesState.totalCount=promise.metadata.count||orderTemplateLinesState.lines.length;productListLines.forEach(listLine=>{if(listLine.ProductId){orderTemplateLinesState.lines.push(new OrderTemplateLine(listLine));productInputs.push(new FullProductInput(listLine.ProductId,context.requestContext.apiSettings,getProductDetailsCriteriaFromActionInput(context)));}});if(productInputs.length>0){const fullProductsInfo=await getFullProducts(productInputs,context).then(products=>{if(products){return products;}else{return[];}}).catch(error=>{context.trace(error);context.telemetry.error(error.message);throw new Error('[getPaginatedOrderTemplateLinesAction]Unable to retrieve product info');});orderTemplateLinesState.lines.forEach(line=>{const fullProduct=fullProductsInfo.find(product=>product.ProductDetails.RecordId===line.productListLine.ProductId);if(!fullProduct){throw new Error('Unable to find product info for an order template line');}line.fullProduct=fullProduct;});return orderTemplateLinesState;}context.trace(orderTemplateLinesState.lines.length.toString());return orderTemplateLinesState;}return orderTemplateLinesState;}/**\r\n * The GetPaginatedOrderTemplateLines Data Action\r\n * Returns order templates\r\n */export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/order-templates/get-paginated-order-template-lines',action:getPaginatedOrderTemplateLinesAction,input:createGetPaginatedOrderTemplateLinesInput});","map":{"version":3,"sources":["../../../src/order-templates/get-paginated-order-template-lines.ts"],"names":[],"mappings":"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","sourcesContent":["import { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    ICreateActionContext } from '@msdyn365-commerce/core';\nimport { convertToString, IQueryResultSettings } from '@msdyn365-commerce/retail-proxy';\nimport { getProductListLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';\nimport { FullProductInput, getFullProducts, getProductDetailsCriteriaFromActionInput, QueryResultSettingsProxy } from '..';\nimport { IOrderTemplateLinesState, OrderTemplateLine } from '../utilities/order-templates';\n/**\n *  Input class for the GetOrderTemplates data action\n */\nexport class GetPaginatedOrderTemplateLinesInput implements IActionInput {\n    public orderTemplateId: string;\n    public queryResultSettings: IQueryResultSettings;\n    public searchText: string;\n\n    constructor(orderTemplateId: string, queryResultSettings: IQueryResultSettings, searchText?: string) {\n        this.orderTemplateId = orderTemplateId;\n        this.queryResultSettings = queryResultSettings;\n        this.searchText = searchText || '';\n    }\n\n    public getCacheKey = () => `GetPaginatedOrderTemplateLines|${this.orderTemplateId}|${convertToString(this.queryResultSettings)}|${this.searchText}`;\n    public getCacheObjectType = () => 'GetPaginatedOrderTemplateLines';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * createInput method for the GetOrderTemplate method\n * @param inputData The input data passed to the createInput method.\n */\nexport const createGetPaginatedOrderTemplateLinesInput = (\n    inputData: ICreateActionContext, orderTemplateId: string, searchText?: string): GetPaginatedOrderTemplateLinesInput => {\n\n    const queryResultSettings: IQueryResultSettings = QueryResultSettingsProxy.fromInputData(inputData).QueryResultSettings;\n    queryResultSettings.count = true;\n    return new GetPaginatedOrderTemplateLinesInput(orderTemplateId, queryResultSettings, searchText);\n};\n\n/**\n * The action method for the GetPaginatedOrderTemplateLines data action\n * @param input The action input\n * @param context The action context\n */\nexport async function getPaginatedOrderTemplateLinesAction(input: GetPaginatedOrderTemplateLinesInput, context: IActionContext): Promise<IOrderTemplateLinesState> {\n    if (!context.requestContext.user.isAuthenticated) {\n        throw new Error('Unable to get full order templates. User is not authenticated.');\n    }\n\n    const orderTemplateLinesState: IOrderTemplateLinesState = {\n        lines: [],\n        totalCount: 0\n    };\n    const promise = getProductListLinesAsync({\n        callerContext: context, queryResultSettings: input.queryResultSettings\n    }, input.orderTemplateId, input.searchText); // tslint:disable-line:align\n    const productListLines = await promise;\n    const productInputs: FullProductInput[] = [];\n    if (productListLines && productListLines.length > 0) {\n        orderTemplateLinesState.totalCount = promise.metadata.count || orderTemplateLinesState.lines.length;\n        productListLines.forEach((listLine) => {\n            if (listLine.ProductId) {\n                orderTemplateLinesState.lines.push(new OrderTemplateLine(listLine));\n                productInputs.push(new FullProductInput(listLine.ProductId, context.requestContext.apiSettings, getProductDetailsCriteriaFromActionInput(context)));\n            }\n        });\n        if (productInputs.length > 0) {\n            const fullProductsInfo = await getFullProducts(productInputs, context)\n                .then((products: FullProduct[]) => {\n                    if (products) {\n                        return products;\n                    } else {\n                        return <FullProduct[]>[];\n                    }\n                })\n                .catch(error => {\n                    context.trace(error);\n                    context.telemetry.error(error.message);\n                    throw new Error('[getPaginatedOrderTemplateLinesAction]Unable to retrieve product info');\n                });\n            orderTemplateLinesState.lines.forEach(line => {\n                const fullProduct = fullProductsInfo.find(product => product.ProductDetails.RecordId === line.productListLine.ProductId);\n                if (!fullProduct) {\n                    throw new Error('Unable to find product info for an order template line');\n                }\n                line.fullProduct = fullProduct;\n            });\n            return orderTemplateLinesState;\n        }\n        context.trace(orderTemplateLinesState.lines.length.toString());\n        return orderTemplateLinesState;\n    }\n    return orderTemplateLinesState;\n}\n\n/**\n * The GetPaginatedOrderTemplateLines Data Action\n * Returns order templates\n */\nexport default createObservableDataAction<IOrderTemplateLinesState>({\n    id: '@msdyn365-commerce-modules/retail-actions/order-templates/get-paginated-order-template-lines',\n    action: <IAction<IOrderTemplateLinesState>>getPaginatedOrderTemplateLinesAction,\n    input: createGetPaginatedOrderTemplateLinesInput\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}