{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import dragAndDropEvents from'./drag-and-drop-events';import dragAndDropPlaceholder from'./drag-and-drop-placehoder';/**\r\n * Helper function used to sync the placeholder between rendering and tools in drag/drop scenarios\r\n * @param parentId The module id where the module/container should to be dropped\r\n * @param index The index position for the module drop.\r\n * @param slotId The slot id where the module/container should to be dropped.\r\n * @param moduleId The module id of the element being dropped.\r\n */export function onDrag(parentId,index,slotId,moduleId){dragAndDropPlaceholder.movePlaceholder(parentId,index,slotId,moduleId);}/**\r\n * Helper function used to remove the placeholder between rendering and tools in drag/drop scenarios\r\n */export function removePlaceholder(){dragAndDropPlaceholder.clear();}/**\r\n * Helper function used to set modules as draggable in drag/drop scenarios.\r\n * @param moduleId The module to be set as draggable.\r\n */export function setDraggable(moduleId){dragAndDropEvents.setModuleAsDraggable(moduleId);}","map":{"version":3,"sources":["../../../../src/utilities/drag-and-drop/drag-and-drop-authoring.ts"],"names":[],"mappings":"AAAA;;;AAGG,GAEH,MAAO,CAAA,iBAAP,KAA8B,wBAA9B,CACA,MAAO,CAAA,sBAAP,KAAmC,4BAAnC,CAEA;;;;;;AAMG,GACH,MAAM,SAAU,CAAA,MAAV,CAAiB,QAAjB,CAAmC,KAAnC,CAAkD,MAAlD,CAAkE,QAAlE,CAAmF,CACrF,sBAAsB,CAAC,eAAvB,CAAuC,QAAvC,CAAiD,KAAjD,CAAwD,MAAxD,CAAgE,QAAhE,EACH,CAED;;AAEG,GACH,MAAM,SAAU,CAAA,iBAAV,EAA2B,CAC7B,sBAAsB,CAAC,KAAvB,GACH,CAED;;;AAGG,GACH,MAAM,SAAU,CAAA,YAAV,CAAuB,QAAvB,CAAuC,CACzC,iBAAiB,CAAC,oBAAlB,CAAuC,QAAvC,EACH","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport dragAndDropEvents from './drag-and-drop-events';\nimport dragAndDropPlaceholder from './drag-and-drop-placehoder';\n\n/**\n * Helper function used to sync the placeholder between rendering and tools in drag/drop scenarios\n * @param parentId The module id where the module/container should to be dropped\n * @param index The index position for the module drop.\n * @param slotId The slot id where the module/container should to be dropped.\n * @param moduleId The module id of the element being dropped.\n */\nexport function onDrag(parentId: string, index: number, slotId: string, moduleId?: string): void {\n    dragAndDropPlaceholder.movePlaceholder(parentId, index, slotId, moduleId);\n}\n\n/**\n * Helper function used to remove the placeholder between rendering and tools in drag/drop scenarios\n */\nexport function removePlaceholder(): void {\n    dragAndDropPlaceholder.clear();\n}\n\n/**\n * Helper function used to set modules as draggable in drag/drop scenarios.\n * @param moduleId The module to be set as draggable.\n */\nexport function setDraggable(moduleId: string): void {\n    dragAndDropEvents.setModuleAsDraggable(moduleId);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}