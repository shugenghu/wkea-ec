{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=o[Symbol.iterator]();},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{LogLevel}from'../interfaces';/**\r\n * Page Logger\r\n * Captures server side logs and surfaces them to the client\r\n */var PageLogger=/*#__PURE__*/function(){function PageLogger(){_classCallCheck(this,PageLogger);this.logs=[];this.options={};}_createClass(PageLogger,[{key:\"initialize\",value:function initialize(options){this.options=options;}/**\r\n     * @internal\r\n     * Logs a message to the console, prefixed with custom tags, and with arguments following\r\n     * @param logLevel LogLevel of the message\r\n     * @param context Telemetry context to add to log\r\n     * @param messageTemplate Structured log formatted string\r\n     * @param placeholders List of placeholders in messageTemplate along with position in string\r\n     * @param values Arguments to replace placeholders\r\n     * @param customTags Array of strings to attach to log\r\n     */},{key:\"sendLog\",value:function sendLog(logLevel,context,messageTemplate,// tslint:disable-next-line:no-any\nplaceholders,customTags,exception){// Output tags and message template\nvar tagsString='';if(customTags!==undefined){customTags.forEach(function(tag){tagsString+=\"[\".concat(tag,\"]\");});}tagsString&&this._print(logLevel,tagsString);var message=messageTemplate;// Output arguments\nvar _iterator=_createForOfIteratorHelper(placeholders.entries()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],value=_step$value[1];var messageValue=void 0;// If Dynamics privacy object only print data value, else print object\nif(value.__isDynamicsPrivacy){messageValue=value.data;}else{messageValue=value;}if(messageValue.toString()==='[object Object]'){messageValue=JSON.stringify(messageValue,null,2);}message=message.replace(new RegExp(\"{\".concat(key,\"}\"),'g'),messageValue);}}catch(err){_iterator.e(err);}finally{_iterator.f();}this._print(logLevel,message);// Print exception if present\nif(exception!==undefined&&exception.stack){this._print(LogLevel.Error,exception.stack);}}/**\r\n     * @internal\r\n     * Logs a message to the console based on LogLevel\r\n     */},{key:\"log\",value:function log(logLevel,message,args,context){switch(logLevel){case LogLevel.Information:// @ts-ignore\nthis.options.isInfo&&this._print(LogLevel.Information,message,args);break;case LogLevel.Debug:this.options.isDebug&&this._print(LogLevel.Debug,message,args);break;case LogLevel.Trace:case LogLevel.Warning:this._print(logLevel,message,args);break;case LogLevel.Critical:case LogLevel.Error:this._print(LogLevel.Error,message,args);break;default:}}/**\r\n     * @internal\r\n     * Logs an exception object to the console\r\n     */},{key:\"exception\",value:function exception(error,context){if(error&&error.stack){this._print(LogLevel.Error,error.stack);}}/**\r\n     * @internal\r\n     * Tracks a metric\r\n     * @param name Metric name\r\n     * @param value Metric value\r\n     */},{key:\"trackMetric\",value:function trackMetric(name,value,context){this._print(LogLevel.Debug,\"\".concat(name,\": \").concat(value));}},{key:\"trackEvent\",value:function trackEvent(name,properties,measurements,context){var event={name:name,time:new Date(),properties:properties,measurements:measurements};this.log(LogLevel.Information,name,[event],context);}/**\r\n     * Track a page view\r\n     *\r\n     * @param {string} name\r\n     * @param {string} [url]\r\n     */},{key:\"trackPageView\",value:function trackPageView(name,url){// intentionally blank\n}/**\r\n     * Track request\r\n     * @param options the request options\r\n     */},{key:\"trackDependency\",value:function trackDependency(options){// intentionally blank\n}},{key:\"_print\",value:function _print(printLevel,message,args){var _this=this;this.logs.push(\"[\".concat(printLevel.toUpperCase(),\"] \").concat(message));args&&args.forEach(function(arg){_this.logs.push(JSON.stringify(arg));});}}]);return PageLogger;}();export{PageLogger};","map":{"version":3,"sources":["../../../src/loggers/page-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\n\n/**\n * Page Logger\n * Captures server side logs and surfaces them to the client\n */\nclass PageLogger implements ITraceLogger {\n    public logs: string[] = [];\n\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console, prefixed with custom tags, and with arguments following\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Output tags and message template\n        let tagsString = '';\n        if (customTags !== undefined) {\n            customTags.forEach(tag => {\n                tagsString += `[${tag}]`;\n            });\n        }\n\n        tagsString && this._print(logLevel, tagsString);\n        let message = messageTemplate;\n\n        // Output arguments\n        for (const [key, value] of placeholders.entries()) {\n            let messageValue;\n            // If Dynamics privacy object only print data value, else print object\n            if (value.__isDynamicsPrivacy) {\n                messageValue = value.data;\n            } else {\n                messageValue = value;\n            }\n            if (messageValue.toString() === '[object Object]') {\n                messageValue = JSON.stringify(messageValue, null, 2);\n            }\n            message = message.replace(new RegExp(`{${key}}`, 'g'), messageValue);\n        }\n\n        this._print(logLevel, message);\n\n        // Print exception if present\n        if (exception !== undefined && exception.stack) {\n            this._print(LogLevel.Error, exception.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console based on LogLevel\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        switch (logLevel) {\n            case LogLevel.Information:\n                // @ts-ignore\n                this.options.isInfo && this._print(LogLevel.Information, message, args);\n                break;\n            case LogLevel.Debug:\n                this.options.isDebug && this._print(LogLevel.Debug, message, args);\n                break;\n            case LogLevel.Trace:\n            case LogLevel.Warning:\n                this._print(logLevel, message, args);\n                break;\n            case LogLevel.Critical:\n            case LogLevel.Error:\n                this._print(LogLevel.Error, message, args);\n                break;\n            default:\n        }\n    }\n\n    /**\n     * @internal\n     * Logs an exception object to the console\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        if (error && error.stack) {\n            this._print(LogLevel.Error, error.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Tracks a metric\n     * @param name Metric name\n     * @param value Metric value\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        this._print(LogLevel.Debug, `${name}: ${value}`);\n    }\n\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        const event = {\n            name: name,\n            time: new Date(),\n            properties,\n            measurements\n        };\n        this.log(LogLevel.Information, name, [event], <ITelemetryContext>context);\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        // intentionally blank\n    }\n\n    /**\n     * Track request\n     * @param options the request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        // intentionally blank\n    }\n\n    private _print(printLevel: LogLevel, message: string, args?: unknown[]): void {\n        this.logs.push(`[${printLevel.toUpperCase()}] ${message}`);\n        args &&\n            args.forEach(arg => {\n                this.logs.push(JSON.stringify(arg));\n            });\n    }\n}\n\nexport { PageLogger };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}