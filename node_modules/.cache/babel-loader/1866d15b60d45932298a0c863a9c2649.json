{"ast":null,"code":"import\"core-js/modules/web.dom-collections.for-each.js\";import\"core-js/modules/web.dom-collections.iterator.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-floating-promises\nimport{p}from'../helpers';import{LogLevel}from'../interfaces';import{getFilteredData}from'../privacy/dynamics-privacy-helper';import{safeStringify}from'./logging-helper';/**\r\n * This is a logger that stores logs so they can be sent back with the response\r\n */export class RetainLogger{constructor(){this.logList=[];}/**\r\n     * @internal\r\n     * Retains a trace message\r\n     * @param logLevel LogLevel of the message\r\n     * @param context Telemetry context to add to log\r\n     * @param messageTemplate Structured log formatted string\r\n     * @param placeholders List of placeholders in messageTemplate along with position in string\r\n     * @param values Arguments to replace placeholders\r\n     * @param customTags Array of strings to attach to log\r\n     */sendLog(logLevel,context,messageTemplate,// tslint:disable-next-line:no-any\nplaceholders,customTags,exception){// Add message template\nthis.logList.push({logLevel,message:messageTemplate});// Add arguments\nfor(const value of placeholders.values()){// Get filtered data out of placeholder if it is a privacy object\nconst data=getFilteredData(value);this.logList.push({logLevel,message:safeStringify(data)});}}/**\r\n     * @internal\r\n     * Retains a trace message\r\n     * @param logLevel Severity level of the log\r\n     * @param message String to log\r\n     * @param args Any additional objects to log\r\n     * @param context Additional properties to add to the log\r\n     */log(logLevel,message,args,context){this.logList.push({logLevel,message});// Append extra arguments to the message as strings (stringifying json objects as necessary)\nargs.forEach(arg=>{p(()=>{let data=String(arg);if(typeof arg==='object'){try{data=JSON.stringify(arg);}catch(err){// If the data is unable to be stringified\n// eat the error and log data as is\n}}this.logList.push({logLevel,message:data});});});}/**\r\n     * @internal\r\n     * Retains an error object\r\n     * @param error Error object to log\r\n     * @param context Additional properties to add to the log\r\n     */exception(exception,context){this.logList.push({logLevel:LogLevel.Error,message:\"\".concat(exception.name,\": \").concat(exception.message)});}/**\r\n     * @internal\r\n     * Retains a metric\r\n     * @param name Name of the metric to log\r\n     * @param value Value of the metric to log\r\n     * @param context Additional properties to add to the log\r\n     */trackMetric(name,value,context){const logLevel=LogLevel.Information;const message=\"\".concat(name,\": \").concat(value);this.logList.push({logLevel,message});}trackEvent(name,properties,measurements){const message=JSON.stringify({eventName:name,properties,measurements});this.logList.push({message,logLevel:LogLevel.Information});}/**\r\n     * Track a page view\r\n     *\r\n     * @param {string} name\r\n     * @param {string} [url]\r\n     */trackPageView(name,url){this.trackEvent('trackPageView',{url});}/**\r\n     * Track request\r\n     * @param options the request options\r\n     */trackDependency(options){this.trackEvent('trackRequest',options);}getLogs(){return this.logList;}}","map":{"version":3,"sources":["../../../src/loggers/retain-logger.ts"],"names":[],"mappings":"gHAAA;;;AAGG,G,CACH;AACA,OAAS,CAAT,KAAkB,YAAlB,CACA,OAAgD,QAAhD,KAAgE,eAAhE,CAEA,OAAS,eAAT,KAAgC,oCAAhC,CACA,OAAS,aAAT,KAA8B,kBAA9B,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,YAAY,CAAzB,WAAA,EAAA,CACY,KAAA,OAAA,CAAkB,EAAlB,CAkHX,CAhHG;;;;;;;;;AASG,OACI,OAAO,CACV,QADU,CAEV,OAFU,CAGV,eAHU,CAIV;AACA,YALU,CAMV,UANU,CAOV,SAPU,CAOO,CAEjB;AACA,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAE,QAAF,CAAY,OAAO,CAAE,eAArB,CAAlB,EAEA;AACA,IAAK,KAAM,CAAA,KAAX,GAAoB,CAAA,YAAY,CAAC,MAAb,EAApB,CAA2C,CACvC;AACA,KAAM,CAAA,IAAI,CAAG,eAAe,CAAC,KAAD,CAA5B,CAEA,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAE,QAAF,CAAY,OAAO,CAAE,aAAa,CAAC,IAAD,CAAlC,CAAlB,EACH,CACJ,CAED;;;;;;;AAOG,OACI,GAAG,CAAC,QAAD,CAAqB,OAArB,CAAsC,IAAtC,CAAuD,OAAvD,CAAiF,CACvF,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAE,QAAF,CAAY,OAAZ,CAAlB,EACA;AACA,IAAI,CAAC,OAAL,CAAc,GAAD,EAAiB,CAC1B,CAAC,CAAC,IAAK,CACH,GAAI,CAAA,IAAI,CAAW,MAAM,CAAC,GAAD,CAAzB,CACA,GAAI,MAAO,CAAA,GAAP,GAAe,QAAnB,CAA6B,CACzB,GAAI,CACA,IAAI,CAAG,IAAI,CAAC,SAAL,CAAe,GAAf,CAAP,CACH,CAAC,MAAO,GAAP,CAAY,CACV;AACA;AACH,CACJ,CACD,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAE,QAAF,CAAY,OAAO,CAAE,IAArB,CAAlB,EACH,CAXA,CAAD,CAYH,CAbD,EAcH,CAED;;;;;AAKG,OACI,SAAS,CAAC,SAAD,CAAmB,OAAnB,CAA6C,CACzD,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAE,QAAQ,CAAE,QAAQ,CAAC,KAArB,CAA4B,OAAO,WAAK,SAAS,CAAC,IAAf,cAAwB,SAAS,CAAC,OAAlC,CAAnC,CAAlB,EACH,CAED;;;;;;AAMG,OACI,WAAW,CAAC,IAAD,CAAe,KAAf,CAA8B,OAA9B,CAAwD,CACtE,KAAM,CAAA,QAAQ,CAAa,QAAQ,CAAC,WAApC,CACA,KAAM,CAAA,OAAO,WAAc,IAAd,cAAuB,KAAvB,CAAb,CAEA,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAE,QAAF,CAAY,OAAZ,CAAlB,EACH,CAEM,UAAU,CAA6B,IAA7B,CAA2C,UAA3C,CAAqE,YAArE,CAAiG,CAC9G,KAAM,CAAA,OAAO,CAAG,IAAI,CAAC,SAAL,CAAe,CAC3B,SAAS,CAAE,IADgB,CAE3B,UAF2B,CAG3B,YAH2B,CAAf,CAAhB,CAKA,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAE,OAAF,CAAW,QAAQ,CAAE,QAAQ,CAAC,WAA9B,CAAlB,EACH,CAED;;;;;AAKG,OACI,aAAa,CAAC,IAAD,CAAe,GAAf,CAA2B,CAC3C,KAAK,UAAL,CAAgB,eAAhB,CAAiC,CAAE,GAAF,CAAjC,EACH,CAED;;;AAGG,OACI,eAAe,CAAC,OAAD,CAA0B,CAC5C,KAAK,UAAL,CAAgB,cAAhB,CAAgC,OAAhC,EACH,CAEM,OAAO,EAAA,CACV,MAAO,MAAK,OAAZ,CACH,CAlHoB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-floating-promises\nimport { p } from '../helpers';\nimport { ILog, ITelemetryContext, ITraceLogger, LogLevel } from '../interfaces';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { getFilteredData } from '../privacy/dynamics-privacy-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * This is a logger that stores logs so they can be sent back with the response\n */\nexport class RetainLogger implements ITraceLogger {\n    private logList: ILog[] = [];\n\n    /**\n     * @internal\n     * Retains a trace message\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Add message template\n        this.logList.push({ logLevel, message: messageTemplate });\n\n        // Add arguments\n        for (const value of placeholders.values()) {\n            // Get filtered data out of placeholder if it is a privacy object\n            const data = getFilteredData(value);\n\n            this.logList.push({ logLevel, message: safeStringify(data) });\n        }\n    }\n\n    /**\n     * @internal\n     * Retains a trace message\n     * @param logLevel Severity level of the log\n     * @param message String to log\n     * @param args Any additional objects to log\n     * @param context Additional properties to add to the log\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        this.logList.push({ logLevel, message });\n        // Append extra arguments to the message as strings (stringifying json objects as necessary)\n        args.forEach((arg: unknown) => {\n            p(() => {\n                let data: string = String(arg);\n                if (typeof arg === 'object') {\n                    try {\n                        data = JSON.stringify(arg);\n                    } catch (err) {\n                        // If the data is unable to be stringified\n                        // eat the error and log data as is\n                    }\n                }\n                this.logList.push({ logLevel, message: data });\n            });\n        });\n    }\n\n    /**\n     * @internal\n     * Retains an error object\n     * @param error Error object to log\n     * @param context Additional properties to add to the log\n     */\n    public exception(exception: Error, context: ITelemetryContext): void {\n        this.logList.push({ logLevel: LogLevel.Error, message: `${exception.name}: ${exception.message}` });\n    }\n\n    /**\n     * @internal\n     * Retains a metric\n     * @param name Name of the metric to log\n     * @param value Value of the metric to log\n     * @param context Additional properties to add to the log\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        const logLevel: LogLevel = LogLevel.Information;\n        const message: string = `${name}: ${value}`;\n\n        this.logList.push({ logLevel, message });\n    }\n\n    public trackEvent<TProperties, TMeasurements>(name: string, properties?: TProperties, measurements?: TMeasurements): void {\n        const message = JSON.stringify({\n            eventName: name,\n            properties,\n            measurements\n        });\n        this.logList.push({ message, logLevel: LogLevel.Information });\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        this.trackEvent('trackPageView', { url });\n    }\n\n    /**\n     * Track request\n     * @param options the request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        this.trackEvent('trackRequest', options);\n    }\n\n    public getLogs(): ILog[] {\n        return this.logList;\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}