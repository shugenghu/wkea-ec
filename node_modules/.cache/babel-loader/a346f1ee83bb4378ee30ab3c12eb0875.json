{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import axios from'axios';import qs from'querystring';/**\r\n * Makes an ROPC (resource owner password credentials) auth flow request with the given mock user\r\n * to retrieve user access token and set signed in behavior during local development\r\n *\r\n * See https://docs.microsoft.com/en-us/azure/active-directory-b2c/configure-ropc?tabs=app-reg-ga for more information\r\n * @param credentials credentials object containing config information\r\n */export var getUserInformationROPC=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(credentials,user){var ropcAuthUrl,chosenUser,ropcAuthRequestBody,ropcAuthRequest,authResult;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Construct the URL and request body\nropcAuthUrl=constructRopcAuthUrl(credentials);chosenUser=getUserInfoFromCredentialsFile(credentials,user);ropcAuthRequestBody=constructRopcAuthRequestBody(credentials,chosenUser);_context.prev=3;_context.next=6;return axios({method:'post',url:ropcAuthUrl,data:ropcAuthRequestBody,headers:{'Content-Type':'application/x-www-form-urlencoded'}});case 6:ropcAuthRequest=_context.sent;_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](3);throw new Error(\"Access Token Fetch for user \".concat(user,\" failed with status \").concat(_context.t0.code,\" and error \").concat(_context.t0.response,\". Check B2C configuration steps.\"));case 12:// Return access token if successful and set current user and expiry date\nauthResult=ropcAuthRequest.data;credentials.currentUser=user;credentials.expiryDate=Math.floor(Date.now()/1000)+parseInt(authResult.expires_in,10);credentials.accessToken=authResult.access_token;credentials.customerAccountNumber=chosenUser.customerAccountNumber;return _context.abrupt(\"return\",{token:authResult.access_token,customerAccountNumber:chosenUser.customerAccountNumber});case 18:case\"end\":return _context.stop();}}},_callee,null,[[3,9]]);}));return function getUserInformationROPC(_x,_x2){return _ref.apply(this,arguments);};}();/**\r\n * Constructs the URL to invoke the ROPC auth flow\r\n * @param credentials credentials object containing config information\r\n */var constructRopcAuthUrl=function constructRopcAuthUrl(credentials){if(!credentials.loginDomain){throw constructMissingInformationError('loginDomain');}if(!credentials.b2cTenant){throw constructMissingInformationError('b2cTenant');}if(!credentials.ropcUserFlowName){throw constructMissingInformationError('ropcUserFlowName');}return\"https://\".concat(credentials.loginDomain,\"/\").concat(credentials.b2cTenant,\".onmicrosoft.com/\").concat(credentials.ropcUserFlowName,\"/oauth2/v2.0/token\");};/**\r\n * Gets the user information (email, password, customerAccountNumber) from the credentials file\r\n *\r\n * @param credentials credentials object containing config information\r\n * @param user User to sign in as\r\n */var getUserInfoFromCredentialsFile=function getUserInfoFromCredentialsFile(credentials,user){// Find the user in the list of configured users\nvar chosenUser;// If the mockUser query param is just set to true then use the default user\nif(user==='true'||user==='default'){user='default';chosenUser=credentials.defaultUser;}else{// Otherwise search through additional configured users to look for user requested\nvar additionalUsers=credentials.additionalUsers;for(var i=0;i<additionalUsers.length;i++){if(additionalUsers[i].name===user){chosenUser=additionalUsers[i];}}}if(!chosenUser){if(user==='default'){throw new Error(\"No default user configured in list of users credentials.json. Verify default user has been configured.\");}else{throw new Error(\"Requested user '\".concat(user,\"' was not found in the list of users configured in credentials.json. Verify user with name '\").concat(user,\"' exists.\"));}}return chosenUser;};/**\r\n * Constructs the POST request body containing user information and scope to be made to the ROPC auth URL\r\n * to get user access token\r\n *\r\n * @param credentials credentials object containing config information\r\n * @param chosenUser User to sign in as\r\n */var constructRopcAuthRequestBody=function constructRopcAuthRequestBody(credentials,chosenUser){if(!credentials.nativeApplicationId){throw constructMissingInformationError('nativeApplicationId');}if(!credentials.userImpersonationScopeURL){throw constructMissingInformationError('userImpersonationScopeURL');}// Construct POST request body\nreturn qs.stringify({username:chosenUser.email,password:chosenUser.password,grant_type:'password',client_id:credentials.nativeApplicationId,response_type:'token id_token',scope:\"openid \".concat(credentials.userImpersonationScopeURL)});};/**\r\n * Constructs an error indicating the ROPC flow was not able to run due to missing configuration missing\r\n * @param missingProperty The missing property\r\n */var constructMissingInformationError=function constructMissingInformationError(missingProperty){return new Error(\"Unable to login with mock user. Missing property \".concat(missingProperty,\" from credentials.json\"));};","map":{"version":3,"sources":["../../../src/utils/ropc-auth-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ILocalCredentials, ILocalCredentialsUser } from '@msdyn365-commerce/core-internal';\nimport axios from 'axios';\nimport qs from 'querystring';\n\nexport interface IUserCreds {\n    token: string;\n    customerAccountNumber?: string;\n}\n\n/**\n * Makes an ROPC (resource owner password credentials) auth flow request with the given mock user\n * to retrieve user access token and set signed in behavior during local development\n *\n * See https://docs.microsoft.com/en-us/azure/active-directory-b2c/configure-ropc?tabs=app-reg-ga for more information\n * @param credentials credentials object containing config information\n */\nexport const getUserInformationROPC = async (credentials: ILocalCredentials, user: string): Promise<IUserCreds | undefined> => {\n    // Construct the URL and request body\n    const ropcAuthUrl = constructRopcAuthUrl(credentials);\n    const chosenUser = getUserInfoFromCredentialsFile(credentials, user);\n    const ropcAuthRequestBody = constructRopcAuthRequestBody(credentials, chosenUser);\n\n    let ropcAuthRequest;\n    try {\n        ropcAuthRequest = await axios({\n            method: 'post',\n            url: ropcAuthUrl,\n            data: ropcAuthRequestBody,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        });\n    } catch (err) {\n        throw new Error(\n            `Access Token Fetch for user ${user} failed with status ${err.code} and error ${err.response}. Check B2C configuration steps.`\n        );\n    }\n    // Return access token if successful and set current user and expiry date\n    const authResult = ropcAuthRequest.data;\n    credentials.currentUser = user;\n    credentials.expiryDate = Math.floor(Date.now() / 1000) + parseInt(authResult.expires_in, 10);\n    credentials.accessToken = authResult.access_token;\n    credentials.customerAccountNumber = chosenUser.customerAccountNumber;\n\n    return {token: authResult.access_token, customerAccountNumber: chosenUser.customerAccountNumber};\n};\n\n/**\n * Constructs the URL to invoke the ROPC auth flow\n * @param credentials credentials object containing config information\n */\nconst constructRopcAuthUrl = (credentials: ILocalCredentials): string => {\n    if (!credentials.loginDomain) {\n        throw constructMissingInformationError('loginDomain');\n    }\n    if (!credentials.b2cTenant) {\n        throw constructMissingInformationError('b2cTenant');\n    }\n    if (!credentials.ropcUserFlowName) {\n        throw constructMissingInformationError('ropcUserFlowName');\n    }\n    return `https://${credentials.loginDomain}/${credentials.b2cTenant}.onmicrosoft.com/${credentials.ropcUserFlowName}/oauth2/v2.0/token`;\n};\n\n/**\n * Gets the user information (email, password, customerAccountNumber) from the credentials file\n *\n * @param credentials credentials object containing config information\n * @param user User to sign in as\n */\nconst getUserInfoFromCredentialsFile = (credentials: ILocalCredentials, user: string): ILocalCredentialsUser => {\n    // Find the user in the list of configured users\n    let chosenUser: ILocalCredentialsUser | undefined;\n    // If the mockUser query param is just set to true then use the default user\n    if (user === 'true' || user === 'default') {\n        user = 'default';\n        chosenUser = credentials.defaultUser;\n    } else {\n        // Otherwise search through additional configured users to look for user requested\n        const additionalUsers = credentials.additionalUsers;\n        for (let i = 0; i < additionalUsers.length; i++) {\n            if (additionalUsers[i].name === user) {\n                chosenUser = additionalUsers[i];\n            }\n        }\n    }\n    if (!chosenUser) {\n        if (user === 'default') {\n            throw new Error(`No default user configured in list of users credentials.json. Verify default user has been configured.`);\n        } else {\n            throw new Error(\n                `Requested user '${user}' was not found in the list of users configured in credentials.json. Verify user with name '${user}' exists.`\n            );\n        }\n    }\n    return chosenUser;\n};\n\n/**\n * Constructs the POST request body containing user information and scope to be made to the ROPC auth URL\n * to get user access token\n *\n * @param credentials credentials object containing config information\n * @param chosenUser User to sign in as\n */\nconst constructRopcAuthRequestBody = (credentials: ILocalCredentials, chosenUser: ILocalCredentialsUser): string => {\n    if (!credentials.nativeApplicationId) {\n        throw constructMissingInformationError('nativeApplicationId');\n    }\n    if (!credentials.userImpersonationScopeURL) {\n        throw constructMissingInformationError('userImpersonationScopeURL');\n    }\n    // Construct POST request body\n    return qs.stringify({\n        username: chosenUser.email,\n        password: chosenUser.password,\n        grant_type: 'password',\n        client_id: credentials.nativeApplicationId,\n        response_type: 'token id_token',\n        scope: `openid ${credentials.userImpersonationScopeURL}`\n    });\n};\n\n/**\n * Constructs an error indicating the ROPC flow was not able to run due to missing configuration missing\n * @param missingProperty The missing property\n */\nconst constructMissingInformationError = (missingProperty: string) => {\n    return new Error(`Unable to login with mock user. Missing property ${missingProperty} from credentials.json`);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}