{"ast":null,"code":"import\"core-js/modules/es.object.assign.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/es.string.replace.js\";import{getProductUrlSync}from'@msdyn365-commerce-modules/retail-actions';import{Button,getPayloadObject,getTelemetryAttributes}from'@msdyn365-commerce-modules/utilities';import{AddToOrderTemplateComponent,AddToWishlistComponent,CartLineItemComponent}from'@msdyn365-commerce/components';import{TelemetryEvent}from'@msdyn365-commerce/core';import*as React from'react';import{PickUpInStore}from'./cart-pick-up-in-store';const _getProduct=(productId,products)=>{if(productId!==undefined&&products){return products.find(product=>{return productId===product.RecordId;});}return undefined;};const _getCartItemMaxQuantity=(maxCartlineQuantity,isStockCheckEnabled,productAvailability)=>{if(isStockCheckEnabled){if(!productAvailability||!productAvailability.ProductAvailableQuantity||!productAvailability.IsProductAvailable||!productAvailability.ProductAvailableQuantity.AvailableQuantity){return 0;}return productAvailability.ProductAvailableQuantity.AvailableQuantity>=maxCartlineQuantity?maxCartlineQuantity:productAvailability.ProductAvailableQuantity.AvailableQuantity;}return maxCartlineQuantity;};const _getErrorMessage=(maxQuantity,currentQuantity,props)=>{if(maxQuantity<=0){return props.outOfStockText;}else if(maxQuantity<currentQuantity){if(maxQuantity===1){return props.outOfRangeOneText;}else{return props.outOfRangeFormatText.replace('{numLeft}',maxQuantity.toString());}}return undefined;};const _assembleNode=(cartline,product,props,index,foundProductAvailability,foundProductDeliveryOptions)=>{var _foundProductAvailabi,_props$cartState;const{imageSettings,gridSettings,id,typeName,context,resources,removeButtonText,removeItemClickHandler,moveToWishlistSuccessHandler,addToOrderTemplateButtonText,addToOrderTemplateDialogResources,createOrderTemplateDialogResources,itemAddedToOrderTemplateDialogResources,duplicateItemsWhenAddingToOrderTemplateDialogResources,addToWishlistButtonText,removeFromWishlistButtonText,orderTemplates,customerInformation,wishlists,defaultWishlistName}=props;const isAuthenticated=context.request.user.isAuthenticated;const nameOfWishlist=wishlists&&wishlists.length>0&&wishlists[0].Name?wishlists[0].Name:defaultWishlistName;const maxQuantity=_getCartItemMaxQuantity(props.maxCartlineQuantity,props.isStockCheckEnabled,foundProductAvailability);const PRODUCTASSERVICE=2;const isServiceItem=product.ItemTypeValue===PRODUCTASSERVICE;const errorMessage=props.includeErrors&&!isServiceItem&&props.isStockCheckEnabled?_getErrorMessage(maxQuantity,cartline.Quantity,props):undefined;const onRemoveClickHandler=event=>{removeItemClickHandler(cartline);};const payload=getPayloadObject(TelemetryEvent.RemoveFromCart,props.telemetryContent,removeButtonText,'');const attributes=getTelemetryAttributes(props.telemetryContent,payload);const inventoryLbl=foundProductAvailability===null||foundProductAvailability===void 0?void 0:foundProductAvailability.StockLevelLabel;const inventoryCode=foundProductAvailability?\"ms-cart-line__inventory-code-\".concat((_foundProductAvailabi=foundProductAvailability.StockLevelCode)===null||_foundProductAvailabi===void 0?void 0:_foundProductAvailabi.toLowerCase()):undefined;return{data:{product:product,cartline:cartline},error:errorMessage,cartline:/*#__PURE__*/React.createElement(CartLineItemComponent,{data:{cartLine:cartline,product:product},currentQuantity:cartline.Quantity,maxQuantity:maxQuantity,isOutOfStock:!isServiceItem&&props.isStockCheckEnabled?maxQuantity<=0?true:false:false,gridSettings:gridSettings,imageSettings:imageSettings,id:id,typeName:typeName,productUrl:getProductUrlSync(product,props.context.actionContext,undefined),context:context,resources:resources,key:index,isQuantityEditable:true,quantityOnChange:props.updateCartLinesQuantitySuccessHandler,primaryImageUrl:product.PrimaryImageUrl,errorMessage:errorMessage,inventoryInformationLabel:inventoryLbl,inventoryLabelClassName:inventoryCode,isCartStateReady:((_props$cartState=props.cartState)===null||_props$cartState===void 0?void 0:_props$cartState.status)==='READY',showShippingChargesForLineItems:props.showShippingChargesForLineItems,telemetryContent:props.telemetryContent}),pickUpInStore:PickUpInStore({cartState:props.cartState,cartline:cartline,product:product,shipitText:props.shipItText,pickUpInStoreText:props.pickitUpText,changeStoreText:props.changeStoreText,storeSelectorStateManager:props.storeSelectorStateManager,orgUnitLocations:props.orgUnitLocations,deliveryOptions:foundProductDeliveryOptions,pickupDeliveryModeCode:props.pickupDeliveryModeCode}),remove:/*#__PURE__*/React.createElement(Button,Object.assign({className:'msc-cart-line__remove-item',onClick:onRemoveClickHandler,title:removeButtonText},attributes),removeButtonText),addToWishlist:isAuthenticated?/*#__PURE__*/React.createElement(AddToWishlistComponent,{className:'msc-cart-line__add-to-wishlist',addToWishlistButtonText:addToWishlistButtonText,removeFromWishlistButtonText:removeFromWishlistButtonText,context:context,id:id,key:cartline.LineId,typeName:typeName,nameOfWishlist:nameOfWishlist,cartline:cartline,showButtonText:true,showStatusMessage:false,showRemoveButton:false,showButtonTooltip:false,data:{wishlists:wishlists,product:product},onSuccess:moveToWishlistSuccessHandler}):undefined,addToOrderTemplate:isAuthenticated&&orderTemplates?/*#__PURE__*/React.createElement(AddToOrderTemplateComponent,{className:'msc-cart-line__add-to-order-template',addToOrderTemplateButtonText:addToOrderTemplateButtonText,addToOrderTemplateDialogResources:addToOrderTemplateDialogResources,createOrderTemplateDialogResources:createOrderTemplateDialogResources,itemAddedToOrderTemplateDialogResources:itemAddedToOrderTemplateDialogResources,duplicateItemsWhenAddingToOrderTemplateDialogResources:duplicateItemsWhenAddingToOrderTemplateDialogResources,data:{product:product,quantity:cartline.Quantity||1,orderTemplates:orderTemplates,customerInformation:customerInformation},context:context,showButtonText:true,showButtonTooltip:false,id:id,typeName:typeName}):undefined};};const _assembleCartlines=(cartlines,products,props)=>{const reactNodes=[];if(!products||products.length===0){props.context.telemetry.error('Products content is empty, module wont render');return null;}cartlines.map((cartline,index)=>{const product=_getProduct(cartline.ProductId,products);let foundProductAvailability;if(props.productAvailabilites&&props.productAvailabilites.length>0){foundProductAvailability=props.productAvailabilites.find(productAvailability=>{var _productAvailability$;return((_productAvailability$=productAvailability.ProductAvailableQuantity)===null||_productAvailability$===void 0?void 0:_productAvailability$.ProductId)===cartline.ProductId;});}let foundProductDeliveryOption;if(props.productDeliveryOptions&&props.productDeliveryOptions.length>0){foundProductDeliveryOption=props.productDeliveryOptions.find(deliveryOption=>{return deliveryOption&&deliveryOption.ProductId===cartline.ProductId;});}if(product){reactNodes.push(_assembleNode(cartline,product,props,index,foundProductAvailability,foundProductDeliveryOption));}});return reactNodes;};export const CartLineItems=props=>{const{products,cartlines}=props;return _assembleCartlines(cartlines,products,props);};","map":{"version":3,"sources":["modules/cart/components/cart-line-items.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';\nimport { getProductUrlSync, IProductInventoryInformation, OrderTemplate } from '@msdyn365-commerce-modules/retail-actions';\nimport { Button, getPayloadObject, getTelemetryAttributes, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport {\n    AddToOrderTemplateComponent, AddToWishlistComponent, CartLineItemComponent,\n    IAddToOrderTemplateDialogResources, ICartlineResourceString, IDuplicateItemsWhenAddingToOrderTemplateDialogResources,\n    IItemAddedToOrderTemplateDialogResources, IOrderTemplateNameDialogResources, IWishlistActionSuccessResult } from '@msdyn365-commerce/components';\nimport { ICoreContext, IGridSettings, IImageSettings, ITelemetry, TelemetryEvent } from '@msdyn365-commerce/core';\nimport { ICartState } from '@msdyn365-commerce/global-state';\nimport { CartLine, CommerceList, Customer, OrgUnitLocation, ProductDeliveryOptions, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { ReleasedProductType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport * as React from 'react';\nimport { IPickUpInStoreViewProps, PickUpInStore } from './cart-pick-up-in-store';\n\nexport interface ICartLineItemsProps {\n    cartlines: CartLine[];\n    cartState: ICartState | undefined;\n    orgUnitLocations: OrgUnitLocation[] | undefined;\n    resources: ICartlineResourceString;\n    productAvailabilites: IProductInventoryInformation[] | undefined;\n    products: SimpleProduct[] | undefined;\n    productDeliveryOptions: ProductDeliveryOptions[] | undefined;\n    pickupDeliveryModeCode?: string;\n    /** GridSettings for the product image in cartline  */\n    gridSettings: IGridSettings;\n    /** ImageSettings for the product image in cartline  */\n    imageSettings: IImageSettings;\n    id: string;\n    typeName:string;\n    context: ICoreContext;\n    telemetry: ITelemetry;\n    removeButtonText: string;\n    addToWishlistButtonText: string;\n    removeFromWishlistButtonText: string;\n    shipItText: string;\n    pickitUpText: string;\n    changeStoreText: string;\n    outOfStockText: string;\n    outOfRangeOneText: string;\n    outOfRangeFormatText: string;\n    storeSelectorStateManager: IStoreSelectorStateManager | undefined;\n    isStockCheckEnabled: boolean;\n    wishlists: CommerceList[] | undefined;\n    defaultWishlistName: string;\n    maxCartlineQuantity: number;\n    includeErrors?: boolean;\n    showShippingChargesForLineItems?: boolean;\n    telemetryContent?: ITelemetryContent;\n\n    addToOrderTemplateDialogResources: IAddToOrderTemplateDialogResources;\n    createOrderTemplateDialogResources: IOrderTemplateNameDialogResources;\n    itemAddedToOrderTemplateDialogResources: IItemAddedToOrderTemplateDialogResources;\n    duplicateItemsWhenAddingToOrderTemplateDialogResources: IDuplicateItemsWhenAddingToOrderTemplateDialogResources;\n\n    addToOrderTemplateButtonText: string;\n    addToOrderTemplateMessage: string;\n    addItemToOrderTemplateError: string;\n    orderTemplates: OrderTemplate[] | undefined;\n    customerInformation: Customer | undefined;\n\n    removeItemClickHandler(cartlineToRemove: CartLine): void;\n    moveToWishlistSuccessHandler(result: IWishlistActionSuccessResult, cartlineId: CartLine): void;\n    updateCartLinesQuantitySuccessHandler(cartline: CartLine, quantity: number): void;\n}\n\nexport interface ICartlinesViewProps {\n    cartline: React.ReactNode;\n    pickUpInStore?: IPickUpInStoreViewProps;\n    remove: React.ReactNode;\n    addToWishlist: React.ReactNode | undefined;\n    addToOrderTemplate: React.ReactNode | undefined;\n\n    error?: string;\n\n    data?: {\n        product: SimpleProduct;\n        cartline: CartLine;\n    };\n}\n\nconst _getProduct = (productId: number | undefined, products: SimpleProduct[]): SimpleProduct | undefined => {\n    if (productId !== undefined && products) {\n        return products.find(product => {\n            return productId === product.RecordId;\n        });\n    }\n    return undefined;\n};\n\nconst _getCartItemMaxQuantity = (maxCartlineQuantity: number, isStockCheckEnabled: boolean, productAvailability?: IProductInventoryInformation) => {\n    if(isStockCheckEnabled) {\n        if(!productAvailability || !productAvailability.ProductAvailableQuantity || !productAvailability.IsProductAvailable || !productAvailability.ProductAvailableQuantity.AvailableQuantity) {\n            return 0;\n        }\n        return productAvailability.ProductAvailableQuantity.AvailableQuantity >= maxCartlineQuantity ? maxCartlineQuantity:productAvailability.ProductAvailableQuantity.AvailableQuantity;\n    }\n\n    return maxCartlineQuantity;\n};\n\nconst _getErrorMessage = (maxQuantity: number, currentQuantity: number, props: ICartLineItemsProps): string | undefined => {\n    if (maxQuantity <= 0) {\n        return props.outOfStockText;\n    } else if (maxQuantity < currentQuantity) {\n        if (maxQuantity === 1) {\n            return props.outOfRangeOneText;\n        } else {\n            return props.outOfRangeFormatText.replace('{numLeft}', maxQuantity.toString());\n        }\n    }\n\n    return undefined;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst _assembleNode = (cartline: CartLine, product: SimpleProduct, props:ICartLineItemsProps, index:number, foundProductAvailability?:IProductInventoryInformation, foundProductDeliveryOptions?:ProductDeliveryOptions): ICartlinesViewProps => {\n    const { imageSettings, gridSettings, id, typeName, context, resources, removeButtonText,\n        removeItemClickHandler, moveToWishlistSuccessHandler, addToOrderTemplateButtonText,\n        addToOrderTemplateDialogResources, createOrderTemplateDialogResources,\n        itemAddedToOrderTemplateDialogResources, duplicateItemsWhenAddingToOrderTemplateDialogResources,\n        addToWishlistButtonText, removeFromWishlistButtonText, orderTemplates, customerInformation,\n        wishlists, defaultWishlistName } = props;\n\n    const isAuthenticated = context.request.user.isAuthenticated;\n    const nameOfWishlist = wishlists && wishlists.length > 0 && wishlists[0].Name ? wishlists[0].Name : defaultWishlistName ;\n    const maxQuantity = _getCartItemMaxQuantity(props.maxCartlineQuantity, props.isStockCheckEnabled, foundProductAvailability);\n\n    // check if the product is service or not by product type\n    const PRODUCTASSERVICE = 2 as ReleasedProductType.Service;\n    const isServiceItem = product.ItemTypeValue === PRODUCTASSERVICE;\n\n    const errorMessage = props.includeErrors && !isServiceItem && props.isStockCheckEnabled ? _getErrorMessage(maxQuantity, cartline.Quantity!, props) : undefined;\n\n    const onRemoveClickHandler = (event: React.MouseEvent<HTMLElement>) => { removeItemClickHandler(cartline); };\n    const payload = getPayloadObject(TelemetryEvent.RemoveFromCart, props.telemetryContent!, removeButtonText, '');\n    const attributes = getTelemetryAttributes(props.telemetryContent!, payload);\n\n    const inventoryLbl =  foundProductAvailability?.StockLevelLabel;\n    const inventoryCode = foundProductAvailability? `ms-cart-line__inventory-code-${foundProductAvailability.StockLevelCode?.toLowerCase()}`:undefined;\n    return {\n        data: {\n            product: product,\n            cartline: cartline\n        },\n        error: errorMessage,\n        cartline: (\n            <CartLineItemComponent\n                    data={{\n                        cartLine: cartline,\n                        product: product\n                    }}\n                    currentQuantity = {cartline.Quantity!}\n                    maxQuantity = {maxQuantity}\n                    isOutOfStock = {(!isServiceItem && props.isStockCheckEnabled) ? (maxQuantity <= 0 ? true: false) : false}\n                    gridSettings={gridSettings}\n                    imageSettings={imageSettings}\n                    id={id}\n                    typeName={typeName}\n                    productUrl={getProductUrlSync(product, props.context.actionContext, undefined)}\n                    context={context}\n                    resources={resources}\n                    key={index}\n                    isQuantityEditable={true}\n                    quantityOnChange={props.updateCartLinesQuantitySuccessHandler}\n                    primaryImageUrl={product.PrimaryImageUrl}\n                    errorMessage={errorMessage}\n                    inventoryInformationLabel = {inventoryLbl}\n                    inventoryLabelClassName = {inventoryCode}\n                    isCartStateReady = {props.cartState?.status === 'READY'}\n                    showShippingChargesForLineItems = {props.showShippingChargesForLineItems}\n                    telemetryContent = {props.telemetryContent}\n            />),\n        pickUpInStore:(\n            PickUpInStore({\n                cartState: props.cartState,\n                cartline: cartline,\n                product: product,\n                shipitText: props.shipItText,\n                pickUpInStoreText: props.pickitUpText,\n                changeStoreText: props.changeStoreText,\n                storeSelectorStateManager: props.storeSelectorStateManager,\n                orgUnitLocations: props.orgUnitLocations,\n                deliveryOptions: foundProductDeliveryOptions,\n                pickupDeliveryModeCode: props.pickupDeliveryModeCode,\n            })\n        ),\n        remove: (\n            <Button\n                className='msc-cart-line__remove-item'\n                onClick={onRemoveClickHandler}\n                title={removeButtonText}\n                {...attributes}\n            >\n                {removeButtonText}\n            </Button>\n        ),\n        addToWishlist: (\n                isAuthenticated ? (\n                    <AddToWishlistComponent\n                        className = {'msc-cart-line__add-to-wishlist'}\n                        addToWishlistButtonText = {addToWishlistButtonText}\n                        removeFromWishlistButtonText = {removeFromWishlistButtonText}\n                        context = {context}\n                        id = {id}\n                        key = {cartline.LineId!}\n                        typeName={typeName}\n                        nameOfWishlist= {nameOfWishlist}\n                        cartline = {cartline}\n                        showButtonText = {true}\n                        showStatusMessage = {false}\n                        showRemoveButton = {false}\n                        showButtonTooltip = {false}\n                        data={{\n                            wishlists:wishlists,\n                            product:product\n                        }}\n                        onSuccess = {moveToWishlistSuccessHandler}\n                    />\n                ) :\n                undefined\n        ),\n        addToOrderTemplate: (\n                isAuthenticated && orderTemplates ? (\n                    <AddToOrderTemplateComponent\n                        className = {'msc-cart-line__add-to-order-template'}\n                        addToOrderTemplateButtonText={addToOrderTemplateButtonText}\n                        addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}\n                        createOrderTemplateDialogResources={createOrderTemplateDialogResources}\n                        itemAddedToOrderTemplateDialogResources={itemAddedToOrderTemplateDialogResources}\n                        duplicateItemsWhenAddingToOrderTemplateDialogResources={duplicateItemsWhenAddingToOrderTemplateDialogResources}\n                        data={{ product: product, quantity: cartline.Quantity || 1, orderTemplates: orderTemplates, customerInformation: customerInformation }}\n                        context={context}\n                        showButtonText = {true}\n                        showButtonTooltip = {false}\n                        id={id}\n                        typeName={typeName}\n                    />\n                ) :\n                undefined\n        )\n    };\n};\n\nconst _assembleCartlines = (cartlines: CartLine[], products: SimpleProduct[] | undefined, props: ICartLineItemsProps): ICartlinesViewProps[] | null => {\n    const reactNodes:ICartlinesViewProps[] = [];\n\n    if(!products || products.length === 0) {\n        props.context.telemetry.error('Products content is empty, module wont render');\n        return null;\n    }\n\n    cartlines.map((cartline, index) => {\n        const product = _getProduct(cartline.ProductId, products);\n        let foundProductAvailability;\n        if(props.productAvailabilites && props.productAvailabilites.length > 0) {\n            foundProductAvailability = props.productAvailabilites.find((productAvailability) => {\n                return productAvailability.ProductAvailableQuantity?.ProductId! === cartline.ProductId;\n            });\n        }\n        let foundProductDeliveryOption;\n        if(props.productDeliveryOptions && props.productDeliveryOptions.length > 0) {\n            foundProductDeliveryOption = props.productDeliveryOptions.find((deliveryOption) => {\n                return deliveryOption && deliveryOption.ProductId === cartline.ProductId;\n            });\n        }\n        if(product) {\n            reactNodes.push(_assembleNode(cartline, product, props, index, foundProductAvailability, foundProductDeliveryOption));\n        }\n    });\n\n    return reactNodes;\n};\n\n/**\n * CartLineItems component\n */\n\nexport const CartLineItems = (props: ICartLineItemsProps) => {\n    const { products, cartlines } = props;\n    return (\n        _assembleCartlines(cartlines, products, props)\n    );\n};"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}