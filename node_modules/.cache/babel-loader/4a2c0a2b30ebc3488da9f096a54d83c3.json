{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _typeof from\"@babel/runtime/helpers/esm/typeof\";import _toConsumableArray from\"@babel/runtime/helpers/esm/toConsumableArray\";import{hydrateLink}from'./link-hydrator';import{hydrateProductList}from'./product-list-hydrator';var TYPE_KEY='type';var LIST_TYPE_KEY='listType';/**\r\n * Recusrively traverses a module's config properties to find link/list types to transform\r\n *\r\n * @param obj The current object\r\n * @param context The current action context\r\n */var searchForComplexType=function searchForComplexType(obj,context){var promisesArray=[];if(!obj){return promisesArray;}if(Array.isArray(obj)){for(var i=0;i<obj.length;i++){promisesArray.push.apply(promisesArray,_toConsumableArray(searchForComplexType(obj[i],context)));}}else if(_typeof(obj)==='object'&&obj){var children=Object.keys(obj);// Link scenario ('type' is defined)\nif(obj[TYPE_KEY]){promisesArray.push(hydrateLink(obj,context));// ProductList scenario ('list_type') is defined\n}else if(obj[LIST_TYPE_KEY]){promisesArray.push(hydrateProductList(obj,context));}else if(children.length>0){for(var _i=0;_i<children.length;_i++){promisesArray.push.apply(promisesArray,_toConsumableArray(searchForComplexType(obj[children[_i]],context)));}}}return promisesArray;};/**\r\n * Entry point, processes a page response and looks for link and list types\r\n * to transform\r\n *\r\n * @param pageResponse The inital page response\r\n * @param context The current action context\r\n */export var processComplexDataTypes=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(lazyloadAllDataActions,processType,pageSlots,context){var promisesArray;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:promisesArray=processComplexDataTypesAsync(lazyloadAllDataActions,processType,pageSlots,context);if(!promisesArray){_context.next=4;break;}_context.next=4;return Promise.all(promisesArray);case 4:case\"end\":return _context.stop();}}},_callee);}));return function processComplexDataTypes(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();// tslint:disable-next-line: cyclomatic-complexity\nexport var processComplexDataTypesAsync=function processComplexDataTypesAsync(lazyLoadAllDataActions,processType,pageSlots,context){if(pageSlots&&pageSlots.length){var promisesArray=[];var lazyLoadAllModuleQueryString;// Query string switch to lazyLoad all modules\nvar requestContext=context.requestContext;var requestContextFeatures=requestContext.features;var clientRenderModules='clientRender_modules';var clientRenderAllModuleQueryString='client_render_all_modules';// Feature switch for lazyLoading render and data action currenlty for product collection module\nvar lazyLoadModuleFeature=requestContextFeatures[clientRenderModules];// Query param to lazyLoad all modules\nif(requestContext.query&&requestContext.query.clientRenderAllModuleQueryString){lazyLoadAllModuleQueryString=requestContext.query[clientRenderAllModuleQueryString];}// If request is coming from the editor then, turn off all lazyloading feature\nif(requestContext.params&&requestContext.params.isEditor&&requestContext.params.isEditor===true){lazyLoadModuleFeature=false;lazyLoadAllModuleQueryString='false';lazyLoadAllDataActions=false;}for(var i=0;i<pageSlots.length;i++){var currModule=pageSlots[i];var currModuleConfig=currModule.config;var clientRenderConfigSwitch=void 0;// Module config switch for lazyLoading render and data action for product collection module\nif(_typeof(currModuleConfig)==='object'&&currModuleConfig){lazyLoadAllModuleQueryString==='true'?currModuleConfig[\"clientRender\"]=true:clientRenderConfigSwitch;if(currModuleConfig.hasOwnProperty('clientRender')){// When the lazyLoading feature switch is false, turn the lazyloading config switch to false\nif(lazyLoadModuleFeature===false){currModuleConfig[\"clientRender\"]=false;}clientRenderConfigSwitch=currModuleConfig[\"clientRender\"];}}if((lazyLoadAllDataActions||clientRenderConfigSwitch)&&processType===\"client\"/* client */){// When lazyLoad_all feature switch is true or lazyload Module config switch is true and processComplexDataType call is from client, do hydration\npromisesArray.push.apply(promisesArray,_toConsumableArray(searchForComplexType(currModuleConfig,context)));}else if(!lazyLoadAllDataActions&&!clientRenderConfigSwitch&&processType===\"server\"/* server */){// When lazyLoad_all feature switch is OFF, lazyload Module config switch is OFF and processComplexDataType call is from server, do hydration\npromisesArray.push.apply(promisesArray,_toConsumableArray(searchForComplexType(currModuleConfig,context)));}}// tslint:disable-next-line: no-floating-promises\ncontext.runAllActionsInQueue();return promisesArray;}};","map":{"version":3,"sources":["../../../src/hydrators/process-page-response.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { IActionContext, IModuleContract } from '@msdyn365-commerce/core-internal';\nimport { PROCESS_TYPE } from '../consts';\nimport { IProductListMetaData, IServerLink } from './hydrator-action-inputs';\nimport { hydrateLink } from './link-hydrator';\nimport { hydrateProductList } from './product-list-hydrator';\n\nconst TYPE_KEY = 'type';\nconst LIST_TYPE_KEY = 'listType';\n\n/**\n * Recusrively traverses a module's config properties to find link/list types to transform\n *\n * @param obj The current object\n * @param context The current action context\n */\nconst searchForComplexType = (obj: unknown, context: IActionContext): Promise<void>[] => {\n    const promisesArray: Promise<void>[] = [];\n    if (!obj) {\n        return promisesArray;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            promisesArray.push(...searchForComplexType(obj[i], context));\n        }\n    } else if (typeof obj === 'object' && obj) {\n        const children = Object.keys(obj);\n\n        // Link scenario ('type' is defined)\n        if (obj[TYPE_KEY]) {\n            promisesArray.push(hydrateLink(<IServerLink>obj, context));\n            // ProductList scenario ('list_type') is defined\n        } else if (obj[LIST_TYPE_KEY]) {\n            promisesArray.push(hydrateProductList(<IProductListMetaData>obj, context));\n        } else if (children.length > 0) {\n            for (let i = 0; i < children.length; i++) {\n                promisesArray.push(...searchForComplexType(obj[children[i]], context));\n            }\n        }\n    }\n\n    return promisesArray;\n};\n\n/**\n * Entry point, processes a page response and looks for link and list types\n * to transform\n *\n * @param pageResponse The inital page response\n * @param context The current action context\n */\nexport const processComplexDataTypes = async (\n    lazyloadAllDataActions: boolean,\n    processType: string,\n    pageSlots: IModuleContract[],\n    context: IActionContext\n) => {\n    const promisesArray = processComplexDataTypesAsync(lazyloadAllDataActions, processType, pageSlots, context);\n    if (promisesArray) {\n        await Promise.all(promisesArray);\n    }\n};\n\n// tslint:disable-next-line: cyclomatic-complexity\nexport const processComplexDataTypesAsync = (\n    lazyLoadAllDataActions: boolean,\n    processType: string,\n    pageSlots: IModuleContract[],\n    context: IActionContext\n) => {\n    if (pageSlots && pageSlots.length) {\n        const promisesArray: Promise<void>[] = [];\n        let lazyLoadAllModuleQueryString; // Query string switch to lazyLoad all modules\n        const requestContext = context.requestContext;\n        const requestContextFeatures = requestContext.features;\n        const clientRenderModules = 'clientRender_modules';\n        const clientRenderAllModuleQueryString = 'client_render_all_modules';\n\n        // Feature switch for lazyLoading render and data action currenlty for product collection module\n        let lazyLoadModuleFeature = requestContextFeatures[clientRenderModules];\n\n        // Query param to lazyLoad all modules\n        if (requestContext.query && requestContext.query.clientRenderAllModuleQueryString) {\n            lazyLoadAllModuleQueryString = requestContext.query[clientRenderAllModuleQueryString];\n        }\n\n        // If request is coming from the editor then, turn off all lazyloading feature\n        if (requestContext.params && requestContext.params.isEditor && requestContext.params.isEditor === true) {\n            lazyLoadModuleFeature = false;\n            lazyLoadAllModuleQueryString = 'false';\n            lazyLoadAllDataActions = false;\n        }\n\n        for (let i = 0; i < pageSlots.length; i++) {\n            const currModule = pageSlots[i];\n            const currModuleConfig = currModule.config;\n            let clientRenderConfigSwitch; // Module config switch for lazyLoading render and data action for product collection module\n\n            if (typeof currModuleConfig === 'object' && currModuleConfig) {\n                lazyLoadAllModuleQueryString === 'true' ? (currModuleConfig[`clientRender`] = true) : clientRenderConfigSwitch;\n                if (currModuleConfig.hasOwnProperty('clientRender')) {\n                    // When the lazyLoading feature switch is false, turn the lazyloading config switch to false\n                    if (lazyLoadModuleFeature === false) {\n                        currModuleConfig[`clientRender`] = false;\n                    }\n                    clientRenderConfigSwitch = currModuleConfig[`clientRender`];\n                }\n            }\n\n            if ((lazyLoadAllDataActions || clientRenderConfigSwitch) && processType === PROCESS_TYPE.client) {\n                // When lazyLoad_all feature switch is true or lazyload Module config switch is true and processComplexDataType call is from client, do hydration\n                promisesArray.push(...searchForComplexType(currModuleConfig, context));\n            } else if (!lazyLoadAllDataActions && !clientRenderConfigSwitch && processType === PROCESS_TYPE.server) {\n                // When lazyLoad_all feature switch is OFF, lazyload Module config switch is OFF and processComplexDataType call is from server, do hydration\n                promisesArray.push(...searchForComplexType(currModuleConfig, context));\n            }\n        }\n        // tslint:disable-next-line: no-floating-promises\n        context.runAllActionsInQueue();\n        return promisesArray;\n    }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}