{"ast":null,"code":"import{DataServiceQuery}from'../DataServiceQuery';import{ScanResultClass}from'../Entities/CommerceModels.g';import{executeAction}from'../retail-action';function scanResultsQuery(scannedText){var key=scannedText?{ScannedText:scannedText}:null;return new DataServiceQuery(\"ScanResults\",\"ScanResult\",ScanResultClass,key);}export function createCreateInput(entity){return scanResultsQuery().create(entity);}export function createScanResultAsync(context,entity){var request=createCreateInput(entity);return executeAction(request,context);}export function createUpdateInput(entity){return scanResultsQuery(entity.ScannedText).update(entity);}export function updateAsync(context,entity){var request=createUpdateInput(entity);return executeAction(request,context);}export function createDeleteAsync(entity){return scanResultsQuery(entity.ScannedText)[\"delete\"]();}export function deleteAsync(context,entity){var request=createDeleteAsync(entity);return executeAction(request,context);}export function createReadAsync(scannedText){return scanResultsQuery(scannedText).read();}export function readAsync(context,scannedText){var request=createReadAsync(scannedText);return executeAction(request,context);}export function createReadAllAsync(queryResultSettings){return scanResultsQuery().resultSettings(queryResultSettings).read();}export function readAllAsync(context){var request=createReadAllAsync(context.queryResultSettings);return executeAction(request,context);}","map":{"version":3,"sources":["../../src/DataActions/ScanResultsDataActions.g.ts"],"names":[],"mappings":"AAEI,OAAS,gBAAT,KAAiC,qBAAjC,CAEA,OAAS,eAAT,KAAgC,8BAAhC,CAEA,OAAS,aAAT,KAA8B,kBAA9B,CAGA,QAAS,CAAA,gBAAT,CAA0B,WAA1B,CAA8C,CAC5C,GAAI,CAAA,GAAG,CAAI,WAAD,CAAgB,CAAE,WAAW,CAAE,WAAf,CAAhB,CAA+C,IAAzD,CACA,MAAO,IAAI,CAAA,gBAAJ,CAAqB,aAArB,CAAoC,YAApC,CAAkD,eAAlD,CAAmE,GAAnE,CAAP,CACD,CAED,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAA8C,CAChD,MAAO,CAAA,gBAAgB,GAAG,MAAnB,CAA0B,MAA1B,CAAP,CACH,CACD,MAAM,SAAU,CAAA,qBAAV,CAAgC,OAAhC,CAAmD,MAAnD,CAAqE,CACvE,GAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAa,OAAb,CAAsB,OAAtB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAA8C,CAChD,MAAO,CAAA,gBAAgB,CAAC,MAAM,CAAC,WAAR,CAAhB,CAAqC,MAArC,CAA4C,MAA5C,CAAP,CACH,CACD,MAAM,SAAU,CAAA,WAAV,CAAsB,OAAtB,CAAyC,MAAzC,CAA2D,CAC7D,GAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAa,OAAb,CAAsB,OAAtB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAA8C,CAChD,MAAO,CAAA,gBAAgB,CAAC,MAAM,CAAC,WAAR,CAAhB,YAAP,CACH,CACD,MAAM,SAAU,CAAA,WAAV,CAAsB,OAAtB,CAAyC,MAAzC,CAA2D,CAC7D,GAAM,CAAA,OAAO,CAAG,iBAAiB,CAAC,MAAD,CAAjC,CACA,MAAO,CAAA,aAAa,CAAa,OAAb,CAAsB,OAAtB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,eAAV,CAA0B,WAA1B,CAA6C,CAC/C,MAAO,CAAA,gBAAgB,CAAC,WAAD,CAAhB,CAA8B,IAA9B,EAAP,CACH,CACD,MAAM,SAAU,CAAA,SAAV,CAAoB,OAApB,CAAuC,WAAvC,CAA0D,CAC5D,GAAM,CAAA,OAAO,CAAG,eAAe,CAAC,WAAD,CAA/B,CACA,MAAO,CAAA,aAAa,CAAa,OAAb,CAAsB,OAAtB,CAApB,CACH,CACD,MAAM,SAAU,CAAA,kBAAV,CAA6B,mBAA7B,CAAsE,CACxE,MAAO,CAAA,gBAAgB,GAAG,cAAnB,CAAkC,mBAAlC,EAAuD,IAAvD,EAAP,CACH,CACD,MAAM,SAAU,CAAA,YAAV,CAAuB,OAAvB,CAAwC,CAC1C,GAAM,CAAA,OAAO,CAAG,kBAAkB,CAAC,OAAO,CAAC,mBAAT,CAAlC,CACA,MAAO,CAAA,aAAa,CAAe,OAAf,CAAwB,OAAxB,CAApB,CACH","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { ScanResult } from '../Entities/CommerceTypes.g';\n    import { ScanResultClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function scanResultsQuery(scannedText?: string): DataServiceQuery {\n      var key = (scannedText) ? { ScannedText: scannedText } : null;\n      return new DataServiceQuery(\"ScanResults\", \"ScanResult\", ScanResultClass, key);\n    }\n    \n    export function createCreateInput(entity: ScanResult): IDataServiceRequest {\n        return scanResultsQuery().create(entity);\n    }\n    export function createScanResultAsync(context: IContext, entity: ScanResult): AsyncResult<ScanResult> {\n        const request = createCreateInput(entity, );\n        return executeAction<ScanResult>(request, context);\n    }\n    export function createUpdateInput(entity: ScanResult): IDataServiceRequest {\n        return scanResultsQuery(entity.ScannedText).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: ScanResult): AsyncResult<ScanResult> {\n        const request = createUpdateInput(entity, );\n        return executeAction<ScanResult>(request, context);\n    }\n    export function createDeleteAsync(entity: ScanResult): IDataServiceRequest {\n        return scanResultsQuery(entity.ScannedText).delete();\n    }\n    export function deleteAsync(context: IContext, entity: ScanResult): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(scannedText: string): IDataServiceRequest {\n        return scanResultsQuery(scannedText).read();\n    }\n    export function readAsync(context: IContext, scannedText: string): AsyncResult<ScanResult> {\n        const request = createReadAsync(scannedText, );\n        return executeAction<ScanResult>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return scanResultsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<ScanResult[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<ScanResult[]>(request, context);\n    }\n    \n    "],"sourceRoot":""},"metadata":{},"sourceType":"module"}