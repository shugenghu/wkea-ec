{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{buildCacheKey,getSimpleProducts,ProductInput}from'@msdyn365-commerce-modules/retail-actions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getSalesOrderDetailsBySalesIdAsync,getSalesOrderDetailsByTransactionIdAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g';const getSalesOrder=function getSalesOrder(){let orderType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let orderId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';return async ctx=>{return orderType===\"salesOrder\"?getSalesOrderDetailsBySalesIdAsync({callerContext:ctx},orderId):getSalesOrderDetailsByTransactionIdAsync({callerContext:ctx},orderId,3);};};const getProducts=function getProducts(){let productIds=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let channelId=arguments.length>1?arguments[1]:undefined;return async ctx=>{const productInputs=productIds.map(productId=>new ProductInput(productId,ctx.requestContext.apiSettings,channelId));return getSimpleProducts(productInputs,ctx);};};export class GetSalesOrderWithHydrationsInput{constructor(orderType,orderId,apiSettings){this.getCacheKey=()=>buildCacheKey(\"SalesOrderWithHydrations\",this.apiSettings);this.getCacheObjectType=()=>\"SalesOrderWithHydrations-\".concat(this.orderType,\"-\").concat(this.orderId);this.dataCacheType=()=>'request';this.orderType=orderType;this.orderId=orderId;this.apiSettings=apiSettings;}}const createSalesOrderWithHydrationsInput=inputData=>{const{salesId='',transactionId=''}=inputData.requestContext.query&&inputData.requestContext.query||{};if(salesId){return new GetSalesOrderWithHydrationsInput(\"salesOrder\",salesId,inputData.requestContext.apiSettings);}else if(transactionId){return new GetSalesOrderWithHydrationsInput(\"transaction\",transactionId,inputData.requestContext.apiSettings);}throw new Error(\"createSalesOrderWithHydrationsInput - No salesId or transactionId provided.\");};export async function getSalesOrderWithHydrationsAction(input,ctx){if(!ctx){throw new Error(\"getSalesOrderWithHydrationsAction - Action context cannot be null/undefined\");}const{orderType,orderId}=input;if(!orderType||!orderId){ctx.trace(\"[getSalesOrderWithHydrationsAction] No orderType or orderId provided.\");return{};}const salesOrder=await getSalesOrder(orderType,orderId)(ctx);if(!salesOrder||!salesOrder.SalesLines||!salesOrder.SalesLines.length){ctx.trace(\"[getSalesOrderWithHydrationsAction] No salesLine found.\");return{};}const productIds=salesOrder.SalesLines.map(salesLine=>salesLine.ProductId||0).filter(productId=>productId);if(!productIds||!productIds.length){ctx.trace(\"[getSalesOrderWithHydrationsAction] No productId in saleLines found.\");return{};}const products=await getProducts(productIds,salesOrder.ChannelId)(ctx);if(!products||!products.length){ctx.trace(\"[getSalesOrderWithHydrationsAction] No product found.\");return{};}return{salesOrder,products};}export default createObservableDataAction({id:'@msdyn365-commerce-modules/order-management/get-sales-order-with-hydrations',action:getSalesOrderWithHydrationsAction,input:createSalesOrderWithHydrationsInput});","map":{"version":3,"sources":["actions/get-sales-order-with-hydrations.ts"],"names":[],"mappings":"sCAAA,OAAS,aAAT,CAAwB,iBAAxB,CAA2C,YAA3C,KAA+D,2CAA/D,CACA,OAAoB,0BAApB,KAAyI,yBAAzI,CAEA,OAAS,kCAAT,CAA6C,wCAA7C,KAA6F,2EAA7F,CAkBA,KAAM,CAAA,aAAa,CAAG,QAAhB,CAAA,aAAgB,MAAC,CAAA,SAAD,2DAAqB,EAArB,IAAyB,CAAA,OAAzB,2DAA2C,EAA3C,OAAkD,MAAO,CAAA,GAAP,EAAmD,CACvH,MAAO,CAAA,SAAS,GAAA,YAAT,CACD,kCAAkC,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAyB,OAAzB,CADjC,CAID,wCAAwC,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAyB,OAAzB,CAAkC,CAAlC,CAJ9C,CAKH,CANqB,EAAtB,CAWA,KAAM,CAAA,WAAW,CAAG,QAAd,CAAA,WAAc,MAAC,CAAA,UAAD,2DAAwB,EAAxB,IAA4B,CAAA,SAA5B,iDAAmD,MAAO,CAAA,GAAP,EAAwD,CAC3H,KAAM,CAAA,aAAa,CAAG,UAAU,CAAC,GAAX,CAAe,SAAS,EAAI,GAAI,CAAA,YAAJ,CAAiB,SAAjB,CAA4B,GAAG,CAAC,cAAJ,CAAmB,WAA/C,CAA4D,SAA5D,CAA5B,CAAtB,CACA,MAAO,CAAA,iBAAiB,CAAC,aAAD,CAAgB,GAAhB,CAAxB,CACH,CAHmB,EAApB,CAQA,MAAM,MAAO,CAAA,gCAAgC,CAKzC,WAAA,CAAY,SAAZ,CAAgC,OAAhC,CAAiD,WAAjD,CAAkF,CAM3E,KAAA,WAAA,CAAc,IAAM,aAAa,4BAA6B,KAAK,WAAlC,CAAjC,CACA,KAAA,kBAAA,CAAqB,uCAAkC,KAAK,SAAvC,aAAoD,KAAK,OAAzD,CAArB,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CAPH,KAAK,SAAL,CAAiB,SAAjB,CACA,KAAK,OAAL,CAAe,OAAf,CACA,KAAK,WAAL,CAAmB,WAAnB,CACH,CATwC,CAmB7C,KAAM,CAAA,mCAAmC,CAAI,SAAD,EAAoC,CAC5E,KAAM,CAAE,OAAO,CAAG,EAAZ,CAAgB,aAAa,CAAG,EAAhC,EAAwC,SAAS,CAAC,cAAV,CAAyB,KAAzB,EAAkC,SAAS,CAAC,cAAV,CAAyB,KAA5D,EAAsE,EAAnH,CACA,GAAI,OAAJ,CAAa,CACT,MAAO,IAAI,CAAA,gCAAJ,CAAoC,YAApC,CAA4D,OAA5D,CAAqE,SAAS,CAAC,cAAV,CAAyB,WAA9F,CAAP,CACH,CAFD,IAEO,IAAI,aAAJ,CAAmB,CACtB,MAAO,IAAI,CAAA,gCAAJ,CAAoC,aAApC,CAA6D,aAA7D,CAA4E,SAAS,CAAC,cAAV,CAAyB,WAArG,CAAP,CACH,CACD,KAAM,IAAI,CAAA,KAAJ,+EAAN,CACH,CARD,CAaA,MAAO,eAAe,CAAA,iCAAf,CACH,KADG,CAEH,GAFG,CAEgB,CAEnB,GAAI,CAAC,GAAL,CAAU,CACN,KAAM,IAAI,CAAA,KAAJ,+EAAN,CACH,CAED,KAAM,CAAE,SAAF,CAAa,OAAb,EAAyB,KAA/B,CAEA,GAAI,CAAC,SAAD,EAAc,CAAC,OAAnB,CAA4B,CACxB,GAAG,CAAC,KAAJ,0EACA,MAAkC,EAAlC,CACH,CAED,KAAM,CAAA,UAAU,CAAG,KAAM,CAAA,aAAa,CAAC,SAAD,CAAY,OAAZ,CAAb,CAAkC,GAAlC,CAAzB,CAEA,GAAI,CAAC,UAAD,EAAe,CAAC,UAAU,CAAC,UAA3B,EAAyC,CAAC,UAAU,CAAC,UAAX,CAAsB,MAApE,CAA4E,CACxE,GAAG,CAAC,KAAJ,4DACA,MAAkC,EAAlC,CACH,CAED,KAAM,CAAA,UAAU,CAAa,UAAU,CAAC,UAAX,CAAsB,GAAtB,CAA0B,SAAS,EAAI,SAAS,CAAC,SAAV,EAAuB,CAA9D,EAAiE,MAAjE,CAAwE,SAAS,EAAI,SAArF,CAA7B,CAEA,GAAI,CAAC,UAAD,EAAe,CAAC,UAAU,CAAC,MAA/B,CAAuC,CACnC,GAAG,CAAC,KAAJ,yEACA,MAAkC,EAAlC,CACH,CAED,KAAM,CAAA,QAAQ,CAAG,KAAM,CAAA,WAAW,CAAC,UAAD,CAAa,UAAU,CAAC,SAAxB,CAAX,CAA8C,GAA9C,CAAvB,CAEA,GAAI,CAAC,QAAD,EAAa,CAAC,QAAQ,CAAC,MAA3B,CAAmC,CAC/B,GAAG,CAAC,KAAJ,0DACA,MAAkC,EAAlC,CACH,CAED,MAAkC,CAC9B,UAD8B,CAE9B,QAF8B,CAAlC,CAIH,CAED,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,6EADkC,CAEtC,MAAM,CAAsC,iCAFN,CAGtC,KAAK,CAAE,mCAH+B,CAAD,CAAzC","sourcesContent":["import { buildCacheKey, getSimpleProducts, ProductInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, ICommerceApiSettings, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { SalesOrder, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { getSalesOrderDetailsBySalesIdAsync, getSalesOrderDetailsByTransactionIdAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/SalesOrdersDataActions.g';\n\ninterface ISalesOrderWithHydrations {\n    salesOrder: SalesOrder;\n    products: SimpleProduct[];\n}\n\n/**\n *  orderTypes Types of orders\n */\nexport const enum orderTypes {\n    salesOrder = 'salesOrder',\n    transaction = 'transaction'\n}\n\n/**\n * Calls the Retail API and returns the sales order\n */\nconst getSalesOrder = (orderType: string = '', orderId: string = '') => async (ctx: IActionContext): Promise<SalesOrder> => {\n    return orderType === orderTypes.salesOrder\n        ? getSalesOrderDetailsBySalesIdAsync({ callerContext: ctx }, orderId)\n        : //  Local (1) searches the retail server database, and remote (2) searches\n          // on the headquarters side. All (3) and none (0) are not supported.\n          getSalesOrderDetailsByTransactionIdAsync({ callerContext: ctx }, orderId, 3);\n};\n\n/**\n * Calls the Retail API and returns the products\n */\nconst getProducts = (productIds: number[] = [], channelId?: number) => async (ctx: IActionContext): Promise<SimpleProduct[]> => {\n    const productInputs = productIds.map(productId => new ProductInput(productId, ctx.requestContext.apiSettings, channelId));\n    return getSimpleProducts(productInputs, ctx);\n};\n\n/**\n *  Action input\n */\nexport class GetSalesOrderWithHydrationsInput implements IActionInput {\n    public orderType: string;\n    public orderId: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(orderType: string , orderId: string, apiSettings: ICommerceApiSettings) {\n        this.orderType = orderType;\n        this.orderId = orderId;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`SalesOrderWithHydrations`, this.apiSettings);\n    public getCacheObjectType = () => `SalesOrderWithHydrations-${this.orderType}-${this.orderId}`;\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createSalesOrderWithHydrationsInput = (inputData: ICreateActionContext) => {\n    const { salesId = '', transactionId = '' } = (inputData.requestContext.query && inputData.requestContext.query) || {};\n    if (salesId) {\n        return new GetSalesOrderWithHydrationsInput(orderTypes.salesOrder, salesId, inputData.requestContext.apiSettings);\n    } else if (transactionId) {\n        return new GetSalesOrderWithHydrationsInput(orderTypes.transaction, transactionId, inputData.requestContext.apiSettings);\n    }\n    throw new Error(`createSalesOrderWithHydrationsInput - No salesId or transactionId provided.`);\n};\n\n/**\n * Get sales order with hydrations action\n */\nexport async function getSalesOrderWithHydrationsAction(\n    input: GetSalesOrderWithHydrationsInput,\n    ctx: IActionContext\n): Promise<ISalesOrderWithHydrations> {\n    if (!ctx) {\n        throw new Error(`getSalesOrderWithHydrationsAction - Action context cannot be null/undefined`);\n    }\n\n    const { orderType, orderId } = input;\n\n    if (!orderType || !orderId) {\n        ctx.trace(`[getSalesOrderWithHydrationsAction] No orderType or orderId provided.`);\n        return <ISalesOrderWithHydrations>{};\n    }\n\n    const salesOrder = await getSalesOrder(orderType, orderId)(ctx);\n\n    if (!salesOrder || !salesOrder.SalesLines || !salesOrder.SalesLines.length) {\n        ctx.trace(`[getSalesOrderWithHydrationsAction] No salesLine found.`);\n        return <ISalesOrderWithHydrations>{};\n    }\n\n    const productIds: number[] = salesOrder.SalesLines.map(salesLine => salesLine.ProductId || 0).filter(productId => productId);\n\n    if (!productIds || !productIds.length) {\n        ctx.trace(`[getSalesOrderWithHydrationsAction] No productId in saleLines found.`);\n        return <ISalesOrderWithHydrations>{};\n    }\n\n    const products = await getProducts(productIds, salesOrder.ChannelId)(ctx);\n\n    if (!products || !products.length) {\n        ctx.trace(`[getSalesOrderWithHydrationsAction] No product found.`);\n        return <ISalesOrderWithHydrations>{};\n    }\n\n    return <ISalesOrderWithHydrations>{\n        salesOrder,\n        products\n    };\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/order-management/get-sales-order-with-hydrations',\n    action: <IAction<ISalesOrderWithHydrations>>getSalesOrderWithHydrationsAction,\n    input: createSalesOrderWithHydrationsInput\n});"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}