{"ast":null,"code":"import{DataServiceQuery}from'../DataServiceQuery';import{StockCountJournalClass,StockCountJournalTransactionClass}from'../Entities/CommerceModels.g';import{executeAction}from'../retail-action';function stockCountJournalsQuery(journalId){var key=journalId?{JournalId:journalId}:null;return new DataServiceQuery(\"StockCountJournals\",\"StockCountJournal\",StockCountJournalClass,key);}export function createCreateInput(entity){return stockCountJournalsQuery().create(entity);}export function createStockCountJournalAsync(context,entity){const request=createCreateInput(entity);return executeAction(request,context);}export function createUpdateInput(entity){return stockCountJournalsQuery(entity.JournalId).update(entity);}export function updateAsync(context,entity){const request=createUpdateInput(entity);return executeAction(request,context);}export function createDeleteAsync(entity){return stockCountJournalsQuery(entity.JournalId).delete();}export function deleteAsync(context,entity){const request=createDeleteAsync(entity);return executeAction(request,context);}export function createReadAsync(journalId){return stockCountJournalsQuery(journalId).read();}export function readAsync(context,journalId){const request=createReadAsync(journalId);return executeAction(request,context);}export function createReadAllAsync(queryResultSettings){return stockCountJournalsQuery().resultSettings(queryResultSettings).read();}export function readAllAsync(context){const request=createReadAllAsync(context.queryResultSettings);return executeAction(request,context);}export function createSyncInput(queryResultSettings){const query=stockCountJournalsQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('Sync',true,StockCountJournalClass,'true',{bypassCache:'get',returnEntity:'StockCountJournal'},{});}export function syncAsync(context){const request=createSyncInput(context.queryResultSettings);return executeAction(request,context);}export function createSyncTransactionsInput(queryResultSettings,journalId){const query=stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('SyncTransactions',true,StockCountJournalTransactionClass,'true',{bypassCache:'get',returnEntity:'StockCountJournalTransaction'},{});}export function syncTransactionsAsync(context,journalId){const request=createSyncTransactionsInput(context.queryResultSettings,journalId);return executeAction(request,context);}export function createCalculateEstimatedOnHandInventoryInput(queryResultSettings,journalId){const query=stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('CalculateEstimatedOnHandInventory',true,StockCountJournalTransactionClass,'true',{bypassCache:'get',returnEntity:'StockCountJournalTransaction'},{});}export function calculateEstimatedOnHandInventoryAsync(context,journalId){const request=createCalculateEstimatedOnHandInventoryInput(context.queryResultSettings,journalId);return executeAction(request,context);}export function createRemoveJournalInput(journalId){const query=stockCountJournalsQuery(journalId);return query.createDataServiceRequestForOperation('RemoveJournal',true,'','',{bypassCache:'get',returnEntity:''},{});}export function removeJournalAsync(context,journalId){const request=createRemoveJournalInput(journalId);return executeAction(request,context);}export function createRemoveTransactionInput(journalId,itemId,inventSizeId,inventColorId,inventStyleId,configurationId){const query=stockCountJournalsQuery(journalId);return query.createDataServiceRequestForOperation('RemoveTransaction',true,'','',{bypassCache:'get',returnEntity:''},{itemId:itemId,inventSizeId:inventSizeId,inventColorId:inventColorId,inventStyleId:inventStyleId,configurationId:configurationId});}export function removeTransactionAsync(context,journalId,itemId,inventSizeId,inventColorId,inventStyleId,configurationId){const request=createRemoveTransactionInput(journalId,itemId,inventSizeId,inventColorId,inventStyleId,configurationId);return executeAction(request,context);}export function createRemoveStockCountLineByLineIdInput(journalId,stockCountLineId){const query=stockCountJournalsQuery(journalId);return query.createDataServiceRequestForOperation('RemoveStockCountLineByLineId',true,'','',{bypassCache:'get',returnEntity:''},{stockCountLineId:stockCountLineId});}export function removeStockCountLineByLineIdAsync(context,journalId,stockCountLineId){const request=createRemoveStockCountLineByLineIdInput(journalId,stockCountLineId);return executeAction(request,context);}export function createRemoveStockCountLineByProductRecIdInput(journalId,productId){const query=stockCountJournalsQuery(journalId);return query.createDataServiceRequestForOperation('RemoveStockCountLineByProductRecId',true,'','',{bypassCache:'get',returnEntity:''},{productId:productId});}export function removeStockCountLineByProductRecIdAsync(context,journalId,productId){const request=createRemoveStockCountLineByProductRecIdInput(journalId,productId);return executeAction(request,context);}export function createCommitInput(journalId){const query=stockCountJournalsQuery(journalId);return query.createDataServiceRequestForOperation('Commit',true,'','',{bypassCache:'get',returnEntity:''},{});}export function commitAsync(context,journalId){const request=createCommitInput(journalId);return executeAction(request,context);}","map":{"version":3,"sources":["../../src/DataActions/StockCountJournalsDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { StockCountJournal, StockCountJournalTransaction } from '../Entities/CommerceTypes.g';\n    import { StockCountJournalClass, StockCountJournalTransactionClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function stockCountJournalsQuery(journalId?: string): DataServiceQuery {\n      var key = (journalId) ? { JournalId: journalId } : null;\n      return new DataServiceQuery(\"StockCountJournals\", \"StockCountJournal\", StockCountJournalClass, key);\n    }\n    \n    export function createCreateInput(entity: StockCountJournal): IDataServiceRequest {\n        return stockCountJournalsQuery().create(entity);\n    }\n    export function createStockCountJournalAsync(context: IContext, entity: StockCountJournal): AsyncResult<StockCountJournal> {\n        const request = createCreateInput(entity, );\n        return executeAction<StockCountJournal>(request, context);\n    }\n    export function createUpdateInput(entity: StockCountJournal): IDataServiceRequest {\n        return stockCountJournalsQuery(entity.JournalId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: StockCountJournal): AsyncResult<StockCountJournal> {\n        const request = createUpdateInput(entity, );\n        return executeAction<StockCountJournal>(request, context);\n    }\n    export function createDeleteAsync(entity: StockCountJournal): IDataServiceRequest {\n        return stockCountJournalsQuery(entity.JournalId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: StockCountJournal): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(journalId: string): IDataServiceRequest {\n        return stockCountJournalsQuery(journalId).read();\n    }\n    export function readAsync(context: IContext, journalId: string): AsyncResult<StockCountJournal> {\n        const request = createReadAsync(journalId, );\n        return executeAction<StockCountJournal>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return stockCountJournalsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<StockCountJournal[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<StockCountJournal[]>(request, context);\n    }\n    \n    export function createSyncInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      \n        const query = stockCountJournalsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('Sync', true, StockCountJournalClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournal'}, { });\n    }    \n    \n    export function syncAsync(context: IContext):AsyncResult<StockCountJournal[]> {\n        const request = createSyncInput(context.queryResultSettings, );\n        return executeAction<StockCountJournal[]>(request, context);\n    }          \n          \n    export function createSyncTransactionsInput(queryResultSettings: IQueryResultSettings, journalId: string): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SyncTransactions', true, StockCountJournalTransactionClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournalTransaction'}, { });\n    }    \n    \n    export function syncTransactionsAsync(context: IContext, journalId: string):AsyncResult<StockCountJournalTransaction[]> {\n        const request = createSyncTransactionsInput(context.queryResultSettings, journalId, );\n        return executeAction<StockCountJournalTransaction[]>(request, context);\n    }          \n          \n    export function createCalculateEstimatedOnHandInventoryInput(queryResultSettings: IQueryResultSettings, journalId: string): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('CalculateEstimatedOnHandInventory', true, StockCountJournalTransactionClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournalTransaction'}, { });\n    }    \n    \n    export function calculateEstimatedOnHandInventoryAsync(context: IContext, journalId: string):AsyncResult<StockCountJournalTransaction[]> {\n        const request = createCalculateEstimatedOnHandInventoryInput(context.queryResultSettings, journalId, );\n        return executeAction<StockCountJournalTransaction[]>(request, context);\n    }          \n          \n    export function createRemoveJournalInput(journalId: string): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('RemoveJournal', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });\n    }    \n    \n    export function removeJournalAsync(context: IContext, journalId: string):AsyncResult<NullResult> {\n        const request = createRemoveJournalInput(journalId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createRemoveTransactionInput(journalId: string, itemId: string | null, inventSizeId: string | null, inventColorId: string | null, inventStyleId: string | null, configurationId: string | null): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('RemoveTransaction', true, '', '', { bypassCache: 'get', returnEntity: ''}, {itemId: itemId, inventSizeId: inventSizeId, inventColorId: inventColorId, inventStyleId: inventStyleId, configurationId: configurationId });\n    }    \n    \n    export function removeTransactionAsync(context: IContext, journalId: string, itemId: string | null, inventSizeId: string | null, inventColorId: string | null, inventStyleId: string | null, configurationId: string | null):AsyncResult<NullResult> {\n        const request = createRemoveTransactionInput(journalId, itemId, inventSizeId, inventColorId, inventStyleId, configurationId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createRemoveStockCountLineByLineIdInput(journalId: string, stockCountLineId: number): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('RemoveStockCountLineByLineId', true, '', '', { bypassCache: 'get', returnEntity: ''}, {stockCountLineId: stockCountLineId });\n    }    \n    \n    export function removeStockCountLineByLineIdAsync(context: IContext, journalId: string, stockCountLineId: number):AsyncResult<NullResult> {\n        const request = createRemoveStockCountLineByLineIdInput(journalId, stockCountLineId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createRemoveStockCountLineByProductRecIdInput(journalId: string, productId: number): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('RemoveStockCountLineByProductRecId', true, '', '', { bypassCache: 'get', returnEntity: ''}, {productId: productId });\n    }    \n    \n    export function removeStockCountLineByProductRecIdAsync(context: IContext, journalId: string, productId: number):AsyncResult<NullResult> {\n        const request = createRemoveStockCountLineByProductRecIdInput(journalId, productId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createCommitInput(journalId: string): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });\n    }    \n    \n    export function commitAsync(context: IContext, journalId: string):AsyncResult<NullResult> {\n        const request = createCommitInput(journalId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    "],"sourceRoot":""},"metadata":{},"sourceType":"module"}