{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{TelemetryEvent}from'../interfaces';/**\r\n * Commerce Insights logger that sends events to MS clickstream pipeline\r\n */export var CommerceInsightsLogger=/*#__PURE__*/function(){function CommerceInsightsLogger(){var _this=this;_classCallCheck(this,CommerceInsightsLogger);/**\r\n         * Registers the Web Analytics plugin for use with the Commerce Insights logger\r\n         */this.registerWebAnalyticsPlugin=function(webAnalyticsPlugin){_this._client=webAnalyticsPlugin;};/*\r\n         * Converts ICustomEvent data into the format 1DS expects\r\n         * @param payload Telemetry event data to convert\r\n        private _populateCustomEvent(\r\n            payload: ICustomEvent\r\n        ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\r\n            return {\r\n                contentCategory: payload.contentCategory,\r\n                contentAction: payload.contentAction || {}\r\n            };\r\n        }\r\n         */}/**\r\n     * Sends the given event to the Commerce Insights data pipeline\r\n     * @param eventType Type of event to log\r\n     * @param payload Extra parameters dependent on the eventType\r\n     */_createClass(CommerceInsightsLogger,[{key:\"logEvent\",value:function logEvent(eventType,payload){// Can't log if Web Analytics plugin not initialized\nif(this._client===undefined){return;}var eventData;var eventName;// Check event type and convert to appropriate schema\nswitch(eventType){case TelemetryEvent.PageView:// TODO (matt, 6/15/20): Filtering all manual page views, undo once 1DS forwarding to framework implemented\nreturn;/* if (this._isPageViewInfo(payload)) {\r\n                    eventName = TelemetryEvent.PageView;\r\n                    eventData = this._populatePageViewInfo(payload);\r\n                } else {\r\n                    console.error('PageView event needs PageViewInfo data'); return;\r\n                }\r\n                break; */case TelemetryEvent.ProductPageView:if(this._isCartInfo(payload)){eventName=TelemetryEvent.ProductPageView;eventData=this._populateCartInfo(payload);}else{console.error('ProductPageView event needs an array of ProductUnit data');return;}break;case TelemetryEvent.AddToCart:if(this._isCartInfo(payload)){eventName=TelemetryEvent.AddToCart;eventData=this._populateCartInfo(payload);}else{console.error('AddToCart event needs an array of ProductUnit data');return;}break;case TelemetryEvent.RemoveFromCart:if(this._isCartInfo(payload)){eventName=TelemetryEvent.RemoveFromCart;eventData=this._populateCartInfo(payload);}else{console.error('RemoveFromCart event needs an array of ProductUnit data');return;}break;case TelemetryEvent.UpdateInCart:if(this._isCartInfo(payload)){eventName=TelemetryEvent.UpdateInCart;eventData=this._populateCartInfo(payload);}else{console.error('UpdateInCart event needs an array of ProductUnit data');return;}break;case TelemetryEvent.CheckOut:if(this._isCartInfo(payload)){eventName=TelemetryEvent.CheckOut;eventData=this._populateCartInfo(payload);}else{console.error('CheckOut event needs an array of ProductUnit data');return;}break;case TelemetryEvent.Purchase:if(this._isProductTransaction(payload)){eventName=TelemetryEvent.Purchase;eventData=this._populateProductTransaction(payload);}else{console.error('Purchase event needs ProductTransaction data');return;}break;case TelemetryEvent.Custom:// TODO (matt, 6/15/20): Filtering all manual page views, undo once 1DS forwarding to framework implemented\nreturn;/* if (this._isCustomEvent(payload)) {\r\n                    eventName = TelemetryEvent.Custom;\r\n                    eventData = this._populateCustomEvent(payload);\r\n                } else {\r\n                    console.error('Custom event needs CustomEvent data'); return;\r\n                }\r\n                break; */default:eventName='';}// Log event\nthis._client.trackEvent({name:eventName,baseType:'EventData',baseData:{name:eventName},data:eventData});return;}/*\r\n     * Determines if the telemetry event data is IPageViewInfo\r\n     * @param payload Telemetry event data to check\r\n    private _isPageViewInfo(payload: TelemetryEventContent): payload is IPageViewInfo {\r\n        return (<IPageViewInfo>payload).title !== undefined;\r\n    }\r\n     */ /**\r\n     * Determines if the telemetry event data is array of ICartInfo\r\n     * @param payload Telemetry event data to check\r\n     */},{key:\"_isCartInfo\",value:function _isCartInfo(payload){return payload.cartId!==undefined;}/**\r\n     * Determines if the telemetry event data is IProductTransaction\r\n     * @param payload Telemetry event data to check\r\n     */},{key:\"_isProductTransaction\",value:function _isProductTransaction(payload){return payload.id!==undefined;}/*\r\n     * Determines if the telemetry event data is ICustomEvent\r\n     * @param payload Telemetry event data to check\r\n    private _isCustomEvent(payload: TelemetryEventContent): payload is ICustomEvent {\r\n        return (<ICustomEvent>payload).contentCategory !== undefined;\r\n    }\r\n     */ /*\r\n     * Converts IPageViewInfo data into the format 1DS expects\r\n     * @param payload Telemetry event data to convert\r\n    private _populatePageViewInfo(\r\n        payload: IPageViewInfo\r\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\r\n        return {\r\n            title: payload.title,\r\n            location: payload.location || '',\r\n            page: payload.page || ''\r\n        };\r\n    }\r\n     */ /**\r\n     * Converts ICartInfo data into the format 1DS expects\r\n     * @param payload Telemetry event data to convert\r\n     */},{key:\"_populateCartInfo\",value:function _populateCartInfo(payload){var _this2=this;var productArray=[];payload.products.forEach(function(product){productArray.push(_this2._populateProductInfo(product));});return{products:productArray,orderId:payload.orderId||'',cartId:payload.cartId||'',cartVersion:payload.cartVersion||''};}/**\r\n     * Converts IProductInfo data into the format 1DS expects\r\n     * @param payload Telemetry event data to convert\r\n     */},{key:\"_populateProductInfo\",value:function _populateProductInfo(payload){return{productChannelId:payload.productChannelId||'',productChannelName:payload.productChannelName||'',productCategoryId:payload.productCategoryId||'',productCategoryName:payload.productCategoryName||'',productId:payload.productId||'',productName:payload.productName||'',productSku:payload.productSku||'',productPrice:payload.productPrice||'',productQuantity:payload.productQuantity||'',productCurrency:payload.productCurrency||''};}/**\r\n     * Converts IProductTransaction data into the format 1DS expects\r\n     * @param payload Telemetry event data to convert\r\n     */},{key:\"_populateProductTransaction\",value:function _populateProductTransaction(payload){var _this3=this;var productArray=[];if(payload.products){payload.products.forEach(function(product){productArray.push(_this3._populateProductInfo(product));});}return{id:payload.id,affiliation:payload.affiliation||'',revenue:payload.revenue||-1,tax:payload.tax||-1,shippingCost:payload.shippingCost||-1,products:productArray};}}]);return CommerceInsightsLogger;}();","map":{"version":3,"sources":["../../../src/event-loggers/commerce-insights-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport {\n    ICartInfo,\n    // ICustomEvent,\n    IEventLogger,\n    // IPageViewInfo,\n    IProductInfo,\n    IProductTransaction,\n    TelemetryEvent,\n    TelemetryEventContent\n} from '../interfaces';\n\n/**\n * Commerce Insights logger that sends events to MS clickstream pipeline\n */\nexport class CommerceInsightsLogger implements IEventLogger {\n    // tslint:disable-next-line:no-any\n    private _client: any;\n\n    /**\n     * Registers the Web Analytics plugin for use with the Commerce Insights logger\n     */\n    public registerWebAnalyticsPlugin = (webAnalyticsPlugin: object): void => {\n        this._client = webAnalyticsPlugin;\n    };\n\n    /**\n     * Sends the given event to the Commerce Insights data pipeline\n     * @param eventType Type of event to log\n     * @param payload Extra parameters dependent on the eventType\n     */\n    public logEvent(eventType: TelemetryEvent, payload: TelemetryEventContent): void {\n        // Can't log if Web Analytics plugin not initialized\n        if (this._client === undefined) {\n            return;\n        }\n\n        let eventData: { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } | undefined;\n        let eventName: string;\n\n        // Check event type and convert to appropriate schema\n        switch (eventType) {\n            case TelemetryEvent.PageView:\n                // TODO (matt, 6/15/20): Filtering all manual page views, undo once 1DS forwarding to framework implemented\n                return;\n            /* if (this._isPageViewInfo(payload)) {\n                    eventName = TelemetryEvent.PageView;\n                    eventData = this._populatePageViewInfo(payload);\n                } else {\n                    console.error('PageView event needs PageViewInfo data'); return;\n                }\n                break; */\n            case TelemetryEvent.ProductPageView:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.ProductPageView;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('ProductPageView event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.AddToCart:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.AddToCart;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('AddToCart event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.RemoveFromCart:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.RemoveFromCart;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('RemoveFromCart event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.UpdateInCart:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.UpdateInCart;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('UpdateInCart event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.CheckOut:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.CheckOut;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('CheckOut event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.Purchase:\n                if (this._isProductTransaction(payload)) {\n                    eventName = TelemetryEvent.Purchase;\n                    eventData = this._populateProductTransaction(payload);\n                } else {\n                    console.error('Purchase event needs ProductTransaction data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.Custom:\n                // TODO (matt, 6/15/20): Filtering all manual page views, undo once 1DS forwarding to framework implemented\n                return;\n            /* if (this._isCustomEvent(payload)) {\n                    eventName = TelemetryEvent.Custom;\n                    eventData = this._populateCustomEvent(payload);\n                } else {\n                    console.error('Custom event needs CustomEvent data'); return;\n                }\n                break; */\n            default:\n                eventName = '';\n        }\n\n        // Log event\n        this._client.trackEvent({\n            name: eventName,\n            baseType: 'EventData',\n            baseData: { name: eventName },\n            data: eventData\n        });\n\n        return;\n    }\n\n    /*\n     * Determines if the telemetry event data is IPageViewInfo\n     * @param payload Telemetry event data to check\n    private _isPageViewInfo(payload: TelemetryEventContent): payload is IPageViewInfo {\n        return (<IPageViewInfo>payload).title !== undefined;\n    }\n     */\n\n    /**\n     * Determines if the telemetry event data is array of ICartInfo\n     * @param payload Telemetry event data to check\n     */\n    private _isCartInfo(payload: TelemetryEventContent): payload is ICartInfo {\n        return (<ICartInfo>payload).cartId !== undefined;\n    }\n\n    /**\n     * Determines if the telemetry event data is IProductTransaction\n     * @param payload Telemetry event data to check\n     */\n    private _isProductTransaction(payload: TelemetryEventContent): payload is IProductTransaction {\n        return (<IProductTransaction>payload).id !== undefined;\n    }\n\n    /*\n     * Determines if the telemetry event data is ICustomEvent\n     * @param payload Telemetry event data to check\n    private _isCustomEvent(payload: TelemetryEventContent): payload is ICustomEvent {\n        return (<ICustomEvent>payload).contentCategory !== undefined;\n    }\n     */\n\n    /*\n     * Converts IPageViewInfo data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n    private _populatePageViewInfo(\n        payload: IPageViewInfo\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        return {\n            title: payload.title,\n            location: payload.location || '',\n            page: payload.page || ''\n        };\n    }\n     */\n\n    /**\n     * Converts ICartInfo data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n     */\n    private _populateCartInfo(payload: ICartInfo): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        const productArray: { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] }[] = [];\n\n        payload.products.forEach(product => {\n            productArray.push(this._populateProductInfo(product));\n        });\n\n        return {\n            products: productArray,\n            orderId: payload.orderId || '',\n            cartId: payload.cartId || '',\n            cartVersion: payload.cartVersion || ''\n        };\n    }\n\n    /**\n     * Converts IProductInfo data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n     */\n    private _populateProductInfo(\n        payload: IProductInfo\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        return {\n            productChannelId: payload.productChannelId || '',\n            productChannelName: payload.productChannelName || '',\n            productCategoryId: payload.productCategoryId || '',\n            productCategoryName: payload.productCategoryName || '',\n            productId: payload.productId || '',\n            productName: payload.productName || '',\n            productSku: payload.productSku || '',\n            productPrice: payload.productPrice || '',\n            productQuantity: payload.productQuantity || '',\n            productCurrency: payload.productCurrency || ''\n        };\n    }\n\n    /**\n     * Converts IProductTransaction data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n     */\n    private _populateProductTransaction(\n        payload: IProductTransaction\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        const productArray: { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] }[] = [];\n\n        if (payload.products) {\n            payload.products.forEach(product => {\n                productArray.push(this._populateProductInfo(product));\n            });\n        }\n\n        return {\n            id: payload.id,\n            affiliation: payload.affiliation || '',\n            revenue: payload.revenue || -1,\n            tax: payload.tax || -1,\n            shippingCost: payload.shippingCost || -1,\n            products: productArray\n        };\n    }\n\n    /*\n     * Converts ICustomEvent data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n    private _populateCustomEvent(\n        payload: ICustomEvent\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        return {\n            contentCategory: payload.contentCategory,\n            contentAction: payload.contentAction || {}\n        };\n    }\n     */\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}