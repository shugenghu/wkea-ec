{"ast":null,"code":"import\"core-js/modules/es.object.assign.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{__decorate}from\"tslib\";import*as Msdyn365 from'@msdyn365-commerce/core';import classnames from'classnames';import{observable}from'mobx';import{observer}from'mobx-react';import*as React from'react';import{getTelemetryObject,Modal,ModalBody}from'@msdyn365-commerce-modules/utilities';import AccountProfileEditButtonComponent from'./components/account-profile-edit-button';import AccountProfileEditErrorComponent from'./components/account-profile-edit-error';import AccountProfileEditInputComponent from'./components/account-profile-edit-input';import AccountProfileEditLabelComponent from'./components/account-profile-edit-label';import AccountProfileEditLoadingIconComponent from'./components/account-profile-edit-loading-icon';import AccountProfileEditLoadingMessageComponent from'./components/account-profile-edit-loading-message';let AccountProfileEdit=class AccountProfileEdit extends React.Component{constructor(props){super(props);this.moduleClassName='ms-account-profile-edit';this.handleHeadingChange=event=>this.props.config.heading.text=event.target.value;this.onTextBoxChange=event=>{const id=event.target.id;const value=event.target.value;switch(id.toLowerCase()){case'givenname':{this.givenName=value;break;}case'surname':{this.surname=value;break;}case'email':{this.emailRegex=value;break;}default:}};this._onInit=()=>{this._prePopulateData();this._updateErrorMessage();this.initializationTimer=setInterval(()=>{this._isInitializationSuccessful();},100);setTimeout(()=>{clearInterval(this.initializationTimer);},10000);};this._isInitializationSuccessful=()=>{if(window&&window['$diags']&&window['$diags']['initializationSuccessful']){clearInterval(this.initializationTimer);this.isInitialized=true;}};this._prePopulateData=()=>{const{resources}=this.props;const invalidEmailAddressError=resources.invalidEmailAddressError||'Please enter a valid email address.';if(window['SA_FIELDS']&&window['SA_FIELDS']['AttributeFields']){window['SA_FIELDS']['AttributeFields'].map(obj=>{const value=obj.PRE?this._htmlDecode(obj.PRE):'';switch(obj.ID.toLowerCase()){case'givenname':{this.givenName=value;break;}case'surname':{this.surname=value;break;}case'email':{this.email=value;this.emailRegex=obj.PAT;obj.PAT_DESC=invalidEmailAddressError;break;}default:}});}};this._updateErrorMessage=()=>{const{resources}=this.props;if(window&&window['CONTENT']){const message={required_field:resources.requiredFieldMissingError,verifying_blurb:resources.loadingMessage};Object.assign(window['CONTENT'],message);}};this.givenName='';this.surname='';this.email='';this.emailRegex='^[a-zA-Z0-9.!#$%&\\^_`{}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$';this.isInitialized=false;this.telemetryContent=getTelemetryObject(this.props.context.request.telemetryPageName,this.props.friendlyName,this.props.telemetry);}componentDidMount(){this._onInit();}componentDidUpdate(){if(this.isInitialized&&window&&window['$element']&&window['$element']['initialize']){window['$element']['initialize']();}}render(){const{config,resources}=this.props;const viewProps=_objectSpread(_objectSpread({},this.props),{},{viewState:{isShowLoading:!this.isInitialized},accountProfileEdit:{moduleProps:this.props,className:classnames(this.moduleClassName,config.className)},loading:{modal:{tag:Modal,isOpen:true},modalBody:{tag:ModalBody},icon:/*#__PURE__*/React.createElement(AccountProfileEditLoadingIconComponent,{className:this.moduleClassName}),message:/*#__PURE__*/React.createElement(AccountProfileEditLoadingMessageComponent,{className:this.moduleClassName,message:resources.loadingMessage})},defaultAADConainer:{id:'api',style:{display:'none'}},aadConainer:{id:this.isInitialized?'api':null,className:\"\".concat(this.moduleClassName,\"__container\")},heading:config.heading&&config.heading.text&&/*#__PURE__*/React.createElement(Msdyn365.Text,Object.assign({className:\"\".concat(this.moduleClassName,\"__heading\")},config.heading,{editProps:{onEdit:this.handleHeadingChange,requestContext:this.props.context.request}})),accountProfileEditLocalAccount:this._renderLocalAccount()});return this.props.renderView(viewProps);}_htmlDecode(str){const e=document.createElement('div');e.innerHTML=str;return e.childNodes.length===0?'':e.childNodes[0].nodeValue||'';}_renderLocalAccount(){const{config,resources}=this.props;const localAccount={localAccount:{id:'attributeList',className:\"\".concat(this.moduleClassName,\"__account-items attr\")},items:[this._renderInput('givenName','text',this.givenName,resources.firstNameLabelText,resources.firstNameMaxLength),this._renderInput('surname','text',this.surname,resources.lastNameLabelText,resources.lastNameMaxLength)],errorMessage:[/*#__PURE__*/React.createElement(AccountProfileEditErrorComponent,{key:'requiredFieldMissing',id:'requiredFieldMissing',className:this.moduleClassName,message:resources.requiredFieldMissingSummaryError}),/*#__PURE__*/React.createElement(AccountProfileEditErrorComponent,{key:'fieldIncorrect',id:'fieldIncorrect',className:this.moduleClassName,message:resources.fieldIncorrectError}),/*#__PURE__*/React.createElement(AccountProfileEditErrorComponent,{key:'claimVerificationServerError',id:'claimVerificationServerError',className:this.moduleClassName})],buttonsWrapper:{className:\"\".concat(this.moduleClassName,\"__buttons\")},buttons:[/*#__PURE__*/React.createElement(AccountProfileEditButtonComponent,{key:'continue',id:'continue',className:\"\".concat(this.moduleClassName,\"__save-button\"),ariaLabel:resources.saveButtonAriaLabel,text:resources.saveButtonText,telemetryContent:this.telemetryContent}),/*#__PURE__*/React.createElement(AccountProfileEditButtonComponent,{key:'cancel',id:'cancel',className:\"\".concat(this.moduleClassName,\"__cancel-button\"),ariaLabel:resources.cancelButtonText,text:resources.cancelButtonText,telemetryContent:this.telemetryContent})],verificationSuccessModal:{className:\"\".concat(this.moduleClassName,\"__verifying-modal verifying-modal\")},verificationSuccessModalMessage:{id:'verifying_blurb',className:\"\".concat(this.moduleClassName,\"__verifying-modal-message\")}};if(config.showEmail&&this.email!==''){localAccount.items.push(this._renderInput('email','email',this.email,resources.emailAddressLabelText,undefined,this.emailRegex));}return localAccount;}_renderInput(id,type,value,labelText,maxLength,pattern){const className=\"\".concat(this.moduleClassName,\"__account-item\");return{wrapper:{className:classnames(className,\"\".concat(className,\"-\").concat(id),'entry-item','attrEntry')},key:id,label:/*#__PURE__*/React.createElement(AccountProfileEditLabelComponent,Object.assign({},{id:id,forId:id,className:className,text:labelText})),errorMessage:/*#__PURE__*/React.createElement(AccountProfileEditErrorComponent,Object.assign({},{className:this.moduleClassName,type:'item'})),input:/*#__PURE__*/React.createElement(AccountProfileEditInputComponent,Object.assign({},{id:id,type:type,value:value,pattern:pattern,className:className,onChange:this.onTextBoxChange}))};}};__decorate([observable],AccountProfileEdit.prototype,\"givenName\",void 0);__decorate([observable],AccountProfileEdit.prototype,\"surname\",void 0);__decorate([observable],AccountProfileEdit.prototype,\"email\",void 0);__decorate([observable],AccountProfileEdit.prototype,\"emailRegex\",void 0);__decorate([observable],AccountProfileEdit.prototype,\"isInitialized\",void 0);AccountProfileEdit=__decorate([observer],AccountProfileEdit);export default AccountProfileEdit;","map":{"version":3,"sources":["modules/account-profile-edit/account-profile-edit.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport classnames from 'classnames';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport {\n    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody\n} from '@msdyn365-commerce-modules/utilities';\n\nimport {\n    IAccountProfileEditConfig, IAccountProfileEditProps\n} from './account-profile-edit.props.autogenerated';\nimport AccountProfileEditButtonComponent from './components/account-profile-edit-button';\nimport AccountProfileEditErrorComponent from './components/account-profile-edit-error';\nimport AccountProfileEditInputComponent from './components/account-profile-edit-input';\nimport AccountProfileEditLabelComponent from './components/account-profile-edit-label';\nimport AccountProfileEditLoadingIconComponent from './components/account-profile-edit-loading-icon';\nimport AccountProfileEditLoadingMessageComponent from './components/account-profile-edit-loading-message';\n\nexport interface IAccountProfileEditViewState {\n    isShowLoading: boolean;\n}\n\nexport interface IAccountProfileEditItem {\n    wrapper: INodeProps;\n    key: string;\n    label: React.ReactNode;\n    errorMessage: React.ReactNode;\n    input: React.ReactNode;\n}\n\nexport interface IAccountProfileEditLocalAccount {\n    localAccount: INodeProps;\n    items: IAccountProfileEditItem[];\n    errorMessage: React.ReactNode[];\n    buttonsWrapper: INodeProps;\n    buttons: React.ReactNode[];\n    verificationSuccessModal: INodeProps;\n    verificationSuccessModalMessage: INodeProps;\n}\n\nexport interface IAccountProfileEditLoading {\n    modal: INodeProps;\n    modalBody: INodeProps;\n    icon: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IAccountProfileEditViewProps {\n    className: string;\n    viewState: IAccountProfileEditViewState;\n    loading: IAccountProfileEditLoading;\n    accountProfileEdit: IModuleProps;\n    defaultAADConainer: INodeProps;\n    aadConainer: INodeProps;\n    heading: React.ReactNode;\n    accountProfileEditLocalAccount: IAccountProfileEditLocalAccount;\n}\n\n/**\n *\n * AccountProfileEdit component\n * All AAD related module is rendered on AAD page and we need to respect HTML contract provide by AAD.\n * Please ensure any change in module don't break contract with AAD.\n * @extends {React.Component<IAccountProfileEditProps<IAccountProfileEditConfig>>}\n */\n@observer\nclass AccountProfileEdit extends React.Component<IAccountProfileEditProps<IAccountProfileEditConfig>> {\n\n    private moduleClassName: string = 'ms-account-profile-edit';\n    private telemetryContent: ITelemetryContent;\n    @observable private givenName: string;\n    @observable private surname: string;\n    @observable private email: string;\n    @observable private emailRegex: string;\n\n    @observable private isInitialized: boolean;\n\n    // tslint:disable-next-line:no-any\n    private initializationTimer: any;\n\n    constructor(props: IAccountProfileEditProps<IAccountProfileEditConfig>) {\n        super(props);\n        this.givenName = '';\n        this.surname = '';\n        this.email = '';\n        this.emailRegex = '^[a-zA-Z0-9.!#$%&\\^_`{}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$';\n        this.isInitialized = false;\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this._onInit();\n    }\n\n    // After successful AAD initialization, call initialize method provided by AAD to attach events.\n    public componentDidUpdate(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {\n            // tslint:disable-next-line:no-string-literal\n            window['$element']['initialize']();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { config, resources } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            viewState: {\n                isShowLoading: !this.isInitialized\n            },\n            accountProfileEdit: {\n                moduleProps: this.props,\n                className: classnames(this.moduleClassName, config.className)\n            },\n            loading: {\n                modal: {\n                    tag: Modal,\n                    isOpen: true\n                },\n                modalBody: {\n                    tag: ModalBody\n                },\n                icon: <AccountProfileEditLoadingIconComponent className={this.moduleClassName} />,\n                message: <AccountProfileEditLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,\n            },\n            defaultAADConainer: {\n                id: 'api',\n                style: { display: 'none' }\n            },\n            aadConainer: {\n                id: this.isInitialized ? 'api' : null,\n                className: `${this.moduleClassName}__container`\n            },\n            heading: config.heading &&  config.heading.text && (\n                <Msdyn365.Text\n                  className={`${this.moduleClassName}__heading`}\n                  {...config.heading}\n                  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}\n                />\n            ),\n            accountProfileEditLocalAccount: this._renderLocalAccount()\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n\n    }\n\n    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading.text = event.target.value;\n\n    public onTextBoxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const id = event.target.id;\n        const value = event.target.value;\n\n        switch (id.toLowerCase()) {\n            case 'givenname': {\n                this.givenName = value;\n                break;\n            }\n            case 'surname': {\n                this.surname = value;\n                break;\n            }\n            case 'email': {\n                this.emailRegex = value;\n                break;\n            }\n            default:\n        }\n    };\n\n    public _onInit = () => {\n        this._prePopulateData();\n        this._updateErrorMessage();\n        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.\n        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);\n        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);\n    }\n\n    // After successful AAD initialization, remove waiting and preload any data, if needed.\n    private _isInitializationSuccessful = () => {\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {\n            clearInterval(this.initializationTimer);\n            this.isInitialized = true;\n        }\n    }\n\n    private _prePopulateData = () => {\n        const { resources } = this.props;\n        const invalidEmailAddressError = resources.invalidEmailAddressError || 'Please enter a valid email address.';\n\n        // tslint:disable-next-line:no-string-literal\n        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {\n            // tslint:disable-next-line:no-string-literal\n            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PRE: string; PAT: string; UX_INPUT_TYPE: string; PAT_DESC: string }) => {\n                const value = obj.PRE ? this._htmlDecode(obj.PRE) : '';\n                switch (obj.ID.toLowerCase()) {\n                    case 'givenname': {\n                        this.givenName = value;\n                        break;\n                    }\n                    case 'surname': {\n                        this.surname = value;\n                        break;\n                    }\n                    case 'email': {\n                        this.email = value;\n                        this.emailRegex = obj.PAT;\n                        obj.PAT_DESC = invalidEmailAddressError;\n                        break;\n                    }\n                    default:\n                }\n\n            });\n        }\n    }\n\n    private _htmlDecode(str: string): string {\n        const e = document.createElement('div');\n        // tslint:disable-next-line:no-inner-html\n        e.innerHTML = str;\n        return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue || '';\n    }\n\n    private _updateErrorMessage = () => {\n        const { resources } = this.props;\n\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['CONTENT']) {\n\n            const message = {\n                required_field: resources.requiredFieldMissingError,\n                verifying_blurb: resources.loadingMessage\n            };\n\n            // tslint:disable-next-line:no-string-literal\n            Object.assign(window['CONTENT'], message);\n        }\n    }\n\n    private _renderLocalAccount(): IAccountProfileEditLocalAccount {\n        const { config, resources } = this.props;\n        const localAccount = {\n            localAccount: {\n                id: 'attributeList',\n                className: `${this.moduleClassName}__account-items attr`\n            },\n            items: [\n                this._renderInput('givenName', 'text', this.givenName, resources.firstNameLabelText, resources.firstNameMaxLength),\n                this._renderInput('surname', 'text', this.surname, resources.lastNameLabelText, resources.lastNameMaxLength),\n            ],\n            errorMessage: [\n                <AccountProfileEditErrorComponent key='requiredFieldMissing' id='requiredFieldMissing' className={this.moduleClassName} message={resources.requiredFieldMissingSummaryError} />,\n                <AccountProfileEditErrorComponent key='fieldIncorrect' id='fieldIncorrect' className={this.moduleClassName} message={resources.fieldIncorrectError} />,\n                <AccountProfileEditErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />\n            ],\n            buttonsWrapper: {\n                className: `${this.moduleClassName}__buttons`,\n            },\n            buttons: [\n                <AccountProfileEditButtonComponent key='continue' id='continue' className={`${this.moduleClassName}__save-button`} ariaLabel={resources.saveButtonAriaLabel} text={resources.saveButtonText} telemetryContent={this.telemetryContent} />,\n                <AccountProfileEditButtonComponent key='cancel' id='cancel' className={`${this.moduleClassName}__cancel-button`} ariaLabel={resources.cancelButtonText} text={resources.cancelButtonText} telemetryContent={this.telemetryContent}/>\n            ],\n            verificationSuccessModal: {\n                className: `${this.moduleClassName}__verifying-modal verifying-modal`\n            },\n            verificationSuccessModalMessage: {\n                id: 'verifying_blurb',\n                className: `${this.moduleClassName}__verifying-modal-message`\n            }\n        };\n\n        if (config.showEmail && this.email !== '') {\n            localAccount.items.push(this._renderInput('email', 'email', this.email, resources.emailAddressLabelText, undefined, this.emailRegex));\n        }\n\n        return localAccount;\n    }\n\n    private _renderInput(id: string, type: string, value: string, labelText: string, maxLength?: string, pattern?: string): IAccountProfileEditItem {\n        const className = `${this.moduleClassName}__account-item`;\n        return (\n            {\n                wrapper: {\n                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')\n                },\n                key: id,\n                label: (\n                    <AccountProfileEditLabelComponent\n                        {\n                        ...{\n                            id: id,\n                            forId: id,\n                            className: className,\n                            text: labelText\n                        }\n                        }\n                    />\n                ),\n                errorMessage: (\n                    <AccountProfileEditErrorComponent\n                        {\n                        ...{\n                            className: this.moduleClassName,\n                            type: 'item'\n                        }\n                        }\n                    />\n                ),\n                input: (\n                    <AccountProfileEditInputComponent\n                        {\n                        ...{\n                            id: id,\n                            type: type,\n                            value: value,\n                            pattern: pattern,\n                            className: className,\n                            onChange: this.onTextBoxChange\n                        }\n                        }\n                    />\n                )\n\n            }\n        );\n    }\n\n}\n\nexport default AccountProfileEdit;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}