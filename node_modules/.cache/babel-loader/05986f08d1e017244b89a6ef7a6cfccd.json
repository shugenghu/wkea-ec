{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ /**\r\n * Generates a Image URL based on data return from retail server\r\n * @param imageUrl The image url returned by Retail Server\r\n * @param ctx The request context\r\n */export var generateImageUrl=function generateImageUrl(imageUrl,apiSettings){if(imageUrl){// Images hosted in CMS include schema\nif(imageUrl.startsWith('http')){return imageUrl;}// Images hosted in Retail Server must be encoded and joined with the base image url\nreturn apiSettings.baseImageUrl+encodeURIComponent(imageUrl);}else{// d365Commerce.telemetry.warning(`Unable to generate a proper Image URL for Product: ${product.RecordId}`);\nreturn undefined;}};/**\r\n * Generates a Image URL for a product based on data return from retail server\r\n * @param product The Product returned by Retail Server\r\n * @param ctx The request context\r\n */export var getProductImageUrls=function getProductImageUrls(products,apiSettings){var productsWithImageUrls=[];products&&products.forEach(function(product){if(product&&product.RecordId){product.PrimaryImageUrl=generateImageUrl(product.PrimaryImageUrl,apiSettings);productsWithImageUrls.push(product);}});return productsWithImageUrls;};/**\r\n * Uses the order in which the product ids were returned from the reco call to order\r\n * the results from the product hydration call\r\n *\r\n * @param itemIdOrder The order of product ids to observe\r\n * @param unorderedProductSearchResults Unordered set of hydrated products\r\n */export var orderProductSearchResults=function orderProductSearchResults(itemIdOrder,unorderedProductSearchResults){return itemIdOrder.reduce(function(result,itemId){var product=unorderedProductSearchResults.find(function(element){return element.RecordId===itemId;});if(product){result.push(product);}return result;// tslint:disable-next-line: align\n},[]);};","map":{"version":3,"sources":["../../../src/utils/product-list-utils.ts"],"names":[],"mappings":"AAAA;;;AAGG,G,CAMH;;;;AAIG,GACH,MAAO,IAAM,CAAA,gBAAgB,CAAG,QAAnB,CAAA,gBAAmB,CAAC,QAAD,CAA+B,WAA/B,CAAwF,CACpH,GAAI,QAAJ,CAAc,CACV;AACA,GAAI,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAAJ,CAAiC,CAC7B,MAAO,CAAA,QAAP,CACH,CAED;AACA,MAAO,CAAA,WAAW,CAAC,YAAZ,CAA2B,kBAAkB,CAAC,QAAD,CAApD,CACH,CARD,IAQO,CACH;AACA,MAAO,CAAA,SAAP,CACH,CACJ,CAbM,CAeP;;;;AAIG,GACH,MAAO,IAAM,CAAA,mBAAmB,CAAG,QAAtB,CAAA,mBAAsB,CAC/B,QAD+B,CAE/B,WAF+B,CAGU,CACzC,GAAM,CAAA,qBAAqB,CAA4C,EAAvE,CAEA,QAAQ,EACJ,QAAQ,CAAC,OAAT,CAAiB,SAAA,OAAO,CAAG,CACvB,GAAI,OAAO,EAAI,OAAO,CAAC,QAAvB,CAAiC,CAC7B,OAAO,CAAC,eAAR,CAA0B,gBAAgB,CAAC,OAAO,CAAC,eAAT,CAA0B,WAA1B,CAA1C,CACA,qBAAqB,CAAC,IAAtB,CAA2B,OAA3B,EACH,CACJ,CALD,CADJ,CAQA,MAAO,CAAA,qBAAP,CACH,CAfM,CAiBP;;;;;;AAMG,GACH,MAAO,IAAM,CAAA,yBAAyB,CAAG,QAA5B,CAAA,yBAA4B,CACrC,WADqC,CAErC,6BAFqC,CAGd,CACvB,MAAO,CAAA,WAAW,CAAC,MAAZ,CAAmB,SAAC,MAAD,CAAgC,MAAhC,CAAkD,CACxE,GAAM,CAAA,OAAO,CAAG,6BAA6B,CAAC,IAA9B,CAAmC,SAAA,OAAO,QAAI,CAAA,OAAO,CAAC,QAAR,GAAqB,MAAzB,EAA1C,CAAhB,CACA,GAAI,OAAJ,CAAa,CACT,MAAM,CAAC,IAAP,CAAY,OAAZ,EACH,CACD,MAAO,CAAA,MAAP,CACA;AACH,CAPM,CAOJ,EAPI,CAAP,CAQH,CAZM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ICommerceApiSettings } from '@msdyn365-commerce/core-internal';\nimport { ProductSearchResult, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { merge as _merge } from 'lodash';\n\n/**\n * Generates a Image URL based on data return from retail server\n * @param imageUrl The image url returned by Retail Server\n * @param ctx The request context\n */\nexport const generateImageUrl = (imageUrl: string | undefined, apiSettings: ICommerceApiSettings): string | undefined => {\n    if (imageUrl) {\n        // Images hosted in CMS include schema\n        if (imageUrl.startsWith('http')) {\n            return imageUrl;\n        }\n\n        // Images hosted in Retail Server must be encoded and joined with the base image url\n        return apiSettings.baseImageUrl + encodeURIComponent(imageUrl);\n    } else {\n        // d365Commerce.telemetry.warning(`Unable to generate a proper Image URL for Product: ${product.RecordId}`);\n        return undefined;\n    }\n};\n\n/**\n * Generates a Image URL for a product based on data return from retail server\n * @param product The Product returned by Retail Server\n * @param ctx The request context\n */\nexport const getProductImageUrls = (\n    products: SimpleProduct[] | ProductSearchResult[],\n    apiSettings: ICommerceApiSettings\n): SimpleProduct[] | ProductSearchResult[] => {\n    const productsWithImageUrls: SimpleProduct[] | ProductSearchResult[] = [];\n\n    products &&\n        products.forEach(product => {\n            if (product && product.RecordId) {\n                product.PrimaryImageUrl = generateImageUrl(product.PrimaryImageUrl, apiSettings);\n                productsWithImageUrls.push(product);\n            }\n        });\n\n    return productsWithImageUrls;\n};\n\n/**\n * Uses the order in which the product ids were returned from the reco call to order\n * the results from the product hydration call\n *\n * @param itemIdOrder The order of product ids to observe\n * @param unorderedProductSearchResults Unordered set of hydrated products\n */\nexport const orderProductSearchResults = (\n    itemIdOrder: number[],\n    unorderedProductSearchResults: ProductSearchResult[]\n): ProductSearchResult[] => {\n    return itemIdOrder.reduce((result: ProductSearchResult[], itemId: number) => {\n        const product = unorderedProductSearchResults.find(element => element.RecordId === itemId);\n        if (product) {\n            result.push(product);\n        }\n        return result;\n        // tslint:disable-next-line: align\n    }, []);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}