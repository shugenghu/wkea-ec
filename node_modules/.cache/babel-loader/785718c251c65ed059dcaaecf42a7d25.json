{"ast":null,"code":"import{DataServiceQuery}from'../DataServiceQuery';import{WarehouseClass,WarehouseLocationClass}from'../Entities/CommerceModels.g';import{executeAction}from'../retail-action';function warehousesQuery(inventLocation){var key=inventLocation?{InventLocation:inventLocation}:null;return new DataServiceQuery(\"Warehouses\",\"Warehouse\",WarehouseClass,key);}export function createCreateInput(entity){return warehousesQuery().create(entity);}export function createWarehouseAsync(context,entity){var request=createCreateInput(entity);return executeAction(request,context);}export function createUpdateInput(entity){return warehousesQuery(entity.InventLocation).update(entity);}export function updateAsync(context,entity){var request=createUpdateInput(entity);return executeAction(request,context);}export function createDeleteAsync(entity){return warehousesQuery(entity.InventLocation)[\"delete\"]();}export function deleteAsync(context,entity){var request=createDeleteAsync(entity);return executeAction(request,context);}export function createReadAsync(inventLocation){return warehousesQuery(inventLocation).read();}export function readAsync(context,inventLocation){var request=createReadAsync(inventLocation);return executeAction(request,context);}export function createReadAllAsync(queryResultSettings){return warehousesQuery().resultSettings(queryResultSettings).read();}export function readAllAsync(context){var request=createReadAllAsync(context.queryResultSettings);return executeAction(request,context);}export function createSearchWarehouseLocationsAsyncInput(queryResultSettings,searchCriteria){var query=warehousesQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('SearchWarehouseLocationsAsync',true,WarehouseLocationClass,'true',{bypassCache:'none',returnEntity:'WarehouseLocation'},{searchCriteria:searchCriteria});}export function searchWarehouseLocationsAsyncAsync(context,searchCriteria){var request=createSearchWarehouseLocationsAsyncInput(context.queryResultSettings,searchCriteria);return executeAction(request,context);}export function createGetWarehouseByIdInput(inventLocation){var query=warehousesQuery(inventLocation);return query.createDataServiceRequestForOperation('GetWarehouseById',false,WarehouseClass,'false',{bypassCache:'none',returnEntity:'Warehouse'},{});}export function getWarehouseByIdAsync(context,inventLocation){var request=createGetWarehouseByIdInput(inventLocation);return executeAction(request,context);}export function createSearchWarehousesInput(queryResultSettings,searchText){var query=warehousesQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('SearchWarehouses',false,WarehouseClass,'true',{bypassCache:'none',returnEntity:'Warehouse'},{searchText:searchText});}export function searchWarehousesAsync(context,searchText){var request=createSearchWarehousesInput(context.queryResultSettings,searchText);return executeAction(request,context);}export function createGetLocationsInput(queryResultSettings,inventLocation){var query=warehousesQuery(inventLocation).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetLocations',false,WarehouseLocationClass,'true',{bypassCache:'none',returnEntity:'WarehouseLocation'},{});}export function getLocationsAsync(context,inventLocation){var request=createGetLocationsInput(context.queryResultSettings,inventLocation);return executeAction(request,context);}export function createSearchLocationsInput(queryResultSettings,inventLocation,searchText){var query=warehousesQuery(inventLocation).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('SearchLocations',false,WarehouseLocationClass,'true',{bypassCache:'none',returnEntity:'WarehouseLocation'},{searchText:searchText});}export function searchLocationsAsync(context,inventLocation,searchText){var request=createSearchLocationsInput(context.queryResultSettings,inventLocation,searchText);return executeAction(request,context);}export function createGetAvailableFulfillmentLocationsInput(queryResultSettings,deliveryModeTypeFilter){var query=warehousesQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetAvailableFulfillmentLocations',false,WarehouseClass,'true',{bypassCache:'none',returnEntity:'Warehouse'},{deliveryModeTypeFilter:deliveryModeTypeFilter});}export function getAvailableFulfillmentLocationsAsync(context,deliveryModeTypeFilter){var request=createGetAvailableFulfillmentLocationsInput(context.queryResultSettings,deliveryModeTypeFilter);return executeAction(request,context);}","map":{"version":3,"sources":["../../src/DataActions/WarehousesDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { Warehouse, WarehouseLocationSearchCriteria, WarehouseLocation } from '../Entities/CommerceTypes.g';\n    import { WarehouseClass, WarehouseLocationClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function warehousesQuery(inventLocation?: string): DataServiceQuery {\n      var key = (inventLocation) ? { InventLocation: inventLocation } : null;\n      return new DataServiceQuery(\"Warehouses\", \"Warehouse\", WarehouseClass, key);\n    }\n    \n    export function createCreateInput(entity: Warehouse): IDataServiceRequest {\n        return warehousesQuery().create(entity);\n    }\n    export function createWarehouseAsync(context: IContext, entity: Warehouse): AsyncResult<Warehouse> {\n        const request = createCreateInput(entity, );\n        return executeAction<Warehouse>(request, context);\n    }\n    export function createUpdateInput(entity: Warehouse): IDataServiceRequest {\n        return warehousesQuery(entity.InventLocation).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: Warehouse): AsyncResult<Warehouse> {\n        const request = createUpdateInput(entity, );\n        return executeAction<Warehouse>(request, context);\n    }\n    export function createDeleteAsync(entity: Warehouse): IDataServiceRequest {\n        return warehousesQuery(entity.InventLocation).delete();\n    }\n    export function deleteAsync(context: IContext, entity: Warehouse): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(inventLocation: string): IDataServiceRequest {\n        return warehousesQuery(inventLocation).read();\n    }\n    export function readAsync(context: IContext, inventLocation: string): AsyncResult<Warehouse> {\n        const request = createReadAsync(inventLocation, );\n        return executeAction<Warehouse>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return warehousesQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<Warehouse[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<Warehouse[]>(request, context);\n    }\n    \n    export function createSearchWarehouseLocationsAsyncInput(queryResultSettings: IQueryResultSettings, searchCriteria: WarehouseLocationSearchCriteria | null): IDataServiceRequest {      \n        const query = warehousesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchWarehouseLocationsAsync', true, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation'}, {searchCriteria: searchCriteria });\n    }    \n    \n    export function searchWarehouseLocationsAsyncAsync(context: IContext, searchCriteria: WarehouseLocationSearchCriteria | null):AsyncResult<WarehouseLocation[]> {\n        const request = createSearchWarehouseLocationsAsyncInput(context.queryResultSettings, searchCriteria, );\n        return executeAction<WarehouseLocation[]>(request, context);\n    }          \n          \n    export function createGetWarehouseByIdInput(inventLocation: string): IDataServiceRequest {      \n        const query = warehousesQuery(inventLocation);\n        return query.createDataServiceRequestForOperation('GetWarehouseById', false, WarehouseClass, 'false', { bypassCache: 'none', returnEntity: 'Warehouse'}, { });\n    }    \n    \n    export function getWarehouseByIdAsync(context: IContext, inventLocation: string):AsyncResult<Warehouse> {\n        const request = createGetWarehouseByIdInput(inventLocation, );\n        return executeAction<Warehouse>(request, context);\n    }          \n          \n    export function createSearchWarehousesInput(queryResultSettings: IQueryResultSettings, searchText: string | null): IDataServiceRequest {      \n        const query = warehousesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchWarehouses', false, WarehouseClass, 'true', { bypassCache: 'none', returnEntity: 'Warehouse'}, {searchText: searchText });\n    }    \n    \n    export function searchWarehousesAsync(context: IContext, searchText: string | null):AsyncResult<Warehouse[]> {\n        const request = createSearchWarehousesInput(context.queryResultSettings, searchText, );\n        return executeAction<Warehouse[]>(request, context);\n    }          \n          \n    export function createGetLocationsInput(queryResultSettings: IQueryResultSettings, inventLocation: string): IDataServiceRequest {      \n        const query = warehousesQuery(inventLocation).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetLocations', false, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation'}, { });\n    }    \n    \n    export function getLocationsAsync(context: IContext, inventLocation: string):AsyncResult<WarehouseLocation[]> {\n        const request = createGetLocationsInput(context.queryResultSettings, inventLocation, );\n        return executeAction<WarehouseLocation[]>(request, context);\n    }          \n          \n    export function createSearchLocationsInput(queryResultSettings: IQueryResultSettings, inventLocation: string, searchText: string | null): IDataServiceRequest {      \n        const query = warehousesQuery(inventLocation).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchLocations', false, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation'}, {searchText: searchText });\n    }    \n    \n    export function searchLocationsAsync(context: IContext, inventLocation: string, searchText: string | null):AsyncResult<WarehouseLocation[]> {\n        const request = createSearchLocationsInput(context.queryResultSettings, inventLocation, searchText, );\n        return executeAction<WarehouseLocation[]>(request, context);\n    }          \n          \n    export function createGetAvailableFulfillmentLocationsInput(queryResultSettings: IQueryResultSettings, deliveryModeTypeFilter: number): IDataServiceRequest {      \n        const query = warehousesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetAvailableFulfillmentLocations', false, WarehouseClass, 'true', { bypassCache: 'none', returnEntity: 'Warehouse'}, {deliveryModeTypeFilter: deliveryModeTypeFilter });\n    }    \n    \n    export function getAvailableFulfillmentLocationsAsync(context: IContext, deliveryModeTypeFilter: number):AsyncResult<Warehouse[]> {\n        const request = createGetAvailableFulfillmentLocationsInput(context.queryResultSettings, deliveryModeTypeFilter, );\n        return executeAction<Warehouse[]>(request, context);\n    }          \n          \n    "],"sourceRoot":""},"metadata":{},"sourceType":"module"}