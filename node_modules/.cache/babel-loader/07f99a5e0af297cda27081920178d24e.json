{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{asSystemMetadata,EXCEPTION_PARSECONFIGVALUE,LogLevel}from'@msdyn365-commerce/telemetry-internal';export var MODULE_QUERY_PARAMETER_SEPARATOR=',';export var MODULE_QUERY_PROPERTY_SEPARATOR='/';export var validateAndGetOverrideData=function validateAndGetOverrideData(itemToken,telemetry){var pathTokens=itemToken.split(MODULE_QUERY_PROPERTY_SEPARATOR);// Expected pattern to edit a property of a module is <module_name>/<json_pointer_path>/<value>\n// eg1: partner-hero/dataBinder:\"BannerDataBinder\"\n// eg2: partner-hero/dataProviders/0/data/Items/0/PrimaryImage/Width:200\nif(pathTokens&&pathTokens.length>=2){// extract value string after the first occuring ':'\nvar value=itemToken.split(/:(.+)/)[1];try{var parsedValue=JSON.parse(unescape(value));return{moduleName:pathTokens[0],// extract the jsoin pointer path between module-name and value\njsonPath:itemToken.substring(pathTokens[0].length,itemToken.length-(value.length+1)),value:parsedValue};}catch(e){telemetry.log(LogLevel.Error,EXCEPTION_PARSECONFIGVALUE,{values:[asSystemMetadata(value)],exception:e});return null;}}return null;};/**\r\n * Method to read apisettings passed as part of query parameters and populate in request context\r\n * @param apiSettingsQSP apisettings passed as part of query service parameters\r\n * @param requestContext Request context object\r\n */export var populateApiSettingsFromQSP=function populateApiSettingsFromQSP(apiSettingsQSP,requestContext){if(apiSettingsQSP.channelId!==undefined){requestContext.apiSettings.channelId=Number(apiSettingsQSP.channelId);}if(apiSettingsQSP.catalogId!==undefined){requestContext.apiSettings.catalogId=Number(apiSettingsQSP.catalogId);}if(apiSettingsQSP.rnrId!==undefined){requestContext.apiSettings.rnr.id=apiSettingsQSP.rnrId;}if(apiSettingsQSP.rnrUrl!==undefined){requestContext.apiSettings.rnr.url=apiSettingsQSP.rnrUrl;}if(apiSettingsQSP.oun!==undefined){requestContext.apiSettings.oun=apiSettingsQSP.oun;}if(apiSettingsQSP.baseUrl!==undefined){requestContext.apiSettings.baseUrl=apiSettingsQSP.baseUrl;}if(apiSettingsQSP.baseImageUrl!==undefined){requestContext.apiSettings.baseImageUrl=apiSettingsQSP.baseImageUrl;}if(apiSettingsQSP.rsVersion!==undefined){requestContext.apiSettings.retailServerProxyVersion=apiSettingsQSP.rsVersion;}};","map":{"version":3,"sources":["../../../src/utils/query-utils.ts"],"names":[],"mappings":"AAAA;;;AAGG,GAGH,OAAS,gBAAT,CAA2B,0BAA3B,CAA2E,QAA3E,KAA2F,uCAA3F,CAEA,MAAO,IAAM,CAAA,gCAAgC,CAAG,GAAzC,CAEP,MAAO,IAAM,CAAA,+BAA+B,CAAG,GAAxC,CAQP,MAAO,IAAM,CAAA,0BAA0B,CAAG,QAA7B,CAAA,0BAA6B,CAAC,SAAD,CAAoB,SAApB,CAAiF,CACvH,GAAM,CAAA,UAAU,CAAG,SAAS,CAAC,KAAV,CAAgB,+BAAhB,CAAnB,CAEA;AACA;AACA;AACA,GAAI,UAAU,EAAI,UAAU,CAAC,MAAX,EAAqB,CAAvC,CAA0C,CACtC;AACA,GAAM,CAAA,KAAK,CAAG,SAAS,CAAC,KAAV,CAAgB,OAAhB,EAAyB,CAAzB,CAAd,CAEA,GAAI,CACA,GAAM,CAAA,WAAW,CAAG,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,KAAD,CAAnB,CAApB,CACA,MAAO,CACH,UAAU,CAAE,UAAU,CAAC,CAAD,CADnB,CAEH;AACA,QAAQ,CAAE,SAAS,CAAC,SAAV,CAAoB,UAAU,CAAC,CAAD,CAAV,CAAc,MAAlC,CAA0C,SAAS,CAAC,MAAV,EAAoB,KAAK,CAAC,MAAN,CAAe,CAAnC,CAA1C,CAHP,CAIH,KAAK,CAAE,WAJJ,CAAP,CAMH,CAAC,MAAO,CAAP,CAAU,CACR,SAAS,CAAC,GAAV,CAAc,QAAQ,CAAC,KAAvB,CAA8B,0BAA9B,CAA0D,CAAE,MAAM,CAAE,CAAC,gBAAgB,CAAC,KAAD,CAAjB,CAAV,CAAqC,SAAS,CAAE,CAAhD,CAA1D,EACA,MAAO,KAAP,CACH,CACJ,CAED,MAAO,KAAP,CACH,CAzBM,CA2BP;;;;AAIG,GACH,MAAO,IAAM,CAAA,0BAA0B,CAAG,QAA7B,CAAA,0BAA6B,CAAC,cAAD,CAAsC,cAAtC,CAA+E,CACrH,GAAI,cAAc,CAAC,SAAf,GAA6B,SAAjC,CAA4C,CACxC,cAAc,CAAC,WAAf,CAA2B,SAA3B,CAAuC,MAAM,CAAC,cAAc,CAAC,SAAhB,CAA7C,CACH,CACD,GAAI,cAAc,CAAC,SAAf,GAA6B,SAAjC,CAA4C,CACxC,cAAc,CAAC,WAAf,CAA2B,SAA3B,CAAuC,MAAM,CAAC,cAAc,CAAC,SAAhB,CAA7C,CACH,CAED,GAAI,cAAc,CAAC,KAAf,GAAyB,SAA7B,CAAwC,CACpC,cAAc,CAAC,WAAf,CAA2B,GAA3B,CAA+B,EAA/B,CAAoC,cAAc,CAAC,KAAnD,CACH,CAED,GAAI,cAAc,CAAC,MAAf,GAA0B,SAA9B,CAAyC,CACrC,cAAc,CAAC,WAAf,CAA2B,GAA3B,CAA+B,GAA/B,CAAqC,cAAc,CAAC,MAApD,CACH,CAED,GAAI,cAAc,CAAC,GAAf,GAAuB,SAA3B,CAAsC,CAClC,cAAc,CAAC,WAAf,CAA2B,GAA3B,CAAiC,cAAc,CAAC,GAAhD,CACH,CAED,GAAI,cAAc,CAAC,OAAf,GAA2B,SAA/B,CAA0C,CACtC,cAAc,CAAC,WAAf,CAA2B,OAA3B,CAAqC,cAAc,CAAC,OAApD,CACH,CAED,GAAI,cAAc,CAAC,YAAf,GAAgC,SAApC,CAA+C,CAC3C,cAAc,CAAC,WAAf,CAA2B,YAA3B,CAA0C,cAAc,CAAC,YAAzD,CACH,CAED,GAAI,cAAc,CAAC,SAAf,GAA6B,SAAjC,CAA4C,CACxC,cAAc,CAAC,WAAf,CAA2B,wBAA3B,CAAsD,cAAc,CAAC,SAArE,CACH,CACJ,CA/BM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAny, IDictionary, IRequestContext } from '@msdyn365-commerce/core-internal';\nimport { asSystemMetadata, EXCEPTION_PARSECONFIGVALUE, IInternalTelemetry, LogLevel } from '@msdyn365-commerce/telemetry-internal';\n\nexport const MODULE_QUERY_PARAMETER_SEPARATOR = ',';\n\nexport const MODULE_QUERY_PROPERTY_SEPARATOR = '/';\n\nexport interface IModuleOverrideData {\n    moduleName: string;\n    jsonPath: string;\n    value: IAny;\n}\n\nexport const validateAndGetOverrideData = (itemToken: string, telemetry: IInternalTelemetry): IModuleOverrideData | null => {\n    const pathTokens = itemToken.split(MODULE_QUERY_PROPERTY_SEPARATOR);\n\n    // Expected pattern to edit a property of a module is <module_name>/<json_pointer_path>/<value>\n    // eg1: partner-hero/dataBinder:\"BannerDataBinder\"\n    // eg2: partner-hero/dataProviders/0/data/Items/0/PrimaryImage/Width:200\n    if (pathTokens && pathTokens.length >= 2) {\n        // extract value string after the first occuring ':'\n        const value = itemToken.split(/:(.+)/)[1];\n\n        try {\n            const parsedValue = JSON.parse(unescape(value));\n            return {\n                moduleName: pathTokens[0],\n                // extract the jsoin pointer path between module-name and value\n                jsonPath: itemToken.substring(pathTokens[0].length, itemToken.length - (value.length + 1)),\n                value: parsedValue\n            };\n        } catch (e) {\n            telemetry.log(LogLevel.Error, EXCEPTION_PARSECONFIGVALUE, { values: [asSystemMetadata(value)], exception: e });\n            return null;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Method to read apisettings passed as part of query parameters and populate in request context\n * @param apiSettingsQSP apisettings passed as part of query service parameters\n * @param requestContext Request context object\n */\nexport const populateApiSettingsFromQSP = (apiSettingsQSP: IDictionary<string>, requestContext: IRequestContext): void => {\n    if (apiSettingsQSP.channelId !== undefined) {\n        requestContext.apiSettings.channelId = Number(apiSettingsQSP.channelId);\n    }\n    if (apiSettingsQSP.catalogId !== undefined) {\n        requestContext.apiSettings.catalogId = Number(apiSettingsQSP.catalogId);\n    }\n\n    if (apiSettingsQSP.rnrId !== undefined) {\n        requestContext.apiSettings.rnr.id = apiSettingsQSP.rnrId;\n    }\n\n    if (apiSettingsQSP.rnrUrl !== undefined) {\n        requestContext.apiSettings.rnr.url = apiSettingsQSP.rnrUrl;\n    }\n\n    if (apiSettingsQSP.oun !== undefined) {\n        requestContext.apiSettings.oun = apiSettingsQSP.oun;\n    }\n\n    if (apiSettingsQSP.baseUrl !== undefined) {\n        requestContext.apiSettings.baseUrl = apiSettingsQSP.baseUrl;\n    }\n\n    if (apiSettingsQSP.baseImageUrl !== undefined) {\n        requestContext.apiSettings.baseImageUrl = apiSettingsQSP.baseImageUrl;\n    }\n\n    if (apiSettingsQSP.rsVersion !== undefined) {\n        requestContext.apiSettings.retailServerProxyVersion = apiSettingsQSP.rsVersion;\n    }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}