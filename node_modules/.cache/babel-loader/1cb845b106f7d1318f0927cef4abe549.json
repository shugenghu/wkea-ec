{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ /**\r\n * Method to indicate if the action should look in app cache for data\r\n * @param input ActionInput\r\n */export var shouldReadFromAppCache=function shouldReadFromAppCache(input,appCache){return!!appCache&&input&&input.dataCacheType!==undefined&&input.dataCacheType()!=='none';};/**\r\n * Method to indicate if the action should write in app cache\r\n * @param input ActionInput\r\n */export var shouldWriteToAppCache=function shouldWriteToAppCache(input,appCache){return isAppCacheData(input,appCache);};/**\r\n * Method to indicate if the action's cache type is application\r\n * @param input ActionInput\r\n */export var isAppCacheData=function isAppCacheData(input,appCache){if(!appCache){return false;}if(input){if(input.dataCacheType!==undefined&&input.dataCacheType()==='application'){return true;}// if an entity has a cache setting defined, we cache that entity - caching retail proxy actions\nreturn appCache.hasCacheSetting(input.getCacheObjectType());}return false;};","map":{"version":3,"sources":["../../src/action-runtime-utils.ts"],"names":[],"mappings":"AAAA;;;AAGG,G,CAKH;;;AAGG,GACH,MAAO,IAAM,CAAA,sBAAsB,CAAG,QAAzB,CAAA,sBAAyB,CAAC,KAAD,CAAsB,QAAtB,CAA0D,CAC5F,MAAO,CAAC,CAAC,QAAF,EAAc,KAAd,EAAuB,KAAK,CAAC,aAAN,GAAwB,SAA/C,EAA4D,KAAK,CAAC,aAAN,KAA0B,MAA7F,CACH,CAFM,CAIP;;;AAGG,GACH,MAAO,IAAM,CAAA,qBAAqB,CAAG,QAAxB,CAAA,qBAAwB,CAAC,KAAD,CAAsB,QAAtB,CAA0D,CAC3F,MAAO,CAAA,cAAc,CAAC,KAAD,CAAQ,QAAR,CAArB,CACH,CAFM,CAIP;;;AAGG,GACH,MAAO,IAAM,CAAA,cAAc,CAAG,QAAjB,CAAA,cAAiB,CAAC,KAAD,CAAsB,QAAtB,CAA0D,CACpF,GAAI,CAAC,QAAL,CAAe,CACX,MAAO,MAAP,CACH,CAED,GAAI,KAAJ,CAAW,CACP,GAAI,KAAK,CAAC,aAAN,GAAwB,SAAxB,EAAqC,KAAK,CAAC,aAAN,KAA0B,aAAnE,CAAkF,CAC9E,MAAO,KAAP,CACH,CAED;AACA,MAAkB,CAAA,QAAS,CAAC,eAAV,CAA0B,KAAK,CAAC,kBAAN,EAA1B,CAAlB,CACH,CAED,MAAO,MAAP,CACH,CAfM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { AppCache, ICache } from '@msdyn365-commerce/cache-internal';\nimport { IActionInput } from '@msdyn365-commerce/core-internal';\n\n/**\n * Method to indicate if the action should look in app cache for data\n * @param input ActionInput\n */\nexport const shouldReadFromAppCache = (input: IActionInput, appCache: ICache | null): boolean => {\n    return !!appCache && input && input.dataCacheType !== undefined && input.dataCacheType() !== 'none';\n};\n\n/**\n * Method to indicate if the action should write in app cache\n * @param input ActionInput\n */\nexport const shouldWriteToAppCache = (input: IActionInput, appCache: ICache | null): boolean => {\n    return isAppCacheData(input, appCache);\n};\n\n/**\n * Method to indicate if the action's cache type is application\n * @param input ActionInput\n */\nexport const isAppCacheData = (input: IActionInput, appCache: ICache | null): boolean => {\n    if (!appCache) {\n        return false;\n    }\n\n    if (input) {\n        if (input.dataCacheType !== undefined && input.dataCacheType() === 'application') {\n            return true;\n        }\n\n        // if an entity has a cache setting defined, we cache that entity - caching retail proxy actions\n        return (<AppCache>appCache).hasCacheSetting(input.getCacheObjectType());\n    }\n\n    return false;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}