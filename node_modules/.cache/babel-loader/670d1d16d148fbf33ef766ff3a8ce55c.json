{"ast":null,"code":"import\"core-js/modules/es.object.assign.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{__decorate}from\"tslib\";import classnames from'classnames';import{observable}from'mobx';import{observer}from'mobx-react';import*as React from'react';import{getTelemetryObject,Modal,ModalBody}from'@msdyn365-commerce-modules/utilities';import*as Msdyn365 from'@msdyn365-commerce/core';import PasswordResetVerificationButtonComponent from'./components/password-reset-verification-button';import PasswordResetVerificationErrorComponent from'./components/password-reset-verification-error';import PasswordResetVerificationInputComponent from'./components/password-reset-verification-input';import PasswordResetVerificationLabelComponent from'./components/password-reset-verification-label';import PasswordResetVerificationLoadingIconComponent from'./components/password-reset-verification-loading-icon';import PasswordResetVerificationLoadingMessageComponent from'./components/password-reset-verification-loading-message';import PasswordResetVerificationSuccessComponent from'./components/password-reset-verification-success';let PasswordResetVerification=class PasswordResetVerification extends React.Component{constructor(props){super(props);this.moduleClassName='ms-password-reset-verification';this.handleHeadingChange=event=>this.props.config.heading.text=event.target.value;this._onInit=()=>{this._prePopulateData();this._updateErrorMessage();this.initializationTimer=setInterval(()=>{this._isInitializationSuccessful();},100);setTimeout(()=>{clearInterval(this.initializationTimer);},10000);};this._isInitializationSuccessful=()=>{if(window&&window['$diags']&&window['$diags']['initializationSuccessful']){clearInterval(this.initializationTimer);this.isInitialized=true;}};this.emailRegex='^[a-zA-Z0-9.!#$%&\\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$';this.isInitialized=false;this.telemetryContent=getTelemetryObject(this.props.context.request.telemetryPageName,this.props.friendlyName,this.props.telemetry);}componentDidMount(){this._onInit();}componentDidUpdate(){if(this.isInitialized&&window&&window['$element']&&window['$element']['initialize']){window['$element']['initialize']();}}render(){const{config,resources}=this.props;const viewProps=_objectSpread(_objectSpread({},this.props),{},{viewState:{isShowLoading:!this.isInitialized},passwordResetVerification:{moduleProps:this.props,className:classnames(this.moduleClassName,config.className)},loading:{modal:{tag:Modal,isOpen:true},modalBody:{tag:ModalBody},icon:/*#__PURE__*/React.createElement(PasswordResetVerificationLoadingIconComponent,{className:this.moduleClassName}),message:/*#__PURE__*/React.createElement(PasswordResetVerificationLoadingMessageComponent,{className:this.moduleClassName,message:resources.loadingMessage})},defaultAADConainer:{id:'api',style:{display:'none'}},aadConainer:{id:this.isInitialized?'api':null,className:\"\".concat(this.moduleClassName,\"__container\")},heading:config.heading&&/*#__PURE__*/React.createElement(Msdyn365.Text,Object.assign({className:\"\".concat(this.moduleClassName,\"__heading\")},config.heading,{editProps:{onEdit:this.handleHeadingChange,requestContext:this.props.context.request}})),passwordResetVerificationLocalAccount:this._renderLocalAccount()});return this.props.renderView(viewProps);}_prePopulateData(){if(window['SA_FIELDS']&&window['SA_FIELDS']['AttributeFields']){window['SA_FIELDS']['AttributeFields'].map(obj=>{if(obj.ID.toLowerCase()==='email'){this.emailRegex=obj.PAT;}});}}_updateErrorMessage(){if(window&&window['CONTENT']){const message={verifying_blurb:this.props.resources.loadingMessage};Object.assign(window['CONTENT'],message);}}_renderLocalAccount(){const{resources}=this.props;return{localAccount:{id:'attributeList',className:\"\".concat(this.moduleClassName,\"__account-items attr\")},items:[this._renderInput('email','email',resources.emailAddressLabelText,undefined,this.emailRegex),this._renderInput('email_ver_input','email',resources.verificationCodeLabelText)],successMessage:[/*#__PURE__*/React.createElement(PasswordResetVerificationSuccessComponent,{key:'email_info',id:'email_info',className:this.moduleClassName,message:resources.verificationCodeSendSuccess}),/*#__PURE__*/React.createElement(PasswordResetVerificationSuccessComponent,{key:'email_success',id:'email_success',className:this.moduleClassName,message:resources.emailAddressVerifiedSuccess})],errorMessage:[/*#__PURE__*/React.createElement(PasswordResetVerificationErrorComponent,{key:'email_fail_retry',id:'email_fail_retry',className:this.moduleClassName,message:resources.retryError}),/*#__PURE__*/React.createElement(PasswordResetVerificationErrorComponent,{key:'email_fail_no_retry',id:'email_fail_no_retry',className:this.moduleClassName,message:resources.retryNotAllowedError}),/*#__PURE__*/React.createElement(PasswordResetVerificationErrorComponent,{key:'email_fail_throttled',id:'email_fail_throttled',className:this.moduleClassName,message:resources.throttledError}),/*#__PURE__*/React.createElement(PasswordResetVerificationErrorComponent,{key:'email_fail_code_expired',id:'email_fail_code_expired',className:this.moduleClassName,message:resources.codeExpiredError}),/*#__PURE__*/React.createElement(PasswordResetVerificationErrorComponent,{key:'email_fail_server',id:'email_fail_server',className:this.moduleClassName,message:resources.serverError}),/*#__PURE__*/React.createElement(PasswordResetVerificationErrorComponent,{key:'email_incorrect_format',id:'email_incorrect_format',className:this.moduleClassName,message:resources.invalidEmailError}),/*#__PURE__*/React.createElement(PasswordResetVerificationErrorComponent,{key:'claimVerificationServerError',id:'claimVerificationServerError',className:this.moduleClassName})],verificationButtonsWrapper:{className:\"\".concat(this.moduleClassName,\"__email-verification-buttons verify\"),'data-claim_id':'email'},verificationButtons:[/*#__PURE__*/React.createElement(PasswordResetVerificationButtonComponent,{key:'email_ver_but_send',id:'email_ver_but_send',className:\"\".concat(this.moduleClassName,\"__email-verification-button \").concat(this.moduleClassName,\"__verify-email-send sendButton\"),ariaLabel:resources.sendCodeButtonAriaLabel,text:resources.sendCodeButtonText,telemetryContent:this.telemetryContent}),/*#__PURE__*/React.createElement(PasswordResetVerificationButtonComponent,{key:'email_ver_but_verify',id:'email_ver_but_verify',className:\"\".concat(this.moduleClassName,\"__email-verification-button \").concat(this.moduleClassName,\"__verify-email-verify verifyButton\"),ariaLabel:resources.verifyCodeButtonAriaLabel,text:resources.verifyCodeButtonText,telemetryContent:this.telemetryContent}),/*#__PURE__*/React.createElement(PasswordResetVerificationButtonComponent,{key:'email_ver_but_resend',id:'email_ver_but_resend',className:\"\".concat(this.moduleClassName,\"__email-verification-button \").concat(this.moduleClassName,\"__verify-email-resend sendButton\"),ariaLabel:resources.resendCodeButtonAriaLabel,text:resources.resendCodeButtonText,telemetryContent:this.telemetryContent}),/*#__PURE__*/React.createElement(PasswordResetVerificationButtonComponent,{key:'email_ver_but_edit',id:'email_ver_but_edit',className:\"\".concat(this.moduleClassName,\"__email-verification-button \").concat(this.moduleClassName,\"__verify-email-edit editButton\"),ariaLabel:resources.changeEmailButtonAriaLabel,text:resources.changeEmailButtonText,telemetryContent:this.telemetryContent})],buttonsWrapper:{className:\"\".concat(this.moduleClassName,\"__buttons\")},buttons:[/*#__PURE__*/React.createElement(PasswordResetVerificationButtonComponent,{key:'continue',id:'continue',className:\"\".concat(this.moduleClassName,\"__continue-button\"),ariaLabel:resources.continueButtonAriaLabel,text:resources.continueButtonText,telemetryContent:this.telemetryContent}),/*#__PURE__*/React.createElement(PasswordResetVerificationButtonComponent,{key:'cancel',id:'cancel',className:\"\".concat(this.moduleClassName,\"__cancel-button\"),ariaLabel:resources.cancelButtonAriaLabel,text:resources.cancelButtonText})],verificationSuccessModal:{className:\"\".concat(this.moduleClassName,\"__verifying-modal verifying-modal\")},verificationSuccessModalMessage:{id:'verifying_blurb',className:\"\".concat(this.moduleClassName,\"__verifying-modal-message\")}};}_renderInput(id,type,labelText,maxLength,pattern){const className=\"\".concat(this.moduleClassName,\"__account-item\");return{wrapper:{className:classnames(className,\"\".concat(className,\"-\").concat(id),'entry-item','attrEntry')},key:id,label:/*#__PURE__*/React.createElement(PasswordResetVerificationLabelComponent,Object.assign({},{id:id,forId:id,className:className,text:labelText})),errorMessage:/*#__PURE__*/React.createElement(PasswordResetVerificationErrorComponent,Object.assign({},{className:this.moduleClassName,type:'item'})),input:/*#__PURE__*/React.createElement(PasswordResetVerificationInputComponent,Object.assign({},{id:id,type:type,maxLength:maxLength,pattern:pattern,className:className}))};}};__decorate([observable],PasswordResetVerification.prototype,\"emailRegex\",void 0);__decorate([observable],PasswordResetVerification.prototype,\"isInitialized\",void 0);PasswordResetVerification=__decorate([observer],PasswordResetVerification);export default PasswordResetVerification;","map":{"version":3,"sources":["modules/password-reset-verification/password-reset-verification.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport classnames from 'classnames';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\n\nimport {\n    getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody\n} from '@msdyn365-commerce-modules/utilities';\nimport * as Msdyn365 from '@msdyn365-commerce/core';\n\nimport PasswordResetVerificationButtonComponent from './components/password-reset-verification-button';\nimport PasswordResetVerificationErrorComponent from './components/password-reset-verification-error';\nimport PasswordResetVerificationInputComponent from './components/password-reset-verification-input';\nimport PasswordResetVerificationLabelComponent from './components/password-reset-verification-label';\nimport PasswordResetVerificationLoadingIconComponent from './components/password-reset-verification-loading-icon';\nimport PasswordResetVerificationLoadingMessageComponent from './components/password-reset-verification-loading-message';\nimport PasswordResetVerificationSuccessComponent from './components/password-reset-verification-success';\nimport {\n    IPasswordResetVerificationConfig, IPasswordResetVerificationProps\n} from './password-reset-verification.props.autogenerated';\n\nexport interface IPasswordResetVerificationViewState {\n    isShowLoading: boolean;\n}\n\nexport interface IPasswordResetVerificationItem {\n    wrapper: INodeProps;\n    key: string;\n    label: React.ReactNode;\n    errorMessage: React.ReactNode;\n    input: React.ReactNode;\n}\n\nexport interface IPasswordResetVerificationLocalAccount {\n    localAccount: INodeProps;\n    items: IPasswordResetVerificationItem[];\n    successMessage: React.ReactNode[];\n    errorMessage: React.ReactNode[];\n    verificationButtonsWrapper: INodeProps;\n    verificationButtons: React.ReactNode[];\n    buttonsWrapper: INodeProps;\n    buttons: React.ReactNode[];\n    verificationSuccessModal: INodeProps;\n    verificationSuccessModalMessage: INodeProps;\n}\n\nexport interface IPasswordResetVerificationLoading {\n    modal: INodeProps;\n    modalBody: INodeProps;\n    icon: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IPasswordResetVerificationViewProps {\n    className: string;\n    viewState: IPasswordResetVerificationViewState;\n    loading: IPasswordResetVerificationLoading;\n    passwordResetVerification: IModuleProps;\n    defaultAADConainer: INodeProps;\n    aadConainer: INodeProps;\n    heading: React.ReactNode;\n    passwordResetVerificationLocalAccount: IPasswordResetVerificationLocalAccount;\n}\n\n/**\n *\n * PasswordResetVerification component\n * @extends {React.Component<IPasswordResetVerificationProps<IPasswordResetVerificationConfig>>}\n */\n@observer\nclass PasswordResetVerification extends React.Component<IPasswordResetVerificationProps<IPasswordResetVerificationConfig>> {\n    private moduleClassName: string = 'ms-password-reset-verification';\n    private telemetryContent: ITelemetryContent;\n    @observable private emailRegex: string;\n    @observable private isInitialized: boolean;\n\n    // tslint:disable-next-line:no-any\n    private initializationTimer: any;\n\n    constructor(props: IPasswordResetVerificationProps<IPasswordResetVerificationConfig>) {\n        super(props);\n        this.emailRegex = '^[a-zA-Z0-9.!#$%&\\'^_`{}~-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$';\n        this.isInitialized = false;\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n    }\n\n    public componentDidMount(): void {\n        this._onInit();\n    }\n\n    // After successful AAD initialization, call initialize method provided by AAD to attach events.\n    public componentDidUpdate(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {\n            // tslint:disable-next-line:no-string-literal\n            window['$element']['initialize']();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { config, resources } = this.props;\n\n        const viewProps = {\n            ...this.props,\n            viewState: {\n                isShowLoading: !this.isInitialized\n            },\n            passwordResetVerification: {\n                moduleProps: this.props,\n                className: classnames(this.moduleClassName, config.className)\n            },\n            loading: {\n                modal: {\n                    tag: Modal,\n                    isOpen: true\n                },\n                modalBody: {\n                    tag: ModalBody\n                },\n                icon: <PasswordResetVerificationLoadingIconComponent className={this.moduleClassName} />,\n                message: <PasswordResetVerificationLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />,\n            },\n            defaultAADConainer: {\n                id: 'api',\n                style: { display: 'none' }\n            },\n            aadConainer: {\n                id: this.isInitialized ? 'api' : null,\n                className: `${this.moduleClassName}__container`\n            },\n            heading: config.heading &&\n            <Msdyn365.Text className={`${this.moduleClassName}__heading`} {...config.heading}  editProps = {{onEdit: this.handleHeadingChange, requestContext: this.props.context.request}}/>,\n            passwordResetVerificationLocalAccount: this._renderLocalAccount()\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => this.props.config.heading!.text= event.target.value;\n\n    public _onInit = () => {\n        this._prePopulateData();\n        this._updateErrorMessage();\n        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.\n        this.initializationTimer = setInterval(() => { this._isInitializationSuccessful(); }, 100);\n        setTimeout(() => { clearInterval(this.initializationTimer); }, 10000);\n    }\n\n    // After successful AAD initialization, remove waiting and preload any data, if needed.\n    private _isInitializationSuccessful = () => {\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {\n            clearInterval(this.initializationTimer);\n            this.isInitialized = true;\n        }\n    }\n\n    private _prePopulateData(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {\n            // tslint:disable-next-line:no-string-literal\n            window['SA_FIELDS']['AttributeFields'].map((obj: { ID: string; PAT: string }) => {\n                if (obj.ID.toLowerCase() === 'email') {\n                    this.emailRegex = obj.PAT;\n                }\n            });\n        }\n    }\n\n    private _updateErrorMessage(): void {\n        // tslint:disable-next-line:no-string-literal\n        if (window && window['CONTENT']) {\n\n            const message = {\n                verifying_blurb: this.props.resources.loadingMessage\n            };\n\n            // tslint:disable-next-line:no-string-literal\n            Object.assign(window['CONTENT'], message);\n        }\n    }\n\n    // tslint:disable-next-line: max-func-body-length\n    private _renderLocalAccount(): IPasswordResetVerificationLocalAccount {\n        const { resources } = this.props;\n        return {\n            localAccount: {\n                id: 'attributeList',\n                className: `${this.moduleClassName}__account-items attr`\n            },\n            items: [\n                this._renderInput('email', 'email', resources.emailAddressLabelText, undefined, this.emailRegex),\n                this._renderInput('email_ver_input', 'email', resources.verificationCodeLabelText),\n            ],\n            successMessage: [\n                <PasswordResetVerificationSuccessComponent key='email_info' id='email_info' className={this.moduleClassName} message={resources.verificationCodeSendSuccess} />,\n                <PasswordResetVerificationSuccessComponent key='email_success' id='email_success' className={this.moduleClassName} message={resources.emailAddressVerifiedSuccess} />\n            ],\n            errorMessage: [\n                <PasswordResetVerificationErrorComponent key='email_fail_retry' id='email_fail_retry' className={this.moduleClassName} message={resources.retryError} />,\n                <PasswordResetVerificationErrorComponent key='email_fail_no_retry' id='email_fail_no_retry' className={this.moduleClassName} message={resources.retryNotAllowedError} />,\n                <PasswordResetVerificationErrorComponent key='email_fail_throttled' id='email_fail_throttled' className={this.moduleClassName} message={resources.throttledError} />,\n                <PasswordResetVerificationErrorComponent key='email_fail_code_expired' id='email_fail_code_expired' className={this.moduleClassName} message={resources.codeExpiredError} />,\n                <PasswordResetVerificationErrorComponent key='email_fail_server' id='email_fail_server' className={this.moduleClassName} message={resources.serverError} />,\n                <PasswordResetVerificationErrorComponent key='email_incorrect_format' id='email_incorrect_format' className={this.moduleClassName} message={resources.invalidEmailError} />,\n                <PasswordResetVerificationErrorComponent key='claimVerificationServerError' id='claimVerificationServerError' className={this.moduleClassName} />\n            ],\n            verificationButtonsWrapper: {\n                className: `${this.moduleClassName}__email-verification-buttons verify`,\n                'data-claim_id': 'email'\n            },\n            verificationButtons: [\n\n                (\n                    <PasswordResetVerificationButtonComponent\n                        key='email_ver_but_send'\n                        id='email_ver_but_send'\n                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-send sendButton`}\n                        ariaLabel={resources.sendCodeButtonAriaLabel}\n                        text={resources.sendCodeButtonText}\n                        telemetryContent={this.telemetryContent}\n                    />\n                ),\n\n                (\n                    <PasswordResetVerificationButtonComponent\n                        key='email_ver_but_verify'\n                        id='email_ver_but_verify'\n                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-verify verifyButton`}\n                        ariaLabel={resources.verifyCodeButtonAriaLabel}\n                        text={resources.verifyCodeButtonText}\n                        telemetryContent={this.telemetryContent}\n                    />\n                ),\n                (\n                    <PasswordResetVerificationButtonComponent\n                        key='email_ver_but_resend'\n                        id='email_ver_but_resend'\n                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-resend sendButton`}\n                        ariaLabel={resources.resendCodeButtonAriaLabel}\n                        text={resources.resendCodeButtonText}\n                        telemetryContent={this.telemetryContent}\n                    />\n                ),\n                (\n                    <PasswordResetVerificationButtonComponent\n                        key='email_ver_but_edit'\n                        id='email_ver_but_edit'\n                        className={`${this.moduleClassName}__email-verification-button ${this.moduleClassName}__verify-email-edit editButton`}\n                        ariaLabel={resources.changeEmailButtonAriaLabel}\n                        text={resources.changeEmailButtonText}\n                        telemetryContent={this.telemetryContent}\n                    />\n                )\n            ],\n            buttonsWrapper: {\n                className: `${this.moduleClassName}__buttons`\n            },\n            buttons: [\n                (\n                <PasswordResetVerificationButtonComponent\n                    key='continue'\n                    id='continue'\n                    className={`${this.moduleClassName}__continue-button`}\n                    ariaLabel={resources.continueButtonAriaLabel}\n                    text={resources.continueButtonText}\n                    telemetryContent={this.telemetryContent}\n                />\n                ),\n                (\n                <PasswordResetVerificationButtonComponent\n                    key='cancel'\n                    id='cancel'\n                    className={`${this.moduleClassName}__cancel-button`}\n                    ariaLabel={resources.cancelButtonAriaLabel}\n                    text={resources.cancelButtonText}\n                />\n                )\n            ],\n            verificationSuccessModal: {\n                className: `${this.moduleClassName}__verifying-modal verifying-modal`\n            },\n            verificationSuccessModalMessage: {\n                id: 'verifying_blurb',\n                className: `${this.moduleClassName}__verifying-modal-message`\n            }\n        };\n    }\n\n    private _renderInput(id: string, type: string, labelText: string, maxLength?: string, pattern?: string): IPasswordResetVerificationItem {\n        const className = `${this.moduleClassName}__account-item`;\n        return (\n            {\n                wrapper: {\n                    className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')\n                },\n                key: id,\n                label: (\n                    <PasswordResetVerificationLabelComponent\n                        {\n                        ...{\n                            id: id,\n                            forId: id,\n                            className: className,\n                            text: labelText\n                        }\n                        }\n                    />\n                ),\n                errorMessage: (\n                    <PasswordResetVerificationErrorComponent\n                        {\n                        ...{\n                            className: this.moduleClassName,\n                            type: 'item'\n                        }\n                        }\n                    />\n                ),\n                input: (\n                    <PasswordResetVerificationInputComponent\n                        {\n                        ...{\n                            id: id,\n                            type: type,\n                            maxLength: maxLength,\n                            pattern: pattern,\n                            className: className\n                        }\n                        }\n                    />\n                )\n\n            }\n        );\n    }\n\n}\n\nexport default PasswordResetVerification;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}