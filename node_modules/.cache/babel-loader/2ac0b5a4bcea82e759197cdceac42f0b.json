{"ast":null,"code":"import\"core-js/modules/es.number.to-fixed.js\";import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.string.split.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{getCheckoutState}from'@msdyn365-commerce/global-state';import{checkoutAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';import{getTenderTypesAsync,resolveCardTypesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';export const OPERATIONS={PayCard:201,PayGiftCertificate:214,PayLoyalty:207,PayCustomerAccount:202};const getCardTypeId=async function getCardTypeId(ctx){let cardPrefix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{const response=await resolveCardTypesAsync({callerContext:ctx},cardPrefix,-1);if(response&&response.length>0){return response[0].TypeId;}}catch(error){ctx.telemetry.error('Call to resolveCardTypesAsync failed.',error);}return undefined;};const findTenderIdTypeByOperationId=(tenderTypes,operationId)=>{const matchedTenderType=tenderTypes.find(tenderType=>tenderType.OperationId===operationId);if(matchedTenderType){return matchedTenderType.TenderTypeId;}return;};const roundNumber=value=>Number(value.toFixed(2));async function getLoyaltyTenderLine(ctx,LoyaltyCardId){let Amount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let Currency=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'USD';const tenderTypes=await getTenderTypesAsync({callerContext:ctx,queryResultSettings:{}}).catch(error=>{throw error;});if(!tenderTypes){throw new Error('Fail to get gift card tender line');}const TenderTypeId=findTenderIdTypeByOperationId(tenderTypes,OPERATIONS.PayLoyalty);return{'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine','Amount@odata.type':'#Decimal',Currency,TenderTypeId,Amount,LoyaltyCardId};}async function getGiftCardTenderLine(ctx){let GiftCardId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';let Amount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let Currency=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'USD';let tenderTypeId=arguments.length>4?arguments[4]:undefined;let giftCardPin=arguments.length>5?arguments[5]:undefined;let giftCardExpirationYear=arguments.length>6?arguments[6]:undefined;let giftCardExpirationMonth=arguments.length>7?arguments[7]:undefined;let TenderTypeId=tenderTypeId;if(!TenderTypeId){const tenderTypes=await getTenderTypesAsync({callerContext:ctx,queryResultSettings:{}}).catch(error=>{throw error;});if(!tenderTypes){throw new Error('Fail to get gift card tender line');}TenderTypeId=findTenderIdTypeByOperationId(tenderTypes,OPERATIONS.PayGiftCertificate);}const GiftCardPin=giftCardPin;const GiftCardExpirationYear=giftCardExpirationYear;const GiftCardExpirationMonth=giftCardExpirationMonth;return{'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine','Amount@odata.type':'#Decimal',Currency,TenderTypeId,Amount,GiftCardId,GiftCardPin,GiftCardExpirationYear,GiftCardExpirationMonth};}async function getCreditCardTenderLine(ctx,tokenizedPaymentCard){let cardPrefix=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';let Amount=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;let Currency=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'USD';let billingAddress=arguments.length>5?arguments[5]:undefined;const tenderTypes=await getTenderTypesAsync({callerContext:ctx,queryResultSettings:{}}).catch(error=>{throw error;});let cartTypeId=tokenizedPaymentCard.CardTypeId;if(!cartTypeId){cartTypeId=await getCardTypeId(ctx,cardPrefix);}if(!tenderTypes){throw new Error('Fail to get card tender type');}if(!cartTypeId){throw new Error('Fail to get card type id');}const TenderTypeId=findTenderIdTypeByOperationId(tenderTypes,OPERATIONS.PayCard);const cardTenderLine={'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine','Amount@odata.type':'#Decimal',Currency,Amount,TenderTypeId,CardTypeId:cartTypeId};cardTenderLine.TokenizedPaymentCard=_objectSpread(_objectSpread(_objectSpread({},tokenizedPaymentCard),{},{CardTypeId:cartTypeId,'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.TokenizedPaymentCard',House:tokenizedPaymentCard.House||'N/A'},tokenizedPaymentCard.CardTokenInfo&&{CardTokenInfo:_objectSpread(_objectSpread({},tokenizedPaymentCard.CardTokenInfo),{},{'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CardTokenInfo'})}),billingAddress&&{Phone:billingAddress.Phone,Country:billingAddress.ThreeLetterISORegionName,Address1:billingAddress.Street,City:billingAddress.City,State:billingAddress.State,Zip:billingAddress.ZipCode});return cardTenderLine;}async function createCustomerAccountTenderLine(ctx,Amount){let Currency=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'USD';const CustomerId=null;if(!ctx.requestContext.user.isAuthenticated){ctx.telemetry.error('A customer id is required to pay with customer account');}const tenderTypes=await getTenderTypesAsync({callerContext:ctx,queryResultSettings:{}}).catch(error=>{throw error;});if(!tenderTypes){ctx.telemetry.error('No tender types found for this channel');}const TenderTypeId=findTenderIdTypeByOperationId(tenderTypes,OPERATIONS.PayCustomerAccount);if(!TenderTypeId){ctx.telemetry.error('No customer account tender type');}return{'@odata.type':'#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine','Amount@odata.type':'#Decimal',Currency,TenderTypeId,Amount,CustomerId};}export default(async ctx=>{const checkoutState=await getCheckoutState(ctx).catch(error=>{throw error;});const cartState=checkoutState.checkoutCart;const channelConfiguration=ctx.requestContext.channel;if(!cartState||!Object.keys(cartState).length||!checkoutState||!channelConfiguration){throw new Error('Fail to placeOrder');}const{giftCardExtends,tokenizedPaymentCard,cardPrefix,guestCheckoutEmail,billingAddress,loyaltyAmount}=checkoutState;const{Currency}=channelConfiguration;let amountDue=cartState.cart.AmountDue||0;let cartTenderLines;const getTenderLinePromises=[];const loyaltyCardNumber=cartState.cart.LoyaltyCardId;if(loyaltyAmount&&loyaltyCardNumber){const chargedAmount=roundNumber(Math.min(loyaltyAmount,amountDue));const loyaltyTenderLinePromise=getLoyaltyTenderLine(ctx,loyaltyCardNumber,chargedAmount,Currency);getTenderLinePromises.push(loyaltyTenderLinePromise);amountDue=roundNumber(amountDue-chargedAmount);}if(giftCardExtends&&giftCardExtends.length){giftCardExtends.some(giftCardExtend=>{if(giftCardExtend.Balance&&amountDue>0){var _giftCardExtend$Expir,_giftCardExtend$Expir2;const chargedAmount=roundNumber(Math.min(giftCardExtend.Balance,amountDue));const tenderTypeId=giftCardExtend.TenderTypeId;const giftCardPin=giftCardExtend.Pin;const giftCardExpirationYear=giftCardExtend.ExpirationDate?parseInt((_giftCardExtend$Expir=giftCardExtend.ExpirationDate)===null||_giftCardExtend$Expir===void 0?void 0:_giftCardExtend$Expir.split('/')[1],10):undefined;const giftCardExpirationMonth=giftCardExtend.ExpirationDate?parseInt((_giftCardExtend$Expir2=giftCardExtend.ExpirationDate)===null||_giftCardExtend$Expir2===void 0?void 0:_giftCardExtend$Expir2.split('/')[0],10):undefined;const creditCardTenderLinePromise=getGiftCardTenderLine(ctx,giftCardExtend.Id,chargedAmount,Currency,tenderTypeId,giftCardPin,giftCardExpirationYear,giftCardExpirationMonth);getTenderLinePromises.push(creditCardTenderLinePromise);amountDue=roundNumber(amountDue-chargedAmount);}return amountDue===0;});}if(checkoutState.customerAccountAmount>0){const chargedAmount=roundNumber(Math.min(checkoutState.customerAccountAmount,amountDue));const customerAccountTenderLinePromise=createCustomerAccountTenderLine(ctx,chargedAmount,Currency);getTenderLinePromises.push(customerAccountTenderLinePromise);amountDue=roundNumber(amountDue-chargedAmount);}if(amountDue>0){if(!tokenizedPaymentCard){throw new Error('Fail to placeOrder: no token found');}const creditCardTenderLinePromise=getCreditCardTenderLine(ctx,tokenizedPaymentCard,cardPrefix,amountDue,Currency,billingAddress);getTenderLinePromises.push(creditCardTenderLinePromise);}if(getTenderLinePromises.length>0){cartTenderLines=await Promise.all(getTenderLinePromises).catch(error=>{throw error;});if(!cartTenderLines||!cartTenderLines.length){throw new Error('Fail to placeOrder: fail to get cart tender lines');}}const salesOrder=await checkoutAsync({callerContext:ctx,bypassCache:'get'},cartState.cart.Id,guestCheckoutEmail,undefined,undefined,cartTenderLines||null,cartState.cart.Version).catch(error=>{throw error;});if(!salesOrder){throw new Error('Fail to placeOrder: fail to checkout');}return salesOrder;});","map":{"version":3,"sources":["modules/checkout/methods/checkout.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { getCheckoutState } from '@msdyn365-commerce/global-state';\nimport { checkoutAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport {\n    getTenderTypesAsync, resolveCardTypesAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport {\n    Address, CardType, CartTenderLine, RetailOperation, SalesOrder, TenderType, TokenizedPaymentCard\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nexport const OPERATIONS = {\n    PayCard: 201,\n    PayGiftCertificate: 214,\n    PayLoyalty: 207,\n    PayCustomerAccount: 202\n};\n\nconst getCardTypeId = async (ctx: IActionContext, cardPrefix: string = ''): Promise<string | undefined> => {\n    try {\n        const response = await resolveCardTypesAsync({ callerContext: ctx }, cardPrefix, CardType.Unknown);\n        if (response && response.length > 0) {\n            return response[0].TypeId;\n        }\n    } catch (error) {\n        ctx.telemetry.error('Call to resolveCardTypesAsync failed.', error);\n    }\n    return undefined;\n};\n\nconst findTenderIdTypeByOperationId = (tenderTypes: TenderType[], operationId: RetailOperation): string | undefined => {\n    const matchedTenderType = tenderTypes.find(tenderType => tenderType.OperationId === operationId);\n    if (matchedTenderType) {\n        return matchedTenderType.TenderTypeId;\n    }\n    return;\n};\n\nconst roundNumber = (value: number) => Number(value.toFixed(2));\n\nasync function getLoyaltyTenderLine(\n    ctx: IActionContext,\n    LoyaltyCardId: string,\n    Amount: number = 0,\n    Currency: string = 'USD'\n): Promise<CartTenderLine> {\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    if (!tenderTypes) {\n        throw new Error('Fail to get gift card tender line');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayLoyalty);\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        LoyaltyCardId\n    };\n}\n\nasync function getGiftCardTenderLine(\n    ctx: IActionContext,\n    GiftCardId: string = '',\n    Amount: number = 0,\n    Currency: string = 'USD',\n    tenderTypeId?: string,\n    giftCardPin?: string,\n    giftCardExpirationYear?: number,\n    giftCardExpirationMonth?: number\n): Promise<CartTenderLine> {\n    let TenderTypeId = tenderTypeId;\n\n    if (!TenderTypeId) {\n        const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n            throw error;\n        });\n        if (!tenderTypes) {\n            throw new Error('Fail to get gift card tender line');\n        }\n        TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayGiftCertificate);\n    }\n\n    const GiftCardPin = giftCardPin;\n    const GiftCardExpirationYear = giftCardExpirationYear;\n    const GiftCardExpirationMonth = giftCardExpirationMonth;\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        GiftCardId,\n        GiftCardPin,\n        GiftCardExpirationYear,\n        GiftCardExpirationMonth\n    };\n}\n\nasync function getCreditCardTenderLine(\n    ctx: IActionContext,\n    tokenizedPaymentCard: TokenizedPaymentCard,\n    cardPrefix: string = '',\n    Amount: number = 0,\n    Currency: string = 'USD',\n    billingAddress?: Address\n): Promise<CartTenderLine> {\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    let cartTypeId = tokenizedPaymentCard.CardTypeId;\n\n    if (!cartTypeId) {\n        cartTypeId = await getCardTypeId(ctx, cardPrefix);\n    }\n\n    if (!tenderTypes) {\n        throw new Error('Fail to get card tender type');\n    }\n\n    if (!cartTypeId) {\n        throw new Error('Fail to get card type id');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayCard);\n    const cardTenderLine: CartTenderLine = {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        Amount,\n        TenderTypeId,\n        CardTypeId: cartTypeId\n    };\n    cardTenderLine.TokenizedPaymentCard = {\n        ...tokenizedPaymentCard,\n        CardTypeId: cartTypeId,\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.TokenizedPaymentCard',\n        House: tokenizedPaymentCard.House || 'N/A',\n        ...(tokenizedPaymentCard.CardTokenInfo && {\n            CardTokenInfo: {\n                ...tokenizedPaymentCard.CardTokenInfo,\n                // @ts-ignore\n                // tslint:disable-next-line:prefer-type-cast\n                '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CardTokenInfo'\n            }\n        }),\n        ...(billingAddress && {\n            Phone: billingAddress.Phone,\n            Country: billingAddress.ThreeLetterISORegionName,\n            Address1: billingAddress.Street,\n            City: billingAddress.City,\n            State: billingAddress.State,\n            Zip: billingAddress.ZipCode\n        })\n    };\n\n    return cardTenderLine;\n}\n\nasync function createCustomerAccountTenderLine(\n    ctx: IActionContext,\n    Amount: number,\n    Currency: string = 'USD',\n): Promise<CartTenderLine> {\n    const CustomerId = null;\n    if (!ctx.requestContext.user.isAuthenticated) {\n       ctx.telemetry.error('A customer id is required to pay with customer account');\n    }\n\n    const tenderTypes = await getTenderTypesAsync({ callerContext: ctx, queryResultSettings: {} }).catch(error => {\n        throw error;\n    });\n\n    if (!tenderTypes) {\n        ctx.telemetry.error('No tender types found for this channel');\n    }\n\n    const TenderTypeId = findTenderIdTypeByOperationId(tenderTypes, OPERATIONS.PayCustomerAccount);\n    if (!TenderTypeId) {\n        ctx.telemetry.error('No customer account tender type');\n    }\n    return {\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        '@odata.type': '#Microsoft.Dynamics.Commerce.Runtime.DataModel.CartTenderLine',\n        // @ts-ignore\n        // tslint:disable-next-line:prefer-type-cast\n        'Amount@odata.type': '#Decimal',\n        Currency,\n        TenderTypeId,\n        Amount,\n        // @ts-ignore\n        CustomerId\n    };\n}\n\n// tslint:disable-next-line:max-func-body-length\nexport default async (ctx: IActionContext): Promise<SalesOrder> => {\n    const checkoutState = await getCheckoutState(ctx).catch(error => {\n        throw error;\n    });\n\n    const cartState = checkoutState.checkoutCart;\n\n    const channelConfiguration = ctx.requestContext.channel;\n\n    if (!cartState || !Object.keys(cartState).length || !checkoutState || !channelConfiguration) {\n        throw new Error('Fail to placeOrder');\n    }\n\n    const {\n        giftCardExtends,\n        tokenizedPaymentCard,\n        cardPrefix,\n        guestCheckoutEmail,\n        billingAddress,\n        loyaltyAmount\n    } = checkoutState;\n    const { Currency } = channelConfiguration;\n\n    let amountDue = cartState.cart.AmountDue || 0;\n    let cartTenderLines;\n    const getTenderLinePromises = [];\n    const loyaltyCardNumber = cartState.cart.LoyaltyCardId;\n\n    // Pay by loyalty first\n    if (loyaltyAmount && loyaltyCardNumber) {\n        const chargedAmount = roundNumber(Math.min(loyaltyAmount, amountDue));\n        const loyaltyTenderLinePromise = getLoyaltyTenderLine(ctx, loyaltyCardNumber, chargedAmount, Currency);\n        getTenderLinePromises.push(loyaltyTenderLinePromise);\n        amountDue = roundNumber(amountDue - chargedAmount);\n    }\n\n    // Then by gift card\n    if (giftCardExtends && giftCardExtends.length) {\n        giftCardExtends.some(giftCardExtend => {\n            if (giftCardExtend.Balance && amountDue > 0) {\n                const chargedAmount = roundNumber(Math.min(giftCardExtend.Balance, amountDue));\n                const tenderTypeId = giftCardExtend.TenderTypeId;\n                const giftCardPin = giftCardExtend.Pin;\n                const giftCardExpirationYear = giftCardExtend.ExpirationDate ? parseInt(giftCardExtend.ExpirationDate?.split('/')[1], 10) : undefined;\n                const giftCardExpirationMonth = giftCardExtend.ExpirationDate ? parseInt(giftCardExtend.ExpirationDate?.split('/')[0], 10) : undefined;\n                const creditCardTenderLinePromise = getGiftCardTenderLine(ctx, giftCardExtend.Id, chargedAmount, Currency, tenderTypeId, giftCardPin, giftCardExpirationYear, giftCardExpirationMonth);\n                getTenderLinePromises.push(creditCardTenderLinePromise);\n                amountDue = roundNumber(amountDue - chargedAmount);\n            }\n            return amountDue === 0;\n        });\n    }\n\n    // Then by customer account\n    if (checkoutState.customerAccountAmount > 0) {\n            const chargedAmount = roundNumber(Math.min(checkoutState.customerAccountAmount, amountDue));\n            const customerAccountTenderLinePromise = createCustomerAccountTenderLine(ctx, chargedAmount, Currency);\n            getTenderLinePromises.push(customerAccountTenderLinePromise);\n            amountDue = roundNumber(amountDue - chargedAmount);\n    }\n\n    // Pay the rest by credit card\n    if (amountDue > 0) {\n        if (!tokenizedPaymentCard) {\n            throw new Error('Fail to placeOrder: no token found');\n        }\n        const creditCardTenderLinePromise = getCreditCardTenderLine(\n            ctx,\n            tokenizedPaymentCard,\n            cardPrefix,\n            amountDue,\n            Currency,\n            billingAddress\n        );\n        getTenderLinePromises.push(creditCardTenderLinePromise);\n    }\n\n    if (getTenderLinePromises.length > 0) {\n        // When payment methods is required\n        cartTenderLines = await Promise.all(getTenderLinePromises).catch(error => {\n            throw error;\n        });\n\n        if (!cartTenderLines || !cartTenderLines.length) {\n            throw new Error('Fail to placeOrder: fail to get cart tender lines');\n        }\n    }\n\n    // Proceed checkout\n    const salesOrder = await checkoutAsync(\n        { callerContext: ctx, bypassCache: 'get' },\n        cartState.cart.Id,\n        guestCheckoutEmail,\n        // @ts-ignore fields tokenizedPaymentCard and receiptNumberSequence are optional\n        undefined,\n        undefined,\n        cartTenderLines || null,\n        cartState.cart.Version\n        // @ts-ignore\n    ).catch(error => {\n        throw error;\n    });\n\n    if (!salesOrder) {\n        throw new Error('Fail to placeOrder: fail to checkout');\n    }\n\n    return salesOrder;\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}