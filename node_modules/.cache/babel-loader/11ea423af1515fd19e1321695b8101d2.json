{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */'use strict';import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _memoize from\"lodash/memoize\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{asSystemMetadata,EXCEPTION_BADCONFIGPASSED,EXCEPTION_JSONPARSEFAILED,EXCEPTION_NOTYPEQUERY,LogLevel,MESSAGE_INVALIDJSONPATH,MESSAGE_MOCKSNOTFOUND,MESSAGE_NEWCHILDPROP,MESSAGE_OVERRIDE_MODULE_CONFIG,StaticTelemetry}from'@msdyn365-commerce/telemetry-internal';import{safeFileExists,safeGetAllFilesPath,safeReadJson}from'@msdyn365-commerce/utilities-internal';import*as JsonPointer from'jsonpointer';import path from'path';import keystonePaths from'../paths';import{MODULE_QUERY_PARAMETER_SEPARATOR,MODULE_QUERY_PROPERTY_SEPARATOR,validateAndGetOverrideData}from'../utils/query-utils';/**\r\n * Captures mock ids from query parameters\r\n * @param query Dictionary of query parameters\r\n * @returns array of module mock ids\r\n */export var getMockIdFromRequest=function getMockIdFromRequest(query){var typeQuery=query.type;if(!typeQuery){throw new Error(EXCEPTION_NOTYPEQUERY);}return typeQuery.split(MODULE_QUERY_PARAMETER_SEPARATOR);};/**\r\n * Parses the payload\r\n * @param content stringified version of paryload\r\n * @returns JSON object\r\n */export var parsePayload=function parsePayload(content){try{return typeof content==='string'?JSON.parse(content):content;}catch(error){StaticTelemetry.log(LogLevel.Debug,EXCEPTION_JSONPARSEFAILED,{values:[asSystemMetadata(content)]});throw new Error(EXCEPTION_JSONPARSEFAILED);}};export var getOverrideProperties=function getOverrideProperties(query,telemetry){try{if(query.config){var configQuery=decodeURIComponent(query.config);return validateAndGetOverrideData(configQuery,telemetry);}}catch(e){telemetry.log(LogLevel.Error,telemetry.stringFormat(EXCEPTION_BADCONFIGPASSED,[query.config]),{exception:e});return null;}return null;};export var overrideMockDataIfNeeded=function overrideMockDataIfNeeded(mockId,mockModule,queryStrings,telemetry){var overrideProp=getOverrideProperties(queryStrings,telemetry);// Expected pattern to edit a property of a module is <module_name>/<json_pointer_path>/<value>\n// eg1: partner-hero/dataBinder/BannerDataBinder\n// eg2: partner-hero/dataProviders/0/data/Items/0/PrimaryImage/Width/200\nif(overrideProp){if(mockId===overrideProp.moduleName&&JsonPointer.get(mockModule,overrideProp.jsonPath)){JsonPointer.set(mockModule,overrideProp.jsonPath,overrideProp.value);telemetry.log(LogLevel.Debug,telemetry.stringFormat(MESSAGE_OVERRIDE_MODULE_CONFIG,[overrideProp.jsonPath,overrideProp.value,mockId]));}else{// Get the parent json pointer path\n// eg: parent path of partner-hero/config/size is partner-hero/config\nvar parentPathPosition=overrideProp.jsonPath.lastIndexOf(MODULE_QUERY_PROPERTY_SEPARATOR);var parentPath=overrideProp.jsonPath.substring(0,parentPathPosition);var parentValue=JsonPointer.get(mockModule,parentPath);if(parentValue){var newChildProperty=overrideProp.jsonPath.substring(parentPathPosition+1,overrideProp.jsonPath.length);parentValue[\"\".concat(newChildProperty)]=overrideProp.value;JsonPointer.set(mockModule,parentPath,parentValue);telemetry.log(LogLevel.Debug,telemetry.stringFormat(MESSAGE_NEWCHILDPROP,[newChildProperty,parentPath,mockId]));}else{telemetry.log(LogLevel.Debug,telemetry.stringFormat(MESSAGE_INVALIDJSONPATH,[parentPath,mockId]));}}}return mockModule;};var readMockFile=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(mockFilePath){var mockFile;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return safeReadJson(mockFilePath);case 3:mockFile=_context.sent;_context.next=9;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",undefined);case 9:return _context.abrupt(\"return\",mockFile);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,6]]);}));return function readMockFile(_x){return _ref.apply(this,arguments);};}();/**\r\n * Searches for mock regiserted under module name. First checks partner mocks from source then microsoft-modules.\r\n * @param moduleName\r\n * @param mock\r\n */export var searchForMock=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(moduleName,mock){var partnerModuleMockPath,moduleRoot,mockPattern,opts,mocks;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:partnerModuleMockPath=path.resolve(keystonePaths.KEYSTONE_MODULE_MOCKS_DIR,\"\".concat(moduleName,\"/\"),\"\".concat(mock,\".json\"));_context2.next=3;return safeFileExists(partnerModuleMockPath);case 3:if(!_context2.sent){_context2.next=5;break;}return _context2.abrupt(\"return\",partnerModuleMockPath);case 5:moduleRoot=path.resolve(keystonePaths.KEYSTONE_NODE_MODULES_DIR,\"\".concat(moduleName));mockPattern=\"@(dist|build|src)/**/mocks/\".concat(mock,\".json\");opts={cwd:moduleRoot};_context2.next=10;return safeGetAllFilesPath(mockPattern,opts);case 10:mocks=_context2.sent;if(!mocks.length){_context2.next=13;break;}return _context2.abrupt(\"return\",path.resolve(keystonePaths.KEYSTONE_NODE_MODULES_DIR,\"\".concat(moduleName),mocks[0]));case 13:return _context2.abrupt(\"return\",false);case 14:case\"end\":return _context2.stop();}}},_callee2);}));return function searchForMock(_x2,_x3){return _ref2.apply(this,arguments);};}();/**\r\n * Retrives a mocked module from file without overrides\r\n * @returns Parsed module if found otherwise false.\r\n */var getMockModule=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(moduleName,mock){var moduleMockFilePathForModule,moduleFile;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return searchForMock(moduleName,mock);case 2:moduleMockFilePathForModule=_context3.sent;if(moduleMockFilePathForModule){_context3.next=5;break;}return _context3.abrupt(\"return\",false);case 5:_context3.next=7;return readMockFile(moduleMockFilePathForModule);case 7:moduleFile=_context3.sent;if(!(!moduleFile||moduleFile.length<=0)){_context3.next=10;break;}return _context3.abrupt(\"return\",false);case 10:return _context3.abrupt(\"return\",parsePayload(moduleFile));case 11:case\"end\":return _context3.stop();}}},_callee3);}));return function getMockModule(_x4,_x5){return _ref3.apply(this,arguments);};}();export var getV3mockPageJson=function getV3mockPageJson(){return parsePayload({pageRoot:{bodyClass:'this should be body class',modules:{htmlHead:[],bodyBegin:[],body:[{modules:{primary:[{modules:{content:[]},id:'primaryRegion',typeName:'default-container'}]},id:'page',config:{},typeName:'default-page'}],bodyEnd:[],app:[]},id:'coreroot',typeName:'core-root'},renderingContext:{gridSettings:{xs:{w:768},sm:{w:992},md:{w:1200},lg:{w:1600},xl:{w:1800}}}});};var getMockModuleWithOverride=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(mockId,index,mocksNotFound,idSet,queryStrings,telemetry){var mockIdString,queryArg,moduleName,mock,mockModule,id;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:mockIdString=mockId.toString();queryArg=mockIdString.split(':');moduleName=queryArg[0];mock=queryArg[1]||moduleName;_context4.next=6;return getMockModule(moduleName,mock);case 6:mockModule=_context4.sent;if(mockModule){_context4.next=10;break;}mocksNotFound.push(mockId);return _context4.abrupt(\"return\");case 10:// any necessary here as type varies by module\nmockModule=overrideMockDataIfNeeded(mock,mockModule,queryStrings,telemetry);// Populate page with mock\nid=mockModule.id;if(id&&idSet.has(id)){mockModule.id=mockModule.id.concat(index.toString());}idSet.add(mockModule.id);return _context4.abrupt(\"return\",mockModule);case 15:case\"end\":return _context4.stop();}}},_callee4);}));return function getMockModuleWithOverride(_x6,_x7,_x8,_x9,_x10,_x11){return _ref4.apply(this,arguments);};}();var getMockDataBasedOnRequestQueryString=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(queryStrings,telemetry){var mockIds,pageJsonV3,idSet,mocksNotFound,modulePromises;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:mockIds=getMockIdFromRequest(queryStrings);if(!(mockIds.length<1||mockIds.length===1&&mockIds[0]==='')){_context5.next=3;break;}throw new Error(EXCEPTION_NOTYPEQUERY);case 3:// Get the default mock page json\npageJsonV3=getV3mockPageJson();idSet=new Set();// For each mock id, populate page\nmocksNotFound=[];// Create a list of promises to fetch the module mocks and then resolve all using Promise all\nmodulePromises=mockIds.map(function(mockId,index){return getMockModuleWithOverride(mockId,index,mocksNotFound,idSet,queryStrings,telemetry);});return _context5.abrupt(\"return\",Promise.all(modulePromises).then(function(mockModules){// Loop through the list of returned mock modules, if the module is defined\n// add it to the page json\nfor(var i=0;i<mockModules.length;i++){var curModule=mockModules[i];if(curModule){// @ts-ignore\npageJsonV3.pageRoot.modules.body[0].modules.primary[0].modules.content.push(curModule);// Add properties from module mocks rendering context if provided\npageJsonV3.renderingContext=_objectSpread(_objectSpread({},pageJsonV3.renderingContext),curModule.renderingContext);}}// If there were mocks that weren't found, add those at the end and log an error message\nif(mocksNotFound.length>0&&queryStrings.debug){mocksNotFound.forEach(function(mockNotFound,index){// @ts-ignore\npageJsonV3.pageRoot.modules.body[0].modules.primary[0].modules.content.push({id:\"\".concat(mockNotFound,\"-\").concat(index),typeName:mockNotFound,data:{},dataActions:[],config:{}});});telemetry.log(LogLevel.Warning,telemetry.stringFormat(MESSAGE_MOCKSNOTFOUND,[mocksNotFound.join()]));}return pageJsonV3;}));case 8:case\"end\":return _context5.stop();}}},_callee5);}));return function getMockDataBasedOnRequestQueryString(_x12,_x13){return _ref5.apply(this,arguments);};}();if(process.env.NODE_ENV==='production'){getMockModule=_memoize(getMockModule,function(moduleName,mock){return\"\".concat(moduleName).concat(mock);});getMockDataBasedOnRequestQueryString=_memoize(getMockDataBasedOnRequestQueryString,function(queryString){return JSON.stringify(queryString);});}export{getMockModule,getMockDataBasedOnRequestQueryString};","map":{"version":3,"sources":["../../../src/mock/mock-helper.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n'use strict';\n\nimport { IAny, IDictionary, IGeneric, IModule, IPageResponse } from '@msdyn365-commerce/core-internal';\nimport {\n    asSystemMetadata,\n    EXCEPTION_BADCONFIGPASSED,\n    EXCEPTION_JSONPARSEFAILED,\n    EXCEPTION_NOTYPEQUERY,\n    InternalTelemetry,\n    LogLevel,\n    MESSAGE_INVALIDJSONPATH,\n    MESSAGE_MOCKSNOTFOUND,\n    MESSAGE_MULTIPLE_REND_CONTEXTS,\n    MESSAGE_NEWCHILDPROP,\n    MESSAGE_OVERRIDE_MODULE_CONFIG,\n    StaticTelemetry\n} from '@msdyn365-commerce/telemetry-internal';\nimport { isEmptyOrNullObject, safeFileExists, safeGetAllFilesPath, safeReadJson } from '@msdyn365-commerce/utilities-internal';\nimport { IOptions } from 'glob';\nimport * as JsonPointer from 'jsonpointer';\nimport { memoize } from 'lodash';\nimport path from 'path';\nimport keystonePaths from '../paths';\nimport {\n    IModuleOverrideData,\n    MODULE_QUERY_PARAMETER_SEPARATOR,\n    MODULE_QUERY_PROPERTY_SEPARATOR,\n    validateAndGetOverrideData\n} from '../utils/query-utils';\n\n/**\n * Captures mock ids from query parameters\n * @param query Dictionary of query parameters\n * @returns array of module mock ids\n */\nexport const getMockIdFromRequest = (query: IDictionary<string>) => {\n    const typeQuery = query.type;\n    if (!typeQuery) {\n        throw new Error(EXCEPTION_NOTYPEQUERY);\n    }\n\n    return typeQuery.split(MODULE_QUERY_PARAMETER_SEPARATOR);\n};\n\n/**\n * Parses the payload\n * @param content stringified version of paryload\n * @returns JSON object\n */\nexport const parsePayload = (content: string | object) => {\n    try {\n        return typeof content === 'string' ? JSON.parse(content) : content;\n    } catch (error) {\n        StaticTelemetry.log(LogLevel.Debug, EXCEPTION_JSONPARSEFAILED, { values: [asSystemMetadata(content)] });\n        throw new Error(EXCEPTION_JSONPARSEFAILED);\n    }\n};\n\nexport const getOverrideProperties = (query: IDictionary<string>, telemetry: InternalTelemetry): IModuleOverrideData | null => {\n    try {\n        if (query.config) {\n            const configQuery = decodeURIComponent(query.config);\n            return validateAndGetOverrideData(configQuery, telemetry);\n        }\n    } catch (e) {\n        telemetry.log(LogLevel.Error, telemetry.stringFormat(EXCEPTION_BADCONFIGPASSED, [query.config]), { exception: e });\n        return null;\n    }\n\n    return null;\n};\n\nexport const overrideMockDataIfNeeded = (\n    mockId: string,\n    mockModule: object,\n    queryStrings: IDictionary<string>,\n    telemetry: InternalTelemetry\n): IModule<IGeneric<IAny>> => {\n    const overrideProp: IModuleOverrideData | null = getOverrideProperties(queryStrings, telemetry);\n    // Expected pattern to edit a property of a module is <module_name>/<json_pointer_path>/<value>\n    // eg1: partner-hero/dataBinder/BannerDataBinder\n    // eg2: partner-hero/dataProviders/0/data/Items/0/PrimaryImage/Width/200\n    if (overrideProp) {\n        if (mockId === overrideProp.moduleName && JsonPointer.get(mockModule, overrideProp.jsonPath)) {\n            JsonPointer.set(mockModule, overrideProp.jsonPath, overrideProp.value);\n            telemetry.log(\n                LogLevel.Debug,\n                telemetry.stringFormat(MESSAGE_OVERRIDE_MODULE_CONFIG, [overrideProp.jsonPath, <string>overrideProp.value, mockId])\n            );\n        } else {\n            // Get the parent json pointer path\n            // eg: parent path of partner-hero/config/size is partner-hero/config\n            const parentPathPosition = overrideProp.jsonPath.lastIndexOf(MODULE_QUERY_PROPERTY_SEPARATOR);\n            const parentPath = overrideProp.jsonPath.substring(0, parentPathPosition);\n            const parentValue = JsonPointer.get(mockModule, parentPath);\n            if (parentValue) {\n                const newChildProperty = overrideProp.jsonPath.substring(parentPathPosition + 1, overrideProp.jsonPath.length);\n                parentValue[`${newChildProperty}`] = overrideProp.value;\n                JsonPointer.set(mockModule, parentPath, parentValue);\n                telemetry.log(LogLevel.Debug, telemetry.stringFormat(MESSAGE_NEWCHILDPROP, [newChildProperty, parentPath, mockId]));\n            } else {\n                telemetry.log(LogLevel.Debug, telemetry.stringFormat(MESSAGE_INVALIDJSONPATH, [parentPath, mockId]));\n            }\n        }\n    }\n\n    return <IModule<IGeneric<IAny>>>mockModule;\n};\n\nconst readMockFile = async (mockFilePath: string): Promise<string | undefined> => {\n    let mockFile;\n    try {\n        mockFile = await safeReadJson(mockFilePath);\n    } catch {\n        return undefined;\n    }\n    return mockFile;\n};\n\n/**\n * Searches for mock regiserted under module name. First checks partner mocks from source then microsoft-modules.\n * @param moduleName\n * @param mock\n */\nexport const searchForMock = async (moduleName: string, mock: string) => {\n    const partnerModuleMockPath = path.resolve(keystonePaths.KEYSTONE_MODULE_MOCKS_DIR, `${moduleName}/`, `${mock}.json`);\n\n    if (await safeFileExists(partnerModuleMockPath)) {\n        return partnerModuleMockPath;\n    }\n\n    const moduleRoot = path.resolve(keystonePaths.KEYSTONE_NODE_MODULES_DIR, `${moduleName}`);\n    const mockPattern = `@(dist|build|src)/**/mocks/${mock}.json`;\n    const opts: Partial<IOptions> = {\n        cwd: moduleRoot\n    };\n    const mocks = await safeGetAllFilesPath(mockPattern, opts);\n    if (mocks.length) {\n        // file has been found\n        return path.resolve(keystonePaths.KEYSTONE_NODE_MODULES_DIR, `${moduleName}`, mocks[0]);\n    }\n    return false;\n};\n\n/**\n * Retrives a mocked module from file without overrides\n * @returns Parsed module if found otherwise false.\n */\nlet getMockModule = async (moduleName: string, mock: string) => {\n    const moduleMockFilePathForModule = await searchForMock(moduleName, mock);\n\n    if (!moduleMockFilePathForModule) {\n        return false;\n    }\n\n    const moduleFile = await readMockFile(moduleMockFilePathForModule);\n\n    if (!moduleFile || moduleFile.length <= 0) {\n        return false;\n    }\n\n    return parsePayload(moduleFile);\n};\n\nexport const getV3mockPageJson = (): IPageResponse => {\n    return <IPageResponse>parsePayload({\n        pageRoot: {\n            bodyClass: 'this should be body class',\n            modules: {\n                htmlHead: [],\n                bodyBegin: [],\n                body: [\n                    {\n                        modules: {\n                            primary: [\n                                {\n                                    modules: {\n                                        content: []\n                                    },\n                                    id: 'primaryRegion',\n                                    typeName: 'default-container'\n                                }\n                            ]\n                        },\n                        id: 'page',\n                        config: {},\n                        typeName: 'default-page'\n                    }\n                ],\n                bodyEnd: [],\n                app: []\n            },\n            id: 'coreroot',\n            typeName: 'core-root'\n        },\n        renderingContext: {\n            gridSettings: {\n                xs: { w: 768 },\n                sm: { w: 992 },\n                md: { w: 1200 },\n                lg: { w: 1600 },\n                xl: { w: 1800 }\n            }\n        }\n    });\n};\n\nconst getMockModuleWithOverride = async (\n    mockId: string,\n    index: number,\n    mocksNotFound: string[],\n    idSet: Set<String>,\n    queryStrings: IDictionary<string>,\n    telemetry: InternalTelemetry\n) => {\n    const mockIdString: string = mockId.toString();\n    const queryArg: string[] = mockIdString.split(':');\n    const moduleName = queryArg[0];\n    const mock = queryArg[1] || moduleName;\n\n    let mockModule = await getMockModule(moduleName, mock);\n\n    if (!mockModule) {\n        mocksNotFound.push(mockId);\n        return;\n    }\n\n    // any necessary here as type varies by module\n    mockModule = overrideMockDataIfNeeded(mock, mockModule, queryStrings, telemetry);\n\n    // Populate page with mock\n    const id = mockModule.id;\n    if (id && idSet.has(id)) {\n        mockModule.id = mockModule.id.concat(index.toString());\n    }\n    idSet.add(mockModule.id);\n\n    return mockModule;\n};\n\nlet getMockDataBasedOnRequestQueryString = async (queryStrings: IDictionary<string>, telemetry: InternalTelemetry) => {\n    const mockIds = getMockIdFromRequest(queryStrings);\n    if (mockIds.length < 1 || (mockIds.length === 1 && mockIds[0] === '')) {\n        throw new Error(EXCEPTION_NOTYPEQUERY);\n    }\n    // Get the default mock page json\n    const pageJsonV3: IPageResponse = getV3mockPageJson();\n    const idSet: Set<String> = new Set();\n    // For each mock id, populate page\n    const mocksNotFound: string[] = [];\n    // Create a list of promises to fetch the module mocks and then resolve all using Promise all\n    const modulePromises = mockIds.map((mockId: string, index: number) => {\n        return getMockModuleWithOverride(mockId, index, mocksNotFound, idSet, queryStrings, telemetry);\n    });\n    return Promise.all(modulePromises).then(mockModules => {\n        // Loop through the list of returned mock modules, if the module is defined\n        // add it to the page json\n        for (let i = 0; i < mockModules.length; i++) {\n            const curModule = mockModules[i];\n            if (curModule) {\n                // @ts-ignore\n                pageJsonV3.pageRoot.modules.body[0].modules.primary[0].modules.content.push(curModule);\n                // Add properties from module mocks rendering context if provided\n                pageJsonV3.renderingContext = { ...pageJsonV3.renderingContext, ...curModule.renderingContext };\n            }\n        }\n\n        // If there were mocks that weren't found, add those at the end and log an error message\n        if (mocksNotFound.length > 0 && queryStrings.debug) {\n            mocksNotFound.forEach((mockNotFound: string, index: number) => {\n                // @ts-ignore\n                pageJsonV3.pageRoot.modules.body[0].modules.primary[0].modules.content.push({\n                    id: `${mockNotFound}-${index}`,\n                    typeName: mockNotFound,\n                    data: {},\n                    dataActions: [],\n                    config: {}\n                });\n            });\n\n            telemetry.log(LogLevel.Warning, telemetry.stringFormat(MESSAGE_MOCKSNOTFOUND, [mocksNotFound.join()]));\n        }\n        return pageJsonV3;\n    });\n};\n\nif (process.env.NODE_ENV === 'production') {\n    getMockModule = memoize(getMockModule, (moduleName: string, mock: string): string => {\n        return `${moduleName}${mock}`;\n    });\n    getMockDataBasedOnRequestQueryString = memoize(getMockDataBasedOnRequestQueryString, (queryString: IDictionary<string>) => {\n        return JSON.stringify(queryString);\n    });\n}\nexport { getMockModule, getMockDataBasedOnRequestQueryString };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}