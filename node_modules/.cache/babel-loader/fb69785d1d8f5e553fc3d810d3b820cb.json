{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { generateImageUrl } from '@msdyn365-commerce-modules/retail-actions';\nimport { createObservableDataAction } from '@msdyn365-commerce/core';\nimport { getSearchSuggestionsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g'; // @ts-ignore\n\nexport var SuggestionType;\n\n(function (SuggestionType) {\n  SuggestionType[\"Category\"] = \"ScopedCategory\";\n  SuggestionType[\"Keyword\"] = \"Keyword\";\n  SuggestionType[\"Product\"] = \"Product\";\n  SuggestionType[\"None\"] = \"None\";\n})(SuggestionType || (SuggestionType = {}));\n/**\n * Input class for auto suggest search input\n */\n\n\nexport class AutoSuggestInput {\n  constructor(searchText, top, suggestionType, hitPrefix, hitSuffix) {\n    this.getCacheKey = () => \"AutoSuggestSearchSuggestions\";\n\n    this.getCacheObjectType = () => 'AutoSuggestSearchSuggestions';\n\n    this.dataCacheType = () => 'none';\n\n    this.searchQuery = searchText;\n    this.topResultsCount = top;\n    this.suggestionType = suggestionType;\n    this.hitPrefix = hitPrefix;\n    this.hitSuffix = hitSuffix;\n  }\n\n}\n\nconst createInput = inputData => {\n  return new AutoSuggestInput();\n};\n/**\n * Calls the Retail API and returns a auto-suggest suggestions\n */\n\n\nexport async function getSearchSuggestionsAction(input, ctx) {\n  // If no input is provided fail out\n  if (!input || !input.searchQuery) {\n    throw new Error('[getSearchSuggestionsAction]No valid Input was provided, failing');\n  }\n\n  const autosuggest = {};\n  const autoSuggestPromises = [_getAutoSuggest(input, autosuggest, ctx)];\n  return Promise.all(autoSuggestPromises).then(() => {\n    return autosuggest;\n  });\n}\n\nasync function _getAutoSuggest(input, autosuggest, ctx) {\n  const searchCriteria = {\n    ProductSearchCriteria: {\n      SearchCondition: input.searchQuery && input.searchQuery.length > 0 ? input.searchQuery : '',\n      Context: {\n        ChannelId: +ctx.requestContext.apiSettings.channelId,\n        CatalogId: +ctx.requestContext.apiSettings.catalogId\n      }\n    },\n    HitPrefix: input.hitPrefix,\n    HitSuffix: input.hitSuffix,\n    SuggestionType: input.suggestionType\n  };\n  const searchSuggestions = await getSearchSuggestionsAsync({\n    callerContext: ctx,\n    queryResultSettings: {\n      Paging: {\n        Top: input.topResultsCount\n      }\n    }\n  }, searchCriteria);\n\n  if (searchSuggestions && searchSuggestions.length > 0) {\n    // Generate image url\n    searchSuggestions.map(item => item.ImageUrl = item.ImageUrl ? generateImageUrl(item.ImageUrl, ctx.requestContext.apiSettings) : '');\n    autosuggest.AllSearchResults = searchSuggestions;\n  } else {\n    ctx.telemetry.error(\"[getSearchSuggestionsAction] unable to get availabilites for search with suggestion type \".concat(searchCriteria.SuggestionType));\n  }\n}\n\nexport default createObservableDataAction({\n  id: '@msdyn365-commerce-modules/search/get-auto-suggest-suggestions',\n  action: getSearchSuggestionsAction,\n  input: createInput\n});","map":{"version":3,"sources":["/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/node_modules/source-map-loader/index.js!/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/src/modules/search/actions/get-auto-suggest-suggestions.ts"],"names":[],"mappings":"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","sourcesContent":["import { generateImageUrl } from '@msdyn365-commerce-modules/retail-actions';\nimport { Autosuggestions } from '@msdyn365-commerce/commerce-entities';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput,\n    ICreateActionContext\n} from '@msdyn365-commerce/core';\nimport { SearchSuggestion, SearchSuggestionCriteria } from '@msdyn365-commerce/retail-proxy';\nimport {\n    getSearchSuggestionsAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\n// @ts-ignore\nexport const enum SuggestionType {\n    Category = 'ScopedCategory',\n    Keyword = 'Keyword',\n    Product = 'Product',\n    None = 'None'\n}\n\n/**\n * Input class for auto suggest search input\n */\nexport class AutoSuggestInput implements IActionInput {\n    public searchQuery?: string;\n    public topResultsCount?: number;\n    public suggestionType?: string;\n    public hitPrefix?: string;\n    public hitSuffix?: string;\n\n    constructor(searchText?: string, top?: number, suggestionType?: string, hitPrefix?: string, hitSuffix?: string) {\n        this.searchQuery = searchText;\n        this.topResultsCount = top;\n        this.suggestionType = suggestionType;\n        this.hitPrefix = hitPrefix;\n        this.hitSuffix = hitSuffix;\n    }\n\n    public getCacheKey = () => `AutoSuggestSearchSuggestions`;\n    public getCacheObjectType = () => 'AutoSuggestSearchSuggestions';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nconst createInput = (inputData: ICreateActionContext) => {\n    return new AutoSuggestInput();\n};\n\n/**\n * Calls the Retail API and returns a auto-suggest suggestions\n */\nexport async function getSearchSuggestionsAction(input: AutoSuggestInput, ctx: IActionContext): Promise<Autosuggestions | null> {\n    // If no input is provided fail out\n    if (!input || !input.searchQuery) {\n        throw new Error('[getSearchSuggestionsAction]No valid Input was provided, failing');\n    }\n\n    const autosuggest: Autosuggestions = {};\n\n    const autoSuggestPromises = [\n        _getAutoSuggest(input, autosuggest, ctx),\n    ];\n    return Promise.all(autoSuggestPromises).then(() => {\n        return autosuggest;\n    });\n}\n\nasync function _getAutoSuggest(\n    input: AutoSuggestInput,\n    autosuggest: Autosuggestions,\n    ctx: IActionContext\n): Promise<void> {\n    const searchCriteria: SearchSuggestionCriteria = {\n        ProductSearchCriteria: {\n            SearchCondition: input.searchQuery && input.searchQuery.length > 0 ? input.searchQuery : '',\n            Context: {\n                ChannelId: +ctx.requestContext.apiSettings.channelId,\n                CatalogId: +ctx.requestContext.apiSettings.catalogId\n            }\n        },\n        HitPrefix: input.hitPrefix,\n        HitSuffix: input.hitSuffix,\n        SuggestionType: input.suggestionType\n    };\n\n    const searchSuggestions = await getSearchSuggestionsAsync(\n        { callerContext: ctx, queryResultSettings: { Paging: { Top: input.topResultsCount } } },\n        searchCriteria\n    );\n\n    if (searchSuggestions && searchSuggestions.length > 0) {\n        // Generate image url\n        searchSuggestions.map(\n            (item: SearchSuggestion) =>\n                (item.ImageUrl = item.ImageUrl ? generateImageUrl(item.ImageUrl, ctx.requestContext.apiSettings) : '')\n        );\n\n        autosuggest.AllSearchResults = searchSuggestions;\n    } else {\n        ctx.telemetry.error(`[getSearchSuggestionsAction] unable to get availabilites for search with suggestion type ${searchCriteria.SuggestionType}`);\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/search/get-auto-suggest-suggestions',\n    action: <IAction<Autosuggestions>>getSearchSuggestionsAction,\n    input: createInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}