{"ast":null,"code":"import\"core-js/modules/web.dom-collections.for-each.js\";import\"core-js/modules/web.dom-collections.iterator.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{AppInsights}from'applicationinsights-js';import{LogLevel}from'../interfaces';import{TelemetryBase}from'../telemetry';import{buildPropertiesList,getPropertiesFromContext,messageTemplateKey,shouldSkipLogging}from'./app-insights-helper';import{safeStringify}from'./logging-helper';/**\r\n * Client-side logger that sends messages to Application Insights\r\n */export class AppInsightsJSLogger{/**\r\n     * Creates a new instance of AppInsights Logger\r\n     * @param instrumentationKey The instrumentation key for the Application Insights instance\r\n     */constructor(){this.options={};AppInsights.trackEvent('Client version of Application Insights registered');}initialize(options){this.options=options;}/**\r\n     * @internal\r\n     * Logs a trace message to AppInsights\r\n     * @param logLevel LogLevel of the message\r\n     * @param context Telemetry context to add to log\r\n     * @param messageTemplate Structured log formatted string\r\n     * @param placeholders List of placeholders in messageTemplate along with position in string\r\n     * @param values Arguments to replace placeholders\r\n     * @param customTags Array of strings to attach to log\r\n     */sendLog(logLevel,context,messageTemplate,// tslint:disable-next-line:no-any\nplaceholders,customTags,exception){// Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\nconst severityLevel=AppInsightsJSLogger._severityLevelMapping.get(logLevel);if(shouldSkipLogging(severityLevel,this.options.isDebug)){return;}// Build properties list with telemetry context and message template arguments\nconst properties=buildPropertiesList(context,placeholders,customTags);if(exception===undefined){// Send log to AppInsights as trace event\nAppInsights.trackTrace(messageTemplate,properties,severityLevel);}else{// Attach message template as custom property\nproperties[messageTemplateKey]=messageTemplate;// Send log to AppInsights as exception event\nAppInsights.trackException(exception,undefined,properties,undefined,severityLevel);}}/**\r\n     * @internal\r\n     * Logs a trace message to AppInsights\r\n     * @param logLevel Severity level of the log\r\n     * @param message String to log\r\n     * @param args Any additional objects to log\r\n     * @param context Additional properties to add to the log\r\n     */log(logLevel,message,args,context){// Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\nconst severityLevel=AppInsightsJSLogger._severityLevelMapping.get(logLevel);if(shouldSkipLogging(severityLevel,this.options.isDebug)){return;}// Append any extra arguments to the message\nlet fullMessage=message;args.forEach(arg=>{fullMessage=fullMessage.concat('\\n',safeStringify(arg));});AppInsights.trackTrace(\"\".concat(logLevel,\": \").concat(fullMessage),getPropertiesFromContext(context));}/**\r\n     * @internal\r\n     * Logs an error object to AppInsights as an exception\r\n     * @param error Error object to log\r\n     * @param context Additional properties to add to the log\r\n     */exception(error,context){AppInsights.trackException(error,undefined,getPropertiesFromContext(context));}/**\r\n     * @internal\r\n     * No-op - not tracking client side metrics\r\n     * @param name name of the metric\r\n     * @param value value of the metric\r\n     */trackMetric(name,value,context){// noop\n}/**\r\n     * Track a structured event with app insights\r\n     *\r\n     * @template TProperties interface for properties\r\n     * @template TMeasurements interface for measurements to go with the event\r\n     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options\r\n     */trackEvent(name,properties,measurements,context){AppInsights.trackEvent(name,properties,measurements);}/**\r\n     * Track a page view\r\n     *\r\n     * @param {string} name\r\n     * @param {string} [url]\r\n     */trackPageView(name,url){AppInsights.trackPageView(name,url);}/**\r\n     * Track request\r\n     * @param options request options\r\n     */trackDependency(options){const id=TelemetryBase.generateGuid();// on the client it's a dependency call\nAppInsights.trackDependency(id,options.method,\"https://\".concat(options.target).concat(options.name)||'',options.name||'',options.duration,options.success,options.resultCode,options.properties);}}/**\r\n * Mapping between telemetry framework LogLevel and AppInsights JS Severity Levels\r\n */AppInsightsJSLogger._severityLevelMapping=new Map([[LogLevel.Trace,0],[LogLevel.Information,1],[LogLevel.Warning,2],[LogLevel.Error,3],[LogLevel.Critical,4]]);","map":{"version":3,"sources":["../../../src/loggers/app-insights-js-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { AppInsights } from 'applicationinsights-js';\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { TelemetryBase } from '../telemetry';\nimport { buildPropertiesList, getPropertiesFromContext, messageTemplateKey, shouldSkipLogging } from './app-insights-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * Client-side logger that sends messages to Application Insights\n */\nexport class AppInsightsJSLogger implements ITraceLogger {\n    /**\n     * Mapping between telemetry framework LogLevel and AppInsights JS Severity Levels\n     */\n    private static _severityLevelMapping: Map<LogLevel, number> = new Map([\n        [LogLevel.Trace, 0],\n        [LogLevel.Information, 1],\n        [LogLevel.Warning, 2],\n        [LogLevel.Error, 3],\n        [LogLevel.Critical, 4]\n    ]);\n\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    /**\n     * Creates a new instance of AppInsights Logger\n     * @param instrumentationKey The instrumentation key for the Application Insights instance\n     */\n    constructor() {\n        AppInsights.trackEvent('Client version of Application Insights registered');\n    }\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a trace message to AppInsights\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\n        const severityLevel = AppInsightsJSLogger._severityLevelMapping.get(logLevel);\n\n        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {\n            return;\n        }\n\n        // Build properties list with telemetry context and message template arguments\n        const properties: IDictionary<string> = buildPropertiesList(context, placeholders, customTags);\n\n        if (exception === undefined) {\n            // Send log to AppInsights as trace event\n            AppInsights.trackTrace(messageTemplate, properties, severityLevel);\n        } else {\n            // Attach message template as custom property\n            properties[messageTemplateKey] = messageTemplate;\n\n            // Send log to AppInsights as exception event\n            AppInsights.trackException(exception, undefined, properties, undefined, severityLevel);\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a trace message to AppInsights\n     * @param logLevel Severity level of the log\n     * @param message String to log\n     * @param args Any additional objects to log\n     * @param context Additional properties to add to the log\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\n        const severityLevel = AppInsightsJSLogger._severityLevelMapping.get(logLevel);\n\n        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {\n            return;\n        }\n\n        // Append any extra arguments to the message\n        let fullMessage = message;\n        args.forEach(arg => {\n            fullMessage = fullMessage.concat('\\n', safeStringify(arg));\n        });\n        AppInsights.trackTrace(`${logLevel}: ${fullMessage}`, getPropertiesFromContext(context));\n    }\n    /**\n     * @internal\n     * Logs an error object to AppInsights as an exception\n     * @param error Error object to log\n     * @param context Additional properties to add to the log\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        AppInsights.trackException(error, undefined, getPropertiesFromContext(context));\n    }\n    /**\n     * @internal\n     * No-op - not tracking client side metrics\n     * @param name name of the metric\n     * @param value value of the metric\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        // noop\n    }\n    /**\n     * Track a structured event with app insights\n     *\n     * @template TProperties interface for properties\n     * @template TMeasurements interface for measurements to go with the event\n     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options\n     */\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        AppInsights.trackEvent(name, <IDictionary<string>>(<unknown>properties), <IDictionary<number>>(<unknown>measurements));\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        AppInsights.trackPageView(name, url);\n    }\n\n    /**\n     * Track request\n     * @param options request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        const id = TelemetryBase.generateGuid();\n\n        // on the client it's a dependency call\n        AppInsights.trackDependency(\n            id,\n            options.method,\n            `https://${options.target}${options.name}` || '',\n            options.name || '',\n            options.duration,\n            options.success,\n            options.resultCode,\n            options.properties\n        );\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}