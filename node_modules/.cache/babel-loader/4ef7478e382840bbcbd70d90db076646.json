{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{AsyncResult}from'@msdyn365-commerce/retail-proxy';import{getMediaLocationsAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{generateImageUrl,getSelectedProductIdFromActionInput,getSelectedVariant,SelectedVariantInput}from'./';/**\r\n * The action input class for the getMediaLocationsForSelectedVariant data action\r\n */export var MediaLocationsForSelectedVariantInput=function MediaLocationsForSelectedVariantInput(productId,channelId,selectedProduct,catalogId){_classCallCheck(this,MediaLocationsForSelectedVariantInput);this.getCacheKey=function(){return\"MediaLocationsForSelectedVariant\";};this.getCacheObjectType=function(){return'MediaLocations';};this.dataCacheType=function(){return'none';};this.productId=productId;this.channelId=channelId;this.catalogId=catalogId||0;this.selectedProduct=selectedProduct;};/**\r\n * The createInput method for the getMediaLocationsForSelectedVariant data action\r\n * @param inputData The input data passed to the createInput method\r\n */export var createMediaLocationsForSelectedVariantInput=function createMediaLocationsForSelectedVariantInput(inputData){var productId=getSelectedProductIdFromActionInput(inputData);if(productId){return new MediaLocationsForSelectedVariantInput(+productId,+inputData.requestContext.apiSettings.channelId);}else{throw new Error('Unable to create MediaLocationsForSelectedVariantInput, no productId found on module config or query');}};/**\r\n * The action method for the getMediaLocationsForSelectedVariant data action\r\n */export function getMediaLocationsForSelectedVariantAction(_x,_x2){return _getMediaLocationsForSelectedVariantAction.apply(this,arguments);}/**\r\n * The getMediaLocationsForSelectedVariant data action\r\n * Gets the currently selected variant for the page via the getSelectedVariant data action,\r\n * and then gets the media location information for the variant via the MediaLocations RetailServer API\r\n */function _getMediaLocationsForSelectedVariantAction(){_getMediaLocationsForSelectedVariantAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",AsyncResult.resolve().then(function(){var activeProduct=input.selectedProduct;if(!activeProduct){var selectedVariantInput=new SelectedVariantInput(input.productId,input.channelId);// @ts-ignore: Typing issues that will auto-resolve when SDK 1.4 publishes\nreturn getSelectedVariant(selectedVariantInput,ctx);}return activeProduct;}).then(function(productResult){var activeProduct=productResult;if(activeProduct){return getMediaLocationsAsync({callerContext:ctx,queryResultSettings:{}},activeProduct.RecordId,input.channelId,input.catalogId).then(function(response){return response.map(function(mediaLocation){mediaLocation.Uri=generateImageUrl(mediaLocation.Uri,ctx.requestContext.apiSettings);mediaLocation.AltText=mediaLocation.AltText?mediaLocation.AltText:activeProduct.Name;return mediaLocation;});});}return[];})[\"catch\"](function(error){ctx.trace(error);ctx.telemetry.error(error.message);ctx.telemetry.debug(\"[getMediaLocationsForSelectedVariantAction]Error executing action\");throw new Error('[getMediaLocationsForSelectedVariantAction]Error executing action');}));case 1:case\"end\":return _context.stop();}}},_callee);}));return _getMediaLocationsForSelectedVariantAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-media-locations-for-selected-variant',action:getMediaLocationsForSelectedVariantAction,input:createMediaLocationsForSelectedVariantInput});","map":{"version":3,"sources":["../../src/get-media-locations-for-selected-variant.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { AsyncResult, MediaLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { getMediaLocationsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\n\nimport {\n    generateImageUrl,\n    getSelectedProductIdFromActionInput,\n    getSelectedVariant,\n    SelectedVariantInput\n} from './';\n\n/**\n * The action input class for the getMediaLocationsForSelectedVariant data action\n */\nexport class MediaLocationsForSelectedVariantInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    public catalogId: number;\n    public selectedProduct: SimpleProduct | undefined;\n\n    constructor(productId: number, channelId: number, selectedProduct?: SimpleProduct, catalogId?: number) {\n        this.productId = productId;\n        this.channelId = channelId;\n        this.catalogId = catalogId || 0;\n        this.selectedProduct = selectedProduct;\n    }\n\n    public getCacheKey = () => `MediaLocationsForSelectedVariant`;\n    public getCacheObjectType = () => 'MediaLocations';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * The createInput method for the getMediaLocationsForSelectedVariant data action\n * @param inputData The input data passed to the createInput method\n */\nexport const createMediaLocationsForSelectedVariantInput = (\n    inputData: ICreateActionContext<IGeneric<IAny>>\n): MediaLocationsForSelectedVariantInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n\n    if (productId) {\n        return new MediaLocationsForSelectedVariantInput(+productId, +inputData.requestContext.apiSettings.channelId);\n    } else {\n        throw new Error('Unable to create MediaLocationsForSelectedVariantInput, no productId found on module config or query');\n    }\n};\n\n/**\n * The action method for the getMediaLocationsForSelectedVariant data action\n */\nexport async function getMediaLocationsForSelectedVariantAction(\n    input: MediaLocationsForSelectedVariantInput,\n    ctx: IActionContext\n): Promise<MediaLocation[]> {\n    return AsyncResult.resolve()\n        .then(() => {\n            const activeProduct: SimpleProduct | undefined = input.selectedProduct;\n\n            if (!activeProduct) {\n                const selectedVariantInput = new SelectedVariantInput(input.productId, input.channelId);\n\n                // @ts-ignore: Typing issues that will auto-resolve when SDK 1.4 publishes\n                return <AsyncResult<SimpleProduct>>getSelectedVariant(selectedVariantInput, ctx);\n            }\n\n            return activeProduct;\n        })\n        .then(productResult => {\n            const activeProduct: SimpleProduct | undefined = <SimpleProduct | undefined>productResult;\n\n            if (activeProduct) {\n                return getMediaLocationsAsync({ callerContext: ctx, queryResultSettings: {} }, activeProduct.RecordId, input.channelId, input.catalogId).then(response => {\n                    return response.map(\n                        (mediaLocation: MediaLocation): MediaLocation => {\n                            mediaLocation.Uri = generateImageUrl(mediaLocation.Uri, ctx.requestContext.apiSettings);\n                            mediaLocation.AltText = mediaLocation.AltText ? mediaLocation.AltText : activeProduct.Name;\n                            return mediaLocation;\n                        }\n                    );\n                });\n            }\n\n            return [];\n        })\n        .catch(error => {\n            ctx.trace(error);\n            ctx.telemetry.error(error.message);\n            ctx.telemetry.debug(`[getMediaLocationsForSelectedVariantAction]Error executing action`);\n            throw new Error('[getMediaLocationsForSelectedVariantAction]Error executing action');\n        });\n}\n\n/**\n * The getMediaLocationsForSelectedVariant data action\n * Gets the currently selected variant for the page via the getSelectedVariant data action,\n * and then gets the media location information for the variant via the MediaLocations RetailServer API\n */\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-media-locations-for-selected-variant',\n    action: <IAction<MediaLocation[] | null>>getMediaLocationsForSelectedVariantAction,\n    input: createMediaLocationsForSelectedVariantInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}