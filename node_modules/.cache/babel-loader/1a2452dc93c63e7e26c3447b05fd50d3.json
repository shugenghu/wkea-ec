{"ast":null,"code":"import\"core-js/modules/es.object.assign.js\";import\"core-js/modules/es.regexp.constructor.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/es.string.replace.js\";import*as React from'react';import{getPayloadObject,getTelemetryAttributes}from'@msdyn365-commerce-modules/utilities';import{getRichTextHtml}from'@msdyn365-commerce/core';let payLoad;export const KeywordSuggestionsComponent=props=>{const{suggestions,hitPrefix,hitSuffix}=props;if(!suggestions){return undefined;}payLoad=getPayloadObject('click',props.telemetryContent,'');const reactNodes=[];suggestions.map(item=>{reactNodes.push(_assembleNode(item,hitPrefix,hitSuffix,props));});return{text:reactNodes};};const _assembleNode=(item,hitPrefix,hitSuffix,props)=>{const ariaLabel=item.Value&&item.Value.replace(new RegExp(\"[\".concat(hitPrefix,\"]\"),'gi'),'').replace(new RegExp(\"[\".concat(hitSuffix,\"]\"),'gi'),'');payLoad.contentAction.etext=ariaLabel;const attribute=getTelemetryAttributes(props.telemetryContent,payLoad);return/*#__PURE__*/React.createElement(\"li\",{className:'msc-autoSuggest__keywordResults-item',key:item.Id},/*#__PURE__*/React.createElement(\"a\",Object.assign({\"aria-label\":ariaLabel,href:_generateLink(item,hitPrefix,hitSuffix,props)},attribute),_generateLink(item,hitPrefix,hitSuffix,props)&&_getHighlightedText(item.Value?item.Value:'',hitPrefix,hitSuffix)));};const _generateLink=(suggestion,hitPrefix,hitSuffix,props)=>{const{searchPageURL,searchQsp}=props;const formattedLink=suggestion.Value.replace(new RegExp(\"[\".concat(hitPrefix,\"]\"),'gi'),'').replace(new RegExp(\"[\".concat(hitSuffix,\"]\"),'gi'),'');const route=searchPageURL||'';return formattedLink&&formattedLink.length>0?\"\".concat(route).concat(route.indexOf('?')===-1?'?':'&').concat(searchQsp,\"=\").concat(formattedLink):route;};const _getHighlightedText=(suggestion,hitPrefix,hitSuffix)=>{const formattedText=suggestion.replace(new RegExp(\"[\".concat(hitPrefix,\"]\"),'gi'),'<strong>').replace(new RegExp(\"[\".concat(hitSuffix,\"]\"),'gi'),'</strong>');return/*#__PURE__*/React.createElement(\"span\",{dangerouslySetInnerHTML:getRichTextHtml(formattedText)});};","map":{"version":3,"sources":["modules/search/components/search.keywordsuggest.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { getPayloadObject, getTelemetryAttributes, IPayLoad, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { getRichTextHtml } from '@msdyn365-commerce/core';\nimport { SearchSuggestion } from '@msdyn365-commerce/retail-proxy';\n\nimport { ISearchData } from '../search.data';\nimport { ISearchProps } from '../search.props.autogenerated';\n\nexport interface ISearchKeywordSuggestProps {\n    searchKeywordSuggestClass: string;\n    searchPageURL: string;\n    searchQsp: string | undefined;\n    hitPrefix: string;\n    hitSuffix: string;\n    autoSuggestProps: ISearchProps<ISearchData>;\n    searchText: string;\n    suggestions: SearchSuggestion[] | undefined;\n    telemetryContent?: ITelemetryContent;\n}\n\nexport interface ISearchKeywordViewProps {\n    text: React.ReactNode[];\n}\n\nlet payLoad: IPayLoad;\n\n/**\n *\n * KeywordSuggestionsComponent\n */\nexport const KeywordSuggestionsComponent = (props: ISearchKeywordSuggestProps): ISearchKeywordViewProps | undefined => {\n    const {\n        suggestions,\n        hitPrefix,\n        hitSuffix\n    } = props;\n\n    if (!suggestions) {\n        return undefined;\n    }\n\n    payLoad = getPayloadObject('click', props.telemetryContent!, '');\n\n    const reactNodes: React.ReactNode[] = [];\n\n    suggestions.map(item => {\n        reactNodes.push(_assembleNode(item, hitPrefix, hitSuffix, props));\n    });\n\n    return { text: reactNodes };\n};\n\nconst _assembleNode = (item: SearchSuggestion, hitPrefix: string, hitSuffix: string, props: ISearchKeywordSuggestProps) => {\n    const ariaLabel = item.Value &&\n    (item.Value).replace(new RegExp(`[${hitPrefix}]`, 'gi'), '').replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');\n    payLoad.contentAction.etext = ariaLabel;\n    const attribute = getTelemetryAttributes(props.telemetryContent!, payLoad);\n    return (\n        <li className='msc-autoSuggest__keywordResults-item' key={item.Id}>\n            <a\n                aria-label={ariaLabel}\n                href={_generateLink(item, hitPrefix, hitSuffix, props)}\n                {...attribute}\n            >\n                {_generateLink(item, hitPrefix, hitSuffix, props) &&\n                    _getHighlightedText(item.Value ? item.Value : '', hitPrefix, hitSuffix)}\n            </a>\n        </li>\n    );\n};\n\nconst _generateLink = (suggestion: SearchSuggestion, hitPrefix: string, hitSuffix: string, props: ISearchKeywordSuggestProps): string => {\n    const { searchPageURL, searchQsp } = props;\n\n    const formattedLink = (suggestion.Value as string)\n        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '')\n        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '');\n    const route = searchPageURL || '';\n    return formattedLink && formattedLink.length > 0\n        ? `${route}${route.indexOf('?') === -1 ? '?' : '&'}${searchQsp}=${formattedLink}`\n        : route;\n};\n\nconst _getHighlightedText = (suggestion: string, hitPrefix: string, hitSuffix: string): JSX.Element => {\n    const formattedText = suggestion\n        .replace(new RegExp(`[${hitPrefix}]`, 'gi'), '<strong>')\n        .replace(new RegExp(`[${hitSuffix}]`, 'gi'), '</strong>');\n\n    // tslint:disable:react-no-dangerous-html\n    return <span dangerouslySetInnerHTML={getRichTextHtml(formattedText)} />;\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}