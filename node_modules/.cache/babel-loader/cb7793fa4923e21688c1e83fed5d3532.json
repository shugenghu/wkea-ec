{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{buildCacheKey}from'@msdyn365-commerce-modules/retail-actions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCountryRegionsByLanguageIdAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';export var GetCountryRegionsInput=function GetCountryRegionsInput(locale,apiSettings){var _this=this;_classCallCheck(this,GetCountryRegionsInput);this.getCacheKey=function(){return buildCacheKey(\"CountryRegionInfo-\".concat(_this.locale),_this.apiSettings);};this.getCacheObjectType=function(){return'CountryRegionInfo';};this.dataCacheType=function(){return'request';};this.locale=locale;this.apiSettings=apiSettings;};var createInput=function createInput(inputData){if(!(inputData.requestContext&&inputData.requestContext.locale)){throw new Error('Unable to create country regions input.  Locale is not provided.');}return new GetCountryRegionsInput(inputData.requestContext.locale,inputData.requestContext.apiSettings);};export function getCountryRegionsAction(_x,_x2){return _getCountryRegionsAction.apply(this,arguments);}function _getCountryRegionsAction(){_getCountryRegionsAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",getCountryRegionsByLanguageIdAsync({callerContext:ctx,queryResultSettings:{}},input.locale));case 1:case\"end\":return _context.stop();}}},_callee);}));return _getCountryRegionsAction.apply(this,arguments);}export default createObservableDataAction({action:getCountryRegionsAction,input:createInput});","map":{"version":3,"sources":["actions/get-country-regions.ts"],"names":[],"mappings":"8MAAA,OAAS,aAAT,KAA8B,2CAA9B,CACA,OACe,0BADf,KAGO,yBAHP,CAIA,OACI,kCADJ,KAEO,+EAFP,CAQA,UAAa,CAAA,sBAAb,CAII,gCAAY,MAAZ,CAA4B,WAA5B,CAA6D,6DAKtD,KAAA,WAAA,CAAc,iBAAM,CAAA,aAAa,6BAAsB,KAAI,CAAC,MAA3B,EAAqC,KAAI,CAAC,WAA1C,CAAnB,EAAd,CACA,KAAA,kBAAA,CAAqB,iBAAM,mBAAN,EAArB,CACA,KAAA,aAAA,CAAgB,iBAAiB,SAAjB,EAAhB,CANH,KAAK,MAAL,CAAc,MAAd,CACA,KAAK,WAAL,CAAmB,WAAnB,CACH,CAPL,CAiBA,GAAM,CAAA,WAAW,CAAG,QAAd,CAAA,WAAc,CAAC,SAAD,CAA4E,CAC5F,GAAI,EAAE,SAAS,CAAC,cAAV,EAA4B,SAAS,CAAC,cAAV,CAAyB,MAAvD,CAAJ,CAAoE,CAChE,KAAM,IAAI,CAAA,KAAJ,CAAU,kEAAV,CAAN,CACH,CAED,MAAO,IAAI,CAAA,sBAAJ,CAA2B,SAAS,CAAC,cAAV,CAAyB,MAApD,CAA4D,SAAS,CAAC,cAAV,CAAyB,WAArF,CAAP,CACH,CAND,CAQA,eAAsB,CAAA,uBAAtB,gE,qHAAO,iBAAuC,KAAvC,CAAsE,GAAtE,kJACI,kCAAkC,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAsB,mBAAmB,CAAE,EAA3C,CAAD,CAAkD,KAAK,CAAC,MAAxD,CADtC,wD,0DAIP,cAAe,CAAA,0BAA0B,CAAC,CACtC,MAAM,CAAgC,uBADA,CAEtC,KAAK,CAAE,WAF+B,CAAD,CAAzC","sourcesContent":["import { buildCacheKey } from '@msdyn365-commerce-modules/retail-actions';\nimport {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny,\n    ICommerceApiSettings, ICreateActionContext, IGeneric\n} from '@msdyn365-commerce/core';\nimport {\n    getCountryRegionsByLanguageIdAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport { CountryRegionInfo } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\n/**\n * Input class for get country regions data action\n */\nexport class GetCountryRegionsInput implements IActionInput {\n    public locale: string;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(locale: string, apiSettings: ICommerceApiSettings) {\n        this.locale = locale;\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`CountryRegionInfo-${this.locale}`, this.apiSettings);\n    public getCacheObjectType = () => 'CountryRegionInfo';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the retail api call\n */\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>): GetCountryRegionsInput => {\n    if (!(inputData.requestContext && inputData.requestContext.locale)) {\n        throw new Error('Unable to create country regions input.  Locale is not provided.');\n    }\n\n    return new GetCountryRegionsInput(inputData.requestContext.locale, inputData.requestContext.apiSettings);\n};\n\nexport async function getCountryRegionsAction(input: GetCountryRegionsInput, ctx: IActionContext): Promise<CountryRegionInfo[]> {\n    return getCountryRegionsByLanguageIdAsync({ callerContext: ctx, queryResultSettings: {} }, input.locale);\n}\n\nexport default createObservableDataAction({\n    action: <IAction<CountryRegionInfo[]>>getCountryRegionsAction,\n    input: createInput\n});\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}