{"ast":null,"code":"import\"core-js/modules/es.string.search.js\";import\"core-js/modules/es.string.split.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{GetLoyaltyCardInput,issueLoyalty,IssueLoyaltyInput}from'@msdyn365-commerce-modules/retail-actions';import{getLoyaltyCardAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';import{Button,getTelemetryObject}from'@msdyn365-commerce-modules/utilities';import{getUrlSync}from'@msdyn365-commerce/core';import classname from'classnames';import*as React from'react';import{LoyaltyTermsModal}from'./components/loyalty-terms-modal';class LoyaltyTerms extends React.Component{constructor(props){super(props);this._toggle=this._toggle.bind(this);this._submit=this._submit.bind(this);this._checkboxChecked=this._checkboxChecked.bind(this);this.toggleRef=/*#__PURE__*/React.createRef();this.telemetryContent=getTelemetryObject(this.props.context.request.telemetryPageName,this.props.friendlyName,this.props.telemetry);let search=this.props.context.request.url.requestUrl.search;let isJoining=false;if(search){search=search.substring(1);const qsps=search.split('&');for(let i=0;i<qsps.length;i++){const splitQsp=qsps[i].split('=');isJoining=splitQsp[0]==='joiningLoyalty'&&splitQsp[1]==='true';if(isJoining){break;}}}this.state={isModalOpen:isJoining,checked:false,clicked:false};}render(){const{config:{className,hideToggle},resources,slots:{serviceTerms},data:{loyaltyCard},context:{request:{user:{isAuthenticated}}}}=this.props;const completeClass=classname('ms-loyalty-terms',className);const viewProps=_objectSpread(_objectSpread({},this.props),{},{className:completeClass,LoyaltyTerms:{moduleProps:this.props,className:completeClass},loading:loyaltyCard.status==='LOADING',modalToggle:hideToggle!==true&&/*#__PURE__*/React.createElement(Button,{className:'ms-loyalty-terms__toggle',onClick:this._toggle,innerRef:this.toggleRef},resources.joinLoyaltytermsToggleText),modal:isAuthenticated&&loyaltyCard.result&&loyaltyCard.result.CardNumber===undefined&&LoyaltyTermsModal({resources:_objectSpread({},resources),returnRef:this.toggleRef,checked:this.state.checked,isOpen:this.state.isModalOpen,terms:serviceTerms,telemetryContent:this.telemetryContent,onToggle:this._toggle,onSubmit:this._submit,onCheck:this._checkboxChecked})});return this.props.renderView(viewProps);}_toggle(){this.setState({isModalOpen:!this.state.isModalOpen,checked:false});}_submit(){if(this.props.context.request.user.isAuthenticated&&!this.state.clicked){this.setState({clicked:true});const input=new IssueLoyaltyInput(this.props.context.request.apiSettings);issueLoyalty(input,this.props.context.actionContext).then(card=>{if(this.props.config.redirectToLoyalty){window.location.assign(getUrlSync('loyalty',this.props.context.actionContext)||'');}else{getLoyaltyCardAsync({callerContext:this.props.context.actionContext},card.CardNumber||'').then(fullCard=>{this.props.context.actionContext.update(new GetLoyaltyCardInput(this.props.context.request.apiSettings),fullCard);}).catch(error=>{this.props.context.actionContext.update(new GetLoyaltyCardInput(this.props.context.request.apiSettings),card);this.props.telemetry.error(error.message);this.props.telemetry.debug('Unable to fetch loyalty card');});}}).catch(error=>{this.setState({clicked:false});this.props.telemetry.error(error.message);this.props.telemetry.debug('Unable to issue loyalty card');});}}_checkboxChecked(){this.setState({checked:!this.state.checked});}}export default LoyaltyTerms;","map":{"version":3,"sources":["modules/loyalty-terms/loyalty-terms.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { GetLoyaltyCardInput, issueLoyalty, IssueLoyaltyInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { getLoyaltyCardAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\n\nimport {\n    Button,\n    getTelemetryObject,\n    IModuleProps,\n    ITelemetryContent\n} from '@msdyn365-commerce-modules/utilities';\nimport { getUrlSync } from '@msdyn365-commerce/core';\nimport classname from 'classnames';\nimport * as React from 'react';\nimport {ILoyaltyTermsModalViewProps, LoyaltyTermsModal} from './components/loyalty-terms-modal';\nimport { ILoyaltyTermsData } from './loyalty-terms.data';\nimport { ILoyaltyTermsProps } from './loyalty-terms.props.autogenerated';\n\nexport interface ILoyaltyTermsState {\n    checked: boolean;\n    clicked: boolean;\n    isModalOpen: boolean;\n}\nexport interface ILoyaltyTermsViewProps extends ILoyaltyTermsProps<ILoyaltyTermsData> {\n    LoyaltyTerms: IModuleProps;\n    modalToggle: React.ReactElement;\n    modal: ILoyaltyTermsModalViewProps;\n    loading: boolean;\n}\n\n/**\n *\n * LoyaltyTerms component\n * @extends {React.Component<ILoyaltyTermsProps<ILoyaltyTermsData>>}\n */\nclass LoyaltyTerms extends React.Component<ILoyaltyTermsProps<ILoyaltyTermsData>, ILoyaltyTermsState> {\n    private toggleRef: React.RefObject<HTMLButtonElement>;\n    private telemetryContent: ITelemetryContent;\n\n    public constructor(props: ILoyaltyTermsProps<ILoyaltyTermsData>) {\n        super(props);\n        this._toggle = this._toggle.bind(this);\n        this._submit = this._submit.bind(this);\n        this._checkboxChecked = this._checkboxChecked.bind(this);\n        this.toggleRef = React.createRef();\n        this.telemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!, this.props.friendlyName, this.props.telemetry);\n        let search = this.props.context.request.url.requestUrl.search;\n        let isJoining = false;\n        if (search) {\n            search = search.substring(1);\n            const qsps = search.split('&');\n            for (let i = 0; i < qsps.length; i++) {\n                const splitQsp = qsps[i].split('=');\n                isJoining = splitQsp[0] === 'joiningLoyalty' && splitQsp[1] === 'true';\n                if(isJoining) {\n                    break;\n                }\n            }\n        }\n\n        this.state = {\n            isModalOpen: isJoining,\n            checked: false,\n            clicked: false\n        };\n    }\n\n    public render(): JSX.Element | null {\n        const {\n            config: { className, hideToggle },\n            resources,\n            slots: { serviceTerms },\n            data: { loyaltyCard },\n            context: {\n                request: {\n                    user: {\n                        isAuthenticated\n                    }\n                }\n            }\n        } = this.props;\n        const completeClass = classname('ms-loyalty-terms', className);\n\n        const viewProps = {\n            ...this.props,\n            className: completeClass,\n            LoyaltyTerms: {\n                moduleProps: this.props,\n                className: completeClass\n            },\n            loading: loyaltyCard.status === 'LOADING',\n            modalToggle: (hideToggle !== true) && <Button className='ms-loyalty-terms__toggle' onClick={this._toggle} innerRef={this.toggleRef}>{resources.joinLoyaltytermsToggleText}</Button>,\n            modal: isAuthenticated && loyaltyCard.result && loyaltyCard.result.CardNumber === undefined && LoyaltyTermsModal({\n                resources: {...resources},\n                returnRef: this.toggleRef,\n                checked: this.state.checked,\n                isOpen: this.state.isModalOpen,\n                terms: serviceTerms,\n                telemetryContent: this.telemetryContent,\n                onToggle: this._toggle,\n                onSubmit: this._submit,\n                onCheck: this._checkboxChecked\n            })\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    private _toggle(): void {\n        this.setState({isModalOpen: !this.state.isModalOpen, checked: false});\n    }\n\n    private _submit(): void {\n        if (this.props.context.request.user.isAuthenticated && !this.state.clicked) {\n            this.setState({ clicked: true });\n            const input = new IssueLoyaltyInput(this.props.context.request.apiSettings);\n\n            issueLoyalty(input, this.props.context.actionContext)\n                .then((card) => {\n                    if (this.props.config.redirectToLoyalty) {\n                        window.location.assign(getUrlSync('loyalty', this.props.context.actionContext) || '');\n                    } else {\n                        getLoyaltyCardAsync({ callerContext: this.props.context.actionContext }, card.CardNumber || '')\n                            .then((fullCard) => {\n                                this.props.context.actionContext.update(new GetLoyaltyCardInput(this.props.context.request.apiSettings), fullCard);\n                            })\n                            .catch((error: Error) => {\n                                this.props.context.actionContext.update(new GetLoyaltyCardInput(this.props.context.request.apiSettings), card);\n                                this.props.telemetry.error(error.message);\n                                this.props.telemetry.debug('Unable to fetch loyalty card');\n                            });\n                    }\n                })\n                .catch((error: Error) => {\n                    this.setState({ clicked: false });\n                    this.props.telemetry.error(error.message);\n                    this.props.telemetry.debug('Unable to issue loyalty card');\n                });\n        }\n    }\n\n    private _checkboxChecked(): void {\n        this.setState({checked: !this.state.checked});\n    }\n}\n\nexport default LoyaltyTerms;"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}