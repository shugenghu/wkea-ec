{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import{unique}from'./utilities/arrayExtensions';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCartState}from'@msdyn365-commerce/global-state';import{getOrgUnitConfigurationAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';import{getEstimatedAvailabilityAsync,getEstimatedProductWarehouseAvailabilityAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{ActiveCartProductsInput,buildCacheKey,getActiveCartProductsAction,mapProductInventoryInformation}from'./index';/**\r\n * Input class for availabilites for items in cart\r\n */export class ProductAvailabilitiesForCartLineItems{constructor(apiSettings){this.getCacheKey=()=>buildCacheKey(\"ActiveCartLineItemsAvailability\",this.apiSettings);this.getCacheObjectType=()=>'ActiveCartLineItemsAvailability';this.dataCacheType=()=>'none';this.apiSettings=apiSettings;}}const createInput=inputData=>{return new ProductAvailabilitiesForCartLineItems(inputData.requestContext.apiSettings);};/**\r\n * Calls the Retail API to get the product availabilites for items in the cart\r\n */ // tslint:disable-next-line:cyclomatic-complexity tslint:disable: max-func-body-length\nexport async function getAvailabilitiesForCartLineItems(input,ctx){// If no input is provided fail out\nif(!input){throw new Error('[getAvailabilitiesForCartLineItems]No valid Input was provided, failing');}const shippingItems=[];const bopisItems=[];let productAvailabilities=[];const cartState=await getCartState(ctx);const cart=cartState.cart;const channelConfiguration=await getOrgUnitConfigurationAsync({callerContext:ctx});const products=await getActiveCartProductsAction(new ActiveCartProductsInput(),ctx);const PickupDeliveryModeCode=channelConfiguration.PickupDeliveryModeCode;if(!cart||!channelConfiguration||!products||products.length===0){ctx.trace('[getAvailabilitiesForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');return[];}if(cart&&cart.Id&&cart.CartLines&&cart.CartLines.length>0&&channelConfiguration){for(const cartLine of cart.CartLines){if(cartLine.DeliveryMode&&cartLine.DeliveryMode!==''&&cartLine.DeliveryMode===PickupDeliveryModeCode){bopisItems.push(cartLine);}else{shippingItems.push(cartLine);}}}if(shippingItems&&shippingItems.length>0){let productIds=shippingItems.map(x=>x.ProductId);productIds=unique(productIds);const shippingProductAvailabilites=await getEstimatedAvailabilityAsync({callerContext:ctx,bypassCache:'get'},{ProductIds:productIds,DefaultWarehouseOnly:true});if(shippingProductAvailabilites&&shippingProductAvailabilites.ProductWarehouseInventoryAvailabilities&&shippingProductAvailabilites.ProductWarehouseInventoryAvailabilities.length>0){productAvailabilities=mapProductInventoryInformation(ctx,shippingProductAvailabilites===null||shippingProductAvailabilites===void 0?void 0:shippingProductAvailabilites.ProductWarehouseInventoryAvailabilities);}}if(bopisItems&&bopisItems.length>0){for(const bopisItem of bopisItems){const productWarehouse={ProductId:bopisItem.ProductId,InventLocationId:bopisItem.WarehouseId};if(ctx.requestContext.channel&&ctx.requestContext.channel.InventLocationDataAreaId){productWarehouse.DataAreaId=ctx.requestContext.channel.InventLocationDataAreaId;}const getProductWarehouseAvail=await getEstimatedProductWarehouseAvailabilityAsync({callerContext:ctx,bypassCache:'get',queryResultSettings:{}},[productWarehouse]);if(getProductWarehouseAvail&&getProductWarehouseAvail.ProductWarehouseInventoryAvailabilities&&getProductWarehouseAvail.ProductWarehouseInventoryAvailabilities.length>0){const productWarehouseMapping=mapProductInventoryInformation(ctx,getProductWarehouseAvail===null||getProductWarehouseAvail===void 0?void 0:getProductWarehouseAvail.ProductWarehouseInventoryAvailabilities);if(productWarehouseMapping&&productWarehouseMapping.length){for(const item of productWarehouseMapping){productAvailabilities.push(item);}}}}}if(productAvailabilities&&productAvailabilities.length>0){return productAvailabilities;}else{ctx.trace('[getAvailabilitiesForCartLineItems] unable to get availabilites for product');return[];}}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-availabilities-cartlines',action:getAvailabilitiesForCartLineItems,input:createInput});","map":{"version":3,"sources":["../../src/get-availabilities-cartlines.ts"],"names":[],"mappings":"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","sourcesContent":["import { unique } from './utilities/arrayExtensions';\nimport { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { CartLine, ProductWarehouse } from '@msdyn365-commerce/retail-proxy';\nimport { getOrgUnitConfigurationAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { getEstimatedAvailabilityAsync, getEstimatedProductWarehouseAvailabilityAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ActiveCartProductsInput, buildCacheKey, getActiveCartProductsAction, IProductInventoryInformation, mapProductInventoryInformation } from './index';\n/**\n * Input class for availabilites for items in cart\n */\nexport class ProductAvailabilitiesForCartLineItems implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`ActiveCartLineItemsAvailability`, this.apiSettings);\n    public getCacheObjectType = () => 'ActiveCartLineItemsAvailability';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>) => {\n    return new ProductAvailabilitiesForCartLineItems(inputData.requestContext.apiSettings);\n};\n\n/**\n * Calls the Retail API to get the product availabilites for items in the cart\n */\n// tslint:disable-next-line:cyclomatic-complexity tslint:disable: max-func-body-length\nexport async function getAvailabilitiesForCartLineItems(input: ProductAvailabilitiesForCartLineItems, ctx: IActionContext): Promise<IProductInventoryInformation[]> {\n    // If no input is provided fail out\n    if (!input) {\n        throw new Error('[getAvailabilitiesForCartLineItems]No valid Input was provided, failing');\n    }\n    const shippingItems: CartLine[] = [];\n    const bopisItems = [];\n    let productAvailabilities:IProductInventoryInformation[] = [];\n\n    const cartState = await getCartState(ctx);\n    const cart = cartState.cart;\n    const channelConfiguration = await getOrgUnitConfigurationAsync({ callerContext: ctx});\n    const products = await getActiveCartProductsAction(new ActiveCartProductsInput(), ctx);\n    const PickupDeliveryModeCode = channelConfiguration.PickupDeliveryModeCode;\n\n    if(!cart || !channelConfiguration || !products || products.length === 0) {\n        ctx.trace('[getAvailabilitiesForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');\n        return <IProductInventoryInformation[]>[];\n    }\n\n    if(cart && cart.Id && cart.CartLines && cart.CartLines.length > 0 && channelConfiguration) {\n        for(const cartLine of cart.CartLines) {\n\n            if(cartLine.DeliveryMode && cartLine.DeliveryMode !== '' && (cartLine.DeliveryMode === PickupDeliveryModeCode)) {\n                bopisItems.push(cartLine);\n            } else {\n                shippingItems.push(cartLine);\n            }\n        }\n    }\n\n    if(shippingItems && shippingItems.length > 0) {\n        let productIds = shippingItems.map(x => x.ProductId!);\n        productIds = unique(productIds);\n        const shippingProductAvailabilites = await getEstimatedAvailabilityAsync(\n            { callerContext: ctx, bypassCache: 'get' },\n            { ProductIds: productIds, DefaultWarehouseOnly: true}\n        );\n        if(shippingProductAvailabilites && shippingProductAvailabilites.ProductWarehouseInventoryAvailabilities && shippingProductAvailabilites.ProductWarehouseInventoryAvailabilities.length > 0) {\n            productAvailabilities = mapProductInventoryInformation(ctx, shippingProductAvailabilites?.ProductWarehouseInventoryAvailabilities);\n        }\n    }\n\n    if(bopisItems && bopisItems.length > 0) {\n        for(const bopisItem of bopisItems) {\n            const productWarehouse: ProductWarehouse = {\n                ProductId: bopisItem.ProductId,\n                InventLocationId: bopisItem.WarehouseId\n            };\n\n            if(ctx.requestContext.channel && ctx.requestContext.channel.InventLocationDataAreaId) {\n                productWarehouse.DataAreaId = ctx.requestContext.channel.InventLocationDataAreaId;\n            }\n            const getProductWarehouseAvail = await getEstimatedProductWarehouseAvailabilityAsync({ callerContext: ctx, bypassCache: 'get', queryResultSettings: {} }, [productWarehouse]);\n            if(getProductWarehouseAvail && getProductWarehouseAvail.ProductWarehouseInventoryAvailabilities && getProductWarehouseAvail.ProductWarehouseInventoryAvailabilities.length > 0) {\n                const productWarehouseMapping = mapProductInventoryInformation (ctx, getProductWarehouseAvail?.ProductWarehouseInventoryAvailabilities);\n                if(productWarehouseMapping && productWarehouseMapping.length) {\n                    for(const item of productWarehouseMapping) {\n                        productAvailabilities.push(item);\n                    }\n                }\n            }\n        }\n    }\n\n    if(productAvailabilities && productAvailabilities.length > 0) {\n        return productAvailabilities;\n    } else {\n        ctx.trace('[getAvailabilitiesForCartLineItems] unable to get availabilites for product');\n        return <IProductInventoryInformation[]>[];\n    }\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-availabilities-cartlines',\n    action: <IAction<IProductInventoryInformation[]>>getAvailabilitiesForCartLineItems,\n    input: createInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}