{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.for-each.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{createDataActionHook,TelemetryEvent}from'@msdyn365-commerce/core';import{getProductInfoFromCart}from'./telemetry.action.helper';const beforeUpdateCart=async(inputs,actionContext)=>{try{const actionInput=Array.isArray(inputs)?inputs[0]:inputs;if(actionInput.queryParams&&typeof actionInput.queryParams==='function'){const updateCartLinesParams=actionInput.queryParams();if(updateCartLinesParams&&updateCartLinesParams.cartLines){actionContext.requestContext.telemetryData[\"updatedCartLines\"]=updateCartLinesParams.cartLines;return;}}actionContext.telemetry.debug('UpdateCart pre-data action hook failed - No updated cart lines found');}catch(e){actionContext.telemetry.debug('UpdateCart pre-data action hook failed.',e);}};const afterUpdateCart=async(_inputs,cart,actionContext)=>{if(window&&window._msdyn365&&window._msdyn365.telemetry){const updatedProducts={};const updatedCartLines=actionContext.requestContext.telemetryData[\"updatedCartLines\"];if(updatedCartLines){updatedCartLines.forEach(cartLine=>{if(cartLine&&cartLine.ProductId){const updatedProduct=actionContext.requestContext.telemetryData[cartLine.ProductId];if(updatedProduct){updatedProducts[cartLine.ProductId]=updatedProduct;}}});}window._msdyn365.telemetry.logEvent(TelemetryEvent.UpdateInCart,getProductInfoFromCart(cart,updatedProducts,actionContext.requestContext));}};createDataActionHook({actionId:'@msdyn365-commerce/retail-proxy/Carts/UpdateCartLines',postReaderHook:afterUpdateCart,preReaderHook:beforeUpdateCart});","map":{"version":3,"sources":["actions/updateCart-telemetry.action.ts"],"names":[],"mappings":"8FAAA;;;AAGG,GAEH,OAAS,oBAAT,CAA6D,cAA7D,KAAmF,yBAAnF,CAGA,OAAS,sBAAT,KAAuC,2BAAvC,CASA,KAAM,CAAA,gBAAgB,CAAG,MAAO,MAAP,CAA8C,aAA9C,GAA+E,CACpG,GAAI,CACA,KAAM,CAAA,WAAW,CAAG,KAAK,CAAC,OAAN,CAAc,MAAd,EAA6C,MAAM,CAAC,CAAD,CAAnD,CAA8E,MAAlG,CAGA,GAAI,WAAW,CAAC,WAAZ,EAA2B,MAAO,CAAA,WAAW,CAAC,WAAnB,GAAmC,UAAlE,CAA8E,CAC1E,KAAM,CAAA,qBAAqB,CAAG,WAAW,CAAC,WAAZ,EAA9B,CACA,GAAI,qBAAqB,EAAI,qBAAqB,CAAC,SAAnD,CAA8D,CAE1D,aAAa,CAAC,cAAd,CAA6B,aAA7B,qBAAiE,qBAAqB,CAAC,SAAvF,CACA,OACH,CACJ,CACD,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAA8B,sEAA9B,EACH,CAAC,MAAO,CAAP,CAAU,CACR,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAA8B,yCAA9B,CAAyE,CAAzE,EACH,CACJ,CAjBD,CAyBA,KAAM,CAAA,eAAe,CAAG,MAAO,OAAP,CAA+C,IAA/C,CAAoE,aAApE,GAAqG,CACzH,GAAI,MAAM,EAAI,MAAM,CAAC,SAAjB,EAA8B,MAAM,CAAC,SAAP,CAAiB,SAAnD,CAA8D,CAC1D,KAAM,CAAA,eAAe,CAAsB,EAA3C,CACA,KAAM,CAAA,gBAAgB,CAAe,aAAa,CAAC,cAAd,CAA6B,aAA7B,oBAArC,CAGA,GAAI,gBAAJ,CAAsB,CAClB,gBAAgB,CAAC,OAAjB,CAA0B,QAAD,EAAuB,CAC5C,GAAI,QAAQ,EAAI,QAAQ,CAAC,SAAzB,CAAoC,CAChC,KAAM,CAAA,cAAc,CAAG,aAAa,CAAC,cAAd,CAA6B,aAA7B,CAA2C,QAAQ,CAAC,SAApD,CAAvB,CACA,GAAI,cAAJ,CAAoB,CAChB,eAAe,CAAC,QAAQ,CAAC,SAAV,CAAf,CAAsC,cAAtC,CACH,CACJ,CACJ,CAPD,EAQH,CAGD,MAAM,CAAC,SAAP,CAAiB,SAAjB,CAA2B,QAA3B,CACI,cAAc,CAAC,YADnB,CAEI,sBAAsB,CAAC,IAAD,CAAO,eAAP,CAAwB,aAAa,CAAC,cAAtC,CAF1B,EAIH,CACJ,CAvBD,CAyBA,oBAAoB,CAAC,CACjB,QAAQ,CAAE,uDADO,CAEjB,cAAc,CAAE,eAFC,CAGjB,aAAa,CAAE,gBAHE,CAAD,CAApB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createDataActionHook, IActionContext, IActionInput, TelemetryEvent } from '@msdyn365-commerce/core';\nimport { IAny, IDictionary, IMSDyn365Window } from '@msdyn365-commerce/core-internal';\nimport { Cart, CartLine, IDataServiceRequest, IUpdateCartLinesParam } from '@msdyn365-commerce/retail-proxy';\nimport { getProductInfoFromCart } from './telemetry.action.helper';\n\ndeclare var window: IMSDyn365Window;\n\n/**\n * Saves info on cart lines updated before calling data action\n * @param inputs Data action inputs\n * @param actionContext Action context\n */\nconst beforeUpdateCart = async (inputs: IActionInput | IActionInput[], actionContext: IActionContext) => {\n    try {\n        const actionInput = Array.isArray(inputs) ? <IDataServiceRequest>inputs[0] : <IDataServiceRequest>inputs;\n\n        // If cart lines were updated\n        if (actionInput.queryParams && typeof actionInput.queryParams === 'function') {\n            const updateCartLinesParams = actionInput.queryParams<IUpdateCartLinesParam>();\n            if (updateCartLinesParams && updateCartLinesParams.cartLines) {\n                // Save info on updated cart lines for post data action hook to pick up\n                actionContext.requestContext.telemetryData[`updatedCartLines`] = updateCartLinesParams.cartLines;\n                return;\n            }\n        }\n        actionContext.telemetry.debug('UpdateCart pre-data action hook failed - No updated cart lines found');\n    } catch (e) {\n        actionContext.telemetry.debug('UpdateCart pre-data action hook failed.', e);\n    }\n};\n\n/**\n * Fires an UpdateInCart event after data action completed\n * @param _inputs Data action inputs\n * @param cart New cart object after cart lines have been added\n * @param actionContext Action context\n */\nconst afterUpdateCart = async (_inputs: IActionInput | IActionInput[], cart: Cart | Cart[], actionContext: IActionContext) => {\n    if (window && window._msdyn365 && window._msdyn365.telemetry) {\n        const updatedProducts: IDictionary<IAny> = {};\n        const updatedCartLines = <CartLine[]>actionContext.requestContext.telemetryData[`updatedCartLines`];\n\n        // If TelemetryData exists for updated cart lines, collect product info\n        if (updatedCartLines) {\n            updatedCartLines.forEach((cartLine: CartLine) => {\n                if (cartLine && cartLine.ProductId) {\n                    const updatedProduct = actionContext.requestContext.telemetryData[cartLine.ProductId];\n                    if (updatedProduct) {\n                        updatedProducts[cartLine.ProductId] = updatedProduct;\n                    }\n                }\n            });\n        }\n\n        // Fire UpdateInCart event\n        window._msdyn365.telemetry.logEvent(\n            TelemetryEvent.UpdateInCart,\n            getProductInfoFromCart(cart, updatedProducts, actionContext.requestContext)\n        );\n    }\n};\n\ncreateDataActionHook({\n    actionId: '@msdyn365-commerce/retail-proxy/Carts/UpdateCartLines',\n    postReaderHook: afterUpdateCart,\n    preReaderHook: beforeUpdateCart\n});\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}