{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCurrentAsync,getUsersAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';/**\r\n * Input class for get customer data action\r\n */export class OrganizationUsersCountInput{constructor(){this.getCacheKey=()=>'OrganizationUsersCount';this.getCacheObjectType=()=>'BusinessPartner';this.dataCacheType=()=>'none';}}export const createGetOrganizationUsersCountInput=inputData=>{const{requestContext}=inputData;// Check if the user is authenticated.\nif(!requestContext.user.isAuthenticated){throw new Error('User is not logged in.');}return new OrganizationUsersCountInput();};export async function getOrganizationUsersCount(input,ctx){return getCurrentAsync({callerContext:ctx}).then(businessPartner=>{if(!businessPartner){return 0;}return getUsersAsync({callerContext:ctx},businessPartner.BusinessPartnerId).then(users=>{return users.length;}).catch(error=>{ctx.telemetry.exception(error);ctx.trace('[get-organization-users-count] Unable to load users');throw new Error('[get-organization-users-count] Unable to load users');});}).catch(error=>{ctx.telemetry.exception(error);ctx.telemetry.debug('[get-organization-users-count] Unable to get BusinessPartner');throw new Error('[get-organization-users-count] Unable to get BusinessPartner');});}export default createObservableDataAction({id:'get-organization-users-count',action:getOrganizationUsersCount,input:createGetOrganizationUsersCountInput});","map":{"version":3,"sources":["../../src/get-organization-users-count.ts"],"names":[],"mappings":"sCACA,OAAS,0BAAT,KAAiF,yBAAjF,CACA,OAAS,eAAT,CAA0B,aAA1B,KAA+C,gFAA/C,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,2BAA2B,CAAxC,WAAA,EAAA,CACW,KAAA,WAAA,CAAc,IAAM,wBAApB,CACA,KAAA,kBAAA,CAAqB,IAAM,iBAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,MAAjC,CACV,CAJuC,CAMxC,MAAO,MAAM,CAAA,oCAAoC,CAAI,SAAD,EAAkD,CAClG,KAAM,CAAE,cAAF,EAAqB,SAA3B,CAEA;AACA,GAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,eAAzB,CAA0C,CACtC,KAAM,IAAI,CAAA,KAAJ,CAAU,wBAAV,CAAN,CACH,CAED,MAAO,IAAI,CAAA,2BAAJ,EAAP,CACH,CATM,CAWP,MAAO,eAAe,CAAA,yBAAf,CAAyC,KAAzC,CAA6E,GAA7E,CAAgG,CACnG,MAAO,CAAA,eAAe,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAf,CACF,IADE,CACG,eAAe,EAAG,CACpB,GAAI,CAAC,eAAL,CAAsB,CAClB,MAAO,EAAP,CACH,CAED,MAAO,CAAA,aAAa,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAyB,eAAe,CAAC,iBAAzC,CAAb,CACF,IADE,CACI,KAAD,EAAU,CACZ,MAAO,CAAA,KAAK,CAAC,MAAb,CACH,CAHE,EAIF,KAJE,CAII,KAAK,EAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,GAAG,CAAC,KAAJ,CAAU,qDAAV,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,qDAAV,CAAN,CACH,CARE,CAAP,CASH,CAfE,EAgBF,KAhBE,CAgBI,KAAK,EAAG,CACX,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,GAAG,CAAC,SAAJ,CAAc,KAAd,CAAoB,8DAApB,EACA,KAAM,IAAI,CAAA,KAAJ,CAAU,8DAAV,CAAN,CACH,CApBE,CAAP,CAqBH,CACD,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,8BADkC,CAEtC,MAAM,CAA4B,yBAFI,CAGtC,KAAK,CAAE,oCAH+B,CAAD,CAAzC","sourcesContent":["import { CacheType, IAction, IActionInput } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, ICreateActionContext } from '@msdyn365-commerce/core';\nimport { getCurrentAsync, getUsersAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/BusinessPartnersDataActions.g';\n\n/**\n * Input class for get customer data action\n */\nexport class OrganizationUsersCountInput implements IActionInput {\n    public getCacheKey = () => 'OrganizationUsersCount';\n    public getCacheObjectType = () => 'BusinessPartner';\n    public dataCacheType = (): CacheType => 'none';\n}\n\nexport const createGetOrganizationUsersCountInput = (inputData: ICreateActionContext): IActionInput => {\n    const { requestContext } = inputData;\n\n    // Check if the user is authenticated.\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('User is not logged in.');\n    }\n\n    return new OrganizationUsersCountInput();\n};\n\nexport async function getOrganizationUsersCount(input: OrganizationUsersCountInput, ctx: IActionContext): Promise<Number> {\n    return getCurrentAsync({ callerContext: ctx })\n        .then(businessPartner => {\n            if (!businessPartner) {\n                return 0;\n            }\n\n            return getUsersAsync({ callerContext: ctx }, businessPartner.BusinessPartnerId)\n                .then((users) => {\n                    return users.length;\n                })\n                .catch(error => {\n                    ctx.telemetry.exception(error);\n                    ctx.trace('[get-organization-users-count] Unable to load users');\n                    throw new Error('[get-organization-users-count] Unable to load users');\n                });\n        })\n        .catch(error => {\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug('[get-organization-users-count] Unable to get BusinessPartner');\n            throw new Error('[get-organization-users-count] Unable to get BusinessPartner');\n        });\n}\nexport default createObservableDataAction({\n    id: 'get-organization-users-count',\n    action: <IAction<Number>><unknown>getOrganizationUsersCount,\n    input: createGetOrganizationUsersCountInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}