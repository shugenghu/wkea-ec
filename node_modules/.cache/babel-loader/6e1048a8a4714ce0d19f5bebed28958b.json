{"ast":null,"code":"import\"core-js/modules/es.array.reduce.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import groupBy from'lodash/groupBy';export const getTenderIdOperationIdMap=tenderTypes=>{return tenderTypes.reduce((map,tenderType)=>{if(tenderType.TenderTypeId){map[tenderType.TenderTypeId]=tenderType.OperationId;}return map;},{});};export const countItems=salesLines=>{return salesLines.reduce((count,salesLine)=>{return count+(salesLine.Quantity||0);},0);};export const getSalesLinesByDelivery=(salesLines,pickupDeliveryModeCode)=>{if(!salesLines||!salesLines.length){return[];}return salesLines.filter(salesLine=>pickupDeliveryModeCode&&pickupDeliveryModeCode!==''?salesLine.DeliveryMode===pickupDeliveryModeCode:salesLine.DeliveryMode!==pickupDeliveryModeCode);};export const defaultImageSettings={viewports:{xs:{q:\"w=80&h=80&m=6\",w:0,h:0},lg:{q:\"w=147&h=147&m=6\",w:0,h:0}},lazyload:true};export const getSalesStatusCode=(deliveryType,statusValue)=>{if(statusValue===7){return'canceled';}if(deliveryType==='pickUp'){switch(statusValue){case 3:return'readyForPickup';case 4:return'pickedUp';default:return'processing';}}else if(deliveryType==='ship'){switch(statusValue){case 3:return'processing';case 4:return'shipped';default:return'processing';}}else if(deliveryType==='carryOut'){return'processing';}else{return'unknown';}};export const groupSalesLines=salesLines=>{const getGroupByDeliveryType=items=>groupBy(items,item=>item.data.deliveryType);const getGroupBySalesStatusCode=items=>groupBy(items,item=>item.data.salesStatus);const getGroupByTrackingId=items=>groupBy(items,item=>item.data.salesLine.TrackingId||'unknown');const getGroupByAddressId=items=>groupBy(items,item=>item.data.salesLine.ShippingAddress&&item.data.salesLine.ShippingAddress.RecordId||'unknown');const flatGroup=[];const group=getGroupByDeliveryType(salesLines);Object.entries(group).forEach((_ref)=>{let[deliveryType,groupByDeliveryType]=_ref;group[deliveryType]=getGroupBySalesStatusCode(groupByDeliveryType);Object.entries(group[deliveryType]).forEach((_ref2)=>{let[salesStatus,groupBySalesStatusCode]=_ref2;groupBySalesStatusCode[salesStatus]=getGroupByAddressId(groupBySalesStatusCode);Object.entries(groupBySalesStatusCode[salesStatus]).forEach((_ref3)=>{let[addressId,groupByAddressId]=_ref3;groupByAddressId[addressId]=getGroupByTrackingId(groupByAddressId);Object.entries(groupByAddressId[addressId]).forEach((_ref4)=>{let[trackingId,groupByTrackingId]=_ref4;flatGroup.push({deliveryType,salesStatus,addressId,trackingId,count:countItems(groupByTrackingId.map(item=>item.data.salesLine)),salesLines:groupByTrackingId});});});});});return flatGroup;};","map":{"version":3,"sources":["common/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IAny, ICoreContext, IGeneric, IImageSettings, IModule, ITelemetry } from '@msdyn365-commerce/core';\nimport { SalesLine, TenderType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport groupBy from 'lodash/groupBy';\nimport { ISalesLine } from './get-sales-line';\n\nexport interface IModuleComponentProps extends IModule {\n    config: {\n        imageSettings?: IImageSettings;\n    };\n}\n\nexport interface IPriceContext {\n    id: string;\n    typeName: string;\n    context: ICoreContext<IGeneric<IAny>>;\n    telemetry: ITelemetry;\n    freePriceText: string;\n}\n\nexport const getTenderIdOperationIdMap = (tenderTypes: TenderType[]): object => {\n    return tenderTypes.reduce((map, tenderType) => {\n        if (tenderType.TenderTypeId) {\n            map[tenderType.TenderTypeId] = tenderType.OperationId;\n        }\n        return map;\n    },                        {});\n};\n\nexport const countItems = (salesLines: SalesLine[]) => {\n    return salesLines.reduce((count, salesLine) => {\n        return count + (salesLine.Quantity || 0);\n    },                       0);\n};\n\nexport const getSalesLinesByDelivery = (salesLines?: SalesLine[], pickupDeliveryModeCode?: string): SalesLine[] => {\n    if (!salesLines || !salesLines.length) {\n        return [];\n    }\n    return salesLines.filter(salesLine =>\n        // isPickUp ? getPickUp : getOthers\n        (pickupDeliveryModeCode && pickupDeliveryModeCode !== '') ? salesLine.DeliveryMode === pickupDeliveryModeCode : salesLine.DeliveryMode !== pickupDeliveryModeCode\n    );\n};\n\nexport const defaultImageSettings: IImageSettings = {\n    viewports: {\n        xs: { q: `w=80&h=80&m=6`, w: 0, h: 0 },\n        lg: { q: `w=147&h=147&m=6`, w: 0, h: 0 }\n    },\n    lazyload: true\n};\n\nexport type IDeliveryType = 'pickUp' | 'ship' | 'carryOut';\n\nexport type ISalesStatusCode = 'canceled' | 'readyForPickup' | 'pickedUp' | 'processing' | 'shipped' | 'unknown';\n\nexport const getSalesStatusCode = (deliveryType: IDeliveryType, statusValue?: number): ISalesStatusCode => {\n    if (statusValue === 7) {\n        return 'canceled';\n    }\n    if (deliveryType === 'pickUp') {\n        switch (statusValue) {\n            case 3:\n                return 'readyForPickup';\n            case 4:\n                return 'pickedUp';\n            default:\n                return 'processing';\n        }\n    } else if (deliveryType === 'ship') {\n        switch (statusValue) {\n            case 3:\n                return 'processing';\n            case 4:\n                return 'shipped';\n            default:\n                return 'processing';\n        }\n    } else if (deliveryType === 'carryOut') {\n        return 'processing';\n    } else {\n        return 'unknown';\n    }\n};\n\nexport type ITrackingId = string | 'unknown';\nexport type IAddressId = string | 'unknown';\n\nexport interface IGroupData {\n    deliveryType: IDeliveryType;\n    salesStatus: ISalesStatusCode;\n    addressId: IAddressId | 'unknown';\n    trackingId: ITrackingId | 'unknown';\n    count: number;\n    salesLines: ISalesLine[];\n}\n\nexport const groupSalesLines = (salesLines: ISalesLine[]): IGroupData[] => {\n    const getGroupByDeliveryType = (items: ISalesLine[]) => groupBy(items, item => item.data.deliveryType);\n    const getGroupBySalesStatusCode = (items: ISalesLine[]) => groupBy(items, item => item.data.salesStatus);\n    const getGroupByTrackingId = (items: ISalesLine[]) => groupBy(items, item => item.data.salesLine.TrackingId || 'unknown');\n    const getGroupByAddressId = (items: ISalesLine[]) =>\n        groupBy(items, item => (item.data.salesLine.ShippingAddress && item.data.salesLine.ShippingAddress.RecordId) || 'unknown');\n\n    const flatGroup: IGroupData[] = [];\n\n    // 1) Group by delivery type\n    // @ts-ignore\n    const group = getGroupByDeliveryType(salesLines);\n\n    // 2) Group by sales status code\n    Object.entries(group).forEach(([deliveryType, groupByDeliveryType]) => {\n        // @ts-ignore\n        group[deliveryType] = getGroupBySalesStatusCode(groupByDeliveryType);\n\n        Object.entries(group[deliveryType]).forEach(([salesStatus, groupBySalesStatusCode]) => {\n            // @ts-ignore 3) Group by address id\n            groupBySalesStatusCode[salesStatus] = getGroupByAddressId(groupBySalesStatusCode);\n\n            // @ts-ignore\n            Object.entries(groupBySalesStatusCode[salesStatus]).forEach(([addressId, groupByAddressId]) => {\n                // @ts-ignore 4) Group by address id\n                groupByAddressId[addressId] = getGroupByTrackingId(groupByAddressId);\n\n                // @ts-ignore\n                Object.entries(groupByAddressId[addressId]).forEach(([trackingId, groupByTrackingId]) => {\n                    flatGroup.push({\n                        // @ts-ignore\n                        deliveryType,\n                        // @ts-ignore\n                        salesStatus,\n                        addressId,\n                        trackingId,\n                        // @ts-ignore\n                        count: countItems(groupByTrackingId.map(item => item.data.salesLine)),\n                        // @ts-ignore\n                        salesLines: groupByTrackingId\n                    });\n                });\n            });\n        });\n    });\n\n    return flatGroup;\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}