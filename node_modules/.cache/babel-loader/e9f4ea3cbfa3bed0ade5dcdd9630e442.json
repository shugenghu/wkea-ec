{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{asSystemMetadata,LogLevel,StaticTelemetry}from'@msdyn365-commerce/telemetry-internal';export var KEY_REQUESTRECEIVED='RequestReceived';export var KEY_REQUESTENDED='RequestEnded';var getElapsedTimeInMs=function getElapsedTimeInMs(startHrTime){var elapsedHrTime=process.hrtime(startHrTime);return elapsedHrTime[0]*1000+elapsedHrTime[1]/1e6;};/**\r\n * This is route middleware to time each route\r\n */export var requestRouteTimer=function requestRouteTimer(req,res,next){var startTime=process.hrtime();if(req.route&&req.route.path){res.on('finish',function(){var elapsedMsTime=getElapsedTimeInMs(startTime);StaticTelemetry.log(LogLevel.Information,\"{route} took {time}ms\",{values:[asSystemMetadata(req.route.path),asSystemMetadata(elapsedMsTime)]});});}next();};","map":{"version":3,"sources":["../../../../src/_server/middleware/route-timers.ts"],"names":[],"mappings":"AAAA;;;AAGG,GACH,OAAS,gBAAT,CAA2B,QAA3B,CAAqC,eAArC,KAA4D,uCAA5D,CAEA,MAAO,IAAM,CAAA,mBAAmB,CAAG,iBAA5B,CACP,MAAO,IAAM,CAAA,gBAAgB,CAAG,cAAzB,CAEP,GAAM,CAAA,kBAAkB,CAAG,QAArB,CAAA,kBAAqB,CAAC,WAAD,CAA0C,CACjE,GAAM,CAAA,aAAa,CAAG,OAAO,CAAC,MAAR,CAAe,WAAf,CAAtB,CACA,MAAO,CAAA,aAAa,CAAC,CAAD,CAAb,CAAmB,IAAnB,CAA0B,aAAa,CAAC,CAAD,CAAb,CAAmB,GAApD,CACH,CAHD,CAKA;;AAEG,GACH,MAAO,IAAM,CAAA,iBAAiB,CAAG,QAApB,CAAA,iBAAoB,CAAC,GAAD,CAAe,GAAf,CAA8B,IAA9B,CAA0D,CACvF,GAAM,CAAA,SAAS,CAAG,OAAO,CAAC,MAAR,EAAlB,CACA,GAAI,GAAG,CAAC,KAAJ,EAAa,GAAG,CAAC,KAAJ,CAAU,IAA3B,CAAiC,CAC7B,GAAG,CAAC,EAAJ,CAAO,QAAP,CAAiB,UAAK,CAClB,GAAM,CAAA,aAAa,CAAG,kBAAkB,CAAC,SAAD,CAAxC,CACA,eAAe,CAAC,GAAhB,CAAoB,QAAQ,CAAC,WAA7B,yBAAmE,CAC/D,MAAM,CAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAJ,CAAU,IAAX,CAAjB,CAAmC,gBAAgB,CAAC,aAAD,CAAnD,CADuD,CAAnE,EAGH,CALD,EAMH,CACD,IAAI,GACP,CAXM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { asSystemMetadata, LogLevel, StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';\nimport { NextFunction, Request, Response } from 'express';\nexport const KEY_REQUESTRECEIVED = 'RequestReceived';\nexport const KEY_REQUESTENDED = 'RequestEnded';\n\nconst getElapsedTimeInMs = (startHrTime: [number, number]): number => {\n    const elapsedHrTime = process.hrtime(startHrTime);\n    return elapsedHrTime[0] * 1000 + elapsedHrTime[1] / 1e6;\n};\n\n/**\n * This is route middleware to time each route\n */\nexport const requestRouteTimer = (req: Request, res: Response, next: NextFunction): void => {\n    const startTime = process.hrtime();\n    if (req.route && req.route.path) {\n        res.on('finish', () => {\n            const elapsedMsTime = getElapsedTimeInMs(startTime);\n            StaticTelemetry.log(LogLevel.Information, `{route} took {time}ms`, {\n                values: [asSystemMetadata(req.route.path), asSystemMetadata(elapsedMsTime)]\n            });\n        });\n    }\n    next();\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}