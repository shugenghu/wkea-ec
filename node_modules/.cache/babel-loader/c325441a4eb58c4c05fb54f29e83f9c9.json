{"ast":null,"code":"\"use strict\";require(\"core-js/modules/es.regexp.to-string.js\");require(\"core-js/modules/es.string.replace.js\");require(\"core-js/modules/es.string.starts-with.js\");Object.defineProperty(exports,\"__esModule\",{value:true});function format(formatSpecifier){var parameters=[];for(var _i=1;_i<arguments.length;_i++){parameters[_i-1]=arguments[_i];}if(!formatSpecifier){return'';}return formatSpecifier.replace(/{(\\d+)}/g,function(match,index){if(index>=parameters.length){return match;}var value=parameters[index];if(typeof value!=='number'&&!value){return'';}if(typeof value==='string'){return value;}return value.toString();});}exports.format=format;function isNullOrWhiteSpace(value){return!value||typeof value!=='string'||!trim(value);}exports.isNullOrWhiteSpace=isNullOrWhiteSpace;function trim(value){if(!value||typeof value!=='string'){return value;}if(value.trim){return value.trim();}return value.replace(/^\\s+|\\s+$/g,'');}exports.trim=trim;function startsWith(value,prefix,ignoreCase){if(ignoreCase===void 0){ignoreCase=true;}if(!value||!prefix){return false;}if(ignoreCase){value=value.toLocaleLowerCase();prefix=prefix.toLocaleLowerCase();}if(value.startsWith){return value.startsWith(prefix);}return value.indexOf(prefix)===0;}exports.startsWith=startsWith;","map":{"version":3,"sources":["/Users/User/Documents/wkea-ec/Msdyn365.Commerce.Online/node_modules/@msdyn365-commerce-modules/utilities/src/common/stringExtensions.ts"],"names":[],"mappings":"4NACA,QAAgB,CAAA,MAAhB,CAAuB,eAAvB,CAA8C,CAAE,GAAA,CAAA,UAAA,CAAA,EAAA,C,IAAA,GAAA,CAAA,EAAA,CAAA,C,CAAA,EAAA,CAAA,SAAA,CAAA,M,CAAA,EAAA,E,CAAoB,CAApB,UAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAAA,C,CAC5C,GAAI,CAAC,eAAL,CAAsB,CAClB,MAAO,EAAP,CACH,CAED,MAAO,CAAA,eAAe,CAAC,OAAhB,CAAwB,UAAxB,CAAoC,SAAC,KAAD,CAAgB,KAAhB,CAA6B,CAEpE,GAAI,KAAK,EAAI,UAAU,CAAC,MAAxB,CAAgC,CAC5B,MAAO,CAAA,KAAP,CACH,CAED,GAAM,CAAA,KAAK,CAAG,UAAU,CAAC,KAAD,CAAxB,CAEA,GAAI,MAAO,CAAA,KAAP,GAAiB,QAAjB,EAA6B,CAAC,KAAlC,CAAyC,CACrC,MAAO,EAAP,CACH,CAED,GAAI,MAAO,CAAA,KAAP,GAAiB,QAArB,CAA+B,CAC3B,MAAO,CAAA,KAAP,CACH,CAED,MAAO,CAAA,KAAK,CAAC,QAAN,EAAP,CACH,CAjBM,CAAP,CAkBH,CAvBD,OAAA,CAAA,MAAA,CAAA,MAAA,CAiCA,QAAgB,CAAA,kBAAhB,CAAmC,KAAnC,CAAgD,CAC5C,MAAQ,CAAC,KAAF,EAAa,MAAO,CAAA,KAAP,GAAiB,QAA9B,EAA4C,CAAC,IAAI,CAAC,KAAD,CAAxD,CACH,CAFD,OAAA,CAAA,kBAAA,CAAA,kBAAA,CAYA,QAAgB,CAAA,IAAhB,CAAqB,KAArB,CAAkC,CAE9B,GAAI,CAAC,KAAD,EAAW,MAAO,CAAA,KAAP,GAAiB,QAAhC,CAA2C,CACvC,MAAO,CAAA,KAAP,CACH,CAED,GAAI,KAAK,CAAC,IAAV,CAAgB,CACZ,MAAO,CAAA,KAAK,CAAC,IAAN,EAAP,CACH,CAED,MAAO,CAAA,KAAK,CAAC,OAAN,CAAc,YAAd,CAA4B,EAA5B,CAAP,CACH,CAXD,OAAA,CAAA,IAAA,CAAA,IAAA,CAsBA,QAAgB,CAAA,UAAhB,CAA2B,KAA3B,CAA0C,MAA1C,CAA0D,UAA1D,CAAoF,CAA1B,GAAA,UAAA,GAAA,IAAA,EAAA,CAAA,CAAA,UAAA,CAAA,IAAA,CAA0B,CAChF,GAAI,CAAC,KAAD,EAAU,CAAC,MAAf,CAAuB,CACnB,MAAO,MAAP,CACH,CAED,GAAI,UAAJ,CAAgB,CACZ,KAAK,CAAG,KAAK,CAAC,iBAAN,EAAR,CACA,MAAM,CAAG,MAAM,CAAC,iBAAP,EAAT,CACH,CAED,GAAK,KAAD,CAAQ,UAAZ,CAAwB,CACpB,MAAQ,CAAA,KAAD,CAAQ,UAAR,CAAmB,MAAnB,CAAP,CACH,CAED,MAAO,CAAA,KAAK,CAAC,OAAN,CAAc,MAAd,IAA0B,CAAjC,CACH,CAfD,OAAA,CAAA,UAAA,CAAA,UAAA","sourcesContent":["// tslint:disable-next-line:no-any\nexport function format(formatSpecifier: string, ...parameters: any[]): string {\n    if (!formatSpecifier) {\n        return '';\n    }\n\n    return formatSpecifier.replace(/{(\\d+)}/g, (match: string, index: number) => {\n\n        if (index >= parameters.length) {\n            return match;\n        }\n\n        const value = parameters[index];\n\n        if (typeof value !== 'number' && !value) {\n            return '';\n        }\n\n        if (typeof value === 'string') {\n            return value;\n        }\n\n        return value.toString();\n    });\n}\n\n/*\n* @name - isNullOrWhiteSpace\n* @description - Determines if the specified string is undefined, null, empty, or whitespace.\n* @export\n* @public\n* @param {string} value - The string to examine.\n* @returns {boolean} - True if the value is undefined, null, empty, or whitespace, otherwise false.\n*/\nexport function isNullOrWhiteSpace(value: string): boolean {\n    return (!value) || (typeof value !== 'string') || (!trim(value));\n}\n\n/*\n* @name - trim\n* @description - Trims leading and trailing whitespace from the string.\n* @export\n* @public\n* @param {string} value - The string to examine.\n* @returns {string} - The trimmed string.\n*/\nexport function trim(value: string): string {\n    // Any flavor of !value (ie. null/undefined/'') should return itself.\n    if (!value || (typeof value !== 'string')) {\n        return value;\n    }\n\n    if (value.trim) {\n        return value.trim();\n    }\n\n    return value.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * @name - startsWith\n * @description - Determines if the specified string starts with the specified value.\n * @export\n * @public\n * @param {string} value - The string to look in.\n * @param {string} prefix - The prefix to look for.\n * @returns {boolean} - True if the string starts with the prefix, otherwise false.\n */\nexport function startsWith(value: string, prefix: string, ignoreCase: boolean = true): boolean {\n    if (!value || !prefix) {\n        return false;\n    }\n\n    if (ignoreCase) {\n        value = value.toLocaleLowerCase();\n        prefix = prefix.toLocaleLowerCase();\n    }\n\n    if ((value).startsWith) {\n        return (value).startsWith(prefix);\n    }\n\n    return value.indexOf(prefix) === 0;\n}"]},"metadata":{},"sourceType":"script"}