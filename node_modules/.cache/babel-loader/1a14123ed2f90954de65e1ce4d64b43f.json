{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import uuid from'uuid/v4';import{commerceInsightsAttributeRenderer}from'../attribute-renderers';import{CommerceInsightsLogger}from'../event-loggers';import{generateEventNameHash,p}from'../helpers';import{NumericLogLevel,TelemetryEvent}from'../interfaces';// tslint:disable:no-floating-promises\n/**\r\n * Base class for Telemetry & Internal telemetry\r\n * @abstract\r\n * @class TelemetryBase\r\n */export var TelemetryBase=/*#__PURE__*/function(){function TelemetryBase(){var _this=this;_classCallCheck(this,TelemetryBase);/**\r\n         * Start a named timer\r\n         *\r\n         * @param {string} id of timer\r\n         * @memberof InternalTelemetry\r\n         */this.startTimer=function(timerId){_this._timers.set(timerId,Date.now());};/**\r\n         * Stops a named timer\r\n         *\r\n         * @param {string} timerId id of timer\r\n         * @param {boolean} [removeTimer=true] should time be removed from dictionary? default rue\r\n         * @returns {number} elapsed time in ms\r\n         */this.stopTimer=function(timerId){var removeTimer=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var now=Date.now();var result=_this._timers.has(timerId)?now-_this._timers.get(timerId):-1;if(removeTimer){_this._timers[\"delete\"](timerId);}return result;};/**\r\n         * Saves the feature swtich marking whether data analytics is enabled for this request\r\n         */this.enableDataAnalytics=function(enableDataAnalytics){_this._enableDataAnalytics=enableDataAnalytics;if(_this._enableDataAnalytics){_this._eventLoggers=[new CommerceInsightsLogger()];_this._attributeRenderers=[commerceInsightsAttributeRenderer];}};/**\r\n         * Renders a data attribute string\r\n         */this.setTelemetryAttribute=function(telemetryId,additionalTelemetryData){var telemetryAttribute={};for(var i=0;i<_this._attributeRenderers.length;++i){telemetryAttribute=_objectSpread(_objectSpread({},telemetryAttribute),_this._attributeRenderers[i](telemetryId,additionalTelemetryData));}return telemetryAttribute;};/**\r\n         * Logs a telemetry event.\r\n         */this.logEvent=function(eventType,payload){var _loop=function _loop(i){p(function(){return _this._eventLoggers[i].logEvent(eventType,payload);});};for(var i=0;i<_this._eventLoggers.length;++i){_loop(i);}// If exp logger is registered, mutate and send event\nif(_this._expLogger){var eventName='';switch(eventType){case TelemetryEvent.PageView:var pageViewEventName=payload.title?\"\".concat(payload.title,\".PageView\"):'';eventName=pageViewEventName;break;case TelemetryEvent.Custom:eventName=_this._generateEventName(payload);if(eventName){break;}default:eventName=eventType;}var eventNameHash=generateEventNameHash(eventName);_this._expLogger.logEvent(eventNameHash,payload);}};/**\r\n         * Tracks a metric\r\n         */this.trackMetric=function(name,value){_this.notifyTraceLoggers(function(logger){return logger.trackMetric(name,value,_this._telemetryContext);});};/**\r\n         * Tracks an event\r\n         */this.trackEvent=function(name,properties,measurements,context){_this.notifyTraceLoggers(function(logger){return logger.trackEvent(name,properties,measurements,context);});};this.trackPageView=function(page,url){_this.notifyTraceLoggers(function(logger){return logger.trackPageView(page,url);});};this.trackDependency=function(options){_this.notifyTraceLoggers(function(logger){return logger.trackDependency(options);});};/**\r\n         * Adds the given trace logger to the list of trace loggers.\r\n         * @param traceLogger - The ILogger object to be added to the list of trace loggers\r\n         */this.registerTraceLogger=function(options){if(options.traceLogger){if(options.traceLogger.initialize&&options.options){options.traceLogger.initialize(options.options);}_this._traceLoggers.push(options.traceLogger);options.name&&(_this._namedLoggers[options.name]=options.traceLogger);}};/**\r\n         * Adds the given event logger to the list of event loggers\r\n         * @param eventLogger - The IEventLogger object to be added to the list of event loggers\r\n         */this.registerEventLogger=function(eventLogger){_this._eventLoggers.push(eventLogger);};/**\r\n         * Adds the given experimentation logger to the telemetry object\r\n         * @param expLogger - The IExpLogger object to be added\r\n         */this.registerExpLogger=function(expLogger){_this._expLogger=expLogger;};/**\r\n         * Adds the given attribute renderer to the list of attribute renderers\r\n         * @param attributeRenderer - The IDataAttributeRenderer object to be added to the list of attribute renderers\r\n         */this.registerAttributeRenderer=function(attributeRenderer){_this._attributeRenderers.push(attributeRenderer);};/**\r\n         * Registers the Web Analytics plugin for use in the BI logging framework\r\n         */this.registerWebAnalyticsPlugin=function(webAnalyticsPlugin){_this._webAnalyticsPlugin=webAnalyticsPlugin;// Pass Web Analytics plugin to the Commerce Insights logger\nif(_this._enableDataAnalytics){_this._eventLoggers[0].registerWebAnalyticsPlugin(webAnalyticsPlugin);}};/**\r\n         * Merges the properties specific to the current request that should be added to every log\r\n         * @param requestContext Contains the context items specific to the current request\r\n         */this.setTelemetryRequestContext=function(requestContext){_this._telemetryContext.requestContext=_objectSpread(_objectSpread({},_this._telemetryContext.requestContext||{}),requestContext);};/**\r\n         * Gets named logger if it exists\r\n         *\r\n         * @param {string} name name of logger to get\r\n         */this.getNamedLoggerInstance=function(name){return _this._namedLoggers[name];};/**\r\n         * String formatter\r\n         * @param templateString Template string\r\n         * @param args ordered argument list\r\n         */this.stringFormat=function(templateString,args){for(var index=0;index<args.length;++index){templateString=templateString.replace(\"$\".concat(index),args[index]);}return templateString;};/**\r\n         * Helper to notify trace loggers\r\n         *\r\n         * @private\r\n         * @memberof Telemetry\r\n         */this.notifyTraceLoggers=function(fx){// tslint:disable-next-line:no-console\nfor(var i=0;i<_this._traceLoggers.length;++i){// TODO: revisit this unhandled promise\nfx(_this._traceLoggers[i]);}};this._log=function(logLevel,messageTemplate,logOptions){var requestedLogLevel=NumericLogLevel[logLevel];var minLogLevel=process.env.SDK_MIN_LOG_LEVEL;// Do not log if below minimum log level\nif(requestedLogLevel<minLogLevel){return;}// Create map of placeholders in string and arguments provided\nvar regex=/{([a-zA-Z_0123456789]+)}/g;var placeholders=new Map();var values=logOptions&&logOptions.values?logOptions.values:[];var i=0;var match=regex.exec(messageTemplate);while(match!==null){// If this placeholder is a repeat of a previous one\nif(placeholders.get(match[1])!==undefined){match=regex.exec(messageTemplate);// Else if a new placeholder but no more arguments were given\n}else if(values[i]===undefined){values[i]=\"Undefined - No value given for this placeholder\";// Still increment in case a placeholder value in the middle was undefined\nplaceholders.set(match[1],values[i++]);// Get next match\nmatch=regex.exec(messageTemplate);// Else save match and next argument provided\n}else{placeholders.set(match[1],values[i++]);// Get next match\nmatch=regex.exec(messageTemplate);}}_this.notifyTraceLoggers(function(logger){logger.sendLog(logLevel,_this._telemetryContext,messageTemplate,placeholders,logOptions&&logOptions.customTags,logOptions&&logOptions.exception);});};this._enableDataAnalytics=false;this._traceLoggers=[];this._eventLoggers=[];this._attributeRenderers=[];this._telemetryContext={requestContext:{},moduleContext:{}};this._namedLoggers={};this._timers=new Map();}/**\r\n     * Generates the event name for a custom click event\r\n     * @param payload Payload of custom event\r\n     */_createClass(TelemetryBase,[{key:\"_generateEventName\",value:function _generateEventName(payload){if(payload.contentCategory==='click'){// tslint:disable-next-line:no-any\nvar attributes=payload.contentAction;// Generate event name for custom clicks with page name, module name, and either element text or recordId\nif(attributes&&attributes.pgname&&attributes.mname&&(attributes.etext||attributes.recid)){return\"\".concat(attributes.pgname,\".\").concat(attributes.mname,\".\").concat(attributes.etext||attributes.recid).concat(attributes.etype?\".\".concat(attributes.etype):'');}}}}]);return TelemetryBase;}();TelemetryBase.generateGuid=function(){return uuid();};","map":{"version":3,"sources":["../../../src/telemetry/telemetry-base.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport uuid from 'uuid/v4';\nimport { commerceInsightsAttributeRenderer } from '../attribute-renderers';\nimport { CommerceInsightsLogger } from '../event-loggers';\nimport { generateEventNameHash, p } from '../helpers';\nimport {\n    ICustomEvent,\n    IDataAttributeRenderer,\n    IEventLogger,\n    IExpLogger,\n    IPageViewInfo,\n    IRegisterTraceLoggerOptions,\n    ITelemetry,\n    ITelemetryContext,\n    ITelemetryRequestContext,\n    ITraceLogger,\n    LogLevel,\n    NumericLogLevel,\n    TelemetryEvent,\n    TelemetryEventContent\n} from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { InternalTelemetryLogOptions } from './internal-telemetry-log-options';\nimport { TelemetryLogOptions } from './telemetry-log-options';\n\n// tslint:disable:no-floating-promises\n\n/**\n * Base class for Telemetry & Internal telemetry\n * @abstract\n * @class TelemetryBase\n */\nexport abstract class TelemetryBase {\n    /**\n     * Enable Data Analytics feature switch\n     */\n    protected _enableDataAnalytics: boolean;\n\n    /**\n     * Map of timers\n     */\n    protected _timers: Map<string, number>;\n\n    /**\n     * Array of ILogger objects representing the trace loggers used.\n     */\n    protected _traceLoggers: ITraceLogger[];\n\n    /**\n     * An object holding the information about telemetry event loggers.\n     */\n    protected _eventLoggers: IEventLogger[];\n\n    /**\n     * An object holding the information about the experimentation logger.\n     */\n    protected _expLogger: IExpLogger | undefined;\n\n    /**\n     * Array holding the registered Data Attribute Renderers\n     */\n    protected _attributeRenderers: IDataAttributeRenderer[];\n\n    /**\n     * Context object used with telemetry.\n     */\n    protected _telemetryContext: ITelemetryContext;\n\n    /**\n     * Dictionary of loggers by name (if one is provided)\n     */\n    protected _namedLoggers: IDictionary<ITraceLogger>;\n\n    /**\n     * WebAnalytics client used to send BI events\n     */\n    protected _webAnalyticsPlugin?: object;\n\n    public static generateGuid = (): string => {\n        return uuid();\n    };\n\n    public constructor() {\n        this._enableDataAnalytics = false;\n        this._traceLoggers = [];\n        this._eventLoggers = [];\n        this._attributeRenderers = [];\n        this._telemetryContext = {\n            requestContext: {},\n            moduleContext: {}\n        };\n        this._namedLoggers = {};\n        this._timers = new Map<string, number>();\n    }\n\n    /**\n     * Start a named timer\n     *\n     * @param {string} id of timer\n     * @memberof InternalTelemetry\n     */\n    public startTimer = (timerId: string): void => {\n        this._timers.set(timerId, Date.now());\n    };\n\n    /**\n     * Stops a named timer\n     *\n     * @param {string} timerId id of timer\n     * @param {boolean} [removeTimer=true] should time be removed from dictionary? default rue\n     * @returns {number} elapsed time in ms\n     */\n    public stopTimer = (timerId: string, removeTimer: boolean = true): number => {\n        const now = Date.now();\n        const result: number = this._timers.has(timerId) ? now - <number>this._timers.get(timerId) : -1;\n        if (removeTimer) {\n            this._timers.delete(timerId);\n        }\n        return result;\n    };\n\n    /**\n     * Saves the feature swtich marking whether data analytics is enabled for this request\n     */\n    public enableDataAnalytics = (enableDataAnalytics: boolean): void => {\n        this._enableDataAnalytics = enableDataAnalytics;\n\n        if (this._enableDataAnalytics) {\n            this._eventLoggers = [new CommerceInsightsLogger()];\n            this._attributeRenderers = [commerceInsightsAttributeRenderer];\n        }\n    };\n\n    /**\n     * Renders a data attribute string\n     */\n    public setTelemetryAttribute = (telemetryId: string, additionalTelemetryData?: object): IDictionary<string> => {\n        let telemetryAttribute: IDictionary<string> = {};\n\n        for (let i = 0; i < this._attributeRenderers.length; ++i) {\n            telemetryAttribute = { ...telemetryAttribute, ...this._attributeRenderers[i](telemetryId, additionalTelemetryData) };\n        }\n\n        return telemetryAttribute;\n    };\n\n    /**\n     * Logs a telemetry event.\n     */\n    public logEvent = (eventType: TelemetryEvent, payload: TelemetryEventContent): void => {\n        for (let i = 0; i < this._eventLoggers.length; ++i) {\n            p(() => this._eventLoggers[i].logEvent(eventType, payload));\n        }\n\n        // If exp logger is registered, mutate and send event\n        if (this._expLogger) {\n            let eventName: string | undefined = '';\n            switch (eventType) {\n                case TelemetryEvent.PageView:\n                    const pageViewEventName = (<IPageViewInfo>payload).title ? `${(<IPageViewInfo>payload).title}.PageView` : '';\n                    eventName = pageViewEventName;\n                    break;\n                case TelemetryEvent.Custom:\n                    eventName = this._generateEventName(payload);\n                    if (eventName) {\n                        break;\n                    }\n                default:\n                    eventName = eventType;\n            }\n            const eventNameHash = generateEventNameHash(eventName);\n            this._expLogger.logEvent(eventNameHash, payload);\n        }\n    };\n\n    /**\n     * Tracks a metric\n     */\n    public trackMetric = (name: string, value: number): void => {\n        this.notifyTraceLoggers(logger => logger.trackMetric(name, value, this._telemetryContext));\n    };\n\n    /**\n     * Tracks an event\n     */\n    public trackEvent = <TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void => {\n        this.notifyTraceLoggers(logger => logger.trackEvent<TProperties, TMeasurements>(name, properties, measurements, context));\n    };\n\n    public trackPageView = (page: string, url?: string) => {\n        this.notifyTraceLoggers(logger => logger.trackPageView(page, url));\n    };\n\n    public trackDependency = (options: ITrackDependency) => {\n        this.notifyTraceLoggers(logger => logger.trackDependency(options));\n    };\n\n    /**\n     * Adds the given trace logger to the list of trace loggers.\n     * @param traceLogger - The ILogger object to be added to the list of trace loggers\n     */\n    public registerTraceLogger = (options: IRegisterTraceLoggerOptions): void => {\n        if (options.traceLogger) {\n            if (options.traceLogger.initialize && options.options) {\n                options.traceLogger.initialize(options.options);\n            }\n            this._traceLoggers.push(options.traceLogger);\n            options.name && (this._namedLoggers[options.name] = options.traceLogger);\n        }\n    };\n\n    /**\n     * Adds the given event logger to the list of event loggers\n     * @param eventLogger - The IEventLogger object to be added to the list of event loggers\n     */\n    public registerEventLogger = (eventLogger: IEventLogger): void => {\n        this._eventLoggers.push(eventLogger);\n    };\n\n    /**\n     * Adds the given experimentation logger to the telemetry object\n     * @param expLogger - The IExpLogger object to be added\n     */\n    public registerExpLogger = (expLogger: IExpLogger): void => {\n        this._expLogger = expLogger;\n    };\n\n    /**\n     * Adds the given attribute renderer to the list of attribute renderers\n     * @param attributeRenderer - The IDataAttributeRenderer object to be added to the list of attribute renderers\n     */\n    public registerAttributeRenderer = (attributeRenderer: IDataAttributeRenderer): void => {\n        this._attributeRenderers.push(attributeRenderer);\n    };\n\n    /**\n     * Registers the Web Analytics plugin for use in the BI logging framework\n     */\n    public registerWebAnalyticsPlugin = (webAnalyticsPlugin: object): void => {\n        this._webAnalyticsPlugin = webAnalyticsPlugin;\n\n        // Pass Web Analytics plugin to the Commerce Insights logger\n        if (this._enableDataAnalytics) {\n            (<CommerceInsightsLogger>this._eventLoggers[0]).registerWebAnalyticsPlugin(webAnalyticsPlugin);\n        }\n    };\n\n    /**\n     * Merges the properties specific to the current request that should be added to every log\n     * @param requestContext Contains the context items specific to the current request\n     */\n    public setTelemetryRequestContext = (requestContext: Partial<ITelemetryRequestContext>): void => {\n        this._telemetryContext.requestContext = { ...(this._telemetryContext.requestContext || {}), ...requestContext };\n    };\n\n    /**\n     * Gets named logger if it exists\n     *\n     * @param {string} name name of logger to get\n     */\n    public getNamedLoggerInstance = <T extends unknown = ITelemetry>(name: string): T | undefined => {\n        return <T>this._namedLoggers[name];\n    };\n\n    /**\n     * String formatter\n     * @param templateString Template string\n     * @param args ordered argument list\n     */\n    public stringFormat = (templateString: string, args: string[]): string => {\n        for (let index = 0; index < args.length; ++index) {\n            templateString = templateString.replace(`$${index}`, args[index]);\n        }\n        return templateString;\n    };\n\n    /**\n     * Helper to notify trace loggers\n     *\n     * @private\n     * @memberof Telemetry\n     */\n    protected notifyTraceLoggers = (fx: (logger: ITraceLogger) => void) => {\n        // tslint:disable-next-line:no-console\n        for (let i = 0; i < this._traceLoggers.length; ++i) {\n            // TODO: revisit this unhandled promise\n            fx(this._traceLoggers[i]);\n        }\n    };\n\n    protected _log = (\n        logLevel: LogLevel,\n        messageTemplate: string,\n        logOptions?: InternalTelemetryLogOptions | TelemetryLogOptions\n    ): void => {\n        const requestedLogLevel = NumericLogLevel[logLevel];\n        const minLogLevel = <number>(<unknown>process.env.SDK_MIN_LOG_LEVEL);\n\n        // Do not log if below minimum log level\n        if (requestedLogLevel < minLogLevel) {\n            return;\n        }\n\n        // Create map of placeholders in string and arguments provided\n        const regex = /{([a-zA-Z_0123456789]+)}/g;\n        const placeholders = new Map();\n        const values = logOptions && logOptions.values ? logOptions.values : [];\n        let i = 0;\n        let match = regex.exec(messageTemplate);\n\n        while (match !== null) {\n            // If this placeholder is a repeat of a previous one\n            if (placeholders.get(match[1]) !== undefined) {\n                match = regex.exec(messageTemplate);\n                // Else if a new placeholder but no more arguments were given\n            } else if (values[i] === undefined) {\n                values[i] = `Undefined - No value given for this placeholder`;\n                // Still increment in case a placeholder value in the middle was undefined\n                placeholders.set(match[1], values[i++]);\n                // Get next match\n                match = regex.exec(messageTemplate);\n                // Else save match and next argument provided\n            } else {\n                placeholders.set(match[1], values[i++]);\n\n                // Get next match\n                match = regex.exec(messageTemplate);\n            }\n        }\n        this.notifyTraceLoggers((logger: ITraceLogger) => {\n            logger.sendLog(\n                logLevel,\n                this._telemetryContext,\n                messageTemplate,\n                placeholders,\n                logOptions && logOptions.customTags,\n                logOptions && logOptions.exception\n            );\n        });\n    };\n\n    /**\n     * Generates the event name for a custom click event\n     * @param payload Payload of custom event\n     */\n    private _generateEventName(payload: TelemetryEventContent): string | undefined {\n        if ((<ICustomEvent>payload).contentCategory === 'click') {\n            // tslint:disable-next-line:no-any\n            const attributes: any = (<ICustomEvent>payload).contentAction;\n\n            // Generate event name for custom clicks with page name, module name, and either element text or recordId\n            if (attributes && attributes.pgname && attributes.mname && (attributes.etext || attributes.recid)) {\n                return `${attributes.pgname}.${attributes.mname}.${attributes.etext || attributes.recid}${\n                    attributes.etype ? `.${attributes.etype}` : ''\n                }`;\n            }\n        }\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}