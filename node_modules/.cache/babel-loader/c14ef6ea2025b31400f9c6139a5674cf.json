{"ast":null,"code":"import{DataServiceQuery}from'../DataServiceQuery';import{ChecklistClass,ChecklistTaskClass}from'../Entities/CommerceModels.g';import{executeAction}from'../retail-action';function checklistsQuery(recordId){var key=recordId?{RecordId:recordId}:null;return new DataServiceQuery(\"Checklists\",\"Checklist\",ChecklistClass,key);}export function createCreateInput(entity){return checklistsQuery().create(entity);}export function createChecklistAsync(context,entity){const request=createCreateInput(entity);return executeAction(request,context);}export function createUpdateInput(entity){return checklistsQuery(entity.RecordId).update(entity);}export function updateAsync(context,entity){const request=createUpdateInput(entity);return executeAction(request,context);}export function createDeleteAsync(entity){return checklistsQuery(entity.RecordId).delete();}export function deleteAsync(context,entity){const request=createDeleteAsync(entity);return executeAction(request,context);}export function createReadAsync(recordId){return checklistsQuery(recordId).read();}export function readAsync(context,recordId){const request=createReadAsync(recordId);return executeAction(request,context);}export function createReadAllAsync(queryResultSettings){return checklistsQuery().resultSettings(queryResultSettings).read();}export function readAllAsync(context){const request=createReadAllAsync(context.queryResultSettings);return executeAction(request,context);}export function createSearchChecklistsInput(queryResultSettings,checklistSearchCriteria){const query=checklistsQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('SearchChecklists',true,ChecklistClass,'true',{bypassCache:'none',returnEntity:'Checklist'},{checklistSearchCriteria:checklistSearchCriteria});}export function searchChecklistsAsync(context,checklistSearchCriteria){const request=createSearchChecklistsInput(context.queryResultSettings,checklistSearchCriteria);return executeAction(request,context);}export function createSearchTasksInput(queryResultSettings,taskSearchCriteria){const query=checklistsQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('SearchTasks',true,ChecklistTaskClass,'true',{bypassCache:'none',returnEntity:'ChecklistTask'},{taskSearchCriteria:taskSearchCriteria});}export function searchTasksAsync(context,taskSearchCriteria){const request=createSearchTasksInput(context.queryResultSettings,taskSearchCriteria);return executeAction(request,context);}export function createCreateTaskInput(createTask){const query=checklistsQuery();return query.createDataServiceRequestForOperation('CreateTask',true,ChecklistTaskClass,'false',{bypassCache:'get',returnEntity:'ChecklistTask'},{createTask:createTask});}export function createTaskAsync(context,createTask){const request=createCreateTaskInput(createTask);return executeAction(request,context);}export function createUpdateChecklistsInput(queryResultSettings,updateChecklists){const query=checklistsQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('UpdateChecklists',true,ChecklistClass,'true',{bypassCache:'get',returnEntity:'Checklist'},{updateChecklists:updateChecklists});}export function updateChecklistsAsync(context,updateChecklists){const request=createUpdateChecklistsInput(context.queryResultSettings,updateChecklists);return executeAction(request,context);}export function createUpdateTasksInput(queryResultSettings,updateTasks){const query=checklistsQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('UpdateTasks',true,ChecklistTaskClass,'true',{bypassCache:'get',returnEntity:'ChecklistTask'},{updateTasks:updateTasks});}export function updateTasksAsync(context,updateTasks){const request=createUpdateTasksInput(context.queryResultSettings,updateTasks);return executeAction(request,context);}","map":{"version":3,"sources":["../../src/DataActions/ChecklistsDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { Checklist, ChecklistSearchCriteria, TaskSearchCriteria, ChecklistTask } from '../Entities/CommerceTypes.g';\n    import { ChecklistClass, ChecklistTaskClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function checklistsQuery(recordId?: number): DataServiceQuery {\n      var key = (recordId) ? { RecordId: recordId } : null;\n      return new DataServiceQuery(\"Checklists\", \"Checklist\", ChecklistClass, key);\n    }\n    \n    export function createCreateInput(entity: Checklist): IDataServiceRequest {\n        return checklistsQuery().create(entity);\n    }\n    export function createChecklistAsync(context: IContext, entity: Checklist): AsyncResult<Checklist> {\n        const request = createCreateInput(entity, );\n        return executeAction<Checklist>(request, context);\n    }\n    export function createUpdateInput(entity: Checklist): IDataServiceRequest {\n        return checklistsQuery(entity.RecordId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: Checklist): AsyncResult<Checklist> {\n        const request = createUpdateInput(entity, );\n        return executeAction<Checklist>(request, context);\n    }\n    export function createDeleteAsync(entity: Checklist): IDataServiceRequest {\n        return checklistsQuery(entity.RecordId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: Checklist): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(recordId: number): IDataServiceRequest {\n        return checklistsQuery(recordId).read();\n    }\n    export function readAsync(context: IContext, recordId: number): AsyncResult<Checklist> {\n        const request = createReadAsync(recordId, );\n        return executeAction<Checklist>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return checklistsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<Checklist[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<Checklist[]>(request, context);\n    }\n    \n    export function createSearchChecklistsInput(queryResultSettings: IQueryResultSettings, checklistSearchCriteria: ChecklistSearchCriteria | null): IDataServiceRequest {      \n        const query = checklistsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchChecklists', true, ChecklistClass, 'true', { bypassCache: 'none', returnEntity: 'Checklist'}, {checklistSearchCriteria: checklistSearchCriteria });\n    }    \n    \n    export function searchChecklistsAsync(context: IContext, checklistSearchCriteria: ChecklistSearchCriteria | null):AsyncResult<Checklist[]> {\n        const request = createSearchChecklistsInput(context.queryResultSettings, checklistSearchCriteria, );\n        return executeAction<Checklist[]>(request, context);\n    }          \n          \n    export function createSearchTasksInput(queryResultSettings: IQueryResultSettings, taskSearchCriteria: TaskSearchCriteria | null): IDataServiceRequest {      \n        const query = checklistsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchTasks', true, ChecklistTaskClass, 'true', { bypassCache: 'none', returnEntity: 'ChecklistTask'}, {taskSearchCriteria: taskSearchCriteria });\n    }    \n    \n    export function searchTasksAsync(context: IContext, taskSearchCriteria: TaskSearchCriteria | null):AsyncResult<ChecklistTask[]> {\n        const request = createSearchTasksInput(context.queryResultSettings, taskSearchCriteria, );\n        return executeAction<ChecklistTask[]>(request, context);\n    }          \n          \n    export function createCreateTaskInput(createTask: ChecklistTask | null): IDataServiceRequest {      \n        const query = checklistsQuery();\n        return query.createDataServiceRequestForOperation('CreateTask', true, ChecklistTaskClass, 'false', { bypassCache: 'get', returnEntity: 'ChecklistTask'}, {createTask: createTask });\n    }    \n    \n    export function createTaskAsync(context: IContext, createTask: ChecklistTask | null):AsyncResult<ChecklistTask> {\n        const request = createCreateTaskInput(createTask, );\n        return executeAction<ChecklistTask>(request, context);\n    }          \n          \n    export function createUpdateChecklistsInput(queryResultSettings: IQueryResultSettings, updateChecklists: Checklist[] | null): IDataServiceRequest {      \n        const query = checklistsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('UpdateChecklists', true, ChecklistClass, 'true', { bypassCache: 'get', returnEntity: 'Checklist'}, {updateChecklists: updateChecklists });\n    }    \n    \n    export function updateChecklistsAsync(context: IContext, updateChecklists: Checklist[] | null):AsyncResult<Checklist[]> {\n        const request = createUpdateChecklistsInput(context.queryResultSettings, updateChecklists, );\n        return executeAction<Checklist[]>(request, context);\n    }          \n          \n    export function createUpdateTasksInput(queryResultSettings: IQueryResultSettings, updateTasks: ChecklistTask[] | null): IDataServiceRequest {      \n        const query = checklistsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('UpdateTasks', true, ChecklistTaskClass, 'true', { bypassCache: 'get', returnEntity: 'ChecklistTask'}, {updateTasks: updateTasks });\n    }    \n    \n    export function updateTasksAsync(context: IContext, updateTasks: ChecklistTask[] | null):AsyncResult<ChecklistTask[]> {\n        const request = createUpdateTasksInput(context.queryResultSettings, updateTasks, );\n        return executeAction<ChecklistTask[]>(request, context);\n    }          \n          \n    "],"sourceRoot":""},"metadata":{},"sourceType":"module"}