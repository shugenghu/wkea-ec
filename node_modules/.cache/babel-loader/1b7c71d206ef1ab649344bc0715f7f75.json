{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _assertThisInitialized from\"@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/esm/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/esm/getPrototypeOf\";import _wrapNativeSuper from\"@babel/runtime/helpers/esm/wrapNativeSuper\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ /**\r\n * Http specific errors\r\n */export var HttpException=/*#__PURE__*/function(_Error){_inherits(HttpException,_Error);var _super=_createSuper(HttpException);/**\r\n     * Error class for representing server errors\r\n     * @param code HTTP status code\r\n     * @param message Http status message\r\n     */function HttpException(code,message){var _this;_classCallCheck(this,HttpException);_this=_super.call(this,message);_this.statusCode=code;_this.name=HttpException.Name;// As of Typescript 2.1 if we extend the Error object the prototype must be set explicitly\n// See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nObject.setPrototypeOf(_assertThisInitialized(_this),HttpException.prototype);return _this;}return HttpException;}(/*#__PURE__*/_wrapNativeSuper(Error));HttpException.Name='HttpException';","map":{"version":3,"sources":["../../../../src/_server/error/HttpException.ts"],"names":[],"mappings":"inCAAA;;;AAGG,G,CAEH;;AAEG,GACH,UAAa,CAAA,aAAb,sGAKI;;;;AAIG,OACH,uBAAY,IAAZ,CAA0B,OAA1B,CAA0C,+CACtC,uBAAM,OAAN,EACA,MAAK,UAAL,CAAkB,IAAlB,CACA,MAAK,IAAL,CAAY,aAAa,CAAC,IAA1B,CAEA;AACA;AACA,MAAM,CAAC,cAAP,+BAA4B,aAAa,CAAC,SAA1C,EAPsC,aAQzC,CAlBL,qDAAmC,KAAnC,GACkB,aAAA,CAAA,IAAA,CAAe,eAAf","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n/**\n * Http specific errors\n */\nexport class HttpException extends Error {\n    public static Name: string = 'HttpException';\n    // TODO: type these\n    public statusCode: number;\n\n    /**\n     * Error class for representing server errors\n     * @param code HTTP status code\n     * @param message Http status message\n     */\n    constructor(code: number, message?: string) {\n        super(message);\n        this.statusCode = code;\n        this.name = HttpException.Name;\n\n        // As of Typescript 2.1 if we extend the Error object the prototype must be set explicitly\n        // See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, HttpException.prototype);\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}