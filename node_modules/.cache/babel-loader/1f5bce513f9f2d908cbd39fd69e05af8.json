{"ast":null,"code":"import{DataServiceQuery}from'../DataServiceQuery';import{BusinessPartnerClass,BusinessPartnerProspectClass,BusinessPartnerUserClass}from'../Entities/CommerceModels.g';import{executeAction}from'../retail-action';function businessPartnersQuery(businessPartnerId){var key=businessPartnerId?{BusinessPartnerId:businessPartnerId}:null;return new DataServiceQuery(\"BusinessPartners\",\"BusinessPartner\",BusinessPartnerClass,key);}export function createCreateInput(entity){return businessPartnersQuery().create(entity);}export function createBusinessPartnerAsync(context,entity){var request=createCreateInput(entity);return executeAction(request,context);}export function createUpdateInput(entity){return businessPartnersQuery(entity.BusinessPartnerId).update(entity);}export function updateAsync(context,entity){var request=createUpdateInput(entity);return executeAction(request,context);}export function createDeleteAsync(entity){return businessPartnersQuery(entity.BusinessPartnerId)[\"delete\"]();}export function deleteAsync(context,entity){var request=createDeleteAsync(entity);return executeAction(request,context);}export function createReadAsync(businessPartnerId){return businessPartnersQuery(businessPartnerId).read();}export function readAsync(context,businessPartnerId){var request=createReadAsync(businessPartnerId);return executeAction(request,context);}export function createReadAllAsync(queryResultSettings){return businessPartnersQuery().resultSettings(queryResultSettings).read();}export function readAllAsync(context){var request=createReadAllAsync(context.queryResultSettings);return executeAction(request,context);}export function createCreateProspectInput(businessPartnerProspect){var query=businessPartnersQuery();return query.createDataServiceRequestForOperation('CreateProspect',true,BusinessPartnerProspectClass,'false',{bypassCache:'get',returnEntity:'BusinessPartnerProspect'},{businessPartnerProspect:businessPartnerProspect});}export function createProspectAsync(context,businessPartnerProspect){var request=createCreateProspectInput(businessPartnerProspect);return executeAction(request,context);}export function createGetCurrentInput(){var query=businessPartnersQuery();return query.createDataServiceRequestForOperation('GetCurrent',false,BusinessPartnerClass,'false',{bypassCache:'none',returnEntity:'BusinessPartner'},{});}export function getCurrentAsync(context){var request=createGetCurrentInput();return executeAction(request,context);}export function createGetUsersInput(queryResultSettings,businessPartnerId){var query=businessPartnersQuery(businessPartnerId).resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetUsers',false,BusinessPartnerUserClass,'true',{bypassCache:'none',returnEntity:'BusinessPartnerUser'},{});}export function getUsersAsync(context,businessPartnerId){var request=createGetUsersInput(context.queryResultSettings,businessPartnerId);return executeAction(request,context);}","map":{"version":3,"sources":["../../src/DataActions/BusinessPartnersDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { BusinessPartner, BusinessPartnerProspect, BusinessPartnerUser } from '../Entities/CommerceTypes.g';\n    import { BusinessPartnerClass, BusinessPartnerProspectClass, BusinessPartnerUserClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function businessPartnersQuery(businessPartnerId?: string): DataServiceQuery {\n      var key = (businessPartnerId) ? { BusinessPartnerId: businessPartnerId } : null;\n      return new DataServiceQuery(\"BusinessPartners\", \"BusinessPartner\", BusinessPartnerClass, key);\n    }\n    \n    export function createCreateInput(entity: BusinessPartner): IDataServiceRequest {\n        return businessPartnersQuery().create(entity);\n    }\n    export function createBusinessPartnerAsync(context: IContext, entity: BusinessPartner): AsyncResult<BusinessPartner> {\n        const request = createCreateInput(entity, );\n        return executeAction<BusinessPartner>(request, context);\n    }\n    export function createUpdateInput(entity: BusinessPartner): IDataServiceRequest {\n        return businessPartnersQuery(entity.BusinessPartnerId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: BusinessPartner): AsyncResult<BusinessPartner> {\n        const request = createUpdateInput(entity, );\n        return executeAction<BusinessPartner>(request, context);\n    }\n    export function createDeleteAsync(entity: BusinessPartner): IDataServiceRequest {\n        return businessPartnersQuery(entity.BusinessPartnerId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: BusinessPartner): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(businessPartnerId: string): IDataServiceRequest {\n        return businessPartnersQuery(businessPartnerId).read();\n    }\n    export function readAsync(context: IContext, businessPartnerId: string): AsyncResult<BusinessPartner> {\n        const request = createReadAsync(businessPartnerId, );\n        return executeAction<BusinessPartner>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return businessPartnersQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<BusinessPartner[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<BusinessPartner[]>(request, context);\n    }\n    \n    export function createCreateProspectInput(businessPartnerProspect: BusinessPartnerProspect | null): IDataServiceRequest {      \n        const query = businessPartnersQuery();\n        return query.createDataServiceRequestForOperation('CreateProspect', true, BusinessPartnerProspectClass, 'false', { bypassCache: 'get', returnEntity: 'BusinessPartnerProspect'}, {businessPartnerProspect: businessPartnerProspect });\n    }    \n    \n    export function createProspectAsync(context: IContext, businessPartnerProspect: BusinessPartnerProspect | null):AsyncResult<BusinessPartnerProspect> {\n        const request = createCreateProspectInput(businessPartnerProspect, );\n        return executeAction<BusinessPartnerProspect>(request, context);\n    }          \n          \n    export function createGetCurrentInput(): IDataServiceRequest {      \n        const query = businessPartnersQuery();\n        return query.createDataServiceRequestForOperation('GetCurrent', false, BusinessPartnerClass, 'false', { bypassCache: 'none', returnEntity: 'BusinessPartner'}, { });\n    }    \n    \n    export function getCurrentAsync(context: IContext):AsyncResult<BusinessPartner> {\n        const request = createGetCurrentInput();\n        return executeAction<BusinessPartner>(request, context);\n    }          \n          \n    export function createGetUsersInput(queryResultSettings: IQueryResultSettings, businessPartnerId: string): IDataServiceRequest {      \n        const query = businessPartnersQuery(businessPartnerId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetUsers', false, BusinessPartnerUserClass, 'true', { bypassCache: 'none', returnEntity: 'BusinessPartnerUser'}, { });\n    }    \n    \n    export function getUsersAsync(context: IContext, businessPartnerId: string):AsyncResult<BusinessPartnerUser[]> {\n        const request = createGetUsersInput(context.queryResultSettings, businessPartnerId, );\n        return executeAction<BusinessPartnerUser[]>(request, context);\n    }          \n          \n    "],"sourceRoot":""},"metadata":{},"sourceType":"module"}