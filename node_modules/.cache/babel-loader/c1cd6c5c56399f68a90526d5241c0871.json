{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import _cloneDeep from\"lodash/cloneDeep\";import{updateCartLinesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';export default async function clearCartLinesDeliveryInformation(cart,actionContext){var _actionContext$reques;if(!cart||!cart.CartLines){return{cart:undefined,status:'FAILED'};}const pickupDeliveryModeCode=actionContext&&actionContext.requestContext&&((_actionContext$reques=actionContext.requestContext.channel)===null||_actionContext$reques===void 0?void 0:_actionContext$reques.PickupDeliveryModeCode);const matchingLines=cart.CartLines.filter(cartLine=>cartLine.DeliveryMode&&cartLine.DeliveryMode!==pickupDeliveryModeCode&&cartLine.LineId);// If there are no lines needing updates, just return success\nif(matchingLines.length===0){return{cart:cart,status:'SUCCESS'};}let copiedLines=_cloneDeep(matchingLines);copiedLines.forEach(line=>{line.DeliveryMode='';line.FulfillmentStoreId='';line.ShippingAddress={};});return updateCartLinesAsync({callerContext:actionContext},cart.Id,copiedLines,null).then(newCart=>{return{cart:newCart,status:'SUCCESS'};}).catch(error=>{actionContext.telemetry.warning(error);actionContext.telemetry.debug('Unable to Update Cart Lines');return{cart:undefined,status:'FAILED'};});}","map":{"version":3,"sources":["cart-state/clear-cart-lines-delivery-information.ts"],"names":[],"mappings":"uIACA,OAAS,oBAAT,KAAqC,qEAArC,CAKA,cAAe,eAAe,CAAA,iCAAf,CAAiD,IAAjD,CAAmF,aAAnF,CAAgH,2BAE3H,GAAI,CAAC,IAAD,EAAS,CAAC,IAAI,CAAC,SAAnB,CAA8B,CAC1B,MAAO,CAAE,IAAI,CAAE,SAAR,CAAmB,MAAM,CAAE,QAA3B,CAAP,CACH,CAED,KAAM,CAAA,sBAAsB,CAAG,aAAa,EAAI,aAAa,CAAC,cAA/B,0BAAiD,aAAa,CAAC,cAAd,CAA6B,OAA9E,gDAAiD,sBAAsC,sBAAvF,CAA/B,CAEA,KAAM,CAAA,aAAa,CAAG,IAAI,CAAC,SAAL,CAAe,MAAf,CAClB,QAAQ,EAAI,QAAQ,CAAC,YAAT,EAAyB,QAAQ,CAAC,YAAT,GAA0B,sBAAnD,EAA6E,QAAQ,CAAC,MADhF,CAAtB,CAIA;AACA,GAAI,aAAa,CAAC,MAAd,GAAyB,CAA7B,CAAgC,CAC5B,MAAmC,CAAE,IAAI,CAAE,IAAR,CAAc,MAAM,CAAE,SAAtB,CAAnC,CACH,CAED,GAAI,CAAA,WAAW,CAAe,WAAY,aAAZ,CAA9B,CAEA,WAAW,CAAC,OAAZ,CAAqB,IAAI,EAAG,CACxB,IAAI,CAAC,YAAL,CAAoB,EAApB,CACA,IAAI,CAAC,kBAAL,CAA0B,EAA1B,CACA,IAAI,CAAC,eAAL,CAAuB,EAAvB,CACH,CAJD,EAMA,MAAO,CAAA,oBAAoB,CAAC,CAAE,aAAa,CAAE,aAAjB,CAAD,CAAkC,IAAI,CAAC,EAAvC,CAA2C,WAA3C,CAAwD,IAAxD,CAApB,CACF,IADE,CACI,OAAD,EAAiB,CACnB,MAAmC,CAAE,IAAI,CAAE,OAAR,CAAiB,MAAM,CAAE,SAAzB,CAAnC,CACH,CAHE,EAIF,KAJE,CAIK,KAAD,EAAkB,CACrB,aAAa,CAAC,SAAd,CAAwB,OAAxB,CAAgC,KAAhC,EACA,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAA8B,6BAA9B,EAEA,MAAmC,CAAE,IAAI,CAAE,SAAR,CAAmB,MAAM,CAAE,QAA3B,CAAnC,CACH,CATE,CAAP,CAUH","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { updateCartLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { Cart, CartLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { ICartActionResultWithCart } from './cart-action-result';\nimport _ from 'lodash';\n\nexport default async function clearCartLinesDeliveryInformation(cart: Readonly<Cart | undefined>, actionContext: IActionContext): Promise<ICartActionResultWithCart> {\n\n    if (!cart || !cart.CartLines) {\n        return { cart: undefined, status: 'FAILED'};\n    }\n\n    const pickupDeliveryModeCode = actionContext && actionContext.requestContext && actionContext.requestContext.channel?.PickupDeliveryModeCode;\n\n    const matchingLines = cart.CartLines.filter(\n        cartLine => cartLine.DeliveryMode && cartLine.DeliveryMode !== pickupDeliveryModeCode && cartLine.LineId\n    );\n\n    // If there are no lines needing updates, just return success\n    if (matchingLines.length === 0) {\n        return <ICartActionResultWithCart> { cart: cart, status: 'SUCCESS'};\n    }\n\n    let copiedLines: CartLine[] = _.cloneDeep(matchingLines);\n\n    copiedLines.forEach( line => {\n        line.DeliveryMode = '';\n        line.FulfillmentStoreId = '';\n        line.ShippingAddress = {};\n    });\n\n    return updateCartLinesAsync({ callerContext: actionContext}, cart.Id, copiedLines, null)\n        .then((newCart: any) => {\n            return <ICartActionResultWithCart> { cart: newCart, status: 'SUCCESS'};\n        })\n        .catch((error: string) => {\n            actionContext.telemetry.warning(error);\n            actionContext.telemetry.debug('Unable to Update Cart Lines');\n\n            return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED'};\n        });\n}"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}