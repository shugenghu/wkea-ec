{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{updateProductListLinesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';import getPaginatedOrderTemplateLines,{GetPaginatedOrderTemplateLinesInput}from'./get-paginated-order-template-lines';/**\r\n *  Input class for the UpdateOrderTemplate data action.\r\n */export var UpdateOrderTemplateInput=function UpdateOrderTemplateInput(orderTemplateId,productId,quantity,unitOfMeasure){_classCallCheck(this,UpdateOrderTemplateInput);this.getCacheKey=function(){return'UpdateOrderTemplateInput';};this.getCacheObjectType=function(){return'UpdateOrderTemplateInput';};this.dataCacheType=function(){return'none';};this.orderTemplateId=orderTemplateId;this.productId=productId;this.quantity=quantity;this.unitOfMeasure=unitOfMeasure||'ea';};/**\r\n * createInput method for the UpdateOrderTemplate method.\r\n * @param {ICreateActionContext} inputData The input data passed to the createInput method.\r\n * @param {string} orderTemplateId The id of order template to update.\r\n * @param {number} productId The id of a product to add.\r\n * @param {number} quantity How many items of this product to add.\r\n */export var updateOrderTemplateInput=function updateOrderTemplateInput(inputData,orderTemplateId,productId,quantity,unitOfMeasure){var requestContext=inputData.requestContext;if(!requestContext.user.isAuthenticated){throw new Error('Unable to create order template. User is not authenticated.');}return new UpdateOrderTemplateInput(orderTemplateId,productId,quantity,unitOfMeasure);};/**\r\n * The action method for the UpdateOrderTemplate data action.\r\n * @param {UpdateOrderTemplateInput} input The action input.\r\n * @param {IActionContext} ctx The action context.\r\n */export function updateOrderTemplateAction(_x,_x2){return _updateOrderTemplateAction.apply(this,arguments);}/**\r\n * The UpdateOrderTemplate Data Action.\r\n * Returns product list line that was added to the order template.\r\n */function _updateOrderTemplateAction(){_updateOrderTemplateAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx){var getLinesInput,linesState,linesToUpdate,lineToUpdate,updatedLines,updatedLine;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(ctx.requestContext.user.isAuthenticated){_context.next=3;break;}throw Error('User token was not found when updating the order template');case 3:getLinesInput=new GetPaginatedOrderTemplateLinesInput(input.orderTemplateId,{},input.productId.toString());_context.next=6;return getPaginatedOrderTemplateLines(getLinesInput,ctx);case 6:linesState=_context.sent;if(linesState){_context.next=9;break;}throw Error('Order template was not found when updating the order template');case 9:linesToUpdate=linesState.lines.filter(function(line){return line.productListLine.ProductId===input.productId;});if(!(linesToUpdate.length!==1)){_context.next=12;break;}throw Error('Unable to find the line to update when updating the order template');case 12:lineToUpdate=linesToUpdate[0].productListLine;lineToUpdate.UnitOfMeasure=input.unitOfMeasure;lineToUpdate.Quantity=input.quantity;_context.next=17;return updateProductListLinesAsync({callerContext:ctx},input.orderTemplateId,[lineToUpdate]);case 17:updatedLines=_context.sent;if(!(!updatedLines||updatedLines.length!==1)){_context.next=20;break;}throw Error('Server returned invalid lines when updating order template');case 20:updatedLine=updatedLines.filter(function(line){return line.ProductId===input.productId;});if(!(updatedLine.length!==1||updatedLine[0].Quantity!==input.quantity||updatedLine[0].UnitOfMeasure!==input.unitOfMeasure)){_context.next=23;break;}throw Error('Server did not update the line when updating order template');case 23:return _context.abrupt(\"return\",updatedLine[0]);case 26:_context.prev=26;_context.t0=_context[\"catch\"](0);ctx.telemetry.error('Not able to add an item to order template',_context.t0);throw _context.t0;case 30:case\"end\":return _context.stop();}}},_callee,null,[[0,26]]);}));return _updateOrderTemplateAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/order-templates/update-order-template-line',action:updateOrderTemplateAction,input:updateOrderTemplateInput});","map":{"version":3,"sources":["../../../src/order-templates/update-order-template-line.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    ICreateActionContext } from '@msdyn365-commerce/core';\nimport { updateProductListLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';\nimport { ProductListLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport getPaginatedOrderTemplateLines, { GetPaginatedOrderTemplateLinesInput } from './get-paginated-order-template-lines';\n\n/**\n *  Input class for the UpdateOrderTemplate data action.\n */\nexport class UpdateOrderTemplateInput implements IActionInput {\n    public readonly orderTemplateId: string;\n    public readonly productId: number;\n    public readonly quantity: number;\n    public readonly unitOfMeasure: string;\n\n    constructor(orderTemplateId: string, productId: number, quantity: number, unitOfMeasure: string) {\n        this.orderTemplateId = orderTemplateId;\n        this.productId = productId;\n        this.quantity = quantity;\n        this.unitOfMeasure = unitOfMeasure || 'ea';\n    }\n\n    public getCacheKey = () => 'UpdateOrderTemplateInput';\n    public getCacheObjectType = () => 'UpdateOrderTemplateInput';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n * createInput method for the UpdateOrderTemplate method.\n * @param {ICreateActionContext} inputData The input data passed to the createInput method.\n * @param {string} orderTemplateId The id of order template to update.\n * @param {number} productId The id of a product to add.\n * @param {number} quantity How many items of this product to add.\n */\nexport const updateOrderTemplateInput = (\n    inputData: ICreateActionContext, orderTemplateId: string, productId: number, quantity: number, unitOfMeasure: string): UpdateOrderTemplateInput => {\n\n    const { requestContext } = inputData;\n    if (!requestContext.user.isAuthenticated) {\n        throw new Error('Unable to create order template. User is not authenticated.');\n    }\n    return new UpdateOrderTemplateInput(orderTemplateId, productId, quantity, unitOfMeasure);\n};\n\n/**\n * The action method for the UpdateOrderTemplate data action.\n * @param {UpdateOrderTemplateInput} input The action input.\n * @param {IActionContext} ctx The action context.\n */\nexport async function updateOrderTemplateAction(input: UpdateOrderTemplateInput, ctx: IActionContext): Promise<ProductListLine> {\n    try {\n        if (!ctx.requestContext.user.isAuthenticated) {\n            throw Error('User token was not found when updating the order template');\n        }\n        const getLinesInput = new GetPaginatedOrderTemplateLinesInput(input.orderTemplateId, {}, input.productId.toString());\n        const linesState = await getPaginatedOrderTemplateLines(getLinesInput, ctx);\n        if (!linesState) {\n            throw Error('Order template was not found when updating the order template');\n        }\n\n        const linesToUpdate = linesState.lines.filter(line => line.productListLine.ProductId === input.productId);\n        if (linesToUpdate.length !== 1) {\n            throw Error('Unable to find the line to update when updating the order template');\n        }\n\n        const lineToUpdate = linesToUpdate[0].productListLine;\n\n        lineToUpdate.UnitOfMeasure = input.unitOfMeasure;\n        lineToUpdate.Quantity = input.quantity;\n\n        const updatedLines: ProductListLine[] = await updateProductListLinesAsync({\n            callerContext: ctx\n        }, input.orderTemplateId, [lineToUpdate]);\n\n        if (!updatedLines || updatedLines.length !== 1) {\n            throw Error('Server returned invalid lines when updating order template');\n        }\n        const updatedLine = updatedLines.filter(line => line.ProductId === input.productId);\n        if (updatedLine.length !== 1 || updatedLine[0].Quantity !== input.quantity || updatedLine[0].UnitOfMeasure !== input.unitOfMeasure) {\n            throw Error('Server did not update the line when updating order template');\n        }\n        return updatedLine[0];\n    } catch (error) {\n        ctx.telemetry.error('Not able to add an item to order template', error);\n        throw error;\n    }\n}\n\n/**\n * The UpdateOrderTemplate Data Action.\n * Returns product list line that was added to the order template.\n */\nexport default createObservableDataAction<ProductListLine>({\n    id: '@msdyn365-commerce-modules/retail-actions/order-templates/update-order-template-line',\n    action: <IAction<ProductListLine>>updateOrderTemplateAction,\n    input: updateOrderTemplateInput\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}