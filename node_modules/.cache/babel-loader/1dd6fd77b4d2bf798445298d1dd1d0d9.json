{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCartState}from'@msdyn365-commerce/global-state';import{getDeliveryOptionsAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{buildCacheKey}from'./index';import{ActiveCartProductsInput,getActiveCartProductsAction}from'./index';/**\r\n * Input class for delivery options for items in cart\r\n */export class ProductDeliveryOptionsForCartLineItems{constructor(apiSettings){this.getCacheKey=()=>buildCacheKey(\"ActiveCartLineItemsDeliveryOptions\",this.apiSettings);this.getCacheObjectType=()=>'ActiveCartLineItemsDeliveryOptions';this.dataCacheType=()=>'request';this.apiSettings=apiSettings;}}const createInput=inputData=>{return new ProductDeliveryOptionsForCartLineItems(inputData.requestContext.apiSettings);};/**\r\n * Calls the Retail API to get the delivery options for items in the cart\r\n */export async function getDeliveryOptionsForCartLineItems(input,ctx){// If no input is provided fail out\nif(!input){throw new Error('[getDeliveryOptionsForCartLineItems]No valid Input was provided, failing');}const cartState=await getCartState(ctx);const cart=cartState.cart;const products=await getActiveCartProductsAction(new ActiveCartProductsInput(),ctx);if(!cart||!products||products.length===0){console.log('[getDeliveryOptionsForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');ctx.trace('[getDeliveryOptionsForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');return[];}return getDeliveryOptionsAsync({callerContext:ctx,queryResultSettings:{}},products.map(x=>x.RecordId),{},null).then(result=>{return result;}).catch(error=>{ctx.trace(error.message);ctx.telemetry.exception(error);ctx.telemetry.debug(\"[getDeliveryOptionsForCartLineItems]Error executing action\");throw new Error('[getDeliveryOptionsForCartLineItems]Error executing action');});}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-delivery-options-for-cartlines',action:getDeliveryOptionsForCartLineItems,input:createInput});","map":{"version":3,"sources":["../../src/get-delivery-options-for-cartlines.ts"],"names":[],"mappings":"sCAAA,OAAoB,0BAApB,KAAyJ,yBAAzJ,CACA,OAAS,YAAT,KAA6B,iCAA7B,CAEA,OAAS,uBAAT,KAAwC,wEAAxC,CACA,OAAS,aAAT,KAA+B,SAA/B,CACA,OAAQ,uBAAR,CAAiC,2BAAjC,KAAmE,SAAnE,CAEA;;AAEG,GACH,MAAM,MAAO,CAAA,sCAAsC,CAG/C,WAAA,CAAY,WAAZ,CAA6C,CAItC,KAAA,WAAA,CAAc,IAAM,aAAa,sCAAuC,KAAK,WAA5C,CAAjC,CACA,KAAA,kBAAA,CAAqB,IAAM,oCAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CALH,KAAK,WAAL,CAAmB,WAAnB,CACH,CAL8C,CAYnD,KAAM,CAAA,WAAW,CAAI,SAAD,EAAoD,CACpE,MAAO,IAAI,CAAA,sCAAJ,CAA2C,SAAS,CAAC,cAAV,CAAyB,WAApE,CAAP,CACH,CAFD,CAIA;;AAEG,GACH,MAAO,eAAe,CAAA,kCAAf,CAAkD,KAAlD,CAAiG,GAAjG,CAAoH,CACvH;AACA,GAAI,CAAC,KAAL,CAAY,CACR,KAAM,IAAI,CAAA,KAAJ,CAAU,0EAAV,CAAN,CACH,CACD,KAAM,CAAA,SAAS,CAAG,KAAM,CAAA,YAAY,CAAC,GAAD,CAApC,CACA,KAAM,CAAA,IAAI,CAAG,SAAS,CAAC,IAAvB,CACA,KAAM,CAAA,QAAQ,CAAG,KAAM,CAAA,2BAA2B,CAAC,GAAI,CAAA,uBAAJ,EAAD,CAAgC,GAAhC,CAAlD,CAEA,GAAG,CAAC,IAAD,EAAS,CAAC,QAAV,EAAsB,QAAQ,CAAC,MAAT,GAAoB,CAA7C,CAAgD,CAC5C,OAAO,CAAC,GAAR,CAAY,0GAAZ,EACA,GAAG,CAAC,KAAJ,CAAU,0GAAV,EACA,MAAiC,EAAjC,CACH,CAED,MAAO,CAAA,uBAAuB,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAsB,mBAAmB,CAAE,EAA3C,CAAD,CAAkD,QAAQ,CAAC,GAAT,CAAa,CAAC,EAAI,CAAC,CAAC,QAApB,CAAlD,CAAiF,EAAjF,CAAqF,IAArF,CAAvB,CACF,IADE,CACG,MAAM,EAAG,CACX,MAAO,CAAA,MAAP,CACH,CAHE,EAGA,KAHA,CAGO,KAAD,EAAiB,CACtB,GAAG,CAAC,KAAJ,CAAU,KAAK,CAAC,OAAhB,EACA,GAAG,CAAC,SAAJ,CAAc,SAAd,CAAwB,KAAxB,EACA,GAAG,CAAC,SAAJ,CAAc,KAAd,+DACA,KAAM,IAAI,CAAA,KAAJ,CAAU,4DAAV,CAAN,CACH,CARE,CAAP,CASH,CAED,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,8EADkC,CAEtC,MAAM,CAAuC,kCAFP,CAGtC,KAAK,CAAE,WAH+B,CAAD,CAAzC","sourcesContent":["import { CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny, ICommerceApiSettings, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getCartState } from '@msdyn365-commerce/global-state';\nimport { ProductAvailableQuantity, ProductDeliveryOptions } from '@msdyn365-commerce/retail-proxy';\nimport { getDeliveryOptionsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { buildCacheKey, } from './index';\nimport {ActiveCartProductsInput, getActiveCartProductsAction} from './index';\n\n/**\n * Input class for delivery options for items in cart\n */\nexport class ProductDeliveryOptionsForCartLineItems implements IActionInput {\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n    }\n\n    public getCacheKey = () => buildCacheKey(`ActiveCartLineItemsDeliveryOptions`, this.apiSettings);\n    public getCacheObjectType = () => 'ActiveCartLineItemsDeliveryOptions';\n    public dataCacheType = (): CacheType => 'request';\n}\n\nconst createInput = (inputData: ICreateActionContext<IGeneric<IAny>>) => {\n    return new ProductDeliveryOptionsForCartLineItems(inputData.requestContext.apiSettings);\n};\n\n/**\n * Calls the Retail API to get the delivery options for items in the cart\n */\nexport async function getDeliveryOptionsForCartLineItems(input: ProductDeliveryOptionsForCartLineItems, ctx: IActionContext): Promise<ProductDeliveryOptions[]> {\n    // If no input is provided fail out\n    if (!input) {\n        throw new Error('[getDeliveryOptionsForCartLineItems]No valid Input was provided, failing');\n    }\n    const cartState = await getCartState(ctx);\n    const cart = cartState.cart;\n    const products = await getActiveCartProductsAction(new ActiveCartProductsInput(), ctx);\n\n    if(!cart || !products || products.length === 0) {\n        console.log('[getDeliveryOptionsForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');\n        ctx.trace('[getDeliveryOptionsForCartLineItems] Not able to get cart OR channelConfiguration or no products in cart');\n        return <ProductDeliveryOptions[]>[];\n    }\n\n    return getDeliveryOptionsAsync({ callerContext: ctx, queryResultSettings: {} }, products.map(x => x.RecordId), {}, null)\n        .then(result => {\n            return result;\n        }).catch((error: Error) => {\n            ctx.trace(error.message);\n            ctx.telemetry.exception(error);\n            ctx.telemetry.debug(`[getDeliveryOptionsForCartLineItems]Error executing action`);\n            throw new Error('[getDeliveryOptionsForCartLineItems]Error executing action');\n        });\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-delivery-options-for-cartlines',\n    action: <IAction<ProductAvailableQuantity[]>>getDeliveryOptionsForCartLineItems,\n    input: createInput\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}