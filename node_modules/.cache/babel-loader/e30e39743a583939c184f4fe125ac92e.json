{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{createObservableDataAction}from'@msdyn365-commerce/core';import{createReadAsync,updateAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';import getCustomer,{GetCustomerInput}from'./get-customer';/**\r\n* The input class for the addAddress data action\r\n*/export var AddressManagementInput=function AddressManagementInput(address,userAccountNumber){_classCallCheck(this,AddressManagementInput);this.getCacheKey=function(){return'AddAddress';};this.getCacheObjectType=function(){return'AddAddress';};this.dataCacheType=function(){return'none';};this.userAccountNumber=userAccountNumber;this.address=address;};/**\r\n* The createInput method for the addAddress data action\r\n* @param inputData The input data passed to the createInput method\r\n*/export var createAddressManagementInput=function createAddressManagementInput(inputData){if(inputData.requestContext.user.isAuthenticated){throw new Error('User is not authenticated. Cannot call UpdateAddress API');}var _ref=inputData.data||{address:undefined},address=_ref.address;if(!address){throw new Error('address is not provided. Cannot call UpdateAddress API');}return new AddressManagementInput(address);};export function doAddressManagementOperation(_x,_x2,_x3){return _doAddressManagementOperation.apply(this,arguments);}function _doAddressManagementOperation(){_doAddressManagementOperation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(input,ctx,operationHandler){var userAccountNumber,address,customerInput,customer,newCustomer,updatedCustomer;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:userAccountNumber=input.userAccountNumber,address=input.address;customerInput=new GetCustomerInput(ctx.requestContext.apiSettings,userAccountNumber);_context.next=4;return getCustomer(customerInput,ctx);case 4:customer=_context.sent;if(customer){_context.next=7;break;}throw new Error('Not able to create customer');case 7:newCustomer=operationHandler(_objectSpread({},customer),address);_context.next=10;return updateAsync({callerContext:ctx},newCustomer);case 10:updatedCustomer=_context.sent;if(updatedCustomer){_context.next=13;break;}throw new Error('Not able to update customer');case 13:ctx.update(createReadAsync(updatedCustomer.AccountNumber),updatedCustomer);return _context.abrupt(\"return\",updatedCustomer.Addresses||[]);case 15:case\"end\":return _context.stop();}}},_callee);}));return _doAddressManagementOperation.apply(this,arguments);}export function addAddressHandler(customer,address){customer.Addresses=_toConsumableArray(customer.Addresses||[]);customer.Addresses.push(address);return customer;}export function addAddressAction(_x4,_x5){return _addAddressAction.apply(this,arguments);}/**\r\n* The addAddress data action\r\n* Calls the read RetailServer API to get information about a customer\r\n* Adds the passed address information to the retireved customer, and\r\n* then updates that customer via the update RetailServer API.\r\n*/function _addAddressAction(){_addAddressAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input,ctx){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",doAddressManagementOperation(input,ctx,addAddressHandler));case 1:case\"end\":return _context2.stop();}}},_callee2);}));return _addAddressAction.apply(this,arguments);}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/add-address',action:addAddressAction,input:createAddressManagementInput,isBatched:false});","map":{"version":3,"sources":["../../src/add-address.ts"],"names":[],"mappings":"8nCAAA,OACe,0BADf,KAGO,yBAHP,CAKA,OACI,eADJ,CACqB,WADrB,KAEO,yEAFP,CAGA,MAAO,CAAA,WAAP,EAAsB,gBAAtB,KAA8C,gBAA9C,CASA;;AAEE,EACF,UAAa,CAAA,sBAAb,CAII,gCAAY,OAAZ,CAA8B,iBAA9B,CAAwD,8CAKjD,KAAA,WAAA,CAAc,iBAAM,YAAN,EAAd,CACA,KAAA,kBAAA,CAAqB,iBAAM,YAAN,EAArB,CACA,KAAA,aAAA,CAAgB,iBAAiB,MAAjB,EAAhB,CANH,KAAK,iBAAL,CAAyB,iBAAzB,CACA,KAAK,OAAL,CAAe,OAAf,CACH,CAPL,CAcA;;;AAGE,EACF,MAAO,IAAM,CAAA,4BAA4B,CAAG,QAA/B,CAAA,4BAA+B,CACxC,SADwC,CAEf,CACrB,GAAI,SAAS,CAAC,cAAV,CAAyB,IAAzB,CAA8B,eAAlC,CAAmD,CACnD,KAAM,IAAI,CAAA,KAAJ,CAAU,0DAAV,CAAN,CACH,CAHwB,SAKL,SAAS,CAAC,IAAV,EAAkB,CAAE,OAAO,CAAE,SAAX,CALb,CAKjB,OALiB,MAKjB,OALiB,CAOzB,GAAI,CAAC,OAAL,CAAc,CACV,KAAM,IAAI,CAAA,KAAJ,CAAU,wDAAV,CAAN,CACH,CAED,MAAO,IAAI,CAAA,sBAAJ,CAA2B,OAA3B,CAAP,CACH,CAdM,CAgBP,eAAsB,CAAA,4BAAtB,yE,+HAAO,iBACH,KADG,CAEH,GAFG,CAGH,gBAHG,mMAKK,iBALL,CAKoC,KALpC,CAKK,iBALL,CAKwB,OALxB,CAKoC,KALpC,CAKwB,OALxB,CAMG,aANH,CAMmB,GAAI,CAAA,gBAAJ,CAAqB,GAAG,CAAC,cAAJ,CAAmB,WAAxC,CAAqD,iBAArD,CANnB,uBAOoB,CAAA,WAAW,CAAC,aAAD,CAAgB,GAAhB,CAP/B,QAOG,QAPH,kBASE,QATF,8BAUO,IAAI,CAAA,KAAJ,CAAU,6BAAV,CAVP,QAaG,WAbH,CAaiB,gBAAgB,kBAAM,QAAN,EAAkB,OAAlB,CAbjC,wBAc2B,CAAA,WAAW,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAyB,WAAzB,CAdtC,SAcG,eAdH,kBAgBE,eAhBF,+BAiBO,IAAI,CAAA,KAAJ,CAAU,6BAAV,CAjBP,SAoBH,GAAG,CAAC,MAAJ,CAAW,eAAe,CAAC,eAAe,CAAC,aAAjB,CAA1B,CAA2D,eAA3D,EApBG,gCAsBI,eAAe,CAAC,SAAhB,EAA6B,EAtBjC,yD,+DAyBP,MAAM,SAAU,CAAA,iBAAV,CAA4B,QAA5B,CAAgD,OAAhD,CAAgE,CAClE,QAAQ,CAAC,SAAT,oBAA0B,QAAQ,CAAC,SAAT,EAAsB,EAAhD,EACA,QAAQ,CAAC,SAAT,CAAmB,IAAnB,CAAwB,OAAxB,EACA,MAAO,CAAA,QAAP,CACH,CAED,eAAsB,CAAA,gBAAtB,0DAIA;;;;;AAKE,E,uGATK,kBAAgC,KAAhC,CAAgE,GAAhE,uJACI,4BAA4B,CAAC,KAAD,CAAQ,GAAR,CAAa,iBAAb,CADhC,0D,mDAUP,cAAe,CAAA,0BAA0B,CAAY,CACjD,EAAE,CAAE,uDAD6C,CAEjD,MAAM,CAAsB,gBAFqB,CAGjD,KAAK,CAAuD,4BAHX,CAIjD,SAAS,CAAE,KAJsC,CAAZ,CAAzC","sourcesContent":["import {\n    CacheType, createObservableDataAction, IAction, IActionContext, IActionInput, IAny,\n    ICreateActionContext, IGeneric\n} from '@msdyn365-commerce/core';\nimport { Address, Customer } from '@msdyn365-commerce/retail-proxy';\nimport {\n    createReadAsync, updateAsync\n} from '@msdyn365-commerce/retail-proxy/dist/DataActions/CustomersDataActions.g';\nimport getCustomer, { GetCustomerInput } from './get-customer';\n\nexport interface IAddressManagementData {\n    address: Address;\n}\nexport interface IAddressManagementInput extends IActionInput {\n    address: Address;\n    userAccountNumber?: string;\n}\n/**\n* The input class for the addAddress data action\n*/\nexport class AddressManagementInput implements IAddressManagementInput {\n    public address: Address;\n    public userAccountNumber?: string;\n\n    constructor(address: Address, userAccountNumber?: string) {\n        this.userAccountNumber = userAccountNumber;\n        this.address = address;\n    }\n\n    public getCacheKey = () => 'AddAddress';\n    public getCacheObjectType = () => 'AddAddress';\n    public dataCacheType = (): CacheType => 'none';\n}\n\n/**\n* The createInput method for the addAddress data action\n* @param inputData The input data passed to the createInput method\n*/\nexport const createAddressManagementInput = (\n    inputData: ICreateActionContext<IGeneric<IAny>, IAddressManagementData>\n): IAddressManagementInput => {\n        if (inputData.requestContext.user.isAuthenticated) {\n        throw new Error('User is not authenticated. Cannot call UpdateAddress API');\n    }\n\n    const { address } = inputData.data || { address: undefined };\n\n    if (!address) {\n        throw new Error('address is not provided. Cannot call UpdateAddress API');\n    }\n\n    return new AddressManagementInput(address);\n};\n\nexport async function doAddressManagementOperation(\n    input: IAddressManagementInput,\n    ctx: IActionContext,\n    operationHandler: (customer: Customer, address: Address) => Customer\n): Promise<Address[]> {\n    const { userAccountNumber, address } = input;\n    const customerInput = new GetCustomerInput(ctx.requestContext.apiSettings, userAccountNumber);\n    const customer = await getCustomer(customerInput, ctx);\n\n    if (!customer) {\n        throw new Error('Not able to create customer');\n    }\n\n    const newCustomer = operationHandler({ ...customer }, address);\n    const updatedCustomer = await updateAsync({ callerContext: ctx }, newCustomer);\n\n    if (!updatedCustomer) {\n        throw new Error('Not able to update customer');\n    }\n\n    ctx.update(createReadAsync(updatedCustomer.AccountNumber), updatedCustomer);\n\n    return updatedCustomer.Addresses || [];\n}\n\nexport function addAddressHandler(customer: Customer, address: Address): Customer {\n    customer.Addresses = [...(customer.Addresses || [])];\n    customer.Addresses.push(address);\n    return customer;\n}\n\nexport async function addAddressAction(input: IAddressManagementInput, ctx: IActionContext): Promise<Address[]> {\n    return doAddressManagementOperation(input, ctx, addAddressHandler);\n}\n\n/**\n* The addAddress data action\n* Calls the read RetailServer API to get information about a customer\n* Adds the passed address information to the retireved customer, and\n* then updates that customer via the update RetailServer API.\n*/\nexport default createObservableDataAction<Address[]>({\n    id: '@msdyn365-commerce-modules/retail-actions/add-address',\n    action: <IAction<Address[]>>addAddressAction,\n    input: <(args: ICreateActionContext) => IActionInput>(<IAny>createAddressManagementInput),\n    isBatched: false\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}