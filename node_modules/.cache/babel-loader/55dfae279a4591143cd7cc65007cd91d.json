{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/esm/slicedToArray\";import groupBy from'lodash/groupBy';export var getTenderIdOperationIdMap=function getTenderIdOperationIdMap(tenderTypes){return tenderTypes.reduce(function(map,tenderType){if(tenderType.TenderTypeId){map[tenderType.TenderTypeId]=tenderType.OperationId;}return map;},{});};export var countItems=function countItems(salesLines){return salesLines.reduce(function(count,salesLine){return count+(salesLine.Quantity||0);},0);};export var getSalesLinesByDelivery=function getSalesLinesByDelivery(salesLines,pickupDeliveryModeCode){if(!salesLines||!salesLines.length){return[];}return salesLines.filter(function(salesLine){return pickupDeliveryModeCode&&pickupDeliveryModeCode!==''?salesLine.DeliveryMode===pickupDeliveryModeCode:salesLine.DeliveryMode!==pickupDeliveryModeCode;});};export var defaultImageSettings={viewports:{xs:{q:\"w=80&h=80&m=6\",w:0,h:0},lg:{q:\"w=147&h=147&m=6\",w:0,h:0}},lazyload:true};export var getSalesStatusCode=function getSalesStatusCode(deliveryType,statusValue){if(statusValue===7){return'canceled';}if(deliveryType==='pickUp'){switch(statusValue){case 3:return'readyForPickup';case 4:return'pickedUp';default:return'processing';}}else if(deliveryType==='ship'){switch(statusValue){case 3:return'processing';case 4:return'shipped';default:return'processing';}}else if(deliveryType==='carryOut'){return'processing';}else{return'unknown';}};export var groupSalesLines=function groupSalesLines(salesLines){var getGroupByDeliveryType=function getGroupByDeliveryType(items){return groupBy(items,function(item){return item.data.deliveryType;});};var getGroupBySalesStatusCode=function getGroupBySalesStatusCode(items){return groupBy(items,function(item){return item.data.salesStatus;});};var getGroupByTrackingId=function getGroupByTrackingId(items){return groupBy(items,function(item){return item.data.salesLine.TrackingId||'unknown';});};var getGroupByAddressId=function getGroupByAddressId(items){return groupBy(items,function(item){return item.data.salesLine.ShippingAddress&&item.data.salesLine.ShippingAddress.RecordId||'unknown';});};var flatGroup=[];var group=getGroupByDeliveryType(salesLines);Object.entries(group).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),deliveryType=_ref2[0],groupByDeliveryType=_ref2[1];group[deliveryType]=getGroupBySalesStatusCode(groupByDeliveryType);Object.entries(group[deliveryType]).forEach(function(_ref3){var _ref4=_slicedToArray(_ref3,2),salesStatus=_ref4[0],groupBySalesStatusCode=_ref4[1];groupBySalesStatusCode[salesStatus]=getGroupByAddressId(groupBySalesStatusCode);Object.entries(groupBySalesStatusCode[salesStatus]).forEach(function(_ref5){var _ref6=_slicedToArray(_ref5,2),addressId=_ref6[0],groupByAddressId=_ref6[1];groupByAddressId[addressId]=getGroupByTrackingId(groupByAddressId);Object.entries(groupByAddressId[addressId]).forEach(function(_ref7){var _ref8=_slicedToArray(_ref7,2),trackingId=_ref8[0],groupByTrackingId=_ref8[1];flatGroup.push({deliveryType:deliveryType,salesStatus:salesStatus,addressId:addressId,trackingId:trackingId,count:countItems(groupByTrackingId.map(function(item){return item.data.salesLine;})),salesLines:groupByTrackingId});});});});});return flatGroup;};","map":{"version":3,"sources":["common/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IAny, ICoreContext, IGeneric, IImageSettings, IModule, ITelemetry } from '@msdyn365-commerce/core';\nimport { SalesLine, TenderType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport groupBy from 'lodash/groupBy';\nimport { ISalesLine } from './get-sales-line';\n\nexport interface IModuleComponentProps extends IModule {\n    config: {\n        imageSettings?: IImageSettings;\n    };\n}\n\nexport interface IPriceContext {\n    id: string;\n    typeName: string;\n    context: ICoreContext<IGeneric<IAny>>;\n    telemetry: ITelemetry;\n    freePriceText: string;\n}\n\nexport const getTenderIdOperationIdMap = (tenderTypes: TenderType[]): object => {\n    return tenderTypes.reduce((map, tenderType) => {\n        if (tenderType.TenderTypeId) {\n            map[tenderType.TenderTypeId] = tenderType.OperationId;\n        }\n        return map;\n    },                        {});\n};\n\nexport const countItems = (salesLines: SalesLine[]) => {\n    return salesLines.reduce((count, salesLine) => {\n        return count + (salesLine.Quantity || 0);\n    },                       0);\n};\n\nexport const getSalesLinesByDelivery = (salesLines?: SalesLine[], pickupDeliveryModeCode?: string): SalesLine[] => {\n    if (!salesLines || !salesLines.length) {\n        return [];\n    }\n    return salesLines.filter(salesLine =>\n        // isPickUp ? getPickUp : getOthers\n        (pickupDeliveryModeCode && pickupDeliveryModeCode !== '') ? salesLine.DeliveryMode === pickupDeliveryModeCode : salesLine.DeliveryMode !== pickupDeliveryModeCode\n    );\n};\n\nexport const defaultImageSettings: IImageSettings = {\n    viewports: {\n        xs: { q: `w=80&h=80&m=6`, w: 0, h: 0 },\n        lg: { q: `w=147&h=147&m=6`, w: 0, h: 0 }\n    },\n    lazyload: true\n};\n\nexport type IDeliveryType = 'pickUp' | 'ship' | 'carryOut';\n\nexport type ISalesStatusCode = 'canceled' | 'readyForPickup' | 'pickedUp' | 'processing' | 'shipped' | 'unknown';\n\nexport const getSalesStatusCode = (deliveryType: IDeliveryType, statusValue?: number): ISalesStatusCode => {\n    if (statusValue === 7) {\n        return 'canceled';\n    }\n    if (deliveryType === 'pickUp') {\n        switch (statusValue) {\n            case 3:\n                return 'readyForPickup';\n            case 4:\n                return 'pickedUp';\n            default:\n                return 'processing';\n        }\n    } else if (deliveryType === 'ship') {\n        switch (statusValue) {\n            case 3:\n                return 'processing';\n            case 4:\n                return 'shipped';\n            default:\n                return 'processing';\n        }\n    } else if (deliveryType === 'carryOut') {\n        return 'processing';\n    } else {\n        return 'unknown';\n    }\n};\n\nexport type ITrackingId = string | 'unknown';\nexport type IAddressId = string | 'unknown';\n\nexport interface IGroupData {\n    deliveryType: IDeliveryType;\n    salesStatus: ISalesStatusCode;\n    addressId: IAddressId | 'unknown';\n    trackingId: ITrackingId | 'unknown';\n    count: number;\n    salesLines: ISalesLine[];\n}\n\nexport const groupSalesLines = (salesLines: ISalesLine[]): IGroupData[] => {\n    const getGroupByDeliveryType = (items: ISalesLine[]) => groupBy(items, item => item.data.deliveryType);\n    const getGroupBySalesStatusCode = (items: ISalesLine[]) => groupBy(items, item => item.data.salesStatus);\n    const getGroupByTrackingId = (items: ISalesLine[]) => groupBy(items, item => item.data.salesLine.TrackingId || 'unknown');\n    const getGroupByAddressId = (items: ISalesLine[]) =>\n        groupBy(items, item => (item.data.salesLine.ShippingAddress && item.data.salesLine.ShippingAddress.RecordId) || 'unknown');\n\n    const flatGroup: IGroupData[] = [];\n\n    // 1) Group by delivery type\n    // @ts-ignore\n    const group = getGroupByDeliveryType(salesLines);\n\n    // 2) Group by sales status code\n    Object.entries(group).forEach(([deliveryType, groupByDeliveryType]) => {\n        // @ts-ignore\n        group[deliveryType] = getGroupBySalesStatusCode(groupByDeliveryType);\n\n        Object.entries(group[deliveryType]).forEach(([salesStatus, groupBySalesStatusCode]) => {\n            // @ts-ignore 3) Group by address id\n            groupBySalesStatusCode[salesStatus] = getGroupByAddressId(groupBySalesStatusCode);\n\n            // @ts-ignore\n            Object.entries(groupBySalesStatusCode[salesStatus]).forEach(([addressId, groupByAddressId]) => {\n                // @ts-ignore 4) Group by address id\n                groupByAddressId[addressId] = getGroupByTrackingId(groupByAddressId);\n\n                // @ts-ignore\n                Object.entries(groupByAddressId[addressId]).forEach(([trackingId, groupByTrackingId]) => {\n                    flatGroup.push({\n                        // @ts-ignore\n                        deliveryType,\n                        // @ts-ignore\n                        salesStatus,\n                        addressId,\n                        trackingId,\n                        // @ts-ignore\n                        count: countItems(groupByTrackingId.map(item => item.data.salesLine)),\n                        // @ts-ignore\n                        salesLines: groupByTrackingId\n                    });\n                });\n            });\n        });\n    });\n\n    return flatGroup;\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}