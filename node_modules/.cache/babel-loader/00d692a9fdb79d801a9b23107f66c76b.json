{"ast":null,"code":"import{DataServiceQuery}from'../DataServiceQuery';import{SalesOrderContextualOperationsMapClass,FulfillmentLineContextualOperationsMapClass}from'../Entities/CommerceModels.g';import{executeAction}from'../retail-action';function applicableOperationsQuery(id){var key=id?{Id:id}:null;return new DataServiceQuery(\"ApplicableOperations\",\"SalesOrderContextualOperationsMap\",SalesOrderContextualOperationsMapClass,key);}export function createCreateInput(entity){return applicableOperationsQuery().create(entity);}export function createSalesOrderContextualOperationsMapAsync(context,entity){const request=createCreateInput(entity);return executeAction(request,context);}export function createUpdateInput(entity){return applicableOperationsQuery(entity.Id).update(entity);}export function updateAsync(context,entity){const request=createUpdateInput(entity);return executeAction(request,context);}export function createDeleteAsync(entity){return applicableOperationsQuery(entity.Id).delete();}export function deleteAsync(context,entity){const request=createDeleteAsync(entity);return executeAction(request,context);}export function createReadAsync(id){return applicableOperationsQuery(id).read();}export function readAsync(context,id){const request=createReadAsync(id);return executeAction(request,context);}export function createReadAllAsync(queryResultSettings){return applicableOperationsQuery().resultSettings(queryResultSettings).read();}export function readAllAsync(context){const request=createReadAllAsync(context.queryResultSettings);return executeAction(request,context);}export function createGetOrdersInput(queryResultSettings,orderSearchCriteria){const query=applicableOperationsQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetOrders',true,SalesOrderContextualOperationsMapClass,'true',{bypassCache:'none',returnEntity:'SalesOrderContextualOperationsMap'},{orderSearchCriteria:orderSearchCriteria});}export function getOrdersAsync(context,orderSearchCriteria){const request=createGetOrdersInput(context.queryResultSettings,orderSearchCriteria);return executeAction(request,context);}export function createGetFulfillmentLinesInput(queryResultSettings,fulfillmentLineSearchCriteria){const query=applicableOperationsQuery().resultSettings(queryResultSettings);return query.createDataServiceRequestForOperation('GetFulfillmentLines',true,FulfillmentLineContextualOperationsMapClass,'true',{bypassCache:'none',returnEntity:'FulfillmentLineContextualOperationsMap'},{fulfillmentLineSearchCriteria:fulfillmentLineSearchCriteria});}export function getFulfillmentLinesAsync(context,fulfillmentLineSearchCriteria){const request=createGetFulfillmentLinesInput(context.queryResultSettings,fulfillmentLineSearchCriteria);return executeAction(request,context);}","map":{"version":3,"sources":["../../src/DataActions/ApplicableOperationsDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { SalesOrderContextualOperationsMap, OrderSearchCriteria, FulfillmentLineSearchCriteria, FulfillmentLineContextualOperationsMap } from '../Entities/CommerceTypes.g';\n    import { SalesOrderContextualOperationsMapClass, FulfillmentLineContextualOperationsMapClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function applicableOperationsQuery(id?: string): DataServiceQuery {\n      var key = (id) ? { Id: id } : null;\n      return new DataServiceQuery(\"ApplicableOperations\", \"SalesOrderContextualOperationsMap\", SalesOrderContextualOperationsMapClass, key);\n    }\n    \n    export function createCreateInput(entity: SalesOrderContextualOperationsMap): IDataServiceRequest {\n        return applicableOperationsQuery().create(entity);\n    }\n    export function createSalesOrderContextualOperationsMapAsync(context: IContext, entity: SalesOrderContextualOperationsMap): AsyncResult<SalesOrderContextualOperationsMap> {\n        const request = createCreateInput(entity, );\n        return executeAction<SalesOrderContextualOperationsMap>(request, context);\n    }\n    export function createUpdateInput(entity: SalesOrderContextualOperationsMap): IDataServiceRequest {\n        return applicableOperationsQuery(entity.Id).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: SalesOrderContextualOperationsMap): AsyncResult<SalesOrderContextualOperationsMap> {\n        const request = createUpdateInput(entity, );\n        return executeAction<SalesOrderContextualOperationsMap>(request, context);\n    }\n    export function createDeleteAsync(entity: SalesOrderContextualOperationsMap): IDataServiceRequest {\n        return applicableOperationsQuery(entity.Id).delete();\n    }\n    export function deleteAsync(context: IContext, entity: SalesOrderContextualOperationsMap): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(id: string): IDataServiceRequest {\n        return applicableOperationsQuery(id).read();\n    }\n    export function readAsync(context: IContext, id: string): AsyncResult<SalesOrderContextualOperationsMap> {\n        const request = createReadAsync(id, );\n        return executeAction<SalesOrderContextualOperationsMap>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return applicableOperationsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<SalesOrderContextualOperationsMap[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<SalesOrderContextualOperationsMap[]>(request, context);\n    }\n    \n    export function createGetOrdersInput(queryResultSettings: IQueryResultSettings, orderSearchCriteria: OrderSearchCriteria | null): IDataServiceRequest {      \n        const query = applicableOperationsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetOrders', true, SalesOrderContextualOperationsMapClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrderContextualOperationsMap'}, {orderSearchCriteria: orderSearchCriteria });\n    }    \n    \n    export function getOrdersAsync(context: IContext, orderSearchCriteria: OrderSearchCriteria | null):AsyncResult<SalesOrderContextualOperationsMap[]> {\n        const request = createGetOrdersInput(context.queryResultSettings, orderSearchCriteria, );\n        return executeAction<SalesOrderContextualOperationsMap[]>(request, context);\n    }          \n          \n    export function createGetFulfillmentLinesInput(queryResultSettings: IQueryResultSettings, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null): IDataServiceRequest {      \n        const query = applicableOperationsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetFulfillmentLines', true, FulfillmentLineContextualOperationsMapClass, 'true', { bypassCache: 'none', returnEntity: 'FulfillmentLineContextualOperationsMap'}, {fulfillmentLineSearchCriteria: fulfillmentLineSearchCriteria });\n    }    \n    \n    export function getFulfillmentLinesAsync(context: IContext, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null):AsyncResult<FulfillmentLineContextualOperationsMap[]> {\n        const request = createGetFulfillmentLinesInput(context.queryResultSettings, fulfillmentLineSearchCriteria, );\n        return executeAction<FulfillmentLineContextualOperationsMap[]>(request, context);\n    }          \n          \n    "],"sourceRoot":""},"metadata":{},"sourceType":"module"}