{"ast":null,"code":"import _set2 from\"lodash/set\";import _has2 from\"lodash/has\";import _get2 from\"lodash/get\";import dragAndDropImage from'./drag-and-drop-image';import dragAndDropPlaceholder from'./drag-and-drop-placehoder';import{cleanDataInfo,EMPTY_SLOT_TYPE_NAME,getElementDataInfoById,getElementDataInfoByTarget,getModuleById,getRenderingHelper,getRootModule,updateAddModuleInnerContainerClass}from'./drag-and-drop-utils';/**\r\n * Provides the drag and drop events implementation\r\n */export class DragAndDropEvents{constructor(){/**\r\n         * Set draggable events for a specific module.\r\n         * @param sourceModuleId The module to be set as draggable.\r\n         */this.setModuleAsDraggable=sourceModuleId=>{this.renderingHelper=getRenderingHelper();if(this.renderingHelper){dragAndDropPlaceholder.setRenderingHelper(this.renderingHelper);}this._setRootModuleAsDroppable();const module=getModuleById(sourceModuleId);if(module){module.addEventListener('dragstart',this._onDragStart);module.addEventListener('drag',this._onDrag);module.addEventListener('dragend',this._onDragEnd);module.setAttribute('draggable','true');}};/**\r\n         * Clear cache object.\r\n         */this._clearCache=()=>{this.cache={};};/**\r\n         * Check if cache has the information whether or not a module can be dropped in parent container.\r\n         * @param moduleId The module id.\r\n         * @param parentId The parent container id.\r\n         * @param slotId The slot id.\r\n         * @returns {boolean} Returns true cache has the information whether or not a module can be dropped in parent container. Otherwise returns false.\r\n         */this._cacheHasIsDroppableInfo=(moduleId,parentId,slotId)=>{return _has2(this.cache,this._getCacheKey(moduleId,parentId,slotId));};/**\r\n         * Return whether or not a module can be dropped in parent container.\r\n         * @param moduleId The module id.\r\n         * @param parentId The parent container id.\r\n         * @param slotId The slot id.\r\n         * @returns {boolean | unknown} Returns whether or not a module can be dropped in parent container.\r\n         */this._isModuleDroppable=(moduleId,parentId,slotId)=>{if(!parentId||!moduleId||!slotId){return false;}this._checkIsDroppableAndAddToCache(moduleId,parentId,slotId);return _get2(this.cache,this._getCacheKey(moduleId,parentId,slotId),false);};/**\r\n         * Set whether or not a module can be dropped in parent container.\r\n         * @param moduleId The module id.\r\n         * @param parentId The parent container id.\r\n         * @param slotId The slot id.\r\n         */this._setModuleIsDroppable=(moduleId,parentId,slotId,canBeDrop)=>{_set2(this.cache,this._getCacheKey(moduleId,parentId,slotId),canBeDrop);};/**\r\n         * Create a key to cache information whether or not a module is droppable in parent container.\r\n         * @param moduleId The module id.\r\n         * @param parentId The parent container id.\r\n         * @param slotId The slot id.\r\n         * @returns {string} Returns the cache key.\r\n         */this._getCacheKey=(moduleId,parentId,slotId)=>{return\"\".concat(moduleId,\"_\").concat(parentId,\"_\").concat(slotId);};/**\r\n         * Check if module can be dropped in parent container and cache the information.\r\n         * @param moduleId The module id.\r\n         * @param parentId The parent container id.\r\n         * @param slotId The slot id.\r\n         */this._checkIsDroppableAndAddToCache=(moduleId,parentId,slotId)=>{if(!this._cacheHasIsDroppableInfo(moduleId,parentId,slotId)){const elementDataInfo=getElementDataInfoById(parentId);if(elementDataInfo.dataInfo.isFragment||elementDataInfo.dataInfo.isFragmentModule){this._setModuleIsDroppable(moduleId,parentId,slotId,false);}else{var _this$renderingHelper;const isDroppable=((_this$renderingHelper=this.renderingHelper)===null||_this$renderingHelper===void 0?void 0:_this$renderingHelper.isDroppable(moduleId,parentId,slotId))||false;this._setModuleIsDroppable(moduleId,parentId,slotId,isDroppable);}}};/**\r\n         * Handles the on drag over event for containers.\r\n         * @param e The react drag event.\r\n         */this._onDragOver=e=>{if(!this.isDragging){return;}e.preventDefault();this.isCursorOnDroppableArea=true;const dragEvent=e;const elementDataInfo=getElementDataInfoByTarget(e.target);if(elementDataInfo.dataInfo.typeName===EMPTY_SLOT_TYPE_NAME){dragAndDropImage.updatePosition(dragEvent.pageX,dragEvent.pageY);return;}this.dropElement=elementDataInfo;if(this._isModuleDroppable(this.dragElement.dataInfo.id,this.dropElement.dataInfo.parentId,this.dropElement.dataInfo.slotId)){dragAndDropPlaceholder.setPlaceHolderOnPosition(this.dragElement,this.dropElement,dragEvent.clientY);if(dragAndDropImage.isStatusNotDroppable()){dragAndDropImage.setDropAllowedImage(this.dragElement,dragEvent.pageX,dragEvent.pageY);}}else if(dragAndDropImage.isStatusDroppable()){dragAndDropPlaceholder.clearAll();dragAndDropImage.setDropNotAllowedImage(dragEvent.pageX,dragEvent.pageY);}dragAndDropImage.updatePosition(dragEvent.pageX,dragEvent.pageY);this.isCursorOnDroppableArea=false;};/**\r\n         * Handles the on drag enter event for containers.\r\n         * @param e The react drag event.\r\n         */this._onDragEnter=e=>{if(this.isDragging){e.preventDefault();this.isCursorOnDroppableArea=true;const elementDataInfo=getElementDataInfoByTarget(e.target);if(elementDataInfo.dataInfo.typeName===EMPTY_SLOT_TYPE_NAME&&elementDataInfo.element&&elementDataInfo.element.firstElementChild){const dragEvent=e;// Remove placeholder from canvas and from site builder.\ndragAndDropPlaceholder.clearAll();if(this._isModuleDroppable(this.dragElement.dataInfo.id,elementDataInfo.dataInfo.id,elementDataInfo.dataInfo.slotId)){var _this$renderingHelper2;this.dropElement=elementDataInfo;// Get the container inner element and update its class.\nupdateAddModuleInnerContainerClass(elementDataInfo.element.firstElementChild,this.dragElement.dataInfo.isFragment?'InsertFragment':'InsertModule');// Add placeholder to position 0 on site builder.\n(_this$renderingHelper2=this.renderingHelper)===null||_this$renderingHelper2===void 0?void 0:_this$renderingHelper2.onDrag(elementDataInfo.dataInfo.id,0,elementDataInfo.dataInfo.slotId);dragAndDropImage.setDropAllowedImage(this.dragElement,dragEvent.pageX,dragEvent.pageY);}else{// Get the container inner element and update its class.\nupdateAddModuleInnerContainerClass(elementDataInfo.element.firstElementChild,'MoveNotAllowed');if(dragAndDropImage.isStatusDroppable()){dragAndDropImage.setDropNotAllowedImage(dragEvent.pageX,dragEvent.pageY);}}}}};/**\r\n         * Handles the on drag leave event for containers.\r\n         * @param e The react drag event.\r\n         */this._onDragLeave=e=>{if(this.isDragging){e.preventDefault();const elementDataInfo=getElementDataInfoByTarget(e.target);if(elementDataInfo.dataInfo.typeName===EMPTY_SLOT_TYPE_NAME&&elementDataInfo.element&&elementDataInfo.element.firstElementChild){updateAddModuleInnerContainerClass(elementDataInfo.element.firstElementChild);}this.isCursorOnDroppableArea=false;}};/**\r\n         * Handles the on drop event for containers.\r\n         * @param e The react drag event.\r\n         */this._onDrop=e=>{if(this.isDragging){e.preventDefault();if(this.dropElement.dataInfo.typeName===EMPTY_SLOT_TYPE_NAME){if(this._isModuleDroppable(this.dragElement.dataInfo.id,this.dropElement.dataInfo.id,this.dropElement.dataInfo.slotId)){var _this$renderingHelper3;(_this$renderingHelper3=this.renderingHelper)===null||_this$renderingHelper3===void 0?void 0:_this$renderingHelper3.onDrop(this.dragElement.dataInfo.id,this.dropElement.dataInfo.id,0,this.dropElement.dataInfo.slotId);}if(this.dropElement.element&&this.dropElement.element.firstElementChild){updateAddModuleInnerContainerClass(this.dropElement.element.firstElementChild);}}else{const placeholderInfo=dragAndDropPlaceholder.getPlaceholder();if(placeholderInfo){const{moduleId,parentId,index,slotId}=placeholderInfo;if(index>=0&&this._isModuleDroppable(moduleId,parentId,slotId)){var _this$renderingHelper4;(_this$renderingHelper4=this.renderingHelper)===null||_this$renderingHelper4===void 0?void 0:_this$renderingHelper4.onDrop(moduleId,parentId,index,slotId);}}}}};/**\r\n         * Remove draggable attributes and events.\r\n         * @param moduleId The module to have attributes removed.\r\n         */this._removeDraggableEvents=moduleId=>{if(moduleId){const draggableModule=getModuleById(moduleId);if(draggableModule){draggableModule.removeEventListener('dragstart',this._onDragStart);draggableModule.removeEventListener('drag',this._onDrag);draggableModule.removeEventListener('dragend',this._onDragEnd);draggableModule.removeAttribute('draggable');}}};/**\r\n         * Handles the drag event.\r\n         * @param e The drag event.\r\n         */this._onDrag=e=>{if(!this.isDragging||!this.isCursorOnDroppableArea){dragAndDropImage.hide();}};/**\r\n         * Handles the drag start event.\r\n         * @param e The drag event.\r\n         */ // tslint:disable-next-line:no-any\nthis._onDragStart=e=>{var _dragEvent$dataTransf;const dragEvent=e;this.isDragging=true;this.isCursorOnDroppableArea=true;this.dragElement=getElementDataInfoByTarget(e.target);dragAndDropImage.setDropAllowedImage(this.dragElement,dragEvent.pageX,dragEvent.pageY);// Set drag image to a empty div.\n// This prevents the ghost image from being displayed.\n(_dragEvent$dataTransf=dragEvent.dataTransfer)===null||_dragEvent$dataTransf===void 0?void 0:_dragEvent$dataTransf.setDragImage(dragAndDropImage.setTransparentImage(),0,0);};/**\r\n         * Handles the drag end event.\r\n         * @param e The drag event.\r\n         */this._onDragEnd=e=>{this.isDragging=false;this.isCursorOnDroppableArea=false;// remove draggable events\nthis._removeDraggableEvents(this.dragElement.dataInfo.id);this._removeDroppableEvents();this._clearAllCache();};/**\r\n         * Clear all cache information.\r\n         */this._clearAllCache=()=>{this.dragElement=cleanDataInfo();this.dropElement=cleanDataInfo();this.isDragging=false;this.isCursorOnDroppableArea=false;this._clearCache();dragAndDropPlaceholder.clearAll();dragAndDropImage.clear();};/**\r\n         * Set droppable events for the root module.\r\n         */this._setRootModuleAsDroppable=()=>{const droppableModule=getRootModule();if(droppableModule){droppableModule.addEventListener('dragenter',this._onDragEnter);droppableModule.addEventListener('dragleave',this._onDragLeave);droppableModule.addEventListener('dragover',this._onDragOver);droppableModule.addEventListener('drop',this._onDrop);}};/**\r\n         * Remove droppable events.\r\n         */this._removeDroppableEvents=()=>{const droppableModule=getRootModule();if(droppableModule){droppableModule.removeEventListener('dragenter',this._onDragEnter);droppableModule.removeEventListener('dragleave',this._onDragLeave);droppableModule.removeEventListener('dragover',this._onDragOver);droppableModule.removeEventListener('drop',this._onDrop);}};this.cache={};this.dragElement=cleanDataInfo();this.dropElement=cleanDataInfo();this.isCursorOnDroppableArea=false;this.isDragging=false;}}const dragAndDropEvents=new DragAndDropEvents();export default dragAndDropEvents;","map":{"version":3,"sources":["../../../../src/utilities/drag-and-drop/drag-and-drop-events.ts"],"names":[],"mappings":"0FAQA,MAAO,CAAA,gBAAP,KAA6B,uBAA7B,CACA,MAAO,CAAA,sBAAP,KAAmC,4BAAnC,CACA,OACI,aADJ,CAGI,oBAHJ,CAII,sBAJJ,CAKI,0BALJ,CAMI,aANJ,CAOI,kBAPJ,CAQI,aARJ,CASI,kCATJ,KAUO,uBAVP,CAYA;;AAEG,GACH,MAAM,MAAO,CAAA,iBAAiB,CAQ1B,WAAA,EAAA,CAQA;;;AAGG,WACI,KAAA,oBAAA,CAAwB,cAAD,EAAiC,CAC3D,KAAK,eAAL,CAAuB,kBAAkB,EAAzC,CACA,GAAI,KAAK,eAAT,CAA0B,CACtB,sBAAsB,CAAC,kBAAvB,CAA0C,KAAK,eAA/C,EACH,CACD,KAAK,yBAAL,GAEA,KAAM,CAAA,MAAM,CAAG,aAAa,CAAC,cAAD,CAA5B,CACA,GAAI,MAAJ,CAAY,CACR,MAAM,CAAC,gBAAP,CAAwB,WAAxB,CAAqC,KAAK,YAA1C,EACA,MAAM,CAAC,gBAAP,CAAwB,MAAxB,CAAgC,KAAK,OAArC,EACA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,CAAmC,KAAK,UAAxC,EACA,MAAM,CAAC,YAAP,CAAoB,WAApB,CAAiC,MAAjC,EACH,CACJ,CAdM,CAgBP;;AAEG,WACK,KAAA,WAAA,CAAc,IAAW,CAC7B,KAAK,KAAL,CAAa,EAAb,CACH,CAFO,CAIR;;;;;;AAMG,WACK,KAAA,wBAAA,CAA2B,CAAC,QAAD,CAAmB,QAAnB,CAAqC,MAArC,GAAgE,CAC/F,MAAO,OAAK,KAAK,KAAV,CAAiB,KAAK,YAAL,CAAkB,QAAlB,CAA4B,QAA5B,CAAsC,MAAtC,CAAjB,CAAP,CACH,CAFO,CAIR;;;;;;AAMG,WACK,KAAA,kBAAA,CAAqB,CAAC,QAAD,CAAmB,QAAnB,CAAqC,MAArC,GAA0E,CACnG,GAAI,CAAC,QAAD,EAAa,CAAC,QAAd,EAA0B,CAAC,MAA/B,CAAuC,CACnC,MAAO,MAAP,CACH,CACD,KAAK,8BAAL,CAAoC,QAApC,CAA8C,QAA9C,CAAwD,MAAxD,EACA,MAAO,OAAK,KAAK,KAAV,CAAiB,KAAK,YAAL,CAAkB,QAAlB,CAA4B,QAA5B,CAAsC,MAAtC,CAAjB,CAAgE,KAAhE,CAAP,CACH,CANO,CAQR;;;;;AAKG,WACK,KAAA,qBAAA,CAAwB,CAAC,QAAD,CAAmB,QAAnB,CAAqC,MAArC,CAAqD,SAArD,GAAiF,CAC7G,MAAK,KAAK,KAAV,CAAiB,KAAK,YAAL,CAAkB,QAAlB,CAA4B,QAA5B,CAAsC,MAAtC,CAAjB,CAAgE,SAAhE,EACH,CAFO,CAIR;;;;;;AAMG,WACK,KAAA,YAAA,CAAe,CAAC,QAAD,CAAmB,QAAnB,CAAqC,MAArC,GAA+D,CAClF,gBAAU,QAAV,aAAsB,QAAtB,aAAkC,MAAlC,EACH,CAFO,CAIR;;;;;AAKG,WACK,KAAA,8BAAA,CAAiC,CAAC,QAAD,CAAmB,QAAnB,CAAqC,MAArC,GAA6D,CAClG,GAAI,CAAC,KAAK,wBAAL,CAA8B,QAA9B,CAAwC,QAAxC,CAAkD,MAAlD,CAAL,CAAgE,CAC5D,KAAM,CAAA,eAAe,CAAG,sBAAsB,CAAC,QAAD,CAA9C,CACA,GAAI,eAAe,CAAC,QAAhB,CAAyB,UAAzB,EAAuC,eAAe,CAAC,QAAhB,CAAyB,gBAApE,CAAsF,CAClF,KAAK,qBAAL,CAA2B,QAA3B,CAAqC,QAArC,CAA+C,MAA/C,CAAuD,KAAvD,EACH,CAFD,IAEO,2BACH,KAAM,CAAA,WAAW,CAAG,6BAAK,eAAL,sEAAsB,WAAtB,CAAkC,QAAlC,CAA4C,QAA5C,CAAsD,MAAtD,IAAiE,KAArF,CACA,KAAK,qBAAL,CAA2B,QAA3B,CAAqC,QAArC,CAA+C,MAA/C,CAAuD,WAAvD,EACH,CACJ,CACJ,CAVO,CAYR;;;AAGG,WACK,KAAA,WAAA,CAAe,CAAD,EAAmB,CACrC,GAAI,CAAC,KAAK,UAAV,CAAsB,CAClB,OACH,CAED,CAAC,CAAC,cAAF,GACA,KAAK,uBAAL,CAA+B,IAA/B,CACA,KAAM,CAAA,SAAS,CAAc,CAA7B,CACA,KAAM,CAAA,eAAe,CAAG,0BAA0B,CAAc,CAAC,CAAC,MAAhB,CAAlD,CACA,GAAI,eAAe,CAAC,QAAhB,CAAyB,QAAzB,GAAsC,oBAA1C,CAAgE,CAC5D,gBAAgB,CAAC,cAAjB,CAAgC,SAAS,CAAC,KAA1C,CAAiD,SAAS,CAAC,KAA3D,EACA,OACH,CAED,KAAK,WAAL,CAAmB,eAAnB,CACA,GAAI,KAAK,kBAAL,CAAwB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAAlD,CAAsD,KAAK,WAAL,CAAiB,QAAjB,CAA0B,QAAhF,CAA0F,KAAK,WAAL,CAAiB,QAAjB,CAA0B,MAApH,CAAJ,CAAiI,CAC7H,sBAAsB,CAAC,wBAAvB,CAAgD,KAAK,WAArD,CAAkE,KAAK,WAAvE,CAAoF,SAAS,CAAC,OAA9F,EACA,GAAI,gBAAgB,CAAC,oBAAjB,EAAJ,CAA6C,CACzC,gBAAgB,CAAC,mBAAjB,CAAqC,KAAK,WAA1C,CAAuD,SAAS,CAAC,KAAjE,CAAwE,SAAS,CAAC,KAAlF,EACH,CACJ,CALD,IAKO,IAAI,gBAAgB,CAAC,iBAAjB,EAAJ,CAA0C,CAC7C,sBAAsB,CAAC,QAAvB,GACA,gBAAgB,CAAC,sBAAjB,CAAwC,SAAS,CAAC,KAAlD,CAAyD,SAAS,CAAC,KAAnE,EACH,CACD,gBAAgB,CAAC,cAAjB,CAAgC,SAAS,CAAC,KAA1C,CAAiD,SAAS,CAAC,KAA3D,EACA,KAAK,uBAAL,CAA+B,KAA/B,CACH,CA1BO,CA4BR;;;AAGG,WACK,KAAA,YAAA,CAAgB,CAAD,EAAmB,CACtC,GAAI,KAAK,UAAT,CAAqB,CACjB,CAAC,CAAC,cAAF,GACA,KAAK,uBAAL,CAA+B,IAA/B,CACA,KAAM,CAAA,eAAe,CAAG,0BAA0B,CAAc,CAAC,CAAC,MAAhB,CAAlD,CACA,GACI,eAAe,CAAC,QAAhB,CAAyB,QAAzB,GAAsC,oBAAtC,EACA,eAAe,CAAC,OADhB,EAEA,eAAe,CAAC,OAAhB,CAAwB,iBAH5B,CAIE,CACE,KAAM,CAAA,SAAS,CAAc,CAA7B,CACA;AACA,sBAAsB,CAAC,QAAvB,GAEA,GAAI,KAAK,kBAAL,CAAwB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAAlD,CAAsD,eAAe,CAAC,QAAhB,CAAyB,EAA/E,CAAmF,eAAe,CAAC,QAAhB,CAAyB,MAA5G,CAAJ,CAAyH,4BACrH,KAAK,WAAL,CAAmB,eAAnB,CACA;AACA,kCAAkC,CAC9B,eAAe,CAAC,OAAhB,CAAwB,iBADM,CAE9B,KAAK,WAAL,CAAiB,QAAjB,CAA0B,UAA1B,CAAuC,gBAAvC,CAA0D,cAF5B,CAAlC,CAIA;AACA,6BAAK,eAAL,wEAAsB,MAAtB,CAA6B,eAAe,CAAC,QAAhB,CAAyB,EAAtD,CAA0D,CAA1D,CAA6D,eAAe,CAAC,QAAhB,CAAyB,MAAtF,EAEA,gBAAgB,CAAC,mBAAjB,CAAqC,KAAK,WAA1C,CAAuD,SAAS,CAAC,KAAjE,CAAwE,SAAS,CAAC,KAAlF,EACH,CAXD,IAWO,CACH;AACA,kCAAkC,CAAC,eAAe,CAAC,OAAhB,CAAwB,iBAAzB,CAA4C,gBAA5C,CAAlC,CACA,GAAI,gBAAgB,CAAC,iBAAjB,EAAJ,CAA0C,CACtC,gBAAgB,CAAC,sBAAjB,CAAwC,SAAS,CAAC,KAAlD,CAAyD,SAAS,CAAC,KAAnE,EACH,CACJ,CACJ,CACJ,CACJ,CAlCO,CAoCR;;;AAGG,WACK,KAAA,YAAA,CAAgB,CAAD,EAAmB,CACtC,GAAI,KAAK,UAAT,CAAqB,CACjB,CAAC,CAAC,cAAF,GACA,KAAM,CAAA,eAAe,CAAG,0BAA0B,CAAc,CAAC,CAAC,MAAhB,CAAlD,CACA,GACI,eAAe,CAAC,QAAhB,CAAyB,QAAzB,GAAsC,oBAAtC,EACA,eAAe,CAAC,OADhB,EAEA,eAAe,CAAC,OAAhB,CAAwB,iBAH5B,CAIE,CACE,kCAAkC,CAAC,eAAe,CAAC,OAAhB,CAAwB,iBAAzB,CAAlC,CACH,CACD,KAAK,uBAAL,CAA+B,KAA/B,CACH,CACJ,CAbO,CAeR;;;AAGG,WACK,KAAA,OAAA,CAAW,CAAD,EAAmB,CACjC,GAAI,KAAK,UAAT,CAAqB,CACjB,CAAC,CAAC,cAAF,GACA,GAAI,KAAK,WAAL,CAAiB,QAAjB,CAA0B,QAA1B,GAAuC,oBAA3C,CAAiE,CAC7D,GAAI,KAAK,kBAAL,CAAwB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAAlD,CAAsD,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAAhF,CAAoF,KAAK,WAAL,CAAiB,QAAjB,CAA0B,MAA9G,CAAJ,CAA2H,4BACvH,6BAAK,eAAL,wEAAsB,MAAtB,CACI,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAD9B,CAEI,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAF9B,CAGI,CAHJ,CAII,KAAK,WAAL,CAAiB,QAAjB,CAA0B,MAJ9B,EAMH,CACD,GAAI,KAAK,WAAL,CAAiB,OAAjB,EAA4B,KAAK,WAAL,CAAiB,OAAjB,CAAyB,iBAAzD,CAA4E,CACxE,kCAAkC,CAAC,KAAK,WAAL,CAAiB,OAAjB,CAAyB,iBAA1B,CAAlC,CACH,CACJ,CAZD,IAYO,CACH,KAAM,CAAA,eAAe,CAAG,sBAAsB,CAAC,cAAvB,EAAxB,CACA,GAAI,eAAJ,CAAqB,CACjB,KAAM,CAAE,QAAF,CAAY,QAAZ,CAAsB,KAAtB,CAA6B,MAA7B,EAAwC,eAA9C,CACA,GAAI,KAAK,EAAI,CAAT,EAAc,KAAK,kBAAL,CAAwB,QAAxB,CAAkC,QAAlC,CAA4C,MAA5C,CAAlB,CAAuE,4BACnE,6BAAK,eAAL,wEAAsB,MAAtB,CAA6B,QAA7B,CAAuC,QAAvC,CAAiD,KAAjD,CAAwD,MAAxD,EACH,CACJ,CACJ,CACJ,CACJ,CAzBO,CA2BR;;;AAGG,WACK,KAAA,sBAAA,CAA0B,QAAD,EAA2B,CACxD,GAAI,QAAJ,CAAc,CACV,KAAM,CAAA,eAAe,CAAG,aAAa,CAAC,QAAD,CAArC,CACA,GAAI,eAAJ,CAAqB,CACjB,eAAe,CAAC,mBAAhB,CAAoC,WAApC,CAAiD,KAAK,YAAtD,EACA,eAAe,CAAC,mBAAhB,CAAoC,MAApC,CAA4C,KAAK,OAAjD,EACA,eAAe,CAAC,mBAAhB,CAAoC,SAApC,CAA+C,KAAK,UAApD,EACA,eAAe,CAAC,eAAhB,CAAgC,WAAhC,EACH,CACJ,CACJ,CAVO,CAYR;;;AAGG,WACK,KAAA,OAAA,CAAW,CAAD,EAAmB,CACjC,GAAI,CAAC,KAAK,UAAN,EAAoB,CAAC,KAAK,uBAA9B,CAAuD,CACnD,gBAAgB,CAAC,IAAjB,GACH,CACJ,CAJO,CAMR;;;AAGG,WA3PH,CA4PA;AACQ,KAAA,YAAA,CAAgB,CAAD,EAAmB,2BACtC,KAAM,CAAA,SAAS,CAAc,CAA7B,CACA,KAAK,UAAL,CAAkB,IAAlB,CACA,KAAK,uBAAL,CAA+B,IAA/B,CACA,KAAK,WAAL,CAAmB,0BAA0B,CAAc,CAAC,CAAC,MAAhB,CAA7C,CACA,gBAAgB,CAAC,mBAAjB,CAAqC,KAAK,WAA1C,CAAuD,SAAS,CAAC,KAAjE,CAAwE,SAAS,CAAC,KAAlF,EACA;AACA;AACA,uBAAA,SAAS,CAAC,YAAV,sEAAwB,YAAxB,CAAqC,gBAAgB,CAAC,mBAAjB,EAArC,CAA6E,CAA7E,CAAgF,CAAhF,EACH,CATO,CAWR;;;AAGG,WACK,KAAA,UAAA,CAAc,CAAD,EAAmB,CACpC,KAAK,UAAL,CAAkB,KAAlB,CACA,KAAK,uBAAL,CAA+B,KAA/B,CACA;AACA,KAAK,sBAAL,CAA4B,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAAtD,EACA,KAAK,sBAAL,GACA,KAAK,cAAL,GACH,CAPO,CASR;;AAEG,WACK,KAAA,cAAA,CAAiB,IAAW,CAChC,KAAK,WAAL,CAAmB,aAAa,EAAhC,CACA,KAAK,WAAL,CAAmB,aAAa,EAAhC,CACA,KAAK,UAAL,CAAkB,KAAlB,CACA,KAAK,uBAAL,CAA+B,KAA/B,CACA,KAAK,WAAL,GACA,sBAAsB,CAAC,QAAvB,GACA,gBAAgB,CAAC,KAAjB,GACH,CARO,CAUR;;AAEG,WACK,KAAA,yBAAA,CAA4B,IAAW,CAC3C,KAAM,CAAA,eAAe,CAAG,aAAa,EAArC,CACA,GAAI,eAAJ,CAAqB,CACjB,eAAe,CAAC,gBAAhB,CAAiC,WAAjC,CAA8C,KAAK,YAAnD,EACA,eAAe,CAAC,gBAAhB,CAAiC,WAAjC,CAA8C,KAAK,YAAnD,EACA,eAAe,CAAC,gBAAhB,CAAiC,UAAjC,CAA6C,KAAK,WAAlD,EACA,eAAe,CAAC,gBAAhB,CAAiC,MAAjC,CAAyC,KAAK,OAA9C,EACH,CACJ,CARO,CAUR;;AAEG,WACK,KAAA,sBAAA,CAAyB,IAAW,CACxC,KAAM,CAAA,eAAe,CAAG,aAAa,EAArC,CACA,GAAI,eAAJ,CAAqB,CACjB,eAAe,CAAC,mBAAhB,CAAoC,WAApC,CAAiD,KAAK,YAAtD,EACA,eAAe,CAAC,mBAAhB,CAAoC,WAApC,CAAiD,KAAK,YAAtD,EACA,eAAe,CAAC,mBAAhB,CAAoC,UAApC,CAAgD,KAAK,WAArD,EACA,eAAe,CAAC,mBAAhB,CAAoC,MAApC,CAA4C,KAAK,OAAjD,EACH,CACJ,CARO,CAjTJ,KAAK,KAAL,CAAa,EAAb,CACA,KAAK,WAAL,CAAmB,aAAa,EAAhC,CACA,KAAK,WAAL,CAAmB,aAAa,EAAhC,CACA,KAAK,uBAAL,CAA+B,KAA/B,CACA,KAAK,UAAL,CAAkB,KAAlB,CACH,CAdyB,CAoU9B,KAAM,CAAA,iBAAiB,CAAG,GAAI,CAAA,iBAAJ,EAA1B,CACA,cAAe,CAAA,iBAAf","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { get as _get, has as _has, set as _set } from 'lodash';\nimport { IAny, IDictionary } from '../../interfaces';\nimport { IRenderingHelper } from '../../interfaces/IRenderingHelper';\nimport dragAndDropImage from './drag-and-drop-image';\nimport dragAndDropPlaceholder from './drag-and-drop-placehoder';\nimport {\n    cleanDataInfo,\n    ElementDataInfo,\n    EMPTY_SLOT_TYPE_NAME,\n    getElementDataInfoById,\n    getElementDataInfoByTarget,\n    getModuleById,\n    getRenderingHelper,\n    getRootModule,\n    updateAddModuleInnerContainerClass\n} from './drag-and-drop-utils';\n\n/**\n * Provides the drag and drop events implementation\n */\nexport class DragAndDropEvents {\n    private cache: IDictionary<IAny>;\n    private dragElement: ElementDataInfo;\n    private dropElement: ElementDataInfo;\n    private isCursorOnDroppableArea: boolean;\n    private isDragging: boolean;\n    private renderingHelper: IRenderingHelper | undefined;\n\n    constructor() {\n        this.cache = {};\n        this.dragElement = cleanDataInfo();\n        this.dropElement = cleanDataInfo();\n        this.isCursorOnDroppableArea = false;\n        this.isDragging = false;\n    }\n\n    /**\n     * Set draggable events for a specific module.\n     * @param sourceModuleId The module to be set as draggable.\n     */\n    public setModuleAsDraggable = (sourceModuleId: string): void => {\n        this.renderingHelper = getRenderingHelper();\n        if (this.renderingHelper) {\n            dragAndDropPlaceholder.setRenderingHelper(this.renderingHelper);\n        }\n        this._setRootModuleAsDroppable();\n\n        const module = getModuleById(sourceModuleId);\n        if (module) {\n            module.addEventListener('dragstart', this._onDragStart);\n            module.addEventListener('drag', this._onDrag);\n            module.addEventListener('dragend', this._onDragEnd);\n            module.setAttribute('draggable', 'true');\n        }\n    };\n\n    /**\n     * Clear cache object.\n     */\n    private _clearCache = (): void => {\n        this.cache = {};\n    };\n\n    /**\n     * Check if cache has the information whether or not a module can be dropped in parent container.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     * @returns {boolean} Returns true cache has the information whether or not a module can be dropped in parent container. Otherwise returns false.\n     */\n    private _cacheHasIsDroppableInfo = (moduleId: string, parentId: string, slotId: string): boolean => {\n        return _has(this.cache, this._getCacheKey(moduleId, parentId, slotId));\n    };\n\n    /**\n     * Return whether or not a module can be dropped in parent container.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     * @returns {boolean | unknown} Returns whether or not a module can be dropped in parent container.\n     */\n    private _isModuleDroppable = (moduleId: string, parentId: string, slotId: string): boolean | unknown => {\n        if (!parentId || !moduleId || !slotId) {\n            return false;\n        }\n        this._checkIsDroppableAndAddToCache(moduleId, parentId, slotId);\n        return _get(this.cache, this._getCacheKey(moduleId, parentId, slotId), false);\n    };\n\n    /**\n     * Set whether or not a module can be dropped in parent container.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     */\n    private _setModuleIsDroppable = (moduleId: string, parentId: string, slotId: string, canBeDrop: boolean): void => {\n        _set(this.cache, this._getCacheKey(moduleId, parentId, slotId), canBeDrop);\n    };\n\n    /**\n     * Create a key to cache information whether or not a module is droppable in parent container.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     * @returns {string} Returns the cache key.\n     */\n    private _getCacheKey = (moduleId: string, parentId: string, slotId: string): string => {\n        return `${moduleId}_${parentId}_${slotId}`;\n    };\n\n    /**\n     * Check if module can be dropped in parent container and cache the information.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     */\n    private _checkIsDroppableAndAddToCache = (moduleId: string, parentId: string, slotId: string): void => {\n        if (!this._cacheHasIsDroppableInfo(moduleId, parentId, slotId)) {\n            const elementDataInfo = getElementDataInfoById(parentId);\n            if (elementDataInfo.dataInfo.isFragment || elementDataInfo.dataInfo.isFragmentModule) {\n                this._setModuleIsDroppable(moduleId, parentId, slotId, false);\n            } else {\n                const isDroppable = this.renderingHelper?.isDroppable(moduleId, parentId, slotId) || false;\n                this._setModuleIsDroppable(moduleId, parentId, slotId, isDroppable);\n            }\n        }\n    };\n\n    /**\n     * Handles the on drag over event for containers.\n     * @param e The react drag event.\n     */\n    private _onDragOver = (e: Event): void => {\n        if (!this.isDragging) {\n            return;\n        }\n\n        e.preventDefault();\n        this.isCursorOnDroppableArea = true;\n        const dragEvent = <DragEvent>e;\n        const elementDataInfo = getElementDataInfoByTarget(<HTMLElement>e.target);\n        if (elementDataInfo.dataInfo.typeName === EMPTY_SLOT_TYPE_NAME) {\n            dragAndDropImage.updatePosition(dragEvent.pageX, dragEvent.pageY);\n            return;\n        }\n\n        this.dropElement = elementDataInfo;\n        if (this._isModuleDroppable(this.dragElement.dataInfo.id, this.dropElement.dataInfo.parentId, this.dropElement.dataInfo.slotId)) {\n            dragAndDropPlaceholder.setPlaceHolderOnPosition(this.dragElement, this.dropElement, dragEvent.clientY);\n            if (dragAndDropImage.isStatusNotDroppable()) {\n                dragAndDropImage.setDropAllowedImage(this.dragElement, dragEvent.pageX, dragEvent.pageY);\n            }\n        } else if (dragAndDropImage.isStatusDroppable()) {\n            dragAndDropPlaceholder.clearAll();\n            dragAndDropImage.setDropNotAllowedImage(dragEvent.pageX, dragEvent.pageY);\n        }\n        dragAndDropImage.updatePosition(dragEvent.pageX, dragEvent.pageY);\n        this.isCursorOnDroppableArea = false;\n    };\n\n    /**\n     * Handles the on drag enter event for containers.\n     * @param e The react drag event.\n     */\n    private _onDragEnter = (e: Event): void => {\n        if (this.isDragging) {\n            e.preventDefault();\n            this.isCursorOnDroppableArea = true;\n            const elementDataInfo = getElementDataInfoByTarget(<HTMLElement>e.target);\n            if (\n                elementDataInfo.dataInfo.typeName === EMPTY_SLOT_TYPE_NAME &&\n                elementDataInfo.element &&\n                elementDataInfo.element.firstElementChild\n            ) {\n                const dragEvent = <DragEvent>e;\n                // Remove placeholder from canvas and from site builder.\n                dragAndDropPlaceholder.clearAll();\n\n                if (this._isModuleDroppable(this.dragElement.dataInfo.id, elementDataInfo.dataInfo.id, elementDataInfo.dataInfo.slotId)) {\n                    this.dropElement = elementDataInfo;\n                    // Get the container inner element and update its class.\n                    updateAddModuleInnerContainerClass(\n                        elementDataInfo.element.firstElementChild,\n                        this.dragElement.dataInfo.isFragment ? 'InsertFragment' : 'InsertModule'\n                    );\n                    // Add placeholder to position 0 on site builder.\n                    this.renderingHelper?.onDrag(elementDataInfo.dataInfo.id, 0, elementDataInfo.dataInfo.slotId);\n\n                    dragAndDropImage.setDropAllowedImage(this.dragElement, dragEvent.pageX, dragEvent.pageY);\n                } else {\n                    // Get the container inner element and update its class.\n                    updateAddModuleInnerContainerClass(elementDataInfo.element.firstElementChild, 'MoveNotAllowed');\n                    if (dragAndDropImage.isStatusDroppable()) {\n                        dragAndDropImage.setDropNotAllowedImage(dragEvent.pageX, dragEvent.pageY);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handles the on drag leave event for containers.\n     * @param e The react drag event.\n     */\n    private _onDragLeave = (e: Event): void => {\n        if (this.isDragging) {\n            e.preventDefault();\n            const elementDataInfo = getElementDataInfoByTarget(<HTMLElement>e.target);\n            if (\n                elementDataInfo.dataInfo.typeName === EMPTY_SLOT_TYPE_NAME &&\n                elementDataInfo.element &&\n                elementDataInfo.element.firstElementChild\n            ) {\n                updateAddModuleInnerContainerClass(elementDataInfo.element.firstElementChild);\n            }\n            this.isCursorOnDroppableArea = false;\n        }\n    };\n\n    /**\n     * Handles the on drop event for containers.\n     * @param e The react drag event.\n     */\n    private _onDrop = (e: Event): void => {\n        if (this.isDragging) {\n            e.preventDefault();\n            if (this.dropElement.dataInfo.typeName === EMPTY_SLOT_TYPE_NAME) {\n                if (this._isModuleDroppable(this.dragElement.dataInfo.id, this.dropElement.dataInfo.id, this.dropElement.dataInfo.slotId)) {\n                    this.renderingHelper?.onDrop(\n                        this.dragElement.dataInfo.id,\n                        this.dropElement.dataInfo.id,\n                        0,\n                        this.dropElement.dataInfo.slotId\n                    );\n                }\n                if (this.dropElement.element && this.dropElement.element.firstElementChild) {\n                    updateAddModuleInnerContainerClass(this.dropElement.element.firstElementChild);\n                }\n            } else {\n                const placeholderInfo = dragAndDropPlaceholder.getPlaceholder();\n                if (placeholderInfo) {\n                    const { moduleId, parentId, index, slotId } = placeholderInfo;\n                    if (index >= 0 && this._isModuleDroppable(moduleId, parentId, slotId)) {\n                        this.renderingHelper?.onDrop(moduleId, parentId, index, slotId);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Remove draggable attributes and events.\n     * @param moduleId The module to have attributes removed.\n     */\n    private _removeDraggableEvents = (moduleId: string): void => {\n        if (moduleId) {\n            const draggableModule = getModuleById(moduleId);\n            if (draggableModule) {\n                draggableModule.removeEventListener('dragstart', this._onDragStart);\n                draggableModule.removeEventListener('drag', this._onDrag);\n                draggableModule.removeEventListener('dragend', this._onDragEnd);\n                draggableModule.removeAttribute('draggable');\n            }\n        }\n    };\n\n    /**\n     * Handles the drag event.\n     * @param e The drag event.\n     */\n    private _onDrag = (e: Event): void => {\n        if (!this.isDragging || !this.isCursorOnDroppableArea) {\n            dragAndDropImage.hide();\n        }\n    };\n\n    /**\n     * Handles the drag start event.\n     * @param e The drag event.\n     */\n    // tslint:disable-next-line:no-any\n    private _onDragStart = (e: Event): void => {\n        const dragEvent = <DragEvent>e;\n        this.isDragging = true;\n        this.isCursorOnDroppableArea = true;\n        this.dragElement = getElementDataInfoByTarget(<HTMLElement>e.target);\n        dragAndDropImage.setDropAllowedImage(this.dragElement, dragEvent.pageX, dragEvent.pageY);\n        // Set drag image to a empty div.\n        // This prevents the ghost image from being displayed.\n        dragEvent.dataTransfer?.setDragImage(dragAndDropImage.setTransparentImage(), 0, 0);\n    };\n\n    /**\n     * Handles the drag end event.\n     * @param e The drag event.\n     */\n    private _onDragEnd = (e: Event): void => {\n        this.isDragging = false;\n        this.isCursorOnDroppableArea = false;\n        // remove draggable events\n        this._removeDraggableEvents(this.dragElement.dataInfo.id);\n        this._removeDroppableEvents();\n        this._clearAllCache();\n    };\n\n    /**\n     * Clear all cache information.\n     */\n    private _clearAllCache = (): void => {\n        this.dragElement = cleanDataInfo();\n        this.dropElement = cleanDataInfo();\n        this.isDragging = false;\n        this.isCursorOnDroppableArea = false;\n        this._clearCache();\n        dragAndDropPlaceholder.clearAll();\n        dragAndDropImage.clear();\n    };\n\n    /**\n     * Set droppable events for the root module.\n     */\n    private _setRootModuleAsDroppable = (): void => {\n        const droppableModule = getRootModule();\n        if (droppableModule) {\n            droppableModule.addEventListener('dragenter', this._onDragEnter);\n            droppableModule.addEventListener('dragleave', this._onDragLeave);\n            droppableModule.addEventListener('dragover', this._onDragOver);\n            droppableModule.addEventListener('drop', this._onDrop);\n        }\n    };\n\n    /**\n     * Remove droppable events.\n     */\n    private _removeDroppableEvents = (): void => {\n        const droppableModule = getRootModule();\n        if (droppableModule) {\n            droppableModule.removeEventListener('dragenter', this._onDragEnter);\n            droppableModule.removeEventListener('dragleave', this._onDragLeave);\n            droppableModule.removeEventListener('dragover', this._onDragOver);\n            droppableModule.removeEventListener('drop', this._onDrop);\n        }\n    };\n}\nconst dragAndDropEvents = new DragAndDropEvents();\nexport default dragAndDropEvents;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}