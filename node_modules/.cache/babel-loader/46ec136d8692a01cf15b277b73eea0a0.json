{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{AsyncResult}from'@msdyn365-commerce/retail-proxy';import{wrapDataAction}from'./wrap-data-action';/**\r\n * Higher order function which exposes the current method as an action\r\n * @param action The action method\r\n * @param isBatched If the service call can handle batched requests efficiently\r\n * @param input Optional parameter of a single instance or an array of IActionInputs that will be passed to the action method.\r\n */export const createObservableDataAction=options=>{const wrappedAction=wrapDataAction(options,(arg1,arg2)=>{return new AsyncResult((resolve,reject)=>{arg2.chainAction(options.action,arg1).then(result=>{resolve(result);}).catch(error=>{reject(error);});});});wrappedAction.prototype.setProperty('isObservable',true);return wrappedAction;};","map":{"version":3,"sources":["../../src/create-data-action.vnext.ts"],"names":[],"mappings":"AAAA;;;AAGG,GAGH,OAAS,WAAT,KAA4B,iCAA5B,CACA,OAA4B,cAA5B,KAAkD,oBAAlD,CAEA;;;;;AAKG,GACH,MAAO,MAAM,CAAA,0BAA0B,CAAU,OAAP,EAAoE,CAC1G,KAAM,CAAA,aAAa,CAAG,cAAc,CAChC,OADgC,CAEhC,CAAC,IAAD,CAAsC,IAAtC,GAAiF,CAC7E,MAAO,IAAI,CAAA,WAAJ,CAAgB,CAAC,OAAD,CAAU,MAAV,GAAoB,CACvC,IAAI,CAAC,WAAL,CAAuB,OAAO,CAAC,MAA/B,CAAuC,IAAvC,EACK,IADL,CACU,MAAM,EAAG,CACX,OAAO,CAAO,MAAP,CAAP,CACH,CAHL,EAIK,KAJL,CAIW,KAAK,EAAG,CACX,MAAM,CAAC,KAAD,CAAN,CACH,CANL,EAOH,CARM,CAAP,CASH,CAZ+B,CAApC,CAc0B,aAAa,CAAC,SAAd,CAAyB,WAAzB,CAAqC,cAArC,CAAqD,IAArD,EAC1B,MAAgC,CAAA,aAAhC,CACH,CAjBM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IActionContext, IActionInput, IActionWrapperPrototype, IObservableAction } from '@msdyn365-commerce/core-internal';\nimport { AsyncResult } from '@msdyn365-commerce/retail-proxy';\nimport { dataActionOptions, wrapDataAction } from './wrap-data-action';\n\n/**\n * Higher order function which exposes the current method as an action\n * @param action The action method\n * @param isBatched If the service call can handle batched requests efficiently\n * @param input Optional parameter of a single instance or an array of IActionInputs that will be passed to the action method.\n */\nexport const createObservableDataAction = <TOut>(options: dataActionOptions<TOut>): IObservableAction<TOut> => {\n    const wrappedAction = wrapDataAction(\n        options,\n        (arg1: IActionInput | IActionInput[], arg2: IActionContext): AsyncResult<TOut> => {\n            return new AsyncResult((resolve, reject) => {\n                arg2.chainAction<TOut>(options.action, arg1)\n                    .then(result => {\n                        resolve(<TOut>result);\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            });\n        }\n    );\n    (<IActionWrapperPrototype>wrappedAction.prototype).setProperty('isObservable', true);\n    return <IObservableAction<TOut>>wrappedAction;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}