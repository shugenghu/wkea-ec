{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.string.includes.js\";import\"core-js/modules/es.string.split.js\";import\"core-js/modules/web.dom-collections.iterator.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as React from'react';import{getGiftCardAsync,getTenderTypesAsync,resolveCardTypesAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';import classname from'classnames';import{OPERATIONS}from'../checkout';import{getForm}from'./components/get-form';import{getItem}from'./components/get-item';export class GiftCardBalanceCheck extends React.Component{constructor(){var _this;super(...arguments);_this=this;this.state={isFetchingGiftCard:false,errorMessage:'',giftCardNumber:'',giftCardPin:'',giftCardExp:''};this.inputRef=/*#__PURE__*/React.createRef();this.inputPinRef=/*#__PURE__*/React.createRef();this.inputExpRef=/*#__PURE__*/React.createRef();this._isEnabled=()=>{if(!this.props.context.request.user.isAuthenticated&&this.props.context.app.config.giftCardSupported!==\"external\"){return false;}return true;};this._getFormattedPrice=function(){let price=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let currencyCode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'USD';return _this.props.context.cultureFormatter.formatCurrency(price,currencyCode);};this._enterGiftCardNumber=giftCardNumber=>{this.setState({giftCardNumber});this._clearError();};this._enterGiftCardPin=giftCardPin=>{this.setState({giftCardPin});this._clearError();};this._enterGiftCardExp=giftCardExp=>{this.setState({giftCardExp});this._clearError();};this._clearError=()=>{this.setState({errorMessage:''});};this._setError=errorMessage=>{this.props.telemetry.error('Error',errorMessage);this.props.telemetry.debug('Error',errorMessage);this.setState({errorMessage});};this._applyGiftCard=async()=>{if(this.state.isFetchingGiftCard){return;}this.setState({isFetchingGiftCard:true});const giftCardNumber=this.state.giftCardNumber.trim();const giftCardPin=this.state.giftCardPin.trim();const giftCardExp=this.state.giftCardExp.trim();const giftCardTypes=await this._getGiftCardTypes(giftCardNumber);const giftCardType=giftCardTypes&&giftCardTypes[0];const isPinRequired=giftCardType&&giftCardType.IsPinRequired;const isExpRequired=giftCardType&&giftCardType.IsExpirationDateRequired;const tenderTypeId=giftCardType&&giftCardType.PaymentMethodId;const giftCard=await this._getGiftCard(giftCardNumber,giftCardPin,giftCardExp,isPinRequired,isExpRequired,tenderTypeId);if(giftCard){this._clearError();this.setState({giftCardNumber:'',giftCardPin:'',giftCardExp:'',isFetchingGiftCard:false,giftCard:giftCard});return Promise.resolve();}else{const input=this.inputRef&&this.inputRef.current&&this.inputRef.current.focus&&this.inputRef.current;input&&input.focus();this.setState({isFetchingGiftCard:false,giftCard:undefined});}};this._findGiftcardTenderTypes=(tenderTypes,operationId,giftcardType)=>{let matchedTenderTypes;switch(giftcardType){case\"internal\":matchedTenderTypes=tenderTypes.filter(tenderType=>tenderType.OperationId===operationId&&tenderType.ConnectorId==='');break;case\"external\":matchedTenderTypes=tenderTypes.filter(tenderType=>tenderType.OperationId===operationId&&tenderType.ConnectorId!=='');break;default:throw new Error('Invalid gift card type');}if(matchedTenderTypes){return matchedTenderTypes.map(tenderType=>tenderType.TenderTypeId||'');}return;};this._getGiftCard=async(giftCardNumber,giftCardPin,giftCardExp,isPinRequired,isExpRequired,tenderTypeId)=>{const{resources:{invalidCardTypeError,noBalanceError,invalidCardInfoError,noCardPinError,noCardExpError}}=this.props;const supportedGiftCardType=this.props.context.app.config.giftCardSupported;if(!tenderTypeId){return undefined;}const tenderTypes=await getTenderTypesAsync({callerContext:this.props.context.actionContext,queryResultSettings:{}}).catch(error=>{throw error;});if(!tenderTypes){throw new Error('Fail to get gift card tender line');}const internalGiftcardTenderTypes=this._findGiftcardTenderTypes(tenderTypes,OPERATIONS.PayGiftCertificate,\"internal\");const externalGiftcardTenderTypes=this._findGiftcardTenderTypes(tenderTypes,OPERATIONS.PayGiftCertificate,\"external\");switch(supportedGiftCardType){case undefined:case\"internal\":if(!(internalGiftcardTenderTypes!==null&&internalGiftcardTenderTypes!==void 0&&internalGiftcardTenderTypes.includes(tenderTypeId))){this._setError(invalidCardTypeError);return undefined;}break;case\"external\":if(!(externalGiftcardTenderTypes!==null&&externalGiftcardTenderTypes!==void 0&&externalGiftcardTenderTypes.includes(tenderTypeId))){this._setError(invalidCardTypeError);return undefined;}break;case\"both\":if(!(internalGiftcardTenderTypes!==null&&internalGiftcardTenderTypes!==void 0&&internalGiftcardTenderTypes.includes(tenderTypeId))&&!(externalGiftcardTenderTypes!==null&&externalGiftcardTenderTypes!==void 0&&externalGiftcardTenderTypes.includes(tenderTypeId))){this._setError(invalidCardTypeError);return undefined;}break;default:throw new Error('Unsupported gift card type');}if(!this.props.context.request.user.isAuthenticated&&internalGiftcardTenderTypes!==null&&internalGiftcardTenderTypes!==void 0&&internalGiftcardTenderTypes.includes(tenderTypeId)){this._setError(invalidCardTypeError);return undefined;}if(isPinRequired&&giftCardPin===''){this._setError(noCardPinError);return undefined;}if(isExpRequired&&giftCardExp===''){this._setError(noCardExpError);return undefined;}const month=parseInt(giftCardExp.split('/')[0],10);const year=parseInt(giftCardExp.split('/')[1],10);return getGiftCardAsync({callerContext:this.props.context.actionContext},giftCardNumber,tenderTypeId,giftCardPin,month,year).then(activeGiftCard=>{if(!activeGiftCard.Balance||activeGiftCard.Balance===0){this._setError(noBalanceError);return;}return activeGiftCard;}).catch(error=>{this._setError(invalidCardInfoError);return undefined;});};this._getGiftCardTypes=async giftCardNumber=>{const{resources:{emptyInputError,invalidCodeError}}=this.props;if(!giftCardNumber){this._setError(emptyInputError);return undefined;}const GIFTCARDTYPE=7;return resolveCardTypesAsync({callerContext:this.props.context.actionContext},giftCardNumber,GIFTCARDTYPE).then(giftCardTypes=>{if(!giftCardTypes||giftCardTypes.length===0||giftCardTypes[0]===undefined){this._setError(invalidCodeError);return;}return giftCardTypes;}).catch(error=>{this._setError(invalidCodeError);return undefined;});};}render(){const{config:{className,showAdditionalFields},resources}=this.props;const{errorMessage,giftCardNumber,giftCardPin,giftCardExp}=this.state;const supportedGiftCardType=this.props.context.app.config.giftCardSupported;if(!this._isEnabled()){this.props.context.telemetry.error('Gift card balance check is not supported, module wont render');return null;}const supportExternalGiftCard=supportedGiftCardType===\"internal\"?false:true;const moduleClassName=classname('ms-gift-card-balance-check',className);const viewProps=_objectSpread(_objectSpread(_objectSpread({},this.props),this.state),{},{className:moduleClassName,giftCardBalanceCheckProps:{moduleProps:this.props,className:moduleClassName},enterGiftCardNumber:this._enterGiftCardNumber,enterGiftCardPin:this._enterGiftCardPin,enterGiftCardExp:this._enterGiftCardExp,applyGiftCard:this._applyGiftCard,form:getForm({errorMessage,giftCardNumber,giftCardPin,giftCardExp,inputRef:this.inputRef,inputPinRef:this.inputPinRef,inputExpRef:this.inputExpRef,resources,supportExternalGiftCard,additionalFields:showAdditionalFields,onEnterGiftCardNumber:this._enterGiftCardNumber,onEnterGiftCardPin:this._enterGiftCardPin,onEnterGiftCardExp:this._enterGiftCardExp,onApplyGiftCard:this._applyGiftCard}),item:this.state.giftCard&&getItem({giftCard:this.state.giftCard,getFormattedPrice:this._getFormattedPrice,resources})});return this.props.renderView(viewProps);}}export default GiftCardBalanceCheck;","map":{"version":3,"sources":["modules/gift-card-balance-check/gift-card-balance-check.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { IModuleProps } from '@msdyn365-commerce-modules/utilities';\nimport { getGiftCardAsync, getTenderTypesAsync, resolveCardTypesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport {\n    CardType, CardTypeInfo, GiftCard, RetailOperation, TenderType\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport classname from 'classnames';\nimport { OPERATIONS } from '../checkout';\nimport { getForm, IForm } from './components/get-form';\nimport { getItem, IItem } from './components/get-item';\nimport { IGiftCardBalanceCheckProps } from './gift-card-balance-check.props.autogenerated';\n\ninterface IGiftCardBalanceCheckState {\n    isFetchingGiftCard: boolean;\n    errorMessage: string;\n    giftCardNumber: string;\n    giftCardPin: string;\n    giftCardExp: string;\n    giftCard?: GiftCard;\n}\n\nconst enum SupportedGiftCardType {\n    Internal = 'internal',\n    External = 'external',\n    Both = 'both'\n}\n\nexport interface IGiftCardBalanceCheckModuleProps extends IGiftCardBalanceCheckProps<{}> { }\n\nexport interface IGiftCardBalanceCheckViewProps extends IGiftCardBalanceCheckProps<{}>, IGiftCardBalanceCheckState {\n    className?: string;\n\n    form: IForm;\n    item?: IItem;\n\n    giftCardBalanceCheckProps: IModuleProps;\n\n    enterGiftCardNumber?(giftCardNumber: string): void;\n    enterGiftCardPin?(giftCardPin: string): void;\n    enterGiftCardExp?(giftCardExp: string): void;\n    applyGiftCard?(): void;\n}\n\n/**\n *\n * GiftCardBalanceCheck component\n * @extends {React.Component<IGiftCardBalanceCheckModuleProps, IGiftCardBalanceCheckState>}\n */\nexport class GiftCardBalanceCheck extends React.Component<IGiftCardBalanceCheckModuleProps, IGiftCardBalanceCheckState> {\n    public state: IGiftCardBalanceCheckState = {\n        isFetchingGiftCard: false,\n        errorMessage: '',\n        giftCardNumber: '',\n        giftCardPin: '',\n        giftCardExp: ''\n    };\n\n    private inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n    private inputPinRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n    private inputExpRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n    public render(): JSX.Element | null {\n        const {\n            config: { className, showAdditionalFields },\n            resources\n        } = this.props;\n        const { errorMessage, giftCardNumber, giftCardPin, giftCardExp } = this.state;\n\n        const supportedGiftCardType = this.props.context.app.config.giftCardSupported;\n\n        if (!this._isEnabled()) {\n            this.props.context.telemetry.error('Gift card balance check is not supported, module wont render');\n            return null;\n        }\n\n        const supportExternalGiftCard = supportedGiftCardType === SupportedGiftCardType.Internal ? false : true;\n\n        const moduleClassName = classname('ms-gift-card-balance-check', className);\n\n        const viewProps: IGiftCardBalanceCheckViewProps = {\n            ...this.props,\n            ...this.state,\n            className: moduleClassName,\n            giftCardBalanceCheckProps: { moduleProps: this.props, className: moduleClassName },\n\n            enterGiftCardNumber: this._enterGiftCardNumber,\n            enterGiftCardPin: this._enterGiftCardPin,\n            enterGiftCardExp: this._enterGiftCardExp,\n            applyGiftCard: this._applyGiftCard,\n\n            form: getForm({\n                errorMessage,\n                giftCardNumber,\n                giftCardPin,\n                giftCardExp,\n                inputRef: this.inputRef,\n                inputPinRef: this.inputPinRef,\n                inputExpRef: this.inputExpRef,\n                resources,\n                supportExternalGiftCard,\n                additionalFields: showAdditionalFields,\n                onEnterGiftCardNumber: this._enterGiftCardNumber,\n                onEnterGiftCardPin: this._enterGiftCardPin,\n                onEnterGiftCardExp: this._enterGiftCardExp,\n                onApplyGiftCard: this._applyGiftCard\n            }),\n            item: this.state.giftCard && getItem({\n                giftCard: this.state.giftCard,\n                getFormattedPrice: this._getFormattedPrice,\n                resources\n            })\n        };\n\n        return this.props.renderView(viewProps) as React.ReactElement;\n    }\n\n    private _isEnabled = (): boolean => {\n        if (!this.props.context.request.user.isAuthenticated && this.props.context.app.config.giftCardSupported !== SupportedGiftCardType.External) {\n            return false;\n        }\n        return true;\n    };\n\n    private _getFormattedPrice = (price: number = 0, currencyCode: string = 'USD'): string => {\n        return this.props.context.cultureFormatter.formatCurrency(price, currencyCode);\n    };\n\n    private _enterGiftCardNumber = (giftCardNumber: string): void => {\n        this.setState({\n            giftCardNumber\n        });\n        this._clearError();\n    }\n\n    private _enterGiftCardPin = (giftCardPin: string): void => {\n        this.setState({\n            giftCardPin\n        });\n        this._clearError();\n    };\n\n    private _enterGiftCardExp = (giftCardExp: string): void => {\n        this.setState({\n            giftCardExp\n        });\n        this._clearError();\n    };\n\n    private _clearError = (): void => {\n        this.setState({\n            errorMessage: ''\n        });\n    };\n\n    private _setError = (errorMessage: string): void => {\n        this.props.telemetry.error('Error', errorMessage);\n        this.props.telemetry.debug('Error', errorMessage);\n        this.setState({\n            errorMessage\n        });\n    };\n\n    private _applyGiftCard = async (): Promise<void> => {\n        if (this.state.isFetchingGiftCard) {\n            return;\n        }\n        this.setState({\n            isFetchingGiftCard: true\n        });\n\n        const giftCardNumber = this.state.giftCardNumber.trim();\n        const giftCardPin = this.state.giftCardPin.trim();\n        const giftCardExp = this.state.giftCardExp.trim();\n\n        const giftCardTypes = await this._getGiftCardTypes(giftCardNumber);\n        const giftCardType = giftCardTypes && giftCardTypes[0];\n        const isPinRequired = giftCardType && giftCardType.IsPinRequired;\n        const isExpRequired = giftCardType && giftCardType.IsExpirationDateRequired;\n        const tenderTypeId = giftCardType && giftCardType.PaymentMethodId;\n        const giftCard = await this._getGiftCard(giftCardNumber, giftCardPin, giftCardExp, isPinRequired, isExpRequired, tenderTypeId);\n\n        if (giftCard) {\n            this._clearError();\n            this.setState({\n                giftCardNumber: '',\n                giftCardPin: '',\n                giftCardExp: '',\n                isFetchingGiftCard: false,\n                giftCard: giftCard\n            });\n            return Promise.resolve();\n        } else {\n            const input =\n                this.inputRef && this.inputRef.current && this.inputRef.current.focus && (this.inputRef.current as HTMLElement);\n            input && input.focus();\n            this.setState({\n                isFetchingGiftCard: false,\n                giftCard: undefined\n            });\n        }\n    };\n\n    private _findGiftcardTenderTypes = (tenderTypes: TenderType[], operationId: RetailOperation, giftcardType: string): string[] | undefined => {\n        let matchedTenderTypes: TenderType[] | undefined;\n\n        switch (giftcardType) {\n            case SupportedGiftCardType.Internal:\n                matchedTenderTypes = tenderTypes.filter(tenderType => (tenderType.OperationId === operationId && tenderType.ConnectorId === ''));\n                break;\n            case SupportedGiftCardType.External:\n                matchedTenderTypes = tenderTypes.filter(tenderType => (tenderType.OperationId === operationId && tenderType.ConnectorId !== ''));\n                break;\n            default:\n                throw new Error('Invalid gift card type');\n        }\n\n        if (matchedTenderTypes) {\n            return matchedTenderTypes.map(tenderType => tenderType.TenderTypeId || '');\n        }\n        return;\n    };\n\n    private _getGiftCard = async (giftCardNumber: string, giftCardPin: string, giftCardExp: string, isPinRequired: boolean | undefined, isExpRequired: boolean | undefined, tenderTypeId: string | undefined): Promise<GiftCard | undefined> => {\n        const {\n            resources: { invalidCardTypeError, noBalanceError, invalidCardInfoError, noCardPinError, noCardExpError }\n        } = this.props;\n\n        const supportedGiftCardType = this.props.context.app.config.giftCardSupported;\n\n        if (!tenderTypeId) {\n            return undefined;\n        }\n\n        const tenderTypes = await getTenderTypesAsync({ callerContext: this.props.context.actionContext, queryResultSettings: {} }).catch(error => {\n            throw error;\n        });\n\n        if (!tenderTypes) {\n            throw new Error('Fail to get gift card tender line');\n        }\n\n        const internalGiftcardTenderTypes = this._findGiftcardTenderTypes(tenderTypes, OPERATIONS.PayGiftCertificate, SupportedGiftCardType.Internal);\n        const externalGiftcardTenderTypes = this._findGiftcardTenderTypes(tenderTypes, OPERATIONS.PayGiftCertificate, SupportedGiftCardType.External);\n\n        switch (supportedGiftCardType) {\n            case undefined:\n            case SupportedGiftCardType.Internal:\n                if (!internalGiftcardTenderTypes?.includes(tenderTypeId)) {\n                    this._setError(invalidCardTypeError);\n                    return undefined;\n                }\n                break;\n            case SupportedGiftCardType.External:\n                if (!externalGiftcardTenderTypes?.includes(tenderTypeId)) {\n                    this._setError(invalidCardTypeError);\n                    return undefined;\n                }\n                break;\n            case SupportedGiftCardType.Both:\n                if (!internalGiftcardTenderTypes?.includes(tenderTypeId) && !externalGiftcardTenderTypes?.includes(tenderTypeId)) {\n                    this._setError(invalidCardTypeError);\n                    return undefined;\n                }\n                break;\n            default:\n                throw new Error('Unsupported gift card type');\n        }\n\n        if (!this.props.context.request.user.isAuthenticated && internalGiftcardTenderTypes?.includes(tenderTypeId)) {\n            this._setError(invalidCardTypeError);\n            return undefined;\n        }\n\n        if (isPinRequired && giftCardPin === '') {\n            this._setError(noCardPinError);\n            return undefined;\n        }\n\n        if (isExpRequired && giftCardExp === '') {\n            this._setError(noCardExpError);\n            return undefined;\n        }\n\n        const month = parseInt(giftCardExp.split('/')[0], 10);\n        const year = parseInt(giftCardExp.split('/')[1], 10);\n\n        return getGiftCardAsync({ callerContext: this.props.context.actionContext }, giftCardNumber, tenderTypeId, giftCardPin, month, year)\n            .then(activeGiftCard => {\n                if (!activeGiftCard.Balance || activeGiftCard.Balance === 0) {\n                    this._setError(noBalanceError);\n                    return;\n                }\n                return activeGiftCard;\n            })\n            .catch(error => {\n                this._setError(invalidCardInfoError);\n                return undefined;\n            });\n    };\n\n    private _getGiftCardTypes = async (giftCardNumber: string): Promise<CardTypeInfo[] | undefined> => {\n        const {\n            resources: { emptyInputError, invalidCodeError },\n        } = this.props;\n\n        if (!giftCardNumber) {\n            this._setError(emptyInputError);\n            return undefined;\n        }\n\n        const GIFTCARDTYPE =  7 as CardType.GiftCard; // This is a workaround. ts-jest doesn't support 'const enum'\n        return resolveCardTypesAsync({ callerContext: this.props.context.actionContext }, giftCardNumber, GIFTCARDTYPE)\n            .then(giftCardTypes => {\n                if (!giftCardTypes || giftCardTypes.length === 0 || giftCardTypes[0] === undefined) {\n                    this._setError(invalidCodeError);\n                    return;\n                }\n                return giftCardTypes;\n            })\n            .catch(error => {\n                this._setError(invalidCodeError);\n                return undefined;\n            });\n    };\n}\n\nexport default GiftCardBalanceCheck;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}