{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{msdyn365Commerce}from'@msdyn365-commerce/core-internal';import{LogLevel,StaticTelemetry}from'@msdyn365-commerce/telemetry-internal';var DEPRECATED_HOOK_TYPES=['pre','post','preRead','postRead'];export var ActionRegistrar;(function(ActionRegistrar){var dataActionRegister={};ActionRegistrar.getRegistration=function(id){return id?dataActionRegister[id]:undefined;};ActionRegistrar.unwrapAction=function(action){if(action&&action.prototype&&!action.prototype.isAction){// registered action is an action wrapper. Unwrap it.\n// @ts-ignore;\nreturn action.prototype.Action;}return action;};/**\r\n     * Gets the action registered with id\r\n     * @param id - ID to look up action\r\n     */ActionRegistrar.getAction=function(id){if(!id){return;}var registeredAction=dataActionRegister[id];if(registeredAction){return registeredAction.action;}return;};/**\r\n     * registers action. Does nothing if action is already registered\r\n     * @param id - ID to register action with\r\n     * @param action - action to register\r\n     */ActionRegistrar.registerAction=function(id,dataAction){if(!id||!dataAction){// unable to register no id or action\nreturn;}if(dataActionRegister[id]){var registration=dataActionRegister[id];registration.action=dataAction;return dataActionRegister[id].action;}else{var _registration={action:dataAction};dataActionRegister[id]=_registration;return dataAction;}};var registerHook=function registerHook(hookType){return function(id,hook){// deprecate read only hook\nif(!msdyn365Commerce.isBrowser&&DEPRECATED_HOOK_TYPES.indexOf(hookType)>-1){StaticTelemetry.log(LogLevel.Warning,\"Data action hooks are deprecated and will be removed in later versions. Please use data action overrides to extend data actions. The related action of this \".concat(hookType,\" hook is - \").concat(id));}var registration=ActionRegistrar.getRegistration(id);// coerce hook into an iterable\nvar hooks=Array.isArray(hook)?hook:[hook];if(!registration){// If the registration does not exist init one with just the hooks\nvar newRegistration={};newRegistration[hookType]=new Set(hooks);dataActionRegister[id]=newRegistration;}else{// If the registration does exist merge new hooks with existing hooks\nvar hookRegistration=registration[hookType]||new Set();hooks.forEach(function(h){hookRegistration.add(h);});// @ts-ignore\nregistration[hookType]=hookRegistration;}return hook;};};// tslint:disable-next-line: no-any\nActionRegistrar.registerPostHook=registerHook('post');ActionRegistrar.registerPreHook=registerHook('pre');ActionRegistrar.registerPreReadOnlyHook=registerHook('preRead');// tslint:disable-next-line: no-any\nActionRegistrar.registerPostReadOnlyHook=registerHook('postRead');ActionRegistrar.registerPreReaderHook=registerHook('preReader');// tslint:disable-next-line: no-any\nActionRegistrar.registerPostReaderHook=registerHook('postReader');ActionRegistrar.getPreHooks=function(id){return dataActionRegister[id]&&dataActionRegister[id].pre;};ActionRegistrar.getPostHooks=function(id){return dataActionRegister[id]&&dataActionRegister[id].post;};ActionRegistrar.getPreReadHooks=function(id){return dataActionRegister[id]&&dataActionRegister[id].preRead;};ActionRegistrar.getPostReadHooks=function(id){return dataActionRegister[id]&&dataActionRegister[id].postRead;};ActionRegistrar.getPreReaderHooks=function(id){return dataActionRegister[id]&&dataActionRegister[id].preReader;};ActionRegistrar.getPostReaderHooks=function(id){return dataActionRegister[id]&&dataActionRegister[id].postReader;};/**\r\n     * Resolves the action and returns first action in action chain. Registers action if not yet registered\r\n     * @param id - Action id to look up or register under\r\n     * @param action - Action function\r\n     */ActionRegistrar.resolveAction=function(id,action){return ActionRegistrar.getAction(id)||ActionRegistrar.registerAction(id,action)||action;};ActionRegistrar.resolveRegistration=function(id,action,preHooks,postHooks,preReadHooks,postReadHooks,preReaderHooks,postReaderHooks){var resolvedAction=ActionRegistrar.resolveAction(id,action);if(!resolvedAction){return;}preHooks&&ActionRegistrar.registerPreHook(id,preHooks);postHooks&&ActionRegistrar.registerPostHook(id,postHooks);preReadHooks&&ActionRegistrar.registerPreReadOnlyHook(id,preReadHooks);postReadHooks&&ActionRegistrar.registerPostReadOnlyHook(id,postReadHooks);preReaderHooks&&ActionRegistrar.registerPreReaderHook(id,preReaderHooks);postReaderHooks&&ActionRegistrar.registerPostReaderHook(id,postReaderHooks);return ActionRegistrar.getRegistration(id);};})(ActionRegistrar||(ActionRegistrar={}));","map":{"version":3,"sources":["../../src/action-registrar.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport {\n    ActionPostHook,\n    ActionPostReaderHook,\n    ActionPreHook,\n    ActionPreReaderHook,\n    IAnyAction,\n    msdyn365Commerce\n} from '@msdyn365-commerce/core-internal';\nimport { LogLevel, StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';\n\nconst DEPRECATED_HOOK_TYPES = ['pre', 'post', 'preRead', 'postRead'];\n\nexport namespace ActionRegistrar {\n    type ActionHook<TOut = unknown> = ActionPreHook | ActionPostHook<TOut>;\n\n    export type ActionRegistration = {\n        action?: IAnyAction<unknown>;\n        pre?: Set<ActionPreHook>;\n        post?: Set<ActionPostHook<unknown>>;\n        preRead?: Set<ActionPreHook>;\n        postRead?: Set<ActionPostHook<unknown>>;\n        preReader?: Set<ActionPreReaderHook>;\n        postReader?: Set<ActionPostReaderHook<unknown>>;\n    };\n\n    interface IActionDictionary {\n        [actionKey: string]: ActionRegistration;\n    }\n\n    const dataActionRegister: IActionDictionary = {};\n\n    export const getRegistration = (id?: string): ActionRegistration | undefined => {\n        return id ? dataActionRegister[id] : undefined;\n    };\n\n    export const unwrapAction = (action: IAnyAction<unknown>): IAnyAction<unknown> => {\n        if (action && action.prototype && !action.prototype.isAction) {\n            // registered action is an action wrapper. Unwrap it.\n            // @ts-ignore;\n            return action.prototype.Action;\n        }\n        return action;\n    };\n    /**\n     * Gets the action registered with id\n     * @param id - ID to look up action\n     */\n    export const getAction = <TOut>(id?: string): IAnyAction<TOut> | undefined => {\n        if (!id) {\n            return;\n        }\n        const registeredAction = dataActionRegister[id];\n        if (registeredAction) {\n            return <IAnyAction<TOut>>registeredAction.action;\n        }\n        return;\n    };\n\n    /**\n     * registers action. Does nothing if action is already registered\n     * @param id - ID to register action with\n     * @param action - action to register\n     */\n    export const registerAction = <T>(id: string, dataAction: IAnyAction<T>): IAnyAction<T> | undefined => {\n        if (!id || !dataAction) {\n            // unable to register no id or action\n            return;\n        }\n\n        if (dataActionRegister[id]) {\n            const registration = dataActionRegister[id];\n            registration.action = dataAction;\n            return <IAnyAction<T>>dataActionRegister[id].action;\n        } else {\n            const registration = { action: dataAction };\n            dataActionRegister[id] = registration;\n            return dataAction;\n        }\n    };\n\n    const registerHook = <HookType = ActionHook | ActionHook[]>(\n        hookType: 'pre' | 'post' | 'preRead' | 'postRead' | 'preReader' | 'postReader'\n    ) => (id: string, hook: HookType) => {\n        // deprecate read only hook\n        if (!msdyn365Commerce.isBrowser && DEPRECATED_HOOK_TYPES.indexOf(hookType) > -1) {\n            StaticTelemetry.log(LogLevel.Warning,\n                                `Data action hooks are deprecated and will be removed in later versions. Please use data action overrides to extend data actions. The related action of this ${hookType} hook is - ${id}`\n            );\n        }\n\n        const registration = getRegistration(id);\n        // coerce hook into an iterable\n        const hooks = Array.isArray(hook) ? hook : [hook];\n        if (!registration) {\n            // If the registration does not exist init one with just the hooks\n            const newRegistration: { [id: string]: unknown } = {};\n            newRegistration[hookType] = new Set<ActionHook>(<ActionHook[]>hooks);\n            dataActionRegister[id] = newRegistration;\n        } else {\n            // If the registration does exist merge new hooks with existing hooks\n            const hookRegistration = registration[hookType] || new Set<ActionHook>();\n            hooks.forEach(h => {\n                hookRegistration.add(<ActionHook>h);\n            });\n            // @ts-ignore\n            registration[hookType] = hookRegistration;\n        }\n        return hook;\n    };\n\n    // tslint:disable-next-line: no-any\n    export const registerPostHook = registerHook<ActionPostHook<any> | ActionPostHook<any>[]>('post');\n    export const registerPreHook = registerHook<ActionPreHook | ActionPreHook[]>('pre');\n    export const registerPreReadOnlyHook = registerHook<ActionPreHook | ActionPreHook[]>('preRead');\n    // tslint:disable-next-line: no-any\n    export const registerPostReadOnlyHook = registerHook<ActionPostHook<any> | ActionPostHook<any>[]>('postRead');\n    export const registerPreReaderHook = registerHook<ActionPreReaderHook | ActionPreReaderHook[]>('preReader');\n    // tslint:disable-next-line: no-any\n    export const registerPostReaderHook = registerHook<ActionPostReaderHook<any> | ActionPostReaderHook<any>[]>('postReader');\n\n    export const getPreHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].pre;\n    };\n\n    export const getPostHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].post;\n    };\n\n    export const getPreReadHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].preRead;\n    };\n\n    export const getPostReadHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].postRead;\n    };\n\n    export const getPreReaderHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].preReader;\n    };\n    export const getPostReaderHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].postReader;\n    };\n\n    /**\n     * Resolves the action and returns first action in action chain. Registers action if not yet registered\n     * @param id - Action id to look up or register under\n     * @param action - Action function\n     */\n    export const resolveAction = <T>(id: string, action: IAnyAction<T>): IAnyAction<T> | undefined => {\n        return getAction(id) || <IAnyAction<T>>registerAction(id, action) || action;\n    };\n\n    export const resolveRegistration = (\n        id: string,\n        action: IAnyAction<unknown>,\n        preHooks?: ActionPreHook[],\n        postHooks?: ActionPostHook<unknown>[],\n        preReadHooks?: ActionPreHook[],\n        postReadHooks?: ActionPostHook<unknown>[],\n        preReaderHooks?: ActionPreReaderHook[],\n        postReaderHooks?: ActionPostReaderHook<unknown>[]\n    ) => {\n        const resolvedAction = resolveAction(id, action);\n        if (!resolvedAction) {\n            return;\n        }\n        preHooks && registerPreHook(id, preHooks);\n        postHooks && registerPostHook(id, postHooks);\n        preReadHooks && registerPreReadOnlyHook(id, preReadHooks);\n        postReadHooks && registerPostReadOnlyHook(id, postReadHooks);\n        preReaderHooks && registerPreReaderHook(id, preReaderHooks);\n        postReaderHooks && registerPostReaderHook(id, postReaderHooks);\n        return getRegistration(id);\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}