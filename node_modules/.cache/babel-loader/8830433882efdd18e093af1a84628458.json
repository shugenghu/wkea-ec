{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-empty\nexport var EventLevel;(function(EventLevel){EventLevel[EventLevel[\"LogAlways\"]=0]=\"LogAlways\";EventLevel[EventLevel[\"Critical\"]=1]=\"Critical\";EventLevel[EventLevel[\"Error\"]=2]=\"Error\";EventLevel[EventLevel[\"Warning\"]=3]=\"Warning\";EventLevel[EventLevel[\"Informational\"]=4]=\"Informational\";EventLevel[EventLevel[\"Verbose\"]=5]=\"Verbose\";})(EventLevel||(EventLevel={}));export var EventChannel;(function(EventChannel){EventChannel[EventChannel[\"Admin\"]=16]=\"Admin\";EventChannel[EventChannel[\"Operational\"]=17]=\"Operational\";EventChannel[EventChannel[\"Analytic\"]=18]=\"Analytic\";EventChannel[EventChannel[\"Debug\"]=19]=\"Debug\";})(EventChannel||(EventChannel={}));export var Utils=/*#__PURE__*/function(){function Utils(){_classCallCheck(this,Utils);}_createClass(Utils,null,[{key:\"getParameterNames\",value:function getParameterNames(func){return[];}},{key:\"generateGuid\",value:function generateGuid(){return'';}},{key:\"emptyGuid\",value:function emptyGuid(){return'';}}]);return Utils;}();export var EventType;(function(EventType){EventType[EventType[\"None\"]=0]=\"None\";EventType[EventType[\"Custom\"]=1]=\"Custom\";EventType[EventType[\"PageView\"]=2]=\"PageView\";})(EventType||(EventType={}));export var PageViewMetadata=function PageViewMetadata(){_classCallCheck(this,PageViewMetadata);};export var EventStaticMetadata=function EventStaticMetadata(){_classCallCheck(this,EventStaticMetadata);};export var EventCoreFields=function EventCoreFields(){_classCallCheck(this,EventCoreFields);};export var Event=function Event(type,appSessionId,userSessionId,deviceId,deviceNumber,terminalId,userId,tenantId,offlineAvailability,offlineCurrentMode,screenResolution){_classCallCheck(this,Event);};export var DebuggingConsoleSink=/*#__PURE__*/function(){function DebuggingConsoleSink(){_classCallCheck(this,DebuggingConsoleSink);}_createClass(DebuggingConsoleSink,[{key:\"setSessionInfo\",value:function setSessionInfo(appSessionId,userSessionId,deviceId,deviceNumber,terminalId,userId,tenantId,offlineAvailability,offlineCurrentMode){}},{key:\"setInstrumentationKey\",value:function setInstrumentationKey(instrumentationKey){}},{key:\"writeEvent\",value:function writeEvent(event){}}]);return DebuggingConsoleSink;}();export var LoggerBase=/*#__PURE__*/function(){function LoggerBase(){_classCallCheck(this,LoggerBase);}_createClass(LoggerBase,null,[{key:\"writeEvent\",value:function writeEvent(name,eventId,version,channel,level,keywords,task,opCode,message){// console.log(`name: ${name}, eventId: ${eventId}, version: ${version}, channel: ${this.getEnumKeyForValue(EventChannel, channel)}`);\n// console.log(\n//     `level: ${this.getEnumKeyForValue(\n//         EventLevel,\n//         level\n//     )}, keywords: ${keywords.toString()}, task: ${task}, opCode: ${opCode}, message: ${message}`\n// );\n}},{key:\"addLoggingSink\",value:function addLoggingSink(loggingSink){}},{key:\"getEnumKeyForValue\",value:function getEnumKeyForValue(enumType,value){for(var key in Object.keys(enumType)){if(enumType[key]===value){return key;}}return'';}}]);return LoggerBase;}();","map":{"version":3,"sources":["../../src/logging/ConsoleEventWriter.ts"],"names":[],"mappings":"wIAAA;;;AAGG,G,CAEH;AACA,MAAA,IAAY,CAAA,UAAZ,CAAA,CAAA,SAAY,UAAZ,CAAsB,CAClB,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CACA,UAAA,CAAA,UAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,CACA,UAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CACA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CACA,UAAA,CAAA,UAAA,CAAA,eAAA,CAAA,CAAA,CAAA,CAAA,CAAA,eAAA,CACA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CACH,CAPD,EAAY,UAAU,GAAV,UAAU,CAAA,EAAA,CAAtB,EASA,MAAA,IAAY,CAAA,YAAZ,CAAA,CAAA,SAAY,YAAZ,CAAwB,CACpB,YAAA,CAAA,YAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA,OAAA,CACA,YAAA,CAAA,YAAA,CAAA,aAAA,CAAA,CAAA,EAAA,CAAA,CAAA,aAAA,CACA,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,CAAA,EAAA,CAAA,CAAA,UAAA,CACA,YAAA,CAAA,YAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA,OAAA,CACH,CALD,EAAY,YAAY,GAAZ,YAAY,CAAA,EAAA,CAAxB,EAwBA,UAAa,CAAA,KAAb,0JACoC,IADpC,CACkD,CAC1C,MAAO,EAAP,CACH,CAHL,mDAK8B,CACtB,MAAO,EAAP,CACH,CAPL,6CAS2B,CACnB,MAAO,EAAP,CACH,CAXL,qBAcA,MAAA,IAAY,CAAA,SAAZ,CAAA,CAAA,SAAY,SAAZ,CAAqB,CACjB,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CACA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,CACA,SAAA,CAAA,SAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,CACH,CAJD,EAAY,SAAS,GAAT,SAAS,CAAA,EAAA,CAArB,EAMA,UAAa,CAAA,gBAAb,sEAIA,UAAa,CAAA,mBAAb,4EAcA,UAAa,CAAA,eAAb,oEAcA,UAAa,CAAA,KAAb,CAQI,eACI,IADJ,CAEI,YAFJ,CAGI,aAHJ,CAII,QAJJ,CAKI,YALJ,CAMI,UANJ,CAOI,MAPJ,CAQI,QARJ,CASI,mBATJ,CAUI,kBAVJ,CAWI,gBAXJ,CAW4B,6BACxB,CApBR,CAuBA,UAAa,CAAA,oBAAb,4LAEQ,YAFR,CAGQ,aAHR,CAIQ,QAJR,CAKQ,YALR,CAMQ,UANR,CAOQ,MAPR,CAQQ,QARR,CASQ,mBATR,CAUQ,kBAVR,CAUkC,CACpB,CAXd,oEAaiC,kBAbjC,CAa2D,CAAU,CAbrE,8CAesB,KAftB,CAekC,CAAU,CAf5C,oCAkBA,UAAa,CAAA,UAAb,2JAEQ,IAFR,CAGQ,OAHR,CAIQ,OAJR,CAKQ,OALR,CAMQ,KANR,CAOQ,QAPR,CAQQ,IARR,CASQ,MATR,CAUQ,OAVR,CAUuB,CAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAnBL,sDAqBiC,WArBjC,CAqB0D,CAAU,CArBpE,8DAuBqC,QAvBrC,CAuBoD,KAvBpD,CAuBiE,CACzD,IAAK,GAAM,CAAA,GAAX,GAAkB,CAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAlB,CAAyC,CACrC,GAAI,QAAQ,CAAC,GAAD,CAAR,GAAkB,KAAtB,CAA6B,CACzB,MAAO,CAAA,GAAP,CACH,CACJ,CACD,MAAO,EAAP,CACH,CA9BL","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-empty\nexport enum EventLevel {\n    LogAlways = 0,\n    Critical = 1,\n    Error = 2,\n    Warning = 3,\n    Informational = 4,\n    Verbose = 5\n}\n\nexport enum EventChannel {\n    Admin = 16,\n    Operational = 17,\n    Analytic = 18,\n    Debug = 19\n}\n\nexport interface ILoggingSink {\n    writeEvent(event: Event): void;\n    setSessionInfo(\n        appSessionId: string,\n        userSessionId: string,\n        deviceId: string,\n        deviceNumber: string,\n        terminalId: string,\n        userId: string,\n        tenantId: string,\n        offlineAvailability: string,\n        offlineCurrentMode: string,\n        screenResolution: string\n    ): void;\n    setInstrumentationKey(instrumentationKey: string): void;\n}\n\nexport class Utils {\n    public static getParameterNames(func: Function): string[] {\n        return [];\n    }\n\n    public static generateGuid(): string {\n        return '';\n    }\n\n    public static emptyGuid(): string {\n        return '';\n    }\n}\n\nexport enum EventType {\n    None = 0,\n    Custom = 1,\n    PageView = 2\n}\n\nexport class PageViewMetadata {\n    public PageName: string;\n}\n\nexport class EventStaticMetadata {\n    public Name: string;\n    public Id: number;\n    public Version: number;\n    public Level: EventLevel;\n    public LevelName: string;\n    public Channel: EventChannel;\n    public ChannelName: string;\n    public Keywords: string[];\n    public Task: string;\n    public OpCode: string;\n    public Message: string;\n}\n\nexport class EventCoreFields {\n    public ClientTimestamp: number;\n    public AppSessionId: string;\n    public UserSessionId: string;\n    public DeviceId: string;\n    public DeviceNumber: string;\n    public TerminalId: string;\n    public UserId: string;\n    public TenantId: string;\n    public OfflineAvailability: string;\n    public OfflineCurrentMode: string;\n    public ScreenResolution: string;\n}\n\nexport class Event {\n    public Type: EventType;\n    public PageViewMetadata: PageViewMetadata;\n    public StaticMetadata: EventStaticMetadata;\n    public CoreFields: EventCoreFields;\n    public Payload: {\n        [name: string]: any;\n    };\n    constructor(\n        type: EventType,\n        appSessionId: string,\n        userSessionId: string,\n        deviceId: string,\n        deviceNumber: string,\n        terminalId: string,\n        userId: string,\n        tenantId: string,\n        offlineAvailability: string,\n        offlineCurrentMode: string,\n        screenResolution: string\n    ) {}\n}\n\nexport class DebuggingConsoleSink implements ILoggingSink {\n    public setSessionInfo(\n        appSessionId: string,\n        userSessionId: string,\n        deviceId: string,\n        deviceNumber: string,\n        terminalId: string,\n        userId: string,\n        tenantId: string,\n        offlineAvailability: string,\n        offlineCurrentMode: string\n    ): void {}\n\n    public setInstrumentationKey(instrumentationKey: string): void {}\n\n    public writeEvent(event: Event): void {}\n}\n\nexport class LoggerBase {\n    public static writeEvent(\n        name: string,\n        eventId: number,\n        version: number,\n        channel: EventChannel,\n        level: EventLevel,\n        keywords: string[],\n        task: string,\n        opCode: string,\n        message: string\n    ) {\n        // console.log(`name: ${name}, eventId: ${eventId}, version: ${version}, channel: ${this.getEnumKeyForValue(EventChannel, channel)}`);\n        // console.log(\n        //     `level: ${this.getEnumKeyForValue(\n        //         EventLevel,\n        //         level\n        //     )}, keywords: ${keywords.toString()}, task: ${task}, opCode: ${opCode}, message: ${message}`\n        // );\n    }\n\n    public static addLoggingSink(loggingSink: ILoggingSink): void {}\n\n    public static getEnumKeyForValue(enumType: any, value: number): string {\n        for (const key in Object.keys(enumType)) {\n            if (enumType[key] === value) {\n                return key;\n            }\n        }\n        return '';\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}