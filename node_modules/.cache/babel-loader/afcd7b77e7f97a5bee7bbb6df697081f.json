{"ast":null,"code":"var CROP_FOCAL_REGION='cropfocalregion';export var getLargestGridSettingViewportName=function getLargestGridSettingViewportName(gridSettings){return gridSettings&&(gridSettings.xl&&'xl'||gridSettings.lg&&'lg'||gridSettings.md&&'md'||gridSettings.sm&&'sm'||gridSettings.xs&&'xs')||'xl';};var formatMediaQuery=function formatMediaQuery(max,min){return\"\".concat(min?\"(min-width:\".concat(min,\"px)\").concat(max?' and ':''):'').concat(max?\"(max-width:\".concat(max,\"px)\"):'');};var getMedia=function getMedia(gridSettings,imageSettings,viewport,largestGridSettingViewportName){var gridSetting=gridSettings[viewport];var max=gridSetting&&gridSetting.w;if(!max){return;}// find first setting smaller than max\nvar min=[imageSettings.viewports.xl&&gridSettings.xl&&gridSettings.xl.w,imageSettings.viewports.lg&&gridSettings.lg&&gridSettings.lg.w,imageSettings.viewports.md&&gridSettings.md&&gridSettings.md.w,imageSettings.viewports.sm&&gridSettings.sm&&gridSettings.sm.w,imageSettings.viewports.xs&&gridSettings.xs&&gridSettings.xs.w].filter(Boolean).find(function(setting){return setting&&setting<max;});return formatMediaQuery(viewport!==largestGridSettingViewportName?max:undefined,min?min+1:min);};export var getImageResizeUrl=function getImageResizeUrl(imageSrc,vpSetting,inputImageSettings){if(!imageSrc){return imageSrc;}try{var srcUrl=new URL(imageSrc);var queryString;if(vpSetting&&vpSetting.q){queryString=vpSetting.q;}else{queryString='m=6';if(vpSetting&&vpSetting.w&&vpSetting.h){queryString=\"\".concat(queryString,\"&w=\").concat(vpSetting.w,\"&h=\").concat(vpSetting.h);}if(inputImageSettings&&inputImageSettings.quality){queryString=\"\".concat(queryString,\"&q=\").concat(inputImageSettings.quality);}}if(inputImageSettings&&inputImageSettings.cropFocalRegion){queryString=\"\".concat(queryString,\"&\").concat(CROP_FOCAL_REGION,\"=true\");}if(srcUrl.search){srcUrl.search+=\"&\".concat(queryString);}else{srcUrl.search+=queryString;}return srcUrl.href;}catch(e){return imageSrc;}};export var getSourceData=function getSourceData(src,gridSetting,image,imageSettings,viewport,largestGridSettingViewportName){if(!image||!src||!imageSettings||!imageSettings.viewports||!imageSettings.viewports[viewport]){return;}var media=getMedia(gridSetting,imageSettings,viewport,largestGridSettingViewportName);if(!media){return;}var srcSet=getImageResizeUrl(src,imageSettings.viewports[viewport],imageSettings);if(!srcSet){return;}return{media:media,srcSet:srcSet};};","map":{"version":3,"sources":["../../../../src/components/image/source-builder.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { IGridSettings } from '../../contract/IGridSettings';\nimport { IImageData } from '../../interfaces/data-types/IImageData';\nimport { IImageDimension, IImageSettings } from '../../interfaces/data-types/IImageSettings';\nimport { Viewport } from './IImage';\n\nconst CROP_FOCAL_REGION = 'cropfocalregion';\n\nexport const getLargestGridSettingViewportName = (gridSettings: IGridSettings): Viewport => {\n    return (\n        (gridSettings &&\n            ((gridSettings.xl && 'xl') ||\n                (gridSettings.lg && 'lg') ||\n                (gridSettings.md && 'md') ||\n                (gridSettings.sm && 'sm') ||\n                (gridSettings.xs && 'xs'))) ||\n        'xl'\n    );\n};\n\nconst formatMediaQuery = (max?: number, min?: number) =>\n    `${min ? `(min-width:${min}px)${max ? ' and ' : ''}` : ''}${max ? `(max-width:${max}px)` : ''}`;\n\nconst getMedia = (\n    gridSettings: IGridSettings,\n    imageSettings: IImageSettings,\n    viewport: Viewport,\n    largestGridSettingViewportName: Viewport\n) => {\n    const gridSetting = gridSettings[viewport];\n    const max: number | undefined = gridSetting && gridSetting.w;\n    if (!max) {\n        return;\n    }\n    // find first setting smaller than max\n    const min = [\n        imageSettings.viewports.xl && gridSettings.xl && gridSettings.xl.w,\n        imageSettings.viewports.lg && gridSettings.lg && gridSettings.lg.w,\n        imageSettings.viewports.md && gridSettings.md && gridSettings.md.w,\n        imageSettings.viewports.sm && gridSettings.sm && gridSettings.sm.w,\n        imageSettings.viewports.xs && gridSettings.xs && gridSettings.xs.w\n    ]\n        .filter(Boolean)\n        .find(setting => setting && setting < max);\n    return formatMediaQuery(viewport !== largestGridSettingViewportName ? max : undefined, min ? min + 1 : min);\n};\n\nexport const getImageResizeUrl = (\n    imageSrc: string,\n    vpSetting: IImageDimension | undefined,\n    inputImageSettings?: IImageSettings | undefined\n): string => {\n    if (!imageSrc) {\n        return imageSrc;\n    }\n\n    try {\n        const srcUrl = new URL(imageSrc);\n        let queryString;\n        if (vpSetting && vpSetting.q) {\n            queryString = vpSetting.q;\n        } else {\n            queryString = 'm=6';\n            if (vpSetting && vpSetting.w && vpSetting.h) {\n                queryString = `${queryString}&w=${vpSetting.w}&h=${vpSetting.h}`;\n            }\n\n            if (inputImageSettings && inputImageSettings.quality) {\n                queryString = `${queryString}&q=${inputImageSettings.quality}`;\n            }\n        }\n\n        if (inputImageSettings && inputImageSettings.cropFocalRegion) {\n            queryString = `${queryString}&${CROP_FOCAL_REGION}=true`;\n        }\n\n        if (srcUrl.search) {\n            srcUrl.search += `&${queryString}`;\n        } else {\n            srcUrl.search += queryString;\n        }\n\n        return srcUrl.href;\n    } catch (e) {\n        return imageSrc;\n    }\n};\n\nexport const getSourceData = (\n    src: string,\n    gridSetting: IGridSettings,\n    image: IImageData,\n    imageSettings: IImageSettings,\n    viewport: Viewport,\n    largestGridSettingViewportName: Viewport\n) => {\n    if (!image || !src || !imageSettings || !imageSettings.viewports || !imageSettings.viewports[viewport]) {\n        return;\n    }\n\n    const media = getMedia(gridSetting, imageSettings, viewport, largestGridSettingViewportName);\n    if (!media) {\n        return;\n    }\n\n    const srcSet = getImageResizeUrl(src, imageSettings.viewports[viewport], imageSettings);\n    if (!srcSet) {\n        return;\n    }\n    return {\n        media,\n        srcSet\n    };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}