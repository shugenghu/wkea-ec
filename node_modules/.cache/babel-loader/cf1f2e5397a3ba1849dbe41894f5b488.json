{"ast":null,"code":"import get from'lodash/get';export const secondsToTime=seconds=>{if(seconds===undefined){return undefined;}else{let hours=Math.floor(seconds/(60*60));const ampm=hours>=12?'pm':'am';hours=hours%12;hours=hours?hours:12;const divisorForMinutes=seconds%(60*60);const minutes=Math.floor(divisorForMinutes/60)<10?\"0\".concat(Math.floor(divisorForMinutes/60)):Math.floor(divisorForMinutes/60);return\"\".concat(hours,\":\").concat(minutes,\" \").concat(ampm);}};const getShortTimeString=(day,resources)=>{switch(day){case'MON':return resources.days.monday;case'TUE':return resources.days.tuesday;case'WED':return resources.days.wednesday;case'THU':return resources.days.thursday;case'FRI':return resources.days.friday;case'SAT':return resources.days.saturday;default:return resources.days.sunday;}};const getFullTimeString=(day,resources)=>{switch(day){case'MON':return resources.days.mondayFull;case'TUE':return resources.days.tuesdayFull;case'WED':return resources.days.wednesdayFull;case'THU':return resources.days.thursdayFull;case'FRI':return resources.days.fridayFull;case'SAT':return resources.days.saturdayFull;default:return resources.days.sundayFull;}};const buildHoursDisplayInfo=(startDay,endDay,hoursInfo,resources)=>{return{startDayShort:getShortTimeString(startDay,resources),startDayFull:getFullTimeString(startDay,resources),endDayShort:startDay!==endDay?getShortTimeString(endDay,resources):undefined,endDayFull:startDay!==endDay?getFullTimeString(endDay,resources):undefined,timeRange:hoursInfo};};const shouldMergeLines=(firstLine,secondLine)=>{if(firstLine.isClosed&&secondLine.isClosed){return true;}if(!firstLine.isClosed&&!secondLine.isClosed){return firstLine.openTime===secondLine.openTime&&firstLine.closeTime===secondLine.closeTime;}return false;};const getStoreHoursData=(storeHours,dateForLookup)=>{return{isClosed:get(storeHours,\"IsClosedOn\".concat(dateForLookup),false),openTime:get(storeHours,\"\".concat(dateForLookup,\"OpenTime\"),undefined),closeTime:get(storeHours,\"\".concat(dateForLookup,\"CloseTime\"),undefined)};};const buildStoreHoursString=(hoursInfo,resources)=>{if(hoursInfo.isClosed){return resources.closedText;}else{const openFrom=secondsToTime(hoursInfo.openTime);const openTo=secondsToTime(hoursInfo.closeTime);return\"\".concat(openFrom,\"\\u2013\").concat(openTo);}};export const buildStoreHours=(storeHours,resources)=>{const storeHoursList=[];const mondayHours=getStoreHoursData(storeHours,'Monday');const tuesdayHours=getStoreHoursData(storeHours,'Tuesday');const wednesdayHours=getStoreHoursData(storeHours,'Wednesday');const thursdayHours=getStoreHoursData(storeHours,'Thursday');const fridayHours=getStoreHoursData(storeHours,'Friday');const saturdayHours=getStoreHoursData(storeHours,'Saturday');const sundayHours=getStoreHoursData(storeHours,'Sunday');let periodStart='MON';let periodEnd='MON';if(!shouldMergeLines(mondayHours,tuesdayHours)){storeHoursList.push(buildHoursDisplayInfo(periodStart,periodEnd,buildStoreHoursString(mondayHours,resources),resources));periodStart='TUE';}periodEnd='TUE';if(!shouldMergeLines(tuesdayHours,wednesdayHours)){storeHoursList.push(buildHoursDisplayInfo(periodStart,periodEnd,buildStoreHoursString(tuesdayHours,resources),resources));periodStart='WED';}periodEnd='WED';if(!shouldMergeLines(wednesdayHours,thursdayHours)){storeHoursList.push(buildHoursDisplayInfo(periodStart,periodEnd,buildStoreHoursString(wednesdayHours,resources),resources));periodStart='THU';}periodEnd='THU';if(!shouldMergeLines(thursdayHours,fridayHours)){storeHoursList.push(buildHoursDisplayInfo(periodStart,periodEnd,buildStoreHoursString(thursdayHours,resources),resources));periodStart='FRI';}periodEnd='FRI';if(!shouldMergeLines(fridayHours,saturdayHours)){storeHoursList.push(buildHoursDisplayInfo(periodStart,periodEnd,buildStoreHoursString(fridayHours,resources),resources));periodStart='SAT';}periodEnd='SAT';if(!shouldMergeLines(saturdayHours,sundayHours)){storeHoursList.push(buildHoursDisplayInfo(periodStart,periodEnd,buildStoreHoursString(saturdayHours,resources),resources));periodStart='SUN';}periodEnd='SUN';storeHoursList.push(buildHoursDisplayInfo(periodStart,periodEnd,buildStoreHoursString(sundayHours,resources),resources));return storeHoursList;};","map":{"version":3,"sources":["modules/store-selector/components/store-selector-location-line-item/date-time-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RegularStoreHours } from '@msdyn365-commerce/retail-proxy';\nimport get from 'lodash/get';\nimport { IStoreSelectorLocationLineItemResources } from '.';\n\nexport interface IHoursDisplayInfo {\n    startDayShort: string;\n    startDayFull: string;\n    endDayShort?: string;\n    endDayFull?: string;\n    timeRange: string;\n}\n\ninterface IHoursInfo {\n    isClosed: boolean;\n    openTime?: number;\n    closeTime?: number;\n}\n\ntype DayType = 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT' | 'SUN';\n\nexport const secondsToTime = (seconds: number | undefined): string | undefined => {\n    if (seconds === undefined) {\n        return undefined;\n    } else {\n        let hours = Math.floor(seconds / (60 * 60));\n        const ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12;\n        const divisorForMinutes = seconds % (60 * 60);\n        const minutes =\n            Math.floor(divisorForMinutes / 60) < 10 ? `0${Math.floor(divisorForMinutes / 60)}` : Math.floor(divisorForMinutes / 60);\n        return `${hours}:${minutes} ${ampm}`;\n    }\n};\n\nconst getShortTimeString = (day: DayType, resources: IStoreSelectorLocationLineItemResources): string => {\n    switch (day) {\n        case 'MON':\n            return resources.days.monday;\n        case 'TUE':\n            return resources.days.tuesday;\n        case 'WED':\n            return resources.days.wednesday;\n        case 'THU':\n            return resources.days.thursday;\n        case 'FRI':\n            return resources.days.friday;\n        case 'SAT':\n            return resources.days.saturday;\n        default: // case 'SUN':\n            return resources.days.sunday;\n    }\n};\n\nconst getFullTimeString = (day: DayType, resources: IStoreSelectorLocationLineItemResources): string => {\n    switch (day) {\n        case 'MON':\n            return resources.days.mondayFull;\n        case 'TUE':\n            return resources.days.tuesdayFull;\n        case 'WED':\n            return resources.days.wednesdayFull;\n        case 'THU':\n            return resources.days.thursdayFull;\n        case 'FRI':\n            return resources.days.fridayFull;\n        case 'SAT':\n            return resources.days.saturdayFull;\n        default: // case 'SUN':\n            return resources.days.sundayFull;\n    }\n};\n\nconst buildHoursDisplayInfo = (startDay: DayType, endDay: DayType, hoursInfo: string, resources: IStoreSelectorLocationLineItemResources): IHoursDisplayInfo => {\n    return {\n        startDayShort: getShortTimeString(startDay, resources),\n        startDayFull: getFullTimeString(startDay, resources),\n        endDayShort: startDay !== endDay ? getShortTimeString(endDay, resources) : undefined,\n        endDayFull: startDay !== endDay ? getFullTimeString(endDay, resources) : undefined,\n        timeRange: hoursInfo\n    };\n};\n\nconst shouldMergeLines = (firstLine: IHoursInfo, secondLine: IHoursInfo): boolean => {\n    if (firstLine.isClosed && secondLine.isClosed) {\n        return true;\n    }\n\n    if (!firstLine.isClosed && !secondLine.isClosed) {\n        return firstLine.openTime === secondLine.openTime && firstLine.closeTime === secondLine.closeTime;\n    }\n\n    return false;\n};\n\nconst getStoreHoursData = (storeHours: RegularStoreHours, dateForLookup: string): IHoursInfo => {\n    return {\n        isClosed: get(storeHours, `IsClosedOn${dateForLookup}`, false),\n        openTime: get(storeHours, `${dateForLookup}OpenTime`, undefined),\n        closeTime: get(storeHours, `${dateForLookup}CloseTime`, undefined)\n    };\n};\n\nconst buildStoreHoursString = (hoursInfo: IHoursInfo, resources: IStoreSelectorLocationLineItemResources): string => {\n    if (hoursInfo.isClosed) {\n        return resources.closedText;\n    } else {\n        const openFrom: string | undefined = secondsToTime(hoursInfo.openTime);\n        const openTo: string | undefined = secondsToTime(hoursInfo.closeTime);\n\n        return `${openFrom}–${openTo}`;\n    }\n};\n\nexport const buildStoreHours = (storeHours: RegularStoreHours, resources: IStoreSelectorLocationLineItemResources): IHoursDisplayInfo[] => {\n    const storeHoursList: IHoursDisplayInfo[] = [];\n\n    const mondayHours = getStoreHoursData(storeHours, 'Monday');\n    const tuesdayHours = getStoreHoursData(storeHours, 'Tuesday');\n    const wednesdayHours = getStoreHoursData(storeHours, 'Wednesday');\n    const thursdayHours = getStoreHoursData(storeHours, 'Thursday');\n    const fridayHours = getStoreHoursData(storeHours, 'Friday');\n    const saturdayHours = getStoreHoursData(storeHours, 'Saturday');\n    const sundayHours = getStoreHoursData(storeHours, 'Sunday');\n\n    let periodStart: DayType = 'MON';\n    let periodEnd: DayType = 'MON';\n\n    if (!shouldMergeLines(mondayHours, tuesdayHours)) {\n        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(mondayHours, resources), resources));\n\n        periodStart = 'TUE';\n    }\n    periodEnd = 'TUE';\n\n    if (!shouldMergeLines(tuesdayHours, wednesdayHours)) {\n        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(tuesdayHours, resources), resources));\n\n        periodStart = 'WED';\n    }\n    periodEnd = 'WED';\n\n    if (!shouldMergeLines(wednesdayHours, thursdayHours)) {\n        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(wednesdayHours, resources), resources));\n\n        periodStart = 'THU';\n    }\n    periodEnd = 'THU';\n\n    if (!shouldMergeLines(thursdayHours, fridayHours)) {\n        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(thursdayHours, resources), resources));\n\n        periodStart = 'FRI';\n    }\n    periodEnd = 'FRI';\n\n    if (!shouldMergeLines(fridayHours, saturdayHours)) {\n        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(fridayHours, resources), resources));\n\n        periodStart = 'SAT';\n    }\n    periodEnd = 'SAT';\n\n    if (!shouldMergeLines(saturdayHours, sundayHours)) {\n        storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(saturdayHours, resources), resources));\n\n        periodStart = 'SUN';\n    }\n    periodEnd = 'SUN';\n\n    storeHoursList.push(buildHoursDisplayInfo(periodStart, periodEnd, buildStoreHoursString(sundayHours, resources), resources));\n\n    return storeHoursList;\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}