{"ast":null,"code":"import\"core-js/modules/es.regexp.constructor.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/es.string.replace.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import\"core-js/modules/web.dom-collections.iterator.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{LogLevel}from'../interfaces';/**\r\n * Page Logger\r\n * Captures server side logs and surfaces them to the client\r\n */class PageLogger{constructor(){this.logs=[];this.options={};}initialize(options){this.options=options;}/**\r\n     * @internal\r\n     * Logs a message to the console, prefixed with custom tags, and with arguments following\r\n     * @param logLevel LogLevel of the message\r\n     * @param context Telemetry context to add to log\r\n     * @param messageTemplate Structured log formatted string\r\n     * @param placeholders List of placeholders in messageTemplate along with position in string\r\n     * @param values Arguments to replace placeholders\r\n     * @param customTags Array of strings to attach to log\r\n     */sendLog(logLevel,context,messageTemplate,// tslint:disable-next-line:no-any\nplaceholders,customTags,exception){// Output tags and message template\nlet tagsString='';if(customTags!==undefined){customTags.forEach(tag=>{tagsString+=\"[\".concat(tag,\"]\");});}tagsString&&this._print(logLevel,tagsString);let message=messageTemplate;// Output arguments\nfor(const[key,value]of placeholders.entries()){let messageValue;// If Dynamics privacy object only print data value, else print object\nif(value.__isDynamicsPrivacy){messageValue=value.data;}else{messageValue=value;}if(messageValue.toString()==='[object Object]'){messageValue=JSON.stringify(messageValue,null,2);}message=message.replace(new RegExp(\"{\".concat(key,\"}\"),'g'),messageValue);}this._print(logLevel,message);// Print exception if present\nif(exception!==undefined&&exception.stack){this._print(LogLevel.Error,exception.stack);}}/**\r\n     * @internal\r\n     * Logs a message to the console based on LogLevel\r\n     */log(logLevel,message,args,context){switch(logLevel){case LogLevel.Information:// @ts-ignore\nthis.options.isInfo&&this._print(LogLevel.Information,message,args);break;case LogLevel.Debug:this.options.isDebug&&this._print(LogLevel.Debug,message,args);break;case LogLevel.Trace:case LogLevel.Warning:this._print(logLevel,message,args);break;case LogLevel.Critical:case LogLevel.Error:this._print(LogLevel.Error,message,args);break;default:}}/**\r\n     * @internal\r\n     * Logs an exception object to the console\r\n     */exception(error,context){if(error&&error.stack){this._print(LogLevel.Error,error.stack);}}/**\r\n     * @internal\r\n     * Tracks a metric\r\n     * @param name Metric name\r\n     * @param value Metric value\r\n     */trackMetric(name,value,context){this._print(LogLevel.Debug,\"\".concat(name,\": \").concat(value));}trackEvent(name,properties,measurements,context){const event={name:name,time:new Date(),properties,measurements};this.log(LogLevel.Information,name,[event],context);}/**\r\n     * Track a page view\r\n     *\r\n     * @param {string} name\r\n     * @param {string} [url]\r\n     */trackPageView(name,url){// intentionally blank\n}/**\r\n     * Track request\r\n     * @param options the request options\r\n     */trackDependency(options){// intentionally blank\n}_print(printLevel,message,args){this.logs.push(\"[\".concat(printLevel.toUpperCase(),\"] \").concat(message));args&&args.forEach(arg=>{this.logs.push(JSON.stringify(arg));});}}export{PageLogger};","map":{"version":3,"sources":["../../../src/loggers/page-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\n\n/**\n * Page Logger\n * Captures server side logs and surfaces them to the client\n */\nclass PageLogger implements ITraceLogger {\n    public logs: string[] = [];\n\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console, prefixed with custom tags, and with arguments following\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Output tags and message template\n        let tagsString = '';\n        if (customTags !== undefined) {\n            customTags.forEach(tag => {\n                tagsString += `[${tag}]`;\n            });\n        }\n\n        tagsString && this._print(logLevel, tagsString);\n        let message = messageTemplate;\n\n        // Output arguments\n        for (const [key, value] of placeholders.entries()) {\n            let messageValue;\n            // If Dynamics privacy object only print data value, else print object\n            if (value.__isDynamicsPrivacy) {\n                messageValue = value.data;\n            } else {\n                messageValue = value;\n            }\n            if (messageValue.toString() === '[object Object]') {\n                messageValue = JSON.stringify(messageValue, null, 2);\n            }\n            message = message.replace(new RegExp(`{${key}}`, 'g'), messageValue);\n        }\n\n        this._print(logLevel, message);\n\n        // Print exception if present\n        if (exception !== undefined && exception.stack) {\n            this._print(LogLevel.Error, exception.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console based on LogLevel\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        switch (logLevel) {\n            case LogLevel.Information:\n                // @ts-ignore\n                this.options.isInfo && this._print(LogLevel.Information, message, args);\n                break;\n            case LogLevel.Debug:\n                this.options.isDebug && this._print(LogLevel.Debug, message, args);\n                break;\n            case LogLevel.Trace:\n            case LogLevel.Warning:\n                this._print(logLevel, message, args);\n                break;\n            case LogLevel.Critical:\n            case LogLevel.Error:\n                this._print(LogLevel.Error, message, args);\n                break;\n            default:\n        }\n    }\n\n    /**\n     * @internal\n     * Logs an exception object to the console\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        if (error && error.stack) {\n            this._print(LogLevel.Error, error.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Tracks a metric\n     * @param name Metric name\n     * @param value Metric value\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        this._print(LogLevel.Debug, `${name}: ${value}`);\n    }\n\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        const event = {\n            name: name,\n            time: new Date(),\n            properties,\n            measurements\n        };\n        this.log(LogLevel.Information, name, [event], <ITelemetryContext>context);\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        // intentionally blank\n    }\n\n    /**\n     * Track request\n     * @param options the request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        // intentionally blank\n    }\n\n    private _print(printLevel: LogLevel, message: string, args?: unknown[]): void {\n        this.logs.push(`[${printLevel.toUpperCase()}] ${message}`);\n        args &&\n            args.forEach(arg => {\n                this.logs.push(JSON.stringify(arg));\n            });\n    }\n}\n\nexport { PageLogger };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}