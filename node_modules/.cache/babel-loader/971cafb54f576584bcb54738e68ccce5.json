{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */export var ICacheSource;(function(ICacheSource){ICacheSource[ICacheSource[\"RequestCache\"]=0]=\"RequestCache\";ICacheSource[ICacheSource[\"AppCache\"]=1]=\"AppCache\";})(ICacheSource||(ICacheSource={}));","map":{"version":3,"sources":["../../src/Interfaces/ICache.ts"],"names":[],"mappings":"AAAA;;;AAGG,GASH,MAAA,IAAY,CAAA,YAAZ,CAAA,CAAA,SAAY,YAAZ,CAAwB,CACpB,YAAA,CAAA,YAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,CAAA,cAAA,CACA,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,CACH,CAHD,EAAY,YAAY,GAAZ,YAAY,CAAA,EAAA,CAAxB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nexport type CacheType = 'none' | 'instance' | 'application' | 'request';\n\n/**\n * BypassCache type.\n */\nexport type BypassCache = 'none' | 'get' | 'put' | 'getAndPut';\n\nexport enum ICacheSource {\n    RequestCache,\n    AppCache\n}\n\nexport interface ICacheKey {\n    key: string;\n    typeName: string;\n}\n\nexport interface ICacheItem<T> {\n    item: T;\n    cacheType?: CacheType;\n    shouldRefresh?: boolean;\n    error?: boolean;\n    s?: ICacheSource;\n}\n\n/**\n * Interface exposing methods for caching\n */\nexport interface ICache {\n    /**\n     * @function        {put}           - Method to insert an item in the cache\n     * @param cacheKey  {ICacheKey}     - object to build the cache key\n     * @param cacheItem {ICacheItem}    - item that needs to be inserted in the cache\n     */\n    put<T = unknown>(cacheKey: ICacheKey, item: ICacheItem<T>): boolean;\n\n    /**\n     * @function        {get}           - Method to get the cached item\n     * @param cacheKey  {ICacheKey}     - object to build the cache key\n     * @return          {ICacheItem}    - cached value against the given cache key\n     */\n    get<T = unknown>(cacheKey: ICacheKey): ICacheItem<T> | undefined;\n\n    /**\n     * @function        {getValue}      - Method to get the cached item\n     * @param cacheKey  {ICacheKey}     - object to build the cache key\n     * @return          {T}             - cached value against the given cache key\n     */\n    getValue<T = unknown>(cacheKey: ICacheKey): T | undefined;\n\n    /**\n     * @function        {getAllItems}   - Method to get all cached items for a given type\n     * @param typeName  {typeName}      - typeName for which all items need to be fetched\n     * @return          {ICacheItem}    - dictionary of cache items of the given typeName\n     */\n    getAllItems<T = unknown>(typeName: string): { [cacheKey: string]: ICacheItem<T> } | undefined;\n\n    /**\n     * @param cacheKey  {ICacheKey}     - object to build the cache key\n     * @param toCache   {ICache}        - cache object to which the item needs to be copied\n     * @return          {ICacheItem}    - cache item that was copied\n     */\n    copyTo<T = unknown>(cacheKey: ICacheKey, toCache: ICache): ICacheItem<T> | undefined;\n\n    /**\n     * @function    {del}               - Method to delete an item from the cache\n     * @param key   {ICacheKey[]}       - Array of ICacheGetData items whose values need to be deleted from cache\n     * @return      {number}            - returns true if the cache key is deleted successfully. Does not throw errors.\n     */\n    del(cacheKey: ICacheKey): boolean;\n\n    /**\n     * @function    {flushAll}          - Method to flush all data from the cache\n     */\n    flushAll(): void;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}