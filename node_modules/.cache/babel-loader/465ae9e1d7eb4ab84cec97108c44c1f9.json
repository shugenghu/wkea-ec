{"ast":null,"code":"import\"core-js/modules/es.promise.js\";/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */import{appendQueryParams,getUrlSync}from'@msdyn365-commerce/core-internal';import{EXCEPTION_LINK_ACTION}from'@msdyn365-commerce/telemetry-internal';import{CategoryLinkInput,ProductLinkInput}from'./hydrator-action-inputs';import{getPageTypeContextByIdAction}from'./link-actions/page-type-context-by-id';/**\r\n * Takes a Link object from the Page Response and uses URL Builder to construct a destination url and transform the\r\n * existing link structure to expose two porperties type and destinationUrl\r\n *\r\n * @param linkObject The current link object being modified\r\n * @param context The current action context\r\n */export const hydrateLink=async(linkObject,context)=>{let destinationUrl;// In each switch case if the required information is not present to construct the URL\n// The object will be return unmodified\nswitch(linkObject.type){// In the case of internal and external links, no transform is needed\n// If destination url is present set the destination url and break\ncase'internalLink':case'externalLink':if(linkObject.destinationUrl){// Append the pass through query parameters\nconst queryParams=context.requestContext&&context.requestContext.query||{};destinationUrl=appendQueryParams(linkObject.destinationUrl,queryParams);break;}return;case'productLink':// To build the url for a productLink we need the product and category ids\nif(linkObject.productId&&linkObject.categoryId){// Grab the route context using the action\nlet routeContext;try{routeContext=await getPageTypeContextByIdAction(new ProductLinkInput(context.requestContext.apiSettings,linkObject.categoryId,linkObject.productId),context);// Create the URL and break\ndestinationUrl=getUrlSync('product',context,routeContext);}catch(err){context.telemetry.error(EXCEPTION_LINK_ACTION);context.telemetry.exception(err);linkObject.destinationUrl='';linkObject.error=EXCEPTION_LINK_ACTION;return;}break;}return;case'categoryLink':// To build the url for the categoryLink we need the category id\nif(linkObject.categoryId){// Grab the route context using the action\nlet routeContext;try{routeContext=await getPageTypeContextByIdAction(new CategoryLinkInput(context.requestContext.apiSettings,linkObject.categoryId),context);// Create the URL and break\ndestinationUrl=getUrlSync('category',context,routeContext);}catch(err){context.telemetry.error(EXCEPTION_LINK_ACTION);context.telemetry.exception(err);linkObject.destinationUrl='';linkObject.error=EXCEPTION_LINK_ACTION;return;}break;}return;default:// If it is not one of these types or does not contain the information required for the link\n// building do not modify the data\nreturn;}// Set the computed destinationUrl and delete the other properties\nlinkObject.destinationUrl=destinationUrl;delete linkObject.categoryId;delete linkObject.productId;};","map":{"version":3,"sources":["../../../src/hydrators/link-hydrator.ts"],"names":[],"mappings":"sCAAA;;;AAGG,GACH,OAAS,iBAAT,CAA4B,UAA5B,KAA2E,kCAA3E,CACA,OAAS,qBAAT,KAAsC,uCAAtC,CACA,OAAS,iBAAT,CAA2D,gBAA3D,KAAmF,0BAAnF,CACA,OAAS,4BAAT,KAA6C,wCAA7C,CAEA;;;;;;AAMG,GACH,MAAO,MAAM,CAAA,WAAW,CAAG,MAAO,UAAP,CAAgC,OAAhC,GAA2D,CAClF,GAAI,CAAA,cAAJ,CACA;AACA;AACA,OAAQ,UAAU,CAAC,IAAnB,EACI;AACA;AACA,IAAK,cAAL,CACA,IAAK,cAAL,CACI,GAAI,UAAU,CAAC,cAAf,CAA+B,CAC3B;AACA,KAAM,CAAA,WAAW,CAAI,OAAO,CAAC,cAAR,EAA0B,OAAO,CAAC,cAAR,CAAuB,KAAlD,EAA4D,EAAhF,CACA,cAAc,CAAG,iBAAiB,CAAC,UAAU,CAAC,cAAZ,CAA4B,WAA5B,CAAlC,CACA,MACH,CACD,OACJ,IAAK,aAAL,CACI;AACA,GAAI,UAAU,CAAC,SAAX,EAAwB,UAAU,CAAC,UAAvC,CAAmD,CAC/C;AACA,GAAI,CAAA,YAAJ,CACA,GAAI,CACA,YAAY,CAAG,KAAM,CAAA,4BAA4B,CAC7C,GAAI,CAAA,gBAAJ,CAAqB,OAAO,CAAC,cAAR,CAAuB,WAA5C,CAAyD,UAAU,CAAC,UAApE,CAAgF,UAAU,CAAC,SAA3F,CAD6C,CAE7C,OAF6C,CAAjD,CAIA;AACA,cAAc,CAAG,UAAU,CAAC,SAAD,CAAY,OAAZ,CAAqB,YAArB,CAA3B,CACH,CAAC,MAAO,GAAP,CAAY,CACV,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,qBAAxB,EACA,OAAO,CAAC,SAAR,CAAkB,SAAlB,CAA4B,GAA5B,EACA,UAAU,CAAC,cAAX,CAA4B,EAA5B,CACA,UAAU,CAAC,KAAX,CAAmB,qBAAnB,CACA,OACH,CACD,MACH,CACD,OACJ,IAAK,cAAL,CACI;AACA,GAAI,UAAU,CAAC,UAAf,CAA2B,CACvB;AACA,GAAI,CAAA,YAAJ,CACA,GAAI,CACA,YAAY,CAAG,KAAM,CAAA,4BAA4B,CAC7C,GAAI,CAAA,iBAAJ,CAAsB,OAAO,CAAC,cAAR,CAAuB,WAA7C,CAA0D,UAAU,CAAC,UAArE,CAD6C,CAE7C,OAF6C,CAAjD,CAIA;AACA,cAAc,CAAG,UAAU,CAAC,UAAD,CAAa,OAAb,CAAsB,YAAtB,CAA3B,CACH,CAAC,MAAO,GAAP,CAAY,CACV,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAwB,qBAAxB,EACA,OAAO,CAAC,SAAR,CAAkB,SAAlB,CAA4B,GAA5B,EACA,UAAU,CAAC,cAAX,CAA4B,EAA5B,CACA,UAAU,CAAC,KAAX,CAAmB,qBAAnB,CACA,OACH,CACD,MACH,CACD,OACJ,QACI;AACA;AACA,OA3DR,CA8DA;AACA,UAAU,CAAC,cAAX,CAA4B,cAA5B,CACA,MAAO,CAAA,UAAU,CAAC,UAAlB,CACA,MAAO,CAAA,UAAU,CAAC,SAAlB,CACH,CAtEM","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { appendQueryParams, getUrlSync, IActionContext, IDictionary } from '@msdyn365-commerce/core-internal';\nimport { EXCEPTION_LINK_ACTION } from '@msdyn365-commerce/telemetry-internal';\nimport { CategoryLinkInput, IPageTypeContext, IServerLink, ProductLinkInput } from './hydrator-action-inputs';\nimport { getPageTypeContextByIdAction } from './link-actions/page-type-context-by-id';\n\n/**\n * Takes a Link object from the Page Response and uses URL Builder to construct a destination url and transform the\n * existing link structure to expose two porperties type and destinationUrl\n *\n * @param linkObject The current link object being modified\n * @param context The current action context\n */\nexport const hydrateLink = async (linkObject: IServerLink, context: IActionContext) => {\n    let destinationUrl: string | undefined;\n    // In each switch case if the required information is not present to construct the URL\n    // The object will be return unmodified\n    switch (linkObject.type) {\n        // In the case of internal and external links, no transform is needed\n        // If destination url is present set the destination url and break\n        case 'internalLink':\n        case 'externalLink':\n            if (linkObject.destinationUrl) {\n                // Append the pass through query parameters\n                const queryParams = (context.requestContext && context.requestContext.query) || {};\n                destinationUrl = appendQueryParams(linkObject.destinationUrl, queryParams);\n                break;\n            }\n            return;\n        case 'productLink':\n            // To build the url for a productLink we need the product and category ids\n            if (linkObject.productId && linkObject.categoryId) {\n                // Grab the route context using the action\n                let routeContext: IPageTypeContext;\n                try {\n                    routeContext = await getPageTypeContextByIdAction(\n                        new ProductLinkInput(context.requestContext.apiSettings, linkObject.categoryId, linkObject.productId),\n                        context\n                    );\n                    // Create the URL and break\n                    destinationUrl = getUrlSync('product', context, routeContext);\n                } catch (err) {\n                    context.telemetry.error(EXCEPTION_LINK_ACTION);\n                    context.telemetry.exception(err);\n                    linkObject.destinationUrl = '';\n                    linkObject.error = EXCEPTION_LINK_ACTION;\n                    return;\n                }\n                break;\n            }\n            return;\n        case 'categoryLink':\n            // To build the url for the categoryLink we need the category id\n            if (linkObject.categoryId) {\n                // Grab the route context using the action\n                let routeContext: IPageTypeContext;\n                try {\n                    routeContext = await getPageTypeContextByIdAction(\n                        new CategoryLinkInput(context.requestContext.apiSettings, linkObject.categoryId),\n                        context\n                    );\n                    // Create the URL and break\n                    destinationUrl = getUrlSync('category', context, routeContext);\n                } catch (err) {\n                    context.telemetry.error(EXCEPTION_LINK_ACTION);\n                    context.telemetry.exception(err);\n                    linkObject.destinationUrl = '';\n                    linkObject.error = EXCEPTION_LINK_ACTION;\n                    return;\n                }\n                break;\n            }\n            return;\n        default:\n            // If it is not one of these types or does not contain the information required for the link\n            // building do not modify the data\n            return;\n    }\n\n    // Set the computed destinationUrl and delete the other properties\n    linkObject.destinationUrl = destinationUrl;\n    delete linkObject.categoryId;\n    delete linkObject.productId;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}