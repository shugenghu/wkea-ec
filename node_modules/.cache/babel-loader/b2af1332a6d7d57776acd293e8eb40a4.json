{"ast":null,"code":"/*!\r\n * Copyright (c) Microsoft Corporation.\r\n * All rights reserved. See LICENSE in the project root for license information.\r\n */ // tslint:disable:no-any function-name no-function-expression\nimport React from'react';import{CoreContext}from'../models';/**\r\n * HOC that injects all the content of the generic context into the component\r\n * @param Component The component that the context will be injected into\r\n */export function WithContext(Component){return function ComponentWithContext(props){return/*#__PURE__*/React.createElement(CoreContext.Consumer,null,function(value){return/*#__PURE__*/React.createElement(Component,Object.assign({},props,{context:value,telemetry:value.telemetry.setTelemetryModuleContext({moduleId:props.id,moduleType:props.typeName})(),// @ts-ignore -- we don't actually have this prop defined on the interface\ninternalTelemetry:value.internalTelemetry.setTelemetryModuleContext({moduleId:props.id,moduleType:props.typeName})(),app:value.app}));});};}","map":{"version":3,"sources":["../../../src/models/with-context.tsx"],"names":[],"mappings":"AAAA;;;AAGG,G,CAEH;AACA,MAAO,CAAA,KAAP,KAAkB,OAAlB,CAEA,OAAS,WAAT,KAA4B,WAA5B,CAEA;;;AAGG,GACH,MAAM,SAAU,CAAA,WAAV,CAAsB,SAAtB,CAAoC,CACtC,MAAO,SAAS,CAAA,oBAAT,CAA8B,KAA9B,CAAwC,CAC3C,mBACI,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAb,CAAqB,IAArB,CACK,SAAC,KAAD,qBACG,KAAA,CAAA,aAAA,CAAC,SAAD,CAAU,MAAA,CAAA,MAAA,CAAA,EAAA,CACF,KADE,CACG,CACT,OAAO,CAAE,KADA,CAET,SAAS,CAAE,KAAK,CAAC,SAAN,CAAgB,yBAAhB,CAA0C,CAAE,QAAQ,CAAE,KAAK,CAAC,EAAlB,CAAsB,UAAU,CAAE,KAAK,CAAC,QAAxC,CAA1C,GAFF,CAGT;AACA,iBAAiB,CAAE,KAAK,CAAC,iBAAN,CAAwB,yBAAxB,CAAkD,CACjE,QAAQ,CAAE,KAAK,CAAC,EADiD,CAEjE,UAAU,CAAE,KAAK,CAAC,QAF+C,CAAlD,GAJV,CAQT,GAAG,CAAE,KAAK,CAAC,GARF,CADH,CAAV,CADH,EADL,CADJ,CAiBH,CAlBD,CAmBH","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any function-name no-function-expression\nimport React from 'react';\nimport { ICoreContext } from '../interfaces';\nimport { CoreContext } from '../models';\n\n/**\n * HOC that injects all the content of the generic context into the component\n * @param Component The component that the context will be injected into\n */\nexport function WithContext(Component: any): (props: any) => JSX.Element {\n    return function ComponentWithContext(props: any): JSX.Element {\n        return (\n            <CoreContext.Consumer>\n                {(value: ICoreContext) => (\n                    <Component\n                        {...props}\n                        context={value}\n                        telemetry={value.telemetry.setTelemetryModuleContext({ moduleId: props.id, moduleType: props.typeName })()}\n                        // @ts-ignore -- we don't actually have this prop defined on the interface\n                        internalTelemetry={value.internalTelemetry.setTelemetryModuleContext({\n                            moduleId: props.id,\n                            moduleType: props.typeName\n                        })()}\n                        app={value.app}\n                    />\n                )}\n            </CoreContext.Consumer>\n        );\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}