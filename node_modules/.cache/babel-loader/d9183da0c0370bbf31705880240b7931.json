{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{__decorate}from\"tslib\";import*as React from'react';import{withModuleState}from'@msdyn365-commerce-modules/checkout-utilities';import classnames from'classnames';import get from'lodash/get';import{computed,reaction}from'mobx';import{observer}from'mobx-react';import{getAccountPaymentFormEditMode}from'./components/get-account-payment-form-edit-mode';import{getAccountPaymentFormSummaryMode}from'./components/get-account-payment-form-summary-mode';let CheckoutCustomerAccountPayment=class CheckoutCustomerAccountPayment extends React.Component{constructor(props){super(props);this.baseClassName='ms-checkout-customer-account';this.getAvailableCredit=creditBalances=>{if(!creditBalances){return 0;}return creditBalances.CreditLimit-creditBalances.Balance-creditBalances.PendingBalance;};this.addPayment=async()=>{const checkoutState=this.props.data.checkout.result;if(!checkoutState){this.props.context.telemetry.error('checkout state not found');return;}await checkoutState.updateCustomerAccountAmount({newAmount:this.state.paymentAmount});this.props.context.telemetry.information('customer account payment amount updated');};this.toggleCreditSection=()=>{this.setState({isCreditSectionExpanded:!this.state.isCreditSectionExpanded});};this.init=async()=>{this.props.moduleState.init({onCancel:this.handleCancelOrSubmit,onSubmit:this.handleCancelOrSubmit,onEdit:this.onEdit});if(this.props.data.checkout.result&&this.props.data.checkout.result.customerAccountAmount!==0){this.props.moduleState.onReady();}};this.onChangePaymentAmount=newAmount=>{this.setState({paymentAmount:newAmount});};this.updateMaxAmount=newAmount=>{if(this.props.data.checkout.result&&this.props.data.checkout.result.customerAccountAmount===0){this.setState({paymentAmount:Math.max(0,newAmount)});}};this.onEdit=()=>{this.props.moduleState.onUpdating();};this.handleCancelOrSubmit=()=>{const checkoutState=this.props.data.checkout.result;if(checkoutState&&checkoutState.customerAccountAmount>0){this.props.moduleState.onReady();}else{this.props.moduleState.onSkip();}};this.removePayment=async()=>{const checkoutState=this.props.data.checkout.result;if(!checkoutState){this.props.context.telemetry.error('checkout state not found');return;}this.setState({paymentAmount:0});await checkoutState.updateCustomerAccountAmount({newAmount:0});this.props.context.telemetry.information('customer account payment removed');};this.state={paymentAmount:this.maxPaymentAmount,isCreditSectionExpanded:false};}get isCustomerAccountPaymentEnabled(){const customerInfo=get(this.props,'data.customerInformation.result');const platform=get(this.props,'context.request.app.platform');return customerInfo&&customerInfo.AllowOnAccountPayment===true&&platform&&(platform.enableCustomerAccountPayment==='all'||platform.enableCustomerAccountPayment==='b2b'&&customerInfo.IsB2b===true||platform.enableCustomerAccountPayment==='b2c'&&customerInfo.IsB2b===false);}get getLoyaltyAmount(){const checkoutState=this.props.data.checkout.result;if(!checkoutState||!checkoutState.loyaltyAmount){return 0;}return checkoutState.loyaltyAmount;}get getGiftCardAmount(){const checkoutState=this.props.data.checkout.result;if(!checkoutState||!checkoutState.giftCards||checkoutState.giftCards.length===0){return 0;}let giftCardAmount=0;checkoutState.giftCards.forEach(giftCard=>{giftCardAmount+=giftCard.Balance||0;});return giftCardAmount;}get maxPaymentAmount(){var _this$props$data$cust,_this$props$data$cust2;const cart=this.props.data.checkout.result?this.props.data.checkout.result.checkoutCart.cart:undefined;if(!cart){return 0;}const amountDue=Math.max(0,(cart.TotalAmount||0)-this.getLoyaltyAmount-this.getGiftCardAmount);if((_this$props$data$cust=this.props.data.customerInformation)!==null&&_this$props$data$cust!==void 0&&(_this$props$data$cust2=_this$props$data$cust.result)!==null&&_this$props$data$cust2!==void 0&&_this$props$data$cust2.MandatoryCreditLimit){var _this$props$data$cred;return Math.min(this.getAvailableCredit((_this$props$data$cred=this.props.data.creditBalances)===null||_this$props$data$cred===void 0?void 0:_this$props$data$cred.result),amountDue);}else{return amountDue;}}get errorMessage(){if(this.state.paymentAmount>this.maxPaymentAmount||this.state.paymentAmount<0){return this.props.resources.invalidAmountMessage;}return undefined;}get currencyCode(){return get(this.props,'context.request.channel.Currency');}get availableCredit(){const creditBalances=get(this.props,'data.creditBalances.result');return creditBalances?this.getAvailableCredit(creditBalances):0;}get orderTotal(){const orderTotal=get(this.props,'data.checkout.result.checkoutCart.cart.TotalAmount');return orderTotal?orderTotal:0;}get formattedExcessCredit(){const excessCredit=this.availableCredit-this.orderTotal;return excessCredit<0?this.props.context.cultureFormatter.formatCurrency(excessCredit,this.currencyCode):undefined;}async componentDidMount(){await this.init();reaction(()=>this.props.data.checkout.result&&this.props.data.checkout.result.checkoutCart.cart&&this.props.data.checkout.result.checkoutCart.cart.TotalAmount,totalAmount=>{this.updateMaxAmount(this.maxPaymentAmount);});}render(){const customerInfo=this.props.data.customerInformation.result;if(!this.isCustomerAccountPaymentEnabled){this.props.context.telemetry.information('customer account payments will not display, because the feature is disabled or not enabled for this type of customer');return null;}const checkoutState=this.props.data.checkout.result;const cart=checkoutState?checkoutState.checkoutCart.cart:undefined;const creditBalances=this.props.data.creditBalances.result;if(!cart){return null;}const resources=this.props.resources;const locale=get(this.props,'context.request.locale')||'en-us';const customerSinceDate=new Date((customerInfo===null||customerInfo===void 0?void 0:customerInfo.CreatedDateTime)||0).toLocaleDateString(locale);const props=_objectSpread(_objectSpread({},this.props),{},{checkoutCustomerAccount:{moduleProps:this.props,className:classnames(this.baseClassName)},editView:getAccountPaymentFormEditMode({onAddPayment:this.addPayment,resources,amount:this.state.paymentAmount,onChangePaymentAmount:this.onChangePaymentAmount,maxAmount:this.maxPaymentAmount,customer:customerInfo,customerCreatedDate:customerSinceDate,availableCredit:this.props.context.cultureFormatter.formatCurrency(this.getAvailableCredit(creditBalances),this.currencyCode),showCreditLimit:(customerInfo===null||customerInfo===void 0?void 0:customerInfo.MandatoryCreditLimit)||false,errorMessage:this.errorMessage,onToggleCreditSection:this.toggleCreditSection,creditSectionIsExpanded:this.state.isCreditSectionExpanded,orderTotal:this.props.context.cultureFormatter.formatCurrency(this.orderTotal,this.currencyCode),excessCredit:this.formattedExcessCredit,onRemovePayment:this.removePayment,appliedAmount:checkoutState&&checkoutState.customerAccountAmount>0?this.props.context.cultureFormatter.formatCurrency(checkoutState.customerAccountAmount,this.currencyCode):undefined}),summaryView:getAccountPaymentFormSummaryMode({resources,amount:this.state.paymentAmount,appliedAmount:checkoutState&&checkoutState.customerAccountAmount>0?this.props.context.cultureFormatter.formatCurrency(checkoutState.customerAccountAmount,this.currencyCode):undefined})});return this.props.renderView(props);}};__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"isCustomerAccountPaymentEnabled\",null);__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"getLoyaltyAmount\",null);__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"getGiftCardAmount\",null);__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"maxPaymentAmount\",null);__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"errorMessage\",null);__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"currencyCode\",null);__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"availableCredit\",null);__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"orderTotal\",null);__decorate([computed],CheckoutCustomerAccountPayment.prototype,\"formattedExcessCredit\",null);CheckoutCustomerAccountPayment=__decorate([withModuleState,observer],CheckoutCustomerAccountPayment);export{CheckoutCustomerAccountPayment};export default CheckoutCustomerAccountPayment;","map":{"version":3,"sources":["modules/checkout-customer-account-payment/checkout-customer-account-payment.tsx"],"names":[],"mappings":"+9BAKA,MAAO,GAAK,CAAA,KAAZ,KAAuB,OAAvB,CAEA,OAA8B,eAA9B,KAAqD,+CAArD,CAGA,MAAO,CAAA,UAAP,KAAuB,YAAvB,CACA,MAAO,CAAA,GAAP,KAAgB,YAAhB,CACA,OAAS,QAAT,CAAmB,QAAnB,KAAmC,MAAnC,CACA,OAAS,QAAT,KAAyB,YAAzB,CAGA,OAAS,6BAAT,KAA2E,iDAA3E,CACA,OAAS,gCAAT,KAAiF,oDAAjF,CAsBA,GAAa,CAAA,8BAA8B,CAA3C,KAAa,CAAA,8BAAb,QAAoD,CAAA,KAAK,CAAC,SAAyF,CAkF/I,WAAA,CAAmB,KAAnB,CAAkE,CAC9D,MAAM,KAAN,EAFI,KAAA,aAAA,CAAwB,8BAAxB,CA0EA,KAAA,kBAAA,CAAsB,cAAD,EAAiD,CAC1E,GAAI,CAAC,cAAL,CAAqB,CACjB,MAAO,EAAP,CACH,CACD,MAAO,CAAA,cAAc,CAAC,WAAf,CAA6B,cAAc,CAAC,OAA5C,CAAsD,cAAc,CAAC,cAA5E,CACH,CALO,CAOA,KAAA,UAAA,CAAa,SAA0B,CAC3C,KAAM,CAAA,aAAa,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAA/C,CAEA,GAAI,CAAC,aAAL,CAAoB,CAChB,KAAK,KAAL,CAAW,OAAX,CAAmB,SAAnB,CAA6B,KAA7B,CAAmC,0BAAnC,EACA,OACH,CAED,KAAM,CAAA,aAAa,CAAC,2BAAd,CAA0C,CAAE,SAAS,CAAE,KAAK,KAAL,CAAW,aAAxB,CAA1C,CAAN,CACA,KAAK,KAAL,CAAW,OAAX,CAAmB,SAAnB,CAA6B,WAA7B,CAAyC,yCAAzC,EACH,CAVO,CAYA,KAAA,mBAAA,CAAsB,IAAW,CACrC,KAAK,QAAL,CAAc,CACV,uBAAuB,CAAE,CAAC,KAAK,KAAL,CAAW,uBAD3B,CAAd,EAGH,CAJO,CAMA,KAAA,IAAA,CAAO,SAAyB,CACpC,KAAK,KAAL,CAAW,WAAX,CAAuB,IAAvB,CAA4B,CACxB,QAAQ,CAAE,KAAK,oBADS,CAExB,QAAQ,CAAE,KAAK,oBAFS,CAGxB,MAAM,CAAE,KAAK,MAHW,CAA5B,EAMA,GAAI,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,EAAmC,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,CAAgC,qBAAhC,GAA0D,CAAjG,CAAoG,CAChG,KAAK,KAAL,CAAW,WAAX,CAAuB,OAAvB,GACH,CACJ,CAVO,CAYA,KAAA,qBAAA,CAAwB,SAAD,EAA4B,CACvD,KAAK,QAAL,CAAc,CACV,aAAa,CAAE,SADL,CAAd,EAGH,CAJO,CAMA,KAAA,eAAA,CAAkB,SAAD,EAA4B,CAGjD,GAAI,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,EAAmC,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,CAAgC,qBAAhC,GAA0D,CAAjG,CAAoG,CAChG,KAAK,QAAL,CAAc,CAEV,aAAa,CAAE,IAAI,CAAC,GAAL,CAAS,CAAT,CAAY,SAAZ,CAFL,CAAd,EAIH,CACJ,CATO,CAWA,KAAA,MAAA,CAAS,IAAW,CACxB,KAAK,KAAL,CAAW,WAAX,CAAuB,UAAvB,GACH,CAFO,CAIA,KAAA,oBAAA,CAAuB,IAAK,CAChC,KAAM,CAAA,aAAa,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAA/C,CACA,GAAI,aAAa,EAAI,aAAa,CAAC,qBAAd,CAAsC,CAA3D,CAA8D,CAC1D,KAAK,KAAL,CAAW,WAAX,CAAuB,OAAvB,GACH,CAFD,IAEO,CAEH,KAAK,KAAL,CAAW,WAAX,CAAuB,MAAvB,GACH,CACJ,CARO,CAUA,KAAA,aAAA,CAAgB,SAA0B,CAC9C,KAAM,CAAA,aAAa,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAA/C,CAEA,GAAI,CAAC,aAAL,CAAoB,CAChB,KAAK,KAAL,CAAW,OAAX,CAAmB,SAAnB,CAA6B,KAA7B,CAAmC,0BAAnC,EACA,OACH,CAED,KAAK,QAAL,CAAc,CACV,aAAa,CAAE,CADL,CAAd,EAIA,KAAM,CAAA,aAAa,CAAC,2BAAd,CAA0C,CAAE,SAAS,CAAE,CAAb,CAA1C,CAAN,CACA,KAAK,KAAL,CAAW,OAAX,CAAmB,SAAnB,CAA6B,WAA7B,CAAyC,kCAAzC,EACH,CAdO,CA3IJ,KAAK,KAAL,CAAa,CAAC,aAAa,CAAE,KAAK,gBAArB,CAAuC,uBAAuB,CAAE,KAAhE,CAAb,CACH,CAnFS,GAAI,CAAA,+BAAJ,EAAmC,CACzC,KAAM,CAAA,YAAY,CAAG,GAAG,CAAC,KAAK,KAAN,CAAa,iCAAb,CAAxB,CACA,KAAM,CAAA,QAAQ,CAAG,GAAG,CAAC,KAAK,KAAN,CAAa,8BAAb,CAApB,CAEA,MAAO,CAAA,YAAY,EACnB,YAAY,CAAC,qBAAb,GAAuC,IADhC,EAEP,QAFO,GAGN,QAAQ,CAAC,4BAAT,GAA0C,KAA1C,EACA,QAAQ,CAAC,4BAAT,GAA0C,KAA1C,EAAmD,YAAY,CAAC,KAAb,GAAuB,IAD1E,EAEA,QAAQ,CAAC,4BAAT,GAA0C,KAA1C,EAAmD,YAAY,CAAC,KAAb,GAAuB,KALpE,CAAP,CAMH,CAES,GAAI,CAAA,gBAAJ,EAAoB,CAC1B,KAAM,CAAA,aAAa,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAA/C,CACA,GAAI,CAAC,aAAD,EAAkB,CAAC,aAAa,CAAC,aAArC,CAAoD,CAChD,MAAO,EAAP,CACH,CACD,MAAO,CAAA,aAAa,CAAC,aAArB,CACH,CAES,GAAI,CAAA,iBAAJ,EAAqB,CAC3B,KAAM,CAAA,aAAa,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAA/C,CACA,GAAI,CAAC,aAAD,EAAkB,CAAC,aAAa,CAAC,SAAjC,EAA8C,aAAa,CAAC,SAAd,CAAwB,MAAxB,GAAmC,CAArF,CAAwF,CACpF,MAAO,EAAP,CACH,CAED,GAAI,CAAA,cAAc,CAAW,CAA7B,CACA,aAAa,CAAC,SAAd,CAAwB,OAAxB,CAAgC,QAAQ,EAAG,CACnC,cAAc,EAAK,QAAQ,CAAC,OAAT,EAAoB,CAAvC,CACH,CAFL,EAIA,MAAO,CAAA,cAAP,CACH,CAES,GAAI,CAAA,gBAAJ,EAAoB,kDAC1B,KAAM,CAAA,IAAI,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,CAAkC,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,CAAgC,YAAhC,CAA6C,IAA/E,CAAsF,SAAnG,CACA,GAAI,CAAC,IAAL,CAAW,CACP,MAAO,EAAP,CACH,CAED,KAAM,CAAA,SAAS,CAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAY,CAAC,IAAI,CAAC,WAAL,EAAoB,CAArB,EAA0B,KAAK,gBAA/B,CAAkD,KAAK,iBAAnE,CAAlB,CAGA,0BAAI,KAAK,KAAL,CAAW,IAAX,CAAgB,mBAApB,kEAAI,sBAAqC,MAAzC,2CAAI,uBAA6C,oBAAjD,CAAuE,2BACnE,MAAO,CAAA,IAAI,CAAC,GAAL,CAAS,KAAK,kBAAL,wBAAwB,KAAK,KAAL,CAAW,IAAX,CAAgB,cAAxC,gDAAwB,sBAAgC,MAAxD,CAAT,CAA0E,SAA1E,CAAP,CACH,CAFD,IAEO,CACH,MAAO,CAAA,SAAP,CACH,CACJ,CAES,GAAI,CAAA,YAAJ,EAAgB,CACtB,GAAI,KAAK,KAAL,CAAW,aAAX,CAA2B,KAAK,gBAAhC,EAAoD,KAAK,KAAL,CAAW,aAAX,CAA2B,CAAnF,CAAsF,CAClF,MAAO,MAAK,KAAL,CAAW,SAAX,CAAqB,oBAA5B,CACH,CAED,MAAO,CAAA,SAAP,CACH,CAES,GAAI,CAAA,YAAJ,EAAgB,CACtB,MAAO,CAAA,GAAG,CAAC,KAAK,KAAN,CAAa,kCAAb,CAAV,CACH,CAES,GAAI,CAAA,eAAJ,EAAmB,CACzB,KAAM,CAAA,cAAc,CAAG,GAAG,CAAC,KAAK,KAAN,CAAa,4BAAb,CAA1B,CAEA,MAAO,CAAA,cAAc,CAAG,KAAK,kBAAL,CAAwB,cAAxB,CAAH,CAA6C,CAAlE,CACH,CAES,GAAI,CAAA,UAAJ,EAAc,CACpB,KAAM,CAAA,UAAU,CAAG,GAAG,CAAC,KAAK,KAAN,CAAa,oDAAb,CAAtB,CAEA,MAAO,CAAA,UAAU,CAAG,UAAH,CAAgB,CAAjC,CACH,CAES,GAAI,CAAA,qBAAJ,EAAyB,CAC/B,KAAM,CAAA,YAAY,CAAG,KAAK,eAAL,CAAuB,KAAK,UAAjD,CACA,MAAO,CAAA,YAAY,CAAG,CAAf,CAAmB,KAAK,KAAL,CAAW,OAAX,CAAmB,gBAAnB,CAAoC,cAApC,CAAmD,YAAnD,CAAiE,KAAK,YAAtE,CAAnB,CAAyG,SAAhH,CACH,CAQM,KAAM,CAAA,iBAAN,EAAuB,CAC1B,KAAM,MAAK,IAAL,EAAN,CAGA,QAAQ,CACJ,IAAM,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,EAAmC,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,CAAgC,YAAhC,CAA6C,IAAhF,EAAwF,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAAzB,CAAgC,YAAhC,CAA6C,IAA7C,CAAkD,WAD5I,CAEJ,WAAW,EAAG,CACV,KAAK,eAAL,CAAqB,KAAK,gBAA1B,EACH,CAJG,CAAR,CAMH,CAEM,MAAM,EAAA,CACT,KAAM,CAAA,YAAY,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,mBAAhB,CAAoC,MAAzD,CAEA,GAAI,CAAC,KAAK,+BAAV,CAA2C,CACvC,KAAK,KAAL,CAAW,OAAX,CAAmB,SAAnB,CAA6B,WAA7B,CAAyC,sHAAzC,EACA,MAAO,KAAP,CACH,CAED,KAAM,CAAA,aAAa,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,MAA/C,CACA,KAAM,CAAA,IAAI,CAAI,aAAa,CAAG,aAAa,CAAC,YAAd,CAA2B,IAA9B,CAAqC,SAAhE,CAEA,KAAM,CAAA,cAAc,CAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,cAAhB,CAA+B,MAAtD,CAEA,GAAI,CAAC,IAAL,CAAW,CACP,MAAO,KAAP,CACH,CACD,KAAM,CAAA,SAAS,CAAG,KAAK,KAAL,CAAW,SAA7B,CACA,KAAM,CAAA,MAAM,CAAG,GAAG,CAAC,KAAK,KAAN,CAAa,wBAAb,CAAH,EAA6C,OAA5D,CAEA,KAAM,CAAA,iBAAiB,CAAG,GAAI,CAAA,IAAJ,CAAS,CAAA,YAAY,OAAZ,EAAA,YAAY,SAAZ,QAAA,YAAY,CAAE,eAAd,GAAiC,CAA1C,EAA6C,kBAA7C,CAAgE,MAAhE,CAA1B,CAEA,KAAM,CAAA,KAAK,gCACJ,KAAK,KADD,MAEP,uBAAuB,CAAE,CACzB,WAAW,CAAE,KAAK,KADO,CAEzB,SAAS,CAAE,UAAU,CACjB,KAAK,aADY,CAFI,CAFlB,CAOP,QAAQ,CAAE,6BAA6B,CAAC,CACpC,YAAY,CAAE,KAAK,UADiB,CAEpC,SAFoC,CAGpC,MAAM,CAAE,KAAK,KAAL,CAAW,aAHiB,CAIpC,qBAAqB,CAAE,KAAK,qBAJQ,CAKpC,SAAS,CAAE,KAAK,gBALoB,CAMpC,QAAQ,CAAE,YAN0B,CAOpC,mBAAmB,CAAE,iBAPe,CAQpC,eAAe,CAAE,KAAK,KAAL,CAAW,OAAX,CAAmB,gBAAnB,CAAoC,cAApC,CAAmD,KAAK,kBAAL,CAAwB,cAAxB,CAAnD,CAA4F,KAAK,YAAjG,CARmB,CASpC,eAAe,CAAE,CAAA,YAAY,OAAZ,EAAA,YAAY,SAAZ,QAAA,YAAY,CAAE,oBAAd,GAAsC,KATnB,CAUpC,YAAY,CAAE,KAAK,YAViB,CAWpC,qBAAqB,CAAE,KAAK,mBAXQ,CAYpC,uBAAuB,CAAE,KAAK,KAAL,CAAW,uBAZA,CAapC,UAAU,CAAE,KAAK,KAAL,CAAW,OAAX,CAAmB,gBAAnB,CAAoC,cAApC,CAAmD,KAAK,UAAxD,CAAoE,KAAK,YAAzE,CAbwB,CAcpC,YAAY,CAAE,KAAK,qBAdiB,CAepC,eAAe,CAAE,KAAK,aAfc,CAgBpC,aAAa,CAAE,aAAa,EAAI,aAAa,CAAC,qBAAd,CAAsC,CAAvD,CAA2D,KAAK,KAAL,CAAW,OAAX,CAAmB,gBAAnB,CAAoC,cAApC,CAAmD,aAAa,CAAC,qBAAjE,CAAwF,KAAK,YAA7F,CAA3D,CAAwK,SAhBnJ,CAAD,CAPhC,CAyBP,WAAW,CAAE,gCAAgC,CAAC,CAC1C,SAD0C,CAE1C,MAAM,CAAE,KAAK,KAAL,CAAW,aAFuB,CAG1C,aAAa,CAAE,aAAa,EAAI,aAAa,CAAC,qBAAd,CAAsC,CAAvD,CAA2D,KAAK,KAAL,CAAW,OAAX,CAAmB,gBAAnB,CAAoC,cAApC,CAAmD,aAAa,CAAC,qBAAjE,CAAwF,KAAK,YAA7F,CAA3D,CAAwK,SAH7I,CAAD,CAzBtC,EAAX,CAgCA,MAAO,MAAK,KAAL,CAAW,UAAX,CAAsB,KAAtB,CAAP,CACH,CAzJ8I,CAAnJ,CAEc,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,iCAAA,CAUT,IAVS,CAAA,CAYA,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,kBAAA,CAMT,IANS,CAAA,CAQA,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,mBAAA,CAYT,IAZS,CAAA,CAcA,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,kBAAA,CAcT,IAdS,CAAA,CAgBA,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,cAAA,CAMT,IANS,CAAA,CAQA,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,cAAA,CAET,IAFS,CAAA,CAIA,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,iBAAA,CAIT,IAJS,CAAA,CAMA,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,YAAA,CAIT,IAJS,CAAA,CAMA,UAAA,CAAA,CAAT,QAAS,CAAA,C,wCAAA,C,uBAAA,CAGT,IAHS,CAAA,CA5ED,8BAA8B,CAAA,UAAA,CAAA,CAF1C,eAE0C,CAD1C,QAC0C,CAAA,CAA9B,8BAA8B,CAA9B,C,OAAA,8B,EAgPb,cAAe,CAAA,8BAAf","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as React from 'react';\n\nimport { IModuleStateManager, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';\nimport { IModuleProps } from '@msdyn365-commerce-modules/utilities';\nimport { CustomerBalances } from '@msdyn365-commerce/retail-proxy';\nimport classnames from 'classnames';\nimport get from 'lodash/get';\nimport { computed, reaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { ICheckoutCustomerAccountPaymentData } from './checkout-customer-account-payment.data';\nimport { ICheckoutCustomerAccountPaymentProps } from './checkout-customer-account-payment.props.autogenerated';\nimport { getAccountPaymentFormEditMode, IAccountPaymentEditViewForm } from './components/get-account-payment-form-edit-mode';\nimport { getAccountPaymentFormSummaryMode, IAccountPaymentSummaryViewForm } from './components/get-account-payment-form-summary-mode';\n\nexport interface ICheckoutCustomerAccountPaymentViewProps extends ICheckoutCustomerAccountPaymentProps<ICheckoutCustomerAccountPaymentData> {\n    checkoutCustomerAccount: IModuleProps;\n    summaryView: IAccountPaymentSummaryViewForm;\n    editView: IAccountPaymentEditViewForm;\n    moduleState: IModuleStateManager;\n}\n\nexport interface ICheckoutCustomerAccountPaymentState {\n    paymentAmount: number;\n    isCreditSectionExpanded: boolean;\n}\n\n/**\n *\n * CheckoutCustomerAccount component\n * @extends {React.Component<ICheckoutCustomerAccountPaymentProps<ICheckoutCustomerAccountPaymentData>>}\n */\n// @ts-ignore\n@withModuleState\n@observer\nexport class CheckoutCustomerAccountPayment extends React.Component<ICheckoutCustomerAccountPaymentViewProps, ICheckoutCustomerAccountPaymentState> {\n\n    @computed get isCustomerAccountPaymentEnabled(): boolean {\n        const customerInfo = get(this.props, 'data.customerInformation.result');\n        const platform = get(this.props, 'context.request.app.platform');\n\n        return customerInfo &&\n        customerInfo.AllowOnAccountPayment === true &&\n        platform &&\n        (platform.enableCustomerAccountPayment === 'all' ||\n        (platform.enableCustomerAccountPayment === 'b2b' && customerInfo.IsB2b === true) ||\n        (platform.enableCustomerAccountPayment === 'b2c' && customerInfo.IsB2b === false));\n    }\n\n    @computed get getLoyaltyAmount(): number {\n        const checkoutState = this.props.data.checkout.result;\n        if (!checkoutState || !checkoutState.loyaltyAmount) {\n            return 0;\n        }\n        return checkoutState.loyaltyAmount;\n    }\n\n    @computed get getGiftCardAmount(): number {\n        const checkoutState = this.props.data.checkout.result;\n        if (!checkoutState || !checkoutState.giftCards || checkoutState.giftCards.length === 0) {\n            return 0;\n        }\n\n        let giftCardAmount: number = 0;\n        checkoutState.giftCards.forEach(giftCard => {\n                giftCardAmount += (giftCard.Balance || 0);\n            });\n\n        return giftCardAmount;\n    }\n\n    @computed get maxPaymentAmount(): number {\n        const cart = this.props.data.checkout.result ? this.props.data.checkout.result.checkoutCart.cart : undefined;\n        if (!cart) {\n            return 0;\n        }\n        // Use customer account after gift card and loyalty.\n        const amountDue = Math.max(0, (cart.TotalAmount || 0) - this.getLoyaltyAmount - this.getGiftCardAmount);\n\n        // if the user has a mandatory credit limit, then the max amount must not be more than that\n        if (this.props.data.customerInformation?.result?.MandatoryCreditLimit) {\n            return Math.min(this.getAvailableCredit(this.props.data.creditBalances?.result), amountDue);\n        } else {\n            return amountDue;\n        }\n    }\n\n    @computed get errorMessage(): string | undefined {\n        if (this.state.paymentAmount > this.maxPaymentAmount || this.state.paymentAmount < 0) {\n            return this.props.resources.invalidAmountMessage;\n        }\n\n        return undefined;\n    }\n\n    @computed get currencyCode(): string | undefined {\n        return get(this.props, 'context.request.channel.Currency');\n    }\n\n    @computed get availableCredit(): number {\n        const creditBalances = get(this.props, 'data.creditBalances.result');\n\n        return creditBalances ? this.getAvailableCredit(creditBalances) : 0;\n    }\n\n    @computed get orderTotal(): number {\n        const orderTotal = get(this.props, 'data.checkout.result.checkoutCart.cart.TotalAmount');\n\n        return orderTotal ? orderTotal : 0;\n    }\n\n    @computed get formattedExcessCredit(): string | undefined {\n        const excessCredit = this.availableCredit - this.orderTotal;\n        return excessCredit < 0 ? this.props.context.cultureFormatter.formatCurrency(excessCredit, this.currencyCode) : undefined;\n    }\n\n    private baseClassName: string = 'ms-checkout-customer-account';\n    public constructor(props: ICheckoutCustomerAccountPaymentViewProps) {\n        super(props);\n        this.state = {paymentAmount: this.maxPaymentAmount, isCreditSectionExpanded: false};\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.init();\n\n        // when the cart.TotalAmount gets updated (like if selecting the delivery option adds a charge) we need to update the amount based on the new total amount.\n        reaction(\n            () => this.props.data.checkout.result && this.props.data.checkout.result.checkoutCart.cart && this.props.data.checkout.result.checkoutCart.cart.TotalAmount,\n            totalAmount => {\n                this.updateMaxAmount(this.maxPaymentAmount);\n            }\n        );\n    }\n\n    public render(): JSX.Element | null {\n        const customerInfo = this.props.data.customerInformation.result;\n\n        if (!this.isCustomerAccountPaymentEnabled) {\n            this.props.context.telemetry.information('customer account payments will not display, because the feature is disabled or not enabled for this type of customer');\n            return null;\n        }\n\n        const checkoutState = this.props.data.checkout.result;\n        const cart =  checkoutState ? checkoutState.checkoutCart.cart : undefined;\n\n        const creditBalances = this.props.data.creditBalances.result;\n\n        if (!cart) {\n            return null;\n        }\n        const resources = this.props.resources;\n        const locale = get(this.props, 'context.request.locale') || 'en-us';\n\n        const customerSinceDate = new Date(customerInfo?.CreatedDateTime || 0).toLocaleDateString(locale);\n\n        const props = {\n            ...this.props,\n            checkoutCustomerAccount: {\n            moduleProps: this.props,\n            className: classnames(\n                this.baseClassName\n            )},\n            editView: getAccountPaymentFormEditMode({\n                onAddPayment: this.addPayment,\n                resources,\n                amount: this.state.paymentAmount,\n                onChangePaymentAmount: this.onChangePaymentAmount,\n                maxAmount: this.maxPaymentAmount,\n                customer: customerInfo,\n                customerCreatedDate: customerSinceDate,\n                availableCredit: this.props.context.cultureFormatter.formatCurrency(this.getAvailableCredit(creditBalances), this.currencyCode),\n                showCreditLimit: customerInfo?.MandatoryCreditLimit || false,\n                errorMessage: this.errorMessage,\n                onToggleCreditSection: this.toggleCreditSection,\n                creditSectionIsExpanded: this.state.isCreditSectionExpanded,\n                orderTotal: this.props.context.cultureFormatter.formatCurrency(this.orderTotal, this.currencyCode),\n                excessCredit: this.formattedExcessCredit,\n                onRemovePayment: this.removePayment,\n                appliedAmount: checkoutState && checkoutState.customerAccountAmount > 0 ? this.props.context.cultureFormatter.formatCurrency(checkoutState.customerAccountAmount, this.currencyCode) : undefined\n            }),\n            summaryView: getAccountPaymentFormSummaryMode({\n                resources,\n                amount: this.state.paymentAmount,\n                appliedAmount: checkoutState && checkoutState.customerAccountAmount > 0 ? this.props.context.cultureFormatter.formatCurrency(checkoutState.customerAccountAmount, this.currencyCode) : undefined\n            })\n        };\n\n        return this.props.renderView(props) as React.ReactElement;\n    }\n\n    private getAvailableCredit = (creditBalances: CustomerBalances | undefined) => {\n        if (!creditBalances) {\n            return 0;\n        }\n        return creditBalances.CreditLimit - creditBalances.Balance - creditBalances.PendingBalance;\n    };\n\n    private addPayment = async (): Promise<void> => {\n        const checkoutState = this.props.data.checkout.result;\n\n        if (!checkoutState) {\n            this.props.context.telemetry.error('checkout state not found');\n            return;\n        }\n\n        await checkoutState.updateCustomerAccountAmount({ newAmount: this.state.paymentAmount });\n        this.props.context.telemetry.information('customer account payment amount updated');\n    }\n\n    private toggleCreditSection = (): void => {\n        this.setState({\n            isCreditSectionExpanded: !this.state.isCreditSectionExpanded\n        });\n    };\n\n    private init = async(): Promise<void> => {\n        this.props.moduleState.init({\n            onCancel: this.handleCancelOrSubmit,\n            onSubmit: this.handleCancelOrSubmit,\n            onEdit: this.onEdit\n        });\n\n        if (this.props.data.checkout.result && this.props.data.checkout.result.customerAccountAmount !== 0) {\n            this.props.moduleState.onReady();\n        }\n    }\n\n    private onChangePaymentAmount =(newAmount: number): void => {\n        this.setState({\n            paymentAmount: newAmount\n        });\n    };\n\n    private updateMaxAmount =(newAmount: number): void => {\n\n        // if the user has already set an amount, we should not override that in the UI because it will be confusing.\n        if (this.props.data.checkout.result && this.props.data.checkout.result.customerAccountAmount === 0) {\n            this.setState({\n                // We should never allow a negative amount.\n                paymentAmount: Math.max(0, newAmount)\n            });\n        }\n    };\n\n    private onEdit = (): void => {\n        this.props.moduleState.onUpdating();\n    };\n\n    private handleCancelOrSubmit = () => {\n        const checkoutState = this.props.data.checkout.result;\n        if (checkoutState && checkoutState.customerAccountAmount > 0) {\n            this.props.moduleState.onReady();\n        } else {\n            // Skip the module\n            this.props.moduleState.onSkip();\n        }\n    };\n\n    private removePayment = async (): Promise<void> => {\n        const checkoutState = this.props.data.checkout.result;\n\n        if (!checkoutState) {\n            this.props.context.telemetry.error('checkout state not found');\n            return;\n        }\n\n        this.setState({\n            paymentAmount: 0\n        });\n\n        await checkoutState.updateCustomerAccountAmount({ newAmount: 0});\n        this.props.context.telemetry.information('customer account payment removed');\n    }\n}\n\nexport default CheckoutCustomerAccountPayment;\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}