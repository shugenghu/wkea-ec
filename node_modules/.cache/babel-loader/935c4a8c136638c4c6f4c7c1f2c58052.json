{"ast":null,"code":"import\"core-js/modules/es.object.assign.js\";import\"core-js/modules/es.string.replace.js\";import*as Msdyn365 from'@msdyn365-commerce/core';import classname from'classnames';import*as React from'react';import{Heading}from'@msdyn365-commerce-modules/utilities';import AddressButtonComponent from'./address-button';import AddressErrorMessageComponent from'./address-error-message';import AddressErrorTitleComponent from'./address-error-title';import{AddressShow}from'./address-show';const getButtonAriaLabel=(ariaLabel,addressName)=>{return ariaLabel.replace('{addressName}',addressName||'');};const getAddressList=(className,addresses,showPrimaryButton,props,heading)=>{const{resources,isUpdating,addressActionResponse,selectedAddress,addressFormat,onEditAddress,onRemoveAddress,onUpdatePrimaryAddress,addressPurposes,telemetryContent}=props;const{errorTitle=null,errorMessage=null}=addressActionResponse||{};return{List:{className:className},isShowList:addresses.length>0,heading:heading&&/*#__PURE__*/React.createElement(Heading,Object.assign({className:\"\".concat(className,\"-heading\")},heading)),items:addresses.map(address=>{const isSelectedAddress=selectedAddress&&selectedAddress.RecordId===address.RecordId;const isShowError=isSelectedAddress&&errorTitle&&errorMessage;return{Item:{className:\"\".concat(className,\"-list\")},key:address.RecordId||0,showItems:AddressShow({addressFormat:addressFormat.getAddressFormat(address.ThreeLetterISORegionName||''),address:address,addressPurposes:addressPurposes}),error:{Error:{className:\"\".concat(className,\"-error\")},isShowError:isShowError?true:false,title:/*#__PURE__*/React.createElement(AddressErrorTitleComponent,Object.assign({},{title:errorTitle||''})),message:/*#__PURE__*/React.createElement(AddressErrorMessageComponent,Object.assign({},{message:errorMessage||''}))},isShowPrimaryButton:showPrimaryButton,primaryButton:/*#__PURE__*/React.createElement(AddressButtonComponent,Object.assign({},{className:classname('msc-address-list__button-primary msc-btn',{'msc-address-list__button-updating':isUpdating&&isSelectedAddress}),disabled:isUpdating,text:resources.addressPrimaryButtonText,ariaLabel:getButtonAriaLabel(resources.addressPrimaryButtonAriaLabel,address.Name),telemetryContent:telemetryContent,onClick:()=>{onUpdatePrimaryAddress(address);}})),editButton:/*#__PURE__*/React.createElement(AddressButtonComponent,Object.assign({},{className:'msc-address-list__button-edit',disabled:isUpdating,text:resources.addressEditButtonText,ariaLabel:getButtonAriaLabel(resources.addressEditButtonAriaLabel,address.Name),telemetryContent:telemetryContent,onClick:()=>{onEditAddress(address);}})),removeButton:/*#__PURE__*/React.createElement(AddressButtonComponent,Object.assign({},{className:'msc-address-list__button-remove',disabled:isUpdating,text:resources.addressRemoveButtonText,ariaLabel:getButtonAriaLabel(resources.addressRemoveButtonAriaLabel,address.Name),telemetryContent:telemetryContent,onClick:()=>{onRemoveAddress(address);}}))};})};};const getPrimaryAddressList=props=>{const{addresses,primaryAddressSectionHeading}=props;const primaryAddresses=addresses.filter(address=>address.IsPrimary);return getAddressList('msc-address-list__primary',primaryAddresses,false,props,primaryAddressSectionHeading);};const getOtherAddressList=props=>{const{addresses,otherAddressSectionHeading}=props;const otherAddresses=addresses.filter(address=>!address.IsPrimary);return getAddressList('msc-address-list__primary',otherAddresses,true,props,otherAddressSectionHeading);};export const AddressList=props=>{const{addresses,heading,resources,onAddAddress,telemetryContent}=props;const handleLineItemHeadingChange=event=>{heading.text=event.target.value;};const headingComponent=heading&&heading.text&&/*#__PURE__*/React.createElement(Msdyn365.Text,{className:'msc-address-list__heading',tag:heading.headingTag||'h2',text:heading.text,editProps:{onEdit:handleLineItemHeadingChange,requestContext:props.contextRequest}});return{ListAddress:{className:'ms-address-list'},heading:headingComponent,isShowEmptyListMessage:addresses.length===0,emptyListMessage:/*#__PURE__*/React.createElement(\"p\",{className:'msc-address-list__add-empty'},resources.addressEmptyListAddressMessage),addButton:/*#__PURE__*/React.createElement(AddressButtonComponent,Object.assign({},{className:'msc-address-list__button-add msc-btn',text:resources.addressAddButtonText,ariaLabel:resources.addressAddButtonAriaLabel,telemetryContent:telemetryContent,onClick:onAddAddress})),primaryAddressList:getPrimaryAddressList(props),otherAddressList:getOtherAddressList(props)};};","map":{"version":3,"sources":["common/components/address-list.tsx"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Msdyn365 from '@msdyn365-commerce/core';\nimport classname from 'classnames';\nimport * as React from 'react';\n\nimport { Heading as HeadingData } from '@msdyn365-commerce-modules/data-types';\nimport { Heading, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { Address, AddressPurpose } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { AddressFormat } from '../../common/address-format';\nimport { IAddressResource, IAddressResponse } from '../../common/address-module.data';\nimport AddressButtonComponent from './address-button';\nimport AddressErrorMessageComponent from './address-error-message';\nimport AddressErrorTitleComponent from './address-error-title';\nimport { AddressShow, IAddressShowProps } from './address-show';\n\nexport interface IAddressListError {\n    Error: INodeProps;\n    isShowError: boolean;\n    title: React.ReactNode;\n    message: React.ReactNode;\n}\n\nexport interface IAddressListItem {\n    Item: INodeProps;\n    key: number;\n    error: IAddressListError;\n    showItems: IAddressShowProps;\n    isShowPrimaryButton: boolean;\n    primaryButton: React.ReactNode;\n    editButton: React.ReactNode;\n    removeButton: React.ReactNode;\n}\n\nexport interface IAddressList {\n    List: INodeProps;\n    isShowList: boolean;\n    heading: React.ReactNode;\n    items: IAddressListItem[];\n}\n\nexport interface IAddressListProps {\n    ListAddress: INodeProps;\n    heading: React.ReactNode;\n    isShowEmptyListMessage: boolean;\n    emptyListMessage: React.ReactNode;\n    addButton: React.ReactNode;\n    primaryAddressList: IAddressList;\n    otherAddressList: IAddressList;\n}\n\nexport interface IAddressListInputProps {\n    isUpdating?: boolean;\n    selectedAddress?: Address;\n    addressFormat: AddressFormat;\n    addresses: Address[];\n    addressPurposes: AddressPurpose[];\n    heading?: HeadingData;\n    primaryAddressSectionHeading?: HeadingData;\n    otherAddressSectionHeading?: HeadingData;\n    addressActionResponse?: IAddressResponse;\n    resources: IAddressResource;\n    contextRequest: Msdyn365.IRequestContext;\n    telemetryContent?: ITelemetryContent;\n    onAddAddress(): void;\n    onEditAddress(address?: Address): void;\n    onRemoveAddress(address?: Address): void;\n    onUpdatePrimaryAddress(address: Address): void;\n}\n\nconst getButtonAriaLabel = (ariaLabel: string, addressName?: string): string => {\n    return ariaLabel.replace('{addressName}', addressName || '');\n};\n\nconst getAddressList = (className: string, addresses: Address[], showPrimaryButton: boolean, props: IAddressListInputProps, heading?: HeadingData): IAddressList => {\n    const { resources, isUpdating, addressActionResponse, selectedAddress, addressFormat, onEditAddress, onRemoveAddress, onUpdatePrimaryAddress, addressPurposes, telemetryContent } = props;\n    const { errorTitle = null, errorMessage = null } = addressActionResponse || {};\n\n    return {\n        List: { className: className },\n        isShowList: addresses.length > 0,\n        heading: heading && <Heading className={`${className}-heading`} {...heading} />,\n        items: addresses.map((address: Address): IAddressListItem => {\n            const isSelectedAddress = selectedAddress && selectedAddress.RecordId === address.RecordId;\n            const isShowError = isSelectedAddress && errorTitle && errorMessage;\n            return {\n                Item: { className: `${className}-list` },\n                key: address.RecordId || 0,\n                showItems: AddressShow({ addressFormat: addressFormat.getAddressFormat(address.ThreeLetterISORegionName || ''), address: address, addressPurposes: addressPurposes }),\n                error: {\n                    Error: { className: `${className}-error` },\n                    isShowError: isShowError ? true : false,\n                    title: <AddressErrorTitleComponent {...{ title: errorTitle || '' }} />,\n                    message: <AddressErrorMessageComponent {...{ message: errorMessage || '' }} />\n                },\n                isShowPrimaryButton: showPrimaryButton,\n\n                primaryButton: (\n                    <AddressButtonComponent\n                        {\n                        ...{\n                            className: classname('msc-address-list__button-primary msc-btn', { 'msc-address-list__button-updating': isUpdating && isSelectedAddress }),\n                            disabled: isUpdating,\n                            text: resources.addressPrimaryButtonText,\n                            ariaLabel: getButtonAriaLabel(resources.addressPrimaryButtonAriaLabel, address.Name),\n                            telemetryContent: telemetryContent,\n                            onClick: () => { onUpdatePrimaryAddress(address); }\n                        }\n                        }\n                    />\n                ),\n                editButton: (\n                    <AddressButtonComponent\n                        {\n                        ...{\n                            className: 'msc-address-list__button-edit',\n                            disabled: isUpdating,\n                            text: resources.addressEditButtonText,\n                            ariaLabel: getButtonAriaLabel(resources.addressEditButtonAriaLabel, address.Name),\n                            telemetryContent: telemetryContent,\n                            onClick: () => { onEditAddress(address); }\n                        }\n                        }\n                    />\n                ),\n                removeButton: (\n                    <AddressButtonComponent\n                        {\n                        ...{\n                            className: 'msc-address-list__button-remove',\n                            disabled: isUpdating,\n                            text: resources.addressRemoveButtonText,\n                            ariaLabel: getButtonAriaLabel(resources.addressRemoveButtonAriaLabel, address.Name),\n                            telemetryContent: telemetryContent,\n                            onClick: () => { onRemoveAddress(address); }\n                        }\n                        }\n                    />\n                )\n            };\n        })\n    };\n};\n\nconst getPrimaryAddressList = (props: IAddressListInputProps): IAddressList => {\n    const { addresses, primaryAddressSectionHeading } = props;\n    const primaryAddresses = addresses.filter((address: Address) => address.IsPrimary);\n    return getAddressList('msc-address-list__primary', primaryAddresses, false, props, primaryAddressSectionHeading);\n};\n\nconst getOtherAddressList = (props: IAddressListInputProps): IAddressList => {\n    const { addresses, otherAddressSectionHeading } = props;\n    const otherAddresses = addresses.filter((address: Address) => !address.IsPrimary);\n    return getAddressList('msc-address-list__primary', otherAddresses, true, props, otherAddressSectionHeading);\n};\n\nexport const AddressList = (props: IAddressListInputProps): IAddressListProps => {\n    const { addresses, heading, resources, onAddAddress, telemetryContent } = props;\n    const handleLineItemHeadingChange = (event: Msdyn365.ContentEditableEvent) => {\n        heading!.text = event.target.value;\n    };\n    const headingComponent = heading && heading.text && (\n        <Msdyn365.Text\n          className='msc-address-list__heading'\n          tag={heading.headingTag || 'h2'}\n          text={heading.text}\n          editProps = {{onEdit: handleLineItemHeadingChange, requestContext: props.contextRequest}}\n        />\n      );\n\n    return {\n        ListAddress: { className: 'ms-address-list' },\n        heading: headingComponent,\n        isShowEmptyListMessage: addresses.length === 0,\n        emptyListMessage: <p className='msc-address-list__add-empty'>{resources.addressEmptyListAddressMessage}</p>,\n        addButton: (\n            <AddressButtonComponent\n                {\n                ...{\n                    className: 'msc-address-list__button-add msc-btn',\n                    text: resources.addressAddButtonText,\n                    ariaLabel: resources.addressAddButtonAriaLabel,\n                    telemetryContent: telemetryContent,\n                    onClick: onAddAddress\n                }\n                }\n            />\n        ),\n        primaryAddressList: getPrimaryAddressList(props),\n        otherAddressList: getOtherAddressList(props)\n    };\n};\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}