{"ast":null,"code":"import\"core-js/modules/es.promise.js\";import\"core-js/modules/es.regexp.to-string.js\";import\"core-js/modules/web.dom-collections.for-each.js\";import{getCategoriesUrlSync}from'@msdyn365-commerce/core';import{createObservableDataAction}from'@msdyn365-commerce/core';import{getCategoryPathsAsync}from'@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';import{getSelectedProductIdFromActionInput,buildCacheKey}from'./utilities/utils';/**\r\n * Category path input\r\n */export class GetCategoryPathsInput{constructor(context,categoryPathLooksups){this.getCacheKey=()=>buildCacheKey(this.constructedCacheKey,this.apiSettings);this.getCacheObjectType=()=>'CategoryPath';this.dataCacheType=()=>'request';this.ChannelId=context.apiSettings.channelId;this.CatalogId=context.apiSettings.catalogId|0;this.categoryPathLooksups=categoryPathLooksups;this.apiSettings=context.apiSettings;this.constructedCacheKey=\"\";categoryPathLooksups.forEach(categoryPath=>{this.constructedCacheKey+=\"\".concat(categoryPath.ProductId&&categoryPath.ProductId.toString(),\"|\");});this.constructedCacheKey+=\"\".concat(this.ChannelId.toString(),\"|\");this.constructedCacheKey+=\"\".concat(this.CatalogId.toString(),\"|\");}}/**\r\n * Creates the input required to make the getCategoryPath retail api call\r\n */export const createGetCategoryPathsInput=inputData=>{const productId=getSelectedProductIdFromActionInput(inputData);if(productId){return new GetCategoryPathsInput(inputData.requestContext,[{ProductId:+productId}]);}else{throw new Error('Unable to create SelectedVariantInput, no productId found on module config or query');}};/**\r\n * Calls the Retail API and returns the category path for a product\r\n */export async function getCategoryPathsAction(input,ctx){const categoryPathResults=await getCategoryPathsAsync({callerContext:ctx},input.ChannelId,input.CatalogId,input.categoryPathLooksups);const categoryPath=categoryPathResults[0].CategoryPath&&categoryPathResults[0].CategoryPath[0];const categoryUrl=getCategoriesUrlSync(categoryPath,ctx);if(categoryUrl){return categoryUrl;}return[];}export default createObservableDataAction({id:'@msdyn365-commerce-modules/retail-actions/get-category-paths',action:getCategoryPathsAction,input:createGetCategoryPathsInput});","map":{"version":3,"sources":["../../src/get-category-paths.ts"],"names":[],"mappings":"6IAAA,OAAkF,oBAAlF,KAA8G,yBAA9G,CACA,OAAS,0BAAT,KAAiG,yBAAjG,CACA,OAAS,qBAAT,KAAsC,wEAAtC,CAEA,OAAS,mCAAT,CAA8C,aAA9C,KAAmE,mBAAnE,CAGA;;AAEG,GACH,MAAM,MAAO,CAAA,qBAAqB,CAO9B,WAAA,CAAY,OAAZ,CAAsC,oBAAtC,CAAgF,CAczE,KAAA,WAAA,CAAc,IAAM,aAAa,CAAC,KAAK,mBAAN,CAA2B,KAAK,WAAhC,CAAjC,CACA,KAAA,kBAAA,CAAqB,IAAM,cAA3B,CACA,KAAA,aAAA,CAAgB,IAAiB,SAAjC,CAfH,KAAK,SAAL,CAAiB,OAAO,CAAC,WAAR,CAAoB,SAArC,CACA,KAAK,SAAL,CAAiB,OAAO,CAAC,WAAR,CAAoB,SAApB,CAAgC,CAAjD,CACA,KAAK,oBAAL,CAA4B,oBAA5B,CACA,KAAK,WAAL,CAAmB,OAAO,CAAC,WAA3B,CACA,KAAK,mBAAL,IACA,oBAAoB,CAAC,OAArB,CAA6B,YAAY,EAAE,CAEnC,KAAK,mBAAL,YAA6B,YAAY,CAAC,SAAb,EAA0B,YAAY,CAAC,SAAb,CAAuB,QAAvB,EAAvD,MACH,CAHL,EAIA,KAAK,mBAAL,YAA6B,KAAK,SAAL,CAAe,QAAf,EAA7B,MACA,KAAK,mBAAL,YAA6B,KAAK,SAAL,CAAe,QAAf,EAA7B,MACH,CAnB6B,CA0BlC;;AAEG,GACH,MAAO,MAAM,CAAA,2BAA2B,CAAI,SAAD,EAAkE,CACzG,KAAM,CAAA,SAAS,CAAG,mCAAmC,CAAC,SAAD,CAArD,CACA,GAAI,SAAJ,CAAe,CACT,MAAO,IAAI,CAAA,qBAAJ,CAA0B,SAAS,CAAC,cAApC,CAAoD,CAAC,CAAC,SAAS,CAAC,CAAC,SAAZ,CAAD,CAApD,CAAP,CACL,CAFD,IAEO,CACH,KAAM,IAAI,CAAA,KAAJ,CAAU,qFAAV,CAAN,CACH,CAEJ,CARM,CAUP;;AAEG,GACH,MAAO,eAAe,CAAA,sBAAf,CAAsC,KAAtC,CAAoE,GAApE,CAAuF,CAC1F,KAAM,CAAA,mBAAmB,CAAG,KAAM,CAAA,qBAAqB,CAAC,CAAE,aAAa,CAAE,GAAjB,CAAD,CAAwB,KAAK,CAAC,SAA9B,CAAyC,KAAK,CAAC,SAA/C,CAAyD,KAAK,CAAC,oBAA/D,CAAvD,CACA,KAAM,CAAA,YAAY,CAAG,mBAAmB,CAAC,CAAD,CAAnB,CAAuB,YAAvB,EAAuC,mBAAmB,CAAC,CAAD,CAAnB,CAAuB,YAAvB,CAAoC,CAApC,CAA5D,CACA,KAAM,CAAA,WAAW,CAAG,oBAAoB,CAAC,YAAD,CAAgC,GAAhC,CAAxC,CACA,GAAG,WAAH,CACA,CACI,MAAO,CAAA,WAAP,CACH,CACD,MAAO,EAAP,CACH,CAED,cAAe,CAAA,0BAA0B,CAAC,CACtC,EAAE,CAAE,8DADkC,CAEtC,MAAM,CAA2B,sBAFK,CAGtC,KAAK,CAAE,2BAH+B,CAAD,CAAzC","sourcesContent":["import { CacheType, IAction, IActionInput, IRequestContext, ICommerceApiSettings, getCategoriesUrlSync } from '@msdyn365-commerce/core';\nimport { createObservableDataAction, IActionContext, IAny, ICreateActionContext, IGeneric } from '@msdyn365-commerce/core';\nimport { getCategoryPathsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { CategoryPathLookup} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { getSelectedProductIdFromActionInput, buildCacheKey } from './utilities/utils';\nimport { ICategoryPath, ICategoryUrl } from '@msdyn365-commerce/core-internal/dist/types/interfaces/ICategoryPathInterfaces';\n\n/**\n * Category path input\n */\nexport class GetCategoryPathsInput implements IActionInput {\n    public readonly ChannelId: number;\n    public readonly CatalogId: number;    \n    public readonly categoryPathLooksups: CategoryPathLookup[];\n    private constructedCacheKey: string;\n    public readonly apiSettings: ICommerceApiSettings;\n\n    constructor(context: IRequestContext, categoryPathLooksups: CategoryPathLookup[]) {\n        this.ChannelId = context.apiSettings.channelId;\n        this.CatalogId = context.apiSettings.catalogId | 0;\n        this.categoryPathLooksups = categoryPathLooksups;\n        this.apiSettings = context.apiSettings;\n        this.constructedCacheKey = ``;\n        categoryPathLooksups.forEach(categoryPath=>\n            {\n                this.constructedCacheKey+=`${categoryPath.ProductId && categoryPath.ProductId.toString()}|`;\n            })\n        this.constructedCacheKey+=`${this.ChannelId.toString()}|`\n        this.constructedCacheKey+=`${this.CatalogId.toString()}|`\n    }\n   \n    public getCacheKey = () => buildCacheKey(this.constructedCacheKey, this.apiSettings);;\n    public getCacheObjectType = () => 'CategoryPath';\n    public dataCacheType = (): CacheType => 'request';\n}\n\n/**\n * Creates the input required to make the getCategoryPath retail api call\n */\nexport const createGetCategoryPathsInput = (inputData: ICreateActionContext<IGeneric<IAny>>): IActionInput => {\n    const productId = getSelectedProductIdFromActionInput(inputData);\n    if (productId) {\n          return new GetCategoryPathsInput(inputData.requestContext, [{ProductId:+productId}]);\n    } else {\n        throw new Error('Unable to create SelectedVariantInput, no productId found on module config or query');\n    }\n    \n};\n\n/**\n * Calls the Retail API and returns the category path for a product\n */\nexport async function getCategoryPathsAction(input: GetCategoryPathsInput, ctx: IActionContext): Promise<ICategoryUrl[]> {\n    const categoryPathResults = await getCategoryPathsAsync({ callerContext: ctx },input.ChannelId, input.CatalogId,input.categoryPathLooksups);    \n    const categoryPath = categoryPathResults[0].CategoryPath && categoryPathResults[0].CategoryPath[0];\n    const categoryUrl = getCategoriesUrlSync(categoryPath as ICategoryPath, ctx);\n    if(categoryUrl)\n    {\n        return categoryUrl;\n    }\n    return [];\n}\n\nexport default createObservableDataAction({\n    id: '@msdyn365-commerce-modules/retail-actions/get-category-paths',\n    action: <IAction<ICategoryUrl[]>>getCategoryPathsAction,\n    input: createGetCategoryPathsInput,\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}