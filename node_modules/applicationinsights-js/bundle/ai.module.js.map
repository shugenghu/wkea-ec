{"version":3,"file":"ai.module.js","sourceRoot":"","sources":["../JavaScript/JavaScriptSDK.Interfaces/IConfig.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/Base.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IApplication.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IDevice.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IInternal.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/ILocation.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IOperation.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/ISample.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IUser.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/ISession.ts","../JavaScript/JavaScriptSDK.Interfaces/Telemetry/ISerializable.ts","../JavaScript/JavaScriptSDK.Interfaces/Telemetry/IEnvelope.ts","../JavaScript/JavaScriptSDK.Interfaces/ITelemetryContext.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/SeverityLevel.ts","../JavaScript/JavaScriptSDK.Interfaces/IAppInsights.ts","../JavaScript/JavaScriptSDK/UtilHelpers.ts","../JavaScript/JavaScriptSDK.Module/AppInsightsModule.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IConfig {\r\n        instrumentationKey?: string;\r\n        endpointUrl?: string;\r\n        emitLineDelimitedJson?: boolean;\r\n        accountId?: string;\r\n        sessionRenewalMs?: number;\r\n        sessionExpirationMs?: number;\r\n        maxBatchSizeInBytes?: number;\r\n        maxBatchInterval?: number;\r\n        enableDebug?: boolean;\r\n        disableExceptionTracking?: boolean;\r\n        disableTelemetry?: boolean;\r\n        verboseLogging?: boolean;\r\n        diagnosticLogInterval?: number;\r\n        samplingPercentage?: number;\r\n        autoTrackPageVisitTime?: boolean;\r\n        disableAjaxTracking?: boolean;\r\n        overridePageViewDuration?: boolean;\r\n        maxAjaxCallsPerView?: number;\r\n        disableDataLossAnalysis?: boolean;\r\n        disableCorrelationHeaders?: boolean;\r\n        correlationHeaderExcludedDomains?: string[];\r\n        disableFlushOnBeforeUnload?: boolean;\r\n        enableSessionStorageBuffer?: boolean;\r\n        isCookieUseDisabled?: boolean;\r\n        cookieDomain?: string;\r\n        isRetryDisabled?: boolean;\r\n        url?: string;\r\n        isStorageUseDisabled?: boolean;\r\n        isBeaconApiDisabled?: boolean;\r\n        sdkExtension?: string;\r\n        isBrowserLinkTrackingEnabled?: boolean;\r\n        appId?: string;\r\n        enableCorsCorrelation?: boolean;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// THIS FILE WAS AUTOGENERATED\r\nmodule Microsoft.Telemetry\r\n{\r\n\"use strict\";\r\n    \r\n    /**\r\n     * Data struct to contain only C section with custom fields.\r\n     */\r\n    export class Base\r\n    {\r\n        \r\n        /**\r\n         * Name of item (B section) if any. If telemetry data is derived straight from this, this should be null.\r\n         */\r\n        public baseType: string;\r\n        \r\n        constructor()\r\n        {\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// THIS FILE WAS AUTOGENERATED\r\n/// <reference path=\"Base.ts\" />\r\nmodule Microsoft.Telemetry\r\n{\r\n\"use strict\";\r\n    \r\n    /**\r\n     * System variables for a telemetry item.\r\n     */\r\n    export class Envelope\r\n    {\r\n        \r\n        /**\r\n         * Envelope version. For internal use only. By assigning this the default, it will not be serialized within the payload unless changed to a value other than #1.\r\n         */\r\n        public ver: number;\r\n        \r\n        /**\r\n         * Type name of telemetry data item.\r\n         */\r\n        public name: string;\r\n        \r\n        /**\r\n         * Event date time when telemetry item was created. This is the wall clock time on the client when the event was generated. There is no guarantee that the client's time is accurate. This field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds digits provided are variable (and unspecified). Consumers should handle this, i.e. managed code consumers should not use format 'O' for parsing as it specifies a fixed length. Example: 2009-06-15T13:45:30.0000000Z.\r\n         */\r\n        public time: string;\r\n        \r\n        /**\r\n         * Sampling rate used in application. This telemetry item represents 1 / sampleRate actual telemetry items.\r\n         */\r\n        public sampleRate: number;\r\n        \r\n        /**\r\n         * Sequence field used to track absolute order of uploaded events.\r\n         */\r\n        public seq: string;\r\n        \r\n        /**\r\n         * The application's instrumentation key. The key is typically represented as a GUID, but there are cases when it is not a guid. No code should rely on iKey being a GUID. Instrumentation key is case insensitive.\r\n         */\r\n        public iKey: string;\r\n        \r\n        /**\r\n         * Key/value collection of context properties. See ContextTagKeys for information on available properties.\r\n         */\r\n        public tags: any;\r\n        \r\n        /**\r\n         * Telemetry data item.\r\n         */\r\n        public data: Base;\r\n        \r\n        constructor()\r\n        {\r\n            this.ver = 1;\r\n            this.sampleRate = 100.0;\r\n            this.tags = {};\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IApplication {\r\n        /**\r\n         * The application version.\r\n         */\r\n        ver: string;\r\n\r\n        /**\r\n         * The application build version.\r\n         */\r\n        build: string;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IDevice {\r\n        /**\r\n         * The type for the current device.\r\n         */\r\n        type: string;\r\n\r\n        /**\r\n         * A device unique ID.\r\n         */\r\n        id: string;\r\n\r\n        /**\r\n         * The device OEM for the current device.\r\n         */\r\n        oemName: string;\r\n\r\n        /**\r\n         * The device model for the current device.\r\n         */\r\n        model: string;\r\n\r\n        /**\r\n         * The IANA interface type for the internet connected network adapter.\r\n         */\r\n        network: number;\r\n\r\n        /**\r\n         * The application screen resolution.\r\n         */\r\n        resolution: string;\r\n\r\n        /**\r\n         * The current display language of the operating system.\r\n         */\r\n        locale: string;\r\n\r\n        /**\r\n         * The IP address.\r\n         */\r\n        ip: string;\r\n\r\n        /**\r\n         * The device language.\r\n         */\r\n        language: string;\r\n\r\n        /**\r\n         * The OS name.\r\n         */\r\n        os: string;\r\n\r\n        /**\r\n         * The OS version.\r\n         */\r\n        osversion: string;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IInternal {\r\n        /**\r\n        * The SDK version used to create this telemetry item.\r\n        */\r\n        sdkVersion: string;\r\n\r\n        /**\r\n         * The SDK agent version.\r\n         */\r\n        agentVersion: string;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ILocation {\r\n        /**\r\n         * Client IP address for reverse lookup\r\n         */\r\n        ip: string;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IOperation {\r\n        /**\r\n         * Operation id\r\n         */\r\n        id: string;\r\n\r\n        /**\r\n         * Operation name\r\n         */\r\n        name: string;\r\n\r\n        /**\r\n         * Parent operation id\r\n         */\r\n        parentId: string;\r\n\r\n        /**\r\n         * Root operation id\r\n         */\r\n        rootId: string;\r\n\r\n        /**\r\n         * Synthetic source of the operation\r\n         */\r\n        syntheticSource: string;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ISample {\r\n        /**\r\n        * Sample rate\r\n        */\r\n        sampleRate: number;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IUser {\r\n        /**\r\n        * The telemetry configuration.\r\n        */\r\n        config: any;\r\n\r\n        /**\r\n         * The user ID.\r\n         */\r\n        id: string;\r\n\r\n        /**\r\n         * Authenticated user id\r\n         */\r\n        authenticatedId: string;\r\n\r\n        /**\r\n         * The account ID.\r\n         */\r\n        accountId: string;\r\n\r\n        /**\r\n         * The account acquisition date.\r\n         */\r\n        accountAcquisitionDate: string;\r\n\r\n        /**\r\n         * The user agent string.\r\n         */\r\n        agent: string;\r\n\r\n        /**\r\n         * The store region.\r\n         */\r\n        storeRegion: string;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ISession {\r\n        /**\r\n        * The session ID.\r\n        */\r\n        id: string;\r\n\r\n        /**  \r\n         * The true if this is the first session  \r\n         */\r\n        isFirst: boolean;\r\n\r\n        /**\r\n         * The date at which this guid was genereated.\r\n         * Per the spec the ID will be regenerated if more than acquisitionSpan milliseconds ellapse from this time.\r\n         */\r\n        acquisitionDate: number;\r\n\r\n        /**\r\n         * The date at which this session ID was last reported.\r\n         * This value should be updated whenever telemetry is sent using this ID.\r\n         * Per the spec the ID will be regenerated if more than renewalSpan milliseconds elapse from this time with no activity.\r\n         */\r\n        renewalDate: number;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ISerializable {\r\n        /**\r\n         * The set of fields for a serializable object. \r\n         * This defines the serialization order and a value of true/false\r\n         * for each field defines whether the field is required or not.\r\n         */\r\n        aiDataContract: any;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/// <reference path=\"./ISerializable.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IEnvelope extends ISerializable {\r\n        ver: number;\r\n        name: string;\r\n        time: string;\r\n        sampleRate: number;\r\n        seq: string;\r\n        iKey: string;\r\n        tags: { [name: string]: any };\r\n        data: any;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/// <reference path=\"./Contracts/Generated/Envelope.ts\" />\r\n/// <reference path=\"./Context/IApplication.ts\"/>\r\n/// <reference path=\"./Context/IDevice.ts\"/>\r\n/// <reference path=\"./Context/IInternal.ts\"/>\r\n/// <reference path=\"./Context/ILocation.ts\"/>\r\n/// <reference path=\"./Context/IOperation.ts\"/>\r\n/// <reference path=\"./Context/ISample.ts\"/>\r\n/// <reference path=\"./Context/IUser.ts\"/>\r\n/// <reference path=\"./Context/ISession.ts\"/>\r\n/// <reference path=\"./Telemetry/IEnvelope.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ITelemetryContext {\r\n         /**\r\n         * The object describing a component tracked by this object.\r\n         */\r\n        application: Context.IApplication;\r\n\r\n        /**\r\n         * The object describing a device tracked by this object.\r\n         */\r\n        device: Context.IDevice;\r\n\r\n        /**\r\n        * The object describing internal settings.\r\n        */\r\n        internal: Context.IInternal;\r\n\r\n        /**\r\n         * The object describing a location tracked by this object.\r\n         */\r\n        location: Context.ILocation;\r\n\r\n        /**\r\n         * The object describing a operation tracked by this object.\r\n         */\r\n        operation: Context.IOperation;\r\n\r\n        /**\r\n        * The object describing sampling settings.\r\n        */\r\n        sample: Context.ISample;\r\n\r\n        /**\r\n         * The object describing a user tracked by this object.\r\n         */\r\n        user: Context.IUser;\r\n\r\n        /**\r\n         * The object describing a session tracked by this object.\r\n         */\r\n        session: Context.ISession;\r\n\r\n        /**\r\n        * Adds a telemetry initializer to the collection. Telemetry initializers will be called one by one, \r\n        * in the order they were added, before the telemetry item is pushed for sending. \r\n        * If one of the telemetry initializers returns false or throws an error then the telemetry item will not be sent. \r\n        * If it returns true or doesn't return any value the event will be passed to the next telemetry initializer and\r\n        * send to the cloud (if not rejected by other initializers). \r\n        */\r\n        addTelemetryInitializer(telemetryInitializer: (envelope: Microsoft.ApplicationInsights.IEnvelope) => boolean | void);\r\n\r\n         /**\r\n         * Tracks telemetry object.\r\n         */\r\n        track(envelope: Microsoft.ApplicationInsights.IEnvelope);\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// THIS FILE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    \r\n    /**\r\n     * Defines the level of severity for the event.\r\n     */\r\n    export enum SeverityLevel\r\n    {\r\n        Verbose = 0,\r\n        Information = 1,\r\n        Warning = 2,\r\n        Error = 3,\r\n        Critical = 4,\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/// <reference path=\"./IConfig.ts\" />\r\n/// <reference path=\"./ITelemetryContext.ts\" />\r\n/// <reference path=\"./Contracts/Generated/SeverityLevel.ts\" />\r\n\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IAppInsights {\r\n\r\n        /*\r\n        * Config object used to initialize AppInsights\r\n        */\r\n        config: IConfig;\r\n\r\n        context: ITelemetryContext;\r\n\r\n        /*\r\n        * Initialization queue. Contains functions to run when appInsights initializes\r\n        */\r\n        queue: Array<() => void>;\r\n\r\n        /**\r\n        * Starts timing how long the user views a page or other item. Call this when the page opens.\r\n        * This method doesn't send any telemetry. Call `stopTrackPage` to log the page when it closes.\r\n        * @param   name  A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n        */\r\n        startTrackPage(name?: string);\r\n\r\n        /**\r\n        * Logs how long a page or other item was visible, after `startTrackPage`. Call this when the page closes.\r\n        * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n        * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n        * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n        * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n        */\r\n        stopTrackPage(name?: string, url?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n        /**\r\n         * Logs that a page or other item was viewed.\r\n         * @param   name  The string you used as the name in `startTrackPage`. Defaults to the document title.\r\n         * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n         * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         * @param   duration    number - the number of milliseconds it took to load the page. Defaults to undefined. If set to default value, page load time is calculated internally.\r\n         */\r\n        trackPageView(name?: string, url?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }, duration?: number);\r\n\r\n        /**\r\n         * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n         * @param   name    A string that identifies this event uniquely within the document.\r\n         */\r\n        startTrackEvent(name: string);\r\n\r\n\r\n        /**\r\n         * Log an extended event that you started timing with `startTrackEvent`.\r\n         * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n         * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         */\r\n        stopTrackEvent(name: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n        /**\r\n        * Log a user action or other occurrence.\r\n        * @param   name    A string to identify this event in the portal.\r\n        * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n        * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n        */\r\n        trackEvent(name: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n        /**\r\n         * Log a dependency call\r\n         * @param id    unique id, this is used by the backend o correlate server requests. Use Util.newId() to generate a unique Id.\r\n         * @param method    represents request verb (GET, POST, etc.)\r\n         * @param absoluteUrl   absolute url used to make the dependency request\r\n         * @param pathName  the path part of the absolute url\r\n         * @param totalTime total request time\r\n         * @param success   indicates if the request was sessessful\r\n         * @param resultCode    response code returned by the dependency request\r\n         */\r\n        trackDependency(id: string, method: string, absoluteUrl: string, pathName: string, totalTime: number, success: boolean, resultCode: number);\r\n\r\n        /**\r\n         * Log an exception you have caught.\r\n         * @param   exception   An Error from a catch clause, or the string error message.\r\n         * @param   handledAt   Not used\r\n         * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         * @param   severityLevel   AI.SeverityLevel - severity level\r\n         */\r\n        trackException(exception: Error, handledAt?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }, severityLevel?: AI.SeverityLevel);\r\n\r\n        /**\r\n         * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.\r\n         * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the\r\n         * telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.\r\n         * @param   name    A string that identifies the metric.\r\n         * @param   average Number representing either a single measurement, or the average of several measurements.\r\n         * @param   sampleCount The number of measurements represented by the average. Defaults to 1.\r\n         * @param   min The smallest measurement in the sample. Defaults to the average.\r\n         * @param   max The largest measurement in the sample. Defaults to the average.\r\n         */\r\n        trackMetric(name: string, average: number, sampleCount?: number, min?: number, max?: number, properties?: { [name: string]: string; });\r\n\r\n        /**\r\n        * Log a diagnostic message.\r\n        * @param   message A message string\r\n        * @param   properties  map[string, string] - additional data used to filter traces in the portal. Defaults to empty.\r\n        * @param   severityLevel   AI.SeverityLevel - severity level\r\n        */\r\n        trackTrace(message: string, properties?: { [name: string]: string; }, severityLevel?: AI.SeverityLevel);\r\n\r\n\r\n        /**\r\n         * Immediately send all queued telemetry.\r\n         * @param {boolean} async - If flush should be call asynchronously\r\n         */\r\n        flush(async?: boolean);\r\n\r\n\r\n        /**\r\n        * Sets the authenticated user id and the account id in this session.\r\n        * User auth id and account id should be of type string. They should not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\r\n        *\r\n        * @param authenticatedUserId {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n        * @param accountId {string} - An optional string to represent the account associated with the authenticated user.\r\n        */\r\n        setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string);\r\n\r\n\r\n        /**\r\n         * Clears the authenticated user id and the account id from the user context.\r\n         */\r\n        clearAuthenticatedUserContext();\r\n\r\n        /*\r\n        * Downloads and initializes AppInsights. You can override default script download location by specifying url property of `config`.\r\n        */\r\n        downloadAndSetup?(config: Microsoft.ApplicationInsights.IConfig): void;\r\n\r\n        /**\r\n         * The custom error handler for Application Insights\r\n         * @param {string} message - The error message\r\n         * @param {string} url - The url where the error was raised\r\n         * @param {number} lineNumber - The line number where the error was raised\r\n         * @param {number} columnNumber - The column number for the line where the error was raised\r\n         * @param {Error}  error - The Error object\r\n         */\r\n        _onerror(message: string, url: string, lineNumber: number, columnNumber: number, error: Error);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\"\r\n\r\n    export class UtilHelpers {\r\n\r\n        /**\r\n         * generate random id string\r\n         */\r\n        public static newId() {\r\n            var base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n            var result = \"\";\r\n            // tslint:disable-next-line:insecure-random\r\n            var random = Math.random() * 1073741824; //5 symbols in base64, almost maxint\r\n\r\n            while (random > 0) {\r\n                var char = base64chars.charAt(random % 64);\r\n                result += char;\r\n                random = Math.floor(random / 64);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/IConfig.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/IAppInsights.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK/UtilHelpers.ts\"/>\r\n\r\n\"use strict\";\r\n\r\nclass AppInsightsModule {\r\n\r\n    private static appInsightsInitialized: boolean = false;\r\n    private static appInsightsName = \"appInsights\";\r\n\r\n    private static _createLazyMethod(name) {\r\n        var aiObject = window[AppInsightsModule.appInsightsName];\r\n\r\n        // Define a temporary method that queues-up a the real method call\r\n        aiObject[name] = function () {\r\n            // Capture the original arguments passed to the method\r\n            var originalArguments = arguments;\r\n            // If the queue is available, it means that the function wasn't yet replaced with actual function value\r\n            if (aiObject.queue) {\r\n                aiObject.queue.push(() => aiObject[name].apply(aiObject, originalArguments));\r\n            }\r\n            else {\r\n                // otherwise execute the function\r\n                aiObject[name].apply(aiObject, originalArguments);\r\n            }\r\n        }\r\n    };\r\n\r\n    private static _defineLazyMethods() {\r\n        var aiObject = window[AppInsightsModule.appInsightsName];\r\n\r\n        // capture initial cookie if possible\r\n        try {\r\n            (<any>aiObject).cookie = document.cookie;\r\n        }\r\n        catch (e) {\r\n        }\r\n\r\n        aiObject.queue = [];\r\n\r\n        var method = [\r\n            \"clearAuthenticatedUserContext\",\r\n            \"flush\",\r\n            \"setAuthenticatedUserContext\",\r\n            \"startTrackEvent\",\r\n            \"startTrackPage\",\r\n            \"stopTrackEvent\",\r\n            \"stopTrackPage\",\r\n            \"trackDependency\",\r\n            \"trackEvent\",\r\n            \"trackException\",\r\n            \"trackMetric\",\r\n            \"trackPageView\",\r\n            \"trackTrace\"\r\n        ];\r\n\r\n        while (method.length) {\r\n            AppInsightsModule._createLazyMethod(method.pop());\r\n        }\r\n    }\r\n\r\n    private static _download(aiConfig: Microsoft.ApplicationInsights.IConfig) {\r\n        AppInsightsModule.getAppInsightsInstance().config = aiConfig;\r\n        var aiObject = window[AppInsightsModule.appInsightsName];\r\n\r\n        // if script was previously downloaded and initialized, queue will be deleted, reinitialize it\r\n        if (!aiObject.queue) {\r\n            aiObject.queue = [];\r\n        }\r\n\r\n        setTimeout(function () {\r\n            var scriptElement = document.createElement(\"script\");\r\n            scriptElement.src = aiConfig.url || \"https://az416426.vo.msecnd.net/scripts/a/ai.0.js\";\r\n            document.head.appendChild(scriptElement);\r\n        });\r\n\r\n        // collect global errors by wrapping the window.onerror method\r\n        if (!aiConfig.disableExceptionTracking) {\r\n            let method = \"onerror\";\r\n            AppInsightsModule._createLazyMethod(\"_\" + method);\r\n            var originalOnError = window[method];\r\n            window[method] = function (message, url, lineNumber, columnNumber, error) {\r\n                var handled = originalOnError && originalOnError(message, url, lineNumber, columnNumber, error);\r\n                if (handled !== true) {\r\n                    aiObject[\"_\" + method](message, url, lineNumber, columnNumber, error);\r\n                }\r\n\r\n                return handled;\r\n            };\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * This property returns the current instance of the appInsights, the property is optional as\r\n     * it will only defined when running in an ES5+ browser, if your users are using an ES3 browser \r\n     * (IE8) you should use the function getter(getAppInsightsInstance()) instead.\r\n     * This change was added in Nov'19 and may not be published -- check your deployed version\r\n     */\r\n    public static readonly appInsightsInstance?: Microsoft.ApplicationInsights.IAppInsights;\r\n\r\n    public static getAppInsightsInstance(): Microsoft.ApplicationInsights.IAppInsights {\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n        if (!window[AppInsightsModule.appInsightsName]) {\r\n            window[AppInsightsModule.appInsightsName] = {\r\n                downloadAndSetup: AppInsightsModule._download,\r\n                // exposing it for unit tests only, not part of interface\r\n                _defineLazyMethods: AppInsightsModule._defineLazyMethods\r\n            };\r\n            AppInsightsModule._defineLazyMethods();\r\n        }\r\n        return window[AppInsightsModule.appInsightsName];\r\n    }\r\n\r\n    /**\r\n     * Static constructor, attempt to ES5 get accessor\r\n     */\r\n    private static _staticInit = (() => {\r\n        // Dynamically create get/set property accessors\r\n\r\n        let defineProp = Object[\"defineProperty\"];\r\n        try {\r\n            defineProp && defineProp(AppInsightsModule.prototype, \"appInsightsInstance\", {\r\n                get: AppInsightsModule.getAppInsightsInstance,\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n        } catch (e) {\r\n            // IE8 Defines a defineProperty on Object but it's only supported for DOM elements so it will throw\r\n            // We will just ignore this here.\r\n        }\r\n    })();\r\n}\r\n\r\nexport var AppInsights: Microsoft.ApplicationInsights.IAppInsights = AppInsightsModule.getAppInsightsInstance();\r\nexport var Util: typeof Microsoft.ApplicationInsights.UtilHelpers;\r\n"]}