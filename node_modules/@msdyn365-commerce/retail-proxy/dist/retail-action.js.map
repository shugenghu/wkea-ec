{"version":3,"file":"retail-action.js","sourceRoot":"","sources":["../src/retail-action.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAG7C;;GAEG;AACH,MAAM,UAAU,YAAY,CAAI,KAA0B,EAAE,aAAsB;IAC9E,OAAO,KAAK,CAAC,OAAO,CAAI,aAAa,CAAC,CAAC;AAC3C,CAAC;AAED,YAAY,CAAC,SAAS,GAAG;IACrB,QAAQ,EAAE,IAAI;IACd,YAAY,EAAE,IAAI;CACrB,CAAC;AAEF,MAAM,UAAU,mBAAmB,CAAO,OAA4B,EAAE,aAAkB;IACtF,OAAO,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAO,aAAa,CAAC,CAAC;AAC/H,CAAC;AAED,MAAM,UAAU,aAAa,CAAO,OAA4B,EAAE,OAAY;IAC1E,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;KAClE;IAED,IAAI,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,aAAa,CAAC,WAAW,EAAE;QAC5D,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACtE,OAAO,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;KACnE;SAAM,IAAI,OAAO,CAAC,WAAW,EAAE;QAC5B,OAAO,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;KACrD;IAED,OAAO,IAAI,WAAW,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC7C,OAAO;aACF,OAAO,CAAO,OAAO,CAAC;aACtB,IAAI,CAAC,MAAM,CAAC,EAAE;YACX,OAAO,CAAC,MAAM,CAAC,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE;YACX,MAAM,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { AsyncResult } from './async-result';\nimport { IDataServiceRequest } from './Interfaces';\n\n/**\n * Calls the Retail action\n */\nexport function retailAction<T>(input: IDataServiceRequest, callerContext: unknown): Promise<T> {\n    return input.execute<T>(callerContext);\n}\n\nretailAction.prototype = {\n    isAction: true,\n    isObservable: true\n};\n\nexport function callActionOrExecute<TOut>(request: IDataServiceRequest, callerContext: any): AsyncResult<TOut> {\n    return callerContext.chainAction ? callerContext.chainAction(retailAction, request) : request.execute<TOut>(callerContext);\n}\n\nexport function executeAction<TOut>(request: IDataServiceRequest, context: any): AsyncResult<TOut> {\n    if (!context) {\n        throw new Error('context is undefined while executing action');\n    }\n\n    if (context.callerContext && context.callerContext.chainAction) {\n        context.bypassCache && request.overrideCacheType(context.bypassCache);\n        return context.callerContext.chainAction(retailAction, request);\n    } else if (context.chainAction) {\n        return context.chainAction(retailAction, request);\n    }\n\n    return new AsyncResult<TOut>((resolve, reject) => {\n        request\n            .execute<TOut>(context)\n            .then(result => {\n                resolve(result);\n            })\n            .catch(error => {\n                reject(error);\n            });\n    });\n}\n"]}