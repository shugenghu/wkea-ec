import { DataServiceQuery } from '../DataServiceQuery';
import { ReceiptMaskClass, PaymentMerchantInformationClass, StoreSafeClass, ShiftReconciliationLineClass, SearchSuggestionClass, DeviceActivationResultClass, CreateHardwareStationTokenResultClass, ValidateHardwareStationTokenResultClass, BarcodeClass, ButtonGridClass, CardTypeInfoClass, CityInfoClass, CountryRegionInfoClass, CountyInfoClass, CreditMemoClass, DataDownloadParametersClass, DataUploadParametersClass, DownloadSessionClass, NumberSequenceSeedDataClass, ReceiptNumberResetInfoClass, LoyaltyRewardPointActivityClass, CurrencyAmountClass, DiscountCodeClass, DistrictInfoClass, HardwareStationProfileClass, HardwareProfileClass, LocalizedStringClass, OperationPermissionClass, ReasonCodeClass, ReportDataSetClass, IncomeExpenseAccountClass, StateProvinceInfoClass, ZipCodeInfoClass, KitTransactionClass, LoyaltyCardClass, LoyaltyCardTransactionClass, TransactionClass, GiftCardClass, NonSalesTransactionClass, DropAndDeclareTransactionClass, TaxOverrideClass, CustomerBalancesClass, LinkToExistingCustomerResultClass, OfflineSyncStatsLineClass, StorageAccessTokenClass, FrameworkClass, TaskGuidesSearchResultClass, RecordingClass, AttributeDefinitionClass, AttributeGroupDefinitionClass, AuditEventClass, InventoryAvailableToPromiseClass, SalesOrderClass, NotificationItemClass, FiscalIntegrationDocumentClass, FiscalIntegrationRegistrationProcessClass, FiscalIntegrationSupportedEventsClass, FiscalIntegrationTechnicalProfileClass, FiscalIntegrationServiceStatusClass, FiscalIntegrationServiceCommunicationResultClass, FeatureStateClass, FiscalIntegrationSequentialSignatureDataClass, PromotionClass, FiscalTransactionClass, CashDeclarationClass, CustomerGroupClass, DeliveryOptionClass, ChannelIdentityClass, EnvironmentConfigurationClass, SearchConfigurationClass, ExtensionPackageDefinitionClass, ExtensionProfileClass, DeviceConfigurationClass, VisualProfileClass, SupportedLanguageClass, AffiliationClass, SalesTaxGroupClass, TenderTypeClass, UnitOfMeasureClass, CurrencyClass, CommissionSalesGroupClass, ChannelInventoryConfigurationClass, DeviceClass, UserDefinedSecretCertificateResultClass, MediaBlobClass, ExtensibleEnumerationContainerClass, AddressPurposeClass, ReturnPolicyClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function storeQuery() {
    return new DataServiceQuery();
}
export function createRoundAmountByTenderTypeInput(amount, tenderTypeId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('RoundAmountByTenderType', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { amount: amount, tenderTypeId: tenderTypeId });
}
export function roundAmountByTenderTypeAsync(context, amount, tenderTypeId) {
    const request = createRoundAmountByTenderTypeInput(amount, tenderTypeId);
    return executeAction(request, context);
}
export function createVoidSuspendedTransactionsInput(suspendedCartIds, shiftId, shiftTerminalId, reasonCodeLines) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('VoidSuspendedTransactions', true, '', '', { bypassCache: 'get', returnEntity: '' }, { suspendedCartIds: suspendedCartIds, shiftId: shiftId, shiftTerminalId: shiftTerminalId, reasonCodeLines: reasonCodeLines });
}
export function voidSuspendedTransactionsAsync(context, suspendedCartIds, shiftId, shiftTerminalId, reasonCodeLines) {
    const request = createVoidSuspendedTransactionsInput(suspendedCartIds, shiftId, shiftTerminalId, reasonCodeLines);
    return executeAction(request, context);
}
export function createGetMerchantPropertiesByServiceAccountIdInput(queryResultSettings, serviceAccountIds) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetMerchantPropertiesByServiceAccountId', true, PaymentMerchantInformationClass, 'true', { bypassCache: 'none', returnEntity: 'PaymentMerchantInformation' }, { serviceAccountIds: serviceAccountIds });
}
export function getMerchantPropertiesByServiceAccountIdAsync(context, serviceAccountIds) {
    const request = createGetMerchantPropertiesByServiceAccountIdInput(context.queryResultSettings, serviceAccountIds);
    return executeAction(request, context);
}
export function createGetStoreSafesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetStoreSafes', true, StoreSafeClass, 'true', { bypassCache: 'none', returnEntity: 'StoreSafe' }, {});
}
export function getStoreSafesAsync(context) {
    const request = createGetStoreSafesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetShiftReconciliationLinesInput(queryResultSettings, shiftReconciliationLineRetrievalCriteria) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetShiftReconciliationLines', true, ShiftReconciliationLineClass, 'true', { bypassCache: 'none', returnEntity: 'ShiftReconciliationLine' }, { shiftReconciliationLineRetrievalCriteria: shiftReconciliationLineRetrievalCriteria });
}
export function getShiftReconciliationLinesAsync(context, shiftReconciliationLineRetrievalCriteria) {
    const request = createGetShiftReconciliationLinesInput(context.queryResultSettings, shiftReconciliationLineRetrievalCriteria);
    return executeAction(request, context);
}
export function createReconcileLinesInput(shiftReconciliationLines, description) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('ReconcileLines', true, '', '', { bypassCache: 'get', returnEntity: '' }, { shiftReconciliationLines: shiftReconciliationLines, Description: description });
}
export function reconcileLinesAsync(context, shiftReconciliationLines, description) {
    const request = createReconcileLinesInput(shiftReconciliationLines, description);
    return executeAction(request, context);
}
export function createUndoReconciliationInput(shiftReconciliationLines) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('UndoReconciliation', true, '', '', { bypassCache: 'get', returnEntity: '' }, { shiftReconciliationLines: shiftReconciliationLines });
}
export function undoReconciliationAsync(context, shiftReconciliationLines) {
    const request = createUndoReconciliationInput(shiftReconciliationLines);
    return executeAction(request, context);
}
export function createGetReceiptMasksInput(queryResultSettings, receiptTransactionType) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetReceiptMasks', true, ReceiptMaskClass, 'true', { bypassCache: 'none', returnEntity: 'ReceiptMask' }, { receiptTransactionType: receiptTransactionType });
}
export function getReceiptMasksAsync(context, receiptTransactionType) {
    const request = createGetReceiptMasksInput(context.queryResultSettings, receiptTransactionType);
    return executeAction(request, context);
}
export function createGetSearchSuggestionsInput(queryResultSettings, searchSuggestionCriteria) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetSearchSuggestions', true, SearchSuggestionClass, 'true', { bypassCache: 'none', returnEntity: 'SearchSuggestion' }, { searchSuggestionCriteria: searchSuggestionCriteria });
}
export function getSearchSuggestionsAsync(context, searchSuggestionCriteria) {
    const request = createGetSearchSuggestionsInput(context.queryResultSettings, searchSuggestionCriteria);
    return executeAction(request, context);
}
export function createStartSessionInput(transactionId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('StartSession', true, '', '', { bypassCache: 'get', returnEntity: '' }, { transactionId: transactionId });
}
export function startSessionAsync(context, transactionId) {
    const request = createStartSessionInput(transactionId);
    return executeAction(request, context);
}
export function createEndSessionInput(transactionId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('EndSession', true, '', '', { bypassCache: 'get', returnEntity: '' }, { transactionId: transactionId });
}
export function endSessionAsync(context, transactionId) {
    const request = createEndSessionInput(transactionId);
    return executeAction(request, context);
}
export function createActivateDeviceInput(deviceNumber, terminalId, deviceId, forceActivate, deviceType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('ActivateDevice', true, DeviceActivationResultClass, 'false', { bypassCache: 'get', returnEntity: 'DeviceActivationResult' }, { deviceNumber: deviceNumber, terminalId: terminalId, deviceId: deviceId, forceActivate: forceActivate, deviceType: deviceType });
}
export function activateDeviceAsync(context, deviceNumber, terminalId, deviceId, forceActivate, deviceType) {
    const request = createActivateDeviceInput(deviceNumber, terminalId, deviceId, forceActivate, deviceType);
    return executeAction(request, context);
}
export function createMassActivateDeviceInput(deviceNumber, terminalId, deviceId, deviceType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('MassActivateDevice', true, DeviceActivationResultClass, 'false', { bypassCache: 'get', returnEntity: 'DeviceActivationResult' }, { deviceNumber: deviceNumber, terminalId: terminalId, deviceId: deviceId, deviceType: deviceType });
}
export function massActivateDeviceAsync(context, deviceNumber, terminalId, deviceId, deviceType) {
    const request = createMassActivateDeviceInput(deviceNumber, terminalId, deviceId, deviceType);
    return executeAction(request, context);
}
export function createDeactivateDeviceInput(transactionId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('DeactivateDevice', true, '', '', { bypassCache: 'get', returnEntity: '' }, { transactionId: transactionId });
}
export function deactivateDeviceAsync(context, transactionId) {
    const request = createDeactivateDeviceInput(transactionId);
    return executeAction(request, context);
}
export function createCreateHardwareStationTokenInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('CreateHardwareStationToken', true, CreateHardwareStationTokenResultClass, 'false', { bypassCache: 'get', returnEntity: 'CreateHardwareStationTokenResult' }, {});
}
export function createHardwareStationTokenAsync(context) {
    const request = createCreateHardwareStationTokenInput();
    return executeAction(request, context);
}
export function createValidateHardwareStationTokenInput(deviceNumber, hardwareStationToken) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('ValidateHardwareStationToken', true, ValidateHardwareStationTokenResultClass, 'false', { bypassCache: 'get', returnEntity: 'ValidateHardwareStationTokenResult' }, { deviceNumber: deviceNumber, hardwareStationToken: hardwareStationToken });
}
export function validateHardwareStationTokenAsync(context, deviceNumber, hardwareStationToken) {
    const request = createValidateHardwareStationTokenInput(deviceNumber, hardwareStationToken);
    return executeAction(request, context);
}
export function createGetBarcodeByIdInput(barcodeId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetBarcodeById', true, BarcodeClass, 'false', { bypassCache: 'none', returnEntity: 'Barcode' }, { barcodeId: barcodeId });
}
export function getBarcodeByIdAsync(context, barcodeId) {
    const request = createGetBarcodeByIdInput(barcodeId);
    return executeAction(request, context);
}
export function createGetButtonGridByIdInput(buttonGridId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetButtonGridById', true, ButtonGridClass, 'false', { bypassCache: 'none', returnEntity: 'ButtonGrid' }, { buttonGridId: buttonGridId });
}
export function getButtonGridByIdAsync(context, buttonGridId) {
    const request = createGetButtonGridByIdInput(buttonGridId);
    return executeAction(request, context);
}
export function createGetButtonGridsByIdsInput(queryResultSettings, getButtonGridsByIdsCriteria) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetButtonGridsByIds', true, ButtonGridClass, 'true', { bypassCache: 'none', returnEntity: 'ButtonGrid' }, { getButtonGridsByIdsCriteria: getButtonGridsByIdsCriteria });
}
export function getButtonGridsByIdsAsync(context, getButtonGridsByIdsCriteria) {
    const request = createGetButtonGridsByIdsInput(context.queryResultSettings, getButtonGridsByIdsCriteria);
    return executeAction(request, context);
}
export function createGetCardTypesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCardTypes', true, CardTypeInfoClass, 'true', { bypassCache: 'none', returnEntity: 'CardTypeInfo' }, {});
}
export function getCardTypesAsync(context) {
    const request = createGetCardTypesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createResolveCardTypesInput(queryResultSettings, cardNumberPrefix, cardType, paymentToken) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('ResolveCardTypes', true, CardTypeInfoClass, 'true', { bypassCache: 'get', returnEntity: 'CardTypeInfo' }, { cardNumberPrefix: cardNumberPrefix, cardType: cardType, paymentToken: paymentToken });
}
export function resolveCardTypesAsync(context, cardNumberPrefix, cardType, paymentToken) {
    const request = createResolveCardTypesInput(context.queryResultSettings, cardNumberPrefix, cardType, paymentToken);
    return executeAction(request, context);
}
export function createGetSupportedPaymentCardTypesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetSupportedPaymentCardTypes', true, '', 'true', { bypassCache: 'none', returnEntity: '' }, {});
}
export function getSupportedPaymentCardTypesAsync(context) {
    const request = createGetSupportedPaymentCardTypesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCitiesInput(queryResultSettings, countryRegionId, stateProvinceId, countyId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCities', true, CityInfoClass, 'true', { bypassCache: 'none', returnEntity: 'CityInfo' }, { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId });
}
export function getCitiesAsync(context, countryRegionId, stateProvinceId, countyId) {
    const request = createGetCitiesInput(context.queryResultSettings, countryRegionId, stateProvinceId, countyId);
    return executeAction(request, context);
}
export function createGetCountryRegionsForShippingInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCountryRegionsForShipping', false, CountryRegionInfoClass, 'true', { bypassCache: 'none', returnEntity: 'CountryRegionInfo' }, {});
}
export function getCountryRegionsForShippingAsync(context) {
    const request = createGetCountryRegionsForShippingInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCountryRegionsByLanguageIdInput(queryResultSettings, languageId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCountryRegionsByLanguageId', true, CountryRegionInfoClass, 'true', { bypassCache: 'none', returnEntity: 'CountryRegionInfo' }, { languageId: languageId });
}
export function getCountryRegionsByLanguageIdAsync(context, languageId) {
    const request = createGetCountryRegionsByLanguageIdInput(context.queryResultSettings, languageId);
    return executeAction(request, context);
}
export function createGetCountiesInput(queryResultSettings, countryRegionId, stateProvinceId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCounties', true, CountyInfoClass, 'true', { bypassCache: 'none', returnEntity: 'CountyInfo' }, { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId });
}
export function getCountiesAsync(context, countryRegionId, stateProvinceId) {
    const request = createGetCountiesInput(context.queryResultSettings, countryRegionId, stateProvinceId);
    return executeAction(request, context);
}
export function createGetCreditMemoByIdInput(creditMemoId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetCreditMemoById', true, CreditMemoClass, 'false', { bypassCache: 'none', returnEntity: 'CreditMemo' }, { creditMemoId: creditMemoId });
}
export function getCreditMemoByIdAsync(context, creditMemoId) {
    const request = createGetCreditMemoByIdInput(creditMemoId);
    return executeAction(request, context);
}
export function createGetDownloadIntervalInput(dataStoreName) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetDownloadInterval', true, '', 'false', { bypassCache: 'none', returnEntity: '' }, { dataStoreName: dataStoreName });
}
export function getDownloadIntervalAsync(context, dataStoreName) {
    const request = createGetDownloadIntervalInput(dataStoreName);
    return executeAction(request, context);
}
export function createGetTerminalDataStoreNameInput(terminalId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetTerminalDataStoreName', true, '', 'false', { bypassCache: 'none', returnEntity: '' }, { terminalId: terminalId });
}
export function getTerminalDataStoreNameAsync(context, terminalId) {
    const request = createGetTerminalDataStoreNameInput(terminalId);
    return executeAction(request, context);
}
export function createGetDownloadLinkInput(dataStoreName, downloadSessionId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetDownloadLink', true, '', 'false', { bypassCache: 'none', returnEntity: '' }, { dataStoreName: dataStoreName, downloadSessionId: downloadSessionId });
}
export function getDownloadLinkAsync(context, dataStoreName, downloadSessionId) {
    const request = createGetDownloadLinkInput(dataStoreName, downloadSessionId);
    return executeAction(request, context);
}
export function createGetDataDownloadParametersByTerminalInput(terminalDataDownloadRequestInfo) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetDataDownloadParametersByTerminal', true, DataDownloadParametersClass, 'false', { bypassCache: 'none', returnEntity: 'DataDownloadParameters' }, { TerminalDataDownloadRequestInfo: terminalDataDownloadRequestInfo });
}
export function getDataDownloadParametersByTerminalAsync(context, terminalDataDownloadRequestInfo) {
    const request = createGetDataDownloadParametersByTerminalInput(terminalDataDownloadRequestInfo);
    return executeAction(request, context);
}
export function createGetDataUploadParametersByTerminalInput(terminalDataUploadRequestInfo) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetDataUploadParametersByTerminal', true, DataUploadParametersClass, 'false', { bypassCache: 'none', returnEntity: 'DataUploadParameters' }, { TerminalDataUploadRequestInfo: terminalDataUploadRequestInfo });
}
export function getDataUploadParametersByTerminalAsync(context, terminalDataUploadRequestInfo) {
    const request = createGetDataUploadParametersByTerminalInput(terminalDataUploadRequestInfo);
    return executeAction(request, context);
}
export function createGetDownloadSessionsInput(queryResultSettings, dataStoreName) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDownloadSessions', true, DownloadSessionClass, 'true', { bypassCache: 'none', returnEntity: 'DownloadSession' }, { dataStoreName: dataStoreName });
}
export function getDownloadSessionsAsync(context, dataStoreName) {
    const request = createGetDownloadSessionsInput(context.queryResultSettings, dataStoreName);
    return executeAction(request, context);
}
export function createGetInitialDownloadSessionsInput(queryResultSettings, dataStoreName) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetInitialDownloadSessions', true, DownloadSessionClass, 'true', { bypassCache: 'none', returnEntity: 'DownloadSession' }, { dataStoreName: dataStoreName });
}
export function getInitialDownloadSessionsAsync(context, dataStoreName) {
    const request = createGetInitialDownloadSessionsInput(context.queryResultSettings, dataStoreName);
    return executeAction(request, context);
}
export function createGetUploadJobDefinitionsInput(queryResultSettings, dataStoreName) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetUploadJobDefinitions', true, '', 'true', { bypassCache: 'none', returnEntity: '' }, { dataStoreName: dataStoreName });
}
export function getUploadJobDefinitionsAsync(context, dataStoreName) {
    const request = createGetUploadJobDefinitionsInput(context.queryResultSettings, dataStoreName);
    return executeAction(request, context);
}
export function createGetUploadIntervalInput(dataStoreName) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetUploadInterval', true, '', 'false', { bypassCache: 'none', returnEntity: '' }, { dataStoreName: dataStoreName });
}
export function getUploadIntervalAsync(context, dataStoreName) {
    const request = createGetUploadIntervalInput(dataStoreName);
    return executeAction(request, context);
}
export function createPostOfflineTransactionsInput(offlineTransactionForMPOS) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('PostOfflineTransactions', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { offlineTransactionForMPOS: offlineTransactionForMPOS });
}
export function postOfflineTransactionsAsync(context, offlineTransactionForMPOS) {
    const request = createPostOfflineTransactionsInput(offlineTransactionForMPOS);
    return executeAction(request, context);
}
export function createGetRetailTrialPlanOfferInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetRetailTrialPlanOffer', true, '', 'false', { bypassCache: 'none', returnEntity: '' }, {});
}
export function getRetailTrialPlanOfferAsync(context) {
    const request = createGetRetailTrialPlanOfferInput();
    return executeAction(request, context);
}
export function createGetLatestNumberSequenceInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLatestNumberSequence', true, NumberSequenceSeedDataClass, 'true', { bypassCache: 'none', returnEntity: 'NumberSequenceSeedData' }, {});
}
export function getLatestNumberSequenceAsync(context) {
    const request = createGetLatestNumberSequenceInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetReceiptNumberResetInfoInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetReceiptNumberResetInfo', true, ReceiptNumberResetInfoClass, 'true', { bypassCache: 'none', returnEntity: 'ReceiptNumberResetInfo' }, {});
}
export function getReceiptNumberResetInfoAsync(context) {
    const request = createGetReceiptNumberResetInfoInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetLoyaltyRewardPointActivityTimelineInput(queryResultSettings, cardNumber, rewardPointId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLoyaltyRewardPointActivityTimeline', true, LoyaltyRewardPointActivityClass, 'true', { bypassCache: 'none', returnEntity: 'LoyaltyRewardPointActivity' }, { cardNumber: cardNumber, rewardPointId: rewardPointId });
}
export function getLoyaltyRewardPointActivityTimelineAsync(context, cardNumber, rewardPointId) {
    const request = createGetLoyaltyRewardPointActivityTimelineInput(context.queryResultSettings, cardNumber, rewardPointId);
    return executeAction(request, context);
}
export function createGetLoyaltyRewardPointActivityTimelineForExpiredPointsInput(queryResultSettings, cardNumber, rewardPointId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLoyaltyRewardPointActivityTimelineForExpiredPoints', true, LoyaltyRewardPointActivityClass, 'true', { bypassCache: 'none', returnEntity: 'LoyaltyRewardPointActivity' }, { cardNumber: cardNumber, rewardPointId: rewardPointId });
}
export function getLoyaltyRewardPointActivityTimelineForExpiredPointsAsync(context, cardNumber, rewardPointId) {
    const request = createGetLoyaltyRewardPointActivityTimelineForExpiredPointsInput(context.queryResultSettings, cardNumber, rewardPointId);
    return executeAction(request, context);
}
export function createCalculateTotalCurrencyAmountInput(currenciesAmount) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('CalculateTotalCurrencyAmount', true, CurrencyAmountClass, 'false', { bypassCache: 'get', returnEntity: 'CurrencyAmount' }, { currenciesAmount: currenciesAmount });
}
export function calculateTotalCurrencyAmountAsync(context, currenciesAmount) {
    const request = createCalculateTotalCurrencyAmountInput(currenciesAmount);
    return executeAction(request, context);
}
export function createGetDiscountCodeInput(discountCode) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetDiscountCode', true, DiscountCodeClass, 'false', { bypassCache: 'none', returnEntity: 'DiscountCode' }, { discountCode: discountCode });
}
export function getDiscountCodeAsync(context, discountCode) {
    const request = createGetDiscountCodeInput(discountCode);
    return executeAction(request, context);
}
export function createGetDiscountCodesByOfferIdInput(queryResultSettings, offerId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDiscountCodesByOfferId', true, DiscountCodeClass, 'true', { bypassCache: 'none', returnEntity: 'DiscountCode' }, { offerId: offerId });
}
export function getDiscountCodesByOfferIdAsync(context, offerId) {
    const request = createGetDiscountCodesByOfferIdInput(context.queryResultSettings, offerId);
    return executeAction(request, context);
}
export function createGetDiscountCodesByKeywordInput(queryResultSettings, keyword, activeDate) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDiscountCodesByKeyword', true, DiscountCodeClass, 'true', { bypassCache: 'none', returnEntity: 'DiscountCode' }, { keyword: keyword, activeDate: activeDate });
}
export function getDiscountCodesByKeywordAsync(context, keyword, activeDate) {
    const request = createGetDiscountCodesByKeywordInput(context.queryResultSettings, keyword, activeDate);
    return executeAction(request, context);
}
export function createGetDistrictsInput(queryResultSettings, countryRegionId, stateProvinceId, countyId, cityName) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDistricts', true, DistrictInfoClass, 'true', { bypassCache: 'none', returnEntity: 'DistrictInfo' }, { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId, cityName: cityName });
}
export function getDistrictsAsync(context, countryRegionId, stateProvinceId, countyId, cityName) {
    const request = createGetDistrictsInput(context.queryResultSettings, countryRegionId, stateProvinceId, countyId, cityName);
    return executeAction(request, context);
}
export function createGetHardwareStationProfilesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetHardwareStationProfiles', true, HardwareStationProfileClass, 'true', { bypassCache: 'none', returnEntity: 'HardwareStationProfile' }, {});
}
export function getHardwareStationProfilesAsync(context) {
    const request = createGetHardwareStationProfilesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetHardwareProfileByIdInput(hardwareProfileId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetHardwareProfileById', true, HardwareProfileClass, 'false', { bypassCache: 'none', returnEntity: 'HardwareProfile' }, { hardwareProfileId: hardwareProfileId });
}
export function getHardwareProfileByIdAsync(context, hardwareProfileId) {
    const request = createGetHardwareProfileByIdInput(hardwareProfileId);
    return executeAction(request, context);
}
export function createGetLocalizedStringsInput(queryResultSettings, languageId, textId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLocalizedStrings', true, LocalizedStringClass, 'true', { bypassCache: 'none', returnEntity: 'LocalizedString' }, { languageId: languageId, textId: textId });
}
export function getLocalizedStringsAsync(context, languageId, textId) {
    const request = createGetLocalizedStringsInput(context.queryResultSettings, languageId, textId);
    return executeAction(request, context);
}
export function createGetOperationPermissionByIdInput(operationId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetOperationPermissionById', true, OperationPermissionClass, 'false', { bypassCache: 'none', returnEntity: 'OperationPermission' }, { operationId: operationId });
}
export function getOperationPermissionByIdAsync(context, operationId) {
    const request = createGetOperationPermissionByIdInput(operationId);
    return executeAction(request, context);
}
export function createGetReasonCodesByIdInput(queryResultSettings, reasonCodeGroupId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetReasonCodesById', true, ReasonCodeClass, 'true', { bypassCache: 'none', returnEntity: 'ReasonCode' }, { reasonCodeGroupId: reasonCodeGroupId });
}
export function getReasonCodesByIdAsync(context, reasonCodeGroupId) {
    const request = createGetReasonCodesByIdInput(context.queryResultSettings, reasonCodeGroupId);
    return executeAction(request, context);
}
export function createSearchReportDataSetInput(reportId, parameters) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('SearchReportDataSet', true, ReportDataSetClass, 'false', { bypassCache: 'none', returnEntity: 'ReportDataSet' }, { reportId: reportId, parameters: parameters });
}
export function searchReportDataSetAsync(context, reportId, parameters) {
    const request = createSearchReportDataSetInput(reportId, parameters);
    return executeAction(request, context);
}
export function createGetReportDataSetByIdInput(reportId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetReportDataSetById', true, ReportDataSetClass, 'false', { bypassCache: 'none', returnEntity: 'ReportDataSet' }, { reportId: reportId });
}
export function getReportDataSetByIdAsync(context, reportId) {
    const request = createGetReportDataSetByIdInput(reportId);
    return executeAction(request, context);
}
export function createGetSrsReportDataSetInput(reportId, parameters) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetSrsReportDataSet', true, ReportDataSetClass, 'false', { bypassCache: 'none', returnEntity: 'ReportDataSet' }, { reportId: reportId, parameters: parameters });
}
export function getSrsReportDataSetAsync(context, reportId, parameters) {
    const request = createGetSrsReportDataSetInput(reportId, parameters);
    return executeAction(request, context);
}
export function createGetIncomeExpenseAccountsInput(queryResultSettings, incomeExpenseAccountType) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetIncomeExpenseAccounts', true, IncomeExpenseAccountClass, 'true', { bypassCache: 'none', returnEntity: 'IncomeExpenseAccount' }, { incomeExpenseAccountType: incomeExpenseAccountType });
}
export function getIncomeExpenseAccountsAsync(context, incomeExpenseAccountType) {
    const request = createGetIncomeExpenseAccountsInput(context.queryResultSettings, incomeExpenseAccountType);
    return executeAction(request, context);
}
export function createGetStateProvincesInput(queryResultSettings, countryRegionId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetStateProvinces', true, StateProvinceInfoClass, 'true', { bypassCache: 'none', returnEntity: 'StateProvinceInfo' }, { countryRegionId: countryRegionId });
}
export function getStateProvincesAsync(context, countryRegionId) {
    const request = createGetStateProvincesInput(context.queryResultSettings, countryRegionId);
    return executeAction(request, context);
}
export function createGetZipCodesInput(queryResultSettings, countryRegionId, stateProvinceId, countyId, cityName, district) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetZipCodes', true, ZipCodeInfoClass, 'true', { bypassCache: 'none', returnEntity: 'ZipCodeInfo' }, { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId, cityName: cityName, district: district });
}
export function getZipCodesAsync(context, countryRegionId, stateProvinceId, countyId, cityName, district) {
    const request = createGetZipCodesInput(context.queryResultSettings, countryRegionId, stateProvinceId, countyId, cityName, district);
    return executeAction(request, context);
}
export function createGetAddressFromZipCodeInput(queryResultSettings, countryRegionId, zipPostalCode) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAddressFromZipCode', true, ZipCodeInfoClass, 'true', { bypassCache: 'none', returnEntity: 'ZipCodeInfo' }, { countryRegionId: countryRegionId, zipPostalCode: zipPostalCode });
}
export function getAddressFromZipCodeAsync(context, countryRegionId, zipPostalCode) {
    const request = createGetAddressFromZipCodeInput(context.queryResultSettings, countryRegionId, zipPostalCode);
    return executeAction(request, context);
}
export function createDisassembleKitTransactionsInput(kitTransaction) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('DisassembleKitTransactions', true, KitTransactionClass, 'false', { bypassCache: 'get', returnEntity: 'KitTransaction' }, { kitTransaction: kitTransaction });
}
export function disassembleKitTransactionsAsync(context, kitTransaction) {
    const request = createDisassembleKitTransactionsInput(kitTransaction);
    return executeAction(request, context);
}
export function createIssueLoyaltyCardInput(loyaltyCard) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('IssueLoyaltyCard', true, LoyaltyCardClass, 'false', { bypassCache: 'get', returnEntity: 'LoyaltyCard' }, { loyaltyCard: loyaltyCard });
}
export function issueLoyaltyCardAsync(context, loyaltyCard) {
    const request = createIssueLoyaltyCardInput(loyaltyCard);
    return executeAction(request, context);
}
export function createGetLoyaltyCardInput(cardNumber) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetLoyaltyCard', true, LoyaltyCardClass, 'false', { bypassCache: 'none', returnEntity: 'LoyaltyCard' }, { cardNumber: cardNumber });
}
export function getLoyaltyCardAsync(context, cardNumber) {
    const request = createGetLoyaltyCardInput(cardNumber);
    return executeAction(request, context);
}
export function createGetCustomerLoyaltyCardsInput(queryResultSettings, accountNumber) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCustomerLoyaltyCards', true, LoyaltyCardClass, 'true', { bypassCache: 'none', returnEntity: 'LoyaltyCard' }, { accountNumber: accountNumber });
}
export function getCustomerLoyaltyCardsAsync(context, accountNumber) {
    const request = createGetCustomerLoyaltyCardsInput(context.queryResultSettings, accountNumber);
    return executeAction(request, context);
}
export function createGetLoyaltyCardTransactionsInput(queryResultSettings, cardNumber, rewardPointId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLoyaltyCardTransactions', true, LoyaltyCardTransactionClass, 'true', { bypassCache: 'none', returnEntity: 'LoyaltyCardTransaction' }, { cardNumber: cardNumber, rewardPointId: rewardPointId });
}
export function getLoyaltyCardTransactionsAsync(context, cardNumber, rewardPointId) {
    const request = createGetLoyaltyCardTransactionsInput(context.queryResultSettings, cardNumber, rewardPointId);
    return executeAction(request, context);
}
export function createGetLoyaltyRewardPointsExpiringSoonInput(queryResultSettings, cardNumber, rewardPointId, daysToExpiry) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLoyaltyRewardPointsExpiringSoon', true, LoyaltyRewardPointActivityClass, 'true', { bypassCache: 'none', returnEntity: 'LoyaltyRewardPointActivity' }, { cardNumber: cardNumber, rewardPointId: rewardPointId, daysToExpiry: daysToExpiry });
}
export function getLoyaltyRewardPointsExpiringSoonAsync(context, cardNumber, rewardPointId, daysToExpiry) {
    const request = createGetLoyaltyRewardPointsExpiringSoonInput(context.queryResultSettings, cardNumber, rewardPointId, daysToExpiry);
    return executeAction(request, context);
}
export function createSearchJournalTransactionsInput(queryResultSettings, searchCriteria) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchJournalTransactions', true, TransactionClass, 'true', { bypassCache: 'none', returnEntity: 'Transaction' }, { searchCriteria: searchCriteria });
}
export function searchJournalTransactionsAsync(context, searchCriteria) {
    const request = createSearchJournalTransactionsInput(context.queryResultSettings, searchCriteria);
    return executeAction(request, context);
}
export function createGetGiftCardInput(giftCardId, tenderTypeId, pin, expirationMonth, expirationYear) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetGiftCard', true, GiftCardClass, 'false', { bypassCache: 'none', returnEntity: 'GiftCard' }, { giftCardId: giftCardId, tenderTypeId: tenderTypeId, pin: pin, expirationMonth: expirationMonth, expirationYear: expirationYear });
}
export function getGiftCardAsync(context, giftCardId, tenderTypeId, pin, expirationMonth, expirationYear) {
    const request = createGetGiftCardInput(giftCardId, tenderTypeId, pin, expirationMonth, expirationYear);
    return executeAction(request, context);
}
export function createGetGiftCardInquiryInput(giftCardId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetGiftCardInquiry', true, GiftCardClass, 'false', { bypassCache: 'none', returnEntity: 'GiftCard' }, { giftCardId: giftCardId });
}
export function getGiftCardInquiryAsync(context, giftCardId) {
    const request = createGetGiftCardInquiryInput(giftCardId);
    return executeAction(request, context);
}
export function createGetNonSalesTransactionsInput(queryResultSettings, shiftId, shiftTerminalId, nonSalesTenderTypeValue) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetNonSalesTransactions', true, NonSalesTransactionClass, 'true', { bypassCache: 'none', returnEntity: 'NonSalesTransaction' }, { shiftId: shiftId, shiftTerminalId: shiftTerminalId, nonSalesTenderTypeValue: nonSalesTenderTypeValue });
}
export function getNonSalesTransactionsAsync(context, shiftId, shiftTerminalId, nonSalesTenderTypeValue) {
    const request = createGetNonSalesTransactionsInput(context.queryResultSettings, shiftId, shiftTerminalId, nonSalesTenderTypeValue);
    return executeAction(request, context);
}
export function createCreateNonSalesTransactionInput(nonSalesTransaction) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('CreateNonSalesTransaction', true, NonSalesTransactionClass, 'false', { bypassCache: 'get', returnEntity: 'NonSalesTransaction' }, { nonSalesTransaction: nonSalesTransaction });
}
export function createNonSalesTransactionAsync(context, nonSalesTransaction) {
    const request = createCreateNonSalesTransactionInput(nonSalesTransaction);
    return executeAction(request, context);
}
export function createCreateDropAndDeclareTransactionInput(dropAndDeclareTransaction) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('CreateDropAndDeclareTransaction', true, DropAndDeclareTransactionClass, 'false', { bypassCache: 'get', returnEntity: 'DropAndDeclareTransaction' }, { dropAndDeclareTransaction: dropAndDeclareTransaction });
}
export function createDropAndDeclareTransactionAsync(context, dropAndDeclareTransaction) {
    const request = createCreateDropAndDeclareTransactionInput(dropAndDeclareTransaction);
    return executeAction(request, context);
}
export function createGetTaxOverridesInput(queryResultSettings, overrideBy) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetTaxOverrides', true, TaxOverrideClass, 'true', { bypassCache: 'none', returnEntity: 'TaxOverride' }, { overrideBy: overrideBy });
}
export function getTaxOverridesAsync(context, overrideBy) {
    const request = createGetTaxOverridesInput(context.queryResultSettings, overrideBy);
    return executeAction(request, context);
}
export function createGetCustomerBalanceInput(accountNumber, invoiceAccountNumber) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetCustomerBalance', true, CustomerBalancesClass, 'false', { bypassCache: 'none', returnEntity: 'CustomerBalances' }, { accountNumber: accountNumber, invoiceAccountNumber: invoiceAccountNumber });
}
export function getCustomerBalanceAsync(context, accountNumber, invoiceAccountNumber) {
    const request = createGetCustomerBalanceInput(accountNumber, invoiceAccountNumber);
    return executeAction(request, context);
}
export function createInitiateLinkToExistingCustomerInput(email, activationToken, emailTemplateId, emailProperties) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('InitiateLinkToExistingCustomer', true, LinkToExistingCustomerResultClass, 'false', { bypassCache: 'get', returnEntity: 'LinkToExistingCustomerResult' }, { email: email, ActivationToken: activationToken, emailTemplateId: emailTemplateId, emailProperties: emailProperties });
}
export function initiateLinkToExistingCustomerAsync(context, email, activationToken, emailTemplateId, emailProperties) {
    const request = createInitiateLinkToExistingCustomerInput(email, activationToken, emailTemplateId, emailProperties);
    return executeAction(request, context);
}
export function createFinalizeLinkToExistingCustomerInput(email, activationToken) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('FinalizeLinkToExistingCustomer', true, LinkToExistingCustomerResultClass, 'false', { bypassCache: 'get', returnEntity: 'LinkToExistingCustomerResult' }, { email: email, ActivationToken: activationToken });
}
export function finalizeLinkToExistingCustomerAsync(context, email, activationToken) {
    const request = createFinalizeLinkToExistingCustomerInput(email, activationToken);
    return executeAction(request, context);
}
export function createUnlinkFromExistingCustomerInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('UnlinkFromExistingCustomer', true, '', '', { bypassCache: 'get', returnEntity: '' }, {});
}
export function unlinkFromExistingCustomerAsync(context) {
    const request = createUnlinkFromExistingCustomerInput();
    return executeAction(request, context);
}
export function createGetOfflineSyncStatusInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetOfflineSyncStatus', true, OfflineSyncStatsLineClass, 'true', { bypassCache: 'none', returnEntity: 'OfflineSyncStatsLine' }, {});
}
export function getOfflineSyncStatusAsync(context) {
    const request = createGetOfflineSyncStatusInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetOfflinePendingTransactionCountInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetOfflinePendingTransactionCount', true, '', 'false', { bypassCache: 'none', returnEntity: '' }, {});
}
export function getOfflinePendingTransactionCountAsync(context) {
    const request = createGetOfflinePendingTransactionCountInput();
    return executeAction(request, context);
}
export function createGetOfflinePendingTransactionCountByShiftInput(shiftId, shiftTerminalId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetOfflinePendingTransactionCountByShift', true, '', 'false', { bypassCache: 'none', returnEntity: '' }, { shiftId: shiftId, shiftTerminalId: shiftTerminalId });
}
export function getOfflinePendingTransactionCountByShiftAsync(context, shiftId, shiftTerminalId) {
    const request = createGetOfflinePendingTransactionCountByShiftInput(shiftId, shiftTerminalId);
    return executeAction(request, context);
}
export function createUpdateDownloadSessionInput(downloadSession) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('UpdateDownloadSession', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { downloadSession: downloadSession });
}
export function updateDownloadSessionAsync(context, downloadSession) {
    const request = createUpdateDownloadSessionInput(downloadSession);
    return executeAction(request, context);
}
export function createUpdateApplicationVersionInput(appVersion) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('UpdateApplicationVersion', true, '', '', { bypassCache: 'get', returnEntity: '' }, { appVersion: appVersion });
}
export function updateApplicationVersionAsync(context, appVersion) {
    const request = createUpdateApplicationVersionInput(appVersion);
    return executeAction(request, context);
}
export function createGetStorageAccessTokenForUploadInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetStorageAccessTokenForUpload', true, StorageAccessTokenClass, 'false', { bypassCache: 'none', returnEntity: 'StorageAccessToken' }, {});
}
export function getStorageAccessTokenForUploadAsync(context) {
    const request = createGetStorageAccessTokenForUploadInput();
    return executeAction(request, context);
}
export function createGetBusinessProcessModelLibrariesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetBusinessProcessModelLibraries', true, FrameworkClass, 'true', { bypassCache: 'none', returnEntity: 'Framework' }, {});
}
export function getBusinessProcessModelLibrariesAsync(context) {
    const request = createGetBusinessProcessModelLibrariesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetBusinessProcessModelLibraryInput(businessProcessModelFrameworkLineId, hierarchyDepth) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetBusinessProcessModelLibrary', true, FrameworkClass, 'false', { bypassCache: 'none', returnEntity: 'Framework' }, { businessProcessModelFrameworkLineId: businessProcessModelFrameworkLineId, hierarchyDepth: hierarchyDepth });
}
export function getBusinessProcessModelLibraryAsync(context, businessProcessModelFrameworkLineId, hierarchyDepth) {
    const request = createGetBusinessProcessModelLibraryInput(businessProcessModelFrameworkLineId, hierarchyDepth);
    return executeAction(request, context);
}
export function createSearchTaskGuidesByTitleInput(queryResultSettings, businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchTaskGuidesByTitle', true, TaskGuidesSearchResultClass, 'true', { bypassCache: 'none', returnEntity: 'TaskGuidesSearchResult' }, { businessProcessModelFrameworkLineId: businessProcessModelFrameworkLineId, taskGuideSearchText: taskGuideSearchText, queryTypeValue: queryTypeValue });
}
export function searchTaskGuidesByTitleAsync(context, businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue) {
    const request = createSearchTaskGuidesByTitleInput(context.queryResultSettings, businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue);
    return executeAction(request, context);
}
export function createGenerateBusinessProcessModelPackageInput(taskRecording) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GenerateBusinessProcessModelPackage', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { taskRecording: taskRecording });
}
export function generateBusinessProcessModelPackageAsync(context, taskRecording) {
    const request = createGenerateBusinessProcessModelPackageInput(taskRecording);
    return executeAction(request, context);
}
export function createDownloadRecordingInput(businessProcessModelLineId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('DownloadRecording', true, RecordingClass, 'false', { bypassCache: 'get', returnEntity: 'Recording' }, { businessProcessModelLineId: businessProcessModelLineId });
}
export function downloadRecordingAsync(context, businessProcessModelLineId) {
    const request = createDownloadRecordingInput(businessProcessModelLineId);
    return executeAction(request, context);
}
export function createLoadRecordingFromFileInput(recordingUrl) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('LoadRecordingFromFile', true, RecordingClass, 'false', { bypassCache: 'get', returnEntity: 'Recording' }, { recordingUrl: recordingUrl });
}
export function loadRecordingFromFileAsync(context, recordingUrl) {
    const request = createLoadRecordingFromFileInput(recordingUrl);
    return executeAction(request, context);
}
export function createGenerateRecordingFileInput(taskRecording) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GenerateRecordingFile', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { taskRecording: taskRecording });
}
export function generateRecordingFileAsync(context, taskRecording) {
    const request = createGenerateRecordingFileInput(taskRecording);
    return executeAction(request, context);
}
export function createGenerateTrainingDocumentInput(taskRecording) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GenerateTrainingDocument', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { taskRecording: taskRecording });
}
export function generateTrainingDocumentAsync(context, taskRecording) {
    const request = createGenerateTrainingDocumentInput(taskRecording);
    return executeAction(request, context);
}
export function createGenerateRecordingBundleInput(taskRecording) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GenerateRecordingBundle', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { taskRecording: taskRecording });
}
export function generateRecordingBundleAsync(context, taskRecording) {
    const request = createGenerateRecordingBundleInput(taskRecording);
    return executeAction(request, context);
}
export function createUploadRecordingInput(taskRecording, businessProcessModelLineId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('UploadRecording', true, '', '', { bypassCache: 'get', returnEntity: '' }, { taskRecording: taskRecording, businessProcessModelLineId: businessProcessModelLineId });
}
export function uploadRecordingAsync(context, taskRecording, businessProcessModelLineId) {
    const request = createUploadRecordingInput(taskRecording, businessProcessModelLineId);
    return executeAction(request, context);
}
export function createGetAttributeDefinitionsInput(queryResultSettings, attributeDefinitionCriteria) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAttributeDefinitions', true, AttributeDefinitionClass, 'true', { bypassCache: 'none', returnEntity: 'AttributeDefinition' }, { attributeDefinitionCriteria: attributeDefinitionCriteria });
}
export function getAttributeDefinitionsAsync(context, attributeDefinitionCriteria) {
    const request = createGetAttributeDefinitionsInput(context.queryResultSettings, attributeDefinitionCriteria);
    return executeAction(request, context);
}
export function createGetAttributeGroupDefinitionsInput(queryResultSettings, attributeGroupDefinitionCriteria) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAttributeGroupDefinitions', true, AttributeGroupDefinitionClass, 'true', { bypassCache: 'none', returnEntity: 'AttributeGroupDefinition' }, { attributeGroupDefinitionCriteria: attributeGroupDefinitionCriteria });
}
export function getAttributeGroupDefinitionsAsync(context, attributeGroupDefinitionCriteria) {
    const request = createGetAttributeGroupDefinitionsInput(context.queryResultSettings, attributeGroupDefinitionCriteria);
    return executeAction(request, context);
}
export function createSaveFiscalTransactionInput(fiscalTransaction) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('SaveFiscalTransaction', true, '', '', { bypassCache: 'get', returnEntity: '' }, { fiscalTransaction: fiscalTransaction });
}
export function saveFiscalTransactionAsync(context, fiscalTransaction) {
    const request = createSaveFiscalTransactionInput(fiscalTransaction);
    return executeAction(request, context);
}
export function createValidatePrintReceiptCopyAllowedInput(salesOrderToPrint) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('ValidatePrintReceiptCopyAllowed', true, '', '', { bypassCache: 'get', returnEntity: '' }, { salesOrderToPrint: salesOrderToPrint });
}
export function validatePrintReceiptCopyAllowedAsync(context, salesOrderToPrint) {
    const request = createValidatePrintReceiptCopyAllowedInput(salesOrderToPrint);
    return executeAction(request, context);
}
export function createRegisterAuditEventInput(auditEvent) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('RegisterAuditEvent', true, '', '', { bypassCache: 'get', returnEntity: '' }, { auditEvent: auditEvent });
}
export function registerAuditEventAsync(context, auditEvent) {
    const request = createRegisterAuditEventInput(auditEvent);
    return executeAction(request, context);
}
export function createRegisterAndGetAuditEventInput(auditEvent) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('RegisterAndGetAuditEvent', true, AuditEventClass, 'false', { bypassCache: 'get', returnEntity: 'AuditEvent' }, { auditEvent: auditEvent });
}
export function registerAndGetAuditEventAsync(context, auditEvent) {
    const request = createRegisterAndGetAuditEventInput(auditEvent);
    return executeAction(request, context);
}
export function createGetInventoryAvailableToPromiseInput(queryResultSettings, productId, itemId, inventLocationId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetInventoryAvailableToPromise', true, InventoryAvailableToPromiseClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryAvailableToPromise' }, { productId: productId, itemId: itemId, inventLocationId: inventLocationId });
}
export function getInventoryAvailableToPromiseAsync(context, productId, itemId, inventLocationId) {
    const request = createGetInventoryAvailableToPromiseInput(context.queryResultSettings, productId, itemId, inventLocationId);
    return executeAction(request, context);
}
export function createGetSalesOrdersWithNoFiscalTransactionsInput(queryResultSettings, storeNumber, terminalId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetSalesOrdersWithNoFiscalTransactions', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder' }, { storeNumber: storeNumber, terminalId: terminalId });
}
export function getSalesOrdersWithNoFiscalTransactionsAsync(context, storeNumber, terminalId) {
    const request = createGetSalesOrdersWithNoFiscalTransactionsInput(context.queryResultSettings, storeNumber, terminalId);
    return executeAction(request, context);
}
export function createGetNotificationsInput(queryResultSettings, subscribedOperations) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetNotifications', true, NotificationItemClass, 'true', { bypassCache: 'none', returnEntity: 'NotificationItem' }, { subscribedOperations: subscribedOperations });
}
export function getNotificationsAsync(context, subscribedOperations) {
    const request = createGetNotificationsInput(context.queryResultSettings, subscribedOperations);
    return executeAction(request, context);
}
export function createAcknowledgeNotificationsInput(lastPullDateTime) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('AcknowledgeNotifications', true, '', '', { bypassCache: 'get', returnEntity: '' }, { lastPullDateTime: lastPullDateTime });
}
export function acknowledgeNotificationsAsync(context, lastPullDateTime) {
    const request = createAcknowledgeNotificationsInput(lastPullDateTime);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationFiscalDocumentInput(hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria, connectorType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationFiscalDocument', true, FiscalIntegrationDocumentClass, 'false', { bypassCache: 'none', returnEntity: 'FiscalIntegrationDocument' }, { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria: fiscalIntegrationDocumentRetrievalCriteria, connectorType: connectorType });
}
export function getFiscalIntegrationFiscalDocumentAsync(context, hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria, connectorType) {
    const request = createGetFiscalIntegrationFiscalDocumentInput(hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria, connectorType);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationNonFiscalDocumentInput(hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria, connectorType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationNonFiscalDocument', true, FiscalIntegrationDocumentClass, 'false', { bypassCache: 'none', returnEntity: 'FiscalIntegrationDocument' }, { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria: fiscalIntegrationDocumentRetrievalCriteria, connectorType: connectorType });
}
export function getFiscalIntegrationNonFiscalDocumentAsync(context, hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria, connectorType) {
    const request = createGetFiscalIntegrationNonFiscalDocumentInput(hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria, connectorType);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationFiscalServiceSetupDocumentInput(hardwareProfileId, functionalityProfileGroupId, connectorType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationFiscalServiceSetupDocument', true, FiscalIntegrationDocumentClass, 'false', { bypassCache: 'none', returnEntity: 'FiscalIntegrationDocument' }, { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, connectorType: connectorType });
}
export function getFiscalIntegrationFiscalServiceSetupDocumentAsync(context, hardwareProfileId, functionalityProfileGroupId, connectorType) {
    const request = createGetFiscalIntegrationFiscalServiceSetupDocumentInput(hardwareProfileId, functionalityProfileGroupId, connectorType);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationFiscalServiceReadDataDocumentInput(hardwareProfileId, functionalityProfileGroupId, connectorType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationFiscalServiceReadDataDocument', true, FiscalIntegrationDocumentClass, 'false', { bypassCache: 'none', returnEntity: 'FiscalIntegrationDocument' }, { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, connectorType: connectorType });
}
export function getFiscalIntegrationFiscalServiceReadDataDocumentAsync(context, hardwareProfileId, functionalityProfileGroupId, connectorType) {
    const request = createGetFiscalIntegrationFiscalServiceReadDataDocumentInput(hardwareProfileId, functionalityProfileGroupId, connectorType);
    return executeAction(request, context);
}
export function createProcessFiscalIntegrationFiscalServiceReadDataResultInput(hardwareProfileId, functionalityProfileGroupId, documentToProcess, connectorType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('ProcessFiscalIntegrationFiscalServiceReadDataResult', true, '', '', { bypassCache: 'get', returnEntity: '' }, { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, documentToProcess: documentToProcess, connectorType: connectorType });
}
export function processFiscalIntegrationFiscalServiceReadDataResultAsync(context, hardwareProfileId, functionalityProfileGroupId, documentToProcess, connectorType) {
    const request = createProcessFiscalIntegrationFiscalServiceReadDataResultInput(hardwareProfileId, functionalityProfileGroupId, documentToProcess, connectorType);
    return executeAction(request, context);
}
export function createSaveFiscalIntegrationRegistrationResultInput(hardwareProfileId, functionalityProfileGroupId, registrationResult, connectorType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('SaveFiscalIntegrationRegistrationResult', true, '', '', { bypassCache: 'get', returnEntity: '' }, { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, registrationResult: registrationResult, connectorType: connectorType });
}
export function saveFiscalIntegrationRegistrationResultAsync(context, hardwareProfileId, functionalityProfileGroupId, registrationResult, connectorType) {
    const request = createSaveFiscalIntegrationRegistrationResultInput(hardwareProfileId, functionalityProfileGroupId, registrationResult, connectorType);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationRegistrationProcessInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationRegistrationProcess', true, FiscalIntegrationRegistrationProcessClass, 'false', { bypassCache: 'none', returnEntity: 'FiscalIntegrationRegistrationProcess' }, {});
}
export function getFiscalIntegrationRegistrationProcessAsync(context) {
    const request = createGetFiscalIntegrationRegistrationProcessInput();
    return executeAction(request, context);
}
export function createGetChannelSupportedFiscalIntegrationEventsByGroupInput(functionalityProfileGroupId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetChannelSupportedFiscalIntegrationEventsByGroup', true, FiscalIntegrationSupportedEventsClass, 'false', { bypassCache: 'none', returnEntity: 'FiscalIntegrationSupportedEvents' }, { functionalityProfileGroupId: functionalityProfileGroupId });
}
export function getChannelSupportedFiscalIntegrationEventsByGroupAsync(context, functionalityProfileGroupId) {
    const request = createGetChannelSupportedFiscalIntegrationEventsByGroupInput(functionalityProfileGroupId);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationTechnicalProfilesInput(queryResultSettings, hardwareProfileId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationTechnicalProfiles', true, FiscalIntegrationTechnicalProfileClass, 'true', { bypassCache: 'none', returnEntity: 'FiscalIntegrationTechnicalProfile' }, { hardwareProfileId: hardwareProfileId });
}
export function getFiscalIntegrationTechnicalProfilesAsync(context, hardwareProfileId) {
    const request = createGetFiscalIntegrationTechnicalProfilesInput(context.queryResultSettings, hardwareProfileId);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsInput(queryResultSettings, hardwareProfileId, functionalityProfileGroupId) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationTechnicalProfilesByFunctionalityGroupIds', true, FiscalIntegrationTechnicalProfileClass, 'true', { bypassCache: 'none', returnEntity: 'FiscalIntegrationTechnicalProfile' }, { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId });
}
export function getFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsAsync(context, hardwareProfileId, functionalityProfileGroupId) {
    const request = createGetFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsInput(context.queryResultSettings, hardwareProfileId, functionalityProfileGroupId);
    return executeAction(request, context);
}
export function createBackupFiscalRegistrationProcessContextInput(terminalId, storeNumber, channelId, fiscalProcessCompleted, fiscalIntegrationSerializedContext) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('BackupFiscalRegistrationProcessContext', true, '', '', { bypassCache: 'get', returnEntity: '' }, { terminalId: terminalId, storeNumber: storeNumber, channelId: channelId, fiscalProcessCompleted: fiscalProcessCompleted, fiscalIntegrationSerializedContext: fiscalIntegrationSerializedContext });
}
export function backupFiscalRegistrationProcessContextAsync(context, terminalId, storeNumber, channelId, fiscalProcessCompleted, fiscalIntegrationSerializedContext) {
    const request = createBackupFiscalRegistrationProcessContextInput(terminalId, storeNumber, channelId, fiscalProcessCompleted, fiscalIntegrationSerializedContext);
    return executeAction(request, context);
}
export function createGetActiveFiscalRegistrationProcessContextBackupInput(terminalId, storeNumber, channelId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetActiveFiscalRegistrationProcessContextBackup', true, '', 'false', { bypassCache: 'none', returnEntity: '' }, { terminalId: terminalId, storeNumber: storeNumber, channelId: channelId });
}
export function getActiveFiscalRegistrationProcessContextBackupAsync(context, terminalId, storeNumber, channelId) {
    const request = createGetActiveFiscalRegistrationProcessContextBackupInput(terminalId, storeNumber, channelId);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationTechnicalProfilesBySearchCriteriaInput(queryResultSettings, hardwareProfileId, fiscalIntegrationTechnicalProfileSearchCriteria) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationTechnicalProfilesBySearchCriteria', true, FiscalIntegrationTechnicalProfileClass, 'true', { bypassCache: 'none', returnEntity: 'FiscalIntegrationTechnicalProfile' }, { hardwareProfileId: hardwareProfileId, fiscalIntegrationTechnicalProfileSearchCriteria: fiscalIntegrationTechnicalProfileSearchCriteria });
}
export function getFiscalIntegrationTechnicalProfilesBySearchCriteriaAsync(context, hardwareProfileId, fiscalIntegrationTechnicalProfileSearchCriteria) {
    const request = createGetFiscalIntegrationTechnicalProfilesBySearchCriteriaInput(context.queryResultSettings, hardwareProfileId, fiscalIntegrationTechnicalProfileSearchCriteria);
    return executeAction(request, context);
}
export function createGetFiscalIntegrationServiceStatusInput(fiscalIntegrationServiceInfo) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetFiscalIntegrationServiceStatus', true, FiscalIntegrationServiceStatusClass, 'false', { bypassCache: 'none', returnEntity: 'FiscalIntegrationServiceStatus' }, { fiscalIntegrationServiceInfo: fiscalIntegrationServiceInfo });
}
export function getFiscalIntegrationServiceStatusAsync(context, fiscalIntegrationServiceInfo) {
    const request = createGetFiscalIntegrationServiceStatusInput(fiscalIntegrationServiceInfo);
    return executeAction(request, context);
}
export function createSubmitFiscalIntegrationDocumentInput(documentToSubmit, fiscalIntegrationServiceInfo) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('SubmitFiscalIntegrationDocument', true, FiscalIntegrationServiceCommunicationResultClass, 'false', { bypassCache: 'get', returnEntity: 'FiscalIntegrationServiceCommunicationResult' }, { documentToSubmit: documentToSubmit, fiscalIntegrationServiceInfo: fiscalIntegrationServiceInfo });
}
export function submitFiscalIntegrationDocumentAsync(context, documentToSubmit, fiscalIntegrationServiceInfo) {
    const request = createSubmitFiscalIntegrationDocumentInput(documentToSubmit, fiscalIntegrationServiceInfo);
    return executeAction(request, context);
}
export function createGetFeatureStatesInput(queryResultSettings, featureNames) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFeatureStates', true, FeatureStateClass, 'true', { bypassCache: 'none', returnEntity: 'FeatureState' }, { featureNames: featureNames });
}
export function getFeatureStatesAsync(context, featureNames) {
    const request = createGetFeatureStatesInput(context.queryResultSettings, featureNames);
    return executeAction(request, context);
}
export function createGetLastFiscalIntegrationSequentialSignaturesInput(queryResultSettings, sequentialKeys) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLastFiscalIntegrationSequentialSignatures', true, FiscalIntegrationSequentialSignatureDataClass, 'true', { bypassCache: 'none', returnEntity: 'FiscalIntegrationSequentialSignatureData' }, { sequentialKeys: sequentialKeys });
}
export function getLastFiscalIntegrationSequentialSignaturesAsync(context, sequentialKeys) {
    const request = createGetLastFiscalIntegrationSequentialSignaturesInput(context.queryResultSettings, sequentialKeys);
    return executeAction(request, context);
}
export function createGetAvailablePromotionsInput(queryResultSettings, searchCriteria) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAvailablePromotions', true, PromotionClass, 'true', { bypassCache: 'none', returnEntity: 'Promotion' }, { searchCriteria: searchCriteria });
}
export function getAvailablePromotionsAsync(context, searchCriteria) {
    const request = createGetAvailablePromotionsInput(context.queryResultSettings, searchCriteria);
    return executeAction(request, context);
}
export function createCreateFiscalTransactionInput(functionalityProfileGroupId, registrationResult, connectorType) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('CreateFiscalTransaction', true, FiscalTransactionClass, 'false', { bypassCache: 'get', returnEntity: 'FiscalTransaction' }, { functionalityProfileGroupId: functionalityProfileGroupId, registrationResult: registrationResult, connectorType: connectorType });
}
export function createFiscalTransactionAsync(context, functionalityProfileGroupId, registrationResult, connectorType) {
    const request = createCreateFiscalTransactionInput(functionalityProfileGroupId, registrationResult, connectorType);
    return executeAction(request, context);
}
export function createGetButtonGridsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetButtonGrids', false, ButtonGridClass, 'true', { bypassCache: 'none', returnEntity: 'ButtonGrid' }, {});
}
export function getButtonGridsAsync(context) {
    const request = createGetButtonGridsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetButtonGridsByScreenSizeInput(queryResultSettings, height, width) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetButtonGridsByScreenSize', false, ButtonGridClass, 'true', { bypassCache: 'none', returnEntity: 'ButtonGrid' }, { height: height, width: width });
}
export function getButtonGridsByScreenSizeAsync(context, height, width) {
    const request = createGetButtonGridsByScreenSizeInput(context.queryResultSettings, height, width);
    return executeAction(request, context);
}
export function createGetCashDeclarationsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCashDeclarations', false, CashDeclarationClass, 'true', { bypassCache: 'none', returnEntity: 'CashDeclaration' }, {});
}
export function getCashDeclarationsAsync(context) {
    const request = createGetCashDeclarationsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCountryRegionsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCountryRegions', false, CountryRegionInfoClass, 'true', { bypassCache: 'none', returnEntity: 'CountryRegionInfo' }, {});
}
export function getCountryRegionsAsync(context) {
    const request = createGetCountryRegionsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCustomerGroupsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCustomerGroups', false, CustomerGroupClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerGroup' }, {});
}
export function getCustomerGroupsAsync(context) {
    const request = createGetCustomerGroupsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetDeliveryOptionsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDeliveryOptions', false, DeliveryOptionClass, 'true', { bypassCache: 'none', returnEntity: 'DeliveryOption' }, {});
}
export function getDeliveryOptionsAsync(context) {
    const request = createGetDeliveryOptionsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetChannelsByTypeInput(queryResultSettings, channelType) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetChannelsByType', false, ChannelIdentityClass, 'true', { bypassCache: 'none', returnEntity: 'ChannelIdentity' }, { channelType: channelType });
}
export function getChannelsByTypeAsync(context, channelType) {
    const request = createGetChannelsByTypeInput(context.queryResultSettings, channelType);
    return executeAction(request, context);
}
export function createGetChannelsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetChannels', false, ChannelIdentityClass, 'true', { bypassCache: 'none', returnEntity: 'ChannelIdentity' }, {});
}
export function getChannelsAsync(context) {
    const request = createGetChannelsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetEnvironmentConfigurationInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetEnvironmentConfiguration', false, EnvironmentConfigurationClass, 'false', { bypassCache: 'none', returnEntity: 'EnvironmentConfiguration' }, {});
}
export function getEnvironmentConfigurationAsync(context) {
    const request = createGetEnvironmentConfigurationInput();
    return executeAction(request, context);
}
export function createGetSearchConfigurationInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetSearchConfiguration', false, SearchConfigurationClass, 'false', { bypassCache: 'none', returnEntity: 'SearchConfiguration' }, {});
}
export function getSearchConfigurationAsync(context) {
    const request = createGetSearchConfigurationInput();
    return executeAction(request, context);
}
export function createGetExtensionPackageDefinitionsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetExtensionPackageDefinitions', false, ExtensionPackageDefinitionClass, 'true', { bypassCache: 'none', returnEntity: 'ExtensionPackageDefinition' }, {});
}
export function getExtensionPackageDefinitionsAsync(context) {
    const request = createGetExtensionPackageDefinitionsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetExtensionProfileInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetExtensionProfile', false, ExtensionProfileClass, 'false', { bypassCache: 'none', returnEntity: 'ExtensionProfile' }, {});
}
export function getExtensionProfileAsync(context) {
    const request = createGetExtensionProfileInput();
    return executeAction(request, context);
}
export function createGetDeviceConfigurationInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetDeviceConfiguration', false, DeviceConfigurationClass, 'false', { bypassCache: 'none', returnEntity: 'DeviceConfiguration' }, {});
}
export function getDeviceConfigurationAsync(context) {
    const request = createGetDeviceConfigurationInput();
    return executeAction(request, context);
}
export function createGetVisualProfileInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetVisualProfile', false, VisualProfileClass, 'false', { bypassCache: 'none', returnEntity: 'VisualProfile' }, {});
}
export function getVisualProfileAsync(context) {
    const request = createGetVisualProfileInput();
    return executeAction(request, context);
}
export function createGetLanguagesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLanguages', false, SupportedLanguageClass, 'true', { bypassCache: 'none', returnEntity: 'SupportedLanguage' }, {});
}
export function getLanguagesAsync(context) {
    const request = createGetLanguagesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetAffiliationsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAffiliations', false, AffiliationClass, 'true', { bypassCache: 'none', returnEntity: 'Affiliation' }, {});
}
export function getAffiliationsAsync(context) {
    const request = createGetAffiliationsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetOperationPermissionsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetOperationPermissions', false, OperationPermissionClass, 'true', { bypassCache: 'none', returnEntity: 'OperationPermission' }, {});
}
export function getOperationPermissionsAsync(context) {
    const request = createGetOperationPermissionsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetReasonCodesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetReasonCodes', false, ReasonCodeClass, 'true', { bypassCache: 'none', returnEntity: 'ReasonCode' }, {});
}
export function getReasonCodesAsync(context) {
    const request = createGetReasonCodesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetReturnOrderReasonCodesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetReturnOrderReasonCodes', false, ReasonCodeClass, 'true', { bypassCache: 'none', returnEntity: 'ReasonCode' }, {});
}
export function getReturnOrderReasonCodesAsync(context) {
    const request = createGetReturnOrderReasonCodesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetSalesTaxGroupsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetSalesTaxGroups', false, SalesTaxGroupClass, 'true', { bypassCache: 'none', returnEntity: 'SalesTaxGroup' }, {});
}
export function getSalesTaxGroupsAsync(context) {
    const request = createGetSalesTaxGroupsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetTenderTypesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetTenderTypes', false, TenderTypeClass, 'true', { bypassCache: 'none', returnEntity: 'TenderType' }, {});
}
export function getTenderTypesAsync(context) {
    const request = createGetTenderTypesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetUnitsOfMeasureInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetUnitsOfMeasure', false, UnitOfMeasureClass, 'true', { bypassCache: 'none', returnEntity: 'UnitOfMeasure' }, {});
}
export function getUnitsOfMeasureAsync(context) {
    const request = createGetUnitsOfMeasureInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetDiscountCodesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDiscountCodes', false, DiscountCodeClass, 'true', { bypassCache: 'none', returnEntity: 'DiscountCode' }, {});
}
export function getDiscountCodesAsync(context) {
    const request = createGetDiscountCodesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCurrenciesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCurrencies', false, CurrencyClass, 'true', { bypassCache: 'none', returnEntity: 'Currency' }, {});
}
export function getCurrenciesAsync(context) {
    const request = createGetCurrenciesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCurrenciesAmountInput(queryResultSettings, currencyCode, amount) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCurrenciesAmount', false, CurrencyAmountClass, 'true', { bypassCache: 'none', returnEntity: 'CurrencyAmount' }, { currencyCode: currencyCode, amount: amount });
}
export function getCurrenciesAmountAsync(context, currencyCode, amount) {
    const request = createGetCurrenciesAmountInput(context.queryResultSettings, currencyCode, amount);
    return executeAction(request, context);
}
export function createGetCommissionSalesGroupsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCommissionSalesGroups', false, CommissionSalesGroupClass, 'true', { bypassCache: 'none', returnEntity: 'CommissionSalesGroup' }, {});
}
export function getCommissionSalesGroupsAsync(context) {
    const request = createGetCommissionSalesGroupsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSearchCommissionSalesGroupsInput(queryResultSettings, searchText) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchCommissionSalesGroups', false, CommissionSalesGroupClass, 'true', { bypassCache: 'none', returnEntity: 'CommissionSalesGroup' }, { searchText: searchText });
}
export function searchCommissionSalesGroupsAsync(context, searchText) {
    const request = createSearchCommissionSalesGroupsInput(context.queryResultSettings, searchText);
    return executeAction(request, context);
}
export function createGetPaymentMerchantInformationInput(hardwareProfileId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetPaymentMerchantInformation', false, PaymentMerchantInformationClass, 'false', { bypassCache: 'none', returnEntity: 'PaymentMerchantInformation' }, { hardwareProfileId: hardwareProfileId });
}
export function getPaymentMerchantInformationAsync(context, hardwareProfileId) {
    const request = createGetPaymentMerchantInformationInput(hardwareProfileId);
    return executeAction(request, context);
}
export function createGetPaymentPropertiesIfModifiedInput(hardwareProfileId, merchantInformationHash) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetPaymentPropertiesIfModified', false, PaymentMerchantInformationClass, 'false', { bypassCache: 'none', returnEntity: 'PaymentMerchantInformation' }, { hardwareProfileId: hardwareProfileId, merchantInformationHash: merchantInformationHash });
}
export function getPaymentPropertiesIfModifiedAsync(context, hardwareProfileId, merchantInformationHash) {
    const request = createGetPaymentPropertiesIfModifiedInput(hardwareProfileId, merchantInformationHash);
    return executeAction(request, context);
}
export function createGetOnlineChannelPublishStatusInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetOnlineChannelPublishStatus', false, '', 'false', { bypassCache: 'none', returnEntity: '' }, {});
}
export function getOnlineChannelPublishStatusAsync(context) {
    const request = createGetOnlineChannelPublishStatusInput();
    return executeAction(request, context);
}
export function createSetOnlineChannelPublishStatusInput(publishingStatus, statusMessage) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('SetOnlineChannelPublishStatus', true, '', '', { bypassCache: 'get', returnEntity: '' }, { publishingStatus: publishingStatus, statusMessage: statusMessage });
}
export function setOnlineChannelPublishStatusAsync(context, publishingStatus, statusMessage) {
    const request = createSetOnlineChannelPublishStatusInput(publishingStatus, statusMessage);
    return executeAction(request, context);
}
export function createGetInventoryConfigurationInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetInventoryConfiguration', false, ChannelInventoryConfigurationClass, 'false', { bypassCache: 'none', returnEntity: 'ChannelInventoryConfiguration' }, {});
}
export function getInventoryConfigurationAsync(context) {
    const request = createGetInventoryConfigurationInput();
    return executeAction(request, context);
}
export function createGetAvailableDevicesInput(queryResultSettings, deviceType) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAvailableDevices', false, DeviceClass, 'true', { bypassCache: 'none', returnEntity: 'Device' }, { deviceType: deviceType });
}
export function getAvailableDevicesAsync(context, deviceType) {
    const request = createGetAvailableDevicesInput(context.queryResultSettings, deviceType);
    return executeAction(request, context);
}
export function createGetUserDefinedSecretStringInput(secretName) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetUserDefinedSecretString', false, '', 'false', { bypassCache: 'none', returnEntity: '' }, { secretName: secretName });
}
export function getUserDefinedSecretStringAsync(context, secretName) {
    const request = createGetUserDefinedSecretStringInput(secretName);
    return executeAction(request, context);
}
export function createGetUserDefinedSecretCertificateInput(secretName) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetUserDefinedSecretCertificate', false, UserDefinedSecretCertificateResultClass, 'false', { bypassCache: 'none', returnEntity: 'UserDefinedSecretCertificateResult' }, { secretName: secretName });
}
export function getUserDefinedSecretCertificateAsync(context, secretName) {
    const request = createGetUserDefinedSecretCertificateInput(secretName);
    return executeAction(request, context);
}
export function createGetImageBlobInput(imageId) {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetImageBlob', false, MediaBlobClass, 'false', { bypassCache: 'none', returnEntity: 'MediaBlob' }, { imageId: imageId });
}
export function getImageBlobAsync(context, imageId) {
    const request = createGetImageBlobInput(imageId);
    return executeAction(request, context);
}
export function createGetExtensibleEnumerationsInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetExtensibleEnumerations', false, ExtensibleEnumerationContainerClass, 'true', { bypassCache: 'none', returnEntity: 'ExtensibleEnumerationContainer' }, {});
}
export function getExtensibleEnumerationsAsync(context) {
    const request = createGetExtensibleEnumerationsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetAddressPurposesInput(queryResultSettings) {
    const query = storeQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAddressPurposes', false, AddressPurposeClass, 'true', { bypassCache: 'none', returnEntity: 'AddressPurpose' }, {});
}
export function getAddressPurposesAsync(context) {
    const request = createGetAddressPurposesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetReturnPolicyInput() {
    const query = storeQuery();
    return query.createDataServiceRequestForOperation('GetReturnPolicy', false, ReturnPolicyClass, 'false', { bypassCache: 'none', returnEntity: 'ReturnPolicy' }, {});
}
export function getReturnPolicyAsync(context) {
    const request = createGetReturnPolicyInput();
    return executeAction(request, context);
}
//# sourceMappingURL=StoreOperationsDataActions.g.js.map