import { DataServiceQuery } from '../DataServiceQuery';
import { SalesOrderClass, ReceiptClass, FulfillmentLineClass, SalesInvoiceClass, OrderInvoiceClass, SalesLineClass, PickingListClass, PackingSlipDataClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function salesOrdersQuery(id) {
    var key = (id) ? { Id: id } : null;
    return new DataServiceQuery("SalesOrders", "SalesOrder", SalesOrderClass, key);
}
export function createCreateInput(entity) {
    return salesOrdersQuery().create(entity);
}
export function createSalesOrderAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return salesOrdersQuery(entity.Id).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return salesOrdersQuery(entity.Id).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(id) {
    return salesOrdersQuery(id).read();
}
export function readAsync(context, id) {
    const request = createReadAsync(id);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return salesOrdersQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSearchSalesTransactionsByReceiptIdInput(queryResultSettings, receiptId) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchSalesTransactionsByReceiptId', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder' }, { receiptId: receiptId });
}
export function searchSalesTransactionsByReceiptIdAsync(context, receiptId) {
    const request = createSearchSalesTransactionsByReceiptIdInput(context.queryResultSettings, receiptId);
    return executeAction(request, context);
}
export function createSearchInput(queryResultSettings, salesOrderSearchCriteria) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Search', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder' }, { salesOrderSearchCriteria: salesOrderSearchCriteria });
}
export function searchAsync(context, salesOrderSearchCriteria) {
    const request = createSearchInput(context.queryResultSettings, salesOrderSearchCriteria);
    return executeAction(request, context);
}
export function createSearchOrdersInput(queryResultSettings, orderSearchCriteria) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchOrders', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder' }, { orderSearchCriteria: orderSearchCriteria });
}
export function searchOrdersAsync(context, orderSearchCriteria) {
    const request = createSearchOrdersInput(context.queryResultSettings, orderSearchCriteria);
    return executeAction(request, context);
}
export function createGetReceiptsInput(queryResultSettings, id, receiptRetrievalCriteria) {
    const query = salesOrdersQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetReceipts', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt' }, { receiptRetrievalCriteria: receiptRetrievalCriteria });
}
export function getReceiptsAsync(context, id, receiptRetrievalCriteria) {
    const request = createGetReceiptsInput(context.queryResultSettings, id, receiptRetrievalCriteria);
    return executeAction(request, context);
}
export function createSendReceiptInput(searchCriteria, recipientAddresses) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('SendReceipt', true, '', '', { bypassCache: 'get', returnEntity: '' }, { searchCriteria: searchCriteria, recipientAddresses: recipientAddresses });
}
export function sendReceiptAsync(context, searchCriteria, recipientAddresses) {
    const request = createSendReceiptInput(searchCriteria, recipientAddresses);
    return executeAction(request, context);
}
export function createGetGiftReceiptsInput(queryResultSettings, id, salesLineNumbers, receiptRetrievalCriteria) {
    const query = salesOrdersQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetGiftReceipts', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt' }, { SalesLineNumbers: salesLineNumbers, receiptRetrievalCriteria: receiptRetrievalCriteria });
}
export function getGiftReceiptsAsync(context, id, salesLineNumbers, receiptRetrievalCriteria) {
    const request = createGetGiftReceiptsInput(context.queryResultSettings, id, salesLineNumbers, receiptRetrievalCriteria);
    return executeAction(request, context);
}
export function createGetByReceiptIdInput(queryResultSettings, receiptId, orderStoreNumber, orderTerminalId) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetByReceiptId', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder' }, { receiptId: receiptId, orderStoreNumber: orderStoreNumber, orderTerminalId: orderTerminalId });
}
export function getByReceiptIdAsync(context, receiptId, orderStoreNumber, orderTerminalId) {
    const request = createGetByReceiptIdInput(context.queryResultSettings, receiptId, orderStoreNumber, orderTerminalId);
    return executeAction(request, context);
}
export function createGetSalesOrderDetailsByTransactionIdInput(transactionId, searchLocationValue) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('GetSalesOrderDetailsByTransactionId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder' }, { transactionId: transactionId, searchLocationValue: searchLocationValue });
}
export function getSalesOrderDetailsByTransactionIdAsync(context, transactionId, searchLocationValue) {
    const request = createGetSalesOrderDetailsByTransactionIdInput(transactionId, searchLocationValue);
    return executeAction(request, context);
}
export function createGetSalesOrderDetailsBySalesIdInput(salesId) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('GetSalesOrderDetailsBySalesId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder' }, { salesId: salesId });
}
export function getSalesOrderDetailsBySalesIdAsync(context, salesId) {
    const request = createGetSalesOrderDetailsBySalesIdInput(salesId);
    return executeAction(request, context);
}
export function createGetSalesOrderDetailsByQuotationIdInput(quotationId) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('GetSalesOrderDetailsByQuotationId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder' }, { quotationId: quotationId });
}
export function getSalesOrderDetailsByQuotationIdAsync(context, quotationId) {
    const request = createGetSalesOrderDetailsByQuotationIdInput(quotationId);
    return executeAction(request, context);
}
export function createShipFulfillmentLinesInput(shipFulfillmentLines) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('ShipFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: '' }, { ShipFulfillmentLines: shipFulfillmentLines });
}
export function shipFulfillmentLinesAsync(context, shipFulfillmentLines) {
    const request = createShipFulfillmentLinesInput(shipFulfillmentLines);
    return executeAction(request, context);
}
export function createAcceptFulfillmentLinesInput(fulfillmentLineParameter) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('AcceptFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: '' }, { FulfillmentLineParameter: fulfillmentLineParameter });
}
export function acceptFulfillmentLinesAsync(context, fulfillmentLineParameter) {
    const request = createAcceptFulfillmentLinesInput(fulfillmentLineParameter);
    return executeAction(request, context);
}
export function createPickFulfillmentLinesInput(fulfillmentLineParameter) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('PickFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: '' }, { FulfillmentLineParameter: fulfillmentLineParameter });
}
export function pickFulfillmentLinesAsync(context, fulfillmentLineParameter) {
    const request = createPickFulfillmentLinesInput(fulfillmentLineParameter);
    return executeAction(request, context);
}
export function createPackFulfillmentLinesInput(fulfillmentLineParameter) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('PackFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: '' }, { FulfillmentLineParameter: fulfillmentLineParameter });
}
export function packFulfillmentLinesAsync(context, fulfillmentLineParameter) {
    const request = createPackFulfillmentLinesInput(fulfillmentLineParameter);
    return executeAction(request, context);
}
export function createMarkFulfillmentLinesAsPackedInput(fulfillmentLineParameter) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('MarkFulfillmentLinesAsPacked', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { FulfillmentLineParameter: fulfillmentLineParameter });
}
export function markFulfillmentLinesAsPackedAsync(context, fulfillmentLineParameter) {
    const request = createMarkFulfillmentLinesAsPackedInput(fulfillmentLineParameter);
    return executeAction(request, context);
}
export function createMarkAsPickedInput(fulfillmentLineParameter) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('MarkAsPicked', true, '', '', { bypassCache: 'get', returnEntity: '' }, { FulfillmentLineParameter: fulfillmentLineParameter });
}
export function markAsPickedAsync(context, fulfillmentLineParameter) {
    const request = createMarkAsPickedInput(fulfillmentLineParameter);
    return executeAction(request, context);
}
export function createGetFulfillmentPickingListsInput(queryResultSettings, pickingListFulfillmentLine, hardwareProfileId) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFulfillmentPickingLists', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt' }, { pickingListFulfillmentLine: pickingListFulfillmentLine, hardwareProfileId: hardwareProfileId });
}
export function getFulfillmentPickingListsAsync(context, pickingListFulfillmentLine, hardwareProfileId) {
    const request = createGetFulfillmentPickingListsInput(context.queryResultSettings, pickingListFulfillmentLine, hardwareProfileId);
    return executeAction(request, context);
}
export function createGetFulfillmentLinesInput(queryResultSettings, fulfillmentLineSearchCriteria) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFulfillmentLines', true, FulfillmentLineClass, 'true', { bypassCache: 'none', returnEntity: 'FulfillmentLine' }, { fulfillmentLineSearchCriteria: fulfillmentLineSearchCriteria });
}
export function getFulfillmentLinesAsync(context, fulfillmentLineSearchCriteria) {
    const request = createGetFulfillmentLinesInput(context.queryResultSettings, fulfillmentLineSearchCriteria);
    return executeAction(request, context);
}
export function createGetFulfillmentPackingSlipsInput(queryResultSettings, packFulfillmentLines, hardwareProfileId) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFulfillmentPackingSlips', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt' }, { packFulfillmentLines: packFulfillmentLines, hardwareProfileId: hardwareProfileId });
}
export function getFulfillmentPackingSlipsAsync(context, packFulfillmentLines, hardwareProfileId) {
    const request = createGetFulfillmentPackingSlipsInput(context.queryResultSettings, packFulfillmentLines, hardwareProfileId);
    return executeAction(request, context);
}
export function createGetFulfillmentPackingSlipsByIdInput(queryResultSettings, salesId, packingSlipId, hardwareProfileId) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFulfillmentPackingSlipsById', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt' }, { salesId: salesId, PackingSlipId: packingSlipId, hardwareProfileId: hardwareProfileId });
}
export function getFulfillmentPackingSlipsByIdAsync(context, salesId, packingSlipId, hardwareProfileId) {
    const request = createGetFulfillmentPackingSlipsByIdInput(context.queryResultSettings, salesId, packingSlipId, hardwareProfileId);
    return executeAction(request, context);
}
export function createRejectFulfillmentLinesInput(rejectFulfillmentLines) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('RejectFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: '' }, { RejectFulfillmentLines: rejectFulfillmentLines });
}
export function rejectFulfillmentLinesAsync(context, rejectFulfillmentLines) {
    const request = createRejectFulfillmentLinesInput(rejectFulfillmentLines);
    return executeAction(request, context);
}
export function createGetInvoicesBySalesIdInput(queryResultSettings, salesId) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetInvoicesBySalesId', true, SalesInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'SalesInvoice' }, { salesId: salesId });
}
export function getInvoicesBySalesIdAsync(context, salesId) {
    const request = createGetInvoicesBySalesIdInput(context.queryResultSettings, salesId);
    return executeAction(request, context);
}
export function createGetOrderInvoicesInput(queryResultSettings, customerId) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetOrderInvoices', true, OrderInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'OrderInvoice' }, { customerId: customerId });
}
export function getOrderInvoicesAsync(context, customerId) {
    const request = createGetOrderInvoicesInput(context.queryResultSettings, customerId);
    return executeAction(request, context);
}
export function createGetInvoicesInput(queryResultSettings, invoiceSearchCriteria) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetInvoices', true, OrderInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'OrderInvoice' }, { invoiceSearchCriteria: invoiceSearchCriteria });
}
export function getInvoicesAsync(context, invoiceSearchCriteria) {
    const request = createGetInvoicesInput(context.queryResultSettings, invoiceSearchCriteria);
    return executeAction(request, context);
}
export function createGetInvoicedSalesLinesBySalesIdsInput(queryResultSettings, salesIds) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetInvoicedSalesLinesBySalesIds', true, SalesLineClass, 'true', { bypassCache: 'none', returnEntity: 'SalesLine' }, { salesIds: salesIds });
}
export function getInvoicedSalesLinesBySalesIdsAsync(context, salesIds) {
    const request = createGetInvoicedSalesLinesBySalesIdsInput(context.queryResultSettings, salesIds);
    return executeAction(request, context);
}
export function createCreatePickingListInput(salesId) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('CreatePickingList', true, '', '', { bypassCache: 'get', returnEntity: '' }, { salesId: salesId });
}
export function createPickingListAsync(context, salesId) {
    const request = createCreatePickingListInput(salesId);
    return executeAction(request, context);
}
export function createCreatePickingListForItemsInput(salesId, pickAndPackSalesLineParameters) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('CreatePickingListForItems', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { salesId: salesId, pickAndPackSalesLineParameters: pickAndPackSalesLineParameters });
}
export function createPickingListForItemsAsync(context, salesId, pickAndPackSalesLineParameters) {
    const request = createCreatePickingListForItemsInput(salesId, pickAndPackSalesLineParameters);
    return executeAction(request, context);
}
export function createGetPickingListsInput(queryResultSettings, id) {
    const query = salesOrdersQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetPickingLists', false, PickingListClass, 'true', { bypassCache: 'none', returnEntity: 'PickingList' }, {});
}
export function getPickingListsAsync(context, id) {
    const request = createGetPickingListsInput(context.queryResultSettings, id);
    return executeAction(request, context);
}
export function createCreatePackingSlipInput(salesId) {
    const query = salesOrdersQuery();
    return query.createDataServiceRequestForOperation('CreatePackingSlip', true, '', '', { bypassCache: 'get', returnEntity: '' }, { salesId: salesId });
}
export function createPackingSlipAsync(context, salesId) {
    const request = createCreatePackingSlipInput(salesId);
    return executeAction(request, context);
}
export function createGetPackingSlipsDataInput(queryResultSettings, salesId) {
    const query = salesOrdersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetPackingSlipsData', false, PackingSlipDataClass, 'true', { bypassCache: 'none', returnEntity: 'PackingSlipData' }, { salesId: salesId });
}
export function getPackingSlipsDataAsync(context, salesId) {
    const request = createGetPackingSlipsDataInput(context.queryResultSettings, salesId);
    return executeAction(request, context);
}
//# sourceMappingURL=SalesOrdersDataActions.g.js.map