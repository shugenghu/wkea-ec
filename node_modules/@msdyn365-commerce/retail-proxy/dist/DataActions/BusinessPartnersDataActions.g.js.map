{"version":3,"file":"BusinessPartnersDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/BusinessPartnersDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { BusinessPartner, BusinessPartnerProspect, BusinessPartnerUser } from '../Entities/CommerceTypes.g';\n    import { BusinessPartnerClass, BusinessPartnerProspectClass, BusinessPartnerUserClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function businessPartnersQuery(businessPartnerId?: string): DataServiceQuery {\n      var key = (businessPartnerId) ? { BusinessPartnerId: businessPartnerId } : null;\n      return new DataServiceQuery(\"BusinessPartners\", \"BusinessPartner\", BusinessPartnerClass, key);\n    }\n    \n    export function createCreateInput(entity: BusinessPartner): IDataServiceRequest {\n        return businessPartnersQuery().create(entity);\n    }\n    export function createBusinessPartnerAsync(context: IContext, entity: BusinessPartner): AsyncResult<BusinessPartner> {\n        const request = createCreateInput(entity, );\n        return executeAction<BusinessPartner>(request, context);\n    }\n    export function createUpdateInput(entity: BusinessPartner): IDataServiceRequest {\n        return businessPartnersQuery(entity.BusinessPartnerId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: BusinessPartner): AsyncResult<BusinessPartner> {\n        const request = createUpdateInput(entity, );\n        return executeAction<BusinessPartner>(request, context);\n    }\n    export function createDeleteAsync(entity: BusinessPartner): IDataServiceRequest {\n        return businessPartnersQuery(entity.BusinessPartnerId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: BusinessPartner): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(businessPartnerId: string): IDataServiceRequest {\n        return businessPartnersQuery(businessPartnerId).read();\n    }\n    export function readAsync(context: IContext, businessPartnerId: string): AsyncResult<BusinessPartner> {\n        const request = createReadAsync(businessPartnerId, );\n        return executeAction<BusinessPartner>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return businessPartnersQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<BusinessPartner[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<BusinessPartner[]>(request, context);\n    }\n    \n    export function createCreateProspectInput(businessPartnerProspect: BusinessPartnerProspect | null): IDataServiceRequest {      \n        const query = businessPartnersQuery();\n        return query.createDataServiceRequestForOperation('CreateProspect', true, BusinessPartnerProspectClass, 'false', { bypassCache: 'get', returnEntity: 'BusinessPartnerProspect'}, {businessPartnerProspect: businessPartnerProspect });\n    }    \n    \n    export function createProspectAsync(context: IContext, businessPartnerProspect: BusinessPartnerProspect | null):AsyncResult<BusinessPartnerProspect> {\n        const request = createCreateProspectInput(businessPartnerProspect, );\n        return executeAction<BusinessPartnerProspect>(request, context);\n    }          \n          \n    export function createGetCurrentInput(): IDataServiceRequest {      \n        const query = businessPartnersQuery();\n        return query.createDataServiceRequestForOperation('GetCurrent', false, BusinessPartnerClass, 'false', { bypassCache: 'none', returnEntity: 'BusinessPartner'}, { });\n    }    \n    \n    export function getCurrentAsync(context: IContext):AsyncResult<BusinessPartner> {\n        const request = createGetCurrentInput();\n        return executeAction<BusinessPartner>(request, context);\n    }          \n          \n    export function createGetUsersInput(queryResultSettings: IQueryResultSettings, businessPartnerId: string): IDataServiceRequest {      \n        const query = businessPartnersQuery(businessPartnerId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetUsers', false, BusinessPartnerUserClass, 'true', { bypassCache: 'none', returnEntity: 'BusinessPartnerUser'}, { });\n    }    \n    \n    export function getUsersAsync(context: IContext, businessPartnerId: string):AsyncResult<BusinessPartnerUser[]> {\n        const request = createGetUsersInput(context.queryResultSettings, businessPartnerId, );\n        return executeAction<BusinessPartnerUser[]>(request, context);\n    }          \n          \n    "]}