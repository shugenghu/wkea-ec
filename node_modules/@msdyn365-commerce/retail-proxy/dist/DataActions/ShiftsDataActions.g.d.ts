import { AsyncResult } from '../async-result';
import { Shift, SuspendedCart, ShiftTenderLine, ShiftRetrievalCriteria, Receipt } from '../Entities/CommerceTypes.g';
import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
export declare function createCreateInput(entity: Shift): IDataServiceRequest;
export declare function createShiftAsync(context: IContext, entity: Shift): AsyncResult<Shift>;
export declare function createUpdateInput(entity: Shift): IDataServiceRequest;
export declare function updateAsync(context: IContext, entity: Shift): AsyncResult<Shift>;
export declare function createDeleteAsync(entity: Shift): IDataServiceRequest;
export declare function deleteAsync(context: IContext, entity: Shift): AsyncResult<NullResult>;
export declare function createReadAsync(shiftId: number, terminalId: string): IDataServiceRequest;
export declare function readAsync(context: IContext, shiftId: number, terminalId: string): AsyncResult<Shift>;
export declare function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function readAllAsync(context: IContext): AsyncResult<Shift[]>;
export declare function createUpsertShiftsInput(shifts: Shift[] | null): IDataServiceRequest;
export declare function upsertShiftsAsync(context: IContext, shifts: Shift[] | null): AsyncResult<boolean>;
export declare function createUpsertAndValidateShiftsInput(shiftId: number | null, terminalId: string | null, shifts: Shift[] | null): IDataServiceRequest;
export declare function upsertAndValidateShiftsAsync(context: IContext, shiftId: number | null, terminalId: string | null, shifts: Shift[] | null): AsyncResult<boolean>;
export declare function createDeleteShiftsInput(): IDataServiceRequest;
export declare function deleteShiftsAsync(context: IContext): AsyncResult<boolean>;
export declare function createOpenInput(shiftId: number | null, cashDrawer: string | null, isShared: boolean): IDataServiceRequest;
export declare function openAsync(context: IContext, shiftId: number | null, cashDrawer: string | null, isShared: boolean): AsyncResult<Shift>;
export declare function createCloseInput(shiftId: number, terminalId: string, transactionId: string | null, forceClose: boolean, hasOfflinePendingTransactions: boolean | null): IDataServiceRequest;
export declare function closeAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null, forceClose: boolean, hasOfflinePendingTransactions: boolean | null): AsyncResult<Shift>;
export declare function createGetSuspendedCartsByShiftInput(queryResultSettings: IQueryResultSettings, shiftTerminalId: string | null, shiftId: number): IDataServiceRequest;
export declare function getSuspendedCartsByShiftAsync(context: IContext, shiftTerminalId: string | null, shiftId: number): AsyncResult<SuspendedCart[]>;
export declare function createVoidSuspendedCartsInput(shiftId: number, terminalId: string): IDataServiceRequest;
export declare function voidSuspendedCartsAsync(context: IContext, shiftId: number, terminalId: string): AsyncResult<NullResult>;
export declare function createSaveTenderLinesInput(shiftId: number, terminalId: string, tenderLines: ShiftTenderLine[] | null): IDataServiceRequest;
export declare function saveTenderLinesAsync(context: IContext, shiftId: number, terminalId: string, tenderLines: ShiftTenderLine[] | null): AsyncResult<NullResult>;
export declare function createBlindCloseInput(shiftId: number, terminalId: string, transactionId: string | null, forceClose: boolean): IDataServiceRequest;
export declare function blindCloseAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null, forceClose: boolean): AsyncResult<Shift>;
export declare function createForceDeleteInput(shiftId: number, terminalId: string, transactionId: string | null): IDataServiceRequest;
export declare function forceDeleteAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null): AsyncResult<NullResult>;
export declare function createResumeInput(shiftId: number, terminalId: string, cashDrawer: string | null): IDataServiceRequest;
export declare function resumeAsync(context: IContext, shiftId: number, terminalId: string, cashDrawer: string | null): AsyncResult<Shift>;
export declare function createUseInput(shiftId: number, terminalId: string): IDataServiceRequest;
export declare function useAsync(context: IContext, shiftId: number, terminalId: string): AsyncResult<Shift>;
export declare function createSuspendInput(shiftId: number, terminalId: string, transactionId: string | null): IDataServiceRequest;
export declare function suspendAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null): AsyncResult<Shift>;
export declare function createGetByStatusInput(queryResultSettings: IQueryResultSettings, statusValue: number): IDataServiceRequest;
export declare function getByStatusAsync(context: IContext, statusValue: number): AsyncResult<Shift[]>;
export declare function createGetByStatusFilterByUserRoleInput(queryResultSettings: IQueryResultSettings, statusValue: number, filterByUserRole: boolean): IDataServiceRequest;
export declare function getByStatusFilterByUserRoleAsync(context: IContext, statusValue: number, filterByUserRole: boolean): AsyncResult<Shift[]>;
export declare function createGetByRetrievalCriteriaInput(queryResultSettings: IQueryResultSettings, shiftRetrievalCriteria: ShiftRetrievalCriteria | null): IDataServiceRequest;
export declare function getByRetrievalCriteriaAsync(context: IContext, shiftRetrievalCriteria: ShiftRetrievalCriteria | null): AsyncResult<Shift[]>;
export declare function createGetXReportInput(shiftId: number, terminalId: string, transactionId: string | null, hardwareProfileId: string | null): IDataServiceRequest;
export declare function getXReportAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null, hardwareProfileId: string | null): AsyncResult<Receipt>;
export declare function createGetZReportInput(transactionId: string | null, hardwareProfileId: string | null): IDataServiceRequest;
export declare function getZReportAsync(context: IContext, transactionId: string | null, hardwareProfileId: string | null): AsyncResult<Receipt>;
export declare function createGetOpenTenderLinesInput(queryResultSettings: IQueryResultSettings, shiftId: number, terminalId: string): IDataServiceRequest;
export declare function getOpenTenderLinesAsync(context: IContext, shiftId: number, terminalId: string): AsyncResult<ShiftTenderLine[]>;
export declare function createValidateCashDrawerLimitInput(shiftTerminalId: string | null, shiftId: number): IDataServiceRequest;
export declare function validateCashDrawerLimitAsync(context: IContext, shiftTerminalId: string | null, shiftId: number): AsyncResult<NullResult>;
