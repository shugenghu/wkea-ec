import { DataServiceQuery } from '../DataServiceQuery';
import { ProductCatalogClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function catalogsQuery(recordId) {
    var key = (recordId) ? { RecordId: recordId } : null;
    return new DataServiceQuery("Catalogs", "ProductCatalog", ProductCatalogClass, key);
}
export function createCreateInput(entity) {
    return catalogsQuery().create(entity);
}
export function createProductCatalogAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return catalogsQuery(entity.RecordId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return catalogsQuery(entity.RecordId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(recordId) {
    return catalogsQuery(recordId).read();
}
export function readAsync(context, recordId) {
    const request = createReadAsync(recordId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return catalogsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCatalogsInput(queryResultSettings, channelId, activeOnly) {
    const query = catalogsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCatalogs', true, ProductCatalogClass, 'true', { bypassCache: 'none', returnEntity: 'ProductCatalog' }, { channelId: channelId, activeOnly: activeOnly });
}
export function getCatalogsAsync(context, channelId, activeOnly) {
    const request = createGetCatalogsInput(context.queryResultSettings, channelId, activeOnly);
    return executeAction(request, context);
}
//# sourceMappingURL=CatalogsDataActions.g.js.map