import { AsyncResult } from '../async-result';
import { Cart, TokenizedPaymentCard, CartTenderLine, SalesOrder, LoyaltyPointRedemptionEstimate, TenderLine, LineShippingAddress, SalesLineDeliveryOption, CartDeliveryPreferences, Address, DeliveryOption, LineDeliverySpecification, DeliverySpecification, ReasonCodeLine, CartLine, TenderDiscountLine, ReceiptRetrievalCriteria, Receipt, CartSearchCriteria, CardPaymentAcceptSettings, CommerceProperty, CardPaymentAcceptPoint, RetrievePaymentResultSettings, CardPaymentAcceptResult, CartPromotions, CartPromotionLine, ChargeCode, TenderTypeAmount, CartLineValidationResults } from '../Entities/CommerceTypes.g';
import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
export declare function createCreateInput(entity: Cart): IDataServiceRequest;
export declare function createCartAsync(context: IContext, entity: Cart): AsyncResult<Cart>;
export declare function createUpdateInput(entity: Cart): IDataServiceRequest;
export declare function updateAsync(context: IContext, entity: Cart): AsyncResult<Cart>;
export declare function createDeleteAsync(entity: Cart): IDataServiceRequest;
export declare function deleteAsync(context: IContext, entity: Cart): AsyncResult<NullResult>;
export declare function createReadAsync(id: string): IDataServiceRequest;
export declare function readAsync(context: IContext, id: string): AsyncResult<Cart>;
export declare function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function readAllAsync(context: IContext): AsyncResult<Cart[]>;
export declare function createCheckoutInput(id: string, receiptEmail: string | null, tokenizedPaymentCard: TokenizedPaymentCard | null, receiptNumberSequence: string | null, cartTenderLines: CartTenderLine[] | null, cartVersion: number | null): IDataServiceRequest;
export declare function checkoutAsync(context: IContext, id: string, receiptEmail: string | null, tokenizedPaymentCard: TokenizedPaymentCard | null, receiptNumberSequence: string | null, cartTenderLines: CartTenderLine[] | null, cartVersion: number | null): AsyncResult<SalesOrder>;
export declare function createGetMaxLoyaltyPointsToRedeemForTransactionBalanceInput(id: string, loyaltyCardId: string | null, currencyCode: string | null): IDataServiceRequest;
export declare function getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(context: IContext, id: string, loyaltyCardId: string | null, currencyCode: string | null): AsyncResult<LoyaltyPointRedemptionEstimate>;
export declare function createGetPaymentsHistoryInput(queryResultSettings: IQueryResultSettings, id: string): IDataServiceRequest;
export declare function getPaymentsHistoryAsync(context: IContext, id: string): AsyncResult<TenderLine[]>;
export declare function createGetLineDeliveryOptionsByChannelIdInput(queryResultSettings: IQueryResultSettings, id: string, lineShippingAddresses: LineShippingAddress[] | null, channelId: number): IDataServiceRequest;
export declare function getLineDeliveryOptionsByChannelIdAsync(context: IContext, id: string, lineShippingAddresses: LineShippingAddress[] | null, channelId: number): AsyncResult<SalesLineDeliveryOption[]>;
export declare function createGetLineDeliveryOptionsInput(queryResultSettings: IQueryResultSettings, id: string, lineShippingAddresses: LineShippingAddress[] | null, filterOption?: number | null): IDataServiceRequest;
export declare function getLineDeliveryOptionsAsync(context: IContext, id: string, lineShippingAddresses: LineShippingAddress[] | null, filterOption?: number | null): AsyncResult<SalesLineDeliveryOption[]>;
export declare function createGetDeliveryPreferencesInput(id: string): IDataServiceRequest;
export declare function getDeliveryPreferencesAsync(context: IContext, id: string): AsyncResult<CartDeliveryPreferences>;
export declare function createGetDeliveryOptionsInput(queryResultSettings: IQueryResultSettings, id: string, shippingAddress: Address | null, cartLineIds: string[] | null, filterOption: number | null): IDataServiceRequest;
export declare function getDeliveryOptionsAsync(context: IContext, id: string, shippingAddress: Address | null, cartLineIds: string[] | null, filterOption: number | null): AsyncResult<DeliveryOption[]>;
export declare function createUpdateLineDeliverySpecificationsInput(id: string, lineDeliverySpecifications: LineDeliverySpecification[] | null): IDataServiceRequest;
export declare function updateLineDeliverySpecificationsAsync(context: IContext, id: string, lineDeliverySpecifications: LineDeliverySpecification[] | null): AsyncResult<Cart>;
export declare function createUpdateDeliverySpecificationInput(id: string, deliverySpecification: DeliverySpecification | null): IDataServiceRequest;
export declare function updateDeliverySpecificationAsync(context: IContext, id: string, deliverySpecification: DeliverySpecification | null): AsyncResult<Cart>;
export declare function createAddChargeInput(id: string, moduleTypeValue: number, chargeCode: string | null, amount: number): IDataServiceRequest;
export declare function addChargeAsync(context: IContext, id: string, moduleTypeValue: number, chargeCode: string | null, amount: number): AsyncResult<Cart>;
export declare function createOverrideChargeInput(id: string, chargeLineId: string | null, amount: number, reasonCodeLines: ReasonCodeLine[] | null): IDataServiceRequest;
export declare function overrideChargeAsync(context: IContext, id: string, chargeLineId: string | null, amount: number, reasonCodeLines: ReasonCodeLine[] | null): AsyncResult<Cart>;
export declare function createAddCartLineChargeInput(id: string, cartLineId: string | null, moduleTypeValue: number, chargeCode: string | null, amount: number): IDataServiceRequest;
export declare function addCartLineChargeAsync(context: IContext, id: string, cartLineId: string | null, moduleTypeValue: number, chargeCode: string | null, amount: number): AsyncResult<Cart>;
export declare function createOverrideCartLineChargeInput(id: string, cartLineId: string | null, chargeLineId: string | null, amount: number, reasonCodeLines: ReasonCodeLine[] | null): IDataServiceRequest;
export declare function overrideCartLineChargeAsync(context: IContext, id: string, cartLineId: string | null, chargeLineId: string | null, amount: number, reasonCodeLines: ReasonCodeLine[] | null): AsyncResult<Cart>;
export declare function createVoidInput(id: string, reasonCodeLines: ReasonCodeLine[] | null, cartVersion?: number | null): IDataServiceRequest;
export declare function voidAsync(context: IContext, id: string, reasonCodeLines: ReasonCodeLine[] | null, cartVersion?: number | null): AsyncResult<SalesOrder>;
export declare function createAddCartLinesInput(id: string, cartLines: CartLine[] | null, cartVersion: number | null): IDataServiceRequest;
export declare function addCartLinesAsync(context: IContext, id: string, cartLines: CartLine[] | null, cartVersion: number | null): AsyncResult<Cart>;
export declare function createUpdateCartLinesInput(id: string, cartLines: CartLine[] | null, cartVersion?: number | null): IDataServiceRequest;
export declare function updateCartLinesAsync(context: IContext, id: string, cartLines: CartLine[] | null, cartVersion?: number | null): AsyncResult<Cart>;
export declare function createVoidCartLinesInput(id: string, cartLines: CartLine[] | null): IDataServiceRequest;
export declare function voidCartLinesAsync(context: IContext, id: string, cartLines: CartLine[] | null): AsyncResult<Cart>;
export declare function createRemoveCartLinesInput(id: string, cartLineIds: string[] | null): IDataServiceRequest;
export declare function removeCartLinesAsync(context: IContext, id: string, cartLineIds: string[] | null): AsyncResult<Cart>;
export declare function createAddTenderLineInput(id: string, cartTenderLine: CartTenderLine | null, cartVersion: number | null): IDataServiceRequest;
export declare function addTenderLineAsync(context: IContext, id: string, cartTenderLine: CartTenderLine | null, cartVersion: number | null): AsyncResult<Cart>;
export declare function createCalculateTenderDiscountInput(id: string, tenderLine: TenderLine | null, cartVersion: number | null): IDataServiceRequest;
export declare function calculateTenderDiscountAsync(context: IContext, id: string, tenderLine: TenderLine | null, cartVersion: number | null): AsyncResult<TenderDiscountLine>;
export declare function createAddPreprocessedTenderLineInput(id: string, preprocessedTenderLine: TenderLine | null, cartVersion: number | null): IDataServiceRequest;
export declare function addPreprocessedTenderLineAsync(context: IContext, id: string, preprocessedTenderLine: TenderLine | null, cartVersion: number | null): AsyncResult<Cart>;
export declare function createValidateTenderLineForAddInput(id: string, tenderLine: TenderLine | null): IDataServiceRequest;
export declare function validateTenderLineForAddAsync(context: IContext, id: string, tenderLine: TenderLine | null): AsyncResult<NullResult>;
export declare function createUpdateTenderLineSignatureInput(id: string, tenderLineId: string | null, signatureData: string | null): IDataServiceRequest;
export declare function updateTenderLineSignatureAsync(context: IContext, id: string, tenderLineId: string | null, signatureData: string | null): AsyncResult<Cart>;
export declare function createGetDeclinedOrVoidedCardReceiptsInput(queryResultSettings: IQueryResultSettings, id: string, preprocessedTenderLine: TenderLine | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest;
export declare function getDeclinedOrVoidedCardReceiptsAsync(context: IContext, id: string, preprocessedTenderLine: TenderLine | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): AsyncResult<Receipt[]>;
export declare function createCopyInput(id: string, targetCartType: number): IDataServiceRequest;
export declare function copyAsync(context: IContext, id: string, targetCartType: number): AsyncResult<Cart>;
export declare function createAddInvoicedSalesLinesToCartInput(transactionId: string | null, invoicedSalesLinesIds: number[]): IDataServiceRequest;
export declare function addInvoicedSalesLinesToCartAsync(context: IContext, transactionId: string | null, invoicedSalesLinesIds: number[]): AsyncResult<Cart>;
export declare function createVoidTenderLineInput(id: string, tenderLineId: string | null, reasonCodeLines: ReasonCodeLine[] | null, isPreprocessed: boolean | null, forceVoid: boolean | null): IDataServiceRequest;
export declare function voidTenderLineAsync(context: IContext, id: string, tenderLineId: string | null, reasonCodeLines: ReasonCodeLine[] | null, isPreprocessed: boolean | null, forceVoid: boolean | null): AsyncResult<Cart>;
export declare function createIssueGiftCardInput(id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): IDataServiceRequest;
export declare function issueGiftCardAsync(context: IContext, id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): AsyncResult<Cart>;
export declare function createRefillGiftCardInput(id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): IDataServiceRequest;
export declare function refillGiftCardAsync(context: IContext, id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): AsyncResult<Cart>;
export declare function createCashOutGiftCardInput(id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): IDataServiceRequest;
export declare function cashOutGiftCardAsync(context: IContext, id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): AsyncResult<Cart>;
export declare function createSuspendInput(id: string): IDataServiceRequest;
export declare function suspendAsync(context: IContext, id: string): AsyncResult<Cart>;
export declare function createSuspendWithJournalInput(id: string, journalCartId: string | null, receiptNumberSequence: string | null): IDataServiceRequest;
export declare function suspendWithJournalAsync(context: IContext, id: string, journalCartId: string | null, receiptNumberSequence: string | null): AsyncResult<Cart>;
export declare function createResumeInput(id: string): IDataServiceRequest;
export declare function resumeAsync(context: IContext, id: string): AsyncResult<Cart>;
export declare function createResumeFromReceiptIdInput(receiptId: string | null): IDataServiceRequest;
export declare function resumeFromReceiptIdAsync(context: IContext, receiptId: string | null): AsyncResult<Cart>;
export declare function createRemoveDiscountCodesInput(id: string, discountCodes: string[] | null): IDataServiceRequest;
export declare function removeDiscountCodesAsync(context: IContext, id: string, discountCodes: string[] | null): AsyncResult<Cart>;
export declare function createGetSuspendedInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getSuspendedAsync(context: IContext): AsyncResult<Cart[]>;
export declare function createSearchInput(queryResultSettings: IQueryResultSettings, cartSearchCriteria: CartSearchCriteria | null): IDataServiceRequest;
export declare function searchAsync(context: IContext, cartSearchCriteria: CartSearchCriteria | null): AsyncResult<Cart[]>;
export declare function createOverrideCartLinePriceInput(id: string, cartLineId: string | null, price: number): IDataServiceRequest;
export declare function overrideCartLinePriceAsync(context: IContext, id: string, cartLineId: string | null, price: number): AsyncResult<Cart>;
export declare function createGetCardPaymentAcceptPointInput(id: string, cardPaymentAcceptSettings: CardPaymentAcceptSettings | null, extensionProperties: CommerceProperty[] | null): IDataServiceRequest;
export declare function getCardPaymentAcceptPointAsync(context: IContext, id: string, cardPaymentAcceptSettings: CardPaymentAcceptSettings | null, extensionProperties: CommerceProperty[] | null): AsyncResult<CardPaymentAcceptPoint>;
export declare function createRetrieveCardPaymentAcceptResultInput(resultAccessCode: string | null, extensionProperties: CommerceProperty[] | null, cartId: string | null, settings: RetrievePaymentResultSettings | null): IDataServiceRequest;
export declare function retrieveCardPaymentAcceptResultAsync(context: IContext, resultAccessCode: string | null, extensionProperties: CommerceProperty[] | null, cartId: string | null, settings: RetrievePaymentResultSettings | null): AsyncResult<CardPaymentAcceptResult>;
export declare function createRecallOrderInput(transactionId: string | null, salesId: string | null): IDataServiceRequest;
export declare function recallOrderAsync(context: IContext, transactionId: string | null, salesId: string | null): AsyncResult<Cart>;
export declare function createRecallQuoteInput(transactionId: string | null, quoteId: string | null): IDataServiceRequest;
export declare function recallQuoteAsync(context: IContext, transactionId: string | null, quoteId: string | null): AsyncResult<Cart>;
export declare function createRecalculateOrderInput(id: string): IDataServiceRequest;
export declare function recalculateOrderAsync(context: IContext, id: string): AsyncResult<Cart>;
export declare function createResetAllChargesInput(id: string): IDataServiceRequest;
export declare function resetAllChargesAsync(context: IContext, id: string): AsyncResult<Cart>;
export declare function createGetPromotionsInput(id: string): IDataServiceRequest;
export declare function getPromotionsAsync(context: IContext, id: string): AsyncResult<CartPromotions>;
export declare function createGetAvailablePromotionsInput(queryResultSettings: IQueryResultSettings, id: string, cartLineIds: string[] | null): IDataServiceRequest;
export declare function getAvailablePromotionsAsync(context: IContext, id: string, cartLineIds: string[] | null): AsyncResult<CartPromotionLine[]>;
export declare function createRecallSalesInvoiceInput(transactionId: string | null, invoiceId: string | null): IDataServiceRequest;
export declare function recallSalesInvoiceAsync(context: IContext, transactionId: string | null, invoiceId: string | null): AsyncResult<Cart>;
export declare function createAddOrderInvoiceInput(id: string, invoiceId: string | null, lineDescription: string | null): IDataServiceRequest;
export declare function addOrderInvoiceAsync(context: IContext, id: string, invoiceId: string | null, lineDescription: string | null): AsyncResult<Cart>;
export declare function createAddInvoicesInput(id: string, invoiceIds: string[] | null): IDataServiceRequest;
export declare function addInvoicesAsync(context: IContext, id: string, invoiceIds: string[] | null): AsyncResult<Cart>;
export declare function createUpdateCommissionSalesGroupInput(transactionId: string | null, cartLineId: string | null, commissionSalesGroup: string | null, isUserInitiated: boolean): IDataServiceRequest;
export declare function updateCommissionSalesGroupAsync(context: IContext, transactionId: string | null, cartLineId: string | null, commissionSalesGroup: string | null, isUserInitiated: boolean): AsyncResult<Cart>;
export declare function createAddCouponsInput(id: string, couponCodes: string[] | null, isLegacyDiscountCode: boolean | null): IDataServiceRequest;
export declare function addCouponsAsync(context: IContext, id: string, couponCodes: string[] | null, isLegacyDiscountCode: boolean | null): AsyncResult<Cart>;
export declare function createRemoveCouponsInput(id: string, couponCodes: string[] | null): IDataServiceRequest;
export declare function removeCouponsAsync(context: IContext, id: string, couponCodes: string[] | null): AsyncResult<Cart>;
export declare function createGetChargeCodesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getChargeCodesAsync(context: IContext): AsyncResult<ChargeCode[]>;
export declare function createAddDiscountCodeInput(id: string, discountCode: string | null): IDataServiceRequest;
export declare function addDiscountCodeAsync(context: IContext, id: string, discountCode: string | null): AsyncResult<Cart>;
export declare function createGetReturnOptionsInput(queryResultSettings: IQueryResultSettings, id: string): IDataServiceRequest;
export declare function getReturnOptionsAsync(context: IContext, id: string): AsyncResult<TenderTypeAmount[]>;
export declare function createValidateForCheckoutInput(id: string, cartVersion: number | null): IDataServiceRequest;
export declare function validateForCheckoutAsync(context: IContext, id: string, cartVersion: number | null): AsyncResult<CartLineValidationResults>;
