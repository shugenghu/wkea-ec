import { AsyncResult } from '../async-result';
import { ReasonCodeLine, PaymentMerchantInformation, StoreSafe, ShiftReconciliationLineRetrievalCriteria, ShiftReconciliationLine, ReceiptMask, SearchSuggestionCriteria, SearchSuggestion, DeviceActivationResult, CreateHardwareStationTokenResult, ValidateHardwareStationTokenResult, Barcode, ButtonGrid, GetButtonGridsByIdsCriteria, CardTypeInfo, CityInfo, CountryRegionInfo, CountyInfo, CreditMemo, TerminalDataDownloadRequestInfo, DataDownloadParameters, TerminalDataUploadRequestInfo, DataUploadParameters, DownloadSession, NumberSequenceSeedData, ReceiptNumberResetInfo, LoyaltyRewardPointActivity, CurrencyRequest, CurrencyAmount, DiscountCode, DistrictInfo, HardwareStationProfile, HardwareProfile, LocalizedString, OperationPermission, ReasonCode, CommerceProperty, ReportDataSet, IncomeExpenseAccount, StateProvinceInfo, ZipCodeInfo, KitTransaction, LoyaltyCard, LoyaltyCardTransaction, TransactionSearchCriteria, Transaction, GiftCard, NonSalesTransaction, DropAndDeclareTransaction, TaxOverride, CustomerBalances, NameValuePair, LinkToExistingCustomerResult, OfflineSyncStatsLine, StorageAccessToken, Framework, TaskGuidesSearchResult, Recording, AttributeDefinitionCriteria, AttributeDefinition, AttributeGroupDefinitionCriteria, AttributeGroupDefinition, FiscalTransaction, SalesOrder, AuditEvent, InventoryAvailableToPromise, NotificationItem, FiscalIntegrationDocumentRetrievalCriteria, FiscalIntegrationDocument, FiscalIntegrationRegistrationResult, FiscalIntegrationRegistrationProcess, FiscalIntegrationSupportedEvents, FiscalIntegrationTechnicalProfile, FiscalIntegrationTechnicalProfileSearchCriteria, FiscalIntegrationServiceInfo, FiscalIntegrationServiceStatus, FiscalIntegrationServiceCommunicationResult, FeatureState, FiscalIntegrationSequentialSignatureData, DiscountsSearchCriteria, Promotion, CashDeclaration, CustomerGroup, DeliveryOption, ChannelIdentity, EnvironmentConfiguration, SearchConfiguration, ExtensionPackageDefinition, ExtensionProfile, DeviceConfiguration, VisualProfile, SupportedLanguage, Affiliation, SalesTaxGroup, TenderType, UnitOfMeasure, Currency, CommissionSalesGroup, ChannelInventoryConfiguration, Device, UserDefinedSecretCertificateResult, MediaBlob, ExtensibleEnumerationContainer, AddressPurpose, ReturnPolicy } from '../Entities/CommerceTypes.g';
import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
export declare function createRoundAmountByTenderTypeInput(amount: number, tenderTypeId: string | null): IDataServiceRequest;
export declare function roundAmountByTenderTypeAsync(context: IContext, amount: number, tenderTypeId: string | null): AsyncResult<number>;
export declare function createVoidSuspendedTransactionsInput(suspendedCartIds: string[] | null, shiftId: number | null, shiftTerminalId: string | null, reasonCodeLines: ReasonCodeLine[] | null): IDataServiceRequest;
export declare function voidSuspendedTransactionsAsync(context: IContext, suspendedCartIds: string[] | null, shiftId: number | null, shiftTerminalId: string | null, reasonCodeLines: ReasonCodeLine[] | null): AsyncResult<NullResult>;
export declare function createGetMerchantPropertiesByServiceAccountIdInput(queryResultSettings: IQueryResultSettings, serviceAccountIds: string[] | null): IDataServiceRequest;
export declare function getMerchantPropertiesByServiceAccountIdAsync(context: IContext, serviceAccountIds: string[] | null): AsyncResult<PaymentMerchantInformation[]>;
export declare function createGetStoreSafesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getStoreSafesAsync(context: IContext): AsyncResult<StoreSafe[]>;
export declare function createGetShiftReconciliationLinesInput(queryResultSettings: IQueryResultSettings, shiftReconciliationLineRetrievalCriteria: ShiftReconciliationLineRetrievalCriteria | null): IDataServiceRequest;
export declare function getShiftReconciliationLinesAsync(context: IContext, shiftReconciliationLineRetrievalCriteria: ShiftReconciliationLineRetrievalCriteria | null): AsyncResult<ShiftReconciliationLine[]>;
export declare function createReconcileLinesInput(shiftReconciliationLines: ShiftReconciliationLine[] | null, description: string | null): IDataServiceRequest;
export declare function reconcileLinesAsync(context: IContext, shiftReconciliationLines: ShiftReconciliationLine[] | null, description: string | null): AsyncResult<NullResult>;
export declare function createUndoReconciliationInput(shiftReconciliationLines: ShiftReconciliationLine[] | null): IDataServiceRequest;
export declare function undoReconciliationAsync(context: IContext, shiftReconciliationLines: ShiftReconciliationLine[] | null): AsyncResult<NullResult>;
export declare function createGetReceiptMasksInput(queryResultSettings: IQueryResultSettings, receiptTransactionType: number | null): IDataServiceRequest;
export declare function getReceiptMasksAsync(context: IContext, receiptTransactionType: number | null): AsyncResult<ReceiptMask[]>;
export declare function createGetSearchSuggestionsInput(queryResultSettings: IQueryResultSettings, searchSuggestionCriteria: SearchSuggestionCriteria | null): IDataServiceRequest;
export declare function getSearchSuggestionsAsync(context: IContext, searchSuggestionCriteria: SearchSuggestionCriteria | null): AsyncResult<SearchSuggestion[]>;
export declare function createStartSessionInput(transactionId: string | null): IDataServiceRequest;
export declare function startSessionAsync(context: IContext, transactionId: string | null): AsyncResult<NullResult>;
export declare function createEndSessionInput(transactionId: string | null): IDataServiceRequest;
export declare function endSessionAsync(context: IContext, transactionId: string | null): AsyncResult<NullResult>;
export declare function createActivateDeviceInput(deviceNumber: string | null, terminalId: string | null, deviceId: string | null, forceActivate: boolean, deviceType: number | null): IDataServiceRequest;
export declare function activateDeviceAsync(context: IContext, deviceNumber: string | null, terminalId: string | null, deviceId: string | null, forceActivate: boolean, deviceType: number | null): AsyncResult<DeviceActivationResult>;
export declare function createMassActivateDeviceInput(deviceNumber: string | null, terminalId: string | null, deviceId: string | null, deviceType: number | null): IDataServiceRequest;
export declare function massActivateDeviceAsync(context: IContext, deviceNumber: string | null, terminalId: string | null, deviceId: string | null, deviceType: number | null): AsyncResult<DeviceActivationResult>;
export declare function createDeactivateDeviceInput(transactionId: string | null): IDataServiceRequest;
export declare function deactivateDeviceAsync(context: IContext, transactionId: string | null): AsyncResult<NullResult>;
export declare function createCreateHardwareStationTokenInput(): IDataServiceRequest;
export declare function createHardwareStationTokenAsync(context: IContext): AsyncResult<CreateHardwareStationTokenResult>;
export declare function createValidateHardwareStationTokenInput(deviceNumber: string | null, hardwareStationToken: string | null): IDataServiceRequest;
export declare function validateHardwareStationTokenAsync(context: IContext, deviceNumber: string | null, hardwareStationToken: string | null): AsyncResult<ValidateHardwareStationTokenResult>;
export declare function createGetBarcodeByIdInput(barcodeId: string | null): IDataServiceRequest;
export declare function getBarcodeByIdAsync(context: IContext, barcodeId: string | null): AsyncResult<Barcode>;
export declare function createGetButtonGridByIdInput(buttonGridId: string | null): IDataServiceRequest;
export declare function getButtonGridByIdAsync(context: IContext, buttonGridId: string | null): AsyncResult<ButtonGrid>;
export declare function createGetButtonGridsByIdsInput(queryResultSettings: IQueryResultSettings, getButtonGridsByIdsCriteria: GetButtonGridsByIdsCriteria | null): IDataServiceRequest;
export declare function getButtonGridsByIdsAsync(context: IContext, getButtonGridsByIdsCriteria: GetButtonGridsByIdsCriteria | null): AsyncResult<ButtonGrid[]>;
export declare function createGetCardTypesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getCardTypesAsync(context: IContext): AsyncResult<CardTypeInfo[]>;
export declare function createResolveCardTypesInput(queryResultSettings: IQueryResultSettings, cardNumberPrefix: string | null, cardType: number | null, paymentToken?: string | null): IDataServiceRequest;
export declare function resolveCardTypesAsync(context: IContext, cardNumberPrefix: string | null, cardType: number | null, paymentToken?: string | null): AsyncResult<CardTypeInfo[]>;
export declare function createGetSupportedPaymentCardTypesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getSupportedPaymentCardTypesAsync(context: IContext): AsyncResult<string[]>;
export declare function createGetCitiesInput(queryResultSettings: IQueryResultSettings, countryRegionId: string | null, stateProvinceId: string | null, countyId: string | null): IDataServiceRequest;
export declare function getCitiesAsync(context: IContext, countryRegionId: string | null, stateProvinceId: string | null, countyId: string | null): AsyncResult<CityInfo[]>;
export declare function createGetCountryRegionsForShippingInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getCountryRegionsForShippingAsync(context: IContext): AsyncResult<CountryRegionInfo[]>;
export declare function createGetCountryRegionsByLanguageIdInput(queryResultSettings: IQueryResultSettings, languageId: string | null): IDataServiceRequest;
export declare function getCountryRegionsByLanguageIdAsync(context: IContext, languageId: string | null): AsyncResult<CountryRegionInfo[]>;
export declare function createGetCountiesInput(queryResultSettings: IQueryResultSettings, countryRegionId: string | null, stateProvinceId: string | null): IDataServiceRequest;
export declare function getCountiesAsync(context: IContext, countryRegionId: string | null, stateProvinceId: string | null): AsyncResult<CountyInfo[]>;
export declare function createGetCreditMemoByIdInput(creditMemoId: string | null): IDataServiceRequest;
export declare function getCreditMemoByIdAsync(context: IContext, creditMemoId: string | null): AsyncResult<CreditMemo>;
export declare function createGetDownloadIntervalInput(dataStoreName: string | null): IDataServiceRequest;
export declare function getDownloadIntervalAsync(context: IContext, dataStoreName: string | null): AsyncResult<string>;
export declare function createGetTerminalDataStoreNameInput(terminalId: string | null): IDataServiceRequest;
export declare function getTerminalDataStoreNameAsync(context: IContext, terminalId: string | null): AsyncResult<string>;
export declare function createGetDownloadLinkInput(dataStoreName: string | null, downloadSessionId: number): IDataServiceRequest;
export declare function getDownloadLinkAsync(context: IContext, dataStoreName: string | null, downloadSessionId: number): AsyncResult<string>;
export declare function createGetDataDownloadParametersByTerminalInput(terminalDataDownloadRequestInfo: TerminalDataDownloadRequestInfo | null): IDataServiceRequest;
export declare function getDataDownloadParametersByTerminalAsync(context: IContext, terminalDataDownloadRequestInfo: TerminalDataDownloadRequestInfo | null): AsyncResult<DataDownloadParameters>;
export declare function createGetDataUploadParametersByTerminalInput(terminalDataUploadRequestInfo: TerminalDataUploadRequestInfo | null): IDataServiceRequest;
export declare function getDataUploadParametersByTerminalAsync(context: IContext, terminalDataUploadRequestInfo: TerminalDataUploadRequestInfo | null): AsyncResult<DataUploadParameters>;
export declare function createGetDownloadSessionsInput(queryResultSettings: IQueryResultSettings, dataStoreName: string | null): IDataServiceRequest;
export declare function getDownloadSessionsAsync(context: IContext, dataStoreName: string | null): AsyncResult<DownloadSession[]>;
export declare function createGetInitialDownloadSessionsInput(queryResultSettings: IQueryResultSettings, dataStoreName: string | null): IDataServiceRequest;
export declare function getInitialDownloadSessionsAsync(context: IContext, dataStoreName: string | null): AsyncResult<DownloadSession[]>;
export declare function createGetUploadJobDefinitionsInput(queryResultSettings: IQueryResultSettings, dataStoreName: string | null): IDataServiceRequest;
export declare function getUploadJobDefinitionsAsync(context: IContext, dataStoreName: string | null): AsyncResult<string[]>;
export declare function createGetUploadIntervalInput(dataStoreName: string | null): IDataServiceRequest;
export declare function getUploadIntervalAsync(context: IContext, dataStoreName: string | null): AsyncResult<string>;
export declare function createPostOfflineTransactionsInput(offlineTransactionForMPOS: string[] | null): IDataServiceRequest;
export declare function postOfflineTransactionsAsync(context: IContext, offlineTransactionForMPOS: string[] | null): AsyncResult<boolean>;
export declare function createGetRetailTrialPlanOfferInput(): IDataServiceRequest;
export declare function getRetailTrialPlanOfferAsync(context: IContext): AsyncResult<boolean>;
export declare function createGetLatestNumberSequenceInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getLatestNumberSequenceAsync(context: IContext): AsyncResult<NumberSequenceSeedData[]>;
export declare function createGetReceiptNumberResetInfoInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getReceiptNumberResetInfoAsync(context: IContext): AsyncResult<ReceiptNumberResetInfo[]>;
export declare function createGetLoyaltyRewardPointActivityTimelineInput(queryResultSettings: IQueryResultSettings, cardNumber: string | null, rewardPointId: string | null): IDataServiceRequest;
export declare function getLoyaltyRewardPointActivityTimelineAsync(context: IContext, cardNumber: string | null, rewardPointId: string | null): AsyncResult<LoyaltyRewardPointActivity[]>;
export declare function createGetLoyaltyRewardPointActivityTimelineForExpiredPointsInput(queryResultSettings: IQueryResultSettings, cardNumber: string | null, rewardPointId: string | null): IDataServiceRequest;
export declare function getLoyaltyRewardPointActivityTimelineForExpiredPointsAsync(context: IContext, cardNumber: string | null, rewardPointId: string | null): AsyncResult<LoyaltyRewardPointActivity[]>;
export declare function createCalculateTotalCurrencyAmountInput(currenciesAmount: CurrencyRequest[] | null): IDataServiceRequest;
export declare function calculateTotalCurrencyAmountAsync(context: IContext, currenciesAmount: CurrencyRequest[] | null): AsyncResult<CurrencyAmount>;
export declare function createGetDiscountCodeInput(discountCode: string | null): IDataServiceRequest;
export declare function getDiscountCodeAsync(context: IContext, discountCode: string | null): AsyncResult<DiscountCode>;
export declare function createGetDiscountCodesByOfferIdInput(queryResultSettings: IQueryResultSettings, offerId: string | null): IDataServiceRequest;
export declare function getDiscountCodesByOfferIdAsync(context: IContext, offerId: string | null): AsyncResult<DiscountCode[]>;
export declare function createGetDiscountCodesByKeywordInput(queryResultSettings: IQueryResultSettings, keyword: string | null, activeDate: Date): IDataServiceRequest;
export declare function getDiscountCodesByKeywordAsync(context: IContext, keyword: string | null, activeDate: Date): AsyncResult<DiscountCode[]>;
export declare function createGetDistrictsInput(queryResultSettings: IQueryResultSettings, countryRegionId: string | null, stateProvinceId: string | null, countyId: string | null, cityName: string | null): IDataServiceRequest;
export declare function getDistrictsAsync(context: IContext, countryRegionId: string | null, stateProvinceId: string | null, countyId: string | null, cityName: string | null): AsyncResult<DistrictInfo[]>;
export declare function createGetHardwareStationProfilesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getHardwareStationProfilesAsync(context: IContext): AsyncResult<HardwareStationProfile[]>;
export declare function createGetHardwareProfileByIdInput(hardwareProfileId: string | null): IDataServiceRequest;
export declare function getHardwareProfileByIdAsync(context: IContext, hardwareProfileId: string | null): AsyncResult<HardwareProfile>;
export declare function createGetLocalizedStringsInput(queryResultSettings: IQueryResultSettings, languageId: string | null, textId: number | null): IDataServiceRequest;
export declare function getLocalizedStringsAsync(context: IContext, languageId: string | null, textId: number | null): AsyncResult<LocalizedString[]>;
export declare function createGetOperationPermissionByIdInput(operationId: number): IDataServiceRequest;
export declare function getOperationPermissionByIdAsync(context: IContext, operationId: number): AsyncResult<OperationPermission>;
export declare function createGetReasonCodesByIdInput(queryResultSettings: IQueryResultSettings, reasonCodeGroupId: string | null): IDataServiceRequest;
export declare function getReasonCodesByIdAsync(context: IContext, reasonCodeGroupId: string | null): AsyncResult<ReasonCode[]>;
export declare function createSearchReportDataSetInput(reportId: string | null, parameters: CommerceProperty[] | null): IDataServiceRequest;
export declare function searchReportDataSetAsync(context: IContext, reportId: string | null, parameters: CommerceProperty[] | null): AsyncResult<ReportDataSet>;
export declare function createGetReportDataSetByIdInput(reportId: string | null): IDataServiceRequest;
export declare function getReportDataSetByIdAsync(context: IContext, reportId: string | null): AsyncResult<ReportDataSet>;
export declare function createGetSrsReportDataSetInput(reportId: string | null, parameters: CommerceProperty[] | null): IDataServiceRequest;
export declare function getSrsReportDataSetAsync(context: IContext, reportId: string | null, parameters: CommerceProperty[] | null): AsyncResult<ReportDataSet>;
export declare function createGetIncomeExpenseAccountsInput(queryResultSettings: IQueryResultSettings, incomeExpenseAccountType: number): IDataServiceRequest;
export declare function getIncomeExpenseAccountsAsync(context: IContext, incomeExpenseAccountType: number): AsyncResult<IncomeExpenseAccount[]>;
export declare function createGetStateProvincesInput(queryResultSettings: IQueryResultSettings, countryRegionId: string | null): IDataServiceRequest;
export declare function getStateProvincesAsync(context: IContext, countryRegionId: string | null): AsyncResult<StateProvinceInfo[]>;
export declare function createGetZipCodesInput(queryResultSettings: IQueryResultSettings, countryRegionId: string | null, stateProvinceId: string | null, countyId: string | null, cityName: string | null, district: string | null): IDataServiceRequest;
export declare function getZipCodesAsync(context: IContext, countryRegionId: string | null, stateProvinceId: string | null, countyId: string | null, cityName: string | null, district: string | null): AsyncResult<ZipCodeInfo[]>;
export declare function createGetAddressFromZipCodeInput(queryResultSettings: IQueryResultSettings, countryRegionId: string | null, zipPostalCode: string | null): IDataServiceRequest;
export declare function getAddressFromZipCodeAsync(context: IContext, countryRegionId: string | null, zipPostalCode: string | null): AsyncResult<ZipCodeInfo[]>;
export declare function createDisassembleKitTransactionsInput(kitTransaction: KitTransaction | null): IDataServiceRequest;
export declare function disassembleKitTransactionsAsync(context: IContext, kitTransaction: KitTransaction | null): AsyncResult<KitTransaction>;
export declare function createIssueLoyaltyCardInput(loyaltyCard: LoyaltyCard | null): IDataServiceRequest;
export declare function issueLoyaltyCardAsync(context: IContext, loyaltyCard: LoyaltyCard | null): AsyncResult<LoyaltyCard>;
export declare function createGetLoyaltyCardInput(cardNumber: string | null): IDataServiceRequest;
export declare function getLoyaltyCardAsync(context: IContext, cardNumber: string | null): AsyncResult<LoyaltyCard>;
export declare function createGetCustomerLoyaltyCardsInput(queryResultSettings: IQueryResultSettings, accountNumber: string | null): IDataServiceRequest;
export declare function getCustomerLoyaltyCardsAsync(context: IContext, accountNumber: string | null): AsyncResult<LoyaltyCard[]>;
export declare function createGetLoyaltyCardTransactionsInput(queryResultSettings: IQueryResultSettings, cardNumber: string | null, rewardPointId: string | null): IDataServiceRequest;
export declare function getLoyaltyCardTransactionsAsync(context: IContext, cardNumber: string | null, rewardPointId: string | null): AsyncResult<LoyaltyCardTransaction[]>;
export declare function createGetLoyaltyRewardPointsExpiringSoonInput(queryResultSettings: IQueryResultSettings, cardNumber: string | null, rewardPointId: string | null, daysToExpiry: number): IDataServiceRequest;
export declare function getLoyaltyRewardPointsExpiringSoonAsync(context: IContext, cardNumber: string | null, rewardPointId: string | null, daysToExpiry: number): AsyncResult<LoyaltyRewardPointActivity[]>;
export declare function createSearchJournalTransactionsInput(queryResultSettings: IQueryResultSettings, searchCriteria: TransactionSearchCriteria | null): IDataServiceRequest;
export declare function searchJournalTransactionsAsync(context: IContext, searchCriteria: TransactionSearchCriteria | null): AsyncResult<Transaction[]>;
export declare function createGetGiftCardInput(giftCardId: string | null, tenderTypeId: string | null, pin: string | null, expirationMonth: number | null, expirationYear: number | null): IDataServiceRequest;
export declare function getGiftCardAsync(context: IContext, giftCardId: string | null, tenderTypeId: string | null, pin: string | null, expirationMonth: number | null, expirationYear: number | null): AsyncResult<GiftCard>;
export declare function createGetGiftCardInquiryInput(giftCardId: string | null): IDataServiceRequest;
export declare function getGiftCardInquiryAsync(context: IContext, giftCardId: string | null): AsyncResult<GiftCard>;
export declare function createGetNonSalesTransactionsInput(queryResultSettings: IQueryResultSettings, shiftId: string | null, shiftTerminalId: string | null, nonSalesTenderTypeValue: number): IDataServiceRequest;
export declare function getNonSalesTransactionsAsync(context: IContext, shiftId: string | null, shiftTerminalId: string | null, nonSalesTenderTypeValue: number): AsyncResult<NonSalesTransaction[]>;
export declare function createCreateNonSalesTransactionInput(nonSalesTransaction: NonSalesTransaction | null): IDataServiceRequest;
export declare function createNonSalesTransactionAsync(context: IContext, nonSalesTransaction: NonSalesTransaction | null): AsyncResult<NonSalesTransaction>;
export declare function createCreateDropAndDeclareTransactionInput(dropAndDeclareTransaction: DropAndDeclareTransaction | null): IDataServiceRequest;
export declare function createDropAndDeclareTransactionAsync(context: IContext, dropAndDeclareTransaction: DropAndDeclareTransaction | null): AsyncResult<DropAndDeclareTransaction>;
export declare function createGetTaxOverridesInput(queryResultSettings: IQueryResultSettings, overrideBy: string | null): IDataServiceRequest;
export declare function getTaxOverridesAsync(context: IContext, overrideBy: string | null): AsyncResult<TaxOverride[]>;
export declare function createGetCustomerBalanceInput(accountNumber: string | null, invoiceAccountNumber: string | null): IDataServiceRequest;
export declare function getCustomerBalanceAsync(context: IContext, accountNumber: string | null, invoiceAccountNumber: string | null): AsyncResult<CustomerBalances>;
export declare function createInitiateLinkToExistingCustomerInput(email: string | null, activationToken: string | null, emailTemplateId: string | null, emailProperties: NameValuePair[] | null): IDataServiceRequest;
export declare function initiateLinkToExistingCustomerAsync(context: IContext, email: string | null, activationToken: string | null, emailTemplateId: string | null, emailProperties: NameValuePair[] | null): AsyncResult<LinkToExistingCustomerResult>;
export declare function createFinalizeLinkToExistingCustomerInput(email: string | null, activationToken: string | null): IDataServiceRequest;
export declare function finalizeLinkToExistingCustomerAsync(context: IContext, email: string | null, activationToken: string | null): AsyncResult<LinkToExistingCustomerResult>;
export declare function createUnlinkFromExistingCustomerInput(): IDataServiceRequest;
export declare function unlinkFromExistingCustomerAsync(context: IContext): AsyncResult<NullResult>;
export declare function createGetOfflineSyncStatusInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getOfflineSyncStatusAsync(context: IContext): AsyncResult<OfflineSyncStatsLine[]>;
export declare function createGetOfflinePendingTransactionCountInput(): IDataServiceRequest;
export declare function getOfflinePendingTransactionCountAsync(context: IContext): AsyncResult<number>;
export declare function createGetOfflinePendingTransactionCountByShiftInput(shiftId: number, shiftTerminalId: string | null): IDataServiceRequest;
export declare function getOfflinePendingTransactionCountByShiftAsync(context: IContext, shiftId: number, shiftTerminalId: string | null): AsyncResult<number>;
export declare function createUpdateDownloadSessionInput(downloadSession: DownloadSession | null): IDataServiceRequest;
export declare function updateDownloadSessionAsync(context: IContext, downloadSession: DownloadSession | null): AsyncResult<boolean>;
export declare function createUpdateApplicationVersionInput(appVersion: string | null): IDataServiceRequest;
export declare function updateApplicationVersionAsync(context: IContext, appVersion: string | null): AsyncResult<NullResult>;
export declare function createGetStorageAccessTokenForUploadInput(): IDataServiceRequest;
export declare function getStorageAccessTokenForUploadAsync(context: IContext): AsyncResult<StorageAccessToken>;
export declare function createGetBusinessProcessModelLibrariesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getBusinessProcessModelLibrariesAsync(context: IContext): AsyncResult<Framework[]>;
export declare function createGetBusinessProcessModelLibraryInput(businessProcessModelFrameworkLineId: number, hierarchyDepth: number): IDataServiceRequest;
export declare function getBusinessProcessModelLibraryAsync(context: IContext, businessProcessModelFrameworkLineId: number, hierarchyDepth: number): AsyncResult<Framework>;
export declare function createSearchTaskGuidesByTitleInput(queryResultSettings: IQueryResultSettings, businessProcessModelFrameworkLineId: number, taskGuideSearchText: string | null, queryTypeValue: number): IDataServiceRequest;
export declare function searchTaskGuidesByTitleAsync(context: IContext, businessProcessModelFrameworkLineId: number, taskGuideSearchText: string | null, queryTypeValue: number): AsyncResult<TaskGuidesSearchResult[]>;
export declare function createGenerateBusinessProcessModelPackageInput(taskRecording: Recording | null): IDataServiceRequest;
export declare function generateBusinessProcessModelPackageAsync(context: IContext, taskRecording: Recording | null): AsyncResult<string>;
export declare function createDownloadRecordingInput(businessProcessModelLineId: number): IDataServiceRequest;
export declare function downloadRecordingAsync(context: IContext, businessProcessModelLineId: number): AsyncResult<Recording>;
export declare function createLoadRecordingFromFileInput(recordingUrl: string | null): IDataServiceRequest;
export declare function loadRecordingFromFileAsync(context: IContext, recordingUrl: string | null): AsyncResult<Recording>;
export declare function createGenerateRecordingFileInput(taskRecording: Recording | null): IDataServiceRequest;
export declare function generateRecordingFileAsync(context: IContext, taskRecording: Recording | null): AsyncResult<string>;
export declare function createGenerateTrainingDocumentInput(taskRecording: Recording | null): IDataServiceRequest;
export declare function generateTrainingDocumentAsync(context: IContext, taskRecording: Recording | null): AsyncResult<string>;
export declare function createGenerateRecordingBundleInput(taskRecording: Recording | null): IDataServiceRequest;
export declare function generateRecordingBundleAsync(context: IContext, taskRecording: Recording | null): AsyncResult<string>;
export declare function createUploadRecordingInput(taskRecording: Recording | null, businessProcessModelLineId: number): IDataServiceRequest;
export declare function uploadRecordingAsync(context: IContext, taskRecording: Recording | null, businessProcessModelLineId: number): AsyncResult<NullResult>;
export declare function createGetAttributeDefinitionsInput(queryResultSettings: IQueryResultSettings, attributeDefinitionCriteria: AttributeDefinitionCriteria | null): IDataServiceRequest;
export declare function getAttributeDefinitionsAsync(context: IContext, attributeDefinitionCriteria: AttributeDefinitionCriteria | null): AsyncResult<AttributeDefinition[]>;
export declare function createGetAttributeGroupDefinitionsInput(queryResultSettings: IQueryResultSettings, attributeGroupDefinitionCriteria: AttributeGroupDefinitionCriteria | null): IDataServiceRequest;
export declare function getAttributeGroupDefinitionsAsync(context: IContext, attributeGroupDefinitionCriteria: AttributeGroupDefinitionCriteria | null): AsyncResult<AttributeGroupDefinition[]>;
export declare function createSaveFiscalTransactionInput(fiscalTransaction: FiscalTransaction | null): IDataServiceRequest;
export declare function saveFiscalTransactionAsync(context: IContext, fiscalTransaction: FiscalTransaction | null): AsyncResult<NullResult>;
export declare function createValidatePrintReceiptCopyAllowedInput(salesOrderToPrint: SalesOrder | null): IDataServiceRequest;
export declare function validatePrintReceiptCopyAllowedAsync(context: IContext, salesOrderToPrint: SalesOrder | null): AsyncResult<NullResult>;
export declare function createRegisterAuditEventInput(auditEvent: AuditEvent | null): IDataServiceRequest;
export declare function registerAuditEventAsync(context: IContext, auditEvent: AuditEvent | null): AsyncResult<NullResult>;
export declare function createRegisterAndGetAuditEventInput(auditEvent: AuditEvent | null): IDataServiceRequest;
export declare function registerAndGetAuditEventAsync(context: IContext, auditEvent: AuditEvent | null): AsyncResult<AuditEvent>;
export declare function createGetInventoryAvailableToPromiseInput(queryResultSettings: IQueryResultSettings, productId: number, itemId: string | null, inventLocationId: string | null): IDataServiceRequest;
export declare function getInventoryAvailableToPromiseAsync(context: IContext, productId: number, itemId: string | null, inventLocationId: string | null): AsyncResult<InventoryAvailableToPromise[]>;
export declare function createGetSalesOrdersWithNoFiscalTransactionsInput(queryResultSettings: IQueryResultSettings, storeNumber: string | null, terminalId: string | null): IDataServiceRequest;
export declare function getSalesOrdersWithNoFiscalTransactionsAsync(context: IContext, storeNumber: string | null, terminalId: string | null): AsyncResult<SalesOrder[]>;
export declare function createGetNotificationsInput(queryResultSettings: IQueryResultSettings, subscribedOperations: number[]): IDataServiceRequest;
export declare function getNotificationsAsync(context: IContext, subscribedOperations: number[]): AsyncResult<NotificationItem[]>;
export declare function createAcknowledgeNotificationsInput(lastPullDateTime: Date): IDataServiceRequest;
export declare function acknowledgeNotificationsAsync(context: IContext, lastPullDateTime: Date): AsyncResult<NullResult>;
export declare function createGetFiscalIntegrationFiscalDocumentInput(hardwareProfileId: string | null, functionalityProfileGroupId: string | null, fiscalIntegrationDocumentRetrievalCriteria: FiscalIntegrationDocumentRetrievalCriteria | null, connectorType: number | null): IDataServiceRequest;
export declare function getFiscalIntegrationFiscalDocumentAsync(context: IContext, hardwareProfileId: string | null, functionalityProfileGroupId: string | null, fiscalIntegrationDocumentRetrievalCriteria: FiscalIntegrationDocumentRetrievalCriteria | null, connectorType: number | null): AsyncResult<FiscalIntegrationDocument>;
export declare function createGetFiscalIntegrationNonFiscalDocumentInput(hardwareProfileId: string | null, functionalityProfileGroupId: string | null, fiscalIntegrationDocumentRetrievalCriteria: FiscalIntegrationDocumentRetrievalCriteria | null, connectorType: number | null): IDataServiceRequest;
export declare function getFiscalIntegrationNonFiscalDocumentAsync(context: IContext, hardwareProfileId: string | null, functionalityProfileGroupId: string | null, fiscalIntegrationDocumentRetrievalCriteria: FiscalIntegrationDocumentRetrievalCriteria | null, connectorType: number | null): AsyncResult<FiscalIntegrationDocument>;
export declare function createGetFiscalIntegrationFiscalServiceSetupDocumentInput(hardwareProfileId: string | null, functionalityProfileGroupId: string | null, connectorType: number | null): IDataServiceRequest;
export declare function getFiscalIntegrationFiscalServiceSetupDocumentAsync(context: IContext, hardwareProfileId: string | null, functionalityProfileGroupId: string | null, connectorType: number | null): AsyncResult<FiscalIntegrationDocument>;
export declare function createGetFiscalIntegrationFiscalServiceReadDataDocumentInput(hardwareProfileId: string | null, functionalityProfileGroupId: string | null, connectorType: number | null): IDataServiceRequest;
export declare function getFiscalIntegrationFiscalServiceReadDataDocumentAsync(context: IContext, hardwareProfileId: string | null, functionalityProfileGroupId: string | null, connectorType: number | null): AsyncResult<FiscalIntegrationDocument>;
export declare function createProcessFiscalIntegrationFiscalServiceReadDataResultInput(hardwareProfileId: string | null, functionalityProfileGroupId: string | null, documentToProcess: string | null, connectorType: number | null): IDataServiceRequest;
export declare function processFiscalIntegrationFiscalServiceReadDataResultAsync(context: IContext, hardwareProfileId: string | null, functionalityProfileGroupId: string | null, documentToProcess: string | null, connectorType: number | null): AsyncResult<NullResult>;
export declare function createSaveFiscalIntegrationRegistrationResultInput(hardwareProfileId: string | null, functionalityProfileGroupId: string | null, registrationResult: FiscalIntegrationRegistrationResult | null, connectorType: number | null): IDataServiceRequest;
export declare function saveFiscalIntegrationRegistrationResultAsync(context: IContext, hardwareProfileId: string | null, functionalityProfileGroupId: string | null, registrationResult: FiscalIntegrationRegistrationResult | null, connectorType: number | null): AsyncResult<NullResult>;
export declare function createGetFiscalIntegrationRegistrationProcessInput(): IDataServiceRequest;
export declare function getFiscalIntegrationRegistrationProcessAsync(context: IContext): AsyncResult<FiscalIntegrationRegistrationProcess>;
export declare function createGetChannelSupportedFiscalIntegrationEventsByGroupInput(functionalityProfileGroupId: string | null): IDataServiceRequest;
export declare function getChannelSupportedFiscalIntegrationEventsByGroupAsync(context: IContext, functionalityProfileGroupId: string | null): AsyncResult<FiscalIntegrationSupportedEvents>;
export declare function createGetFiscalIntegrationTechnicalProfilesInput(queryResultSettings: IQueryResultSettings, hardwareProfileId: string | null): IDataServiceRequest;
export declare function getFiscalIntegrationTechnicalProfilesAsync(context: IContext, hardwareProfileId: string | null): AsyncResult<FiscalIntegrationTechnicalProfile[]>;
export declare function createGetFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsInput(queryResultSettings: IQueryResultSettings, hardwareProfileId: string | null, functionalityProfileGroupId: string[] | null): IDataServiceRequest;
export declare function getFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsAsync(context: IContext, hardwareProfileId: string | null, functionalityProfileGroupId: string[] | null): AsyncResult<FiscalIntegrationTechnicalProfile[]>;
export declare function createBackupFiscalRegistrationProcessContextInput(terminalId: string | null, storeNumber: string | null, channelId: number, fiscalProcessCompleted: boolean, fiscalIntegrationSerializedContext: string | null): IDataServiceRequest;
export declare function backupFiscalRegistrationProcessContextAsync(context: IContext, terminalId: string | null, storeNumber: string | null, channelId: number, fiscalProcessCompleted: boolean, fiscalIntegrationSerializedContext: string | null): AsyncResult<NullResult>;
export declare function createGetActiveFiscalRegistrationProcessContextBackupInput(terminalId: string | null, storeNumber: string | null, channelId: number): IDataServiceRequest;
export declare function getActiveFiscalRegistrationProcessContextBackupAsync(context: IContext, terminalId: string | null, storeNumber: string | null, channelId: number): AsyncResult<string>;
export declare function createGetFiscalIntegrationTechnicalProfilesBySearchCriteriaInput(queryResultSettings: IQueryResultSettings, hardwareProfileId: string | null, fiscalIntegrationTechnicalProfileSearchCriteria: FiscalIntegrationTechnicalProfileSearchCriteria | null): IDataServiceRequest;
export declare function getFiscalIntegrationTechnicalProfilesBySearchCriteriaAsync(context: IContext, hardwareProfileId: string | null, fiscalIntegrationTechnicalProfileSearchCriteria: FiscalIntegrationTechnicalProfileSearchCriteria | null): AsyncResult<FiscalIntegrationTechnicalProfile[]>;
export declare function createGetFiscalIntegrationServiceStatusInput(fiscalIntegrationServiceInfo: FiscalIntegrationServiceInfo | null): IDataServiceRequest;
export declare function getFiscalIntegrationServiceStatusAsync(context: IContext, fiscalIntegrationServiceInfo: FiscalIntegrationServiceInfo | null): AsyncResult<FiscalIntegrationServiceStatus>;
export declare function createSubmitFiscalIntegrationDocumentInput(documentToSubmit: string | null, fiscalIntegrationServiceInfo: FiscalIntegrationServiceInfo | null): IDataServiceRequest;
export declare function submitFiscalIntegrationDocumentAsync(context: IContext, documentToSubmit: string | null, fiscalIntegrationServiceInfo: FiscalIntegrationServiceInfo | null): AsyncResult<FiscalIntegrationServiceCommunicationResult>;
export declare function createGetFeatureStatesInput(queryResultSettings: IQueryResultSettings, featureNames: string[] | null): IDataServiceRequest;
export declare function getFeatureStatesAsync(context: IContext, featureNames: string[] | null): AsyncResult<FeatureState[]>;
export declare function createGetLastFiscalIntegrationSequentialSignaturesInput(queryResultSettings: IQueryResultSettings, sequentialKeys: string[] | null): IDataServiceRequest;
export declare function getLastFiscalIntegrationSequentialSignaturesAsync(context: IContext, sequentialKeys: string[] | null): AsyncResult<FiscalIntegrationSequentialSignatureData[]>;
export declare function createGetAvailablePromotionsInput(queryResultSettings: IQueryResultSettings, searchCriteria: DiscountsSearchCriteria | null): IDataServiceRequest;
export declare function getAvailablePromotionsAsync(context: IContext, searchCriteria: DiscountsSearchCriteria | null): AsyncResult<Promotion[]>;
export declare function createCreateFiscalTransactionInput(functionalityProfileGroupId: string | null, registrationResult: FiscalIntegrationRegistrationResult | null, connectorType: number): IDataServiceRequest;
export declare function createFiscalTransactionAsync(context: IContext, functionalityProfileGroupId: string | null, registrationResult: FiscalIntegrationRegistrationResult | null, connectorType: number): AsyncResult<FiscalTransaction>;
export declare function createGetButtonGridsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getButtonGridsAsync(context: IContext): AsyncResult<ButtonGrid[]>;
export declare function createGetButtonGridsByScreenSizeInput(queryResultSettings: IQueryResultSettings, height: number, width: number): IDataServiceRequest;
export declare function getButtonGridsByScreenSizeAsync(context: IContext, height: number, width: number): AsyncResult<ButtonGrid[]>;
export declare function createGetCashDeclarationsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getCashDeclarationsAsync(context: IContext): AsyncResult<CashDeclaration[]>;
export declare function createGetCountryRegionsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getCountryRegionsAsync(context: IContext): AsyncResult<CountryRegionInfo[]>;
export declare function createGetCustomerGroupsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getCustomerGroupsAsync(context: IContext): AsyncResult<CustomerGroup[]>;
export declare function createGetDeliveryOptionsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getDeliveryOptionsAsync(context: IContext): AsyncResult<DeliveryOption[]>;
export declare function createGetChannelsByTypeInput(queryResultSettings: IQueryResultSettings, channelType: string | null): IDataServiceRequest;
export declare function getChannelsByTypeAsync(context: IContext, channelType: string | null): AsyncResult<ChannelIdentity[]>;
export declare function createGetChannelsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getChannelsAsync(context: IContext): AsyncResult<ChannelIdentity[]>;
export declare function createGetEnvironmentConfigurationInput(): IDataServiceRequest;
export declare function getEnvironmentConfigurationAsync(context: IContext): AsyncResult<EnvironmentConfiguration>;
export declare function createGetSearchConfigurationInput(): IDataServiceRequest;
export declare function getSearchConfigurationAsync(context: IContext): AsyncResult<SearchConfiguration>;
export declare function createGetExtensionPackageDefinitionsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getExtensionPackageDefinitionsAsync(context: IContext): AsyncResult<ExtensionPackageDefinition[]>;
export declare function createGetExtensionProfileInput(): IDataServiceRequest;
export declare function getExtensionProfileAsync(context: IContext): AsyncResult<ExtensionProfile>;
export declare function createGetDeviceConfigurationInput(): IDataServiceRequest;
export declare function getDeviceConfigurationAsync(context: IContext): AsyncResult<DeviceConfiguration>;
export declare function createGetVisualProfileInput(): IDataServiceRequest;
export declare function getVisualProfileAsync(context: IContext): AsyncResult<VisualProfile>;
export declare function createGetLanguagesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getLanguagesAsync(context: IContext): AsyncResult<SupportedLanguage[]>;
export declare function createGetAffiliationsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getAffiliationsAsync(context: IContext): AsyncResult<Affiliation[]>;
export declare function createGetOperationPermissionsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getOperationPermissionsAsync(context: IContext): AsyncResult<OperationPermission[]>;
export declare function createGetReasonCodesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getReasonCodesAsync(context: IContext): AsyncResult<ReasonCode[]>;
export declare function createGetReturnOrderReasonCodesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getReturnOrderReasonCodesAsync(context: IContext): AsyncResult<ReasonCode[]>;
export declare function createGetSalesTaxGroupsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getSalesTaxGroupsAsync(context: IContext): AsyncResult<SalesTaxGroup[]>;
export declare function createGetTenderTypesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getTenderTypesAsync(context: IContext): AsyncResult<TenderType[]>;
export declare function createGetUnitsOfMeasureInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getUnitsOfMeasureAsync(context: IContext): AsyncResult<UnitOfMeasure[]>;
export declare function createGetDiscountCodesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getDiscountCodesAsync(context: IContext): AsyncResult<DiscountCode[]>;
export declare function createGetCurrenciesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getCurrenciesAsync(context: IContext): AsyncResult<Currency[]>;
export declare function createGetCurrenciesAmountInput(queryResultSettings: IQueryResultSettings, currencyCode: string | null, amount: number): IDataServiceRequest;
export declare function getCurrenciesAmountAsync(context: IContext, currencyCode: string | null, amount: number): AsyncResult<CurrencyAmount[]>;
export declare function createGetCommissionSalesGroupsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getCommissionSalesGroupsAsync(context: IContext): AsyncResult<CommissionSalesGroup[]>;
export declare function createSearchCommissionSalesGroupsInput(queryResultSettings: IQueryResultSettings, searchText: string | null): IDataServiceRequest;
export declare function searchCommissionSalesGroupsAsync(context: IContext, searchText: string | null): AsyncResult<CommissionSalesGroup[]>;
export declare function createGetPaymentMerchantInformationInput(hardwareProfileId: string | null): IDataServiceRequest;
export declare function getPaymentMerchantInformationAsync(context: IContext, hardwareProfileId: string | null): AsyncResult<PaymentMerchantInformation>;
export declare function createGetPaymentPropertiesIfModifiedInput(hardwareProfileId: string | null, merchantInformationHash: string | null): IDataServiceRequest;
export declare function getPaymentPropertiesIfModifiedAsync(context: IContext, hardwareProfileId: string | null, merchantInformationHash: string | null): AsyncResult<PaymentMerchantInformation>;
export declare function createGetOnlineChannelPublishStatusInput(): IDataServiceRequest;
export declare function getOnlineChannelPublishStatusAsync(context: IContext): AsyncResult<number>;
export declare function createSetOnlineChannelPublishStatusInput(publishingStatus: number, statusMessage: string | null): IDataServiceRequest;
export declare function setOnlineChannelPublishStatusAsync(context: IContext, publishingStatus: number, statusMessage: string | null): AsyncResult<NullResult>;
export declare function createGetInventoryConfigurationInput(): IDataServiceRequest;
export declare function getInventoryConfigurationAsync(context: IContext): AsyncResult<ChannelInventoryConfiguration>;
export declare function createGetAvailableDevicesInput(queryResultSettings: IQueryResultSettings, deviceType: number): IDataServiceRequest;
export declare function getAvailableDevicesAsync(context: IContext, deviceType: number): AsyncResult<Device[]>;
export declare function createGetUserDefinedSecretStringInput(secretName: string | null): IDataServiceRequest;
export declare function getUserDefinedSecretStringAsync(context: IContext, secretName: string | null): AsyncResult<string>;
export declare function createGetUserDefinedSecretCertificateInput(secretName: string | null): IDataServiceRequest;
export declare function getUserDefinedSecretCertificateAsync(context: IContext, secretName: string | null): AsyncResult<UserDefinedSecretCertificateResult>;
export declare function createGetImageBlobInput(imageId: number): IDataServiceRequest;
export declare function getImageBlobAsync(context: IContext, imageId: number): AsyncResult<MediaBlob>;
export declare function createGetExtensibleEnumerationsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getExtensibleEnumerationsAsync(context: IContext): AsyncResult<ExtensibleEnumerationContainer[]>;
export declare function createGetAddressPurposesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getAddressPurposesAsync(context: IContext): AsyncResult<AddressPurpose[]>;
export declare function createGetReturnPolicyInput(): IDataServiceRequest;
export declare function getReturnPolicyAsync(context: IContext): AsyncResult<ReturnPolicy>;
