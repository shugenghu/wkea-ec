import { DataServiceQuery } from '../DataServiceQuery';
import { TransferOrderClass, TransferOrderLineClass, CommentClass, TransferOrderJournalClass, ReceiptClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function transferOrdersQuery(orderId) {
    var key = (orderId) ? { OrderId: orderId } : null;
    return new DataServiceQuery("TransferOrders", "TransferOrder", TransferOrderClass, key);
}
export function createCreateInput(entity) {
    return transferOrdersQuery().create(entity);
}
export function createTransferOrderAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return transferOrdersQuery(entity.OrderId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return transferOrdersQuery(entity.OrderId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(orderId) {
    return transferOrdersQuery(orderId).read();
}
export function readAsync(context, orderId) {
    const request = createReadAsync(orderId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return transferOrdersQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createCommitInput(orderId, skipNotValidLines) {
    const query = transferOrdersQuery(orderId);
    return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: '' }, { skipNotValidLines: skipNotValidLines });
}
export function commitAsync(context, orderId, skipNotValidLines) {
    const request = createCommitInput(orderId, skipNotValidLines);
    return executeAction(request, context);
}
export function createGetTransferOrderLinesInput(queryResultSettings, orderId) {
    const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'none', returnEntity: 'TransferOrderLine' }, {});
}
export function getTransferOrderLinesAsync(context, orderId) {
    const request = createGetTransferOrderLinesInput(context.queryResultSettings, orderId);
    return executeAction(request, context);
}
export function createCreateTransferOrderLinesInput(queryResultSettings, orderId, transferOrderLines) {
    const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('CreateTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine' }, { transferOrderLines: transferOrderLines });
}
export function createTransferOrderLinesAsync(context, orderId, transferOrderLines) {
    const request = createCreateTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines);
    return executeAction(request, context);
}
export function createUpdateTransferOrderLinesInput(queryResultSettings, orderId, transferOrderLines) {
    const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('UpdateTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine' }, { transferOrderLines: transferOrderLines });
}
export function updateTransferOrderLinesAsync(context, orderId, transferOrderLines) {
    const request = createUpdateTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines);
    return executeAction(request, context);
}
export function createGetTransferOrderCommentsInput(queryResultSettings, orderId) {
    const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetTransferOrderComments', true, CommentClass, 'true', { bypassCache: 'none', returnEntity: 'Comment' }, {});
}
export function getTransferOrderCommentsAsync(context, orderId) {
    const request = createGetTransferOrderCommentsInput(context.queryResultSettings, orderId);
    return executeAction(request, context);
}
export function createAddTransferOrderCommentInput(orderId, authorStaffId, commentText) {
    const query = transferOrdersQuery(orderId);
    return query.createDataServiceRequestForOperation('AddTransferOrderComment', true, CommentClass, 'false', { bypassCache: 'get', returnEntity: 'Comment' }, { AuthorStaffId: authorStaffId, CommentText: commentText });
}
export function addTransferOrderCommentAsync(context, orderId, authorStaffId, commentText) {
    const request = createAddTransferOrderCommentInput(orderId, authorStaffId, commentText);
    return executeAction(request, context);
}
export function createDeleteTransferOrderLinesInput(queryResultSettings, orderId, transferOrderLines) {
    const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('DeleteTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine' }, { transferOrderLines: transferOrderLines });
}
export function deleteTransferOrderLinesAsync(context, orderId, transferOrderLines) {
    const request = createDeleteTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines);
    return executeAction(request, context);
}
export function createGetTransferOrderJournalsInput(queryResultSettings, orderId) {
    const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetTransferOrderJournals', true, TransferOrderJournalClass, 'true', { bypassCache: 'none', returnEntity: 'TransferOrderJournal' }, {});
}
export function getTransferOrderJournalsAsync(context, orderId) {
    const request = createGetTransferOrderJournalsInput(context.queryResultSettings, orderId);
    return executeAction(request, context);
}
export function createGetTransferPackingSlipInput(queryResultSettings, orderId, voucherId, receiptRetrievalCriteria) {
    const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetTransferPackingSlip', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt' }, { voucherId: voucherId, receiptRetrievalCriteria: receiptRetrievalCriteria });
}
export function getTransferPackingSlipAsync(context, orderId, voucherId, receiptRetrievalCriteria) {
    const request = createGetTransferPackingSlipInput(context.queryResultSettings, orderId, voucherId, receiptRetrievalCriteria);
    return executeAction(request, context);
}
//# sourceMappingURL=TransferOrdersDataActions.g.js.map