{"version":3,"file":"StockCountJournalsDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/StockCountJournalsDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { StockCountJournal, StockCountJournalTransaction } from '../Entities/CommerceTypes.g';\n    import { StockCountJournalClass, StockCountJournalTransactionClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function stockCountJournalsQuery(journalId?: string): DataServiceQuery {\n      var key = (journalId) ? { JournalId: journalId } : null;\n      return new DataServiceQuery(\"StockCountJournals\", \"StockCountJournal\", StockCountJournalClass, key);\n    }\n    \n    export function createCreateInput(entity: StockCountJournal): IDataServiceRequest {\n        return stockCountJournalsQuery().create(entity);\n    }\n    export function createStockCountJournalAsync(context: IContext, entity: StockCountJournal): AsyncResult<StockCountJournal> {\n        const request = createCreateInput(entity, );\n        return executeAction<StockCountJournal>(request, context);\n    }\n    export function createUpdateInput(entity: StockCountJournal): IDataServiceRequest {\n        return stockCountJournalsQuery(entity.JournalId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: StockCountJournal): AsyncResult<StockCountJournal> {\n        const request = createUpdateInput(entity, );\n        return executeAction<StockCountJournal>(request, context);\n    }\n    export function createDeleteAsync(entity: StockCountJournal): IDataServiceRequest {\n        return stockCountJournalsQuery(entity.JournalId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: StockCountJournal): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(journalId: string): IDataServiceRequest {\n        return stockCountJournalsQuery(journalId).read();\n    }\n    export function readAsync(context: IContext, journalId: string): AsyncResult<StockCountJournal> {\n        const request = createReadAsync(journalId, );\n        return executeAction<StockCountJournal>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return stockCountJournalsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<StockCountJournal[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<StockCountJournal[]>(request, context);\n    }\n    \n    export function createSyncInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      \n        const query = stockCountJournalsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('Sync', true, StockCountJournalClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournal'}, { });\n    }    \n    \n    export function syncAsync(context: IContext):AsyncResult<StockCountJournal[]> {\n        const request = createSyncInput(context.queryResultSettings, );\n        return executeAction<StockCountJournal[]>(request, context);\n    }          \n          \n    export function createSyncTransactionsInput(queryResultSettings: IQueryResultSettings, journalId: string): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SyncTransactions', true, StockCountJournalTransactionClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournalTransaction'}, { });\n    }    \n    \n    export function syncTransactionsAsync(context: IContext, journalId: string):AsyncResult<StockCountJournalTransaction[]> {\n        const request = createSyncTransactionsInput(context.queryResultSettings, journalId, );\n        return executeAction<StockCountJournalTransaction[]>(request, context);\n    }          \n          \n    export function createCalculateEstimatedOnHandInventoryInput(queryResultSettings: IQueryResultSettings, journalId: string): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('CalculateEstimatedOnHandInventory', true, StockCountJournalTransactionClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournalTransaction'}, { });\n    }    \n    \n    export function calculateEstimatedOnHandInventoryAsync(context: IContext, journalId: string):AsyncResult<StockCountJournalTransaction[]> {\n        const request = createCalculateEstimatedOnHandInventoryInput(context.queryResultSettings, journalId, );\n        return executeAction<StockCountJournalTransaction[]>(request, context);\n    }          \n          \n    export function createRemoveJournalInput(journalId: string): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('RemoveJournal', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });\n    }    \n    \n    export function removeJournalAsync(context: IContext, journalId: string):AsyncResult<NullResult> {\n        const request = createRemoveJournalInput(journalId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createRemoveTransactionInput(journalId: string, itemId: string | null, inventSizeId: string | null, inventColorId: string | null, inventStyleId: string | null, configurationId: string | null): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('RemoveTransaction', true, '', '', { bypassCache: 'get', returnEntity: ''}, {itemId: itemId, inventSizeId: inventSizeId, inventColorId: inventColorId, inventStyleId: inventStyleId, configurationId: configurationId });\n    }    \n    \n    export function removeTransactionAsync(context: IContext, journalId: string, itemId: string | null, inventSizeId: string | null, inventColorId: string | null, inventStyleId: string | null, configurationId: string | null):AsyncResult<NullResult> {\n        const request = createRemoveTransactionInput(journalId, itemId, inventSizeId, inventColorId, inventStyleId, configurationId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createRemoveStockCountLineByLineIdInput(journalId: string, stockCountLineId: number): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('RemoveStockCountLineByLineId', true, '', '', { bypassCache: 'get', returnEntity: ''}, {stockCountLineId: stockCountLineId });\n    }    \n    \n    export function removeStockCountLineByLineIdAsync(context: IContext, journalId: string, stockCountLineId: number):AsyncResult<NullResult> {\n        const request = createRemoveStockCountLineByLineIdInput(journalId, stockCountLineId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createRemoveStockCountLineByProductRecIdInput(journalId: string, productId: number): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('RemoveStockCountLineByProductRecId', true, '', '', { bypassCache: 'get', returnEntity: ''}, {productId: productId });\n    }    \n    \n    export function removeStockCountLineByProductRecIdAsync(context: IContext, journalId: string, productId: number):AsyncResult<NullResult> {\n        const request = createRemoveStockCountLineByProductRecIdInput(journalId, productId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createCommitInput(journalId: string): IDataServiceRequest {      \n        const query = stockCountJournalsQuery(journalId);\n        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });\n    }    \n    \n    export function commitAsync(context: IContext, journalId: string):AsyncResult<NullResult> {\n        const request = createCommitInput(journalId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    "]}