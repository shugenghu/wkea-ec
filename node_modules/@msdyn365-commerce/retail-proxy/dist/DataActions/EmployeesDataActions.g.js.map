{"version":3,"file":"EmployeesDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/EmployeesDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { Employee, EmployeeActivitySearchCriteria, EmployeeActivity, OrgUnit, ClientBookCustomerSearchCriteria, ClientBookCustomer, ClientBookRefiner, ClientBookChanges } from '../Entities/CommerceTypes.g';\n    import { EmployeeClass, EmployeeActivityClass, OrgUnitClass, ClientBookCustomerClass, ClientBookRefinerClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function employeesQuery(staffId?: string): DataServiceQuery {\n      var key = (staffId) ? { StaffId: staffId } : null;\n      return new DataServiceQuery(\"Employees\", \"Employee\", EmployeeClass, key);\n    }\n    \n    export function createCreateInput(entity: Employee): IDataServiceRequest {\n        return employeesQuery().create(entity);\n    }\n    export function createEmployeeAsync(context: IContext, entity: Employee): AsyncResult<Employee> {\n        const request = createCreateInput(entity, );\n        return executeAction<Employee>(request, context);\n    }\n    export function createUpdateInput(entity: Employee): IDataServiceRequest {\n        return employeesQuery(entity.StaffId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: Employee): AsyncResult<Employee> {\n        const request = createUpdateInput(entity, );\n        return executeAction<Employee>(request, context);\n    }\n    export function createDeleteAsync(entity: Employee): IDataServiceRequest {\n        return employeesQuery(entity.StaffId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: Employee): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(staffId: string): IDataServiceRequest {\n        return employeesQuery(staffId).read();\n    }\n    export function readAsync(context: IContext, staffId: string): AsyncResult<Employee> {\n        const request = createReadAsync(staffId, );\n        return executeAction<Employee>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return employeesQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<Employee[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<Employee[]>(request, context);\n    }\n    \n    export function createGetActivitiesInput(queryResultSettings: IQueryResultSettings, employeeActivitySearchCriteria: EmployeeActivitySearchCriteria | null): IDataServiceRequest {      \n        const query = employeesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetActivities', true, EmployeeActivityClass, 'true', { bypassCache: 'none', returnEntity: 'EmployeeActivity'}, {employeeActivitySearchCriteria: employeeActivitySearchCriteria });\n    }    \n    \n    export function getActivitiesAsync(context: IContext, employeeActivitySearchCriteria: EmployeeActivitySearchCriteria | null):AsyncResult<EmployeeActivity[]> {\n        const request = createGetActivitiesInput(context.queryResultSettings, employeeActivitySearchCriteria, );\n        return executeAction<EmployeeActivity[]>(request, context);\n    }          \n          \n    export function createGetManagerActivityViewInput(queryResultSettings: IQueryResultSettings, employeeActivitySearchCriteria: EmployeeActivitySearchCriteria | null): IDataServiceRequest {      \n        const query = employeesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetManagerActivityView', true, EmployeeActivityClass, 'true', { bypassCache: 'none', returnEntity: 'EmployeeActivity'}, {employeeActivitySearchCriteria: employeeActivitySearchCriteria });\n    }    \n    \n    export function getManagerActivityViewAsync(context: IContext, employeeActivitySearchCriteria: EmployeeActivitySearchCriteria | null):AsyncResult<EmployeeActivity[]> {\n        const request = createGetManagerActivityViewInput(context.queryResultSettings, employeeActivitySearchCriteria, );\n        return executeAction<EmployeeActivity[]>(request, context);\n    }          \n          \n    export function createRegisterActivityInput(staffId: string, employeeActivityType: number): IDataServiceRequest {      \n        const query = employeesQuery(staffId);\n        return query.createDataServiceRequestForOperation('RegisterActivity', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, {employeeActivityType: employeeActivityType });\n    }    \n    \n    export function registerActivityAsync(context: IContext, staffId: string, employeeActivityType: number):AsyncResult<Date> {\n        const request = createRegisterActivityInput(staffId, employeeActivityType, );\n        return executeAction<Date>(request, context);\n    }          \n          \n    export function createGetAccessibleOrgUnitsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      \n        const query = employeesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetAccessibleOrgUnits', true, OrgUnitClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnit'}, { });\n    }    \n    \n    export function getAccessibleOrgUnitsAsync(context: IContext):AsyncResult<OrgUnit[]> {\n        const request = createGetAccessibleOrgUnitsInput(context.queryResultSettings, );\n        return executeAction<OrgUnit[]>(request, context);\n    }          \n          \n    export function createGetLatestActivityInput(): IDataServiceRequest {      \n        const query = employeesQuery();\n        return query.createDataServiceRequestForOperation('GetLatestActivity', true, EmployeeActivityClass, 'false', { bypassCache: 'none', returnEntity: 'EmployeeActivity'}, { });\n    }    \n    \n    export function getLatestActivityAsync(context: IContext):AsyncResult<EmployeeActivity> {\n        const request = createGetLatestActivityInput();\n        return executeAction<EmployeeActivity>(request, context);\n    }          \n          \n    export function createSearchClientBookCustomersInput(queryResultSettings: IQueryResultSettings, clientBookCustomerSearchCriteria: ClientBookCustomerSearchCriteria | null): IDataServiceRequest {      \n        const query = employeesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchClientBookCustomers', true, ClientBookCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'ClientBookCustomer'}, {clientBookCustomerSearchCriteria: clientBookCustomerSearchCriteria });\n    }    \n    \n    export function searchClientBookCustomersAsync(context: IContext, clientBookCustomerSearchCriteria: ClientBookCustomerSearchCriteria | null):AsyncResult<ClientBookCustomer[]> {\n        const request = createSearchClientBookCustomersInput(context.queryResultSettings, clientBookCustomerSearchCriteria, );\n        return executeAction<ClientBookCustomer[]>(request, context);\n    }          \n          \n    export function createGetClientBookSearchRefinersInput(queryResultSettings: IQueryResultSettings, refinerSourceTypes: number[], searchCriteria: ClientBookCustomerSearchCriteria | null): IDataServiceRequest {      \n        const query = employeesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetClientBookSearchRefiners', true, ClientBookRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'ClientBookRefiner'}, {refinerSourceTypes: refinerSourceTypes, searchCriteria: searchCriteria });\n    }    \n    \n    export function getClientBookSearchRefinersAsync(context: IContext, refinerSourceTypes: number[], searchCriteria: ClientBookCustomerSearchCriteria | null):AsyncResult<ClientBookRefiner[]> {\n        const request = createGetClientBookSearchRefinersInput(context.queryResultSettings, refinerSourceTypes, searchCriteria, );\n        return executeAction<ClientBookRefiner[]>(request, context);\n    }          \n          \n    export function createUpdateClientBookInput(clientBookChanges: ClientBookChanges | null): IDataServiceRequest {      \n        const query = employeesQuery();\n        return query.createDataServiceRequestForOperation('UpdateClientBook', true, '', '', { bypassCache: 'get', returnEntity: ''}, {clientBookChanges: clientBookChanges });\n    }    \n    \n    export function updateClientBookAsync(context: IContext, clientBookChanges: ClientBookChanges | null):AsyncResult<NullResult> {\n        const request = createUpdateClientBookInput(clientBookChanges, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createGetCurrentEmployeeInput(): IDataServiceRequest {      \n        const query = employeesQuery();\n        return query.createDataServiceRequestForOperation('GetCurrentEmployee', false, EmployeeClass, 'false', { bypassCache: 'none', returnEntity: 'Employee'}, { });\n    }    \n    \n    export function getCurrentEmployeeAsync(context: IContext):AsyncResult<Employee> {\n        const request = createGetCurrentEmployeeInput();\n        return executeAction<Employee>(request, context);\n    }          \n          \n    "]}