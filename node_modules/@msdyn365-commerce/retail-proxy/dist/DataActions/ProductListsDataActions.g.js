import { DataServiceQuery } from '../DataServiceQuery';
import { ProductListClass, ProductListLineClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function productListsQuery(id) {
    var key = (id) ? { Id: id } : null;
    return new DataServiceQuery("ProductLists", "ProductList", ProductListClass, key);
}
export function createCreateInput(entity) {
    return productListsQuery().create(entity);
}
export function createProductListAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return productListsQuery(entity.Id).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return productListsQuery(entity.Id).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(id) {
    return productListsQuery(id).read();
}
export function readAsync(context, id) {
    const request = createReadAsync(id);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return productListsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSearchInput(queryResultSettings, searchCriteria) {
    const query = productListsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Search', true, ProductListClass, 'true', { bypassCache: 'none', returnEntity: 'ProductList' }, { searchCriteria: searchCriteria });
}
export function searchAsync(context, searchCriteria) {
    const request = createSearchInput(context.queryResultSettings, searchCriteria);
    return executeAction(request, context);
}
export function createGetProductListLinesInput(queryResultSettings, id, searchText) {
    const query = productListsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetProductListLines', true, ProductListLineClass, 'true', { bypassCache: 'none', returnEntity: 'ProductListLine' }, { searchText: searchText });
}
export function getProductListLinesAsync(context, id, searchText) {
    const request = createGetProductListLinesInput(context.queryResultSettings, id, searchText);
    return executeAction(request, context);
}
export function createAddProductListLinesInput(queryResultSettings, id, productListLines) {
    const query = productListsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('AddProductListLines', true, ProductListLineClass, 'true', { bypassCache: 'get', returnEntity: 'ProductListLine' }, { productListLines: productListLines });
}
export function addProductListLinesAsync(context, id, productListLines) {
    const request = createAddProductListLinesInput(context.queryResultSettings, id, productListLines);
    return executeAction(request, context);
}
export function createUpdateProductListLinesInput(queryResultSettings, id, productListLines) {
    const query = productListsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('UpdateProductListLines', true, ProductListLineClass, 'true', { bypassCache: 'get', returnEntity: 'ProductListLine' }, { productListLines: productListLines });
}
export function updateProductListLinesAsync(context, id, productListLines) {
    const request = createUpdateProductListLinesInput(context.queryResultSettings, id, productListLines);
    return executeAction(request, context);
}
export function createRemoveProductListLinesInput(id, productListLines) {
    const query = productListsQuery(id);
    return query.createDataServiceRequestForOperation('RemoveProductListLines', true, '', '', { bypassCache: 'get', returnEntity: '' }, { productListLines: productListLines });
}
export function removeProductListLinesAsync(context, id, productListLines) {
    const request = createRemoveProductListLinesInput(id, productListLines);
    return executeAction(request, context);
}
export function createCopyCartToProductListInput(id, cartId, isRewrite, isQuantityAggregate) {
    const query = productListsQuery(id);
    return query.createDataServiceRequestForOperation('CopyCartToProductList', true, ProductListClass, 'false', { bypassCache: 'get', returnEntity: 'ProductList' }, { cartId: cartId, isRewrite: isRewrite, isQuantityAggregate: isQuantityAggregate });
}
export function copyCartToProductListAsync(context, id, cartId, isRewrite, isQuantityAggregate) {
    const request = createCopyCartToProductListInput(id, cartId, isRewrite, isQuantityAggregate);
    return executeAction(request, context);
}
//# sourceMappingURL=ProductListsDataActions.g.js.map