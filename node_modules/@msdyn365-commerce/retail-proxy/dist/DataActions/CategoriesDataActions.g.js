import { DataServiceQuery } from '../DataServiceQuery';
import { CategoryClass, AttributeCategoryClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function categoriesQuery(recordId) {
    var key = (recordId) ? { RecordId: recordId } : null;
    return new DataServiceQuery("Categories", "Category", CategoryClass, key);
}
export function createCreateInput(entity) {
    return categoriesQuery().create(entity);
}
export function createCategoryAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return categoriesQuery(entity.RecordId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return categoriesQuery(entity.RecordId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(recordId) {
    return categoriesQuery(recordId).read();
}
export function readAsync(context, recordId) {
    const request = createReadAsync(recordId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return categoriesQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCategoriesInput(queryResultSettings, channelId) {
    const query = categoriesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCategories', true, CategoryClass, 'true', { bypassCache: 'none', returnEntity: 'Category' }, { channelId: channelId });
}
export function getCategoriesAsync(context, channelId) {
    const request = createGetCategoriesInput(context.queryResultSettings, channelId);
    return executeAction(request, context);
}
export function createGetAttributesInput(queryResultSettings, categoryId) {
    const query = categoriesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAttributes', false, AttributeCategoryClass, 'true', { bypassCache: 'none', returnEntity: 'AttributeCategory' }, { categoryId: categoryId });
}
export function getAttributesAsync(context, categoryId) {
    const request = createGetAttributesInput(context.queryResultSettings, categoryId);
    return executeAction(request, context);
}
export function createGetChildrenInput(queryResultSettings, channelId, categoryId) {
    const query = categoriesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetChildren', true, CategoryClass, 'true', { bypassCache: 'none', returnEntity: 'Category' }, { channelId: channelId, categoryId: categoryId });
}
export function getChildrenAsync(context, channelId, categoryId) {
    const request = createGetChildrenInput(context.queryResultSettings, channelId, categoryId);
    return executeAction(request, context);
}
//# sourceMappingURL=CategoriesDataActions.g.js.map