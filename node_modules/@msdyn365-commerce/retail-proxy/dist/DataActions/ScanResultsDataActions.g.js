import { DataServiceQuery } from '../DataServiceQuery';
import { ScanResultClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function scanResultsQuery(scannedText) {
    var key = (scannedText) ? { ScannedText: scannedText } : null;
    return new DataServiceQuery("ScanResults", "ScanResult", ScanResultClass, key);
}
export function createCreateInput(entity) {
    return scanResultsQuery().create(entity);
}
export function createScanResultAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return scanResultsQuery(entity.ScannedText).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return scanResultsQuery(entity.ScannedText).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(scannedText) {
    return scanResultsQuery(scannedText).read();
}
export function readAsync(context, scannedText) {
    const request = createReadAsync(scannedText);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return scanResultsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
//# sourceMappingURL=ScanResultsDataActions.g.js.map