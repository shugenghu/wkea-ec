import { DataServiceQuery } from '../DataServiceQuery';
import { ProductClass, ProductDimensionValueClass, SimpleProductClass, ProductComparisonLineClass, ProductSearchResultClass, ProductRefinerClass, ReadChangedProductsSessionClass, DeletedListingsResultClass, ProductRatingClass, ProductAssortmentIntervalClass, ProductDeliveryOptionsClass, ProductPriceClass, ProductAvailableQuantityClass, ProductComponentClass, CategoryPathResultClass, SearchSuggestionClass, ProductRefinerValueClass, AttributeProductClass, AttributeValueClass, MediaLocationClass, MediaBlobClass, ProductRelationTypeClass, UnitOfMeasureClass, ProductWarrantiesMappingClass, ProductWarehouseInventoryInformationClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function productsQuery(recordId) {
    var key = (recordId) ? { RecordId: recordId } : null;
    return new DataServiceQuery("Products", "Product", ProductClass, key);
}
export function createCreateInput(entity) {
    return productsQuery().create(entity);
}
export function createProductAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return productsQuery(entity.RecordId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return productsQuery(entity.RecordId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(recordId) {
    return productsQuery(recordId).read();
}
export function readAsync(context, recordId) {
    const request = createReadAsync(recordId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return productsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetDimensionValuesInput(queryResultSettings, recordId, channelId, dimension, matchingDimensionValues, kitVariantResolutionContext) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDimensionValues', true, ProductDimensionValueClass, 'true', { bypassCache: 'none', returnEntity: 'ProductDimensionValue' }, { channelId: channelId, dimension: dimension, matchingDimensionValues: matchingDimensionValues, kitVariantResolutionContext: kitVariantResolutionContext });
}
export function getDimensionValuesAsync(context, recordId, channelId, dimension, matchingDimensionValues, kitVariantResolutionContext) {
    const request = createGetDimensionValuesInput(context.queryResultSettings, recordId, channelId, dimension, matchingDimensionValues, kitVariantResolutionContext);
    return executeAction(request, context);
}
export function createGetVariantsByDimensionValuesInput(queryResultSettings, recordId, channelId, matchingDimensionValues) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetVariantsByDimensionValues', true, SimpleProductClass, 'true', { bypassCache: 'none', returnEntity: 'SimpleProduct' }, { channelId: channelId, matchingDimensionValues: matchingDimensionValues });
}
export function getVariantsByDimensionValuesAsync(context, recordId, channelId, matchingDimensionValues) {
    const request = createGetVariantsByDimensionValuesInput(context.queryResultSettings, recordId, channelId, matchingDimensionValues);
    return executeAction(request, context);
}
export function createGetVariantsByComponentsInSlotsInput(queryResultSettings, recordId, channelId, matchingSlotToComponentRelationship) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetVariantsByComponentsInSlots', true, SimpleProductClass, 'true', { bypassCache: 'none', returnEntity: 'SimpleProduct' }, { channelId: channelId, matchingSlotToComponentRelationship: matchingSlotToComponentRelationship });
}
export function getVariantsByComponentsInSlotsAsync(context, recordId, channelId, matchingSlotToComponentRelationship) {
    const request = createGetVariantsByComponentsInSlotsInput(context.queryResultSettings, recordId, channelId, matchingSlotToComponentRelationship);
    return executeAction(request, context);
}
export function createGetByIdsInput(queryResultSettings, channelId, productIds) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetByIds', true, SimpleProductClass, 'true', { bypassCache: 'none', returnEntity: 'SimpleProduct' }, { channelId: channelId, productIds: productIds });
}
export function getByIdsAsync(context, channelId, productIds) {
    const request = createGetByIdsInput(context.queryResultSettings, channelId, productIds);
    return executeAction(request, context);
}
export function createCompareInput(queryResultSettings, channelId, catalogId, productIds) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Compare', true, ProductComparisonLineClass, 'true', { bypassCache: 'get', returnEntity: 'ProductComparisonLine' }, { channelId: channelId, catalogId: catalogId, productIds: productIds });
}
export function compareAsync(context, channelId, catalogId, productIds) {
    const request = createCompareInput(context.queryResultSettings, channelId, catalogId, productIds);
    return executeAction(request, context);
}
export function createGetRecommendedProductsInput(queryResultSettings, productIds, customerId) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetRecommendedProducts', true, ProductSearchResultClass, 'true', { bypassCache: 'none', returnEntity: 'ProductSearchResult' }, { productIds: productIds, customerId: customerId });
}
export function getRecommendedProductsAsync(context, productIds, customerId) {
    const request = createGetRecommendedProductsInput(context.queryResultSettings, productIds, customerId);
    return executeAction(request, context);
}
export function createRefineSearchByCategoryInput(queryResultSettings, channelId, catalogId, categoryId, refinementCriteria) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('RefineSearchByCategory', true, ProductSearchResultClass, 'true', { bypassCache: 'get', returnEntity: 'ProductSearchResult' }, { channelId: channelId, catalogId: catalogId, categoryId: categoryId, refinementCriteria: refinementCriteria });
}
export function refineSearchByCategoryAsync(context, channelId, catalogId, categoryId, refinementCriteria) {
    const request = createRefineSearchByCategoryInput(context.queryResultSettings, channelId, catalogId, categoryId, refinementCriteria);
    return executeAction(request, context);
}
export function createRefineSearchByTextInput(queryResultSettings, channelId, catalogId, searchText, refinementCriteria) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('RefineSearchByText', true, ProductSearchResultClass, 'true', { bypassCache: 'get', returnEntity: 'ProductSearchResult' }, { channelId: channelId, catalogId: catalogId, searchText: searchText, refinementCriteria: refinementCriteria });
}
export function refineSearchByTextAsync(context, channelId, catalogId, searchText, refinementCriteria) {
    const request = createRefineSearchByTextInput(context.queryResultSettings, channelId, catalogId, searchText, refinementCriteria);
    return executeAction(request, context);
}
export function createGetProductSearchRefinersInput(queryResultSettings, searchCriteria) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetProductSearchRefiners', true, ProductRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRefiner' }, { searchCriteria: searchCriteria });
}
export function getProductSearchRefinersAsync(context, searchCriteria) {
    const request = createGetProductSearchRefinersInput(context.queryResultSettings, searchCriteria);
    return executeAction(request, context);
}
export function createSearchInput(queryResultSettings, productSearchCriteria) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Search', true, ProductClass, 'true', { bypassCache: 'none', returnEntity: 'Product' }, { productSearchCriteria: productSearchCriteria });
}
export function searchAsync(context, productSearchCriteria) {
    const request = createSearchInput(context.queryResultSettings, productSearchCriteria);
    return executeAction(request, context);
}
export function createGetRefinersInput(queryResultSettings, productSearchCriteria) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetRefiners', true, ProductRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRefiner' }, { productSearchCriteria: productSearchCriteria });
}
export function getRefinersAsync(context, productSearchCriteria) {
    const request = createGetRefinersInput(context.queryResultSettings, productSearchCriteria);
    return executeAction(request, context);
}
export function createChangesInput(queryResultSettings, productSearchCriteria) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Changes', true, ProductClass, 'true', { bypassCache: 'get', returnEntity: 'Product' }, { productSearchCriteria: productSearchCriteria });
}
export function changesAsync(context, productSearchCriteria) {
    const request = createChangesInput(context.queryResultSettings, productSearchCriteria);
    return executeAction(request, context);
}
export function createBeginReadChangedProductsInput(changedProductSearchCriteria) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('BeginReadChangedProducts', true, ReadChangedProductsSessionClass, 'false', { bypassCache: 'get', returnEntity: 'ReadChangedProductsSession' }, { changedProductSearchCriteria: changedProductSearchCriteria });
}
export function beginReadChangedProductsAsync(context, changedProductSearchCriteria) {
    const request = createBeginReadChangedProductsInput(changedProductSearchCriteria);
    return executeAction(request, context);
}
export function createReadChangedProductsInput(queryResultSettings, productSearchCriteria) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('ReadChangedProducts', true, ProductClass, 'true', { bypassCache: 'none', returnEntity: 'Product' }, { productSearchCriteria: productSearchCriteria });
}
export function readChangedProductsAsync(context, productSearchCriteria) {
    const request = createReadChangedProductsInput(context.queryResultSettings, productSearchCriteria);
    return executeAction(request, context);
}
export function createGetDeletedListingsInput(catalogId, skip, top) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('GetDeletedListings', true, DeletedListingsResultClass, 'false', { bypassCache: 'none', returnEntity: 'DeletedListingsResult' }, { catalogId: catalogId, skip: skip, top: top });
}
export function getDeletedListingsAsync(context, catalogId, skip, top) {
    const request = createGetDeletedListingsInput(catalogId, skip, top);
    return executeAction(request, context);
}
export function createGetDeletedCatalogsInput(queryResultSettings) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDeletedCatalogs', false, '', 'true', { bypassCache: 'none', returnEntity: '' }, {});
}
export function getDeletedCatalogsAsync(context) {
    const request = createGetDeletedCatalogsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetDeletedLanguagesInput(queryResultSettings) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDeletedLanguages', false, '', 'true', { bypassCache: 'none', returnEntity: '' }, {});
}
export function getDeletedLanguagesAsync(context) {
    const request = createGetDeletedLanguagesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetProductRatingsInput(queryResultSettings, productIds) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetProductRatings', true, ProductRatingClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRating' }, { productIds: productIds });
}
export function getProductRatingsAsync(context, productIds) {
    const request = createGetProductRatingsInput(context.queryResultSettings, productIds);
    return executeAction(request, context);
}
export function createGetProductAssortmentIntervalsInput(queryResultSettings, productIds) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetProductAssortmentIntervals', true, ProductAssortmentIntervalClass, 'true', { bypassCache: 'none', returnEntity: 'ProductAssortmentInterval' }, { productIds: productIds });
}
export function getProductAssortmentIntervalsAsync(context, productIds) {
    const request = createGetProductAssortmentIntervalsInput(context.queryResultSettings, productIds);
    return executeAction(request, context);
}
export function createGetDeliveryOptionsInput(queryResultSettings, productIds, address, filterOption) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDeliveryOptions', true, ProductDeliveryOptionsClass, 'true', { bypassCache: 'none', returnEntity: 'ProductDeliveryOptions' }, { productIds: productIds, address: address, filterOption: filterOption });
}
export function getDeliveryOptionsAsync(context, productIds, address, filterOption) {
    const request = createGetDeliveryOptionsInput(context.queryResultSettings, productIds, address, filterOption);
    return executeAction(request, context);
}
export function createDeleteListingsByCatalogsInput(catalogIds) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('DeleteListingsByCatalogs', true, '', '', { bypassCache: 'get', returnEntity: '' }, { catalogIds: catalogIds });
}
export function deleteListingsByCatalogsAsync(context, catalogIds) {
    const request = createDeleteListingsByCatalogsInput(catalogIds);
    return executeAction(request, context);
}
export function createDeleteListingsByLanguagesInput(languages) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('DeleteListingsByLanguages', true, '', '', { bypassCache: 'get', returnEntity: '' }, { languages: languages });
}
export function deleteListingsByLanguagesAsync(context, languages) {
    const request = createDeleteListingsByLanguagesInput(languages);
    return executeAction(request, context);
}
export function createEndReadChangedProductsInput(session) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('EndReadChangedProducts', true, '', '', { bypassCache: 'get', returnEntity: '' }, { session: session });
}
export function endReadChangedProductsAsync(context, session) {
    const request = createEndReadChangedProductsInput(session);
    return executeAction(request, context);
}
export function createUpdateListingPublishingStatusInput(publishingStatuses) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('UpdateListingPublishingStatus', true, '', '', { bypassCache: 'get', returnEntity: '' }, { publishingStatuses: publishingStatuses });
}
export function updateListingPublishingStatusAsync(context, publishingStatuses) {
    const request = createUpdateListingPublishingStatusInput(publishingStatuses);
    return executeAction(request, context);
}
export function createGetPricesInput(queryResultSettings, itemId, inventoryDimensionId, barcode, customerAccountNumber, unitOfMeasureSymbol, quantity) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetPrices', true, ProductPriceClass, 'true', { bypassCache: 'none', returnEntity: 'ProductPrice' }, { itemId: itemId, inventoryDimensionId: inventoryDimensionId, barcode: barcode, customerAccountNumber: customerAccountNumber, unitOfMeasureSymbol: unitOfMeasureSymbol, quantity: quantity });
}
export function getPricesAsync(context, itemId, inventoryDimensionId, barcode, customerAccountNumber, unitOfMeasureSymbol, quantity) {
    const request = createGetPricesInput(context.queryResultSettings, itemId, inventoryDimensionId, barcode, customerAccountNumber, unitOfMeasureSymbol, quantity);
    return executeAction(request, context);
}
export function createGetProductAvailabilitiesInput(queryResultSettings, itemIds, channelId) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetProductAvailabilities', true, ProductAvailableQuantityClass, 'true', { bypassCache: 'none', returnEntity: 'ProductAvailableQuantity' }, { itemIds: itemIds, channelId: channelId });
}
export function getProductAvailabilitiesAsync(context, itemIds, channelId) {
    const request = createGetProductAvailabilitiesInput(context.queryResultSettings, itemIds, channelId);
    return executeAction(request, context);
}
export function createGetActivePricesInput(queryResultSettings, projectDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers, includeSimpleDiscountsInContextualPrice) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetActivePrices', true, ProductPriceClass, 'true', { bypassCache: 'none', returnEntity: 'ProductPrice' }, { projectDomain: projectDomain, productIds: productIds, activeDate: activeDate, customerId: customerId, affiliationLoyaltyTiers: affiliationLoyaltyTiers, includeSimpleDiscountsInContextualPrice: includeSimpleDiscountsInContextualPrice });
}
export function getActivePricesAsync(context, projectDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers, includeSimpleDiscountsInContextualPrice) {
    const request = createGetActivePricesInput(context.queryResultSettings, projectDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers, includeSimpleDiscountsInContextualPrice);
    return executeAction(request, context);
}
export function createGetFilteredSlotComponentsInput(queryResultSettings, recordId, channelId, slotId, selectedComponents) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFilteredSlotComponents', true, ProductComponentClass, 'true', { bypassCache: 'none', returnEntity: 'ProductComponent' }, { channelId: channelId, slotId: slotId, selectedComponents: selectedComponents });
}
export function getFilteredSlotComponentsAsync(context, recordId, channelId, slotId, selectedComponents) {
    const request = createGetFilteredSlotComponentsInput(context.queryResultSettings, recordId, channelId, slotId, selectedComponents);
    return executeAction(request, context);
}
export function createGetComponentByProductSlotRelationInput(channelId, componentRelation) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('GetComponentByProductSlotRelation', true, ProductComponentClass, 'false', { bypassCache: 'none', returnEntity: 'ProductComponent' }, { channelId: channelId, componentRelation: componentRelation });
}
export function getComponentByProductSlotRelationAsync(context, channelId, componentRelation) {
    const request = createGetComponentByProductSlotRelationInput(channelId, componentRelation);
    return executeAction(request, context);
}
export function createGetCategoryPathsInput(queryResultSettings, channelId, catalogId, categoryPathLookups) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCategoryPaths', true, CategoryPathResultClass, 'true', { bypassCache: 'none', returnEntity: 'CategoryPathResult' }, { channelId: channelId, catalogId: catalogId, CategoryPathLookups: categoryPathLookups });
}
export function getCategoryPathsAsync(context, channelId, catalogId, categoryPathLookups) {
    const request = createGetCategoryPathsInput(context.queryResultSettings, channelId, catalogId, categoryPathLookups);
    return executeAction(request, context);
}
export function createSearchByCategoryInput(queryResultSettings, channelId, catalogId, categoryId) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchByCategory', false, ProductSearchResultClass, 'true', { bypassCache: 'none', returnEntity: 'ProductSearchResult' }, { channelId: channelId, catalogId: catalogId, categoryId: categoryId });
}
export function searchByCategoryAsync(context, channelId, catalogId, categoryId) {
    const request = createSearchByCategoryInput(context.queryResultSettings, channelId, catalogId, categoryId);
    return executeAction(request, context);
}
export function createSearchByTextInput(queryResultSettings, channelId, catalogId, searchText) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchByText', false, ProductSearchResultClass, 'true', { bypassCache: 'none', returnEntity: 'ProductSearchResult' }, { channelId: channelId, catalogId: catalogId, searchText: searchText });
}
export function searchByTextAsync(context, channelId, catalogId, searchText) {
    const request = createSearchByTextInput(context.queryResultSettings, channelId, catalogId, searchText);
    return executeAction(request, context);
}
export function createSearchByCriteriaInput(queryResultSettings, searchCriteria) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchByCriteria', true, ProductSearchResultClass, 'true', { bypassCache: 'none', returnEntity: 'ProductSearchResult' }, { searchCriteria: searchCriteria });
}
export function searchByCriteriaAsync(context, searchCriteria) {
    const request = createSearchByCriteriaInput(context.queryResultSettings, searchCriteria);
    return executeAction(request, context);
}
export function createGetByLookupClausesInput(queryResultSettings, channelId, productLookupClauses) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetByLookupClauses', true, SimpleProductClass, 'true', { bypassCache: 'none', returnEntity: 'SimpleProduct' }, { channelId: channelId, productLookupClauses: productLookupClauses });
}
export function getByLookupClausesAsync(context, channelId, productLookupClauses) {
    const request = createGetByLookupClausesInput(context.queryResultSettings, channelId, productLookupClauses);
    return executeAction(request, context);
}
export function createGetSearchSuggestionsInput(queryResultSettings, channelId, catalogId, searchText, hitPrefix, hitSuffix) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetSearchSuggestions', false, SearchSuggestionClass, 'true', { bypassCache: 'none', returnEntity: 'SearchSuggestion' }, { channelId: channelId, catalogId: catalogId, searchText: searchText, hitPrefix: hitPrefix, hitSuffix: hitSuffix });
}
export function getSearchSuggestionsAsync(context, channelId, catalogId, searchText, hitPrefix, hitSuffix) {
    const request = createGetSearchSuggestionsInput(context.queryResultSettings, channelId, catalogId, searchText, hitPrefix, hitSuffix);
    return executeAction(request, context);
}
export function createGetRefinersByCategoryInput(queryResultSettings, catalogId, categoryId) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetRefinersByCategory', false, ProductRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRefiner' }, { catalogId: catalogId, categoryId: categoryId });
}
export function getRefinersByCategoryAsync(context, catalogId, categoryId) {
    const request = createGetRefinersByCategoryInput(context.queryResultSettings, catalogId, categoryId);
    return executeAction(request, context);
}
export function createGetRefinersByTextInput(queryResultSettings, catalogId, searchText) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetRefinersByText', false, ProductRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRefiner' }, { catalogId: catalogId, searchText: searchText });
}
export function getRefinersByTextAsync(context, catalogId, searchText) {
    const request = createGetRefinersByTextInput(context.queryResultSettings, catalogId, searchText);
    return executeAction(request, context);
}
export function createGetRefinerValuesByCategoryInput(queryResultSettings, catalogId, categoryId, refinerId, refinerSourceValue) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetRefinerValuesByCategory', false, ProductRefinerValueClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRefinerValue' }, { catalogId: catalogId, categoryId: categoryId, refinerId: refinerId, refinerSourceValue: refinerSourceValue });
}
export function getRefinerValuesByCategoryAsync(context, catalogId, categoryId, refinerId, refinerSourceValue) {
    const request = createGetRefinerValuesByCategoryInput(context.queryResultSettings, catalogId, categoryId, refinerId, refinerSourceValue);
    return executeAction(request, context);
}
export function createGetRefinerValuesByTextInput(queryResultSettings, catalogId, searchText, refinerId, refinerSourceValue) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetRefinerValuesByText', false, ProductRefinerValueClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRefinerValue' }, { catalogId: catalogId, searchText: searchText, refinerId: refinerId, refinerSourceValue: refinerSourceValue });
}
export function getRefinerValuesByTextAsync(context, catalogId, searchText, refinerId, refinerSourceValue) {
    const request = createGetRefinerValuesByTextInput(context.queryResultSettings, catalogId, searchText, refinerId, refinerSourceValue);
    return executeAction(request, context);
}
export function createGetChannelProductAttributesInput(queryResultSettings) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetChannelProductAttributes', false, AttributeProductClass, 'true', { bypassCache: 'none', returnEntity: 'AttributeProduct' }, {});
}
export function getChannelProductAttributesAsync(context) {
    const request = createGetChannelProductAttributesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetByIdInput(recordId, channelId) {
    const query = productsQuery(recordId);
    return query.createDataServiceRequestForOperation('GetById', false, SimpleProductClass, 'false', { bypassCache: 'none', returnEntity: 'SimpleProduct' }, { channelId: channelId });
}
export function getByIdAsync(context, recordId, channelId) {
    const request = createGetByIdInput(recordId, channelId);
    return executeAction(request, context);
}
export function createGetAttributeValuesInput(queryResultSettings, recordId, channelId, catalogId) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAttributeValues', false, AttributeValueClass, 'true', { bypassCache: 'none', returnEntity: 'AttributeValue' }, { channelId: channelId, catalogId: catalogId });
}
export function getAttributeValuesAsync(context, recordId, channelId, catalogId) {
    const request = createGetAttributeValuesInput(context.queryResultSettings, recordId, channelId, catalogId);
    return executeAction(request, context);
}
export function createGetMediaLocationsInput(queryResultSettings, recordId, channelId, catalogId) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetMediaLocations', false, MediaLocationClass, 'true', { bypassCache: 'none', returnEntity: 'MediaLocation' }, { channelId: channelId, catalogId: catalogId });
}
export function getMediaLocationsAsync(context, recordId, channelId, catalogId) {
    const request = createGetMediaLocationsInput(context.queryResultSettings, recordId, channelId, catalogId);
    return executeAction(request, context);
}
export function createGetMediaBlobsInput(queryResultSettings, recordId, channelId, catalogId) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetMediaBlobs', false, MediaBlobClass, 'true', { bypassCache: 'none', returnEntity: 'MediaBlob' }, { channelId: channelId, catalogId: catalogId });
}
export function getMediaBlobsAsync(context, recordId, channelId, catalogId) {
    const request = createGetMediaBlobsInput(context.queryResultSettings, recordId, channelId, catalogId);
    return executeAction(request, context);
}
export function createGetDefaultComponentsInput(queryResultSettings, recordId, channelId) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDefaultComponents', false, ProductComponentClass, 'true', { bypassCache: 'none', returnEntity: 'ProductComponent' }, { channelId: channelId });
}
export function getDefaultComponentsAsync(context, recordId, channelId) {
    const request = createGetDefaultComponentsInput(context.queryResultSettings, recordId, channelId);
    return executeAction(request, context);
}
export function createGetSlotComponentsInput(queryResultSettings, recordId, channelId, slotId) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetSlotComponents', false, ProductComponentClass, 'true', { bypassCache: 'none', returnEntity: 'ProductComponent' }, { channelId: channelId, slotId: slotId });
}
export function getSlotComponentsAsync(context, recordId, channelId, slotId) {
    const request = createGetSlotComponentsInput(context.queryResultSettings, recordId, channelId, slotId);
    return executeAction(request, context);
}
export function createGetAllRelationTypesInput(queryResultSettings) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAllRelationTypes', false, ProductRelationTypeClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRelationType' }, {});
}
export function getAllRelationTypesAsync(context) {
    const request = createGetAllRelationTypesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetRelationTypesInput(queryResultSettings, recordId, channelId, catalogId) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetRelationTypes', false, ProductRelationTypeClass, 'true', { bypassCache: 'none', returnEntity: 'ProductRelationType' }, { channelId: channelId, catalogId: catalogId });
}
export function getRelationTypesAsync(context, recordId, channelId, catalogId) {
    const request = createGetRelationTypesInput(context.queryResultSettings, recordId, channelId, catalogId);
    return executeAction(request, context);
}
export function createGetRelatedProductsInput(queryResultSettings, recordId, channelId, catalogId, relationTypeId) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetRelatedProducts', false, ProductSearchResultClass, 'true', { bypassCache: 'none', returnEntity: 'ProductSearchResult' }, { channelId: channelId, catalogId: catalogId, relationTypeId: relationTypeId });
}
export function getRelatedProductsAsync(context, recordId, channelId, catalogId, relationTypeId) {
    const request = createGetRelatedProductsInput(context.queryResultSettings, recordId, channelId, catalogId, relationTypeId);
    return executeAction(request, context);
}
export function createGetUnitsOfMeasureInput(queryResultSettings, recordId) {
    const query = productsQuery(recordId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetUnitsOfMeasure', false, UnitOfMeasureClass, 'true', { bypassCache: 'none', returnEntity: 'UnitOfMeasure' }, {});
}
export function getUnitsOfMeasureAsync(context, recordId) {
    const request = createGetUnitsOfMeasureInput(context.queryResultSettings, recordId);
    return executeAction(request, context);
}
export function createGetApplicableWarrantiesInput(queryResultSettings, catalogId, warrantableProductIds) {
    const query = productsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetApplicableWarranties', true, ProductWarrantiesMappingClass, 'true', { bypassCache: 'none', returnEntity: 'ProductWarrantiesMapping' }, { catalogId: catalogId, warrantableProductIds: warrantableProductIds });
}
export function getApplicableWarrantiesAsync(context, catalogId, warrantableProductIds) {
    const request = createGetApplicableWarrantiesInput(context.queryResultSettings, catalogId, warrantableProductIds);
    return executeAction(request, context);
}
export function createGetPriceInput(recordId, customerAccountNumber, unitOfMeasureSymbol) {
    const query = productsQuery(recordId);
    return query.createDataServiceRequestForOperation('GetPrice', false, ProductPriceClass, 'false', { bypassCache: 'none', returnEntity: 'ProductPrice' }, { customerAccountNumber: customerAccountNumber, unitOfMeasureSymbol: unitOfMeasureSymbol });
}
export function getPriceAsync(context, recordId, customerAccountNumber, unitOfMeasureSymbol) {
    const request = createGetPriceInput(recordId, customerAccountNumber, unitOfMeasureSymbol);
    return executeAction(request, context);
}
export function createCalculateProductPriceInput(recordId, customerAccountNumber, unitOfMeasureSymbol, loyaltyCardId, affiliationLoyaltyTiers) {
    const query = productsQuery(recordId);
    return query.createDataServiceRequestForOperation('CalculateProductPrice', true, ProductPriceClass, 'false', { bypassCache: 'get', returnEntity: 'ProductPrice' }, { customerAccountNumber: customerAccountNumber, unitOfMeasureSymbol: unitOfMeasureSymbol, loyaltyCardId: loyaltyCardId, affiliationLoyaltyTiers: affiliationLoyaltyTiers });
}
export function calculateProductPriceAsync(context, recordId, customerAccountNumber, unitOfMeasureSymbol, loyaltyCardId, affiliationLoyaltyTiers) {
    const request = createCalculateProductPriceInput(recordId, customerAccountNumber, unitOfMeasureSymbol, loyaltyCardId, affiliationLoyaltyTiers);
    return executeAction(request, context);
}
export function createGetEstimatedProductWarehouseAvailabilityInput(productWarehouses) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('GetEstimatedProductWarehouseAvailability', true, ProductWarehouseInventoryInformationClass, 'false', { bypassCache: 'none', returnEntity: 'ProductWarehouseInventoryInformation' }, { productWarehouses: productWarehouses });
}
export function getEstimatedProductWarehouseAvailabilityAsync(context, productWarehouses) {
    const request = createGetEstimatedProductWarehouseAvailabilityInput(productWarehouses);
    return executeAction(request, context);
}
export function createGetEstimatedAvailabilityInput(searchCriteria) {
    const query = productsQuery();
    return query.createDataServiceRequestForOperation('GetEstimatedAvailability', true, ProductWarehouseInventoryInformationClass, 'false', { bypassCache: 'none', returnEntity: 'ProductWarehouseInventoryInformation' }, { searchCriteria: searchCriteria });
}
export function getEstimatedAvailabilityAsync(context, searchCriteria) {
    const request = createGetEstimatedAvailabilityInput(searchCriteria);
    return executeAction(request, context);
}
//# sourceMappingURL=ProductsDataActions.g.js.map