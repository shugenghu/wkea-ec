import { DataServiceQuery } from '../DataServiceQuery';
import { ShiftClass, SuspendedCartClass, ReceiptClass, ShiftTenderLineClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function shiftsQuery(shiftId, terminalId) {
    var key = (shiftId && terminalId) ? { ShiftId: shiftId, TerminalId: terminalId } : null;
    return new DataServiceQuery("Shifts", "Shift", ShiftClass, key);
}
export function createCreateInput(entity) {
    return shiftsQuery().create(entity);
}
export function createShiftAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return shiftsQuery(entity.ShiftId, entity.TerminalId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return shiftsQuery(entity.ShiftId, entity.TerminalId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(shiftId, terminalId) {
    return shiftsQuery(shiftId, terminalId).read();
}
export function readAsync(context, shiftId, terminalId) {
    const request = createReadAsync(shiftId, terminalId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return shiftsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createUpsertShiftsInput(shifts) {
    const query = shiftsQuery();
    return query.createDataServiceRequestForOperation('UpsertShifts', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { shifts: shifts });
}
export function upsertShiftsAsync(context, shifts) {
    const request = createUpsertShiftsInput(shifts);
    return executeAction(request, context);
}
export function createUpsertAndValidateShiftsInput(shiftId, terminalId, shifts) {
    const query = shiftsQuery();
    return query.createDataServiceRequestForOperation('UpsertAndValidateShifts', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { shiftId: shiftId, terminalId: terminalId, shifts: shifts });
}
export function upsertAndValidateShiftsAsync(context, shiftId, terminalId, shifts) {
    const request = createUpsertAndValidateShiftsInput(shiftId, terminalId, shifts);
    return executeAction(request, context);
}
export function createDeleteShiftsInput() {
    const query = shiftsQuery();
    return query.createDataServiceRequestForOperation('DeleteShifts', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, {});
}
export function deleteShiftsAsync(context) {
    const request = createDeleteShiftsInput();
    return executeAction(request, context);
}
export function createOpenInput(shiftId, cashDrawer, isShared) {
    const query = shiftsQuery();
    return query.createDataServiceRequestForOperation('Open', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift' }, { shiftId: shiftId, cashDrawer: cashDrawer, isShared: isShared });
}
export function openAsync(context, shiftId, cashDrawer, isShared) {
    const request = createOpenInput(shiftId, cashDrawer, isShared);
    return executeAction(request, context);
}
export function createCloseInput(shiftId, terminalId, transactionId, forceClose, hasOfflinePendingTransactions) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('Close', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift' }, { transactionId: transactionId, forceClose: forceClose, hasOfflinePendingTransactions: hasOfflinePendingTransactions });
}
export function closeAsync(context, shiftId, terminalId, transactionId, forceClose, hasOfflinePendingTransactions) {
    const request = createCloseInput(shiftId, terminalId, transactionId, forceClose, hasOfflinePendingTransactions);
    return executeAction(request, context);
}
export function createGetSuspendedCartsByShiftInput(queryResultSettings, shiftTerminalId, shiftId) {
    const query = shiftsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetSuspendedCartsByShift', true, SuspendedCartClass, 'true', { bypassCache: 'none', returnEntity: 'SuspendedCart' }, { shiftTerminalId: shiftTerminalId, shiftId: shiftId });
}
export function getSuspendedCartsByShiftAsync(context, shiftTerminalId, shiftId) {
    const request = createGetSuspendedCartsByShiftInput(context.queryResultSettings, shiftTerminalId, shiftId);
    return executeAction(request, context);
}
export function createVoidSuspendedCartsInput(shiftId, terminalId) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('VoidSuspendedCarts', true, '', '', { bypassCache: 'get', returnEntity: '' }, {});
}
export function voidSuspendedCartsAsync(context, shiftId, terminalId) {
    const request = createVoidSuspendedCartsInput(shiftId, terminalId);
    return executeAction(request, context);
}
export function createSaveTenderLinesInput(shiftId, terminalId, tenderLines) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('SaveTenderLines', true, '', '', { bypassCache: 'get', returnEntity: '' }, { tenderLines: tenderLines });
}
export function saveTenderLinesAsync(context, shiftId, terminalId, tenderLines) {
    const request = createSaveTenderLinesInput(shiftId, terminalId, tenderLines);
    return executeAction(request, context);
}
export function createBlindCloseInput(shiftId, terminalId, transactionId, forceClose) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('BlindClose', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift' }, { transactionId: transactionId, forceClose: forceClose });
}
export function blindCloseAsync(context, shiftId, terminalId, transactionId, forceClose) {
    const request = createBlindCloseInput(shiftId, terminalId, transactionId, forceClose);
    return executeAction(request, context);
}
export function createForceDeleteInput(shiftId, terminalId, transactionId) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('ForceDelete', true, '', '', { bypassCache: 'get', returnEntity: '' }, { transactionId: transactionId });
}
export function forceDeleteAsync(context, shiftId, terminalId, transactionId) {
    const request = createForceDeleteInput(shiftId, terminalId, transactionId);
    return executeAction(request, context);
}
export function createResumeInput(shiftId, terminalId, cashDrawer) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('Resume', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift' }, { cashDrawer: cashDrawer });
}
export function resumeAsync(context, shiftId, terminalId, cashDrawer) {
    const request = createResumeInput(shiftId, terminalId, cashDrawer);
    return executeAction(request, context);
}
export function createUseInput(shiftId, terminalId) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('Use', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift' }, {});
}
export function useAsync(context, shiftId, terminalId) {
    const request = createUseInput(shiftId, terminalId);
    return executeAction(request, context);
}
export function createSuspendInput(shiftId, terminalId, transactionId) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('Suspend', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift' }, { transactionId: transactionId });
}
export function suspendAsync(context, shiftId, terminalId, transactionId) {
    const request = createSuspendInput(shiftId, terminalId, transactionId);
    return executeAction(request, context);
}
export function createGetByStatusInput(queryResultSettings, statusValue) {
    const query = shiftsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetByStatus', false, ShiftClass, 'true', { bypassCache: 'none', returnEntity: 'Shift' }, { statusValue: statusValue });
}
export function getByStatusAsync(context, statusValue) {
    const request = createGetByStatusInput(context.queryResultSettings, statusValue);
    return executeAction(request, context);
}
export function createGetByStatusFilterByUserRoleInput(queryResultSettings, statusValue, filterByUserRole) {
    const query = shiftsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetByStatusFilterByUserRole', false, ShiftClass, 'true', { bypassCache: 'none', returnEntity: 'Shift' }, { statusValue: statusValue, filterByUserRole: filterByUserRole });
}
export function getByStatusFilterByUserRoleAsync(context, statusValue, filterByUserRole) {
    const request = createGetByStatusFilterByUserRoleInput(context.queryResultSettings, statusValue, filterByUserRole);
    return executeAction(request, context);
}
export function createGetByRetrievalCriteriaInput(queryResultSettings, shiftRetrievalCriteria) {
    const query = shiftsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetByRetrievalCriteria', true, ShiftClass, 'true', { bypassCache: 'none', returnEntity: 'Shift' }, { shiftRetrievalCriteria: shiftRetrievalCriteria });
}
export function getByRetrievalCriteriaAsync(context, shiftRetrievalCriteria) {
    const request = createGetByRetrievalCriteriaInput(context.queryResultSettings, shiftRetrievalCriteria);
    return executeAction(request, context);
}
export function createGetXReportInput(shiftId, terminalId, transactionId, hardwareProfileId) {
    const query = shiftsQuery(shiftId, terminalId);
    return query.createDataServiceRequestForOperation('GetXReport', false, ReceiptClass, 'false', { bypassCache: 'none', returnEntity: 'Receipt' }, { transactionId: transactionId, hardwareProfileId: hardwareProfileId });
}
export function getXReportAsync(context, shiftId, terminalId, transactionId, hardwareProfileId) {
    const request = createGetXReportInput(shiftId, terminalId, transactionId, hardwareProfileId);
    return executeAction(request, context);
}
export function createGetZReportInput(transactionId, hardwareProfileId) {
    const query = shiftsQuery();
    return query.createDataServiceRequestForOperation('GetZReport', false, ReceiptClass, 'false', { bypassCache: 'none', returnEntity: 'Receipt' }, { transactionId: transactionId, hardwareProfileId: hardwareProfileId });
}
export function getZReportAsync(context, transactionId, hardwareProfileId) {
    const request = createGetZReportInput(transactionId, hardwareProfileId);
    return executeAction(request, context);
}
export function createGetOpenTenderLinesInput(queryResultSettings, shiftId, terminalId) {
    const query = shiftsQuery(shiftId, terminalId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetOpenTenderLines', false, ShiftTenderLineClass, 'true', { bypassCache: 'none', returnEntity: 'ShiftTenderLine' }, {});
}
export function getOpenTenderLinesAsync(context, shiftId, terminalId) {
    const request = createGetOpenTenderLinesInput(context.queryResultSettings, shiftId, terminalId);
    return executeAction(request, context);
}
export function createValidateCashDrawerLimitInput(shiftTerminalId, shiftId) {
    const query = shiftsQuery();
    return query.createDataServiceRequestForOperation('ValidateCashDrawerLimit', true, '', '', { bypassCache: 'get', returnEntity: '' }, { shiftTerminalId: shiftTerminalId, shiftId: shiftId });
}
export function validateCashDrawerLimitAsync(context, shiftTerminalId, shiftId) {
    const request = createValidateCashDrawerLimitInput(shiftTerminalId, shiftId);
    return executeAction(request, context);
}
//# sourceMappingURL=ShiftsDataActions.g.js.map