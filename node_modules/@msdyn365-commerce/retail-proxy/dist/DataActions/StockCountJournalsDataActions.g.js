import { DataServiceQuery } from '../DataServiceQuery';
import { StockCountJournalClass, StockCountJournalTransactionClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function stockCountJournalsQuery(journalId) {
    var key = (journalId) ? { JournalId: journalId } : null;
    return new DataServiceQuery("StockCountJournals", "StockCountJournal", StockCountJournalClass, key);
}
export function createCreateInput(entity) {
    return stockCountJournalsQuery().create(entity);
}
export function createStockCountJournalAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return stockCountJournalsQuery(entity.JournalId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return stockCountJournalsQuery(entity.JournalId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(journalId) {
    return stockCountJournalsQuery(journalId).read();
}
export function readAsync(context, journalId) {
    const request = createReadAsync(journalId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return stockCountJournalsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSyncInput(queryResultSettings) {
    const query = stockCountJournalsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Sync', true, StockCountJournalClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournal' }, {});
}
export function syncAsync(context) {
    const request = createSyncInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSyncTransactionsInput(queryResultSettings, journalId) {
    const query = stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SyncTransactions', true, StockCountJournalTransactionClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournalTransaction' }, {});
}
export function syncTransactionsAsync(context, journalId) {
    const request = createSyncTransactionsInput(context.queryResultSettings, journalId);
    return executeAction(request, context);
}
export function createCalculateEstimatedOnHandInventoryInput(queryResultSettings, journalId) {
    const query = stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('CalculateEstimatedOnHandInventory', true, StockCountJournalTransactionClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournalTransaction' }, {});
}
export function calculateEstimatedOnHandInventoryAsync(context, journalId) {
    const request = createCalculateEstimatedOnHandInventoryInput(context.queryResultSettings, journalId);
    return executeAction(request, context);
}
export function createRemoveJournalInput(journalId) {
    const query = stockCountJournalsQuery(journalId);
    return query.createDataServiceRequestForOperation('RemoveJournal', true, '', '', { bypassCache: 'get', returnEntity: '' }, {});
}
export function removeJournalAsync(context, journalId) {
    const request = createRemoveJournalInput(journalId);
    return executeAction(request, context);
}
export function createRemoveTransactionInput(journalId, itemId, inventSizeId, inventColorId, inventStyleId, configurationId) {
    const query = stockCountJournalsQuery(journalId);
    return query.createDataServiceRequestForOperation('RemoveTransaction', true, '', '', { bypassCache: 'get', returnEntity: '' }, { itemId: itemId, inventSizeId: inventSizeId, inventColorId: inventColorId, inventStyleId: inventStyleId, configurationId: configurationId });
}
export function removeTransactionAsync(context, journalId, itemId, inventSizeId, inventColorId, inventStyleId, configurationId) {
    const request = createRemoveTransactionInput(journalId, itemId, inventSizeId, inventColorId, inventStyleId, configurationId);
    return executeAction(request, context);
}
export function createRemoveStockCountLineByLineIdInput(journalId, stockCountLineId) {
    const query = stockCountJournalsQuery(journalId);
    return query.createDataServiceRequestForOperation('RemoveStockCountLineByLineId', true, '', '', { bypassCache: 'get', returnEntity: '' }, { stockCountLineId: stockCountLineId });
}
export function removeStockCountLineByLineIdAsync(context, journalId, stockCountLineId) {
    const request = createRemoveStockCountLineByLineIdInput(journalId, stockCountLineId);
    return executeAction(request, context);
}
export function createRemoveStockCountLineByProductRecIdInput(journalId, productId) {
    const query = stockCountJournalsQuery(journalId);
    return query.createDataServiceRequestForOperation('RemoveStockCountLineByProductRecId', true, '', '', { bypassCache: 'get', returnEntity: '' }, { productId: productId });
}
export function removeStockCountLineByProductRecIdAsync(context, journalId, productId) {
    const request = createRemoveStockCountLineByProductRecIdInput(journalId, productId);
    return executeAction(request, context);
}
export function createCommitInput(journalId) {
    const query = stockCountJournalsQuery(journalId);
    return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: '' }, {});
}
export function commitAsync(context, journalId) {
    const request = createCommitInput(journalId);
    return executeAction(request, context);
}
//# sourceMappingURL=StockCountJournalsDataActions.g.js.map