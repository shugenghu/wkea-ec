{"version":3,"file":"BusinessPartnerUsersDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/BusinessPartnerUsersDataActions.g.ts"],"names":[],"mappings":"AAEI,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAEvD,OAAO,EAAE,wBAAwB,EAAE,MAAM,8BAA8B,CAAC;AAExE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAGjD,SAAS,yBAAyB,CAAC,KAAc;IAC/C,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5C,OAAO,IAAI,gBAAgB,CAAC,sBAAsB,EAAE,qBAAqB,EAAE,wBAAwB,EAAE,GAAG,CAAC,CAAC;AAC5G,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAA2B;IACzD,OAAO,yBAAyB,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACtD,CAAC;AACD,MAAM,UAAU,8BAA8B,CAAC,OAAiB,EAAE,MAA2B;IACzF,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAsB,OAAO,EAAE,OAAO,CAAC,CAAC;AAChE,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,MAA2B;IACzD,OAAO,yBAAyB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAClE,CAAC;AACD,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,MAA2B;IACtE,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAsB,OAAO,EAAE,OAAO,CAAC,CAAC;AAChE,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,MAA2B;IACzD,OAAO,yBAAyB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;AAC5D,CAAC;AACD,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,MAA2B;IACtE,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,MAAM,UAAU,eAAe,CAAC,KAAa;IACzC,OAAO,yBAAyB,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;AACnD,CAAC;AACD,MAAM,UAAU,SAAS,CAAC,OAAiB,EAAE,KAAa;IACtD,MAAM,OAAO,GAAG,eAAe,CAAC,KAAK,CAAG,CAAC;IACzC,OAAO,aAAa,CAAsB,OAAO,EAAE,OAAO,CAAC,CAAC;AAChE,CAAC;AACD,MAAM,UAAU,kBAAkB,CAAC,mBAAyC;IACxE,OAAO,yBAAyB,EAAE,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,CAAC;AAClF,CAAC;AACD,MAAM,UAAU,YAAY,CAAC,OAAiB;IAC1C,MAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,mBAAmB,CAAG,CAAC;IAClE,OAAO,aAAa,CAAwB,OAAO,EAAE,OAAO,CAAC,CAAC;AAClE,CAAC","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { BusinessPartnerUser } from '../Entities/CommerceTypes.g';\n    import { BusinessPartnerUserClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function businessPartnerUsersQuery(email?: string): DataServiceQuery {\n      var key = (email) ? { Email: email } : null;\n      return new DataServiceQuery(\"BusinessPartnerUsers\", \"BusinessPartnerUser\", BusinessPartnerUserClass, key);\n    }\n    \n    export function createCreateInput(entity: BusinessPartnerUser): IDataServiceRequest {\n        return businessPartnerUsersQuery().create(entity);\n    }\n    export function createBusinessPartnerUserAsync(context: IContext, entity: BusinessPartnerUser): AsyncResult<BusinessPartnerUser> {\n        const request = createCreateInput(entity, );\n        return executeAction<BusinessPartnerUser>(request, context);\n    }\n    export function createUpdateInput(entity: BusinessPartnerUser): IDataServiceRequest {\n        return businessPartnerUsersQuery(entity.Email).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: BusinessPartnerUser): AsyncResult<BusinessPartnerUser> {\n        const request = createUpdateInput(entity, );\n        return executeAction<BusinessPartnerUser>(request, context);\n    }\n    export function createDeleteAsync(entity: BusinessPartnerUser): IDataServiceRequest {\n        return businessPartnerUsersQuery(entity.Email).delete();\n    }\n    export function deleteAsync(context: IContext, entity: BusinessPartnerUser): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(email: string): IDataServiceRequest {\n        return businessPartnerUsersQuery(email).read();\n    }\n    export function readAsync(context: IContext, email: string): AsyncResult<BusinessPartnerUser> {\n        const request = createReadAsync(email, );\n        return executeAction<BusinessPartnerUser>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return businessPartnerUsersQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<BusinessPartnerUser[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<BusinessPartnerUser[]>(request, context);\n    }\n    \n    "]}