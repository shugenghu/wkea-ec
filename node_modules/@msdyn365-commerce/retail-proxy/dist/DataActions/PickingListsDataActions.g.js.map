{"version":3,"file":"PickingListsDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/PickingListsDataActions.g.ts"],"names":[],"mappings":"AAEI,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAEvD,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAGjD,SAAS,iBAAiB,CAAC,OAAgB;IACzC,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAClD,OAAO,IAAI,gBAAgB,CAAC,cAAc,EAAE,aAAa,EAAE,gBAAgB,EAAE,GAAG,CAAC,CAAC;AACpF,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAAmB;IACjD,OAAO,iBAAiB,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC9C,CAAC;AACD,MAAM,UAAU,sBAAsB,CAAC,OAAiB,EAAE,MAAmB;IACzE,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAc,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,MAAmB;IACjD,OAAO,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC5D,CAAC;AACD,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,MAAmB;IAC9D,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAc,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,MAAmB;IACjD,OAAO,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;AACtD,CAAC;AACD,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,MAAmB;IAC9D,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,MAAM,UAAU,eAAe,CAAC,OAAe;IAC3C,OAAO,iBAAiB,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;AAC7C,CAAC;AACD,MAAM,UAAU,SAAS,CAAC,OAAiB,EAAE,OAAe;IACxD,MAAM,OAAO,GAAG,eAAe,CAAC,OAAO,CAAG,CAAC;IAC3C,OAAO,aAAa,CAAc,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AACD,MAAM,UAAU,kBAAkB,CAAC,mBAAyC;IACxE,OAAO,iBAAiB,EAAE,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,CAAC;AAC1E,CAAC;AACD,MAAM,UAAU,YAAY,CAAC,OAAiB;IAC1C,MAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,mBAAmB,CAAG,CAAC;IAClE,OAAO,aAAa,CAAgB,OAAO,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,OAAe;IAC7C,MAAM,KAAK,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACzC,OAAO,KAAK,CAAC,oCAAoC,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,EAAC,EAAE,EAAG,CAAC,CAAC;AAC5H,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,OAAe;IAC1D,MAAM,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAG,CAAC;IAC7C,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { PickingList } from '../Entities/CommerceTypes.g';\n    import { PickingListClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function pickingListsQuery(orderId?: string): DataServiceQuery {\n      var key = (orderId) ? { OrderId: orderId } : null;\n      return new DataServiceQuery(\"PickingLists\", \"PickingList\", PickingListClass, key);\n    }\n    \n    export function createCreateInput(entity: PickingList): IDataServiceRequest {\n        return pickingListsQuery().create(entity);\n    }\n    export function createPickingListAsync(context: IContext, entity: PickingList): AsyncResult<PickingList> {\n        const request = createCreateInput(entity, );\n        return executeAction<PickingList>(request, context);\n    }\n    export function createUpdateInput(entity: PickingList): IDataServiceRequest {\n        return pickingListsQuery(entity.OrderId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: PickingList): AsyncResult<PickingList> {\n        const request = createUpdateInput(entity, );\n        return executeAction<PickingList>(request, context);\n    }\n    export function createDeleteAsync(entity: PickingList): IDataServiceRequest {\n        return pickingListsQuery(entity.OrderId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: PickingList): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(orderId: string): IDataServiceRequest {\n        return pickingListsQuery(orderId).read();\n    }\n    export function readAsync(context: IContext, orderId: string): AsyncResult<PickingList> {\n        const request = createReadAsync(orderId, );\n        return executeAction<PickingList>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return pickingListsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<PickingList[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<PickingList[]>(request, context);\n    }\n    \n    export function createCommitInput(orderId: string): IDataServiceRequest {      \n        const query = pickingListsQuery(orderId);\n        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });\n    }    \n    \n    export function commitAsync(context: IContext, orderId: string):AsyncResult<NullResult> {\n        const request = createCommitInput(orderId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    "]}