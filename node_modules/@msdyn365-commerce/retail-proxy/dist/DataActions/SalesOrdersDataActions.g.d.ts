import { AsyncResult } from '../async-result';
import { SalesOrder, SalesOrderSearchCriteria, OrderSearchCriteria, ReceiptRetrievalCriteria, Receipt, SearchReceiptCriteria, ElectronicAddress, ShipFulfillmentLine, FulfillmentLineParameter, FulfillmentLineSearchCriteria, FulfillmentLine, RejectFulfillmentLine, SalesInvoice, OrderInvoice, InvoiceSearchCriteria, SalesLine, PickAndPackSalesLineParameter, PickingList, PackingSlipData } from '../Entities/CommerceTypes.g';
import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
export declare function createCreateInput(entity: SalesOrder): IDataServiceRequest;
export declare function createSalesOrderAsync(context: IContext, entity: SalesOrder): AsyncResult<SalesOrder>;
export declare function createUpdateInput(entity: SalesOrder): IDataServiceRequest;
export declare function updateAsync(context: IContext, entity: SalesOrder): AsyncResult<SalesOrder>;
export declare function createDeleteAsync(entity: SalesOrder): IDataServiceRequest;
export declare function deleteAsync(context: IContext, entity: SalesOrder): AsyncResult<NullResult>;
export declare function createReadAsync(id: string): IDataServiceRequest;
export declare function readAsync(context: IContext, id: string): AsyncResult<SalesOrder>;
export declare function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function readAllAsync(context: IContext): AsyncResult<SalesOrder[]>;
export declare function createSearchSalesTransactionsByReceiptIdInput(queryResultSettings: IQueryResultSettings, receiptId: string | null): IDataServiceRequest;
export declare function searchSalesTransactionsByReceiptIdAsync(context: IContext, receiptId: string | null): AsyncResult<SalesOrder[]>;
export declare function createSearchInput(queryResultSettings: IQueryResultSettings, salesOrderSearchCriteria: SalesOrderSearchCriteria | null): IDataServiceRequest;
export declare function searchAsync(context: IContext, salesOrderSearchCriteria: SalesOrderSearchCriteria | null): AsyncResult<SalesOrder[]>;
export declare function createSearchOrdersInput(queryResultSettings: IQueryResultSettings, orderSearchCriteria: OrderSearchCriteria | null): IDataServiceRequest;
export declare function searchOrdersAsync(context: IContext, orderSearchCriteria: OrderSearchCriteria | null): AsyncResult<SalesOrder[]>;
export declare function createGetReceiptsInput(queryResultSettings: IQueryResultSettings, id: string, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest;
export declare function getReceiptsAsync(context: IContext, id: string, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): AsyncResult<Receipt[]>;
export declare function createSendReceiptInput(searchCriteria: SearchReceiptCriteria | null, recipientAddresses: ElectronicAddress[] | null): IDataServiceRequest;
export declare function sendReceiptAsync(context: IContext, searchCriteria: SearchReceiptCriteria | null, recipientAddresses: ElectronicAddress[] | null): AsyncResult<NullResult>;
export declare function createGetGiftReceiptsInput(queryResultSettings: IQueryResultSettings, id: string, salesLineNumbers: number[], receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest;
export declare function getGiftReceiptsAsync(context: IContext, id: string, salesLineNumbers: number[], receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): AsyncResult<Receipt[]>;
export declare function createGetByReceiptIdInput(queryResultSettings: IQueryResultSettings, receiptId: string | null, orderStoreNumber: string | null, orderTerminalId: string | null): IDataServiceRequest;
export declare function getByReceiptIdAsync(context: IContext, receiptId: string | null, orderStoreNumber: string | null, orderTerminalId: string | null): AsyncResult<SalesOrder[]>;
export declare function createGetSalesOrderDetailsByTransactionIdInput(transactionId: string | null, searchLocationValue: number): IDataServiceRequest;
export declare function getSalesOrderDetailsByTransactionIdAsync(context: IContext, transactionId: string | null, searchLocationValue: number): AsyncResult<SalesOrder>;
export declare function createGetSalesOrderDetailsBySalesIdInput(salesId: string | null): IDataServiceRequest;
export declare function getSalesOrderDetailsBySalesIdAsync(context: IContext, salesId: string | null): AsyncResult<SalesOrder>;
export declare function createGetSalesOrderDetailsByQuotationIdInput(quotationId: string | null): IDataServiceRequest;
export declare function getSalesOrderDetailsByQuotationIdAsync(context: IContext, quotationId: string | null): AsyncResult<SalesOrder>;
export declare function createShipFulfillmentLinesInput(shipFulfillmentLines: ShipFulfillmentLine[] | null): IDataServiceRequest;
export declare function shipFulfillmentLinesAsync(context: IContext, shipFulfillmentLines: ShipFulfillmentLine[] | null): AsyncResult<NullResult>;
export declare function createAcceptFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest;
export declare function acceptFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null): AsyncResult<NullResult>;
export declare function createPickFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest;
export declare function pickFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null): AsyncResult<NullResult>;
export declare function createPackFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest;
export declare function packFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null): AsyncResult<NullResult>;
export declare function createMarkFulfillmentLinesAsPackedInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest;
export declare function markFulfillmentLinesAsPackedAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null): AsyncResult<string>;
export declare function createMarkAsPickedInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest;
export declare function markAsPickedAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null): AsyncResult<NullResult>;
export declare function createGetFulfillmentPickingListsInput(queryResultSettings: IQueryResultSettings, pickingListFulfillmentLine: FulfillmentLineParameter[] | null, hardwareProfileId: string | null): IDataServiceRequest;
export declare function getFulfillmentPickingListsAsync(context: IContext, pickingListFulfillmentLine: FulfillmentLineParameter[] | null, hardwareProfileId: string | null): AsyncResult<Receipt[]>;
export declare function createGetFulfillmentLinesInput(queryResultSettings: IQueryResultSettings, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null): IDataServiceRequest;
export declare function getFulfillmentLinesAsync(context: IContext, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null): AsyncResult<FulfillmentLine[]>;
export declare function createGetFulfillmentPackingSlipsInput(queryResultSettings: IQueryResultSettings, packFulfillmentLines: FulfillmentLineParameter[] | null, hardwareProfileId: string | null): IDataServiceRequest;
export declare function getFulfillmentPackingSlipsAsync(context: IContext, packFulfillmentLines: FulfillmentLineParameter[] | null, hardwareProfileId: string | null): AsyncResult<Receipt[]>;
export declare function createGetFulfillmentPackingSlipsByIdInput(queryResultSettings: IQueryResultSettings, salesId: string | null, packingSlipId: string | null, hardwareProfileId: string | null): IDataServiceRequest;
export declare function getFulfillmentPackingSlipsByIdAsync(context: IContext, salesId: string | null, packingSlipId: string | null, hardwareProfileId: string | null): AsyncResult<Receipt[]>;
export declare function createRejectFulfillmentLinesInput(rejectFulfillmentLines: RejectFulfillmentLine[] | null): IDataServiceRequest;
export declare function rejectFulfillmentLinesAsync(context: IContext, rejectFulfillmentLines: RejectFulfillmentLine[] | null): AsyncResult<NullResult>;
export declare function createGetInvoicesBySalesIdInput(queryResultSettings: IQueryResultSettings, salesId: string | null): IDataServiceRequest;
export declare function getInvoicesBySalesIdAsync(context: IContext, salesId: string | null): AsyncResult<SalesInvoice[]>;
export declare function createGetOrderInvoicesInput(queryResultSettings: IQueryResultSettings, customerId: string | null): IDataServiceRequest;
export declare function getOrderInvoicesAsync(context: IContext, customerId: string | null): AsyncResult<OrderInvoice[]>;
export declare function createGetInvoicesInput(queryResultSettings: IQueryResultSettings, invoiceSearchCriteria: InvoiceSearchCriteria | null): IDataServiceRequest;
export declare function getInvoicesAsync(context: IContext, invoiceSearchCriteria: InvoiceSearchCriteria | null): AsyncResult<OrderInvoice[]>;
export declare function createGetInvoicedSalesLinesBySalesIdsInput(queryResultSettings: IQueryResultSettings, salesIds: string[] | null): IDataServiceRequest;
export declare function getInvoicedSalesLinesBySalesIdsAsync(context: IContext, salesIds: string[] | null): AsyncResult<SalesLine[]>;
export declare function createCreatePickingListInput(salesId: string | null): IDataServiceRequest;
export declare function createPickingListAsync(context: IContext, salesId: string | null): AsyncResult<NullResult>;
export declare function createCreatePickingListForItemsInput(salesId: string | null, pickAndPackSalesLineParameters: PickAndPackSalesLineParameter[] | null): IDataServiceRequest;
export declare function createPickingListForItemsAsync(context: IContext, salesId: string | null, pickAndPackSalesLineParameters: PickAndPackSalesLineParameter[] | null): AsyncResult<string>;
export declare function createGetPickingListsInput(queryResultSettings: IQueryResultSettings, id: string): IDataServiceRequest;
export declare function getPickingListsAsync(context: IContext, id: string): AsyncResult<PickingList[]>;
export declare function createCreatePackingSlipInput(salesId: string | null): IDataServiceRequest;
export declare function createPackingSlipAsync(context: IContext, salesId: string | null): AsyncResult<NullResult>;
export declare function createGetPackingSlipsDataInput(queryResultSettings: IQueryResultSettings, salesId: string | null): IDataServiceRequest;
export declare function getPackingSlipsDataAsync(context: IContext, salesId: string | null): AsyncResult<PackingSlipData[]>;
