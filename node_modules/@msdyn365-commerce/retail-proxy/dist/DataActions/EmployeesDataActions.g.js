import { DataServiceQuery } from '../DataServiceQuery';
import { EmployeeClass, EmployeeActivityClass, OrgUnitClass, ClientBookCustomerClass, ClientBookRefinerClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function employeesQuery(staffId) {
    var key = (staffId) ? { StaffId: staffId } : null;
    return new DataServiceQuery("Employees", "Employee", EmployeeClass, key);
}
export function createCreateInput(entity) {
    return employeesQuery().create(entity);
}
export function createEmployeeAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return employeesQuery(entity.StaffId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return employeesQuery(entity.StaffId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(staffId) {
    return employeesQuery(staffId).read();
}
export function readAsync(context, staffId) {
    const request = createReadAsync(staffId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return employeesQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetActivitiesInput(queryResultSettings, employeeActivitySearchCriteria) {
    const query = employeesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetActivities', true, EmployeeActivityClass, 'true', { bypassCache: 'none', returnEntity: 'EmployeeActivity' }, { employeeActivitySearchCriteria: employeeActivitySearchCriteria });
}
export function getActivitiesAsync(context, employeeActivitySearchCriteria) {
    const request = createGetActivitiesInput(context.queryResultSettings, employeeActivitySearchCriteria);
    return executeAction(request, context);
}
export function createGetManagerActivityViewInput(queryResultSettings, employeeActivitySearchCriteria) {
    const query = employeesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetManagerActivityView', true, EmployeeActivityClass, 'true', { bypassCache: 'none', returnEntity: 'EmployeeActivity' }, { employeeActivitySearchCriteria: employeeActivitySearchCriteria });
}
export function getManagerActivityViewAsync(context, employeeActivitySearchCriteria) {
    const request = createGetManagerActivityViewInput(context.queryResultSettings, employeeActivitySearchCriteria);
    return executeAction(request, context);
}
export function createRegisterActivityInput(staffId, employeeActivityType) {
    const query = employeesQuery(staffId);
    return query.createDataServiceRequestForOperation('RegisterActivity', true, '', 'false', { bypassCache: 'get', returnEntity: '' }, { employeeActivityType: employeeActivityType });
}
export function registerActivityAsync(context, staffId, employeeActivityType) {
    const request = createRegisterActivityInput(staffId, employeeActivityType);
    return executeAction(request, context);
}
export function createGetAccessibleOrgUnitsInput(queryResultSettings) {
    const query = employeesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAccessibleOrgUnits', true, OrgUnitClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnit' }, {});
}
export function getAccessibleOrgUnitsAsync(context) {
    const request = createGetAccessibleOrgUnitsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetLatestActivityInput() {
    const query = employeesQuery();
    return query.createDataServiceRequestForOperation('GetLatestActivity', true, EmployeeActivityClass, 'false', { bypassCache: 'none', returnEntity: 'EmployeeActivity' }, {});
}
export function getLatestActivityAsync(context) {
    const request = createGetLatestActivityInput();
    return executeAction(request, context);
}
export function createSearchClientBookCustomersInput(queryResultSettings, clientBookCustomerSearchCriteria) {
    const query = employeesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchClientBookCustomers', true, ClientBookCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'ClientBookCustomer' }, { clientBookCustomerSearchCriteria: clientBookCustomerSearchCriteria });
}
export function searchClientBookCustomersAsync(context, clientBookCustomerSearchCriteria) {
    const request = createSearchClientBookCustomersInput(context.queryResultSettings, clientBookCustomerSearchCriteria);
    return executeAction(request, context);
}
export function createGetClientBookSearchRefinersInput(queryResultSettings, refinerSourceTypes, searchCriteria) {
    const query = employeesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetClientBookSearchRefiners', true, ClientBookRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'ClientBookRefiner' }, { refinerSourceTypes: refinerSourceTypes, searchCriteria: searchCriteria });
}
export function getClientBookSearchRefinersAsync(context, refinerSourceTypes, searchCriteria) {
    const request = createGetClientBookSearchRefinersInput(context.queryResultSettings, refinerSourceTypes, searchCriteria);
    return executeAction(request, context);
}
export function createUpdateClientBookInput(clientBookChanges) {
    const query = employeesQuery();
    return query.createDataServiceRequestForOperation('UpdateClientBook', true, '', '', { bypassCache: 'get', returnEntity: '' }, { clientBookChanges: clientBookChanges });
}
export function updateClientBookAsync(context, clientBookChanges) {
    const request = createUpdateClientBookInput(clientBookChanges);
    return executeAction(request, context);
}
export function createGetCurrentEmployeeInput() {
    const query = employeesQuery();
    return query.createDataServiceRequestForOperation('GetCurrentEmployee', false, EmployeeClass, 'false', { bypassCache: 'none', returnEntity: 'Employee' }, {});
}
export function getCurrentEmployeeAsync(context) {
    const request = createGetCurrentEmployeeInput();
    return executeAction(request, context);
}
//# sourceMappingURL=EmployeesDataActions.g.js.map