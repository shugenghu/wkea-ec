{"version":3,"file":"ScanResultsDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/ScanResultsDataActions.g.ts"],"names":[],"mappings":"AAEI,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAEvD,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AAE/D,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAGjD,SAAS,gBAAgB,CAAC,WAAoB;IAC5C,IAAI,GAAG,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9D,OAAO,IAAI,gBAAgB,CAAC,aAAa,EAAE,YAAY,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;AACjF,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAAkB;IAChD,OAAO,gBAAgB,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC7C,CAAC;AACD,MAAM,UAAU,qBAAqB,CAAC,OAAiB,EAAE,MAAkB;IACvE,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,MAAkB;IAChD,OAAO,gBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC/D,CAAC;AACD,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,MAAkB;IAC7D,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,MAAkB;IAChD,OAAO,gBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;AACzD,CAAC;AACD,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,MAAkB;IAC7D,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,MAAM,UAAU,eAAe,CAAC,WAAmB;IAC/C,OAAO,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC;AAChD,CAAC;AACD,MAAM,UAAU,SAAS,CAAC,OAAiB,EAAE,WAAmB;IAC5D,MAAM,OAAO,GAAG,eAAe,CAAC,WAAW,CAAG,CAAC;IAC/C,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,MAAM,UAAU,kBAAkB,CAAC,mBAAyC;IACxE,OAAO,gBAAgB,EAAE,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,CAAC;AACzE,CAAC;AACD,MAAM,UAAU,YAAY,CAAC,OAAiB;IAC1C,MAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,mBAAmB,CAAG,CAAC;IAClE,OAAO,aAAa,CAAe,OAAO,EAAE,OAAO,CAAC,CAAC;AACzD,CAAC","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { ScanResult } from '../Entities/CommerceTypes.g';\n    import { ScanResultClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function scanResultsQuery(scannedText?: string): DataServiceQuery {\n      var key = (scannedText) ? { ScannedText: scannedText } : null;\n      return new DataServiceQuery(\"ScanResults\", \"ScanResult\", ScanResultClass, key);\n    }\n    \n    export function createCreateInput(entity: ScanResult): IDataServiceRequest {\n        return scanResultsQuery().create(entity);\n    }\n    export function createScanResultAsync(context: IContext, entity: ScanResult): AsyncResult<ScanResult> {\n        const request = createCreateInput(entity, );\n        return executeAction<ScanResult>(request, context);\n    }\n    export function createUpdateInput(entity: ScanResult): IDataServiceRequest {\n        return scanResultsQuery(entity.ScannedText).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: ScanResult): AsyncResult<ScanResult> {\n        const request = createUpdateInput(entity, );\n        return executeAction<ScanResult>(request, context);\n    }\n    export function createDeleteAsync(entity: ScanResult): IDataServiceRequest {\n        return scanResultsQuery(entity.ScannedText).delete();\n    }\n    export function deleteAsync(context: IContext, entity: ScanResult): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(scannedText: string): IDataServiceRequest {\n        return scanResultsQuery(scannedText).read();\n    }\n    export function readAsync(context: IContext, scannedText: string): AsyncResult<ScanResult> {\n        const request = createReadAsync(scannedText, );\n        return executeAction<ScanResult>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return scanResultsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<ScanResult[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<ScanResult[]>(request, context);\n    }\n    \n    "]}