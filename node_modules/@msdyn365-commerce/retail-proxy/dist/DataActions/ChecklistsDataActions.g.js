import { DataServiceQuery } from '../DataServiceQuery';
import { ChecklistClass, ChecklistTaskClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function checklistsQuery(recordId) {
    var key = (recordId) ? { RecordId: recordId } : null;
    return new DataServiceQuery("Checklists", "Checklist", ChecklistClass, key);
}
export function createCreateInput(entity) {
    return checklistsQuery().create(entity);
}
export function createChecklistAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return checklistsQuery(entity.RecordId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return checklistsQuery(entity.RecordId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(recordId) {
    return checklistsQuery(recordId).read();
}
export function readAsync(context, recordId) {
    const request = createReadAsync(recordId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return checklistsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSearchChecklistsInput(queryResultSettings, checklistSearchCriteria) {
    const query = checklistsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchChecklists', true, ChecklistClass, 'true', { bypassCache: 'none', returnEntity: 'Checklist' }, { checklistSearchCriteria: checklistSearchCriteria });
}
export function searchChecklistsAsync(context, checklistSearchCriteria) {
    const request = createSearchChecklistsInput(context.queryResultSettings, checklistSearchCriteria);
    return executeAction(request, context);
}
export function createSearchTasksInput(queryResultSettings, taskSearchCriteria) {
    const query = checklistsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchTasks', true, ChecklistTaskClass, 'true', { bypassCache: 'none', returnEntity: 'ChecklistTask' }, { taskSearchCriteria: taskSearchCriteria });
}
export function searchTasksAsync(context, taskSearchCriteria) {
    const request = createSearchTasksInput(context.queryResultSettings, taskSearchCriteria);
    return executeAction(request, context);
}
export function createCreateTaskInput(createTask) {
    const query = checklistsQuery();
    return query.createDataServiceRequestForOperation('CreateTask', true, ChecklistTaskClass, 'false', { bypassCache: 'get', returnEntity: 'ChecklistTask' }, { createTask: createTask });
}
export function createTaskAsync(context, createTask) {
    const request = createCreateTaskInput(createTask);
    return executeAction(request, context);
}
export function createUpdateChecklistsInput(queryResultSettings, updateChecklists) {
    const query = checklistsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('UpdateChecklists', true, ChecklistClass, 'true', { bypassCache: 'get', returnEntity: 'Checklist' }, { updateChecklists: updateChecklists });
}
export function updateChecklistsAsync(context, updateChecklists) {
    const request = createUpdateChecklistsInput(context.queryResultSettings, updateChecklists);
    return executeAction(request, context);
}
export function createUpdateTasksInput(queryResultSettings, updateTasks) {
    const query = checklistsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('UpdateTasks', true, ChecklistTaskClass, 'true', { bypassCache: 'get', returnEntity: 'ChecklistTask' }, { updateTasks: updateTasks });
}
export function updateTasksAsync(context, updateTasks) {
    const request = createUpdateTasksInput(context.queryResultSettings, updateTasks);
    return executeAction(request, context);
}
//# sourceMappingURL=ChecklistsDataActions.g.js.map