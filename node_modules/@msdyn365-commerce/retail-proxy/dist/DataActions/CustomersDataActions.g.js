import { DataServiceQuery } from '../DataServiceQuery';
import { CustomerClass, GlobalCustomerClass, CustomerTimelineItemClass, SalesOrderClass, OrderShipmentsClass, PurchaseHistoryClass, CustomerSearchFieldClass, CustomerTimelineItemTypeMapClass, CustomerTimelineRefinerClass, CustomerTitleClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function customersQuery(accountNumber) {
    // Temp fix to return '' instead of null. Requires manual update until TSProxy generator updated
    var key = (accountNumber !== null && accountNumber !== undefined) ? { AccountNumber: accountNumber } : null;
    return new DataServiceQuery("Customers", "Customer", CustomerClass, key);
}
export function createCreateInput(entity) {
    return customersQuery().create(entity);
}
export function createCustomerAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return customersQuery(entity.AccountNumber).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return customersQuery(entity.AccountNumber).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(accountNumber) {
    return customersQuery(accountNumber).read();
}
export function readAsync(context, accountNumber) {
    const request = createReadAsync(accountNumber);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return customersQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSearchInput(queryResultSettings, customerSearchCriteria) {
    const query = customersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Search', true, GlobalCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'GlobalCustomer' }, { customerSearchCriteria: customerSearchCriteria });
}
export function searchAsync(context, customerSearchCriteria) {
    const request = createSearchInput(context.queryResultSettings, customerSearchCriteria);
    return executeAction(request, context);
}
export function createSearchByFieldsInput(queryResultSettings, customerSearchByFieldCriteria) {
    const query = customersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchByFields', true, GlobalCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'GlobalCustomer' }, { CustomerSearchByFieldCriteria: customerSearchByFieldCriteria });
}
export function searchByFieldsAsync(context, customerSearchByFieldCriteria) {
    const request = createSearchByFieldsInput(context.queryResultSettings, customerSearchByFieldCriteria);
    return executeAction(request, context);
}
export function createGetByAccountNumbersInput(queryResultSettings, accountNumbers, searchLocationValue) {
    const query = customersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetByAccountNumbers', true, CustomerClass, 'true', { bypassCache: 'none', returnEntity: 'Customer' }, { accountNumbers: accountNumbers, searchLocationValue: searchLocationValue });
}
export function getByAccountNumbersAsync(context, accountNumbers, searchLocationValue) {
    const request = createGetByAccountNumbersInput(context.queryResultSettings, accountNumbers, searchLocationValue);
    return executeAction(request, context);
}
export function createCreateCustomerTimelineItemInput(customerTimelineItem) {
    const query = customersQuery();
    return query.createDataServiceRequestForOperation('CreateCustomerTimelineItem', true, CustomerTimelineItemClass, 'false', { bypassCache: 'get', returnEntity: 'CustomerTimelineItem' }, { customerTimelineItem: customerTimelineItem });
}
export function createCustomerTimelineItemAsync(context, customerTimelineItem) {
    const request = createCreateCustomerTimelineItemInput(customerTimelineItem);
    return executeAction(request, context);
}
export function createUpdateCustomerTimelineItemInput(customerTimelineItem) {
    const query = customersQuery();
    return query.createDataServiceRequestForOperation('UpdateCustomerTimelineItem', true, CustomerTimelineItemClass, 'false', { bypassCache: 'get', returnEntity: 'CustomerTimelineItem' }, { customerTimelineItem: customerTimelineItem });
}
export function updateCustomerTimelineItemAsync(context, customerTimelineItem) {
    const request = createUpdateCustomerTimelineItemInput(customerTimelineItem);
    return executeAction(request, context);
}
export function createGetOrderHistoryInput(queryResultSettings, accountNumber) {
    const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetOrderHistory', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder' }, {});
}
export function getOrderHistoryAsync(context, accountNumber) {
    const request = createGetOrderHistoryInput(context.queryResultSettings, accountNumber);
    return executeAction(request, context);
}
export function createGetOrderShipmentsHistoryInput(queryResultSettings, accountNumber) {
    const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetOrderShipmentsHistory', true, OrderShipmentsClass, 'true', { bypassCache: 'none', returnEntity: 'OrderShipments' }, {});
}
export function getOrderShipmentsHistoryAsync(context, accountNumber) {
    const request = createGetOrderShipmentsHistoryInput(context.queryResultSettings, accountNumber);
    return executeAction(request, context);
}
export function createPostNonTransactionalActivityLoyaltyPointsInput(loyaltyCardId, channelId, affiliationId, activityTypeId) {
    const query = customersQuery();
    return query.createDataServiceRequestForOperation('PostNonTransactionalActivityLoyaltyPoints', true, '', '', { bypassCache: 'get', returnEntity: '' }, { loyaltyCardId: loyaltyCardId, channelId: channelId, affiliationId: affiliationId, activityTypeId: activityTypeId });
}
export function postNonTransactionalActivityLoyaltyPointsAsync(context, loyaltyCardId, channelId, affiliationId, activityTypeId) {
    const request = createPostNonTransactionalActivityLoyaltyPointsInput(loyaltyCardId, channelId, affiliationId, activityTypeId);
    return executeAction(request, context);
}
export function createGetPurchaseHistoryInput(queryResultSettings, accountNumber) {
    const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetPurchaseHistory', false, PurchaseHistoryClass, 'true', { bypassCache: 'none', returnEntity: 'PurchaseHistory' }, {});
}
export function getPurchaseHistoryAsync(context, accountNumber) {
    const request = createGetPurchaseHistoryInput(context.queryResultSettings, accountNumber);
    return executeAction(request, context);
}
export function createGetCustomerSearchFieldsInput(queryResultSettings) {
    const query = customersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCustomerSearchFields', false, CustomerSearchFieldClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerSearchField' }, {});
}
export function getCustomerSearchFieldsAsync(context) {
    const request = createGetCustomerSearchFieldsInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCustomerTimelineItemTypesInput(queryResultSettings) {
    const query = customersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCustomerTimelineItemTypes', false, CustomerTimelineItemTypeMapClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineItemTypeMap' }, {});
}
export function getCustomerTimelineItemTypesAsync(context) {
    const request = createGetCustomerTimelineItemTypesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetCustomerTimelineItemsInput(queryResultSettings, accountNumber) {
    const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCustomerTimelineItems', false, CustomerTimelineItemClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineItem' }, {});
}
export function getCustomerTimelineItemsAsync(context, accountNumber) {
    const request = createGetCustomerTimelineItemsInput(context.queryResultSettings, accountNumber);
    return executeAction(request, context);
}
export function createGetCustomerTimelineRefinersInput(queryResultSettings, accountNumber) {
    const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetCustomerTimelineRefiners', false, CustomerTimelineRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineRefiner' }, {});
}
export function getCustomerTimelineRefinersAsync(context, accountNumber) {
    const request = createGetCustomerTimelineRefinersInput(context.queryResultSettings, accountNumber);
    return executeAction(request, context);
}
export function createGetTitlesInput(queryResultSettings) {
    const query = customersQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetTitles', false, CustomerTitleClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTitle' }, {});
}
export function getTitlesAsync(context) {
    const request = createGetTitlesInput(context.queryResultSettings);
    return executeAction(request, context);
}
//# sourceMappingURL=CustomersDataActions.g.js.map