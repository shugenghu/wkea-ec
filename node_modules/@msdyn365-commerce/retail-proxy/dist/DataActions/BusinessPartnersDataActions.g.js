import { DataServiceQuery } from '../DataServiceQuery';
import { BusinessPartnerClass, BusinessPartnerProspectClass, BusinessPartnerUserClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function businessPartnersQuery(businessPartnerId) {
    var key = (businessPartnerId) ? { BusinessPartnerId: businessPartnerId } : null;
    return new DataServiceQuery("BusinessPartners", "BusinessPartner", BusinessPartnerClass, key);
}
export function createCreateInput(entity) {
    return businessPartnersQuery().create(entity);
}
export function createBusinessPartnerAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return businessPartnersQuery(entity.BusinessPartnerId).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return businessPartnersQuery(entity.BusinessPartnerId).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(businessPartnerId) {
    return businessPartnersQuery(businessPartnerId).read();
}
export function readAsync(context, businessPartnerId) {
    const request = createReadAsync(businessPartnerId);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return businessPartnersQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createCreateProspectInput(businessPartnerProspect) {
    const query = businessPartnersQuery();
    return query.createDataServiceRequestForOperation('CreateProspect', true, BusinessPartnerProspectClass, 'false', { bypassCache: 'get', returnEntity: 'BusinessPartnerProspect' }, { businessPartnerProspect: businessPartnerProspect });
}
export function createProspectAsync(context, businessPartnerProspect) {
    const request = createCreateProspectInput(businessPartnerProspect);
    return executeAction(request, context);
}
export function createGetCurrentInput() {
    const query = businessPartnersQuery();
    return query.createDataServiceRequestForOperation('GetCurrent', false, BusinessPartnerClass, 'false', { bypassCache: 'none', returnEntity: 'BusinessPartner' }, {});
}
export function getCurrentAsync(context) {
    const request = createGetCurrentInput();
    return executeAction(request, context);
}
export function createGetUsersInput(queryResultSettings, businessPartnerId) {
    const query = businessPartnersQuery(businessPartnerId).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetUsers', false, BusinessPartnerUserClass, 'true', { bypassCache: 'none', returnEntity: 'BusinessPartnerUser' }, {});
}
export function getUsersAsync(context, businessPartnerId) {
    const request = createGetUsersInput(context.queryResultSettings, businessPartnerId);
    return executeAction(request, context);
}
//# sourceMappingURL=BusinessPartnersDataActions.g.js.map