import { DataServiceQuery } from '../DataServiceQuery';
import { BusinessPartnerUserClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function businessPartnerUsersQuery(email) {
    var key = (email) ? { Email: email } : null;
    return new DataServiceQuery("BusinessPartnerUsers", "BusinessPartnerUser", BusinessPartnerUserClass, key);
}
export function createCreateInput(entity) {
    return businessPartnerUsersQuery().create(entity);
}
export function createBusinessPartnerUserAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return businessPartnerUsersQuery(entity.Email).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return businessPartnerUsersQuery(entity.Email).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(email) {
    return businessPartnerUsersQuery(email).read();
}
export function readAsync(context, email) {
    const request = createReadAsync(email);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return businessPartnerUsersQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
//# sourceMappingURL=BusinessPartnerUsersDataActions.g.js.map