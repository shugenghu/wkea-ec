import { DataServiceQuery } from '../DataServiceQuery';
import { CartClass, SalesOrderClass, LoyaltyPointRedemptionEstimateClass, TenderLineClass, SalesLineDeliveryOptionClass, CartDeliveryPreferencesClass, DeliveryOptionClass, TenderDiscountLineClass, ReceiptClass, CardPaymentAcceptPointClass, CardPaymentAcceptResultClass, CartPromotionsClass, CartPromotionLineClass, ChargeCodeClass, TenderTypeAmountClass, CartLineValidationResultsClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function cartsQuery(id) {
    var key = (id) ? { Id: id } : null;
    return new DataServiceQuery("Carts", "Cart", CartClass, key);
}
export function createCreateInput(entity) {
    return cartsQuery().create(entity);
}
export function createCartAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return cartsQuery(entity.Id).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return cartsQuery(entity.Id).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(id) {
    return cartsQuery(id).read();
}
export function readAsync(context, id) {
    const request = createReadAsync(id);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return cartsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createCheckoutInput(id, receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('Checkout', true, SalesOrderClass, 'false', { bypassCache: 'get', returnEntity: 'SalesOrder' }, { receiptEmail: receiptEmail, tokenizedPaymentCard: tokenizedPaymentCard, receiptNumberSequence: receiptNumberSequence, cartTenderLines: cartTenderLines, cartVersion: cartVersion });
}
export function checkoutAsync(context, id, receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion) {
    const request = createCheckoutInput(id, receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion);
    return executeAction(request, context);
}
export function createGetMaxLoyaltyPointsToRedeemForTransactionBalanceInput(id, loyaltyCardId, currencyCode) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('GetMaxLoyaltyPointsToRedeemForTransactionBalance', true, LoyaltyPointRedemptionEstimateClass, 'false', { bypassCache: 'none', returnEntity: 'LoyaltyPointRedemptionEstimate' }, { loyaltyCardId: loyaltyCardId, currencyCode: currencyCode });
}
export function getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(context, id, loyaltyCardId, currencyCode) {
    const request = createGetMaxLoyaltyPointsToRedeemForTransactionBalanceInput(id, loyaltyCardId, currencyCode);
    return executeAction(request, context);
}
export function createGetPaymentsHistoryInput(queryResultSettings, id) {
    const query = cartsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetPaymentsHistory', true, TenderLineClass, 'true', { bypassCache: 'none', returnEntity: 'TenderLine' }, {});
}
export function getPaymentsHistoryAsync(context, id) {
    const request = createGetPaymentsHistoryInput(context.queryResultSettings, id);
    return executeAction(request, context);
}
export function createGetLineDeliveryOptionsByChannelIdInput(queryResultSettings, id, lineShippingAddresses, channelId) {
    const query = cartsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLineDeliveryOptionsByChannelId', true, SalesLineDeliveryOptionClass, 'true', { bypassCache: 'none', returnEntity: 'SalesLineDeliveryOption' }, { lineShippingAddresses: lineShippingAddresses, channelId: channelId });
}
export function getLineDeliveryOptionsByChannelIdAsync(context, id, lineShippingAddresses, channelId) {
    const request = createGetLineDeliveryOptionsByChannelIdInput(context.queryResultSettings, id, lineShippingAddresses, channelId);
    return executeAction(request, context);
}
export function createGetLineDeliveryOptionsInput(queryResultSettings, id, lineShippingAddresses, filterOption) {
    const query = cartsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLineDeliveryOptions', true, SalesLineDeliveryOptionClass, 'true', { bypassCache: 'none', returnEntity: 'SalesLineDeliveryOption' }, { lineShippingAddresses: lineShippingAddresses, filterOption: filterOption });
}
export function getLineDeliveryOptionsAsync(context, id, lineShippingAddresses, filterOption) {
    const request = createGetLineDeliveryOptionsInput(context.queryResultSettings, id, lineShippingAddresses, filterOption);
    return executeAction(request, context);
}
export function createGetDeliveryPreferencesInput(id) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('GetDeliveryPreferences', true, CartDeliveryPreferencesClass, 'false', { bypassCache: 'none', returnEntity: 'CartDeliveryPreferences' }, {});
}
export function getDeliveryPreferencesAsync(context, id) {
    const request = createGetDeliveryPreferencesInput(id);
    return executeAction(request, context);
}
export function createGetDeliveryOptionsInput(queryResultSettings, id, shippingAddress, cartLineIds, filterOption) {
    const query = cartsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDeliveryOptions', true, DeliveryOptionClass, 'true', { bypassCache: 'none', returnEntity: 'DeliveryOption' }, { shippingAddress: shippingAddress, cartLineIds: cartLineIds, filterOption: filterOption });
}
export function getDeliveryOptionsAsync(context, id, shippingAddress, cartLineIds, filterOption) {
    const request = createGetDeliveryOptionsInput(context.queryResultSettings, id, shippingAddress, cartLineIds, filterOption);
    return executeAction(request, context);
}
export function createUpdateLineDeliverySpecificationsInput(id, lineDeliverySpecifications) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('UpdateLineDeliverySpecifications', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { lineDeliverySpecifications: lineDeliverySpecifications });
}
export function updateLineDeliverySpecificationsAsync(context, id, lineDeliverySpecifications) {
    const request = createUpdateLineDeliverySpecificationsInput(id, lineDeliverySpecifications);
    return executeAction(request, context);
}
export function createUpdateDeliverySpecificationInput(id, deliverySpecification) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('UpdateDeliverySpecification', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { deliverySpecification: deliverySpecification });
}
export function updateDeliverySpecificationAsync(context, id, deliverySpecification) {
    const request = createUpdateDeliverySpecificationInput(id, deliverySpecification);
    return executeAction(request, context);
}
export function createAddChargeInput(id, moduleTypeValue, chargeCode, amount) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddCharge', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { moduleTypeValue: moduleTypeValue, chargeCode: chargeCode, amount: amount });
}
export function addChargeAsync(context, id, moduleTypeValue, chargeCode, amount) {
    const request = createAddChargeInput(id, moduleTypeValue, chargeCode, amount);
    return executeAction(request, context);
}
export function createOverrideChargeInput(id, chargeLineId, amount, reasonCodeLines) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('OverrideCharge', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { chargeLineId: chargeLineId, amount: amount, reasonCodeLines: reasonCodeLines });
}
export function overrideChargeAsync(context, id, chargeLineId, amount, reasonCodeLines) {
    const request = createOverrideChargeInput(id, chargeLineId, amount, reasonCodeLines);
    return executeAction(request, context);
}
export function createAddCartLineChargeInput(id, cartLineId, moduleTypeValue, chargeCode, amount) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddCartLineCharge', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { cartLineId: cartLineId, moduleTypeValue: moduleTypeValue, chargeCode: chargeCode, amount: amount });
}
export function addCartLineChargeAsync(context, id, cartLineId, moduleTypeValue, chargeCode, amount) {
    const request = createAddCartLineChargeInput(id, cartLineId, moduleTypeValue, chargeCode, amount);
    return executeAction(request, context);
}
export function createOverrideCartLineChargeInput(id, cartLineId, chargeLineId, amount, reasonCodeLines) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('OverrideCartLineCharge', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { cartLineId: cartLineId, chargeLineId: chargeLineId, amount: amount, reasonCodeLines: reasonCodeLines });
}
export function overrideCartLineChargeAsync(context, id, cartLineId, chargeLineId, amount, reasonCodeLines) {
    const request = createOverrideCartLineChargeInput(id, cartLineId, chargeLineId, amount, reasonCodeLines);
    return executeAction(request, context);
}
export function createVoidInput(id, reasonCodeLines, cartVersion) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('Void', true, SalesOrderClass, 'false', { bypassCache: 'get', returnEntity: 'SalesOrder' }, { reasonCodeLines: reasonCodeLines, cartVersion: cartVersion });
}
export function voidAsync(context, id, reasonCodeLines, cartVersion) {
    const request = createVoidInput(id, reasonCodeLines, cartVersion);
    return executeAction(request, context);
}
export function createAddCartLinesInput(id, cartLines, cartVersion) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddCartLines', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { cartLines: cartLines, cartVersion: cartVersion });
}
export function addCartLinesAsync(context, id, cartLines, cartVersion) {
    const request = createAddCartLinesInput(id, cartLines, cartVersion);
    return executeAction(request, context);
}
export function createUpdateCartLinesInput(id, cartLines, cartVersion) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('UpdateCartLines', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { cartLines: cartLines, cartVersion: cartVersion });
}
export function updateCartLinesAsync(context, id, cartLines, cartVersion) {
    const request = createUpdateCartLinesInput(id, cartLines, cartVersion);
    return executeAction(request, context);
}
export function createVoidCartLinesInput(id, cartLines) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('VoidCartLines', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { cartLines: cartLines });
}
export function voidCartLinesAsync(context, id, cartLines) {
    const request = createVoidCartLinesInput(id, cartLines);
    return executeAction(request, context);
}
export function createRemoveCartLinesInput(id, cartLineIds) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('RemoveCartLines', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { cartLineIds: cartLineIds });
}
export function removeCartLinesAsync(context, id, cartLineIds) {
    const request = createRemoveCartLinesInput(id, cartLineIds);
    return executeAction(request, context);
}
export function createAddTenderLineInput(id, cartTenderLine, cartVersion) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddTenderLine', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { cartTenderLine: cartTenderLine, cartVersion: cartVersion });
}
export function addTenderLineAsync(context, id, cartTenderLine, cartVersion) {
    const request = createAddTenderLineInput(id, cartTenderLine, cartVersion);
    return executeAction(request, context);
}
export function createCalculateTenderDiscountInput(id, tenderLine, cartVersion) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('CalculateTenderDiscount', true, TenderDiscountLineClass, 'false', { bypassCache: 'get', returnEntity: 'TenderDiscountLine' }, { tenderLine: tenderLine, cartVersion: cartVersion });
}
export function calculateTenderDiscountAsync(context, id, tenderLine, cartVersion) {
    const request = createCalculateTenderDiscountInput(id, tenderLine, cartVersion);
    return executeAction(request, context);
}
export function createAddPreprocessedTenderLineInput(id, preprocessedTenderLine, cartVersion) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddPreprocessedTenderLine', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { preprocessedTenderLine: preprocessedTenderLine, cartVersion: cartVersion });
}
export function addPreprocessedTenderLineAsync(context, id, preprocessedTenderLine, cartVersion) {
    const request = createAddPreprocessedTenderLineInput(id, preprocessedTenderLine, cartVersion);
    return executeAction(request, context);
}
export function createValidateTenderLineForAddInput(id, tenderLine) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('ValidateTenderLineForAdd', true, '', '', { bypassCache: 'get', returnEntity: '' }, { tenderLine: tenderLine });
}
export function validateTenderLineForAddAsync(context, id, tenderLine) {
    const request = createValidateTenderLineForAddInput(id, tenderLine);
    return executeAction(request, context);
}
export function createUpdateTenderLineSignatureInput(id, tenderLineId, signatureData) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('UpdateTenderLineSignature', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { tenderLineId: tenderLineId, signatureData: signatureData });
}
export function updateTenderLineSignatureAsync(context, id, tenderLineId, signatureData) {
    const request = createUpdateTenderLineSignatureInput(id, tenderLineId, signatureData);
    return executeAction(request, context);
}
export function createGetDeclinedOrVoidedCardReceiptsInput(queryResultSettings, id, preprocessedTenderLine, receiptRetrievalCriteria) {
    const query = cartsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetDeclinedOrVoidedCardReceipts', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt' }, { preprocessedTenderLine: preprocessedTenderLine, receiptRetrievalCriteria: receiptRetrievalCriteria });
}
export function getDeclinedOrVoidedCardReceiptsAsync(context, id, preprocessedTenderLine, receiptRetrievalCriteria) {
    const request = createGetDeclinedOrVoidedCardReceiptsInput(context.queryResultSettings, id, preprocessedTenderLine, receiptRetrievalCriteria);
    return executeAction(request, context);
}
export function createCopyInput(id, targetCartType) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('Copy', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { targetCartType: targetCartType });
}
export function copyAsync(context, id, targetCartType) {
    const request = createCopyInput(id, targetCartType);
    return executeAction(request, context);
}
export function createAddInvoicedSalesLinesToCartInput(transactionId, invoicedSalesLinesIds) {
    const query = cartsQuery();
    return query.createDataServiceRequestForOperation('AddInvoicedSalesLinesToCart', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { transactionId: transactionId, invoicedSalesLinesIds: invoicedSalesLinesIds });
}
export function addInvoicedSalesLinesToCartAsync(context, transactionId, invoicedSalesLinesIds) {
    const request = createAddInvoicedSalesLinesToCartInput(transactionId, invoicedSalesLinesIds);
    return executeAction(request, context);
}
export function createVoidTenderLineInput(id, tenderLineId, reasonCodeLines, isPreprocessed, forceVoid) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('VoidTenderLine', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { tenderLineId: tenderLineId, reasonCodeLines: reasonCodeLines, isPreprocessed: isPreprocessed, forceVoid: forceVoid });
}
export function voidTenderLineAsync(context, id, tenderLineId, reasonCodeLines, isPreprocessed, forceVoid) {
    const request = createVoidTenderLineInput(id, tenderLineId, reasonCodeLines, isPreprocessed, forceVoid);
    return executeAction(request, context);
}
export function createIssueGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('IssueGiftCard', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription, tenderTypeId: tenderTypeId });
}
export function issueGiftCardAsync(context, id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId) {
    const request = createIssueGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId);
    return executeAction(request, context);
}
export function createRefillGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('RefillGiftCard', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription, tenderTypeId: tenderTypeId });
}
export function refillGiftCardAsync(context, id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId) {
    const request = createRefillGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId);
    return executeAction(request, context);
}
export function createCashOutGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('CashOutGiftCard', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription, tenderTypeId: tenderTypeId });
}
export function cashOutGiftCardAsync(context, id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId) {
    const request = createCashOutGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId);
    return executeAction(request, context);
}
export function createSuspendInput(id) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('Suspend', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, {});
}
export function suspendAsync(context, id) {
    const request = createSuspendInput(id);
    return executeAction(request, context);
}
export function createSuspendWithJournalInput(id, journalCartId, receiptNumberSequence) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('SuspendWithJournal', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { journalCartId: journalCartId, receiptNumberSequence: receiptNumberSequence });
}
export function suspendWithJournalAsync(context, id, journalCartId, receiptNumberSequence) {
    const request = createSuspendWithJournalInput(id, journalCartId, receiptNumberSequence);
    return executeAction(request, context);
}
export function createResumeInput(id) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('Resume', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, {});
}
export function resumeAsync(context, id) {
    const request = createResumeInput(id);
    return executeAction(request, context);
}
export function createResumeFromReceiptIdInput(receiptId) {
    const query = cartsQuery();
    return query.createDataServiceRequestForOperation('ResumeFromReceiptId', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { receiptId: receiptId });
}
export function resumeFromReceiptIdAsync(context, receiptId) {
    const request = createResumeFromReceiptIdInput(receiptId);
    return executeAction(request, context);
}
export function createRemoveDiscountCodesInput(id, discountCodes) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('RemoveDiscountCodes', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { discountCodes: discountCodes });
}
export function removeDiscountCodesAsync(context, id, discountCodes) {
    const request = createRemoveDiscountCodesInput(id, discountCodes);
    return executeAction(request, context);
}
export function createGetSuspendedInput(queryResultSettings) {
    const query = cartsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetSuspended', true, CartClass, 'true', { bypassCache: 'none', returnEntity: 'Cart' }, {});
}
export function getSuspendedAsync(context) {
    const request = createGetSuspendedInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSearchInput(queryResultSettings, cartSearchCriteria) {
    const query = cartsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Search', true, CartClass, 'true', { bypassCache: 'none', returnEntity: 'Cart' }, { cartSearchCriteria: cartSearchCriteria });
}
export function searchAsync(context, cartSearchCriteria) {
    const request = createSearchInput(context.queryResultSettings, cartSearchCriteria);
    return executeAction(request, context);
}
export function createOverrideCartLinePriceInput(id, cartLineId, price) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('OverrideCartLinePrice', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { cartLineId: cartLineId, price: price });
}
export function overrideCartLinePriceAsync(context, id, cartLineId, price) {
    const request = createOverrideCartLinePriceInput(id, cartLineId, price);
    return executeAction(request, context);
}
export function createGetCardPaymentAcceptPointInput(id, cardPaymentAcceptSettings, extensionProperties) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('GetCardPaymentAcceptPoint', true, CardPaymentAcceptPointClass, 'false', { bypassCache: 'none', returnEntity: 'CardPaymentAcceptPoint' }, { cardPaymentAcceptSettings: cardPaymentAcceptSettings, extensionProperties: extensionProperties });
}
export function getCardPaymentAcceptPointAsync(context, id, cardPaymentAcceptSettings, extensionProperties) {
    const request = createGetCardPaymentAcceptPointInput(id, cardPaymentAcceptSettings, extensionProperties);
    return executeAction(request, context);
}
export function createRetrieveCardPaymentAcceptResultInput(resultAccessCode, extensionProperties, cartId, settings) {
    const query = cartsQuery();
    return query.createDataServiceRequestForOperation('RetrieveCardPaymentAcceptResult', true, CardPaymentAcceptResultClass, 'false', { bypassCache: 'get', returnEntity: 'CardPaymentAcceptResult' }, { resultAccessCode: resultAccessCode, extensionProperties: extensionProperties, cartId: cartId, settings: settings });
}
export function retrieveCardPaymentAcceptResultAsync(context, resultAccessCode, extensionProperties, cartId, settings) {
    const request = createRetrieveCardPaymentAcceptResultInput(resultAccessCode, extensionProperties, cartId, settings);
    return executeAction(request, context);
}
export function createRecallOrderInput(transactionId, salesId) {
    const query = cartsQuery();
    return query.createDataServiceRequestForOperation('RecallOrder', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { transactionId: transactionId, salesId: salesId });
}
export function recallOrderAsync(context, transactionId, salesId) {
    const request = createRecallOrderInput(transactionId, salesId);
    return executeAction(request, context);
}
export function createRecallQuoteInput(transactionId, quoteId) {
    const query = cartsQuery();
    return query.createDataServiceRequestForOperation('RecallQuote', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { transactionId: transactionId, quoteId: quoteId });
}
export function recallQuoteAsync(context, transactionId, quoteId) {
    const request = createRecallQuoteInput(transactionId, quoteId);
    return executeAction(request, context);
}
export function createRecalculateOrderInput(id) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('RecalculateOrder', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, {});
}
export function recalculateOrderAsync(context, id) {
    const request = createRecalculateOrderInput(id);
    return executeAction(request, context);
}
export function createResetAllChargesInput(id) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('ResetAllCharges', false, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, {});
}
export function resetAllChargesAsync(context, id) {
    const request = createResetAllChargesInput(id);
    return executeAction(request, context);
}
export function createGetPromotionsInput(id) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('GetPromotions', true, CartPromotionsClass, 'false', { bypassCache: 'none', returnEntity: 'CartPromotions' }, {});
}
export function getPromotionsAsync(context, id) {
    const request = createGetPromotionsInput(id);
    return executeAction(request, context);
}
export function createGetAvailablePromotionsInput(queryResultSettings, id, cartLineIds) {
    const query = cartsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAvailablePromotions', true, CartPromotionLineClass, 'true', { bypassCache: 'none', returnEntity: 'CartPromotionLine' }, { cartLineIds: cartLineIds });
}
export function getAvailablePromotionsAsync(context, id, cartLineIds) {
    const request = createGetAvailablePromotionsInput(context.queryResultSettings, id, cartLineIds);
    return executeAction(request, context);
}
export function createRecallSalesInvoiceInput(transactionId, invoiceId) {
    const query = cartsQuery();
    return query.createDataServiceRequestForOperation('RecallSalesInvoice', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { transactionId: transactionId, invoiceId: invoiceId });
}
export function recallSalesInvoiceAsync(context, transactionId, invoiceId) {
    const request = createRecallSalesInvoiceInput(transactionId, invoiceId);
    return executeAction(request, context);
}
export function createAddOrderInvoiceInput(id, invoiceId, lineDescription) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddOrderInvoice', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { invoiceId: invoiceId, lineDescription: lineDescription });
}
export function addOrderInvoiceAsync(context, id, invoiceId, lineDescription) {
    const request = createAddOrderInvoiceInput(id, invoiceId, lineDescription);
    return executeAction(request, context);
}
export function createAddInvoicesInput(id, invoiceIds) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddInvoices', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { invoiceIds: invoiceIds });
}
export function addInvoicesAsync(context, id, invoiceIds) {
    const request = createAddInvoicesInput(id, invoiceIds);
    return executeAction(request, context);
}
export function createUpdateCommissionSalesGroupInput(transactionId, cartLineId, commissionSalesGroup, isUserInitiated) {
    const query = cartsQuery();
    return query.createDataServiceRequestForOperation('UpdateCommissionSalesGroup', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { transactionId: transactionId, cartLineId: cartLineId, commissionSalesGroup: commissionSalesGroup, isUserInitiated: isUserInitiated });
}
export function updateCommissionSalesGroupAsync(context, transactionId, cartLineId, commissionSalesGroup, isUserInitiated) {
    const request = createUpdateCommissionSalesGroupInput(transactionId, cartLineId, commissionSalesGroup, isUserInitiated);
    return executeAction(request, context);
}
export function createAddCouponsInput(id, couponCodes, isLegacyDiscountCode) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddCoupons', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { couponCodes: couponCodes, isLegacyDiscountCode: isLegacyDiscountCode });
}
export function addCouponsAsync(context, id, couponCodes, isLegacyDiscountCode) {
    const request = createAddCouponsInput(id, couponCodes, isLegacyDiscountCode);
    return executeAction(request, context);
}
export function createRemoveCouponsInput(id, couponCodes) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('RemoveCoupons', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { couponCodes: couponCodes });
}
export function removeCouponsAsync(context, id, couponCodes) {
    const request = createRemoveCouponsInput(id, couponCodes);
    return executeAction(request, context);
}
export function createGetChargeCodesInput(queryResultSettings) {
    const query = cartsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetChargeCodes', false, ChargeCodeClass, 'true', { bypassCache: 'none', returnEntity: 'ChargeCode' }, {});
}
export function getChargeCodesAsync(context) {
    const request = createGetChargeCodesInput(context.queryResultSettings);
    return executeAction(request, context);
}
export function createAddDiscountCodeInput(id, discountCode) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('AddDiscountCode', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart' }, { discountCode: discountCode });
}
export function addDiscountCodeAsync(context, id, discountCode) {
    const request = createAddDiscountCodeInput(id, discountCode);
    return executeAction(request, context);
}
export function createGetReturnOptionsInput(queryResultSettings, id) {
    const query = cartsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetReturnOptions', false, TenderTypeAmountClass, 'true', { bypassCache: 'none', returnEntity: 'TenderTypeAmount' }, {});
}
export function getReturnOptionsAsync(context, id) {
    const request = createGetReturnOptionsInput(context.queryResultSettings, id);
    return executeAction(request, context);
}
export function createValidateForCheckoutInput(id, cartVersion) {
    const query = cartsQuery(id);
    return query.createDataServiceRequestForOperation('ValidateForCheckout', false, CartLineValidationResultsClass, 'false', { bypassCache: 'get', returnEntity: 'CartLineValidationResults' }, { cartVersion: cartVersion });
}
export function validateForCheckoutAsync(context, id, cartVersion) {
    const request = createValidateForCheckoutInput(id, cartVersion);
    return executeAction(request, context);
}
//# sourceMappingURL=CartsDataActions.g.js.map