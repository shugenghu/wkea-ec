import { AsyncResult } from '../async-result';
import { Product, ProductDimension, ProductVariantResolutionOnKitSelectionContext, ProductDimensionValue, SimpleProduct, ComponentInSlotRelation, ProductComparisonLine, ProductSearchResult, ProductRefinerValue, ProductSearchCriteria, ProductRefiner, ChangedProductsSearchCriteria, ReadChangedProductsSession, DeletedListingsResult, ProductRating, ProductAssortmentInterval, Address, ProductDeliveryOptions, ListingPublishStatus, ProductPrice, ProductAvailableQuantity, ProjectionDomain, AffiliationLoyaltyTier, ProductComponent, CategoryPathLookup, CategoryPathResult, ProductLookupClause, SearchSuggestion, AttributeProduct, AttributeValue, MediaLocation, MediaBlob, ProductRelationType, UnitOfMeasure, ProductWarrantiesMapping, ProductWarehouse, ProductWarehouseInventoryInformation, InventoryAvailabilitySearchCriteria } from '../Entities/CommerceTypes.g';
import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
export declare function createCreateInput(entity: Product): IDataServiceRequest;
export declare function createProductAsync(context: IContext, entity: Product): AsyncResult<Product>;
export declare function createUpdateInput(entity: Product): IDataServiceRequest;
export declare function updateAsync(context: IContext, entity: Product): AsyncResult<Product>;
export declare function createDeleteAsync(entity: Product): IDataServiceRequest;
export declare function deleteAsync(context: IContext, entity: Product): AsyncResult<NullResult>;
export declare function createReadAsync(recordId: number): IDataServiceRequest;
export declare function readAsync(context: IContext, recordId: number): AsyncResult<Product>;
export declare function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function readAllAsync(context: IContext): AsyncResult<Product[]>;
export declare function createGetDimensionValuesInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, dimension: number, matchingDimensionValues: ProductDimension[] | null, kitVariantResolutionContext: ProductVariantResolutionOnKitSelectionContext | null): IDataServiceRequest;
export declare function getDimensionValuesAsync(context: IContext, recordId: number, channelId: number, dimension: number, matchingDimensionValues: ProductDimension[] | null, kitVariantResolutionContext: ProductVariantResolutionOnKitSelectionContext | null): AsyncResult<ProductDimensionValue[]>;
export declare function createGetVariantsByDimensionValuesInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, matchingDimensionValues: ProductDimension[] | null): IDataServiceRequest;
export declare function getVariantsByDimensionValuesAsync(context: IContext, recordId: number, channelId: number, matchingDimensionValues: ProductDimension[] | null): AsyncResult<SimpleProduct[]>;
export declare function createGetVariantsByComponentsInSlotsInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, matchingSlotToComponentRelationship: ComponentInSlotRelation[] | null): IDataServiceRequest;
export declare function getVariantsByComponentsInSlotsAsync(context: IContext, recordId: number, channelId: number, matchingSlotToComponentRelationship: ComponentInSlotRelation[] | null): AsyncResult<SimpleProduct[]>;
export declare function createGetByIdsInput(queryResultSettings: IQueryResultSettings, channelId: number, productIds: number[]): IDataServiceRequest;
export declare function getByIdsAsync(context: IContext, channelId: number, productIds: number[]): AsyncResult<SimpleProduct[]>;
export declare function createCompareInput(queryResultSettings: IQueryResultSettings, channelId: number, catalogId: number, productIds: number[]): IDataServiceRequest;
export declare function compareAsync(context: IContext, channelId: number, catalogId: number, productIds: number[]): AsyncResult<ProductComparisonLine[]>;
export declare function createGetRecommendedProductsInput(queryResultSettings: IQueryResultSettings, productIds: number[], customerId: string | null): IDataServiceRequest;
export declare function getRecommendedProductsAsync(context: IContext, productIds: number[], customerId: string | null): AsyncResult<ProductSearchResult[]>;
export declare function createRefineSearchByCategoryInput(queryResultSettings: IQueryResultSettings, channelId: number, catalogId: number, categoryId: number, refinementCriteria: ProductRefinerValue[] | null): IDataServiceRequest;
export declare function refineSearchByCategoryAsync(context: IContext, channelId: number, catalogId: number, categoryId: number, refinementCriteria: ProductRefinerValue[] | null): AsyncResult<ProductSearchResult[]>;
export declare function createRefineSearchByTextInput(queryResultSettings: IQueryResultSettings, channelId: number, catalogId: number, searchText: string | null, refinementCriteria: ProductRefinerValue[] | null): IDataServiceRequest;
export declare function refineSearchByTextAsync(context: IContext, channelId: number, catalogId: number, searchText: string | null, refinementCriteria: ProductRefinerValue[] | null): AsyncResult<ProductSearchResult[]>;
export declare function createGetProductSearchRefinersInput(queryResultSettings: IQueryResultSettings, searchCriteria: ProductSearchCriteria | null): IDataServiceRequest;
export declare function getProductSearchRefinersAsync(context: IContext, searchCriteria: ProductSearchCriteria | null): AsyncResult<ProductRefiner[]>;
export declare function createSearchInput(queryResultSettings: IQueryResultSettings, productSearchCriteria: ProductSearchCriteria | null): IDataServiceRequest;
export declare function searchAsync(context: IContext, productSearchCriteria: ProductSearchCriteria | null): AsyncResult<Product[]>;
export declare function createGetRefinersInput(queryResultSettings: IQueryResultSettings, productSearchCriteria: ProductSearchCriteria | null): IDataServiceRequest;
export declare function getRefinersAsync(context: IContext, productSearchCriteria: ProductSearchCriteria | null): AsyncResult<ProductRefiner[]>;
export declare function createChangesInput(queryResultSettings: IQueryResultSettings, productSearchCriteria: ChangedProductsSearchCriteria | null): IDataServiceRequest;
export declare function changesAsync(context: IContext, productSearchCriteria: ChangedProductsSearchCriteria | null): AsyncResult<Product[]>;
export declare function createBeginReadChangedProductsInput(changedProductSearchCriteria: ChangedProductsSearchCriteria | null): IDataServiceRequest;
export declare function beginReadChangedProductsAsync(context: IContext, changedProductSearchCriteria: ChangedProductsSearchCriteria | null): AsyncResult<ReadChangedProductsSession>;
export declare function createReadChangedProductsInput(queryResultSettings: IQueryResultSettings, productSearchCriteria: ChangedProductsSearchCriteria | null): IDataServiceRequest;
export declare function readChangedProductsAsync(context: IContext, productSearchCriteria: ChangedProductsSearchCriteria | null): AsyncResult<Product[]>;
export declare function createGetDeletedListingsInput(catalogId: number, skip: number, top: number): IDataServiceRequest;
export declare function getDeletedListingsAsync(context: IContext, catalogId: number, skip: number, top: number): AsyncResult<DeletedListingsResult>;
export declare function createGetDeletedCatalogsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getDeletedCatalogsAsync(context: IContext): AsyncResult<number[]>;
export declare function createGetDeletedLanguagesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getDeletedLanguagesAsync(context: IContext): AsyncResult<string[]>;
export declare function createGetProductRatingsInput(queryResultSettings: IQueryResultSettings, productIds: number[]): IDataServiceRequest;
export declare function getProductRatingsAsync(context: IContext, productIds: number[]): AsyncResult<ProductRating[]>;
export declare function createGetProductAssortmentIntervalsInput(queryResultSettings: IQueryResultSettings, productIds: number[]): IDataServiceRequest;
export declare function getProductAssortmentIntervalsAsync(context: IContext, productIds: number[]): AsyncResult<ProductAssortmentInterval[]>;
export declare function createGetDeliveryOptionsInput(queryResultSettings: IQueryResultSettings, productIds: number[], address: Address | null, filterOption: number | null): IDataServiceRequest;
export declare function getDeliveryOptionsAsync(context: IContext, productIds: number[], address: Address | null, filterOption: number | null): AsyncResult<ProductDeliveryOptions[]>;
export declare function createDeleteListingsByCatalogsInput(catalogIds: number[]): IDataServiceRequest;
export declare function deleteListingsByCatalogsAsync(context: IContext, catalogIds: number[]): AsyncResult<NullResult>;
export declare function createDeleteListingsByLanguagesInput(languages: string[] | null): IDataServiceRequest;
export declare function deleteListingsByLanguagesAsync(context: IContext, languages: string[] | null): AsyncResult<NullResult>;
export declare function createEndReadChangedProductsInput(session: ReadChangedProductsSession | null): IDataServiceRequest;
export declare function endReadChangedProductsAsync(context: IContext, session: ReadChangedProductsSession | null): AsyncResult<NullResult>;
export declare function createUpdateListingPublishingStatusInput(publishingStatuses: ListingPublishStatus[] | null): IDataServiceRequest;
export declare function updateListingPublishingStatusAsync(context: IContext, publishingStatuses: ListingPublishStatus[] | null): AsyncResult<NullResult>;
export declare function createGetPricesInput(queryResultSettings: IQueryResultSettings, itemId: string | null, inventoryDimensionId: string | null, barcode: string | null, customerAccountNumber: string | null, unitOfMeasureSymbol: string | null, quantity: number): IDataServiceRequest;
export declare function getPricesAsync(context: IContext, itemId: string | null, inventoryDimensionId: string | null, barcode: string | null, customerAccountNumber: string | null, unitOfMeasureSymbol: string | null, quantity: number): AsyncResult<ProductPrice[]>;
export declare function createGetProductAvailabilitiesInput(queryResultSettings: IQueryResultSettings, itemIds: number[], channelId: number): IDataServiceRequest;
export declare function getProductAvailabilitiesAsync(context: IContext, itemIds: number[], channelId: number): AsyncResult<ProductAvailableQuantity[]>;
export declare function createGetActivePricesInput(queryResultSettings: IQueryResultSettings, projectDomain: ProjectionDomain | null, productIds: number[], activeDate: Date, customerId: string | null, affiliationLoyaltyTiers: AffiliationLoyaltyTier[] | null, includeSimpleDiscountsInContextualPrice: boolean | null): IDataServiceRequest;
export declare function getActivePricesAsync(context: IContext, projectDomain: ProjectionDomain | null, productIds: number[], activeDate: Date, customerId: string | null, affiliationLoyaltyTiers: AffiliationLoyaltyTier[] | null, includeSimpleDiscountsInContextualPrice: boolean | null): AsyncResult<ProductPrice[]>;
export declare function createGetFilteredSlotComponentsInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, slotId: number, selectedComponents: ComponentInSlotRelation[] | null): IDataServiceRequest;
export declare function getFilteredSlotComponentsAsync(context: IContext, recordId: number, channelId: number, slotId: number, selectedComponents: ComponentInSlotRelation[] | null): AsyncResult<ProductComponent[]>;
export declare function createGetComponentByProductSlotRelationInput(channelId: number, componentRelation: ComponentInSlotRelation | null): IDataServiceRequest;
export declare function getComponentByProductSlotRelationAsync(context: IContext, channelId: number, componentRelation: ComponentInSlotRelation | null): AsyncResult<ProductComponent>;
export declare function createGetCategoryPathsInput(queryResultSettings: IQueryResultSettings, channelId: number, catalogId: number, categoryPathLookups: CategoryPathLookup[] | null): IDataServiceRequest;
export declare function getCategoryPathsAsync(context: IContext, channelId: number, catalogId: number, categoryPathLookups: CategoryPathLookup[] | null): AsyncResult<CategoryPathResult[]>;
export declare function createSearchByCategoryInput(queryResultSettings: IQueryResultSettings, channelId: number, catalogId: number, categoryId: number): IDataServiceRequest;
export declare function searchByCategoryAsync(context: IContext, channelId: number, catalogId: number, categoryId: number): AsyncResult<ProductSearchResult[]>;
export declare function createSearchByTextInput(queryResultSettings: IQueryResultSettings, channelId: number, catalogId: number, searchText: string | null): IDataServiceRequest;
export declare function searchByTextAsync(context: IContext, channelId: number, catalogId: number, searchText: string | null): AsyncResult<ProductSearchResult[]>;
export declare function createSearchByCriteriaInput(queryResultSettings: IQueryResultSettings, searchCriteria: ProductSearchCriteria | null): IDataServiceRequest;
export declare function searchByCriteriaAsync(context: IContext, searchCriteria: ProductSearchCriteria | null): AsyncResult<ProductSearchResult[]>;
export declare function createGetByLookupClausesInput(queryResultSettings: IQueryResultSettings, channelId: number, productLookupClauses: ProductLookupClause[] | null): IDataServiceRequest;
export declare function getByLookupClausesAsync(context: IContext, channelId: number, productLookupClauses: ProductLookupClause[] | null): AsyncResult<SimpleProduct[]>;
export declare function createGetSearchSuggestionsInput(queryResultSettings: IQueryResultSettings, channelId: number, catalogId: number, searchText: string | null, hitPrefix: string | null, hitSuffix: string | null): IDataServiceRequest;
export declare function getSearchSuggestionsAsync(context: IContext, channelId: number, catalogId: number, searchText: string | null, hitPrefix: string | null, hitSuffix: string | null): AsyncResult<SearchSuggestion[]>;
export declare function createGetRefinersByCategoryInput(queryResultSettings: IQueryResultSettings, catalogId: number, categoryId: number): IDataServiceRequest;
export declare function getRefinersByCategoryAsync(context: IContext, catalogId: number, categoryId: number): AsyncResult<ProductRefiner[]>;
export declare function createGetRefinersByTextInput(queryResultSettings: IQueryResultSettings, catalogId: number, searchText: string | null): IDataServiceRequest;
export declare function getRefinersByTextAsync(context: IContext, catalogId: number, searchText: string | null): AsyncResult<ProductRefiner[]>;
export declare function createGetRefinerValuesByCategoryInput(queryResultSettings: IQueryResultSettings, catalogId: number, categoryId: number, refinerId: number, refinerSourceValue: number): IDataServiceRequest;
export declare function getRefinerValuesByCategoryAsync(context: IContext, catalogId: number, categoryId: number, refinerId: number, refinerSourceValue: number): AsyncResult<ProductRefinerValue[]>;
export declare function createGetRefinerValuesByTextInput(queryResultSettings: IQueryResultSettings, catalogId: number, searchText: string | null, refinerId: number, refinerSourceValue: number): IDataServiceRequest;
export declare function getRefinerValuesByTextAsync(context: IContext, catalogId: number, searchText: string | null, refinerId: number, refinerSourceValue: number): AsyncResult<ProductRefinerValue[]>;
export declare function createGetChannelProductAttributesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getChannelProductAttributesAsync(context: IContext): AsyncResult<AttributeProduct[]>;
export declare function createGetByIdInput(recordId: number, channelId: number): IDataServiceRequest;
export declare function getByIdAsync(context: IContext, recordId: number, channelId: number): AsyncResult<SimpleProduct>;
export declare function createGetAttributeValuesInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, catalogId: number): IDataServiceRequest;
export declare function getAttributeValuesAsync(context: IContext, recordId: number, channelId: number, catalogId: number): AsyncResult<AttributeValue[]>;
export declare function createGetMediaLocationsInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, catalogId: number): IDataServiceRequest;
export declare function getMediaLocationsAsync(context: IContext, recordId: number, channelId: number, catalogId: number): AsyncResult<MediaLocation[]>;
export declare function createGetMediaBlobsInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, catalogId: number): IDataServiceRequest;
export declare function getMediaBlobsAsync(context: IContext, recordId: number, channelId: number, catalogId: number): AsyncResult<MediaBlob[]>;
export declare function createGetDefaultComponentsInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number): IDataServiceRequest;
export declare function getDefaultComponentsAsync(context: IContext, recordId: number, channelId: number): AsyncResult<ProductComponent[]>;
export declare function createGetSlotComponentsInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, slotId: number): IDataServiceRequest;
export declare function getSlotComponentsAsync(context: IContext, recordId: number, channelId: number, slotId: number): AsyncResult<ProductComponent[]>;
export declare function createGetAllRelationTypesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function getAllRelationTypesAsync(context: IContext): AsyncResult<ProductRelationType[]>;
export declare function createGetRelationTypesInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, catalogId: number): IDataServiceRequest;
export declare function getRelationTypesAsync(context: IContext, recordId: number, channelId: number, catalogId: number): AsyncResult<ProductRelationType[]>;
export declare function createGetRelatedProductsInput(queryResultSettings: IQueryResultSettings, recordId: number, channelId: number, catalogId: number, relationTypeId: number): IDataServiceRequest;
export declare function getRelatedProductsAsync(context: IContext, recordId: number, channelId: number, catalogId: number, relationTypeId: number): AsyncResult<ProductSearchResult[]>;
export declare function createGetUnitsOfMeasureInput(queryResultSettings: IQueryResultSettings, recordId: number): IDataServiceRequest;
export declare function getUnitsOfMeasureAsync(context: IContext, recordId: number): AsyncResult<UnitOfMeasure[]>;
export declare function createGetApplicableWarrantiesInput(queryResultSettings: IQueryResultSettings, catalogId: number, warrantableProductIds: number[]): IDataServiceRequest;
export declare function getApplicableWarrantiesAsync(context: IContext, catalogId: number, warrantableProductIds: number[]): AsyncResult<ProductWarrantiesMapping[]>;
export declare function createGetPriceInput(recordId: number, customerAccountNumber: string | null, unitOfMeasureSymbol: string | null): IDataServiceRequest;
export declare function getPriceAsync(context: IContext, recordId: number, customerAccountNumber: string | null, unitOfMeasureSymbol: string | null): AsyncResult<ProductPrice>;
export declare function createCalculateProductPriceInput(recordId: number, customerAccountNumber: string | null, unitOfMeasureSymbol: string | null, loyaltyCardId: string | null, affiliationLoyaltyTiers: AffiliationLoyaltyTier[] | null): IDataServiceRequest;
export declare function calculateProductPriceAsync(context: IContext, recordId: number, customerAccountNumber: string | null, unitOfMeasureSymbol: string | null, loyaltyCardId: string | null, affiliationLoyaltyTiers: AffiliationLoyaltyTier[] | null): AsyncResult<ProductPrice>;
export declare function createGetEstimatedProductWarehouseAvailabilityInput(productWarehouses: ProductWarehouse[] | null): IDataServiceRequest;
export declare function getEstimatedProductWarehouseAvailabilityAsync(context: IContext, productWarehouses: ProductWarehouse[] | null): AsyncResult<ProductWarehouseInventoryInformation>;
export declare function createGetEstimatedAvailabilityInput(searchCriteria: InventoryAvailabilitySearchCriteria | null): IDataServiceRequest;
export declare function getEstimatedAvailabilityAsync(context: IContext, searchCriteria: InventoryAvailabilitySearchCriteria | null): AsyncResult<ProductWarehouseInventoryInformation>;
