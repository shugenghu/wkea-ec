{"version":3,"file":"CategoriesDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/CategoriesDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { Category, AttributeCategory } from '../Entities/CommerceTypes.g';\n    import { CategoryClass, AttributeCategoryClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function categoriesQuery(recordId?: number): DataServiceQuery {\n      var key = (recordId) ? { RecordId: recordId } : null;\n      return new DataServiceQuery(\"Categories\", \"Category\", CategoryClass, key);\n    }\n    \n    export function createCreateInput(entity: Category): IDataServiceRequest {\n        return categoriesQuery().create(entity);\n    }\n    export function createCategoryAsync(context: IContext, entity: Category): AsyncResult<Category> {\n        const request = createCreateInput(entity, );\n        return executeAction<Category>(request, context);\n    }\n    export function createUpdateInput(entity: Category): IDataServiceRequest {\n        return categoriesQuery(entity.RecordId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: Category): AsyncResult<Category> {\n        const request = createUpdateInput(entity, );\n        return executeAction<Category>(request, context);\n    }\n    export function createDeleteAsync(entity: Category): IDataServiceRequest {\n        return categoriesQuery(entity.RecordId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: Category): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(recordId: number): IDataServiceRequest {\n        return categoriesQuery(recordId).read();\n    }\n    export function readAsync(context: IContext, recordId: number): AsyncResult<Category> {\n        const request = createReadAsync(recordId, );\n        return executeAction<Category>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return categoriesQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<Category[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<Category[]>(request, context);\n    }\n    \n    export function createGetCategoriesInput(queryResultSettings: IQueryResultSettings, channelId: number): IDataServiceRequest {      \n        const query = categoriesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetCategories', true, CategoryClass, 'true', { bypassCache: 'none', returnEntity: 'Category'}, {channelId: channelId });\n    }    \n    \n    export function getCategoriesAsync(context: IContext, channelId: number):AsyncResult<Category[]> {\n        const request = createGetCategoriesInput(context.queryResultSettings, channelId, );\n        return executeAction<Category[]>(request, context);\n    }          \n          \n    export function createGetAttributesInput(queryResultSettings: IQueryResultSettings, categoryId: number): IDataServiceRequest {      \n        const query = categoriesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetAttributes', false, AttributeCategoryClass, 'true', { bypassCache: 'none', returnEntity: 'AttributeCategory'}, {categoryId: categoryId });\n    }    \n    \n    export function getAttributesAsync(context: IContext, categoryId: number):AsyncResult<AttributeCategory[]> {\n        const request = createGetAttributesInput(context.queryResultSettings, categoryId, );\n        return executeAction<AttributeCategory[]>(request, context);\n    }          \n          \n    export function createGetChildrenInput(queryResultSettings: IQueryResultSettings, channelId: number, categoryId: number): IDataServiceRequest {      \n        const query = categoriesQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetChildren', true, CategoryClass, 'true', { bypassCache: 'none', returnEntity: 'Category'}, {channelId: channelId, categoryId: categoryId });\n    }    \n    \n    export function getChildrenAsync(context: IContext, channelId: number, categoryId: number):AsyncResult<Category[]> {\n        const request = createGetChildrenInput(context.queryResultSettings, channelId, categoryId, );\n        return executeAction<Category[]>(request, context);\n    }          \n          \n    "]}