import { AsyncResult } from '../async-result';
import { ProductCatalog } from '../Entities/CommerceTypes.g';
import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
export declare function createCreateInput(entity: ProductCatalog): IDataServiceRequest;
export declare function createProductCatalogAsync(context: IContext, entity: ProductCatalog): AsyncResult<ProductCatalog>;
export declare function createUpdateInput(entity: ProductCatalog): IDataServiceRequest;
export declare function updateAsync(context: IContext, entity: ProductCatalog): AsyncResult<ProductCatalog>;
export declare function createDeleteAsync(entity: ProductCatalog): IDataServiceRequest;
export declare function deleteAsync(context: IContext, entity: ProductCatalog): AsyncResult<NullResult>;
export declare function createReadAsync(recordId: number): IDataServiceRequest;
export declare function readAsync(context: IContext, recordId: number): AsyncResult<ProductCatalog>;
export declare function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function readAllAsync(context: IContext): AsyncResult<ProductCatalog[]>;
export declare function createGetCatalogsInput(queryResultSettings: IQueryResultSettings, channelId: number, activeOnly: boolean): IDataServiceRequest;
export declare function getCatalogsAsync(context: IContext, channelId: number, activeOnly: boolean): AsyncResult<ProductCatalog[]>;
