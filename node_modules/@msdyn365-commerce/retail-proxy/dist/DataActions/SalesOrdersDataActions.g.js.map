{"version":3,"file":"SalesOrdersDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/SalesOrdersDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { SalesOrder, SalesOrderSearchCriteria, OrderSearchCriteria, ReceiptRetrievalCriteria, Receipt, SearchReceiptCriteria, ElectronicAddress, ShipFulfillmentLine, FulfillmentLineParameter, FulfillmentLineSearchCriteria, FulfillmentLine, RejectFulfillmentLine, SalesInvoice, OrderInvoice, InvoiceSearchCriteria, SalesLine, PickAndPackSalesLineParameter, PickingList, PackingSlipData } from '../Entities/CommerceTypes.g';\n    import { SalesOrderClass, ReceiptClass, FulfillmentLineClass, SalesInvoiceClass, OrderInvoiceClass, SalesLineClass, PickingListClass, PackingSlipDataClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function salesOrdersQuery(id?: string): DataServiceQuery {\n      var key = (id) ? { Id: id } : null;\n      return new DataServiceQuery(\"SalesOrders\", \"SalesOrder\", SalesOrderClass, key);\n    }\n    \n    export function createCreateInput(entity: SalesOrder): IDataServiceRequest {\n        return salesOrdersQuery().create(entity);\n    }\n    export function createSalesOrderAsync(context: IContext, entity: SalesOrder): AsyncResult<SalesOrder> {\n        const request = createCreateInput(entity, );\n        return executeAction<SalesOrder>(request, context);\n    }\n    export function createUpdateInput(entity: SalesOrder): IDataServiceRequest {\n        return salesOrdersQuery(entity.Id).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: SalesOrder): AsyncResult<SalesOrder> {\n        const request = createUpdateInput(entity, );\n        return executeAction<SalesOrder>(request, context);\n    }\n    export function createDeleteAsync(entity: SalesOrder): IDataServiceRequest {\n        return salesOrdersQuery(entity.Id).delete();\n    }\n    export function deleteAsync(context: IContext, entity: SalesOrder): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(id: string): IDataServiceRequest {\n        return salesOrdersQuery(id).read();\n    }\n    export function readAsync(context: IContext, id: string): AsyncResult<SalesOrder> {\n        const request = createReadAsync(id, );\n        return executeAction<SalesOrder>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return salesOrdersQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<SalesOrder[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<SalesOrder[]>(request, context);\n    }\n    \n    export function createSearchSalesTransactionsByReceiptIdInput(queryResultSettings: IQueryResultSettings, receiptId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchSalesTransactionsByReceiptId', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {receiptId: receiptId });\n    }    \n    \n    export function searchSalesTransactionsByReceiptIdAsync(context: IContext, receiptId: string | null):AsyncResult<SalesOrder[]> {\n        const request = createSearchSalesTransactionsByReceiptIdInput(context.queryResultSettings, receiptId, );\n        return executeAction<SalesOrder[]>(request, context);\n    }          \n          \n    export function createSearchInput(queryResultSettings: IQueryResultSettings, salesOrderSearchCriteria: SalesOrderSearchCriteria | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('Search', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {salesOrderSearchCriteria: salesOrderSearchCriteria });\n    }    \n    \n    export function searchAsync(context: IContext, salesOrderSearchCriteria: SalesOrderSearchCriteria | null):AsyncResult<SalesOrder[]> {\n        const request = createSearchInput(context.queryResultSettings, salesOrderSearchCriteria, );\n        return executeAction<SalesOrder[]>(request, context);\n    }          \n          \n    export function createSearchOrdersInput(queryResultSettings: IQueryResultSettings, orderSearchCriteria: OrderSearchCriteria | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchOrders', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {orderSearchCriteria: orderSearchCriteria });\n    }    \n    \n    export function searchOrdersAsync(context: IContext, orderSearchCriteria: OrderSearchCriteria | null):AsyncResult<SalesOrder[]> {\n        const request = createSearchOrdersInput(context.queryResultSettings, orderSearchCriteria, );\n        return executeAction<SalesOrder[]>(request, context);\n    }          \n          \n    export function createGetReceiptsInput(queryResultSettings: IQueryResultSettings, id: string, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest {      \n        const query = salesOrdersQuery(id).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetReceipts', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {receiptRetrievalCriteria: receiptRetrievalCriteria });\n    }    \n    \n    export function getReceiptsAsync(context: IContext, id: string, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null):AsyncResult<Receipt[]> {\n        const request = createGetReceiptsInput(context.queryResultSettings, id, receiptRetrievalCriteria, );\n        return executeAction<Receipt[]>(request, context);\n    }          \n          \n    export function createSendReceiptInput(searchCriteria: SearchReceiptCriteria | null, recipientAddresses: ElectronicAddress[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('SendReceipt', true, '', '', { bypassCache: 'get', returnEntity: ''}, {searchCriteria: searchCriteria, recipientAddresses: recipientAddresses });\n    }    \n    \n    export function sendReceiptAsync(context: IContext, searchCriteria: SearchReceiptCriteria | null, recipientAddresses: ElectronicAddress[] | null):AsyncResult<NullResult> {\n        const request = createSendReceiptInput(searchCriteria, recipientAddresses, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createGetGiftReceiptsInput(queryResultSettings: IQueryResultSettings, id: string, salesLineNumbers: number[], receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest {      \n        const query = salesOrdersQuery(id).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetGiftReceipts', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {SalesLineNumbers: salesLineNumbers, receiptRetrievalCriteria: receiptRetrievalCriteria });\n    }    \n    \n    export function getGiftReceiptsAsync(context: IContext, id: string, salesLineNumbers: number[], receiptRetrievalCriteria: ReceiptRetrievalCriteria | null):AsyncResult<Receipt[]> {\n        const request = createGetGiftReceiptsInput(context.queryResultSettings, id, salesLineNumbers, receiptRetrievalCriteria, );\n        return executeAction<Receipt[]>(request, context);\n    }          \n          \n    export function createGetByReceiptIdInput(queryResultSettings: IQueryResultSettings, receiptId: string | null, orderStoreNumber: string | null, orderTerminalId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetByReceiptId', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {receiptId: receiptId, orderStoreNumber: orderStoreNumber, orderTerminalId: orderTerminalId });\n    }    \n    \n    export function getByReceiptIdAsync(context: IContext, receiptId: string | null, orderStoreNumber: string | null, orderTerminalId: string | null):AsyncResult<SalesOrder[]> {\n        const request = createGetByReceiptIdInput(context.queryResultSettings, receiptId, orderStoreNumber, orderTerminalId, );\n        return executeAction<SalesOrder[]>(request, context);\n    }          \n          \n    export function createGetSalesOrderDetailsByTransactionIdInput(transactionId: string | null, searchLocationValue: number): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('GetSalesOrderDetailsByTransactionId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {transactionId: transactionId, searchLocationValue: searchLocationValue });\n    }    \n    \n    export function getSalesOrderDetailsByTransactionIdAsync(context: IContext, transactionId: string | null, searchLocationValue: number):AsyncResult<SalesOrder> {\n        const request = createGetSalesOrderDetailsByTransactionIdInput(transactionId, searchLocationValue, );\n        return executeAction<SalesOrder>(request, context);\n    }          \n          \n    export function createGetSalesOrderDetailsBySalesIdInput(salesId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('GetSalesOrderDetailsBySalesId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {salesId: salesId });\n    }    \n    \n    export function getSalesOrderDetailsBySalesIdAsync(context: IContext, salesId: string | null):AsyncResult<SalesOrder> {\n        const request = createGetSalesOrderDetailsBySalesIdInput(salesId, );\n        return executeAction<SalesOrder>(request, context);\n    }          \n          \n    export function createGetSalesOrderDetailsByQuotationIdInput(quotationId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('GetSalesOrderDetailsByQuotationId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {quotationId: quotationId });\n    }    \n    \n    export function getSalesOrderDetailsByQuotationIdAsync(context: IContext, quotationId: string | null):AsyncResult<SalesOrder> {\n        const request = createGetSalesOrderDetailsByQuotationIdInput(quotationId, );\n        return executeAction<SalesOrder>(request, context);\n    }          \n          \n    export function createShipFulfillmentLinesInput(shipFulfillmentLines: ShipFulfillmentLine[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('ShipFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {ShipFulfillmentLines: shipFulfillmentLines });\n    }    \n    \n    export function shipFulfillmentLinesAsync(context: IContext, shipFulfillmentLines: ShipFulfillmentLine[] | null):AsyncResult<NullResult> {\n        const request = createShipFulfillmentLinesInput(shipFulfillmentLines, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createAcceptFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('AcceptFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });\n    }    \n    \n    export function acceptFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<NullResult> {\n        const request = createAcceptFulfillmentLinesInput(fulfillmentLineParameter, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createPickFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('PickFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });\n    }    \n    \n    export function pickFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<NullResult> {\n        const request = createPickFulfillmentLinesInput(fulfillmentLineParameter, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createPackFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('PackFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });\n    }    \n    \n    export function packFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<NullResult> {\n        const request = createPackFulfillmentLinesInput(fulfillmentLineParameter, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createMarkFulfillmentLinesAsPackedInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('MarkFulfillmentLinesAsPacked', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });\n    }    \n    \n    export function markFulfillmentLinesAsPackedAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<string> {\n        const request = createMarkFulfillmentLinesAsPackedInput(fulfillmentLineParameter, );\n        return executeAction<string>(request, context);\n    }          \n          \n    export function createMarkAsPickedInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('MarkAsPicked', true, '', '', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });\n    }    \n    \n    export function markAsPickedAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<NullResult> {\n        const request = createMarkAsPickedInput(fulfillmentLineParameter, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createGetFulfillmentPickingListsInput(queryResultSettings: IQueryResultSettings, pickingListFulfillmentLine: FulfillmentLineParameter[] | null, hardwareProfileId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetFulfillmentPickingLists', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {pickingListFulfillmentLine: pickingListFulfillmentLine, hardwareProfileId: hardwareProfileId });\n    }    \n    \n    export function getFulfillmentPickingListsAsync(context: IContext, pickingListFulfillmentLine: FulfillmentLineParameter[] | null, hardwareProfileId: string | null):AsyncResult<Receipt[]> {\n        const request = createGetFulfillmentPickingListsInput(context.queryResultSettings, pickingListFulfillmentLine, hardwareProfileId, );\n        return executeAction<Receipt[]>(request, context);\n    }          \n          \n    export function createGetFulfillmentLinesInput(queryResultSettings: IQueryResultSettings, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetFulfillmentLines', true, FulfillmentLineClass, 'true', { bypassCache: 'none', returnEntity: 'FulfillmentLine'}, {fulfillmentLineSearchCriteria: fulfillmentLineSearchCriteria });\n    }    \n    \n    export function getFulfillmentLinesAsync(context: IContext, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null):AsyncResult<FulfillmentLine[]> {\n        const request = createGetFulfillmentLinesInput(context.queryResultSettings, fulfillmentLineSearchCriteria, );\n        return executeAction<FulfillmentLine[]>(request, context);\n    }          \n          \n    export function createGetFulfillmentPackingSlipsInput(queryResultSettings: IQueryResultSettings, packFulfillmentLines: FulfillmentLineParameter[] | null, hardwareProfileId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetFulfillmentPackingSlips', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {packFulfillmentLines: packFulfillmentLines, hardwareProfileId: hardwareProfileId });\n    }    \n    \n    export function getFulfillmentPackingSlipsAsync(context: IContext, packFulfillmentLines: FulfillmentLineParameter[] | null, hardwareProfileId: string | null):AsyncResult<Receipt[]> {\n        const request = createGetFulfillmentPackingSlipsInput(context.queryResultSettings, packFulfillmentLines, hardwareProfileId, );\n        return executeAction<Receipt[]>(request, context);\n    }          \n          \n    export function createGetFulfillmentPackingSlipsByIdInput(queryResultSettings: IQueryResultSettings, salesId: string | null, packingSlipId: string | null, hardwareProfileId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetFulfillmentPackingSlipsById', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {salesId: salesId, PackingSlipId: packingSlipId, hardwareProfileId: hardwareProfileId });\n    }    \n    \n    export function getFulfillmentPackingSlipsByIdAsync(context: IContext, salesId: string | null, packingSlipId: string | null, hardwareProfileId: string | null):AsyncResult<Receipt[]> {\n        const request = createGetFulfillmentPackingSlipsByIdInput(context.queryResultSettings, salesId, packingSlipId, hardwareProfileId, );\n        return executeAction<Receipt[]>(request, context);\n    }          \n          \n    export function createRejectFulfillmentLinesInput(rejectFulfillmentLines: RejectFulfillmentLine[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('RejectFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {RejectFulfillmentLines: rejectFulfillmentLines });\n    }    \n    \n    export function rejectFulfillmentLinesAsync(context: IContext, rejectFulfillmentLines: RejectFulfillmentLine[] | null):AsyncResult<NullResult> {\n        const request = createRejectFulfillmentLinesInput(rejectFulfillmentLines, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createGetInvoicesBySalesIdInput(queryResultSettings: IQueryResultSettings, salesId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetInvoicesBySalesId', true, SalesInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'SalesInvoice'}, {salesId: salesId });\n    }    \n    \n    export function getInvoicesBySalesIdAsync(context: IContext, salesId: string | null):AsyncResult<SalesInvoice[]> {\n        const request = createGetInvoicesBySalesIdInput(context.queryResultSettings, salesId, );\n        return executeAction<SalesInvoice[]>(request, context);\n    }          \n          \n    export function createGetOrderInvoicesInput(queryResultSettings: IQueryResultSettings, customerId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetOrderInvoices', true, OrderInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'OrderInvoice'}, {customerId: customerId });\n    }    \n    \n    export function getOrderInvoicesAsync(context: IContext, customerId: string | null):AsyncResult<OrderInvoice[]> {\n        const request = createGetOrderInvoicesInput(context.queryResultSettings, customerId, );\n        return executeAction<OrderInvoice[]>(request, context);\n    }          \n          \n    export function createGetInvoicesInput(queryResultSettings: IQueryResultSettings, invoiceSearchCriteria: InvoiceSearchCriteria | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetInvoices', true, OrderInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'OrderInvoice'}, {invoiceSearchCriteria: invoiceSearchCriteria });\n    }    \n    \n    export function getInvoicesAsync(context: IContext, invoiceSearchCriteria: InvoiceSearchCriteria | null):AsyncResult<OrderInvoice[]> {\n        const request = createGetInvoicesInput(context.queryResultSettings, invoiceSearchCriteria, );\n        return executeAction<OrderInvoice[]>(request, context);\n    }          \n          \n    export function createGetInvoicedSalesLinesBySalesIdsInput(queryResultSettings: IQueryResultSettings, salesIds: string[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetInvoicedSalesLinesBySalesIds', true, SalesLineClass, 'true', { bypassCache: 'none', returnEntity: 'SalesLine'}, {salesIds: salesIds });\n    }    \n    \n    export function getInvoicedSalesLinesBySalesIdsAsync(context: IContext, salesIds: string[] | null):AsyncResult<SalesLine[]> {\n        const request = createGetInvoicedSalesLinesBySalesIdsInput(context.queryResultSettings, salesIds, );\n        return executeAction<SalesLine[]>(request, context);\n    }          \n          \n    export function createCreatePickingListInput(salesId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('CreatePickingList', true, '', '', { bypassCache: 'get', returnEntity: ''}, {salesId: salesId });\n    }    \n    \n    export function createPickingListAsync(context: IContext, salesId: string | null):AsyncResult<NullResult> {\n        const request = createCreatePickingListInput(salesId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createCreatePickingListForItemsInput(salesId: string | null, pickAndPackSalesLineParameters: PickAndPackSalesLineParameter[] | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('CreatePickingListForItems', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, {salesId: salesId, pickAndPackSalesLineParameters: pickAndPackSalesLineParameters });\n    }    \n    \n    export function createPickingListForItemsAsync(context: IContext, salesId: string | null, pickAndPackSalesLineParameters: PickAndPackSalesLineParameter[] | null):AsyncResult<string> {\n        const request = createCreatePickingListForItemsInput(salesId, pickAndPackSalesLineParameters, );\n        return executeAction<string>(request, context);\n    }          \n          \n    export function createGetPickingListsInput(queryResultSettings: IQueryResultSettings, id: string): IDataServiceRequest {      \n        const query = salesOrdersQuery(id).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetPickingLists', false, PickingListClass, 'true', { bypassCache: 'none', returnEntity: 'PickingList'}, { });\n    }    \n    \n    export function getPickingListsAsync(context: IContext, id: string):AsyncResult<PickingList[]> {\n        const request = createGetPickingListsInput(context.queryResultSettings, id, );\n        return executeAction<PickingList[]>(request, context);\n    }          \n          \n    export function createCreatePackingSlipInput(salesId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery();\n        return query.createDataServiceRequestForOperation('CreatePackingSlip', true, '', '', { bypassCache: 'get', returnEntity: ''}, {salesId: salesId });\n    }    \n    \n    export function createPackingSlipAsync(context: IContext, salesId: string | null):AsyncResult<NullResult> {\n        const request = createCreatePackingSlipInput(salesId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createGetPackingSlipsDataInput(queryResultSettings: IQueryResultSettings, salesId: string | null): IDataServiceRequest {      \n        const query = salesOrdersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetPackingSlipsData', false, PackingSlipDataClass, 'true', { bypassCache: 'none', returnEntity: 'PackingSlipData'}, {salesId: salesId });\n    }    \n    \n    export function getPackingSlipsDataAsync(context: IContext, salesId: string | null):AsyncResult<PackingSlipData[]> {\n        const request = createGetPackingSlipsDataInput(context.queryResultSettings, salesId, );\n        return executeAction<PackingSlipData[]>(request, context);\n    }          \n          \n    "]}