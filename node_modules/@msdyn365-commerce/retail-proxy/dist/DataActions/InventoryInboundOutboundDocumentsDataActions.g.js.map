{"version":3,"file":"InventoryInboundOutboundDocumentsDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/InventoryInboundOutboundDocumentsDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { InventoryInboundOutboundDocument, InventoryDocumentLineFilterCriteria, InventoryDocumentUpdateLinesAction, InventoryDocumentLineOperationResultSettings, InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult, InventoryInboundOutboundDocumentLine, InventoryDocumentSerialNumberLineSearchCriteria, InventoryDocumentSerialNumberLine, InventoryDocumentValidationResultSummary, InventoryDocumentValidationResultSearchCriteria, InventoryDocumentValidationResultLine, InventoryDocumentSearchCriteria, InventoryDocumentLineSearchCriteria, InventoryDocumentSerialNumberLineResetAction, InventoryDocumentSerialNumberLineUpdateAction, InventoryInboundOutboundDocumentLinesSummary, InventoryDocumentSerialNumberLinesSummary } from '../Entities/CommerceTypes.g';\n    import { InventoryInboundOutboundDocumentClass, InventoryInboundOutboundDocumentUpdateLinesByCriteriaResultClass, InventoryInboundOutboundDocumentLineClass, InventoryDocumentSerialNumberLineClass, InventoryDocumentValidationResultSummaryClass, InventoryDocumentValidationResultLineClass, InventoryInboundOutboundDocumentLinesSummaryClass, InventoryDocumentSerialNumberLinesSummaryClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function inventoryInboundOutboundDocumentsQuery(workDocumentId?: string): DataServiceQuery {\n      var key = (workDocumentId) ? { WorkDocumentId: workDocumentId } : null;\n      return new DataServiceQuery(\"InventoryInboundOutboundDocuments\", \"InventoryInboundOutboundDocument\", InventoryInboundOutboundDocumentClass, key);\n    }\n    \n    export function createCreateInput(entity: InventoryInboundOutboundDocument): IDataServiceRequest {\n        return inventoryInboundOutboundDocumentsQuery().create(entity);\n    }\n    export function createInventoryInboundOutboundDocumentAsync(context: IContext, entity: InventoryInboundOutboundDocument): AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createCreateInput(entity, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }\n    export function createUpdateInput(entity: InventoryInboundOutboundDocument): IDataServiceRequest {\n        return inventoryInboundOutboundDocumentsQuery(entity.WorkDocumentId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: InventoryInboundOutboundDocument): AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createUpdateInput(entity, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }\n    export function createDeleteAsync(entity: InventoryInboundOutboundDocument): IDataServiceRequest {\n        return inventoryInboundOutboundDocumentsQuery(entity.WorkDocumentId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: InventoryInboundOutboundDocument): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(workDocumentId: string): IDataServiceRequest {\n        return inventoryInboundOutboundDocumentsQuery(workDocumentId).read();\n    }\n    export function readAsync(context: IContext, workDocumentId: string): AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createReadAsync(workDocumentId, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<InventoryInboundOutboundDocument[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<InventoryInboundOutboundDocument[]>(request, context);\n    }\n    \n    export function createUpdateStatusInput(workDocumentId: string, documentStatus: number, documentVersion: number | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('UpdateStatus', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentStatus: documentStatus, documentVersion: documentVersion });\n    }    \n    \n    export function updateStatusAsync(context: IContext, workDocumentId: string, documentStatus: number, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createUpdateStatusInput(workDocumentId, documentStatus, documentVersion, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }          \n          \n    export function createUpdateLinesByCriteriaInput(workDocumentId: string, filterCriteria: InventoryDocumentLineFilterCriteria | null, updateLinesAction: InventoryDocumentUpdateLinesAction | null, returnUpdatedLinesPolicy: InventoryDocumentLineOperationResultSettings | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('UpdateLinesByCriteria', true, InventoryInboundOutboundDocumentUpdateLinesByCriteriaResultClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult'}, {filterCriteria: filterCriteria, updateLinesAction: updateLinesAction, returnUpdatedLinesPolicy: returnUpdatedLinesPolicy });\n    }    \n    \n    export function updateLinesByCriteriaAsync(context: IContext, workDocumentId: string, filterCriteria: InventoryDocumentLineFilterCriteria | null, updateLinesAction: InventoryDocumentUpdateLinesAction | null, returnUpdatedLinesPolicy: InventoryDocumentLineOperationResultSettings | null):AsyncResult<InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult> {\n        const request = createUpdateLinesByCriteriaInput(workDocumentId, filterCriteria, updateLinesAction, returnUpdatedLinesPolicy, );\n        return executeAction<InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult>(request, context);\n    }          \n          \n    export function createUpdateLineInput(workDocumentId: string, documentLine: InventoryInboundOutboundDocumentLine | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('UpdateLine', true, InventoryInboundOutboundDocumentLineClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocumentLine'}, {documentLine: documentLine });\n    }    \n    \n    export function updateLineAsync(context: IContext, workDocumentId: string, documentLine: InventoryInboundOutboundDocumentLine | null):AsyncResult<InventoryInboundOutboundDocumentLine> {\n        const request = createUpdateLineInput(workDocumentId, documentLine, );\n        return executeAction<InventoryInboundOutboundDocumentLine>(request, context);\n    }          \n          \n    export function createUpdateWorkingTerminalInput(workDocumentId: string, documentVersion: number | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('UpdateWorkingTerminal', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentVersion: documentVersion });\n    }    \n    \n    export function updateWorkingTerminalAsync(context: IContext, workDocumentId: string, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createUpdateWorkingTerminalInput(workDocumentId, documentVersion, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }          \n          \n    export function createUpdateNoteInput(workDocumentId: string, documentNote: string | null, documentVersion: number | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('UpdateNote', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentNote: documentNote, documentVersion: documentVersion });\n    }    \n    \n    export function updateNoteAsync(context: IContext, workDocumentId: string, documentNote: string | null, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createUpdateNoteInput(workDocumentId, documentNote, documentVersion, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }          \n          \n    export function createUpdateReceiptIdInput(workDocumentId: string, documentReceiptId: string | null, documentVersion: number | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('UpdateReceiptId', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentReceiptId: documentReceiptId, documentVersion: documentVersion });\n    }    \n    \n    export function updateReceiptIdAsync(context: IContext, workDocumentId: string, documentReceiptId: string | null, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createUpdateReceiptIdInput(workDocumentId, documentReceiptId, documentVersion, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }          \n          \n    export function createCommitInput(workDocumentId: string, documentVersion: number | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('Commit', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentVersion: documentVersion });\n    }    \n    \n    export function commitAsync(context: IContext, workDocumentId: string, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createCommitInput(workDocumentId, documentVersion, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }          \n          \n    export function createRefreshOperationStatusInput(workDocumentId: string): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('RefreshOperationStatus', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, { });\n    }    \n    \n    export function refreshOperationStatusAsync(context: IContext, workDocumentId: string):AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createRefreshOperationStatusInput(workDocumentId, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }          \n          \n    export function createStartInput(sourceDocumentId: string | null, sourceDocumentType: number): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery();\n        return query.createDataServiceRequestForOperation('Start', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {sourceDocumentId: sourceDocumentId, sourceDocumentType: sourceDocumentType });\n    }    \n    \n    export function startAsync(context: IContext, sourceDocumentId: string | null, sourceDocumentType: number):AsyncResult<InventoryInboundOutboundDocument> {\n        const request = createStartInput(sourceDocumentId, sourceDocumentType, );\n        return executeAction<InventoryInboundOutboundDocument>(request, context);\n    }          \n          \n    export function createAddLineInput(workDocumentId: string, documentLine: InventoryInboundOutboundDocumentLine | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('AddLine', true, InventoryInboundOutboundDocumentLineClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocumentLine'}, {documentLine: documentLine });\n    }    \n    \n    export function addLineAsync(context: IContext, workDocumentId: string, documentLine: InventoryInboundOutboundDocumentLine | null):AsyncResult<InventoryInboundOutboundDocumentLine> {\n        const request = createAddLineInput(workDocumentId, documentLine, );\n        return executeAction<InventoryInboundOutboundDocumentLine>(request, context);\n    }          \n          \n    export function createDeleteLineInput(workDocumentId: string, documentLineId: string | null, documentLineVersion: number | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('DeleteLine', true, '', '', { bypassCache: 'get', returnEntity: ''}, {documentLineId: documentLineId, documentLineVersion: documentLineVersion });\n    }    \n    \n    export function deleteLineAsync(context: IContext, workDocumentId: string, documentLineId: string | null, documentLineVersion: number | null):AsyncResult<NullResult> {\n        const request = createDeleteLineInput(workDocumentId, documentLineId, documentLineVersion, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createSearchSerialNumberLinesInput(queryResultSettings: IQueryResultSettings, workDocumentId: string, searchCriteria: InventoryDocumentSerialNumberLineSearchCriteria | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchSerialNumberLines', true, InventoryDocumentSerialNumberLineClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryDocumentSerialNumberLine'}, {searchCriteria: searchCriteria });\n    }    \n    \n    export function searchSerialNumberLinesAsync(context: IContext, workDocumentId: string, searchCriteria: InventoryDocumentSerialNumberLineSearchCriteria | null):AsyncResult<InventoryDocumentSerialNumberLine[]> {\n        const request = createSearchSerialNumberLinesInput(context.queryResultSettings, workDocumentId, searchCriteria, );\n        return executeAction<InventoryDocumentSerialNumberLine[]>(request, context);\n    }          \n          \n    export function createValidateInput(workDocumentId: string, documentVersion: number | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('Validate', true, InventoryDocumentValidationResultSummaryClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryDocumentValidationResultSummary'}, {documentVersion: documentVersion });\n    }    \n    \n    export function validateAsync(context: IContext, workDocumentId: string, documentVersion: number | null):AsyncResult<InventoryDocumentValidationResultSummary> {\n        const request = createValidateInput(workDocumentId, documentVersion, );\n        return executeAction<InventoryDocumentValidationResultSummary>(request, context);\n    }          \n          \n    export function createSearchValidationResultLinesInput(queryResultSettings: IQueryResultSettings, searchCriteria: InventoryDocumentValidationResultSearchCriteria | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchValidationResultLines', true, InventoryDocumentValidationResultLineClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryDocumentValidationResultLine'}, {searchCriteria: searchCriteria });\n    }    \n    \n    export function searchValidationResultLinesAsync(context: IContext, searchCriteria: InventoryDocumentValidationResultSearchCriteria | null):AsyncResult<InventoryDocumentValidationResultLine[]> {\n        const request = createSearchValidationResultLinesInput(context.queryResultSettings, searchCriteria, );\n        return executeAction<InventoryDocumentValidationResultLine[]>(request, context);\n    }          \n          \n    export function createSyncSourceDocumentInput(sourceDocumentId: string | null, sourceDocumentType: number): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery();\n        return query.createDataServiceRequestForOperation('SyncSourceDocument', true, '', '', { bypassCache: 'get', returnEntity: ''}, {sourceDocumentId: sourceDocumentId, sourceDocumentType: sourceDocumentType });\n    }    \n    \n    export function syncSourceDocumentAsync(context: IContext, sourceDocumentId: string | null, sourceDocumentType: number):AsyncResult<NullResult> {\n        const request = createSyncSourceDocumentInput(sourceDocumentId, sourceDocumentType, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createSearchInboundDocumentsInput(queryResultSettings: IQueryResultSettings, searchCriteria: InventoryDocumentSearchCriteria | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchInboundDocuments', true, InventoryInboundOutboundDocumentClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryInboundOutboundDocument'}, {searchCriteria: searchCriteria });\n    }    \n    \n    export function searchInboundDocumentsAsync(context: IContext, searchCriteria: InventoryDocumentSearchCriteria | null):AsyncResult<InventoryInboundOutboundDocument[]> {\n        const request = createSearchInboundDocumentsInput(context.queryResultSettings, searchCriteria, );\n        return executeAction<InventoryInboundOutboundDocument[]>(request, context);\n    }          \n          \n    export function createSearchOutboundDocumentsInput(queryResultSettings: IQueryResultSettings, searchCriteria: InventoryDocumentSearchCriteria | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchOutboundDocuments', true, InventoryInboundOutboundDocumentClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryInboundOutboundDocument'}, {searchCriteria: searchCriteria });\n    }    \n    \n    export function searchOutboundDocumentsAsync(context: IContext, searchCriteria: InventoryDocumentSearchCriteria | null):AsyncResult<InventoryInboundOutboundDocument[]> {\n        const request = createSearchOutboundDocumentsInput(context.queryResultSettings, searchCriteria, );\n        return executeAction<InventoryInboundOutboundDocument[]>(request, context);\n    }          \n          \n    export function createSearchLinesInput(queryResultSettings: IQueryResultSettings, searchCriteria: InventoryDocumentLineSearchCriteria | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchLines', true, InventoryInboundOutboundDocumentLineClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryInboundOutboundDocumentLine'}, {searchCriteria: searchCriteria });\n    }    \n    \n    export function searchLinesAsync(context: IContext, searchCriteria: InventoryDocumentLineSearchCriteria | null):AsyncResult<InventoryInboundOutboundDocumentLine[]> {\n        const request = createSearchLinesInput(context.queryResultSettings, searchCriteria, );\n        return executeAction<InventoryInboundOutboundDocumentLine[]>(request, context);\n    }          \n          \n    export function createResetSerialNumberLineInput(workDocumentId: string, resetSerialNumberLineAction: InventoryDocumentSerialNumberLineResetAction | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('ResetSerialNumberLine', true, InventoryDocumentSerialNumberLineClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryDocumentSerialNumberLine'}, {resetSerialNumberLineAction: resetSerialNumberLineAction });\n    }    \n    \n    export function resetSerialNumberLineAsync(context: IContext, workDocumentId: string, resetSerialNumberLineAction: InventoryDocumentSerialNumberLineResetAction | null):AsyncResult<InventoryDocumentSerialNumberLine> {\n        const request = createResetSerialNumberLineInput(workDocumentId, resetSerialNumberLineAction, );\n        return executeAction<InventoryDocumentSerialNumberLine>(request, context);\n    }          \n          \n    export function createUpdateSerialNumberLineInput(workDocumentId: string, updateSerialNumberLineAction: InventoryDocumentSerialNumberLineUpdateAction | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('UpdateSerialNumberLine', true, InventoryDocumentSerialNumberLineClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryDocumentSerialNumberLine'}, {updateSerialNumberLineAction: updateSerialNumberLineAction });\n    }    \n    \n    export function updateSerialNumberLineAsync(context: IContext, workDocumentId: string, updateSerialNumberLineAction: InventoryDocumentSerialNumberLineUpdateAction | null):AsyncResult<InventoryDocumentSerialNumberLine> {\n        const request = createUpdateSerialNumberLineInput(workDocumentId, updateSerialNumberLineAction, );\n        return executeAction<InventoryDocumentSerialNumberLine>(request, context);\n    }          \n          \n    export function createGetLinesSummaryInput(workDocumentId: string): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('GetLinesSummary', false, InventoryInboundOutboundDocumentLinesSummaryClass, 'false', { bypassCache: 'none', returnEntity: 'InventoryInboundOutboundDocumentLinesSummary'}, { });\n    }    \n    \n    export function getLinesSummaryAsync(context: IContext, workDocumentId: string):AsyncResult<InventoryInboundOutboundDocumentLinesSummary> {\n        const request = createGetLinesSummaryInput(workDocumentId, );\n        return executeAction<InventoryInboundOutboundDocumentLinesSummary>(request, context);\n    }          \n          \n    export function createGetSerialNumberLinesSummaryInput(workDocumentId: string, documentLineId: string | null): IDataServiceRequest {      \n        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);\n        return query.createDataServiceRequestForOperation('GetSerialNumberLinesSummary', false, InventoryDocumentSerialNumberLinesSummaryClass, 'false', { bypassCache: 'none', returnEntity: 'InventoryDocumentSerialNumberLinesSummary'}, {documentLineId: documentLineId });\n    }    \n    \n    export function getSerialNumberLinesSummaryAsync(context: IContext, workDocumentId: string, documentLineId: string | null):AsyncResult<InventoryDocumentSerialNumberLinesSummary> {\n        const request = createGetSerialNumberLinesSummaryInput(workDocumentId, documentLineId, );\n        return executeAction<InventoryDocumentSerialNumberLinesSummary>(request, context);\n    }          \n          \n    "]}