import { DataServiceQuery } from '../DataServiceQuery';
import { OrgUnitClass, TillLayoutClass, OrgUnitLocationClass, ChannelConfigurationClass, StoreHoursClass, OrgUnitAvailabilityClass, TerminalInfoClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function orgUnitsQuery(orgUnitNumber) {
    var key = (orgUnitNumber) ? { OrgUnitNumber: orgUnitNumber } : null;
    return new DataServiceQuery("OrgUnits", "OrgUnit", OrgUnitClass, key);
}
export function createCreateInput(entity) {
    return orgUnitsQuery().create(entity);
}
export function createOrgUnitAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return orgUnitsQuery(entity.OrgUnitNumber).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return orgUnitsQuery(entity.OrgUnitNumber).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(orgUnitNumber) {
    return orgUnitsQuery(orgUnitNumber).read();
}
export function readAsync(context, orgUnitNumber) {
    const request = createReadAsync(orgUnitNumber);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return orgUnitsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetTillLayoutInput(height, width) {
    const query = orgUnitsQuery();
    return query.createDataServiceRequestForOperation('GetTillLayout', true, TillLayoutClass, 'false', { bypassCache: 'none', returnEntity: 'TillLayout' }, { height: height, width: width });
}
export function getTillLayoutAsync(context, height, width) {
    const request = createGetTillLayoutInput(height, width);
    return executeAction(request, context);
}
export function createSearchInput(queryResultSettings, storeSearchCriteria) {
    const query = orgUnitsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('Search', true, OrgUnitClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnit' }, { storeSearchCriteria: storeSearchCriteria });
}
export function searchAsync(context, storeSearchCriteria) {
    const request = createSearchInput(context.queryResultSettings, storeSearchCriteria);
    return executeAction(request, context);
}
export function createGetOrgUnitLocationsByAreaInput(queryResultSettings, searchArea, deliveryModeTypeFilter) {
    const query = orgUnitsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetOrgUnitLocationsByArea', true, OrgUnitLocationClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitLocation' }, { searchArea: searchArea, deliveryModeTypeFilter: deliveryModeTypeFilter });
}
export function getOrgUnitLocationsByAreaAsync(context, searchArea, deliveryModeTypeFilter) {
    const request = createGetOrgUnitLocationsByAreaInput(context.queryResultSettings, searchArea, deliveryModeTypeFilter);
    return executeAction(request, context);
}
export function createSearchOrgUnitLocationsInput(queryResultSettings, orgUnitLocationSearchCriteria) {
    const query = orgUnitsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchOrgUnitLocations', true, OrgUnitLocationClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitLocation' }, { orgUnitLocationSearchCriteria: orgUnitLocationSearchCriteria });
}
export function searchOrgUnitLocationsAsync(context, orgUnitLocationSearchCriteria) {
    const request = createSearchOrgUnitLocationsInput(context.queryResultSettings, orgUnitLocationSearchCriteria);
    return executeAction(request, context);
}
export function createGetOrgUnitConfigurationInput() {
    const query = orgUnitsQuery();
    return query.createDataServiceRequestForOperation('GetOrgUnitConfiguration', true, ChannelConfigurationClass, 'false', { bypassCache: 'none', returnEntity: 'ChannelConfiguration' }, {});
}
export function getOrgUnitConfigurationAsync(context) {
    const request = createGetOrgUnitConfigurationInput();
    return executeAction(request, context);
}
export function createGetStoreHoursInput(storeNumber) {
    const query = orgUnitsQuery();
    return query.createDataServiceRequestForOperation('GetStoreHours', false, StoreHoursClass, 'false', { bypassCache: 'none', returnEntity: 'StoreHours' }, { storeNumber: storeNumber });
}
export function getStoreHoursAsync(context, storeNumber) {
    const request = createGetStoreHoursInput(storeNumber);
    return executeAction(request, context);
}
export function createGetAvailableInventoryInput(queryResultSettings, itemId, variantId, barcode) {
    const query = orgUnitsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAvailableInventory', true, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability' }, { itemId: itemId, variantId: variantId, barcode: barcode });
}
export function getAvailableInventoryAsync(context, itemId, variantId, barcode) {
    const request = createGetAvailableInventoryInput(context.queryResultSettings, itemId, variantId, barcode);
    return executeAction(request, context);
}
export function createGetAvailableInventoryNearbyInput(queryResultSettings, itemIds, searchArea) {
    const query = orgUnitsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAvailableInventoryNearby', true, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability' }, { itemIds: itemIds, searchArea: searchArea });
}
export function getAvailableInventoryNearbyAsync(context, itemIds, searchArea) {
    const request = createGetAvailableInventoryNearbyInput(context.queryResultSettings, itemIds, searchArea);
    return executeAction(request, context);
}
export function createGetProductAvailabilityByDimensionsInput(queryResultSettings, inventLocationIds, productId, productDimensionCombinations) {
    const query = orgUnitsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetProductAvailabilityByDimensions', true, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability' }, { inventLocationIds: inventLocationIds, productId: productId, productDimensionCombinations: productDimensionCombinations });
}
export function getProductAvailabilityByDimensionsAsync(context, inventLocationIds, productId, productDimensionCombinations) {
    const request = createGetProductAvailabilityByDimensionsInput(context.queryResultSettings, inventLocationIds, productId, productDimensionCombinations);
    return executeAction(request, context);
}
export function createSearchProductAvailabilityInput(queryResultSettings, productId, orgUnitAvailabilitySearchCriteria) {
    const query = orgUnitsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchProductAvailability', true, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability' }, { productId: productId, orgUnitAvailabilitySearchCriteria: orgUnitAvailabilitySearchCriteria });
}
export function searchProductAvailabilityAsync(context, productId, orgUnitAvailabilitySearchCriteria) {
    const request = createSearchProductAvailabilityInput(context.queryResultSettings, productId, orgUnitAvailabilitySearchCriteria);
    return executeAction(request, context);
}
export function createGetTerminalInfoInput(queryResultSettings, orgUnitNumber, deviceType) {
    const query = orgUnitsQuery(orgUnitNumber).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetTerminalInfo', false, TerminalInfoClass, 'true', { bypassCache: 'none', returnEntity: 'TerminalInfo' }, { deviceType: deviceType });
}
export function getTerminalInfoAsync(context, orgUnitNumber, deviceType) {
    const request = createGetTerminalInfoInput(context.queryResultSettings, orgUnitNumber, deviceType);
    return executeAction(request, context);
}
export function createGetProductAvailabilityInput(queryResultSettings, productId) {
    const query = orgUnitsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetProductAvailability', false, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability' }, { productId: productId });
}
export function getProductAvailabilityAsync(context, productId) {
    const request = createGetProductAvailabilityInput(context.queryResultSettings, productId);
    return executeAction(request, context);
}
//# sourceMappingURL=OrgUnitsDataActions.g.js.map