import { DataServiceQuery } from '../DataServiceQuery';
import { WarehouseClass, WarehouseLocationClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function warehousesQuery(inventLocation) {
    var key = (inventLocation) ? { InventLocation: inventLocation } : null;
    return new DataServiceQuery("Warehouses", "Warehouse", WarehouseClass, key);
}
export function createCreateInput(entity) {
    return warehousesQuery().create(entity);
}
export function createWarehouseAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return warehousesQuery(entity.InventLocation).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return warehousesQuery(entity.InventLocation).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(inventLocation) {
    return warehousesQuery(inventLocation).read();
}
export function readAsync(context, inventLocation) {
    const request = createReadAsync(inventLocation);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return warehousesQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createSearchWarehouseLocationsAsyncInput(queryResultSettings, searchCriteria) {
    const query = warehousesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchWarehouseLocationsAsync', true, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation' }, { searchCriteria: searchCriteria });
}
export function searchWarehouseLocationsAsyncAsync(context, searchCriteria) {
    const request = createSearchWarehouseLocationsAsyncInput(context.queryResultSettings, searchCriteria);
    return executeAction(request, context);
}
export function createGetWarehouseByIdInput(inventLocation) {
    const query = warehousesQuery(inventLocation);
    return query.createDataServiceRequestForOperation('GetWarehouseById', false, WarehouseClass, 'false', { bypassCache: 'none', returnEntity: 'Warehouse' }, {});
}
export function getWarehouseByIdAsync(context, inventLocation) {
    const request = createGetWarehouseByIdInput(inventLocation);
    return executeAction(request, context);
}
export function createSearchWarehousesInput(queryResultSettings, searchText) {
    const query = warehousesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchWarehouses', false, WarehouseClass, 'true', { bypassCache: 'none', returnEntity: 'Warehouse' }, { searchText: searchText });
}
export function searchWarehousesAsync(context, searchText) {
    const request = createSearchWarehousesInput(context.queryResultSettings, searchText);
    return executeAction(request, context);
}
export function createGetLocationsInput(queryResultSettings, inventLocation) {
    const query = warehousesQuery(inventLocation).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetLocations', false, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation' }, {});
}
export function getLocationsAsync(context, inventLocation) {
    const request = createGetLocationsInput(context.queryResultSettings, inventLocation);
    return executeAction(request, context);
}
export function createSearchLocationsInput(queryResultSettings, inventLocation, searchText) {
    const query = warehousesQuery(inventLocation).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('SearchLocations', false, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation' }, { searchText: searchText });
}
export function searchLocationsAsync(context, inventLocation, searchText) {
    const request = createSearchLocationsInput(context.queryResultSettings, inventLocation, searchText);
    return executeAction(request, context);
}
export function createGetAvailableFulfillmentLocationsInput(queryResultSettings, deliveryModeTypeFilter) {
    const query = warehousesQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAvailableFulfillmentLocations', false, WarehouseClass, 'true', { bypassCache: 'none', returnEntity: 'Warehouse' }, { deliveryModeTypeFilter: deliveryModeTypeFilter });
}
export function getAvailableFulfillmentLocationsAsync(context, deliveryModeTypeFilter) {
    const request = createGetAvailableFulfillmentLocationsInput(context.queryResultSettings, deliveryModeTypeFilter);
    return executeAction(request, context);
}
//# sourceMappingURL=WarehousesDataActions.g.js.map