import { DataServiceQuery } from '../DataServiceQuery';
import { SalesOrderContextualOperationsMapClass, FulfillmentLineContextualOperationsMapClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function applicableOperationsQuery(id) {
    var key = (id) ? { Id: id } : null;
    return new DataServiceQuery("ApplicableOperations", "SalesOrderContextualOperationsMap", SalesOrderContextualOperationsMapClass, key);
}
export function createCreateInput(entity) {
    return applicableOperationsQuery().create(entity);
}
export function createSalesOrderContextualOperationsMapAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return applicableOperationsQuery(entity.Id).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return applicableOperationsQuery(entity.Id).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(id) {
    return applicableOperationsQuery(id).read();
}
export function readAsync(context, id) {
    const request = createReadAsync(id);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return applicableOperationsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetOrdersInput(queryResultSettings, orderSearchCriteria) {
    const query = applicableOperationsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetOrders', true, SalesOrderContextualOperationsMapClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrderContextualOperationsMap' }, { orderSearchCriteria: orderSearchCriteria });
}
export function getOrdersAsync(context, orderSearchCriteria) {
    const request = createGetOrdersInput(context.queryResultSettings, orderSearchCriteria);
    return executeAction(request, context);
}
export function createGetFulfillmentLinesInput(queryResultSettings, fulfillmentLineSearchCriteria) {
    const query = applicableOperationsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetFulfillmentLines', true, FulfillmentLineContextualOperationsMapClass, 'true', { bypassCache: 'none', returnEntity: 'FulfillmentLineContextualOperationsMap' }, { fulfillmentLineSearchCriteria: fulfillmentLineSearchCriteria });
}
export function getFulfillmentLinesAsync(context, fulfillmentLineSearchCriteria) {
    const request = createGetFulfillmentLinesInput(context.queryResultSettings, fulfillmentLineSearchCriteria);
    return executeAction(request, context);
}
//# sourceMappingURL=ApplicableOperationsDataActions.g.js.map