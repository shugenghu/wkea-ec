import { AsyncResult } from '../async-result';
import { OrgUnit, TillLayout, SearchStoreCriteria, SearchArea, OrgUnitLocation, OrgUnitLocationSearchCriteria, ChannelConfiguration, StoreHours, OrgUnitAvailability, ItemUnit, ProductDimensionCombination, OrgUnitAvailabilitySearchCriteria, TerminalInfo } from '../Entities/CommerceTypes.g';
import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
export declare function createCreateInput(entity: OrgUnit): IDataServiceRequest;
export declare function createOrgUnitAsync(context: IContext, entity: OrgUnit): AsyncResult<OrgUnit>;
export declare function createUpdateInput(entity: OrgUnit): IDataServiceRequest;
export declare function updateAsync(context: IContext, entity: OrgUnit): AsyncResult<OrgUnit>;
export declare function createDeleteAsync(entity: OrgUnit): IDataServiceRequest;
export declare function deleteAsync(context: IContext, entity: OrgUnit): AsyncResult<NullResult>;
export declare function createReadAsync(orgUnitNumber: string): IDataServiceRequest;
export declare function readAsync(context: IContext, orgUnitNumber: string): AsyncResult<OrgUnit>;
export declare function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function readAllAsync(context: IContext): AsyncResult<OrgUnit[]>;
export declare function createGetTillLayoutInput(height: number | null, width: number | null): IDataServiceRequest;
export declare function getTillLayoutAsync(context: IContext, height: number | null, width: number | null): AsyncResult<TillLayout>;
export declare function createSearchInput(queryResultSettings: IQueryResultSettings, storeSearchCriteria: SearchStoreCriteria | null): IDataServiceRequest;
export declare function searchAsync(context: IContext, storeSearchCriteria: SearchStoreCriteria | null): AsyncResult<OrgUnit[]>;
export declare function createGetOrgUnitLocationsByAreaInput(queryResultSettings: IQueryResultSettings, searchArea: SearchArea | null, deliveryModeTypeFilter?: number | null): IDataServiceRequest;
export declare function getOrgUnitLocationsByAreaAsync(context: IContext, searchArea: SearchArea | null, deliveryModeTypeFilter?: number | null): AsyncResult<OrgUnitLocation[]>;
export declare function createSearchOrgUnitLocationsInput(queryResultSettings: IQueryResultSettings, orgUnitLocationSearchCriteria: OrgUnitLocationSearchCriteria | null): IDataServiceRequest;
export declare function searchOrgUnitLocationsAsync(context: IContext, orgUnitLocationSearchCriteria: OrgUnitLocationSearchCriteria | null): AsyncResult<OrgUnitLocation[]>;
export declare function createGetOrgUnitConfigurationInput(): IDataServiceRequest;
export declare function getOrgUnitConfigurationAsync(context: IContext): AsyncResult<ChannelConfiguration>;
export declare function createGetStoreHoursInput(storeNumber: string | null): IDataServiceRequest;
export declare function getStoreHoursAsync(context: IContext, storeNumber: string | null): AsyncResult<StoreHours>;
export declare function createGetAvailableInventoryInput(queryResultSettings: IQueryResultSettings, itemId: string | null, variantId: string | null, barcode: string | null): IDataServiceRequest;
export declare function getAvailableInventoryAsync(context: IContext, itemId: string | null, variantId: string | null, barcode: string | null): AsyncResult<OrgUnitAvailability[]>;
export declare function createGetAvailableInventoryNearbyInput(queryResultSettings: IQueryResultSettings, itemIds: ItemUnit[] | null, searchArea: SearchArea | null): IDataServiceRequest;
export declare function getAvailableInventoryNearbyAsync(context: IContext, itemIds: ItemUnit[] | null, searchArea: SearchArea | null): AsyncResult<OrgUnitAvailability[]>;
export declare function createGetProductAvailabilityByDimensionsInput(queryResultSettings: IQueryResultSettings, inventLocationIds: string[] | null, productId: number, productDimensionCombinations: ProductDimensionCombination[] | null): IDataServiceRequest;
export declare function getProductAvailabilityByDimensionsAsync(context: IContext, inventLocationIds: string[] | null, productId: number, productDimensionCombinations: ProductDimensionCombination[] | null): AsyncResult<OrgUnitAvailability[]>;
export declare function createSearchProductAvailabilityInput(queryResultSettings: IQueryResultSettings, productId: number, orgUnitAvailabilitySearchCriteria: OrgUnitAvailabilitySearchCriteria | null): IDataServiceRequest;
export declare function searchProductAvailabilityAsync(context: IContext, productId: number, orgUnitAvailabilitySearchCriteria: OrgUnitAvailabilitySearchCriteria | null): AsyncResult<OrgUnitAvailability[]>;
export declare function createGetTerminalInfoInput(queryResultSettings: IQueryResultSettings, orgUnitNumber: string, deviceType: number): IDataServiceRequest;
export declare function getTerminalInfoAsync(context: IContext, orgUnitNumber: string, deviceType: number): AsyncResult<TerminalInfo[]>;
export declare function createGetProductAvailabilityInput(queryResultSettings: IQueryResultSettings, productId: number): IDataServiceRequest;
export declare function getProductAvailabilityAsync(context: IContext, productId: number): AsyncResult<OrgUnitAvailability[]>;
