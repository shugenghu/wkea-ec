{"version":3,"file":"CustomersDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/CustomersDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { Customer, CustomerSearchCriteria, GlobalCustomer, CustomerSearchByFieldCriteria, CustomerTimelineItem, SalesOrder, OrderShipments, PurchaseHistory, CustomerSearchField, CustomerTimelineItemTypeMap, CustomerTimelineRefiner, CustomerTitle } from '../Entities/CommerceTypes.g';\n    import { CustomerClass, GlobalCustomerClass, CustomerTimelineItemClass, SalesOrderClass, OrderShipmentsClass, PurchaseHistoryClass, CustomerSearchFieldClass, CustomerTimelineItemTypeMapClass, CustomerTimelineRefinerClass, CustomerTitleClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function customersQuery(accountNumber?: string): DataServiceQuery {\n    // Temp fix to return '' instead of null. Requires manual update until TSProxy generator updated\n      var key = (accountNumber !== null && accountNumber !== undefined) ? { AccountNumber: accountNumber } : null;\n      return new DataServiceQuery(\"Customers\", \"Customer\", CustomerClass, key);\n    }\n    \n    export function createCreateInput(entity: Customer): IDataServiceRequest {\n        return customersQuery().create(entity);\n    }\n    export function createCustomerAsync(context: IContext, entity: Customer): AsyncResult<Customer> {\n        const request = createCreateInput(entity, );\n        return executeAction<Customer>(request, context);\n    }\n    export function createUpdateInput(entity: Customer): IDataServiceRequest {\n        return customersQuery(entity.AccountNumber).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: Customer): AsyncResult<Customer> {\n        const request = createUpdateInput(entity, );\n        return executeAction<Customer>(request, context);\n    }\n    export function createDeleteAsync(entity: Customer): IDataServiceRequest {\n        return customersQuery(entity.AccountNumber).delete();\n    }\n    export function deleteAsync(context: IContext, entity: Customer): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(accountNumber: string): IDataServiceRequest {\n        return customersQuery(accountNumber).read();\n    }\n    export function readAsync(context: IContext, accountNumber: string): AsyncResult<Customer> {\n        const request = createReadAsync(accountNumber, );\n        return executeAction<Customer>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return customersQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<Customer[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<Customer[]>(request, context);\n    }\n    \n    export function createSearchInput(queryResultSettings: IQueryResultSettings, customerSearchCriteria: CustomerSearchCriteria | null): IDataServiceRequest {      \n        const query = customersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('Search', true, GlobalCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'GlobalCustomer'}, {customerSearchCriteria: customerSearchCriteria });\n    }    \n    \n    export function searchAsync(context: IContext, customerSearchCriteria: CustomerSearchCriteria | null):AsyncResult<GlobalCustomer[]> {\n        const request = createSearchInput(context.queryResultSettings, customerSearchCriteria, );\n        return executeAction<GlobalCustomer[]>(request, context);\n    }          \n          \n    export function createSearchByFieldsInput(queryResultSettings: IQueryResultSettings, customerSearchByFieldCriteria: CustomerSearchByFieldCriteria | null): IDataServiceRequest {      \n        const query = customersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchByFields', true, GlobalCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'GlobalCustomer'}, {CustomerSearchByFieldCriteria: customerSearchByFieldCriteria });\n    }    \n    \n    export function searchByFieldsAsync(context: IContext, customerSearchByFieldCriteria: CustomerSearchByFieldCriteria | null):AsyncResult<GlobalCustomer[]> {\n        const request = createSearchByFieldsInput(context.queryResultSettings, customerSearchByFieldCriteria, );\n        return executeAction<GlobalCustomer[]>(request, context);\n    }          \n          \n    export function createGetByAccountNumbersInput(queryResultSettings: IQueryResultSettings, accountNumbers: string[] | null, searchLocationValue: number): IDataServiceRequest {      \n        const query = customersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetByAccountNumbers', true, CustomerClass, 'true', { bypassCache: 'none', returnEntity: 'Customer'}, {accountNumbers: accountNumbers, searchLocationValue: searchLocationValue });\n    }    \n    \n    export function getByAccountNumbersAsync(context: IContext, accountNumbers: string[] | null, searchLocationValue: number):AsyncResult<Customer[]> {\n        const request = createGetByAccountNumbersInput(context.queryResultSettings, accountNumbers, searchLocationValue, );\n        return executeAction<Customer[]>(request, context);\n    }          \n          \n    export function createCreateCustomerTimelineItemInput(customerTimelineItem: CustomerTimelineItem | null): IDataServiceRequest {      \n        const query = customersQuery();\n        return query.createDataServiceRequestForOperation('CreateCustomerTimelineItem', true, CustomerTimelineItemClass, 'false', { bypassCache: 'get', returnEntity: 'CustomerTimelineItem'}, {customerTimelineItem: customerTimelineItem });\n    }    \n    \n    export function createCustomerTimelineItemAsync(context: IContext, customerTimelineItem: CustomerTimelineItem | null):AsyncResult<CustomerTimelineItem> {\n        const request = createCreateCustomerTimelineItemInput(customerTimelineItem, );\n        return executeAction<CustomerTimelineItem>(request, context);\n    }          \n          \n    export function createUpdateCustomerTimelineItemInput(customerTimelineItem: CustomerTimelineItem | null): IDataServiceRequest {      \n        const query = customersQuery();\n        return query.createDataServiceRequestForOperation('UpdateCustomerTimelineItem', true, CustomerTimelineItemClass, 'false', { bypassCache: 'get', returnEntity: 'CustomerTimelineItem'}, {customerTimelineItem: customerTimelineItem });\n    }    \n    \n    export function updateCustomerTimelineItemAsync(context: IContext, customerTimelineItem: CustomerTimelineItem | null):AsyncResult<CustomerTimelineItem> {\n        const request = createUpdateCustomerTimelineItemInput(customerTimelineItem, );\n        return executeAction<CustomerTimelineItem>(request, context);\n    }          \n          \n    export function createGetOrderHistoryInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      \n        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetOrderHistory', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, { });\n    }    \n    \n    export function getOrderHistoryAsync(context: IContext, accountNumber: string):AsyncResult<SalesOrder[]> {\n        const request = createGetOrderHistoryInput(context.queryResultSettings, accountNumber, );\n        return executeAction<SalesOrder[]>(request, context);\n    }          \n          \n    export function createGetOrderShipmentsHistoryInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      \n        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetOrderShipmentsHistory', true, OrderShipmentsClass, 'true', { bypassCache: 'none', returnEntity: 'OrderShipments'}, { });\n    }    \n    \n    export function getOrderShipmentsHistoryAsync(context: IContext, accountNumber: string):AsyncResult<OrderShipments[]> {\n        const request = createGetOrderShipmentsHistoryInput(context.queryResultSettings, accountNumber, );\n        return executeAction<OrderShipments[]>(request, context);\n    }          \n          \n    export function createPostNonTransactionalActivityLoyaltyPointsInput(loyaltyCardId: string | null, channelId: number, affiliationId: number, activityTypeId: string | null): IDataServiceRequest {      \n        const query = customersQuery();\n        return query.createDataServiceRequestForOperation('PostNonTransactionalActivityLoyaltyPoints', true, '', '', { bypassCache: 'get', returnEntity: ''}, {loyaltyCardId: loyaltyCardId, channelId: channelId, affiliationId: affiliationId, activityTypeId: activityTypeId });\n    }    \n    \n    export function postNonTransactionalActivityLoyaltyPointsAsync(context: IContext, loyaltyCardId: string | null, channelId: number, affiliationId: number, activityTypeId: string | null):AsyncResult<NullResult> {\n        const request = createPostNonTransactionalActivityLoyaltyPointsInput(loyaltyCardId, channelId, affiliationId, activityTypeId, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createGetPurchaseHistoryInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      \n        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetPurchaseHistory', false, PurchaseHistoryClass, 'true', { bypassCache: 'none', returnEntity: 'PurchaseHistory'}, { });\n    }    \n    \n    export function getPurchaseHistoryAsync(context: IContext, accountNumber: string):AsyncResult<PurchaseHistory[]> {\n        const request = createGetPurchaseHistoryInput(context.queryResultSettings, accountNumber, );\n        return executeAction<PurchaseHistory[]>(request, context);\n    }          \n          \n    export function createGetCustomerSearchFieldsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      \n        const query = customersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetCustomerSearchFields', false, CustomerSearchFieldClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerSearchField'}, { });\n    }    \n    \n    export function getCustomerSearchFieldsAsync(context: IContext):AsyncResult<CustomerSearchField[]> {\n        const request = createGetCustomerSearchFieldsInput(context.queryResultSettings, );\n        return executeAction<CustomerSearchField[]>(request, context);\n    }          \n          \n    export function createGetCustomerTimelineItemTypesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      \n        const query = customersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetCustomerTimelineItemTypes', false, CustomerTimelineItemTypeMapClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineItemTypeMap'}, { });\n    }    \n    \n    export function getCustomerTimelineItemTypesAsync(context: IContext):AsyncResult<CustomerTimelineItemTypeMap[]> {\n        const request = createGetCustomerTimelineItemTypesInput(context.queryResultSettings, );\n        return executeAction<CustomerTimelineItemTypeMap[]>(request, context);\n    }          \n          \n    export function createGetCustomerTimelineItemsInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      \n        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetCustomerTimelineItems', false, CustomerTimelineItemClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineItem'}, { });\n    }    \n    \n    export function getCustomerTimelineItemsAsync(context: IContext, accountNumber: string):AsyncResult<CustomerTimelineItem[]> {\n        const request = createGetCustomerTimelineItemsInput(context.queryResultSettings, accountNumber, );\n        return executeAction<CustomerTimelineItem[]>(request, context);\n    }          \n          \n    export function createGetCustomerTimelineRefinersInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      \n        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetCustomerTimelineRefiners', false, CustomerTimelineRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineRefiner'}, { });\n    }    \n    \n    export function getCustomerTimelineRefinersAsync(context: IContext, accountNumber: string):AsyncResult<CustomerTimelineRefiner[]> {\n        const request = createGetCustomerTimelineRefinersInput(context.queryResultSettings, accountNumber, );\n        return executeAction<CustomerTimelineRefiner[]>(request, context);\n    }          \n          \n    export function createGetTitlesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      \n        const query = customersQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTitles', false, CustomerTitleClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTitle'}, { });\n    }    \n    \n    export function getTitlesAsync(context: IContext):AsyncResult<CustomerTitle[]> {\n        const request = createGetTitlesInput(context.queryResultSettings, );\n        return executeAction<CustomerTitle[]>(request, context);\n    }          \n          \n    "]}