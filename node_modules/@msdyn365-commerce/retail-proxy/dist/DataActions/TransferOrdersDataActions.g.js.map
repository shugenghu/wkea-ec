{"version":3,"file":"TransferOrdersDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/TransferOrdersDataActions.g.ts"],"names":[],"mappings":"AAEI,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAEvD,OAAO,EAAE,kBAAkB,EAAE,sBAAsB,EAAE,YAAY,EAAE,yBAAyB,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAEjJ,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAGjD,SAAS,mBAAmB,CAAC,OAAgB;IAC3C,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAClD,OAAO,IAAI,gBAAgB,CAAC,gBAAgB,EAAE,eAAe,EAAE,kBAAkB,EAAE,GAAG,CAAC,CAAC;AAC1F,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAAqB;IACnD,OAAO,mBAAmB,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAChD,CAAC;AACD,MAAM,UAAU,wBAAwB,CAAC,OAAiB,EAAE,MAAqB;IAC7E,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAgB,OAAO,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,MAAqB;IACnD,OAAO,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC9D,CAAC;AACD,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,MAAqB;IAChE,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAgB,OAAO,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,MAAqB;IACnD,OAAO,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;AACxD,CAAC;AACD,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,MAAqB;IAChE,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAG,CAAC;IAC5C,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,MAAM,UAAU,eAAe,CAAC,OAAe;IAC3C,OAAO,mBAAmB,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;AAC/C,CAAC;AACD,MAAM,UAAU,SAAS,CAAC,OAAiB,EAAE,OAAe;IACxD,MAAM,OAAO,GAAG,eAAe,CAAC,OAAO,CAAG,CAAC;IAC3C,OAAO,aAAa,CAAgB,OAAO,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AACD,MAAM,UAAU,kBAAkB,CAAC,mBAAyC;IACxE,OAAO,mBAAmB,EAAE,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,CAAC;AAC5E,CAAC;AACD,MAAM,UAAU,YAAY,CAAC,OAAiB;IAC1C,MAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,mBAAmB,CAAG,CAAC;IAClE,OAAO,aAAa,CAAkB,OAAO,EAAE,OAAO,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,OAAe,EAAE,iBAAiC;IAChF,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAC3C,OAAO,KAAK,CAAC,oCAAoC,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,EAAC,EAAE,EAAC,iBAAiB,EAAE,iBAAiB,EAAE,CAAC,CAAC;AAChK,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,OAAiB,EAAE,OAAe,EAAE,iBAAiC;IAC7F,MAAM,OAAO,GAAG,iBAAiB,CAAC,OAAO,EAAE,iBAAiB,CAAG,CAAC;IAChE,OAAO,aAAa,CAAa,OAAO,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,gCAAgC,CAAC,mBAAyC,EAAE,OAAe;IACvG,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC/E,OAAO,KAAK,CAAC,oCAAoC,CAAC,uBAAuB,EAAE,IAAI,EAAE,sBAAsB,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,mBAAmB,EAAC,EAAE,EAAG,CAAC,CAAC;AACrL,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,OAAiB,EAAE,OAAe;IACzE,MAAM,OAAO,GAAG,gCAAgC,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAG,CAAC;IACzF,OAAO,aAAa,CAAsB,OAAO,EAAE,OAAO,CAAC,CAAC;AAChE,CAAC;AAED,MAAM,UAAU,mCAAmC,CAAC,mBAAyC,EAAE,OAAe,EAAE,kBAA8C;IAC1J,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC/E,OAAO,KAAK,CAAC,oCAAoC,CAAC,0BAA0B,EAAE,IAAI,EAAE,sBAAsB,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,mBAAmB,EAAC,EAAE,EAAC,kBAAkB,EAAE,kBAAkB,EAAE,CAAC,CAAC;AAC7N,CAAC;AAED,MAAM,UAAU,6BAA6B,CAAC,OAAiB,EAAE,OAAe,EAAE,kBAA8C;IAC5H,MAAM,OAAO,GAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,EAAE,kBAAkB,CAAG,CAAC;IAChH,OAAO,aAAa,CAAsB,OAAO,EAAE,OAAO,CAAC,CAAC;AAChE,CAAC;AAED,MAAM,UAAU,mCAAmC,CAAC,mBAAyC,EAAE,OAAe,EAAE,kBAA8C;IAC1J,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC/E,OAAO,KAAK,CAAC,oCAAoC,CAAC,0BAA0B,EAAE,IAAI,EAAE,sBAAsB,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,mBAAmB,EAAC,EAAE,EAAC,kBAAkB,EAAE,kBAAkB,EAAE,CAAC,CAAC;AAC7N,CAAC;AAED,MAAM,UAAU,6BAA6B,CAAC,OAAiB,EAAE,OAAe,EAAE,kBAA8C;IAC5H,MAAM,OAAO,GAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,EAAE,kBAAkB,CAAG,CAAC;IAChH,OAAO,aAAa,CAAsB,OAAO,EAAE,OAAO,CAAC,CAAC;AAChE,CAAC;AAED,MAAM,UAAU,mCAAmC,CAAC,mBAAyC,EAAE,OAAe;IAC1G,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC/E,OAAO,KAAK,CAAC,oCAAoC,CAAC,0BAA0B,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAC,EAAE,EAAG,CAAC,CAAC;AACpK,CAAC;AAED,MAAM,UAAU,6BAA6B,CAAC,OAAiB,EAAE,OAAe;IAC5E,MAAM,OAAO,GAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAG,CAAC;IAC5F,OAAO,aAAa,CAAY,OAAO,EAAE,OAAO,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,kCAAkC,CAAC,OAAe,EAAE,aAA4B,EAAE,WAA0B;IACxH,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAC3C,OAAO,KAAK,CAAC,oCAAoC,CAAC,yBAAyB,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAC,EAAE,EAAC,aAAa,EAAE,aAAa,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;AACzN,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,OAAiB,EAAE,OAAe,EAAE,aAA4B,EAAE,WAA0B;IACrI,MAAM,OAAO,GAAG,kCAAkC,CAAC,OAAO,EAAE,aAAa,EAAE,WAAW,CAAG,CAAC;IAC1F,OAAO,aAAa,CAAU,OAAO,EAAE,OAAO,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,mCAAmC,CAAC,mBAAyC,EAAE,OAAe,EAAE,kBAA8C;IAC1J,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC/E,OAAO,KAAK,CAAC,oCAAoC,CAAC,0BAA0B,EAAE,IAAI,EAAE,sBAAsB,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,mBAAmB,EAAC,EAAE,EAAC,kBAAkB,EAAE,kBAAkB,EAAE,CAAC,CAAC;AAC7N,CAAC;AAED,MAAM,UAAU,6BAA6B,CAAC,OAAiB,EAAE,OAAe,EAAE,kBAA8C;IAC5H,MAAM,OAAO,GAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,EAAE,kBAAkB,CAAG,CAAC;IAChH,OAAO,aAAa,CAAsB,OAAO,EAAE,OAAO,CAAC,CAAC;AAChE,CAAC;AAED,MAAM,UAAU,mCAAmC,CAAC,mBAAyC,EAAE,OAAe;IAC1G,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC/E,OAAO,KAAK,CAAC,oCAAoC,CAAC,0BAA0B,EAAE,IAAI,EAAE,yBAAyB,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,sBAAsB,EAAC,EAAE,EAAG,CAAC,CAAC;AAC9L,CAAC;AAED,MAAM,UAAU,6BAA6B,CAAC,OAAiB,EAAE,OAAe;IAC5E,MAAM,OAAO,GAAG,mCAAmC,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAG,CAAC;IAC5F,OAAO,aAAa,CAAyB,OAAO,EAAE,OAAO,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,UAAU,iCAAiC,CAAC,mBAAyC,EAAE,OAAe,EAAE,SAAwB,EAAE,wBAAyD;IAC7L,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC/E,OAAO,KAAK,CAAC,oCAAoC,CAAC,wBAAwB,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAC,EAAE,EAAC,SAAS,EAAE,SAAS,EAAE,wBAAwB,EAAE,wBAAwB,EAAE,CAAC,CAAC;AAC1O,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,OAAiB,EAAE,OAAe,EAAE,SAAwB,EAAE,wBAAyD;IAC/J,MAAM,OAAO,GAAG,iCAAiC,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,EAAE,SAAS,EAAE,wBAAwB,CAAG,CAAC;IAC/H,OAAO,aAAa,CAAY,OAAO,EAAE,OAAO,CAAC,CAAC;AACtD,CAAC","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { TransferOrder, TransferOrderLine, Comment, TransferOrderJournal, ReceiptRetrievalCriteria, Receipt } from '../Entities/CommerceTypes.g';\n    import { TransferOrderClass, TransferOrderLineClass, CommentClass, TransferOrderJournalClass, ReceiptClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function transferOrdersQuery(orderId?: string): DataServiceQuery {\n      var key = (orderId) ? { OrderId: orderId } : null;\n      return new DataServiceQuery(\"TransferOrders\", \"TransferOrder\", TransferOrderClass, key);\n    }\n    \n    export function createCreateInput(entity: TransferOrder): IDataServiceRequest {\n        return transferOrdersQuery().create(entity);\n    }\n    export function createTransferOrderAsync(context: IContext, entity: TransferOrder): AsyncResult<TransferOrder> {\n        const request = createCreateInput(entity, );\n        return executeAction<TransferOrder>(request, context);\n    }\n    export function createUpdateInput(entity: TransferOrder): IDataServiceRequest {\n        return transferOrdersQuery(entity.OrderId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: TransferOrder): AsyncResult<TransferOrder> {\n        const request = createUpdateInput(entity, );\n        return executeAction<TransferOrder>(request, context);\n    }\n    export function createDeleteAsync(entity: TransferOrder): IDataServiceRequest {\n        return transferOrdersQuery(entity.OrderId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: TransferOrder): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(orderId: string): IDataServiceRequest {\n        return transferOrdersQuery(orderId).read();\n    }\n    export function readAsync(context: IContext, orderId: string): AsyncResult<TransferOrder> {\n        const request = createReadAsync(orderId, );\n        return executeAction<TransferOrder>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return transferOrdersQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<TransferOrder[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<TransferOrder[]>(request, context);\n    }\n    \n    export function createCommitInput(orderId: string, skipNotValidLines: boolean | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId);\n        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, {skipNotValidLines: skipNotValidLines });\n    }    \n    \n    export function commitAsync(context: IContext, orderId: string, skipNotValidLines: boolean | null):AsyncResult<NullResult> {\n        const request = createCommitInput(orderId, skipNotValidLines, );\n        return executeAction<NullResult>(request, context);\n    }          \n          \n    export function createGetTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'none', returnEntity: 'TransferOrderLine'}, { });\n    }    \n    \n    export function getTransferOrderLinesAsync(context: IContext, orderId: string):AsyncResult<TransferOrderLine[]> {\n        const request = createGetTransferOrderLinesInput(context.queryResultSettings, orderId, );\n        return executeAction<TransferOrderLine[]>(request, context);\n    }          \n          \n    export function createCreateTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('CreateTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });\n    }    \n    \n    export function createTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {\n        const request = createCreateTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );\n        return executeAction<TransferOrderLine[]>(request, context);\n    }          \n          \n    export function createUpdateTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('UpdateTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });\n    }    \n    \n    export function updateTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {\n        const request = createUpdateTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );\n        return executeAction<TransferOrderLine[]>(request, context);\n    }          \n          \n    export function createGetTransferOrderCommentsInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTransferOrderComments', true, CommentClass, 'true', { bypassCache: 'none', returnEntity: 'Comment'}, { });\n    }    \n    \n    export function getTransferOrderCommentsAsync(context: IContext, orderId: string):AsyncResult<Comment[]> {\n        const request = createGetTransferOrderCommentsInput(context.queryResultSettings, orderId, );\n        return executeAction<Comment[]>(request, context);\n    }          \n          \n    export function createAddTransferOrderCommentInput(orderId: string, authorStaffId: string | null, commentText: string | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId);\n        return query.createDataServiceRequestForOperation('AddTransferOrderComment', true, CommentClass, 'false', { bypassCache: 'get', returnEntity: 'Comment'}, {AuthorStaffId: authorStaffId, CommentText: commentText });\n    }    \n    \n    export function addTransferOrderCommentAsync(context: IContext, orderId: string, authorStaffId: string | null, commentText: string | null):AsyncResult<Comment> {\n        const request = createAddTransferOrderCommentInput(orderId, authorStaffId, commentText, );\n        return executeAction<Comment>(request, context);\n    }          \n          \n    export function createDeleteTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('DeleteTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });\n    }    \n    \n    export function deleteTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {\n        const request = createDeleteTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );\n        return executeAction<TransferOrderLine[]>(request, context);\n    }          \n          \n    export function createGetTransferOrderJournalsInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTransferOrderJournals', true, TransferOrderJournalClass, 'true', { bypassCache: 'none', returnEntity: 'TransferOrderJournal'}, { });\n    }    \n    \n    export function getTransferOrderJournalsAsync(context: IContext, orderId: string):AsyncResult<TransferOrderJournal[]> {\n        const request = createGetTransferOrderJournalsInput(context.queryResultSettings, orderId, );\n        return executeAction<TransferOrderJournal[]>(request, context);\n    }          \n          \n    export function createGetTransferPackingSlipInput(queryResultSettings: IQueryResultSettings, orderId: string, voucherId: string | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest {      \n        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('GetTransferPackingSlip', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {voucherId: voucherId, receiptRetrievalCriteria: receiptRetrievalCriteria });\n    }    \n    \n    export function getTransferPackingSlipAsync(context: IContext, orderId: string, voucherId: string | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null):AsyncResult<Receipt[]> {\n        const request = createGetTransferPackingSlipInput(context.queryResultSettings, orderId, voucherId, receiptRetrievalCriteria, );\n        return executeAction<Receipt[]>(request, context);\n    }          \n          \n    "]}