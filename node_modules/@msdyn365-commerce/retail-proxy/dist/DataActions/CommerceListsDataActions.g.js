import { DataServiceQuery } from '../DataServiceQuery';
import { CommerceListClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function commerceListsQuery(id) {
    var key = (id) ? { Id: id } : null;
    return new DataServiceQuery("CommerceLists", "CommerceList", CommerceListClass, key);
}
export function createCreateInput(entity) {
    return commerceListsQuery().create(entity);
}
export function createCommerceListAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return commerceListsQuery(entity.Id).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return commerceListsQuery(entity.Id).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(id) {
    return commerceListsQuery(id).read();
}
export function readAsync(context, id) {
    const request = createReadAsync(id);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return commerceListsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetByCustomerInput(queryResultSettings, customerId) {
    const query = commerceListsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetByCustomer', true, CommerceListClass, 'true', { bypassCache: 'none', returnEntity: 'CommerceList' }, { customerId: customerId });
}
export function getByCustomerAsync(context, customerId) {
    const request = createGetByCustomerInput(context.queryResultSettings, customerId);
    return executeAction(request, context);
}
export function createAddLinesInput(id, commerceListLines) {
    const query = commerceListsQuery(id);
    return query.createDataServiceRequestForOperation('AddLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList' }, { commerceListLines: commerceListLines });
}
export function addLinesAsync(context, id, commerceListLines) {
    const request = createAddLinesInput(id, commerceListLines);
    return executeAction(request, context);
}
export function createUpdateLinesInput(id, commerceListLines) {
    const query = commerceListsQuery(id);
    return query.createDataServiceRequestForOperation('UpdateLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList' }, { commerceListLines: commerceListLines });
}
export function updateLinesAsync(context, id, commerceListLines) {
    const request = createUpdateLinesInput(id, commerceListLines);
    return executeAction(request, context);
}
export function createRemoveLinesInput(id, commerceListLines) {
    const query = commerceListsQuery(id);
    return query.createDataServiceRequestForOperation('RemoveLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList' }, { commerceListLines: commerceListLines });
}
export function removeLinesAsync(context, id, commerceListLines) {
    const request = createRemoveLinesInput(id, commerceListLines);
    return executeAction(request, context);
}
export function createMoveLinesInput(commerceListLines, destinationId) {
    const query = commerceListsQuery();
    return query.createDataServiceRequestForOperation('MoveLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList' }, { commerceListLines: commerceListLines, destinationId: destinationId });
}
export function moveLinesAsync(context, commerceListLines, destinationId) {
    const request = createMoveLinesInput(commerceListLines, destinationId);
    return executeAction(request, context);
}
export function createCopyLinesInput(commerceListLines, destinationId) {
    const query = commerceListsQuery();
    return query.createDataServiceRequestForOperation('CopyLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList' }, { commerceListLines: commerceListLines, destinationId: destinationId });
}
export function copyLinesAsync(context, commerceListLines, destinationId) {
    const request = createCopyLinesInput(commerceListLines, destinationId);
    return executeAction(request, context);
}
export function createAddContributorsInput(id, commerceListContributors) {
    const query = commerceListsQuery(id);
    return query.createDataServiceRequestForOperation('AddContributors', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList' }, { commerceListContributors: commerceListContributors });
}
export function addContributorsAsync(context, id, commerceListContributors) {
    const request = createAddContributorsInput(id, commerceListContributors);
    return executeAction(request, context);
}
export function createRemoveContributorsInput(id, commerceListContributors) {
    const query = commerceListsQuery(id);
    return query.createDataServiceRequestForOperation('RemoveContributors', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList' }, { commerceListContributors: commerceListContributors });
}
export function removeContributorsAsync(context, id, commerceListContributors) {
    const request = createRemoveContributorsInput(id, commerceListContributors);
    return executeAction(request, context);
}
export function createCreateInvitationsInput(id, commerceListInvitations) {
    const query = commerceListsQuery(id);
    return query.createDataServiceRequestForOperation('CreateInvitations', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList' }, { commerceListInvitations: commerceListInvitations });
}
export function createInvitationsAsync(context, id, commerceListInvitations) {
    const request = createCreateInvitationsInput(id, commerceListInvitations);
    return executeAction(request, context);
}
export function createAcceptInvitationInput(invitationToken, customerId) {
    const query = commerceListsQuery();
    return query.createDataServiceRequestForOperation('AcceptInvitation', true, '', '', { bypassCache: 'get', returnEntity: '' }, { invitationToken: invitationToken, customerId: customerId });
}
export function acceptInvitationAsync(context, invitationToken, customerId) {
    const request = createAcceptInvitationInput(invitationToken, customerId);
    return executeAction(request, context);
}
//# sourceMappingURL=CommerceListsDataActions.g.js.map