import { AsyncResult } from '../async-result';
import { BusinessPartner, BusinessPartnerProspect, BusinessPartnerUser } from '../Entities/CommerceTypes.g';
import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
export declare function createCreateInput(entity: BusinessPartner): IDataServiceRequest;
export declare function createBusinessPartnerAsync(context: IContext, entity: BusinessPartner): AsyncResult<BusinessPartner>;
export declare function createUpdateInput(entity: BusinessPartner): IDataServiceRequest;
export declare function updateAsync(context: IContext, entity: BusinessPartner): AsyncResult<BusinessPartner>;
export declare function createDeleteAsync(entity: BusinessPartner): IDataServiceRequest;
export declare function deleteAsync(context: IContext, entity: BusinessPartner): AsyncResult<NullResult>;
export declare function createReadAsync(businessPartnerId: string): IDataServiceRequest;
export declare function readAsync(context: IContext, businessPartnerId: string): AsyncResult<BusinessPartner>;
export declare function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest;
export declare function readAllAsync(context: IContext): AsyncResult<BusinessPartner[]>;
export declare function createCreateProspectInput(businessPartnerProspect: BusinessPartnerProspect | null): IDataServiceRequest;
export declare function createProspectAsync(context: IContext, businessPartnerProspect: BusinessPartnerProspect | null): AsyncResult<BusinessPartnerProspect>;
export declare function createGetCurrentInput(): IDataServiceRequest;
export declare function getCurrentAsync(context: IContext): AsyncResult<BusinessPartner>;
export declare function createGetUsersInput(queryResultSettings: IQueryResultSettings, businessPartnerId: string): IDataServiceRequest;
export declare function getUsersAsync(context: IContext, businessPartnerId: string): AsyncResult<BusinessPartnerUser[]>;
