import { DataServiceQuery } from '../DataServiceQuery';
import { RecommendationClass, RecommendedElementClass } from '../Entities/CommerceModels.g';
import { executeAction } from '../retail-action';
function recommendationsQuery(id) {
    var key = (id) ? { Id: id } : null;
    return new DataServiceQuery("Recommendations", "Recommendation", RecommendationClass, key);
}
export function createCreateInput(entity) {
    return recommendationsQuery().create(entity);
}
export function createRecommendationAsync(context, entity) {
    const request = createCreateInput(entity);
    return executeAction(request, context);
}
export function createUpdateInput(entity) {
    return recommendationsQuery(entity.Id).update(entity);
}
export function updateAsync(context, entity) {
    const request = createUpdateInput(entity);
    return executeAction(request, context);
}
export function createDeleteAsync(entity) {
    return recommendationsQuery(entity.Id).delete();
}
export function deleteAsync(context, entity) {
    const request = createDeleteAsync(entity);
    return executeAction(request, context);
}
export function createReadAsync(id) {
    return recommendationsQuery(id).read();
}
export function readAsync(context, id) {
    const request = createReadAsync(id);
    return executeAction(request, context);
}
export function createReadAllAsync(queryResultSettings) {
    return recommendationsQuery().resultSettings(queryResultSettings).read();
}
export function readAllAsync(context) {
    const request = createReadAllAsync(context.queryResultSettings);
    return executeAction(request, context);
}
export function createGetElementsInput(queryResultSettings, id, recommendationCriteria) {
    const query = recommendationsQuery(id).resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetElements', true, RecommendedElementClass, 'true', { bypassCache: 'none', returnEntity: 'RecommendedElement' }, { recommendationCriteria: recommendationCriteria });
}
export function getElementsAsync(context, id, recommendationCriteria) {
    const request = createGetElementsInput(context.queryResultSettings, id, recommendationCriteria);
    return executeAction(request, context);
}
//# sourceMappingURL=RecommendationsDataActions.g.js.map