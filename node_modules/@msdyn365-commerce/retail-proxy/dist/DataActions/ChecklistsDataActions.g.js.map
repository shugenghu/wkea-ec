{"version":3,"file":"ChecklistsDataActions.g.js","sourceRoot":"","sources":["../../src/DataActions/ChecklistsDataActions.g.ts"],"names":[],"mappings":"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","sourcesContent":["    // <auto-generated />\n    import { AsyncResult } from '../async-result';\n    import { DataServiceQuery } from '../DataServiceQuery';\n    import { Checklist, ChecklistSearchCriteria, TaskSearchCriteria, ChecklistTask } from '../Entities/CommerceTypes.g';\n    import { ChecklistClass, ChecklistTaskClass } from '../Entities/CommerceModels.g';\n    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';\n    import { executeAction } from '../retail-action';\n    \n    \n    function checklistsQuery(recordId?: number): DataServiceQuery {\n      var key = (recordId) ? { RecordId: recordId } : null;\n      return new DataServiceQuery(\"Checklists\", \"Checklist\", ChecklistClass, key);\n    }\n    \n    export function createCreateInput(entity: Checklist): IDataServiceRequest {\n        return checklistsQuery().create(entity);\n    }\n    export function createChecklistAsync(context: IContext, entity: Checklist): AsyncResult<Checklist> {\n        const request = createCreateInput(entity, );\n        return executeAction<Checklist>(request, context);\n    }\n    export function createUpdateInput(entity: Checklist): IDataServiceRequest {\n        return checklistsQuery(entity.RecordId).update(entity);\n    }\n    export function updateAsync(context: IContext, entity: Checklist): AsyncResult<Checklist> {\n        const request = createUpdateInput(entity, );\n        return executeAction<Checklist>(request, context);\n    }\n    export function createDeleteAsync(entity: Checklist): IDataServiceRequest {\n        return checklistsQuery(entity.RecordId).delete();\n    }\n    export function deleteAsync(context: IContext, entity: Checklist): AsyncResult<NullResult> {\n        const request = createDeleteAsync(entity, );\n        return executeAction<NullResult>(request, context);\n    }\n    export function createReadAsync(recordId: number): IDataServiceRequest {\n        return checklistsQuery(recordId).read();\n    }\n    export function readAsync(context: IContext, recordId: number): AsyncResult<Checklist> {\n        const request = createReadAsync(recordId, );\n        return executeAction<Checklist>(request, context);\n    }\n    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {\n        return checklistsQuery().resultSettings(queryResultSettings).read();\n    }\n    export function readAllAsync(context: IContext): AsyncResult<Checklist[]> {\n        const request = createReadAllAsync(context.queryResultSettings, );\n        return executeAction<Checklist[]>(request, context);\n    }\n    \n    export function createSearchChecklistsInput(queryResultSettings: IQueryResultSettings, checklistSearchCriteria: ChecklistSearchCriteria | null): IDataServiceRequest {      \n        const query = checklistsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchChecklists', true, ChecklistClass, 'true', { bypassCache: 'none', returnEntity: 'Checklist'}, {checklistSearchCriteria: checklistSearchCriteria });\n    }    \n    \n    export function searchChecklistsAsync(context: IContext, checklistSearchCriteria: ChecklistSearchCriteria | null):AsyncResult<Checklist[]> {\n        const request = createSearchChecklistsInput(context.queryResultSettings, checklistSearchCriteria, );\n        return executeAction<Checklist[]>(request, context);\n    }          \n          \n    export function createSearchTasksInput(queryResultSettings: IQueryResultSettings, taskSearchCriteria: TaskSearchCriteria | null): IDataServiceRequest {      \n        const query = checklistsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('SearchTasks', true, ChecklistTaskClass, 'true', { bypassCache: 'none', returnEntity: 'ChecklistTask'}, {taskSearchCriteria: taskSearchCriteria });\n    }    \n    \n    export function searchTasksAsync(context: IContext, taskSearchCriteria: TaskSearchCriteria | null):AsyncResult<ChecklistTask[]> {\n        const request = createSearchTasksInput(context.queryResultSettings, taskSearchCriteria, );\n        return executeAction<ChecklistTask[]>(request, context);\n    }          \n          \n    export function createCreateTaskInput(createTask: ChecklistTask | null): IDataServiceRequest {      \n        const query = checklistsQuery();\n        return query.createDataServiceRequestForOperation('CreateTask', true, ChecklistTaskClass, 'false', { bypassCache: 'get', returnEntity: 'ChecklistTask'}, {createTask: createTask });\n    }    \n    \n    export function createTaskAsync(context: IContext, createTask: ChecklistTask | null):AsyncResult<ChecklistTask> {\n        const request = createCreateTaskInput(createTask, );\n        return executeAction<ChecklistTask>(request, context);\n    }          \n          \n    export function createUpdateChecklistsInput(queryResultSettings: IQueryResultSettings, updateChecklists: Checklist[] | null): IDataServiceRequest {      \n        const query = checklistsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('UpdateChecklists', true, ChecklistClass, 'true', { bypassCache: 'get', returnEntity: 'Checklist'}, {updateChecklists: updateChecklists });\n    }    \n    \n    export function updateChecklistsAsync(context: IContext, updateChecklists: Checklist[] | null):AsyncResult<Checklist[]> {\n        const request = createUpdateChecklistsInput(context.queryResultSettings, updateChecklists, );\n        return executeAction<Checklist[]>(request, context);\n    }          \n          \n    export function createUpdateTasksInput(queryResultSettings: IQueryResultSettings, updateTasks: ChecklistTask[] | null): IDataServiceRequest {      \n        const query = checklistsQuery().resultSettings(queryResultSettings);\n        return query.createDataServiceRequestForOperation('UpdateTasks', true, ChecklistTaskClass, 'true', { bypassCache: 'get', returnEntity: 'ChecklistTask'}, {updateTasks: updateTasks });\n    }    \n    \n    export function updateTasksAsync(context: IContext, updateTasks: ChecklistTask[] | null):AsyncResult<ChecklistTask[]> {\n        const request = createUpdateTasksInput(context.queryResultSettings, updateTasks, );\n        return executeAction<ChecklistTask[]>(request, context);\n    }          \n          \n    "]}