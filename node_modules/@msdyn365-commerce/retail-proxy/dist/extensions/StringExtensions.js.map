{"version":3,"file":"StringExtensions.js","sourceRoot":"","sources":["../../src/extensions/StringExtensions.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// TODO - refactor to incorporate inbuilt JS extension method\n// TODO - integrate Trace.error\n\nexport const EMPTY = '';\n\nexport function convertToString(obj: any, accumulator: string[] = [], depth: number = 0): string {\n    if (!obj) {\n        return null;\n    }\n\n    if (typeof obj === 'string') {\n        return obj;\n    }\n\n    if (typeof obj !== 'object') {\n        return obj.toString();\n    }\n\n    for (const prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            const value = obj[prop];\n            const stringifyValue = convertToString(value, accumulator, depth + 1);\n            if (stringifyValue) {\n                if (accumulator.length > 0 && depth === 0) {\n                    accumulator.push('&');\n                }\n                accumulator.push(prop);\n                accumulator.push(typeof value === 'object' ? '.' : ':');\n                accumulator.push(stringifyValue);\n            }\n        }\n    }\n\n    if (depth === 0) {\n        return accumulator.join(EMPTY);\n    }\n}\n\n/**\n * Verifies whether the object array has elements.\n *\n * @param {any[]} array The array.\n * @return {boolean} True if the object has elements, false otherwise.\n */\nexport function hasElements(array?: any[]): boolean {\n    return !!array && array.length > 0;\n}\n\n/**\n * Verifies whether the string is empty or whitespace, but not null.\n *\n * @param {string} object The object.\n * @return {boolean} True if the object is empty or whitespace, false otherwise.\n */\nexport function isObjectNotEmptyOrNull(value: object): boolean {\n    return value && typeof value === 'object' && Object.keys(value).length > 0;\n}\n\n/**\n * Verifies whether the string is empty, but not null.\n *\n * @param {string} object The object.\n * @return {boolean} True if the object is empty, false otherwise.\n */\nexport function isEmpty(object: string): boolean {\n    if (object && typeof object !== 'string') {\n        // Tracer.Error(\"StringExtensions.isEmpty() has received input parameter not of type string.\");\n    }\n    return object != null && object.length === 0;\n}\n\n/**\n * Verifies whether the string is empty or whitespace, but not null.\n *\n * @param {string} object The object.\n * @return {boolean} True if the object is empty or whitespace, false otherwise.\n */\nexport function isEmptyOrWhitespace(object: string): boolean {\n    if (object && typeof object !== 'string') {\n        // Tracer.Error(\"StringExtensions.isEmptyOrWhitespace() has received input parameter not of type string.\");\n    }\n    if (object) {\n        // Make sure object is of type string\n        object = object.toString();\n\n        return typeof object.trim === 'function' && (object.trim() || '').length === 0;\n    }\n    return false;\n}\n\n/**\n * Verifies whether the string is null or whitespace.\n *\n * @param {string} object The object.\n * @return {boolean} True if the object is null or whitespace, false otherwise.\n */\nexport function isNullOrWhitespace(object: string): boolean {\n    if (object && typeof object !== 'string') {\n        // Tracer.Error(\"StringExtensions.isNullOrWhitespace() has received input parameter not of type string.\");\n    }\n    let returnValue = true;\n    try {\n        returnValue = !object;\n        if (!returnValue) {\n            // Make sure object is of type string\n            object = object.toString();\n            returnValue = object.trim().length === 0;\n        }\n    } catch (err) {\n        // Commerce.Proxy.Tracer.Error(\"StringExtensions.isNullOrWhitespace() caught exception = {0}\", err.message);\n    }\n\n    return returnValue;\n}\n\n/**\n * Pad left with padString until the required length is reached.\n */\nexport function padLeft(object: string, padString: string, length: number): string {\n    if (object && typeof object !== 'string') {\n        // Tracer.Error(\"StringExtensions.padLeft() has received input parameter not of type string.\");\n    }\n\n    if (!padString || !object) {\n        return object;\n    }\n\n    while (object.length < length) {\n        object = padString + object;\n    }\n    return object;\n}\n\n/**\n * Pad right with padString until the required length is reached.\n */\nexport function padRight(object: string, padString: string, length: number): string {\n    if (object && typeof object !== 'string') {\n        // Tracer.Error(\"StringExtensions.padRight() has received input parameter not of type string.\");\n    }\n\n    if (!padString || !object) {\n        return object;\n    }\n\n    while (object.length < length) {\n        object += padString;\n    }\n    return object;\n}\n\n/**\n * Basic C# like string format function.\n */\nexport function format(object: string, ...params: any[]): string {\n    if (object && typeof object !== 'string') {\n        // Tracer.Error(\"StringExtensions.isEmptyOrWhitespace has received input parameter not of type string.\");\n    }\n\n    if (isNullOrWhitespace(object)) {\n        return object;\n    }\n\n    if (params == null) {\n        throw new Error('StringExtensions::format Invalid parameter (params) cannot be null.');\n    }\n\n    for (let index = 0; index < params.length; index++) {\n        if (params[index] == null) {\n            throw new Error('StringExtensions::format Invalid parameter (at index ' + index + ') cannot be null or undefined.');\n        }\n\n        // escape '$' to avoid '$0' issue, '$$$$' means '$$' escaped\n        const param = params[index].toString().replace(/\\$/gi, '$$$$');\n        const regexp = new RegExp('\\\\{' + index + '\\\\}', 'gi');\n        object = object.replace(regexp, param);\n    }\n\n    return object;\n}\n\n/**\n * Returns an ordinal to indicate the ordering of the strings\n * -1: This object is less than comparison object\n * 0: This object is equal to the comparison object\n * 1: This object is greater than the comparison object\n */\nexport function compare(object: string, comparisonObject: string, ignoreCase?: boolean): number {\n    if (!object && !comparisonObject) {\n        return 0;\n    } else if (!object) {\n        return -1;\n    } else if (!comparisonObject) {\n        return 1;\n    }\n\n    const val1: string = ignoreCase ? object.toLowerCase() : object;\n    const val2: string = ignoreCase ? comparisonObject.toLowerCase() : comparisonObject;\n\n    return val1 < val2 ? -1 : val1 > val2 ? 1 : 0;\n}\n\n/**\n * Replaces new line character with <br /> for display.\n */\nexport function replaceNewLineWithBr(text: string) {\n    if (text) {\n        return replaceAll(text, '\\n', '<br />');\n    }\n\n    return text;\n}\n\n/**\n * Replaces all instances of @txtToReplace\n */\nexport function replaceAll(txt, txtToReplace, valueToReplaceWith) {\n    return txt.replace(new RegExp(txtToReplace, 'g'), valueToReplaceWith);\n}\n\n/**\n * Escapes single quote to be send as part of URLs.\n */\nexport function escapeSingleQuote(text: string) {\n    return text.replace(/(')/g, '\\'$1');\n}\n\n/**\n * Removes the trailing slashes from the URI.\n *\n * @param {string} uri The URI to clean.\n * @return {string} The uri without trailing slashes.\n */\nexport function CleanUri(uri: string): string {\n    if (isNullOrWhitespace(uri)) {\n        return EMPTY;\n    }\n\n    // the cutoff index for the string\n    let cutoffIndex = uri.length - 1;\n\n    while (cutoffIndex >= 0 && (uri[cutoffIndex] === '/' || uri[cutoffIndex] === '\\\\')) {\n        --cutoffIndex;\n    }\n\n    // if it ever becomes negative, cutoffIndex + 1 = 0\n    return uri.substr(0, cutoffIndex + 1);\n}\n\n/**\n * Determines whether the end of string matches a specified string.\n *\n * @param {string} str: The string to search in.\n * @param {string} suffix: The string to compare to the substring at the end of str.\n * @param {boolean} caseSensitive: Determines if the comparison case sensitive (false, by default)\n * @return {boolean} true if suffix matches the end of str; otherwise, false.\n */\nexport function endsWith(str: string, suffix: string, caseSensitive: boolean = false): boolean {\n    if (!str || !suffix) {\n        return false;\n    }\n    if (suffix.length > str.length) {\n        return false;\n    }\n\n    const originalString: string = caseSensitive ? str : str.toLowerCase();\n    const subString: string = caseSensitive ? suffix : suffix.toLowerCase();\n    return originalString.indexOf(subString, originalString.length - subString.length) !== -1;\n}\n"]}