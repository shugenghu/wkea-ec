/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
export declare const EMPTY = "";
export declare function convertToString(obj: any, accumulator?: string[], depth?: number): string;
/**
 * Verifies whether the object array has elements.
 *
 * @param {any[]} array The array.
 * @return {boolean} True if the object has elements, false otherwise.
 */
export declare function hasElements(array?: any[]): boolean;
/**
 * Verifies whether the string is empty or whitespace, but not null.
 *
 * @param {string} object The object.
 * @return {boolean} True if the object is empty or whitespace, false otherwise.
 */
export declare function isObjectNotEmptyOrNull(value: object): boolean;
/**
 * Verifies whether the string is empty, but not null.
 *
 * @param {string} object The object.
 * @return {boolean} True if the object is empty, false otherwise.
 */
export declare function isEmpty(object: string): boolean;
/**
 * Verifies whether the string is empty or whitespace, but not null.
 *
 * @param {string} object The object.
 * @return {boolean} True if the object is empty or whitespace, false otherwise.
 */
export declare function isEmptyOrWhitespace(object: string): boolean;
/**
 * Verifies whether the string is null or whitespace.
 *
 * @param {string} object The object.
 * @return {boolean} True if the object is null or whitespace, false otherwise.
 */
export declare function isNullOrWhitespace(object: string): boolean;
/**
 * Pad left with padString until the required length is reached.
 */
export declare function padLeft(object: string, padString: string, length: number): string;
/**
 * Pad right with padString until the required length is reached.
 */
export declare function padRight(object: string, padString: string, length: number): string;
/**
 * Basic C# like string format function.
 */
export declare function format(object: string, ...params: any[]): string;
/**
 * Returns an ordinal to indicate the ordering of the strings
 * -1: This object is less than comparison object
 * 0: This object is equal to the comparison object
 * 1: This object is greater than the comparison object
 */
export declare function compare(object: string, comparisonObject: string, ignoreCase?: boolean): number;
/**
 * Replaces new line character with <br /> for display.
 */
export declare function replaceNewLineWithBr(text: string): any;
/**
 * Replaces all instances of @txtToReplace
 */
export declare function replaceAll(txt: any, txtToReplace: any, valueToReplaceWith: any): any;
/**
 * Escapes single quote to be send as part of URLs.
 */
export declare function escapeSingleQuote(text: string): string;
/**
 * Removes the trailing slashes from the URI.
 *
 * @param {string} uri The URI to clean.
 * @return {string} The uri without trailing slashes.
 */
export declare function CleanUri(uri: string): string;
/**
 * Determines whether the end of string matches a specified string.
 *
 * @param {string} str: The string to search in.
 * @param {string} suffix: The string to compare to the substring at the end of str.
 * @param {boolean} caseSensitive: Determines if the comparison case sensitive (false, by default)
 * @return {boolean} true if suffix matches the end of str; otherwise, false.
 */
export declare function endsWith(str: string, suffix: string, caseSensitive?: boolean): boolean;
