/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
/**
 * Call all the functions on the queue with optional data and clears the queue.
 *
 * @param {Function[]} functionQueue The queue of functions to be called.
 * @param {any} callerContext The caller context for the callback.
 * @param {any} [data] Optional parameter to be passed as the function argument.
 */
export declare function callFunctions(functionQueue: Function[], callerContext: any, data?: any): void;
/**
 * Queues a function to be called later.
 *
 * @param {Function[]} functionQueue The queue of functions to be called.
 * @param {Function} callback The function to be queued.
 */
export declare function queueFunction(functionQueue: Function[], callback: Function): void;
/**
 * Help execute async calls in a sequence.
 *
 * @param {any[]} array The elements array.
 * @param {(entity, () => void) => void)} iterator Async iterator callback.
 * @param {any} [then] Success callback.
 */
export declare function forEachAsync(array: any[], iterator: any, then?: any): void;
