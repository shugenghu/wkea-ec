{"version":3,"file":"FunctionQueueHelper.js","sourceRoot":"","sources":["../../src/extensions/FunctionQueueHelper.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,YAAY,CAAC;AAEb;;;;;;GAMG;AACH,MAAM,UAAU,aAAa,CAAC,aAAyB,EAAE,aAAkB,EAAE,IAAU;IACnF,IAAI,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QACrF,OAAO;KACV;IAED,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE;QAC9B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;KAClC;IAED,+CAA+C;IAC/C,aAAa,GAAG,EAAE,CAAC;AACvB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,aAAa,CAAC,aAAyB,EAAE,QAAkB;IACvE,IAAI,CAAC,CAAC,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,CAAC,EAAE;QAChD,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAChC;AACL,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,YAAY,CAAC,KAAY,EAAE,QAAa,EAAE,IAAU;IAChE,SAAS,IAAI,CAAC,CAAM;QAChB,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE;YAClB,QAAQ,CACJ,KAAK,CAAC,CAAC,CAAC,EACR,GAAG,EAAE;gBACD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAChB,CAAC,EACD,CAAC,CACJ,CAAC;SACL;aAAM;YACH,IAAI,IAAI,EAAE;gBACN,IAAI,EAAE,CAAC;aACV;SACJ;IACL,CAAC;IAED,IAAI,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n'use strict';\n\n/**\n * Call all the functions on the queue with optional data and clears the queue.\n *\n * @param {Function[]} functionQueue The queue of functions to be called.\n * @param {any} callerContext The caller context for the callback.\n * @param {any} [data] Optional parameter to be passed as the function argument.\n */\nexport function callFunctions(functionQueue: Function[], callerContext: any, data?: any): void {\n    if (functionQueue === undefined || functionQueue === null || functionQueue.length === 0) {\n        return;\n    }\n\n    for (const func of functionQueue) {\n        func.call(callerContext, data);\n    }\n\n    // clears the queue after calling all callbacks\n    functionQueue = [];\n}\n\n/**\n * Queues a function to be called later.\n *\n * @param {Function[]} functionQueue The queue of functions to be called.\n * @param {Function} callback The function to be queued.\n */\nexport function queueFunction(functionQueue: Function[], callback: Function): void {\n    if (!(callback === undefined || callback === null)) {\n        functionQueue.push(callback);\n    }\n}\n\n/**\n * Help execute async calls in a sequence.\n *\n * @param {any[]} array The elements array.\n * @param {(entity, () => void) => void)} iterator Async iterator callback.\n * @param {any} [then] Success callback.\n */\nexport function forEachAsync(array: any[], iterator: any, then?: any) {\n    function next(i: any) {\n        if (i < array.length) {\n            iterator(\n                array[i],\n                () => {\n                    next(i + 1);\n                },\n                i\n            );\n        } else {\n            if (then) {\n                then();\n            }\n        }\n    }\n\n    next(0);\n}\n"]}