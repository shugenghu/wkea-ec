/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { AsyncResult } from './async-result';
import { BypassCache, CacheType, ICache, ICallerContext, IDataServiceQueryInternal, IDataServiceRequest } from './Interfaces';
import { ITelemetry } from './interfaces/ITelemetry';
export declare const ODATA_TOTAL_COUNT_PROPERTY = "@odata.count";
export declare const ODATA_HAS_NEXT_PAGE_PROPERTY = "@odata.nextLink";
export declare const GET: string;
export declare const POST: string;
export declare const PATCH: string;
export declare const DELETE: string;
export declare const GET_FROM_RETURNIDENTIFIER: string;
/***
 * Parses the odata result returned from server.
 *
 * @param {any} data The result returned from server.
 * @param {any} resultType The entity type to parse the result as.
 */
export declare function parseOdataResult(data: any, resultType: any): any;
/**
 * Represents a data service request object.
 */
export declare class DataServiceRequest implements IDataServiceRequest {
    private get batchRequestUri();
    /**
     * Gets Locale for the current data service factory instance.
     */
    get locale(): string;
    /**
     * Sets Locale for the current data service factory instance.
     */
    set locale(locale: string);
    /**
     * Gets query parameters for data service request.
     */
    queryParams<T>(): T;
    private _actionId;
    private _cacheObjectType;
    private _cacheKeyFromInput;
    private _cacheKeyFromReturnType;
    private _cacheKeyIdentifierFromReturnType;
    private _query;
    private _callerContext;
    private _requestUri;
    private _method;
    private _id;
    private _hasOperationName;
    private _totalCount;
    private static buildBatchRequest;
    /**
     * Parse the batch responses.
     * @param {any[]} batchResponses The server responses.
     * @param {any[]} requests The request objects.
     * @param {any[]} responses The responses passed down to the success callback.
     */
    private static parseBatchResponses;
    /**
     * TODO - check if below function can be replaced with JSON.stringify.
     * Helper function to convert data into a stringified JSON object.
     * @param {any} parent The container of the element.
     * @param {any} data The data to be converted to a stringified JSON object.
     * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.
     */
    private static toJson;
    /**
     * Helper function to convert array into a stringified JSON object following OData specifications.
     * @param {Array} array The data to be converted to a stringified JSON object.
     * @param {any} parent The container of the array.
     * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.
     */
    private static arrayToJson;
    /**
     * Add offset fields to Date object for serialization purposes.
     * @param {Date} dateTime The date.
     * @return {Date} The date with __edmType and __offset fields injected.
     */
    private static toDateTimeOffset;
    /**
     * Formats entity key(s) in request Uri.
     * @param {any} key The key dictionary.
     * @return {string} The formated string of the key(s).
     */
    private static formatKey;
    /**
     * Formats function parameters in request Uri.
     * @param {any} parameters The parameter dictionary.
     * @return {string} The formated and encoded string of the parameters.
     */
    private static formatFunctionParameter;
    private static addParameter;
    private static getActionIdFromInput;
    private static getCacheObjectValueFromReturnType;
    private static buildCacheFromInput;
    private static getDataCacheType;
    constructor(query: IDataServiceQueryInternal);
    /**
     * Gets the Request Identifier.
     * Auto-generated unique identifier if executed in batch. Used to fetch the response from batch result array.
     */
    id(): number;
    getActionId: () => string;
    getCacheObjectType: () => string;
    getCacheKey: () => string;
    dataCacheType: () => CacheType;
    shouldCacheOutput: () => boolean;
    overrideCacheType: (bypassCache: BypassCache) => void;
    saveCacheEntries(data: AsyncResult<any> | any, requestCache: ICache, appCache: ICache, isCacheTypeApplication: boolean): {
        [cacheKey: string]: any;
    } | undefined;
    private _saveEntityToCache;
    readCacheEntries(requestCache: ICache, appCache: ICache, shouldReadFromAppCache?: boolean, telemetry?: ITelemetry): any;
    private _resolveCacheEntryReference;
    private readCacheEntriesBasedOnCacheKeyFromReturnType;
    /**
     * Executes the request.
     * @param {any} callerContext The caller context.
     * @return {IAsyncResult<T>} The async result.
     */
    execute<T>(callerContext: ICallerContext): Promise<T>;
    /**
     * Executes the batch requests.
     * @param {DataServiceRequest[]} requests The collection of requests to execute.
     * @param {any} [callerContext] The caller context.
     * @return {IAsyncResult<Array>} The async result.  Responses at index I correlates to request with identifier I.
     */
    executeBatch(requests: DataServiceRequest[], callerContext?: ICallerContext): Promise<any[]>;
    /**
     * Gets the Request Uri.
     */
    private getRequestUri;
    /**
     * Executes paginated requests for all entities.
     * @param {AsyncResult{T}} asyncResult The async result.
     * @param {{ [headerName: string]: string }} headerName the headers for the request.
     * @param {number} skip The offset.
     * @param {Array<T>} The array result.
     */
    private getAllPages;
    /**
     * Builds the header to be sent as part of the request.
     * @returns {{ [headerName: string]: string }} a key value pair collection of header names and header values.
     */
    private buildQueryHeader;
    /**
     * Executes request for one page.
     * @param {AsyncResult<T>} The async result.
     * @param {{ [headerName: string]: string }} headerName the headers for the request.
     */
    private loadPage;
}
