{"version":3,"file":"ITelemetry.js","sourceRoot":"","sources":["../../src/Interfaces/ITelemetry.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,MAAM,CAAN,IAAY,QA4BX;AA5BD,WAAY,QAAQ;IAChB;;OAEG;IACH,2BAAe,CAAA;IACf;;OAEG;IACH,2BAAe,CAAA;IACf;;OAEG;IACH,uCAA2B,CAAA;IAC3B;;;OAGG;IACH,+BAAmB,CAAA;IACnB;;;OAGG;IACH,2BAAe,CAAA;IACf;;OAEG;IACH,iCAAqB,CAAA;IACrB,yBAAa,CAAA;AACjB,CAAC,EA5BW,QAAQ,KAAR,QAAQ,QA4BnB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nexport enum LogLevel {\n    /**\n     * For information that's typically valuable only for debugging. These messages may contain sensitive application data and so shouldn't be enabled in a production environment. Disabled by default.\n     */\n    Trace = 'trace',\n    /**\n     * For information that may be useful in development and debugging. Example: Entering method Configure with flag set to true. Enable Debug level logs in production only when troubleshooting, due to the high volume of logs.\n     */\n    Debug = 'debug',\n    /**\n     * For tracking the general flow of the app. These logs typically have some long-term value. Example: Request received for path /api/todo\n     */\n    Information = 'information',\n    /**\n     * For abnormal or unexpected events in the app flow.\n     * These may include errors or other conditions that don't cause the app to stop but might need to be investigated. Handled exceptions are a common place to use the Warning log level. Example: FileNotFoundException for file quotes.txt.\n     */\n    Warning = 'warning',\n    /**\n     * For errors and exceptions that cannot be handled.\n     * These messages indicate a failure in the current activity or operation (such as the current HTTP request), not an app-wide failure. Example log message: Cannot insert record due to duplicate key violation.\n     */\n    Error = 'error',\n    /**\n     * For failures that require immediate attention. Examples: data loss scenarios, out of disk space.\n     */\n    Critical = 'critical',\n    None = 'none'\n}\n\n/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n/**\n * Holds optional parameters for log statements\n */\nexport type TelemetryLogOptions = {\n    /**\n     * Holds any arguments that are meant for placeholders in the message template\n     */\n    values?: unknown[];\n\n    /**\n     * Array of custom tags to add to log\n     */\n    customTags?: string[];\n\n    /**\n     * Exception that can be attached to the log\n     */\n    exception?: Error;\n};\n\n\n/**\n * Interface exposing methods for trace logging, telemetry event logging, and data attribute rendering\n * @property trace          {Function}  - Logs the given message at a Trace level\n * @property debug          {Function}  - Logs the given message at a Debug level\n * @property information    {Function}  - Logs the given message at a Information level\n * @property warning        {Function}  - Logs the given message at a Warning level\n * @property error          {Function}  - Logs the given message at a Error level\n * @property critical       {Function}  - Logs the given message at a Critical level\n * @property exception      {Function}  - Logs the given error object\n */\nexport interface ITelemetry {\n    /**\n     * Logs a structured message at the given log level, with optional custom tags and/or an exception\n     * @param logLevel LogLevel of the message\n     * @param messageTemplate String to log, denoting placeholders with {placeholder}\n     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object\n     */\n    log(logLevel: LogLevel, messageTemplate: string, logOptions?: TelemetryLogOptions): void;\n\n}\n"]}