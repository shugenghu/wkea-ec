{"version":3,"file":"DataServiceRequest.js","sourceRoot":"","sources":["../src/DataServiceRequest.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any\nimport { toJS } from 'mobx';\n\nimport { ApiVersion, EntityIdentifier, SortColumn } from './Entities/CommerceTypes.g';\n\nimport { AsyncResult, isAsyncResult } from './async-result';\n\nimport { BypassCache, CacheType, ICache, ICacheSource, ICallerContext, IDataServiceQueryInternal, IDataServiceRequest } from './Interfaces';\nimport { RetailLogger, Tracer, Utils } from './logging';\n\nimport { ProxyError } from './exceptions';\nimport { ErrorParser } from './exceptions/ErrorParser';\nimport {\n    convertToString,\n    EMPTY,\n    format,\n    hasElements,\n    isEmpty,\n    isNullOrWhitespace,\n    isObjectNotEmptyOrNull\n} from './extensions/StringExtensions';\n\nimport { IODataRequest, ODataHttpRequest } from './externals/DataJS.New';\nimport { ITelemetry, LogLevel } from './interfaces/ITelemetry';\n\nexport const ODATA_TOTAL_COUNT_PROPERTY = '@odata.count';\nexport const ODATA_HAS_NEXT_PAGE_PROPERTY = '@odata.nextLink';\nexport const GET: string = 'GET';\nexport const POST: string = 'POST';\nexport const PATCH: string = 'PATCH';\nexport const DELETE: string = 'DELETE';\nexport const GET_FROM_RETURNIDENTIFIER: string = '___GET__FROM__RETURNIDENTIIER___';\n\nconst ApiTimeoutInMilliSecond = 10000;\nconst OPERATINGUNITNUMBER_HEADERNAME = 'OUN';\nconst AUTHORIZATION_HEADERNAME = 'Authorization';\nconst ACCEPT_LANGUAGE = 'Accept-Language';\nconst REQUEST_ID = 'RequestId';\nconst DEFAULT_HEADER: { [headerName: string]: string } = {\n    Prefer: 'return=representation'\n};\n\n/***\n * Parses the odata result returned from server.\n *\n * @param {any} data The result returned from server.\n * @param {any} resultType The entity type to parse the result as.\n */\nexport function parseOdataResult(data: any, resultType: any): any {\n    if (!data) {\n        return data;\n    }\n\n    if (!data.value) {\n        return resultType ? new resultType(data) : data;\n    }\n\n    const resultSet = data.value;\n\n    if (resultType) {\n        if (Object.prototype.toString.call(resultSet) === '[object Array]') {\n            for (let i = 0; i < resultSet.length; i++) {\n                resultSet[i] = new resultType(resultSet[i]);\n            }\n        }\n    }\n\n    // hasNextPage only apply to array which is typeof 'object'\n    (typeof resultSet === 'object') ? resultSet.hasNextPage = !(data[ODATA_HAS_NEXT_PAGE_PROPERTY] === undefined) : null;\n    return resultSet;\n}\n\n/**\n * Represents a data service request object.\n */\nexport class DataServiceRequest implements IDataServiceRequest {\n    private get batchRequestUri(): string {\n        return this._callerContext.requestContext.apiSettings.baseUrl + '/$batch';\n    }\n\n    /**\n     * Gets Locale for the current data service factory instance.\n     */\n    public get locale(): string {\n        return this._callerContext.requestContext.locale;\n    }\n\n    /**\n     * Sets Locale for the current data service factory instance.\n     */\n    public set locale(locale: string) {\n        this._callerContext.requestContext.locale = locale;\n    }\n\n    /**\n     * Gets query parameters for data service request.\n     */\n    public queryParams<T>(): T {\n        return this._query.data.parameters as T;\n    }\n\n    private _actionId: string;\n    private _cacheObjectType: string;\n    private _cacheKeyFromInput: string;\n    private _cacheKeyFromReturnType: string[] = [];\n    private _cacheKeyIdentifierFromReturnType: string;\n\n    private _query: IDataServiceQueryInternal;\n    private _callerContext: ICallerContext;\n    private _requestUri: string;\n    private _method: string;\n    private _id: number;\n    private _hasOperationName: boolean;\n    private _totalCount: number;\n\n    private static buildBatchRequest(batchRequestUri: string, requests: DataServiceRequest[]): IODataRequest {\n        let requestId = 1;\n\n        // Creates an empty batch request.\n        const odataBatchRequest: IODataRequest = {\n            requestUri: batchRequestUri,\n            method: POST,\n            data: { __batchRequests: [] }\n        };\n\n        const batchRequests = odataBatchRequest.data.__batchRequests;\n        let changeRequests: IODataRequest[];\n\n        requests.forEach(request => {\n            request._id = requestId++;\n\n            const odataRequest: IODataRequest = {\n                requestUri: request._requestUri,\n                method: request._method,\n                data: DataServiceRequest.toJson(request._query.data),\n                headers: { 'Content-ID': request.id(), Prefer: 'return=representation' }\n            };\n\n            if (request._method === GET) {\n                batchRequests.push(odataRequest);\n            } else {\n                if (!changeRequests) {\n                    changeRequests = [];\n                    batchRequests.push({ __changeRequests: changeRequests });\n                }\n                changeRequests.push(odataRequest);\n            }\n        });\n\n        return odataBatchRequest;\n    }\n\n    /**\n     * Parse the batch responses.\n     * @param {any[]} batchResponses The server responses.\n     * @param {any[]} requests The request objects.\n     * @param {any[]} responses The responses passed down to the success callback.\n     */\n    private static parseBatchResponses(batchResponses: any[], requests: any[], responses: any[]): ProxyError[] {\n        let errors: ProxyError[] = new Array();\n\n        batchResponses.forEach(response => {\n            if (response.__changeResponses) {\n                errors = errors.concat(DataServiceRequest.parseBatchResponses(response.__changeResponses, requests, responses));\n            } else {\n                if (!response.message) {\n                    const requestId = parseInt(response.headers['Content-ID'], 10);\n\n                    responses[requestId] = parseOdataResult(response.data, requests[requestId - 1]._query.returnType);\n                } else {\n                    errors = errors.concat(ErrorParser.parseErrorMessage(response));\n                }\n            }\n        });\n\n        return errors;\n    }\n\n    /**\n     * TODO - check if below function can be replaced with JSON.stringify.\n     * Helper function to convert data into a stringified JSON object.\n     * @param {any} parent The container of the element.\n     * @param {any} data The data to be converted to a stringified JSON object.\n     * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.\n     */\n    private static toJson(data: any, parent?: any, modifyDataInPlace?: boolean): string {\n        let clone = data;\n\n        if (data === null) {\n            return null;\n        } else if (typeof data !== 'object') {\n            // if data type is primitive type, no need to process further\n            // as calling jquery extend or calling foreach prop on string type\n            // will transform string to array of chars which will be incorrect result.\n            return data;\n        }\n\n        if (data && data.parameters) {\n            data = data.parameters;\n            parent = null;\n        } else {\n            parent = data;\n        }\n\n        // clones the data object instead of changing it, if no modifications in place\n        if (!modifyDataInPlace) {\n            clone = { ...data };\n        }\n\n        for (const prop in clone) {\n            if (clone.hasOwnProperty(prop)) {\n                const property = clone[prop];\n\n                // only non-undefined properties are added to the object\n                if (typeof property !== 'undefined') {\n                    let value;\n                    if (property === null) {\n                        value = null;\n                    } else if (typeof property === 'object') {\n                        if (property instanceof Array) {\n                            value = DataServiceRequest.arrayToJson(property, parent, modifyDataInPlace);\n                        } else if (property instanceof Date) {\n                            value = DataServiceRequest.toDateTimeOffset(property);\n                        } else {\n                            // recursively stringifies objects\n                            value = DataServiceRequest.toJson(property, clone, modifyDataInPlace);\n                        }\n                    } else {\n                        value = property;\n                    }\n\n                    clone[prop] = value;\n                }\n            }\n        }\n\n        return clone;\n    }\n\n    /**\n     * Helper function to convert array into a stringified JSON object following OData specifications.\n     * @param {Array} array The data to be converted to a stringified JSON object.\n     * @param {any} parent The container of the array.\n     * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.\n     */\n    private static arrayToJson(array: any[], parent: any, modifyDataInPlace?: boolean): any {\n        const data = [];\n        for (let i = 0; i < array.length; i++) {\n            data[i] = DataServiceRequest.toJson(array[i], array, modifyDataInPlace);\n        }\n\n        // if array is not a top level data on an action\n        return data;\n    }\n\n    /**\n     * Add offset fields to Date object for serialization purposes.\n     * @param {Date} dateTime The date.\n     * @return {Date} The date with __edmType and __offset fields injected.\n     */\n    private static toDateTimeOffset(dateTime: Date): Date {\n        // @ts-ignore\n        if (!dateTime.__edmType || !dateTime.__offset) {\n            const pad: (val: number) => string = (val: number) => (val < 10 ? '0' + val : val.toString());\n            const sign: string = dateTime.getTimezoneOffset() > 0 ? '-' : '+';\n            const offset: number = Math.abs(dateTime.getTimezoneOffset());\n            const hours: string = pad(Math.floor(offset / 60));\n            const minutes: string = pad(offset % 60);\n\n            // @ts-ignore\n            dateTime.__edmType = 'Edm.DateTimeOffset';\n            // @ts-ignore\n            dateTime.__offset = sign + hours + ':' + minutes;\n        }\n\n        return dateTime;\n    }\n\n    /**\n     * Formats entity key(s) in request Uri.\n     * @param {any} key The key dictionary.\n     * @return {string} The formated string of the key(s).\n     */\n    private static formatKey(key: any): string {\n        let result: string = EMPTY;\n\n        if (key) {\n            const formattedKey = [];\n            let propertyName: string = EMPTY;\n\n            for (const property in key) {\n                if (key.hasOwnProperty(property)) {\n                    propertyName = property;\n                    if (typeof key[propertyName] === 'string') {\n                        formattedKey.push(propertyName + `='${key[propertyName]}'`);\n                    } else {\n                        formattedKey.push(propertyName + '=' + key[propertyName]);\n                    }\n                }\n            }\n\n            if (formattedKey.length === 1) {\n                if (typeof key[propertyName] === 'string') {\n                    result = `'${key[propertyName]}'`;\n                } else {\n                    result = key[propertyName];\n                }\n            } else {\n                result = formattedKey.join();\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Formats function parameters in request Uri.\n     * @param {any} parameters The parameter dictionary.\n     * @return {string} The formated and encoded string of the parameters.\n     */\n    private static formatFunctionParameter(parameters: any): string {\n        let result: string = EMPTY;\n\n        if (parameters) {\n            for (const parameter in parameters) {\n                if (parameters.hasOwnProperty(parameter)) {\n                    const paramValue = parameters[parameter];\n\n                    if (!isEmpty(result)) {\n                        result += ',';\n                    }\n\n                    if (paramValue === undefined) {\n                        // handles undefined value\n                        continue;\n                    } else if (typeof paramValue === 'string') {\n                        // handles string type value\n                        result += parameter + `='${encodeURIComponent(paramValue)}'`;\n                    } else {\n                        // handles null and other types value\n                        result += parameter + '=' + encodeURIComponent(paramValue);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    // TODO - use node url api for url parsing\n    private static addParameter(requestUri: string, key: string, value: any): string {\n        if (value) {\n            let parameterSeparator = '?';\n\n            if (requestUri.indexOf(parameterSeparator) > 0) {\n                parameterSeparator = '&';\n            }\n\n            return requestUri + parameterSeparator + key + '=' + value;\n        } else {\n            return requestUri;\n        }\n    }\n\n    private static getActionIdFromInput(query: IDataServiceQueryInternal) {\n        return `@msdyn365-commerce/retail-proxy/${query.entitySet}/${query.action}`;\n    }\n\n    private static getCacheObjectValueFromReturnType(returnType: any): string {\n        // return type can be actual class itself like CategoryClass instead of string 'CategoryClass'\n        const cacheObjectTypeValue = typeof returnType === 'function' ? returnType.name : returnType;\n        return cacheObjectTypeValue.replace('Class', '');\n    }\n\n    private static buildCacheFromInput(query: IDataServiceQueryInternal, cacheKeyIdentifierFromReturnType: string): string {\n        // TODO if return type have distinct primary key (and not a collection), cache key for action will be computed primary key\n\n        let cacheKey = {};\n        // if query have key like { RecordId: 56873008 }\n        query.key && (cacheKey = { ...query.key });\n        // parameters are input to function like query.createDataServiceRequestForOperation('GetCategories', true, CategoryClass, 'true', { channelId })\n        //     => {channelId} is parameters.\n        query.data && query.data.parameters && (cacheKey = { ...cacheKey, ...(query.data.parameters as {}) });\n        query.resultSettings &&\n            (cacheKey = {\n                ...cacheKey,\n                ...query.resultSettings.Paging,\n                ...query.resultSettings.Sorting\n            });\n        query.filterSettings && (cacheKey['filter'] = query.filterSettings);\n        isObjectNotEmptyOrNull(query.tokens) && (cacheKey['token'] = query.tokens);\n        // TODO - add OUN in cache key\n        const cacheKeyValue =\n            convertToString(cacheKey) ||\n            (cacheKeyIdentifierFromReturnType ? GET_FROM_RETURNIDENTIFIER : `${query.entitySet}|${query.entityType}|NOKEY`);\n        Tracer.Information(`{CacheKey - CacheValue} : ${cacheKey} - ${cacheKeyValue}`);\n        return cacheKeyValue;\n    }\n\n    private static getDataCacheType(query: IDataServiceQueryInternal): CacheType {\n        // cache all result in request cacheisObjectNotEmptyOrNull\n        //\n        // Follow following rule for app cache\n        // -------------------------------------------------------------------------------------\n        //        scenario                                 app cache\n        // -------------------------------------------------------------------------------------\n        // 1. if returnType is  -                             true\n        //          a. Category\n        //          b. Product\n        //          c. OrgUnit\n        //          d. ProductCatalog\n        //          e. Warehouse\n        if (query.entitySet === 'Carts' && query.action === 'GetMaxLoyaltyPointsToRedeemForTransactionBalance') {\n            return 'none';\n        }\n\n        return query.options.bypassCache === 'get' || query.options.bypassCache === 'getAndPut' ? 'none' : 'request';\n    }\n\n    constructor(query: IDataServiceQueryInternal) {\n        Tracer.Information('DataServiceRequest.constructor()');\n        this._query = toJS(query, { recurseEverything: true });\n        this._hasOperationName = false;\n\n        switch (query.action) {\n            case 'Read':\n            case 'ReadAll':\n                this._method = GET;\n                break;\n\n            case 'Create':\n                this._method = POST;\n                break;\n\n            case 'Update':\n                this._method = PATCH;\n                break;\n\n            case 'Delete':\n                this._method = DELETE;\n                break;\n\n            default:\n                if (query.isAction) {\n                    // Sets the HTTP method to be POST for actions\n                    this._method = POST;\n                } else {\n                    // Sets the HTTP method to be GET for functions\n                    this._method = GET;\n                }\n\n                this._hasOperationName = true;\n        }\n\n        this._actionId = DataServiceRequest.getActionIdFromInput(query);\n\n        this._cacheObjectType = DataServiceRequest.getCacheObjectValueFromReturnType(query.options.returnEntity);\n        // TODO - handle Key when it is array like SHIFT case\n        const entityIdentifier = this._cacheObjectType === 'SimpleProduct' ? 'Product' : this._cacheObjectType;\n        this._cacheKeyIdentifierFromReturnType = EntityIdentifier[entityIdentifier] && EntityIdentifier[entityIdentifier].Key;\n\n        this._cacheKeyFromInput = DataServiceRequest.buildCacheFromInput(this._query, this._cacheKeyIdentifierFromReturnType);\n    }\n\n    /**\n     * Gets the Request Identifier.\n     * Auto-generated unique identifier if executed in batch. Used to fetch the response from batch result array.\n     */\n    public id(): number {\n        return this._id;\n    }\n\n    public getActionId = () => this._actionId;\n\n    public getCacheObjectType = () => this._cacheObjectType;\n\n    public getCacheKey = () => this._cacheKeyFromInput;\n\n    public dataCacheType = () => DataServiceRequest.getDataCacheType(this._query);\n\n    public shouldCacheOutput = () => true;\n\n    public overrideCacheType = (bypassCache: BypassCache) => {\n        bypassCache && (this._query.options.bypassCache = bypassCache);\n    }\n\n    public saveCacheEntries(\n        data: AsyncResult<any> | any,\n        requestCache: ICache,\n        appCache: ICache,\n        isCacheTypeApplication: boolean\n    ): { [cacheKey: string]: any } | undefined {\n        // if return Entity is collection\n        //        if entity type has identifier/primary key\n        //              1. cache array of primay key value of returned entity collection on input cache key\n        //              2. cache individual entity on primary key\n        //        else\n        //              1. cache output on input cache key\n        //\n        // else  if entity type has identifier/primary key\n        //           2. cache output entity on primary key\n\n        if (!data || (!this._cacheKeyFromInput && !this._cacheKeyIdentifierFromReturnType)) {\n            return;\n        }\n\n        if (data instanceof AsyncResult) {\n            // For a loading Promise, cache based on input cachekey, and then cache output again once complete\n            if (data.status === 'LOADING') {\n                data.then(result => {\n                    if (this._totalCount !== undefined) {\n                        data.metadata.count = this._totalCount;\n                    }\n\n                    this._saveEntityToCache(result, requestCache, appCache, isCacheTypeApplication);\n                    return result;\n                });\n\n                requestCache.put({ typeName: this._cacheObjectType, key: this._cacheKeyFromInput }, { item: data });\n\n                if (appCache && isCacheTypeApplication) {\n                    appCache.put({ typeName: this._cacheObjectType, key: this._cacheKeyFromInput }, { item: data });\n                }\n                // For a completed promise, save the action results to the cache\n            } else {\n                if (this._totalCount !== undefined) {\n                    data.metadata.count = this._totalCount;\n                }\n\n                this._saveEntityToCache(data.result, requestCache, appCache, isCacheTypeApplication);\n                return data.result;\n            }\n        } else {\n            return this._saveEntityToCache(data, requestCache, appCache, isCacheTypeApplication);\n        }\n    }\n\n    private _saveEntityToCache(\n        data: any,\n        requestCache: ICache,\n        appCache: ICache,\n        isCacheTypeApplication: boolean\n    ): { [cacheKey: string]: any } | undefined {\n        if (!data || (!this._cacheKeyFromInput && !this._cacheKeyIdentifierFromReturnType)) {\n            return;\n        }\n\n        const cacheEntries = {};\n        const results = data;\n\n        // using Object.prototype instead of Array.isArray because results can be Observable Array which cann't be detected with Array.isArray\n        if (!this._query.isReturnTypeACollection || Object.prototype.toString.call(results) !== '[object Array]') {\n            if (this._cacheKeyIdentifierFromReturnType) {\n                const key = `${this._cacheKeyIdentifierFromReturnType}-${results[this._cacheKeyIdentifierFromReturnType]}`;\n                cacheEntries[key] = results;\n\n                if (this._cacheKeyFromInput) {\n                    let existingCacheItem = requestCache.get({ typeName: this._cacheObjectType, key: this._cacheKeyFromInput });\n                    if (existingCacheItem) {\n                        existingCacheItem = { ...existingCacheItem };\n                    }\n                    if (\n                        existingCacheItem &&\n                        existingCacheItem.item &&\n                        (!(existingCacheItem.item instanceof AsyncResult) || existingCacheItem.item.status === 'SUCCESS') &&\n                        (typeof existingCacheItem.item !== 'object' || existingCacheItem.item['$ref'] !== true)\n                    ) {\n                        cacheEntries[this._cacheKeyFromInput] = results;\n                    } else {\n                        cacheEntries[this._cacheKeyFromInput] = {\n                            $ref: true,\n                            type: this._cacheObjectType,\n                            identifier: this._cacheKeyIdentifierFromReturnType,\n                            key: [key],\n                            count: this._totalCount\n                        };\n                    }\n                }\n            } else {\n                cacheEntries[this._cacheKeyFromInput] = results;\n            }\n        } else if (!this._cacheKeyIdentifierFromReturnType) {\n            cacheEntries[this._cacheKeyFromInput] = results;\n        } else {\n            const cacheValue = results\n                .map(result => {\n                    const identifierValue = result[this._cacheKeyIdentifierFromReturnType];\n                    if (identifierValue) {\n                        const key = `${this._cacheKeyIdentifierFromReturnType}-${identifierValue}`;\n                        cacheEntries[key] = result;\n                        return key;\n                    }\n                })\n                .filter(Boolean);\n\n            let existingCacheItem = requestCache.get({ typeName: this._cacheObjectType, key: this._cacheKeyFromInput });\n            if (existingCacheItem) {\n                existingCacheItem = { ...existingCacheItem };\n            }\n            if (\n                existingCacheItem.item &&\n                (!(existingCacheItem.item instanceof AsyncResult) || existingCacheItem.item.status === 'SUCCESS') &&\n                (typeof existingCacheItem.item !== 'object' || existingCacheItem.item['$ref'] !== true)\n            ) {\n                cacheEntries[this._cacheKeyFromInput] = results;\n            } else {\n                cacheEntries[this._cacheKeyFromInput] = {\n                    $ref: true,\n                    type: this._cacheObjectType,\n                    identifier: this._cacheKeyIdentifierFromReturnType,\n                    isCollection: this._query.isReturnTypeACollection,\n                    key: cacheValue,\n                    count: this._totalCount\n                };\n            }\n        }\n\n        if (cacheEntries) {\n            Object.keys(cacheEntries).map(entryKey => {\n                requestCache.put({ typeName: this._cacheObjectType, key: entryKey }, { item: cacheEntries[entryKey] });\n\n                if (appCache && isCacheTypeApplication) {\n                    appCache.put({ typeName: this._cacheObjectType, key: entryKey }, { item: cacheEntries[entryKey] });\n                }\n            });\n        }\n\n        return cacheEntries;\n    }\n\n    public readCacheEntries(requestCache: ICache, appCache: ICache, shouldReadFromAppCache?: boolean, telemetry?: ITelemetry): any {\n        if (!requestCache || (!this._cacheKeyFromInput && this._cacheKeyFromReturnType.length === 0)) {\n            return;\n        }\n\n        if (\n            this._cacheKeyFromInput === GET_FROM_RETURNIDENTIFIER ||\n            (this._cacheKeyIdentifierFromReturnType && this._cacheKeyFromReturnType.length !== 0)\n        ) {\n            const entries = this.readCacheEntriesBasedOnCacheKeyFromReturnType(requestCache, appCache, shouldReadFromAppCache, telemetry);\n            if (entries) {\n                return entries;\n            }\n        }\n\n        const cacheKey = { typeName: this._cacheObjectType, key: this._cacheKeyFromInput };\n        let cachedValueBasedOnInput = requestCache.get(cacheKey);\n        if (cachedValueBasedOnInput) {\n            cachedValueBasedOnInput = { ...cachedValueBasedOnInput };\n        } else if (shouldReadFromAppCache && appCache) {\n            cachedValueBasedOnInput = appCache.copyTo(cacheKey, requestCache);\n        }\n\n        if (!cachedValueBasedOnInput || cachedValueBasedOnInput.shouldRefresh) {\n            return this.readCacheEntriesBasedOnCacheKeyFromReturnType(requestCache, appCache, shouldReadFromAppCache, telemetry);\n        }\n\n        if (cachedValueBasedOnInput.item instanceof AsyncResult) {\n            if (cachedValueBasedOnInput.item.status !== 'LOADING') {\n                cachedValueBasedOnInput.item = cachedValueBasedOnInput.item.result || cachedValueBasedOnInput.item.error;\n            } else {\n                const asyncResult = cachedValueBasedOnInput.item.then(result => {\n                    if (typeof result !== 'object' || result['$ref'] !== true) {\n                        return result;\n                    }\n\n                    return this._resolveCacheEntryReference(result, requestCache, appCache, shouldReadFromAppCache);\n                });\n                return asyncResult;\n            }\n        }\n\n        if (typeof cachedValueBasedOnInput.item !== 'object' || cachedValueBasedOnInput.item['$ref'] !== true) {\n            return cachedValueBasedOnInput.item;\n        }\n\n        return this._resolveCacheEntryReference(\n            cachedValueBasedOnInput.item,\n            requestCache,\n            appCache,\n            shouldReadFromAppCache,\n            isAsyncResult(cachedValueBasedOnInput.item)\n        );\n    }\n\n    private _resolveCacheEntryReference(\n        item: any,\n        requestCache: ICache,\n        appCache: ICache,\n        shouldReadFromAppCache?: boolean,\n        isWrappingPromise?: boolean\n    ) {\n        const cacheValueAsArray = (item['key'] as string[])\n            .map(key => {\n                const value = requestCache.get({ typeName: this._cacheObjectType, key });\n\n                if (!value && shouldReadFromAppCache && appCache) {\n                    appCache.copyTo({ typeName: this._cacheObjectType, key }, requestCache);\n                }\n\n                if (!value || !value.item || value.shouldRefresh) {\n                    return undefined;\n                }\n\n                if (isAsyncResult(value.item)) {\n                    return value.item.result;\n                }\n\n                return value.item;\n            })\n            .filter(data => data !== undefined && data !== null);\n\n        if ((item['key'] as string[]).length > cacheValueAsArray.length) {\n            return;\n        }\n\n        // If we are returning a Promise that represents a future collection, we need to unwrap it\n        return cacheValueAsArray && cacheValueAsArray.length > 0\n            ? this._query.isReturnTypeACollection && !isWrappingPromise\n                ? cacheValueAsArray\n                : cacheValueAsArray[0]\n            : undefined;\n    }\n\n    private readCacheEntriesBasedOnCacheKeyFromReturnType(\n        requestCache: ICache,\n        appCache: ICache,\n        shouldReadFromAppCache: boolean,\n        telemetry?: ITelemetry\n    ): any {\n        if (this._cacheKeyFromReturnType.length === 0) {\n            return null;\n        }\n\n        const cacheEntries = this._cacheKeyFromReturnType\n            .map(entry => {\n                const key = `${this._cacheKeyIdentifierFromReturnType}-${entry}`;\n                let cacheValue = requestCache.get({ typeName: this._cacheObjectType, key });\n\n                if (!cacheValue && shouldReadFromAppCache && appCache) {\n                    cacheValue = appCache.copyTo({ typeName: this._cacheObjectType, key }, requestCache);\n                }\n\n                if (!cacheValue || !cacheValue.item || cacheValue.shouldRefresh) {\n                    return null;\n                }\n                switch (cacheValue.s!) {\n                    case ICacheSource.AppCache: {\n                        telemetry &&\n                            telemetry.log(LogLevel.Information, 'dataAction: {actionInput.typename}\\tsource: {cacheSource}', {\n                                values: [this._cacheObjectType, 'AppCache']\n                            });\n                        break;\n                    }\n                    case ICacheSource.RequestCache: {\n                        telemetry &&\n                            telemetry.log(LogLevel.Information, 'dataAction: {actionInput.typename}\\tsource: {cacheSource}', {\n                                values: [this._cacheObjectType, 'RequestCache']\n                            });\n                        break;\n                    }\n                    default: {\n                        telemetry &&\n                            telemetry.log(LogLevel.Information, 'dataAction: {actionInput.typename}\\tsource: {cacheSource}', {\n                                values: [this._cacheObjectType, 'Undefined']\n                            });\n                        break;\n                    }\n                }\n\n                return cacheValue.item;\n            })\n            .filter(Boolean);\n\n        return cacheEntries && cacheEntries.length > 0 ? (this._query.isReturnTypeACollection ? cacheEntries : cacheEntries[0]) : null;\n    }\n\n    /**\n     * Executes the request.\n     * @param {any} callerContext The caller context.\n     * @return {IAsyncResult<T>} The async result.\n     */\n    public execute<T>(callerContext: ICallerContext): Promise<T> {\n        if (\n            !callerContext.requestContext ||\n            !callerContext.requestContext.apiSettings ||\n            !callerContext.requestContext.apiSettings.oun ||\n            !callerContext.requestContext.apiSettings.baseUrl\n        ) {\n            throw new Error(`CallerContext missing required request parameters - [${JSON.stringify(callerContext.requestContext)}]`);\n        }\n\n        if (!callerContext.requestContext.locale) {\n            throw new Error(`CallerContext missing locale - [${JSON.stringify(callerContext.requestContext)}]`);\n        }\n\n        this._callerContext = callerContext;\n        this._requestUri = this.getRequestUri();\n        let result: Promise<T>;\n        const headers: { [headerName: string]: string } = this.buildQueryHeader();\n\n        if (\n            !this._query.isReturnTypeACollection ||\n            (this._query.resultSettings &&\n                this._query.resultSettings.Paging &&\n                this._query.resultSettings.Paging.Top &&\n                this._query.resultSettings.Paging.Top >= 0)\n        ) {\n            result = this.loadPage<T>(headers);\n        } else {\n            result = this.getAllPages<T>(headers, 0);\n        }\n\n        return result;\n    }\n\n    // Need to build batch handler ----------- PENDING\n    /**\n     * Executes the batch requests.\n     * @param {DataServiceRequest[]} requests The collection of requests to execute.\n     * @param {any} [callerContext] The caller context.\n     * @return {IAsyncResult<Array>} The async result.  Responses at index I correlates to request with identifier I.\n     */\n    public executeBatch(requests: DataServiceRequest[], callerContext?: ICallerContext): Promise<any[]> {\n        if (\n            !callerContext.requestContext ||\n            !callerContext.requestContext.apiSettings ||\n            !callerContext.requestContext.apiSettings.oun ||\n            !callerContext.requestContext.apiSettings.baseUrl\n        ) {\n            throw new Error(`CallerContext missing required request parameters - [${JSON.stringify(callerContext.requestContext)}]`);\n        }\n\n        if (!callerContext.requestContext.locale) {\n            throw new Error(`CallerContext missing locale - [${JSON.stringify(callerContext.requestContext)}]`);\n        }\n\n        this._callerContext = callerContext;\n        this._requestUri = this.getRequestUri();\n\n        return new Promise((resolve, reject) => {\n            ODataHttpRequest(\n                DataServiceRequest.buildBatchRequest(this.batchRequestUri, requests),\n                (data: any) => {\n                    const responses: any[] = new Array();\n                    const errors: ProxyError[] = DataServiceRequest.parseBatchResponses(data.__batchResponses, requests, responses);\n\n                    if (errors.length === 0) {\n                        Tracer.Information(this.batchRequestUri + ' success');\n                        resolve(responses);\n                    } else {\n                        Tracer.Errors(errors, this.batchRequestUri + ' failed.');\n                        reject(errors);\n                    }\n                },\n                (error: any) => {\n                    Tracer.Error(this.batchRequestUri + ' failed');\n                    reject(ErrorParser.parseErrorMessage(error));\n                }\n            );\n        });\n    }\n\n    /**\n     * Gets the Request Uri.\n     */\n    private getRequestUri(): string {\n        let requestUri: string = this._callerContext.requestContext.apiSettings.baseUrl + 'Commerce';\n        if (this._query.entitySet) {\n            requestUri = `${requestUri}/${this._query.entitySet}`;\n\n            if (this._query.key) {\n                requestUri = `${requestUri}(${DataServiceRequest.formatKey(this._query.key)})`;\n            } else if (this._query.entitySet === 'Customers' && this._query.key !== null && this._query.key !== undefined) {\n                requestUri = `${requestUri}('')`;\n            }\n        }\n\n        // Appends the action (POST) or function (GET) name to the Uri\n        if (this._hasOperationName) {\n            requestUri += '/' + this._query.action;\n\n            // Construct OData function Url with parameters. [e.g. Func(), Func(param1='',param2='')]\n            if (!this._query.isAction && this._query.data && this._query.data.parameters) {\n                requestUri += '(' + DataServiceRequest.formatFunctionParameter(this._query.data.parameters) + ')';\n            }\n        }\n\n        if (this._query.isReturnTypeACollection) {\n            requestUri = DataServiceRequest.addParameter(\n                requestUri,\n                '$top',\n                this._query.resultSettings && this._query.resultSettings.Paging\n                    ? this._query.resultSettings.Paging.Top\n                    : ApiTimeoutInMilliSecond\n            ); // Config.defaultPageSize);\n            requestUri = DataServiceRequest.addParameter(\n                requestUri,\n                '$skip',\n                this._query.resultSettings && this._query.resultSettings.Paging ? this._query.resultSettings.Paging.Skip : 0\n            );\n            requestUri = DataServiceRequest.addParameter(requestUri, '$inlinecount', this._query.inlineCount ? 'allpages' : null);\n\n            if (this._query.resultSettings.count) {\n                requestUri = DataServiceRequest.addParameter(requestUri, '$count', 'true');\n            }\n\n            requestUri = DataServiceRequest.addParameter(\n                requestUri,\n                '$filter',\n                this._query.filterSettings ? this._query.filterSettings : 0\n            );\n\n            if (this._query.resultSettings && this._query.resultSettings.Sorting && this._query.resultSettings.Sorting.Columns) {\n                this._query.resultSettings.Sorting.Columns.forEach((column: SortColumn) => {\n                    if (!isNullOrWhitespace(column.ColumnName || EMPTY)) {\n                        const orderByColumn: string = format('{0}%20{1}', column.ColumnName, column.IsDescending ? 'desc' : 'asc');\n\n                        requestUri = DataServiceRequest.addParameter(requestUri, '$orderby', orderByColumn);\n                    }\n                });\n            }\n        }\n\n        if (this._query.expands && hasElements(this._query.expands)) {\n            requestUri = DataServiceRequest.addParameter(requestUri, '$expand', this._query.expands.join());\n        }\n\n        if (!isNullOrWhitespace(ApiVersion)) {\n            requestUri = DataServiceRequest.addParameter(requestUri, 'api-version', ApiVersion);\n        }\n\n        return requestUri;\n    }\n\n    /**\n     * Executes paginated requests for all entities.\n     * @param {AsyncResult{T}} asyncResult The async result.\n     * @param {{ [headerName: string]: string }} headerName the headers for the request.\n     * @param {number} skip The offset.\n     * @param {Array<T>} The array result.\n     */\n    private getAllPages<T>(headers: { [headerName: string]: string }, skip: number, results?: T[]): Promise<T> {\n        skip = skip || 0;\n        const top = 1000; // Config.defaultPageSize;\n        this._query.resultSettings = this._query.resultSettings || {};\n        this._query.resultSettings.Paging = this._query.resultSettings.Paging || {};\n        this._query.resultSettings.Paging.Top = top;\n        results = results || [];\n\n        return this.loadPage<T>(headers, skip)\n            .then((loadPageResults: T) => {\n                if (loadPageResults) {\n                    if (typeof (loadPageResults as any).length === 'number') {\n                        results = results.concat(loadPageResults);\n\n                        if ((loadPageResults as any).length < top) {\n                            // This page contains less items than top\n                            if ((loadPageResults as any).hasNextPage) {\n                                // This means the pagesize defined on server side is smaller than the top\n                                skip += (loadPageResults as any).length;\n                                return this.getAllPages<T>(headers, skip, results); // Try to fetch the next page\n                            } else {\n                                // No more pages need to fetch\n                                return Promise.resolve((results as any) as T);\n                            }\n                        } else {\n                            // This page contains exact amount of item as the top, should not contain more\n                            skip += top;\n                            return this.getAllPages<T>(headers, skip, results); // Try to fetch the next page\n                        }\n                    } else {\n                        // The pageResult is a single item\n                        results.push((loadPageResults as unknown) as T);\n                        return Promise.resolve((results as unknown) as T);\n                    }\n                }\n            })\n            .catch(error => {\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Builds the header to be sent as part of the request.\n     * @returns {{ [headerName: string]: string }} a key value pair collection of header names and header values.\n     */\n    private buildQueryHeader(): { [headerName: string]: string } {\n        const headers: { [headerName: string]: string } = {};\n        headers['from-keystone'] = 'true';\n\n        // copy default values from default header\n        for (const headerName in DEFAULT_HEADER) {\n            if (DEFAULT_HEADER.hasOwnProperty(headerName)) {\n                headers[headerName] = DEFAULT_HEADER[headerName];\n            }\n        }\n\n        // Copy operating unit number if present for C2 (if an operation is done by a customer or by anonymous user) scenarios.\n        if (!isNullOrWhitespace(this._callerContext.requestContext.apiSettings.oun)) {\n            headers[OPERATINGUNITNUMBER_HEADERNAME] = this._callerContext.requestContext.apiSettings.oun;\n        }\n\n        // Add accept-language header to send user preferred locale to server.\n        headers[ACCEPT_LANGUAGE] = this._callerContext.requestContext.locale;\n\n        // Add custom AppInsights headers\n        headers[REQUEST_ID] = this._callerContext.requestContext.operationId;\n\n        // add any tokens as part of the header\n        for (const tokenName in this._query.tokens) {\n            if (this._query.tokens.hasOwnProperty(tokenName)) {\n                const tokenValue: string = this._query.tokens[tokenName];\n\n                if (!isNullOrWhitespace(tokenValue)) {\n                    headers[tokenName] = tokenValue;\n                }\n            }\n        }\n\n        // Now check whether authentication token is present or not, if present it will be added into Authorization header.\n        if (\n            this._callerContext &&\n            this._callerContext.requestContext.user &&\n            !isNullOrWhitespace(this._callerContext.requestContext.user.token)\n        ) {\n            headers[AUTHORIZATION_HEADERNAME] = `id_token ${this._callerContext.requestContext.user.token}`;\n        }\n\n        // Check if an Bearer access token is being provided. If present it will be added into Authorization header\n        if (\n            this._callerContext &&\n            this._callerContext.requestContext &&\n            !isNullOrWhitespace(this._callerContext.requestContext.accessToken)\n        ) {\n            headers[AUTHORIZATION_HEADERNAME] = `Bearer ${this._callerContext.requestContext.accessToken}`;\n        }\n\n        return headers;\n    }\n\n    /**\n     * Executes request for one page.\n     * @param {AsyncResult<T>} The async result.\n     * @param {{ [headerName: string]: string }} headerName the headers for the request.\n     */\n    private loadPage<T>(headers: { [headerName: string]: string }, skip?: number): Promise<T> {\n        if (skip) {\n            this._query.resultSettings = this._query.resultSettings || {};\n            this._query.resultSettings.Paging = this._query.resultSettings.Paging || {};\n            this._query.resultSettings.Paging.Skip = skip;\n        }\n\n        const requestId = Utils.generateGuid();\n        RetailLogger.modelManagersRetailServerRequestStarted(requestId, this._requestUri);\n\n        return new Promise((resolve, reject) => {\n            // This is the pipe for all OData API calls.\n            ODataHttpRequest(\n                {\n                    requestUri: this.getRequestUri(),\n                    method: this._method,\n                    data: DataServiceRequest.toJson(this._query.data),\n                    headers\n                },\n                (data: any) => {\n                    RetailLogger.modelManagersRetailServerRequestFinished(requestId, this._requestUri);\n                    const resultSet = parseOdataResult(data, this._query.returnType);\n\n                    // Set the total count on the DataServiceRequest\n                    if (data && data[ODATA_TOTAL_COUNT_PROPERTY]) {\n                        this._totalCount = data[ODATA_TOTAL_COUNT_PROPERTY];\n                    }\n\n                    if (this._cacheKeyIdentifierFromReturnType) {\n                        if (Object.prototype.toString.call(resultSet) === '[object Array]') {\n                            this._cacheKeyFromReturnType.concat(\n                                resultSet.map(result => result[this._cacheKeyIdentifierFromReturnType]).filter(Boolean)\n                            );\n                        } else if (typeof resultSet === 'object') {\n                            this._cacheKeyFromReturnType.push(resultSet[this._cacheKeyIdentifierFromReturnType]);\n                        }\n                    }\n\n                    resolve(resultSet);\n                },\n                (error: any) => {\n                    RetailLogger.modelManagersRetailServerRequestError(requestId, this._requestUri, error.message);\n                    reject(ErrorParser.parseErrorMessage(error));\n                }\n            );\n        });\n    }\n}\n"]}