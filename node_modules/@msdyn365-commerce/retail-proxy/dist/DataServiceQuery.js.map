{"version":3,"file":"DataServiceQuery.js","sourceRoot":"","sources":["../src/DataServiceQuery.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { DataServiceRequest } from './DataServiceRequest';\nimport { IDataServiceOptions, IDataServiceQueryInternal, IDataServiceRequest, IQueryResultSettings } from './Interfaces';\n\n/**\n * Represents a data service query object.\n */\nexport class DataServiceQuery {\n    private _query: IDataServiceQueryInternal;\n\n    /**\n     * Creates a new instance of DataServiceQuery<T>.\n     * @param {IDataServiceRequestFactory} dataServiceRequestFactory The data service request factory.\n     * @param {string} [entitySet] The entity set name.\n     * @param {string} [entityType] The entity type name.\n     * @param {any} [returntype] The return type of query.\n     * @param {any} [key] Entity key.\n     */\n    constructor(entitySet?: string, entityType?: string, returnType?: any, key?: any) {\n        this._query = {\n            entitySet,\n            entityType,\n            key,\n            returnType,\n            tokens: {},\n            // by default all action will skip reading from cache before making execute call\n            options: { bypassCache: 'get', returnEntity: entityType },\n            resultSettings: { Paging: {}, Sorting: {} }\n        };\n    }\n\n    /**\n     * Query result settings.\n     *\n     * @param {string} value The value of query result settings.\n     */\n    public resultSettings(value: IQueryResultSettings): DataServiceQuery {\n        if (!value) {\n            value = {};\n        }\n\n        this._query.resultSettings = {};\n        this._query.resultSettings.Paging = value.Paging || {};\n        this._query.resultSettings.Sorting = value.Sorting || {};\n        this._query.resultSettings.count = value.count;\n\n        return this;\n    }\n\n    /**\n     * Filter Clause.\n     * @param {string} value The filter value.\n     */\n    public filter(value: string): DataServiceQuery {\n        this._query.filterSettings = value;\n\n        return this;\n    }\n\n    /**\n     * Top clause\n     * @param {string} value The number of top rows to select.\n     */\n    public top(value: number): DataServiceQuery {\n        this._query.resultSettings.Paging.Top = value;\n\n        return this;\n    }\n\n    /**\n     * Skip clause\n     * @param {string} value The number of rows to skip\n     */\n    public skip(value: number): DataServiceQuery {\n        this._query.resultSettings.Paging.Skip = value;\n\n        return this;\n    }\n\n    /**\n     * Expand clause\n     * @param {string} propertyName The property name to expand.\n     */\n    public expand(propertyName: string): DataServiceQuery {\n        if (this._query.expands == null) {\n            this._query.expands = [];\n        }\n\n        this._query.expands.push(propertyName);\n        return this;\n    }\n\n    /**\n     * Request number of total row available.\n     */\n    public inlineCount(): DataServiceQuery {\n        this._query.inlineCount = true;\n\n        return this;\n    }\n\n    /**\n     * Order by clause.\n     * @param {string} value The field name for ordering.\n     */\n    public orderBy(value: string): DataServiceQuery {\n        if (!this._query.resultSettings.Sorting.Columns) {\n            this._query.resultSettings.Sorting.Columns = [];\n        }\n\n        this._query.resultSettings.Sorting.Columns.push({ ColumnName: value });\n\n        return this;\n    }\n\n    /**\n     * Transforms the request into a create request.\n     * @param {string} object The object.\n     * @return {IDataServiceRequest} The data service request.\n     */\n    public create(object: any): IDataServiceRequest {\n        this._query.action = 'Create';\n        this._query.data = this._createODataParameters(object);\n        this._query.options.bypassCache = 'none';\n        return this._createRequest();\n    }\n\n    /**\n     * Transforms the request into a read request.\n     * @return {IDataServiceRequest} The data service request.\n     */\n    public read(): IDataServiceRequest {\n        if (this._query.key || (this._query.entitySet === 'Customers' && this._query.key !== null && this._query.key !== undefined)) {\n            this._query.action = 'Read';\n        } else {\n            this._query.action = 'ReadAll';\n            this._query.isReturnTypeACollection = true;\n        }\n\n        this._query.options.bypassCache = 'none';\n        return this._createRequest();\n    }\n\n    /**\n     * Transforms the request into an update request.\n     * @param {string} object The object.\n     * @return {IDataServiceRequest} The data service request.\n     */\n    public update(object: any): IDataServiceRequest {\n        this._query.action = 'Update';\n        this._query.data = this._createODataParameters(object);\n\n        return this._createRequest();\n    }\n\n    /**\n     * Transforms the request into a delete request.\n     * @return {DataServiceRequest} The data service request.\n     */\n    public delete(): IDataServiceRequest {\n        this._query.action = 'Delete';\n\n        return this._createRequest();\n    }\n\n    public setGetAllRecords(): void {\n        this._query.resultSettings.Paging.Top = -1;\n    }\n\n    public isGetAllRecords(): boolean {\n        return this._query.resultSettings.Paging.Top === -1;\n    }\n\n    public createDataServiceRequestForOperation(\n        operationName: string,\n        isAction: boolean,\n        returnType: any,\n        isReturnTypeACollection: string,\n        options: IDataServiceOptions,\n        data?: unknown\n    ): IDataServiceRequest {\n        this._query.returnType = returnType;\n        this._query.isAction = isAction;\n        this._query.isReturnTypeACollection = isReturnTypeACollection === 'true';\n        this._query.action = operationName;\n        this._query.data = this._createODataParameters(data);\n        this._query.options = { ...{ bypassCache: 'get', returnEntity: 'CUSTOM-ENTITY' }, ...options };\n\n        if (this._query.isReturnTypeACollection && !this._query.resultSettings.Paging.Top) {\n            // for paginated requests, where we didn't specify page size, set to fetch all records\n            this.setGetAllRecords();\n        }\n\n        return this._createRequest();\n    }\n\n    private _createODataParameters(data: unknown) {\n        return data ? { parameters: data } : undefined;\n    }\n\n    private _createRequest(): IDataServiceRequest {\n        return new DataServiceRequest(this._query);\n    }\n}\n"]}