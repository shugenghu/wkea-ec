{"version":3,"file":"DataServiceRequest.test.js","sourceRoot":"","sources":["../../src/__test__/DataServiceRequest.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport 'jest';\nimport * as tm from 'typemoq';\nimport { DataServiceRequest, ODATA_HAS_NEXT_PAGE_PROPERTY, parseOdataResult } from '../DataServiceRequest';\nimport { IDataServiceQueryInternal } from '../Interfaces';\n\ndescribe('odata parsing', () => {\n    const MockClass = class MockClassName {\n        public data: any;\n\n        constructor(data: any) {\n            this.data = data;\n        }\n    };\n    it('returns null back', () => {\n        // arrange\n        // act\n        const result = parseOdataResult(null, undefined);\n        // assert\n        expect(result).toBe(null);\n    });\n\n    it('coerces value to, with type', () => {\n        // arrange\n        const input = { foo: 'bar' };\n\n        // act\n        const result = parseOdataResult(input, MockClass);\n\n        // assert\n        expect(result).not.toBe(null);\n        expect(result.data).toEqual(input);\n    });\n\n    it('coerces value to, without type', () => {\n        // arrange\n        const input = { foo: 'bar' };\n\n        // act\n        const result = parseOdataResult(input, undefined);\n\n        // assert\n        expect(result).not.toBe(null);\n        expect(result).toEqual(input);\n    });\n\n    [true, false].forEach(hasNextPage => {\n        it(`can set totalCount, nextPage: ${hasNextPage}`, () => {\n            // arrange\n            const input = {\n                value: { foo: 'bar' },\n                [ODATA_HAS_NEXT_PAGE_PROPERTY]: hasNextPage ? true : undefined\n            };\n\n            // act\n            const result = parseOdataResult(input, MockClass);\n\n            // assert\n            expect(result).not.toBe(null);\n            expect(result.hasNextPage).toBe(hasNextPage);\n        });\n    });\n\n    it('can handle array types', () => {\n        // arrange\n        const values = [0, 1, 2, 3, 4];\n        const input = {\n            value: [...values]\n        };\n\n        // act\n        const result = parseOdataResult(input, MockClass);\n\n        // assert\n        expect(result).not.toBe(null);\n        expect(result.length).toBe(values.length);\n        values.forEach(value => {\n            expect(result[value].data).toBe(value);\n        });\n    });\n});\n\ndescribe('DataServiceRequest', () => {\n    describe('static functions', () => {\n        const buildBatchRequest = DataServiceRequest['buildBatchRequest'];\n        ['GET', 'POST'].forEach(method => {\n            it(`can buildBatchRequest, ${method};`, () => {\n                // arrange\n                const [r1, r2] = [tm.Mock.ofType<DataServiceRequest>(), tm.Mock.ofType<DataServiceRequest>()];\n                const [_q1, _q2] = [tm.Mock.ofType<IDataServiceQueryInternal>(), tm.Mock.ofType<IDataServiceQueryInternal>()];\n                _q1.setup(_ => _.data).returns(() => ({\n                    parameters: 'data1'\n                }));\n                _q2.setup(_ => _.data).returns(() => ({\n                    parameters: 'data2'\n                }));\n                r1.setup(r => r['_query']).returns(() => _q1.object);\n                r1.setup(r => r['_method']).returns(() => method);\n                r2.setup(r => r['_query']).returns(() => _q2.object);\n                r2.setup(r => r['_method']).returns(() => method);\n                // return _id\n                r1.setup(r => r.id()).returns(() => r1.target['_id']);\n                r2.setup(r => r.id()).returns(() => r2.target['_id']);\n\n                const requests: DataServiceRequest[] = [r1.object, r2.object];\n                // act\n                const result = buildBatchRequest('uri', requests);\n                // assert\n                expect(result).toMatchSnapshot();\n                // different ids should be assigned at batch\n                expect(r1.target.id()).not.toBe(r2.target.id());\n            });\n        });\n        describe('toJson', () => {\n            const toJson = DataServiceRequest['toJson'];\n\n            it('null data', () => {\n                expect(toJson(null)).toBeNull();\n            });\n            it('primitives', () => {\n                expect(toJson(4)).toMatchSnapshot();\n                expect(toJson('string')).toMatchSnapshot();\n            });\n            [true, false].forEach(isClone => {\n                it(`handles object, clone:${isClone}`, () => {\n                    // arrange\n                    const input = {\n                        nullValue: null,\n                        stringArrayValue: ['a', 'b', 'c'],\n                        numberArrayValue: [1, 2, 3],\n                        dateValue: new Date(1560987187377), // Wed Jun 19 2019 16:33:07 GMT-0700 (Pacific Daylight Time)\n                        stringValue: 'foobar',\n                        // hardcode one nested object\n                        objectValue: {\n                            nullValue: null,\n                            stringArrayValue: ['a', 'b', 'c'],\n                            numberArrayValue: [1, 2, 3],\n                            dateValue: new Date(1560987187377), // Wed Jun 19 2019 16:33:07 GMT-0700 (Pacific Daylight Time)\n                            stringValue: 'foobar'\n                        }\n                    };\n                    // act\n                    const result = toJson(input, undefined, isClone);\n\n                    // assert\n                    expect(result).toMatchSnapshot();\n                });\n            });\n        });\n    });\n});\n"]}