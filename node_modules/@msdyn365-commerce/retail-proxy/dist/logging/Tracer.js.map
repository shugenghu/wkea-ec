{"version":3,"file":"Tracer.js","sourceRoot":"","sources":["../../src/logging/Tracer.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ProxyError } from '../exceptions';\nimport { EMPTY, format } from '../extensions/StringExtensions';\nimport { DebuggingConsoleSink } from './ConsoleEventWriter';\nimport { attachLoggingSink, RetailLogger } from './RetailLogger';\n\n/**\n * The tracer class allows information to be logged on the device for Information, Warning or Error\n * The same method call can be used for each type\n * Example:\n *         Commerce.Proxy.Tracer.Information(\"Message {0} {1}\", [\"Arg1\", \"Arg2\"]);     // With parameters to be formatted\n *         Commerce.Proxy.Tracer.Information(\"Message\");                               // Without parameters\n *\n * Example of different tracer logs\n *   Dynamics-Information: <<Formatted message>> <<number of milliseconds since 1970/01/01>>\n *   Dynamics-Warning: <<Formatted message>> <<number of milliseconds since 1970/01/01>>\n *   Dynamics-Error: <<Formatted message>> <<number of milliseconds since 1970/01/01>>\n */\n\nexport class Tracer {\n    private static TracerDynamics: string = 'Dynamics-';\n    private static TracerDynamicsError: string = 'Error: ';\n\n    private static TracingOn: boolean = true;\n\n    private static Counters: any[] = new Array();\n    private static Timers: any[] = new Array();\n\n    public static init(): boolean {\n        attachLoggingSink(new DebuggingConsoleSink());\n        return true;\n    }\n\n    public static _initialized: boolean = Tracer.init();\n\n    /**\n     * Traces an informational message in the specified format.\n     */\n    public static Information(informationformat: string, ...args: any[]): void {\n        if (Tracer.TracingOn) {\n            RetailLogger.genericInfo(Tracer.GetMessage.apply(null, [Tracer.TracerDynamicsError, informationformat, ...args]));\n        }\n    }\n\n    /**\n     * Traces a warning message in the specified format.\n     */\n    public static Warning(warningFormat: string, ...args: any[]): void {\n        if (Tracer.TracingOn) {\n            RetailLogger.genericWarning(Tracer.GetMessage.apply(null, [Tracer.TracerDynamicsError, warningFormat, ...args]));\n        }\n    }\n\n    /**\n     * Traces an error message in the specified format.\n     */\n    public static Error(errorFormat: string, ...args: any[]): void {\n        if (Tracer.TracingOn) {\n            RetailLogger.genericError(Tracer.GetMessage.apply(null, [Tracer.TracerDynamicsError, errorFormat, ...args]));\n        }\n    }\n\n    /**\n     * Traces an error message in the specified format.\n     */\n    public static Errors(errors: ProxyError[], formatString: string, ...args: any[]): void {\n        if (Tracer.TracingOn && errors !== null && errors.length > 0) {\n            let errorMessage: string = '';\n            let errorCode: string = '';\n            let errorString: string = '';\n\n            errors.forEach(error => {\n                errorMessage = error.ErrorMessage || EMPTY;\n                errorCode = error.ErrorCode || EMPTY;\n                errorString = JSON.stringify(error);\n                Tracer.Error(\n                    formatString +\n                        ' ' +\n                        format(' \\n ErrorMessage: {0}; \\n ErrorCode: {1}; \\n ErrorObject: \\'{2}\\'', errorMessage, errorCode, errorString),\n                    args\n                );\n            });\n        }\n    }\n\n    public static StartCounter(uniqueFunctionName: string): void {\n        let counter;\n        if (Tracer.Counters[uniqueFunctionName] === undefined) {\n            counter = new PerformanceCounters();\n            counter.Name = uniqueFunctionName;\n        } else {\n            counter = Tracer.Counters[uniqueFunctionName];\n        }\n        counter.Count += 1;\n        Tracer.Counters[uniqueFunctionName] = counter;\n        const now = new Date().getTime();\n        Tracer.Timers.push(now);\n    }\n\n    public static EndCounter(uniqueFunctionName: string): void {\n        const now = new Date().getTime();\n        const startTime = Tracer.Timers.pop();\n        const counter = Tracer.Counters[uniqueFunctionName];\n        counter.TotalTime += now - startTime;\n    }\n\n    public static DumpCounters() {\n        for (const item in Tracer.Counters) {\n            if (Tracer.Counters.hasOwnProperty(item)) {\n                Tracer.Information(\n                    'Method = {0} Number of calls = {1} TotalTime = {2}mS Avg = {3}mS',\n                    Tracer.Counters[item].Name,\n                    Tracer.Counters[item].Count,\n                    Tracer.Counters[item].TotalTime,\n                    Tracer.Counters[item].TotalTime / Tracer.Counters[item].Count\n                );\n            }\n        }\n    }\n\n    private static GetMessage(type: string, formatString: string, ...args: any[]) {\n        const now = '' + new Date().getTime() + 'mS';\n        if (Tracer.TracingOn) {\n            if (!args) {\n                return Tracer.TracerDynamics + type + '\\t' + formatString + '\\t' + now;\n            } else {\n                return (\n                    Tracer.TracerDynamics + type + '\\t' + format.apply(null, [formatString, Array.prototype.slice.call(args)]) + '\\t' + now\n                );\n            }\n        }\n    }\n}\n\nclass PerformanceCounters {\n    public Name: string;\n    public Count: number = 0;\n    public TotalTime: number = 0;\n}\n"]}