/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ProxyError } from '../exceptions';
/**
 * The tracer class allows information to be logged on the device for Information, Warning or Error
 * The same method call can be used for each type
 * Example:
 *         Commerce.Proxy.Tracer.Information("Message {0} {1}", ["Arg1", "Arg2"]);     // With parameters to be formatted
 *         Commerce.Proxy.Tracer.Information("Message");                               // Without parameters
 *
 * Example of different tracer logs
 *   Dynamics-Information: <<Formatted message>> <<number of milliseconds since 1970/01/01>>
 *   Dynamics-Warning: <<Formatted message>> <<number of milliseconds since 1970/01/01>>
 *   Dynamics-Error: <<Formatted message>> <<number of milliseconds since 1970/01/01>>
 */
export declare class Tracer {
    private static TracerDynamics;
    private static TracerDynamicsError;
    private static TracingOn;
    private static Counters;
    private static Timers;
    static init(): boolean;
    static _initialized: boolean;
    /**
     * Traces an informational message in the specified format.
     */
    static Information(informationformat: string, ...args: any[]): void;
    /**
     * Traces a warning message in the specified format.
     */
    static Warning(warningFormat: string, ...args: any[]): void;
    /**
     * Traces an error message in the specified format.
     */
    static Error(errorFormat: string, ...args: any[]): void;
    /**
     * Traces an error message in the specified format.
     */
    static Errors(errors: ProxyError[], formatString: string, ...args: any[]): void;
    static StartCounter(uniqueFunctionName: string): void;
    static EndCounter(uniqueFunctionName: string): void;
    static DumpCounters(): void;
    private static GetMessage;
}
