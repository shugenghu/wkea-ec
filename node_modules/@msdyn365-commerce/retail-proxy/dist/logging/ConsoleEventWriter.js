/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// tslint:disable:no-empty
export var EventLevel;
(function (EventLevel) {
    EventLevel[EventLevel["LogAlways"] = 0] = "LogAlways";
    EventLevel[EventLevel["Critical"] = 1] = "Critical";
    EventLevel[EventLevel["Error"] = 2] = "Error";
    EventLevel[EventLevel["Warning"] = 3] = "Warning";
    EventLevel[EventLevel["Informational"] = 4] = "Informational";
    EventLevel[EventLevel["Verbose"] = 5] = "Verbose";
})(EventLevel || (EventLevel = {}));
export var EventChannel;
(function (EventChannel) {
    EventChannel[EventChannel["Admin"] = 16] = "Admin";
    EventChannel[EventChannel["Operational"] = 17] = "Operational";
    EventChannel[EventChannel["Analytic"] = 18] = "Analytic";
    EventChannel[EventChannel["Debug"] = 19] = "Debug";
})(EventChannel || (EventChannel = {}));
export class Utils {
    static getParameterNames(func) {
        return [];
    }
    static generateGuid() {
        return '';
    }
    static emptyGuid() {
        return '';
    }
}
export var EventType;
(function (EventType) {
    EventType[EventType["None"] = 0] = "None";
    EventType[EventType["Custom"] = 1] = "Custom";
    EventType[EventType["PageView"] = 2] = "PageView";
})(EventType || (EventType = {}));
export class PageViewMetadata {
}
export class EventStaticMetadata {
}
export class EventCoreFields {
}
export class Event {
    constructor(type, appSessionId, userSessionId, deviceId, deviceNumber, terminalId, userId, tenantId, offlineAvailability, offlineCurrentMode, screenResolution) { }
}
export class DebuggingConsoleSink {
    setSessionInfo(appSessionId, userSessionId, deviceId, deviceNumber, terminalId, userId, tenantId, offlineAvailability, offlineCurrentMode) { }
    setInstrumentationKey(instrumentationKey) { }
    writeEvent(event) { }
}
export class LoggerBase {
    static writeEvent(name, eventId, version, channel, level, keywords, task, opCode, message) {
        // console.log(`name: ${name}, eventId: ${eventId}, version: ${version}, channel: ${this.getEnumKeyForValue(EventChannel, channel)}`);
        // console.log(
        //     `level: ${this.getEnumKeyForValue(
        //         EventLevel,
        //         level
        //     )}, keywords: ${keywords.toString()}, task: ${task}, opCode: ${opCode}, message: ${message}`
        // );
    }
    static addLoggingSink(loggingSink) { }
    static getEnumKeyForValue(enumType, value) {
        for (const key in Object.keys(enumType)) {
            if (enumType[key] === value) {
                return key;
            }
        }
        return '';
    }
}
//# sourceMappingURL=ConsoleEventWriter.js.map