{"version":3,"file":"ConsoleEventWriter.js","sourceRoot":"","sources":["../../src/logging/ConsoleEventWriter.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,0BAA0B;AAC1B,MAAM,CAAN,IAAY,UAOX;AAPD,WAAY,UAAU;IAClB,qDAAa,CAAA;IACb,mDAAY,CAAA;IACZ,6CAAS,CAAA;IACT,iDAAW,CAAA;IACX,6DAAiB,CAAA;IACjB,iDAAW,CAAA;AACf,CAAC,EAPW,UAAU,KAAV,UAAU,QAOrB;AAED,MAAM,CAAN,IAAY,YAKX;AALD,WAAY,YAAY;IACpB,kDAAU,CAAA;IACV,8DAAgB,CAAA;IAChB,wDAAa,CAAA;IACb,kDAAU,CAAA;AACd,CAAC,EALW,YAAY,KAAZ,YAAY,QAKvB;AAmBD,MAAM,OAAO,KAAK;IACP,MAAM,CAAC,iBAAiB,CAAC,IAAc;QAC1C,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,YAAY;QACtB,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,SAAS;QACnB,OAAO,EAAE,CAAC;IACd,CAAC;CACJ;AAED,MAAM,CAAN,IAAY,SAIX;AAJD,WAAY,SAAS;IACjB,yCAAQ,CAAA;IACR,6CAAU,CAAA;IACV,iDAAY,CAAA;AAChB,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;AAED,MAAM,OAAO,gBAAgB;CAE5B;AAED,MAAM,OAAO,mBAAmB;CAY/B;AAED,MAAM,OAAO,eAAe;CAY3B;AAED,MAAM,OAAO,KAAK;IAQd,YACI,IAAe,EACf,YAAoB,EACpB,aAAqB,EACrB,QAAgB,EAChB,YAAoB,EACpB,UAAkB,EAClB,MAAc,EACd,QAAgB,EAChB,mBAA2B,EAC3B,kBAA0B,EAC1B,gBAAwB,IACzB,CAAC;CACP;AAED,MAAM,OAAO,oBAAoB;IACtB,cAAc,CACjB,YAAoB,EACpB,aAAqB,EACrB,QAAgB,EAChB,YAAoB,EACpB,UAAkB,EAClB,MAAc,EACd,QAAgB,EAChB,mBAA2B,EAC3B,kBAA0B,IACrB,CAAC;IAEH,qBAAqB,CAAC,kBAA0B,IAAS,CAAC;IAE1D,UAAU,CAAC,KAAY,IAAS,CAAC;CAC3C;AAED,MAAM,OAAO,UAAU;IACZ,MAAM,CAAC,UAAU,CACpB,IAAY,EACZ,OAAe,EACf,OAAe,EACf,OAAqB,EACrB,KAAiB,EACjB,QAAkB,EAClB,IAAY,EACZ,MAAc,EACd,OAAe;QAEf,sIAAsI;QACtI,eAAe;QACf,yCAAyC;QACzC,sBAAsB;QACtB,gBAAgB;QAChB,mGAAmG;QACnG,KAAK;IACT,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,WAAyB,IAAS,CAAC;IAEzD,MAAM,CAAC,kBAAkB,CAAC,QAAa,EAAE,KAAa;QACzD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACrC,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,KAAK,EAAE;gBACzB,OAAO,GAAG,CAAC;aACd;SACJ;QACD,OAAO,EAAE,CAAC;IACd,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-empty\nexport enum EventLevel {\n    LogAlways = 0,\n    Critical = 1,\n    Error = 2,\n    Warning = 3,\n    Informational = 4,\n    Verbose = 5\n}\n\nexport enum EventChannel {\n    Admin = 16,\n    Operational = 17,\n    Analytic = 18,\n    Debug = 19\n}\n\nexport interface ILoggingSink {\n    writeEvent(event: Event): void;\n    setSessionInfo(\n        appSessionId: string,\n        userSessionId: string,\n        deviceId: string,\n        deviceNumber: string,\n        terminalId: string,\n        userId: string,\n        tenantId: string,\n        offlineAvailability: string,\n        offlineCurrentMode: string,\n        screenResolution: string\n    ): void;\n    setInstrumentationKey(instrumentationKey: string): void;\n}\n\nexport class Utils {\n    public static getParameterNames(func: Function): string[] {\n        return [];\n    }\n\n    public static generateGuid(): string {\n        return '';\n    }\n\n    public static emptyGuid(): string {\n        return '';\n    }\n}\n\nexport enum EventType {\n    None = 0,\n    Custom = 1,\n    PageView = 2\n}\n\nexport class PageViewMetadata {\n    public PageName: string;\n}\n\nexport class EventStaticMetadata {\n    public Name: string;\n    public Id: number;\n    public Version: number;\n    public Level: EventLevel;\n    public LevelName: string;\n    public Channel: EventChannel;\n    public ChannelName: string;\n    public Keywords: string[];\n    public Task: string;\n    public OpCode: string;\n    public Message: string;\n}\n\nexport class EventCoreFields {\n    public ClientTimestamp: number;\n    public AppSessionId: string;\n    public UserSessionId: string;\n    public DeviceId: string;\n    public DeviceNumber: string;\n    public TerminalId: string;\n    public UserId: string;\n    public TenantId: string;\n    public OfflineAvailability: string;\n    public OfflineCurrentMode: string;\n    public ScreenResolution: string;\n}\n\nexport class Event {\n    public Type: EventType;\n    public PageViewMetadata: PageViewMetadata;\n    public StaticMetadata: EventStaticMetadata;\n    public CoreFields: EventCoreFields;\n    public Payload: {\n        [name: string]: any;\n    };\n    constructor(\n        type: EventType,\n        appSessionId: string,\n        userSessionId: string,\n        deviceId: string,\n        deviceNumber: string,\n        terminalId: string,\n        userId: string,\n        tenantId: string,\n        offlineAvailability: string,\n        offlineCurrentMode: string,\n        screenResolution: string\n    ) {}\n}\n\nexport class DebuggingConsoleSink implements ILoggingSink {\n    public setSessionInfo(\n        appSessionId: string,\n        userSessionId: string,\n        deviceId: string,\n        deviceNumber: string,\n        terminalId: string,\n        userId: string,\n        tenantId: string,\n        offlineAvailability: string,\n        offlineCurrentMode: string\n    ): void {}\n\n    public setInstrumentationKey(instrumentationKey: string): void {}\n\n    public writeEvent(event: Event): void {}\n}\n\nexport class LoggerBase {\n    public static writeEvent(\n        name: string,\n        eventId: number,\n        version: number,\n        channel: EventChannel,\n        level: EventLevel,\n        keywords: string[],\n        task: string,\n        opCode: string,\n        message: string\n    ) {\n        // console.log(`name: ${name}, eventId: ${eventId}, version: ${version}, channel: ${this.getEnumKeyForValue(EventChannel, channel)}`);\n        // console.log(\n        //     `level: ${this.getEnumKeyForValue(\n        //         EventLevel,\n        //         level\n        //     )}, keywords: ${keywords.toString()}, task: ${task}, opCode: ${opCode}, message: ${message}`\n        // );\n    }\n\n    public static addLoggingSink(loggingSink: ILoggingSink): void {}\n\n    public static getEnumKeyForValue(enumType: any, value: number): string {\n        for (const key in Object.keys(enumType)) {\n            if (enumType[key] === value) {\n                return key;\n            }\n        }\n        return '';\n    }\n}\n"]}