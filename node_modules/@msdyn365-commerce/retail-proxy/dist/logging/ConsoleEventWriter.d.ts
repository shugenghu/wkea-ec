/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
export declare enum EventLevel {
    LogAlways = 0,
    Critical = 1,
    Error = 2,
    Warning = 3,
    Informational = 4,
    Verbose = 5
}
export declare enum EventChannel {
    Admin = 16,
    Operational = 17,
    Analytic = 18,
    Debug = 19
}
export interface ILoggingSink {
    writeEvent(event: Event): void;
    setSessionInfo(appSessionId: string, userSessionId: string, deviceId: string, deviceNumber: string, terminalId: string, userId: string, tenantId: string, offlineAvailability: string, offlineCurrentMode: string, screenResolution: string): void;
    setInstrumentationKey(instrumentationKey: string): void;
}
export declare class Utils {
    static getParameterNames(func: Function): string[];
    static generateGuid(): string;
    static emptyGuid(): string;
}
export declare enum EventType {
    None = 0,
    Custom = 1,
    PageView = 2
}
export declare class PageViewMetadata {
    PageName: string;
}
export declare class EventStaticMetadata {
    Name: string;
    Id: number;
    Version: number;
    Level: EventLevel;
    LevelName: string;
    Channel: EventChannel;
    ChannelName: string;
    Keywords: string[];
    Task: string;
    OpCode: string;
    Message: string;
}
export declare class EventCoreFields {
    ClientTimestamp: number;
    AppSessionId: string;
    UserSessionId: string;
    DeviceId: string;
    DeviceNumber: string;
    TerminalId: string;
    UserId: string;
    TenantId: string;
    OfflineAvailability: string;
    OfflineCurrentMode: string;
    ScreenResolution: string;
}
export declare class Event {
    Type: EventType;
    PageViewMetadata: PageViewMetadata;
    StaticMetadata: EventStaticMetadata;
    CoreFields: EventCoreFields;
    Payload: {
        [name: string]: any;
    };
    constructor(type: EventType, appSessionId: string, userSessionId: string, deviceId: string, deviceNumber: string, terminalId: string, userId: string, tenantId: string, offlineAvailability: string, offlineCurrentMode: string, screenResolution: string);
}
export declare class DebuggingConsoleSink implements ILoggingSink {
    setSessionInfo(appSessionId: string, userSessionId: string, deviceId: string, deviceNumber: string, terminalId: string, userId: string, tenantId: string, offlineAvailability: string, offlineCurrentMode: string): void;
    setInstrumentationKey(instrumentationKey: string): void;
    writeEvent(event: Event): void;
}
export declare class LoggerBase {
    static writeEvent(name: string, eventId: number, version: number, channel: EventChannel, level: EventLevel, keywords: string[], task: string, opCode: string, message: string): void;
    static addLoggingSink(loggingSink: ILoggingSink): void;
    static getEnumKeyForValue(enumType: any, value: number): string;
}
