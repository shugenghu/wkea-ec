/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IDataServiceOptions, IDataServiceRequest, IQueryResultSettings } from './Interfaces';
/**
 * Represents a data service query object.
 */
export declare class DataServiceQuery {
    private _query;
    /**
     * Creates a new instance of DataServiceQuery<T>.
     * @param {IDataServiceRequestFactory} dataServiceRequestFactory The data service request factory.
     * @param {string} [entitySet] The entity set name.
     * @param {string} [entityType] The entity type name.
     * @param {any} [returntype] The return type of query.
     * @param {any} [key] Entity key.
     */
    constructor(entitySet?: string, entityType?: string, returnType?: any, key?: any);
    /**
     * Query result settings.
     *
     * @param {string} value The value of query result settings.
     */
    resultSettings(value: IQueryResultSettings): DataServiceQuery;
    /**
     * Filter Clause.
     * @param {string} value The filter value.
     */
    filter(value: string): DataServiceQuery;
    /**
     * Top clause
     * @param {string} value The number of top rows to select.
     */
    top(value: number): DataServiceQuery;
    /**
     * Skip clause
     * @param {string} value The number of rows to skip
     */
    skip(value: number): DataServiceQuery;
    /**
     * Expand clause
     * @param {string} propertyName The property name to expand.
     */
    expand(propertyName: string): DataServiceQuery;
    /**
     * Request number of total row available.
     */
    inlineCount(): DataServiceQuery;
    /**
     * Order by clause.
     * @param {string} value The field name for ordering.
     */
    orderBy(value: string): DataServiceQuery;
    /**
     * Transforms the request into a create request.
     * @param {string} object The object.
     * @return {IDataServiceRequest} The data service request.
     */
    create(object: any): IDataServiceRequest;
    /**
     * Transforms the request into a read request.
     * @return {IDataServiceRequest} The data service request.
     */
    read(): IDataServiceRequest;
    /**
     * Transforms the request into an update request.
     * @param {string} object The object.
     * @return {IDataServiceRequest} The data service request.
     */
    update(object: any): IDataServiceRequest;
    /**
     * Transforms the request into a delete request.
     * @return {DataServiceRequest} The data service request.
     */
    delete(): IDataServiceRequest;
    setGetAllRecords(): void;
    isGetAllRecords(): boolean;
    createDataServiceRequestForOperation(operationName: string, isAction: boolean, returnType: any, isReturnTypeACollection: string, options: IDataServiceOptions, data?: unknown): IDataServiceRequest;
    private _createODataParameters;
    private _createRequest;
}
