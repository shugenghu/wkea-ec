/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
/**
 * Class for representing an error.
 */
export declare class ProxyError {
    private _errorCode;
    private _errorMessage;
    private _localizedErrorMessage;
    private _canRetry;
    private _commerceException;
    private _formatData;
    private _extraData;
    constructor(errorCode: string, errorMessage: string, localizedErrorMessage: any, canRetry: boolean, extraData: any, ...formatData: any[]);
    /**
     * Takes a proxy error and returns a proper JS error version of it
     * @param proxyError The proxyError
     */
    static toError(proxyError: ProxyError): Error;
    /**
     * Gets the commerce exception that caused this error.
     *
     * @return {any} The commerce exception.
     */
    get commerceException(): any;
    /**
     * Sets the commerce exception that caused this error.
     *
     * @param {any} exception The commerce exception.
     */
    set commerceException(exception: any);
    /**
     * Gets the error code.
     *
     * @return {string} The error code.
     */
    get ErrorCode(): string;
    /**
     * Gets the error message.
     *
     * @return {string} The error message.
     */
    get ErrorMessage(): string;
    /**
     * Gets the localized error message.
     *
     * @return {string} The localized error message.
     */
    get LocalizedErrorMessage(): string;
    /**
     * Gets the format data used on formatted error messages.
     *
     * @return {any[]} The format data.
     */
    get formatData(): any[];
    /**
     * Gets the additional information the might be supplied by the error.
     *
     * @return {any} The extra data.
     */
    get extraData(): any;
    /**
     * Gets the error title. Defaults to the resource string string_29004 for the error title if
     * no error title is mapped for the error.
     */
    get ErrorTitleResourceId(): string;
    /**
     * Gets whether the action that generated the error can be retried.
     *
     * @return {string} Whether the action that generated the error can be retried.
     */
    get CanRetry(): boolean;
}
