/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// Following reference is added to fix the build dependency between CommerceContxt and DataServiceQuery.
// This will eventually be moved to CommerceContext.ts when MPOS proxy and Commerce Proxy are merged.
'use strict';
/**
 * Class for representing an error.
 */
export class ProxyError {
    constructor(errorCode, errorMessage, localizedErrorMessage, canRetry, extraData, ...formatData) {
        this._canRetry = false;
        this._errorCode = errorCode;
        this._errorMessage = errorMessage;
        this._localizedErrorMessage = localizedErrorMessage;
        this._canRetry = canRetry;
        this._commerceException = null;
        this._formatData = formatData;
        this._extraData = extraData;
    }
    /**
     * Takes a proxy error and returns a proper JS error version of it
     * @param proxyError The proxyError
     */
    static toError(proxyError) {
        const e = new Error();
        e.name = proxyError.ErrorCode || 'Proxy Error';
        e.message = proxyError.ErrorMessage || proxyError.LocalizedErrorMessage;
        // Assign extra error details to error.
        // ts-ignoring as the standard error contract only supports name and message
        if (proxyError.extraData) {
            // @ts-ignore
            e.requestUri = proxyError.extraData.requestUri;
            // @ts-ignore
            e.data = proxyError.extraData.data;
            // @ts-ignore
            e.statusCode = proxyError.extraData.statusCode;
        }
        return e;
    }
    /**
     * Gets the commerce exception that caused this error.
     *
     * @return {any} The commerce exception.
     */
    get commerceException() {
        return this._commerceException;
    }
    /**
     * Sets the commerce exception that caused this error.
     *
     * @param {any} exception The commerce exception.
     */
    set commerceException(exception) {
        this._commerceException = exception;
    }
    /**
     * Gets the error code.
     *
     * @return {string} The error code.
     */
    get ErrorCode() {
        return this._errorCode;
    }
    /**
     * Gets the error message.
     *
     * @return {string} The error message.
     */
    get ErrorMessage() {
        return this._errorMessage;
    }
    /**
     * Gets the localized error message.
     *
     * @return {string} The localized error message.
     */
    get LocalizedErrorMessage() {
        return this._localizedErrorMessage;
    }
    /**
     * Gets the format data used on formatted error messages.
     *
     * @return {any[]} The format data.
     */
    get formatData() {
        return this._formatData;
    }
    /**
     * Gets the additional information the might be supplied by the error.
     *
     * @return {any} The extra data.
     */
    get extraData() {
        return this._extraData;
    }
    /**
     * Gets the error title. Defaults to the resource string string_29004 for the error title if
     * no error title is mapped for the error.
     */
    get ErrorTitleResourceId() {
        const errorTitleResourceId = 'string_29004'; // Error string: There is a problem with the server
        return errorTitleResourceId;
    }
    /**
     * Gets whether the action that generated the error can be retried.
     *
     * @return {string} Whether the action that generated the error can be retried.
     */
    get CanRetry() {
        return this._canRetry;
    }
}
//# sourceMappingURL=ProxyError.js.map