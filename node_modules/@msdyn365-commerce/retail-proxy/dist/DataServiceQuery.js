/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { DataServiceRequest } from './DataServiceRequest';
/**
 * Represents a data service query object.
 */
export class DataServiceQuery {
    /**
     * Creates a new instance of DataServiceQuery<T>.
     * @param {IDataServiceRequestFactory} dataServiceRequestFactory The data service request factory.
     * @param {string} [entitySet] The entity set name.
     * @param {string} [entityType] The entity type name.
     * @param {any} [returntype] The return type of query.
     * @param {any} [key] Entity key.
     */
    constructor(entitySet, entityType, returnType, key) {
        this._query = {
            entitySet,
            entityType,
            key,
            returnType,
            tokens: {},
            // by default all action will skip reading from cache before making execute call
            options: { bypassCache: 'get', returnEntity: entityType },
            resultSettings: { Paging: {}, Sorting: {} }
        };
    }
    /**
     * Query result settings.
     *
     * @param {string} value The value of query result settings.
     */
    resultSettings(value) {
        if (!value) {
            value = {};
        }
        this._query.resultSettings = {};
        this._query.resultSettings.Paging = value.Paging || {};
        this._query.resultSettings.Sorting = value.Sorting || {};
        this._query.resultSettings.count = value.count;
        return this;
    }
    /**
     * Filter Clause.
     * @param {string} value The filter value.
     */
    filter(value) {
        this._query.filterSettings = value;
        return this;
    }
    /**
     * Top clause
     * @param {string} value The number of top rows to select.
     */
    top(value) {
        this._query.resultSettings.Paging.Top = value;
        return this;
    }
    /**
     * Skip clause
     * @param {string} value The number of rows to skip
     */
    skip(value) {
        this._query.resultSettings.Paging.Skip = value;
        return this;
    }
    /**
     * Expand clause
     * @param {string} propertyName The property name to expand.
     */
    expand(propertyName) {
        if (this._query.expands == null) {
            this._query.expands = [];
        }
        this._query.expands.push(propertyName);
        return this;
    }
    /**
     * Request number of total row available.
     */
    inlineCount() {
        this._query.inlineCount = true;
        return this;
    }
    /**
     * Order by clause.
     * @param {string} value The field name for ordering.
     */
    orderBy(value) {
        if (!this._query.resultSettings.Sorting.Columns) {
            this._query.resultSettings.Sorting.Columns = [];
        }
        this._query.resultSettings.Sorting.Columns.push({ ColumnName: value });
        return this;
    }
    /**
     * Transforms the request into a create request.
     * @param {string} object The object.
     * @return {IDataServiceRequest} The data service request.
     */
    create(object) {
        this._query.action = 'Create';
        this._query.data = this._createODataParameters(object);
        this._query.options.bypassCache = 'none';
        return this._createRequest();
    }
    /**
     * Transforms the request into a read request.
     * @return {IDataServiceRequest} The data service request.
     */
    read() {
        if (this._query.key || (this._query.entitySet === 'Customers' && this._query.key !== null && this._query.key !== undefined)) {
            this._query.action = 'Read';
        }
        else {
            this._query.action = 'ReadAll';
            this._query.isReturnTypeACollection = true;
        }
        this._query.options.bypassCache = 'none';
        return this._createRequest();
    }
    /**
     * Transforms the request into an update request.
     * @param {string} object The object.
     * @return {IDataServiceRequest} The data service request.
     */
    update(object) {
        this._query.action = 'Update';
        this._query.data = this._createODataParameters(object);
        return this._createRequest();
    }
    /**
     * Transforms the request into a delete request.
     * @return {DataServiceRequest} The data service request.
     */
    delete() {
        this._query.action = 'Delete';
        return this._createRequest();
    }
    setGetAllRecords() {
        this._query.resultSettings.Paging.Top = -1;
    }
    isGetAllRecords() {
        return this._query.resultSettings.Paging.Top === -1;
    }
    createDataServiceRequestForOperation(operationName, isAction, returnType, isReturnTypeACollection, options, data) {
        this._query.returnType = returnType;
        this._query.isAction = isAction;
        this._query.isReturnTypeACollection = isReturnTypeACollection === 'true';
        this._query.action = operationName;
        this._query.data = this._createODataParameters(data);
        this._query.options = { ...{ bypassCache: 'get', returnEntity: 'CUSTOM-ENTITY' }, ...options };
        if (this._query.isReturnTypeACollection && !this._query.resultSettings.Paging.Top) {
            // for paginated requests, where we didn't specify page size, set to fetch all records
            this.setGetAllRecords();
        }
        return this._createRequest();
    }
    _createODataParameters(data) {
        return data ? { parameters: data } : undefined;
    }
    _createRequest() {
        return new DataServiceRequest(this._query);
    }
}
//# sourceMappingURL=DataServiceQuery.js.map