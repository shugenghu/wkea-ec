/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { BypassCache, ICache } from './ICache';
import { ICallerContext } from './ICallerContext';
import { ITelemetry } from './ITelemetry';

/**
 * Interface which specifies the caching information for a given action
 */
export interface IActionInput {
    /**
     * Returns the type which is used for caching, could be the same as the response entity
     */
    getCacheObjectType(): string;

    /**
     * Returns the key which is used for caching, usually the ID
     */
    getCacheKey(): string;

    /**
     * funtion to provide action input hook to override read from cache
     */
    readCacheEntries?(requestCache: ICache, appCache: ICache, shouldReadFromAppCache?: boolean, telemetry?: ITelemetry): any;

    /**
     * funtion to provide action input hook to override write in cache
     */
    saveCacheEntries?(
        results: any,
        requestCache: ICache,
        appCache: ICache,
        isCacheTypeApplication: boolean
    ): { [cacheKey: string]: any } | undefined;

    /**
     * Is the return type cache-able
     */
    shouldCacheOutput(): boolean;
}

/**
 * Interface for data service request.
 */
export interface IDataServiceRequest extends IActionInput {
    /**
     * Locale for the current data service request.
     */
    locale: string;

    /**
     * Request Identifier.
     * Autogenerated unique identifier if executed in batch. Used to fetch the response from batch result array.
     */
    id(): number;

    /**
     * Query parameters
     * Query parameters for data service request
     */
    queryParams<T>(): T;

    /**
     * Execute the request.
     * @param {any} callerContext The caller context.
     * @return {IAsyncResult<T>} The async result.
     */
    execute<T>(callerContext: any): Promise<T>;

    /**
     * Executes the batch requests.
     * @param {IDataServiceRequest[]} requests The collection of requests to execute.
     * @param {any} [callerContext] The caller context.
     * @return {IAsyncResult<Array>} The async result.  Responses at index I correlates to request with identifier I.
     */
    executeBatch(requests: IDataServiceRequest[], callerContext?: ICallerContext): Promise<any[]>;

    /**
     * override cache type.
     * @param {BypassCache} bypassCache cache type.
     */
    overrideCacheType(bypassCache: BypassCache): void;
}

/**
 * Interface for cache options that will be used during action execution
 */
export interface IDataServiceOptions {
    /**
     * return type
     */
    returnEntity: string;
    /**
     * property to indicate if read from cache needs to be skipped
     */
    bypassCache: BypassCache;
}

/**
 * Represents a null result.
 */
// tslint:disable:no-empty-interface
// tslint:disable-next-line:interface-name
export interface NullResult {}
