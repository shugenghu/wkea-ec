/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

export enum LogLevel {
    /**
     * For information that's typically valuable only for debugging. These messages may contain sensitive application data and so shouldn't be enabled in a production environment. Disabled by default.
     */
    Trace = 'trace',
    /**
     * For information that may be useful in development and debugging. Example: Entering method Configure with flag set to true. Enable Debug level logs in production only when troubleshooting, due to the high volume of logs.
     */
    Debug = 'debug',
    /**
     * For tracking the general flow of the app. These logs typically have some long-term value. Example: Request received for path /api/todo
     */
    Information = 'information',
    /**
     * For abnormal or unexpected events in the app flow.
     * These may include errors or other conditions that don't cause the app to stop but might need to be investigated. Handled exceptions are a common place to use the Warning log level. Example: FileNotFoundException for file quotes.txt.
     */
    Warning = 'warning',
    /**
     * For errors and exceptions that cannot be handled.
     * These messages indicate a failure in the current activity or operation (such as the current HTTP request), not an app-wide failure. Example log message: Cannot insert record due to duplicate key violation.
     */
    Error = 'error',
    /**
     * For failures that require immediate attention. Examples: data loss scenarios, out of disk space.
     */
    Critical = 'critical',
    None = 'none'
}

/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/**
 * Holds optional parameters for log statements
 */
export type TelemetryLogOptions = {
    /**
     * Holds any arguments that are meant for placeholders in the message template
     */
    values?: unknown[];

    /**
     * Array of custom tags to add to log
     */
    customTags?: string[];

    /**
     * Exception that can be attached to the log
     */
    exception?: Error;
};


/**
 * Interface exposing methods for trace logging, telemetry event logging, and data attribute rendering
 * @property trace          {Function}  - Logs the given message at a Trace level
 * @property debug          {Function}  - Logs the given message at a Debug level
 * @property information    {Function}  - Logs the given message at a Information level
 * @property warning        {Function}  - Logs the given message at a Warning level
 * @property error          {Function}  - Logs the given message at a Error level
 * @property critical       {Function}  - Logs the given message at a Critical level
 * @property exception      {Function}  - Logs the given error object
 */
export interface ITelemetry {
    /**
     * Logs a structured message at the given log level, with optional custom tags and/or an exception
     * @param logLevel LogLevel of the message
     * @param messageTemplate String to log, denoting placeholders with {placeholder}
     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object
     */
    log(logLevel: LogLevel, messageTemplate: string, logOptions?: TelemetryLogOptions): void;

}
