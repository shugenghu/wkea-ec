    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { Customer, CustomerSearchCriteria, GlobalCustomer, CustomerSearchByFieldCriteria, CustomerTimelineItem, SalesOrder, OrderShipments, PurchaseHistory, CustomerSearchField, CustomerTimelineItemTypeMap, CustomerTimelineRefiner, CustomerTitle } from '../Entities/CommerceTypes.g';
    import { CustomerClass, GlobalCustomerClass, CustomerTimelineItemClass, SalesOrderClass, OrderShipmentsClass, PurchaseHistoryClass, CustomerSearchFieldClass, CustomerTimelineItemTypeMapClass, CustomerTimelineRefinerClass, CustomerTitleClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function customersQuery(accountNumber?: string): DataServiceQuery {
    // Temp fix to return '' instead of null. Requires manual update until TSProxy generator updated
      var key = (accountNumber !== null && accountNumber !== undefined) ? { AccountNumber: accountNumber } : null;
      return new DataServiceQuery("Customers", "Customer", CustomerClass, key);
    }
    
    export function createCreateInput(entity: Customer): IDataServiceRequest {
        return customersQuery().create(entity);
    }
    export function createCustomerAsync(context: IContext, entity: Customer): AsyncResult<Customer> {
        const request = createCreateInput(entity, );
        return executeAction<Customer>(request, context);
    }
    export function createUpdateInput(entity: Customer): IDataServiceRequest {
        return customersQuery(entity.AccountNumber).update(entity);
    }
    export function updateAsync(context: IContext, entity: Customer): AsyncResult<Customer> {
        const request = createUpdateInput(entity, );
        return executeAction<Customer>(request, context);
    }
    export function createDeleteAsync(entity: Customer): IDataServiceRequest {
        return customersQuery(entity.AccountNumber).delete();
    }
    export function deleteAsync(context: IContext, entity: Customer): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(accountNumber: string): IDataServiceRequest {
        return customersQuery(accountNumber).read();
    }
    export function readAsync(context: IContext, accountNumber: string): AsyncResult<Customer> {
        const request = createReadAsync(accountNumber, );
        return executeAction<Customer>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return customersQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<Customer[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<Customer[]>(request, context);
    }
    
    export function createSearchInput(queryResultSettings: IQueryResultSettings, customerSearchCriteria: CustomerSearchCriteria | null): IDataServiceRequest {      
        const query = customersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('Search', true, GlobalCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'GlobalCustomer'}, {customerSearchCriteria: customerSearchCriteria });
    }    
    
    export function searchAsync(context: IContext, customerSearchCriteria: CustomerSearchCriteria | null):AsyncResult<GlobalCustomer[]> {
        const request = createSearchInput(context.queryResultSettings, customerSearchCriteria, );
        return executeAction<GlobalCustomer[]>(request, context);
    }          
          
    export function createSearchByFieldsInput(queryResultSettings: IQueryResultSettings, customerSearchByFieldCriteria: CustomerSearchByFieldCriteria | null): IDataServiceRequest {      
        const query = customersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchByFields', true, GlobalCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'GlobalCustomer'}, {CustomerSearchByFieldCriteria: customerSearchByFieldCriteria });
    }    
    
    export function searchByFieldsAsync(context: IContext, customerSearchByFieldCriteria: CustomerSearchByFieldCriteria | null):AsyncResult<GlobalCustomer[]> {
        const request = createSearchByFieldsInput(context.queryResultSettings, customerSearchByFieldCriteria, );
        return executeAction<GlobalCustomer[]>(request, context);
    }          
          
    export function createGetByAccountNumbersInput(queryResultSettings: IQueryResultSettings, accountNumbers: string[] | null, searchLocationValue: number): IDataServiceRequest {      
        const query = customersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetByAccountNumbers', true, CustomerClass, 'true', { bypassCache: 'none', returnEntity: 'Customer'}, {accountNumbers: accountNumbers, searchLocationValue: searchLocationValue });
    }    
    
    export function getByAccountNumbersAsync(context: IContext, accountNumbers: string[] | null, searchLocationValue: number):AsyncResult<Customer[]> {
        const request = createGetByAccountNumbersInput(context.queryResultSettings, accountNumbers, searchLocationValue, );
        return executeAction<Customer[]>(request, context);
    }          
          
    export function createCreateCustomerTimelineItemInput(customerTimelineItem: CustomerTimelineItem | null): IDataServiceRequest {      
        const query = customersQuery();
        return query.createDataServiceRequestForOperation('CreateCustomerTimelineItem', true, CustomerTimelineItemClass, 'false', { bypassCache: 'get', returnEntity: 'CustomerTimelineItem'}, {customerTimelineItem: customerTimelineItem });
    }    
    
    export function createCustomerTimelineItemAsync(context: IContext, customerTimelineItem: CustomerTimelineItem | null):AsyncResult<CustomerTimelineItem> {
        const request = createCreateCustomerTimelineItemInput(customerTimelineItem, );
        return executeAction<CustomerTimelineItem>(request, context);
    }          
          
    export function createUpdateCustomerTimelineItemInput(customerTimelineItem: CustomerTimelineItem | null): IDataServiceRequest {      
        const query = customersQuery();
        return query.createDataServiceRequestForOperation('UpdateCustomerTimelineItem', true, CustomerTimelineItemClass, 'false', { bypassCache: 'get', returnEntity: 'CustomerTimelineItem'}, {customerTimelineItem: customerTimelineItem });
    }    
    
    export function updateCustomerTimelineItemAsync(context: IContext, customerTimelineItem: CustomerTimelineItem | null):AsyncResult<CustomerTimelineItem> {
        const request = createUpdateCustomerTimelineItemInput(customerTimelineItem, );
        return executeAction<CustomerTimelineItem>(request, context);
    }          
          
    export function createGetOrderHistoryInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      
        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetOrderHistory', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, { });
    }    
    
    export function getOrderHistoryAsync(context: IContext, accountNumber: string):AsyncResult<SalesOrder[]> {
        const request = createGetOrderHistoryInput(context.queryResultSettings, accountNumber, );
        return executeAction<SalesOrder[]>(request, context);
    }          
          
    export function createGetOrderShipmentsHistoryInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      
        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetOrderShipmentsHistory', true, OrderShipmentsClass, 'true', { bypassCache: 'none', returnEntity: 'OrderShipments'}, { });
    }    
    
    export function getOrderShipmentsHistoryAsync(context: IContext, accountNumber: string):AsyncResult<OrderShipments[]> {
        const request = createGetOrderShipmentsHistoryInput(context.queryResultSettings, accountNumber, );
        return executeAction<OrderShipments[]>(request, context);
    }          
          
    export function createPostNonTransactionalActivityLoyaltyPointsInput(loyaltyCardId: string | null, channelId: number, affiliationId: number, activityTypeId: string | null): IDataServiceRequest {      
        const query = customersQuery();
        return query.createDataServiceRequestForOperation('PostNonTransactionalActivityLoyaltyPoints', true, '', '', { bypassCache: 'get', returnEntity: ''}, {loyaltyCardId: loyaltyCardId, channelId: channelId, affiliationId: affiliationId, activityTypeId: activityTypeId });
    }    
    
    export function postNonTransactionalActivityLoyaltyPointsAsync(context: IContext, loyaltyCardId: string | null, channelId: number, affiliationId: number, activityTypeId: string | null):AsyncResult<NullResult> {
        const request = createPostNonTransactionalActivityLoyaltyPointsInput(loyaltyCardId, channelId, affiliationId, activityTypeId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createGetPurchaseHistoryInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      
        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetPurchaseHistory', false, PurchaseHistoryClass, 'true', { bypassCache: 'none', returnEntity: 'PurchaseHistory'}, { });
    }    
    
    export function getPurchaseHistoryAsync(context: IContext, accountNumber: string):AsyncResult<PurchaseHistory[]> {
        const request = createGetPurchaseHistoryInput(context.queryResultSettings, accountNumber, );
        return executeAction<PurchaseHistory[]>(request, context);
    }          
          
    export function createGetCustomerSearchFieldsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      
        const query = customersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetCustomerSearchFields', false, CustomerSearchFieldClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerSearchField'}, { });
    }    
    
    export function getCustomerSearchFieldsAsync(context: IContext):AsyncResult<CustomerSearchField[]> {
        const request = createGetCustomerSearchFieldsInput(context.queryResultSettings, );
        return executeAction<CustomerSearchField[]>(request, context);
    }          
          
    export function createGetCustomerTimelineItemTypesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      
        const query = customersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetCustomerTimelineItemTypes', false, CustomerTimelineItemTypeMapClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineItemTypeMap'}, { });
    }    
    
    export function getCustomerTimelineItemTypesAsync(context: IContext):AsyncResult<CustomerTimelineItemTypeMap[]> {
        const request = createGetCustomerTimelineItemTypesInput(context.queryResultSettings, );
        return executeAction<CustomerTimelineItemTypeMap[]>(request, context);
    }          
          
    export function createGetCustomerTimelineItemsInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      
        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetCustomerTimelineItems', false, CustomerTimelineItemClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineItem'}, { });
    }    
    
    export function getCustomerTimelineItemsAsync(context: IContext, accountNumber: string):AsyncResult<CustomerTimelineItem[]> {
        const request = createGetCustomerTimelineItemsInput(context.queryResultSettings, accountNumber, );
        return executeAction<CustomerTimelineItem[]>(request, context);
    }          
          
    export function createGetCustomerTimelineRefinersInput(queryResultSettings: IQueryResultSettings, accountNumber: string): IDataServiceRequest {      
        const query = customersQuery(accountNumber).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetCustomerTimelineRefiners', false, CustomerTimelineRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTimelineRefiner'}, { });
    }    
    
    export function getCustomerTimelineRefinersAsync(context: IContext, accountNumber: string):AsyncResult<CustomerTimelineRefiner[]> {
        const request = createGetCustomerTimelineRefinersInput(context.queryResultSettings, accountNumber, );
        return executeAction<CustomerTimelineRefiner[]>(request, context);
    }          
          
    export function createGetTitlesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      
        const query = customersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetTitles', false, CustomerTitleClass, 'true', { bypassCache: 'none', returnEntity: 'CustomerTitle'}, { });
    }    
    
    export function getTitlesAsync(context: IContext):AsyncResult<CustomerTitle[]> {
        const request = createGetTitlesInput(context.queryResultSettings, );
        return executeAction<CustomerTitle[]>(request, context);
    }          
          
    