    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { Employee, EmployeeActivitySearchCriteria, EmployeeActivity, OrgUnit, ClientBookCustomerSearchCriteria, ClientBookCustomer, ClientBookRefiner, ClientBookChanges } from '../Entities/CommerceTypes.g';
    import { EmployeeClass, EmployeeActivityClass, OrgUnitClass, ClientBookCustomerClass, ClientBookRefinerClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function employeesQuery(staffId?: string): DataServiceQuery {
      var key = (staffId) ? { StaffId: staffId } : null;
      return new DataServiceQuery("Employees", "Employee", EmployeeClass, key);
    }
    
    export function createCreateInput(entity: Employee): IDataServiceRequest {
        return employeesQuery().create(entity);
    }
    export function createEmployeeAsync(context: IContext, entity: Employee): AsyncResult<Employee> {
        const request = createCreateInput(entity, );
        return executeAction<Employee>(request, context);
    }
    export function createUpdateInput(entity: Employee): IDataServiceRequest {
        return employeesQuery(entity.StaffId).update(entity);
    }
    export function updateAsync(context: IContext, entity: Employee): AsyncResult<Employee> {
        const request = createUpdateInput(entity, );
        return executeAction<Employee>(request, context);
    }
    export function createDeleteAsync(entity: Employee): IDataServiceRequest {
        return employeesQuery(entity.StaffId).delete();
    }
    export function deleteAsync(context: IContext, entity: Employee): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(staffId: string): IDataServiceRequest {
        return employeesQuery(staffId).read();
    }
    export function readAsync(context: IContext, staffId: string): AsyncResult<Employee> {
        const request = createReadAsync(staffId, );
        return executeAction<Employee>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return employeesQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<Employee[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<Employee[]>(request, context);
    }
    
    export function createGetActivitiesInput(queryResultSettings: IQueryResultSettings, employeeActivitySearchCriteria: EmployeeActivitySearchCriteria | null): IDataServiceRequest {      
        const query = employeesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetActivities', true, EmployeeActivityClass, 'true', { bypassCache: 'none', returnEntity: 'EmployeeActivity'}, {employeeActivitySearchCriteria: employeeActivitySearchCriteria });
    }    
    
    export function getActivitiesAsync(context: IContext, employeeActivitySearchCriteria: EmployeeActivitySearchCriteria | null):AsyncResult<EmployeeActivity[]> {
        const request = createGetActivitiesInput(context.queryResultSettings, employeeActivitySearchCriteria, );
        return executeAction<EmployeeActivity[]>(request, context);
    }          
          
    export function createGetManagerActivityViewInput(queryResultSettings: IQueryResultSettings, employeeActivitySearchCriteria: EmployeeActivitySearchCriteria | null): IDataServiceRequest {      
        const query = employeesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetManagerActivityView', true, EmployeeActivityClass, 'true', { bypassCache: 'none', returnEntity: 'EmployeeActivity'}, {employeeActivitySearchCriteria: employeeActivitySearchCriteria });
    }    
    
    export function getManagerActivityViewAsync(context: IContext, employeeActivitySearchCriteria: EmployeeActivitySearchCriteria | null):AsyncResult<EmployeeActivity[]> {
        const request = createGetManagerActivityViewInput(context.queryResultSettings, employeeActivitySearchCriteria, );
        return executeAction<EmployeeActivity[]>(request, context);
    }          
          
    export function createRegisterActivityInput(staffId: string, employeeActivityType: number): IDataServiceRequest {      
        const query = employeesQuery(staffId);
        return query.createDataServiceRequestForOperation('RegisterActivity', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, {employeeActivityType: employeeActivityType });
    }    
    
    export function registerActivityAsync(context: IContext, staffId: string, employeeActivityType: number):AsyncResult<Date> {
        const request = createRegisterActivityInput(staffId, employeeActivityType, );
        return executeAction<Date>(request, context);
    }          
          
    export function createGetAccessibleOrgUnitsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      
        const query = employeesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetAccessibleOrgUnits', true, OrgUnitClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnit'}, { });
    }    
    
    export function getAccessibleOrgUnitsAsync(context: IContext):AsyncResult<OrgUnit[]> {
        const request = createGetAccessibleOrgUnitsInput(context.queryResultSettings, );
        return executeAction<OrgUnit[]>(request, context);
    }          
          
    export function createGetLatestActivityInput(): IDataServiceRequest {      
        const query = employeesQuery();
        return query.createDataServiceRequestForOperation('GetLatestActivity', true, EmployeeActivityClass, 'false', { bypassCache: 'none', returnEntity: 'EmployeeActivity'}, { });
    }    
    
    export function getLatestActivityAsync(context: IContext):AsyncResult<EmployeeActivity> {
        const request = createGetLatestActivityInput();
        return executeAction<EmployeeActivity>(request, context);
    }          
          
    export function createSearchClientBookCustomersInput(queryResultSettings: IQueryResultSettings, clientBookCustomerSearchCriteria: ClientBookCustomerSearchCriteria | null): IDataServiceRequest {      
        const query = employeesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchClientBookCustomers', true, ClientBookCustomerClass, 'true', { bypassCache: 'none', returnEntity: 'ClientBookCustomer'}, {clientBookCustomerSearchCriteria: clientBookCustomerSearchCriteria });
    }    
    
    export function searchClientBookCustomersAsync(context: IContext, clientBookCustomerSearchCriteria: ClientBookCustomerSearchCriteria | null):AsyncResult<ClientBookCustomer[]> {
        const request = createSearchClientBookCustomersInput(context.queryResultSettings, clientBookCustomerSearchCriteria, );
        return executeAction<ClientBookCustomer[]>(request, context);
    }          
          
    export function createGetClientBookSearchRefinersInput(queryResultSettings: IQueryResultSettings, refinerSourceTypes: number[], searchCriteria: ClientBookCustomerSearchCriteria | null): IDataServiceRequest {      
        const query = employeesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetClientBookSearchRefiners', true, ClientBookRefinerClass, 'true', { bypassCache: 'none', returnEntity: 'ClientBookRefiner'}, {refinerSourceTypes: refinerSourceTypes, searchCriteria: searchCriteria });
    }    
    
    export function getClientBookSearchRefinersAsync(context: IContext, refinerSourceTypes: number[], searchCriteria: ClientBookCustomerSearchCriteria | null):AsyncResult<ClientBookRefiner[]> {
        const request = createGetClientBookSearchRefinersInput(context.queryResultSettings, refinerSourceTypes, searchCriteria, );
        return executeAction<ClientBookRefiner[]>(request, context);
    }          
          
    export function createUpdateClientBookInput(clientBookChanges: ClientBookChanges | null): IDataServiceRequest {      
        const query = employeesQuery();
        return query.createDataServiceRequestForOperation('UpdateClientBook', true, '', '', { bypassCache: 'get', returnEntity: ''}, {clientBookChanges: clientBookChanges });
    }    
    
    export function updateClientBookAsync(context: IContext, clientBookChanges: ClientBookChanges | null):AsyncResult<NullResult> {
        const request = createUpdateClientBookInput(clientBookChanges, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createGetCurrentEmployeeInput(): IDataServiceRequest {      
        const query = employeesQuery();
        return query.createDataServiceRequestForOperation('GetCurrentEmployee', false, EmployeeClass, 'false', { bypassCache: 'none', returnEntity: 'Employee'}, { });
    }    
    
    export function getCurrentEmployeeAsync(context: IContext):AsyncResult<Employee> {
        const request = createGetCurrentEmployeeInput();
        return executeAction<Employee>(request, context);
    }          
          
    