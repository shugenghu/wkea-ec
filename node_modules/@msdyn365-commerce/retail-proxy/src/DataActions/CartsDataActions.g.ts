    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { Cart, TokenizedPaymentCard, CartTenderLine, SalesOrder, LoyaltyPointRedemptionEstimate, TenderLine, LineShippingAddress, SalesLineDeliveryOption, CartDeliveryPreferences, Address, DeliveryOption, LineDeliverySpecification, DeliverySpecification, ReasonCodeLine, CartLine, TenderDiscountLine, ReceiptRetrievalCriteria, Receipt, CartSearchCriteria, CardPaymentAcceptSettings, CommerceProperty, CardPaymentAcceptPoint, RetrievePaymentResultSettings, CardPaymentAcceptResult, CartPromotions, CartPromotionLine, ChargeCode, TenderTypeAmount, CartLineValidationResults } from '../Entities/CommerceTypes.g';
    import { CartClass, SalesOrderClass, LoyaltyPointRedemptionEstimateClass, TenderLineClass, SalesLineDeliveryOptionClass, CartDeliveryPreferencesClass, DeliveryOptionClass, TenderDiscountLineClass, ReceiptClass, CardPaymentAcceptPointClass, CardPaymentAcceptResultClass, CartPromotionsClass, CartPromotionLineClass, ChargeCodeClass, TenderTypeAmountClass, CartLineValidationResultsClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function cartsQuery(id?: string): DataServiceQuery {
      var key = (id) ? { Id: id } : null;
      return new DataServiceQuery("Carts", "Cart", CartClass, key);
    }
    
    export function createCreateInput(entity: Cart): IDataServiceRequest {
        return cartsQuery().create(entity);
    }
    export function createCartAsync(context: IContext, entity: Cart): AsyncResult<Cart> {
        const request = createCreateInput(entity, );
        return executeAction<Cart>(request, context);
    }
    export function createUpdateInput(entity: Cart): IDataServiceRequest {
        return cartsQuery(entity.Id).update(entity);
    }
    export function updateAsync(context: IContext, entity: Cart): AsyncResult<Cart> {
        const request = createUpdateInput(entity, );
        return executeAction<Cart>(request, context);
    }
    export function createDeleteAsync(entity: Cart): IDataServiceRequest {
        return cartsQuery(entity.Id).delete();
    }
    export function deleteAsync(context: IContext, entity: Cart): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(id: string): IDataServiceRequest {
        return cartsQuery(id).read();
    }
    export function readAsync(context: IContext, id: string): AsyncResult<Cart> {
        const request = createReadAsync(id, );
        return executeAction<Cart>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return cartsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<Cart[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<Cart[]>(request, context);
    }
    
    export function createCheckoutInput(id: string, receiptEmail: string | null, tokenizedPaymentCard: TokenizedPaymentCard | null, receiptNumberSequence: string | null, cartTenderLines: CartTenderLine[] | null, cartVersion: number | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('Checkout', true, SalesOrderClass, 'false', { bypassCache: 'get', returnEntity: 'SalesOrder'}, {receiptEmail: receiptEmail, tokenizedPaymentCard: tokenizedPaymentCard, receiptNumberSequence: receiptNumberSequence, cartTenderLines: cartTenderLines, cartVersion: cartVersion });
    }    
    
    export function checkoutAsync(context: IContext, id: string, receiptEmail: string | null, tokenizedPaymentCard: TokenizedPaymentCard | null, receiptNumberSequence: string | null, cartTenderLines: CartTenderLine[] | null, cartVersion: number | null):AsyncResult<SalesOrder> {
        const request = createCheckoutInput(id, receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion, );
        return executeAction<SalesOrder>(request, context);
    }          
          
    export function createGetMaxLoyaltyPointsToRedeemForTransactionBalanceInput(id: string, loyaltyCardId: string | null, currencyCode: string | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('GetMaxLoyaltyPointsToRedeemForTransactionBalance', true, LoyaltyPointRedemptionEstimateClass, 'false', { bypassCache: 'none', returnEntity: 'LoyaltyPointRedemptionEstimate'}, {loyaltyCardId: loyaltyCardId, currencyCode: currencyCode });
    }    
    
    export function getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(context: IContext, id: string, loyaltyCardId: string | null, currencyCode: string | null):AsyncResult<LoyaltyPointRedemptionEstimate> {
        const request = createGetMaxLoyaltyPointsToRedeemForTransactionBalanceInput(id, loyaltyCardId, currencyCode, );
        return executeAction<LoyaltyPointRedemptionEstimate>(request, context);
    }          
          
    export function createGetPaymentsHistoryInput(queryResultSettings: IQueryResultSettings, id: string): IDataServiceRequest {      
        const query = cartsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetPaymentsHistory', true, TenderLineClass, 'true', { bypassCache: 'none', returnEntity: 'TenderLine'}, { });
    }    
    
    export function getPaymentsHistoryAsync(context: IContext, id: string):AsyncResult<TenderLine[]> {
        const request = createGetPaymentsHistoryInput(context.queryResultSettings, id, );
        return executeAction<TenderLine[]>(request, context);
    }          
          
    export function createGetLineDeliveryOptionsByChannelIdInput(queryResultSettings: IQueryResultSettings, id: string, lineShippingAddresses: LineShippingAddress[] | null, channelId: number): IDataServiceRequest {      
        const query = cartsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetLineDeliveryOptionsByChannelId', true, SalesLineDeliveryOptionClass, 'true', { bypassCache: 'none', returnEntity: 'SalesLineDeliveryOption'}, {lineShippingAddresses: lineShippingAddresses, channelId: channelId });
    }    
    
    export function getLineDeliveryOptionsByChannelIdAsync(context: IContext, id: string, lineShippingAddresses: LineShippingAddress[] | null, channelId: number):AsyncResult<SalesLineDeliveryOption[]> {
        const request = createGetLineDeliveryOptionsByChannelIdInput(context.queryResultSettings, id, lineShippingAddresses, channelId, );
        return executeAction<SalesLineDeliveryOption[]>(request, context);
    }          
          
    export function createGetLineDeliveryOptionsInput(queryResultSettings: IQueryResultSettings, id: string, lineShippingAddresses: LineShippingAddress[] | null, filterOption?: number | null): IDataServiceRequest {      
        const query = cartsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetLineDeliveryOptions', true, SalesLineDeliveryOptionClass, 'true', { bypassCache: 'none', returnEntity: 'SalesLineDeliveryOption'}, {lineShippingAddresses: lineShippingAddresses, filterOption: filterOption });
    }    
    
    export function getLineDeliveryOptionsAsync(context: IContext, id: string, lineShippingAddresses: LineShippingAddress[] | null, filterOption?: number | null):AsyncResult<SalesLineDeliveryOption[]> {
        const request = createGetLineDeliveryOptionsInput(context.queryResultSettings, id, lineShippingAddresses, filterOption, );
        return executeAction<SalesLineDeliveryOption[]>(request, context);
    }          
          
    export function createGetDeliveryPreferencesInput(id: string): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('GetDeliveryPreferences', true, CartDeliveryPreferencesClass, 'false', { bypassCache: 'none', returnEntity: 'CartDeliveryPreferences'}, { });
    }    
    
    export function getDeliveryPreferencesAsync(context: IContext, id: string):AsyncResult<CartDeliveryPreferences> {
        const request = createGetDeliveryPreferencesInput(id, );
        return executeAction<CartDeliveryPreferences>(request, context);
    }          
          
    export function createGetDeliveryOptionsInput(queryResultSettings: IQueryResultSettings, id: string, shippingAddress: Address | null, cartLineIds: string[] | null, filterOption: number | null): IDataServiceRequest {      
        const query = cartsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetDeliveryOptions', true, DeliveryOptionClass, 'true', { bypassCache: 'none', returnEntity: 'DeliveryOption'}, {shippingAddress: shippingAddress, cartLineIds: cartLineIds, filterOption: filterOption });
    }    
    
    export function getDeliveryOptionsAsync(context: IContext, id: string, shippingAddress: Address | null, cartLineIds: string[] | null, filterOption: number | null):AsyncResult<DeliveryOption[]> {
        const request = createGetDeliveryOptionsInput(context.queryResultSettings, id, shippingAddress, cartLineIds, filterOption, );
        return executeAction<DeliveryOption[]>(request, context);
    }          
          
    export function createUpdateLineDeliverySpecificationsInput(id: string, lineDeliverySpecifications: LineDeliverySpecification[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('UpdateLineDeliverySpecifications', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {lineDeliverySpecifications: lineDeliverySpecifications });
    }    
    
    export function updateLineDeliverySpecificationsAsync(context: IContext, id: string, lineDeliverySpecifications: LineDeliverySpecification[] | null):AsyncResult<Cart> {
        const request = createUpdateLineDeliverySpecificationsInput(id, lineDeliverySpecifications, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createUpdateDeliverySpecificationInput(id: string, deliverySpecification: DeliverySpecification | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('UpdateDeliverySpecification', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {deliverySpecification: deliverySpecification });
    }    
    
    export function updateDeliverySpecificationAsync(context: IContext, id: string, deliverySpecification: DeliverySpecification | null):AsyncResult<Cart> {
        const request = createUpdateDeliverySpecificationInput(id, deliverySpecification, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createAddChargeInput(id: string, moduleTypeValue: number, chargeCode: string | null, amount: number): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddCharge', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {moduleTypeValue: moduleTypeValue, chargeCode: chargeCode, amount: amount });
    }    
    
    export function addChargeAsync(context: IContext, id: string, moduleTypeValue: number, chargeCode: string | null, amount: number):AsyncResult<Cart> {
        const request = createAddChargeInput(id, moduleTypeValue, chargeCode, amount, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createOverrideChargeInput(id: string, chargeLineId: string | null, amount: number, reasonCodeLines: ReasonCodeLine[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('OverrideCharge', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {chargeLineId: chargeLineId, amount: amount, reasonCodeLines: reasonCodeLines });
    }    
    
    export function overrideChargeAsync(context: IContext, id: string, chargeLineId: string | null, amount: number, reasonCodeLines: ReasonCodeLine[] | null):AsyncResult<Cart> {
        const request = createOverrideChargeInput(id, chargeLineId, amount, reasonCodeLines, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createAddCartLineChargeInput(id: string, cartLineId: string | null, moduleTypeValue: number, chargeCode: string | null, amount: number): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddCartLineCharge', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {cartLineId: cartLineId, moduleTypeValue: moduleTypeValue, chargeCode: chargeCode, amount: amount });
    }    
    
    export function addCartLineChargeAsync(context: IContext, id: string, cartLineId: string | null, moduleTypeValue: number, chargeCode: string | null, amount: number):AsyncResult<Cart> {
        const request = createAddCartLineChargeInput(id, cartLineId, moduleTypeValue, chargeCode, amount, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createOverrideCartLineChargeInput(id: string, cartLineId: string | null, chargeLineId: string | null, amount: number, reasonCodeLines: ReasonCodeLine[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('OverrideCartLineCharge', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {cartLineId: cartLineId, chargeLineId: chargeLineId, amount: amount, reasonCodeLines: reasonCodeLines });
    }    
    
    export function overrideCartLineChargeAsync(context: IContext, id: string, cartLineId: string | null, chargeLineId: string | null, amount: number, reasonCodeLines: ReasonCodeLine[] | null):AsyncResult<Cart> {
        const request = createOverrideCartLineChargeInput(id, cartLineId, chargeLineId, amount, reasonCodeLines, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createVoidInput(id: string, reasonCodeLines: ReasonCodeLine[] | null, cartVersion?: number | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('Void', true, SalesOrderClass, 'false', { bypassCache: 'get', returnEntity: 'SalesOrder'}, {reasonCodeLines: reasonCodeLines, cartVersion: cartVersion });
    }    
    
    export function voidAsync(context: IContext, id: string, reasonCodeLines: ReasonCodeLine[] | null, cartVersion?: number | null):AsyncResult<SalesOrder> {
        const request = createVoidInput(id, reasonCodeLines, cartVersion, );
        return executeAction<SalesOrder>(request, context);
    }          
          
    export function createAddCartLinesInput(id: string, cartLines: CartLine[] | null, cartVersion: number | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddCartLines', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {cartLines: cartLines, cartVersion: cartVersion });
    }    
    
    export function addCartLinesAsync(context: IContext, id: string, cartLines: CartLine[] | null, cartVersion: number | null):AsyncResult<Cart> {
        const request = createAddCartLinesInput(id, cartLines, cartVersion, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createUpdateCartLinesInput(id: string, cartLines: CartLine[] | null, cartVersion?: number | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('UpdateCartLines', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {cartLines: cartLines, cartVersion: cartVersion });
    }    
    
    export function updateCartLinesAsync(context: IContext, id: string, cartLines: CartLine[] | null, cartVersion?: number | null):AsyncResult<Cart> {
        const request = createUpdateCartLinesInput(id, cartLines, cartVersion, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createVoidCartLinesInput(id: string, cartLines: CartLine[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('VoidCartLines', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {cartLines: cartLines });
    }    
    
    export function voidCartLinesAsync(context: IContext, id: string, cartLines: CartLine[] | null):AsyncResult<Cart> {
        const request = createVoidCartLinesInput(id, cartLines, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createRemoveCartLinesInput(id: string, cartLineIds: string[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('RemoveCartLines', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {cartLineIds: cartLineIds });
    }    
    
    export function removeCartLinesAsync(context: IContext, id: string, cartLineIds: string[] | null):AsyncResult<Cart> {
        const request = createRemoveCartLinesInput(id, cartLineIds, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createAddTenderLineInput(id: string, cartTenderLine: CartTenderLine | null, cartVersion: number | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddTenderLine', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {cartTenderLine: cartTenderLine, cartVersion: cartVersion });
    }    
    
    export function addTenderLineAsync(context: IContext, id: string, cartTenderLine: CartTenderLine | null, cartVersion: number | null):AsyncResult<Cart> {
        const request = createAddTenderLineInput(id, cartTenderLine, cartVersion, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createCalculateTenderDiscountInput(id: string, tenderLine: TenderLine | null, cartVersion: number | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('CalculateTenderDiscount', true, TenderDiscountLineClass, 'false', { bypassCache: 'get', returnEntity: 'TenderDiscountLine'}, {tenderLine: tenderLine, cartVersion: cartVersion });
    }    
    
    export function calculateTenderDiscountAsync(context: IContext, id: string, tenderLine: TenderLine | null, cartVersion: number | null):AsyncResult<TenderDiscountLine> {
        const request = createCalculateTenderDiscountInput(id, tenderLine, cartVersion, );
        return executeAction<TenderDiscountLine>(request, context);
    }          
          
    export function createAddPreprocessedTenderLineInput(id: string, preprocessedTenderLine: TenderLine | null, cartVersion: number | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddPreprocessedTenderLine', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {preprocessedTenderLine: preprocessedTenderLine, cartVersion: cartVersion });
    }    
    
    export function addPreprocessedTenderLineAsync(context: IContext, id: string, preprocessedTenderLine: TenderLine | null, cartVersion: number | null):AsyncResult<Cart> {
        const request = createAddPreprocessedTenderLineInput(id, preprocessedTenderLine, cartVersion, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createValidateTenderLineForAddInput(id: string, tenderLine: TenderLine | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('ValidateTenderLineForAdd', true, '', '', { bypassCache: 'get', returnEntity: ''}, {tenderLine: tenderLine });
    }    
    
    export function validateTenderLineForAddAsync(context: IContext, id: string, tenderLine: TenderLine | null):AsyncResult<NullResult> {
        const request = createValidateTenderLineForAddInput(id, tenderLine, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createUpdateTenderLineSignatureInput(id: string, tenderLineId: string | null, signatureData: string | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('UpdateTenderLineSignature', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {tenderLineId: tenderLineId, signatureData: signatureData });
    }    
    
    export function updateTenderLineSignatureAsync(context: IContext, id: string, tenderLineId: string | null, signatureData: string | null):AsyncResult<Cart> {
        const request = createUpdateTenderLineSignatureInput(id, tenderLineId, signatureData, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createGetDeclinedOrVoidedCardReceiptsInput(queryResultSettings: IQueryResultSettings, id: string, preprocessedTenderLine: TenderLine | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest {      
        const query = cartsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetDeclinedOrVoidedCardReceipts', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {preprocessedTenderLine: preprocessedTenderLine, receiptRetrievalCriteria: receiptRetrievalCriteria });
    }    
    
    export function getDeclinedOrVoidedCardReceiptsAsync(context: IContext, id: string, preprocessedTenderLine: TenderLine | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null):AsyncResult<Receipt[]> {
        const request = createGetDeclinedOrVoidedCardReceiptsInput(context.queryResultSettings, id, preprocessedTenderLine, receiptRetrievalCriteria, );
        return executeAction<Receipt[]>(request, context);
    }          
          
    export function createCopyInput(id: string, targetCartType: number): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('Copy', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {targetCartType: targetCartType });
    }    
    
    export function copyAsync(context: IContext, id: string, targetCartType: number):AsyncResult<Cart> {
        const request = createCopyInput(id, targetCartType, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createAddInvoicedSalesLinesToCartInput(transactionId: string | null, invoicedSalesLinesIds: number[]): IDataServiceRequest {      
        const query = cartsQuery();
        return query.createDataServiceRequestForOperation('AddInvoicedSalesLinesToCart', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {transactionId: transactionId, invoicedSalesLinesIds: invoicedSalesLinesIds });
    }    
    
    export function addInvoicedSalesLinesToCartAsync(context: IContext, transactionId: string | null, invoicedSalesLinesIds: number[]):AsyncResult<Cart> {
        const request = createAddInvoicedSalesLinesToCartInput(transactionId, invoicedSalesLinesIds, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createVoidTenderLineInput(id: string, tenderLineId: string | null, reasonCodeLines: ReasonCodeLine[] | null, isPreprocessed: boolean | null, forceVoid: boolean | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('VoidTenderLine', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {tenderLineId: tenderLineId, reasonCodeLines: reasonCodeLines, isPreprocessed: isPreprocessed, forceVoid: forceVoid });
    }    
    
    export function voidTenderLineAsync(context: IContext, id: string, tenderLineId: string | null, reasonCodeLines: ReasonCodeLine[] | null, isPreprocessed: boolean | null, forceVoid: boolean | null):AsyncResult<Cart> {
        const request = createVoidTenderLineInput(id, tenderLineId, reasonCodeLines, isPreprocessed, forceVoid, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createIssueGiftCardInput(id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('IssueGiftCard', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription, tenderTypeId: tenderTypeId });
    }    
    
    export function issueGiftCardAsync(context: IContext, id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null):AsyncResult<Cart> {
        const request = createIssueGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createRefillGiftCardInput(id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('RefillGiftCard', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription, tenderTypeId: tenderTypeId });
    }    
    
    export function refillGiftCardAsync(context: IContext, id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null):AsyncResult<Cart> {
        const request = createRefillGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createCashOutGiftCardInput(id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('CashOutGiftCard', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription, tenderTypeId: tenderTypeId });
    }    
    
    export function cashOutGiftCardAsync(context: IContext, id: string, giftCardId: string | null, amount: number, currencyCode: string | null, lineDescription: string | null, tenderTypeId: string | null):AsyncResult<Cart> {
        const request = createCashOutGiftCardInput(id, giftCardId, amount, currencyCode, lineDescription, tenderTypeId, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createSuspendInput(id: string): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('Suspend', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, { });
    }    
    
    export function suspendAsync(context: IContext, id: string):AsyncResult<Cart> {
        const request = createSuspendInput(id, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createSuspendWithJournalInput(id: string, journalCartId: string | null, receiptNumberSequence: string | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('SuspendWithJournal', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {journalCartId: journalCartId, receiptNumberSequence: receiptNumberSequence });
    }    
    
    export function suspendWithJournalAsync(context: IContext, id: string, journalCartId: string | null, receiptNumberSequence: string | null):AsyncResult<Cart> {
        const request = createSuspendWithJournalInput(id, journalCartId, receiptNumberSequence, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createResumeInput(id: string): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('Resume', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, { });
    }    
    
    export function resumeAsync(context: IContext, id: string):AsyncResult<Cart> {
        const request = createResumeInput(id, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createResumeFromReceiptIdInput(receiptId: string | null): IDataServiceRequest {      
        const query = cartsQuery();
        return query.createDataServiceRequestForOperation('ResumeFromReceiptId', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {receiptId: receiptId });
    }    
    
    export function resumeFromReceiptIdAsync(context: IContext, receiptId: string | null):AsyncResult<Cart> {
        const request = createResumeFromReceiptIdInput(receiptId, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createRemoveDiscountCodesInput(id: string, discountCodes: string[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('RemoveDiscountCodes', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {discountCodes: discountCodes });
    }    
    
    export function removeDiscountCodesAsync(context: IContext, id: string, discountCodes: string[] | null):AsyncResult<Cart> {
        const request = createRemoveDiscountCodesInput(id, discountCodes, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createGetSuspendedInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      
        const query = cartsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetSuspended', true, CartClass, 'true', { bypassCache: 'none', returnEntity: 'Cart'}, { });
    }    
    
    export function getSuspendedAsync(context: IContext):AsyncResult<Cart[]> {
        const request = createGetSuspendedInput(context.queryResultSettings, );
        return executeAction<Cart[]>(request, context);
    }          
          
    export function createSearchInput(queryResultSettings: IQueryResultSettings, cartSearchCriteria: CartSearchCriteria | null): IDataServiceRequest {      
        const query = cartsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('Search', true, CartClass, 'true', { bypassCache: 'none', returnEntity: 'Cart'}, {cartSearchCriteria: cartSearchCriteria });
    }    
    
    export function searchAsync(context: IContext, cartSearchCriteria: CartSearchCriteria | null):AsyncResult<Cart[]> {
        const request = createSearchInput(context.queryResultSettings, cartSearchCriteria, );
        return executeAction<Cart[]>(request, context);
    }          
          
    export function createOverrideCartLinePriceInput(id: string, cartLineId: string | null, price: number): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('OverrideCartLinePrice', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {cartLineId: cartLineId, price: price });
    }    
    
    export function overrideCartLinePriceAsync(context: IContext, id: string, cartLineId: string | null, price: number):AsyncResult<Cart> {
        const request = createOverrideCartLinePriceInput(id, cartLineId, price, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createGetCardPaymentAcceptPointInput(id: string, cardPaymentAcceptSettings: CardPaymentAcceptSettings | null, extensionProperties: CommerceProperty[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('GetCardPaymentAcceptPoint', true, CardPaymentAcceptPointClass, 'false', { bypassCache: 'none', returnEntity: 'CardPaymentAcceptPoint'}, {cardPaymentAcceptSettings: cardPaymentAcceptSettings, extensionProperties: extensionProperties });
    }    
    
    export function getCardPaymentAcceptPointAsync(context: IContext, id: string, cardPaymentAcceptSettings: CardPaymentAcceptSettings | null, extensionProperties: CommerceProperty[] | null):AsyncResult<CardPaymentAcceptPoint> {
        const request = createGetCardPaymentAcceptPointInput(id, cardPaymentAcceptSettings, extensionProperties, );
        return executeAction<CardPaymentAcceptPoint>(request, context);
    }          
          
    export function createRetrieveCardPaymentAcceptResultInput(resultAccessCode: string | null, extensionProperties: CommerceProperty[] | null, cartId: string | null, settings: RetrievePaymentResultSettings | null): IDataServiceRequest {      
        const query = cartsQuery();
        return query.createDataServiceRequestForOperation('RetrieveCardPaymentAcceptResult', true, CardPaymentAcceptResultClass, 'false', { bypassCache: 'get', returnEntity: 'CardPaymentAcceptResult'}, {resultAccessCode: resultAccessCode, extensionProperties: extensionProperties, cartId: cartId, settings: settings });
    }    
    
    export function retrieveCardPaymentAcceptResultAsync(context: IContext, resultAccessCode: string | null, extensionProperties: CommerceProperty[] | null, cartId: string | null, settings: RetrievePaymentResultSettings | null):AsyncResult<CardPaymentAcceptResult> {
        const request = createRetrieveCardPaymentAcceptResultInput(resultAccessCode, extensionProperties, cartId, settings, );
        return executeAction<CardPaymentAcceptResult>(request, context);
    }          
          
    export function createRecallOrderInput(transactionId: string | null, salesId: string | null): IDataServiceRequest {      
        const query = cartsQuery();
        return query.createDataServiceRequestForOperation('RecallOrder', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {transactionId: transactionId, salesId: salesId });
    }    
    
    export function recallOrderAsync(context: IContext, transactionId: string | null, salesId: string | null):AsyncResult<Cart> {
        const request = createRecallOrderInput(transactionId, salesId, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createRecallQuoteInput(transactionId: string | null, quoteId: string | null): IDataServiceRequest {      
        const query = cartsQuery();
        return query.createDataServiceRequestForOperation('RecallQuote', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {transactionId: transactionId, quoteId: quoteId });
    }    
    
    export function recallQuoteAsync(context: IContext, transactionId: string | null, quoteId: string | null):AsyncResult<Cart> {
        const request = createRecallQuoteInput(transactionId, quoteId, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createRecalculateOrderInput(id: string): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('RecalculateOrder', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, { });
    }    
    
    export function recalculateOrderAsync(context: IContext, id: string):AsyncResult<Cart> {
        const request = createRecalculateOrderInput(id, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createResetAllChargesInput(id: string): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('ResetAllCharges', false, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, { });
    }    
    
    export function resetAllChargesAsync(context: IContext, id: string):AsyncResult<Cart> {
        const request = createResetAllChargesInput(id, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createGetPromotionsInput(id: string): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('GetPromotions', true, CartPromotionsClass, 'false', { bypassCache: 'none', returnEntity: 'CartPromotions'}, { });
    }    
    
    export function getPromotionsAsync(context: IContext, id: string):AsyncResult<CartPromotions> {
        const request = createGetPromotionsInput(id, );
        return executeAction<CartPromotions>(request, context);
    }          
          
    export function createGetAvailablePromotionsInput(queryResultSettings: IQueryResultSettings, id: string, cartLineIds: string[] | null): IDataServiceRequest {      
        const query = cartsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetAvailablePromotions', true, CartPromotionLineClass, 'true', { bypassCache: 'none', returnEntity: 'CartPromotionLine'}, {cartLineIds: cartLineIds });
    }    
    
    export function getAvailablePromotionsAsync(context: IContext, id: string, cartLineIds: string[] | null):AsyncResult<CartPromotionLine[]> {
        const request = createGetAvailablePromotionsInput(context.queryResultSettings, id, cartLineIds, );
        return executeAction<CartPromotionLine[]>(request, context);
    }          
          
    export function createRecallSalesInvoiceInput(transactionId: string | null, invoiceId: string | null): IDataServiceRequest {      
        const query = cartsQuery();
        return query.createDataServiceRequestForOperation('RecallSalesInvoice', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {transactionId: transactionId, invoiceId: invoiceId });
    }    
    
    export function recallSalesInvoiceAsync(context: IContext, transactionId: string | null, invoiceId: string | null):AsyncResult<Cart> {
        const request = createRecallSalesInvoiceInput(transactionId, invoiceId, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createAddOrderInvoiceInput(id: string, invoiceId: string | null, lineDescription: string | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddOrderInvoice', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {invoiceId: invoiceId, lineDescription: lineDescription });
    }    
    
    export function addOrderInvoiceAsync(context: IContext, id: string, invoiceId: string | null, lineDescription: string | null):AsyncResult<Cart> {
        const request = createAddOrderInvoiceInput(id, invoiceId, lineDescription, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createAddInvoicesInput(id: string, invoiceIds: string[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddInvoices', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {invoiceIds: invoiceIds });
    }    
    
    export function addInvoicesAsync(context: IContext, id: string, invoiceIds: string[] | null):AsyncResult<Cart> {
        const request = createAddInvoicesInput(id, invoiceIds, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createUpdateCommissionSalesGroupInput(transactionId: string | null, cartLineId: string | null, commissionSalesGroup: string | null, isUserInitiated: boolean): IDataServiceRequest {      
        const query = cartsQuery();
        return query.createDataServiceRequestForOperation('UpdateCommissionSalesGroup', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {transactionId: transactionId, cartLineId: cartLineId, commissionSalesGroup: commissionSalesGroup, isUserInitiated: isUserInitiated });
    }    
    
    export function updateCommissionSalesGroupAsync(context: IContext, transactionId: string | null, cartLineId: string | null, commissionSalesGroup: string | null, isUserInitiated: boolean):AsyncResult<Cart> {
        const request = createUpdateCommissionSalesGroupInput(transactionId, cartLineId, commissionSalesGroup, isUserInitiated, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createAddCouponsInput(id: string, couponCodes: string[] | null, isLegacyDiscountCode: boolean | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddCoupons', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {couponCodes: couponCodes, isLegacyDiscountCode: isLegacyDiscountCode });
    }    
    
    export function addCouponsAsync(context: IContext, id: string, couponCodes: string[] | null, isLegacyDiscountCode: boolean | null):AsyncResult<Cart> {
        const request = createAddCouponsInput(id, couponCodes, isLegacyDiscountCode, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createRemoveCouponsInput(id: string, couponCodes: string[] | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('RemoveCoupons', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {couponCodes: couponCodes });
    }    
    
    export function removeCouponsAsync(context: IContext, id: string, couponCodes: string[] | null):AsyncResult<Cart> {
        const request = createRemoveCouponsInput(id, couponCodes, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createGetChargeCodesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      
        const query = cartsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetChargeCodes', false, ChargeCodeClass, 'true', { bypassCache: 'none', returnEntity: 'ChargeCode'}, { });
    }    
    
    export function getChargeCodesAsync(context: IContext):AsyncResult<ChargeCode[]> {
        const request = createGetChargeCodesInput(context.queryResultSettings, );
        return executeAction<ChargeCode[]>(request, context);
    }          
          
    export function createAddDiscountCodeInput(id: string, discountCode: string | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('AddDiscountCode', true, CartClass, 'false', { bypassCache: 'get', returnEntity: 'Cart'}, {discountCode: discountCode });
    }    
    
    export function addDiscountCodeAsync(context: IContext, id: string, discountCode: string | null):AsyncResult<Cart> {
        const request = createAddDiscountCodeInput(id, discountCode, );
        return executeAction<Cart>(request, context);
    }          
          
    export function createGetReturnOptionsInput(queryResultSettings: IQueryResultSettings, id: string): IDataServiceRequest {      
        const query = cartsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetReturnOptions', false, TenderTypeAmountClass, 'true', { bypassCache: 'none', returnEntity: 'TenderTypeAmount'}, { });
    }    
    
    export function getReturnOptionsAsync(context: IContext, id: string):AsyncResult<TenderTypeAmount[]> {
        const request = createGetReturnOptionsInput(context.queryResultSettings, id, );
        return executeAction<TenderTypeAmount[]>(request, context);
    }          
          
    export function createValidateForCheckoutInput(id: string, cartVersion: number | null): IDataServiceRequest {      
        const query = cartsQuery(id);
        return query.createDataServiceRequestForOperation('ValidateForCheckout', false, CartLineValidationResultsClass, 'false', { bypassCache: 'get', returnEntity: 'CartLineValidationResults'}, {cartVersion: cartVersion });
    }    
    
    export function validateForCheckoutAsync(context: IContext, id: string, cartVersion: number | null):AsyncResult<CartLineValidationResults> {
        const request = createValidateForCheckoutInput(id, cartVersion, );
        return executeAction<CartLineValidationResults>(request, context);
    }          
          
    