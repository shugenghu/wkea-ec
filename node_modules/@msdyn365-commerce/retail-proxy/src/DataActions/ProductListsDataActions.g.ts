    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { ProductList, ProductListSearchCriteria, ProductListLine } from '../Entities/CommerceTypes.g';
    import { ProductListClass, ProductListLineClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function productListsQuery(id?: string): DataServiceQuery {
      var key = (id) ? { Id: id } : null;
      return new DataServiceQuery("ProductLists", "ProductList", ProductListClass, key);
    }
    
    export function createCreateInput(entity: ProductList): IDataServiceRequest {
        return productListsQuery().create(entity);
    }
    export function createProductListAsync(context: IContext, entity: ProductList): AsyncResult<ProductList> {
        const request = createCreateInput(entity, );
        return executeAction<ProductList>(request, context);
    }
    export function createUpdateInput(entity: ProductList): IDataServiceRequest {
        return productListsQuery(entity.Id).update(entity);
    }
    export function updateAsync(context: IContext, entity: ProductList): AsyncResult<ProductList> {
        const request = createUpdateInput(entity, );
        return executeAction<ProductList>(request, context);
    }
    export function createDeleteAsync(entity: ProductList): IDataServiceRequest {
        return productListsQuery(entity.Id).delete();
    }
    export function deleteAsync(context: IContext, entity: ProductList): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(id: string): IDataServiceRequest {
        return productListsQuery(id).read();
    }
    export function readAsync(context: IContext, id: string): AsyncResult<ProductList> {
        const request = createReadAsync(id, );
        return executeAction<ProductList>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return productListsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<ProductList[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<ProductList[]>(request, context);
    }
    
    export function createSearchInput(queryResultSettings: IQueryResultSettings, searchCriteria: ProductListSearchCriteria | null): IDataServiceRequest {      
        const query = productListsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('Search', true, ProductListClass, 'true', { bypassCache: 'none', returnEntity: 'ProductList'}, {searchCriteria: searchCriteria });
    }    
    
    export function searchAsync(context: IContext, searchCriteria: ProductListSearchCriteria | null):AsyncResult<ProductList[]> {
        const request = createSearchInput(context.queryResultSettings, searchCriteria, );
        return executeAction<ProductList[]>(request, context);
    }          
          
    export function createGetProductListLinesInput(queryResultSettings: IQueryResultSettings, id: string, searchText: string | null): IDataServiceRequest {      
        const query = productListsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetProductListLines', true, ProductListLineClass, 'true', { bypassCache: 'none', returnEntity: 'ProductListLine'}, {searchText: searchText });
    }    
    
    export function getProductListLinesAsync(context: IContext, id: string, searchText: string | null):AsyncResult<ProductListLine[]> {
        const request = createGetProductListLinesInput(context.queryResultSettings, id, searchText, );
        return executeAction<ProductListLine[]>(request, context);
    }          
          
    export function createAddProductListLinesInput(queryResultSettings: IQueryResultSettings, id: string, productListLines: ProductListLine[] | null): IDataServiceRequest {      
        const query = productListsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('AddProductListLines', true, ProductListLineClass, 'true', { bypassCache: 'get', returnEntity: 'ProductListLine'}, {productListLines: productListLines });
    }    
    
    export function addProductListLinesAsync(context: IContext, id: string, productListLines: ProductListLine[] | null):AsyncResult<ProductListLine[]> {
        const request = createAddProductListLinesInput(context.queryResultSettings, id, productListLines, );
        return executeAction<ProductListLine[]>(request, context);
    }          
          
    export function createUpdateProductListLinesInput(queryResultSettings: IQueryResultSettings, id: string, productListLines: ProductListLine[] | null): IDataServiceRequest {      
        const query = productListsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('UpdateProductListLines', true, ProductListLineClass, 'true', { bypassCache: 'get', returnEntity: 'ProductListLine'}, {productListLines: productListLines });
    }    
    
    export function updateProductListLinesAsync(context: IContext, id: string, productListLines: ProductListLine[] | null):AsyncResult<ProductListLine[]> {
        const request = createUpdateProductListLinesInput(context.queryResultSettings, id, productListLines, );
        return executeAction<ProductListLine[]>(request, context);
    }          
          
    export function createRemoveProductListLinesInput(id: string, productListLines: ProductListLine[] | null): IDataServiceRequest {      
        const query = productListsQuery(id);
        return query.createDataServiceRequestForOperation('RemoveProductListLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {productListLines: productListLines });
    }    
    
    export function removeProductListLinesAsync(context: IContext, id: string, productListLines: ProductListLine[] | null):AsyncResult<NullResult> {
        const request = createRemoveProductListLinesInput(id, productListLines, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createCopyCartToProductListInput(id: string, cartId: string | null, isRewrite: boolean | null, isQuantityAggregate: boolean | null): IDataServiceRequest {      
        const query = productListsQuery(id);
        return query.createDataServiceRequestForOperation('CopyCartToProductList', true, ProductListClass, 'false', { bypassCache: 'get', returnEntity: 'ProductList'}, {cartId: cartId, isRewrite: isRewrite, isQuantityAggregate: isQuantityAggregate });
    }    
    
    export function copyCartToProductListAsync(context: IContext, id: string, cartId: string | null, isRewrite: boolean | null, isQuantityAggregate: boolean | null):AsyncResult<ProductList> {
        const request = createCopyCartToProductListInput(id, cartId, isRewrite, isQuantityAggregate, );
        return executeAction<ProductList>(request, context);
    }          
          
    