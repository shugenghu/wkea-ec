    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { CommerceList, CommerceListLine, CommerceListContributor, CommerceListInvitation } from '../Entities/CommerceTypes.g';
    import { CommerceListClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function commerceListsQuery(id?: number): DataServiceQuery {
      var key = (id) ? { Id: id } : null;
      return new DataServiceQuery("CommerceLists", "CommerceList", CommerceListClass, key);
    }
    
    export function createCreateInput(entity: CommerceList): IDataServiceRequest {
        return commerceListsQuery().create(entity);
    }
    export function createCommerceListAsync(context: IContext, entity: CommerceList): AsyncResult<CommerceList> {
        const request = createCreateInput(entity, );
        return executeAction<CommerceList>(request, context);
    }
    export function createUpdateInput(entity: CommerceList): IDataServiceRequest {
        return commerceListsQuery(entity.Id).update(entity);
    }
    export function updateAsync(context: IContext, entity: CommerceList): AsyncResult<CommerceList> {
        const request = createUpdateInput(entity, );
        return executeAction<CommerceList>(request, context);
    }
    export function createDeleteAsync(entity: CommerceList): IDataServiceRequest {
        return commerceListsQuery(entity.Id).delete();
    }
    export function deleteAsync(context: IContext, entity: CommerceList): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(id: number): IDataServiceRequest {
        return commerceListsQuery(id).read();
    }
    export function readAsync(context: IContext, id: number): AsyncResult<CommerceList> {
        const request = createReadAsync(id, );
        return executeAction<CommerceList>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return commerceListsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<CommerceList[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<CommerceList[]>(request, context);
    }
    
    export function createGetByCustomerInput(queryResultSettings: IQueryResultSettings, customerId: string | null): IDataServiceRequest {      
        const query = commerceListsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetByCustomer', true, CommerceListClass, 'true', { bypassCache: 'none', returnEntity: 'CommerceList'}, {customerId: customerId });
    }    
    
    export function getByCustomerAsync(context: IContext, customerId: string | null):AsyncResult<CommerceList[]> {
        const request = createGetByCustomerInput(context.queryResultSettings, customerId, );
        return executeAction<CommerceList[]>(request, context);
    }          
          
    export function createAddLinesInput(id: number, commerceListLines: CommerceListLine[] | null): IDataServiceRequest {      
        const query = commerceListsQuery(id);
        return query.createDataServiceRequestForOperation('AddLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList'}, {commerceListLines: commerceListLines });
    }    
    
    export function addLinesAsync(context: IContext, id: number, commerceListLines: CommerceListLine[] | null):AsyncResult<CommerceList> {
        const request = createAddLinesInput(id, commerceListLines, );
        return executeAction<CommerceList>(request, context);
    }          
          
    export function createUpdateLinesInput(id: number, commerceListLines: CommerceListLine[] | null): IDataServiceRequest {      
        const query = commerceListsQuery(id);
        return query.createDataServiceRequestForOperation('UpdateLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList'}, {commerceListLines: commerceListLines });
    }    
    
    export function updateLinesAsync(context: IContext, id: number, commerceListLines: CommerceListLine[] | null):AsyncResult<CommerceList> {
        const request = createUpdateLinesInput(id, commerceListLines, );
        return executeAction<CommerceList>(request, context);
    }          
          
    export function createRemoveLinesInput(id: number, commerceListLines: CommerceListLine[] | null): IDataServiceRequest {      
        const query = commerceListsQuery(id);
        return query.createDataServiceRequestForOperation('RemoveLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList'}, {commerceListLines: commerceListLines });
    }    
    
    export function removeLinesAsync(context: IContext, id: number, commerceListLines: CommerceListLine[] | null):AsyncResult<CommerceList> {
        const request = createRemoveLinesInput(id, commerceListLines, );
        return executeAction<CommerceList>(request, context);
    }          
          
    export function createMoveLinesInput(commerceListLines: CommerceListLine[] | null, destinationId: number): IDataServiceRequest {      
        const query = commerceListsQuery();
        return query.createDataServiceRequestForOperation('MoveLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList'}, {commerceListLines: commerceListLines, destinationId: destinationId });
    }    
    
    export function moveLinesAsync(context: IContext, commerceListLines: CommerceListLine[] | null, destinationId: number):AsyncResult<CommerceList> {
        const request = createMoveLinesInput(commerceListLines, destinationId, );
        return executeAction<CommerceList>(request, context);
    }          
          
    export function createCopyLinesInput(commerceListLines: CommerceListLine[] | null, destinationId: number): IDataServiceRequest {      
        const query = commerceListsQuery();
        return query.createDataServiceRequestForOperation('CopyLines', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList'}, {commerceListLines: commerceListLines, destinationId: destinationId });
    }    
    
    export function copyLinesAsync(context: IContext, commerceListLines: CommerceListLine[] | null, destinationId: number):AsyncResult<CommerceList> {
        const request = createCopyLinesInput(commerceListLines, destinationId, );
        return executeAction<CommerceList>(request, context);
    }          
          
    export function createAddContributorsInput(id: number, commerceListContributors: CommerceListContributor[] | null): IDataServiceRequest {      
        const query = commerceListsQuery(id);
        return query.createDataServiceRequestForOperation('AddContributors', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList'}, {commerceListContributors: commerceListContributors });
    }    
    
    export function addContributorsAsync(context: IContext, id: number, commerceListContributors: CommerceListContributor[] | null):AsyncResult<CommerceList> {
        const request = createAddContributorsInput(id, commerceListContributors, );
        return executeAction<CommerceList>(request, context);
    }          
          
    export function createRemoveContributorsInput(id: number, commerceListContributors: CommerceListContributor[] | null): IDataServiceRequest {      
        const query = commerceListsQuery(id);
        return query.createDataServiceRequestForOperation('RemoveContributors', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList'}, {commerceListContributors: commerceListContributors });
    }    
    
    export function removeContributorsAsync(context: IContext, id: number, commerceListContributors: CommerceListContributor[] | null):AsyncResult<CommerceList> {
        const request = createRemoveContributorsInput(id, commerceListContributors, );
        return executeAction<CommerceList>(request, context);
    }          
          
    export function createCreateInvitationsInput(id: number, commerceListInvitations: CommerceListInvitation[] | null): IDataServiceRequest {      
        const query = commerceListsQuery(id);
        return query.createDataServiceRequestForOperation('CreateInvitations', true, CommerceListClass, 'false', { bypassCache: 'get', returnEntity: 'CommerceList'}, {commerceListInvitations: commerceListInvitations });
    }    
    
    export function createInvitationsAsync(context: IContext, id: number, commerceListInvitations: CommerceListInvitation[] | null):AsyncResult<CommerceList> {
        const request = createCreateInvitationsInput(id, commerceListInvitations, );
        return executeAction<CommerceList>(request, context);
    }          
          
    export function createAcceptInvitationInput(invitationToken: string | null, customerId: string | null): IDataServiceRequest {      
        const query = commerceListsQuery();
        return query.createDataServiceRequestForOperation('AcceptInvitation', true, '', '', { bypassCache: 'get', returnEntity: ''}, {invitationToken: invitationToken, customerId: customerId });
    }    
    
    export function acceptInvitationAsync(context: IContext, invitationToken: string | null, customerId: string | null):AsyncResult<NullResult> {
        const request = createAcceptInvitationInput(invitationToken, customerId, );
        return executeAction<NullResult>(request, context);
    }          
          
    