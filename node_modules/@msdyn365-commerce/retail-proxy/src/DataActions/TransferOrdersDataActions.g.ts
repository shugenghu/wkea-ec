    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { TransferOrder, TransferOrderLine, Comment, TransferOrderJournal, ReceiptRetrievalCriteria, Receipt } from '../Entities/CommerceTypes.g';
    import { TransferOrderClass, TransferOrderLineClass, CommentClass, TransferOrderJournalClass, ReceiptClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function transferOrdersQuery(orderId?: string): DataServiceQuery {
      var key = (orderId) ? { OrderId: orderId } : null;
      return new DataServiceQuery("TransferOrders", "TransferOrder", TransferOrderClass, key);
    }
    
    export function createCreateInput(entity: TransferOrder): IDataServiceRequest {
        return transferOrdersQuery().create(entity);
    }
    export function createTransferOrderAsync(context: IContext, entity: TransferOrder): AsyncResult<TransferOrder> {
        const request = createCreateInput(entity, );
        return executeAction<TransferOrder>(request, context);
    }
    export function createUpdateInput(entity: TransferOrder): IDataServiceRequest {
        return transferOrdersQuery(entity.OrderId).update(entity);
    }
    export function updateAsync(context: IContext, entity: TransferOrder): AsyncResult<TransferOrder> {
        const request = createUpdateInput(entity, );
        return executeAction<TransferOrder>(request, context);
    }
    export function createDeleteAsync(entity: TransferOrder): IDataServiceRequest {
        return transferOrdersQuery(entity.OrderId).delete();
    }
    export function deleteAsync(context: IContext, entity: TransferOrder): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(orderId: string): IDataServiceRequest {
        return transferOrdersQuery(orderId).read();
    }
    export function readAsync(context: IContext, orderId: string): AsyncResult<TransferOrder> {
        const request = createReadAsync(orderId, );
        return executeAction<TransferOrder>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return transferOrdersQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<TransferOrder[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<TransferOrder[]>(request, context);
    }
    
    export function createCommitInput(orderId: string, skipNotValidLines: boolean | null): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId);
        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, {skipNotValidLines: skipNotValidLines });
    }    
    
    export function commitAsync(context: IContext, orderId: string, skipNotValidLines: boolean | null):AsyncResult<NullResult> {
        const request = createCommitInput(orderId, skipNotValidLines, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createGetTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'none', returnEntity: 'TransferOrderLine'}, { });
    }    
    
    export function getTransferOrderLinesAsync(context: IContext, orderId: string):AsyncResult<TransferOrderLine[]> {
        const request = createGetTransferOrderLinesInput(context.queryResultSettings, orderId, );
        return executeAction<TransferOrderLine[]>(request, context);
    }          
          
    export function createCreateTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('CreateTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });
    }    
    
    export function createTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {
        const request = createCreateTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );
        return executeAction<TransferOrderLine[]>(request, context);
    }          
          
    export function createUpdateTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('UpdateTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });
    }    
    
    export function updateTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {
        const request = createUpdateTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );
        return executeAction<TransferOrderLine[]>(request, context);
    }          
          
    export function createGetTransferOrderCommentsInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetTransferOrderComments', true, CommentClass, 'true', { bypassCache: 'none', returnEntity: 'Comment'}, { });
    }    
    
    export function getTransferOrderCommentsAsync(context: IContext, orderId: string):AsyncResult<Comment[]> {
        const request = createGetTransferOrderCommentsInput(context.queryResultSettings, orderId, );
        return executeAction<Comment[]>(request, context);
    }          
          
    export function createAddTransferOrderCommentInput(orderId: string, authorStaffId: string | null, commentText: string | null): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId);
        return query.createDataServiceRequestForOperation('AddTransferOrderComment', true, CommentClass, 'false', { bypassCache: 'get', returnEntity: 'Comment'}, {AuthorStaffId: authorStaffId, CommentText: commentText });
    }    
    
    export function addTransferOrderCommentAsync(context: IContext, orderId: string, authorStaffId: string | null, commentText: string | null):AsyncResult<Comment> {
        const request = createAddTransferOrderCommentInput(orderId, authorStaffId, commentText, );
        return executeAction<Comment>(request, context);
    }          
          
    export function createDeleteTransferOrderLinesInput(queryResultSettings: IQueryResultSettings, orderId: string, transferOrderLines: TransferOrderLine[] | null): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('DeleteTransferOrderLines', true, TransferOrderLineClass, 'true', { bypassCache: 'get', returnEntity: 'TransferOrderLine'}, {transferOrderLines: transferOrderLines });
    }    
    
    export function deleteTransferOrderLinesAsync(context: IContext, orderId: string, transferOrderLines: TransferOrderLine[] | null):AsyncResult<TransferOrderLine[]> {
        const request = createDeleteTransferOrderLinesInput(context.queryResultSettings, orderId, transferOrderLines, );
        return executeAction<TransferOrderLine[]>(request, context);
    }          
          
    export function createGetTransferOrderJournalsInput(queryResultSettings: IQueryResultSettings, orderId: string): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetTransferOrderJournals', true, TransferOrderJournalClass, 'true', { bypassCache: 'none', returnEntity: 'TransferOrderJournal'}, { });
    }    
    
    export function getTransferOrderJournalsAsync(context: IContext, orderId: string):AsyncResult<TransferOrderJournal[]> {
        const request = createGetTransferOrderJournalsInput(context.queryResultSettings, orderId, );
        return executeAction<TransferOrderJournal[]>(request, context);
    }          
          
    export function createGetTransferPackingSlipInput(queryResultSettings: IQueryResultSettings, orderId: string, voucherId: string | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest {      
        const query = transferOrdersQuery(orderId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetTransferPackingSlip', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {voucherId: voucherId, receiptRetrievalCriteria: receiptRetrievalCriteria });
    }    
    
    export function getTransferPackingSlipAsync(context: IContext, orderId: string, voucherId: string | null, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null):AsyncResult<Receipt[]> {
        const request = createGetTransferPackingSlipInput(context.queryResultSettings, orderId, voucherId, receiptRetrievalCriteria, );
        return executeAction<Receipt[]>(request, context);
    }          
          
    