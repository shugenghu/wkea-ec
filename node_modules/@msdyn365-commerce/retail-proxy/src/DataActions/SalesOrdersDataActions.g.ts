    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { SalesOrder, SalesOrderSearchCriteria, OrderSearchCriteria, ReceiptRetrievalCriteria, Receipt, SearchReceiptCriteria, ElectronicAddress, ShipFulfillmentLine, FulfillmentLineParameter, FulfillmentLineSearchCriteria, FulfillmentLine, RejectFulfillmentLine, SalesInvoice, OrderInvoice, InvoiceSearchCriteria, SalesLine, PickAndPackSalesLineParameter, PickingList, PackingSlipData } from '../Entities/CommerceTypes.g';
    import { SalesOrderClass, ReceiptClass, FulfillmentLineClass, SalesInvoiceClass, OrderInvoiceClass, SalesLineClass, PickingListClass, PackingSlipDataClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function salesOrdersQuery(id?: string): DataServiceQuery {
      var key = (id) ? { Id: id } : null;
      return new DataServiceQuery("SalesOrders", "SalesOrder", SalesOrderClass, key);
    }
    
    export function createCreateInput(entity: SalesOrder): IDataServiceRequest {
        return salesOrdersQuery().create(entity);
    }
    export function createSalesOrderAsync(context: IContext, entity: SalesOrder): AsyncResult<SalesOrder> {
        const request = createCreateInput(entity, );
        return executeAction<SalesOrder>(request, context);
    }
    export function createUpdateInput(entity: SalesOrder): IDataServiceRequest {
        return salesOrdersQuery(entity.Id).update(entity);
    }
    export function updateAsync(context: IContext, entity: SalesOrder): AsyncResult<SalesOrder> {
        const request = createUpdateInput(entity, );
        return executeAction<SalesOrder>(request, context);
    }
    export function createDeleteAsync(entity: SalesOrder): IDataServiceRequest {
        return salesOrdersQuery(entity.Id).delete();
    }
    export function deleteAsync(context: IContext, entity: SalesOrder): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(id: string): IDataServiceRequest {
        return salesOrdersQuery(id).read();
    }
    export function readAsync(context: IContext, id: string): AsyncResult<SalesOrder> {
        const request = createReadAsync(id, );
        return executeAction<SalesOrder>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return salesOrdersQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<SalesOrder[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<SalesOrder[]>(request, context);
    }
    
    export function createSearchSalesTransactionsByReceiptIdInput(queryResultSettings: IQueryResultSettings, receiptId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchSalesTransactionsByReceiptId', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {receiptId: receiptId });
    }    
    
    export function searchSalesTransactionsByReceiptIdAsync(context: IContext, receiptId: string | null):AsyncResult<SalesOrder[]> {
        const request = createSearchSalesTransactionsByReceiptIdInput(context.queryResultSettings, receiptId, );
        return executeAction<SalesOrder[]>(request, context);
    }          
          
    export function createSearchInput(queryResultSettings: IQueryResultSettings, salesOrderSearchCriteria: SalesOrderSearchCriteria | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('Search', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {salesOrderSearchCriteria: salesOrderSearchCriteria });
    }    
    
    export function searchAsync(context: IContext, salesOrderSearchCriteria: SalesOrderSearchCriteria | null):AsyncResult<SalesOrder[]> {
        const request = createSearchInput(context.queryResultSettings, salesOrderSearchCriteria, );
        return executeAction<SalesOrder[]>(request, context);
    }          
          
    export function createSearchOrdersInput(queryResultSettings: IQueryResultSettings, orderSearchCriteria: OrderSearchCriteria | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchOrders', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {orderSearchCriteria: orderSearchCriteria });
    }    
    
    export function searchOrdersAsync(context: IContext, orderSearchCriteria: OrderSearchCriteria | null):AsyncResult<SalesOrder[]> {
        const request = createSearchOrdersInput(context.queryResultSettings, orderSearchCriteria, );
        return executeAction<SalesOrder[]>(request, context);
    }          
          
    export function createGetReceiptsInput(queryResultSettings: IQueryResultSettings, id: string, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest {      
        const query = salesOrdersQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetReceipts', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {receiptRetrievalCriteria: receiptRetrievalCriteria });
    }    
    
    export function getReceiptsAsync(context: IContext, id: string, receiptRetrievalCriteria: ReceiptRetrievalCriteria | null):AsyncResult<Receipt[]> {
        const request = createGetReceiptsInput(context.queryResultSettings, id, receiptRetrievalCriteria, );
        return executeAction<Receipt[]>(request, context);
    }          
          
    export function createSendReceiptInput(searchCriteria: SearchReceiptCriteria | null, recipientAddresses: ElectronicAddress[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('SendReceipt', true, '', '', { bypassCache: 'get', returnEntity: ''}, {searchCriteria: searchCriteria, recipientAddresses: recipientAddresses });
    }    
    
    export function sendReceiptAsync(context: IContext, searchCriteria: SearchReceiptCriteria | null, recipientAddresses: ElectronicAddress[] | null):AsyncResult<NullResult> {
        const request = createSendReceiptInput(searchCriteria, recipientAddresses, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createGetGiftReceiptsInput(queryResultSettings: IQueryResultSettings, id: string, salesLineNumbers: number[], receiptRetrievalCriteria: ReceiptRetrievalCriteria | null): IDataServiceRequest {      
        const query = salesOrdersQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetGiftReceipts', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {SalesLineNumbers: salesLineNumbers, receiptRetrievalCriteria: receiptRetrievalCriteria });
    }    
    
    export function getGiftReceiptsAsync(context: IContext, id: string, salesLineNumbers: number[], receiptRetrievalCriteria: ReceiptRetrievalCriteria | null):AsyncResult<Receipt[]> {
        const request = createGetGiftReceiptsInput(context.queryResultSettings, id, salesLineNumbers, receiptRetrievalCriteria, );
        return executeAction<Receipt[]>(request, context);
    }          
          
    export function createGetByReceiptIdInput(queryResultSettings: IQueryResultSettings, receiptId: string | null, orderStoreNumber: string | null, orderTerminalId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetByReceiptId', true, SalesOrderClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {receiptId: receiptId, orderStoreNumber: orderStoreNumber, orderTerminalId: orderTerminalId });
    }    
    
    export function getByReceiptIdAsync(context: IContext, receiptId: string | null, orderStoreNumber: string | null, orderTerminalId: string | null):AsyncResult<SalesOrder[]> {
        const request = createGetByReceiptIdInput(context.queryResultSettings, receiptId, orderStoreNumber, orderTerminalId, );
        return executeAction<SalesOrder[]>(request, context);
    }          
          
    export function createGetSalesOrderDetailsByTransactionIdInput(transactionId: string | null, searchLocationValue: number): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('GetSalesOrderDetailsByTransactionId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {transactionId: transactionId, searchLocationValue: searchLocationValue });
    }    
    
    export function getSalesOrderDetailsByTransactionIdAsync(context: IContext, transactionId: string | null, searchLocationValue: number):AsyncResult<SalesOrder> {
        const request = createGetSalesOrderDetailsByTransactionIdInput(transactionId, searchLocationValue, );
        return executeAction<SalesOrder>(request, context);
    }          
          
    export function createGetSalesOrderDetailsBySalesIdInput(salesId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('GetSalesOrderDetailsBySalesId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {salesId: salesId });
    }    
    
    export function getSalesOrderDetailsBySalesIdAsync(context: IContext, salesId: string | null):AsyncResult<SalesOrder> {
        const request = createGetSalesOrderDetailsBySalesIdInput(salesId, );
        return executeAction<SalesOrder>(request, context);
    }          
          
    export function createGetSalesOrderDetailsByQuotationIdInput(quotationId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('GetSalesOrderDetailsByQuotationId', false, SalesOrderClass, 'false', { bypassCache: 'none', returnEntity: 'SalesOrder'}, {quotationId: quotationId });
    }    
    
    export function getSalesOrderDetailsByQuotationIdAsync(context: IContext, quotationId: string | null):AsyncResult<SalesOrder> {
        const request = createGetSalesOrderDetailsByQuotationIdInput(quotationId, );
        return executeAction<SalesOrder>(request, context);
    }          
          
    export function createShipFulfillmentLinesInput(shipFulfillmentLines: ShipFulfillmentLine[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('ShipFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {ShipFulfillmentLines: shipFulfillmentLines });
    }    
    
    export function shipFulfillmentLinesAsync(context: IContext, shipFulfillmentLines: ShipFulfillmentLine[] | null):AsyncResult<NullResult> {
        const request = createShipFulfillmentLinesInput(shipFulfillmentLines, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createAcceptFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('AcceptFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });
    }    
    
    export function acceptFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<NullResult> {
        const request = createAcceptFulfillmentLinesInput(fulfillmentLineParameter, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createPickFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('PickFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });
    }    
    
    export function pickFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<NullResult> {
        const request = createPickFulfillmentLinesInput(fulfillmentLineParameter, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createPackFulfillmentLinesInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('PackFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });
    }    
    
    export function packFulfillmentLinesAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<NullResult> {
        const request = createPackFulfillmentLinesInput(fulfillmentLineParameter, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createMarkFulfillmentLinesAsPackedInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('MarkFulfillmentLinesAsPacked', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });
    }    
    
    export function markFulfillmentLinesAsPackedAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<string> {
        const request = createMarkFulfillmentLinesAsPackedInput(fulfillmentLineParameter, );
        return executeAction<string>(request, context);
    }          
          
    export function createMarkAsPickedInput(fulfillmentLineParameter: FulfillmentLineParameter[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('MarkAsPicked', true, '', '', { bypassCache: 'get', returnEntity: ''}, {FulfillmentLineParameter: fulfillmentLineParameter });
    }    
    
    export function markAsPickedAsync(context: IContext, fulfillmentLineParameter: FulfillmentLineParameter[] | null):AsyncResult<NullResult> {
        const request = createMarkAsPickedInput(fulfillmentLineParameter, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createGetFulfillmentPickingListsInput(queryResultSettings: IQueryResultSettings, pickingListFulfillmentLine: FulfillmentLineParameter[] | null, hardwareProfileId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetFulfillmentPickingLists', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {pickingListFulfillmentLine: pickingListFulfillmentLine, hardwareProfileId: hardwareProfileId });
    }    
    
    export function getFulfillmentPickingListsAsync(context: IContext, pickingListFulfillmentLine: FulfillmentLineParameter[] | null, hardwareProfileId: string | null):AsyncResult<Receipt[]> {
        const request = createGetFulfillmentPickingListsInput(context.queryResultSettings, pickingListFulfillmentLine, hardwareProfileId, );
        return executeAction<Receipt[]>(request, context);
    }          
          
    export function createGetFulfillmentLinesInput(queryResultSettings: IQueryResultSettings, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetFulfillmentLines', true, FulfillmentLineClass, 'true', { bypassCache: 'none', returnEntity: 'FulfillmentLine'}, {fulfillmentLineSearchCriteria: fulfillmentLineSearchCriteria });
    }    
    
    export function getFulfillmentLinesAsync(context: IContext, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null):AsyncResult<FulfillmentLine[]> {
        const request = createGetFulfillmentLinesInput(context.queryResultSettings, fulfillmentLineSearchCriteria, );
        return executeAction<FulfillmentLine[]>(request, context);
    }          
          
    export function createGetFulfillmentPackingSlipsInput(queryResultSettings: IQueryResultSettings, packFulfillmentLines: FulfillmentLineParameter[] | null, hardwareProfileId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetFulfillmentPackingSlips', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {packFulfillmentLines: packFulfillmentLines, hardwareProfileId: hardwareProfileId });
    }    
    
    export function getFulfillmentPackingSlipsAsync(context: IContext, packFulfillmentLines: FulfillmentLineParameter[] | null, hardwareProfileId: string | null):AsyncResult<Receipt[]> {
        const request = createGetFulfillmentPackingSlipsInput(context.queryResultSettings, packFulfillmentLines, hardwareProfileId, );
        return executeAction<Receipt[]>(request, context);
    }          
          
    export function createGetFulfillmentPackingSlipsByIdInput(queryResultSettings: IQueryResultSettings, salesId: string | null, packingSlipId: string | null, hardwareProfileId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetFulfillmentPackingSlipsById', true, ReceiptClass, 'true', { bypassCache: 'none', returnEntity: 'Receipt'}, {salesId: salesId, PackingSlipId: packingSlipId, hardwareProfileId: hardwareProfileId });
    }    
    
    export function getFulfillmentPackingSlipsByIdAsync(context: IContext, salesId: string | null, packingSlipId: string | null, hardwareProfileId: string | null):AsyncResult<Receipt[]> {
        const request = createGetFulfillmentPackingSlipsByIdInput(context.queryResultSettings, salesId, packingSlipId, hardwareProfileId, );
        return executeAction<Receipt[]>(request, context);
    }          
          
    export function createRejectFulfillmentLinesInput(rejectFulfillmentLines: RejectFulfillmentLine[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('RejectFulfillmentLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {RejectFulfillmentLines: rejectFulfillmentLines });
    }    
    
    export function rejectFulfillmentLinesAsync(context: IContext, rejectFulfillmentLines: RejectFulfillmentLine[] | null):AsyncResult<NullResult> {
        const request = createRejectFulfillmentLinesInput(rejectFulfillmentLines, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createGetInvoicesBySalesIdInput(queryResultSettings: IQueryResultSettings, salesId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetInvoicesBySalesId', true, SalesInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'SalesInvoice'}, {salesId: salesId });
    }    
    
    export function getInvoicesBySalesIdAsync(context: IContext, salesId: string | null):AsyncResult<SalesInvoice[]> {
        const request = createGetInvoicesBySalesIdInput(context.queryResultSettings, salesId, );
        return executeAction<SalesInvoice[]>(request, context);
    }          
          
    export function createGetOrderInvoicesInput(queryResultSettings: IQueryResultSettings, customerId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetOrderInvoices', true, OrderInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'OrderInvoice'}, {customerId: customerId });
    }    
    
    export function getOrderInvoicesAsync(context: IContext, customerId: string | null):AsyncResult<OrderInvoice[]> {
        const request = createGetOrderInvoicesInput(context.queryResultSettings, customerId, );
        return executeAction<OrderInvoice[]>(request, context);
    }          
          
    export function createGetInvoicesInput(queryResultSettings: IQueryResultSettings, invoiceSearchCriteria: InvoiceSearchCriteria | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetInvoices', true, OrderInvoiceClass, 'true', { bypassCache: 'none', returnEntity: 'OrderInvoice'}, {invoiceSearchCriteria: invoiceSearchCriteria });
    }    
    
    export function getInvoicesAsync(context: IContext, invoiceSearchCriteria: InvoiceSearchCriteria | null):AsyncResult<OrderInvoice[]> {
        const request = createGetInvoicesInput(context.queryResultSettings, invoiceSearchCriteria, );
        return executeAction<OrderInvoice[]>(request, context);
    }          
          
    export function createGetInvoicedSalesLinesBySalesIdsInput(queryResultSettings: IQueryResultSettings, salesIds: string[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetInvoicedSalesLinesBySalesIds', true, SalesLineClass, 'true', { bypassCache: 'none', returnEntity: 'SalesLine'}, {salesIds: salesIds });
    }    
    
    export function getInvoicedSalesLinesBySalesIdsAsync(context: IContext, salesIds: string[] | null):AsyncResult<SalesLine[]> {
        const request = createGetInvoicedSalesLinesBySalesIdsInput(context.queryResultSettings, salesIds, );
        return executeAction<SalesLine[]>(request, context);
    }          
          
    export function createCreatePickingListInput(salesId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('CreatePickingList', true, '', '', { bypassCache: 'get', returnEntity: ''}, {salesId: salesId });
    }    
    
    export function createPickingListAsync(context: IContext, salesId: string | null):AsyncResult<NullResult> {
        const request = createCreatePickingListInput(salesId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createCreatePickingListForItemsInput(salesId: string | null, pickAndPackSalesLineParameters: PickAndPackSalesLineParameter[] | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('CreatePickingListForItems', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, {salesId: salesId, pickAndPackSalesLineParameters: pickAndPackSalesLineParameters });
    }    
    
    export function createPickingListForItemsAsync(context: IContext, salesId: string | null, pickAndPackSalesLineParameters: PickAndPackSalesLineParameter[] | null):AsyncResult<string> {
        const request = createCreatePickingListForItemsInput(salesId, pickAndPackSalesLineParameters, );
        return executeAction<string>(request, context);
    }          
          
    export function createGetPickingListsInput(queryResultSettings: IQueryResultSettings, id: string): IDataServiceRequest {      
        const query = salesOrdersQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetPickingLists', false, PickingListClass, 'true', { bypassCache: 'none', returnEntity: 'PickingList'}, { });
    }    
    
    export function getPickingListsAsync(context: IContext, id: string):AsyncResult<PickingList[]> {
        const request = createGetPickingListsInput(context.queryResultSettings, id, );
        return executeAction<PickingList[]>(request, context);
    }          
          
    export function createCreatePackingSlipInput(salesId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery();
        return query.createDataServiceRequestForOperation('CreatePackingSlip', true, '', '', { bypassCache: 'get', returnEntity: ''}, {salesId: salesId });
    }    
    
    export function createPackingSlipAsync(context: IContext, salesId: string | null):AsyncResult<NullResult> {
        const request = createCreatePackingSlipInput(salesId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createGetPackingSlipsDataInput(queryResultSettings: IQueryResultSettings, salesId: string | null): IDataServiceRequest {      
        const query = salesOrdersQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetPackingSlipsData', false, PackingSlipDataClass, 'true', { bypassCache: 'none', returnEntity: 'PackingSlipData'}, {salesId: salesId });
    }    
    
    export function getPackingSlipsDataAsync(context: IContext, salesId: string | null):AsyncResult<PackingSlipData[]> {
        const request = createGetPackingSlipsDataInput(context.queryResultSettings, salesId, );
        return executeAction<PackingSlipData[]>(request, context);
    }          
          
    