    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { Category, AttributeCategory } from '../Entities/CommerceTypes.g';
    import { CategoryClass, AttributeCategoryClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function categoriesQuery(recordId?: number): DataServiceQuery {
      var key = (recordId) ? { RecordId: recordId } : null;
      return new DataServiceQuery("Categories", "Category", CategoryClass, key);
    }
    
    export function createCreateInput(entity: Category): IDataServiceRequest {
        return categoriesQuery().create(entity);
    }
    export function createCategoryAsync(context: IContext, entity: Category): AsyncResult<Category> {
        const request = createCreateInput(entity, );
        return executeAction<Category>(request, context);
    }
    export function createUpdateInput(entity: Category): IDataServiceRequest {
        return categoriesQuery(entity.RecordId).update(entity);
    }
    export function updateAsync(context: IContext, entity: Category): AsyncResult<Category> {
        const request = createUpdateInput(entity, );
        return executeAction<Category>(request, context);
    }
    export function createDeleteAsync(entity: Category): IDataServiceRequest {
        return categoriesQuery(entity.RecordId).delete();
    }
    export function deleteAsync(context: IContext, entity: Category): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(recordId: number): IDataServiceRequest {
        return categoriesQuery(recordId).read();
    }
    export function readAsync(context: IContext, recordId: number): AsyncResult<Category> {
        const request = createReadAsync(recordId, );
        return executeAction<Category>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return categoriesQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<Category[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<Category[]>(request, context);
    }
    
    export function createGetCategoriesInput(queryResultSettings: IQueryResultSettings, channelId: number): IDataServiceRequest {      
        const query = categoriesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetCategories', true, CategoryClass, 'true', { bypassCache: 'none', returnEntity: 'Category'}, {channelId: channelId });
    }    
    
    export function getCategoriesAsync(context: IContext, channelId: number):AsyncResult<Category[]> {
        const request = createGetCategoriesInput(context.queryResultSettings, channelId, );
        return executeAction<Category[]>(request, context);
    }          
          
    export function createGetAttributesInput(queryResultSettings: IQueryResultSettings, categoryId: number): IDataServiceRequest {      
        const query = categoriesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetAttributes', false, AttributeCategoryClass, 'true', { bypassCache: 'none', returnEntity: 'AttributeCategory'}, {categoryId: categoryId });
    }    
    
    export function getAttributesAsync(context: IContext, categoryId: number):AsyncResult<AttributeCategory[]> {
        const request = createGetAttributesInput(context.queryResultSettings, categoryId, );
        return executeAction<AttributeCategory[]>(request, context);
    }          
          
    export function createGetChildrenInput(queryResultSettings: IQueryResultSettings, channelId: number, categoryId: number): IDataServiceRequest {      
        const query = categoriesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetChildren', true, CategoryClass, 'true', { bypassCache: 'none', returnEntity: 'Category'}, {channelId: channelId, categoryId: categoryId });
    }    
    
    export function getChildrenAsync(context: IContext, channelId: number, categoryId: number):AsyncResult<Category[]> {
        const request = createGetChildrenInput(context.queryResultSettings, channelId, categoryId, );
        return executeAction<Category[]>(request, context);
    }          
          
    