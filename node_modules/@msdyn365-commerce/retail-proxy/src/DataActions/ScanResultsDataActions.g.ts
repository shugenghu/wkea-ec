    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { ScanResult } from '../Entities/CommerceTypes.g';
    import { ScanResultClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function scanResultsQuery(scannedText?: string): DataServiceQuery {
      var key = (scannedText) ? { ScannedText: scannedText } : null;
      return new DataServiceQuery("ScanResults", "ScanResult", ScanResultClass, key);
    }
    
    export function createCreateInput(entity: ScanResult): IDataServiceRequest {
        return scanResultsQuery().create(entity);
    }
    export function createScanResultAsync(context: IContext, entity: ScanResult): AsyncResult<ScanResult> {
        const request = createCreateInput(entity, );
        return executeAction<ScanResult>(request, context);
    }
    export function createUpdateInput(entity: ScanResult): IDataServiceRequest {
        return scanResultsQuery(entity.ScannedText).update(entity);
    }
    export function updateAsync(context: IContext, entity: ScanResult): AsyncResult<ScanResult> {
        const request = createUpdateInput(entity, );
        return executeAction<ScanResult>(request, context);
    }
    export function createDeleteAsync(entity: ScanResult): IDataServiceRequest {
        return scanResultsQuery(entity.ScannedText).delete();
    }
    export function deleteAsync(context: IContext, entity: ScanResult): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(scannedText: string): IDataServiceRequest {
        return scanResultsQuery(scannedText).read();
    }
    export function readAsync(context: IContext, scannedText: string): AsyncResult<ScanResult> {
        const request = createReadAsync(scannedText, );
        return executeAction<ScanResult>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return scanResultsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<ScanResult[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<ScanResult[]>(request, context);
    }
    
    