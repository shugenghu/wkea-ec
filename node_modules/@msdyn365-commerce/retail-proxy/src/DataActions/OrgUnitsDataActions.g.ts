    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { OrgUnit, TillLayout, SearchStoreCriteria, SearchArea, OrgUnitLocation, OrgUnitLocationSearchCriteria, ChannelConfiguration, StoreHours, OrgUnitAvailability, ItemUnit, ProductDimensionCombination, OrgUnitAvailabilitySearchCriteria, TerminalInfo } from '../Entities/CommerceTypes.g';
    import { OrgUnitClass, TillLayoutClass, OrgUnitLocationClass, ChannelConfigurationClass, StoreHoursClass, OrgUnitAvailabilityClass, TerminalInfoClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function orgUnitsQuery(orgUnitNumber?: string): DataServiceQuery {
      var key = (orgUnitNumber) ? { OrgUnitNumber: orgUnitNumber } : null;
      return new DataServiceQuery("OrgUnits", "OrgUnit", OrgUnitClass, key);
    }
    
    export function createCreateInput(entity: OrgUnit): IDataServiceRequest {
        return orgUnitsQuery().create(entity);
    }
    export function createOrgUnitAsync(context: IContext, entity: OrgUnit): AsyncResult<OrgUnit> {
        const request = createCreateInput(entity, );
        return executeAction<OrgUnit>(request, context);
    }
    export function createUpdateInput(entity: OrgUnit): IDataServiceRequest {
        return orgUnitsQuery(entity.OrgUnitNumber).update(entity);
    }
    export function updateAsync(context: IContext, entity: OrgUnit): AsyncResult<OrgUnit> {
        const request = createUpdateInput(entity, );
        return executeAction<OrgUnit>(request, context);
    }
    export function createDeleteAsync(entity: OrgUnit): IDataServiceRequest {
        return orgUnitsQuery(entity.OrgUnitNumber).delete();
    }
    export function deleteAsync(context: IContext, entity: OrgUnit): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(orgUnitNumber: string): IDataServiceRequest {
        return orgUnitsQuery(orgUnitNumber).read();
    }
    export function readAsync(context: IContext, orgUnitNumber: string): AsyncResult<OrgUnit> {
        const request = createReadAsync(orgUnitNumber, );
        return executeAction<OrgUnit>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return orgUnitsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<OrgUnit[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<OrgUnit[]>(request, context);
    }
    
    export function createGetTillLayoutInput(height: number | null, width: number | null): IDataServiceRequest {      
        const query = orgUnitsQuery();
        return query.createDataServiceRequestForOperation('GetTillLayout', true, TillLayoutClass, 'false', { bypassCache: 'none', returnEntity: 'TillLayout'}, {height: height, width: width });
    }    
    
    export function getTillLayoutAsync(context: IContext, height: number | null, width: number | null):AsyncResult<TillLayout> {
        const request = createGetTillLayoutInput(height, width, );
        return executeAction<TillLayout>(request, context);
    }          
          
    export function createSearchInput(queryResultSettings: IQueryResultSettings, storeSearchCriteria: SearchStoreCriteria | null): IDataServiceRequest {      
        const query = orgUnitsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('Search', true, OrgUnitClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnit'}, {storeSearchCriteria: storeSearchCriteria });
    }    
    
    export function searchAsync(context: IContext, storeSearchCriteria: SearchStoreCriteria | null):AsyncResult<OrgUnit[]> {
        const request = createSearchInput(context.queryResultSettings, storeSearchCriteria, );
        return executeAction<OrgUnit[]>(request, context);
    }          
          
    export function createGetOrgUnitLocationsByAreaInput(queryResultSettings: IQueryResultSettings, searchArea: SearchArea | null, deliveryModeTypeFilter?: number | null): IDataServiceRequest {      
        const query = orgUnitsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetOrgUnitLocationsByArea', true, OrgUnitLocationClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitLocation'}, {searchArea: searchArea, deliveryModeTypeFilter: deliveryModeTypeFilter });
    }    
    
    export function getOrgUnitLocationsByAreaAsync(context: IContext, searchArea: SearchArea | null, deliveryModeTypeFilter?: number | null):AsyncResult<OrgUnitLocation[]> {
        const request = createGetOrgUnitLocationsByAreaInput(context.queryResultSettings, searchArea, deliveryModeTypeFilter, );
        return executeAction<OrgUnitLocation[]>(request, context);
    }          
          
    export function createSearchOrgUnitLocationsInput(queryResultSettings: IQueryResultSettings, orgUnitLocationSearchCriteria: OrgUnitLocationSearchCriteria | null): IDataServiceRequest {      
        const query = orgUnitsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchOrgUnitLocations', true, OrgUnitLocationClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitLocation'}, {orgUnitLocationSearchCriteria: orgUnitLocationSearchCriteria });
    }    
    
    export function searchOrgUnitLocationsAsync(context: IContext, orgUnitLocationSearchCriteria: OrgUnitLocationSearchCriteria | null):AsyncResult<OrgUnitLocation[]> {
        const request = createSearchOrgUnitLocationsInput(context.queryResultSettings, orgUnitLocationSearchCriteria, );
        return executeAction<OrgUnitLocation[]>(request, context);
    }          
          
    export function createGetOrgUnitConfigurationInput(): IDataServiceRequest {      
        const query = orgUnitsQuery();
        return query.createDataServiceRequestForOperation('GetOrgUnitConfiguration', true, ChannelConfigurationClass, 'false', { bypassCache: 'none', returnEntity: 'ChannelConfiguration'}, { });
    }    
    
    export function getOrgUnitConfigurationAsync(context: IContext):AsyncResult<ChannelConfiguration> {
        const request = createGetOrgUnitConfigurationInput();
        return executeAction<ChannelConfiguration>(request, context);
    }          
          
    export function createGetStoreHoursInput(storeNumber: string | null): IDataServiceRequest {      
        const query = orgUnitsQuery();
        return query.createDataServiceRequestForOperation('GetStoreHours', false, StoreHoursClass, 'false', { bypassCache: 'none', returnEntity: 'StoreHours'}, {storeNumber: storeNumber });
    }    
    
    export function getStoreHoursAsync(context: IContext, storeNumber: string | null):AsyncResult<StoreHours> {
        const request = createGetStoreHoursInput(storeNumber, );
        return executeAction<StoreHours>(request, context);
    }          
          
    export function createGetAvailableInventoryInput(queryResultSettings: IQueryResultSettings, itemId: string | null, variantId: string | null, barcode: string | null): IDataServiceRequest {      
        const query = orgUnitsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetAvailableInventory', true, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability'}, {itemId: itemId, variantId: variantId, barcode: barcode });
    }    
    
    export function getAvailableInventoryAsync(context: IContext, itemId: string | null, variantId: string | null, barcode: string | null):AsyncResult<OrgUnitAvailability[]> {
        const request = createGetAvailableInventoryInput(context.queryResultSettings, itemId, variantId, barcode, );
        return executeAction<OrgUnitAvailability[]>(request, context);
    }          
          
    export function createGetAvailableInventoryNearbyInput(queryResultSettings: IQueryResultSettings, itemIds: ItemUnit[] | null, searchArea: SearchArea | null): IDataServiceRequest {      
        const query = orgUnitsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetAvailableInventoryNearby', true, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability'}, {itemIds: itemIds, searchArea: searchArea });
    }    
    
    export function getAvailableInventoryNearbyAsync(context: IContext, itemIds: ItemUnit[] | null, searchArea: SearchArea | null):AsyncResult<OrgUnitAvailability[]> {
        const request = createGetAvailableInventoryNearbyInput(context.queryResultSettings, itemIds, searchArea, );
        return executeAction<OrgUnitAvailability[]>(request, context);
    }          
          
    export function createGetProductAvailabilityByDimensionsInput(queryResultSettings: IQueryResultSettings, inventLocationIds: string[] | null, productId: number, productDimensionCombinations: ProductDimensionCombination[] | null): IDataServiceRequest {      
        const query = orgUnitsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetProductAvailabilityByDimensions', true, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability'}, {inventLocationIds: inventLocationIds, productId: productId, productDimensionCombinations: productDimensionCombinations });
    }    
    
    export function getProductAvailabilityByDimensionsAsync(context: IContext, inventLocationIds: string[] | null, productId: number, productDimensionCombinations: ProductDimensionCombination[] | null):AsyncResult<OrgUnitAvailability[]> {
        const request = createGetProductAvailabilityByDimensionsInput(context.queryResultSettings, inventLocationIds, productId, productDimensionCombinations, );
        return executeAction<OrgUnitAvailability[]>(request, context);
    }          
          
    export function createSearchProductAvailabilityInput(queryResultSettings: IQueryResultSettings, productId: number, orgUnitAvailabilitySearchCriteria: OrgUnitAvailabilitySearchCriteria | null): IDataServiceRequest {      
        const query = orgUnitsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchProductAvailability', true, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability'}, {productId: productId, orgUnitAvailabilitySearchCriteria: orgUnitAvailabilitySearchCriteria });
    }    
    
    export function searchProductAvailabilityAsync(context: IContext, productId: number, orgUnitAvailabilitySearchCriteria: OrgUnitAvailabilitySearchCriteria | null):AsyncResult<OrgUnitAvailability[]> {
        const request = createSearchProductAvailabilityInput(context.queryResultSettings, productId, orgUnitAvailabilitySearchCriteria, );
        return executeAction<OrgUnitAvailability[]>(request, context);
    }          
          
    export function createGetTerminalInfoInput(queryResultSettings: IQueryResultSettings, orgUnitNumber: string, deviceType: number): IDataServiceRequest {      
        const query = orgUnitsQuery(orgUnitNumber).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetTerminalInfo', false, TerminalInfoClass, 'true', { bypassCache: 'none', returnEntity: 'TerminalInfo'}, {deviceType: deviceType });
    }    
    
    export function getTerminalInfoAsync(context: IContext, orgUnitNumber: string, deviceType: number):AsyncResult<TerminalInfo[]> {
        const request = createGetTerminalInfoInput(context.queryResultSettings, orgUnitNumber, deviceType, );
        return executeAction<TerminalInfo[]>(request, context);
    }          
          
    export function createGetProductAvailabilityInput(queryResultSettings: IQueryResultSettings, productId: number): IDataServiceRequest {      
        const query = orgUnitsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetProductAvailability', false, OrgUnitAvailabilityClass, 'true', { bypassCache: 'none', returnEntity: 'OrgUnitAvailability'}, {productId: productId });
    }    
    
    export function getProductAvailabilityAsync(context: IContext, productId: number):AsyncResult<OrgUnitAvailability[]> {
        const request = createGetProductAvailabilityInput(context.queryResultSettings, productId, );
        return executeAction<OrgUnitAvailability[]>(request, context);
    }          
          
    