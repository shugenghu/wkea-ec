    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { InventoryInboundOutboundDocument, InventoryDocumentLineFilterCriteria, InventoryDocumentUpdateLinesAction, InventoryDocumentLineOperationResultSettings, InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult, InventoryInboundOutboundDocumentLine, InventoryDocumentSerialNumberLineSearchCriteria, InventoryDocumentSerialNumberLine, InventoryDocumentValidationResultSummary, InventoryDocumentValidationResultSearchCriteria, InventoryDocumentValidationResultLine, InventoryDocumentSearchCriteria, InventoryDocumentLineSearchCriteria, InventoryDocumentSerialNumberLineResetAction, InventoryDocumentSerialNumberLineUpdateAction, InventoryInboundOutboundDocumentLinesSummary, InventoryDocumentSerialNumberLinesSummary } from '../Entities/CommerceTypes.g';
    import { InventoryInboundOutboundDocumentClass, InventoryInboundOutboundDocumentUpdateLinesByCriteriaResultClass, InventoryInboundOutboundDocumentLineClass, InventoryDocumentSerialNumberLineClass, InventoryDocumentValidationResultSummaryClass, InventoryDocumentValidationResultLineClass, InventoryInboundOutboundDocumentLinesSummaryClass, InventoryDocumentSerialNumberLinesSummaryClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function inventoryInboundOutboundDocumentsQuery(workDocumentId?: string): DataServiceQuery {
      var key = (workDocumentId) ? { WorkDocumentId: workDocumentId } : null;
      return new DataServiceQuery("InventoryInboundOutboundDocuments", "InventoryInboundOutboundDocument", InventoryInboundOutboundDocumentClass, key);
    }
    
    export function createCreateInput(entity: InventoryInboundOutboundDocument): IDataServiceRequest {
        return inventoryInboundOutboundDocumentsQuery().create(entity);
    }
    export function createInventoryInboundOutboundDocumentAsync(context: IContext, entity: InventoryInboundOutboundDocument): AsyncResult<InventoryInboundOutboundDocument> {
        const request = createCreateInput(entity, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }
    export function createUpdateInput(entity: InventoryInboundOutboundDocument): IDataServiceRequest {
        return inventoryInboundOutboundDocumentsQuery(entity.WorkDocumentId).update(entity);
    }
    export function updateAsync(context: IContext, entity: InventoryInboundOutboundDocument): AsyncResult<InventoryInboundOutboundDocument> {
        const request = createUpdateInput(entity, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }
    export function createDeleteAsync(entity: InventoryInboundOutboundDocument): IDataServiceRequest {
        return inventoryInboundOutboundDocumentsQuery(entity.WorkDocumentId).delete();
    }
    export function deleteAsync(context: IContext, entity: InventoryInboundOutboundDocument): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(workDocumentId: string): IDataServiceRequest {
        return inventoryInboundOutboundDocumentsQuery(workDocumentId).read();
    }
    export function readAsync(context: IContext, workDocumentId: string): AsyncResult<InventoryInboundOutboundDocument> {
        const request = createReadAsync(workDocumentId, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<InventoryInboundOutboundDocument[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<InventoryInboundOutboundDocument[]>(request, context);
    }
    
    export function createUpdateStatusInput(workDocumentId: string, documentStatus: number, documentVersion: number | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('UpdateStatus', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentStatus: documentStatus, documentVersion: documentVersion });
    }    
    
    export function updateStatusAsync(context: IContext, workDocumentId: string, documentStatus: number, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {
        const request = createUpdateStatusInput(workDocumentId, documentStatus, documentVersion, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }          
          
    export function createUpdateLinesByCriteriaInput(workDocumentId: string, filterCriteria: InventoryDocumentLineFilterCriteria | null, updateLinesAction: InventoryDocumentUpdateLinesAction | null, returnUpdatedLinesPolicy: InventoryDocumentLineOperationResultSettings | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('UpdateLinesByCriteria', true, InventoryInboundOutboundDocumentUpdateLinesByCriteriaResultClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult'}, {filterCriteria: filterCriteria, updateLinesAction: updateLinesAction, returnUpdatedLinesPolicy: returnUpdatedLinesPolicy });
    }    
    
    export function updateLinesByCriteriaAsync(context: IContext, workDocumentId: string, filterCriteria: InventoryDocumentLineFilterCriteria | null, updateLinesAction: InventoryDocumentUpdateLinesAction | null, returnUpdatedLinesPolicy: InventoryDocumentLineOperationResultSettings | null):AsyncResult<InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult> {
        const request = createUpdateLinesByCriteriaInput(workDocumentId, filterCriteria, updateLinesAction, returnUpdatedLinesPolicy, );
        return executeAction<InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult>(request, context);
    }          
          
    export function createUpdateLineInput(workDocumentId: string, documentLine: InventoryInboundOutboundDocumentLine | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('UpdateLine', true, InventoryInboundOutboundDocumentLineClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocumentLine'}, {documentLine: documentLine });
    }    
    
    export function updateLineAsync(context: IContext, workDocumentId: string, documentLine: InventoryInboundOutboundDocumentLine | null):AsyncResult<InventoryInboundOutboundDocumentLine> {
        const request = createUpdateLineInput(workDocumentId, documentLine, );
        return executeAction<InventoryInboundOutboundDocumentLine>(request, context);
    }          
          
    export function createUpdateWorkingTerminalInput(workDocumentId: string, documentVersion: number | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('UpdateWorkingTerminal', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentVersion: documentVersion });
    }    
    
    export function updateWorkingTerminalAsync(context: IContext, workDocumentId: string, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {
        const request = createUpdateWorkingTerminalInput(workDocumentId, documentVersion, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }          
          
    export function createUpdateNoteInput(workDocumentId: string, documentNote: string | null, documentVersion: number | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('UpdateNote', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentNote: documentNote, documentVersion: documentVersion });
    }    
    
    export function updateNoteAsync(context: IContext, workDocumentId: string, documentNote: string | null, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {
        const request = createUpdateNoteInput(workDocumentId, documentNote, documentVersion, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }          
          
    export function createUpdateReceiptIdInput(workDocumentId: string, documentReceiptId: string | null, documentVersion: number | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('UpdateReceiptId', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentReceiptId: documentReceiptId, documentVersion: documentVersion });
    }    
    
    export function updateReceiptIdAsync(context: IContext, workDocumentId: string, documentReceiptId: string | null, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {
        const request = createUpdateReceiptIdInput(workDocumentId, documentReceiptId, documentVersion, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }          
          
    export function createCommitInput(workDocumentId: string, documentVersion: number | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('Commit', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {documentVersion: documentVersion });
    }    
    
    export function commitAsync(context: IContext, workDocumentId: string, documentVersion: number | null):AsyncResult<InventoryInboundOutboundDocument> {
        const request = createCommitInput(workDocumentId, documentVersion, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }          
          
    export function createRefreshOperationStatusInput(workDocumentId: string): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('RefreshOperationStatus', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, { });
    }    
    
    export function refreshOperationStatusAsync(context: IContext, workDocumentId: string):AsyncResult<InventoryInboundOutboundDocument> {
        const request = createRefreshOperationStatusInput(workDocumentId, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }          
          
    export function createStartInput(sourceDocumentId: string | null, sourceDocumentType: number): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery();
        return query.createDataServiceRequestForOperation('Start', true, InventoryInboundOutboundDocumentClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocument'}, {sourceDocumentId: sourceDocumentId, sourceDocumentType: sourceDocumentType });
    }    
    
    export function startAsync(context: IContext, sourceDocumentId: string | null, sourceDocumentType: number):AsyncResult<InventoryInboundOutboundDocument> {
        const request = createStartInput(sourceDocumentId, sourceDocumentType, );
        return executeAction<InventoryInboundOutboundDocument>(request, context);
    }          
          
    export function createAddLineInput(workDocumentId: string, documentLine: InventoryInboundOutboundDocumentLine | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('AddLine', true, InventoryInboundOutboundDocumentLineClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryInboundOutboundDocumentLine'}, {documentLine: documentLine });
    }    
    
    export function addLineAsync(context: IContext, workDocumentId: string, documentLine: InventoryInboundOutboundDocumentLine | null):AsyncResult<InventoryInboundOutboundDocumentLine> {
        const request = createAddLineInput(workDocumentId, documentLine, );
        return executeAction<InventoryInboundOutboundDocumentLine>(request, context);
    }          
          
    export function createDeleteLineInput(workDocumentId: string, documentLineId: string | null, documentLineVersion: number | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('DeleteLine', true, '', '', { bypassCache: 'get', returnEntity: ''}, {documentLineId: documentLineId, documentLineVersion: documentLineVersion });
    }    
    
    export function deleteLineAsync(context: IContext, workDocumentId: string, documentLineId: string | null, documentLineVersion: number | null):AsyncResult<NullResult> {
        const request = createDeleteLineInput(workDocumentId, documentLineId, documentLineVersion, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createSearchSerialNumberLinesInput(queryResultSettings: IQueryResultSettings, workDocumentId: string, searchCriteria: InventoryDocumentSerialNumberLineSearchCriteria | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchSerialNumberLines', true, InventoryDocumentSerialNumberLineClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryDocumentSerialNumberLine'}, {searchCriteria: searchCriteria });
    }    
    
    export function searchSerialNumberLinesAsync(context: IContext, workDocumentId: string, searchCriteria: InventoryDocumentSerialNumberLineSearchCriteria | null):AsyncResult<InventoryDocumentSerialNumberLine[]> {
        const request = createSearchSerialNumberLinesInput(context.queryResultSettings, workDocumentId, searchCriteria, );
        return executeAction<InventoryDocumentSerialNumberLine[]>(request, context);
    }          
          
    export function createValidateInput(workDocumentId: string, documentVersion: number | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('Validate', true, InventoryDocumentValidationResultSummaryClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryDocumentValidationResultSummary'}, {documentVersion: documentVersion });
    }    
    
    export function validateAsync(context: IContext, workDocumentId: string, documentVersion: number | null):AsyncResult<InventoryDocumentValidationResultSummary> {
        const request = createValidateInput(workDocumentId, documentVersion, );
        return executeAction<InventoryDocumentValidationResultSummary>(request, context);
    }          
          
    export function createSearchValidationResultLinesInput(queryResultSettings: IQueryResultSettings, searchCriteria: InventoryDocumentValidationResultSearchCriteria | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchValidationResultLines', true, InventoryDocumentValidationResultLineClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryDocumentValidationResultLine'}, {searchCriteria: searchCriteria });
    }    
    
    export function searchValidationResultLinesAsync(context: IContext, searchCriteria: InventoryDocumentValidationResultSearchCriteria | null):AsyncResult<InventoryDocumentValidationResultLine[]> {
        const request = createSearchValidationResultLinesInput(context.queryResultSettings, searchCriteria, );
        return executeAction<InventoryDocumentValidationResultLine[]>(request, context);
    }          
          
    export function createSyncSourceDocumentInput(sourceDocumentId: string | null, sourceDocumentType: number): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery();
        return query.createDataServiceRequestForOperation('SyncSourceDocument', true, '', '', { bypassCache: 'get', returnEntity: ''}, {sourceDocumentId: sourceDocumentId, sourceDocumentType: sourceDocumentType });
    }    
    
    export function syncSourceDocumentAsync(context: IContext, sourceDocumentId: string | null, sourceDocumentType: number):AsyncResult<NullResult> {
        const request = createSyncSourceDocumentInput(sourceDocumentId, sourceDocumentType, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createSearchInboundDocumentsInput(queryResultSettings: IQueryResultSettings, searchCriteria: InventoryDocumentSearchCriteria | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchInboundDocuments', true, InventoryInboundOutboundDocumentClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryInboundOutboundDocument'}, {searchCriteria: searchCriteria });
    }    
    
    export function searchInboundDocumentsAsync(context: IContext, searchCriteria: InventoryDocumentSearchCriteria | null):AsyncResult<InventoryInboundOutboundDocument[]> {
        const request = createSearchInboundDocumentsInput(context.queryResultSettings, searchCriteria, );
        return executeAction<InventoryInboundOutboundDocument[]>(request, context);
    }          
          
    export function createSearchOutboundDocumentsInput(queryResultSettings: IQueryResultSettings, searchCriteria: InventoryDocumentSearchCriteria | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchOutboundDocuments', true, InventoryInboundOutboundDocumentClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryInboundOutboundDocument'}, {searchCriteria: searchCriteria });
    }    
    
    export function searchOutboundDocumentsAsync(context: IContext, searchCriteria: InventoryDocumentSearchCriteria | null):AsyncResult<InventoryInboundOutboundDocument[]> {
        const request = createSearchOutboundDocumentsInput(context.queryResultSettings, searchCriteria, );
        return executeAction<InventoryInboundOutboundDocument[]>(request, context);
    }          
          
    export function createSearchLinesInput(queryResultSettings: IQueryResultSettings, searchCriteria: InventoryDocumentLineSearchCriteria | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchLines', true, InventoryInboundOutboundDocumentLineClass, 'true', { bypassCache: 'none', returnEntity: 'InventoryInboundOutboundDocumentLine'}, {searchCriteria: searchCriteria });
    }    
    
    export function searchLinesAsync(context: IContext, searchCriteria: InventoryDocumentLineSearchCriteria | null):AsyncResult<InventoryInboundOutboundDocumentLine[]> {
        const request = createSearchLinesInput(context.queryResultSettings, searchCriteria, );
        return executeAction<InventoryInboundOutboundDocumentLine[]>(request, context);
    }          
          
    export function createResetSerialNumberLineInput(workDocumentId: string, resetSerialNumberLineAction: InventoryDocumentSerialNumberLineResetAction | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('ResetSerialNumberLine', true, InventoryDocumentSerialNumberLineClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryDocumentSerialNumberLine'}, {resetSerialNumberLineAction: resetSerialNumberLineAction });
    }    
    
    export function resetSerialNumberLineAsync(context: IContext, workDocumentId: string, resetSerialNumberLineAction: InventoryDocumentSerialNumberLineResetAction | null):AsyncResult<InventoryDocumentSerialNumberLine> {
        const request = createResetSerialNumberLineInput(workDocumentId, resetSerialNumberLineAction, );
        return executeAction<InventoryDocumentSerialNumberLine>(request, context);
    }          
          
    export function createUpdateSerialNumberLineInput(workDocumentId: string, updateSerialNumberLineAction: InventoryDocumentSerialNumberLineUpdateAction | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('UpdateSerialNumberLine', true, InventoryDocumentSerialNumberLineClass, 'false', { bypassCache: 'get', returnEntity: 'InventoryDocumentSerialNumberLine'}, {updateSerialNumberLineAction: updateSerialNumberLineAction });
    }    
    
    export function updateSerialNumberLineAsync(context: IContext, workDocumentId: string, updateSerialNumberLineAction: InventoryDocumentSerialNumberLineUpdateAction | null):AsyncResult<InventoryDocumentSerialNumberLine> {
        const request = createUpdateSerialNumberLineInput(workDocumentId, updateSerialNumberLineAction, );
        return executeAction<InventoryDocumentSerialNumberLine>(request, context);
    }          
          
    export function createGetLinesSummaryInput(workDocumentId: string): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('GetLinesSummary', false, InventoryInboundOutboundDocumentLinesSummaryClass, 'false', { bypassCache: 'none', returnEntity: 'InventoryInboundOutboundDocumentLinesSummary'}, { });
    }    
    
    export function getLinesSummaryAsync(context: IContext, workDocumentId: string):AsyncResult<InventoryInboundOutboundDocumentLinesSummary> {
        const request = createGetLinesSummaryInput(workDocumentId, );
        return executeAction<InventoryInboundOutboundDocumentLinesSummary>(request, context);
    }          
          
    export function createGetSerialNumberLinesSummaryInput(workDocumentId: string, documentLineId: string | null): IDataServiceRequest {      
        const query = inventoryInboundOutboundDocumentsQuery(workDocumentId);
        return query.createDataServiceRequestForOperation('GetSerialNumberLinesSummary', false, InventoryDocumentSerialNumberLinesSummaryClass, 'false', { bypassCache: 'none', returnEntity: 'InventoryDocumentSerialNumberLinesSummary'}, {documentLineId: documentLineId });
    }    
    
    export function getSerialNumberLinesSummaryAsync(context: IContext, workDocumentId: string, documentLineId: string | null):AsyncResult<InventoryDocumentSerialNumberLinesSummary> {
        const request = createGetSerialNumberLinesSummaryInput(workDocumentId, documentLineId, );
        return executeAction<InventoryDocumentSerialNumberLinesSummary>(request, context);
    }          
          
    