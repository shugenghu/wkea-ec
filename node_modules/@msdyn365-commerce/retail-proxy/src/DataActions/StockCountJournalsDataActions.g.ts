    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { StockCountJournal, StockCountJournalTransaction } from '../Entities/CommerceTypes.g';
    import { StockCountJournalClass, StockCountJournalTransactionClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function stockCountJournalsQuery(journalId?: string): DataServiceQuery {
      var key = (journalId) ? { JournalId: journalId } : null;
      return new DataServiceQuery("StockCountJournals", "StockCountJournal", StockCountJournalClass, key);
    }
    
    export function createCreateInput(entity: StockCountJournal): IDataServiceRequest {
        return stockCountJournalsQuery().create(entity);
    }
    export function createStockCountJournalAsync(context: IContext, entity: StockCountJournal): AsyncResult<StockCountJournal> {
        const request = createCreateInput(entity, );
        return executeAction<StockCountJournal>(request, context);
    }
    export function createUpdateInput(entity: StockCountJournal): IDataServiceRequest {
        return stockCountJournalsQuery(entity.JournalId).update(entity);
    }
    export function updateAsync(context: IContext, entity: StockCountJournal): AsyncResult<StockCountJournal> {
        const request = createUpdateInput(entity, );
        return executeAction<StockCountJournal>(request, context);
    }
    export function createDeleteAsync(entity: StockCountJournal): IDataServiceRequest {
        return stockCountJournalsQuery(entity.JournalId).delete();
    }
    export function deleteAsync(context: IContext, entity: StockCountJournal): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(journalId: string): IDataServiceRequest {
        return stockCountJournalsQuery(journalId).read();
    }
    export function readAsync(context: IContext, journalId: string): AsyncResult<StockCountJournal> {
        const request = createReadAsync(journalId, );
        return executeAction<StockCountJournal>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return stockCountJournalsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<StockCountJournal[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<StockCountJournal[]>(request, context);
    }
    
    export function createSyncInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      
        const query = stockCountJournalsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('Sync', true, StockCountJournalClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournal'}, { });
    }    
    
    export function syncAsync(context: IContext):AsyncResult<StockCountJournal[]> {
        const request = createSyncInput(context.queryResultSettings, );
        return executeAction<StockCountJournal[]>(request, context);
    }          
          
    export function createSyncTransactionsInput(queryResultSettings: IQueryResultSettings, journalId: string): IDataServiceRequest {      
        const query = stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SyncTransactions', true, StockCountJournalTransactionClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournalTransaction'}, { });
    }    
    
    export function syncTransactionsAsync(context: IContext, journalId: string):AsyncResult<StockCountJournalTransaction[]> {
        const request = createSyncTransactionsInput(context.queryResultSettings, journalId, );
        return executeAction<StockCountJournalTransaction[]>(request, context);
    }          
          
    export function createCalculateEstimatedOnHandInventoryInput(queryResultSettings: IQueryResultSettings, journalId: string): IDataServiceRequest {      
        const query = stockCountJournalsQuery(journalId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('CalculateEstimatedOnHandInventory', true, StockCountJournalTransactionClass, 'true', { bypassCache: 'get', returnEntity: 'StockCountJournalTransaction'}, { });
    }    
    
    export function calculateEstimatedOnHandInventoryAsync(context: IContext, journalId: string):AsyncResult<StockCountJournalTransaction[]> {
        const request = createCalculateEstimatedOnHandInventoryInput(context.queryResultSettings, journalId, );
        return executeAction<StockCountJournalTransaction[]>(request, context);
    }          
          
    export function createRemoveJournalInput(journalId: string): IDataServiceRequest {      
        const query = stockCountJournalsQuery(journalId);
        return query.createDataServiceRequestForOperation('RemoveJournal', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });
    }    
    
    export function removeJournalAsync(context: IContext, journalId: string):AsyncResult<NullResult> {
        const request = createRemoveJournalInput(journalId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createRemoveTransactionInput(journalId: string, itemId: string | null, inventSizeId: string | null, inventColorId: string | null, inventStyleId: string | null, configurationId: string | null): IDataServiceRequest {      
        const query = stockCountJournalsQuery(journalId);
        return query.createDataServiceRequestForOperation('RemoveTransaction', true, '', '', { bypassCache: 'get', returnEntity: ''}, {itemId: itemId, inventSizeId: inventSizeId, inventColorId: inventColorId, inventStyleId: inventStyleId, configurationId: configurationId });
    }    
    
    export function removeTransactionAsync(context: IContext, journalId: string, itemId: string | null, inventSizeId: string | null, inventColorId: string | null, inventStyleId: string | null, configurationId: string | null):AsyncResult<NullResult> {
        const request = createRemoveTransactionInput(journalId, itemId, inventSizeId, inventColorId, inventStyleId, configurationId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createRemoveStockCountLineByLineIdInput(journalId: string, stockCountLineId: number): IDataServiceRequest {      
        const query = stockCountJournalsQuery(journalId);
        return query.createDataServiceRequestForOperation('RemoveStockCountLineByLineId', true, '', '', { bypassCache: 'get', returnEntity: ''}, {stockCountLineId: stockCountLineId });
    }    
    
    export function removeStockCountLineByLineIdAsync(context: IContext, journalId: string, stockCountLineId: number):AsyncResult<NullResult> {
        const request = createRemoveStockCountLineByLineIdInput(journalId, stockCountLineId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createRemoveStockCountLineByProductRecIdInput(journalId: string, productId: number): IDataServiceRequest {      
        const query = stockCountJournalsQuery(journalId);
        return query.createDataServiceRequestForOperation('RemoveStockCountLineByProductRecId', true, '', '', { bypassCache: 'get', returnEntity: ''}, {productId: productId });
    }    
    
    export function removeStockCountLineByProductRecIdAsync(context: IContext, journalId: string, productId: number):AsyncResult<NullResult> {
        const request = createRemoveStockCountLineByProductRecIdInput(journalId, productId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createCommitInput(journalId: string): IDataServiceRequest {      
        const query = stockCountJournalsQuery(journalId);
        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });
    }    
    
    export function commitAsync(context: IContext, journalId: string):AsyncResult<NullResult> {
        const request = createCommitInput(journalId, );
        return executeAction<NullResult>(request, context);
    }          
          
    