    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { SalesOrderContextualOperationsMap, OrderSearchCriteria, FulfillmentLineSearchCriteria, FulfillmentLineContextualOperationsMap } from '../Entities/CommerceTypes.g';
    import { SalesOrderContextualOperationsMapClass, FulfillmentLineContextualOperationsMapClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function applicableOperationsQuery(id?: string): DataServiceQuery {
      var key = (id) ? { Id: id } : null;
      return new DataServiceQuery("ApplicableOperations", "SalesOrderContextualOperationsMap", SalesOrderContextualOperationsMapClass, key);
    }
    
    export function createCreateInput(entity: SalesOrderContextualOperationsMap): IDataServiceRequest {
        return applicableOperationsQuery().create(entity);
    }
    export function createSalesOrderContextualOperationsMapAsync(context: IContext, entity: SalesOrderContextualOperationsMap): AsyncResult<SalesOrderContextualOperationsMap> {
        const request = createCreateInput(entity, );
        return executeAction<SalesOrderContextualOperationsMap>(request, context);
    }
    export function createUpdateInput(entity: SalesOrderContextualOperationsMap): IDataServiceRequest {
        return applicableOperationsQuery(entity.Id).update(entity);
    }
    export function updateAsync(context: IContext, entity: SalesOrderContextualOperationsMap): AsyncResult<SalesOrderContextualOperationsMap> {
        const request = createUpdateInput(entity, );
        return executeAction<SalesOrderContextualOperationsMap>(request, context);
    }
    export function createDeleteAsync(entity: SalesOrderContextualOperationsMap): IDataServiceRequest {
        return applicableOperationsQuery(entity.Id).delete();
    }
    export function deleteAsync(context: IContext, entity: SalesOrderContextualOperationsMap): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(id: string): IDataServiceRequest {
        return applicableOperationsQuery(id).read();
    }
    export function readAsync(context: IContext, id: string): AsyncResult<SalesOrderContextualOperationsMap> {
        const request = createReadAsync(id, );
        return executeAction<SalesOrderContextualOperationsMap>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return applicableOperationsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<SalesOrderContextualOperationsMap[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<SalesOrderContextualOperationsMap[]>(request, context);
    }
    
    export function createGetOrdersInput(queryResultSettings: IQueryResultSettings, orderSearchCriteria: OrderSearchCriteria | null): IDataServiceRequest {      
        const query = applicableOperationsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetOrders', true, SalesOrderContextualOperationsMapClass, 'true', { bypassCache: 'none', returnEntity: 'SalesOrderContextualOperationsMap'}, {orderSearchCriteria: orderSearchCriteria });
    }    
    
    export function getOrdersAsync(context: IContext, orderSearchCriteria: OrderSearchCriteria | null):AsyncResult<SalesOrderContextualOperationsMap[]> {
        const request = createGetOrdersInput(context.queryResultSettings, orderSearchCriteria, );
        return executeAction<SalesOrderContextualOperationsMap[]>(request, context);
    }          
          
    export function createGetFulfillmentLinesInput(queryResultSettings: IQueryResultSettings, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null): IDataServiceRequest {      
        const query = applicableOperationsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetFulfillmentLines', true, FulfillmentLineContextualOperationsMapClass, 'true', { bypassCache: 'none', returnEntity: 'FulfillmentLineContextualOperationsMap'}, {fulfillmentLineSearchCriteria: fulfillmentLineSearchCriteria });
    }    
    
    export function getFulfillmentLinesAsync(context: IContext, fulfillmentLineSearchCriteria: FulfillmentLineSearchCriteria | null):AsyncResult<FulfillmentLineContextualOperationsMap[]> {
        const request = createGetFulfillmentLinesInput(context.queryResultSettings, fulfillmentLineSearchCriteria, );
        return executeAction<FulfillmentLineContextualOperationsMap[]>(request, context);
    }          
          
    