    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { BusinessPartner, BusinessPartnerProspect, BusinessPartnerUser } from '../Entities/CommerceTypes.g';
    import { BusinessPartnerClass, BusinessPartnerProspectClass, BusinessPartnerUserClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function businessPartnersQuery(businessPartnerId?: string): DataServiceQuery {
      var key = (businessPartnerId) ? { BusinessPartnerId: businessPartnerId } : null;
      return new DataServiceQuery("BusinessPartners", "BusinessPartner", BusinessPartnerClass, key);
    }
    
    export function createCreateInput(entity: BusinessPartner): IDataServiceRequest {
        return businessPartnersQuery().create(entity);
    }
    export function createBusinessPartnerAsync(context: IContext, entity: BusinessPartner): AsyncResult<BusinessPartner> {
        const request = createCreateInput(entity, );
        return executeAction<BusinessPartner>(request, context);
    }
    export function createUpdateInput(entity: BusinessPartner): IDataServiceRequest {
        return businessPartnersQuery(entity.BusinessPartnerId).update(entity);
    }
    export function updateAsync(context: IContext, entity: BusinessPartner): AsyncResult<BusinessPartner> {
        const request = createUpdateInput(entity, );
        return executeAction<BusinessPartner>(request, context);
    }
    export function createDeleteAsync(entity: BusinessPartner): IDataServiceRequest {
        return businessPartnersQuery(entity.BusinessPartnerId).delete();
    }
    export function deleteAsync(context: IContext, entity: BusinessPartner): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(businessPartnerId: string): IDataServiceRequest {
        return businessPartnersQuery(businessPartnerId).read();
    }
    export function readAsync(context: IContext, businessPartnerId: string): AsyncResult<BusinessPartner> {
        const request = createReadAsync(businessPartnerId, );
        return executeAction<BusinessPartner>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return businessPartnersQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<BusinessPartner[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<BusinessPartner[]>(request, context);
    }
    
    export function createCreateProspectInput(businessPartnerProspect: BusinessPartnerProspect | null): IDataServiceRequest {      
        const query = businessPartnersQuery();
        return query.createDataServiceRequestForOperation('CreateProspect', true, BusinessPartnerProspectClass, 'false', { bypassCache: 'get', returnEntity: 'BusinessPartnerProspect'}, {businessPartnerProspect: businessPartnerProspect });
    }    
    
    export function createProspectAsync(context: IContext, businessPartnerProspect: BusinessPartnerProspect | null):AsyncResult<BusinessPartnerProspect> {
        const request = createCreateProspectInput(businessPartnerProspect, );
        return executeAction<BusinessPartnerProspect>(request, context);
    }          
          
    export function createGetCurrentInput(): IDataServiceRequest {      
        const query = businessPartnersQuery();
        return query.createDataServiceRequestForOperation('GetCurrent', false, BusinessPartnerClass, 'false', { bypassCache: 'none', returnEntity: 'BusinessPartner'}, { });
    }    
    
    export function getCurrentAsync(context: IContext):AsyncResult<BusinessPartner> {
        const request = createGetCurrentInput();
        return executeAction<BusinessPartner>(request, context);
    }          
          
    export function createGetUsersInput(queryResultSettings: IQueryResultSettings, businessPartnerId: string): IDataServiceRequest {      
        const query = businessPartnersQuery(businessPartnerId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetUsers', false, BusinessPartnerUserClass, 'true', { bypassCache: 'none', returnEntity: 'BusinessPartnerUser'}, { });
    }    
    
    export function getUsersAsync(context: IContext, businessPartnerId: string):AsyncResult<BusinessPartnerUser[]> {
        const request = createGetUsersInput(context.queryResultSettings, businessPartnerId, );
        return executeAction<BusinessPartnerUser[]>(request, context);
    }          
          
    