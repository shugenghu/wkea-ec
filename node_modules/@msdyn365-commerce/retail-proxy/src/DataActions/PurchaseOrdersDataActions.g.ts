    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { PurchaseOrder } from '../Entities/CommerceTypes.g';
    import { PurchaseOrderClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function purchaseOrdersQuery(orderId?: string): DataServiceQuery {
      var key = (orderId) ? { OrderId: orderId } : null;
      return new DataServiceQuery("PurchaseOrders", "PurchaseOrder", PurchaseOrderClass, key);
    }
    
    export function createCreateInput(entity: PurchaseOrder): IDataServiceRequest {
        return purchaseOrdersQuery().create(entity);
    }
    export function createPurchaseOrderAsync(context: IContext, entity: PurchaseOrder): AsyncResult<PurchaseOrder> {
        const request = createCreateInput(entity, );
        return executeAction<PurchaseOrder>(request, context);
    }
    export function createUpdateInput(entity: PurchaseOrder): IDataServiceRequest {
        return purchaseOrdersQuery(entity.OrderId).update(entity);
    }
    export function updateAsync(context: IContext, entity: PurchaseOrder): AsyncResult<PurchaseOrder> {
        const request = createUpdateInput(entity, );
        return executeAction<PurchaseOrder>(request, context);
    }
    export function createDeleteAsync(entity: PurchaseOrder): IDataServiceRequest {
        return purchaseOrdersQuery(entity.OrderId).delete();
    }
    export function deleteAsync(context: IContext, entity: PurchaseOrder): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(orderId: string): IDataServiceRequest {
        return purchaseOrdersQuery(orderId).read();
    }
    export function readAsync(context: IContext, orderId: string): AsyncResult<PurchaseOrder> {
        const request = createReadAsync(orderId, );
        return executeAction<PurchaseOrder>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return purchaseOrdersQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<PurchaseOrder[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<PurchaseOrder[]>(request, context);
    }
    
    export function createCommitInput(orderId: string): IDataServiceRequest {      
        const query = purchaseOrdersQuery(orderId);
        return query.createDataServiceRequestForOperation('Commit', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });
    }    
    
    export function commitAsync(context: IContext, orderId: string):AsyncResult<NullResult> {
        const request = createCommitInput(orderId, );
        return executeAction<NullResult>(request, context);
    }          
          
    