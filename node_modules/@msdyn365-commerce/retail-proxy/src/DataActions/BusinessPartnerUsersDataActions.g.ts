    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { BusinessPartnerUser } from '../Entities/CommerceTypes.g';
    import { BusinessPartnerUserClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function businessPartnerUsersQuery(email?: string): DataServiceQuery {
      var key = (email) ? { Email: email } : null;
      return new DataServiceQuery("BusinessPartnerUsers", "BusinessPartnerUser", BusinessPartnerUserClass, key);
    }
    
    export function createCreateInput(entity: BusinessPartnerUser): IDataServiceRequest {
        return businessPartnerUsersQuery().create(entity);
    }
    export function createBusinessPartnerUserAsync(context: IContext, entity: BusinessPartnerUser): AsyncResult<BusinessPartnerUser> {
        const request = createCreateInput(entity, );
        return executeAction<BusinessPartnerUser>(request, context);
    }
    export function createUpdateInput(entity: BusinessPartnerUser): IDataServiceRequest {
        return businessPartnerUsersQuery(entity.Email).update(entity);
    }
    export function updateAsync(context: IContext, entity: BusinessPartnerUser): AsyncResult<BusinessPartnerUser> {
        const request = createUpdateInput(entity, );
        return executeAction<BusinessPartnerUser>(request, context);
    }
    export function createDeleteAsync(entity: BusinessPartnerUser): IDataServiceRequest {
        return businessPartnerUsersQuery(entity.Email).delete();
    }
    export function deleteAsync(context: IContext, entity: BusinessPartnerUser): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(email: string): IDataServiceRequest {
        return businessPartnerUsersQuery(email).read();
    }
    export function readAsync(context: IContext, email: string): AsyncResult<BusinessPartnerUser> {
        const request = createReadAsync(email, );
        return executeAction<BusinessPartnerUser>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return businessPartnerUsersQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<BusinessPartnerUser[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<BusinessPartnerUser[]>(request, context);
    }
    
    