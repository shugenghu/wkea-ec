    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { Recommendation, RecommendationCriteria, RecommendedElement } from '../Entities/CommerceTypes.g';
    import { RecommendationClass, RecommendedElementClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function recommendationsQuery(id?: string): DataServiceQuery {
      var key = (id) ? { Id: id } : null;
      return new DataServiceQuery("Recommendations", "Recommendation", RecommendationClass, key);
    }
    
    export function createCreateInput(entity: Recommendation): IDataServiceRequest {
        return recommendationsQuery().create(entity);
    }
    export function createRecommendationAsync(context: IContext, entity: Recommendation): AsyncResult<Recommendation> {
        const request = createCreateInput(entity, );
        return executeAction<Recommendation>(request, context);
    }
    export function createUpdateInput(entity: Recommendation): IDataServiceRequest {
        return recommendationsQuery(entity.Id).update(entity);
    }
    export function updateAsync(context: IContext, entity: Recommendation): AsyncResult<Recommendation> {
        const request = createUpdateInput(entity, );
        return executeAction<Recommendation>(request, context);
    }
    export function createDeleteAsync(entity: Recommendation): IDataServiceRequest {
        return recommendationsQuery(entity.Id).delete();
    }
    export function deleteAsync(context: IContext, entity: Recommendation): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(id: string): IDataServiceRequest {
        return recommendationsQuery(id).read();
    }
    export function readAsync(context: IContext, id: string): AsyncResult<Recommendation> {
        const request = createReadAsync(id, );
        return executeAction<Recommendation>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return recommendationsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<Recommendation[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<Recommendation[]>(request, context);
    }
    
    export function createGetElementsInput(queryResultSettings: IQueryResultSettings, id: string, recommendationCriteria: RecommendationCriteria | null): IDataServiceRequest {      
        const query = recommendationsQuery(id).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetElements', true, RecommendedElementClass, 'true', { bypassCache: 'none', returnEntity: 'RecommendedElement'}, {recommendationCriteria: recommendationCriteria });
    }    
    
    export function getElementsAsync(context: IContext, id: string, recommendationCriteria: RecommendationCriteria | null):AsyncResult<RecommendedElement[]> {
        const request = createGetElementsInput(context.queryResultSettings, id, recommendationCriteria, );
        return executeAction<RecommendedElement[]>(request, context);
    }          
          
    