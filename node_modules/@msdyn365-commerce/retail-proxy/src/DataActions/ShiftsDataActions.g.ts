    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { Shift, SuspendedCart, ShiftTenderLine, ShiftRetrievalCriteria, Receipt } from '../Entities/CommerceTypes.g';
    import { ShiftClass, SuspendedCartClass, ReceiptClass, ShiftTenderLineClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function shiftsQuery(shiftId?: number, terminalId?: string): DataServiceQuery {
      var key = (shiftId && terminalId) ? { ShiftId: shiftId, TerminalId: terminalId } : null;
      return new DataServiceQuery("Shifts", "Shift", ShiftClass, key);
    }
    
    export function createCreateInput(entity: Shift): IDataServiceRequest {
        return shiftsQuery().create(entity);
    }
    export function createShiftAsync(context: IContext, entity: Shift): AsyncResult<Shift> {
        const request = createCreateInput(entity, );
        return executeAction<Shift>(request, context);
    }
    export function createUpdateInput(entity: Shift): IDataServiceRequest {
        return shiftsQuery(entity.ShiftId, entity.TerminalId).update(entity);
    }
    export function updateAsync(context: IContext, entity: Shift): AsyncResult<Shift> {
        const request = createUpdateInput(entity, );
        return executeAction<Shift>(request, context);
    }
    export function createDeleteAsync(entity: Shift): IDataServiceRequest {
        return shiftsQuery(entity.ShiftId, entity.TerminalId).delete();
    }
    export function deleteAsync(context: IContext, entity: Shift): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(shiftId: number, terminalId: string): IDataServiceRequest {
        return shiftsQuery(shiftId, terminalId).read();
    }
    export function readAsync(context: IContext, shiftId: number, terminalId: string): AsyncResult<Shift> {
        const request = createReadAsync(shiftId, terminalId, );
        return executeAction<Shift>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return shiftsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<Shift[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<Shift[]>(request, context);
    }
    
    export function createUpsertShiftsInput(shifts: Shift[] | null): IDataServiceRequest {      
        const query = shiftsQuery();
        return query.createDataServiceRequestForOperation('UpsertShifts', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, {shifts: shifts });
    }    
    
    export function upsertShiftsAsync(context: IContext, shifts: Shift[] | null):AsyncResult<boolean> {
        const request = createUpsertShiftsInput(shifts, );
        return executeAction<boolean>(request, context);
    }          
          
    export function createUpsertAndValidateShiftsInput(shiftId: number | null, terminalId: string | null, shifts: Shift[] | null): IDataServiceRequest {      
        const query = shiftsQuery();
        return query.createDataServiceRequestForOperation('UpsertAndValidateShifts', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, {shiftId: shiftId, terminalId: terminalId, shifts: shifts });
    }    
    
    export function upsertAndValidateShiftsAsync(context: IContext, shiftId: number | null, terminalId: string | null, shifts: Shift[] | null):AsyncResult<boolean> {
        const request = createUpsertAndValidateShiftsInput(shiftId, terminalId, shifts, );
        return executeAction<boolean>(request, context);
    }          
          
    export function createDeleteShiftsInput(): IDataServiceRequest {      
        const query = shiftsQuery();
        return query.createDataServiceRequestForOperation('DeleteShifts', true, '', 'false', { bypassCache: 'get', returnEntity: ''}, { });
    }    
    
    export function deleteShiftsAsync(context: IContext):AsyncResult<boolean> {
        const request = createDeleteShiftsInput();
        return executeAction<boolean>(request, context);
    }          
          
    export function createOpenInput(shiftId: number | null, cashDrawer: string | null, isShared: boolean): IDataServiceRequest {      
        const query = shiftsQuery();
        return query.createDataServiceRequestForOperation('Open', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift'}, {shiftId: shiftId, cashDrawer: cashDrawer, isShared: isShared });
    }    
    
    export function openAsync(context: IContext, shiftId: number | null, cashDrawer: string | null, isShared: boolean):AsyncResult<Shift> {
        const request = createOpenInput(shiftId, cashDrawer, isShared, );
        return executeAction<Shift>(request, context);
    }          
          
    export function createCloseInput(shiftId: number, terminalId: string, transactionId: string | null, forceClose: boolean, hasOfflinePendingTransactions: boolean | null): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('Close', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift'}, {transactionId: transactionId, forceClose: forceClose, hasOfflinePendingTransactions: hasOfflinePendingTransactions });
    }    
    
    export function closeAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null, forceClose: boolean, hasOfflinePendingTransactions: boolean | null):AsyncResult<Shift> {
        const request = createCloseInput(shiftId, terminalId, transactionId, forceClose, hasOfflinePendingTransactions, );
        return executeAction<Shift>(request, context);
    }          
          
    export function createGetSuspendedCartsByShiftInput(queryResultSettings: IQueryResultSettings, shiftTerminalId: string | null, shiftId: number): IDataServiceRequest {      
        const query = shiftsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetSuspendedCartsByShift', true, SuspendedCartClass, 'true', { bypassCache: 'none', returnEntity: 'SuspendedCart'}, {shiftTerminalId: shiftTerminalId, shiftId: shiftId });
    }    
    
    export function getSuspendedCartsByShiftAsync(context: IContext, shiftTerminalId: string | null, shiftId: number):AsyncResult<SuspendedCart[]> {
        const request = createGetSuspendedCartsByShiftInput(context.queryResultSettings, shiftTerminalId, shiftId, );
        return executeAction<SuspendedCart[]>(request, context);
    }          
          
    export function createVoidSuspendedCartsInput(shiftId: number, terminalId: string): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('VoidSuspendedCarts', true, '', '', { bypassCache: 'get', returnEntity: ''}, { });
    }    
    
    export function voidSuspendedCartsAsync(context: IContext, shiftId: number, terminalId: string):AsyncResult<NullResult> {
        const request = createVoidSuspendedCartsInput(shiftId, terminalId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createSaveTenderLinesInput(shiftId: number, terminalId: string, tenderLines: ShiftTenderLine[] | null): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('SaveTenderLines', true, '', '', { bypassCache: 'get', returnEntity: ''}, {tenderLines: tenderLines });
    }    
    
    export function saveTenderLinesAsync(context: IContext, shiftId: number, terminalId: string, tenderLines: ShiftTenderLine[] | null):AsyncResult<NullResult> {
        const request = createSaveTenderLinesInput(shiftId, terminalId, tenderLines, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createBlindCloseInput(shiftId: number, terminalId: string, transactionId: string | null, forceClose: boolean): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('BlindClose', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift'}, {transactionId: transactionId, forceClose: forceClose });
    }    
    
    export function blindCloseAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null, forceClose: boolean):AsyncResult<Shift> {
        const request = createBlindCloseInput(shiftId, terminalId, transactionId, forceClose, );
        return executeAction<Shift>(request, context);
    }          
          
    export function createForceDeleteInput(shiftId: number, terminalId: string, transactionId: string | null): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('ForceDelete', true, '', '', { bypassCache: 'get', returnEntity: ''}, {transactionId: transactionId });
    }    
    
    export function forceDeleteAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null):AsyncResult<NullResult> {
        const request = createForceDeleteInput(shiftId, terminalId, transactionId, );
        return executeAction<NullResult>(request, context);
    }          
          
    export function createResumeInput(shiftId: number, terminalId: string, cashDrawer: string | null): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('Resume', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift'}, {cashDrawer: cashDrawer });
    }    
    
    export function resumeAsync(context: IContext, shiftId: number, terminalId: string, cashDrawer: string | null):AsyncResult<Shift> {
        const request = createResumeInput(shiftId, terminalId, cashDrawer, );
        return executeAction<Shift>(request, context);
    }          
          
    export function createUseInput(shiftId: number, terminalId: string): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('Use', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift'}, { });
    }    
    
    export function useAsync(context: IContext, shiftId: number, terminalId: string):AsyncResult<Shift> {
        const request = createUseInput(shiftId, terminalId, );
        return executeAction<Shift>(request, context);
    }          
          
    export function createSuspendInput(shiftId: number, terminalId: string, transactionId: string | null): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('Suspend', true, ShiftClass, 'false', { bypassCache: 'get', returnEntity: 'Shift'}, {transactionId: transactionId });
    }    
    
    export function suspendAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null):AsyncResult<Shift> {
        const request = createSuspendInput(shiftId, terminalId, transactionId, );
        return executeAction<Shift>(request, context);
    }          
          
    export function createGetByStatusInput(queryResultSettings: IQueryResultSettings, statusValue: number): IDataServiceRequest {      
        const query = shiftsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetByStatus', false, ShiftClass, 'true', { bypassCache: 'none', returnEntity: 'Shift'}, {statusValue: statusValue });
    }    
    
    export function getByStatusAsync(context: IContext, statusValue: number):AsyncResult<Shift[]> {
        const request = createGetByStatusInput(context.queryResultSettings, statusValue, );
        return executeAction<Shift[]>(request, context);
    }          
          
    export function createGetByStatusFilterByUserRoleInput(queryResultSettings: IQueryResultSettings, statusValue: number, filterByUserRole: boolean): IDataServiceRequest {      
        const query = shiftsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetByStatusFilterByUserRole', false, ShiftClass, 'true', { bypassCache: 'none', returnEntity: 'Shift'}, {statusValue: statusValue, filterByUserRole: filterByUserRole });
    }    
    
    export function getByStatusFilterByUserRoleAsync(context: IContext, statusValue: number, filterByUserRole: boolean):AsyncResult<Shift[]> {
        const request = createGetByStatusFilterByUserRoleInput(context.queryResultSettings, statusValue, filterByUserRole, );
        return executeAction<Shift[]>(request, context);
    }          
          
    export function createGetByRetrievalCriteriaInput(queryResultSettings: IQueryResultSettings, shiftRetrievalCriteria: ShiftRetrievalCriteria | null): IDataServiceRequest {      
        const query = shiftsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetByRetrievalCriteria', true, ShiftClass, 'true', { bypassCache: 'none', returnEntity: 'Shift'}, {shiftRetrievalCriteria: shiftRetrievalCriteria });
    }    
    
    export function getByRetrievalCriteriaAsync(context: IContext, shiftRetrievalCriteria: ShiftRetrievalCriteria | null):AsyncResult<Shift[]> {
        const request = createGetByRetrievalCriteriaInput(context.queryResultSettings, shiftRetrievalCriteria, );
        return executeAction<Shift[]>(request, context);
    }          
          
    export function createGetXReportInput(shiftId: number, terminalId: string, transactionId: string | null, hardwareProfileId: string | null): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId);
        return query.createDataServiceRequestForOperation('GetXReport', false, ReceiptClass, 'false', { bypassCache: 'none', returnEntity: 'Receipt'}, {transactionId: transactionId, hardwareProfileId: hardwareProfileId });
    }    
    
    export function getXReportAsync(context: IContext, shiftId: number, terminalId: string, transactionId: string | null, hardwareProfileId: string | null):AsyncResult<Receipt> {
        const request = createGetXReportInput(shiftId, terminalId, transactionId, hardwareProfileId, );
        return executeAction<Receipt>(request, context);
    }          
          
    export function createGetZReportInput(transactionId: string | null, hardwareProfileId: string | null): IDataServiceRequest {      
        const query = shiftsQuery();
        return query.createDataServiceRequestForOperation('GetZReport', false, ReceiptClass, 'false', { bypassCache: 'none', returnEntity: 'Receipt'}, {transactionId: transactionId, hardwareProfileId: hardwareProfileId });
    }    
    
    export function getZReportAsync(context: IContext, transactionId: string | null, hardwareProfileId: string | null):AsyncResult<Receipt> {
        const request = createGetZReportInput(transactionId, hardwareProfileId, );
        return executeAction<Receipt>(request, context);
    }          
          
    export function createGetOpenTenderLinesInput(queryResultSettings: IQueryResultSettings, shiftId: number, terminalId: string): IDataServiceRequest {      
        const query = shiftsQuery(shiftId, terminalId).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetOpenTenderLines', false, ShiftTenderLineClass, 'true', { bypassCache: 'none', returnEntity: 'ShiftTenderLine'}, { });
    }    
    
    export function getOpenTenderLinesAsync(context: IContext, shiftId: number, terminalId: string):AsyncResult<ShiftTenderLine[]> {
        const request = createGetOpenTenderLinesInput(context.queryResultSettings, shiftId, terminalId, );
        return executeAction<ShiftTenderLine[]>(request, context);
    }          
          
    export function createValidateCashDrawerLimitInput(shiftTerminalId: string | null, shiftId: number): IDataServiceRequest {      
        const query = shiftsQuery();
        return query.createDataServiceRequestForOperation('ValidateCashDrawerLimit', true, '', '', { bypassCache: 'get', returnEntity: ''}, {shiftTerminalId: shiftTerminalId, shiftId: shiftId });
    }    
    
    export function validateCashDrawerLimitAsync(context: IContext, shiftTerminalId: string | null, shiftId: number):AsyncResult<NullResult> {
        const request = createValidateCashDrawerLimitInput(shiftTerminalId, shiftId, );
        return executeAction<NullResult>(request, context);
    }          
          
    