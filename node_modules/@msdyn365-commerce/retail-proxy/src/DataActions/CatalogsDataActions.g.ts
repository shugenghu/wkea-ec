    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { ProductCatalog } from '../Entities/CommerceTypes.g';
    import { ProductCatalogClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function catalogsQuery(recordId?: number): DataServiceQuery {
      var key = (recordId) ? { RecordId: recordId } : null;
      return new DataServiceQuery("Catalogs", "ProductCatalog", ProductCatalogClass, key);
    }
    
    export function createCreateInput(entity: ProductCatalog): IDataServiceRequest {
        return catalogsQuery().create(entity);
    }
    export function createProductCatalogAsync(context: IContext, entity: ProductCatalog): AsyncResult<ProductCatalog> {
        const request = createCreateInput(entity, );
        return executeAction<ProductCatalog>(request, context);
    }
    export function createUpdateInput(entity: ProductCatalog): IDataServiceRequest {
        return catalogsQuery(entity.RecordId).update(entity);
    }
    export function updateAsync(context: IContext, entity: ProductCatalog): AsyncResult<ProductCatalog> {
        const request = createUpdateInput(entity, );
        return executeAction<ProductCatalog>(request, context);
    }
    export function createDeleteAsync(entity: ProductCatalog): IDataServiceRequest {
        return catalogsQuery(entity.RecordId).delete();
    }
    export function deleteAsync(context: IContext, entity: ProductCatalog): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(recordId: number): IDataServiceRequest {
        return catalogsQuery(recordId).read();
    }
    export function readAsync(context: IContext, recordId: number): AsyncResult<ProductCatalog> {
        const request = createReadAsync(recordId, );
        return executeAction<ProductCatalog>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return catalogsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<ProductCatalog[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<ProductCatalog[]>(request, context);
    }
    
    export function createGetCatalogsInput(queryResultSettings: IQueryResultSettings, channelId: number, activeOnly: boolean): IDataServiceRequest {      
        const query = catalogsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetCatalogs', true, ProductCatalogClass, 'true', { bypassCache: 'none', returnEntity: 'ProductCatalog'}, {channelId: channelId, activeOnly: activeOnly });
    }    
    
    export function getCatalogsAsync(context: IContext, channelId: number, activeOnly: boolean):AsyncResult<ProductCatalog[]> {
        const request = createGetCatalogsInput(context.queryResultSettings, channelId, activeOnly, );
        return executeAction<ProductCatalog[]>(request, context);
    }          
          
    