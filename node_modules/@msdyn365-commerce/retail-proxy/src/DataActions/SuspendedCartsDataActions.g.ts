    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { SuspendedCart } from '../Entities/CommerceTypes.g';
    import { SuspendedCartClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function suspendedCartsQuery(id?: string): DataServiceQuery {
      var key = (id) ? { Id: id } : null;
      return new DataServiceQuery("SuspendedCarts", "SuspendedCart", SuspendedCartClass, key);
    }
    
    export function createCreateInput(entity: SuspendedCart): IDataServiceRequest {
        return suspendedCartsQuery().create(entity);
    }
    export function createSuspendedCartAsync(context: IContext, entity: SuspendedCart): AsyncResult<SuspendedCart> {
        const request = createCreateInput(entity, );
        return executeAction<SuspendedCart>(request, context);
    }
    export function createUpdateInput(entity: SuspendedCart): IDataServiceRequest {
        return suspendedCartsQuery(entity.Id).update(entity);
    }
    export function updateAsync(context: IContext, entity: SuspendedCart): AsyncResult<SuspendedCart> {
        const request = createUpdateInput(entity, );
        return executeAction<SuspendedCart>(request, context);
    }
    export function createDeleteAsync(entity: SuspendedCart): IDataServiceRequest {
        return suspendedCartsQuery(entity.Id).delete();
    }
    export function deleteAsync(context: IContext, entity: SuspendedCart): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(id: string): IDataServiceRequest {
        return suspendedCartsQuery(id).read();
    }
    export function readAsync(context: IContext, id: string): AsyncResult<SuspendedCart> {
        const request = createReadAsync(id, );
        return executeAction<SuspendedCart>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return suspendedCartsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<SuspendedCart[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<SuspendedCart[]>(request, context);
    }
    
    export function createGetAllSuspendedCartsInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {      
        const query = suspendedCartsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetAllSuspendedCarts', true, SuspendedCartClass, 'true', { bypassCache: 'none', returnEntity: 'SuspendedCart'}, { });
    }    
    
    export function getAllSuspendedCartsAsync(context: IContext):AsyncResult<SuspendedCart[]> {
        const request = createGetAllSuspendedCartsInput(context.queryResultSettings, );
        return executeAction<SuspendedCart[]>(request, context);
    }          
          