    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { Checklist, ChecklistSearchCriteria, TaskSearchCriteria, ChecklistTask } from '../Entities/CommerceTypes.g';
    import { ChecklistClass, ChecklistTaskClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function checklistsQuery(recordId?: number): DataServiceQuery {
      var key = (recordId) ? { RecordId: recordId } : null;
      return new DataServiceQuery("Checklists", "Checklist", ChecklistClass, key);
    }
    
    export function createCreateInput(entity: Checklist): IDataServiceRequest {
        return checklistsQuery().create(entity);
    }
    export function createChecklistAsync(context: IContext, entity: Checklist): AsyncResult<Checklist> {
        const request = createCreateInput(entity, );
        return executeAction<Checklist>(request, context);
    }
    export function createUpdateInput(entity: Checklist): IDataServiceRequest {
        return checklistsQuery(entity.RecordId).update(entity);
    }
    export function updateAsync(context: IContext, entity: Checklist): AsyncResult<Checklist> {
        const request = createUpdateInput(entity, );
        return executeAction<Checklist>(request, context);
    }
    export function createDeleteAsync(entity: Checklist): IDataServiceRequest {
        return checklistsQuery(entity.RecordId).delete();
    }
    export function deleteAsync(context: IContext, entity: Checklist): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(recordId: number): IDataServiceRequest {
        return checklistsQuery(recordId).read();
    }
    export function readAsync(context: IContext, recordId: number): AsyncResult<Checklist> {
        const request = createReadAsync(recordId, );
        return executeAction<Checklist>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return checklistsQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<Checklist[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<Checklist[]>(request, context);
    }
    
    export function createSearchChecklistsInput(queryResultSettings: IQueryResultSettings, checklistSearchCriteria: ChecklistSearchCriteria | null): IDataServiceRequest {      
        const query = checklistsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchChecklists', true, ChecklistClass, 'true', { bypassCache: 'none', returnEntity: 'Checklist'}, {checklistSearchCriteria: checklistSearchCriteria });
    }    
    
    export function searchChecklistsAsync(context: IContext, checklistSearchCriteria: ChecklistSearchCriteria | null):AsyncResult<Checklist[]> {
        const request = createSearchChecklistsInput(context.queryResultSettings, checklistSearchCriteria, );
        return executeAction<Checklist[]>(request, context);
    }          
          
    export function createSearchTasksInput(queryResultSettings: IQueryResultSettings, taskSearchCriteria: TaskSearchCriteria | null): IDataServiceRequest {      
        const query = checklistsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchTasks', true, ChecklistTaskClass, 'true', { bypassCache: 'none', returnEntity: 'ChecklistTask'}, {taskSearchCriteria: taskSearchCriteria });
    }    
    
    export function searchTasksAsync(context: IContext, taskSearchCriteria: TaskSearchCriteria | null):AsyncResult<ChecklistTask[]> {
        const request = createSearchTasksInput(context.queryResultSettings, taskSearchCriteria, );
        return executeAction<ChecklistTask[]>(request, context);
    }          
          
    export function createCreateTaskInput(createTask: ChecklistTask | null): IDataServiceRequest {      
        const query = checklistsQuery();
        return query.createDataServiceRequestForOperation('CreateTask', true, ChecklistTaskClass, 'false', { bypassCache: 'get', returnEntity: 'ChecklistTask'}, {createTask: createTask });
    }    
    
    export function createTaskAsync(context: IContext, createTask: ChecklistTask | null):AsyncResult<ChecklistTask> {
        const request = createCreateTaskInput(createTask, );
        return executeAction<ChecklistTask>(request, context);
    }          
          
    export function createUpdateChecklistsInput(queryResultSettings: IQueryResultSettings, updateChecklists: Checklist[] | null): IDataServiceRequest {      
        const query = checklistsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('UpdateChecklists', true, ChecklistClass, 'true', { bypassCache: 'get', returnEntity: 'Checklist'}, {updateChecklists: updateChecklists });
    }    
    
    export function updateChecklistsAsync(context: IContext, updateChecklists: Checklist[] | null):AsyncResult<Checklist[]> {
        const request = createUpdateChecklistsInput(context.queryResultSettings, updateChecklists, );
        return executeAction<Checklist[]>(request, context);
    }          
          
    export function createUpdateTasksInput(queryResultSettings: IQueryResultSettings, updateTasks: ChecklistTask[] | null): IDataServiceRequest {      
        const query = checklistsQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('UpdateTasks', true, ChecklistTaskClass, 'true', { bypassCache: 'get', returnEntity: 'ChecklistTask'}, {updateTasks: updateTasks });
    }    
    
    export function updateTasksAsync(context: IContext, updateTasks: ChecklistTask[] | null):AsyncResult<ChecklistTask[]> {
        const request = createUpdateTasksInput(context.queryResultSettings, updateTasks, );
        return executeAction<ChecklistTask[]>(request, context);
    }          
          
    