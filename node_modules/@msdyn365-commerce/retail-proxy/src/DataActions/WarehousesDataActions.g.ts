    // <auto-generated />
    import { AsyncResult } from '../async-result';
    import { DataServiceQuery } from '../DataServiceQuery';
    import { Warehouse, WarehouseLocationSearchCriteria, WarehouseLocation } from '../Entities/CommerceTypes.g';
    import { WarehouseClass, WarehouseLocationClass } from '../Entities/CommerceModels.g';
    import { IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '../Interfaces';
    import { executeAction } from '../retail-action';
    
    
    function warehousesQuery(inventLocation?: string): DataServiceQuery {
      var key = (inventLocation) ? { InventLocation: inventLocation } : null;
      return new DataServiceQuery("Warehouses", "Warehouse", WarehouseClass, key);
    }
    
    export function createCreateInput(entity: Warehouse): IDataServiceRequest {
        return warehousesQuery().create(entity);
    }
    export function createWarehouseAsync(context: IContext, entity: Warehouse): AsyncResult<Warehouse> {
        const request = createCreateInput(entity, );
        return executeAction<Warehouse>(request, context);
    }
    export function createUpdateInput(entity: Warehouse): IDataServiceRequest {
        return warehousesQuery(entity.InventLocation).update(entity);
    }
    export function updateAsync(context: IContext, entity: Warehouse): AsyncResult<Warehouse> {
        const request = createUpdateInput(entity, );
        return executeAction<Warehouse>(request, context);
    }
    export function createDeleteAsync(entity: Warehouse): IDataServiceRequest {
        return warehousesQuery(entity.InventLocation).delete();
    }
    export function deleteAsync(context: IContext, entity: Warehouse): AsyncResult<NullResult> {
        const request = createDeleteAsync(entity, );
        return executeAction<NullResult>(request, context);
    }
    export function createReadAsync(inventLocation: string): IDataServiceRequest {
        return warehousesQuery(inventLocation).read();
    }
    export function readAsync(context: IContext, inventLocation: string): AsyncResult<Warehouse> {
        const request = createReadAsync(inventLocation, );
        return executeAction<Warehouse>(request, context);
    }
    export function createReadAllAsync(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
        return warehousesQuery().resultSettings(queryResultSettings).read();
    }
    export function readAllAsync(context: IContext): AsyncResult<Warehouse[]> {
        const request = createReadAllAsync(context.queryResultSettings, );
        return executeAction<Warehouse[]>(request, context);
    }
    
    export function createSearchWarehouseLocationsAsyncInput(queryResultSettings: IQueryResultSettings, searchCriteria: WarehouseLocationSearchCriteria | null): IDataServiceRequest {      
        const query = warehousesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchWarehouseLocationsAsync', true, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation'}, {searchCriteria: searchCriteria });
    }    
    
    export function searchWarehouseLocationsAsyncAsync(context: IContext, searchCriteria: WarehouseLocationSearchCriteria | null):AsyncResult<WarehouseLocation[]> {
        const request = createSearchWarehouseLocationsAsyncInput(context.queryResultSettings, searchCriteria, );
        return executeAction<WarehouseLocation[]>(request, context);
    }          
          
    export function createGetWarehouseByIdInput(inventLocation: string): IDataServiceRequest {      
        const query = warehousesQuery(inventLocation);
        return query.createDataServiceRequestForOperation('GetWarehouseById', false, WarehouseClass, 'false', { bypassCache: 'none', returnEntity: 'Warehouse'}, { });
    }    
    
    export function getWarehouseByIdAsync(context: IContext, inventLocation: string):AsyncResult<Warehouse> {
        const request = createGetWarehouseByIdInput(inventLocation, );
        return executeAction<Warehouse>(request, context);
    }          
          
    export function createSearchWarehousesInput(queryResultSettings: IQueryResultSettings, searchText: string | null): IDataServiceRequest {      
        const query = warehousesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchWarehouses', false, WarehouseClass, 'true', { bypassCache: 'none', returnEntity: 'Warehouse'}, {searchText: searchText });
    }    
    
    export function searchWarehousesAsync(context: IContext, searchText: string | null):AsyncResult<Warehouse[]> {
        const request = createSearchWarehousesInput(context.queryResultSettings, searchText, );
        return executeAction<Warehouse[]>(request, context);
    }          
          
    export function createGetLocationsInput(queryResultSettings: IQueryResultSettings, inventLocation: string): IDataServiceRequest {      
        const query = warehousesQuery(inventLocation).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetLocations', false, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation'}, { });
    }    
    
    export function getLocationsAsync(context: IContext, inventLocation: string):AsyncResult<WarehouseLocation[]> {
        const request = createGetLocationsInput(context.queryResultSettings, inventLocation, );
        return executeAction<WarehouseLocation[]>(request, context);
    }          
          
    export function createSearchLocationsInput(queryResultSettings: IQueryResultSettings, inventLocation: string, searchText: string | null): IDataServiceRequest {      
        const query = warehousesQuery(inventLocation).resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('SearchLocations', false, WarehouseLocationClass, 'true', { bypassCache: 'none', returnEntity: 'WarehouseLocation'}, {searchText: searchText });
    }    
    
    export function searchLocationsAsync(context: IContext, inventLocation: string, searchText: string | null):AsyncResult<WarehouseLocation[]> {
        const request = createSearchLocationsInput(context.queryResultSettings, inventLocation, searchText, );
        return executeAction<WarehouseLocation[]>(request, context);
    }          
          
    export function createGetAvailableFulfillmentLocationsInput(queryResultSettings: IQueryResultSettings, deliveryModeTypeFilter: number): IDataServiceRequest {      
        const query = warehousesQuery().resultSettings(queryResultSettings);
        return query.createDataServiceRequestForOperation('GetAvailableFulfillmentLocations', false, WarehouseClass, 'true', { bypassCache: 'none', returnEntity: 'Warehouse'}, {deliveryModeTypeFilter: deliveryModeTypeFilter });
    }    
    
    export function getAvailableFulfillmentLocationsAsync(context: IContext, deliveryModeTypeFilter: number):AsyncResult<Warehouse[]> {
        const request = createGetAvailableFulfillmentLocationsInput(context.queryResultSettings, deliveryModeTypeFilter, );
        return executeAction<Warehouse[]>(request, context);
    }          
          
    