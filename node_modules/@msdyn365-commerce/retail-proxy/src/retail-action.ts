/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { AsyncResult } from './async-result';
import { IDataServiceRequest } from './Interfaces';

/**
 * Calls the Retail action
 */
export function retailAction<T>(input: IDataServiceRequest, callerContext: unknown): Promise<T> {
    return input.execute<T>(callerContext);
}

retailAction.prototype = {
    isAction: true,
    isObservable: true
};

export function callActionOrExecute<TOut>(request: IDataServiceRequest, callerContext: any): AsyncResult<TOut> {
    return callerContext.chainAction ? callerContext.chainAction(retailAction, request) : request.execute<TOut>(callerContext);
}

export function executeAction<TOut>(request: IDataServiceRequest, context: any): AsyncResult<TOut> {
    if (!context) {
        throw new Error('context is undefined while executing action');
    }

    if (context.callerContext && context.callerContext.chainAction) {
        context.bypassCache && request.overrideCacheType(context.bypassCache);
        return context.callerContext.chainAction(retailAction, request);
    } else if (context.chainAction) {
        return context.chainAction(retailAction, request);
    }

    return new AsyncResult<TOut>((resolve, reject) => {
        request
            .execute<TOut>(context)
            .then(result => {
                resolve(result);
            })
            .catch(error => {
                reject(error);
            });
    });
}
