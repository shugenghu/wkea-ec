/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

// Following reference is added to fix the build dependency between CommerceContxt and DataServiceQuery.
// This will eventually be moved to CommerceContext.ts when MPOS proxy and Commerce Proxy are merged.

'use strict';

/**
 * Class for representing an error.
 */
export class ProxyError {
    private _errorCode: string;
    private _errorMessage: string;
    private _localizedErrorMessage: string;
    private _canRetry: boolean = false;
    private _commerceException: any;
    private _formatData: any[];
    private _extraData: any;

    constructor(
        errorCode: string,
        errorMessage: string,
        localizedErrorMessage,
        canRetry: boolean,
        extraData: any,
        ...formatData: any[]
    ) {
        this._errorCode = errorCode;
        this._errorMessage = errorMessage;
        this._localizedErrorMessage = localizedErrorMessage;
        this._canRetry = canRetry;
        this._commerceException = null;
        this._formatData = formatData;
        this._extraData = extraData;
    }

    /**
     * Takes a proxy error and returns a proper JS error version of it
     * @param proxyError The proxyError
     */
    public static toError(proxyError: ProxyError): Error {
        const e = new Error();
        e.name = proxyError.ErrorCode || 'Proxy Error';
        e.message = proxyError.ErrorMessage || proxyError.LocalizedErrorMessage;

        // Assign extra error details to error.
        // ts-ignoring as the standard error contract only supports name and message
        if (proxyError.extraData) {
            // @ts-ignore
            e.requestUri = proxyError.extraData.requestUri;

            // @ts-ignore
            e.data = proxyError.extraData.data;

            // @ts-ignore
            e.statusCode = proxyError.extraData.statusCode;
        }

        return e;
    }

    /**
     * Gets the commerce exception that caused this error.
     *
     * @return {any} The commerce exception.
     */
    public get commerceException(): any {
        return this._commerceException;
    }

    /**
     * Sets the commerce exception that caused this error.
     *
     * @param {any} exception The commerce exception.
     */
    public set commerceException(exception: any) {
        this._commerceException = exception;
    }

    /**
     * Gets the error code.
     *
     * @return {string} The error code.
     */
    public get ErrorCode(): string {
        return this._errorCode;
    }

    /**
     * Gets the error message.
     *
     * @return {string} The error message.
     */
    public get ErrorMessage(): string {
        return this._errorMessage;
    }

    /**
     * Gets the localized error message.
     *
     * @return {string} The localized error message.
     */
    public get LocalizedErrorMessage(): string {
        return this._localizedErrorMessage;
    }

    /**
     * Gets the format data used on formatted error messages.
     *
     * @return {any[]} The format data.
     */
    public get formatData(): any[] {
        return this._formatData;
    }

    /**
     * Gets the additional information the might be supplied by the error.
     *
     * @return {any} The extra data.
     */
    public get extraData(): any {
        return this._extraData;
    }

    /**
     * Gets the error title. Defaults to the resource string string_29004 for the error title if
     * no error title is mapped for the error.
     */
    public get ErrorTitleResourceId(): string {
        const errorTitleResourceId = 'string_29004'; // Error string: There is a problem with the server
        return errorTitleResourceId;
    }

    /**
     * Gets whether the action that generated the error can be retried.
     *
     * @return {string} Whether the action that generated the error can be retried.
     */
    public get CanRetry(): boolean {
        return this._canRetry;
    }
}
