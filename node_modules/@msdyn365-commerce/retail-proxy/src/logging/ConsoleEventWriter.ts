/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

// tslint:disable:no-empty
export enum EventLevel {
    LogAlways = 0,
    Critical = 1,
    Error = 2,
    Warning = 3,
    Informational = 4,
    Verbose = 5
}

export enum EventChannel {
    Admin = 16,
    Operational = 17,
    Analytic = 18,
    Debug = 19
}

export interface ILoggingSink {
    writeEvent(event: Event): void;
    setSessionInfo(
        appSessionId: string,
        userSessionId: string,
        deviceId: string,
        deviceNumber: string,
        terminalId: string,
        userId: string,
        tenantId: string,
        offlineAvailability: string,
        offlineCurrentMode: string,
        screenResolution: string
    ): void;
    setInstrumentationKey(instrumentationKey: string): void;
}

export class Utils {
    public static getParameterNames(func: Function): string[] {
        return [];
    }

    public static generateGuid(): string {
        return '';
    }

    public static emptyGuid(): string {
        return '';
    }
}

export enum EventType {
    None = 0,
    Custom = 1,
    PageView = 2
}

export class PageViewMetadata {
    public PageName: string;
}

export class EventStaticMetadata {
    public Name: string;
    public Id: number;
    public Version: number;
    public Level: EventLevel;
    public LevelName: string;
    public Channel: EventChannel;
    public ChannelName: string;
    public Keywords: string[];
    public Task: string;
    public OpCode: string;
    public Message: string;
}

export class EventCoreFields {
    public ClientTimestamp: number;
    public AppSessionId: string;
    public UserSessionId: string;
    public DeviceId: string;
    public DeviceNumber: string;
    public TerminalId: string;
    public UserId: string;
    public TenantId: string;
    public OfflineAvailability: string;
    public OfflineCurrentMode: string;
    public ScreenResolution: string;
}

export class Event {
    public Type: EventType;
    public PageViewMetadata: PageViewMetadata;
    public StaticMetadata: EventStaticMetadata;
    public CoreFields: EventCoreFields;
    public Payload: {
        [name: string]: any;
    };
    constructor(
        type: EventType,
        appSessionId: string,
        userSessionId: string,
        deviceId: string,
        deviceNumber: string,
        terminalId: string,
        userId: string,
        tenantId: string,
        offlineAvailability: string,
        offlineCurrentMode: string,
        screenResolution: string
    ) {}
}

export class DebuggingConsoleSink implements ILoggingSink {
    public setSessionInfo(
        appSessionId: string,
        userSessionId: string,
        deviceId: string,
        deviceNumber: string,
        terminalId: string,
        userId: string,
        tenantId: string,
        offlineAvailability: string,
        offlineCurrentMode: string
    ): void {}

    public setInstrumentationKey(instrumentationKey: string): void {}

    public writeEvent(event: Event): void {}
}

export class LoggerBase {
    public static writeEvent(
        name: string,
        eventId: number,
        version: number,
        channel: EventChannel,
        level: EventLevel,
        keywords: string[],
        task: string,
        opCode: string,
        message: string
    ) {
        // console.log(`name: ${name}, eventId: ${eventId}, version: ${version}, channel: ${this.getEnumKeyForValue(EventChannel, channel)}`);
        // console.log(
        //     `level: ${this.getEnumKeyForValue(
        //         EventLevel,
        //         level
        //     )}, keywords: ${keywords.toString()}, task: ${task}, opCode: ${opCode}, message: ${message}`
        // );
    }

    public static addLoggingSink(loggingSink: ILoggingSink): void {}

    public static getEnumKeyForValue(enumType: any, value: number): string {
        for (const key in Object.keys(enumType)) {
            if (enumType[key] === value) {
                return key;
            }
        }
        return '';
    }
}
