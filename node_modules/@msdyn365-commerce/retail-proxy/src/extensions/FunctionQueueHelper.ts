/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

'use strict';

/**
 * Call all the functions on the queue with optional data and clears the queue.
 *
 * @param {Function[]} functionQueue The queue of functions to be called.
 * @param {any} callerContext The caller context for the callback.
 * @param {any} [data] Optional parameter to be passed as the function argument.
 */
export function callFunctions(functionQueue: Function[], callerContext: any, data?: any): void {
    if (functionQueue === undefined || functionQueue === null || functionQueue.length === 0) {
        return;
    }

    for (const func of functionQueue) {
        func.call(callerContext, data);
    }

    // clears the queue after calling all callbacks
    functionQueue = [];
}

/**
 * Queues a function to be called later.
 *
 * @param {Function[]} functionQueue The queue of functions to be called.
 * @param {Function} callback The function to be queued.
 */
export function queueFunction(functionQueue: Function[], callback: Function): void {
    if (!(callback === undefined || callback === null)) {
        functionQueue.push(callback);
    }
}

/**
 * Help execute async calls in a sequence.
 *
 * @param {any[]} array The elements array.
 * @param {(entity, () => void) => void)} iterator Async iterator callback.
 * @param {any} [then] Success callback.
 */
export function forEachAsync(array: any[], iterator: any, then?: any) {
    function next(i: any) {
        if (i < array.length) {
            iterator(
                array[i],
                () => {
                    next(i + 1);
                },
                i
            );
        } else {
            if (then) {
                then();
            }
        }
    }

    next(0);
}
