import * as React from 'react';
import { ICurrentClosedCaptionsSettings, IPlayPosition, IVideoErrorMessageData } from '../../components/data/player-constants';
import { IPlayerProps } from './Player.props';
export interface IPlayerState {
    playing: boolean;
    mouseHovered: boolean;
    isControlPanelVisible: boolean;
    doControlsHaveFocus: boolean;
    playPosition: IPlayPosition;
    currentVolume: number;
    isTriggerEnabled: boolean;
    previousVolume: number;
    isMuted: boolean;
    isInFullScreen: boolean;
    showSpinner: boolean;
    showErrorMessage: boolean;
    videoErrorMessage: IVideoErrorMessageData;
    screenReaderText: string;
    showClosedCaptions: boolean;
    isAgegateEnabled: boolean;
    currentAudioTrack: string;
    currentAudioTrackURL: string;
    closedCaptionLanguage: string;
    closedCaptionsURL: string;
    currentClosedCaptionsSettings: ICurrentClosedCaptionsSettings;
    mounted: boolean;
    tempClosedCaptionsSettings?: {};
}
export default class Player extends React.Component<IPlayerProps, IPlayerState> {
    static defaultProps: Partial<IPlayerProps>;
    private controlPanelTimer;
    private playerId;
    private player;
    private audio;
    private playerContainer;
    private videoControl;
    private ClosedCaptions;
    private ageGateContainer;
    private videoUrl;
    private posterFrameUrl;
    private seekFrom;
    private playerState;
    private playerHelper;
    private localizationHelper;
    private closedCaptionHelper;
    private closedCaptionMenu;
    private optionsMenu;
    private selectedClosedCaptionsLocale;
    private isPlayerManuallyPaused;
    private isPlayerLoaded;
    private playerMetaData;
    private isMobileDevice;
    private payLoad;
    private static _isNativeFullscreenEnabled;
    private static _getElementInFullScreen;
    constructor(props: IPlayerProps);
    render(): JSX.Element;
    play(): void;
    pause(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private _renderClosedCaptions;
    private _renderPlayPauseTrigger;
    private _renderVideoControls;
    private _renderAgeGate;
    private _loadPlayer;
    private _validateAgeSubmitHandler;
    private _onVideoControlsFocus;
    private _onVideoControlsBlur;
    private _onPlayerMenuItemFocus;
    private _onPlayerMenuItemBlur;
    private _onPlayerMenuItemClick;
    private _setCC;
    private _setCCSettings;
    private _setAudioTracks;
    private _triggerAudioEvents;
    private _triggerEvents;
    private _onAudioError;
    private _onVideoError;
    private _stopMedia;
    private _displayErrorMessage;
    private _getError;
    private _handleControlsKeyDownEvent;
    private _onPlay;
    private _onPause;
    private _onVolumeChange;
    private _setMuted;
    private _onPlayerKeyDown;
    private _onMouseEvent;
    private _showControlBar;
    private _hideControlBar;
    private _onFullScreenChanged;
    private _onFullscreenEnter;
    private _onFullscreenExit;
    private _toggleFullScreen;
    private _onFullscreenError;
    private _enterFullScreen;
    private _exitFullScreen;
    private _onVideoLoadedData;
    private _onTimeUpdate;
    private _getBufferedDuration;
    private _getPlayPosition;
    private _onProgressChange;
    private _onTriggerClicked;
    private _stop;
    private _seek;
    private _getMaskLevelStyle;
    private _updateState;
    private _showSpinnerBasedOnState;
    private _showControlsBasedOnState;
    private _hideSpinner;
    private _showSpinner;
    private _onTriggerFocus;
    private _onTriggerBlur;
    private _updateScreenReaderElement;
    private _onContextMenuClicked;
    private _isMobile;
}
