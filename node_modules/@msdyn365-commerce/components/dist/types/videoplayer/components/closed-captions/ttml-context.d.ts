import { IClientDimension, IDictionaryStringString } from '../utilities/utilities';
import { ITtmlEvent } from './ttml-parser';
import { TtmlSettings } from './ttml-settings';
export interface ITtmlContext {
    setOwnerDocument(ownerDocument: Document): void;
    updateRelatedMediaObjectRegion(dimensions: IClientDimension): boolean;
    resetCurrentEvents(): void;
    hasEvents(): boolean;
    updateCurrentEvents(time: number): boolean;
    getCues(time: number): HTMLElement[];
}
export declare class TtmlContext implements ITtmlContext {
    private static lengthRegEx;
    private static rgbaRegEx;
    private static TtmlNamedColorMap;
    events: ITtmlEvent[];
    settings: TtmlSettings;
    styleSetCache: IDictionaryStringString[];
    rootContainerRegion: Element;
    root: Element;
    body: Element;
    layout: Element;
    private ownerDocument;
    private currentEvents;
    private currentEventsTime;
    private static _ttmlToCssTextDecoration;
    private static _ttmlToCssColor;
    private static _defaultStyle;
    constructor();
    setOwnerDocument(ownerDocument: Document): void;
    updateRelatedMediaObjectRegion(dimensions: IClientDimension): boolean;
    hasEvents(): boolean;
    resetCurrentEvents(): void;
    updateCurrentEvents(time: number): boolean;
    getCues(time: number): HTMLElement[];
    private _getTemporallyActiveEvents;
    private _isTemporallyActive;
    private _translate;
    private translateToHtml;
    private _translateStyle;
    private _prune;
    private _getComputedStyleSet;
    private _getApplicableStyleSet;
    private _isStyleApplicable;
    private _getInheritableStyleSet;
    private _appendSpanFontSizes;
    private _isInRegion;
    private _getRegionId;
    private _getTagNameEquivalent;
    private _applyStyle;
    private _ttmlToCssUnits;
    private _ttmlToCssFontSize;
    private _ttmlToCssTextOutline;
}
