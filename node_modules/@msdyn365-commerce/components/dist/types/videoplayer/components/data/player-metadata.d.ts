import { IAudioTrack } from './player-interface';
export interface ICCFile {
    url: string;
    locale: string;
    ccType?: ClosedCaptionTypes;
}
export interface IDownloadableFile {
    mediaType: DownloadableMediaTypes;
    url: string;
    locale: string;
}
export declare enum MediaTypes {
    MP4 = "MP4",
    DASH = "DASH",
    SMOOTH = "SMOOTH",
    HLS = "HLS"
}
export declare enum MediaQuality {
    HD = "HD",
    HDX = "HDX",
    HQ = "HQ",
    SD = "SD",
    LO = "LO"
}
export declare enum ClosedCaptionTypes {
    VTT = "VTT",
    TTML = "TTML"
}
export declare enum DownloadableMediaTypes {
    transcript = "transcript",
    audio = "audio",
    video = "video",
    videoWithCC = "videoWithCC"
}
export interface IVideoBinaryReference {
    format: string;
    frameRate: number;
    ClientHref: string;
}
export interface IVideoTranscriptBinaryReference {
    locale: string;
    clientHref: string;
}
export interface IVideoClosedCaptionBinaryReference {
    locale: string;
    clientHref: string;
}
export interface IAudioBinaryReference {
    locale: string;
    audioType: string;
    clientHref: string;
}
export interface IVideoMetadata {
    playerName?: string;
    videoId?: string;
    title?: string;
    description?: string;
    duration?: number;
    posterframeUrl?: string;
    shareUrl?: string;
    videoFiles?: IVideoFile[];
    externalPlayerUrl?: string;
    externalSourceId?: string;
    interactiveTriggersEnabled?: boolean;
    interactiveTriggersUrl?: string;
    minimumAge?: number;
    videoBinaryReferences?: IBinaryReference[];
    ccFiles?: ICCFile[];
    audioTracks?: IAudioTrack[];
}
export interface IVideoFile {
    url: string;
    mediaType: MediaTypes;
    quality: MediaQuality;
    width?: number;
    height?: number;
    formatCode?: string;
}
export interface IBinaryReference {
    format?: string;
    bitrate?: number;
    clientHref?: string;
    height?: number;
    width?: number;
    alias?: string;
    contentType?: string;
    description?: string;
    extension?: string;
    sizeInBytes?: number;
    sourceHref?: string;
    href?: string;
    locale?: string;
    $type?: string;
    audioType?: string;
}
