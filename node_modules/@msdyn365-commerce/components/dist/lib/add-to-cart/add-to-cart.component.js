import classnames from 'classnames';
import React, { useState } from 'react';
import { getPayloadObject, getTelemetryAttributes, Popup } from '@msdyn365-commerce-modules/utilities';
import MsDyn365, { msdyn365Commerce, TelemetryEvent } from '@msdyn365-commerce/core';
import { getCartState } from '@msdyn365-commerce/global-state';
import { PriceComponent } from '../index';
const onClick = async (_event, props, setDisabled, openModal) => {
    const cartError = addToCartError(props);
    let productToAdd = props.data.product;
    if (cartError) {
        propogateError(props, cartError);
        return;
    }
    setDisabled(true);
    if (!(props.getSelectedProduct === undefined)) {
        productToAdd = (await props.getSelectedProduct) || props.data.product;
    }
    const cartState = await getCartState(props.context.actionContext);
    await cartState.addProductToCart({ product: productToAdd, count: props.quantity, availableQuantity: props.productAvailability?.AvailableQuantity, enableStockCheck: props.context.app.config.enableStockCheck })
        .then(result => {
        if (result.status === 'SUCCESS') {
            if (props.dialogStrings && props.context.app.config.addToCartBehavior === 'showModal') {
                setDisabled(false);
                openModal(true);
            }
            else if (MsDyn365.isBrowser && props.navigationUrl && (props.context.app.config.addToCartBehavior === undefined || props.context.app.config.addToCartBehavior === 'goToCart')) {
                window.location.assign(props.navigationUrl);
            }
            propogateResult(props, result);
        }
        else {
            propogateError(props, { failureReason: 'CARTACTIONFAILED', cartActionResult: result });
            setDisabled(false);
        }
    });
};
const AddToCartComponentActions = {
    onClick: onClick
};
const AddToCart = (props) => {
    const [disabled, setDisabled] = useState(false);
    const [modalOpen, setModalOpen] = useState(false);
    const onClickHandler = async (event) => {
        await AddToCartComponentActions.onClick(event, props, setDisabled, setModalOpen);
    };
    const priceComponent = props.data.price ? (React.createElement(PriceComponent, { data: { price: props.data.price }, context: props.context, id: props.id, typeName: props.typeName, freePriceText: props.dialogStrings?.freePriceText, originalPriceText: props.dialogStrings?.originalPriceText, currentPriceText: props.dialogStrings?.currentPriceText })) : '';
    const popupProps = {
        context: props.context,
        className: 'msc-add-to-cart',
        id: props.id,
        typeName: props.typeName,
        data: { product: props.data.product, price: props.data.price },
        dialogStrings: props.dialogStrings,
        imageSettings: props.imageSettings,
        gridSettings: props.context.request.gridSettings,
        productQuantity: props.quantity !== undefined ? props.quantity : 1,
        priceComponent: priceComponent,
        navigationUrl: props.navigationUrl,
        modalOpen: modalOpen,
        setModalOpen: setModalOpen,
        telemetryContent: props.telemetryContent
    };
    const renderModalPopup = React.createElement(Popup, Object.assign({}, popupProps));
    const label = getLinkText(props);
    const payload = getPayloadObject(TelemetryEvent.AddToCart, props.telemetryContent, label, '');
    const attributes = getTelemetryAttributes(props.telemetryContent, payload);
    return (React.createElement(React.Fragment, null,
        renderModalPopup,
        React.createElement("button", Object.assign({ className: classnames('msc-add-to-cart ', props.className), "aria-label": getLinkText(props) }, attributes, { onClick: onClickHandler, disabled: props.disabled || disabled || isIntermediateState(props) || shouldShowOutOfStock(props, false) }), getLinkText(props))));
};
AddToCart.defaultProps = {
    quantity: 1
};
const getLinkText = (props) => {
    return shouldShowOutOfStock(props, false) ? props.outOfStockText : props.addToCartText;
};
const addToCartError = (props) => {
    if (!props.data || !props.data.product.RecordId) {
        return { failureReason: 'EMPTYINPUT' };
    }
    if (props.data.product.Dimensions) {
        const missingDimensions = props.data.product.Dimensions.filter(dimension => !(dimension.DimensionValue && dimension.DimensionValue.Value));
        if (missingDimensions.length > 0) {
            return { failureReason: 'MISSINGDIMENSION', missingDimensions: missingDimensions };
        }
    }
    if (shouldShowOutOfStock(props, true)) {
        const availableQuantity = (props.productAvailability && props.productAvailability.AvailableQuantity) || 0;
        const stockLeft = Math.max(availableQuantity, 0);
        return { failureReason: 'OUTOFSTOCK', stockLeft: stockLeft };
    }
    return undefined;
};
const shouldShowOutOfStock = (props, includeCurrentQuantity) => {
    if (props.context.app.config.enableStockCheck === undefined || props.context.app.config.enableStockCheck === false
        || props.isLoading || props.isUpdatingDimension || props.isAddServiceItemToCart) {
        return false;
    }
    if (!props.data || !props.data.product.RecordId) {
        return false;
    }
    if (props.data.product.Dimensions) {
        if (props.data.product.Dimensions.find(dimension => !(dimension.DimensionValue && dimension.DimensionValue.Value))) {
            return false;
        }
    }
    const includedQuantityNumber = includeCurrentQuantity && props.quantity ? props.quantity : 1;
    return (props.productAvailability
        && props.productAvailability.AvailableQuantity !== undefined
        && props.productAvailability.AvailableQuantity >= includedQuantityNumber)
        ? false : true;
};
const isIntermediateState = (props) => {
    if (props.data.product.Dimensions) {
        if (props.data.product.Dimensions.find(dimension => !(dimension.DimensionValue && dimension.DimensionValue.Value))) {
            return false;
        }
    }
    if (!props.isLoading && !props.isUpdatingDimension) {
        return false;
    }
    return true;
};
const propogateResult = (props, result) => {
    if (props.onAdd) {
        props.onAdd(result);
    }
};
const propogateError = (props, result) => {
    if (props.onError) {
        props.onError(result);
    }
};
export const AddToCartComponent = msdyn365Commerce.createComponent('AddToCart', { component: AddToCart, ...AddToCartComponentActions });
//# sourceMappingURL=add-to-cart.component.js.map