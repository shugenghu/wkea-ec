import { mount, render } from 'enzyme';
import * as React from 'react';
import { buildMockCoreContext } from '@msdyn365-commerce/core';
import * as GlobalStateActions from '@msdyn365-commerce/global-state';
import { AddToCartComponent } from '../index';
describe('AddToCart', () => {
    let mockCoreContext;
    let productDimension;
    let basicProduct;
    const outOfStockProductAvailability = { AvailableQuantity: -5 };
    const inStockProductAvailability = { AvailableQuantity: 12 };
    mockCoreContext = buildMockCoreContext({ app: { config: { hideRating: false } } });
    const telemetryContent = { pageName: 'Homepage', moduleName: 'Add to Cart', telemetry: mockCoreContext.telemetry };
    const mockActiveCart = {
        Id: 'gB8DCi6AK3mzMavh08C4P18wFDbEEyto',
        Version: 123
    };
    const mockCartState = {
        cart: mockActiveCart,
        addProductToCart: jest.fn(),
    };
    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: false, outOfStockThreshold: 5 } } });
        productDimension = { DimensionTypeValue: 0 };
        basicProduct = { RecordId: 55555 };
    });
    it('renders correctly with all params', () => {
        const productPrice = {};
        const productAvailability = {};
        const addToCart = render((React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: productAvailability, id: 'id', typeName: 'type-name', context: mockCoreContext, data: { product: productPrice }, telemetryContent: telemetryContent })));
        expect(addToCart).toMatchSnapshot();
    });
    it('Will not show out of stock when enableStockCheck app config is off', () => {
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: outOfStockProductAvailability, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });
    it('Will not show out of stock when product is service item', () => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: true, outOfStockThreshold: 5 } } });
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: outOfStockProductAvailability, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext, isAddServiceItemToCart: true }));
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });
    it('Will not show out of stock when product is missing', () => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: true, outOfStockThreshold: 5 } } });
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: outOfStockProductAvailability, data: { product: {} }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });
    it('Will not show out of stock when product dimension is missing', () => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: true, outOfStockThreshold: 5 } } });
        basicProduct.Dimensions = [productDimension];
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: outOfStockProductAvailability, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });
    it('Will not show out of stock when product availability is greater than out of stock threshold', () => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: true, outOfStockThreshold: 5 } } });
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });
    it('Will show add to cart when product availability is missing', () => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: true, outOfStockThreshold: 5 } } });
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Out of stock');
    });
    it('Will show out of stock when product availability is less than out of stock threshold', () => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: true, outOfStockThreshold: 5 } } });
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: outOfStockProductAvailability, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Out of stock');
    });
    it('Add to cart fails when no product is present', () => {
        const onAdd = jest.fn();
        const onError = jest.fn().mockImplementation((result) => {
            expect(result.failureReason).toEqual('EMPTYINPUT');
        });
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, onAdd: onAdd, onError: onError, data: { product: {} }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        button.simulate('click');
        expect(onAdd).not.toHaveBeenCalled();
        expect(onError).toHaveBeenCalled();
    });
    it('Add to cart fails when there is a missing dimension', () => {
        const onAdd = jest.fn();
        const onError = jest.fn().mockImplementation((result) => {
            expect(result.failureReason).toEqual('MISSINGDIMENSION');
            expect(result.missingDimensions).toBeDefined();
            expect(result.missingDimensions.length).toBe(1);
            expect(result.missingDimensions[0]).toEqual(productDimension);
        });
        basicProduct.Dimensions = [productDimension];
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, onAdd: onAdd, onError: onError, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        button.simulate('click');
        expect(onAdd).not.toHaveBeenCalled();
        expect(onError).toHaveBeenCalled();
    });
    it('Add to cart fails when the quantity being added is greater than the productAvailability - outOfStockThreshold', () => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: true, outOfStockThreshold: 5 } } });
        const onAdd = jest.fn();
        const onError = jest.fn().mockImplementation((result) => {
            expect(result.failureReason).toEqual('OUTOFSTOCK');
            expect(result.stockLeft).toEqual(12);
        });
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 13, productAvailability: inStockProductAvailability, onAdd: onAdd, onError: onError, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        button.simulate('click');
        expect(onAdd).not.toHaveBeenCalled();
        expect(onError).toHaveBeenCalled();
    });
    it('Passes the error from global cart state when add to cart fails', async () => {
        const onAdd = jest.fn();
        const onError = jest.fn().mockImplementation((result) => {
            expect(result.failureReason).toEqual('CARTACTIONFAILED');
            expect(result.cartActionResult).toBeDefined();
            expect(result.cartActionResult.substatus).toEqual('MAXQUANTITY');
        });
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({ status: 'FAILED', substatus: 'MAXQUANTITY' }));
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, onAdd: onAdd, onError: onError, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        button.simulate('click');
        await new Promise(resolve => setTimeout(resolve, 0));
        expect(onAdd).not.toHaveBeenCalled();
        expect(onError).toHaveBeenCalled();
    });
    it('Add to cart does not throw when onError is not passed and adding fails', () => {
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({ status: 'FAILED', substatus: 'MAXQUANTITY' }));
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        const test = () => {
            button.simulate('click');
        };
        expect(test).not.toThrow();
    });
    it('Calls onAdd when add to cart succeeds', async () => {
        const onAdd = jest.fn().mockImplementation((result) => {
            expect(result.status).toBe('SUCCESS');
            expect(result.substatus).toBe('');
        });
        const onError = jest.fn();
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({ status: 'SUCCESS', substatus: '' }));
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, onAdd: onAdd, onError: onError, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        button.simulate('click');
        await new Promise(resolve => setTimeout(resolve, 0));
        expect(onAdd).toHaveBeenCalled();
        expect(onError).not.toHaveBeenCalled();
    });
    it('Add to cart succeeds with a dimension', async () => {
        const onAdd = jest.fn();
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: true, outOfStockThreshold: 5 } } });
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({ status: 'SUCCESS', substatus: '' }));
        productDimension.DimensionValue = { RecordId: 444, Value: 'foo' };
        basicProduct.Dimensions = [productDimension];
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, onAdd: onAdd, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        button.simulate('click');
        await new Promise(resolve => setTimeout(resolve, 0));
        expect(onAdd).toHaveBeenCalled();
    });
    it('Add to cart does no throw when onAdd is not passed', () => {
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({ status: 'SUCCESS', substatus: '' }));
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, data: { product: basicProduct }, id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        const test = () => {
            button.simulate('click');
        };
        expect(test).not.toThrow();
    });
    it('Navigates to url when add to cart succeeds and navigationUrl it provided', async () => {
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({ status: 'SUCCESS', substatus: '' }));
        window.location.assign = jest.fn();
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(React.createElement(AddToCartComponent, { className: 'myFooClass', addToCartText: 'Add to cart', outOfStockText: 'Out of stock', quantity: 1, productAvailability: inStockProductAvailability, data: { product: basicProduct }, navigationUrl: 'foo', id: 'id', typeName: 'type-name', context: mockCoreContext }));
        const button = addToCart.find('button').first();
        button.simulate('click');
        await new Promise(resolve => setTimeout(resolve, 0));
        expect(window.location.assign).toHaveBeenCalledWith('foo');
    });
});
//# sourceMappingURL=add-to-cart.test.js.map