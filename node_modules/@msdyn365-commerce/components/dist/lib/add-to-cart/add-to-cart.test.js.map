{"version":3,"file":"add-to-cart.test.js","sourceRoot":"./src/","sources":["add-to-cart/add-to-cart.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { mount, render } from 'enzyme';\nimport * as React from 'react';\n\nimport { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';\nimport { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';\nimport * as GlobalStateActions from '@msdyn365-commerce/global-state';\nimport { Cart, ProductAvailableQuantity, ProductDimension, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport {AddToCartComponent} from '../index';\nimport { IAddToCartFailureResult } from './add-to-cart.component';\n\ndescribe('AddToCart', () => {\n    let mockCoreContext: ICoreContext;\n    let productDimension: ProductDimension;\n    let basicProduct: SimpleProduct;\n    const outOfStockProductAvailability = {AvailableQuantity: -5} as ProductAvailableQuantity;\n    const inStockProductAvailability = {AvailableQuantity: 12} as ProductAvailableQuantity;\n    mockCoreContext = buildMockCoreContext({app: {config: {hideRating: false}}}) as ICoreContext;\n    const telemetryContent = {  pageName: 'Homepage', moduleName: 'Add to Cart', telemetry: mockCoreContext.telemetry} as ITelemetryContent;\n    const mockActiveCart: Cart = {\n        Id: 'gB8DCi6AK3mzMavh08C4P18wFDbEEyto',\n        Version: 123\n    };\n\n    const mockCartState = {\n        cart: mockActiveCart,\n        addProductToCart: jest.fn(),\n    };\n\n    beforeEach(() => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: false, outOfStockThreshold: 5}}}) as ICoreContext;\n        productDimension = {DimensionTypeValue: 0};\n        basicProduct = {RecordId: 55555} as SimpleProduct;\n    });\n\n    it('renders correctly with all params', () => {\n        const productPrice = {} as SimpleProduct;\n        const productAvailability = {} as ProductAvailableQuantity;\n\n        const addToCart = render((\n                            <AddToCartComponent\n                                className='myFooClass'\n                                addToCartText='Add to cart'\n                                outOfStockText='Out of stock'\n                                quantity={1}\n                                productAvailability={productAvailability}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                                data={{product: productPrice}}\n                                telemetryContent={telemetryContent}\n                            />\n                            ));\n        expect(addToCart).toMatchSnapshot();\n    });\n\n    it('Will not show out of stock when enableStockCheck app config is off', () => {\n        const addToCart = mount(\n                            <AddToCartComponent\n                                className='myFooClass'\n                                addToCartText='Add to cart'\n                                outOfStockText='Out of stock'\n                                quantity={1}\n                                productAvailability={outOfStockProductAvailability}\n                                data={{product: basicProduct}}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                            />\n        );\n        const button = addToCart.find('button').first();\n        const buttonNode = button.getDOMNode();\n        expect(buttonNode.textContent).toBe('Add to cart');\n    });\n\n    it('Will not show out of stock when product is service item', () => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;\n        const addToCart = mount(\n                            <AddToCartComponent\n                                className='myFooClass'\n                                addToCartText='Add to cart'\n                                outOfStockText='Out of stock'\n                                quantity={1}\n                                productAvailability={outOfStockProductAvailability}\n                                data={{product: basicProduct}}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                                isAddServiceItemToCart={true}\n                            />\n        );\n        const button = addToCart.find('button').first();\n        const buttonNode = button.getDOMNode();\n        expect(buttonNode.textContent).toBe('Add to cart');\n    });\n\n    it('Will not show out of stock when product is missing', () => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;\n        const addToCart = mount(\n                            <AddToCartComponent\n                                className='myFooClass'\n                                addToCartText='Add to cart'\n                                outOfStockText='Out of stock'\n                                quantity={1}\n                                productAvailability={outOfStockProductAvailability}\n                                data={{product: {} as SimpleProduct}}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                            />\n        );\n        const button = addToCart.find('button').first();\n        const buttonNode = button.getDOMNode();\n        expect(buttonNode.textContent).toBe('Add to cart');\n    });\n\n    it('Will not show out of stock when product dimension is missing', () => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;\n        basicProduct.Dimensions = [productDimension];\n        const addToCart = mount(\n                            <AddToCartComponent\n                                className='myFooClass'\n                                addToCartText='Add to cart'\n                                outOfStockText='Out of stock'\n                                quantity={1}\n                                productAvailability={outOfStockProductAvailability}\n                                data={{product: basicProduct}}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                            />\n        );\n        const button = addToCart.find('button').first();\n        const buttonNode = button.getDOMNode();\n        expect(buttonNode.textContent).toBe('Add to cart');\n    });\n\n    it('Will not show out of stock when product availability is greater than out of stock threshold', () => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;\n        const addToCart = mount(\n                            <AddToCartComponent\n                                className='myFooClass'\n                                addToCartText='Add to cart'\n                                outOfStockText='Out of stock'\n                                quantity={1}\n                                productAvailability={inStockProductAvailability}\n                                data={{product: basicProduct}}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                            />\n        );\n        const button = addToCart.find('button').first();\n        const buttonNode = button.getDOMNode();\n        expect(buttonNode.textContent).toBe('Add to cart');\n    });\n\n    it('Will show add to cart when product availability is missing', () => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;\n        const addToCart = mount(\n                            <AddToCartComponent\n                                className='myFooClass'\n                                addToCartText='Add to cart'\n                                outOfStockText='Out of stock'\n                                quantity={1}\n                                data={{product: basicProduct}}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                            />\n        );\n        const button = addToCart.find('button').first();\n        const buttonNode = button.getDOMNode();\n        expect(buttonNode.textContent).toBe('Out of stock');\n    });\n\n    it('Will show out of stock when product availability is less than out of stock threshold', () => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;\n        const addToCart = mount(\n                            <AddToCartComponent\n                                className='myFooClass'\n                                addToCartText='Add to cart'\n                                outOfStockText='Out of stock'\n                                quantity={1}\n                                productAvailability={outOfStockProductAvailability}\n                                data={{product: basicProduct}}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                            />\n        );\n        const button = addToCart.find('button').first();\n        const buttonNode = button.getDOMNode();\n        expect(buttonNode.textContent).toBe('Out of stock');\n    });\n\n    it('Add to cart fails when no product is present', () => {\n        const onAdd = jest.fn();\n        const onError = jest.fn().mockImplementation((result: IAddToCartFailureResult) => {\n            expect(result.failureReason).toEqual('EMPTYINPUT');\n        });\n\n        const addToCart = mount(\n            <AddToCartComponent\n                className='myFooClass'\n                addToCartText='Add to cart'\n                outOfStockText='Out of stock'\n                quantity={1}\n                productAvailability={inStockProductAvailability}\n                onAdd={onAdd}\n                onError={onError}\n                data={{product: {} as SimpleProduct}}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n            />\n         );\n        const button = addToCart.find('button').first();\n        button.simulate('click');\n        expect(onAdd).not.toHaveBeenCalled();\n        expect(onError).toHaveBeenCalled();\n    });\n\n    it('Add to cart fails when there is a missing dimension', () => {\n        const onAdd = jest.fn();\n        const onError = jest.fn().mockImplementation((result: IAddToCartFailureResult) => {\n            expect(result.failureReason).toEqual('MISSINGDIMENSION');\n            expect(result.missingDimensions).toBeDefined();\n            expect(result.missingDimensions!.length).toBe(1);\n            expect(result.missingDimensions![0]).toEqual(productDimension);\n        });\n\n        basicProduct.Dimensions = [productDimension];\n\n        const addToCart = mount(\n            <AddToCartComponent\n                className='myFooClass'\n                addToCartText='Add to cart'\n                outOfStockText='Out of stock'\n                quantity={1}\n                productAvailability={inStockProductAvailability}\n                onAdd={onAdd}\n                onError={onError}\n                data={{product: basicProduct}}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n            />\n        );\n        const button = addToCart.find('button').first();\n        button.simulate('click');\n        expect(onAdd).not.toHaveBeenCalled();\n        expect(onError).toHaveBeenCalled();\n    });\n\n    it('Add to cart fails when the quantity being added is greater than the productAvailability - outOfStockThreshold', () => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;\n        const onAdd = jest.fn();\n        const onError = jest.fn().mockImplementation((result: IAddToCartFailureResult) => {\n            expect(result.failureReason).toEqual('OUTOFSTOCK');\n            expect(result.stockLeft).toEqual(12);\n        });\n        const addToCart = mount(\n            <AddToCartComponent\n                className='myFooClass'\n                addToCartText='Add to cart'\n                outOfStockText='Out of stock'\n                quantity={13}\n                productAvailability={inStockProductAvailability}\n                onAdd={onAdd}\n                onError={onError}\n                data={{product: basicProduct}}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n            />\n        );\n\n        const button = addToCart.find('button').first();\n        button.simulate('click');\n        expect(onAdd).not.toHaveBeenCalled();\n        expect(onError).toHaveBeenCalled();\n    });\n\n    it('Passes the error from global cart state when add to cart fails', async () => {\n        const onAdd = jest.fn();\n        const onError = jest.fn().mockImplementation((result: IAddToCartFailureResult) => {\n            expect(result.failureReason).toEqual('CARTACTIONFAILED');\n            expect(result.cartActionResult).toBeDefined();\n            expect(result.cartActionResult!.substatus).toEqual('MAXQUANTITY');\n        });\n        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'FAILED', substatus: 'MAXQUANTITY'}));\n        // @ts-ignore\n        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));\n        const addToCart = mount(\n                <AddToCartComponent\n                    className='myFooClass'\n                    addToCartText='Add to cart'\n                    outOfStockText='Out of stock'\n                    quantity={1}\n                    productAvailability={inStockProductAvailability}\n                    onAdd={onAdd}\n                    onError={onError}\n                    data={{product: basicProduct}}\n                    id='id'\n                    typeName='type-name'\n                    context={mockCoreContext}\n                    />\n            );\n        const button = addToCart!.find('button').first();\n        button.simulate('click');\n\n        await new Promise(resolve => setTimeout(resolve, 0));\n\n        expect(onAdd).not.toHaveBeenCalled();\n        expect(onError).toHaveBeenCalled();\n    });\n\n    it('Add to cart does not throw when onError is not passed and adding fails', () => {\n        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'FAILED', substatus: 'MAXQUANTITY'}));\n\n        // @ts-ignore\n        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));\n        const addToCart = mount(\n                <AddToCartComponent\n                    className='myFooClass'\n                    addToCartText='Add to cart'\n                    outOfStockText='Out of stock'\n                    quantity={1}\n                    productAvailability={inStockProductAvailability}\n                    data={{product: basicProduct}}\n                    id='id'\n                    typeName='type-name'\n                    context={mockCoreContext}\n                    />\n            );\n        const button = addToCart!.find('button').first();\n        const test = () => {\n            button.simulate('click');\n        };\n        expect(test).not.toThrow();\n    });\n\n    it('Calls onAdd when add to cart succeeds', async () => {\n        const onAdd = jest.fn().mockImplementation((result: GlobalStateActions.ICartActionResult) => {\n            expect(result.status).toBe('SUCCESS');\n            expect(result.substatus).toBe('');\n        });\n        const onError = jest.fn();\n        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'SUCCESS', substatus: ''}));\n        // @ts-ignore\n        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));\n        const addToCart = mount(\n                <AddToCartComponent\n                    className='myFooClass'\n                    addToCartText='Add to cart'\n                    outOfStockText='Out of stock'\n                    quantity={1}\n                    productAvailability={inStockProductAvailability}\n                    onAdd={onAdd}\n                    onError={onError}\n                    data={{product: basicProduct}}\n                    id='id'\n                    typeName='type-name'\n                    context={mockCoreContext}\n                    />\n            );\n        const button = addToCart!.find('button').first();\n        button.simulate('click');\n\n        await new Promise(resolve => setTimeout(resolve, 0));\n\n        expect(onAdd).toHaveBeenCalled();\n        expect(onError).not.toHaveBeenCalled();\n    });\n\n    it('Add to cart succeeds with a dimension', async () => {\n        const onAdd = jest.fn();\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;\n        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'SUCCESS', substatus: ''}));\n        productDimension.DimensionValue = {RecordId: 444, Value: 'foo'};\n        basicProduct.Dimensions = [productDimension];\n\n        // @ts-ignore\n        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));\n        const addToCart = mount(\n                <AddToCartComponent\n                    className='myFooClass'\n                    addToCartText='Add to cart'\n                    outOfStockText='Out of stock'\n                    quantity={1}\n                    productAvailability={inStockProductAvailability}\n                    onAdd={onAdd}\n                    data={{product: basicProduct}}\n                    id='id'\n                    typeName='type-name'\n                    context={mockCoreContext}\n                    />\n            );\n        const button = addToCart!.find('button').first();\n        button.simulate('click');\n\n        await new Promise(resolve => setTimeout(resolve, 0));\n\n        expect(onAdd).toHaveBeenCalled();\n    });\n\n    it('Add to cart does no throw when onAdd is not passed', () => {\n        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'SUCCESS', substatus: ''}));\n\n        // @ts-ignore\n        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));\n        const addToCart = mount(\n                <AddToCartComponent\n                    className='myFooClass'\n                    addToCartText='Add to cart'\n                    outOfStockText='Out of stock'\n                    quantity={1}\n                    productAvailability={inStockProductAvailability}\n                    data={{product: basicProduct}}\n                    id='id'\n                    typeName='type-name'\n                    context={mockCoreContext}\n                    />\n            );\n        const button = addToCart!.find('button').first();\n        const test = () => {\n            button.simulate('click');\n        };\n        expect(test).not.toThrow();\n    });\n\n    it('Navigates to url when add to cart succeeds and navigationUrl it provided', async () => {\n        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'SUCCESS', substatus: ''}));\n        window.location.assign = jest.fn();\n        // @ts-ignore\n        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));\n        const addToCart = mount(\n                <AddToCartComponent\n                    className='myFooClass'\n                    addToCartText='Add to cart'\n                    outOfStockText='Out of stock'\n                    quantity={1}\n                    productAvailability={inStockProductAvailability}\n                    data={{product: basicProduct}}\n                    navigationUrl={'foo'}\n                    id='id'\n                    typeName='type-name'\n                    context={mockCoreContext}\n                    />\n            );\n        const button = addToCart!.find('button').first();\n        button.simulate('click');\n\n        await new Promise(resolve => setTimeout(resolve, 0));\n\n        expect(window.location.assign).toHaveBeenCalledWith('foo');\n    });\n});"]}