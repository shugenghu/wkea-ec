import { render } from 'enzyme';
import * as React from 'react';
import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { SaveCartToOrderTemplateComponent } from './save-cart-to-order-template.component';
describe('SaveCartToOrderTemplateComponent', () => {
    let mockCoreContext;
    const productListLine = {
        ProductListId: 'product-list-id',
        LineId: 'line-id',
        ProductId: 42,
        Quantity: 12,
        UnitOfMeasure: 'ea'
    };
    const emptyOrderTemplate = {
        productList: {
            Id: 'id'
        },
        orderTemplateLines: [],
        totalLines: 0
    };
    const orderTemplate = {
        productList: {
            Id: 'id',
            ProductListLines: [productListLine]
        },
        orderTemplateLines: [{ productListLine: productListLine }],
        totalLines: 0
    };
    const cartLine = { ProductId: 3, Quantity: 12, UnitOfMeasureSymbol: 'ea' };
    const emptyCartLine = {};
    const b2bCustomer = {
        AccountNumber: 'customer-id',
        IsB2b: true
    };
    const nonB2bCustomer = {
        AccountNumber: 'customer-id'
    };
    const addToOrderTemplateDialogResources = {
        addToOrderTemplateHeader: 'addToOrderTemplateHeader',
        noOrderTemplatesMessage: 'noOrderTemplatesMessage',
        noOrderTemplatesDescription: 'noOrderTemplatesDescription',
        createAnOrderTemplateButtonText: 'createAnOrderTemplateButtonText',
        createNewOrderTemplateButtonText: 'createNewOrderTemplateButtonText',
        cancelOrderTemplateCreationButtonText: 'cancelOrderTemplateCreationButtonText',
        selectTemplatesText: 'selectTemplatesText',
        addToTemplateButtonText: 'addToTemplateButtonText',
        lineItemsText: 'lineItemsText'
    };
    const createOrderTemplateDialogResources = {
        orderTemplateHeaderLabel: 'createOrderTemplateHeader',
        orderTemplateTitleLabel: 'orderTemplateTitle',
        orderTemplateNameAriaLabel: 'orderTemplateNameAriaLabel',
        orderTemplateDescription: 'createOrderTemplateDescription',
        defaultOrderTemplateName: 'defaultOrderTemplateName',
        orderTemplateButtonLabel: 'createOrderTemplateButtonText',
        orderTemplateCancelButtonLabel: 'cancelNewOrderTemplateCreationButtonText'
    };
    const linesAddedToOrderTemplateDialogResources = {
        viewOrderTemplateButtonText: 'viewOrderTemplateButtonText',
        continueShoppingButtonText: 'continueShoppingButtonText',
        linesAddedToOrderTemplateHeaderItemsOneText: 'itemAddedToOrderTemplateHeaderItemOneText',
        linesAddedToOrderTemplateHeaderItemsFormatText: 'itemAddedToOrderTemplateHeaderItemFormatText',
        linesAddedToOrderTemplateHeaderLinesOneText: 'itemAddedToOrderTemplateHeaderItemOneText',
        linesAddedToOrderTemplateHeaderLinesFormatText: 'itemAddedToOrderTemplateHeaderItemFormatText',
        linesAddedToOrderTemplateHeaderMessageText: 'itemAddedToOrderTemplateHeaderMessageText'
    };
    const createOrderTemplateFromCartButton = 'createOrderTemplateFromCartButton';
    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: false, outOfStockThreshold: 5 } } });
    });
    it('renders correctly with all params', () => {
        const saveCartToOrderTemplateComponent = render((React.createElement(SaveCartToOrderTemplateComponent, { context: mockCoreContext, className: 'class-name', addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, createOrderTemplateFromCartButton: createOrderTemplateFromCartButton, linesAddedToOrderTemplateDialogResources: linesAddedToOrderTemplateDialogResources, id: 'id', typeName: 'typeName', data: {
                orderTemplates: [orderTemplate],
                customerInformation: b2bCustomer,
                cartLines: [cartLine]
            } })));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });
    it('renders correctly with non b2b customer', () => {
        const saveCartToOrderTemplateComponent = render((React.createElement(SaveCartToOrderTemplateComponent, { context: mockCoreContext, className: 'class-name', addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, createOrderTemplateFromCartButton: createOrderTemplateFromCartButton, linesAddedToOrderTemplateDialogResources: linesAddedToOrderTemplateDialogResources, id: 'id', typeName: 'typeName', data: {
                orderTemplates: [orderTemplate],
                customerInformation: nonB2bCustomer,
                cartLines: [cartLine]
            } })));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });
    it('renders correctly with empty order templates', () => {
        const saveCartToOrderTemplateComponent = render((React.createElement(SaveCartToOrderTemplateComponent, { context: mockCoreContext, className: 'class-name', addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, createOrderTemplateFromCartButton: createOrderTemplateFromCartButton, linesAddedToOrderTemplateDialogResources: linesAddedToOrderTemplateDialogResources, id: 'id', typeName: 'typeName', data: {
                orderTemplates: [],
                customerInformation: b2bCustomer,
                cartLines: [cartLine]
            } })));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });
    it('renders correctly with empty order template', () => {
        const saveCartToOrderTemplateComponent = render((React.createElement(SaveCartToOrderTemplateComponent, { context: mockCoreContext, className: 'class-name', addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, createOrderTemplateFromCartButton: createOrderTemplateFromCartButton, linesAddedToOrderTemplateDialogResources: linesAddedToOrderTemplateDialogResources, id: 'id', typeName: 'typeName', data: {
                orderTemplates: [emptyOrderTemplate],
                customerInformation: b2bCustomer,
                cartLines: [cartLine]
            } })));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });
    it('renders correctly with empty cart lines', () => {
        const saveCartToOrderTemplateComponent = render((React.createElement(SaveCartToOrderTemplateComponent, { context: mockCoreContext, className: 'class-name', addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, createOrderTemplateFromCartButton: createOrderTemplateFromCartButton, linesAddedToOrderTemplateDialogResources: linesAddedToOrderTemplateDialogResources, id: 'id', typeName: 'typeName', data: {
                orderTemplates: [orderTemplate],
                customerInformation: b2bCustomer,
                cartLines: []
            } })));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });
    it('renders correctly with empty cart line', () => {
        const saveCartToOrderTemplateComponent = render((React.createElement(SaveCartToOrderTemplateComponent, { context: mockCoreContext, className: 'class-name', addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, createOrderTemplateFromCartButton: createOrderTemplateFromCartButton, linesAddedToOrderTemplateDialogResources: linesAddedToOrderTemplateDialogResources, id: 'id', typeName: 'typeName', data: {
                orderTemplates: [orderTemplate],
                customerInformation: b2bCustomer,
                cartLines: [emptyCartLine]
            } })));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });
});
//# sourceMappingURL=save-cart-to-order-template.test.js.map