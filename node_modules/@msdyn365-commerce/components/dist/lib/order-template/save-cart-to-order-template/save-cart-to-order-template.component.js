import { FullProductInput, getFullProducts, getProductDetailsCriteriaFromActionInput } from '@msdyn365-commerce-modules/retail-actions';
import { Button } from '@msdyn365-commerce-modules/utilities';
import { msdyn365Commerce } from '@msdyn365-commerce/core';
import { addProductListLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';
import React, { useState } from 'react';
import { AddToOrderTemplateDialog } from '../add-to-order-template-dialog/add-to-order-template-dialog.component';
import { LinesAddedToOrderTemplateDialog } from '../lines-added-to-order-template-dialog/lines-added-to-order-template-dialog.component';
const onDismiss = (state) => {
    state.setContent({ color: 'success', showAlert: false });
};
const SaveCartToOrderTemplateActions = {
    onDismiss: onDismiss
};
const SaveCartToOrderTemplate = (props) => {
    if (!props.data.customerInformation?.IsB2b) {
        return null;
    }
    const [chosenOrderTemplate, setChosenOrderTemplate] = useState(undefined);
    const [addedProducts, setAddedProducts] = useState(undefined);
    const [addToOrderTemplateModalOpen, setAddToOrderTemplateModalOpen] = useState(false);
    const [linesAddedToOrderTemplateDialogOpen, setLinesAddedToOrderTemplateDialogOpen] = useState(false);
    const [addedLinesCount, setAddedLinesCount] = useState(0);
    const [addedItemsCount, setAddedItemsCount] = useState(0);
    const { addToOrderTemplateDialogResources, createOrderTemplateDialogResources, createOrderTemplateFromCartButton } = props;
    const onOrderTemplateSelected = async (orderTemplate) => {
        setChosenOrderTemplate(orderTemplate);
        const productListLines = props.data.cartLines.map(cartLine => {
            const productListLineToAdd = {
                ProductListId: orderTemplate.Id,
                ProductId: cartLine.ProductId,
                Quantity: cartLine.Quantity,
                UnitOfMeasure: cartLine.UnitOfMeasureSymbol
            };
            return productListLineToAdd;
        });
        const addedLines = await addProductListLinesAsync({ callerContext: props.context.actionContext }, orderTemplate.Id, productListLines);
        const productInputs = [];
        addedLines.forEach(listLine => {
            if (listLine.ProductId) {
                productInputs.push(new FullProductInput(listLine.ProductId, props.context.actionContext.requestContext.apiSettings, getProductDetailsCriteriaFromActionInput(props.context.actionContext)));
            }
        });
        const products = await getFullProducts(productInputs, props.context.actionContext);
        setAddedLinesCount(addedLines.length);
        setAddedItemsCount(addedLines.map(line => line.Quantity || 1).reduce((firstQuantity, secondQuantity) => firstQuantity + secondQuantity));
        setAddedProducts(products);
        setAddToOrderTemplateModalOpen(false);
        setTimeout(() => {
            setLinesAddedToOrderTemplateDialogOpen(true);
        }, 500);
    };
    const onSaveCartToOrderTemplateClick = () => {
        setAddToOrderTemplateModalOpen(true);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(AddToOrderTemplateDialog, { className: 'msc-add-to-order-template-dialog', modalOpen: addToOrderTemplateModalOpen, setModalOpen: setAddToOrderTemplateModalOpen, context: props.context, id: props.id, typeName: props.typeName, data: { orderTemplates: props.data.orderTemplates }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, onOrderTemplateSelected: onOrderTemplateSelected }),
        chosenOrderTemplate && addedProducts && React.createElement(LinesAddedToOrderTemplateDialog, { className: 'msc-lines-added-to-order-template-dialog', id: props.id, typeName: props.typeName, context: props.context, dialogStrings: props.linesAddedToOrderTemplateDialogResources, data: {
                linesCount: addedLinesCount,
                itemsCount: addedItemsCount,
                orderTemplate: chosenOrderTemplate,
                products: addedProducts
            }, modalOpen: linesAddedToOrderTemplateDialogOpen }),
        React.createElement(Button, { className: 'msc-cart__btn-addcarttotemplate', onClick: onSaveCartToOrderTemplateClick, title: createOrderTemplateFromCartButton }, createOrderTemplateFromCartButton)));
};
export const SaveCartToOrderTemplateComponent = msdyn365Commerce.createComponent('SaveCartToOrderTemplate', { component: SaveCartToOrderTemplate, ...SaveCartToOrderTemplateActions });
//# sourceMappingURL=save-cart-to-order-template.component.js.map