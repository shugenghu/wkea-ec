{"version":3,"file":"save-cart-to-order-template.component.js","sourceRoot":"./src/","sources":["order-template/save-cart-to-order-template/save-cart-to-order-template.component.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,eAAe,EAAE,wCAAwC,EAAE,MAAM,2CAA2C,CAAC;AAExI,OAAO,EAAE,MAAM,EAAE,MAAM,sCAAsC,CAAC;AAE9D,OAAO,EAA+B,gBAAgB,EAAE,MAAM,yBAAyB,CAAC;AAExF,OAAO,EAAE,wBAAwB,EAAE,MAAM,4EAA4E,CAAC;AACtH,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,EAAE,wBAAwB,EAAsC,MAAM,wEAAwE,CAAC;AACtJ,OAAO,EAA6C,+BAA+B,EAAE,MAAM,wFAAwF,CAAC;AAsCpL,MAAM,SAAS,GAAG,CAAC,KAA2C,EAAQ,EAAE;IACpE,KAAK,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF,MAAM,8BAA8B,GAAG;IACnC,SAAS,EAAE,SAAS;CACvB,CAAC;AAGF,MAAM,uBAAuB,GAAqD,CAAC,KAA6C,EAAE,EAAE;IAChI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,EAAE;QACxC,OAAO,IAAI,CAAC;KACf;IAED,MAAM,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,GAAG,QAAQ,CAA0B,SAAS,CAAC,CAAC;IACnG,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAA4B,SAAS,CAAC,CAAC;IACzF,MAAM,CAAC,2BAA2B,EAAE,8BAA8B,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtF,MAAM,CAAC,mCAAmC,EAAE,sCAAsC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtG,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC1D,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE1D,MAAM,EACF,iCAAiC,EAAE,kCAAkC,EACrE,iCAAiC,EACpC,GAAG,KAAK,CAAC;IAEV,MAAM,uBAAuB,GAAG,KAAK,EAAE,aAA0B,EAAE,EAAE;QACjE,sBAAsB,CAAC,aAAa,CAAC,CAAC;QACtC,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAEzD,MAAM,oBAAoB,GAAoB;gBAC1C,aAAa,EAAE,aAAa,CAAC,EAAE;gBAC/B,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gBAC3B,aAAa,EAAE,QAAQ,CAAC,mBAAmB;aAC9C,CAAC;YACF,OAAO,oBAAoB,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,MAAM,wBAAwB,CAAC,EAAE,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;QACtI,MAAM,aAAa,GAAuB,EAAE,CAAC;QAC7C,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC1B,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACpB,aAAa,CAAC,IAAI,CAAC,IAAI,gBAAgB,CACnC,QAAQ,CAAC,SAAS,EAClB,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW,EACtD,wCAAwC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;aAC/E;QACL,CAAC,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEnF,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACtC,kBAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,cAAc,EAAE,EAAE,CAAC,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC;QACzI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAE3B,8BAA8B,CAAC,KAAK,CAAC,CAAC;QACtC,UAAU,CAAC,GAAG,EAAE;YACZ,sCAAsC,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC,CAAC;IAEF,MAAM,8BAA8B,GAAG,GAAG,EAAE;QACxC,8BAA8B,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,OAAO,CACH,oBAAC,KAAK,CAAC,QAAQ;QACX,oBAAC,wBAAwB,IACrB,SAAS,EAAE,kCAAkC,EAC7C,SAAS,EAAE,2BAA2B,EACtC,YAAY,EAAE,8BAA8B,EAC5C,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,EAAE,EAAE,KAAK,CAAC,EAAE,EACZ,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,EAAE,cAAc,EAAE,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,EACnD,iCAAiC,EAAE,iCAAiC,EACpE,kCAAkC,EAAE,kCAAkC,EACtE,uBAAuB,EAAE,uBAAuB,GAClD;QAEE,mBAAmB,IAAI,aAAa,IAAI,oBAAC,+BAA+B,IACpE,SAAS,EAAE,0CAA0C,EACrD,EAAE,EAAE,KAAK,CAAC,EAAE,EACZ,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,aAAa,EAAE,KAAK,CAAC,wCAAwC,EAC7D,IAAI,EAAE;gBACF,UAAU,EAAE,eAAe;gBAC3B,UAAU,EAAE,eAAe;gBAC3B,aAAa,EAAE,mBAAmB;gBAClC,QAAQ,EAAE,aAAa;aAC1B,EACD,SAAS,EAAE,mCAAmC,GAChD;QAEN,oBAAC,MAAM,IAAC,SAAS,EAAE,iCAAiC,EAAE,OAAO,EAAE,8BAA8B,EAAE,KAAK,EAAE,iCAAiC,IAAG,iCAAiC,CAAU,CACxK,CACpB,CAAC;AACN,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,gCAAgC,GAAoE,gBAAgB,CAAC,eAAe,CAC7I,yBAAyB,EACzB,EAAE,SAAS,EAAE,uBAAuB,EAAE,GAAG,8BAA8B,EAAE,CAC5E,CAAC","sourcesContent":["import { FullProductInput, getFullProducts, getProductDetailsCriteriaFromActionInput } from '@msdyn365-commerce-modules/retail-actions';\nimport { OrderTemplate } from '@msdyn365-commerce-modules/retail-actions';\nimport { Button } from '@msdyn365-commerce-modules/utilities';\nimport { FullProduct } from '@msdyn365-commerce/commerce-entities';\nimport { IComponent, IComponentProps, msdyn365Commerce } from '@msdyn365-commerce/core';\nimport { CartLine, Customer, ProductList, ProductListLine } from '@msdyn365-commerce/retail-proxy';\nimport { addProductListLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductListsDataActions.g';\nimport React, { useState } from 'react';\nimport { AddToOrderTemplateDialog, IAddToOrderTemplateDialogResources } from '../add-to-order-template-dialog/add-to-order-template-dialog.component';\nimport { ILinesAddedToOrderTemplateDialogResources, LinesAddedToOrderTemplateDialog } from '../lines-added-to-order-template-dialog/lines-added-to-order-template-dialog.component';\nimport { IOrderTemplateNameDialogResources } from '../order-template-name-dialog/order-template-name-dialog.component';\n\nexport interface ISaveCartToOrderTemplateComponentProps extends IComponentProps<ISaveCartToOrderTemplateData> {\n    className?: string;\n\n    addToOrderTemplateDialogResources: IAddToOrderTemplateDialogResources;\n    createOrderTemplateDialogResources: IOrderTemplateNameDialogResources;\n    linesAddedToOrderTemplateDialogResources: ILinesAddedToOrderTemplateDialogResources;\n\n    createOrderTemplateFromCartButton: string;\n}\n\ninterface ISaveCartToOrderTemplateData {\n    orderTemplates: OrderTemplate[];\n    cartLines: CartLine[];\n\n    customerInformation?: Customer;\n}\n\ninterface ISaveCartToOrderTemplateContentState {\n    showAlert?: boolean;\n    orderTemplateTextMessage?: string;\n    color?: string;\n}\n\ninterface ISaveCartToOrderTemplateStateManager {\n    waiting: boolean;\n    content: ISaveCartToOrderTemplateContentState;\n\n    setWaiting(newWaiting: boolean): void;\n    setContent(newContent: ISaveCartToOrderTemplateContentState): void;\n}\n\nexport interface ISaveCartToOrderTemplateComponent extends IComponent<ISaveCartToOrderTemplateComponentProps> {\n    onClick(): (event: React.MouseEvent<HTMLElement>, props: ISaveCartToOrderTemplateComponentProps, state: ISaveCartToOrderTemplateStateManager) => void;\n}\n\nconst onDismiss = (state: ISaveCartToOrderTemplateStateManager): void => {\n    state.setContent({ color: 'success', showAlert: false });\n};\n\nconst SaveCartToOrderTemplateActions = {\n    onDismiss: onDismiss\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst SaveCartToOrderTemplate: React.FC<ISaveCartToOrderTemplateComponentProps> = (props: ISaveCartToOrderTemplateComponentProps) => {\n    if (!props.data.customerInformation?.IsB2b) {\n        return null;\n    }\n\n    const [chosenOrderTemplate, setChosenOrderTemplate] = useState<ProductList | undefined>(undefined);\n    const [addedProducts, setAddedProducts] = useState<FullProduct[] | undefined>(undefined);\n    const [addToOrderTemplateModalOpen, setAddToOrderTemplateModalOpen] = useState(false);\n    const [linesAddedToOrderTemplateDialogOpen, setLinesAddedToOrderTemplateDialogOpen] = useState(false);\n    const [addedLinesCount, setAddedLinesCount] = useState(0);\n    const [addedItemsCount, setAddedItemsCount] = useState(0);\n\n    const {\n        addToOrderTemplateDialogResources, createOrderTemplateDialogResources,\n        createOrderTemplateFromCartButton\n    } = props;\n\n    const onOrderTemplateSelected = async (orderTemplate: ProductList) => {\n        setChosenOrderTemplate(orderTemplate);\n        const productListLines = props.data.cartLines.map(cartLine => {\n            // tslint:disable-next-line:no-unnecessary-local-variable\n            const productListLineToAdd: ProductListLine = {\n                ProductListId: orderTemplate.Id,\n                ProductId: cartLine.ProductId,\n                Quantity: cartLine.Quantity,\n                UnitOfMeasure: cartLine.UnitOfMeasureSymbol\n            };\n            return productListLineToAdd;\n        });\n\n        const addedLines = await addProductListLinesAsync({ callerContext: props.context.actionContext }, orderTemplate.Id, productListLines);\n        const productInputs: FullProductInput[] = [];\n        addedLines.forEach(listLine => {\n            if (listLine.ProductId) {\n                productInputs.push(new FullProductInput(\n                    listLine.ProductId,\n                    props.context.actionContext.requestContext.apiSettings,\n                    getProductDetailsCriteriaFromActionInput(props.context.actionContext)));\n            }\n        });\n        const products = await getFullProducts(productInputs, props.context.actionContext);\n\n        setAddedLinesCount(addedLines.length);\n        setAddedItemsCount(addedLines.map(line => line.Quantity || 1).reduce((firstQuantity, secondQuantity) => firstQuantity + secondQuantity));\n        setAddedProducts(products);\n\n        setAddToOrderTemplateModalOpen(false);\n        setTimeout(() => {\n            setLinesAddedToOrderTemplateDialogOpen(true);\n        }, 500); // tslint:disable-line:align\n    };\n\n    const onSaveCartToOrderTemplateClick = () => {\n        setAddToOrderTemplateModalOpen(true);\n    };\n\n    return (\n        <React.Fragment>\n            <AddToOrderTemplateDialog\n                className={'msc-add-to-order-template-dialog'}\n                modalOpen={addToOrderTemplateModalOpen}\n                setModalOpen={setAddToOrderTemplateModalOpen}\n                context={props.context}\n                id={props.id}\n                typeName={props.typeName}\n                data={{ orderTemplates: props.data.orderTemplates }}\n                addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}\n                createOrderTemplateDialogResources={createOrderTemplateDialogResources}\n                onOrderTemplateSelected={onOrderTemplateSelected}\n            />\n            {\n                chosenOrderTemplate && addedProducts && <LinesAddedToOrderTemplateDialog\n                    className={'msc-lines-added-to-order-template-dialog'}\n                    id={props.id}\n                    typeName={props.typeName}\n                    context={props.context}\n                    dialogStrings={props.linesAddedToOrderTemplateDialogResources}\n                    data={{\n                        linesCount: addedLinesCount,\n                        itemsCount: addedItemsCount,\n                        orderTemplate: chosenOrderTemplate,\n                        products: addedProducts\n                    }}\n                    modalOpen={linesAddedToOrderTemplateDialogOpen}\n                />\n            }\n            <Button className={'msc-cart__btn-addcarttotemplate'} onClick={onSaveCartToOrderTemplateClick} title={createOrderTemplateFromCartButton}>{createOrderTemplateFromCartButton}</Button>\n        </React.Fragment>\n    );\n};\n\n// @ts-ignore\nexport const SaveCartToOrderTemplateComponent: React.FunctionComponent<ISaveCartToOrderTemplateComponentProps> = msdyn365Commerce.createComponent<ISaveCartToOrderTemplateComponent>(\n    'SaveCartToOrderTemplate',\n    { component: SaveCartToOrderTemplate, ...SaveCartToOrderTemplateActions }\n);"]}