import { createOrderTemplate, CreateOrderTemplateInput, updateOrderTemplateHeader, UpdateOrderTemplateHeaderInput } from '@msdyn365-commerce-modules/retail-actions';
import { Button, Modal, ModalBody, ModalFooter, ModalHeader } from '@msdyn365-commerce-modules/utilities';
import React, { useState } from 'react';
export const OrderTemplateNameDialog = (dialogProps) => {
    const { isUpdateDialog, existingOrderTemplate, dialogStrings, className, modalOpen, setModalOpen, onCancel, onSuccess, context } = dialogProps;
    if (!dialogStrings) {
        return null;
    }
    const [orderTemplateName, setOrderTemplateName] = useState(dialogProps.orderTemplateName);
    const cancel = () => {
        setModalOpen(false);
        onCancel();
    };
    const submit = async () => {
        dialogProps.orderTemplateName = orderTemplateName || dialogStrings.defaultOrderTemplateName;
        if (isUpdateDialog) {
            if (existingOrderTemplate) {
                existingOrderTemplate.Name = dialogProps.orderTemplateName;
                const input = new UpdateOrderTemplateHeaderInput(existingOrderTemplate);
                const orderTemplate = await updateOrderTemplateHeader(input, context.actionContext);
                setModalOpen(false);
                await onSuccess(orderTemplate);
            }
            else {
                context.telemetry.error('You need to pass ProductList instance for update.');
                throw Error('Unexpected error: existing order template was not set.');
            }
        }
        else {
            const input = new CreateOrderTemplateInput(dialogProps.orderTemplateName);
            const orderTemplate = await createOrderTemplate(input, context.actionContext);
            setModalOpen(false);
            await onSuccess(orderTemplate);
        }
    };
    const updateOrderTemplateName = (event) => {
        setOrderTemplateName(event.target.value);
    };
    let inputFieldRef;
    const setFocus = () => { inputFieldRef?.focus(); };
    return (React.createElement(Modal, { isOpen: modalOpen, className: `${className}`, onOpened: setFocus },
        React.createElement(ModalHeader, { className: `${className}__dialog__header`, toggle: cancel },
            React.createElement("span", null, dialogStrings.orderTemplateHeaderLabel)),
        React.createElement(ModalBody, { className: `${className}__dialog__body` },
            React.createElement("div", { className: `${className}__dialog__content` },
                React.createElement("label", { className: `${className}__dialog__order-template-name-label`, htmlFor: `${className}__dialog__order-template-name` }, dialogStrings.orderTemplateTitleLabel),
                React.createElement("input", { id: `${className}__dialog__order-template-name`, className: `${className}__dialog__order-template-name`, type: 'text', "aria-label": dialogStrings.orderTemplateNameAriaLabel, placeholder: dialogStrings.defaultOrderTemplateName, onChange: updateOrderTemplateName, value: orderTemplateName, maxLength: 250, ref: (inputRef) => { inputFieldRef = inputRef; } }),
                React.createElement("div", { className: `${className}__dialog__description` }, dialogStrings.orderTemplateDescription))),
        React.createElement(ModalFooter, { className: `${className}__dialog__footer` },
            React.createElement(Button, { className: `${className}__dialog__create-order-template-button`, title: dialogStrings.orderTemplateButtonLabel, onClick: submit }, dialogStrings.orderTemplateButtonLabel),
            React.createElement(Button, { className: `${className}__dialog__cancel-button`, title: dialogStrings.orderTemplateCancelButtonLabel, onClick: cancel }, dialogStrings.orderTemplateCancelButtonLabel))));
};
//# sourceMappingURL=order-template-name-dialog.component.js.map