{"version":3,"file":"order-template-name-dialog.test.js","sourceRoot":"./src/","sources":["order-template/order-template-name-dialog/order-template-name-dialog.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,oBAAoB,EAAgB,MAAM,yBAAyB,CAAC;AAC7E,OAAO,EAAqC,uBAAuB,EAAE,MAAM,wCAAwC,CAAC;AAEpH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACrC,IAAI,eAA6B,CAAC;IAClC,MAAM,kCAAkC,GAAsC;QAC1E,wBAAwB,EAAE,2BAA2B;QACrD,uBAAuB,EAAE,oBAAoB;QAC7C,0BAA0B,EAAE,4BAA4B;QACxD,wBAAwB,EAAE,gCAAgC;QAC1D,wBAAwB,EAAE,0BAA0B;QACpD,wBAAwB,EAAE,+BAA+B;QACzD,8BAA8B,EAAE,0CAA0C;KAC7E,CAAC;IACF,MAAM,cAAc,GAAG,CAAC,QAAiB,EAAE,EAAE;QACzC,OAAO;IACX,CAAC,CAAC;IACF,MAAM,QAAQ,GAAG,GAAG,EAAE;QAClB,OAAO;IACX,CAAC,CAAC;IACF,MAAM,SAAS,GAAG,KAAK,IAAI,EAAE;QACzB,OAAO;IACX,CAAC,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACZ,eAAe,GAAG,oBAAoB,CAAC,EAAC,GAAG,EAAE,EAAC,MAAM,EAAE,EAAC,gBAAgB,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC,EAAC,EAAC,EAAC,CAAiB,CAAC;IAC/H,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACzC,MAAM,wBAAwB,GAAG,MAAM,CAAC,CACpC,oBAAC,uBAAuB,IACpB,EAAE,EAAC,IAAI,EACP,QAAQ,EAAC,WAAW,EACpB,OAAO,EAAE,eAAe,EACxB,IAAI,EAAE,EAAE,EACR,SAAS,EAAE,KAAK,EAChB,cAAc,EAAE,KAAK,EACrB,YAAY,EAAE,cAAc,EAC5B,SAAS,EAAC,YAAY,EACtB,aAAa,EAAE,kCAAkC,EACjD,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,GACtB,CACL,CAAC,CAAC;QACH,MAAM,CAAC,wBAAwB,CAAC,CAAC,eAAe,EAAE,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QACxD,MAAM,wBAAwB,GAAG,MAAM,CAAC,CACpC,oBAAC,uBAAuB,IACpB,EAAE,EAAC,IAAI,EACP,QAAQ,EAAC,WAAW,EACpB,OAAO,EAAE,eAAe,EACxB,IAAI,EAAE,EAAE,EACR,SAAS,EAAE,IAAI,EACf,cAAc,EAAE,KAAK,EACrB,YAAY,EAAE,cAAc,EAC5B,SAAS,EAAC,YAAY,EACtB,aAAa,EAAE,kCAAkC,EACjD,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,GACtB,CACL,CAAC,CAAC;QACH,MAAM,CAAC,wBAAwB,CAAC,CAAC,eAAe,EAAE,CAAC;IACvD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { render } from 'enzyme';\nimport * as React from 'react';\n\nimport { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';\nimport { IOrderTemplateNameDialogResources, OrderTemplateNameDialog } from './order-template-name-dialog.component';\n\ndescribe('OrderTemplateNameDialog', () => {\n    let mockCoreContext: ICoreContext;\n    const createOrderTemplateDialogResources: IOrderTemplateNameDialogResources = {\n        orderTemplateHeaderLabel: 'createOrderTemplateHeader',\n        orderTemplateTitleLabel: 'orderTemplateTitle',\n        orderTemplateNameAriaLabel: 'orderTemplateNameAriaLabel',\n        orderTemplateDescription: 'createOrderTemplateDescription',\n        defaultOrderTemplateName: 'defaultOrderTemplateName',\n        orderTemplateButtonLabel: 'createOrderTemplateButtonText',\n        orderTemplateCancelButtonLabel: 'cancelNewOrderTemplateCreationButtonText'\n    };\n    const setModalStatus = (newValue: boolean) => {\n        return;\n    };\n    const onCancel = () => {\n        return;\n    };\n    const onSuccess = async () => {\n        return;\n    };\n\n    beforeEach(() => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: false, outOfStockThreshold: 5}}}) as ICoreContext;\n    });\n\n    it('renders correctly with all params', () => {\n        const addToOrderTemplateDialog = render((\n            <OrderTemplateNameDialog\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{}}\n                modalOpen={false}\n                isUpdateDialog={false}\n                setModalOpen={setModalStatus}\n                className='class-name'\n                dialogStrings={createOrderTemplateDialogResources}\n                onCancel={onCancel}\n                onSuccess={onSuccess}\n            />\n        ));\n        expect(addToOrderTemplateDialog).toMatchSnapshot();\n    });\n\n    it('renders correctly with all params and modal open', () => {\n        const addToOrderTemplateDialog = render((\n            <OrderTemplateNameDialog\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{}}\n                modalOpen={true}\n                isUpdateDialog={false}\n                setModalOpen={setModalStatus}\n                className='class-name'\n                dialogStrings={createOrderTemplateDialogResources}\n                onCancel={onCancel}\n                onSuccess={onSuccess}\n            />\n        ));\n        expect(addToOrderTemplateDialog).toMatchSnapshot();\n    });\n});"]}