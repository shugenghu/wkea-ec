import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { Button, Modal, ModalBody, ModalFooter, ModalHeader } from '@msdyn365-commerce-modules/utilities';
import { getUrlSync, Image } from '@msdyn365-commerce/core';
import React from 'react';
import { PriceComponent } from '../../price/price.components';
const renderOrderTemplateImage = (context, className, product, imageSettings) => {
    const fallbackImageUrl = getFallbackImageUrl(product.ItemId, context.actionContext.requestContext.apiSettings);
    const defaultImageSettings = {
        viewports: {
            xs: { q: `w=140&h=140&m=6`, w: 0, h: 0 },
            lg: { q: `w=140&h=140&m=6`, w: 0, h: 0 },
            xl: { q: `w=140&h=140&m=6`, w: 0, h: 0 }
        },
        lazyload: true
    };
    return (React.createElement(Image, { className: `${className}__image-props`, src: product.PrimaryImageUrl || '', altText: product.Name, fallBackSrc: fallbackImageUrl, gridSettings: context.request.gridSettings, imageSettings: imageSettings || defaultImageSettings, loadFailureBehavior: 'empty' }));
};
export const ItemAddedToOrderTemplateDialog = (dialogProps) => {
    const { dialogStrings, className, context, modalOpen, data: { orderTemplateId, product, productPrice, quantity } } = dialogProps;
    const getOrderTemplatePageUrl = () => {
        const url = getUrlSync('ordertemplate', context.actionContext) || '';
        const separator = url.includes('?') ? '&' : '?';
        return `${url}${separator}id=${orderTemplateId}`;
    };
    const close = () => {
        window.location.reload(true);
    };
    const itemsString = quantity === 1 ? dialogStrings.itemAddedToOrderTemplateHeaderItemOneText : dialogStrings.itemAddedToOrderTemplateHeaderItemFormatText.replace('{0}', quantity.toString());
    return (React.createElement(Modal, { isOpen: modalOpen, className: `${className}` },
        React.createElement(ModalHeader, { className: `${className}__dialog__header`, toggle: close },
            React.createElement("b", null, itemsString),
            React.createElement("span", null, dialogStrings.itemAddedToOrderTemplateHeaderMessageText)),
        React.createElement(ModalBody, { className: `${className}__dialog__body` },
            React.createElement("div", { className: `${className}__dialog__content` },
                renderOrderTemplateImage(context, `${className}__dialog`, product),
                React.createElement("div", { className: `${className}__dialog__description` },
                    React.createElement("div", { className: `${className}__dialog__product-name` }, product.Name),
                    React.createElement("div", { className: `${className}__dialog__product-price` }, productPrice && React.createElement(PriceComponent, { data: { price: productPrice }, context: dialogProps.context, id: dialogProps.id, typeName: dialogProps.typeName, freePriceText: dialogProps.dialogStrings.freePriceText, originalPriceText: dialogProps.dialogStrings.originalPriceText, currentPriceText: dialogProps.dialogStrings.currentPriceText })),
                    product.Dimensions &&
                        React.createElement("div", { className: `${className}__dialog__product-dimensions` }, product.Dimensions.map(dimension => dimension.DimensionValue?.Value).filter(value => value).join(', '))))),
        React.createElement(ModalFooter, { className: `${className}__dialog__footer` },
            React.createElement(Button, { className: `${className}__dialog__view-order-template-button`, title: dialogStrings.viewOrderTemplateButtonText, href: getOrderTemplatePageUrl() }, dialogStrings.viewOrderTemplateButtonText),
            React.createElement(Button, { className: `${className}__dialog__continue-shopping`, title: dialogStrings.continueShoppingButtonText, onClick: close }, dialogStrings.continueShoppingButtonText))));
};
//# sourceMappingURL=item-added-to-order-template-dialog.component.js.map