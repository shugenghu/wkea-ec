import { render } from 'enzyme';
import * as React from 'react';
import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { AddToOrderTemplateComponent } from './add-to-order-template.component';
describe('AddToOrderTemplateComponent', () => {
    let mockCoreContext;
    const basicProduct = { RecordId: 55555 };
    const addToOrderTemplateDialogResources = {
        addToOrderTemplateHeader: 'addToOrderTemplateHeader',
        noOrderTemplatesMessage: 'noOrderTemplatesMessage',
        noOrderTemplatesDescription: 'noOrderTemplatesDescription',
        createAnOrderTemplateButtonText: 'createAnOrderTemplateButtonText',
        createNewOrderTemplateButtonText: 'createNewOrderTemplateButtonText',
        cancelOrderTemplateCreationButtonText: 'cancelOrderTemplateCreationButtonText',
        selectTemplatesText: 'selectTemplatesText',
        addToTemplateButtonText: 'addToTemplateButtonText',
        lineItemsText: 'lineItemsText'
    };
    const createOrderTemplateDialogResources = {
        orderTemplateHeaderLabel: 'createOrderTemplateHeader',
        orderTemplateTitleLabel: 'orderTemplateTitle',
        orderTemplateNameAriaLabel: 'orderTemplateNameAriaLabel',
        orderTemplateDescription: 'createOrderTemplateDescription',
        defaultOrderTemplateName: 'defaultOrderTemplateName',
        orderTemplateButtonLabel: 'createOrderTemplateButtonText',
        orderTemplateCancelButtonLabel: 'cancelNewOrderTemplateCreationButtonText'
    };
    const itemAddedToOrderTemplateDialogResources = {
        viewOrderTemplateButtonText: 'viewOrderTemplateButtonText',
        continueShoppingButtonText: 'continueShoppingButtonText',
        itemAddedToOrderTemplateHeaderItemOneText: 'itemAddedToOrderTemplateHeaderItemOneText',
        itemAddedToOrderTemplateHeaderItemFormatText: 'itemAddedToOrderTemplateHeaderItemFormatText',
        itemAddedToOrderTemplateHeaderMessageText: 'itemAddedToOrderTemplateHeaderMessageText',
        freePriceText: 'freePriceText',
        originalPriceText: 'originalPriceText',
        currentPriceText: 'currentPriceText'
    };
    const duplicateItemsWhenAddingToOrderTemplateDialogResources = {
        duplicatedProductsHeader: 'duplicatedProductsHeader',
        duplicatedProductsDescription: 'duplicatedProductsDescription',
        updateQuantityButtonText: 'updateQuantityButtonText',
        cancelDuplicateItemsButtonText: 'cancelDuplicateItemsButtonText'
    };
    const addToOrderTemplateButtonText = 'addToOrderTemplateButtonText';
    const emptyOrderTemplate = {
        productList: {
            Id: 'id'
        },
        orderTemplateLines: [],
        totalLines: 0
    };
    const productListLine = {
        ProductListId: 'product-list-id',
        LineId: 'line-id',
        ProductId: 42,
        Quantity: 12,
        UnitOfMeasure: 'ea'
    };
    const orderTemplate = {
        productList: {
            Id: 'id',
            ProductListLines: [productListLine]
        },
        orderTemplateLines: [{ productListLine: productListLine }],
        totalLines: 0
    };
    const b2bCustomer = {
        AccountNumber: 'customer-id',
        IsB2b: true
    };
    const nonB2bCustomer = {
        AccountNumber: 'customer-id'
    };
    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: false, outOfStockThreshold: 5 } } });
    });
    it('renders correctly with all params', () => {
        const addToOrderTemplateComponent = render((React.createElement(AddToOrderTemplateComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: {
                orderTemplates: [orderTemplate],
                product: basicProduct,
                quantity: 2,
                customerInformation: b2bCustomer
            }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, itemAddedToOrderTemplateDialogResources: itemAddedToOrderTemplateDialogResources, duplicateItemsWhenAddingToOrderTemplateDialogResources: duplicateItemsWhenAddingToOrderTemplateDialogResources, addToOrderTemplateButtonText: addToOrderTemplateButtonText })));
        expect(addToOrderTemplateComponent).toMatchSnapshot();
    });
    it('renders correctly for non b2b customer', () => {
        const addToOrderTemplateComponent = render((React.createElement(AddToOrderTemplateComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: {
                orderTemplates: [orderTemplate],
                product: basicProduct,
                quantity: 2,
                customerInformation: nonB2bCustomer
            }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, itemAddedToOrderTemplateDialogResources: itemAddedToOrderTemplateDialogResources, duplicateItemsWhenAddingToOrderTemplateDialogResources: duplicateItemsWhenAddingToOrderTemplateDialogResources, addToOrderTemplateButtonText: addToOrderTemplateButtonText })));
        expect(addToOrderTemplateComponent).toMatchSnapshot();
    });
    it('renders correctly for empty order templates', () => {
        const addToOrderTemplateComponent = render((React.createElement(AddToOrderTemplateComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: {
                orderTemplates: [],
                product: basicProduct,
                quantity: 2,
                customerInformation: b2bCustomer
            }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, itemAddedToOrderTemplateDialogResources: itemAddedToOrderTemplateDialogResources, duplicateItemsWhenAddingToOrderTemplateDialogResources: duplicateItemsWhenAddingToOrderTemplateDialogResources, addToOrderTemplateButtonText: addToOrderTemplateButtonText })));
        expect(addToOrderTemplateComponent).toMatchSnapshot();
    });
    it('renders correctly for empty order template', () => {
        const addToOrderTemplateComponent = render((React.createElement(AddToOrderTemplateComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: {
                orderTemplates: [emptyOrderTemplate],
                product: basicProduct,
                quantity: 2,
                customerInformation: b2bCustomer
            }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, itemAddedToOrderTemplateDialogResources: itemAddedToOrderTemplateDialogResources, duplicateItemsWhenAddingToOrderTemplateDialogResources: duplicateItemsWhenAddingToOrderTemplateDialogResources, addToOrderTemplateButtonText: addToOrderTemplateButtonText })));
        expect(addToOrderTemplateComponent).toMatchSnapshot();
    });
});
//# sourceMappingURL=add-to-order-template.test.js.map