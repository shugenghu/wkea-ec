import classnames from 'classnames';
import React, { useState } from 'react';
import { addItemToOrderTemplate, AddItemToOrderTemplateInput, getPriceForSelectedVariant, PriceForSelectedVariantInput, updateOrderTemplateAction, UpdateOrderTemplateInput } from '@msdyn365-commerce-modules/retail-actions';
import { Alert, UncontrolledTooltip } from '@msdyn365-commerce-modules/utilities';
import { msdyn365Commerce } from '@msdyn365-commerce/core';
import { AsyncResult } from '@msdyn365-commerce/retail-proxy';
import { AddToOrderTemplateDialog } from '../add-to-order-template-dialog/add-to-order-template-dialog.component';
import { DuplicateItemsWhenAddingToOrderTemplateDialog } from '../duplicate-items-when-adding-to-order-template-dialog/duplicate-items-when-adding-to-order-template-dialog.component';
import { ItemAddedToOrderTemplateDialog } from '../item-added-to-order-template-dialog/item-added-to-order-template-dialog.component';
const onClick = async (_event, props, state, openModal) => {
    const { user } = props.context.request;
    if (state.waiting) {
        return;
    }
    if (!user.isAuthenticated && user.signInUrl && window) {
        window.location.assign(user.signInUrl);
        return;
    }
    addToOrderTemplate(props, openModal);
    state.setWaiting(false);
};
const onDismiss = (state) => {
    state.setContent({ color: 'success', showAlert: false });
};
const AddToOrderTemplateComponentActions = {
    onClick: onClick,
    onDismiss: onDismiss
};
const hasProductInOrderTemplates = (productToFind) => {
    return false;
};
const AddToOrderTemplate = (props) => {
    if (!props.data.customerInformation?.IsB2b) {
        return null;
    }
    const [waiting, setWaiting] = useState(false);
    const [content, setContent] = useState({});
    const state = {
        waiting,
        content,
        setWaiting,
        setContent
    };
    const [addToOrderTemplateModalOpen, setAddToOrderTemplateModalOpen] = useState(false);
    const [chosenOrderTemplateId, setChosenOrderTemplateId] = useState(undefined);
    const [productPrice, setProductPrice] = useState(null);
    const [itemAddedToOrderTemplateDialogOpen, setItemAddedToOrderTemplateDialogOpen] = useState(false);
    const [duplicateItemsWhenAddingToOrderTemplateDialogOpen, setDuplicateItemsWhenAddingToOrderTemplateDialogOpen] = useState(false);
    const executeAddItemToOrderTemplate = async (orderTemplate) => {
        setChosenOrderTemplateId(orderTemplate.Id);
        const input = new AddItemToOrderTemplateInput(orderTemplate.Id, props.data.product.RecordId, props.data.quantity, props.data.product.DefaultUnitOfMeasure || 'ea');
        await addItemToOrderTemplate(input, props.context.actionContext).then(async (result) => {
            const retrievedProductPrice = await getPriceForSelectedVariant(new PriceForSelectedVariantInput(props.data.product.RecordId, props.context.actionContext.requestContext.apiSettings.channelId, props.data.product), props.context.actionContext);
            setProductPrice(retrievedProductPrice);
            setAddToOrderTemplateModalOpen(false);
            setTimeout(() => {
                setItemAddedToOrderTemplateDialogOpen(true);
            }, 500);
        }).catch(result => {
            if (result.error?.name !== 'Microsoft_Dynamics_Commerce_Runtime_DuplicateObject') {
                return AsyncResult.reject(result);
            }
            setAddToOrderTemplateModalOpen(false);
            setTimeout(() => {
                setDuplicateItemsWhenAddingToOrderTemplateDialogOpen(true);
            }, 500);
            return AsyncResult.resolve();
        });
    };
    const onDuplicateDialogCancel = () => {
        setDuplicateItemsWhenAddingToOrderTemplateDialogOpen(false);
        setTimeout(() => {
            setAddToOrderTemplateModalOpen(true);
        }, 500);
    };
    const overrideQuantity = async () => {
        const input = new UpdateOrderTemplateInput(chosenOrderTemplateId, props.data.product.RecordId, props.data.quantity, props.data.product.DefaultUnitOfMeasure || 'ea');
        await updateOrderTemplateAction(input, props.context.actionContext);
        const retrievedProductPrice = await getPriceForSelectedVariant(new PriceForSelectedVariantInput(props.data.product.RecordId, props.context.actionContext.requestContext.apiSettings.channelId, props.data.product), props.context.actionContext);
        setProductPrice(retrievedProductPrice);
        setDuplicateItemsWhenAddingToOrderTemplateDialogOpen(false);
        setTimeout(() => {
            setItemAddedToOrderTemplateDialogOpen(true);
        }, 500);
    };
    const { addToOrderTemplateButtonText, showStatusMessage, showButtonText, className, disabled, showButtonTooltip, tooltipPosition, addToOrderTemplateDialogResources, createOrderTemplateDialogResources } = props;
    const onDismissHandler = () => { return AddToOrderTemplateComponentActions.onDismiss(state); };
    const ariaLabel = addToOrderTemplateButtonText;
    const addToOrderTemplateRef = React.createRef();
    const showMessage = showStatusMessage !== undefined ? showStatusMessage : true;
    const showTooltip = showButtonTooltip !== undefined ? showButtonTooltip : true;
    const tooltipPos = showButtonTooltip !== undefined ? tooltipPosition : 'top-end';
    const dialogData = {
        orderTemplates: props.data.orderTemplates
    };
    const onClickHandler = (event) => { return AddToOrderTemplateComponentActions.onClick(event, props, state, setAddToOrderTemplateModalOpen); };
    return (React.createElement(React.Fragment, null,
        React.createElement(React.Fragment, null,
            React.createElement("button", { className: classnames(className, hasProductInOrderTemplates(props.data.product) ? 'msc-add-to-order-template-icon__added' : 'msc-add-to-order-template-icon', state.waiting ? 'msc-add-to-order-template-icon__waiting' : ''), "aria-label": ariaLabel, onClick: onClickHandler, disabled: disabled, ref: addToOrderTemplateRef }, showButtonText ? ariaLabel : ''),
            showTooltip && React.createElement(UncontrolledTooltip, { placement: tooltipPos, trigger: 'hover focus', target: addToOrderTemplateRef }, ariaLabel)),
        state.content.showAlert && showMessage ?
            React.createElement("div", { className: 'ms-order-template-items__product-status' },
                React.createElement(Alert, { color: state.content.color, isOpen: state.content.showAlert, toggle: onDismissHandler }, state.content.orderTemplateTextMessage)) :
            '',
        React.createElement(AddToOrderTemplateDialog, { className: 'msc-add-to-order-template-dialog', modalOpen: addToOrderTemplateModalOpen, setModalOpen: setAddToOrderTemplateModalOpen, context: props.context, id: props.id, typeName: props.typeName, data: dialogData, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, onOrderTemplateSelected: executeAddItemToOrderTemplate }),
        chosenOrderTemplateId && productPrice && React.createElement(ItemAddedToOrderTemplateDialog, { className: 'msc-item-added-to-order-template-dialog', id: props.id, typeName: props.typeName, context: props.context, dialogStrings: props.itemAddedToOrderTemplateDialogResources, data: {
                product: props.data.product,
                quantity: props.data.quantity,
                orderTemplateId: chosenOrderTemplateId,
                productPrice: productPrice
            }, modalOpen: itemAddedToOrderTemplateDialogOpen }),
        React.createElement(DuplicateItemsWhenAddingToOrderTemplateDialog, { className: 'msc-duplicate-items-when-adding-to-order-template-dialog', id: props.id, typeName: props.typeName, context: props.context, dialogStrings: props.duplicateItemsWhenAddingToOrderTemplateDialogResources, data: {}, modalOpen: duplicateItemsWhenAddingToOrderTemplateDialogOpen, executeOverrideQuantity: overrideQuantity, onCancel: onDuplicateDialogCancel })));
};
const addToOrderTemplate = (props, openModal) => {
    const { canAddMasterProduct } = props;
    if (props.data.product.Dimensions && !canAddMasterProduct) {
        const missingDimensions = props.data.product.Dimensions.filter(dimension => !(dimension.DimensionValue && dimension.DimensionValue.Value));
        if (missingDimensions.length > 0) {
            propagateError(props, { status: 'MISSING_DIMENSION', missingDimensions: missingDimensions });
            return;
        }
    }
    openModal(true);
    return;
};
const propagateError = (props, result) => {
    const { onError } = props;
    if (onError) {
        onError(result);
    }
};
export const AddToOrderTemplateComponent = msdyn365Commerce.createComponent('AddToOrderTemplate', { component: AddToOrderTemplate, ...AddToOrderTemplateComponentActions });
//# sourceMappingURL=add-to-order-template.component.js.map