import classnames from 'classnames';
import React, { useState } from 'react';
import { Button, getPayloadObject, getTelemetryAttributes, PopupProducts, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { msdyn365Commerce } from '@msdyn365-commerce/core';
import { addOrderTemplateToCartAction, AddOrderTemplateToCartInput } from '@msdyn365-commerce-modules/retail-actions';
import { LinesAddedToCartDialog } from '../lines-added-to-cart-dialog/lines-added-to-cart-dialog.component';
const onClick = async (_event, props, setUploadStatus, openModal, setLinesAddedToCartDialogOpen, setAddedLinesCount) => {
    openModal(true);
    setUploadStatus('LOADING');
    const { context } = props;
    const addOrderTemplateToCartInput = new AddOrderTemplateToCartInput(props.data.orderTemplate.productList.Id);
    const addedCartLines = await addOrderTemplateToCartAction(addOrderTemplateToCartInput, context.actionContext);
    setAddedLinesCount(addedCartLines.length);
    openModal(false);
    setTimeout(() => {
        setLinesAddedToCartDialogOpen(true);
    }, 500);
};
const AddToCartComponentActions = {
    onClick: onClick
};
const _getModalText = (status, props) => {
    const { dialogStrings } = props;
    const { addToCartFailureMessage, addToCartSuccessMessage, addToCartProcessMessage } = dialogStrings;
    if (status === 'LOADING') {
        return `${addToCartProcessMessage}...`;
    }
    if (status === 'SUCCESS') {
        return addToCartSuccessMessage;
    }
    if (status === 'FAILED') {
        return addToCartFailureMessage;
    }
    return '';
};
const AddOrderTemplate = (props) => {
    const [uploadStatus, setUploadStatus] = useState('WAITING');
    const [modalOpen, setModalOpen] = useState(false);
    const [addedLinesCount, setAddedLinesCount] = useState(0);
    const [linesAddedToCartDialogOpen, setLinesAddedToCartDialogOpen] = useState(false);
    const onClickHandler = async (event) => {
        await AddToCartComponentActions.onClick(event, props, setUploadStatus, setModalOpen, setLinesAddedToCartDialogOpen, setAddedLinesCount);
    };
    const closeLinesAddedToCartDialog = () => {
        setLinesAddedToCartDialogOpen(false);
    };
    const modalText = _getModalText(uploadStatus, props);
    const processStatusClass = uploadStatus.toLowerCase();
    const dialogStrings = { closeWindowButtonText: props.dialogStrings.closeWindowButtonText };
    const payLoad = getPayloadObject('click', props.telemetryContent, TelemetryConstant.AddOrderTemplateToCart);
    const addOrderTemplateAttribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    const popupProps = {
        dialogStrings: dialogStrings,
        className: 'msc-add-order-template-to-cart',
        processStatusClass: processStatusClass,
        text: modalText,
        modalOpen: modalOpen,
        setModalOpen: setModalOpen
    };
    const renderModalPopup = React.createElement(PopupProducts, Object.assign({}, popupProps));
    const products = props.data.orderTemplate.orderTemplateLines.map(line => line.fullProduct).filter(fullProduct => fullProduct);
    return (React.createElement(React.Fragment, null,
        renderModalPopup,
        React.createElement(Button, Object.assign({ className: classnames('msc-add-order-template-to-cart ', props.className), "aria-label": props.addToCartText, disabled: props.data.orderTemplate.totalLines === 0, onClick: onClickHandler }, addOrderTemplateAttribute), props.addToCartText),
        React.createElement(LinesAddedToCartDialog, { className: 'msc-lines-added-to-cart-dialog', id: props.id, typeName: props.typeName, context: props.context, dialogStrings: props.dialogStrings.linesAddedToCartDialogResources, data: {
                linesCount: addedLinesCount,
                orderTemplate: props.data.orderTemplate.productList,
                products: products
            }, modalOpen: linesAddedToCartDialogOpen, onClose: closeLinesAddedToCartDialog })));
};
export const AddOrderTemplateToCartComponent = msdyn365Commerce.createComponent('AddOrderTemplate', { component: AddOrderTemplate, ...AddToCartComponentActions });
//# sourceMappingURL=add-order-template-to-cart.component.js.map