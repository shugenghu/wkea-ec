import { render } from 'enzyme';
import * as React from 'react';
import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { AddOrderTemplateToCartComponent } from './add-order-template-to-cart.component';
describe('AddOrderTemplateToCartComponent', () => {
    let mockCoreContext;
    const addToCartText = 'Add to order template';
    const closeWindowButtonText = 'Cancel';
    const addToCartFailureMessage = 'fail';
    const addToCartSuccessMessage = 'success';
    const addToCartProcessMessage = 'process';
    const productListLine = {
        ProductListId: 'product-list-id',
        LineId: 'line-id',
        ProductId: 42,
        Quantity: 12,
        UnitOfMeasure: 'ea'
    };
    const orderTemplate = {
        productList: {
            Id: 'id',
            ProductListLines: [productListLine]
        },
        orderTemplateLines: [{ productListLine: productListLine }],
        totalLines: 1
    };
    const emptyOrderTemplate = {
        productList: {
            Id: 'id'
        },
        orderTemplateLines: [],
        totalLines: 0
    };
    const linesAddedToCartDialogResources = {
        viewCartButtonText: 'viewCartButtonText',
        orderTemplateCloseButtonText: 'orderTemplateCloseButtonText',
        linesAddedToCartHeaderItemsOneText: 'linesAddedToCartHeaderItemsOneText',
        linesAddedToCartHeaderLinesOneText: 'linesAddedToCartHeaderLinesOneText',
        linesAddedToCartHeaderLinesFormatText: 'linesAddedToCartHeaderLinesFormatText',
        linesAddedToCartHeaderMessageText: 'linesAddedToCartHeaderMessageText'
    };
    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: false, outOfStockThreshold: 5 } } });
    });
    it('renders correctly with all params', () => {
        const addOrderTemplateToCartComponent = render((React.createElement(AddOrderTemplateToCartComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, addToCartText: addToCartText, data: { orderTemplate }, dialogStrings: {
                closeWindowButtonText: closeWindowButtonText,
                addToCartFailureMessage: addToCartFailureMessage,
                addToCartSuccessMessage: addToCartSuccessMessage,
                addToCartProcessMessage: addToCartProcessMessage,
                linesAddedToCartDialogResources: linesAddedToCartDialogResources
            } })));
        expect(addOrderTemplateToCartComponent).toMatchSnapshot();
    });
    it('renders correctly with empty list', () => {
        const addOrderTemplateToCartComponent = render((React.createElement(AddOrderTemplateToCartComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, addToCartText: addToCartText, data: { orderTemplate: emptyOrderTemplate }, dialogStrings: {
                closeWindowButtonText: closeWindowButtonText,
                addToCartFailureMessage: addToCartFailureMessage,
                addToCartSuccessMessage: addToCartSuccessMessage,
                addToCartProcessMessage: addToCartProcessMessage,
                linesAddedToCartDialogResources: linesAddedToCartDialogResources
            } })));
        expect(addOrderTemplateToCartComponent).toMatchSnapshot();
    });
});
//# sourceMappingURL=add-order-template-to-cart.test.js.map