import { Button, Modal, ModalBody, ModalFooter, ModalHeader } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import React, { useState } from 'react';
import { OrderTemplateNameDialog } from '../order-template-name-dialog/order-template-name-dialog.component';
import { OrderTemplateComponent } from '../order-templates-list/order-template-list';
const renderAddToOrderTemplatesWhenEmptyOrderTemplatesDialog = (dialogProps, className, closeDialog, showOrderTemplateNameDialog) => {
    const { addToOrderTemplateDialogResources, modalOpen } = dialogProps;
    return (React.createElement(React.Fragment, null,
        React.createElement(Modal, { isOpen: modalOpen, className: `${className}` },
            React.createElement(ModalHeader, { className: `${className}__dialog__header`, toggle: closeDialog },
                React.createElement("span", null, addToOrderTemplateDialogResources.addToOrderTemplateHeader)),
            React.createElement(ModalBody, { className: `${className}__dialog__body` },
                React.createElement("div", { className: `${className}__dialog__content` },
                    React.createElement("div", { className: `${className}__dialog__create-order-template-image-container` },
                        React.createElement("div", { className: classnames('msc-create-order-template-icon', `${className}__dialog__create-order-template-image`) })),
                    React.createElement("div", { className: `${className}__dialog__no-order-templates` }, addToOrderTemplateDialogResources.noOrderTemplatesMessage),
                    React.createElement("div", { className: `${className}__dialog__no-order-templates-description` }, addToOrderTemplateDialogResources.noOrderTemplatesDescription))),
            React.createElement(ModalFooter, { className: `${className}__dialog__footer` },
                React.createElement(Button, { className: `${className}__dialog__create-order-template-button`, title: addToOrderTemplateDialogResources.createAnOrderTemplateButtonText, onClick: showOrderTemplateNameDialog }, addToOrderTemplateDialogResources.createAnOrderTemplateButtonText),
                React.createElement(Button, { className: `${className}__dialog__cancel-button`, title: addToOrderTemplateDialogResources.cancelOrderTemplateCreationButtonText, onClick: closeDialog }, addToOrderTemplateDialogResources.cancelOrderTemplateCreationButtonText)))));
};
const formatBold = (text, boldText) => {
    const patternToFind = '{0}';
    return (React.createElement(React.Fragment, null,
        text.slice(0, text.indexOf(patternToFind)),
        React.createElement("b", null, boldText),
        text.slice(text.indexOf(patternToFind) + patternToFind.length)));
};
const renderAddToOrderTemplatesForExistingOrderTemplatesDialog = (dialogProps, className, closeDialog, showOrderTemplateNameDialog, onAddToOrderTemplateButtonClick) => {
    const { addToOrderTemplateDialogResources, modalOpen, data: { orderTemplates } } = dialogProps;
    return (React.createElement(React.Fragment, null,
        React.createElement(Modal, { isOpen: modalOpen, className: `${className}` },
            React.createElement(ModalHeader, { className: `${className}__dialog__header`, toggle: closeDialog },
                React.createElement("span", null, addToOrderTemplateDialogResources.addToOrderTemplateHeader)),
            React.createElement(ModalBody, { className: `${className}__dialog__body` },
                React.createElement("div", { className: `${className}__dialog__content` },
                    React.createElement("div", { className: `${className}__dialog__order-templates-description` }, formatBold(addToOrderTemplateDialogResources.selectTemplatesText, orderTemplates.length.toString())),
                    React.createElement("div", { className: `${className}__dialog__order-templates-container` },
                        React.createElement("div", { role: 'button', className: classnames(`${className}__dialog__order-templates-line__container`, `${className}__dialog__order-templates-line__container__create-new-line`), onClick: showOrderTemplateNameDialog },
                            React.createElement("span", { className: classnames(`${className}__dialog__order-templates-line__container__create-new-line__image`, 'msc-create-order-template-icon') }),
                            React.createElement("span", { className: `${className}__dialog__order-templates-line__container__create-new-line__text` }, addToOrderTemplateDialogResources.createNewOrderTemplateButtonText)),
                        orderTemplates.map((orderTemplate, index) => {
                            return (React.createElement(OrderTemplateComponent, { key: index, className: `${className}__dialog__order-templates-line`, orderTemplate: orderTemplate, context: dialogProps.context, actionButtonText: addToOrderTemplateDialogResources.addToTemplateButtonText, lineItemsText: addToOrderTemplateDialogResources.lineItemsText, orderTemplateAction: onAddToOrderTemplateButtonClick }));
                        })))))));
};
export const AddToOrderTemplateDialog = (dialogProps) => {
    const { setModalOpen, data: { orderTemplates }, className } = dialogProps;
    const closeDialog = () => {
        setModalOpen(false);
    };
    const [createOrderTemplateDialogOpen, setOrderTemplateNameDialogOpen] = useState(false);
    const showOrderTemplateNameDialog = () => {
        setModalOpen(false);
        setTimeout(() => {
            setOrderTemplateNameDialogOpen(true);
        }, 500);
    };
    const onCreateOrderTemplateCancel = () => {
        setTimeout(() => {
            setModalOpen(true);
        }, 500);
    };
    let addToOrderTemplateDialog;
    if (orderTemplates.length !== 0) {
        addToOrderTemplateDialog = renderAddToOrderTemplatesForExistingOrderTemplatesDialog(dialogProps, `${className}__existing`, closeDialog, showOrderTemplateNameDialog, dialogProps.onOrderTemplateSelected);
    }
    else {
        addToOrderTemplateDialog = renderAddToOrderTemplatesWhenEmptyOrderTemplatesDialog(dialogProps, `${className}__empty`, closeDialog, showOrderTemplateNameDialog);
    }
    return (React.createElement(React.Fragment, null,
        addToOrderTemplateDialog,
        React.createElement(OrderTemplateNameDialog, { className: 'msc-order-template-name-dialog', modalOpen: createOrderTemplateDialogOpen, isUpdateDialog: false, setModalOpen: setOrderTemplateNameDialogOpen, context: dialogProps.context, id: dialogProps.id, data: {}, typeName: dialogProps.typeName, dialogStrings: dialogProps.createOrderTemplateDialogResources, onCancel: onCreateOrderTemplateCancel, onSuccess: dialogProps.onOrderTemplateSelected })));
};
//# sourceMappingURL=add-to-order-template-dialog.component.js.map