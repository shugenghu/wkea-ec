import { render } from 'enzyme';
import * as React from 'react';
import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { AddToOrderTemplateDialog } from '../add-to-order-template-dialog/add-to-order-template-dialog.component';
describe('AddToOrderTemplateDialog', () => {
    let mockCoreContext;
    const addToOrderTemplateDialogResources = {
        addToOrderTemplateHeader: 'addToOrderTemplateHeader',
        noOrderTemplatesMessage: 'noOrderTemplatesMessage',
        noOrderTemplatesDescription: 'noOrderTemplatesDescription',
        createAnOrderTemplateButtonText: 'createAnOrderTemplateButtonText',
        createNewOrderTemplateButtonText: 'createNewOrderTemplateButtonText',
        cancelOrderTemplateCreationButtonText: 'cancelOrderTemplateCreationButtonText',
        selectTemplatesText: 'selectTemplatesText',
        addToTemplateButtonText: 'addToTemplateButtonText',
        lineItemsText: 'lineItemsText'
    };
    const createOrderTemplateDialogResources = {
        orderTemplateHeaderLabel: 'createOrderTemplateHeader',
        orderTemplateTitleLabel: 'orderTemplateTitle',
        orderTemplateNameAriaLabel: 'orderTemplateNameAriaLabel',
        orderTemplateDescription: 'createOrderTemplateDescription',
        defaultOrderTemplateName: 'defaultOrderTemplateName',
        orderTemplateButtonLabel: 'createOrderTemplateButtonText',
        orderTemplateCancelButtonLabel: 'cancelNewOrderTemplateCreationButtonText'
    };
    const emptyOrderTemplate = {
        productList: {
            Id: 'id'
        },
        orderTemplateLines: [],
        totalLines: 0
    };
    const productListLine = {
        ProductListId: 'product-list-id',
        LineId: 'line-id',
        ProductId: 42,
        Quantity: 12,
        UnitOfMeasure: 'ea'
    };
    const orderTemplate = {
        productList: {
            Id: 'id',
            ProductListLines: [productListLine]
        },
        orderTemplateLines: [{ productListLine: productListLine }],
        totalLines: 0
    };
    const setModalStatus = (newValue) => {
        return;
    };
    const onOrderTemplateSelected = async () => {
        return;
    };
    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({ app: { config: { enableStockCheck: false, outOfStockThreshold: 5 } } });
    });
    it('renders correctly with all params', () => {
        const addToOrderTemplateDialog = render((React.createElement(AddToOrderTemplateDialog, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: {
                orderTemplates: [orderTemplate]
            }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, modalOpen: false, setModalOpen: setModalStatus, className: 'class-name', onOrderTemplateSelected: onOrderTemplateSelected })));
        expect(addToOrderTemplateDialog).toMatchSnapshot();
    });
    it('renders correctly with empty order templates', () => {
        const addToOrderTemplateDialog = render((React.createElement(AddToOrderTemplateDialog, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: {
                orderTemplates: []
            }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, modalOpen: false, setModalOpen: setModalStatus, className: 'class-name', onOrderTemplateSelected: onOrderTemplateSelected })));
        expect(addToOrderTemplateDialog).toMatchSnapshot();
    });
    it('renders correctly with empty order template', () => {
        const addToOrderTemplateDialog = render((React.createElement(AddToOrderTemplateDialog, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: {
                orderTemplates: [emptyOrderTemplate]
            }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, modalOpen: false, setModalOpen: setModalStatus, className: 'class-name', onOrderTemplateSelected: onOrderTemplateSelected })));
        expect(addToOrderTemplateDialog).toMatchSnapshot();
    });
    it('renders correctly with order template and model open', () => {
        const addToOrderTemplateDialog = render((React.createElement(AddToOrderTemplateDialog, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: {
                orderTemplates: [orderTemplate]
            }, addToOrderTemplateDialogResources: addToOrderTemplateDialogResources, createOrderTemplateDialogResources: createOrderTemplateDialogResources, modalOpen: true, setModalOpen: setModalStatus, className: 'class-name', onOrderTemplateSelected: onOrderTemplateSelected })));
        expect(addToOrderTemplateDialog).toMatchSnapshot();
    });
});
//# sourceMappingURL=add-to-order-template-dialog.test.js.map