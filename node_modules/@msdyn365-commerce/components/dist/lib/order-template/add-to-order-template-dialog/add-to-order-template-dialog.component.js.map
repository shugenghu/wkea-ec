{"version":3,"file":"add-to-order-template-dialog.component.js","sourceRoot":"./src/","sources":["order-template/add-to-order-template-dialog/add-to-order-template-dialog.component.tsx"],"names":[],"mappings":"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","sourcesContent":["import { OrderTemplate } from '@msdyn365-commerce-modules/retail-actions';\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from '@msdyn365-commerce-modules/utilities';\nimport { IComponentProps } from '@msdyn365-commerce/core';\nimport { ProductList } from '@msdyn365-commerce/retail-proxy';\nimport classnames from 'classnames';\nimport React, { useState } from 'react';\nimport { IOrderTemplateNameDialogResources, OrderTemplateNameDialog } from '../order-template-name-dialog/order-template-name-dialog.component';\nimport { OrderTemplateComponent } from '../order-templates-list/order-template-list';\n\nexport interface IAddToOrderTemplateDialogData {\n    orderTemplates: OrderTemplate[];\n}\n\nexport interface IAddToOrderTemplateDialogResources {\n    addToOrderTemplateHeader: string;\n\n    noOrderTemplatesMessage: string;\n    noOrderTemplatesDescription: string;\n\n    createAnOrderTemplateButtonText: string;\n    createNewOrderTemplateButtonText: string;\n    cancelOrderTemplateCreationButtonText: string;\n\n    selectTemplatesText: string;\n    addToTemplateButtonText: string;\n    lineItemsText: string;\n}\n\nexport interface IAddToOrderTemplateDialogProps extends IComponentProps<IAddToOrderTemplateDialogData> {\n    className: string;\n\n    addToOrderTemplateDialogResources: IAddToOrderTemplateDialogResources;\n    createOrderTemplateDialogResources: IOrderTemplateNameDialogResources;\n\n    modalOpen: boolean | undefined;\n    setModalOpen(newValue: boolean): void;\n    onOrderTemplateSelected(orderTemplate: ProductList): Promise<void>;\n}\n\nconst renderAddToOrderTemplatesWhenEmptyOrderTemplatesDialog = (\n    dialogProps: IAddToOrderTemplateDialogProps,\n    className: string,\n    closeDialog: () => void,\n    showOrderTemplateNameDialog: () => void) => {\n\n    const {\n        addToOrderTemplateDialogResources,\n        modalOpen\n    } = dialogProps;\n    return (\n        <React.Fragment>\n            <Modal isOpen={modalOpen} className={`${className}`}>\n                <ModalHeader className={`${className}__dialog__header`} toggle={closeDialog}>\n                    <span>{addToOrderTemplateDialogResources.addToOrderTemplateHeader}</span>\n                </ModalHeader>\n                <ModalBody className={`${className}__dialog__body`}>\n                    <div className={`${className}__dialog__content`}>\n                        <div className={`${className}__dialog__create-order-template-image-container`}>\n                            <div\n                                className={classnames('msc-create-order-template-icon', `${className}__dialog__create-order-template-image`)}\n                            />\n                        </div>\n                        <div className={`${className}__dialog__no-order-templates`}>{addToOrderTemplateDialogResources.noOrderTemplatesMessage}</div>\n                        <div className={`${className}__dialog__no-order-templates-description`}>{addToOrderTemplateDialogResources.noOrderTemplatesDescription}</div>\n                    </div>\n                </ModalBody>\n                <ModalFooter\n                    className={`${className}__dialog__footer`}\n                >\n                    <Button\n                        className={`${className}__dialog__create-order-template-button`}\n                        title={addToOrderTemplateDialogResources.createAnOrderTemplateButtonText}\n                        onClick={showOrderTemplateNameDialog}\n                    >\n                        {addToOrderTemplateDialogResources.createAnOrderTemplateButtonText}\n                    </Button>\n                    <Button\n                        className={`${className}__dialog__cancel-button`}\n                        title={addToOrderTemplateDialogResources.cancelOrderTemplateCreationButtonText}\n                        onClick={closeDialog}\n                    >\n                        {addToOrderTemplateDialogResources.cancelOrderTemplateCreationButtonText}\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nconst formatBold = (text: string, boldText: string) => {\n    const patternToFind = '{0}';\n    return (\n        <>{text.slice(0, text.indexOf(patternToFind))}<b>{boldText}</b>{text.slice(text.indexOf(patternToFind) + patternToFind.length)}</>\n    );\n};\n\nconst renderAddToOrderTemplatesForExistingOrderTemplatesDialog = (\n    dialogProps: IAddToOrderTemplateDialogProps,\n    className: string,\n    closeDialog: () => void,\n    showOrderTemplateNameDialog: () => void,\n    onAddToOrderTemplateButtonClick: (orderTemplate: ProductList) => Promise<void>) => {\n\n    const {\n        addToOrderTemplateDialogResources,\n        modalOpen,\n        data: { orderTemplates }\n    } = dialogProps;\n    return (\n        <React.Fragment>\n            <Modal isOpen={modalOpen} className={`${className}`}>\n                <ModalHeader className={`${className}__dialog__header`} toggle={closeDialog}>\n                    <span>{addToOrderTemplateDialogResources.addToOrderTemplateHeader}</span>\n                </ModalHeader>\n                <ModalBody className={`${className}__dialog__body`}>\n                    <div className={`${className}__dialog__content`}>\n                        <div className={`${className}__dialog__order-templates-description`}>\n                            {formatBold(addToOrderTemplateDialogResources.selectTemplatesText, orderTemplates.length.toString())}\n                        </div>\n                        <div className={`${className}__dialog__order-templates-container`}>\n                            <div\n                                role='button'\n                                className={\n                                    classnames(\n                                        `${className}__dialog__order-templates-line__container`,\n                                        `${className}__dialog__order-templates-line__container__create-new-line`)\n                                }\n                                onClick={showOrderTemplateNameDialog}\n                            >\n                                <span\n                                    className={classnames(`${className}__dialog__order-templates-line__container__create-new-line__image`, 'msc-create-order-template-icon')}\n                                />\n                                <span className={`${className}__dialog__order-templates-line__container__create-new-line__text`}>{addToOrderTemplateDialogResources.createNewOrderTemplateButtonText}</span>\n                            </div>\n                            {\n                                orderTemplates.map((orderTemplate, index) => {\n                                    return (\n                                        <OrderTemplateComponent\n                                            key={index}\n                                            className={`${className}__dialog__order-templates-line`}\n                                            orderTemplate={orderTemplate}\n                                            context={dialogProps.context}\n                                            actionButtonText={addToOrderTemplateDialogResources.addToTemplateButtonText}\n                                            lineItemsText={addToOrderTemplateDialogResources.lineItemsText}\n                                            orderTemplateAction={onAddToOrderTemplateButtonClick}\n                                        />\n                                    );\n                                })\n                            }\n                        </div>\n                    </div>\n                </ModalBody>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport const AddToOrderTemplateDialog = (dialogProps: IAddToOrderTemplateDialogProps) => {\n    const {\n        setModalOpen, data: { orderTemplates }, className\n    } = dialogProps;\n\n    const closeDialog = () => {\n        setModalOpen(false);\n    };\n\n    const [createOrderTemplateDialogOpen, setOrderTemplateNameDialogOpen] = useState(false);\n    const showOrderTemplateNameDialog = () => {\n        setModalOpen(false);\n        setTimeout(() => {\n            setOrderTemplateNameDialogOpen(true);\n        }, 500); // tslint:disable-line:align\n    };\n    const onCreateOrderTemplateCancel = () => {\n        setTimeout(() => {\n            setModalOpen(true);\n        }, 500); // tslint:disable-line:align\n    };\n\n    let addToOrderTemplateDialog: JSX.Element;\n    if (orderTemplates.length !== 0) {\n        addToOrderTemplateDialog = renderAddToOrderTemplatesForExistingOrderTemplatesDialog(\n            dialogProps,\n            `${className}__existing`,\n            closeDialog,\n            showOrderTemplateNameDialog,\n            dialogProps.onOrderTemplateSelected);\n    } else {\n        addToOrderTemplateDialog = renderAddToOrderTemplatesWhenEmptyOrderTemplatesDialog(\n            dialogProps,\n            `${className}__empty`,\n            closeDialog,\n            showOrderTemplateNameDialog);\n    }\n\n    return (\n        <>\n            {addToOrderTemplateDialog}\n            <OrderTemplateNameDialog\n                className={'msc-order-template-name-dialog'}\n                modalOpen={createOrderTemplateDialogOpen}\n                isUpdateDialog={false}\n                setModalOpen={setOrderTemplateNameDialogOpen}\n                context={dialogProps.context}\n                id={dialogProps.id}\n                data={{}}\n                typeName={dialogProps.typeName}\n                dialogStrings={dialogProps.createOrderTemplateDialogResources}\n                onCancel={onCreateOrderTemplateCancel}\n                onSuccess={dialogProps.onOrderTemplateSelected}\n            />\n        </>\n    );\n};"]}