import { buildMockCoreContext } from '@msdyn365-commerce/core';
import * as React from 'react';
import { WishListIconComponent } from './wishlist-icon.component';
import { render } from 'enzyme';
describe('wishlist icon tests - auth scenario', () => {
    const mockCoreContext = buildMockCoreContext({ app: { config: { hideRating: false } } });
    const telemetryContent = { pageName: 'Homepage', moduleName: 'Wishlist icon', telemetry: mockCoreContext.telemetry };
    it('renders correctly', () => {
        const mockProps = {
            context: buildMockCoreContext({}),
            wishlistTooltipText: 'My wishlist',
            id: 'id',
            typeName: 'typeName',
            data: {},
            telemetryContent: telemetryContent
        };
        mockProps.context.request.user.isAuthenticated = true;
        const component = render(React.createElement(WishListIconComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly without class name', () => {
        const mockProps = {
            context: buildMockCoreContext({}),
            wishlistTooltipText: 'My wishlist',
            id: 'id',
            typeName: 'typeName',
            data: {},
            telemetryContent: telemetryContent
        };
        mockProps.context.request.user.isAuthenticated = true;
        const component = render(React.createElement(WishListIconComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
describe('wishlist icon tests - anon scenario', () => {
    const mockCoreContext = buildMockCoreContext({ app: { config: { hideRating: false } } });
    const telemetryContent = { pageName: 'Homepage', moduleName: 'Wishlist icon', telemetry: mockCoreContext.telemetry };
    it('renders correctly', () => {
        const mockProps = {
            context: buildMockCoreContext({}),
            wishlistTooltipText: 'My wishlist',
            id: 'id',
            typeName: 'typeName',
            data: {},
            telemetryContent: telemetryContent
        };
        mockProps.context.request.user.isAuthenticated = false;
        const component = render(React.createElement(WishListIconComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
    it('renders correctly without class name', () => {
        const mockProps = {
            context: buildMockCoreContext({}),
            wishlistTooltipText: 'My wishlist',
            id: 'id',
            typeName: 'typeName',
            data: {},
            telemetryContent: telemetryContent
        };
        mockProps.context.request.user.isAuthenticated = false;
        const component = render(React.createElement(WishListIconComponent, Object.assign({}, mockProps)));
        expect(component).toMatchSnapshot();
    });
});
//# sourceMappingURL=wishlist-icon.test.js.map