import { mapToCssModules, TransitionTimeouts } from '@msdyn365-commerce-modules/utilities';
import classNames from 'classnames';
import * as React from 'react';
import Transition from 'react-transition-group/Transition';
import CarouselContext from './CarouselContext';
export default class CarouselItem extends React.Component {
    constructor(props) {
        super(props);
        this.onEnter = (node, isAppearing) => {
            this.setState({ startAnimation: false });
            if (this.props.onEnter) {
                this.props.onEnter(node, isAppearing);
            }
        };
        this.onEntering = (node, isAppearing) => {
            const offsetHeight = node.offsetHeight;
            this.setState({ startAnimation: true });
            if (this.props.onEntering) {
                this.props.onEntering(node, isAppearing);
            }
            return offsetHeight;
        };
        this.onExit = (node) => {
            this.setState({ startAnimation: false });
            if (this.props.onExit) {
                this.props.onExit(node);
            }
        };
        this.onExiting = (node) => {
            this.setState({ startAnimation: true });
            node.dispatchEvent(new CustomEvent('slide.bs.carousel'));
            if (this.props.onExiting) {
                this.props.onExiting(node);
            }
        };
        this.onExited = (node) => {
            node.dispatchEvent(new CustomEvent('slid.bs.carousel'));
            if (this.props.onExited) {
                this.props.onExited(node);
            }
        };
        this.props = props;
        this.state = {
            startAnimation: false,
        };
        this.onEnter = this.onEnter.bind(this);
        this.onEntering = this.onEntering.bind(this);
        this.onExit = this.onExit.bind(this);
        this.onExiting = this.onExiting.bind(this);
        this.onExited = this.onExited.bind(this);
    }
    render() {
        const { children, cssModule, slide, tag, className, in: collapseIn, mountOnEnter, unmountOnExit, appear, enter, exit, timeout, onEnter, onEntering, onEntered, onExit, onExiting, onExited, ...otherProps } = this.props;
        const timeoutOrDefault = timeout || TransitionTimeouts.Carousel;
        const Tag = tag || 'div';
        const transitionProps = {
            in: collapseIn,
            mountOnEnter, unmountOnExit,
            appear, enter, exit,
            timeout: timeoutOrDefault
        };
        return (React.createElement(CarouselContext.Consumer, null, ({ direction }) => (React.createElement(Transition, Object.assign({}, transitionProps, { enter: slide, exit: slide, in: collapseIn, onEnter: this.onEnter, onEntering: this.onEntering, onExit: this.onExit, onExiting: this.onExiting, onExited: this.onExited }), (status) => {
            const isActive = (status === 'entered') || (status === 'exiting');
            const directionClassName = (status === 'entering' || status === 'exiting') &&
                this.state.startAnimation &&
                (direction === 'right' ? ('msc-carousel__item__left') : ('msc-carousel__item__right'));
            const orderClassName = (status === 'entering') &&
                (direction === 'right' ? ('msc-carousel__item__next') : ('msc-carousel__item__prev'));
            const itemClasses = mapToCssModules(classNames(className, 'msc-carousel__item', isActive && 'active', directionClassName, orderClassName), cssModule);
            return (React.createElement(Tag, Object.assign({ className: itemClasses }, otherProps), children));
        }))));
    }
}
CarouselItem.defaultProps = {
    tag: 'div',
    timeout: TransitionTimeouts.Carousel,
    slide: true,
};
//# sourceMappingURL=CarouselItem.js.map