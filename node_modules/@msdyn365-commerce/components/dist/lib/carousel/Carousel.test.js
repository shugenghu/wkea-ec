import * as Enzyme from 'enzyme';
import ReactSixteenAdapter from 'enzyme-adapter-react-16';
import { JSDOM } from 'jsdom';
import * as React from 'react';
import { mount } from 'enzyme';
import Carousel from './Carousel';
import CarouselItem from './CarouselItem';
import * as renderer from 'react-test-renderer';
Enzyme.configure({ adapter: new ReactSixteenAdapter() });
const globalAny = global;
const { window } = (new JSDOM('<!doctype html><html><body></body></html>'));
globalAny.document = window.document;
globalAny.window = window;
describe('Carousel', () => {
    beforeEach(() => {
        jest.useFakeTimers();
    });
    afterEach(() => {
        jest.clearAllTimers();
    });
    const items = [
        { src: '', altText: 'a', caption: 'caption 1' },
        { src: '', altText: 'b', caption: 'caption 2' },
        { src: '', altText: 'c', caption: 'caption 3' }
    ];
    const item1 = (React.createElement("img", { key: 'item1', className: 'd-block w-100', src: 'Slide+1', alt: 'Slide 1 of 3' }));
    const item2 = (React.createElement("img", { key: 'item2', className: 'd-block w-100', src: 'Slide+2', alt: 'Slide 2 of 3' }));
    const item3 = (React.createElement("img", { key: 'item3', className: 'd-block w-100', src: 'Slide+3', alt: 'Slide 3 of 3' }));
    const slides = [item1, item2, item3];
    describe('items', () => {
        it('should render custom tag', () => {
            const input = renderer.create(React.createElement("div", null,
                React.createElement(CarouselItem, { tag: 'div' })));
            expect(input.toJSON()).toMatchSnapshot();
        });
        it('should render with default timeout', () => {
            const input = renderer.create(React.createElement("div", null,
                React.createElement(CarouselItem, { timeout: 0 })));
            expect(input.toJSON()).toMatchSnapshot();
        });
        it('should render an image if one is passed in', () => {
            const input = renderer.create(React.createElement(CarouselItem, null,
                React.createElement("img", { src: items[0].src, alt: items[0].src })));
            expect(input.toJSON()).toMatchSnapshot();
        });
        it('should render an image if one is passed in', () => {
            const input = renderer.create(React.createElement(CarouselItem, null,
                React.createElement("img", { src: items[0].src, alt: items[0].src })));
            expect(input.toJSON()).toMatchSnapshot();
        });
        it('should render a caption if one is passed in', () => {
            const input = renderer.create(React.createElement(CarouselItem, null,
                React.createElement("div", null,
                    React.createElement("h3", null, 'captionHeader'),
                    React.createElement("p", null, 'captionText'))));
            expect(input.toJSON()).toMatchSnapshot();
        });
    });
    describe('indicators', () => {
        it('should render a list with the right number of items', () => {
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next' }));
            expect(wrapper.find('ol').length).toEqual(1);
            expect(wrapper.find('li').length).toEqual(3);
        });
        it('should call click indicator', () => {
            const onIndicatorsClickHandler = jest.fn();
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: () => { }, items: slides, onIndicatorsClickHandler: onIndicatorsClickHandler, directionTextPrev: 'Previous', directionTextNext: 'Next' }));
            wrapper.find('li').first().simulate('click');
            expect(onIndicatorsClickHandler).toHaveBeenCalled();
        });
        it('should call previous', () => {
            const previous = jest.fn();
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: previous, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next' }));
            wrapper.find('a').first().simulate('click');
            expect(previous).toHaveBeenCalled();
        });
    });
    describe('rendering', () => {
        it('should show the carousel indicators', () => {
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next' }));
            expect(wrapper.find('.msc-carousel__indicators li').length).toEqual(3);
        });
        it('should show controls', () => {
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next' }));
            expect(wrapper.find('.msc-carousel__control__prev').length).toEqual(1);
            expect(wrapper.find('.msc-carousel__control__next').length).toEqual(1);
        });
        it('should show a single slide', () => {
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next' }));
            expect(wrapper.find('.msc-carousel__item.active').hostNodes().length).toEqual(1);
        });
    });
    describe('carouseling', () => {
        it('should set indicatorClicked to true if indicator clicked', () => {
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next' }));
            wrapper.find('.msc-carousel__indicators').find('li').first().simulate('click');
            const carouselElement = wrapper.instance();
            expect(carouselElement.state.indicatorClicked).toEqual(true);
        });
    });
    describe('carousel', () => {
        it('renders only slides', () => {
            const input = renderer.create(React.createElement("div", null,
                React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next', hideFlipper: true, hideIndicator: true, transitionType: 'fade' })));
            expect(input.toJSON()).toMatchSnapshot();
        });
        it('renders dismiss enabled', () => {
            const input = renderer.create(React.createElement("div", null,
                React.createElement(Carousel, { activeIndex: 0, next: () => { }, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next', dismissEnabled: true, indicatorAriaText: 'Indicators', touchScrollThreshold: 100, transitionType: 'slide' })));
            expect(input.toJSON()).toMatchSnapshot();
        });
    });
    describe('interval', () => {
        it('should not autoplay by default', () => {
            const next = jest.fn();
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: next, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next', interval: 1000 }));
            jest.runTimersToTime(1000);
            expect(next).not.toHaveBeenCalled();
            wrapper.unmount();
        });
        it('should autoplay when ride is carousel', () => {
            const next = jest.fn();
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: next, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next', interval: 1000, ride: 'carousel' }));
            jest.runTimersToTime(1000);
            expect(next).toHaveBeenCalled();
            wrapper.unmount();
        });
        it('should accept a number', () => {
            const next = jest.fn();
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: next, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next', interval: 1000, ride: 'carousel' }));
            jest.runTimersToTime(1000);
            expect(next).toHaveBeenCalled();
            wrapper.unmount();
        });
        it('should accept a boolean', () => {
            const next = jest.fn();
            const wrapper = mount(React.createElement(Carousel, { activeIndex: 0, next: next, previous: () => { }, items: slides, onIndicatorsClickHandler: () => { }, directionTextPrev: 'Previous', directionTextNext: 'Next' }));
            jest.runTimersToTime(5000);
            expect(next).not.toHaveBeenCalled();
            wrapper.unmount();
        });
        it('should default to 5000', () => {
            const next = jest.fn();
            const wrapper = mount(React.createElement(Carousel, { next: next, previous: () => { }, activeIndex: 0, ride: 'carousel', items: slides }));
            jest.runTimersToTime(5000);
            expect(next).toHaveBeenCalled();
            wrapper.unmount();
        });
        it('it should accept a string', () => {
            const next = jest.fn();
            const wrapper = mount(React.createElement(Carousel, { next: next, previous: () => { }, interval: 1000, activeIndex: 0, ride: 'carousel', items: slides }));
            jest.runTimersToTime(1000);
            expect(next).toHaveBeenCalled();
            wrapper.unmount();
        });
    });
});
//# sourceMappingURL=Carousel.test.js.map