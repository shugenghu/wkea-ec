import * as React from 'react';
import { Button, format, getPayloadObject, getTelemetryAttributes, TelemetryConstant } from '@msdyn365-commerce-modules/utilities';
import { msdyn365Commerce } from '@msdyn365-commerce/core';
import { PriceComponent } from '../index';
const PromoCodeComponentActions = {};
class PromoCode extends React.Component {
    constructor(props, state) {
        super(props);
        this._onInputChange = (e) => {
            const error = e.target.value === '' ? '' : this.state.error;
            this.setState({
                promoCodeInputValue: e.target.value, error: error,
                canApply: e.target.value ? true : false
            });
        };
        this._applyPromotion = (cartState) => {
            if (!cartState || !cartState.cart) {
                return;
            }
            const appliedPromo = this.state.promoCodeInputValue;
            cartState.addPromoCode({ promoCode: appliedPromo })
                .then(result => {
                if (result.status === 'SUCCESS') {
                    this.setState({ promoCodeInputValue: '', error: '', canApply: false });
                }
                else if (result.substatus === 'ALREADYADDED') {
                    this.setState({ error: this.props.duplicatePromoCodeErrorText });
                }
                else {
                    this.setState({ error: this.props.invalidPromoCodeErrorText });
                }
            })
                .catch(error => {
                this.setState({ error: this.props.failedToAddPromoCodeErrorText });
            });
        };
        this._renderForm = (promoPlaceholderText, promoCodeApplyButtonText, cartState) => {
            const _onSubmit = (event) => { event.preventDefault(); this._applyPromotion(cartState); };
            const _applyPromotion = (event) => { this._applyPromotion(cartState); };
            const attributes = getTelemetryAttributes(this.props.telemetryContent, this.payLoad);
            return (React.createElement("form", { onSubmit: _onSubmit, className: 'msc-promo-code__form-container' },
                React.createElement("div", { className: 'msc-promo-code__group' },
                    React.createElement("input", { className: 'msc-promo-code__input-box', "aria-label": promoPlaceholderText, onChange: this._onInputChange, value: this.state.promoCodeInputValue, placeholder: promoPlaceholderText }),
                    React.createElement(Button, Object.assign({ title: promoCodeApplyButtonText, className: 'msc-promo-code__apply-btn btn', onClick: _applyPromotion, disabled: !this.state.canApply }, attributes), promoCodeApplyButtonText))));
        };
        this._removePromotion = (cartState, event) => {
            if (!cartState) {
                return;
            }
            const code = event.currentTarget.getAttribute('data-value') || '';
            cartState.removePromoCodes({
                promoCodes: [
                    code
                ]
            })
                .then(result => {
                if (result.status === 'SUCCESS') {
                    this.setState({ error: '' });
                }
            })
                .catch(() => {
                this.setState({ error: this.props.failedToRemovePromoCodeErrorText });
            });
        };
        this._calculateDiscount = (code, cartState) => {
            if (!cartState || !cartState.cart || !cartState.cart.CartLines || cartState.cart.CartLines.length === 0 || !code) {
                return;
            }
            let discountAmount = 0;
            for (const line of cartState.cart.CartLines) {
                if (line.DiscountLines) {
                    for (const discountLine of line.DiscountLines) {
                        if (discountLine.DiscountCode === code) {
                            discountAmount += discountLine.DiscountCost;
                        }
                    }
                }
            }
            return discountAmount * -1;
        };
        this._renderAppliedPromoCode = (props) => {
            if (!props.cart || !props.cart.cart || !props.cart.cart.Coupons || !(props.cart.cart.Coupons.length > 0)) {
                return;
            }
            const _removePromotion = (event) => { this._removePromotion(props.cart, event); };
            return (React.createElement(React.Fragment, null,
                React.createElement("div", { className: 'msc-promo-code__discount' },
                    React.createElement("div", { className: 'msc-promo-code__discount-heading' }, this.props.appliedPromoCodeHeadingText),
                    React.createElement(PriceComponent, { data: {
                            price: {
                                CustomerContextualPrice: props.cart.cart.DiscountAmount
                            }
                        }, context: props.context, id: props.id, typeName: props.typeName, className: 'msc-promo-code__discount-value' })),
                props.cart.cart.Coupons.map((coupon) => {
                    const ariaLabel = props.removePromoAriaLabelFormat ? format(props.removePromoAriaLabelFormat, props.removePromoText, coupon.Code) : '';
                    return (React.createElement("div", { key: coupon.Code, className: 'msc-promo-code__line-container' },
                        React.createElement("div", { className: 'msc-promo-code__line-value' },
                            coupon.Code,
                            " (",
                            React.createElement(PriceComponent, { data: {
                                    price: {
                                        CustomerContextualPrice: this._calculateDiscount(coupon.Code || '', props.cart)
                                    }
                                }, context: props.context, id: props.id, typeName: props.typeName, className: 'msc-promo-code__line-discount-value' }),
                            ")"),
                        React.createElement(Button, { title: props.removePromoText, className: 'msc-promo-code__line__btn-remove', onClick: _removePromotion, "data-value": coupon.Code, "aria-label": ariaLabel }, props.removePromoText)));
                })));
        };
        this.payLoad = getPayloadObject('click', this.props.telemetryContent, TelemetryConstant.ApplyPromoCode);
        this.state = {
            isCollapseOpen: false,
            promoCodeInputValue: '',
            error: '',
            canApply: false
        };
    }
    render() {
        return (React.createElement("div", null,
            React.createElement("div", { className: 'msc-promo-code-heading' }, this.props.promoCodeHeadingText),
            this._renderForm(this.props.promoPlaceholderText, this.props.promoCodeApplyButtonText, this.props.cart),
            React.createElement("p", { className: this.state.error ? 'msc-alert-danger' : '', "aria-live": 'assertive' }, this.state.error),
            this._renderAppliedPromoCode(this.props)));
    }
}
export const PromoCodeComponent = msdyn365Commerce.createComponent('PromoCode', { component: PromoCode, ...PromoCodeComponentActions });
//# sourceMappingURL=promocode.component.js.map