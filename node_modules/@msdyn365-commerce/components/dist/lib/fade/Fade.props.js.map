{"version":3,"file":"Fade.props.js","sourceRoot":"./src/","sources":["fade/Fade.props.ts"],"names":[],"mappings":"","sourcesContent":["import { EndHandler, EnterHandler, ExitHandler, TransitionActions, TransitionChildren } from 'react-transition-group/Transition';\n\nexport interface ITransitionProps extends TransitionActions {\n    mountOnEnter?: boolean;\n    unmountOnExit?: boolean;\n    timeout?: number | { enter?: number; exit?: number };\n    addEndListener?: EndHandler;\n\n    /**\n     * Callback fired before the \"entering\" status is applied. An extra parameter\n     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n     */\n    onEnter?: EnterHandler;\n    onEntering?: EnterHandler;\n    onEntered?: EnterHandler;\n    onExit?: ExitHandler;\n    onExiting?: ExitHandler;\n    onExited?: ExitHandler;\n    children?: TransitionChildren;\n}\n\n/* tslint:disable:no-reserved-keywords */\n/**\n * Fade properties.\n * Extends from React.HTMLAttributes<HTMLElement> to use the custom props\n */\nexport interface IFadeProps extends React.HTMLAttributes<HTMLElement>, ITransitionProps {\n    /** tag Property to set if you want the HTML tag to be something else */\n    tag?: React.ReactType;\n\n    children?: React.ReactNode;\n\n    /** className Property to set any CSS classnames on the Fade */\n    className?: string;\n\n    /** Base class for the transition */\n    baseClass?: string;\n\n    /** Base class for when the transition is active (shown) */\n    baseClassActive?: string;\n\n    /** color Property to set the color of the button */\n    color?: string;\n\n    /** Show the component, triggers the fade in or fade out animation */\n    in?: boolean;\n\n    /** Property to set any CSS classModule on the modal */\n    cssModule?: object;\n\n     /** id Property to set id of fade element */\n    id?: string;\n}\n/* tslint:enable:no-reserved-keywords */\n"]}