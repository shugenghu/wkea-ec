import { getProductPageUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { format, getPayloadObject, getTelemetryAttributes, onTelemetryClick } from '@msdyn365-commerce-modules/utilities';
import { Image, msdyn365Commerce } from '@msdyn365-commerce/core';
import React from 'react';
import { PriceComponent, RatingComponent } from '../index';
const PriceComponentActions = {};
const ProductCard = ({ data, context, imageSettings, savingsText, freePriceText, originalPriceText, currentPriceText, ratingAriaLabel, allowBack, typeName, id, telemetryContent }) => {
    const product = data.product;
    if (!product) {
        return null;
    }
    let productUrl = getProductPageUrlSync(product.Name || '', product.RecordId, context && context.actionContext, undefined);
    if (allowBack) {
        productUrl = updateProductUrl(productUrl, context);
    }
    const payLoad = getPayloadObject('click', telemetryContent, '', product.RecordId.toString());
    const attribute = getTelemetryAttributes(telemetryContent, payLoad);
    return (React.createElement("a", Object.assign({ href: productUrl, onClick: onTelemetryClick(telemetryContent, payLoad, product.Name), "aria-label": renderLabel(product.Name, context.cultureFormatter.formatCurrency(product.Price), product.AverageRating, ratingAriaLabel), className: 'msc-product' }, attribute),
        React.createElement("div", { className: 'msc-product__image' }, renderProductPlacementImage(imageSettings, context.request.gridSettings, product.PrimaryImageUrl, product.Name)),
        React.createElement("div", { className: 'msc-product__details' },
            React.createElement("h4", { className: 'msc-product__title' }, product.Name),
            renderPrice(context, typeName, id, product.BasePrice, product.Price, savingsText, freePriceText, originalPriceText, currentPriceText),
            renderDescription(product.Description),
            !context.app.config.hideRating && renderRating(context, typeName, id, product.AverageRating, product.TotalRatings, ratingAriaLabel))));
};
function renderLabel(name, price, rating, ratingAriaLabel) {
    name = name || '';
    price = price || '';
    return (`${name} ${price} ${getRatingAriaLabel(rating, ratingAriaLabel)}`);
}
function renderDescription(description) {
    return React.createElement("p", { className: 'msc-product__text' }, description);
}
function getRatingAriaLabel(rating, ratingAriaLabel) {
    if (rating && ratingAriaLabel) {
        const roundedRating = rating.toFixed(2);
        return format(ratingAriaLabel || '', roundedRating, '5');
    }
    return '';
}
function updateProductUrl(productUrl, context) {
    const srcUrl = new URL(productUrl, context.request.apiSettings.baseUrl);
    const queryString = `back=true`;
    if (srcUrl.search) {
        srcUrl.search += `&${queryString}`;
    }
    else {
        srcUrl.search += queryString;
    }
    const updatedUrl = new URL(srcUrl.href);
    return updatedUrl.pathname + srcUrl.search;
}
function renderRating(context, typeName, id, avgRating, totalRatings, ariaLabel) {
    if (!avgRating) {
        return null;
    }
    const numRatings = totalRatings && totalRatings.toString() || undefined;
    const ratingAriaLabel = getRatingAriaLabel(avgRating, ariaLabel);
    return (React.createElement(RatingComponent, { context: context, id: id, typeName: typeName, avgRating: avgRating, ratingCount: numRatings, readOnly: true, ariaLabel: ratingAriaLabel, data: {} }));
}
function renderPrice(context, typeName, id, basePrice, adjustedPrice, savingsText, freePriceText, originalPriceText, currentPriceText) {
    const price = {
        BasePrice: basePrice,
        AdjustedPrice: adjustedPrice,
        CustomerContextualPrice: adjustedPrice
    };
    return (React.createElement(PriceComponent, { context: context, id: id, typeName: typeName, data: { price: price }, savingsText: savingsText, freePriceText: freePriceText, originalPriceText: originalPriceText }));
}
function renderProductPlacementImage(imageSettings, gridSettings, imageUrl, altText) {
    if (!imageUrl || !gridSettings || !imageSettings) {
        return null;
    }
    const img = {
        src: imageUrl,
        altText: altText ? altText : ''
    };
    const imageProps = {
        gridSettings: gridSettings,
        imageSettings: imageSettings
    };
    return (React.createElement(Image, Object.assign({}, img, imageProps, { loadFailureBehavior: 'empty' })));
}
export const ProductComponent = msdyn365Commerce.createComponent('Product', { component: ProductCard, ...PriceComponentActions });
//# sourceMappingURL=product.component.js.map