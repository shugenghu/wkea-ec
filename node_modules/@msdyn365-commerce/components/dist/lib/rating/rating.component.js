import React, { useEffect, useState } from 'react';
import { msdyn365Commerce } from '@msdyn365-commerce/core';
const roundUpMin = 0.75;
const roundMidMin = 0.25;
const maxRating = 5;
const RatingComponentActions = {
    onSliderChanged(event, props, setRating) {
        const value = parseInt(event.target.value, 10);
        setRating({ rating: value, lastSelectedRating: value });
        if (props.onChange) {
            props.onChange(value);
        }
    },
    onMouseLeave(_event, rating, setRating) {
        setRating({ rating: rating.lastSelectedRating, lastSelectedRating: rating.lastSelectedRating });
    },
    onMouseOver(event, rating, setRating) {
        setRating({ rating: getIndex(event), lastSelectedRating: rating.lastSelectedRating });
    },
    onClick(event, props, setRating) {
        if (!props.readOnly) {
            const index = getIndex(event);
            setRating({ rating: index, lastSelectedRating: index });
            if (props.onChange) {
                props.onChange(index);
            }
        }
    }
};
const Rating = (props) => {
    const initialRating = props.readOnly ? props.avgRating : props.initialRating || 0;
    const [rating, setRating] = useState({ rating: initialRating, lastSelectedRating: initialRating });
    useEffect(() => {
        const newRating = props.readOnly ? props.avgRating : props.initialRating || 0;
        setRating({ rating: newRating, lastSelectedRating: newRating });
    }, [props]);
    const onChange = (event) => RatingComponentActions.onSliderChanged(event, props, setRating);
    const onMouseLeave = (event) => RatingComponentActions.onMouseLeave(event, rating, setRating);
    const onMouseOver = (event) => RatingComponentActions.onMouseOver(event, rating, setRating);
    const onClick = (event) => RatingComponentActions.onClick(event, props, setRating);
    return (React.createElement("div", { className: `msc-rating  ${rating.rating > 0 ? 'msc-no-ratings' : ''} ${props.className ? props.className : ''}` },
        starControl(props.readOnly, rating.rating, props.ariaLabel, onChange),
        React.createElement("div", { "aria-hidden": true, onMouseLeave: props.readOnly ? undefined : onMouseLeave, className: 'msc-rating__group' }, renderStars(rating.rating, props, onMouseOver, onClick)),
        props.ratingCount && React.createElement("output", { tabIndex: -1, "aria-hidden": true, className: 'msc-rating__count' },
            " ",
            props.typeName === 'reviews-list' ? `${props.avgRating} / 5 (${props.ratingCount})` : props.ratingCount,
            " ")));
};
Rating.defaultProps = {
    avgRating: 0
};
const starControl = (readOnly, currentRating, ariaLabel, onChange) => {
    if (readOnly) {
        return React.createElement("div", { className: 'msc-rating__range sr-only' }, ariaLabel);
    }
    return (React.createElement("input", { type: 'range', className: 'msc-rating__range', min: 0, max: 5, step: 1, value: currentRating, "aria-valuemax": 5, "aria-valuemin": 0, "aria-valuenow": currentRating, onChange: onChange, "aria-label": ariaLabel }));
};
const renderStars = (rating, props, mouseOver, onClick) => {
    const floor = Math.floor(rating);
    const remainder = rating - floor;
    const filled = remainder < roundUpMin ? floor : floor + 1;
    const half = roundMidMin <= remainder && remainder < roundUpMin ? filled + 1 : 0;
    const stars = [];
    for (let i = 1; i <= maxRating; i++) {
        const glyphClass = filled >= i ? 'msc-rating__star' : half === i ? 'msc-rating__half-star' : 'msc-rating__empty-star';
        stars.push(React.createElement("span", { className: glyphClass, "data-index": i, key: i, onMouseOver: props.readOnly ? undefined : mouseOver, onClick: onClick, role: 'presentation' }));
    }
    return stars;
};
const getIndex = (event) => {
    const target = event.target;
    return parseInt(target.getAttribute('data-index'), 10);
};
export const RatingComponent = msdyn365Commerce.createComponent('Rating', { component: Rating, ...RatingComponentActions });
//# sourceMappingURL=rating.component.js.map