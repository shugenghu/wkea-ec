/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { getPayloadObject, getTelemetryAttributes } from '@msdyn365-commerce-modules/utilities';
import { Image, msdyn365Commerce } from '@msdyn365-commerce/core';
import classNames from 'classnames';
import * as React from 'react';
import { PriceComponent } from '../index';
const CartLineItemFunctions = {
    renderProductDimensions: (Product, DimensionStrings) => {
        if (!Product || !Product.Dimensions) {
            return [];
        }
        return Product.Dimensions.map(productDimension => {
            if (productDimension.DimensionTypeValue === 1) {
                return (React.createElement("div", { key: `${Product.RecordId}ProductDimensions1`, className: 'msc-cart-line__product-variant-item' },
                    React.createElement("span", { className: 'msc-cart-line__product-variant-color' },
                        DimensionStrings.colorString,
                        React.createElement("span", { className: 'name' }, productDimension.DimensionValue && productDimension.DimensionValue.Value))));
            }
            if (productDimension.DimensionTypeValue === 2) {
                return (React.createElement("div", { key: `${Product.RecordId}ProductDimensions2`, className: 'msc-cart-line__product-variant-item' },
                    React.createElement("span", { className: 'msc-cart-line__product-configuration' },
                        DimensionStrings.configString,
                        React.createElement("span", { className: 'name' }, productDimension.DimensionValue && productDimension.DimensionValue.Value))));
            }
            if (productDimension.DimensionTypeValue === 3) {
                return (React.createElement("div", { key: `${Product.RecordId}ProductDimensions3`, className: 'msc-cart-line__product-variant-item' },
                    React.createElement("span", { className: 'msc-cart-line__product-variant-size' },
                        DimensionStrings.sizeString,
                        React.createElement("span", { className: 'name' }, productDimension.DimensionValue && productDimension.DimensionValue.Value))));
            }
            if (productDimension.DimensionTypeValue === 4) {
                return (React.createElement("div", { key: `${Product.RecordId}ProductDimensions4`, className: 'msc-cart-line__product-variant-item' },
                    React.createElement("span", { className: 'msc-cart-line__product-variant-style' },
                        DimensionStrings.styleString,
                        React.createElement("span", { className: 'name' }, productDimension.DimensionValue && productDimension.DimensionValue.Value))));
            }
            return null;
        });
    },
    renderDiscountLines: (props) => {
        if (!props.data.cartLine.DiscountLines || props.data.cartLine.DiscountLines.length === 0) {
            return null;
        }
        return props.data.cartLine.DiscountLines.map((discountLine, index) => {
            return (React.createElement("div", { key: discountLine.OfferId || index, className: 'msc-cart-line-item-product-discount' },
                React.createElement("span", { className: 'msc-cart-line__product-savings-label' },
                    discountLine.OfferName ? discountLine.OfferName : '',
                    ":",
                    ` ${props.resources.discountStringText || 'Discount'} `),
                React.createElement("span", { className: 'msc-cart-line__promo-codes' }, discountLine.DiscountCost && (React.createElement(React.Fragment, null,
                    React.createElement(PriceComponent, { data: props.isSalesLine ? {
                            price: {
                                CustomerContextualPrice: props.data.cartLine.PeriodicDiscount
                            }
                        } : {
                            price: {
                                CustomerContextualPrice: props.data.cartLine.DiscountAmountWithoutTax,
                                BasePrice: props.data.cartLine.DiscountAmount
                            }
                        }, context: props.context, id: props.id, typeName: props.typeName, className: 'msc-cart-line__discount-value' })))),
                React.createElement("span", null, ` (${discountLine.Percentage !== undefined ? discountLine.Percentage : ''}%)`)));
        });
    },
    renderInventoryLabel: (props) => {
        if (!props.inventoryInformationLabel) {
            return null;
        }
        const inventoryCssName = props.inventoryLabelClassName ? `msc-cart-line__product-inventory-label ${props.inventoryLabelClassName}` : 'msc-cart-line__product-inventory-label';
        return (React.createElement("span", { className: inventoryCssName }, props.inventoryInformationLabel));
    },
    renderShippingLabel: (props) => {
        const pickupDeliveryModeCode = props.context.request.channel?.PickupDeliveryModeCode;
        const cartline = props.data.cartLine;
        const hasShippingMethod = !!cartline.DeliveryMode && cartline.DeliveryMode !== pickupDeliveryModeCode ? true : false;
        if (!hasShippingMethod) {
            return undefined;
        }
        const shippingChargeLines = (cartline.ChargeLines || []).filter(chargeLine => chargeLine.IsShipping);
        if (shippingChargeLines.length === 0) {
            return undefined;
        }
        const freightFee = shippingChargeLines.reduce((chargeTotal, chargeLine) => {
            return chargeTotal + (chargeLine.CalculatedAmount || 0);
        }, 0);
        const priceComponent = (React.createElement(PriceComponent, { data: {
                price: {
                    CustomerContextualPrice: freightFee
                }
            }, freePriceText: 'Free', context: props.context, id: props.id, typeName: props.typeName, className: 'msc-cart-line__freight-actual' }));
        return (React.createElement(React.Fragment, null,
            React.createElement("label", { className: 'msc-cart-line__freight-label' }, `${props.resources.shippingChargesText}:`),
            React.createElement("span", { className: 'shipping-value' }, priceComponent)));
    },
    renderOtherCharges: (props) => {
        const cartline = props.data.cartLine;
        const otherCharges = cartline.ChargeLines?.filter((chargeline) => !chargeline.IsShipping);
        return otherCharges && otherCharges.map((otherCharge, key) => {
            return (React.createElement("div", { className: 'msc-cart-line__other-charges', key: key },
                React.createElement("label", { className: 'msc-cart-line__other-charges-label' }, `${otherCharge.Description}:`),
                React.createElement("span", { className: 'other-charge-value' },
                    React.createElement(PriceComponent, { data: {
                            price: {
                                CustomerContextualPrice: otherCharge.CalculatedAmount
                            }
                        }, context: props.context, id: props.id, typeName: props.typeName, className: 'msc-cart-line__other-charges-actual' }))));
        }) || undefined;
    }
};
const CartLine = (props) => {
    const { isSalesLine, productUrl, resources } = props;
    const { product } = props.data;
    const destructDimensionStrings = {
        sizeString: resources.sizeString,
        colorString: resources.colorString,
        styleString: resources.styleString,
        configString: resources.configString
    };
    const fallbackImageUrl = getFallbackImageUrl(product.ItemId, props.context.actionContext.requestContext.apiSettings);
    const { inputQuantityAriaLabel } = props.resources;
    const productDimensions = CartLineItemFunctions.renderProductDimensions(product, destructDimensionStrings);
    const renderDisountLines = CartLineItemFunctions.renderDiscountLines(props);
    const renderInventoryLabel = CartLineItemFunctions.renderInventoryLabel(props);
    const renderShippingLabel = CartLineItemFunctions.renderShippingLabel(props);
    const renderOtherCharges = CartLineItemFunctions.renderOtherCharges(props);
    const payLoad = getPayloadObject('click', props.telemetryContent, '', product.RecordId.toString());
    const prodAttribute = getTelemetryAttributes(props.telemetryContent, payLoad);
    const _generateErrorMessage = () => {
        if (props.errorMessage) {
            return (React.createElement("div", { className: 'msc-alert__header' },
                React.createElement("span", { className: 'msi-exclamation-triangle' }),
                React.createElement("span", null, props.errorMessage)));
        }
        return null;
    };
    const _updateQuantity = (event) => {
        if (props.quantityOnChange) {
            props.quantityOnChange(props.data.cartLine, parseInt(event.target.value, 10));
        }
    };
    const _generateMenu = (quantity) => {
        const nodes = [];
        for (let i = 1; i <= quantity; i++) {
            nodes.push(React.createElement("option", { className: 'msc-cart-line__quantity__select-menu__item', value: i }, i));
        }
        return nodes;
    };
    const _generateSelectMenu = (quantity, currentQuantity) => {
        return (React.createElement("select", { className: 'msc-cart-line__quantity__select-menu', "aria-label": inputQuantityAriaLabel, value: currentQuantity, onChange: _updateQuantity }, _generateMenu(quantity)));
    };
    const _generateQuantityAndPrice = () => {
        const nodes = [];
        const errorMessage = _generateErrorMessage();
        if (props.isOutOfStock) {
            if (errorMessage) {
                return [errorMessage];
            }
            return null;
        }
        if (props.isQuantityEditable) {
            if (errorMessage) {
                nodes.push(errorMessage);
            }
            nodes.push(_generateSelectMenu(props.maxQuantity || 10, props.currentQuantity));
        }
        else {
            nodes.push(React.createElement("div", { className: classNames('msc-cart-line__quantity', { 'single-quantity': props.data.cartLine.Quantity === 1 }) },
                React.createElement("label", { className: 'quantity-label' }, resources.quantityDisplayString),
                errorMessage,
                React.createElement("span", { className: 'quantity-value' }, props.data.cartLine.Quantity)));
        }
        nodes.push(React.createElement("div", { className: 'msc-cart-line__product-price' },
            React.createElement(PriceComponent, { data: isSalesLine ? {
                    price: {
                        CustomerContextualPrice: props.data.cartLine.NetAmount,
                        BasePrice: props.data.cartLine.Price
                    }
                } : {
                    price: {
                        CustomerContextualPrice: props.data.cartLine.NetAmountWithoutTax,
                        BasePrice: props.data.cartLine.NetPrice
                    }
                }, context: props.context, id: props.id, typeName: props.typeName, className: 'discount-value', originalPriceText: resources.originalPriceText, currentPriceText: resources.currentPriceText })));
        return nodes;
    };
    if (props.displayMode === 'COMPACT') {
        const reducedDimensions = product.Dimensions ? product.Dimensions.reduce((str, productDimension) => {
            if (productDimension.DimensionValue && productDimension.DimensionValue.Value) {
                if (str) {
                    return `${str}, ${productDimension.DimensionValue.Value}`;
                }
                return `${productDimension.DimensionValue.Value}`;
            }
            return str;
        }, '') : '';
        return (React.createElement("div", { className: 'msc-cart-line msc-cart-line__compact' },
            React.createElement("div", { className: 'msc-cart-line__product-image' },
                React.createElement(Image, { src: props.primaryImageUrl || '', fallBackSrc: fallbackImageUrl, altText: product.Name, gridSettings: props.gridSettings, imageSettings: props.imageSettings, loadFailureBehavior: 'empty' })),
            React.createElement("div", { className: 'msc-cart-line__content' },
                React.createElement("a", Object.assign({ className: 'msc-cart-line__product-title', href: productUrl }, prodAttribute), product.Name),
                reducedDimensions !== '' ?
                    React.createElement("div", { className: 'msc-cart-line__product-variants' }, reducedDimensions) :
                    '',
                _generateQuantityAndPrice())));
    }
    return (React.createElement("div", { className: 'msc-cart-line' },
        React.createElement("div", { className: 'msc-cart-line__product-image' },
            React.createElement(Image, { src: props.primaryImageUrl || '', fallBackSrc: fallbackImageUrl, altText: product.Name, gridSettings: props.gridSettings, imageSettings: props.imageSettings, loadFailureBehavior: 'empty' })),
        React.createElement("div", { className: 'msc-cart-line__content' },
            React.createElement("div", { className: 'msc-cart-line__product' },
                React.createElement("a", Object.assign({ className: 'msc-cart-line__product-title', href: productUrl }, prodAttribute), product.Name),
                productDimensions.length > 0 ?
                    React.createElement("div", { className: 'msc-cart-line__product-variants' }, productDimensions) :
                    '',
                renderDisountLines,
                renderInventoryLabel,
                props.showShippingChargesForLineItems && React.createElement("div", { className: 'msc-cart-line__freight' }, renderShippingLabel),
                renderOtherCharges),
            _generateQuantityAndPrice())));
};
export const CartLineItemComponent = msdyn365Commerce.createComponent('CartLineItem', { component: CartLine, ...CartLineItemFunctions });
//# sourceMappingURL=cartlineitem.component.js.map