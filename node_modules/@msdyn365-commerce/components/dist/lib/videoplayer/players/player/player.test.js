import { mount } from 'enzyme';
import * as React from 'react';
import { MediaQuality, MediaTypes } from '../../components/data/player-metadata';
import Player from './Player';
describe('Player with different video format', () => {
    it('Player should choose HDX video if all the video formats are provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    lazyLoad: false,
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_3400.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HDX
                        },
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_2250.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        },
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_1500.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.SD
                        },
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_650.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.LO
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        expect(video.src).toBe('https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_3400.mp4');
        wrapper.unmount();
    });
    it('Player chooses HQ video is if HDX video format is not provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    lazyLoad: false,
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_2250.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        },
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_1500.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.SD
                        },
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_650.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.LO
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        expect(video.src).toBe('https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_2250.mp4');
        wrapper.unmount();
    });
    it('Player chooses SD video if HQ and HDX video format are not provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_1500.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.SD
                        },
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_650.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.LO
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        expect(video.src).toContain('//wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_1500.mp4');
        wrapper.unmount();
    });
    it('Player chooses LO video if HDX, HQ and SD video format are not provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_650.mp4',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.LO
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        expect(video.src).toBe('https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_650.mp4');
        wrapper.unmount();
    });
    it('Player fetches video files if binary reference of video files are provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoBinaryReferences: [
                        {
                            alias: '1001',
                            contentType: 'video/mp4',
                            extension: '.mp4',
                            sizeInBytes: 27529833,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/c3ad38d9-9d33-405e-9835-e8a40283302d/06763628-fce1-45bb-af3f-6497a756164e.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-1001',
                            format: '1001',
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/c3ad38d9-9d33-405e-9835-e8a40283302d/06763628-fce1-45bb-af3f-6497a756164e.mp4',
                        },
                        {
                            alias: '1004',
                            sizeInBytes: 0,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest',
                            href: 'cms/api/fabrikam/binary/MC5d2-1004unsupported',
                            format: '1004',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest',
                        },
                        {
                            alias: '1006',
                            sizeInBytes: 0,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest(format=m3u8-aapl)',
                            href: 'cms/api/fabrikam/binary/MC5d2-1006unsupported',
                            format: '1006',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest(format=m3u8-aapl)',
                        },
                        {
                            alias: '1007',
                            sizeInBytes: 0,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest(format=mpd-time-csf)',
                            href: 'cms/api/fabrikam/binary/MC5d2-1007unsupported',
                            format: '1007',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest(format=mpd-time-csf)',
                        },
                        {
                            alias: '105',
                            sizeInBytes: 11298615,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_6750.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-105unsupported',
                            format: '105',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_6750.mp4',
                        },
                        {
                            alias: '104',
                            sizeInBytes: 5782792,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_3400.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-104unsupported',
                            format: '104',
                            height: 720,
                            width: 1280,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_3400.mp4',
                        },
                        {
                            alias: '103',
                            sizeInBytes: 3909268,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_2250.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-103unsupported',
                            format: '103',
                            height: 540,
                            width: 960,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_2250.mp4',
                        },
                        {
                            alias: '102',
                            sizeInBytes: 2678985,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_1500.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-102unsupported',
                            format: '102',
                            height: 540,
                            width: 960,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_1500.mp4',
                        },
                        {
                            alias: '101',
                            sizeInBytes: 1292713,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_650.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-101unsupported',
                            format: '101',
                            height: 360,
                            width: 640,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_650.mp4',
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        expect(video.src).toContain('//wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_3400.mp4');
        wrapper.unmount();
    });
    it('Player fetches video files if binary reference of video files are provided & some video formats are not provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoBinaryReferences: [
                        {
                            alias: '1001',
                            contentType: 'video/mp4',
                            extension: '.mp4',
                            sizeInBytes: 27529833,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/c3ad38d9-9d33-405e-9835-e8a40283302d/06763628-fce1-45bb-af3f-6497a756164e.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-1001',
                            format: '1001',
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/c3ad38d9-9d33-405e-9835-e8a40283302d/06763628-fce1-45bb-af3f-6497a756164e.mp4',
                        },
                        {
                            alias: '1004',
                            sizeInBytes: 0,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest',
                            href: 'cms/api/fabrikam/binary/MC5d2-1004unsupported',
                            format: '',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest',
                        },
                        {
                            alias: '1006',
                            sizeInBytes: 0,
                            sourceHref: '',
                            href: 'cms/api/fabrikam/binary/MC5d2-1006unsupported',
                            format: '1006',
                            height: 1080,
                            width: 1920,
                            clientHref: '',
                        },
                        {
                            alias: '1007',
                            sizeInBytes: 0,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest(format=mpd-time-csf)',
                            href: 'cms/api/fabrikam/binary/MC5d2-1007unsupported',
                            format: '1007',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest(format=mpd-time-csf)',
                        },
                        {
                            alias: '1008',
                            sizeInBytes: 0,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest(format=mpd-time-csf)',
                            href: 'cms/api/fabrikam/binary/MC5d2-1007unsupported',
                            format: '1008',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756.ism/manifest(format=mpd-time-csf)',
                        },
                        {
                            alias: '105',
                            sizeInBytes: 11298615,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_6750.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-105unsupported',
                            format: '105',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_6750.mp4',
                        },
                        {
                            alias: '104',
                            sizeInBytes: 5782792,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_3400.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-104unsupported',
                            format: '104',
                            height: 720,
                            width: 1280,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_3400.mp4',
                        },
                        {
                            alias: '103',
                            sizeInBytes: 3909268,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_2250.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-103unsupported',
                            format: '103',
                            height: 540,
                            width: 960,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_2250.mp4',
                        },
                        {
                            alias: '102',
                            sizeInBytes: 2678985,
                            sourceHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_1500.mp4',
                            href: 'cms/api/fabrikam/binary/MC5d2-102unsupported',
                            format: '102',
                            height: 540,
                            width: 960,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_1500.mp4',
                        },
                        {
                            alias: '101',
                            sizeInBytes: 1292713,
                            sourceHref: '',
                            href: 'cms/api/fabrikam/binary/MC5d2-101unsupported',
                            format: '101',
                            height: 360,
                            width: 640,
                            clientHref: 'https://wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_650.mp4',
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        expect(video.src).toContain('//wus-streaming-video-mr-microsoft-com.akamaized.net/1301ee58-cb8b-43b4-b344-43229f1ba52d/06763628-fce1-45bb-af3f-6497a756_3400.mp4');
        wrapper.unmount();
    });
    it('Player source should be empty if both binary reference and video files are not provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoBinaryReferences: []
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        expect(video.src).toBe('');
        wrapper.unmount();
    });
    it('Player source should be empty if HD format is provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [{
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HD
                        }]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        expect(video.src).toBe('');
        wrapper.unmount();
    });
});
describe('Player with Play Pause Trigger', () => {
    it('Player works correctly with play pause trigger', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: false,
                    thumbnailFullWidth: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ],
                    posterframeUrl: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsY?ver=9875'
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        const timeUpdateEvent = new Event('timeupdate', { bubbles: true, cancelable: false });
        video.dispatchEvent(timeUpdateEvent);
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        playerContainer.simulate('mouseleave');
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        wrapper.update();
        video.play();
        wrapper.update();
        expect(player.state.playing).toBe(true);
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        video.pause();
        expect(player.state.playing).toBe(false);
        wrapper.update();
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        play.click();
        wrapper.update();
        expect(player.state.playing).toBe(true);
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        pause.click();
        wrapper.update();
        expect(player.state.playing).toBe(false);
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        wrapper.unmount();
    });
    it('Player _onTriggerClicked does not throw when ref.current is null', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: false,
                    thumbnailFullWidth: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ],
                    posterframeUrl: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsY'
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        expect(() => player['_onTriggerClicked']()).not.toThrow();
        expect(() => {
            player;
        }).not.toThrow();
        wrapper.unmount();
    });
    it('play pause trigger functionality check with focus and blur', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: false,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        play.focus();
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        play.blur();
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        wrapper.update();
        play.click();
        wrapper.update();
        pause.focus();
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        pause.blur();
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('true');
        wrapper.update();
        const ended = new Event('ended', { bubbles: true, cancelable: false });
        video.dispatchEvent(ended);
        wrapper.unmount();
    });
    it('check default value of resources & glyph icons if not passed', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: false,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        wrapper.unmount();
    });
    it('check default value of resources & glyph icons if passed empty', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: false,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            }, playerResources: {
                playAriaLabel: '',
                pauseAriaLabel: '',
                closeAriaLabel: '',
                muteAriaLabel: '',
                unMuteAriaLabel: '',
                fullScreenAriaLabel: '',
                exitFullScreenAriaLabel: '',
                seekBarLabel: '',
                closedCaptionLabel: ''
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        wrapper.unmount();
    });
});
describe('Player with Trigger & controls', () => {
    it('trigger button remains consistent on mouseHover & poster Image shows up', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: false,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ],
                    posterframeUrl: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsY?ver=102d'
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(video.poster).not.toBe('');
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        playerContainer.simulate('mouseleave');
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        wrapper.unmount();
    });
    it('Check poster Image Shows up with Mask Level', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    maskLevel: 60,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ],
                    posterframeUrl: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsY?ver=102d'
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause',
                muteAriaLabel: 'mute',
                unMuteAriaLabel: 'unmute',
                fullScreenAriaLabel: 'full screen',
                exitFullScreenAriaLabel: 'exit full screen',
                playingAriaLabel: 'playing',
                pausedAriaLabel: 'paused',
                seekBarLabel: 'Seek bar',
                closedCaptionLabel: 'Closed Caption'
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelectorAll('.msc-videoplayer__playpausetrigger__container')[0];
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(video.poster).not.toBe('');
        expect(trigger.getAttribute('style')).toBe('background-color: rgba(0, 0, 0, 0.6);');
        wrapper.unmount();
    });
    it('Check upon clicking the trigger button, controls shows up', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        let controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(controlBar).toBeNull();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        play.click();
        wrapper.update();
        expect(player.state.playing).toBe(true);
        expect(player.state.isTriggerEnabled).toBe(false);
        controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(controlBar).not.toBeNull();
        wrapper.unmount();
    });
    it('Check upon clicking the trigger button & playFullScreen Enabled, video plays in Fullscreen', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    playFullScreen: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        let controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(controlBar).toBeNull();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        play.click();
        wrapper.update();
        expect(player.state.playing).toBe(true);
        expect(player.state.isTriggerEnabled).toBe(false);
        controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(controlBar).not.toBeNull();
        const fullScreenChangeEvent = new Event('fullscreenchange', { bubbles: true, cancelable: false });
        document.dispatchEvent(fullScreenChangeEvent);
        wrapper.update();
        expect(player.state.isInFullScreen).toBe(true);
        wrapper.unmount();
    });
    it('should not show context menu upon right click', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: false,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ],
                    posterframeUrl: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsY?ver=102d'
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        const contextMenu = new Event('contextmenu', { bubbles: true, cancelable: false });
        video.dispatchEvent(contextMenu);
        wrapper.unmount();
    });
});
describe('Player with Trigger & controls & lazy load', () => {
    it('trigger button remains consistent on mouseHover & poster Image shows up', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: false,
                    lazyLoad: true
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ],
                    posterframeUrl: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsY?ver=102d'
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(video.poster).not.toBe('');
        expect(video.src).toBe('');
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        playerContainer.simulate('mouseleave');
        wrapper.update();
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        wrapper.unmount();
    });
    it('Check poster Image Shows up with Mask Level', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    maskLevel: 60,
                    lazyLoad: true
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ],
                    posterframeUrl: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1QsY?ver=102d'
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause',
                muteAriaLabel: 'mute',
                unMuteAriaLabel: 'unmute',
                fullScreenAriaLabel: 'full screen',
                exitFullScreenAriaLabel: 'exit full screen',
                playingAriaLabel: 'playing',
                pausedAriaLabel: 'paused',
                seekBarLabel: 'Seek bar',
                closedCaptionLabel: 'Closed Caption'
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelectorAll('.msc-videoplayer__playpausetrigger__container')[0];
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(video.poster).not.toBe('');
        expect(video.src).toBe('');
        expect(trigger.getAttribute('style')).toBe('background-color: rgba(0, 0, 0, 0.6);');
        wrapper.unmount();
    });
    it('Check upon clicking the trigger button, controls shows up', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    lazyLoad: true
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        let controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(controlBar).toBeNull();
        expect(video.src).toBe('');
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        play.click();
        wrapper.update();
        expect(video.autoplay).toBe(true);
        expect(player.state.isTriggerEnabled).toBe(false);
        controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(controlBar).not.toBeNull();
        expect(video.src).not.toBe('');
        wrapper.unmount();
    });
    it('Check upon clicking the trigger button & playFullScreen Enabled, video plays in Fullscreen', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    playFullScreen: true,
                    lazyLoad: true
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const trigger = document.querySelector('.msc-videoplayer__playpausetrigger');
        let controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(trigger).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(controlBar).toBeNull();
        expect(video.src).toBe('');
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        expect(trigger.getAttribute('aria-hidden')).toBe('false');
        play.click();
        wrapper.update();
        expect(video.autoplay).toBe(true);
        expect(player.state.isTriggerEnabled).toBe(false);
        controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(controlBar).not.toBeNull();
        const fullScreenChangeEvent = new Event('fullscreenchange', { bubbles: true, cancelable: false });
        document.dispatchEvent(fullScreenChangeEvent);
        wrapper.update();
        expect(player.state.isInFullScreen).toBe(true);
        expect(video.src).not.toBe('');
        wrapper.unmount();
    });
});
describe('Player with control bar', () => {
    it('Player _onTriggerClicked does not throw when ref.current is null', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: true,
                    controls: true,
                    lazyLoad: false,
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        expect(() => {
            player.componentDidMount();
        }).not.toThrow();
        expect(() => player['_onTriggerClicked']()).not.toThrow();
        wrapper.unmount();
    });
    it('Play Pause button in video contols works correctly upon clicking', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const play = buttons[0];
        const pause = buttons[1];
        const mute = buttons[2];
        const unMute = buttons[3];
        const fullScreen = buttons[4];
        const exitFullScreen = buttons[5];
        expect(play.getAttribute('aria-label')).toBe('play test video');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        expect(mute.getAttribute('aria-label')).toBe('mute');
        expect(unMute.getAttribute('aria-label')).toBe('unmute');
        expect(fullScreen.getAttribute('aria-label')).toBe('full screen');
        expect(exitFullScreen.getAttribute('aria-label')).toBe('exit full screen');
        wrapper.unmount();
    });
    it('Player show error message when error event is fired', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        let _error;
        Object.defineProperty(video, 'error', {
            get: () => { return _error; },
            set: (value) => { _error = value; },
            configurable: true,
        });
        const player = wrapper.instance();
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const error = new Event('error', { bubbles: true, cancelable: false });
        video.dispatchEvent(error);
        const playing = new Event('playing', { bubbles: true, cancelable: false });
        video.dispatchEvent(playing);
        const mockMediaError = jest.spyOn(video, 'error', 'get');
        mockMediaError.mockImplementation(() => {
            return {
                code: 1,
                msExtendedCode: 0,
                MEDIA_ERR_ABORTED: 1,
                MEDIA_ERR_DECODE: 0,
                MEDIA_ERR_NETWORK: 0,
                MEDIA_ERR_SRC_NOT_SUPPORTED: 0,
                MS_MEDIA_ERR_ENCRYPTED: 0,
                message: ''
            };
        });
        video.dispatchEvent(error);
        expect(player.state.showErrorMessage).toBe(true);
        video.dispatchEvent(playing);
        mockMediaError.mockImplementation(() => {
            return {
                code: 2,
                msExtendedCode: 0,
                MEDIA_ERR_ABORTED: 0,
                MEDIA_ERR_DECODE: 0,
                MEDIA_ERR_NETWORK: 2,
                MEDIA_ERR_SRC_NOT_SUPPORTED: 0,
                MS_MEDIA_ERR_ENCRYPTED: 0,
                message: ''
            };
        });
        video.dispatchEvent(error);
        expect(player.state.showErrorMessage).toBe(true);
        video.dispatchEvent(playing);
        mockMediaError.mockImplementation(() => {
            return {
                code: 3,
                msExtendedCode: 0,
                MEDIA_ERR_ABORTED: 0,
                MEDIA_ERR_DECODE: 3,
                MEDIA_ERR_NETWORK: 0,
                MEDIA_ERR_SRC_NOT_SUPPORTED: 0,
                MS_MEDIA_ERR_ENCRYPTED: 0,
                message: ''
            };
        });
        video.dispatchEvent(error);
        expect(player.state.showErrorMessage).toBe(true);
        video.dispatchEvent(playing);
        mockMediaError.mockImplementation(() => {
            return {
                code: 4,
                msExtendedCode: 0,
                MEDIA_ERR_ABORTED: 0,
                MEDIA_ERR_DECODE: 0,
                MEDIA_ERR_NETWORK: 0,
                MEDIA_ERR_SRC_NOT_SUPPORTED: 4,
                MS_MEDIA_ERR_ENCRYPTED: 0,
                message: ''
            };
        });
        video.dispatchEvent(error);
        expect(player.state.showErrorMessage).toBe(true);
        video.dispatchEvent(playing);
        mockMediaError.mockImplementation(() => {
            return {
                code: 7,
                msExtendedCode: 0,
                MEDIA_ERR_ABORTED: 0,
                MEDIA_ERR_DECODE: 0,
                MEDIA_ERR_NETWORK: 0,
                MEDIA_ERR_SRC_NOT_SUPPORTED: 0,
                MS_MEDIA_ERR_ENCRYPTED: 0,
                message: ''
            };
        });
        video.dispatchEvent(error);
        expect(player.state.showErrorMessage).toBe(true);
        video.dispatchEvent(playing);
        wrapper.unmount();
    });
    it('Player works correctly when video dispatch event is fired', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: true,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        let _error;
        Object.defineProperty(video, 'error', {
            get: () => { return _error; },
            set: (value) => { _error = value; },
            configurable: true,
        });
        const player = wrapper.instance();
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        const play = buttons[0];
        const loadedmetadata = new Event('loadedmetadata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedmetadata);
        const canplay = new Event('canplay', { bubbles: true, cancelable: false });
        video.dispatchEvent(canplay);
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        play.click();
        wrapper.update();
        expect(player.state.playing).toBe(true);
        const timeUpdateEvent = new Event('timeupdate', { bubbles: true, cancelable: false });
        video.dispatchEvent(timeUpdateEvent);
        const waiting = new Event('waiting', { bubbles: true, cancelable: false });
        video.dispatchEvent(waiting);
        video.dispatchEvent(timeUpdateEvent);
        wrapper.unmount();
    });
    it('Player loads correctly with Video Control', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        wrapper.unmount();
    });
    it('Control bar shows up if video is not autoplay', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        expect(controlBar.classList.contains('show')).toBe(true);
        expect(player.state.isControlPanelVisible).toBe(true);
        wrapper.unmount();
    });
    jest.useFakeTimers();
    jest.setTimeout(8000);
    it('Control bar shows up on mouse hover', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const controlPanelTimeout = 6500;
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        expect(player.state.isControlPanelVisible).toBe(true);
        playerContainer.simulate('mouseleave');
        expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), controlPanelTimeout);
        jest.runAllTimers();
        wrapper.update();
        setTimeout(() => {
            expect(controlBar.classList.contains('show')).toBe(false);
            expect(player.state.isControlPanelVisible).toBe(false);
        }, controlPanelTimeout);
        wrapper.unmount();
    });
    it('Control bar shows upon tab', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        player.setState({ isControlPanelVisible: false });
        video.pause();
        playerContainer.simulate('keyDown', { keyCode: 9 });
        wrapper.update();
        playerContainer.simulate('keyDown', { keyCode: 9 });
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        expect(player.state.isControlPanelVisible).toBe(true);
        wrapper.unmount();
    });
    it('Control bar shows up on mouse hover after hidden', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        player.setState({ isControlPanelVisible: false });
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        expect(player.state.isControlPanelVisible).toBe(true);
        wrapper.unmount();
    });
    jest.useFakeTimers();
    jest.setTimeout(8000);
    it('Control bar hides after 6600 ', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const controlPanelTimeout = 6600;
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        expect(player.state.isControlPanelVisible).toBe(true);
        jest.runAllTimers();
        wrapper.update();
        setTimeout(() => {
            expect(controlBar.classList.contains('show')).toBe(false);
            expect(player.state.isControlPanelVisible).toBe(false);
        }, controlPanelTimeout);
        wrapper.unmount();
    });
    it('Play Pause button in video contols works correctly upon clicking', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const controlPanelTimeout = 6500;
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        playerContainer.simulate('mouseleave');
        wrapper.update();
        setTimeout(() => {
            expect(controlBar.classList.contains('show')).toBe(false);
        }, controlPanelTimeout);
        wrapper.update();
        play.click();
        wrapper.update();
        expect(player.state.playing).toBe(true);
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        pause.click();
        wrapper.update();
        expect(player.state.playing).toBe(false);
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        wrapper.unmount();
    });
    it('Check position of the player updated upon playing', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: false,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.muted).toBe(false);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const play = buttons[0];
        const pause = buttons[1];
        play.click();
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        playerContainer.simulate('mouseleave');
        wrapper.update();
        video.currentTime = 0;
        wrapper.update();
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        const intialPosition = player.state.playPosition;
        play.click();
        const playing = new Event('playing', { bubbles: true, cancelable: false });
        video.dispatchEvent(playing);
        video.currentTime = 5;
        wrapper.update();
        const timeUpdateEvent = new Event('timeupdate', { bubbles: true, cancelable: false });
        video.dispatchEvent(timeUpdateEvent);
        expect(video.currentTime > 0).toBe(true);
        const currentPosition = player.state.playPosition;
        expect(intialPosition.startTime).toEqual(currentPosition.startTime);
        expect(intialPosition.endTime).toEqual(currentPosition.endTime);
        expect(intialPosition.currentTime < currentPosition.currentTime).toBe(true);
        const ended = new Event('ended', { bubbles: true, cancelable: false });
        video.dispatchEvent(ended);
        const seekingEvent = new Event('seeking', { bubbles: true, cancelable: false });
        video.dispatchEvent(seekingEvent);
        wrapper.unmount();
    });
    it('Check current volume updates from volume slider', () => {
        const volumeAutoHideTimeout = 2000;
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: false,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const controlPanelTimeout = 6500;
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.muted).toBe(false);
        expect(player.state.currentVolume).toBe(80);
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        playerContainer.simulate('mouseleave');
        wrapper.update();
        setTimeout(() => {
            expect(controlBar.classList.contains('show')).toBe(false);
        }, controlPanelTimeout);
        wrapper.update();
        wrapper
            .find('div.action-toggle')
            .at(1)
            .simulate('mouseOver');
        wrapper.update();
        expect(player.state.isMuted).toBe(false);
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);
        wrapper
            .find('div.action-toggle')
            .at(1)
            .childAt(0)
            .simulate('click');
        expect(player.state.currentVolume).toEqual(0);
        expect(player.state.isMuted).toBe(true);
        wrapper.find('div#VolumeSliderThumb').simulate('keyDown', { keyCode: 38 });
        wrapper.setState({ isMuted: true });
        wrapper.find('div#VolumeSliderThumb').simulate('keyDown', { keyCode: 38 });
        expect(player.state.isMuted).toBe(false);
        wrapper.find('div#VolumeSliderThumb').simulate('keyDown', { keyCode: 40 });
        wrapper.find('div#VolumeSliderThumb').simulate('keyDown', { keyCode: 40 });
        wrapper.find('div#VolumeSliderThumb').simulate('keyDown', { keyCode: 40 });
        expect(player.state.isMuted).toBe(true);
        const volumeChange = new Event('volumechange', { bubbles: true, cancelable: false });
        video.dispatchEvent(volumeChange);
        wrapper
            .find('div.action-toggle')
            .at(1)
            .childAt(1)
            .simulate('click');
        expect(player.state.currentVolume).toEqual(80);
        expect(player.state.isMuted).toBe(false);
        wrapper
            .find('div.action-toggle')
            .at(1)
            .simulate('mouseleave');
        wrapper.update();
        setTimeout(() => {
            expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('hide')).toBe(true);
        }, volumeAutoHideTimeout);
        wrapper.unmount();
    });
    it('Check on changing progess slider fires progess change event', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: true,
                    mute: false,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.muted).toBe(false);
        const buttons = document.querySelectorAll('button');
        const play = buttons[0];
        play.click();
        expect(player.state.playing).toBe(true);
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        playerContainer.simulate('mouseleave');
        wrapper.update();
        video.currentTime = 0;
        wrapper.update();
        const emptiedEvent = new Event('emptied', { bubbles: true, cancelable: false });
        video.dispatchEvent(emptiedEvent);
        wrapper.update();
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 37 });
        wrapper.update();
        const intialPosition = player.state.playPosition;
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 39 });
        video.currentTime = 10;
        wrapper.update();
        const seeked = new Event('seeked', { bubbles: true, cancelable: false });
        video.dispatchEvent(seeked);
        const videoSeeking = jest.spyOn(video, 'seeking', 'get');
        videoSeeking.mockImplementation(() => {
            return true;
        });
        video.dispatchEvent(seeked);
        video.pause();
        video.dispatchEvent(seeked);
        const seeking = new Event('seeking', { bubbles: true, cancelable: false });
        video.dispatchEvent(seeking);
        const timeUpdateEvent = new Event('timeupdate', { bubbles: true, cancelable: false });
        video.dispatchEvent(timeUpdateEvent);
        expect(video.currentTime > 0).toBe(true);
        const currentPosition = player.state.playPosition;
        expect(intialPosition.startTime).toEqual(currentPosition.startTime);
        expect(intialPosition.endTime).toEqual(currentPosition.endTime);
        expect(intialPosition.currentTime < currentPosition.currentTime).toBe(true);
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 1 });
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 36 });
        expect(video.currentTime).toBe(0);
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 35 });
        expect(video.currentTime).toBe(1000);
        wrapper.update();
        wrapper.unmount();
    });
    it('Mute unmute button in video contols works correctly upon clicking', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const controlPanelTimeout = 6500;
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const mute = buttons[2];
        const unMute = buttons[3];
        expect(unMute.getAttribute('aria-hidden')).toBe('false');
        expect(mute.getAttribute('aria-hidden')).toBe('true');
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        playerContainer.simulate('mouseleave');
        wrapper.update();
        setTimeout(() => {
            expect(controlBar.classList.contains('show')).toBe(false);
        }, controlPanelTimeout);
        wrapper.update();
        video.muted = false;
        wrapper.update();
        expect(mute.getAttribute('aria-hidden')).toBe('true');
        expect(unMute.getAttribute('aria-hidden')).toBe('false');
        video.muted = true;
        wrapper.update();
        expect(unMute.getAttribute('aria-hidden')).toBe('false');
        expect(mute.getAttribute('aria-hidden')).toBe('true');
        unMute.click();
        wrapper.update();
        expect(player.state.isMuted).toBe(false);
        expect(player.state.currentVolume > 0).toBe(true);
        expect(mute.getAttribute('aria-hidden')).toBe('false');
        expect(unMute.getAttribute('aria-hidden')).toBe('true');
        mute.click();
        wrapper.update();
        expect(player.state.isMuted).toBe(true);
        expect(player.state.currentVolume).toEqual(0);
        expect(mute.getAttribute('aria-hidden')).toBe('true');
        expect(unMute.getAttribute('aria-hidden')).toBe('false');
        wrapper.unmount();
    });
    it('fullScreen exitFullScreen button in video contols works correctly if fullscreenEnabled is disabled', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const controlPanelTimeout = 6500;
        const player = wrapper.instance();
        const playerContainer = wrapper.find('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        player.render();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const fullScreen = buttons[4];
        const exitFullScreen = buttons[5];
        playerContainer.simulate('mouseenter');
        wrapper.update();
        expect(controlBar.classList.contains('show')).toBe(true);
        playerContainer.simulate('mouseleave');
        wrapper.update();
        setTimeout(() => {
            expect(controlBar.classList.contains('show')).toBe(false);
        }, controlPanelTimeout);
        wrapper.update();
        const getFullscreenEnabled = jest.spyOn(document, 'fullscreenEnabled', 'get');
        getFullscreenEnabled.mockImplementation(() => {
            return false;
        });
        fullScreen.click();
        wrapper.update();
        expect(fullScreen.getAttribute('aria-hidden')).toBe('false');
        expect(exitFullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(player.state.isInFullScreen).toBe(false);
        const fullScreenChangeEvent = new Event('fullscreenchange', { bubbles: true, cancelable: false });
        document.dispatchEvent(fullScreenChangeEvent);
        wrapper.update();
        exitFullScreen.click();
        wrapper.update();
        expect(fullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(exitFullScreen.getAttribute('aria-hidden')).toBe('false');
        const fullScreenErrorEvent = new Event('fullscreenerror', { bubbles: true, cancelable: false });
        document.dispatchEvent(fullScreenErrorEvent);
        wrapper.update();
        expect(fullScreen.getAttribute('aria-hidden')).toBe('false');
        expect(exitFullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(player.state.isInFullScreen).toBe(false);
        wrapper.unmount();
    });
    it('Player doesnt move in full screen mode if some other element is already in fullscreen', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const fullScreen = buttons[4];
        const exitFullScreen = buttons[5];
        const getFullscreenEnabled = jest.spyOn(document, 'fullscreenEnabled', 'get');
        getFullscreenEnabled.mockImplementation(() => {
            return true;
        });
        const fullScreenChangeEvent = new Event('fullscreenchange', { bubbles: true, cancelable: false });
        document.dispatchEvent(fullScreenChangeEvent);
        wrapper.update();
        exitFullScreen.click();
        expect(fullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(exitFullScreen.getAttribute('aria-hidden')).toBe('false');
        expect(player.state.isInFullScreen).toBe(true);
        wrapper.update();
        wrapper.unmount();
    });
    it('fullScreen exitFullScreen button in video contols works correctly upon clicking', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const playerContainer = document.querySelector('.msc-videoplayer');
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const fullScreen = buttons[4];
        const exitFullScreen = buttons[5];
        expect(fullScreen.getAttribute('aria-hidden')).toBe('false');
        expect(exitFullScreen.getAttribute('aria-hidden')).toBe('true');
        const getFullscreenEnabled = jest.spyOn(document, 'fullscreenEnabled', 'get');
        getFullscreenEnabled.mockImplementation(() => {
            return true;
        });
        fullScreen.click();
        const fullScreenChangeEvent = new Event('fullscreenchange', { bubbles: true, cancelable: false });
        document.dispatchEvent(fullScreenChangeEvent);
        wrapper.update();
        expect(fullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(exitFullScreen.getAttribute('aria-hidden')).toBe('false');
        expect(player.state.isInFullScreen).toBe(true);
        Object.defineProperty(document, 'fullscreenElement', {
            value: playerContainer
        });
        exitFullScreen.click();
        document.dispatchEvent(fullScreenChangeEvent);
        wrapper.update();
        expect(fullScreen.getAttribute('aria-hidden')).toBe('false');
        expect(exitFullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(player.state.isInFullScreen).toBe(false);
        wrapper.unmount();
    });
    it('Player doesnt move in full screen mode if some other element is already in fullscreen', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const fullScreen = buttons[4];
        const exitFullScreen = buttons[5];
        const getFullscreenEnabled = jest.spyOn(document, 'fullscreenEnabled', 'get');
        getFullscreenEnabled.mockImplementation(() => {
            return true;
        });
        fullScreen.click();
        expect(fullScreen.getAttribute('aria-hidden')).toBe('false');
        expect(exitFullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(player.state.isInFullScreen).toBe(false);
        wrapper.update();
        wrapper.unmount();
    });
    it('Check upon clicking closed captions button menu appears or not', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    playFullScreen: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoBinaryReferences: [
                        {
                            alias: '105',
                            sizeInBytes: 63062408,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_6750.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-105unsupported',
                            format: '105',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_6750.mp4',
                        },
                        {
                            alias: '104',
                            sizeInBytes: 32414669,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_3400.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-104unsupported',
                            format: '104',
                            height: 720,
                            width: 1280,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_3400.mp4',
                        },
                        {
                            alias: '103',
                            sizeInBytes: 21763098,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_2250.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-103unsupported',
                            format: '103',
                            height: 540,
                            width: 960,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_2250.mp4',
                        },
                        {
                            alias: '102',
                            sizeInBytes: 14856336,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_1500.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-102unsupported',
                            format: '102',
                            height: 540,
                            width: 960,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_1500.mp4',
                        },
                        {
                            alias: '101',
                            sizeInBytes: 6994088,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_650.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-101unsupported',
                            format: '101',
                            height: 360,
                            width: 640,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_650.mp4',
                        },
                        {
                            alias: 'enus',
                            extension: 'ttml',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-enus?ver=d9e5',
                            href: 'cms/api/fabrikam/binary/MAfjDu-enus',
                            locale: 'en-us',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-enus?ver=d9e5',
                        },
                        {
                            alias: 'dede',
                            extension: 'ttml',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-dede?ver=69d7',
                            href: 'cms/api/fabrikam/binary/MAfjDu-dede',
                            locale: 'de-de',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-dede?ver=69d7',
                        },
                    ],
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        const player = wrapper.instance();
        expect(video).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(controlBar).not.toBeNull();
        player.setState({ isControlPanelVisible: true });
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const closedCaptions = buttons[2];
        closedCaptions.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        let menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(4);
        let offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('click');
        expect(player.state.showClosedCaptions).toBe(false);
        const englishButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        englishButton.simulate('click');
        expect(player.state.showClosedCaptions).toBe(true);
        const appButton = wrapper.find('div.msc-videoplayer__controls__menu button').last();
        appButton.simulate('keyDown', { keyCode: 39 });
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(8);
        const presetButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(2);
        presetButton.simulate('click');
        expect(player.state.currentClosedCaptionsSettings.preset).toBe('preset2');
        const resetButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(7);
        resetButton.simulate('click');
        expect(player.state.currentClosedCaptionsSettings.preset).toBe('preset1');
        const custButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(6);
        custButton.simulate('click');
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(10);
        const fontButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        fontButton.simulate('click');
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(8);
        const causalFontButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        causalFontButton.simulate('click');
        expect(player.state.currentClosedCaptionsSettings.text_font).toBe('casual');
        const backFontButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(0);
        backFontButton.simulate('click');
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(10);
        const custBackButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(0);
        custBackButton.simulate('click');
        const presetButton3 = wrapper.find('div.msc-videoplayer__controls__menu button').at(3);
        presetButton3.simulate('mouseenter');
        presetButton3.simulate('mouseleave');
        presetButton3.simulate('focus');
        presetButton3.simulate('blur');
        const backAppreanceButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(0);
        backAppreanceButton.simulate('click');
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(4);
        offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('click');
        expect(player.state.showClosedCaptions).toBe(false);
        wrapper.unmount();
    });
    it('should not throw error upon applying closed caption setting without enabling it', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    playFullScreen: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoBinaryReferences: [
                        {
                            alias: '105',
                            sizeInBytes: 63062408,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_6750.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-105unsupported',
                            format: '105',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_6750.mp4',
                        },
                        {
                            alias: '104',
                            sizeInBytes: 32414669,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_3400.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-104unsupported',
                            format: '104',
                            height: 720,
                            width: 1280,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_3400.mp4',
                        },
                        {
                            alias: '103',
                            sizeInBytes: 21763098,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_2250.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-103unsupported',
                            format: '103',
                            height: 540,
                            width: 960,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_2250.mp4',
                        },
                        {
                            alias: '102',
                            sizeInBytes: 14856336,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_1500.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-102unsupported',
                            format: '102',
                            height: 540,
                            width: 960,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_1500.mp4',
                        },
                        {
                            alias: '101',
                            sizeInBytes: 6994088,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_650.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-101unsupported',
                            format: '101',
                            height: 360,
                            width: 640,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_650.mp4',
                        },
                        {
                            alias: 'enus',
                            extension: 'ttml',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-enus?ver=d9e5',
                            href: 'cms/api/fabrikam/binary/MAfjDu-enus',
                            locale: 'en-us',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-enus?ver=d9e5',
                        },
                        {
                            alias: 'dede',
                            extension: 'ttml',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-dede?ver=69d7',
                            href: 'cms/api/fabrikam/binary/MAfjDu-dede',
                            locale: 'de-de',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-dede?ver=69d7',
                        },
                    ],
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        const player = wrapper.instance();
        expect(video).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(controlBar).not.toBeNull();
        player.setState({ isControlPanelVisible: true });
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const closedCaptions = buttons[2];
        closedCaptions.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        let menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(4);
        const offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('click');
        expect(player.state.showClosedCaptions).toBe(false);
        const appButton = wrapper.find('div.msc-videoplayer__controls__menu button').last();
        appButton.simulate('keyDown', { keyCode: 39 });
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(8);
        const custButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(6);
        custButton.simulate('click');
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(10);
        const fontButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        fontButton.simulate('click');
        fontButton.simulate('mouseenter');
        fontButton.simulate('mouseleave');
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(8);
        const causalFontButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        causalFontButton.simulate('click');
        expect(player.state.currentClosedCaptionsSettings.text_font).toBe('casual');
        const backFontButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(0);
        backFontButton.simulate('click');
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(10);
        wrapper.unmount();
    });
    it('Check upon clicking options button menu appears or not', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    playFullScreen: true,
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoBinaryReferences: [
                        {
                            $type: 'videoBinaryReference',
                            alias: '1001',
                            contentType: 'video/mp4',
                            extension: '.mp4',
                            sizeInBytes: 58775228,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/5b4aaa0e-602a-4964-80d0-cdea46ec368f/1c372c3e-debb-42a3-a6db-58904cebdaad.mp4',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-1001',
                            format: '1001',
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/5b4aaa0e-602a-4964-80d0-cdea46ec368f/1c372c3e-debb-42a3-a6db-58904cebdaad.mp4',
                        },
                        {
                            $type: 'audioBinaryReference',
                            alias: 'daudioenus',
                            extension: 'mp3',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-daudioenus?ver=e1d0',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-daudioenus',
                            audioType: 'descriptiveAudio',
                            locale: 'en-us',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-daudioenus?ver=e1d0',
                        },
                        {
                            $type: 'videoClosedCaptionBinaryReference',
                            alias: 'enus',
                            extension: 'ttml',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-enus?ver=35e8',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-enus',
                            locale: 'en-us',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-enus?ver=35e8',
                        },
                        {
                            $type: 'videoTranscriptBinaryReference',
                            alias: 'tscriptenus',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-tscriptenus?ver=eb65',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-tscriptenus',
                            locale: 'en-us',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-tscriptenus?ver=eb65',
                        },
                        {
                            $type: 'videoBinaryReference',
                            alias: '1004',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb.ism/manifest',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-1004unsupported',
                            format: '1004',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb.ism/manifest',
                        },
                        {
                            $type: 'videoBinaryReference',
                            alias: '1006',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb.ism/manifest(format=m3u8-aapl)',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-1006unsupported',
                            format: '1006',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb.ism/manifest(format=m3u8-aapl)',
                        },
                        {
                            $type: 'videoBinaryReference',
                            alias: '1007',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb.ism/manifest(format=mpd-time-csf)',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-1007unsupported',
                            format: '1007',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb.ism/manifest(format=mpd-time-csf)',
                        },
                        {
                            $type: 'videoBinaryReference',
                            alias: '105',
                            sizeInBytes: 58525412,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_6750.mp4',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-105unsupported',
                            format: '105',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_6750.mp4',
                        },
                        {
                            $type: 'videoBinaryReference',
                            alias: '104',
                            sizeInBytes: 30034160,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_3400.mp4',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-104unsupported',
                            format: '104',
                            height: 720,
                            width: 1280,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_3400.mp4',
                        },
                        {
                            $type: 'videoBinaryReference',
                            alias: '103',
                            sizeInBytes: 20185795,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_2250.mp4',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-103unsupported',
                            format: '103',
                            height: 540,
                            width: 960,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_2250.mp4',
                        },
                        {
                            $type: 'videoBinaryReference',
                            alias: '102',
                            sizeInBytes: 13762254,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_1500.mp4',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-102unsupported',
                            format: '102',
                            height: 540,
                            width: 960,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_1500.mp4',
                        },
                        {
                            $type: 'videoBinaryReference',
                            alias: '101',
                            sizeInBytes: 6469039,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_650.mp4',
                            href: 'cms/api/fabrikamsb/binary/MAtCD0-101unsupported',
                            format: '101',
                            height: 360,
                            width: 640,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/453c0af9-9681-4e09-992e-ac2495410f90/1c372c3e-debb-42a3-a6db-58904ceb_650.mp4',
                        }
                    ],
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        const player = wrapper.instance();
        expect(video).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(controlBar).not.toBeNull();
        player.setState({ isControlPanelVisible: true });
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(8);
        const optionButton = buttons[3];
        const mute = buttons[4];
        const unMute = buttons[5];
        optionButton.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        let menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(1);
        const audioTracks = wrapper.find('div.msc-videoplayer__controls__menu button').last();
        audioTracks.simulate('keyDown', { keyCode: 39 });
        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(3);
        const audioDescription = wrapper.find('div.msc-videoplayer__controls__menu button').at(2);
        audioDescription.simulate('click');
        expect(player.state.currentAudioTrack).not.toBe('');
        expect(player.state.currentAudioTrackURL).not.toBe('');
        video.play();
        audioDescription.simulate('click');
        expect(player.state.currentVolume).toBe(0);
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 37 });
        wrapper.update();
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 39 });
        video.currentTime = 10;
        wrapper.update();
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 38 });
        wrapper.update();
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 40 });
        wrapper.update();
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 36 });
        wrapper.update();
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 35 });
        wrapper.update();
        const seekingEvent = new Event('seeking', { bubbles: true, cancelable: false });
        video.dispatchEvent(seekingEvent);
        const ended = new Event('ended', { bubbles: true, cancelable: false });
        video.dispatchEvent(ended);
        expect(player.state.playing).toBe(false);
        wrapper.find('div#VolumeSliderThumb').simulate('keyDown', { keyCode: 38 });
        expect(player.state.isMuted).toBe(false);
        const audio = document.querySelectorAll('audio')[0];
        const errorEvent = new Event('error', { bubbles: true, cancelable: false });
        audio.dispatchEvent(errorEvent);
        let waitingEvent = new Event('waiting', { bubbles: true, cancelable: false });
        audio.dispatchEvent(waitingEvent);
        let loadeddataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        audio.dispatchEvent(loadeddataEvent);
        mute.click();
        unMute.click();
        player.play();
        const playing = new Event('playing', { bubbles: true, cancelable: false });
        video.dispatchEvent(playing);
        waitingEvent = new Event('waiting', { bubbles: true, cancelable: false });
        audio.dispatchEvent(waitingEvent);
        loadeddataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        audio.dispatchEvent(loadeddataEvent);
        video.pause();
        const defaultAudioTrack = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        defaultAudioTrack.simulate('click');
        expect(player.state.currentAudioTrack).toBe('default');
        expect(player.state.currentAudioTrackURL).toBe('');
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 37 });
        wrapper.update();
        wrapper.find('div#VideoSliderThumb').simulate('keyDown', { keyCode: 39 });
        video.currentTime = 10;
        wrapper.update();
        wrapper.unmount();
    });
    it('should load the passed closed caption language', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    playFullScreen: true,
                    autoCaptions: 'en-us',
                    lazyLoad: false
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoBinaryReferences: [
                        {
                            alias: '105',
                            sizeInBytes: 63062408,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_6750.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-105unsupported',
                            format: '105',
                            height: 1080,
                            width: 1920,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_6750.mp4',
                        },
                        {
                            alias: '104',
                            sizeInBytes: 32414669,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_3400.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-104unsupported',
                            format: '104',
                            height: 720,
                            width: 1280,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_3400.mp4',
                        },
                        {
                            alias: '103',
                            sizeInBytes: 21763098,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_2250.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-103unsupported',
                            format: '103',
                            height: 540,
                            width: 960,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_2250.mp4',
                        },
                        {
                            alias: '102',
                            sizeInBytes: 14856336,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_1500.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-102unsupported',
                            format: '102',
                            height: 540,
                            width: 960,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_1500.mp4',
                        },
                        {
                            alias: '101',
                            sizeInBytes: 6994088,
                            sourceHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_650.mp4',
                            href: 'cms/api/fabrikam/binary/MAfjDu-101unsupported',
                            format: '101',
                            height: 360,
                            width: 640,
                            clientHref: 'https://ppe-streaming-video-mr-microsoft-com.akamaized.net/3453603a-29da-4cc7-9de6-a09c551b68a4/92ab5961-6170-42e5-a283-d4239082_650.mp4',
                        },
                        {
                            alias: 'enus',
                            extension: 'ttml',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-enus?ver=d9e5',
                            href: 'cms/api/fabrikam/binary/MAfjDu-enus',
                            locale: 'en-us',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-enus?ver=d9e5',
                        },
                        {
                            alias: 'dede',
                            extension: 'ttml',
                            sizeInBytes: 0,
                            sourceHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-dede?ver=69d7',
                            href: 'cms/api/fabrikam/binary/MAfjDu-dede',
                            locale: 'de-de',
                            clientHref: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-dede?ver=69d7',
                        },
                    ],
                }
            }, playerResources: {
                playAriaLabel: 'play',
                pauseAriaLabel: 'pause'
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        const player = wrapper.instance();
        expect(video).not.toBeNull();
        expect(video.paused).toBe(true);
        expect(controlBar).not.toBeNull();
        player.setState({ isControlPanelVisible: true });
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        expect(player.state.closedCaptionLanguage).toBe('en-us');
        wrapper.unmount();
    });
    it('mousemove drag to increase value', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true
                },
                metaData: {
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const video = document.querySelectorAll('video')[0];
        const controlBar = document.querySelector('.msc-videoplayer__controls');
        expect(video).not.toBeNull();
        expect(controlBar).not.toBeNull();
        expect(video.paused).toBe(true);
        const sliderDiv = document.getElementsByClassName('msc-videoplayer__controls__slidercontainer');
        const sliderThumb = document.getElementById('VideoSliderThumb');
        expect(sliderDiv).not.toBe(null);
        expect(sliderDiv.length).toBe(1);
        expect(sliderThumb).not.toBe(null);
        const sliderDivElement = sliderDiv[0];
        const sliderThumb1Element = sliderThumb;
        const getOffsetWidthSlider = jest.spyOn(sliderDivElement, 'offsetWidth', 'get');
        const getOffsetWidthSliderThumb = jest.spyOn(sliderThumb1Element, 'offsetWidth', 'get');
        const getBoundingClientRect = jest.spyOn(sliderDivElement, 'getBoundingClientRect');
        getOffsetWidthSlider.mockImplementation(() => {
            return 590;
        });
        getOffsetWidthSliderThumb.mockImplementation(() => {
            return 12;
        });
        getBoundingClientRect.mockImplementation(() => {
            return {
                x: 486,
                y: 486,
                width: 902,
                height: 12,
                top: 486,
                bottom: 22,
                left: 480,
                right: 488,
                toJSON: () => {
                    return 'abc';
                }
            };
        });
        wrapper.find('div#VideoSliderThumb').simulate('mousedown');
        document.dispatchEvent(new MouseEvent('mousemove', {
            cancelable: true,
            bubbles: false,
            screenX: 50,
            screenY: 0,
            clientX: 875,
            clientY: 20
        }));
        wrapper.find('div#VideoSliderThumb').simulate('mouseup');
        wrapper.unmount();
    });
});
describe('Player with ageGate Enabled', () => {
    it('AgeGate shows up if enabled & hides if more than minimum age provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    ageGate: true,
                    lazyLoad: false
                },
                metaData: {
                    minimumAge: 18,
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const ageGate = document.querySelector('.msc-videoplayer__agegate__container');
        const buttons = document.querySelectorAll('button');
        expect(video).not.toBeNull();
        expect(ageGate).not.toBeNull();
        expect(video.paused).toBe(true);
        const submitButton = buttons[0];
        let changeEvent = {
            target: { value: '1', id: 'selectMonth' }
        };
        expect(() => {
            wrapper.find('select').at(0).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();
        expect(submitButton.hasAttribute('disabled')).toBe(true);
        const loadedDataEvent = new Event('loadeddata', { bubbles: true, cancelable: false });
        video.dispatchEvent(loadedDataEvent);
        changeEvent = {
            target: { value: '31', id: 'selectDay' }
        };
        expect(() => {
            wrapper.find('select').at(1).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();
        expect(submitButton.hasAttribute('disabled')).toBe(true);
        changeEvent = {
            target: { value: '1985', id: 'selectYear' }
        };
        expect(() => {
            wrapper.find('select').at(2).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();
        expect(submitButton.hasAttribute('disabled')).toBe(false);
        submitButton.click();
        expect(player.state.isAgegateEnabled).toBe(false);
        wrapper.unmount();
    });
    it('AgeGate shows up if enabled & hides if more than minimum age provided', () => {
        const wrapper = mount(React.createElement(Player, { playerId: 'videoTestID', playerData: {
                options: {
                    autoplay: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    ageGate: true,
                    lazyLoad: false
                },
                metaData: {
                    minimumAge: 18,
                    title: 'test video',
                    description: 'test video desc',
                    videoFiles: [
                        {
                            url: 'https://int-video-cms-rt-microsoft-com.akamaized.net/cms/api/am/videofiledata/RR3K23w-104',
                            mediaType: MediaTypes.MP4,
                            quality: MediaQuality.HQ
                        }
                    ]
                }
            } }), { attachTo: document.body.firstElementChild });
        const player = wrapper.instance();
        const video = document.querySelectorAll('video')[0];
        const ageGate = document.querySelector('.msc-videoplayer__agegate__container');
        const buttons = document.querySelectorAll('button');
        expect(video).not.toBeNull();
        expect(ageGate).not.toBeNull();
        expect(video.paused).toBe(true);
        const submitButton = buttons[0];
        const date = new Date();
        const currentDay = date.getDate() + 1;
        const currentMonth = date.getMonth() + 1;
        const currentYear = date.getFullYear();
        let changeEvent = {
            target: { value: currentMonth.toString(), id: 'selectMonth' }
        };
        expect(() => {
            wrapper.find('select').at(0).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();
        expect(submitButton.hasAttribute('disabled')).toBe(true);
        changeEvent = {
            target: { value: currentDay.toString(), id: 'selectDay' }
        };
        expect(() => {
            wrapper.find('select').at(1).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();
        expect(submitButton.hasAttribute('disabled')).toBe(true);
        changeEvent = {
            target: { value: currentYear.toString(), id: 'selectYear' }
        };
        expect(() => {
            wrapper.find('select').at(2).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();
        expect(submitButton.hasAttribute('disabled')).toBe(false);
        submitButton.click();
        expect(player.state.isAgegateEnabled).toBe(true);
        wrapper.unmount();
    });
});
//# sourceMappingURL=player.test.js.map