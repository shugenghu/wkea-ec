{"version":3,"file":"player.test-ssr.js","sourceRoot":"./src/","sources":["videoplayer/players/player/player.test-ssr.tsx"],"names":[],"mappings":"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","sourcesContent":["import { render } from 'enzyme';\nimport * as React from 'react';\nimport { IPlayerData} from '../../components/data/player-data';\nimport { MediaQuality, MediaTypes } from '../../components/data/player-metadata';\nimport { IPlayerResources  } from '../../components/data/player-resources';\nimport Player from './Player';\n\ndescribe('Player', () => {\n    it('renders player correctly', () => {\n        const videoPlayerData: IPlayerData = {\n            options: {\n                autoplay: true,\n                mute: true,\n                loop: false,\n                playPauseTrigger: true,\n                lazyLoad: false,\n                controls: false\n            },\n            metaData: {\n                videoFiles: [\n                    {\n                        // tslint:disable-next-line:max-line-length no-inferrable-types no-http-string\n                        url: 'https://prod-video-cms-amp-microsoft-com.akamaized.net/tenant/amp/entityid/BBwlT1L?blobrefkey=102&$blob=1',\n                        mediaType: MediaTypes.MP4,\n                        quality: MediaQuality.HQ\n                    }\n                ]\n            }\n        };\n\n        const videoPlayerRes: IPlayerResources = {\n            playAriaLabel:'play',\n            pauseAriaLabel:'pause',\n            closeAriaLabel: 'close',\n            muteAriaLabel: 'mute',\n            unMuteAriaLabel: 'unmute',\n            fullScreenAriaLabel: 'full screen',\n            exitFullScreenAriaLabel: 'exit full screen',\n            seekBarLabel: 'Seek bar',\n            closedCaptionLabel: 'Closed caption'\n        };\n\n        const player = render(\n            <Player\n                playerId='videoTestID'\n                playerData={videoPlayerData}\n                playerResources={videoPlayerRes}\n            />\n        );\n        expect(player).toMatchSnapshot();\n    });\n});\n\ndescribe('Player', () => {\n    it('renders player correctly without playerResources and player id', () => {\n        const videoPlayerData: IPlayerData = {\n            options: {\n                autoplay: true,\n                mute: true,\n                loop: false,\n                playPauseTrigger: false,\n                lazyLoad: false\n            },\n            metaData: {\n                videoFiles: [\n                    {\n                        // tslint:disable-next-line:max-line-length no-inferrable-types no-http-string\n                        url: 'https://prod-video-cms-amp-microsoft-com.akamaized.net/tenant/amp/entityid/BBwlT1L?blobrefkey=102&$blob=1',\n                        mediaType: MediaTypes.MP4,\n                        quality: MediaQuality.HQ\n                    }\n                ]\n            }\n        };\n\n        const videoPlayerRes: IPlayerResources = {\n            playAriaLabel:'play',\n            pauseAriaLabel:'pause',\n            closeAriaLabel: 'close',\n            muteAriaLabel: 'mute',\n            unMuteAriaLabel: 'unmute',\n            fullScreenAriaLabel: 'full screen',\n            exitFullScreenAriaLabel: 'exit full screen',\n            seekBarLabel: 'Seek bar',\n            closedCaptionLabel: 'Closed caption'\n        };\n\n        const player = render(\n            <Player\n                playerId='videoTestID'\n                playerData={videoPlayerData}\n                playerResources={videoPlayerRes}\n            />\n        );\n        expect(player).toMatchSnapshot();\n    });\n});\n\ndescribe('Player', () => {\n    it('renders player correctly without play pause trigger', () => {\n        const videoPlayerData: IPlayerData = {\n            options: {\n                autoplay: false,\n                mute: false,\n                loop: true,\n                playPauseTrigger: false,\n                lazyLoad: false\n            },\n            metaData: {\n                videoFiles: [\n                    {\n                        // tslint:disable-next-line:max-line-length no-inferrable-types no-http-string\n                        url: 'https://prod-video-cms-amp-microsoft-com.akamaized.net/tenant/amp/entityid/BBwlT1L?blobrefkey=102&$blob=1',\n                        mediaType: MediaTypes.MP4,\n                        quality: MediaQuality.HQ\n                    }\n                ]\n            }\n        };\n\n        const videoPlayerRes: IPlayerResources = {\n            playAriaLabel:'play',\n            pauseAriaLabel:'pause',\n            closeAriaLabel: 'close',\n            muteAriaLabel: 'mute',\n            unMuteAriaLabel: 'unmute',\n            fullScreenAriaLabel: 'full screen',\n            exitFullScreenAriaLabel: 'exit full screen',\n            seekBarLabel: 'Seek bar',\n            closedCaptionLabel: 'Closed caption'\n        };\n\n        const player = render(\n            <Player\n                playerId='videoTestID'\n                playerData={videoPlayerData}\n                playerResources={videoPlayerRes}\n            />\n        );\n        expect(player).toMatchSnapshot();\n    });\n});\n\ndescribe('Player with video controls', () => {\n    it('renders player correctly with video controls', () => {\n        const videoPlayerData: IPlayerData = {\n            options: {\n                autoplay: true,\n                mute: true,\n                loop: false,\n                playPauseTrigger: false,\n                controls: true,\n                lazyLoad: false\n            },\n            metaData: {\n                videoFiles: [\n                    {\n                        // tslint:disable-next-line:max-line-length no-inferrable-types no-http-string\n                        url: 'https://prod-video-cms-amp-microsoft-com.akamaized.net/tenant/amp/entityid/BBwlT1L?blobrefkey=102&$blob=1',\n                        mediaType: MediaTypes.MP4,\n                        quality: MediaQuality.HQ\n                    }\n                ]\n            }\n        };\n\n        const videoPlayerRes: IPlayerResources = {\n            playAriaLabel:'play',\n            pauseAriaLabel:'pause',\n            closeAriaLabel: 'close',\n            muteAriaLabel: 'mute',\n            unMuteAriaLabel: 'unmute',\n            fullScreenAriaLabel: 'full screen',\n            exitFullScreenAriaLabel: 'exit full screen',\n            seekBarLabel: 'Seek bar',\n            closedCaptionLabel: 'Closed caption'\n        };\n\n        const player = render(\n            <Player\n                playerId='videoTestID'\n                playerData={videoPlayerData}\n                playerResources={videoPlayerRes}\n            />\n        );\n        expect(player).toMatchSnapshot();\n    });\n\n    it('renders player correctly without playerResources and player id', () => {\n        const videoPlayerData: IPlayerData = {\n            options: {\n                autoplay: true,\n                mute: true,\n                loop: false,\n                playPauseTrigger: false,\n                controls: true,\n                lazyLoad: false\n            },\n            metaData: {\n                videoFiles: [\n                    {\n                        // tslint:disable-next-line:max-line-length no-inferrable-types no-http-string\n                        url: 'https://prod-video-cms-amp-microsoft-com.akamaized.net/tenant/amp/entityid/BBwlT1L?blobrefkey=102&$blob=1',\n                        mediaType: MediaTypes.MP4,\n                        quality: MediaQuality.HQ\n                    }\n                ]\n            }\n        };\n\n        const player = render(\n            <Player\n                playerData={videoPlayerData}\n            />\n        );\n        expect(player).toMatchSnapshot();\n    });\n\n    it('renders player correctly without play pause trigger', () => {\n        const videoPlayerData: IPlayerData = {\n            options: {\n                autoplay: false,\n                mute: false,\n                loop: true,\n                playPauseTrigger: false,\n                controls: false,\n                lazyLoad: false\n            },\n            metaData: {\n                videoFiles: [\n                    {\n                        // tslint:disable-next-line:max-line-length no-inferrable-types no-http-string\n                        url: 'https://prod-video-cms-amp-microsoft-com.akamaized.net/tenant/amp/entityid/BBwlT1L?blobrefkey=102&$blob=1',\n                        mediaType: MediaTypes.MP4,\n                        quality: MediaQuality.HQ\n                    }\n                ]\n            }\n        };\n\n        const videoPlayerRes: IPlayerResources = {\n            playAriaLabel:'play',\n            pauseAriaLabel:'pause',\n            closeAriaLabel: 'close',\n            muteAriaLabel: 'mute',\n            unMuteAriaLabel: 'unmute',\n            fullScreenAriaLabel: 'full screen',\n            exitFullScreenAriaLabel: 'exit full screen',\n            seekBarLabel: 'Seek bar',\n            closedCaptionLabel: 'Closed caption'\n        };\n\n        const player = render(\n            <Player\n                playerId='videoTestID'\n                playerData={videoPlayerData}\n                playerResources={videoPlayerRes}\n            />\n        );\n        expect(player).toMatchSnapshot();\n    });\n\n    it('renders player correctly with video controls', () => {\n        const videoPlayerData: IPlayerData = {\n            options: {\n                autoplay: true,\n                mute: true,\n                loop: false,\n                playPauseTrigger: false,\n                controls: true,\n                ageGate: true,\n                lazyLoad: false\n            },\n            metaData: {\n                videoFiles: [\n                    {\n                        // tslint:disable-next-line:max-line-length no-inferrable-types no-http-string\n                        url: 'https://prod-video-cms-amp-microsoft-com.akamaized.net/tenant/amp/entityid/BBwlT1L?blobrefkey=102&$blob=1',\n                        mediaType: MediaTypes.MP4,\n                        quality: MediaQuality.HQ\n                    }\n                ]\n            }\n        };\n\n        const videoPlayerRes: IPlayerResources = {\n            playAriaLabel:'play',\n            pauseAriaLabel:'pause',\n            closeAriaLabel: 'close',\n            muteAriaLabel: 'mute',\n            unMuteAriaLabel: 'unmute',\n            fullScreenAriaLabel: 'full screen',\n            exitFullScreenAriaLabel: 'exit full screen'\n        };\n\n        const player = render(\n            <Player\n                playerId='videoTestID'\n                playerData={videoPlayerData}\n                playerResources={videoPlayerRes}\n            />\n        );\n        expect(player).toMatchSnapshot();\n    });\n\n});\n"]}