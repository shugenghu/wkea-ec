{"version":3,"file":"ActionToggle.js","sourceRoot":"./src/","sources":["videoplayer/components/action-toggle/ActionToggle.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAQ/B,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,KAAK,CAAC,aAAiC;IAI7E,YAAY,KAAmC;QAC3C,KAAK,CAAC,KAAK,CAAC,CAAC;QAJT,QAAG,GAAoC,KAAK,CAAC,SAAS,EAAkB,CAAC;QACzE,iBAAY,GAAuB,IAAI,CAAC;QAI5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAEM,uBAAuB;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;YACvE,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,aAA4B,CAAC;SAC7D;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,kBAAkB;QACrB,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,EAAE;YACvC,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAgB,CAAC;YAC3F,IAAI,WAAW,KAAK,QAAQ,CAAC,aAAa,EAAE;gBACxC,WAAW,CAAC,KAAK,EAAE,CAAC;aACvB;SACJ;IACL,CAAC;IAEM,MAAM;QACT,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACxE,MAAM,OAAO,GAAG,gBAAgB,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,SAAS,IAAI,EAAE,EAAE,CAAC;QACzE,OAAO,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CACjD,2CAAK,SAAS,EAAE,OAAO,IAAM,KAAK,IAAE,GAAG,EAAE,IAAI,CAAC,GAAG,KAC5C,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAsB,EAAE,KAAa,EAAE,EAAE;YACpE,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEpF,OAAO,KAAK,CAAC,YAAY,CAAC,KAAY,EAAE,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/F,CAAC,CAAC,CACA,CACT,CAAC;IACN,CAAC;IAEO,QAAQ,CAAC,CAAsB;QACnC,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAC3G;IACL,CAAC;CACJ","sourcesContent":["import * as React from 'react';\n\nimport { IActionToggleProps } from './ActionToggle.props';\n\n/**\n * ActionToggle - This component is toggle button which switches between states\n * and for accessibility reasons are 2 different buttons\n */\nexport default class ActionToggle extends React.PureComponent<IActionToggleProps> {\n    private ref: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private focusElement: HTMLElement | null = null;\n\n    constructor(props: Readonly<IActionToggleProps>) {\n        super(props);\n        this._onClick = this._onClick.bind(this);\n    }\n\n    public getSnapshotBeforeUpdate(): null {\n        this.focusElement = null;\n        if (this.ref.current && this.ref.current.contains(document.activeElement)) {\n            this.focusElement = document.activeElement as HTMLElement;\n        }\n        return null;\n    }\n\n    public componentDidUpdate(): void {\n        if (this.ref.current && this.focusElement) {\n            const focusTarget = this.ref.current.children[!!this.props.toggled ? 1 : 0] as HTMLElement;\n            if (focusTarget !== document.activeElement) {\n                focusTarget.focus();\n            }\n        }\n    }\n\n    public render(): JSX.Element | null {\n        const { className, children, toggled, onChange, ...props } = this.props;\n        const classes = `action-toggle${className ? ' ' : ''}${className || ''}`;\n        return React.Children.count(children) !== 2 ? null : (\n            <div className={classes} {...props} ref={this.ref}>\n                {React.Children.map(children, (child: React.ReactNode, index: number) => {\n                    const hidden = (!index && !!this.props.toggled) || (!!index && !this.props.toggled);\n                    // tslint:disable-next-line:no-any\n                    return React.cloneElement(child as any, { 'aria-hidden': hidden, onClick: this._onClick });\n                })}\n            </div>\n        );\n    }\n\n    private _onClick(e: React.KeyboardEvent): void {\n        e.stopPropagation();\n        if (this.props.onChange) {\n            this.props.onChange({ id: this.props.id, actionToggle: this, toggled: !!this.props.toggled, event: e });\n        }\n    }\n}\n"]}