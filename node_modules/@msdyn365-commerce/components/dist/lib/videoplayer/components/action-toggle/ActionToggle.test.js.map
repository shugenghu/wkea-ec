{"version":3,"file":"ActionToggle.test.js","sourceRoot":"./src/","sources":["videoplayer/components/action-toggle/ActionToggle.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { mount } from 'enzyme';\nimport * as React from 'react';\n\nimport ActionToggle from './ActionToggle';\nimport { UncontrolledActionToggle } from './UncontrolledActionToggle';\n\ndescribe('ActionToggle', () => {\n    it('componentDidUpdate doesn\\'t throw when ref.current is undefined', () => {\n        const wrapper = mount(\n            <ActionToggle id='action-toggle-test'>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-play' />\n                </button>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-pause' />\n                </button>\n            </ActionToggle>,\n            { attachTo: document.body.firstElementChild as HTMLElement });\n        const actionToggle = wrapper.instance() as ActionToggle;\n        expect(() => { actionToggle.componentDidUpdate();}).not.toThrow();\n        wrapper.unmount();\n    });\n});\n\ndescribe('ActionToggle', () => {\n    it('toggles correctly', () => {\n        const wrapper = mount(\n            <ActionToggle id='action-toggle-test'>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-play' />\n                </button>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-pause' />\n                </button>\n            </ActionToggle>,\n            { attachTo: document.body.firstElementChild as HTMLElement }\n        );\n        const actionToggle = wrapper.instance() as ActionToggle;\n        const buttons = document.querySelectorAll('button');\n        expect(buttons.length).toBe(2);\n        const play = buttons[0];\n        const pause = buttons[1];\n\n        // Verify expected initial state\n        expect(play.getAttribute('aria-hidden')).toBe('false');\n        expect(pause.getAttribute('aria-hidden')).toBe('true');\n\n        // Test having focus and rerendering when no focus change is required\n        play.focus();\n        expect(document.activeElement).toBe(play);\n        actionToggle.getSnapshotBeforeUpdate();\n        actionToggle.render();\n        actionToggle.componentDidUpdate();\n        expect(document.activeElement).toBe(play);\n\n        expect(() => {\n            if(play && play.click) {\n                play.click();\n            }\n        }).not.toThrow();\n\n        wrapper.unmount();\n    });\n\n    it('toggles correctly when onchange is passed to the component', () => {\n        const spyChange = jest.fn();\n        const wrapper = mount(\n            <ActionToggle id='action-toggle-test' onChange={spyChange}>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-play' />\n                </button>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-pause' />\n                </button>\n            </ActionToggle>,\n            { attachTo: document.body.firstElementChild as HTMLElement }\n        );\n        const actionToggle = wrapper.instance() as ActionToggle;\n        const buttons = document.querySelectorAll('button');\n        expect(buttons.length).toBe(2);\n        const play = buttons[0];\n        const pause = buttons[1];\n\n        // Verify expected initial state\n        expect(play.getAttribute('aria-hidden')).toBe('false');\n        expect(pause.getAttribute('aria-hidden')).toBe('true');\n\n        // Test having focus and rerendering when no focus change is required\n        play.focus();\n        expect(document.activeElement).toBe(play);\n        actionToggle.getSnapshotBeforeUpdate();\n        actionToggle.render();\n        actionToggle.componentDidUpdate();\n        expect(document.activeElement).toBe(play);\n\n        play.click();\n        wrapper.update();\n        expect(spyChange).toHaveBeenCalled();\n\n        wrapper.unmount();\n    });\n});\n\ndescribe('UncontrolledActionToggle', () => {\n    it('toggles correctly', () => {\n        const spyChange = jest.fn();\n        const wrapper = mount(\n            <UncontrolledActionToggle id='uncontrolled-action-toggle-test' onChange={spyChange}>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-play' />\n                </button>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-pause' />\n                </button>\n            </UncontrolledActionToggle>,\n            { attachTo: document.body.firstElementChild as HTMLElement }\n        );\n        const actionToggle = wrapper.instance() as UncontrolledActionToggle;\n        const buttons = document.querySelectorAll('button');\n        expect(buttons.length).toBe(2);\n        const play = buttons[0];\n        const pause = buttons[1];\n\n        // Verify expected initial state\n        expect(actionToggle.state.toggled).toBe(false);\n        expect(play.getAttribute('aria-hidden')).toBe('false');\n        expect(pause.getAttribute('aria-hidden')).toBe('true');\n        expect(spyChange).not.toHaveBeenCalled();\n\n        // Test clicking and rendering when we don't have focus\n        play.click();\n        wrapper.update();\n        expect(actionToggle.state.toggled).toBe(true);\n        expect(play.getAttribute('aria-hidden')).toBe('true');\n        expect(pause.getAttribute('aria-hidden')).toBe('false');\n        expect(spyChange).toHaveBeenCalledTimes(1);\n\n        // Test clicking and rendering when we have focus and are toggled\n        pause.focus();\n        pause.click();\n        wrapper.update();\n        expect(document.activeElement).toBe(play);\n        expect(actionToggle.state.toggled).toBe(false);\n        expect(play.getAttribute('aria-hidden')).toBe('false');\n        expect(pause.getAttribute('aria-hidden')).toBe('true');\n        expect(spyChange).toHaveBeenCalledTimes(2);\n\n        // Test clicking and rendering when we have focus and are not toggled\n        play.click();\n        wrapper.update();\n        expect(actionToggle.state.toggled).toBe(true);\n        expect(play.getAttribute('aria-hidden')).toBe('true');\n        expect(pause.getAttribute('aria-hidden')).toBe('false');\n        expect(spyChange).toHaveBeenCalledTimes(3);\n\n        wrapper.unmount();\n    });\n\n    it('toggles correctly without onchange', () => {\n        const wrapper = mount(\n            <UncontrolledActionToggle id='uncontrolled-action-toggle-test'>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-play' />\n                </button>\n                <button\n                    type='button'\n                    className='btn btn-secondary btn-lg rounded-circle border-light'\n                >\n                    <i className='fa fa-pause' />\n                </button>\n            </UncontrolledActionToggle>,\n            { attachTo: document.body.firstElementChild as HTMLElement }\n        );\n        const actionToggle = wrapper.instance() as UncontrolledActionToggle;\n        const buttons = document.querySelectorAll('button');\n        expect(buttons.length).toBe(2);\n        const play = buttons[0];\n        const pause = buttons[1];\n\n        // Verify expected initial state\n        expect(actionToggle.state.toggled).toBe(false);\n        expect(play.getAttribute('aria-hidden')).toBe('false');\n        expect(pause.getAttribute('aria-hidden')).toBe('true');\n\n        // Test clicking and rendering when we don't have focus\n        play.click();\n        wrapper.update();\n        expect(actionToggle.state.toggled).toBe(true);\n        expect(play.getAttribute('aria-hidden')).toBe('true');\n        expect(pause.getAttribute('aria-hidden')).toBe('false');\n\n        wrapper.unmount();\n    });\n});\n"]}