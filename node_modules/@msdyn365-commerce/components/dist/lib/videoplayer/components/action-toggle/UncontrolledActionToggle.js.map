{"version":3,"file":"UncontrolledActionToggle.js","sourceRoot":"./src/","sources":["videoplayer/components/action-toggle/UncontrolledActionToggle.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAY1C,MAAM,OAAO,wBAAyB,SAAQ,KAAK,CAAC,aAAiE;IACjH,YAAY,KAAmC;QAC3C,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QAC1C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAEM,MAAM;QACT,MAAM,EAAE,OAAO,EAAE,GAAG,kBAAkB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACtD,MAAM,KAAK,GAAG,EAAE,GAAG,kBAAkB,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QACrE,OAAO,oBAAC,YAAY,oBAAK,KAAK,IAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,IAAI,CAAC;IACjE,CAAC;IAEO,SAAS,CAAC,YAAuD;QACrE,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,OAAO,EAAE,OAAO,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpE,IAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,EAAE,EAAE,YAAY,EAAE,YAAY,CAAC,YAAY,EAAE,OAAO,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,EAAE,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;SACpJ;IACL,CAAC;CACJ","sourcesContent":["import * as React from 'react';\nimport ActionToggle from './ActionToggle';\nimport { IActionToggleChangeNotification, IActionToggleProps } from './ActionToggle.props';\n\nexport interface IUncontrolledActionToggleState extends React.ComponentState {\n    toggled: boolean;\n}\n\n/**\n * UncontrolledActionToggle - This component is toggle button which switches between states\n * and for accessibility reasons are 2 different buttons the state and toggle function are managed\n * by the parent\n */\nexport class UncontrolledActionToggle extends React.PureComponent<IActionToggleProps, IUncontrolledActionToggleState> {\n    constructor(props: Readonly<IActionToggleProps>) {\n        super(props);\n        this.state = { toggled: !!props.toggled };\n        this._onChange = this._onChange.bind(this);\n    }\n\n    public render(): JSX.Element {\n        const { toggled, ...propsWithoutToggle } = this.props;\n        const props = { ...propsWithoutToggle, toggled: this.state.toggled };\n        return <ActionToggle {...props} onChange={this._onChange} />;\n    }\n\n    private _onChange(notification: Readonly<IActionToggleChangeNotification>): void {\n        this.setState(() => { return { toggled: !notification.toggled }; });\n\n        if(this.props.onChange) {\n            this.props.onChange({ id: notification.id, actionToggle: notification.actionToggle, toggled: !notification.toggled, event: notification.event });\n        }\n    }\n}\n"]}