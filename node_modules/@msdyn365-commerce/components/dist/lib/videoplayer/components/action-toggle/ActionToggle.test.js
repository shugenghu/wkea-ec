import { mount } from 'enzyme';
import * as React from 'react';
import ActionToggle from './ActionToggle';
import { UncontrolledActionToggle } from './UncontrolledActionToggle';
describe('ActionToggle', () => {
    it('componentDidUpdate doesn\'t throw when ref.current is undefined', () => {
        const wrapper = mount(React.createElement(ActionToggle, { id: 'action-toggle-test' },
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-play' })),
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-pause' }))), { attachTo: document.body.firstElementChild });
        const actionToggle = wrapper.instance();
        expect(() => { actionToggle.componentDidUpdate(); }).not.toThrow();
        wrapper.unmount();
    });
});
describe('ActionToggle', () => {
    it('toggles correctly', () => {
        const wrapper = mount(React.createElement(ActionToggle, { id: 'action-toggle-test' },
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-play' })),
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-pause' }))), { attachTo: document.body.firstElementChild });
        const actionToggle = wrapper.instance();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        play.focus();
        expect(document.activeElement).toBe(play);
        actionToggle.getSnapshotBeforeUpdate();
        actionToggle.render();
        actionToggle.componentDidUpdate();
        expect(document.activeElement).toBe(play);
        expect(() => {
            if (play && play.click) {
                play.click();
            }
        }).not.toThrow();
        wrapper.unmount();
    });
    it('toggles correctly when onchange is passed to the component', () => {
        const spyChange = jest.fn();
        const wrapper = mount(React.createElement(ActionToggle, { id: 'action-toggle-test', onChange: spyChange },
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-play' })),
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-pause' }))), { attachTo: document.body.firstElementChild });
        const actionToggle = wrapper.instance();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        play.focus();
        expect(document.activeElement).toBe(play);
        actionToggle.getSnapshotBeforeUpdate();
        actionToggle.render();
        actionToggle.componentDidUpdate();
        expect(document.activeElement).toBe(play);
        play.click();
        wrapper.update();
        expect(spyChange).toHaveBeenCalled();
        wrapper.unmount();
    });
});
describe('UncontrolledActionToggle', () => {
    it('toggles correctly', () => {
        const spyChange = jest.fn();
        const wrapper = mount(React.createElement(UncontrolledActionToggle, { id: 'uncontrolled-action-toggle-test', onChange: spyChange },
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-play' })),
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-pause' }))), { attachTo: document.body.firstElementChild });
        const actionToggle = wrapper.instance();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(actionToggle.state.toggled).toBe(false);
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        expect(spyChange).not.toHaveBeenCalled();
        play.click();
        wrapper.update();
        expect(actionToggle.state.toggled).toBe(true);
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        expect(spyChange).toHaveBeenCalledTimes(1);
        pause.focus();
        pause.click();
        wrapper.update();
        expect(document.activeElement).toBe(play);
        expect(actionToggle.state.toggled).toBe(false);
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        expect(spyChange).toHaveBeenCalledTimes(2);
        play.click();
        wrapper.update();
        expect(actionToggle.state.toggled).toBe(true);
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        expect(spyChange).toHaveBeenCalledTimes(3);
        wrapper.unmount();
    });
    it('toggles correctly without onchange', () => {
        const wrapper = mount(React.createElement(UncontrolledActionToggle, { id: 'uncontrolled-action-toggle-test' },
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-play' })),
            React.createElement("button", { type: 'button', className: 'btn btn-secondary btn-lg rounded-circle border-light' },
                React.createElement("i", { className: 'fa fa-pause' }))), { attachTo: document.body.firstElementChild });
        const actionToggle = wrapper.instance();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(actionToggle.state.toggled).toBe(false);
        expect(play.getAttribute('aria-hidden')).toBe('false');
        expect(pause.getAttribute('aria-hidden')).toBe('true');
        play.click();
        wrapper.update();
        expect(actionToggle.state.toggled).toBe(true);
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        wrapper.unmount();
    });
});
//# sourceMappingURL=ActionToggle.test.js.map