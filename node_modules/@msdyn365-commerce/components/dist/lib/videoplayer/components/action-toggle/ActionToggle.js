import * as React from 'react';
export default class ActionToggle extends React.PureComponent {
    constructor(props) {
        super(props);
        this.ref = React.createRef();
        this.focusElement = null;
        this._onClick = this._onClick.bind(this);
    }
    getSnapshotBeforeUpdate() {
        this.focusElement = null;
        if (this.ref.current && this.ref.current.contains(document.activeElement)) {
            this.focusElement = document.activeElement;
        }
        return null;
    }
    componentDidUpdate() {
        if (this.ref.current && this.focusElement) {
            const focusTarget = this.ref.current.children[!!this.props.toggled ? 1 : 0];
            if (focusTarget !== document.activeElement) {
                focusTarget.focus();
            }
        }
    }
    render() {
        const { className, children, toggled, onChange, ...props } = this.props;
        const classes = `action-toggle${className ? ' ' : ''}${className || ''}`;
        return React.Children.count(children) !== 2 ? null : (React.createElement("div", Object.assign({ className: classes }, props, { ref: this.ref }), React.Children.map(children, (child, index) => {
            const hidden = (!index && !!this.props.toggled) || (!!index && !this.props.toggled);
            return React.cloneElement(child, { 'aria-hidden': hidden, onClick: this._onClick });
        })));
    }
    _onClick(e) {
        e.stopPropagation();
        if (this.props.onChange) {
            this.props.onChange({ id: this.props.id, actionToggle: this, toggled: !!this.props.toggled, event: e });
        }
    }
}
//# sourceMappingURL=ActionToggle.js.map