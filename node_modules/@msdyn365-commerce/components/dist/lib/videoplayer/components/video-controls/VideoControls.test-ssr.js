import { render } from 'enzyme';
import * as React from 'react';
import { LocalizationConstants } from '../helper/localization-helper';
import VideoControls from './VideoControls';
describe('Video control Bar', () => {
    it('renders Video control correctly without any props', () => {
        const playPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };
        const videoControlBar = render(React.createElement(VideoControls, { className: '', playing: true, onPlayClick: undefined, isMuted: true, onMuteClick: undefined, onVolumeChange: undefined, onProgressChange: undefined, playPosition: playPosition, currentVolume: 60, isInFullScreen: true, toggleFullScreen: undefined, resources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                seekBarLabel: LocalizationConstants.seekBarLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel
            } }));
        expect(videoControlBar).toMatchSnapshot();
    });
    it('renders Video control correctly with props', () => {
        const spyPlayChange = jest.fn();
        const spyMuteChange = jest.fn();
        const spyVolumeChange = jest.fn();
        const spyProgessBarChange = jest.fn();
        const spyFullScreenChange = jest.fn();
        const playPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };
        const videoControlBar = render(React.createElement(VideoControls, { className: '', playing: true, onPlayClick: spyPlayChange, isMuted: true, onMuteClick: spyMuteChange, onVolumeChange: spyVolumeChange, onProgressChange: spyProgessBarChange, playPosition: playPosition, currentVolume: 60, isInFullScreen: true, toggleFullScreen: spyFullScreenChange, resources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                seekBarLabel: LocalizationConstants.seekBarLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel
            } }));
        expect(videoControlBar).toMatchSnapshot();
    });
    it('renders trigger correctly classname only', () => {
        const playPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };
        const videoControlBar = render(React.createElement(VideoControls, { className: 'VideoControlBar', playing: true, onPlayClick: undefined, isMuted: true, onMuteClick: undefined, onVolumeChange: undefined, onProgressChange: undefined, playPosition: playPosition, currentVolume: 60, isInFullScreen: true, toggleFullScreen: undefined, resources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                seekBarLabel: LocalizationConstants.seekBarLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel
            } }));
        expect(videoControlBar).toMatchSnapshot();
    });
    it('renders trigger correctly with change handler', () => {
        const spyPlayChange = jest.fn();
        const spyMuteChange = jest.fn();
        const spyVolumeChange = jest.fn();
        const spyProgessBarChange = jest.fn();
        const spyFullScreenChange = jest.fn();
        const playPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };
        const videoControlBar = render(React.createElement(VideoControls, { className: 'videoControlBar', onPlayClick: spyPlayChange, onMuteClick: spyMuteChange, onVolumeChange: spyVolumeChange, onProgressChange: spyProgessBarChange, playPosition: playPosition, currentVolume: 60, toggleFullScreen: spyFullScreenChange, resources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                seekBarLabel: LocalizationConstants.seekBarLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel
            } }));
        expect(videoControlBar).toMatchSnapshot();
    });
});
//# sourceMappingURL=VideoControls.test-ssr.js.map