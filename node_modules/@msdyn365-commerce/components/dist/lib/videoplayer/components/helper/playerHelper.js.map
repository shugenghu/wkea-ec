{"version":3,"file":"playerHelper.js","sourceRoot":"./src/","sources":["videoplayer/components/helper/playerHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { IPlayerProps } from '../../players/player/Player.props';\nimport { IPlayerMenu, IPlayerMenuItem, MenuCategories, PlayerConstants } from '../data/player-constants';\nimport { IAudioTrack } from '../data/player-interface';\nimport { ClosedCaptionTypes, IBinaryReference, ICCFile, IVideoFile, IVideoMetadata, MediaQuality, MediaTypes } from '../data/player-metadata';\nimport { startsWith } from '../utilities/stringExtensions';\nimport LocalizationHelper, {PlayerLocKeys } from './localization-helper';\n\n/**\n *\n * Player helper class\n *\n */\nexport default class PlayerHelper {\n\n    private playerProps: IPlayerProps;\n    private localizationHelper: LocalizationHelper;\n\n    constructor(props: IPlayerProps, localizationHelper: LocalizationHelper) {\n        this.playerProps = props;\n        this.localizationHelper = localizationHelper;\n    }\n\n    public getMetadata(): IVideoMetadata {\n        this._mapVideoFiles();\n        this._setCCFiles();\n        this._setAudioTracks();\n        return this.playerProps.playerData.metaData;\n    }\n\n    public updatePlayerProps(props: IPlayerProps): void {\n        this.playerProps = props;\n        this._clearVideoPlayerMetaData();\n    }\n\n    public getOptionMenu(): IPlayerMenu | null {\n\n        const audioTracks = this._getAudioTracksMenu();\n        if(audioTracks === null) {\n            return null;\n        } else {\n            const optionMenuItems: IPlayerMenuItem[] = [];\n\n            optionMenuItems.push({\n                id: this.addIdPrefix('audioTracks'),\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),\n                selected: false,\n                selectable: false,\n                subMenu: audioTracks\n            });\n\n            return {\n                category: MenuCategories.Options,\n                id: this.addIdPrefix(MenuCategories.Options),\n                label: 'Options',\n                items: optionMenuItems,\n            };\n        }\n    }\n\n    /**\n     * @name - getPosterFrameUrl\n     * @description - get Poster Frame URL.\n     * @private\n     * @returns {string}\n     */\n    public getPosterFrameUrl(): string {\n        let posterFrameUrl = '';\n        if(!this.playerProps.playerData.options.hidePosterFrame && this.playerProps.playerData.metaData.posterframeUrl) {\n            posterFrameUrl = this._removeProtocolFromUrl(this.playerProps.playerData.metaData.posterframeUrl);\n            if(this.playerProps.playerData.options.thumbnailFullWidth) {\n                if(posterFrameUrl.indexOf('?') > 0) {\n                    posterFrameUrl = `${posterFrameUrl}${'&w='}${PlayerConstants.thumbnailFullWidth}${'&h='}${PlayerConstants.thumbnailFullHeight}`;\n                } else {\n                    posterFrameUrl = `${posterFrameUrl}${'?w='}${PlayerConstants.thumbnailFullWidth}${'&h='}${PlayerConstants.thumbnailFullHeight}`;\n                }\n\n            }\n        }\n        return posterFrameUrl;\n    }\n\n    public getVideoFileToPlay(): IVideoFile {\n        let videoFile: IVideoFile = {\n            url: '',\n            mediaType: MediaTypes.MP4,\n            quality: MediaQuality.LO\n        };\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n\n        const mpVideoFiles = this._getVideoFileByType(MediaTypes.MP4, videoMetaData.videoFiles!);\n        const hdVideoFile = this._getVideoFileByQuality(MediaQuality.HDX, mpVideoFiles);\n        if(hdVideoFile !== null) {\n            videoFile = hdVideoFile;\n        } else {\n            const hqVideoFile = this._getVideoFileByQuality(MediaQuality.HQ, mpVideoFiles);\n            if(hqVideoFile !== null) {\n                videoFile = hqVideoFile ;\n            } else {\n                const sdVideoFile = this._getVideoFileByQuality(MediaQuality.SD, mpVideoFiles);\n                if(sdVideoFile !== null) {\n                    videoFile = sdVideoFile ;\n                } else {\n                    const loVideoFile = this._getVideoFileByQuality(MediaQuality.LO, mpVideoFiles);\n                    if(loVideoFile !== null) {\n                        videoFile = loVideoFile;\n                    }\n                }\n            }\n        }\n        return videoFile;\n    }\n\n    /**\n     * @name - onErrorCallback\n     * @description - Cal`lback function when error happen.\n     * @private\n     * @returns {void}\n     */\n    public onErrorCallback = (errorType: string, message: string): void => {\n        console.log(`ErrorType : ${errorType}, Message : ${message}`);\n    }\n\n    public isEmptyOrUndefined(value?:string): boolean {\n        if(value === undefined || value === '') {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @name - addIdPrefix\n     * @description - Adds the id prefix to form a child id.\n     * @private\n     * @param {string} childId - The child id to prefix.\n     * @returns {string} - The prefixed id or the original id if no prefix is built.\n     */\n    public addIdPrefix(childId: string): string {\n        const prefix = (this.isEmptyOrUndefined(this.playerProps.playerId))\n            ? null\n            : `${this.playerProps.playerId}-`;\n\n        return (prefix && !startsWith(childId, prefix, false)) ? (prefix + childId) : childId;\n    }\n\n    /**\n     * @name - removeIdPrefix\n     * @description - Removes the id prefix from a child id.\n     * @public\n     * @param {string} childId - The child id to prefix.\n     * @returns {string} - The un-prefixed id or the original id if no prefix was found.\n     */\n    public removeIdPrefix(childId: string): string {\n        const prefix = (this.isEmptyOrUndefined(this.playerProps.playerId))\n            ? null\n            : `${this.playerProps.playerId}-`;\n\n        return (prefix && startsWith(childId, prefix, false)) ? childId.substring(prefix.length) : childId;\n    }\n\n    private _getAudioTracksMenu(): IPlayerMenu | null {\n        const audioTracksMenuItems: IPlayerMenuItem[] = [];\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n        if(videoMetaData.audioTracks !== undefined && videoMetaData.audioTracks.length > 0) {\n\n            // check if there are multiple \"Descriptive Audio\" tracks, in which case we will want to show language\n            let descriptiveAudioTrackCount = 0;\n            for (const track of videoMetaData.audioTracks) {\n                if (track.isDescriptiveAudio) {\n                    descriptiveAudioTrackCount++;\n                }\n            }\n\n            let trackIndex: number = 0;\n            for (const audioTrack of videoMetaData.audioTracks) {\n\n                let label: string;\n                let languageCode: string = '';\n                if (audioTrack.isDescriptiveAudio) {\n                    // Descriptive audio labels look like:\n                    //   \"Descriptive audio\" -- when only one descriptive audio track exists\n                    // or\n                    //   \"Descriptive audio - English\" -- if there is more than one descriptive audio track\n                    const descriptiveAudioLabel = this.localizationHelper.getLocalizedValue(PlayerLocKeys.descriptive_audio);\n                    if (descriptiveAudioTrackCount > 1) {\n                        const language = this.localizationHelper.getLanguageNameFromLocale(audioTrack.languageCode);\n                        label = `${descriptiveAudioLabel} - ${language}`;\n                    } else {\n                        label = descriptiveAudioLabel;\n                    }\n                    languageCode = `daudio-${audioTrack.languageCode.toLowerCase()}`;\n                } else {\n                    // Regular tracks display language of the stream only.\n                    label = this.localizationHelper.getLanguageNameFromLocale(audioTrack.languageCode);\n                    languageCode = audioTrack.languageCode.toLowerCase();\n                }\n\n                const audioMenuItem: IPlayerMenuItem = {\n                    label: label,\n                    language: languageCode,\n                    data: audioTrack.url,\n                    id: this.addIdPrefix(`audio-${trackIndex}`),\n                    selected: false,\n                    selectable: true,\n                    persistOnClick: true\n                };\n\n                audioTracksMenuItems.push(audioMenuItem);\n                trackIndex++;\n            }\n\n            audioTracksMenuItems.unshift({\n                id: '',\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks_default),\n                ariaLabel: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks_default),\n                language: 'default',\n                data: 'default',\n                selectable: true,\n                selected: false,\n                persistOnClick: true,\n            });\n\n            audioTracksMenuItems.unshift({\n                id: '',\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),\n                ariaLabel: `${this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks)} - go back to previous menu`,\n                selectable: false,\n                selected: false,\n                persistOnClick: false,\n                isBackButton: true\n            });\n            return {\n                category: MenuCategories.AudioTracks,\n                id: this.addIdPrefix(MenuCategories.AudioTracks),\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),\n                items: audioTracksMenuItems,\n            };\n        } else {\n            return null;\n        }\n    }\n    private _clearVideoPlayerMetaData(): void {\n        this.playerProps.playerData.metaData.videoFiles = [];\n        this.playerProps.playerData.metaData.audioTracks = [];\n        this.playerProps.playerData.metaData.ccFiles = [];\n    }\n\n    private _setCCFiles(): void {\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n        const ccFiles: ICCFile[] = [];\n        if(!(videoMetaData.ccFiles && videoMetaData.ccFiles.length > 0)) {\n            if(videoMetaData.videoBinaryReferences && videoMetaData.videoBinaryReferences.length > 0) {\n                for (const binaryRef of videoMetaData.videoBinaryReferences) {\n                    // skip all other format except ttml/closedcaption\n                    if (((binaryRef.extension && binaryRef.extension === 'ttml') || binaryRef.$type === 'videoClosedCaptionBinaryReference')) {\n                        const ccFile: ICCFile = {\n                            ccType: ClosedCaptionTypes.TTML,\n                            locale: binaryRef.locale!,\n                            url: binaryRef.sourceHref!\n                        };\n                        ccFiles.push(ccFile);\n                    }\n                }\n                this.playerProps.playerData.metaData.ccFiles = ccFiles;\n            }\n        }\n    }\n\n    private _setAudioTracks(): void {\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n        const audioTracks: IAudioTrack[] = [];\n        if(videoMetaData.videoBinaryReferences && videoMetaData.videoBinaryReferences.length > 0) {\n            for (const binaryRef of videoMetaData.videoBinaryReferences) {\n                if (binaryRef.$type && binaryRef.$type === 'audioBinaryReference') {\n                    const audioTrack: IAudioTrack = {\n                      isDescriptiveAudio: binaryRef.audioType === 'descriptiveAudio',\n                      bitrate: binaryRef.bitrate!,\n                      languageCode: binaryRef.locale === undefined ? '' : binaryRef.locale,\n                      name: binaryRef.alias!,\n                      url: binaryRef.clientHref!\n                    };\n                    audioTracks.push(audioTrack);\n                }\n            }\n        }\n        this.playerProps.playerData.metaData.audioTracks =  audioTracks;\n    }\n\n    private _mapVideoFiles(): void {\n        const videoMetaData: IVideoMetadata = this.playerProps.playerData.metaData;\n        if(!videoMetaData.videoFiles || videoMetaData.videoFiles.length === 0) {\n            const videoFiles: IVideoFile[] = [];\n            const videoBinaryFiles: IBinaryReference[] = videoMetaData.videoBinaryReferences!;\n            if(videoBinaryFiles && videoBinaryFiles.length > 0)  {\n                for (const binaryRef of videoBinaryFiles) {\n                    if (binaryRef.format) {\n                        // skip the unsupported 1001 format\n                        if ((binaryRef.format === '1001')) {\n                            continue;\n                        }\n\n                        // handle all other video/audio format\n                        const mediaTypeAndQuality = this._getMediaTypeAndQuality(binaryRef.format);\n                        let urlRef;\n                        if (mediaTypeAndQuality.mediaType === MediaTypes.MP4) {\n                            urlRef = binaryRef.clientHref;\n                        } else {\n                            urlRef = binaryRef.sourceHref;\n                        }\n\n                        if (urlRef) {\n                            urlRef = this._removeProtocolFromUrl(urlRef);\n                        }\n\n                        if (urlRef) {\n                            videoFiles.push({\n                                url: urlRef,\n                                quality: mediaTypeAndQuality.quality,\n                                mediaType: mediaTypeAndQuality.mediaType,\n                                formatCode: binaryRef.format\n                            });\n                        }\n                    }\n                }\n            }\n            this.playerProps.playerData.metaData.videoFiles = videoFiles;\n        }\n    }\n\n    /**\n     * @name - getMediaTypeAndQuality\n     * @description - Gets video quality and media type from stream name.\n     * @private\n     * @param {string} streamName - The stream name.\n     * @returns {any}\n     */\n    private _getMediaTypeAndQuality(format: string): { mediaType: MediaTypes; quality: MediaQuality } {\n        let mType: MediaTypes = MediaTypes.MP4;\n        let mQuality: MediaQuality = MediaQuality.SD;\n\n        switch (format) {\n            case '101':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.LO;\n                break;\n            case '102':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.SD;\n                break;\n            case '103':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.HQ;\n                break;\n            case '104':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.HDX;\n                break;\n            case '105':\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.HD;\n                break;\n            case '1004':\n                mType = MediaTypes.SMOOTH;\n                break;\n            case '1006':\n                mType = MediaTypes.HLS;\n                break;\n            case '1007':\n                mType = MediaTypes.DASH;\n                break;\n            default:\n                mType = MediaTypes.MP4;\n                mQuality = MediaQuality.SD;\n        }\n\n        return {\n            mediaType: mType,\n            quality: mQuality\n        };\n    }\n\n    /*\n     * @name - removeProtocolFromUrl\n     * @description - Removes protocol from url.\n     * @private\n     * @param {string} url - The url.\n     * @returns {string}\n     */\n    private _removeProtocolFromUrl(url: string): string {\n        return url.replace(/(^\\w+:|^)\\/\\//, '//');\n    }\n\n    /*\n    * @name - getVideoFileByQuality\n    * @description - Gets the video file of specified quality\n    * @private\n    * @param {MediaQuality} quality - The desired quality to look for.\n    * @param\n    * @returns {IVideoFile}\n    */\n    private _getVideoFileByQuality(quality: MediaQuality, videoFiles: IVideoFile[]): IVideoFile | null {\n        let videoFile = null;\n        for (const file of videoFiles) {\n            if (file.quality === quality) {\n                videoFile = file;\n                break;\n            }\n        }\n\n        return videoFile;\n    }\n\n    /*\n    * @name - getVideoFileByType\n    * @description - Gets the video file of specified type\n    * @private\n    * @param {MediaTypes} mediaType - The media type to look for.\n    * @returns {IVideoFile}\n    */\n    private _getVideoFileByType(mediaType: MediaTypes, videoFiles: IVideoFile[]): IVideoFile[] {\n        const videoFile: IVideoFile[] = [];\n        for (const file of videoFiles) {\n            if (file.mediaType === mediaType) {\n                videoFile.push(file);\n            }\n        }\n        return videoFile;\n    }\n}"]}