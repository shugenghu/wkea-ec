import { closedCaptionsPresetMap, closedCaptionsSettingsMap, closedCaptionsSettingsOptions, videoClosedCaptionsConstant } from '../closed-captions/video-closed-captions-settings';
import { MenuCategories } from '../data/player-constants';
import { ClosedCaptionTypes } from '../data/player-metadata';
import { format } from '../utilities/stringExtensions';
import { ccCultureLocStrings, PlayerLocKeys } from './localization-helper';
export default class ClosedCaptionHelper {
    constructor(props, playerHelper, localizationHelper) {
        this.playerMetaData = props;
        this.playerHelper = playerHelper;
        this.localizationHelper = localizationHelper;
    }
    checkClosedCaptionsFiles() {
        if (this.playerMetaData.ccFiles && this.playerMetaData.ccFiles.length > 0) {
            return true;
        }
        return false;
    }
    getClosedCaptionMenu() {
        if (this.playerMetaData.ccFiles && this.playerMetaData.ccFiles.length > 0) {
            const ccFiles = this.playerMetaData.ccFiles;
            const ccMenuItems = [];
            for (const ccFile of ccFiles) {
                if (!ccFile.ccType || ccFile.ccType === ClosedCaptionTypes.TTML) {
                    const lang = this.localizationHelper.getLanguageCodeFromLocale(ccFile.locale.toLowerCase());
                    const ccMenuItem = {
                        id: this.playerHelper.addIdPrefix(ccFile.locale),
                        label: ccCultureLocStrings[ccFile.locale],
                        language: lang,
                        data: ccFile.locale,
                        selected: false,
                        selectable: true,
                        persistOnClick: true,
                        ariaLabel: `${ccCultureLocStrings[ccFile.locale]} ${this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption)}`
                    };
                    ccMenuItems.push(ccMenuItem);
                }
            }
            ccMenuItems.push({
                id: this.playerHelper.addIdPrefix('appearance'),
                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_appearance),
                selected: false,
                selectable: false,
                subMenu: this._getClosedCaptionsSettingsMenu()
            });
            ccMenuItems.unshift({
                id: this.playerHelper.addIdPrefix('off'),
                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption_off),
                selected: false,
                data: 'off',
                selectable: true,
                persistOnClick: true,
                ariaLabel: `${this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption_off)} ${this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption)}`
            });
            return {
                category: MenuCategories.ClosedCaption,
                id: this.playerHelper.addIdPrefix(MenuCategories.ClosedCaption),
                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption),
                items: ccMenuItems,
            };
        }
        else {
            return null;
        }
    }
    getUpdatedClosedCaptionSetting(currentClosedCaptionsSetting, settingKey, optionKey) {
        if (settingKey === videoClosedCaptionsConstant.presetKey) {
            const presetValue = closedCaptionsPresetMap[optionKey];
            return {
                window_color: currentClosedCaptionsSetting.window_color,
                window_opacity: currentClosedCaptionsSetting.window_opacity,
                text_background_color: presetValue.text_background_color,
                text_background_opacity: presetValue.text_background_opacity,
                text_color: presetValue.text_color,
                text_edge_style: presetValue.text_edge_style,
                text_font: presetValue.text_font,
                text_opacity: presetValue.text_opacity,
                text_size: presetValue.text_size,
                preset: optionKey
            };
        }
        else {
            if (this._getOptionValue(settingKey, optionKey)) {
                currentClosedCaptionsSetting[videoClosedCaptionsConstant.presetKey] = 'none';
                currentClosedCaptionsSetting[settingKey] = optionKey;
                return currentClosedCaptionsSetting;
            }
            else {
                return currentClosedCaptionsSetting;
            }
        }
    }
    getClosedCaptionURLFromLocale(locale) {
        let url = '';
        const ccFiles = this.playerMetaData.ccFiles;
        for (const ccFile of ccFiles) {
            if (ccFile.locale === locale) {
                url = ccFile.url;
            }
        }
        return url;
    }
    _getOptionValue(settingKey, optionKey) {
        const setting = closedCaptionsSettingsMap[settingKey];
        if (setting) {
            const option = closedCaptionsSettingsOptions[setting.option];
            return option && option.map[optionKey];
        }
        return '';
    }
    _getClosedCaptionsSettingsMenu() {
        const settingsMenuItems = [];
        for (const settingKey of Object.keys(closedCaptionsSettingsMap)) {
            const setting = closedCaptionsSettingsMap[settingKey];
            const option = closedCaptionsSettingsOptions[setting.option];
            const optionMenuItem = [];
            for (const optionKey in option.map) {
                optionMenuItem.push({
                    id: this._getCCMenuItemId(settingKey, optionKey),
                    label: this.localizationHelper.getLocalizedValue(`${option.pre}${optionKey}`),
                    selectable: true,
                    selected: false,
                    persistOnClick: true,
                    data: `${settingKey}:${optionKey}`
                });
            }
            optionMenuItem.unshift({
                id: '',
                label: this.localizationHelper.getLocalizedValue(`cc_${settingKey}`),
                ariaLabel: `${settingKey} - go back to previous menu`,
                selectable: false,
                selected: false,
                persistOnClick: false,
                isBackButton: true
            });
            settingsMenuItems.push({
                id: this.playerHelper.addIdPrefix(`${settingKey}_item`),
                label: this.localizationHelper.getLocalizedValue(`cc_${settingKey}`),
                selectable: false,
                subMenu: {
                    id: this._getCCSettingsMenuId(settingKey),
                    category: MenuCategories.ClosedCaptionSettings,
                    items: optionMenuItem,
                    label: this.localizationHelper.getLocalizedValue(`cc_${settingKey}`)
                }
            });
        }
        settingsMenuItems.unshift({
            id: '',
            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_customize),
            ariaLabel: 'Customize - go back to previous menu',
            selectable: false,
            selected: false,
            persistOnClick: false,
            isBackButton: true
        });
        const settingsMenu = {
            id: this.playerHelper.addIdPrefix(MenuCategories.ClosedCaptionSettings),
            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_customize),
            category: MenuCategories.ClosedCaptionSettings,
            items: settingsMenuItems
        };
        const presetItems = [];
        for (const preset of Object.keys(closedCaptionsPresetMap)) {
            const presetSetting = closedCaptionsPresetMap[preset];
            const font = presetSetting.text_font;
            const color = presetSetting.text_color;
            const ariaLabelValue = format(this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_presettings), '', this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_text_font), this.localizationHelper.getLocalizedValue(`cc_font_name_${font}`), this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_text_color), this.localizationHelper.getLocalizedValue(`cc_color_${color}`));
            presetItems.push({
                id: this._getCCMenuItemId(videoClosedCaptionsConstant.presetKey, preset),
                label: this.localizationHelper.getLocalizedValue(`cc_${preset}`),
                data: `preset:${preset}`,
                selectable: true,
                selected: false,
                persistOnClick: true,
                ariaLabel: ariaLabelValue,
                hasMouseHoverEvents: true
            });
        }
        presetItems.push({
            id: this.playerHelper.addIdPrefix('cc-customize'),
            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_customize),
            subMenu: settingsMenu,
            hasMouseHoverEvents: true
        });
        presetItems.push({
            id: 'reset',
            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_reset),
            data: 'reset',
            persistOnClick: true,
            hasMouseHoverEvents: true
        });
        presetItems.unshift({
            id: '',
            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_appearance),
            ariaLabel: 'Appreance - go back to previous menu',
            selectable: false,
            selected: false,
            persistOnClick: false,
            isBackButton: true,
            hasMouseHoverEvents: true
        });
        return {
            id: this._getCCSettingsMenuId(videoClosedCaptionsConstant.presetKey),
            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_appearance),
            category: MenuCategories.ClosedCaptionSettings,
            items: presetItems
        };
    }
    _getCCMenuItemId(settingId, optionId) {
        return this.playerHelper.addIdPrefix(`cc-${settingId}-${optionId}`);
    }
    _getCCSettingsMenuId(settingId) {
        return this.playerHelper.addIdPrefix(`cc-${settingId}`);
    }
}
//# sourceMappingURL=closedCaptionHelper.js.map