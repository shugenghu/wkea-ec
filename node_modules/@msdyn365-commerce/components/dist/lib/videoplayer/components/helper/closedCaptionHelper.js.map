{"version":3,"file":"closedCaptionHelper.js","sourceRoot":"./src/","sources":["videoplayer/components/helper/closedCaptionHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { IVideoMetadata } from '../../components/data/player-metadata';\nimport { closedCaptionsPresetMap, closedCaptionsSettingsMap, closedCaptionsSettingsOptions, videoClosedCaptionsConstant } from '../closed-captions/video-closed-captions-settings';\nimport { ICurrentClosedCaptionsSettings, IPlayerMenu, IPlayerMenuItem, MenuCategories } from '../data/player-constants';\nimport { ClosedCaptionTypes } from '../data/player-metadata';\nimport { format } from '../utilities/stringExtensions';\nimport LocalizationHelper, { ccCultureLocStrings, PlayerLocKeys } from './localization-helper';\nimport PlayerHelper from './playerHelper';\n\n/**\n *\n * Closed Caption helper class\n *\n */\nexport default class ClosedCaptionHelper {\n\n    private playerMetaData: IVideoMetadata;\n    private playerHelper: PlayerHelper;\n    private localizationHelper: LocalizationHelper;\n\n    constructor(props: IVideoMetadata, playerHelper: PlayerHelper, localizationHelper: LocalizationHelper) {\n        this.playerMetaData = props;\n        this.playerHelper = playerHelper;\n        this.localizationHelper = localizationHelper;\n    }\n\n    public checkClosedCaptionsFiles(): boolean {\n        if(this.playerMetaData.ccFiles && this.playerMetaData.ccFiles.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    public getClosedCaptionMenu(): IPlayerMenu | null {\n        if(this.playerMetaData.ccFiles && this.playerMetaData.ccFiles.length > 0) {\n            const ccFiles = this.playerMetaData.ccFiles;\n\n            const ccMenuItems: IPlayerMenuItem[] = [];\n\n            for (const ccFile of ccFiles) {\n                // if ccType is not provided we default to TTML\n                if (!ccFile.ccType || ccFile.ccType === ClosedCaptionTypes.TTML) {\n\n                    const lang = this.localizationHelper.getLanguageCodeFromLocale(ccFile.locale.toLowerCase());\n\n                    const ccMenuItem: IPlayerMenuItem = {\n                        id: this.playerHelper.addIdPrefix(ccFile.locale),\n                        label: ccCultureLocStrings[ccFile.locale],\n                        language: lang,\n                        data: ccFile.locale,\n                        selected: false,\n                        selectable: true,\n                        persistOnClick: true,\n                        ariaLabel: `${ccCultureLocStrings[ccFile.locale]} ${this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption)}`\n                    };\n                    ccMenuItems.push(ccMenuItem);\n                }\n            }\n\n            ccMenuItems.push({\n                id: this.playerHelper.addIdPrefix('appearance'),\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_appearance),\n                selected: false,\n                selectable: false,\n                subMenu: this._getClosedCaptionsSettingsMenu()\n            });\n\n            // add 'off' option to the top of the list\n            ccMenuItems.unshift({\n                id: this.playerHelper.addIdPrefix('off'),\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption_off),\n                selected: false,\n                data: 'off',\n                selectable: true,\n                persistOnClick: true,\n                ariaLabel: `${this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption_off)} ${this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption)}`\n            });\n\n            return {\n                category: MenuCategories.ClosedCaption,\n                id: this.playerHelper.addIdPrefix(MenuCategories.ClosedCaption),\n                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.closecaption),\n                items: ccMenuItems,\n            };\n\n        } else {\n            return null;\n        }\n    }\n\n    public getUpdatedClosedCaptionSetting(currentClosedCaptionsSetting: ICurrentClosedCaptionsSettings, settingKey:string, optionKey:string): ICurrentClosedCaptionsSettings {\n        if (settingKey === videoClosedCaptionsConstant.presetKey) {\n            const presetValue = closedCaptionsPresetMap[optionKey];\n\n            return {\n                window_color: currentClosedCaptionsSetting.window_color,\n                window_opacity: currentClosedCaptionsSetting.window_opacity,\n                text_background_color:  presetValue.text_background_color,\n                text_background_opacity: presetValue.text_background_opacity,\n                text_color: presetValue.text_color,\n                text_edge_style: presetValue.text_edge_style,\n                text_font: presetValue.text_font,\n                text_opacity: presetValue.text_opacity,\n                text_size: presetValue.text_size,\n                preset: optionKey\n            };\n        } else {\n            if (this._getOptionValue(settingKey, optionKey)) {\n                currentClosedCaptionsSetting[videoClosedCaptionsConstant.presetKey] = 'none';\n                currentClosedCaptionsSetting[settingKey] = optionKey;\n                return currentClosedCaptionsSetting;\n            } else {\n                return currentClosedCaptionsSetting;\n            }\n        }\n    }\n\n    /**\n     * @name - getClosedCaptionURLFromLocale\n     * @description - Gets the value of closed captions URL from the locale.\n     * @private\n     * @param {string} locale - locale.\n     * @returns {string} - Returns the closed caption URL\n     */\n    public getClosedCaptionURLFromLocale(locale: string): string {\n        let url: string = '';\n        const ccFiles = this.playerMetaData.ccFiles!;\n        for (const ccFile of ccFiles) {\n            if(ccFile.locale === locale) {\n                url = ccFile.url;\n            }\n        }\n        return url;\n    }\n\n    /**\n     * @name - getOptionValue\n     * @description - Gets the value of closed captions settings option.\n     * @private\n     * @param {string} settingKey - The closed ceptions settings key.\n     * @param {string} optionKey - The closed captions option key.\n     * @returns {void}\n     */\n    private _getOptionValue(settingKey: string, optionKey: string): string {\n        const setting = closedCaptionsSettingsMap[settingKey];\n        if (setting) {\n            const option = closedCaptionsSettingsOptions[setting.option];\n            return option && option.map[optionKey];\n        }\n        return '';\n    }\n    /**\n     * @name - getClosedCaptionsSettingsMenu\n     * @description - Gets the closed captions settings menu to be added to options menu.\n     * @private\n     * @returns {IPlayerMenu}\n     */\n    // tslint:disable-next-line: max-func-body-length\n    private _getClosedCaptionsSettingsMenu(): IPlayerMenu {\n\n        // const currentSettings = currentClosedCaptionsSetting;\n\n        // create customize settings menu\n        const settingsMenuItems: IPlayerMenuItem[] = [];\n\n        for (const settingKey of Object.keys(closedCaptionsSettingsMap)) {\n            const setting = closedCaptionsSettingsMap[settingKey];\n\n            const option = closedCaptionsSettingsOptions[setting.option];\n            const optionMenuItem: IPlayerMenuItem[] = [];\n\n            // tslint:disable-next-line: forin no-for-in\n            for (const optionKey in option.map) {\n                optionMenuItem.push({\n                    id: this._getCCMenuItemId(settingKey, optionKey),\n                    label: this.localizationHelper.getLocalizedValue(`${option.pre}${optionKey}`),\n                    selectable: true,\n                    selected: false,\n                    persistOnClick: true,\n                    data: `${settingKey}:${optionKey}`\n                });\n            }\n\n            // Add back button\n            optionMenuItem.unshift({\n                id: '',\n                label: this.localizationHelper.getLocalizedValue(`cc_${settingKey}`),\n                ariaLabel: `${settingKey} - go back to previous menu`,\n                selectable: false,\n                selected: false,\n                persistOnClick: false,\n                isBackButton: true\n            });\n\n            settingsMenuItems.push({\n                id: this.playerHelper.addIdPrefix(`${settingKey}_item`),\n                label: this.localizationHelper.getLocalizedValue(`cc_${settingKey}`),\n                selectable: false,\n                subMenu: {\n                    id: this._getCCSettingsMenuId(settingKey),\n                    category: MenuCategories.ClosedCaptionSettings,\n                    items: optionMenuItem,\n                    label: this.localizationHelper.getLocalizedValue(`cc_${settingKey}`)\n                }\n            });\n\n        }\n\n        settingsMenuItems.unshift({\n            id: '',\n            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_customize),\n            ariaLabel: 'Customize - go back to previous menu',\n            selectable: false,\n            selected: false,\n            persistOnClick: false,\n            isBackButton: true\n        });\n\n        const settingsMenu: IPlayerMenu = {\n            id: this.playerHelper.addIdPrefix(MenuCategories.ClosedCaptionSettings),\n            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_customize),\n            category: MenuCategories.ClosedCaptionSettings,\n            items: settingsMenuItems\n        };\n\n        // create preset items menu\n        const presetItems: IPlayerMenuItem[] = [];\n\n        for (const preset of Object.keys(closedCaptionsPresetMap)) {\n            // tslint:disable-next-line: no-any\n            const presetSetting: any = closedCaptionsPresetMap[preset];\n            const font: string = presetSetting.text_font;\n            const color: string = presetSetting.text_color;\n\n            const ariaLabelValue = format(this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_presettings), '',\n                                          this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_text_font),\n                                          this.localizationHelper.getLocalizedValue(`cc_font_name_${font}`),\n                                          this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_text_color),\n                                          this.localizationHelper.getLocalizedValue(`cc_color_${color}`));\n\n            presetItems.push({\n                id: this._getCCMenuItemId(videoClosedCaptionsConstant.presetKey, preset),\n                label: this.localizationHelper.getLocalizedValue(`cc_${preset}`),\n                data: `preset:${preset}`,\n                selectable: true,\n                selected: false,\n                persistOnClick: true,\n                ariaLabel: ariaLabelValue,\n                hasMouseHoverEvents: true\n            });\n        }\n\n        presetItems.push({\n            id: this.playerHelper.addIdPrefix('cc-customize'),\n            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_customize),\n            subMenu: settingsMenu,\n            hasMouseHoverEvents: true\n        });\n\n        presetItems.push({\n            id: 'reset',\n            label:this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_reset),\n            data: 'reset',\n            persistOnClick: true,\n            hasMouseHoverEvents: true\n        });\n\n        presetItems.unshift({\n            id: '',\n            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_appearance),\n            ariaLabel: 'Appreance - go back to previous menu',\n            selectable: false,\n            selected: false,\n            persistOnClick: false,\n            isBackButton: true,\n            hasMouseHoverEvents: true\n        });\n\n        return {\n            id: this._getCCSettingsMenuId(videoClosedCaptionsConstant.presetKey),\n            label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.cc_appearance),\n            category: MenuCategories.ClosedCaptionSettings,\n            items: presetItems\n        };\n    }\n\n    /**\n     * @name - getCCMenuItemId\n     * @description - Gets the close captions setting menu item id.\n     * @private\n     * @param {string} settingKey - The setting key.\n     * @param {string} optionsKey - The option key.\n     * @returns {string}\n     */\n    private _getCCMenuItemId(settingId: string, optionId: string): string {\n        return this.playerHelper.addIdPrefix(`cc-${settingId}-${optionId}`);\n    }\n\n    /**\n     * @name - getCCSettingsMenuId\n     * @description - Gets the close captions setting menu id.\n     * @private\n     * @param {string} settingKey - The setting key.\n     * @returns {string}\n     */\n    private _getCCSettingsMenuId(settingId: string): string {\n    return this.playerHelper.addIdPrefix(`cc-${settingId}`);\n}\n\n}"]}