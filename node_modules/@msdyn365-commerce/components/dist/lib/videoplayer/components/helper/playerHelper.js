import { MenuCategories, PlayerConstants } from '../data/player-constants';
import { ClosedCaptionTypes, MediaQuality, MediaTypes } from '../data/player-metadata';
import { startsWith } from '../utilities/stringExtensions';
import { PlayerLocKeys } from './localization-helper';
export default class PlayerHelper {
    constructor(props, localizationHelper) {
        this.onErrorCallback = (errorType, message) => {
            console.log(`ErrorType : ${errorType}, Message : ${message}`);
        };
        this.playerProps = props;
        this.localizationHelper = localizationHelper;
    }
    getMetadata() {
        this._mapVideoFiles();
        this._setCCFiles();
        this._setAudioTracks();
        return this.playerProps.playerData.metaData;
    }
    updatePlayerProps(props) {
        this.playerProps = props;
        this._clearVideoPlayerMetaData();
    }
    getOptionMenu() {
        const audioTracks = this._getAudioTracksMenu();
        if (audioTracks === null) {
            return null;
        }
        else {
            const optionMenuItems = [];
            optionMenuItems.push({
                id: this.addIdPrefix('audioTracks'),
                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),
                selected: false,
                selectable: false,
                subMenu: audioTracks
            });
            return {
                category: MenuCategories.Options,
                id: this.addIdPrefix(MenuCategories.Options),
                label: 'Options',
                items: optionMenuItems,
            };
        }
    }
    getPosterFrameUrl() {
        let posterFrameUrl = '';
        if (!this.playerProps.playerData.options.hidePosterFrame && this.playerProps.playerData.metaData.posterframeUrl) {
            posterFrameUrl = this._removeProtocolFromUrl(this.playerProps.playerData.metaData.posterframeUrl);
            if (this.playerProps.playerData.options.thumbnailFullWidth) {
                if (posterFrameUrl.indexOf('?') > 0) {
                    posterFrameUrl = `${posterFrameUrl}${'&w='}${PlayerConstants.thumbnailFullWidth}${'&h='}${PlayerConstants.thumbnailFullHeight}`;
                }
                else {
                    posterFrameUrl = `${posterFrameUrl}${'?w='}${PlayerConstants.thumbnailFullWidth}${'&h='}${PlayerConstants.thumbnailFullHeight}`;
                }
            }
        }
        return posterFrameUrl;
    }
    getVideoFileToPlay() {
        let videoFile = {
            url: '',
            mediaType: MediaTypes.MP4,
            quality: MediaQuality.LO
        };
        const videoMetaData = this.playerProps.playerData.metaData;
        const mpVideoFiles = this._getVideoFileByType(MediaTypes.MP4, videoMetaData.videoFiles);
        const hdVideoFile = this._getVideoFileByQuality(MediaQuality.HDX, mpVideoFiles);
        if (hdVideoFile !== null) {
            videoFile = hdVideoFile;
        }
        else {
            const hqVideoFile = this._getVideoFileByQuality(MediaQuality.HQ, mpVideoFiles);
            if (hqVideoFile !== null) {
                videoFile = hqVideoFile;
            }
            else {
                const sdVideoFile = this._getVideoFileByQuality(MediaQuality.SD, mpVideoFiles);
                if (sdVideoFile !== null) {
                    videoFile = sdVideoFile;
                }
                else {
                    const loVideoFile = this._getVideoFileByQuality(MediaQuality.LO, mpVideoFiles);
                    if (loVideoFile !== null) {
                        videoFile = loVideoFile;
                    }
                }
            }
        }
        return videoFile;
    }
    isEmptyOrUndefined(value) {
        if (value === undefined || value === '') {
            return true;
        }
        return false;
    }
    addIdPrefix(childId) {
        const prefix = (this.isEmptyOrUndefined(this.playerProps.playerId))
            ? null
            : `${this.playerProps.playerId}-`;
        return (prefix && !startsWith(childId, prefix, false)) ? (prefix + childId) : childId;
    }
    removeIdPrefix(childId) {
        const prefix = (this.isEmptyOrUndefined(this.playerProps.playerId))
            ? null
            : `${this.playerProps.playerId}-`;
        return (prefix && startsWith(childId, prefix, false)) ? childId.substring(prefix.length) : childId;
    }
    _getAudioTracksMenu() {
        const audioTracksMenuItems = [];
        const videoMetaData = this.playerProps.playerData.metaData;
        if (videoMetaData.audioTracks !== undefined && videoMetaData.audioTracks.length > 0) {
            let descriptiveAudioTrackCount = 0;
            for (const track of videoMetaData.audioTracks) {
                if (track.isDescriptiveAudio) {
                    descriptiveAudioTrackCount++;
                }
            }
            let trackIndex = 0;
            for (const audioTrack of videoMetaData.audioTracks) {
                let label;
                let languageCode = '';
                if (audioTrack.isDescriptiveAudio) {
                    const descriptiveAudioLabel = this.localizationHelper.getLocalizedValue(PlayerLocKeys.descriptive_audio);
                    if (descriptiveAudioTrackCount > 1) {
                        const language = this.localizationHelper.getLanguageNameFromLocale(audioTrack.languageCode);
                        label = `${descriptiveAudioLabel} - ${language}`;
                    }
                    else {
                        label = descriptiveAudioLabel;
                    }
                    languageCode = `daudio-${audioTrack.languageCode.toLowerCase()}`;
                }
                else {
                    label = this.localizationHelper.getLanguageNameFromLocale(audioTrack.languageCode);
                    languageCode = audioTrack.languageCode.toLowerCase();
                }
                const audioMenuItem = {
                    label: label,
                    language: languageCode,
                    data: audioTrack.url,
                    id: this.addIdPrefix(`audio-${trackIndex}`),
                    selected: false,
                    selectable: true,
                    persistOnClick: true
                };
                audioTracksMenuItems.push(audioMenuItem);
                trackIndex++;
            }
            audioTracksMenuItems.unshift({
                id: '',
                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks_default),
                ariaLabel: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks_default),
                language: 'default',
                data: 'default',
                selectable: true,
                selected: false,
                persistOnClick: true,
            });
            audioTracksMenuItems.unshift({
                id: '',
                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),
                ariaLabel: `${this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks)} - go back to previous menu`,
                selectable: false,
                selected: false,
                persistOnClick: false,
                isBackButton: true
            });
            return {
                category: MenuCategories.AudioTracks,
                id: this.addIdPrefix(MenuCategories.AudioTracks),
                label: this.localizationHelper.getLocalizedValue(PlayerLocKeys.audio_tracks),
                items: audioTracksMenuItems,
            };
        }
        else {
            return null;
        }
    }
    _clearVideoPlayerMetaData() {
        this.playerProps.playerData.metaData.videoFiles = [];
        this.playerProps.playerData.metaData.audioTracks = [];
        this.playerProps.playerData.metaData.ccFiles = [];
    }
    _setCCFiles() {
        const videoMetaData = this.playerProps.playerData.metaData;
        const ccFiles = [];
        if (!(videoMetaData.ccFiles && videoMetaData.ccFiles.length > 0)) {
            if (videoMetaData.videoBinaryReferences && videoMetaData.videoBinaryReferences.length > 0) {
                for (const binaryRef of videoMetaData.videoBinaryReferences) {
                    if (((binaryRef.extension && binaryRef.extension === 'ttml') || binaryRef.$type === 'videoClosedCaptionBinaryReference')) {
                        const ccFile = {
                            ccType: ClosedCaptionTypes.TTML,
                            locale: binaryRef.locale,
                            url: binaryRef.sourceHref
                        };
                        ccFiles.push(ccFile);
                    }
                }
                this.playerProps.playerData.metaData.ccFiles = ccFiles;
            }
        }
    }
    _setAudioTracks() {
        const videoMetaData = this.playerProps.playerData.metaData;
        const audioTracks = [];
        if (videoMetaData.videoBinaryReferences && videoMetaData.videoBinaryReferences.length > 0) {
            for (const binaryRef of videoMetaData.videoBinaryReferences) {
                if (binaryRef.$type && binaryRef.$type === 'audioBinaryReference') {
                    const audioTrack = {
                        isDescriptiveAudio: binaryRef.audioType === 'descriptiveAudio',
                        bitrate: binaryRef.bitrate,
                        languageCode: binaryRef.locale === undefined ? '' : binaryRef.locale,
                        name: binaryRef.alias,
                        url: binaryRef.clientHref
                    };
                    audioTracks.push(audioTrack);
                }
            }
        }
        this.playerProps.playerData.metaData.audioTracks = audioTracks;
    }
    _mapVideoFiles() {
        const videoMetaData = this.playerProps.playerData.metaData;
        if (!videoMetaData.videoFiles || videoMetaData.videoFiles.length === 0) {
            const videoFiles = [];
            const videoBinaryFiles = videoMetaData.videoBinaryReferences;
            if (videoBinaryFiles && videoBinaryFiles.length > 0) {
                for (const binaryRef of videoBinaryFiles) {
                    if (binaryRef.format) {
                        if ((binaryRef.format === '1001')) {
                            continue;
                        }
                        const mediaTypeAndQuality = this._getMediaTypeAndQuality(binaryRef.format);
                        let urlRef;
                        if (mediaTypeAndQuality.mediaType === MediaTypes.MP4) {
                            urlRef = binaryRef.clientHref;
                        }
                        else {
                            urlRef = binaryRef.sourceHref;
                        }
                        if (urlRef) {
                            urlRef = this._removeProtocolFromUrl(urlRef);
                        }
                        if (urlRef) {
                            videoFiles.push({
                                url: urlRef,
                                quality: mediaTypeAndQuality.quality,
                                mediaType: mediaTypeAndQuality.mediaType,
                                formatCode: binaryRef.format
                            });
                        }
                    }
                }
            }
            this.playerProps.playerData.metaData.videoFiles = videoFiles;
        }
    }
    _getMediaTypeAndQuality(format) {
        let mType = MediaTypes.MP4;
        let mQuality = MediaQuality.SD;
        switch (format) {
            case '101':
                mType = MediaTypes.MP4;
                mQuality = MediaQuality.LO;
                break;
            case '102':
                mType = MediaTypes.MP4;
                mQuality = MediaQuality.SD;
                break;
            case '103':
                mType = MediaTypes.MP4;
                mQuality = MediaQuality.HQ;
                break;
            case '104':
                mType = MediaTypes.MP4;
                mQuality = MediaQuality.HDX;
                break;
            case '105':
                mType = MediaTypes.MP4;
                mQuality = MediaQuality.HD;
                break;
            case '1004':
                mType = MediaTypes.SMOOTH;
                break;
            case '1006':
                mType = MediaTypes.HLS;
                break;
            case '1007':
                mType = MediaTypes.DASH;
                break;
            default:
                mType = MediaTypes.MP4;
                mQuality = MediaQuality.SD;
        }
        return {
            mediaType: mType,
            quality: mQuality
        };
    }
    _removeProtocolFromUrl(url) {
        return url.replace(/(^\w+:|^)\/\//, '//');
    }
    _getVideoFileByQuality(quality, videoFiles) {
        let videoFile = null;
        for (const file of videoFiles) {
            if (file.quality === quality) {
                videoFile = file;
                break;
            }
        }
        return videoFile;
    }
    _getVideoFileByType(mediaType, videoFiles) {
        const videoFile = [];
        for (const file of videoFiles) {
            if (file.mediaType === mediaType) {
                videoFile.push(file);
            }
        }
        return videoFile;
    }
}
//# sourceMappingURL=playerHelper.js.map