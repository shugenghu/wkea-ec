{"version":3,"file":"ttml-context.js","sourceRoot":"./src/","sources":["videoplayer/components/closed-captions/ttml-context.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,eAAe,EAAC,MAAM,6BAA6B,CAAC;AACpF,OAAO,EAAC,MAAM,EAAE,kBAAkB,EAAE,IAAI,EAAC,MAAM,+BAA+B,CAAC;AAC/E,OAAO,EAAC,MAAM,EAAE,aAAa,EAA4C,MAAM,wBAAwB,CAAC;AACxG,OAAO,EAAa,UAAU,EAAC,MAAM,eAAe,CAAC;AACrD,OAAO,EAAe,KAAK,EAAC,MAAM,iBAAiB,CAAC;AA6CpD,MAAM,OAAO,WAAW;IA6OpB;QA2PQ,oBAAe,GAAG,CACtB,OAAgB,EAChB,kBAA2C,EAC3C,aAAsB,EAA0B,EAAE;YAClD,IAAI,WAAwB,CAAC;YAC7B,IAAI,SAAsB,CAAC;YAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACjD,IAAI,QAAQ,GAAG,EAAE,CAAC;YAClB,IAAI,SAAS,GAAG,EAAE,CAAC;YACnB,QAAQ,IAAI,EAAE;gBACV,KAAK,aAAa;oBACd,SAAS,GAAG,MAAM,CAAC;gBAGvB,KAAK,0BAA0B,CAAC;gBAChC,KAAK,WAAW,CAAC;gBACjB,KAAK,UAAU;oBACX,QAAQ,GAAG,KAAK,CAAC;oBACjB,MAAM;gBACV,KAAK,QAAQ;oBACT,QAAQ,GAAG,GAAG,CAAC;oBACf,MAAM;gBACV,KAAK,WAAW;oBACZ,QAAQ,GAAG,MAAM,CAAC;oBAClB,MAAM;gBACV,KAAK,SAAS;oBACV,QAAQ,GAAG,IAAI,CAAC;oBAChB,MAAM;gBACV,QAAQ;aACX;YAED,MAAM,IAAI,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;YAEzF,IAAI,IAAI,EAAE;gBACN,SAAS,IAAK,IAAI,IAAI,EAAE,CAAC;aAC5B;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;YAE3F,IAAI,KAAK,EAAE;gBACP,SAAS,IAAI,IAAI,KAAK,EAAE,CAAC;aAC5B;YAGD,IAAI,IAAI,KAAK,QAAQ,EAAE;gBACnB,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC;aACvB;iBAAM,IAAI,IAAI,KAAK,YAAY,EAAE;gBAC9B,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;aACrB;iBAAM,IAAI,IAAI,KAAK,YAAY,EAAE;gBAC9B,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;aACrB;YAED,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;gBAC/B,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpF,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAEvC,MAAM,KAAK,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;gBAE3F,IAAI,KAAK,EAAE;oBACP,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;iBAC5C;gBAED,MAAM,EAAE,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAE3D,IAAI,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;oBAG9B,WAAW,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;iBAC/D;gBAED,IAAI,IAAI,KAAK,aAAa,EAAE;oBAGxB,SAAS,GAAiB,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtH,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,0FAA0F,CAAC,CAAC;oBAC5H,SAAS,GAAiB,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpH,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;oBAGxC,IAAI,kBAAkB,CAAC,YAAY,EAAE;wBACjC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,YAAY,EAAE,kBAAkB,CAAC,YAAY,EAAE,CAAC,CAAC;wBAGzF,kBAAkB,CAAC,YAAY,GAAG,EAAE,CAAC;qBACxC;iBACJ;gBAMD,IAAI,aAAa,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,EAAE;oBACzC,SAAS,GAAgB,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtH,GAAG,CAAC,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;iBACxC;gBAID,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACvC,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;gBAGlC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE,kBAAkB,CAAC,CAAC;aAC/D;YAED,OAAO,EAAE,SAAS,EAAE,WAAY,EAAE,SAAS,EAAE,SAAU,CAAC,CAAC,CAAC,SAAU,CAAC,CAAC,CAAC,WAAY,EAAE,CAAC;QAC1F,CAAC,CAAA;IAnWD,CAAC;IAtGM,MAAM,CAAC,wBAAwB,CAAC,kBAA0B;QACjE,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,MAAM,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAG9C,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;YAEvB,QAAQ,KAAK,EAAE;gBACX,KAAK,MAAM,CAAC;gBACZ,KAAK,aAAa,CAAC;gBACnB,KAAK,eAAe,CAAC;gBACrB,KAAK,YAAY;oBACb,cAAc,GAAG,MAAM,CAAC;aAC/B;SACJ;QAGD,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;YACvB,QAAQ,KAAK,EAAE;gBACX,KAAK,MAAM,CAAC;gBACZ,KAAK,aAAa,CAAC;gBACnB,KAAK,eAAe,CAAC;gBACrB,KAAK,YAAY;oBACb,MAAM;gBACV,KAAK,aAAa;oBACd,cAAc,IAAI,eAAe,CAAC;oBAClC,MAAM;gBACV;oBACI,cAAc,IAAI,IAAI,KAAK,EAAE,CAAC;aACrC;SACJ;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC;IAChC,CAAC;IAcO,MAAM,CAAC,eAAe,CAAC,KAAa;QACxC,IAAI,WAAW,GAAG,KAAK,CAAC;QAExB,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAE5B,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC7B,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEhD,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;gBAC/B,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAErC,WAAW,GAAG,MAAM,CAAC,uBAAuB,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;aACxG;SACJ;aAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;YAC1D,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9C,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAE/C,WAAW,GAAG,MAAM,CAAC,uBAAuB,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;SACxG;aAAM,IAAI,WAAW,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;YAC7C,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;SACtD;QAED,OAAO,WAAW,CAAC;IACvB,CAAC;IAUO,MAAM,CAAC,aAAa,CAAC,OAAoB;QAE7C,GAAG,CAAC,OAAO,EAAE,kBAAkB,EAAE,WAAW,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAC5E,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC5B,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC5B,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;QAC7B,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC5B,OAAO,OAAO,CAAC;IACnB,CAAC;IAkBU,gBAAgB,CAAC,aAAuB;QAC3C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IASM,8BAA8B,CAAC,UAA4B;QAC9D,IAAI,UAAU,KAAK,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB;YAC/D,CAAC,UAAU,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,KAAK,CAAC;YACnE,CAAC,UAAU,CAAC,MAAM,KAAK,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,EAAE;YACxE,IAAI,CAAC,QAAQ,CAAC,wBAAwB,GAAG;gBACrC,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,MAAM,EAAE,UAAU,CAAC,MAAM;aAC5B,CAAC;YAEF,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAQM,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC/C,CAAC;IAQM,kBAAkB;QACrB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IASM,mBAAmB,CAAC,IAAY;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;QAGzD,MAAM,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/E,MAAM,gBAAgB,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5D,IAAI,mBAAmB,KAAK,gBAAgB,EAAE;YAC1C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAC9B,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;YAChC,OAAO,IAAI,CAAC;SACf;QAED,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,mBAAmB,EAAE,KAAK,EAAE,EAAE;gBACtD,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE;oBAC3D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;oBAC9B,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;oBAChC,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAUK,OAAO,CAAC,IAAY;QAC1B,IAAI,IAAI,GAAkB,EAAE,CAAC;QAE7B,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;YACjC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;SAClC;QAGD,MAAM,aAAa,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,KAAK,UAAU,CAAC,CAAC;QAC5F,MAAM,OAAO,GAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAE9H,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC1B,MAAM,QAAQ,GAAG,UAAU,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAChE,MAAM,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;YAE5D,IAAI,WAAW,IAAI,QAAQ,EAAE;gBACzB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBAEzH,IAAI,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,EAAE;oBAChD,MAAM,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;oBACxC,MAAM,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;oBAKxC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;wBAC7B,IAAI,KAAK,CAAC,OAAO,EAAE;4BACf,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE;gCAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAC3B,KAAK,CAAC,OAAO,EACb,WAAW,CAAC,mBAAoB,EAChC,aAAa,EACb,IAAI,EACJ,IAAI,CAAC,eAAe,CAAC,CAAC;gCAC1B,IAAI,OAAO,GAAmB,WAAW,CAAC,aAAa,CAAC;gCAExD,IAAI,CAAC,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;oCACnF,OAAO,GAAG,IAAI,CAAC;iCAClB;gCAED,IAAI,OAAO,EAAE;oCACT,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;iCAClC;6BACJ;yBACJ;qBACJ;oBAED,MAAM,UAAU,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,qBAAqB,CAAC,KAAK,QAAQ,CAAC,CAAC;oBAEhF,IAAI,UAAU,IAAI,SAAU,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC1C,IAAI,UAAU,EAAE;4BAEZ,SAAS,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;yBACpD;wBAED,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBACxB;iBACJ;aACJ;SACJ;QAGD,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YAE/H,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACpB,GAAG,CAAC,SAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACnC;YAED,IAAI,GAAG,EAAE,CAAC;YACV,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAU,CAAC,CAAC;SAC7B;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IASW,0BAA0B,CAAC,IAAY;QAC3C,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YAChC,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAChF,CAAC,CAAC,CAAC;IACP,CAAC;IAUO,mBAAmB,CAAC,OAAgB,EAAE,IAAY;QACtD,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC;YAC3E,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;IAaO,UAAU,CACd,OAAgB,EAChB,iBAA0C,EAC1C,aAAsB,EACtB,IAAY,EACZ,UAAoB;QACpB,IAAI,WAAmC,CAAC;QACxC,IAAI,gBAAyC,CAAC;QAE9C,IAAI,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;YACzC,MAAM,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAEhD,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,iBAAiB,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAEpF,IAAI,gBAAgB,CAAC,OAAO,KAAK,MAAM,EAAE;gBACrC,MAAM,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;gBAE9E,WAAW,GAAG,UAAU,CAAC,OAAO,EAAE,kBAAkB,EAAE,aAAa,CAAC,CAAC;gBAErE,OAAO;oBACH,SAAS,EAAE,WAAW,CAAC,SAAS;oBAChC,SAAS,EAAE,WAAW,CAAC,SAAS;oBAChC,mBAAmB,EAAE,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC;iBACtE,CAAC;aACL;SACJ;QAED,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC;IAC3E,CAAC;IAiIO,eAAe,CAAC,OAAe,EAAE,OAAoB,EAAE,kBAA2C;QAEtG,KAAK,MAAM,KAAK,IAAI,kBAAkB,EAAE;YACpC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAC3B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;aACxE;SACJ;IACL,CAAC;IAeO,MAAM,CACV,OAAgB,EAChB,iBAA0C,EAC1C,aAAsB,EACtB,IAAY,EACZ,UAAoB,EACpB,kBAA2B,KAAK;QAChC,IAAI,SAAkB,CAAC;QACvB,IAAI,mBAAmB,GAAG,KAAK,CAAC;QAEhC,IAAI,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAE/F,IAAI,WAAW,CAAC,SAAS,KAAK,IAAI,EAAE;YAChC,MAAM,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAEhD,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;YAClC,IAAI,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;YAEtC,KAAK,MAAM,KAAK,IAAI,eAAe,CAAO,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC3D,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,EAAE;iBAEzC;qBAAM,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;oBAC1C,SAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAQ,KAAM,CAAC,IAAI,CAAC,CAAC,CAAC;oBAEpE,IAAI,aAAa,IAAI,CAAC,GAAG,KAAK,WAAW,CAAC,EAAE;wBACxC,mBAAmB,GAAG,IAAI,CAAC;qBAC9B;iBACJ;qBAAM;oBACH,IAAI,kBAAkB,GAAG,aAAa,CAAC;oBACvC,MAAM,SAAS,GAAG,UAAU,CAAC,cAAc,CAAU,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;oBAE5E,IAAI,SAAS,EAAE;wBACX,kBAAkB,GAAG,CAAC,SAAS,KAAK,UAAU,CAAC,CAAC;qBACnD;oBAED,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAClB,KAAK,EACd,WAAW,CAAC,mBAAoB,EAChC,kBAAkB,EAClB,IAAI,EACJ,UAAU,EACV,IAAI,CAAC,CAAC;oBAEV,mBAAmB,GAAG,mBAAmB,IAAI,WAAW,CAAC,mBAAmB,CAAC;oBAE7E,IAAI,WAAW,CAAC,aAAa,EAAE;wBAC3B,SAAU,CAAC,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;qBACrD;iBACJ;aACJ;YAGD,IAAI,CAAC,eAAe,EAAE;gBAClB,IAAI,QAAQ,GAAY,OAAO,CAAC,UAAU,CAAC;gBAE3C,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;oBACjG,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,iBAAiB,EAAE,aAAa,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;oBAC5F,IAAI,WAAW,CAAC,SAAS,EAAE;wBACvB,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;wBAClC,SAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;wBAClC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;qBACrC;yBAAM;wBACH,MAAM;qBACT;oBAED,QAAQ,GAAY,QAAQ,CAAC,UAAU,CAAC;iBAC3C;aACJ;SACJ;QAED,OAAO,EAAE,aAAa,EAAE,SAAU,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,CAAC;IACnF,CAAC;IAaO,oBAAoB,CACxB,OAAgB,EAChB,iBAA0C,EAC1C,OAAe,EACf,IAAY;QAEZ,MAAM,gBAAgB,GAAG,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;QAGvD,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAGnG,MAAM,IAAI,GAAG,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAEhF,KAAK,MAAM,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE;YACrC,IAAI,IAAI,CAAC,mBAAmB,CAAU,GAAG,EAAE,IAAI,CAAC,EAAE;gBAC9C,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,gBAAgB,EAAW,GAAG,CAAC,CAAC;aAC/E;SACJ;QAED,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,KAAK,QAAQ,CAAC,EAAE;YAMtE,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;YAE/G,IAAI,SAAS,EAAE;gBACX,gBAAgB,CAAC,qBAAqB,CAAC,GAAG,SAAS,CAAC;aACvD;SACJ;QAED,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAUO,sBAAsB,CAAC,gBAAyC,EAAE,OAAe;QACrF,MAAM,kBAAkB,GAA4B,EAAE,CAAC;QAIvD,IAAI,gBAAgB,CAAC,MAAM,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;YACvE,kBAAkB,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;SACvD;QAID,IAAI,gBAAgB,CAAC,KAAK,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;YACrE,kBAAkB,CAAC,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;SACrD;QAGD,KAAK,MAAM,KAAK,IAAI,gBAAgB,EAAE;YAClC,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;gBACzC,kBAAkB,CAAC,KAAK,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;aACvD;SACJ;QAED,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IAYO,kBAAkB,CAAC,OAAe,EAAE,KAAa;QACrD,QAAQ,KAAK,EAAE;YACX,KAAK,iBAAiB,CAAC;YACvB,KAAK,SAAS,CAAC;YACf,KAAK,YAAY;gBACb,OAAO,CAAC,CAAC,kFAAkF,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAIxH,KAAK,YAAY,CAAC;YAClB,KAAK,UAAU,CAAC;YAChB,KAAK,WAAW,CAAC;YACjB,KAAK,YAAY;gBACb,OAAO,CAAC,0BAA0B,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9D,KAAK,OAAO,CAAC;YACb,KAAK,gBAAgB,CAAC;YACtB,KAAK,aAAa,CAAC;YACnB,KAAK,YAAY;gBACb,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAEvD,KAAK,WAAW,CAAC;YACjB,KAAK,aAAa;gBACd,OAAO,CAAC,0BAA0B,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9D,KAAK,cAAc,CAAC;YACpB,KAAK,SAAS,CAAC;YACf,KAAK,QAAQ,CAAC;YACd,KAAK,UAAU,CAAC;YAChB,KAAK,SAAS,CAAC;YACf,KAAK,gBAAgB,CAAC;YACtB,KAAK,aAAa,CAAC;YACnB,KAAK,QAAQ;gBACT,OAAO,CAAC,sCAAsC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAE1E,KAAK,QAAQ;gBACT,OAAO,CAAC,8CAA8C,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAElF,KAAK,qBAAqB,CAAC;YAC3B,KAAK,YAAY,CAAC;YAClB,KAAK,WAAW;gBACZ,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAE5C,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC;SACzB;IACL,CAAC;IAUO,uBAAuB,CAAC,gBAAyC;QACrE,MAAM,iBAAiB,GAA4B,EAAE,CAAC;QAGtD,KAAK,MAAM,KAAK,IAAI,gBAAgB,EAAE;YAClC,IAAI,gBAAgB,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBACxC,QAAQ,KAAK,EAAE;oBACX,KAAK,iBAAiB,CAAC;oBACvB,KAAK,qBAAqB,CAAC;oBAC3B,KAAK,SAAS,CAAC;oBACf,KAAK,cAAc,CAAC;oBACpB,KAAK,QAAQ,CAAC;oBACd,KAAK,SAAS,CAAC;oBACf,KAAK,QAAQ,CAAC;oBACd,KAAK,UAAU,CAAC;oBAChB,KAAK,SAAS,CAAC;oBACf,KAAK,gBAAgB,CAAC;oBACtB,KAAK,aAAa,CAAC;oBACnB,KAAK,aAAa,CAAC;oBACnB,KAAK,QAAQ;wBACT,MAAM;oBACV;wBACI,iBAAiB,CAAC,KAAK,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;iBAC1D;aACJ;SACJ;QAED,OAAO,iBAAiB,CAAC;IAC7B,CAAC;IAYO,oBAAoB,CAAC,OAAgB,EAAE,iBAA0C,EAAE,IAAY,EAAE,KAAa;QAClH,KAAK,MAAM,KAAK,IAAI,eAAe,CAAU,OAAO,CAAC,UAAU,CAAC,EAAE;YAC9D,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC,EAAE;gBACxC,MAAM,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;gBAE9C,IAAI,GAAG,KAAK,WAAW,EAAE;oBACrB,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,iBAAiB,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;oBAChG,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;oBAE3C,IAAI,QAAQ,EAAE;wBACV,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC;qBAC5C;oBAED,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;iBACzG;aACJ;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAWO,WAAW,CAAC,OAAgB,EAAE,QAAgB;QAIlD,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,IAAI,CAAC;SACf;QAED,MAAM,UAAU,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAI7F,IAAI,UAAU,KAAK,QAAQ,EAAE;YACzB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,CAAC,UAAU,EAAE;YAIb,IAAI,QAAQ,GAAY,OAAO,CAAC,UAAU,CAAC;YAE3C,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC,EAAE;gBACrE,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACvC,IAAI,EAAE,EAAE;oBACJ,OAAO,EAAE,KAAK,QAAQ,CAAC;iBAC1B;gBACD,QAAQ,GAAY,QAAQ,CAAC,UAAU,CAAC;aAC3C;YAID,KAAK,MAAM,IAAI,IAAI,eAAe,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,EAAE;gBACnE,IAAI,IAAI,CAAC,YAAY,CAAU,IAAI,CAAC,KAAK,QAAQ,EAAE;oBAC/C,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QAGD,OAAO,KAAK,CAAC;IACjB,CAAC;IASO,YAAY,CAAC,OAAgB;QACjC,IAAI,QAAgB,CAAC;QAErB,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;YACpG,IAAI,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,QAAQ,EAAE;gBAClD,QAAQ,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;aAC9D;iBAAM;gBACH,QAAQ,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;aACxF;SACJ;QAED,OAAO,QAAS,CAAC;IACrB,CAAC;IASO,qBAAqB,CAAC,OAAgB;QAC1C,MAAM,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC;QAEvC,IAAI,SAAS,KAAK,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;YAC3C,OAAO,QAAQ,OAAO,EAAE,CAAC;SAC5B;QAGD,IAAI,SAAS,KAAK,8BAA8B,EAAE;YAC9C,OAAO,OAAO,CAAC;SAClB;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IAaO,WAAW,CAAC,OAAoB,EAAE,OAAe,EAAE,KAAa,EAAE,KAAa;QACnF,IAAI,WAAW,GAAG,KAAK,CAAC;QAExB,QAAQ,KAAK,EAAE;YACX,KAAK,OAAO,CAAC;YACb,KAAK,iBAAiB,CAAC,CAAC;gBACpB,WAAW,GAAG,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;gBACjD,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;YAED,KAAK,WAAW,CAAC;YACjB,KAAK,SAAS,CAAC,CAAC;gBAEZ,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;YAED,KAAK,cAAc,CAAC,CAAC;gBAEjB,QAAQ,KAAK,EAAE;oBACX,KAAK,QAAQ;wBACT,WAAW,GAAG,KAAK,CAAC;wBACpB,MAAM;oBACV,KAAK,QAAQ;wBACT,WAAW,GAAG,QAAQ,CAAC;wBACvB,MAAM;oBACV,KAAK,OAAO;wBACR,WAAW,GAAG,QAAQ,CAAC;iBAC9B;gBAED,GAAG,CAAC,OAAO,EAAE,gBAAgB,EAAE,WAAW,CAAC,CAAC;gBAC5C,OAAO;aACV;YAED,KAAK,QAAQ,CAAC,CAAC;gBACX,IAAI,KAAa,CAAC;gBAClB,IAAI,MAAc,CAAC;gBAEnB,IAAI,KAAK,KAAK,MAAM,EAAE;oBAElB,MAAM,MAAM,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEpC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;wBACrB,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;wBAC9C,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;qBACnD;iBACJ;gBAED,IAAI,CAAC,KAAM,EAAE;oBACT,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B;wBACnD,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B,CAAC,KAAK;wBACnD,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAyB,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC;oBACpE,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B;wBACpD,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B,CAAC,MAAM;wBACpD,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAyB,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC;iBACxE;gBAED,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;gBACrC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,KAAM,CAAC,CAAC;gBAC9B,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,KAAM,CAAC,CAAC;gBAClC,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,KAAM,CAAC,CAAC;gBAClC,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAO,CAAC,CAAC;gBAChC,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,MAAO,CAAC,CAAC;gBACpC,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,MAAO,CAAC,CAAC;gBACpC,OAAO;aACV;YAED,KAAK,YAAY,CAAC,CAAC;gBACf,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBACvD,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBAC9C;gBAED,IAAI,KAAK,KAAK,WAAW,EAAE;oBAEvB,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;iBAC7C;gBAED,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;YAED,KAAK,UAAU,CAAC,CAAC;gBACb,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAGjC,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAGtD,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,KAAK,aAAa,CAAC,CAAC;gBAEpF,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;YAED,KAAK,WAAW,CAAC;YACjB,KAAK,YAAY,CAAC,CAAC;gBAEf,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;YAED,KAAK,YAAY,CAAC,CAAC;gBAGf,WAAW,GAAG,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBAEnF,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;gBACzC,OAAO;aACV;YAED,KAAK,qBAAqB,CAAC,CAAC;gBACxB,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAChC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;gBAEb,KAAK,MAAM,QAAQ,IAAI,MAAM,EAAE;oBAE3B,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;oBAEvD,IAAI,WAAW,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;wBACvE,MAAM,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAEzE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,EAAE;4BAClC,GAAG,GAAG,MAAM,CAAC;yBAChB;qBACJ;iBACJ;gBAED,IAAI,GAAG,IAAI,CAAC,EAAE;oBACV,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;iBAC3C;gBAED,OAAO;aACV;YAED,KAAK,QAAQ,CAAC,CAAC;gBACX,IAAI,KAAK,KAAK,MAAM,EAAE;oBAElB,MAAM,MAAM,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEpC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;wBACrB,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;wBACrC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;wBAC5D,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;qBAC/D;iBACJ;gBAED,OAAO;aACV;YAED,KAAK,SAAS,CAAC,CAAC;gBAEZ,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;YAED,KAAK,SAAS,CAAC,CAAC;gBACZ,MAAM,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;gBAG3C,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnC,IAAI,KAAa,CAAC;gBAClB,IAAI,MAAc,CAAC;gBACnB,IAAI,KAAa,CAAC;gBAClB,IAAI,KAAa,CAAC;gBAGlB,QAAQ,KAAK,CAAC,MAAM,EAAE;oBAClB,KAAK,CAAC;wBAEF,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,WAAY,CAAC,CAAC;wBAC5D,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,WAAY,CAAC,CAAC;wBAC5D,WAAW,GAAG,MAAM,CAAC,iBAAiB,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;wBACvD,MAAM;oBACV,KAAK,CAAC;wBAEF,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,WAAY,CAAC,CAAC;wBAC5D,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,WAAY,CAAC,CAAC;wBAC5D,WAAW,GAAG,MAAM,CAAC,iBAAiB,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;wBACvD,MAAM;oBACV,KAAK,CAAC;wBAEF,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,WAAY,CAAC,CAAC;wBAC5D,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,WAAY,CAAC,CAAC;wBAC5D,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,WAAY,CAAC,CAAC;wBAC5D,WAAW,GAAG,MAAM,CAAC,iBAAiB,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;wBAC9D,MAAM;oBACV,KAAK,CAAC;wBAEF,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,WAAY,CAAC,CAAC;wBAC5D,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,WAAY,CAAC,CAAC;wBAC5D,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,WAAY,CAAC,CAAC;wBAC5D,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,WAAY,CAAC,CAAC;wBAC3D,WAAW,GAAG,MAAM,CAAC,iBAAiB,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;iBAC5E;gBAGD,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;gBAGzC,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;gBACtC,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;gBAG5C,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;gBAC1C,OAAO;aACV;YAQD,KAAK,WAAW,CAAC,CAAC;gBAEd,QAAQ,KAAK,EAAE;oBACX,KAAK,OAAO;wBACR,WAAW,GAAG,MAAM,CAAC;wBACrB,MAAM;oBACV,KAAK,KAAK;wBACN,WAAW,GAAG,OAAO,CAAC;iBAC7B;gBAED,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;gBACxC,OAAO;aACV;YAED,KAAK,gBAAgB,CAAC,CAAC;gBACnB,WAAW,GAAG,WAAW,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;gBAC1D,GAAG,CAAC,OAAO,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC;gBAC7C,OAAO;aACV;YAED,KAAK,aAAa,CAAC,CAAC;gBAChB,MAAM,YAAY,GAAG,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC3C,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC;gBACnF,OAAO;aACV;YAED,KAAK,aAAa,CAAC,CAAC;gBAGhB,QAAQ,KAAK,EAAE;oBACX,KAAK,cAAc;wBACf,WAAW,GAAG,eAAe,CAAC;iBACrC;gBACD,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;gBAC1C,OAAO;aACV;YAED,KAAK,YAAY,CAAC,CAAC;gBAEf,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;YAED,KAAK,aAAa,CAAC,CAAC;gBAEhB,QAAQ,KAAK,EAAE;oBACX,KAAK,IAAI,CAAC;oBACV,KAAK,MAAM,CAAC,CAAC;wBACT,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;wBAC9C,GAAG,CAAC,OAAO,EAAE,sBAAsB,EAAE,eAAe,CAAC,CAAC;wBACtD,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;wBACtC,OAAO;qBACV;oBACD,KAAK,IAAI,CAAC;oBACV,KAAK,MAAM,CAAC,CAAC;wBACT,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;wBAC9C,GAAG,CAAC,OAAO,EAAE,sBAAsB,EAAE,eAAe,CAAC,CAAC;wBACtD,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;wBACtC,OAAO;qBACV;oBACD,KAAK,MAAM,CAAC,CAAC;wBACT,GAAG,CAAC,OAAO,EAAE,kBAAkB,EAAE,SAAS,CAAC,CAAC;wBAC5C,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;wBAC5C,GAAG,CAAC,OAAO,EAAE,0BAA0B,EAAE,SAAS,CAAC,CAAC;wBACpD,GAAG,CAAC,OAAO,EAAE,sBAAsB,EAAE,aAAa,CAAC,CAAC;wBACpD,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;wBACtC,OAAO;qBACV;oBACD,KAAK,IAAI,CAAC;oBACV,KAAK,MAAM,CAAC,CAAC;wBACT,GAAG,CAAC,OAAO,EAAE,kBAAkB,EAAE,SAAS,CAAC,CAAC;wBAC5C,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;wBAC5C,GAAG,CAAC,OAAO,EAAE,0BAA0B,EAAE,SAAS,CAAC,CAAC;wBACpD,GAAG,CAAC,OAAO,EAAE,sBAAsB,EAAE,aAAa,CAAC,CAAC;wBACpD,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;wBACtC,OAAO;qBACV;iBACJ;gBACD,OAAO;aACV;YAED,KAAK,YAAY,CAAC,CAAC;gBACf,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClG,OAAO;aACV;YAED,KAAK,QAAQ,CAAC,CAAC;gBACX,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;YAED,OAAO,CAAC,CAAC;gBACL,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACjC,OAAO;aACV;SACJ;IACL,CAAC;IAWO,eAAe,CAAC,SAAiB,EAAE,KAAc,EAAE,WAA8B;QACrF,IAAI,QAAQ,GAAG,SAAS,CAAC;QAEzB,IAAI,SAAS,EAAE;YACX,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAGpD,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;gBAClC,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,6BAA6B;oBACzD,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B;oBAC7C,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC;gBAC7C,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrE,IAAI,aAAa,GAAG,KAAK,CAAC,CAAC,CAAC,SAAU,CAAC,KAAK,CAAC,CAAC,CAAC,SAAU,CAAC,MAAM,CAAC;gBACjE,IAAI,KAAa,CAAC;gBAElB,IAAI,IAAI,KAAK,GAAG,EAAE;oBACd,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC;oBAElG,KAAK,GAAG,MAAM,GAAG,aAAa,GAAG,QAAQ,CAAC;iBAC7C;qBAAM,IAAI,IAAI,KAAK,GAAG,EAAE;oBAErB,IAAI,WAAW,EAAE;wBACb,aAAa,GAAG,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;qBAClE;oBAID,KAAK,GAAG,aAAa,GAAG,MAAM,GAAG,GAAG,CAAC;iBACxC;gBAGD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAM,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gBACrC,QAAQ,GAAG,GAAG,KAAK,IAAI,CAAC;aAC3B;SACJ;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAYO,kBAAkB,CAAC,SAAiB,EAAE,KAAc,EAAE,cAAsB,CAAC,EAAE,WAAoB,KAAK;QAC5G,IAAI,QAAQ,GAAG,SAAS,CAAC;QAEzB,IAAI,SAAS,EAAE;YACX,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAGpD,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;gBAChD,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,6BAA6B;oBACzD,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAA6B;oBAC7C,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC;gBAC7C,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrE,MAAM,aAAa,GAAG,KAAK,CAAC,CAAC,CAAC,SAAU,CAAC,KAAK,CAAC,CAAC,CAAC,SAAU,CAAC,MAAM,CAAC;gBACnE,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC;gBAClG,IAAI,KAAK,GAAG,MAAM,GAAG,aAAa,GAAG,QAAQ,CAAC;gBAE9C,IAAI,IAAI,KAAK,GAAG,EAAE;oBAEd,KAAK,IAAI,GAAG,CAAC;iBAChB;gBAGD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,WAAW,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gBAElD,QAAQ,GAAG,GAAG,KAAK,IAAI,CAAC;aAC3B;SACJ;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAUO,qBAAqB,CAAC,WAAmB,EAAE,YAAoB;QACnE,IAAI,UAAU,GAAG,MAAM,CAAC;QAExB,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,KAAK,MAAM,CAAC,EAAE;YAC9D,IAAI,KAAK,GAAa,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAI,KAAK,GAAW,EAAE,CAAC;YACvB,IAAI,SAAS,GAAW,EAAE,CAAC;YAC3B,IAAI,IAAI,GAAW,EAAE,CAAC;YAEtB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpB,KAAK,GAAG,YAAY,CAAC;gBACrB,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,IAAI,GAAG,EAAE,CAAC;aACb;iBAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;aACnB;iBAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAErC,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,EAAE;oBAC1C,KAAK,GAAG,YAAY,CAAC;oBACrB,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACrB,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;iBACnB;qBAAM;oBACH,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACjB,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACrB,IAAI,GAAG,EAAE,CAAC;iBACb;aACJ;YAKD,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAClD,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAE5D,KAAK,GAAa,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAE1D,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;gBAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/C,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEvB,UAAU,GAAG,EAAE,CAAC;gBAEhB,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE;oBAClC,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE;wBAClC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;4BACxB,UAAU,IAAI,MAAM,CAAC,yBAAyB,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;yBAC1G;qBACJ;iBACJ;gBAED,IAAI,UAAU,EAAE;oBACZ,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;iBAC5D;aACJ;SACJ;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;;AAj8Cc,uBAAW,GAAW,uBAAuB,CAAC;AAS9C,qBAAS,GAAW,+EAA+E,CAAC;AASpG,6BAAiB,GAA4B;IACxD,WAAW,EAAE,eAAe;IAC5B,KAAK,EAAE,eAAe;IACtB,MAAM,EAAE,qBAAqB;IAC7B,IAAI,EAAE,qBAAqB;IAC3B,KAAK,EAAE,qBAAqB;IAC5B,MAAM,EAAE,iBAAiB;IACzB,GAAG,EAAE,iBAAiB;IACtB,MAAM,EAAE,mBAAmB;IAC3B,OAAO,EAAE,mBAAmB;IAC5B,OAAO,EAAE,mBAAmB;IAC5B,KAAK,EAAE,iBAAiB;IACxB,IAAI,EAAE,iBAAiB;IACvB,KAAK,EAAE,mBAAmB;IAC1B,MAAM,EAAE,mBAAmB;IAC3B,IAAI,EAAE,iBAAiB;IACvB,IAAI,EAAE,iBAAiB;IACvB,IAAI,EAAE,mBAAmB;IACzB,IAAI,EAAE,mBAAmB;IACzB,IAAI,EAAE,mBAAmB;CAC5B,CAAC","sourcesContent":["import {addClass, css, getText, nodeListToArray} from '../utilities/htmlExtensions';\nimport {format, isNullOrWhiteSpace, trim} from '../utilities/stringExtensions';\nimport {extend, getDimensions, IClientDimension, IDictionaryStringString} from '../utilities/utilities';\nimport {ITtmlEvent, TtmlParser} from './ttml-parser';\nimport {TtmlSettings, xmlNS} from './ttml-settings';\n\n// Timed Text Markup Language (TTML).\n// See http://www.w3.org/TR/ttml1/ for more details.\n\n/*\n* @interface ITtmlContext\n* @classdesc - The TtmlContext interface contract.\n* @export\n*/\nexport interface ITtmlContext {\n    setOwnerDocument(ownerDocument: Document): void;\n    updateRelatedMediaObjectRegion(dimensions: IClientDimension): boolean;\n    resetCurrentEvents(): void;\n    hasEvents(): boolean;\n    updateCurrentEvents(time: number): boolean;\n    getCues(time: number): HTMLElement[];\n}\n\n/*\n* @interface ITtmlTranslationResult\n* @classdesc - The ITtmlTranslationResult interface contract.\n*/\ninterface ITtmlTranslationResult {\n    outerNode: HTMLElement | null;\n    innerNode: HTMLElement | null;\n    inheritableStyleSet?: IDictionaryStringString | null;\n}\n\n/*\n* @interface ITtmlPruneResult\n* @classdesc - The ITtmlPruneResult interface contract.\n*/\ninterface ITtmlPruneResult {\n    prunedElement: Element;\n    hasPreservedContent: boolean;\n}\n\n/**\n *\n * The TtmlContext. An instance of this class is returned from the TttmlParser.parse() method after it\n *              parses a ttml file. This context is then used by the VideoClosedCaptions object to get the captions\n *              for any play position of the video.\n *\n */\nexport class TtmlContext implements ITtmlContext {\n\n    /*\n    * @name - lengthRegEx\n    * @description - The regular expression pattern used in ttml->css text outline conersion.\n    * @static\n    * @private\n    * @type {RegExp}\n    */\n    private static lengthRegEx: RegExp = /\\s*(\\d+\\.*\\d*)(.*)\\s*/;\n\n    /*\n    * @name - rgbaRegEx\n    * @description - The regular expression pattern used in ttml->css color conersion.\n    * @static\n    * @private\n    * @type {RegExp}\n    */\n    private static rgbaRegEx: RegExp = /\\s*rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)\\s*/;\n\n    /*\n    * @name - TtmlNamedColorMap\n    * @description - The table used to map named ttml color values to css color values.\n    * @static\n    * @private\n    * @type {IDictionaryStringString}\n    */\n    private static TtmlNamedColorMap: IDictionaryStringString = {\n        transparent: 'rgba(0,0,0,0)',\n        black: 'rgba(0,0,0,1)',\n        silver: 'rgba(192,192,192,1)',\n        gray: 'rgba(128,128,128,1)',\n        white: 'rgba(255,255,255,1)',\n        maroon: 'rgba(128,0,0,1)',\n        red: 'rgba(255,0,0,1)',\n        purple: 'rgba(128,0,128,1)',\n        fuchsia: 'rgba(255,0,255,1)',\n        magenta: 'rgba(255,0,255,1)',\n        green: 'rgba(0,128,0,1)',\n        lime: 'rgba(0,255,0,1)',\n        olive: 'rgba(128,128,0,1)',\n        yellow: 'rgba(255,255,0,1)',\n        navy: 'rgba(0,0,128,1)',\n        blue: 'rgba(0,0,255,1)',\n        teal: 'rgba(0,128,128,1)',\n        aqua: 'rgba(0,255,255,1)',\n        cyan: 'rgba(0,255,255,1)'\n    };\n\n    /*\n    * @name - events\n    * @description - The set of all ttml events.\n    * @public\n    * @type {ITtmlEvent[]}\n    */\n    public events!: ITtmlEvent[];\n\n    /*\n    * @name - settings\n    * @description - The ttml settings.\n    * @public\n    * @type {TtmlSettings}\n    */\n    public settings!: TtmlSettings;\n\n    /*\n    * @name - styleSetCache\n    * @description - The ttml styleSet cache.\n    * @public\n    * @type {IDictionaryStringString[]}\n    */\n    public styleSetCache!: IDictionaryStringString[];\n\n    /*\n    * @name - rootContainerRegion\n    * @description - The root container region.\n    * @public\n    * @type {Element}\n    */\n    public rootContainerRegion!: Element;\n\n    /*\n    * @name - root\n    * @description - The root element.\n    * @public\n    * @type {Element}\n    */\n    public root!: Element;\n\n    /*\n    * @name - body\n    * @description - The body element.\n    * @public\n    * @type {Element}\n    */\n    public body!: Element;\n\n    /*\n    * @name - layout\n    * @description - The layout element.\n    * @public\n    * @type {Element}\n    */\n    public layout!: Element;\n\n    /*\n    * @name - ownerDocument\n    * @description - The owner document for this context. Used to create html elements.\n    * @private\n    * @type {Document}\n    */\n    private ownerDocument!: Document;\n\n    /*\n    * @name - currentEvents\n    * @description - The current set of temporally active events.\n    * @private\n    * @type {ITtmlEvent[]}\n    */\n    private currentEvents!: ITtmlEvent[];\n\n    /*\n    * @name - currentEventsTime\n    * @description - The time the currentEvents was populated.\n    * @private\n    * @type {number}\n    */\n    private currentEventsTime!: number;\n\n        /*\n    * @name - ttmlToCssTextDecoration\n    * @description - Converts a ttml text decoration style value to a css one.\n    * @static\n    * @private\n    * @param {string} ttmlTextDecoration - The ttml value.\n    * @returns {string} - The css value.\n    */\n   private static _ttmlToCssTextDecoration(ttmlTextDecoration: string): string {\n    let textDecoration = '';\n    const parts = ttmlTextDecoration.split(/\\s+/);\n\n    // Since we have no CSS for the 'no' values just replace them all with a none at the front of the list.\n    for (const value of parts) {\n        // tslint:disable-next-line: switch-default\n        switch (value) {\n            case 'none':\n            case 'noUnderline':\n            case 'noLineThrough':\n            case 'noOverline':\n                textDecoration = 'none';\n        }\n    }\n\n    // Then append all the others.\n    for (const value of parts) {\n        switch (value) {\n            case 'none':\n            case 'noUnderline':\n            case 'noLineThrough':\n            case 'noOverline':\n                break;\n            case 'lineThrough':\n                textDecoration += ' line-through';\n                break;\n            default:\n                textDecoration += ` ${value}`;\n        }\n    }\n\n    return trim(textDecoration);\n}\n\n/*\n* @name - ttmlToCssColor\n* @description - Converts a ttml text color style value to a css one.\n*                #RRGGBB and rgb(rrr,ggg,bbb) do not need conversion and are not modified.\n*                #RRGGBBAA is modified because css doesn't support it (at least as implemented in todays browsers).\n*                rgba(rrr,ggg,bbb,aaa) is converted to rgba(rrr,ggg,bbb,0-1).\n*                ttml namedColors are converted to rgb(rrr,ggg,bbb) in the unlikely event that their alpha (only) is overridden.\n* @static\n* @private\n* @param {string} color - The ttml value.\n* @returns {string} - The css value.\n*/\nprivate static _ttmlToCssColor(color: string): string {\n    let mappedColor = color;\n\n    color = color.toLowerCase();\n\n    if (color.indexOf('rgba') === 0) {\n        const parts = TtmlContext.rgbaRegEx.exec(color);\n\n        if (parts && (parts.length === 5)) {\n            const red = parts[1];\n            const green = parts[2];\n            const blue = parts[3];\n            const alpha = parseInt(parts[4], 10);\n\n            mappedColor = format('rgba({0},{1},{2},{3})', red, green, blue, Math.round(alpha * 100 / 255) / 100);\n        }\n    } else if ((color.charAt(0) === '#') && (color.length === 9)) {\n        const red = parseInt(color.substr(1, 2), 16);\n        const green = parseInt(color.substr(3, 2), 16);\n        const blue = parseInt(color.substr(5, 2), 16);\n        const alpha = parseInt(color.substr(7, 2), 16);\n\n        mappedColor = format('rgba({0},{1},{2},{3})', red, green, blue, Math.round(alpha * 100 / 255) / 100);\n    } else if (TtmlContext.TtmlNamedColorMap[color]) {\n        mappedColor = TtmlContext.TtmlNamedColorMap[color];\n    }\n\n    return mappedColor;\n}\n\n/*\n* @name - defaultStyle\n* @description - Applies default styles to the element to match the ttml defaults.\n* @static\n* @private\n* @param {HTMLElement} element - The element to set the default styles on.\n* @returns {HTMLElement} - The specified element (for chaining).\n*/\nprivate static _defaultStyle(element: HTMLElement): HTMLElement {\n    // Set some element styles to our ttml defaults for them.\n    css(element, 'background-color', TtmlContext.TtmlNamedColorMap.transparent);\n    css(element, 'offset', '0');\n    css(element, 'margin', '0');\n    css(element, 'padding', '0');\n    css(element, 'border', '0');\n    return element;\n}\n\n    /*\n    * @constructor\n    * @description - Constructor for the TtmlContext class.\n    * @public\n    */\n    constructor() {\n        // Nothing to do at this time...\n    }\n\n    /*\n    * @name - setOwnerDocument\n    * @description - Set the context's owner document. It will use this to create elements during translation.\n    * @public\n    * @param {Document} ownerDocument - The owner document for this context.\n    * @returns {void}\n    */\n    public setOwnerDocument(ownerDocument: Document): void {\n        this.ownerDocument = ownerDocument;\n    }\n\n    /*\n    * @name - updateRelatedMediaObjectRegion\n    * @description - Updates the context's media object region.\n    * @public\n    * @param {IClientDimension} dimensions - The desired dimensions for the region.\n    * @returns {boolean} - True if the dimensions where changed, otherwise false.\n    */\n    public updateRelatedMediaObjectRegion(dimensions: IClientDimension): boolean {\n        if (dimensions !== null && (!this.settings.relatedMediaObjectRegion ||\n            (dimensions.width !== this.settings.relatedMediaObjectRegion.width) ||\n            (dimensions.height !== this.settings.relatedMediaObjectRegion.height))) {\n            this.settings.relatedMediaObjectRegion = {\n                width: dimensions.width,\n                height: dimensions.height\n            };\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n    * @name - hasEvents\n    * @description - Indicates whether or not the context has events.\n    * @public\n    * @returns {boolean} - True if the context has events, otherwise false.\n    */\n    public hasEvents(): boolean {\n        return this.events && !!this.events.length;\n    }\n\n    /*\n    * @name - resetCurrentEvents\n    * @description - Resets the context's currentEvents.\n    * @public\n    * @returns {void}\n    */\n    public resetCurrentEvents(): void {\n        this.currentEvents = [];\n    }\n\n    /*\n    * @name - updateCurrentEvents\n    * @description - Updates the context's currentEvents if there are new events for the specified time.\n    * @public\n    * @param {number} time - The time to get events for.\n    * @returns {boolean} - True if the events for the specified time are different than the currentEvents, otherwise false.\n    */\n    public updateCurrentEvents(time: number): boolean {\n        const timeEvents = this._getTemporallyActiveEvents(time);\n\n        // As a shortcut compare lengths first.\n        const currentEventsLength = this.currentEvents ? this.currentEvents.length : 0;\n        const timeEventsLength = timeEvents ? timeEvents.length : 0;\n\n        if (currentEventsLength !== timeEventsLength) {\n            this.currentEventsTime = time;\n            this.currentEvents = timeEvents;\n            return true;\n        }\n\n        if (this.currentEvents) {\n            for (let index = 0; index < currentEventsLength; index++) {\n                if (this.currentEvents[index].time !== timeEvents[index].time) {\n                    this.currentEventsTime = time;\n                    this.currentEvents = timeEvents;\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /*\n    * @name - getCues\n    * @description - The set of cues that apply to the specified time.\n    * @public\n    * @param {number} time - The time to get cues for.\n    * @returns {HTMLElement[]} - The set of cues for the specified time, otherwise an empty [].\n    */\n// tslint:disable-next-line: cyclomatic-complexity\n   public getCues(time: number): HTMLElement[] {\n    let cues: HTMLElement[] = [];\n\n    if (this.currentEventsTime !== time) {\n        this.updateCurrentEvents(time);\n    }\n\n    // Find all the region elements in the TTML namespace.\n    const preserveSpace = (TtmlParser.getAttributeNS(this.root, 'space', xmlNS) === 'preserve');\n    const regions = <HTMLElement[]>(this.layout ? this.layout.getElementsByTagNameNS(this.settings.ttmlNamespace, 'region') : []);\n\n    for (const region of regions) {\n        const regionId = TtmlParser.getAttributeNS(region, 'id', xmlNS);\n        const anonymousId = region.getAttribute('data-isanonymous');\n\n        if (anonymousId || regionId) {\n            const translation = this._translate(region, this.settings.defaultRegionStyle, preserveSpace, time, this.translateToHtml);\n\n            if (translation.outerNode && translation.innerNode) {\n                const innerNode = translation.innerNode;\n                const outerNode = translation.outerNode;\n\n                // Create a new subtree for the body element, prune elements\n                // not associated with the region, and if its not empty then\n                // select it into this region by adding it to div container.\n                for (const event of this.events) {\n                    if (event.element) {\n                        if (this._isInRegion(event.element, anonymousId ? '' : regionId)) {\n                            const pruneResult = this._prune(\n                                event.element,\n                                translation.inheritableStyleSet!,\n                                preserveSpace,\n                                time,\n                                this.translateToHtml);\n                            let cueBody: Element | null = pruneResult.prunedElement;\n\n                            if ((!pruneResult.hasPreservedContent) && cueBody && (!trim(getText(cueBody)).length)) {\n                                cueBody = null;\n                            }\n\n                            if (cueBody) {\n                                innerNode.appendChild(cueBody);\n                            }\n                        }\n                    }\n                }\n\n                const showAlways = (outerNode.getAttribute('data-showBackground') === 'always');\n\n                if (showAlways || innerNode!.children.length) {\n                    if (showAlways) {\n                        // Just needed internally for the previous check, don't pass through on the cue.\n                        outerNode.removeAttribute('data-showBackground');\n                    }\n\n                    cues.push(outerNode);\n                }\n            }\n        }\n    }\n\n    // If we ended up with any displayable cues add them all to the rootContainerRegion cue.\n    if (cues.length) {\n        const rcr = this._translate(this.rootContainerRegion, { overflow: 'hidden', padding: '0' }, false, time, this.translateToHtml);\n\n        for (const cue of cues) {\n            rcr.innerNode!.appendChild(cue);\n        }\n\n        cues = [];\n        cues.push(rcr.outerNode!);\n    }\n\n    return cues;\n}\n\n    /*\n    * @name - getTemporallyActiveEvents\n    * @description - Get the list of temporally active events for the specified time.\n    * @private\n    * @param {number} time - The time to get the active events for.\n    * @returns {ITtmlEvent[]} - The set of active events for the specified time, otherwise an empty [].\n    */\n    private _getTemporallyActiveEvents(time: number): ITtmlEvent[] {\n        return this.events.filter((event) => {\n            return event.element ? this._isTemporallyActive(event.element, time) : true;\n        });\n    }\n\n    /*\n    * @name - isTemporallyActive\n    * @description - Determines whether or not the specified element is temporally active at the specified time.\n    * @private\n    * @param {HTMLElement} element - The element to check.\n    * @param {number} time - The time to check against.\n    * @returns {boolean} - True if the element is active at the specified time, otherwise false.\n    */\n    private _isTemporallyActive(element: Element, time: number): boolean {\n        return (((parseInt(element.getAttribute('data-time-start')!, 10) || 0) <= time) &&\n            (time < (parseInt(element.getAttribute('data-time-end')!, 10) || 0)));\n    }\n\n    /*\n    * @name - translate\n    * @description - Convert a ttml element into the equivalent in another format via the supplied translator function.\n    * @private\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} inheritedStyleSet - The element's inherited style set.\n    * @param {boolean} preserveSpace - Indicates whether or not space should be preserved.\n    * @param {number} time - The time to translate against. Elements and styles are temporally transient.\n    * @param {Function} translator - The translator function to use. Originally supported both xml/html but is always using html in MWF.\n    * @returns {ITtmlTranslationResult} - A ITtmlTranslationResult instance containing the translation results.\n    */\n    private _translate(\n        element: Element,\n        inheritedStyleSet: IDictionaryStringString,\n        preserveSpace: boolean,\n        time: number,\n        translator: Function): ITtmlTranslationResult {\n        let translation: ITtmlTranslationResult;\n        let computedStyleSet: IDictionaryStringString;\n\n        if (this._isTemporallyActive(element, time)) {\n            const tag = this._getTagNameEquivalent(element);\n\n            computedStyleSet = this._getComputedStyleSet(element, inheritedStyleSet, tag, time);\n\n            if (computedStyleSet.display !== 'none') {\n                const applicableStyleSet = this._getApplicableStyleSet(computedStyleSet, tag);\n\n                translation = translator(element, applicableStyleSet, preserveSpace);\n\n                return {\n                    outerNode: translation.outerNode,\n                    innerNode: translation.innerNode,\n                    inheritableStyleSet: this._getInheritableStyleSet(computedStyleSet)\n                };\n            }\n        }\n\n        return { outerNode: null, innerNode: null, inheritableStyleSet: null };\n    }\n\n/*\n* @name - translateToHtml\n* @description - Convert a ttml element into the its equivalent html element.\n* @private\n* @param {Element} element - The ttml element to translate.\n* @param {IDictionaryStringString} applicableStyleSet - The style set applicable to this element.\n* @param {boolean} preserveSpace - Indicates whether or not space should be preserved.\n* @returns {ITtmlTranslationResult} - A ITtmlTranslationResult instance containing the translation results.\n*/\n// tslint:disable-next-line: max-func-body-length\n    private translateToHtml = (\n        element: Element,\n        applicableStyleSet: IDictionaryStringString,\n        preserveSpace: boolean): ITtmlTranslationResult => {\n        let translation: HTMLElement;\n        let innerNode: HTMLElement;\n        const name = this._getTagNameEquivalent(element);\n        let htmlName = '';\n        let htmlClass = '';\n        switch (name) {\n            case 'ttml:region':\n                htmlClass = 'cue ';\n                /* falls through */\n                // break;\n            case 'ttml:rootcontainerregion':\n            case 'ttml:body':\n            case 'ttml:div':\n                htmlName = 'div';\n                break;\n            case 'ttml:p':\n                htmlName = 'p';\n                break;\n            case 'ttml:span':\n                htmlName = 'span';\n                break;\n            case 'ttml:br':\n                htmlName = 'br';\n                break;\n            default:\n        }\n\n        const role = TtmlParser.getAttributeNS(element, 'role', this.settings.ttmlMetaNamespace);\n\n        if (role) {\n            htmlClass +=  ` ${role}`;\n        }\n\n        const agent = TtmlParser.getAttributeNS(element, 'agent', this.settings.ttmlMetaNamespace);\n\n        if (agent) {\n            htmlClass += ` ${agent}`;\n        }\n\n        // Hack until display:ruby on other elements works.\n        if (role === 'x-ruby') {\n            htmlName = ('ruby');\n        } else if (role === 'x-rubybase') {\n            htmlName = ('rb');\n        } else if (role === 'x-rubytext') {\n            htmlName = ('rt');\n        }\n\n        if (!isNullOrWhiteSpace(htmlName)) {\n            translation = TtmlContext._defaultStyle(this.ownerDocument.createElement(htmlName));\n            addClass(translation, trim(htmlClass));\n\n            const title = TtmlParser.getAttributeNS(element, 'title', this.settings.ttmlMetaNamespace);\n\n            if (title) {\n                translation.setAttribute('title', title);\n            }\n\n            const id = TtmlParser.getAttributeNS(element, 'id', xmlNS);\n\n            if (id && this.settings.idPrefix) {\n                // Migrate the ttml doc id's over to the html markup.\n                // Use idPrefix to ensure there are no name clases on id's already in target doc.\n                translation.setAttribute('id', this.settings.idPrefix + id);\n            }\n\n            if (name === 'ttml:region') {\n                // To get a <region> to display properly we are actually going to need to create two nested <div>s\n                // This is because for displayAlign to work we need a table-cell <div> inside a table <div>.\n                innerNode = <HTMLElement> translation.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('div')));\n                innerNode.setAttribute('style', 'display:table; border-spacing:0; cell-spacing:0; cell-padding:0; width:100%; height:100%');\n                innerNode = <HTMLElement> innerNode.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('div')));\n                css(innerNode, 'display', 'table-cell');\n\n                // Apply the displayAlign style to inner table-cell <div>\n                if (applicableStyleSet.displayAlign) {\n                    this._translateStyle(name, innerNode, { displayAlign: applicableStyleSet.displayAlign });\n\n                    // Then remove displayAlign from the applicableStyleSet so as not to also later apply it to the outer table <div>\n                    applicableStyleSet.displayAlign = '';\n                }\n            }\n\n            // If we're preserving space add an inner <span> with 'white-space: pre'.\n            // This is how we implement preserving space in css and we need an inner\n            // span because the 'real' span will already be setting it's css white-space\n            // value to either normal or nowrap and we can't collide with that.\n            if (preserveSpace && (name === 'ttml:span')) {\n                innerNode = <HTMLElement>translation.appendChild(TtmlContext._defaultStyle(this.ownerDocument.createElement('span')));\n                css(innerNode, 'white-space', 'pre');\n            }\n\n            // Default some css properties that we don't want to inadvertantly end up\n            // inheriting values for that might cause adverse layout impacts for us.\n            css(translation, 'position', 'static');\n            css(translation, 'width', '100%');\n\n            // Copy style from element over to html, translating into CSS as we go.\n            this._translateStyle(name, translation, applicableStyleSet);\n        }\n\n        return { outerNode: translation!, innerNode: innerNode! ? innerNode! : translation! };\n    }\n\n    /*\n    * @name - translateStyle\n    * @description - Translate the ttml styles in a styleSet to their equivalent css styles and apply them to the specified html element.\n    * @private\n    * @param {string} tagName - The ttml element tagName. All styles do not apply to all tagNames.\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} applicableStyleSet - The style set applicable to this element.\n    * @returns {void}\n    */\n    private _translateStyle(tagName: string, element: HTMLElement, applicableStyleSet: IDictionaryStringString): void {\n    // tslint:disable-next-line: no-for-in\n        for (const style in applicableStyleSet) {\n            if (applicableStyleSet[style]) {\n                this._applyStyle(element, tagName, style, applicableStyleSet[style]);\n            }\n        }\n    }\n\n    /*\n    * @name - prune\n    * @description - Convert the element if it is in the region, then recurse into its contents.\n    *                If it ends up with no children then we dont add it to the region, we prune it.\n    * @private\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} inheritedStyleSet - The style set inherited by this element.\n    * @param {boolean} preserveSpace - Indicates whether or not space should be preserved.\n    * @param {number} time - The time to translate against. Elements and styles are temporally transient.\n    * @param {Function} translator - The translator function to use. Originally supported both xml/html but is always using html in MWF.\n    * @param {boolean} [ignoreAncestors = false] - Specifies whether or not to ignore the element's ancestors.\n    * @returns {ITtmlPruneResult} - A ITtmlPruneResult instance containing the prune results.\n    */\n    private _prune(\n        element: Element,\n        inheritedStyleSet: IDictionaryStringString,\n        preserveSpace: boolean,\n        time: number,\n        translator: Function,\n        ignoreAncestors: boolean = false): ITtmlPruneResult {\n        let outerNode: Element;\n        let hasPreservedContent = false;\n\n        let translation = this._translate(element, inheritedStyleSet, preserveSpace, time, translator);\n\n        if (translation.outerNode !== null) {\n            const tag = this._getTagNameEquivalent(element);\n\n            outerNode = translation.outerNode;\n            let innerNode = translation.innerNode;\n\n            for (const child of nodeListToArray<Node>(element.childNodes)) {\n                if (child.nodeType === Node.COMMENT_NODE) {\n                    // Do nothing.\n                } else if (child.nodeType === Node.TEXT_NODE) {\n                    innerNode!.appendChild(document.createTextNode((<Text>child).data));\n\n                    if (preserveSpace && (tag === 'ttml:span')) {\n                        hasPreservedContent = true;\n                    }\n                } else {\n                    let childPreserveSpace = preserveSpace;\n                    const spaceAttr = TtmlParser.getAttributeNS(<Element>child, 'space', xmlNS);\n\n                    if (spaceAttr) {\n                        childPreserveSpace = (spaceAttr === 'preserve');\n                    }\n\n                    const pruneRecord = this._prune(\n                        <Element>child,\n                        translation.inheritableStyleSet!,\n                        childPreserveSpace,\n                        time,\n                        translator,\n                        true);\n\n                    hasPreservedContent = hasPreservedContent || pruneRecord.hasPreservedContent;\n\n                    if (pruneRecord.prunedElement) {\n                        innerNode!.appendChild(pruneRecord.prunedElement);\n                    }\n                }\n            }\n\n            // Now traverse back till the body and build the corresponding structures.\n            if (!ignoreAncestors) {\n                let ancestor = <Element>element.parentNode;\n\n                while ((ancestor !== null) && (ancestor.nodeType === Node.ELEMENT_NODE) && (ancestor !== this.body)) {\n                    translation = this._translate(ancestor, inheritedStyleSet, preserveSpace, time, translator);\n                    if (translation.outerNode) {\n                        innerNode = translation.innerNode;\n                        innerNode!.appendChild(outerNode);\n                        outerNode = translation.outerNode;\n                    } else {\n                        break;\n                    }\n\n                    ancestor = <Element>ancestor.parentNode;\n                }\n            }\n        }\n\n        return { prunedElement: outerNode!, hasPreservedContent: hasPreservedContent };\n    }\n\n    /*\n    * @name - getComputedStyleSet\n    * @description - Build this element's ttml computed styleset.\n    *                This is used as the base styleSet to filter the inherited styleSet from for an element's children.\n    * @private\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} inheritedStyleSet - The styleSet inherited by this element.\n    * @param {string} tagName - The ttml element tagName. All styles do not apply to all tagNames.\n    * @param {number} time - The time to translate against. Elements and styles are temporally transient.\n    * @returns {IDictionaryStringString} - The resulting computed styleSet.\n    */\n    private _getComputedStyleSet(\n        element: Element,\n        inheritedStyleSet: IDictionaryStringString,\n        tagName: string,\n        time: number): IDictionaryStringString {\n        // Start off with a clone of the inherited styleset.\n        const computedStyleSet = extend({}, inheritedStyleSet);\n\n        // Iterate over this nodes ttml styles and pave them onto it's computed styleset.\n        extend(computedStyleSet, this.styleSetCache[parseInt(element.getAttribute('data-styleSet')!, 10)]);\n\n        // Apply any temporally active style animations.\n        const sets = element.getElementsByTagNameNS(this.settings.ttmlNamespace, 'set');\n\n        for (const set of nodeListToArray(sets)) {\n            if (this._isTemporallyActive(<Element>set, time)) {\n                TtmlParser.applyInlineStyles(this.settings, computedStyleSet, <Element>set);\n            }\n        }\n\n        if ((tagName === 'ttml:p') && (computedStyleSet.lineHeight === 'normal')) {\n            // Special case for <p>'s with tts:lineHeight='normal'\n            // This means use the largest tts:fontSize value of any\n            // of it's descendant <span>'s. Since we don't know what\n            // values those might be until translateStyle we'll just\n            // save them all and figure it out then.\n            const fontSizes = this._appendSpanFontSizes(element, this._getInheritableStyleSet(computedStyleSet), time, '');\n\n            if (fontSizes) {\n                computedStyleSet['computed-lineHeight'] = fontSizes;\n            }\n        }\n\n        return computedStyleSet;\n    }\n\n    /*\n    * @name - getApplicableStyleSet\n    * @description - Build this tags ttml applicable styleset from the specified computed styleSet to apply only to it.\n    * @private\n    * @param {IDictionaryStringString} computedStyleSet - The style set inherited by this element.\n    * @param {string} tagName - The ttml element tagName. All styles do not apply to all tagNames.\n    * @returns {IDictionaryStringString} - The resulting applicable styleSet.\n    */\n    private _getApplicableStyleSet(computedStyleSet: IDictionaryStringString, tagName: string): IDictionaryStringString {\n        const applicableStyleSet: IDictionaryStringString = {};\n\n        // Special case extent to the front of the list as later processing of\n        // padding will depend on it having already been set first.\n        if (computedStyleSet.extent && this._isStyleApplicable(tagName, 'extent')) {\n            applicableStyleSet.extent = computedStyleSet.extent;\n        }\n\n        // Special case color to the front of the list as later processing of\n        // textOutline will depend on it having already been set first.\n        if (computedStyleSet.color && this._isStyleApplicable(tagName, 'color')) {\n            applicableStyleSet.color = computedStyleSet.color;\n        }\n\n        // tslint:disable-next-line: no-for-in\n        for (const style in computedStyleSet) {\n            if (this._isStyleApplicable(tagName, style)) {\n                applicableStyleSet[style] = computedStyleSet[style];\n            }\n        }\n\n        return applicableStyleSet;\n    }\n\n    /*\n    * @name - isStyleApplicable\n    * @description - Determines if the specified style applies to the specified ttml tagName.\n    *                NOTE: The ttml spec doesn't mention ttml:br in the styles 'applies to' sections but\n    *                as noted in the span section everything that applies to ttml:span also applies to ttml:br\n    * @private\n    * @param {string} tagName - The ttml element tagName. All styles do not apply to all tagNames.\n    * @param {string} style - The style to check against the tagName.\n    * @returns {boolean} - True if the ttml:style applies to the ttml:tag, otherwise false.\n    */\n    private _isStyleApplicable(tagName: string, style: string): boolean {\n        switch (style) {\n            case 'backgroundColor':\n            case 'display':\n            case 'visibility':\n                return (('ttml:body ttml:div ttml:p ttml:region ttml:rootcontainerregion ttml:span ttml:br').indexOf(tagName) >= 0);\n\n            // Technically these font styles do not apply to <p>s but for some reason the resulting html/css\n            // for span/br doesnt compute line-height correctly if the entire containing <p> (div) isn't all the same...\n            case 'fontFamily':\n            case 'fontSize':\n            case 'fontStyle':\n            case 'fontWeight':\n                return ('ttml:p ttml:span ttml:br'.indexOf(tagName) >= 0);\n\n            case 'color':\n            case 'textDecoration':\n            case 'textOutline':\n            case 'wrapOption':\n                return ('ttml:span ttml:br'.indexOf(tagName) >= 0);\n\n            case 'direction':\n            case 'unicodeBidi':\n                return ('ttml:p ttml:span ttml:br'.indexOf(tagName) >= 0);\n\n            case 'displayAlign':\n            case 'opacity':\n            case 'origin':\n            case 'overflow':\n            case 'padding':\n            case 'showBackground':\n            case 'writingMode':\n            case 'zIndex':\n                return ('ttml:region ttml:rootcontainerregion'.indexOf(tagName) >= 0);\n\n            case 'extent':\n                return ('ttml:tt ttml:region ttml:rootcontainerregion'.indexOf(tagName) >= 0);\n\n            case 'computed-lineHeight':\n            case 'lineHeight':\n            case 'textAlign':\n                return ('ttml:p'.indexOf(tagName) >= 0);\n\n            default: return false;\n        }\n    }\n\n    /*\n    * @name - getInheritableStyleSet\n    * @description - Filters a computed styleSet into an inheritable styleSet subset to pass on to children.\n    *                Not all styles are inheritable.\n    * @private\n    * @param {IDictionaryStringString} computedStyleSet - The computed styleSet to filter.\n    * @returns {IDictionaryStringString} - The resulting inheritable styleSet.\n    */\n    private _getInheritableStyleSet(computedStyleSet: IDictionaryStringString): IDictionaryStringString {\n        const inheritedStyleSet: IDictionaryStringString = {};\n\n        // tslint:disable-next-line: no-for-in\n        for (const style in computedStyleSet) {\n            if (computedStyleSet.hasOwnProperty(style)) {\n                switch (style) {\n                    case 'backgroundColor':\n                    case 'computed-lineHeight':\n                    case 'display':\n                    case 'displayAlign':\n                    case 'extent':\n                    case 'opacity':\n                    case 'origin':\n                    case 'overflow':\n                    case 'padding':\n                    case 'showBackground':\n                    case 'unicodeBidi':\n                    case 'writingMode':\n                    case 'zIndex':\n                        break;\n                    default:\n                        inheritedStyleSet[style] = computedStyleSet[style];\n                }\n            }\n        }\n\n        return inheritedStyleSet;\n    }\n\n    /*\n    * @name - appendSpanFontSizes\n    * @description - Recurses through an element and it's descendants finding the font sizess of all it's <span>'s.\n    * @private\n    * @param {Element} element - The ttml element to translate.\n    * @param {IDictionaryStringString} inheritedStyleSet - The element's inherited styleSet.\n    * @param {number} time - The time to translate against. Elements and styles are temporally transient.\n    * @param {string} value - The list of font sizes to append to.\n    * @returns {string} - The value with any additional font sizes appended to it.\n    */\n    private _appendSpanFontSizes(element: Element, inheritedStyleSet: IDictionaryStringString, time: number, value: string): string {\n        for (const child of nodeListToArray<Element>(element.childNodes)) {\n            if ((child.nodeType === Node.ELEMENT_NODE)) {\n                const tag = this._getTagNameEquivalent(child);\n\n                if (tag === 'ttml:span') {\n                    const computedStyleSet = this._getComputedStyleSet(child, inheritedStyleSet, 'ttml:span', time);\n                    const fontSize = computedStyleSet.fontSize;\n\n                    if (fontSize) {\n                        value += ((value) ? ',' : '') + fontSize;\n                    }\n\n                    value = this._appendSpanFontSizes(child, this._getInheritableStyleSet(computedStyleSet), time, value);\n                }\n            }\n        }\n\n        return value;\n    }\n\n    /*\n    * @name - isInRegion\n    * @description - Determines whether or not the specified element is associated with the specified region.\n    *                Ttml defines 5 ordered rules, where the first rule satisfied is used and remaining rules are skipped.\n    * @private\n    * @param {Element} element - The ttml element to check.\n    * @param {string} regionId - The id of the region to see if the element is associated with.\n    * @returns {boolean} - True if the specified element is within the specified region, otherwise false.\n    */\n    private _isInRegion(element: Element, regionId: string): boolean {\n\n        // Quick test: Out of normal order, but makes following rules simpler.\n        // This is a shortcut to check step #4 first\n        if (!regionId) {\n            return true;\n        }\n\n        const elemRegion = TtmlParser.getAttributeNS(element, 'region', this.settings.ttmlNamespace);\n\n        // 1. If the element specifies a region attribute, then the element is\n        // associated with the region referenced by that attribute;\n        if (elemRegion === regionId) {\n            return true;\n        }\n\n        if (!elemRegion) {\n            // 2. If some ancestor of that element specifies a region attribute, then the element is\n            // associated with the region referenced by the most immediate ancestor that specifies\n            // this attribute;\n            let ancestor = <Element>element.parentNode;\n\n            while ((ancestor !== null) && (ancestor.nodeType === Node.ELEMENT_NODE)) {\n                const id = this._getRegionId(ancestor);\n                if (id) {\n                    return id === regionId;\n                }\n                ancestor = <Element>ancestor.parentNode;\n            }\n\n            // 3. If the element contains a descendant element that specifies a region attribute,\n            // then the element is associated with the region referenced by that attribute;\n            for (const node of nodeListToArray(element.getElementsByTagName('*'))) {\n                if (this._getRegionId(<Element>node) === regionId) {\n                    return true;\n                }\n            }\n        }\n\n        // 5. The element is not associated with any region.\n        return false;\n    }\n\n    /*\n    * @name - getRegionId\n    * @description - Gets the region id for the specified element.\n    * @private\n    * @param {Element} element - The ttml element to check.\n    * @returns {string} - The id of the region the element is associated with.\n    */\n    private _getRegionId(element: Element): string {\n        let regionId: string;\n\n        if ((element.nodeType === Node.ELEMENT_NODE) && (element.namespaceURI === this.settings.ttmlNamespace)) {\n            if (TtmlParser.getLocalTagName(element) === 'region') {\n                regionId = TtmlParser.getAttributeNS(element, 'id', xmlNS);\n            } else {\n                regionId = TtmlParser.getAttributeNS(element, 'region', this.settings.ttmlNamespace);\n            }\n        }\n\n        return regionId!;\n    }\n\n    /*\n    * @name - getTagNameEquivalent\n    * @description - Gets the tagName of the element with the current ttml namespace prepended if non-standard.\n    * @private\n    * @param {Element} element - The ttml element to get the tagName of.\n    * @returns {string} - The tagName or '' if the namespace isn't one of the ttml ones.\n    */\n    private _getTagNameEquivalent(element: Element): string {\n        const tagName = TtmlParser.getLocalTagName(element);\n        const nameSpace = element.namespaceURI;\n\n        if (nameSpace === this.settings.ttmlNamespace) {\n            return `ttml:${tagName}`;\n        }\n\n        // tslint:disable-next-line: no-http-string\n        if (nameSpace === 'http://www.w3.org/1999/xhtml') {\n            return tagName;\n        }\n\n        return '';\n    }\n\n    /*\n    * @name - _applyStyle\n    * @description - Translates the ttml style/value into one or more css styles/values and applies them to the element.\n    * @private\n    * @param {HTMLElement} element - The ttml element to apply the css style(s) too.\n    * @param {string} tagName - The ttml tagName associated with the element.\n    * @param {string} style - The ttml style name.\n    * @param {string} value - The ttml style value.\n    * @returns {void}\n    */\n    // tslint:disable-next-line: max-func-body-length tslint:disable-next-line: cyclomatic-complexity\n    private _applyStyle(element: HTMLElement, tagName: string, style: string, value: string): void {\n        let mappedValue = value;\n\n        switch (style) {\n            case 'color':\n            case 'backgroundColor': {\n                mappedValue = TtmlContext._ttmlToCssColor(value);\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'direction':\n            case 'display': {\n                // No change.\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'displayAlign': {\n                // tslint:disable-next-line: switch-default\n                switch (value) {\n                    case 'before':\n                        mappedValue = 'top';\n                        break;\n                    case 'center':\n                        mappedValue = 'middle';\n                        break;\n                    case 'after':\n                        mappedValue = 'bottom';\n                }\n\n                css(element, 'vertical-align', mappedValue);\n                return;\n            }\n\n            case 'extent': {\n                let width: string;\n                let height: string;\n\n                if (value !== 'auto') {\n                    // Get the individual components.\n                    const coords = (value.split(/\\s+/));\n\n                    if (coords.length === 2) {\n                        width = this._ttmlToCssUnits(coords[0], true);\n                        height = this._ttmlToCssUnits(coords[1], false);\n                    }\n                }\n\n                if (!width!) {\n                    width = `${(this.settings.rootContainerRegionDimensions\n                        ? this.settings.rootContainerRegionDimensions.width\n                        : this.settings.relatedMediaObjectRegion!.width).toString()}px`;\n                    height = `${(this.settings.rootContainerRegionDimensions\n                        ? this.settings.rootContainerRegionDimensions.height\n                        : this.settings.relatedMediaObjectRegion!.height).toString()}px`;\n                }\n\n                css(element, 'position', 'absolute');\n                css(element, 'width', width!);\n                css(element, 'min-width', width!);\n                css(element, 'max-width', width!);\n                css(element, 'height', height!);\n                css(element, 'min-height', height!);\n                css(element, 'max-height', height!);\n                return;\n            }\n\n            case 'fontFamily': {\n                if (this.settings.fontMap && this.settings.fontMap[value]) {\n                    mappedValue = this.settings.fontMap[value];\n                }\n\n                if (value === 'smallCaps') {\n                    // Need to additionally add font-variant: small-caps.\n                    css(element, 'fontVariant', 'small-caps');\n                }\n\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'fontSize': {\n                const parts = value.split(/\\s+/);\n\n                // For two part fontSize values we use the vertical size which is in the second part.\n                const size = (parts.length > 1) ? parts[1] : parts[0];\n\n                // Set the fontsize scaleFactor to 75% (of cell size) to account for ascenders/descenders etc.\n                mappedValue = this._ttmlToCssFontSize(size, false, 0.75, tagName === 'ttml:region');\n\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'fontStyle':\n            case 'fontWeight': {\n                // No change.\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'lineHeight': {\n                // Spec doesn't qualify what % lengths mean so I'm going to assume it's % of a\n                // cell and therefore use fontSize conversion method.\n                mappedValue = (value === 'normal') ? value : this._ttmlToCssFontSize(value, false);\n\n                css(element, 'line-height', mappedValue);\n                return;\n            }\n\n            case 'computed-lineHeight': {\n                const values = value.split(',');\n                let max = -1;\n\n                for (const fontSize of values) {\n                    // Computed-lineHeight is based off of fontSize so use fontSize conversion method.\n                    mappedValue = this._ttmlToCssFontSize(fontSize, false);\n\n                    if (mappedValue && (mappedValue.indexOf('px') === mappedValue.length - 2)) {\n                        const height = parseFloat(mappedValue.substr(0, mappedValue.length - 2));\n\n                        if (!isNaN(height) && (height > max)) {\n                            max = height;\n                        }\n                    }\n                }\n\n                if (max >= 0) {\n                    css(element, 'line-height', `${max}px`);\n                }\n\n                return;\n            }\n\n            case 'origin': {\n                if (value !== 'auto') {\n                    // Get the individual components.\n                    const coords = (value.split(/\\s+/));\n\n                    if (coords.length === 2) {\n                        css(element, 'position', 'absolute');\n                        css(element, 'left', this._ttmlToCssUnits(coords[0], true));\n                        css(element, 'top', this._ttmlToCssUnits(coords[1], false));\n                    }\n                }\n\n                return;\n            }\n\n            case 'opacity': {\n                // No change.\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'padding': {\n                const contextRect = getDimensions(element);\n\n                // Get the individual components.\n                const parts = (value.split(/\\s+/));\n                let first: string;\n                let second: string;\n                let third: string;\n                let forth: string;\n\n                // tslint:disable-next-line: switch-default\n                switch (parts.length) {\n                    case 1:\n                        // Value is used for all 4 sides.\n                        first = this._ttmlToCssUnits(parts[0], false, contextRect!);\n                        second = this._ttmlToCssUnits(parts[0], true, contextRect!);\n                        mappedValue = format('{0} {1} {0} {1}', first, second);\n                        break;\n                    case 2:\n                        // First is top/bottom, second is left/right.\n                        first = this._ttmlToCssUnits(parts[0], false, contextRect!);\n                        second = this._ttmlToCssUnits(parts[1], true, contextRect!);\n                        mappedValue = format('{0} {1} {0} {1}', first, second);\n                        break;\n                    case 3:\n                        // First is top, second is left/right, third is bottom.\n                        first = this._ttmlToCssUnits(parts[0], false, contextRect!);\n                        second = this._ttmlToCssUnits(parts[1], true, contextRect!);\n                        third = this._ttmlToCssUnits(parts[2], false, contextRect!);\n                        mappedValue = format('{0} {1} {2} {1}', first, second, third);\n                        break;\n                    case 4:\n                        // Top, right, bottom, left.\n                        first = this._ttmlToCssUnits(parts[0], false, contextRect!);\n                        second = this._ttmlToCssUnits(parts[1], true, contextRect!);\n                        third = this._ttmlToCssUnits(parts[2], false, contextRect!);\n                        forth = this._ttmlToCssUnits(parts[3], true, contextRect!);\n                        mappedValue = format('{0} {1} {2} {3}', first, second, third, forth);\n                }\n\n                // Using border width to implement tts:padding as neither padding nor margin fix the size (height) of the content area.\n                css(element, 'box-sizing', 'border-box');\n                // TODO: See if we work in FF without the following commented out -moz-box-sizing line now and if so remove it.\n                ////// css(element, '-moz-box-sizing', 'border-box');\n                css(element, 'border-style', 'solid');\n                css(element, 'border-color', 'transparent');\n                // It can be helpful when debugging to change the border-color from transparent to something like rgba(255,255,200,0.5)\n                // css(element, 'border-color', 'rgba(255,255,200,0.5)');\n                css(element, 'border-width', mappedValue);\n                return;\n            }\n\n            // If you know what this was for please document it here and uncomment it.\n            // As of now the caller appeared to be doing nothing with it so commenting it out.\n            ////// case 'showBackground': {\n            ////// return this.getAttribute('data-showBackground', value);\n            ////// }\n\n            case 'textAlign': {\n                // tslint:disable-next-line: switch-default\n                switch (value) {\n                    case 'start':\n                        mappedValue = 'left';   // TODO: handle rtl correctly.\n                        break;\n                    case 'end':\n                        mappedValue = 'right';  // TODO: handle rtl correctly.\n                }\n\n                css(element, 'text-align', mappedValue);\n                return;\n            }\n\n            case 'textDecoration': {\n                mappedValue = TtmlContext._ttmlToCssTextDecoration(value);\n                css(element, 'text-decoration', mappedValue);\n                return;\n            }\n\n            case 'textOutline': {\n                const defaultColor = css(element, 'color');\n                css(element, 'text-shadow', this._ttmlToCssTextOutline(mappedValue, defaultColor));\n                return;\n            }\n\n            case 'unicodeBidi': {\n                // TODO: Handle multiple options correctly.\n                // tslint:disable-next-line: switch-default\n                switch (value) {\n                    case 'bidiOverride':\n                        mappedValue = 'bidi-override';\n                }\n                css(element, 'unicode-bidi', mappedValue);\n                return;\n            }\n\n            case 'visibility': {\n                // No change.\n                css(element, style, mappedValue);\n                return;\n            }\n\n            case 'writingMode': {\n                // tslint:disable-next-line: switch-default\n                switch (value) {\n                    case 'lr':\n                    case 'lrtb': {\n                        css(element, 'writing-mode', 'horizontal-tb');          // CCS3 standard: Doesn't work yet\n                        css(element, '-webkit-writing-mode', 'horizontal-tb');  // webkit for Chrome\n                        css(element, 'writing-mode', 'lr-tb');                  // IE specific\n                        return;\n                    }\n                    case 'rl':\n                    case 'rltb': {\n                        css(element, 'writing-mode', 'horizontal-tb');          // CCS3 standard: Doesn't work yet\n                        css(element, '-webkit-writing-mode', 'horizontal-tb');  // webkit for Chrome\n                        css(element, 'writing-mode', 'rl-tb');                  // IE specific\n                        return;\n                    }\n                    case 'tblr': {\n                        css(element, 'text-orientation', 'upright');            // CCS3 standard: Doesn't work yet\n                        css(element, 'writing-mode', 'vertical-lr');            // CCS3 standard: Doesn't work yet\n                        css(element, '-webkit-text-orientation', 'upright');    // webkit for Chrome\n                        css(element, '-webkit-writing-mode', 'vertical-lr');    // webkit for Chrome\n                        css(element, 'writing-mode', 'tb-lr');                  // IE specific\n                        return;\n                    }\n                    case 'tb':\n                    case 'tbrl': {\n                        css(element, 'text-orientation', 'upright');            // CCS3 standard: Doesn't work yet\n                        css(element, 'writing-mode', 'vertical-rl');            // CCS3 standard: Doesn't work yet\n                        css(element, '-webkit-text-orientation', 'upright');    // webkit for Chrome\n                        css(element, '-webkit-writing-mode', 'vertical-rl');    // webkit for Chrome\n                        css(element, 'writing-mode', 'tb-rl');                  // IE specific\n                        return;\n                    }\n                }\n                return;\n            }\n\n            case 'wrapOption': {\n                css(element, 'white-space', value === 'noWrap' ? 'nowrap' : (value === 'pre' ? 'pre' : 'normal'));\n                return;\n            }\n\n            case 'zIndex': {\n                css(element, style, mappedValue);   // Requires global information...\n                return;\n            }\n\n            default: {\n                css(element, style, mappedValue);\n                return;\n            }\n        }\n    }\n\n    /*\n    * @name - ttmlToCssUnits\n    * @description - Converts a ttml unit string to a css one.\n    * @private\n    * @param {string} ttmlUnits - The ttml value.\n    * @param {boolean} width - Indicates whether to perform a width based or a height based conversion.\n    * @param {IClientDimension} [contextRect] - The context rectangle to use for conversion.\n    * @returns {string} - The css value.\n    */\n    private _ttmlToCssUnits(ttmlUnits: string, width: boolean, contextRect?: IClientDimension): string {\n        let cssUnits = ttmlUnits;\n\n        if (ttmlUnits) {\n            const unit = ttmlUnits.charAt(ttmlUnits.length - 1);\n\n            // Need to special case handle ttml cell metrics.\n            if ((unit === 'c') || (unit === '%')) {\n                const container = this.settings.rootContainerRegionDimensions\n                    ? this.settings.rootContainerRegionDimensions\n                    : this.settings.relatedMediaObjectRegion;\n                const length = parseFloat(ttmlUnits.substr(0, ttmlUnits.length - 1));\n                let containerSize = width ? container!.width : container!.height;\n                let value: number;\n\n                if (unit === 'c') {\n                    const gridSize = width ? this.settings.cellResolution.columns : this.settings.cellResolution.rows;\n\n                    value = length * containerSize / gridSize;\n                } else if (unit === '%') {\n                    // If % units calls also specify a contextRect use that instead of the container.\n                    if (contextRect) {\n                        containerSize = width ? contextRect.width : contextRect.height;\n                    }\n\n                    // Have to convert % to px because padding and vertical-align (displayAlign) are not\n                    // working together if the extent width/height are % instead of px.\n                    value = containerSize * length / 100;\n                }\n\n                // Round to 1 decimal place\n                value = Math.round(value! * 10) / 10;\n                cssUnits = `${value}px`;\n            }\n        }\n\n        return cssUnits;\n    }\n\n    /*\n    * @name - ttmlToCssFontSize\n    * @description - Converts a ttml font size to a css one.\n    * @private\n    * @param {string} ttmlUnits - The ttml value.\n    * @param {boolean} width - Indicates whether to perform a width based or a height based conversion.\n    * @param {number} [scaleFactor = 1] - The scale factor to use for conversion.\n    * @param {boolean} [isRegion = false] - Indicates whether or not the conversion is being done for a <region>.\n    * @returns {string} - The css value.\n    */\n    private _ttmlToCssFontSize(ttmlUnits: string, width: boolean, scaleFactor: number = 1, isRegion: boolean = false): string {\n        let cssUnits = ttmlUnits;\n\n        if (ttmlUnits) {\n            const unit = ttmlUnits.charAt(ttmlUnits.length - 1);\n\n            // Need to special case handle ttml cell metrics and % units.\n            if ((unit === 'c') || (isRegion && (unit === '%'))) {\n                const container = this.settings.rootContainerRegionDimensions\n                    ? this.settings.rootContainerRegionDimensions\n                    : this.settings.relatedMediaObjectRegion;\n                const length = parseFloat(ttmlUnits.substr(0, ttmlUnits.length - 1));\n                const containerSize = width ? container!.width : container!.height;\n                const gridSize = width ? this.settings.cellResolution.columns : this.settings.cellResolution.rows;\n                let value = length * containerSize / gridSize;\n\n                if (unit === '%') {\n                    // Length is % so divide by 100.\n                    value /= 100;\n                }\n\n                // Apply the scale factor and limit to one decimal place precision.\n                value = Math.floor(value * scaleFactor * 10) / 10;\n\n                cssUnits = `${value}px`;\n            }\n        }\n\n        return cssUnits;\n    }\n\n    /*\n    * @name - ttmlToCssTextOutline\n    * @description - Converts a ttml text outline style value to a css one.\n    * @private\n    * @param {string} textOutline - The ttml value.\n    * @param {string} defaultColor - default value of the outline color.\n    * @returns {string} - The css value.\n    */\n    private _ttmlToCssTextOutline(textOutline: string, defaultColor: string): string {\n        let textShadow = 'none';\n\n        if (!isNullOrWhiteSpace(textOutline) && (textOutline !== 'none')) {\n            let parts: string[] = textOutline.split(/\\s+/);\n            let color: string = '';\n            let thickness: string = '';\n            let blur: string = '';\n\n            if (parts.length === 1) {\n                color = defaultColor;\n                thickness = parts[0];\n                blur = '';\n            } else if (parts.length === 3) {\n                color = parts[0];\n                thickness = parts[1];\n                blur = parts[2];\n            } else if (parts.length === 2) {\n                const firstChar = parts[0].charAt(0);\n\n                if ((firstChar >= '0') && (firstChar <= '9')) {\n                    color = defaultColor;\n                    thickness = parts[0];\n                    blur = parts[1];\n                } else {\n                    color = parts[0];\n                    thickness = parts[1];\n                    blur = '';\n                }\n            }\n\n            // Spec doesn't qualify what % lengths mean so I'm going to assume it's % of a cell\n            // and therefore use fontSize conversion method with the same scaleFactor applied\n            // to fontSize since it's the font that we're outlining here.\n            blur = this._ttmlToCssFontSize(blur, false, 0.75);\n            thickness = this._ttmlToCssFontSize(thickness, false, 0.75);\n\n            parts = <string[]>TtmlContext.lengthRegEx.exec(thickness);\n\n            if (parts && (parts.length === 3)) {\n                const width = Math.round(parseFloat(parts[1]));\n                const units = parts[2];\n\n                textShadow = '';\n\n                for (let x = -width; x <= width; x++) {\n                    for (let y = -width; y <= width; y++) {\n                        if ((x !== 0) || (y !== 0)) {\n                            textShadow += format('{0}{4} {1}{4} {2} {3}, ', x, y, blur, TtmlContext._ttmlToCssColor(color), units);\n                        }\n                    }\n                }\n\n                if (textShadow) {\n                    textShadow = textShadow.substr(0, textShadow.length - 2);\n                }\n            }\n        }\n\n        return textShadow;\n    }\n}"]}