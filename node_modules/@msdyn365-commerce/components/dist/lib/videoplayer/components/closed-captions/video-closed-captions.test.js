import { mount } from 'enzyme';
import * as React from 'react';
import { PlayerUtility } from './../utilities/player-utility';
import ClosedCaptions from './video-closed-captions';
import { closedCaptionsSettingDefaults } from './video-closed-captions-settings';
describe('Check closedCaptions loaded or not', () => {
    it('closedCaptions componentDidMount to not throw an error', () => {
        const mockErrorFunction = jest.fn();
        const closedCaptionClickFunction = jest.fn();
        const closedCaptonsSetting = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };
        const prevsProps = {
            className: 'closedCaption',
            currentTime: 10,
            currentClosedCaptionsSettings: closedCaptonsSetting,
            showClosedCaptions: true,
            ccLanguage: 'off',
            ccURL: '',
            errorCallback: mockErrorFunction,
            isVideoControlVisible: true,
            onClosedCaptionClick: closedCaptionClickFunction
        };
        const wrapper = mount(React.createElement(ClosedCaptions, { className: 'closedCaption', currentTime: 10, currentClosedCaptionsSettings: closedCaptonsSetting, showClosedCaptions: true, ccLanguage: 'en-us', ccURL: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-enus?ver=d9e5', errorCallback: mockErrorFunction, isVideoControlVisible: true, onClosedCaptionClick: closedCaptionClickFunction }), { attachTo: document.body.firstElementChild });
        const closedCaptions = wrapper.instance();
        expect(() => { closedCaptions; }).not.toThrow();
        expect(() => { closedCaptions.componentDidMount(); }).not.toThrow();
        expect(() => { closedCaptions.componentWillUnmount(); }).not.toThrow();
        expect(() => { closedCaptions.componentDidUpdate(prevsProps); }).not.toThrow();
        wrapper.unmount();
    });
    it('closedCaptions componentDidMount to not throw an error if ccLanguage is off', () => {
        const mockErrorFunction = jest.fn();
        const closedCaptionClickFunction = jest.fn();
        const closedCaptonsSetting = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };
        const prevsProps = {
            className: 'closedCaption',
            currentTime: 10,
            currentClosedCaptionsSettings: closedCaptonsSetting,
            showClosedCaptions: true,
            ccLanguage: 'off',
            ccURL: '',
            errorCallback: mockErrorFunction,
            isVideoControlVisible: true,
            onClosedCaptionClick: closedCaptionClickFunction
        };
        const wrapper = mount(React.createElement(ClosedCaptions, { className: 'closedCaption', currentTime: 10, currentClosedCaptionsSettings: closedCaptonsSetting, showClosedCaptions: true, ccLanguage: 'off', ccURL: '', errorCallback: mockErrorFunction, isVideoControlVisible: true, onClosedCaptionClick: closedCaptionClickFunction }), { attachTo: document.body.firstElementChild });
        const closedCaptions = wrapper.instance();
        expect(() => { closedCaptions; }).not.toThrow();
        expect(() => { closedCaptions.componentDidMount(); }).not.toThrow();
        expect(() => { closedCaptions.componentWillUnmount(); }).not.toThrow();
        expect(() => { closedCaptions.componentDidUpdate(prevsProps); }).not.toThrow();
        wrapper.unmount();
    });
    it('closedCaptions componentDidMount to not throw an error', (done) => {
        const mockErrorFunction = jest.fn();
        const closedCaptionClickFunction = jest.fn();
        const closedCaptonsSetting = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };
        const prevsProps = {
            className: 'closedCaption',
            currentTime: 10,
            currentClosedCaptionsSettings: closedCaptonsSetting,
            showClosedCaptions: true,
            ccLanguage: 'off',
            ccURL: '',
            errorCallback: mockErrorFunction,
            isVideoControlVisible: true,
            onClosedCaptionClick: closedCaptionClickFunction
        };
        const expectedXML = `<?xml version="1.0" encoding="utf-8"?><tt xml:lang="en-us" xmlns="http://www.w3.org/2006/10/ttaf1"><head><metadata><ttm:title xmlns:ttm='http://www.w3.org/2006/10/ttaf1#metadata' /><ttm:desc xmlns:ttm='http://www.w3.org/2006/10/ttaf1#metadata' /><ttm:copyright xmlns:ttm='http://www.w3.org/2006/10/ttaf1#metadata' /></metadata><styling><style xml:id='backgroundStyle' ttaf1:fontFamily='proportionalSansSerif' ttaf1:fontSize='22px' ttaf1:textAlign='center' ttaf1:origin='2.5% 80.0%' ttaf1:extent='95% 20%' ttaf1:backgroundColor='rgba(0,0,0,100)' ttaf1:displayAlign='center' xmlns:ttaf1='http://www.w3.org/2006/10/ttaf1#styling' /><ttaf1:style xml:id='captionAreaStyle' ttaf1:style='backgroundStyle' ttaf1Styling:color='rgba(255,255,255,255)' ttaf1Styling:backgroundColor='transparent' xmlns:ttaf1Styling='http://www.w3.org/2006/10/ttaf1#styling' xmlns:ttaf1='http://www.w3.org/2006/10/ttaf1' /></styling><layout><ttaf1:region xml:id='captionArea' ttaf1:style='captionAreaStyle' ttaf1Styling:zIndex='1' xmlns:ttaf1Styling='http://www.w3.org/2006/10/ttaf1#styling' xmlns:ttaf1='http://www.w3.org/2006/10/ttaf1' /><ttaf1:region xml:id='background' ttaf1:style='backgroundStyle' ttaf1Styling:zIndex='0' xmlns:ttaf1Styling='http://www.w3.org/2006/10/ttaf1#styling' xmlns:ttaf1='http://www.w3.org/2006/10/ttaf1' /></layout></head><body><div><p begin="00:00:00.030" end="00:00:02.270" region="captionArea">German - This is sample closed caption - 1</p><p begin="00:00:02.270" end="00:00:04.000" region="captionArea">German - This is sample closed caption - 2</p><p begin="00:00:04.000" end="00:00:06.000" region="captionArea">German - This is sample closed caption - 3</p><p begin="00:00:06.000" end="00:00:08.000" region="captionArea">German - This is sample closed caption - 4</p><p begin="00:00:08.000" end="00:00:10.000" region="captionArea">German - This is sample closed caption - 5</p><p begin="00:00:10.000" end="00:00:12.000" region="captionArea">German - This is sample closed caption - 6</p><p begin="00:00:14.030" end="00:00:16.270" region="captionArea">German - This is sample closed caption - 7</p><p begin="00:00:16.270" end="00:00:18.000" region="captionArea">German - This is sample closed caption - 8</p><p begin="00:00:18.000" end="00:00:20.000" region="captionArea">German - This is sample closed caption - 9</p><p begin="00:00:20.000" end="00:00:22.000" region="captionArea">German - This is sample closed caption - 10</p><p begin="00:00:22.000" end="00:00:24.000" region="captionArea">German - This is sample closed caption - 11</p><p begin="00:00:24.000" end="00:00:26.000" region="captionArea">German - This is sample closed caption - 12</p><p begin="00:00:26.030" end="00:00:28.270" region="captionArea">German - This is sample closed caption - 13</p><p begin="00:00:28.270" end="00:00:30.000" region="captionArea">German - This is sample closed caption - 14</p><p begin="00:00:30.000" end="00:00:32.000" region="captionArea">German - This is sample closed caption - 15</p><p begin="00:00:32.000" end="00:00:34.000" region="captionArea">German - This is sample closed caption - 16</p><p begin="00:00:34.000" end="00:00:36.000" region="captionArea">German - This is sample closed caption - 17</p><p begin="00:00:36.000" end="00:00:38.000" region="captionArea">German - This is sample closed caption - 18</p><p begin="00:00:40.030" end="00:00:45.270" region="captionArea">German - This is sample closed caption - 19</p><p begin="00:00:45.270" end="00:00:50.000" region="captionArea">German - This is sample closed caption - 20</p><p begin="00:00:55.000" end="00:01:00.000" region="captionArea">German - This is sample closed caption - 21</p><p begin="00:01:00.000" end="00:01:05.000" region="captionArea">German - This is sample closed caption - 22</p><p begin="00:01:05.000" end="00:01:10.000" region="captionArea">German - This is sample closed caption - 23</p><p begin="00:01:10.000" end="00:01:15.000" region="captionArea">German - This is sample closed caption - 24</p><p begin="00:01:15.000" end="00:01:18.000" region="captionArea">German - End of Video</p></div></body></tt>`;
        const mockajax = jest.fn((_href, callback) => {
            callback(expectedXML);
            done();
        });
        PlayerUtility.ajax = mockajax.bind(PlayerUtility);
        const wrapper = mount(React.createElement(ClosedCaptions, { className: 'closedCaption', currentTime: 10, currentClosedCaptionsSettings: closedCaptonsSetting, showClosedCaptions: true, ccLanguage: 'en-us', ccURL: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/videofiledata/MAfjDu-enus?ver=d9e5', errorCallback: mockErrorFunction, isVideoControlVisible: true, onClosedCaptionClick: closedCaptionClickFunction }), { attachTo: document.body.firstElementChild });
        const closedCaptions = wrapper.instance();
        closedCaptions.applySettings();
        closedCaptions.resetCaptions();
        closedCaptions.updateCaptions(1000);
        expect(() => { closedCaptions.componentDidUpdate(prevsProps); }).not.toThrow();
        closedCaptions.applySettings();
        closedCaptions.resetCaptions();
        closedCaptions.updateCaptions(21.26);
        expect(() => { closedCaptions; }).not.toThrow();
        expect(() => { closedCaptions.componentDidUpdate(prevsProps); }).not.toThrow();
        wrapper.unmount();
    });
});
//# sourceMappingURL=video-closed-captions.test.js.map