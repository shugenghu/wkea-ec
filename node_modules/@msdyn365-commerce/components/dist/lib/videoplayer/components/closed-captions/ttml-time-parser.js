export class TtmlTimeParser {
    constructor(_mediaFrameRate, _mediaTickRate) {
        this.mediaFrameRate = _mediaFrameRate;
        this.mediaTickRate = _mediaTickRate;
    }
    parse(ttmlTime) {
        if (!ttmlTime) {
            return 0;
        }
        const absoluteTime = TtmlTimeParser.absoluteTimeRegex.exec(ttmlTime);
        if (absoluteTime && (absoluteTime.length > 3)) {
            const hours = parseInt(absoluteTime[1], 10) * 60 * 60;
            const minutes = parseInt(absoluteTime[2], 10) * 60;
            const seconds = parseInt(absoluteTime[3], 10);
            let subseconds = 0;
            if (absoluteTime[5]) {
                subseconds = parseFloat(absoluteTime[4]) * 1000;
            }
            if (absoluteTime[6]) {
                subseconds = Math.round(parseFloat(absoluteTime[6]) * this._getTimeUnitMultiplier('f'));
            }
            return ((hours + minutes + seconds) * 1000) + subseconds;
        }
        const relativeTime = TtmlTimeParser.relativeTimeRegex.exec(ttmlTime);
        if (relativeTime && (relativeTime.length > 3)) {
            return Math.round(parseFloat(relativeTime[1]) * this._getTimeUnitMultiplier(relativeTime[3]));
        }
        return 0;
    }
    _getTimeUnitMultiplier(timeUnit) {
        switch (timeUnit) {
            case 'h':
                return 1000 * 60 * 60;
            case 'ms':
                return 1;
            case 'm':
                return 1000 * 60;
            case 's':
                return 1000;
            case 'f':
                return 1000 / this.mediaFrameRate;
            case 't':
                return 1000 / this.mediaTickRate;
            default:
                return 0;
        }
    }
}
TtmlTimeParser.absoluteTimeRegex = /^(\d{1,}):(\d{2}):(\d{2})((\.\d{1,})|:(\d{2,}(\.\d{1,})?))?$/;
TtmlTimeParser.relativeTimeRegex = /^(\d+(\.\d+)?)(ms|[hmsft])$/;
//# sourceMappingURL=ttml-time-parser.js.map