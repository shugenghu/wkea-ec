{"version":3,"file":"ttml-time-parser.js","sourceRoot":"./src/","sources":["videoplayer/components/closed-captions/ttml-time-parser.ts"],"names":[],"mappings":"AAQA,MAAM,OAAO,cAAc;IA8CvB,YAAY,eAAuB,EAAE,cAAsB;QACvD,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;QACtC,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC;IACxC,CAAC;IASM,KAAK,CAAC,QAAgB;QACzB,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,CAAC,CAAC;SACZ;QAED,MAAM,YAAY,GAAG,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAErE,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YAC3C,MAAM,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;YACtD,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;YACnD,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9C,IAAI,UAAU,GAAG,CAAC,CAAC;YAEnB,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;gBACjB,UAAU,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;aACnD;YAED,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;gBACjB,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC;aAC3F;YAED,OAAO,CAAC,CAAC,KAAK,GAAG,OAAO,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,UAAU,CAAC;SAC5D;QAED,MAAM,YAAY,GAAG,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAErE,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACjG;QAED,OAAO,CAAC,CAAC;IACb,CAAC;IASO,sBAAsB,CAAC,QAAgB;QAC3C,QAAQ,QAAQ,EAAE;YACd,KAAK,GAAG;gBACJ,OAAO,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;YAC1B,KAAK,IAAI;gBACL,OAAO,CAAC,CAAC;YACb,KAAK,GAAG;gBACJ,OAAO,IAAI,GAAG,EAAE,CAAC;YACrB,KAAK,GAAG;gBACJ,OAAO,IAAI,CAAC;YAChB,KAAK,GAAG;gBACJ,OAAO,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC;YACtC,KAAK,GAAG;gBACJ,OAAO,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC;YACrC;gBACI,OAAO,CAAC,CAAC;SAChB;IACL,CAAC;;AAxGc,gCAAiB,GAAW,8DAA8D,CAAC;AAU3F,gCAAiB,GAAW,6BAA6B,CAAC","sourcesContent":["// Timed Text Markup Language (TTML).\n// See http://www.w3.org/TR/ttml1/ for more details.\n\n/**\n * TtmlTimeParser class\n * @classdesc - The TtmlTimeParser class is used to parse ttml time expressions which can be absolute or relative.\n * @export\n */\nexport class TtmlTimeParser {\n    /**\n     * @name - absoluteTimeRegex\n     * @description - Regex to parse absolute ttml times. (clock-time)\n     *                hours \":\" minutes \":\" seconds ( fraction | \":\" frames ( \".\" sub-frames )? )?\n     *                NOTE: (johnlemi)  Our clocktime regex matches 1 or 2 digits for hours instead of 2 because even\n     *                though the spec says 2 we have some existing ttml from the Office team with end attrs with 1 hour digit\n     * @static\n     * @private\n     * @type {string}\n     */\n    private static absoluteTimeRegex: RegExp = /^(\\d{1,}):(\\d{2}):(\\d{2})((\\.\\d{1,})|:(\\d{2,}(\\.\\d{1,})?))?$/;\n\n    /**\n     * @name - relativeTimeRegex\n     * @description - Regex to parse relative ttml times. (offset-time)\n     *                time-count fraction? metric\n     * @static\n     * @private\n     * @type {string}\n     */\n    private static relativeTimeRegex: RegExp = /^(\\d+(\\.\\d+)?)(ms|[hmsft])$/;\n\n    /**\n     * @name - mediaFrameRate\n     * @description - mediaFrameRate\n     * @private\n     * @type {string}\n     */\n    private mediaFrameRate: number;\n\n    /**\n     * @name - mediaTickRate\n     * @description - mediaTickRate\n     * @private\n     * @type {string}\n     */\n    private mediaTickRate: number;\n\n    /**\n     * @constructor\n     * @description - Constructor for the TtmlTimeParser class.\n     * @public\n     * @param {number} mediaFrameRate - The ttml media frame rate.\n     * @param {number} mediaTickRate - The ttml media tick rate.\n     */\n    constructor(_mediaFrameRate: number, _mediaTickRate: number) {\n        this.mediaFrameRate = _mediaFrameRate;\n        this.mediaTickRate = _mediaTickRate;\n    }\n\n    /**\n     * @name - parse\n     * @description - Parses a ttml time expression string into a number.\n     * @public\n     * @param {string} ttmlTime - The time expression to parse.\n     * @returns {number} - The number the time expression represents, or 0 if the exression doesn't match.\n     */\n    public parse(ttmlTime: string): number {\n        if (!ttmlTime) {\n            return 0;\n        }\n\n        const absoluteTime = TtmlTimeParser.absoluteTimeRegex.exec(ttmlTime);\n\n        if (absoluteTime && (absoluteTime.length > 3)) {\n            const hours = parseInt(absoluteTime[1], 10) * 60 * 60;\n            const minutes = parseInt(absoluteTime[2], 10) * 60;\n            const seconds = parseInt(absoluteTime[3], 10);\n            let subseconds = 0;\n\n            if (absoluteTime[5]) {\n                subseconds = parseFloat(absoluteTime[4]) * 1000;\n            }\n\n            if (absoluteTime[6]) {\n                subseconds = Math.round(parseFloat(absoluteTime[6]) * this._getTimeUnitMultiplier('f'));\n            }\n\n            return ((hours + minutes + seconds) * 1000) + subseconds;\n        }\n\n        const relativeTime = TtmlTimeParser.relativeTimeRegex.exec(ttmlTime);\n\n        if (relativeTime && (relativeTime.length > 3)) {\n            return Math.round(parseFloat(relativeTime[1]) * this._getTimeUnitMultiplier(relativeTime[3]));\n        }\n\n        return 0;\n    }\n\n    /**\n     * @name - getTimeUnitMultiplier\n     * @description - Converts a ttml time unit expression string into a multiplier number.\n     * @private\n     * @param {string} timeUnit - The time unit expression.\n     * @returns {number} - The multiplier value, or 0 if the unit exression doesn't match.\n     */\n    private _getTimeUnitMultiplier(timeUnit: string): number {\n        switch (timeUnit) {\n            case 'h':\n                return 1000 * 60 * 60;\n            case 'ms':\n                return 1;\n            case 'm':\n                return 1000 * 60;\n            case 's':\n                return 1000;\n            case 'f':\n                return 1000 / this.mediaFrameRate;\n            case 't':\n                return 1000 / this.mediaTickRate;\n            default:\n                return 0;\n        }\n    }\n}"]}