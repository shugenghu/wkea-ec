{"version":3,"file":"video-closed-captions.js","sourceRoot":"./src/","sources":["videoplayer/components/closed-captions/video-closed-captions.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,GAAG,EAAE,eAAe,EAAE,cAAc,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AACvG,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAC5D,OAAO,EAAE,MAAM,EAAE,MAAM,+BAA+B,CAAC;AACvD,OAAO,EAAE,aAAa,EAA2B,MAAM,wBAAwB,CAAC;AAGhF,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,MAAM,kCAAkC,CAAC;AAO5G,MAAM,CAAC,OAAO,OAAO,cAAe,SAAQ,KAAK,CAAC,SAA+B;IA0C7E,YAAY,KAA2B;QACnC,KAAK,CAAC,KAAK,CAAC,CAAC;QA1BT,oBAAe,GAAuB;YAC1C,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,EAAE;SACb,CAAC;QAEM,qBAAgB,GAAoC,KAAK,CAAC,SAAS,EAAkB,CAAC;QAUtF,qBAAgB,GAAW,CAAC,CAAC;QAQ7B,gBAAW,GAAwB,IAAI,CAAC;QAI5C,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEM,MAAM;QACT,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,MAAM,qBAAqB,GAAG;YAC1B,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;YACxD,UAAU,EAAE,wBAAwB;SACvC,CAAC;QACF,OAAO,CAEH,6BAAK,IAAI,EAAC,MAAM,EAAC,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,iBAAe,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,EAAE,qBAAqB,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,GAC7J,CACT,CAAC;IACN,CAAC;IAEM,OAAO;QACV,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC;IACtC,CAAC;IAEM,iBAAiB;QACpB,IAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YACjB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACzC;QACD,MAAM,IAAI,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,EAAE;YAC7C,IAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;gBAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;aAC/C;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,qBAAqB,CAAC,SAA+B;QACxD,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,IAAG,SAAS,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,KAAK,SAAS,CAAC,kBAAkB,CAAC,EAAE;YACjG,YAAY,GAAG,IAAI,CAAC;SACvB;QACD,OAAO,YAAY,CAAC;IACxB,CAAC;IAEM,oBAAoB;QACvB,MAAM,IAAI,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,GAAG,EAAE;YAChD,IAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;gBAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;aAC/C;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,kBAAkB,CAAC,SAA+B;QACrD,IAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;YAC9B,IAAG,SAAS,CAAC,UAAW,KAAK,IAAI,CAAC,KAAK,CAAC,UAAW,EAAE;gBACjD,IAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;oBACjB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACzC;aACJ;YACD,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAC5C,IAAG,SAAS,CAAC,qBAAqB,KAAK,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE;gBACrE,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,IAAI,CAAC,aAAa,EAAE,CAAC;gBAErB,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;oBACvB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBAC5C,CAAC,EAAiB,GAAG,CAAC,CAAC;aAC1B;SACJ;IACL,CAAC;IAQM,kBAAkB;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,MAAM,YAAY,GAAgB,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;MAsBpE,EAAoE,UAAU,CAAC,CAAC;QAE9E,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;QAC3C,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,WAAY,CAAC,8BAA8B,CAAC,UAAW,CAAC,CAAC;QAC9D,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3D,CAAC;IAUM,cAAc,CAAC,YAAoB;QACtC,IAAI,MAAM,GAAW,EAAE,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC;QAErC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE;YAClD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAI,IAAI,CAAC,CAAC;YAE9C,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,CAAC;YACjE,IAAI,IAAI,CAAC,WAAW,CAAC,8BAA8B,CAAC,UAAW,CAAC,EAAE;gBAE9D,IAAI,CAAC,aAAa,EAAE,CAAC;aACxB;YAED,IAAI,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;gBAE5C,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,CAAC;gBAEhD,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC9C,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC;oBAIzC,GAAG,CAAC,GAAG,EAAE,kBAAkB,EAAE,EAAE,CAAC,CAAC;oBACjC,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC;iBAC1B;gBAGD,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,SAAS,GAAG,MAAM,CAAC;aACrD;SACJ;IACL,CAAC;IASM,aAAa;QAChB,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;SACzC;QAED,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAQ,EAAE;YAChC,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,CAAC;SACnD;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAQM,aAAa;QAChB,MAAM,KAAK,GAA4B,EAAE,CAAC;QAE1C,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,6BAA6B,CAAC;QAEjJ,KAAK,MAAM,UAAU,IAAI,eAAe,EAAE;YACtC,IAAI,eAAe,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;gBAC5C,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;gBAElF,IAAI,WAAW,EAAE;oBACb,KAAK,CAAC,UAAU,CAAC,GAAG,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC,KAAK,GAAG,WAAW,EAAE,CAAC;iBACtF;aACJ;SACJ;QAED,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC7D,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACrE,CAAC;IASO,mBAAmB,CAAC,IAAY;QAEpC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,MAAW,EAAE,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE;YACjF,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBAC1B,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;oBACrB,SAAS,EAAE,sCAAsC;oBACjD,SAAS,EAAE,uBAAuB,IAAI,EAAE;iBAC3C,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IASO,uBAAuB,CAAC,YAAyB;QACrD,IAAI,CAAC,YAAY,EAAE;YACf,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBAC1B,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;oBACrB,SAAS,EAAE,6CAA6C;oBACxD,SAAS,EAAE,uBAAuB;iBACrC,CAAC,CAAC;aACN;YACD,OAAO;SACV;QAID,MAAM,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACjG,MAAM,iBAAiB,GAAkB;YACrC,QAAQ,EAAE,EAAE;YACZ,OAAO,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE;YACvC,wBAAwB,EAAE,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC;SAC1E,CAAC;QAEF,IAAI;YACA,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;YAErE,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAQ,CAAC,aAAc,CAAC,CAAC;gBAEjF,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE;oBAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;iBAC9C;aACJ;SACJ;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBAC1B,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;oBACrB,SAAS,EAAE,gDAAgD;oBAC3D,SAAS,EAAE,iCAAiC,CAAC,CAAC,OAAO,EAAE;iBAC1D,CAAC,CAAC;aACN;SACJ;IACL,CAAC;IASO,8BAA8B,CAAC,GAAgB;QACnD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACvB,OAAO;SACV;QAED,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE;YAC3B,KAAK,MAAM,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE;gBAEnD,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE;oBAC9C,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;wBACpD,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;qBAC/D;iBACJ;aACJ;SACJ;QAED,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YAC7B,MAAM,UAAU,GAAuB,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACpE,IAAI,UAAU,EAAE;gBAEZ,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;oBAChD,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;wBACtD,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACpE;iBACJ;aACJ;SACJ;IACL,CAAC;IASO,cAAc,CAAC,IAAY;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,EAAE;YACP,OAAO;SACV;QACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAUO,eAAe,CAAC,UAAkB,EAAE,SAAiB;QACzD,MAAM,OAAO,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;QACtD,IAAI,OAAO,EAAE;YACT,MAAM,MAAM,GAAG,6BAA6B,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC7D,OAAO,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SAC1C;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAUO,YAAY,CAAC,KAA8B,EAAE,MAAc;QAC/D,MAAM,QAAQ,GAA4B,EAAE,CAAC;QAI7C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBAC5B,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;gBAE5B,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBAC3D,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;wBACjC,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAElC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;4BACxB,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BAE9B,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gCACjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;6BAC7C;yBACJ;qBACJ;iBACJ;aACJ;SACJ;QAKD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBAC5B,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBAC3D,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAEhC,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;wBACjB,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;wBAC5C,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;wBACpC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;qBAC3E;iBACJ;aACJ;SACJ;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAUO,aAAa,CAAC,QAAgB,EAAE,OAAe;QACnD,IAAI,MAAM,GAAG,MAAM,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;QAChD,MAAM,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEzD,IAAI,UAAU,IAAI,CAAC,EAAE;YACjB,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;YACxD,MAAM,WAAW,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEjD,IAAI,WAAW,GAAG,CAAC,EAAE;gBACjB,MAAM,GAAG,GAAG,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;gBACjE,MAAM,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC7E,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;gBAChF,MAAM,GAAG,MAAM,CAAC,uBAAuB,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;aACvE;SACJ;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ","sourcesContent":["import * as React from 'react';\nimport { ICurrentClosedCaptionsSettings } from '../data/player-constants';\nimport { css, removeInnerHtml, selectElements, selectFirstElement } from '../utilities/htmlExtensions';\nimport { PlayerUtility } from '../utilities/player-utility';\nimport { format } from '../utilities/stringExtensions';\nimport { getDimensions, IDictionaryStringString } from '../utilities/utilities';\nimport { IClosedCaptionsProps } from './ClosedCaptionsProps';\nimport { ITtmlContext } from './ttml-context';\nimport { TtmlParser } from './ttml-parser';\nimport { ITtmlSettings } from './ttml-settings';\nimport { closedCaptionsSettingsMap, closedCaptionsSettingsOptions } from './video-closed-captions-settings';\n\n/**\n *\n * closedCaptions React component for video player\n *\n */\nexport default class ClosedCaptions extends React.Component<IClosedCaptionsProps> {\n\n    /**\n     * @name - currentSettings\n     * @description - The current closed captions settings.\n     * @private\n     * @type {IDictionaryStringString}\n     */\n    public currentSettings: ICurrentClosedCaptionsSettings | undefined;\n\n    /**\n     * @name - userPreferences\n     * @description - The user preference overrides for the closed captions.\n     * @static\n     * @public\n     * @type {ICcUserPreferences}\n     */\n    private userPreferences: ICcUserPreferences = {\n        text: {},\n        window: {}\n    };\n\n    private closedCaptionDiv: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n\n    /**\n     * @name - lastPlayPosition\n     * @description - The last player position passed to updateCaptions.\n     *                This is used to call updateCaptions again when the cc language is changed.\n     *                Play could be paused at that time.\n     * @private\n     * @type {number}\n     */\n    private lastPlayPosition: number = 0;\n\n    /**\n     * @name - ttmlContext\n     * @description - The ttmlContext for the current ttml document.\n     * @private\n     * @type {ITtmlContext}\n     */\n    private ttmlContext: ITtmlContext | null = null;\n\n    constructor(props: IClosedCaptionsProps) {\n        super(props);\n        this.resetCaptions();\n        this.clicked = this.clicked.bind(this);\n    }\n\n    public render(): JSX.Element {\n        const { className } = this.props;\n        const closedCaptionDivStyle = {\n            bottom: this.props.isVideoControlVisible ? '2.5em' : '0',\n            transition: 'bottom 0.5s ease-in 0s'\n        };\n        return (\n            // tslint:disable-next-line: jsx-self-close\n            <div role='none' className={className} ref={this.closedCaptionDiv} aria-hidden={!this.props.showClosedCaptions} style={closedCaptionDivStyle} onClick={this.clicked}>\n            </div>\n        );\n    }\n\n    public clicked(): void {\n        this.props.onClosedCaptionClick();\n    }\n\n    public componentDidMount(): void {\n        if(this.props.ccURL) {\n            this._setCcLanguage(this.props.ccURL);\n        }\n        window && window.addEventListener('resize', () => {\n            if(this.props.showClosedCaptions) {\n                this.updateCaptions(this.props.currentTime);\n            }\n        });\n    }\n\n    public shouldComponentUpdate(nextProps: IClosedCaptionsProps): boolean {\n        let shouldRender = false;\n        if(nextProps.showClosedCaptions || (this.props.showClosedCaptions !== nextProps.showClosedCaptions)) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n\n    public componentWillUnmount(): void {\n        window && window.removeEventListener('resize', () => {\n            if(this.props.showClosedCaptions) {\n                this.updateCaptions(this.props.currentTime);\n            }\n        });\n    }\n\n    public componentDidUpdate(prevProps: IClosedCaptionsProps): void {\n        if(this.props.showClosedCaptions) {\n            if(prevProps.ccLanguage! !== this.props.ccLanguage!) {\n                if(this.props.ccURL) {\n                    this._setCcLanguage(this.props.ccURL);\n                }\n            }\n            this.applySettings();\n            this.resetCaptions();\n            this.updateCaptions(this.props.currentTime);\n            if(prevProps.isVideoControlVisible !== this.props.isVideoControlVisible) {\n                this.applySettings();\n                this.resetCaptions();\n                // Setting up a delay so that right height and width is calculated\n                window.setTimeout(() => {\n                this.updateCaptions(this.props.currentTime);\n                },                500);\n            }\n        }\n    }\n\n    /**\n     * @name - showSampleCaptions\n     * @description - Displays a mocked caption container with content, used to show the caption preset preview\n     * @public\n     * @returns {void}\n     */\n    public showSampleCaptions(): void {\n        this.ttmlContext = null;\n        const mockCaptions: XMLDocument = new DOMParser().parseFromString(`<?xml version='1.0' encoding='utf-8'?>\n<tt xml:lang='en-us' xmlns='http://www.w3.org/ns/ttml' xmlns:tts='http://www.w3.org/ns/ttml#styling'\nxmlns:ttm='http://www.w3.org/ns/ttml#metadata'>\n    <head>\n    <metadata>\n        <ttm:title>Media.wvx.aib</ttm:title>\n        <ttm:copyright>Copyright (c) 2013 Microsoft Corporation.  All rights reserved.</ttm:copyright>\n    </metadata>\n    <styling>\n        <style xml:id='Style1' tts:fontFamily='proportionalSansSerif' tts:fontSize='0.8c' tts:textAlign='center'\n        tts:color='white' />\n    </styling>\n    <layout>\n        <region style='Style1' xml:id='CaptionArea' tts:origin='0c 12.6c' tts:extent='32c 2.4c'\n        tts:backgroundColor='rgba(0,0,0,160)' tts:displayAlign='center' tts:padding='0.3c 0.5c' />\n    </layout>\n    </head>\n    <body region='CaptionArea'>\n    <div>\n        <p begin='00:00:01.140' end='99:99:99.999'>EXAMPLE CAPTIONS!</p>\n    </div>\n    </body>\n</tt>`,                                                                   'text/xml');\n\n        this._onClosedCaptionsLoaded(mockCaptions);\n        const dimensions = getDimensions(this.closedCaptionDiv.current!);\n        this.ttmlContext!.updateRelatedMediaObjectRegion(dimensions!);\n        this.closedCaptionDiv.current!.style.bottom = '2.5rem';\n    }\n\n    /**\n     * @name - updateCaptions\n     * @description - Update the captionContainer with the captions that correspond to the current time\n     * @public\n     * @param {number} playPosition - The video's play position to sync the captions to.\n     * @returns {void}\n     */\n// tslint:disable-next-line: max-func-body-length\n    public updateCaptions(playPosition: number): void {\n        let output: string = '';\n        this.lastPlayPosition = playPosition;\n\n        if (this.ttmlContext && this.ttmlContext.hasEvents()) {\n            const tick = Math.floor(playPosition  * 1000);\n\n            const dimensions = getDimensions(this.closedCaptionDiv.current!);\n            if (this.ttmlContext.updateRelatedMediaObjectRegion(dimensions!)) {\n                // Call resetCaptions to force an update since the relatedMediaObjectRegion size has changed.\n                this.resetCaptions();\n            }\n\n            if (this.ttmlContext.updateCurrentEvents(tick)) {\n\n                removeInnerHtml(this.closedCaptionDiv.current!);\n\n                for (const cue of this.ttmlContext.getCues(tick)) {\n                    this._applyUserPreferencesOverrides(cue);\n                    // background color is not honored in high contrast mode,\n                    // thus remove it from this wrapper div to avoid video not getting displayed in high contrast mode\n                    // with close captions enabled\n                    css(cue, 'background-color', '');\n                    output = cue.outerHTML;\n                }\n\n                // tslint:disable-next-line: no-inner-html\n                this.closedCaptionDiv.current!.innerHTML = output;\n            }\n        }\n    }\n\n    /**\n     * @name - resetCaptions\n     * @description - Resets the ttml caption container.\n     *                This should be called when user preferences change.\n     * @public\n     * @returns {void}\n     */\n    public resetCaptions(): void {\n        if (this.ttmlContext) {\n            this.ttmlContext.resetCurrentEvents();\n        }\n\n        if (this.closedCaptionDiv.current!) {\n            removeInnerHtml(this.closedCaptionDiv.current!);\n        }\n        this.applySettings();\n    }\n\n    /**\n     * @name - applySettings\n     * @description - Applies the closed captions settings.\n     * @public\n     * @returns {void}\n     */\n    public applySettings(): void {\n        const prefs: IDictionaryStringString = {};\n\n        const currentSettings = this.props.tempClosedCaptionsSettings ? this.props.tempClosedCaptionsSettings : this.props.currentClosedCaptionsSettings;\n    // tslint:disable-next-line: no-for-in\n        for (const settingKey in currentSettings) {\n            if (currentSettings.hasOwnProperty(settingKey)) {\n                const optionValue = this._getOptionValue(settingKey, currentSettings[settingKey]);\n\n                if (optionValue) {\n                    prefs[settingKey] = `${closedCaptionsSettingsMap[settingKey].value}${optionValue}`;\n                }\n            }\n        }\n\n        this.userPreferences.text = this._getPrefsCss(prefs, 'text');\n        this.userPreferences.window = this._getPrefsCss(prefs, 'window');\n    }\n\n    /**\n     * @name - loadClosedCaptions\n     * @description - Loads the close captioning ttml file.\n     * @private\n     * @param {string} href - The cc href.\n     * @returns {void}\n     */\n    private _loadClosedCaptions(href: string): void {\n        // tslint:disable-next-line: no-any\n        PlayerUtility.ajax(href, (result: any) => this._onClosedCaptionsLoaded(result), () => {\n            if (this.props.errorCallback) {\n                this.props.errorCallback({\n                    errorType: 'Player.error.loadClosedCaptions.ajax',\n                    errorDesc: `Ajax call failed: ' ${href}`\n                });\n            }\n        });\n    }\n\n    /**\n     * @name - onClosedCaptionsLoaded\n     * @description - Close captioning ttml file loaded handler.\n     * @private\n     * @param {XMLDocument} ttmlDocument - The ttml document containing the closed captions.\n     * @returns {void}\n     */\n    private _onClosedCaptionsLoaded(ttmlDocument: XMLDocument): void {\n        if (!ttmlDocument) {\n            if (this.props.errorCallback) {\n                this.props.errorCallback({\n                    errorType: 'Player.error.onClosedCaptionsLoaded.ttmlDoc',\n                    errorDesc: 'No ttmlDocument found'\n                });\n            }\n            return;\n        }\n\n        // this.closedCaptionDiv.current!.setAttribute(ClosedCaptions.ariaHidden, 'false');\n\n        const id = this.closedCaptionDiv.current!.id ? (`${this.closedCaptionDiv.current!.id} '-'`) : '';\n        const settingsOverrides: ITtmlSettings = {\n            idPrefix: id,\n            fontMap: { default: 'Segoe ui, Arial' },\n            relatedMediaObjectRegion: getDimensions(this.closedCaptionDiv.current!)\n        };\n\n        try {\n            this.ttmlContext = TtmlParser.parse(ttmlDocument, settingsOverrides);\n\n            if (this.ttmlContext) {\n                this.ttmlContext.setOwnerDocument(this.closedCaptionDiv.current!.ownerDocument!);\n\n                if (this.ttmlContext.hasEvents()) {\n                    this.updateCaptions(this.lastPlayPosition);\n                }\n            }\n        } catch (e) {\n            if (this.props.errorCallback) {\n                this.props.errorCallback({\n                    errorType: 'Player.error.onClosedCaptionsLoaded.ttmlParser',\n                    errorDesc: `'TtmlDocument parser error: ' ${e.message}`\n                });\n            }\n        }\n    }\n\n    /**\n     * @name - applyUserPreferencesOverrides\n     * @description - Applies user preference overrides to the specified cue.\n     * @private\n     * @param {HTMLElement} cue - The cue to apply any overrides to.\n     * @returns {void}\n     */\n    private _applyUserPreferencesOverrides(cue: HTMLElement): void {\n        if (!this.userPreferences) {\n            return;\n        }\n\n        if (this.userPreferences.text) {\n            for (const element of selectElements('span, br', cue)) {\n                // tslint:disable-next-line: no-for-in\n                for (const property in this.userPreferences.text) {\n                    if (this.userPreferences.text.hasOwnProperty(property)) {\n                        css(element, property, this.userPreferences.text[property]);\n                    }\n                }\n            }\n        }\n\n        if (this.userPreferences.window) {\n            const winElement: HTMLElement | null = selectFirstElement('p', cue);\n            if (winElement) {\n                // tslint:disable-next-line: no-for-in\n                for (const property in this.userPreferences.window) {\n                    if (this.userPreferences.window.hasOwnProperty(property)) {\n                        css(winElement, property, this.userPreferences.window[property]);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @name - setCcLanguage\n     * @description - Updates the component if there is any change to its underlying DOM.\n     * @private\n     * @param {string} href - The ttml href.\n     * @returns {void}\n     */\n    private _setCcLanguage(href: string): void {\n        this.ttmlContext = null;\n        this.resetCaptions();\n        if (!href) {\n            return;\n        }\n        this._loadClosedCaptions(href);\n    }\n\n    /**\n     * @name - getOptionValue\n     * @description - Gets the value of closed captions settings option.\n     * @private\n     * @param {string} settingKey - The closed ceptions settings key.\n     * @param {string} optionKey - The closed captions option key.\n     * @returns {void}\n     */\n    private _getOptionValue(settingKey: string, optionKey: string): string {\n        const setting = closedCaptionsSettingsMap[settingKey];\n        if (setting) {\n            const option = closedCaptionsSettingsOptions[setting.option];\n            return option && option.map[optionKey];\n        }\n        return '';\n    }\n\n    /**\n     * @name - getPrefsCss\n     * @description - Gets the css for the preferences.\n     * @private\n     * @param {IDictionaryStringString} pref - The preferences to get css for.\n     * @param {string} prefix - The closed captions type (text/window).\n     * @returns {IDictionaryStringString}\n     */\n    private _getPrefsCss(prefs: IDictionaryStringString, prefix: string): IDictionaryStringString {\n        const prefsCss: IDictionaryStringString = {};\n\n        //  First store all the non-transparency values\n        // tslint:disable-next-line: no-for-in\n        for (const pref in prefs) {\n            if (prefs.hasOwnProperty(pref)) {\n                const propVal = prefs[pref];\n\n                if (pref.indexOf(prefix) === 0 && pref.indexOf('opacity') < 0) {\n                    if (propVal && (propVal.length > 0)) {\n                        const styles = propVal.split(';');\n\n                        for (const style of styles) {\n                            const pVal = style.split(':');\n\n                            if (pVal.length > 1) {\n                                prefsCss[pVal[0].trim()] = pVal[1].trim();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        //  Then go through all the transparency values and\n        //  map them onto their non-transparent color counterparts\n        // tslint:disable-next-line: no-for-in\n        for (const pref in prefs) {\n            if (prefs.hasOwnProperty(pref)) {\n                const propVal = prefs[pref];\n                if (pref.indexOf(prefix) === 0 && pref.indexOf('opacity') > 0) {\n                    const pVal = propVal.split(':');\n\n                    if (pVal.length > 1) {\n                        const colorValue = prefsCss[pVal[0].trim()];\n                        const opacityValue = pVal[1].trim();\n                        prefsCss[pVal[0].trim()] = this._formatAsRgba(colorValue, opacityValue);\n                    }\n                }\n            }\n        }\n\n        return prefsCss;\n    }\n\n    /**\n     * @name - formatAsRgba\n     * @description - Formats the color value from css to rgba value.\n     * @private\n     * @param {string} cssColor - The css color value.\n     * @param {string} opacity - The opacity value.\n     * @returns {string}\n     */\n    private _formatAsRgba(cssColor: string, opacity: string): string {\n        let result = format('rgba(0,0,0,{0})', opacity);\n        const colorStart = cssColor ? cssColor.indexOf('#') : -1;\n\n        if (colorStart >= 0) {\n            const fullColorString = cssColor.substr(colorStart + 1);\n            const colorLenght = (fullColorString.length) / 3;\n\n            if (colorLenght > 0) {\n                const red = parseInt(fullColorString.substr(0, colorLenght), 16);\n                const green = parseInt(fullColorString.substr(colorLenght, colorLenght), 16);\n                const blue = parseInt(fullColorString.substr(colorLenght * 2, colorLenght), 16);\n                result = format('rgba({0},{1},{2},{3})', red, green, blue, opacity);\n            }\n        }\n\n        return result;\n    }\n}\n\n/**\n * @interface ICcUserPreferences\n * @classdesc - Describes the closed caption user preferences data structure.\n * @export\n */\nexport interface ICcUserPreferences {\n    text: IDictionaryStringString;\n    window: IDictionaryStringString;\n}"]}