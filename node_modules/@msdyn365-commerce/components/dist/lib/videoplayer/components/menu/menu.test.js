import { mount } from 'enzyme';
import * as React from 'react';
import Menu from './menu';
describe('Menu ', () => {
    it('Menu work correctly when loaded', () => {
        const documentClick = jest.fn();
        const menuItemClick = jest.fn();
        const playerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch '
                }
            ]
        };
        const wrapper = mount(React.createElement(Menu, { playerMenu: playerMenu, className: 'playerMenu', style: { left: '148px' }, onDocumentClick: documentClick, onMenuItemClick: menuItemClick }), { attachTo: document.body.firstElementChild });
        const menu = wrapper.instance();
        menu.getMenuWidth();
        const mockedEvent = new Event('playing', { bubbles: true, cancelable: false, });
        menu.handleDocumentClick(mockedEvent);
        expect(() => {
            menu.componentDidMount();
        }).not.toThrow();
        expect(() => {
            menu.componentWillUnmount();
        }).not.toThrow();
        wrapper.unmount();
    });
    it('Menu raises keyup and keyDown event', () => {
        const documentClick = jest.fn();
        const menuItemClick = jest.fn();
        const spyOnKeyUp = jest.fn();
        const spyOnKeyDown = jest.fn();
        const playerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch '
                }
            ]
        };
        const wrapper = mount(React.createElement(Menu, { playerMenu: playerMenu, className: 'playerMenu', style: { left: '148px' }, onDocumentClick: documentClick, onMenuItemClick: menuItemClick, onKeyDown: spyOnKeyDown, onKeyUp: spyOnKeyUp }), { attachTo: document.body.firstElementChild });
        const ulWrapper = mount(wrapper.find('ul').get(0));
        ulWrapper.simulate('keyDown', { keyCode: 40 });
        wrapper.update();
        expect(spyOnKeyDown).toHaveBeenCalled();
        ulWrapper.simulate('keyUp', { keyCode: 38 });
        wrapper.update();
        expect(spyOnKeyUp).toHaveBeenCalled();
        wrapper.unmount();
    });
});
//# sourceMappingURL=menu.test.js.map