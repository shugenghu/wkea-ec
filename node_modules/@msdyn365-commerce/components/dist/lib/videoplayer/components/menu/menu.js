import * as React from 'react';
import MenuItem from '../menu-item/menu-item';
export default class Menu extends React.Component {
    constructor(props) {
        super(props);
        this.target = React.createRef();
        this.handleDocumentClick = this.handleDocumentClick.bind(this);
        this._onKeyDown = this._onKeyDown.bind(this);
        this._onKeyUp = this._onKeyUp.bind(this);
    }
    componentDidMount() {
        ['click', 'touchstart'].forEach((event) => {
            window && window.addEventListener(event, this.handleDocumentClick, true);
        });
    }
    componentWillUnmount() {
        ['click', 'touchstart'].forEach((event) => {
            window && window.removeEventListener(event, this.handleDocumentClick, true);
        });
    }
    getMenuWidth() {
        return this.target.current.offsetWidth;
    }
    shouldComponentUpdate(nextProps) {
        let shouldRender = false;
        if (nextProps.playerMenu !== this.props.playerMenu) {
            shouldRender = true;
        }
        return shouldRender;
    }
    render() {
        const { className, style } = this.props;
        const menuItems = this.props.playerMenu.items;
        const count = menuItems.length;
        return (React.createElement("div", { className: className, style: style, ref: this.target, "data-category": this.props.playerMenu.category },
            React.createElement("ul", { role: 'menu', className: `${className}__list`, onKeyDown: this._onKeyDown, onKeyUp: this._onKeyUp }, menuItems.map((menuItem, index) => {
                return (React.createElement(MenuItem, Object.assign({ id: menuItem.id, key: index, label: menuItem.label, className: `${className}__menuitem`, language: menuItem.language, data: menuItem.data, isBackButton: menuItem.isBackButton, image: menuItem.image, imageAlt: menuItem.imageAlt, itemCount: count, itemIndex: index, glyph: menuItem.glyph, selected: menuItem.selected, selectable: menuItem.selectable, persistOnClick: menuItem.persistOnClick }, (menuItem.id.includes('cc-preset')) ? {} : { ariaLabel: menuItem.ariaLabel }, { subMenu: menuItem.subMenu, hasMouseHoverEvents: menuItem.hasMouseHoverEvents, hasChildren: menuItem.subMenu !== undefined && menuItem.subMenu.items && menuItem.subMenu.items.length > 0 ? true : false, onClick: this.props.onMenuItemClick, onFocus: this.props.onFocus, onBlur: this.props.onBlur, onKeyDown: this.props.onKeyDown, onKeyUp: this.props.onKeyUp, onMouseOver: this.props.onMouseOver, onMouseOut: this.props.onMouseOut, hasFocus: menuItem.hasFocus })));
            }))));
    }
    handleDocumentClick(e) {
        const target = e.target;
        if (this.target !== undefined && !(this.target.current !== null && (e.target === this.target.current || this.target.current.contains(target)))) {
            this.props.onDocumentClick(e);
        }
    }
    _onKeyDown(event) {
        this.props.onKeyDown(event);
    }
    _onKeyUp(event) {
        this.props.onKeyUp(event);
    }
}
//# sourceMappingURL=menu.js.map