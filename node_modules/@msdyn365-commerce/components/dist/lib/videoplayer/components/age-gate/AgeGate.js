import * as React from 'react';
import { PlayerConstants, VideoPlayerNames } from '../data/player-constants';
export default class AgeGate extends React.PureComponent {
    constructor(props) {
        super(props);
        this.ageGateDiv = React.createRef();
        this.getCalculatedAge = () => {
            const day = Number(this.state.dayValue);
            const month = Number(this.state.monthValue);
            const year = Number(this.state.yearValue);
            const today = new Date();
            let age = today.getFullYear() - year;
            const birthdayMonthHasNotHappenedYet = today.getMonth() + 1 < month;
            const birthdayDayHasNotHappenedYet = (today.getMonth() + 1 === month && today.getDate() < day);
            if (birthdayMonthHasNotHappenedYet || birthdayDayHasNotHappenedYet) {
                age--;
            }
            const minimmumage = Number(this.props.minmumAge);
            if (age >= minimmumage) {
                return true;
            }
            else {
                return false;
            }
        };
        this.renderSelectMonth = () => {
            const maxOffset = 12;
            const allMonth = [];
            for (let month = 1; month <= maxOffset; month++) {
                allMonth.push(month);
            }
            const monthList = allMonth.map((month) => { return (React.createElement("option", { role: 'menuitem', key: month, value: month }, month.toFixed())); });
            return (React.createElement("select", { "aria-expanded": 'false', className: `${VideoPlayerNames.videoplayerContainer}__agegate__select`, role: 'menu', onChange: this._filterDateMonthYear, value: this.state.monthValue, "aria-label": 'Enter your month of birth', name: 'selectMonth', id: 'selectMonth' },
                React.createElement("option", { role: 'menuitem' }, "Month"),
                monthList));
        };
        this.renderSelectDay = () => {
            const maxOffset = 31;
            const allDay = [];
            for (let day = 1; day <= maxOffset; day++) {
                allDay.push(day);
            }
            const dayList = allDay.map((day) => { return (React.createElement("option", { role: 'menuitem', key: day }, day.toFixed())); });
            return (React.createElement("select", { "aria-expanded": 'false', className: `${VideoPlayerNames.videoplayerContainer}__agegate__select`, role: 'menu', onChange: this._filterDateMonthYear, value: this.state.dayValue, "aria-label": 'Enter your day of birth', name: 'selectDay', id: 'selectDay' },
                React.createElement("option", { role: 'menuitem' }, "Day"),
                dayList));
        };
        this.renderSelectYear = () => {
            const maxOffset = 100;
            const thisYear = (new Date()).getFullYear();
            const allYear = [];
            for (let year = 1; year <= maxOffset; year++) {
                allYear.push(thisYear - year);
            }
            const yearList = allYear.map((year) => { return (React.createElement("option", { role: 'menuitem', key: year }, year.toFixed())); });
            return (React.createElement("select", { "aria-expanded": 'false', className: `${VideoPlayerNames.videoplayerContainer}__agegate__select`, role: 'menu', onChange: this._filterDateMonthYear, value: this.state.yearValue, "aria-label": 'Enter your year of birth', name: 'selectYear', id: 'selectYear' },
                React.createElement("option", { role: 'menuitem' }, "Year"),
                yearList));
        };
        this._filterDateMonthYear = this._filterDateMonthYear.bind(this);
        this.state = {
            monthValue: 'Month',
            dayValue: 'Day',
            yearValue: 'Year'
        };
    }
    render() {
        const enabled = PlayerConstants.regxForAgeGateInputValidation.test(this.state.dayValue) &&
            PlayerConstants.regxForAgeGateInputValidation.test(this.state.monthValue) &&
            PlayerConstants.regxForAgeGateInputValidation.test(this.state.yearValue);
        return (React.createElement("div", { className: `${VideoPlayerNames.videoplayerContainer}__agegate__container`, ref: this.ageGateDiv, "aria-hidden": this.props['aria-hidden'] },
            React.createElement("div", null,
                React.createElement("div", null,
                    React.createElement("h3", null, "Enter your date of birth"),
                    React.createElement("fieldset", null,
                        React.createElement("div", null, this.renderSelectMonth()),
                        React.createElement("div", null, this.renderSelectDay()),
                        React.createElement("div", null, this.renderSelectYear()),
                        React.createElement("button", { disabled: !enabled, onClick: this.props.onSubmitClick }, "Submit"))))));
    }
    _filterDateMonthYear(e) {
        if (e.target.id === 'selectDay') {
            return this.setState({ dayValue: e.target.value });
        }
        else if (e.target.id === 'selectMonth') {
            return this.setState({ monthValue: e.target.value });
        }
        else if (e.target.id === 'selectYear') {
            return this.setState({ yearValue: e.target.value });
        }
    }
}
AgeGate.defaultProps = {
    minmumAge: 18
};
//# sourceMappingURL=AgeGate.js.map