import { mount } from 'enzyme';
import * as React from 'react';
import PlayPauseTrigger from './PlayPauseTrigger';
describe('PlayPauseTrigger ', () => {
    it('PlayPauseTrigger work correctly when clicked', () => {
        const spyChange = jest.fn();
        const wrapper = mount(React.createElement(PlayPauseTrigger, { className: 'PlayPauseTrigger', toggled: true, onChange: spyChange }), { attachTo: document.body.firstElementChild });
        const playPauseTrigger = wrapper.instance();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        playPauseTrigger.render();
        play.click();
        wrapper.update();
        expect(spyChange).toHaveBeenCalled();
        wrapper.unmount();
    });
});
describe('PlayPauseTrigger ', () => {
    it('PlayPauseTrigger when click function undefined', () => {
        const wrapper = mount(React.createElement(PlayPauseTrigger, { className: 'PlayPauseTrigger', toggled: true, onChange: undefined }), { attachTo: document.body.firstElementChild });
        const playPauseTrigger = wrapper.instance();
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];
        expect(play.getAttribute('aria-label')).toBe('play');
        expect(pause.getAttribute('aria-label')).toBe('pause');
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        playPauseTrigger.render();
        play.click();
        wrapper.update();
        wrapper.unmount();
    });
});
//# sourceMappingURL=PlayPauseTrigger.test.js.map