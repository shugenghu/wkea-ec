{"version":3,"file":"stringExtensions.test.js","sourceRoot":"./src/","sources":["videoplayer/components/utilities/stringExtensions.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { string } from 'prop-types';\nimport * as StringExtensions from './stringExtensions';\n\ndescribe('stringextentions.format test', () => {\n    it('should properly handle undefined.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', undefined, undefined, undefined, undefined)).\n            toBe('The  brown  jumped  the  dog');\n    });\n    it('should properly handle null.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', null, null, null, null)).\n            toBe('The  brown  jumped  the  dog');\n    });\n    it('should properly handle emtpy strings.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', '', '', '', '')).\n            toBe('The  brown  jumped  the  dog');\n    });\n    it('should properly handle ints.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 0, 1, 2, 3)).\n            toBe('The 0 brown 1 jumped 2 the 3 dog');\n    });\n    it('should properly handle floats.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 0, 0.1, 0.22, 0.333)).\n            toBe('The 0 brown 0.1 jumped 0.22 the 0.333 dog');\n    });\n    it('should properly handle strings.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 'quick', 'fox', 'over', 'lazy')).\n            toBe('The quick brown fox jumped over the lazy dog');\n    });\n    it('should properly handle a mix of non-empty strings, ints, floats, empty strings, nulls, and undefined.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog {4} {5}', undefined, null, '', 0, 0.1, 'times')).\n            toBe('The  brown  jumped  the 0 dog 0.1 times');\n    });\n    it('should properly handle a non parameterized format specifier.', () => {\n        expect(StringExtensions.format('The quick brown fox jumped over the lazy dog', 'foo', 'bar')).\n            toBe('The quick brown fox jumped over the lazy dog');\n    });\n    it('should properly handle too few parameters.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 'quick', 'fox')).\n            toBe('The quick brown fox jumped {2} the {3} dog');\n    });\n    it('should properly handle too many parameters.', () => {\n        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 'quick', 'fox', 'over', 'lazy', 'smelly', 'fleabag')).\n            toBe('The quick brown fox jumped over the lazy dog');\n    });\n    it('should return empty string is formatSpecifier is null', () => {\n        expect(StringExtensions.format(null!, undefined, undefined, undefined, undefined)).\n            toBe('');\n    });\n});\n\ndescribe('stringExtensions.isNullOrWhiteSpace test', () => {\n    it('should return true for string value', () => {\n        expect(StringExtensions.isNullOrWhiteSpace(' test')).toBe(false);\n    });\n\n    it('should return false for empty value', () => {\n        expect(StringExtensions.isNullOrWhiteSpace('')).toBe(true);\n    });\n\n    it('should return true for null value', () => {\n        const test: string | null = null;\n        expect(StringExtensions.isNullOrWhiteSpace(test!)).toBe(true);\n    });\n});\n\ndescribe('stringExtensions.trim test', () => {\n    it('should return same value for string value', () => {\n        expect(StringExtensions.trim(' test')).toBe('test');\n    });\n\n    it('should return empty value for empty value', () => {\n        expect(StringExtensions.trim('')).toBe('');\n    });\n\n    it('should return empty value for null value', () => {\n        const test: string | null = null;\n        expect(StringExtensions.trim(test!)).toBe(null);\n    });\n\n    it('should return trim value for value', () => {\n        const test: string = 'test string';\n        string.prototype = {\n            trim: null\n        };\n        expect(StringExtensions.trim(test!)).toBe('test string');\n    });\n});\n\ndescribe('stringExtensions.startsWith test', () => {\n    it('should return true for the passed string', () => {\n        expect(StringExtensions.startsWith('The sky is blue', 'The', true)).toBe(true);\n    });\n\n    it('should return false for the passed string', () => {\n        expect(StringExtensions.startsWith('The sky is blue', 'the', false)).toBe(false);\n    });\n\n    it('should return false value for null value', () => {\n        const test: string | null = null;\n        expect(StringExtensions.startsWith(test!, 'the')).toBe(false);\n    });\n});"]}