import { string } from 'prop-types';
import * as StringExtensions from './stringExtensions';
describe('stringextentions.format test', () => {
    it('should properly handle undefined.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', undefined, undefined, undefined, undefined)).
            toBe('The  brown  jumped  the  dog');
    });
    it('should properly handle null.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', null, null, null, null)).
            toBe('The  brown  jumped  the  dog');
    });
    it('should properly handle emtpy strings.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', '', '', '', '')).
            toBe('The  brown  jumped  the  dog');
    });
    it('should properly handle ints.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 0, 1, 2, 3)).
            toBe('The 0 brown 1 jumped 2 the 3 dog');
    });
    it('should properly handle floats.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 0, 0.1, 0.22, 0.333)).
            toBe('The 0 brown 0.1 jumped 0.22 the 0.333 dog');
    });
    it('should properly handle strings.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 'quick', 'fox', 'over', 'lazy')).
            toBe('The quick brown fox jumped over the lazy dog');
    });
    it('should properly handle a mix of non-empty strings, ints, floats, empty strings, nulls, and undefined.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog {4} {5}', undefined, null, '', 0, 0.1, 'times')).
            toBe('The  brown  jumped  the 0 dog 0.1 times');
    });
    it('should properly handle a non parameterized format specifier.', () => {
        expect(StringExtensions.format('The quick brown fox jumped over the lazy dog', 'foo', 'bar')).
            toBe('The quick brown fox jumped over the lazy dog');
    });
    it('should properly handle too few parameters.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 'quick', 'fox')).
            toBe('The quick brown fox jumped {2} the {3} dog');
    });
    it('should properly handle too many parameters.', () => {
        expect(StringExtensions.format('The {0} brown {1} jumped {2} the {3} dog', 'quick', 'fox', 'over', 'lazy', 'smelly', 'fleabag')).
            toBe('The quick brown fox jumped over the lazy dog');
    });
    it('should return empty string is formatSpecifier is null', () => {
        expect(StringExtensions.format(null, undefined, undefined, undefined, undefined)).
            toBe('');
    });
});
describe('stringExtensions.isNullOrWhiteSpace test', () => {
    it('should return true for string value', () => {
        expect(StringExtensions.isNullOrWhiteSpace(' test')).toBe(false);
    });
    it('should return false for empty value', () => {
        expect(StringExtensions.isNullOrWhiteSpace('')).toBe(true);
    });
    it('should return true for null value', () => {
        const test = null;
        expect(StringExtensions.isNullOrWhiteSpace(test)).toBe(true);
    });
});
describe('stringExtensions.trim test', () => {
    it('should return same value for string value', () => {
        expect(StringExtensions.trim(' test')).toBe('test');
    });
    it('should return empty value for empty value', () => {
        expect(StringExtensions.trim('')).toBe('');
    });
    it('should return empty value for null value', () => {
        const test = null;
        expect(StringExtensions.trim(test)).toBe(null);
    });
    it('should return trim value for value', () => {
        const test = 'test string';
        string.prototype = {
            trim: null
        };
        expect(StringExtensions.trim(test)).toBe('test string');
    });
});
describe('stringExtensions.startsWith test', () => {
    it('should return true for the passed string', () => {
        expect(StringExtensions.startsWith('The sky is blue', 'The', true)).toBe(true);
    });
    it('should return false for the passed string', () => {
        expect(StringExtensions.startsWith('The sky is blue', 'the', false)).toBe(false);
    });
    it('should return false value for null value', () => {
        const test = null;
        expect(StringExtensions.startsWith(test, 'the')).toBe(false);
    });
});
//# sourceMappingURL=stringExtensions.test.js.map