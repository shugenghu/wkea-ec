import { isNullOrWhiteSpace, trim } from './stringExtensions';
export function getText(element) {
    return !!element ? element.textContent || '' : '';
}
export function addClass(element, cssClass) {
    if ((!!element) && (!isNullOrWhiteSpace(cssClass)) && (!hasClass(element, cssClass))) {
        if (element.classList) {
            element.classList.add(cssClass);
        }
        else {
            element.className = trim(`${element.className} ${cssClass}`);
        }
    }
}
export function hasClass(element, cssClass) {
    if ((!element) || isNullOrWhiteSpace(cssClass)) {
        return false;
    }
    else if (element.classList) {
        return element.classList.contains(cssClass);
    }
    else {
        return (`' ' ${element.className} ' '`).indexOf(`' ' ${trim(cssClass)}  ' '`) > -1;
    }
}
export function nodeListToArray(nodeList) {
    if (!nodeList) {
        return [];
    }
    const elements = [];
    for (let n = 0; n < nodeList.length; n++) {
        elements.push(nodeList[n]);
    }
    return elements;
}
export function selectElements(selector, context) {
    return selectElementsT(selector, context);
}
export function selectElementsT(selector, context) {
    if (isNullOrWhiteSpace(selector) || selector === '#') {
        return [];
    }
    const currentContext = context || document;
    if (/^[\#.]?[\w-]+$/.test(selector)) {
        switch (selector[0]) {
            case '.':
                if (currentContext.getElementsByClassName) {
                    return nodeListToArray(currentContext.getElementsByClassName(selector.slice(1)));
                }
                else {
                    return nodeListToArray(currentContext.querySelectorAll(selector));
                }
            case '#':
                const element = currentContext.querySelector(selector);
                return (element ? [element] : []);
        }
        return nodeListToArray(currentContext.getElementsByTagName(selector));
    }
    return nodeListToArray(currentContext.querySelectorAll(selector));
}
export function css(element, property, value) {
    if (!element) {
        return null;
    }
    if (!!value || value === '') {
        element.style[property] = value;
    }
    else {
        value = element.style[property];
        if (isNullOrWhiteSpace(value)) {
            value = getComputedStyle(element);
            value = value[property];
        }
        return value;
    }
}
export function removeInnerHtml(parentElement) {
    if (parentElement) {
        parentElement.innerHTML = '';
    }
}
export function selectFirstElement(selector, context) {
    const elementsSelected = selectElementsT(selector, context);
    return (!elementsSelected || !elementsSelected.length) ? null : elementsSelected[0];
}
//# sourceMappingURL=htmlExtensions.js.map