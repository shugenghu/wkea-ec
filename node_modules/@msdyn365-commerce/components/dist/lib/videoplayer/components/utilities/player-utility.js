export class PlayerUtility {
    static ajax(url, done, failed) {
        if (!url) {
            return;
        }
        let ajaxRequest = null;
        if (window.XDomainRequest) {
            ajaxRequest = new XDomainRequest();
            ajaxRequest.onload = () => {
                done && done(ajaxRequest.responseText);
                PlayerUtility._removeFromPendingAjaxRequests(ajaxRequest);
            };
            PlayerUtility.pendingAjaxRequests.push(ajaxRequest);
        }
        else if (window.XMLHttpRequest) {
            ajaxRequest = new XMLHttpRequest();
            ajaxRequest.onreadystatechange = () => {
                if (ajaxRequest.readyState === 4) {
                    let result = null;
                    if (ajaxRequest.status === 200) {
                        result = ajaxRequest.responseText;
                    }
                    done && done(result);
                }
                else {
                }
            };
        }
        if (ajaxRequest) {
            ajaxRequest.ontimeout = ajaxRequest.onerror = () => {
                PlayerUtility._removeFromPendingAjaxRequests(ajaxRequest);
                failed && failed();
            };
            ajaxRequest.open('GET', url, true);
            ajaxRequest.send();
        }
    }
    static _removeFromPendingAjaxRequests(obj) {
        let index = -1;
        for (let i = 0; i < PlayerUtility.pendingAjaxRequests.length; i++) {
            if (obj === PlayerUtility.pendingAjaxRequests[i]) {
                index = i;
                break;
            }
        }
        if (index >= 0) {
            PlayerUtility.pendingAjaxRequests.splice(index, 1);
        }
    }
}
PlayerUtility.pendingAjaxRequests = [];
//# sourceMappingURL=player-utility.js.map