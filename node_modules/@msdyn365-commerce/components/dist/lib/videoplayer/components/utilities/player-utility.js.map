{"version":3,"file":"player-utility.js","sourceRoot":"./src/","sources":["videoplayer/components/utilities/player-utility.ts"],"names":[],"mappings":"AAuBA,MAAM,OAAO,aAAa;IAsBhB,MAAM,CAAC,IAAI,CAAC,GAAW,EAAE,IAAc,EAAE,MAAiB;QAChE,IAAI,CAAC,GAAG,EAAE;YACN,OAAO;SACV;QAGD,IAAI,WAAW,GAAQ,IAAI,CAAC;QAG5B,IAAI,MAAM,CAAC,cAAc,EAAE;YACvB,WAAW,GAAG,IAAI,cAAc,EAAE,CAAC;YAEnC,WAAW,CAAC,MAAM,GAAG,GAAG,EAAE;gBACtB,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;gBACvC,aAAa,CAAC,8BAA8B,CAAC,WAAW,CAAC,CAAC;YAC9D,CAAC,CAAC;YAKF,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACvD;aAAM,IAAI,MAAM,CAAC,cAAc,EAAE;YAC9B,WAAW,GAAG,IAAI,cAAc,EAAE,CAAC;YAEnC,WAAW,CAAC,kBAAkB,GAAG,GAAG,EAAE;gBAClC,IAAI,WAAW,CAAC,UAAU,KAAK,CAAC,EAAE;oBAE9B,IAAI,MAAM,GAAQ,IAAI,CAAC;oBACvB,IAAI,WAAW,CAAC,MAAM,KAAK,GAAG,EAAE;wBAC5B,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC;qBACrC;oBACD,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;iBACxB;qBAAM;iBAGN;YACL,CAAC,CAAC;SACL;QAGD,IAAI,WAAW,EAAE;YACT,WAAW,CAAC,SAAS,GAAG,WAAW,CAAC,OAAO,GAAG,GAAG,EAAE;gBAC/C,aAAa,CAAC,8BAA8B,CAAC,WAAW,CAAC,CAAC;gBAC1D,MAAM,IAAI,MAAM,EAAE,CAAC;YACvB,CAAC,CAAC;YACF,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YACnC,WAAW,CAAC,IAAI,EAAE,CAAC;SACtB;IACL,CAAC;IAUM,MAAM,CAAC,8BAA8B,CAAC,GAAQ;QAErD,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/D,IAAI,GAAG,KAAK,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE;gBAC9C,KAAK,GAAG,CAAC,CAAC;gBACV,MAAM;aACT;SACJ;QACD,IAAI,KAAK,IAAI,CAAC,EAAE;YACZ,aAAa,CAAC,mBAAmB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACtD;IACL,CAAC;;AAlFiB,iCAAmB,GAAQ,EAAE,CAAC","sourcesContent":["/**\n * @name - window\n * @description - typescript declaration for window object\n * @type {object}\n */\n// tslint:disable-next-line: no-any\ndeclare var  window: any;\n\n/**\n * @name - XDomainRequest\n * @description - typescript declaration for XDomainRequest object\n * @type {object}\n */\n// tslint:disable-next-line: no-any\ndeclare var XDomainRequest: any;\n\n/**\n * PlayerUtilities class\n * @classdesc - The PlayerOptions class is used to pass player options settings to the player.\n *              It supplies default values which can be overridden via overrides passed to the constructor.\n * @export\n */\n// tslint:disable-next-line: no-unnecessary-class\nexport class PlayerUtility {\n\n    /**\n     * @name - pendingAjaxRequests\n     * @description -  array to hold pending ajax requests.\n     * @private\n     * @static\n     * @returns {any}\n     */\n    // tslint:disable-next-line: no-any\n   private static pendingAjaxRequests: any = [];\n\n    /**\n     * @name - ajax\n     * @description -  Gets request data using ajax call.\n     * @private\n     * @static\n     * @param {string} url - Url from where to fetch data.\n     * @param {Function} done - On success callback function.\n     * @param {Function} failed - On failed callback function.\n     * @returns {void}\n     */\n   public static ajax(url: string, done: Function, failed?: Function): void {\n    if (!url) {\n        return;\n    }\n\n    // tslint:disable-next-line: no-any\n    let ajaxRequest: any = null;\n\n    // for IE 9 and below use XDomainRequest\n    if (window.XDomainRequest) {\n        ajaxRequest = new XDomainRequest();\n\n        ajaxRequest.onload = () => {\n            done && done(ajaxRequest.responseText);\n            PlayerUtility._removeFromPendingAjaxRequests(ajaxRequest);\n        };\n\n        // IE8 and IE9 have a bug where garbage collector will clear XDomainRequest object\n        // before the call is completed. Thus add a reference to the object so that request\n        // is not aborted by garbage collector.\n        PlayerUtility.pendingAjaxRequests.push(ajaxRequest);\n    } else if (window.XMLHttpRequest) {\n        ajaxRequest = new XMLHttpRequest();\n\n        ajaxRequest.onreadystatechange = () => {\n            if (ajaxRequest.readyState === 4) {\n                // tslint:disable-next-line: no-any\n                let result: any = null;\n                if (ajaxRequest.status === 200) {\n                    result = ajaxRequest.responseText;\n                }\n                done && done(result);\n            } else {\n                // The following console.log useful for debugging and is left in commented out for easy restoration.\n                // console.log('Localization-helper: readystate(' + xhttp.readyState + ') status(' + xhttp.status + ')');\n            }\n        };\n    }\n\n    // attach common event handlers and make the request.\n    if (ajaxRequest) {\n            ajaxRequest.ontimeout = ajaxRequest.onerror = () =>  {\n                PlayerUtility._removeFromPendingAjaxRequests(ajaxRequest);\n                failed && failed();\n            };\n            ajaxRequest.open('GET', url, true);\n            ajaxRequest.send();\n        }\n    }\n\n    /**\n     * @name - removeFromPendingAjaxRequests\n     * @description - removes object from array to hold pending ajax requests.\n     * @private\n     * @static\n     * @returns {any}\n     */\n    // tslint:disable-next-line: no-any\n   private static _removeFromPendingAjaxRequests(obj: any): void {\n    // when the call is completed remove it from the array\n    let index = -1;\n    for (let i = 0; i < PlayerUtility.pendingAjaxRequests.length; i++) {\n        if (obj === PlayerUtility.pendingAjaxRequests[i]) {\n            index = i;\n            break;\n        }\n    }\n    if (index >= 0) {\n        PlayerUtility.pendingAjaxRequests.splice(index, 1);\n    }\n}\n}"]}