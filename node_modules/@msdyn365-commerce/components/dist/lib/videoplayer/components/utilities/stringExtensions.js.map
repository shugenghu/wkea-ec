{"version":3,"file":"stringExtensions.js","sourceRoot":"./src/","sources":["videoplayer/components/utilities/stringExtensions.ts"],"names":[],"mappings":"AACA,MAAM,UAAU,MAAM,CAAC,eAAuB,EAAE,GAAG,UAAiB;IAChE,IAAI,CAAC,eAAe,EAAE;QAClB,OAAO,EAAE,CAAC;KACb;IAED,OAAO,eAAe,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,KAAa,EAAE,KAAa,EAAE,EAAE;QAExE,IAAI,KAAK,IAAI,UAAU,CAAC,MAAM,EAAE;YAC5B,OAAO,KAAK,CAAC;SAChB;QAED,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAEhC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,EAAE;YACrC,OAAO,EAAE,CAAC;SACb;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC;AAUD,MAAM,UAAU,kBAAkB,CAAC,KAAa;IAC5C,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACrE,CAAC;AAUD,MAAM,UAAU,IAAI,CAAC,KAAa;IAE9B,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,EAAE;QACvC,OAAO,KAAK,CAAC;KAChB;IAED,IAAI,KAAK,CAAC,IAAI,EAAE;QACZ,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC;KACvB;IAED,OAAO,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AAC3C,CAAC;AAWD,MAAM,UAAU,UAAU,CAAC,KAAa,EAAE,MAAc,EAAE,aAAsB,IAAI;IAChF,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE;QACnB,OAAO,KAAK,CAAC;KAChB;IAED,IAAI,UAAU,EAAE;QACZ,KAAK,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAClC,MAAM,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC;KACvC;IAED,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE;QACpB,OAAO,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KACrC;IAED,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC","sourcesContent":["// tslint:disable-next-line:no-any\nexport function format(formatSpecifier: string, ...parameters: any[]): string {\n    if (!formatSpecifier) {\n        return '';\n    }\n\n    return formatSpecifier.replace(/{(\\d+)}/g, (match: string, index: number) => {\n\n        if (index >= parameters.length) {\n            return match;\n        }\n\n        const value = parameters[index];\n\n        if (typeof value !== 'number' && !value) {\n            return '';\n        }\n\n        if (typeof value === 'string') {\n            return value;\n        }\n\n        return value.toString();\n    });\n}\n\n/*\n* @name - isNullOrWhiteSpace\n* @description - Determines if the specified string is undefined, null, empty, or whitespace.\n* @export\n* @public\n* @param {string} value - The string to examine.\n* @returns {boolean} - True if the value is undefined, null, empty, or whitespace, otherwise false.\n*/\nexport function isNullOrWhiteSpace(value: string): boolean {\n    return (!value) || (typeof value !== 'string') || (!trim(value));\n}\n\n/*\n* @name - trim\n* @description - Trims leading and trailing whitespace from the string.\n* @export\n* @public\n* @param {string} value - The string to examine.\n* @returns {string} - The trimmed string.\n*/\nexport function trim(value: string): string {\n    // Any flavor of !value (ie. null/undefined/'') should return itself.\n    if (!value || (typeof value !== 'string')) {\n        return value;\n    }\n\n    if (value.trim) {\n        return value.trim();\n    }\n\n    return value.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * @name - startsWith\n * @description - Determines if the specified string starts with the specified value.\n * @export\n * @public\n * @param {string} value - The string to look in.\n * @param {string} prefix - The prefix to look for.\n * @returns {boolean} - True if the string starts with the prefix, otherwise false.\n */\nexport function startsWith(value: string, prefix: string, ignoreCase: boolean = true): boolean {\n    if (!value || !prefix) {\n        return false;\n    }\n\n    if (ignoreCase) {\n        value = value.toLocaleLowerCase();\n        prefix = prefix.toLocaleLowerCase();\n    }\n\n    if ((value).startsWith) {\n        return (value).startsWith(prefix);\n    }\n\n    return value.indexOf(prefix) === 0;\n}"]}