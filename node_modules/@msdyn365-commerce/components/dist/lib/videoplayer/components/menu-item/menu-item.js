import * as React from 'react';
export default class MenuItem extends React.PureComponent {
    constructor(props) {
        super(props);
        this.menuItem = React.createRef();
        this._onClick = this._onClick.bind(this);
        this._onFocus = this._onFocus.bind(this);
        this._onMouseOver = this._onMouseOver.bind(this);
        this._onMouseOut = this._onMouseOut.bind(this);
        this._onKeyDown = this._onKeyDown.bind(this);
        this._onKeyUp = this._onKeyUp.bind(this);
        this._onBlur = this._onBlur.bind(this);
    }
    render() {
        const { ...props } = this.props;
        let className = this.props.className;
        const hasChildren = props.subMenu ? true : false;
        if (hasChildren) {
            className += ' menu__parent menu__position__right';
        }
        else if (this.props.selected) {
            className += ' menu__selected menu__position__right';
        }
        else if (this.props.isBackButton) {
            className += ' menu__back menu__position__left';
        }
        return (React.createElement("li", { id: props.id, role: 'presentation' },
            React.createElement("button", Object.assign({ ref: this.menuItem, className: className, "data-has-children": hasChildren }, (props.data ? { 'data-info': props.data } : {}), { role: props.selectable ? `menuitemradio` : `menuitem`, "aria-setsize": props.itemCount, "aria-posinset": props.itemIndex + 1, "data-itemindex": props.itemIndex, "data-isbackbutton": props.isBackButton }, (props.selectable && props.selected ? { 'aria-selected': true, 'aria-checked': true } : {}), (props.selectable ? { 'data-video-selectable': true } : {}), (hasChildren ? { 'aria-expanded': false, 'aria-haspopup': true } : {}), (props.persistOnClick ? { 'data-persist': true } : {}), (props.ariaLabel ? { 'aria-label': props.ariaLabel } : {}), (props.language ? { lang: props.language } : {}), (props.hasMouseHoverEvents ? { 'data-has-events': props.hasMouseHoverEvents } : {}), { onClick: this._onClick, onFocus: this._onFocus, onMouseOver: this._onMouseOver, onMouseOut: this._onMouseOut, onKeyDown: this._onKeyDown, onKeyUp: this._onKeyUp, onBlur: this._onBlur }),
                props.image && React.createElement("img", { src: props.image, alt: props.imageAlt || '', className: 'menu__image' }),
                props.label)));
    }
    componentDidMount() {
        if (this.props.hasFocus) {
            setTimeout(() => {
                this.menuItem.current.focus();
            }, 0);
        }
    }
    componentDidUpdate() {
        if (this.props.hasFocus) {
            setTimeout(() => {
                this.menuItem.current.focus();
            }, 0);
        }
    }
    _onClick(event) {
        this.props.onClick(event);
    }
    _onFocus(event) {
        this.props.onFocus(event);
    }
    _onMouseOver(event) {
        this.props.onMouseOver(event);
    }
    _onMouseOut(event) {
        this.props.onMouseOut(event);
    }
    _onKeyDown(event) {
        event.stopPropagation();
        this.props.onKeyDown(event);
    }
    _onKeyUp(event) {
        event.stopPropagation();
        this.props.onKeyUp(event);
    }
    _onBlur(event) {
        this.props.onBlur(event);
    }
}
//# sourceMappingURL=menu-item.js.map