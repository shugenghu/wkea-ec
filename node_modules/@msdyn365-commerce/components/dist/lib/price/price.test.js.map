{"version":3,"file":"price.test.js","sourceRoot":"./src/","sources":["price/price.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,oBAAoB,EAAgB,MAAM,yBAAyB,CAAC;AAE7E,OAAO,EAAC,cAAc,EAAC,MAAM,UAAU,CAAC;AAExC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACnB,MAAM,eAAe,GAAG,oBAAoB,CAAC,EAAE,CAA+B,CAAC;IAE/E,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACzC,MAAM,YAAY,GAAG,EAAC,uBAAuB,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAiB,CAAC;QAClF,MAAM,KAAK,GAAG,MAAM,CAAC,CACD,oBAAC,cAAc,IACX,EAAE,EAAC,IAAI,EACP,QAAQ,EAAC,WAAW,EACpB,OAAO,EAAE,eAAe,EACxB,IAAI,EAAE,EAAC,KAAK,EAAE,YAAY,EAAC,EAC3B,aAAa,EAAC,MAAM,EACpB,iBAAiB,EAAC,UAAU,EAC5B,gBAAgB,EAAC,SAAS,GAC5B,CACD,CAAC,CAAC;QACvB,MAAM,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC5D,MAAM,YAAY,GAAG,EAAC,uBAAuB,EAAE,EAAE,EAAiB,CAAC;QACnE,MAAM,KAAK,GAAG,MAAM,CAAC,CACD,oBAAC,cAAc,IACX,SAAS,EAAC,KAAK,EACf,EAAE,EAAC,IAAI,EACP,QAAQ,EAAC,WAAW,EACpB,OAAO,EAAE,eAAe,EACxB,IAAI,EAAE,EAAC,KAAK,EAAE,YAAY,EAAC,EAC3B,aAAa,EAAC,MAAM,EACpB,iBAAiB,EAAC,UAAU,EAC5B,gBAAgB,EAAC,SAAS,GAC5B,CACD,CAAC,CAAC;QACvB,MAAM,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QACxC,MAAM,YAAY,GAAG,EAAC,uBAAuB,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAiB,CAAC;QACjF,MAAM,KAAK,GAAG,MAAM,CAAC,CACD,oBAAC,cAAc,IACX,EAAE,EAAC,IAAI,EACP,QAAQ,EAAC,WAAW,EACpB,OAAO,EAAE,eAAe,EACxB,IAAI,EAAE,EAAC,KAAK,EAAE,YAAY,EAAC,EAC3B,aAAa,EAAC,MAAM,EACpB,iBAAiB,EAAC,UAAU,EAC5B,gBAAgB,EAAC,SAAS,GAC5B,CACD,CAAC,CAAC;QACvB,MAAM,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QAC/C,MAAM,YAAY,GAAG,EAAkB,CAAC;QACxC,MAAM,KAAK,GAAG,MAAM,CAAC,CACD,oBAAC,cAAc,IACX,EAAE,EAAC,IAAI,EACP,QAAQ,EAAC,WAAW,EACpB,OAAO,EAAE,eAAe,EACxB,IAAI,EAAE,EAAC,KAAK,EAAE,YAAY,EAAC,EAC3B,aAAa,EAAC,MAAM,EACpB,iBAAiB,EAAC,UAAU,EAC5B,gBAAgB,EAAC,SAAS,GAC5B,CACD,CAAC,CAAC;QACvB,MAAM,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC3C,MAAM,YAAY,GAAG,EAAC,uBAAuB,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAiB,CAAC;QAClF,MAAM,KAAK,GAAG,MAAM,CAAC,CACD,oBAAC,cAAc,IACX,EAAE,EAAC,IAAI,EACP,QAAQ,EAAC,WAAW,EACpB,SAAS,EAAC,KAAK,EACf,OAAO,EAAE,eAAe,EACxB,IAAI,EAAE,EAAC,KAAK,EAAE,YAAY,EAAC,EAC3B,aAAa,EAAC,MAAM,EACpB,iBAAiB,EAAC,UAAU,EAC5B,gBAAgB,EAAC,SAAS,EAC1B,WAAW,EAAC,wBAAwB,GACtC,CACD,CAAC,CAAC;QACvB,MAAM,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { render } from 'enzyme';\nimport * as React from 'react';\n\nimport { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';\nimport { ProductPrice } from '@msdyn365-commerce/retail-proxy';\nimport {PriceComponent} from '../index';\n\ndescribe('Price', () => {\n    const mockCoreContext = buildMockCoreContext({}) as ICoreContext<ProductPrice>;\n\n    it('renders correctly with all params', () => {\n        const productPrice = {CustomerContextualPrice: 55, BasePrice: 85} as ProductPrice;\n        const price = render((\n                            <PriceComponent\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                                data={{price: productPrice}}\n                                freePriceText='free'\n                                originalPriceText='original'\n                                currentPriceText='current'\n                            />\n                            ));\n        expect(price).toMatchSnapshot();\n    });\n\n    it('renders correctly with just CustomerContextualPrice ', () => {\n        const productPrice = {CustomerContextualPrice: 55} as ProductPrice;\n        const price = render((\n                            <PriceComponent\n                                className='foo'\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                                data={{price: productPrice}}\n                                freePriceText='free'\n                                originalPriceText='original'\n                                currentPriceText='current'\n                            />\n                            ));\n        expect(price).toMatchSnapshot();\n    });\n\n    it('renders correctly with free text', () => {\n        const productPrice = {CustomerContextualPrice: 0, BasePrice: 85} as ProductPrice;\n        const price = render((\n                            <PriceComponent\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                                data={{price: productPrice}}\n                                freePriceText='free'\n                                originalPriceText='original'\n                                currentPriceText='current'\n                            />\n                            ));\n        expect(price).toMatchSnapshot();\n    });\n\n    it('renders correctly with undefined values', () => {\n        const productPrice = {} as ProductPrice;\n        const price = render((\n                            <PriceComponent\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                                data={{price: productPrice}}\n                                freePriceText='free'\n                                originalPriceText='original'\n                                currentPriceText='current'\n                            />\n                            ));\n        expect(price).toMatchSnapshot();\n    });\n\n    it('renders correctly with savings text', () => {\n        const productPrice = {CustomerContextualPrice: 15, BasePrice: 85} as ProductPrice;\n        const price = render((\n                            <PriceComponent\n                                id='id'\n                                typeName='type-name'\n                                className='foo'\n                                context={mockCoreContext}\n                                data={{price: productPrice}}\n                                freePriceText='free'\n                                originalPriceText='original'\n                                currentPriceText='current'\n                                savingsText='You are saving so much'\n                            />\n                            ));\n        expect(price).toMatchSnapshot();\n    });\n});"]}