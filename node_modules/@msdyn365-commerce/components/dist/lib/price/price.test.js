import { render } from 'enzyme';
import * as React from 'react';
import { buildMockCoreContext } from '@msdyn365-commerce/core';
import { PriceComponent } from '../index';
describe('Price', () => {
    const mockCoreContext = buildMockCoreContext({});
    it('renders correctly with all params', () => {
        const productPrice = { CustomerContextualPrice: 55, BasePrice: 85 };
        const price = render((React.createElement(PriceComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: { price: productPrice }, freePriceText: 'free', originalPriceText: 'original', currentPriceText: 'current' })));
        expect(price).toMatchSnapshot();
    });
    it('renders correctly with just CustomerContextualPrice ', () => {
        const productPrice = { CustomerContextualPrice: 55 };
        const price = render((React.createElement(PriceComponent, { className: 'foo', id: 'id', typeName: 'type-name', context: mockCoreContext, data: { price: productPrice }, freePriceText: 'free', originalPriceText: 'original', currentPriceText: 'current' })));
        expect(price).toMatchSnapshot();
    });
    it('renders correctly with free text', () => {
        const productPrice = { CustomerContextualPrice: 0, BasePrice: 85 };
        const price = render((React.createElement(PriceComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: { price: productPrice }, freePriceText: 'free', originalPriceText: 'original', currentPriceText: 'current' })));
        expect(price).toMatchSnapshot();
    });
    it('renders correctly with undefined values', () => {
        const productPrice = {};
        const price = render((React.createElement(PriceComponent, { id: 'id', typeName: 'type-name', context: mockCoreContext, data: { price: productPrice }, freePriceText: 'free', originalPriceText: 'original', currentPriceText: 'current' })));
        expect(price).toMatchSnapshot();
    });
    it('renders correctly with savings text', () => {
        const productPrice = { CustomerContextualPrice: 15, BasePrice: 85 };
        const price = render((React.createElement(PriceComponent, { id: 'id', typeName: 'type-name', className: 'foo', context: mockCoreContext, data: { price: productPrice }, freePriceText: 'free', originalPriceText: 'original', currentPriceText: 'current', savingsText: 'You are saving so much' })));
        expect(price).toMatchSnapshot();
    });
});
//# sourceMappingURL=price.test.js.map