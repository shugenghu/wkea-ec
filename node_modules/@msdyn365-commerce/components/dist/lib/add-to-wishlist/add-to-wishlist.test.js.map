{"version":3,"file":"add-to-wishlist.test.js","sourceRoot":"./src/","sources":["add-to-wishlist/add-to-wishlist.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { mount, render } from 'enzyme';\nimport * as React from 'react';\n\nimport * as RetailActions from '@msdyn365-commerce-modules/retail-actions';\nimport { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';\nimport { SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport * as Actions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CommerceListsDataActions.g';\nimport {AddToWishlistComponent} from '../index';\n\ndescribe('AddToWishlist', () => {\n    let mockCoreContext: ICoreContext;\n    const basicProduct: SimpleProduct = {RecordId: 55555} as SimpleProduct;\n    const basicProductMissingDimensions: SimpleProduct = {RecordId: 55555, Dimensions: [{DimensionTypeValue: 0}] } as SimpleProduct;\n    const basicProductNoMissingDimensions: SimpleProduct = {RecordId: 55555, Dimensions: [{DimensionTypeValue: 0, DimensionValue: {RecordId: 1, Value: 'Set'}}] } as SimpleProduct;\n    const addToWishlistText = 'Add to wishlist';\n    const removeToWishlistText = 'Remove to wishlist';\n    const wishlistsWithProduct = [{Id: 333, CommerceListLines: [{ProductId: basicProduct.RecordId}]}];\n    const wishlistsWithoutProduct = [{Id: 333, CommerceListLines: [{ProductId: 444}]}];\n    const flushPromises = () => new Promise(setImmediate);\n\n    beforeEach(() => {\n        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: false, outOfStockThreshold: 5}}}) as ICoreContext;\n        // @ts-ignore\n        Actions.addLinesAsync = jest.fn().mockImplementation(() => Promise.resolve({}));\n        // @ts-ignore\n        Actions.removeLinesAsync = jest.fn().mockImplementation(() => Promise.resolve({}));\n        // @ts-ignore\n        Actions.createCommerceListAsync = jest.fn().mockImplementation(() => Promise.resolve({Id: 1}));\n    });\n\n    it('renders correctly with all params', () => {\n        const addToWishlist = render((\n                            <AddToWishlistComponent\n                                addToWishlistButtonText={addToWishlistText}\n                                removeFromWishlistButtonText={removeToWishlistText}\n                                nameOfWishlist={'My Wishlist'}\n                                id='id'\n                                typeName='type-name'\n                                context={mockCoreContext}\n                                data={{product: basicProduct, wishlists: []}}\n                            />\n                            ));\n        expect(addToWishlist).toMatchSnapshot();\n    });\n\n    it('doesProductExistInWishlist is false when wishlists is undefined', () => {\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct}}\n            />\n        ));\n        const button = addToWishlist.find('button').first();\n        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);\n        addToWishlist.unmount();\n    });\n\n    it('doesProductExistInWishlist is false when the array of wishlists is empty', () => {\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct, wishlists: []}}\n            />\n        ));\n        const button = addToWishlist.find('button').first();\n        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);\n        addToWishlist.unmount();\n    });\n\n    it('doesProductExistInWishlist is false when the wishlist is empty', () => {\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n\n        let addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct, wishlists: [{Id: 333}]}}\n            />\n        ));\n        let button = addToWishlist.find('button').first();\n        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);\n        addToWishlist.unmount();\n\n        addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct, wishlists: [{Id: 333, CommerceListLines: []}]}}\n            />\n        ));\n\n        button = addToWishlist.find('button').first();\n        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);\n        addToWishlist.unmount();\n    });\n\n    it('doesProductExistInWishlist is false when the wishlist doesn not contain the product', () => {\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct, wishlists: wishlistsWithoutProduct}}\n            />\n        ));\n\n        const button = addToWishlist.find('button').first();\n        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);\n        addToWishlist.unmount();\n    });\n\n    it('doesProductExistInWishlist is true when the wishlist does contain the product', () => {\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct, wishlists: wishlistsWithProduct}}\n            />\n        ));\n\n        const button = addToWishlist.find('button').first();\n        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(removeToWishlistText);\n        addToWishlist.unmount();\n    });\n\n    it('doesProductExistInWishlist is true when the wishlist does contain the product', () => {\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct, wishlists: wishlistsWithProduct}}\n            />\n        ));\n\n        const button = addToWishlist.find('button').first();\n        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(removeToWishlistText);\n        addToWishlist.unmount();\n    });\n\n    it('doesProductExistInWishlist is true when the wishlist does contain the product', () => {\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct, wishlists: wishlistsWithProduct}}\n            />\n        ));\n\n        const button = addToWishlist.find('button').first();\n        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(removeToWishlistText);\n        addToWishlist.unmount();\n    });\n\n    it('If the user is not authenticated when the wishlist button is clicked', () => {\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        mockCoreContext.request.user.isAuthenticated = false;\n        mockCoreContext.request.user.signInUrl = 'foo';\n        window.location.assign = jest.fn();\n\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                data={{product: basicProduct}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        expect(window.location.assign).toHaveBeenCalledWith('foo');\n\n        addToWishlist.unmount();\n    });\n    it('Creates wishlist and adds wishlist items when the user does not have any wishlist', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onSuccess={onClick}\n                data={{product: basicProduct, wishlists: []}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n        expect(Actions.createCommerceListAsync).toHaveBeenCalled();\n        expect(Actions.addLinesAsync).toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith({status: 'ADDED'});\n        addToWishlist.unmount();\n    });\n\n    it('Adds item to the wishlist and if an itemID is provided, passes that in the callback', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const mockCartLine = {\n            Id: '1234'\n        };\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                // @ts-ignore partial mock\n                cartline={mockCartLine}\n                typeName='type-name'\n                context={mockCoreContext}\n                onSuccess={onClick}\n                data={{product: basicProduct, wishlists: []}}\n            />\n        ));\n        const button = addToWishlist.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n        expect(Actions.createCommerceListAsync).toHaveBeenCalled();\n        expect(Actions.addLinesAsync).toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith({status: 'ADDED'}, {Id:'1234'});\n        addToWishlist.unmount();\n    });\n\n    it('Doesnt add wishlist line and returns error when creating wishlist fails', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        // @ts-ignore\n        Actions.createCommerceListAsync = jest.fn().mockImplementation(() => Promise.reject({Id: 1}));\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onError={onClick}\n                data={{product: basicProduct, wishlists: []}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n        expect(Actions.createCommerceListAsync).toHaveBeenCalled();\n        expect(Actions.addLinesAsync).not.toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith({status: 'FAILED'});\n        addToWishlist.unmount();\n    });\n\n    it('Returns Error when adding a wishlist line fails', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        // @ts-ignore\n        Actions.addLinesAsync = jest.fn().mockImplementation(() => Promise.reject({}));\n\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onError={onClick}\n                data={{product: basicProduct, wishlists: wishlistsWithoutProduct}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n\n        expect(Actions.addLinesAsync).toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith({status: 'FAILED'});\n        addToWishlist.unmount();\n    });\n\n    it('Returns Error and does not try to add line when product is missing dimensions and canAddMasterProduct is false', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onError={onClick}\n                canAddMasterProduct={false}\n                data={{product: basicProductMissingDimensions, wishlists: wishlistsWithoutProduct}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n\n        expect(Actions.addLinesAsync).not.toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith(expect.objectContaining({status: 'MISSINGDIMENSION'}));\n        addToWishlist.unmount();\n    });\n\n    it('Returns sucess and does try to add line when product is not missing dimensions and canAddMasterProduct is false', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onSuccess={onClick}\n                canAddMasterProduct={false}\n                data={{product: basicProductNoMissingDimensions, wishlists: wishlistsWithoutProduct}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n\n        expect(Actions.addLinesAsync).toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith({status: 'ADDED'});\n        addToWishlist.unmount();\n    });\n\n    it('Returns Error and does not try to add line when product is missing dimensions and canAddMasterProduct is not set', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onError={onClick}\n                data={{product: basicProductMissingDimensions, wishlists: wishlistsWithoutProduct}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n\n        expect(Actions.addLinesAsync).not.toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith(expect.objectContaining({status: 'MISSINGDIMENSION'}));\n        addToWishlist.unmount();\n    });\n\n    it('Returns success and does try to add line when product is missing dimensions and canAddMasterProduct is true', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onSuccess={onClick}\n                canAddMasterProduct={true}\n                data={{product: basicProductMissingDimensions, wishlists: wishlistsWithoutProduct}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n\n        expect(Actions.addLinesAsync).toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith({status: 'ADDED'});\n        addToWishlist.unmount();\n    });\n\n    it('Removes the item from the wishlist', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        // @ts-ignore\n        Actions.removeLinesAsync = jest.fn().mockImplementation(() => Promise.resolve({}));\n        mockCoreContext.actionContext.update = jest.fn();\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onSuccess={onClick}\n                data={{product: basicProduct, wishlists: wishlistsWithProduct}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n\n        expect(Actions.removeLinesAsync).toHaveBeenCalled();\n        expect(mockCoreContext.actionContext.update).toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith({status: 'REMOVED'});\n        addToWishlist.unmount();\n    });\n\n    it('Returns Error when removing a wishlist line fails', async () => {\n        mockCoreContext.request.user.isAuthenticated = true;\n        // @ts-ignore\n        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));\n        // @ts-ignore\n        Actions.removeLinesAsync = jest.fn().mockImplementation(() => Promise.reject({}));\n\n        const onClick = jest.fn();\n        const addToWishlist = mount((\n            <AddToWishlistComponent\n                addToWishlistButtonText={addToWishlistText}\n                removeFromWishlistButtonText={removeToWishlistText}\n                nameOfWishlist={'My Wishlist'}\n                id='id'\n                typeName='type-name'\n                context={mockCoreContext}\n                onError={onClick}\n                data={{product: basicProduct, wishlists: wishlistsWithProduct}}\n            />\n        ));\n        const button = addToWishlist!.find('button').first();\n        button.simulate('click');\n        await flushPromises();\n\n        expect(Actions.removeLinesAsync).toHaveBeenCalled();\n        expect(onClick).toHaveBeenCalledWith({status: 'FAILED'});\n        addToWishlist.unmount();\n    });\n});"]}