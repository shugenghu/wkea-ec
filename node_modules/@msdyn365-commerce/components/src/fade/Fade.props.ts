import { EndHandler, EnterHandler, ExitHandler, TransitionActions, TransitionChildren } from 'react-transition-group/Transition';

export interface ITransitionProps extends TransitionActions {
    mountOnEnter?: boolean;
    unmountOnExit?: boolean;
    timeout?: number | { enter?: number; exit?: number };
    addEndListener?: EndHandler;

    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     */
    onEnter?: EnterHandler;
    onEntering?: EnterHandler;
    onEntered?: EnterHandler;
    onExit?: ExitHandler;
    onExiting?: ExitHandler;
    onExited?: ExitHandler;
    children?: TransitionChildren;
}

/* tslint:disable:no-reserved-keywords */
/**
 * Fade properties.
 * Extends from React.HTMLAttributes<HTMLElement> to use the custom props
 */
export interface IFadeProps extends React.HTMLAttributes<HTMLElement>, ITransitionProps {
    /** tag Property to set if you want the HTML tag to be something else */
    tag?: React.ReactType;

    children?: React.ReactNode;

    /** className Property to set any CSS classnames on the Fade */
    className?: string;

    /** Base class for the transition */
    baseClass?: string;

    /** Base class for when the transition is active (shown) */
    baseClassActive?: string;

    /** color Property to set the color of the button */
    color?: string;

    /** Show the component, triggers the fade in or fade out animation */
    in?: boolean;

    /** Property to set any CSS classModule on the modal */
    cssModule?: object;

     /** id Property to set id of fade element */
    id?: string;
}
/* tslint:enable:no-reserved-keywords */
