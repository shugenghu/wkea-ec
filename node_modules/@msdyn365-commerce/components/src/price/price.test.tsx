import { render } from 'enzyme';
import * as React from 'react';

import { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';
import { ProductPrice } from '@msdyn365-commerce/retail-proxy';
import {PriceComponent} from '../index';

describe('Price', () => {
    const mockCoreContext = buildMockCoreContext({}) as ICoreContext<ProductPrice>;

    it('renders correctly with all params', () => {
        const productPrice = {CustomerContextualPrice: 55, BasePrice: 85} as ProductPrice;
        const price = render((
                            <PriceComponent
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                                data={{price: productPrice}}
                                freePriceText='free'
                                originalPriceText='original'
                                currentPriceText='current'
                            />
                            ));
        expect(price).toMatchSnapshot();
    });

    it('renders correctly with just CustomerContextualPrice ', () => {
        const productPrice = {CustomerContextualPrice: 55} as ProductPrice;
        const price = render((
                            <PriceComponent
                                className='foo'
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                                data={{price: productPrice}}
                                freePriceText='free'
                                originalPriceText='original'
                                currentPriceText='current'
                            />
                            ));
        expect(price).toMatchSnapshot();
    });

    it('renders correctly with free text', () => {
        const productPrice = {CustomerContextualPrice: 0, BasePrice: 85} as ProductPrice;
        const price = render((
                            <PriceComponent
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                                data={{price: productPrice}}
                                freePriceText='free'
                                originalPriceText='original'
                                currentPriceText='current'
                            />
                            ));
        expect(price).toMatchSnapshot();
    });

    it('renders correctly with undefined values', () => {
        const productPrice = {} as ProductPrice;
        const price = render((
                            <PriceComponent
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                                data={{price: productPrice}}
                                freePriceText='free'
                                originalPriceText='original'
                                currentPriceText='current'
                            />
                            ));
        expect(price).toMatchSnapshot();
    });

    it('renders correctly with savings text', () => {
        const productPrice = {CustomerContextualPrice: 15, BasePrice: 85} as ProductPrice;
        const price = render((
                            <PriceComponent
                                id='id'
                                typeName='type-name'
                                className='foo'
                                context={mockCoreContext}
                                data={{price: productPrice}}
                                freePriceText='free'
                                originalPriceText='original'
                                currentPriceText='current'
                                savingsText='You are saving so much'
                            />
                            ));
        expect(price).toMatchSnapshot();
    });
});