import { mount, render } from 'enzyme';
import * as React from 'react';

import * as RetailActions from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import * as Actions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CommerceListsDataActions.g';
import {AddToWishlistComponent} from '../index';

describe('AddToWishlist', () => {
    let mockCoreContext: ICoreContext;
    const basicProduct: SimpleProduct = {RecordId: 55555} as SimpleProduct;
    const basicProductMissingDimensions: SimpleProduct = {RecordId: 55555, Dimensions: [{DimensionTypeValue: 0}] } as SimpleProduct;
    const basicProductNoMissingDimensions: SimpleProduct = {RecordId: 55555, Dimensions: [{DimensionTypeValue: 0, DimensionValue: {RecordId: 1, Value: 'Set'}}] } as SimpleProduct;
    const addToWishlistText = 'Add to wishlist';
    const removeToWishlistText = 'Remove to wishlist';
    const wishlistsWithProduct = [{Id: 333, CommerceListLines: [{ProductId: basicProduct.RecordId}]}];
    const wishlistsWithoutProduct = [{Id: 333, CommerceListLines: [{ProductId: 444}]}];
    const flushPromises = () => new Promise(setImmediate);

    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: false, outOfStockThreshold: 5}}}) as ICoreContext;
        // @ts-ignore
        Actions.addLinesAsync = jest.fn().mockImplementation(() => Promise.resolve({}));
        // @ts-ignore
        Actions.removeLinesAsync = jest.fn().mockImplementation(() => Promise.resolve({}));
        // @ts-ignore
        Actions.createCommerceListAsync = jest.fn().mockImplementation(() => Promise.resolve({Id: 1}));
    });

    it('renders correctly with all params', () => {
        const addToWishlist = render((
                            <AddToWishlistComponent
                                addToWishlistButtonText={addToWishlistText}
                                removeFromWishlistButtonText={removeToWishlistText}
                                nameOfWishlist={'My Wishlist'}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                                data={{product: basicProduct, wishlists: []}}
                            />
                            ));
        expect(addToWishlist).toMatchSnapshot();
    });

    it('doesProductExistInWishlist is false when wishlists is undefined', () => {
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct}}
            />
        ));
        const button = addToWishlist.find('button').first();
        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);
        addToWishlist.unmount();
    });

    it('doesProductExistInWishlist is false when the array of wishlists is empty', () => {
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct, wishlists: []}}
            />
        ));
        const button = addToWishlist.find('button').first();
        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);
        addToWishlist.unmount();
    });

    it('doesProductExistInWishlist is false when the wishlist is empty', () => {
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));

        let addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct, wishlists: [{Id: 333}]}}
            />
        ));
        let button = addToWishlist.find('button').first();
        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);
        addToWishlist.unmount();

        addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct, wishlists: [{Id: 333, CommerceListLines: []}]}}
            />
        ));

        button = addToWishlist.find('button').first();
        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);
        addToWishlist.unmount();
    });

    it('doesProductExistInWishlist is false when the wishlist doesn not contain the product', () => {
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct, wishlists: wishlistsWithoutProduct}}
            />
        ));

        const button = addToWishlist.find('button').first();
        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(addToWishlistText);
        addToWishlist.unmount();
    });

    it('doesProductExistInWishlist is true when the wishlist does contain the product', () => {
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct, wishlists: wishlistsWithProduct}}
            />
        ));

        const button = addToWishlist.find('button').first();
        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(removeToWishlistText);
        addToWishlist.unmount();
    });

    it('doesProductExistInWishlist is true when the wishlist does contain the product', () => {
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct, wishlists: wishlistsWithProduct}}
            />
        ));

        const button = addToWishlist.find('button').first();
        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(removeToWishlistText);
        addToWishlist.unmount();
    });

    it('doesProductExistInWishlist is true when the wishlist does contain the product', () => {
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct, wishlists: wishlistsWithProduct}}
            />
        ));

        const button = addToWishlist.find('button').first();
        expect(button.getDOMNode().getAttribute('aria-label')).toEqual(removeToWishlistText);
        addToWishlist.unmount();
    });

    it('If the user is not authenticated when the wishlist button is clicked', () => {
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        mockCoreContext.request.user.isAuthenticated = false;
        mockCoreContext.request.user.signInUrl = 'foo';
        window.location.assign = jest.fn();

        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                data={{product: basicProduct}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        expect(window.location.assign).toHaveBeenCalledWith('foo');

        addToWishlist.unmount();
    });
    it('Creates wishlist and adds wishlist items when the user does not have any wishlist', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onSuccess={onClick}
                data={{product: basicProduct, wishlists: []}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();
        expect(Actions.createCommerceListAsync).toHaveBeenCalled();
        expect(Actions.addLinesAsync).toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith({status: 'ADDED'});
        addToWishlist.unmount();
    });

    it('Adds item to the wishlist and if an itemID is provided, passes that in the callback', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const mockCartLine = {
            Id: '1234'
        };
        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                // @ts-ignore partial mock
                cartline={mockCartLine}
                typeName='type-name'
                context={mockCoreContext}
                onSuccess={onClick}
                data={{product: basicProduct, wishlists: []}}
            />
        ));
        const button = addToWishlist.find('button').first();
        button.simulate('click');
        await flushPromises();
        expect(Actions.createCommerceListAsync).toHaveBeenCalled();
        expect(Actions.addLinesAsync).toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith({status: 'ADDED'}, {Id:'1234'});
        addToWishlist.unmount();
    });

    it('Doesnt add wishlist line and returns error when creating wishlist fails', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        // @ts-ignore
        Actions.createCommerceListAsync = jest.fn().mockImplementation(() => Promise.reject({Id: 1}));
        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onError={onClick}
                data={{product: basicProduct, wishlists: []}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();
        expect(Actions.createCommerceListAsync).toHaveBeenCalled();
        expect(Actions.addLinesAsync).not.toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith({status: 'FAILED'});
        addToWishlist.unmount();
    });

    it('Returns Error when adding a wishlist line fails', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        // @ts-ignore
        Actions.addLinesAsync = jest.fn().mockImplementation(() => Promise.reject({}));

        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onError={onClick}
                data={{product: basicProduct, wishlists: wishlistsWithoutProduct}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();

        expect(Actions.addLinesAsync).toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith({status: 'FAILED'});
        addToWishlist.unmount();
    });

    it('Returns Error and does not try to add line when product is missing dimensions and canAddMasterProduct is false', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onError={onClick}
                canAddMasterProduct={false}
                data={{product: basicProductMissingDimensions, wishlists: wishlistsWithoutProduct}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();

        expect(Actions.addLinesAsync).not.toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith(expect.objectContaining({status: 'MISSINGDIMENSION'}));
        addToWishlist.unmount();
    });

    it('Returns sucess and does try to add line when product is not missing dimensions and canAddMasterProduct is false', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onSuccess={onClick}
                canAddMasterProduct={false}
                data={{product: basicProductNoMissingDimensions, wishlists: wishlistsWithoutProduct}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();

        expect(Actions.addLinesAsync).toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith({status: 'ADDED'});
        addToWishlist.unmount();
    });

    it('Returns Error and does not try to add line when product is missing dimensions and canAddMasterProduct is not set', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onError={onClick}
                data={{product: basicProductMissingDimensions, wishlists: wishlistsWithoutProduct}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();

        expect(Actions.addLinesAsync).not.toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith(expect.objectContaining({status: 'MISSINGDIMENSION'}));
        addToWishlist.unmount();
    });

    it('Returns success and does try to add line when product is missing dimensions and canAddMasterProduct is true', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onSuccess={onClick}
                canAddMasterProduct={true}
                data={{product: basicProductMissingDimensions, wishlists: wishlistsWithoutProduct}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();

        expect(Actions.addLinesAsync).toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith({status: 'ADDED'});
        addToWishlist.unmount();
    });

    it('Removes the item from the wishlist', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        // @ts-ignore
        Actions.removeLinesAsync = jest.fn().mockImplementation(() => Promise.resolve({}));
        mockCoreContext.actionContext.update = jest.fn();
        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onSuccess={onClick}
                data={{product: basicProduct, wishlists: wishlistsWithProduct}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();

        expect(Actions.removeLinesAsync).toHaveBeenCalled();
        expect(mockCoreContext.actionContext.update).toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith({status: 'REMOVED'});
        addToWishlist.unmount();
    });

    it('Returns Error when removing a wishlist line fails', async () => {
        mockCoreContext.request.user.isAuthenticated = true;
        // @ts-ignore
        jest.spyOn(RetailActions, 'getCustomer').mockImplementation(() => Promise.resolve({AccountNumber: 99999}));
        // @ts-ignore
        Actions.removeLinesAsync = jest.fn().mockImplementation(() => Promise.reject({}));

        const onClick = jest.fn();
        const addToWishlist = mount((
            <AddToWishlistComponent
                addToWishlistButtonText={addToWishlistText}
                removeFromWishlistButtonText={removeToWishlistText}
                nameOfWishlist={'My Wishlist'}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                onError={onClick}
                data={{product: basicProduct, wishlists: wishlistsWithProduct}}
            />
        ));
        const button = addToWishlist!.find('button').first();
        button.simulate('click');
        await flushPromises();

        expect(Actions.removeLinesAsync).toHaveBeenCalled();
        expect(onClick).toHaveBeenCalledWith({status: 'FAILED'});
        addToWishlist.unmount();
    });
});