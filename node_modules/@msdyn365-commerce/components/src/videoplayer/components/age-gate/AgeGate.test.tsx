import { mount } from 'enzyme';
import * as React from 'react';
import AgeGate from './AgeGate';

describe('AgeGate ', () => {
    it('AgeGate work correctly if more than minimum age is provided', () => {
        const spySubmit = jest.fn();
        const wrapper = mount(
            <AgeGate
                onSubmitClick={spySubmit}
                aria-hidden={false}
                minmumAge={18}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const ageGate = wrapper.instance() as AgeGate;
        const dropdowns = document.querySelectorAll('select');
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(1);
        expect(dropdowns.length).toBe(3);
        const monthddl = dropdowns[0];
        const dayddl = dropdowns[1];
        const yearddl = dropdowns[2];
        const submitButton = buttons[0];

        // verify intial state for dropdowns
        expect(monthddl.selectedIndex).toBe(0);
        expect(dayddl.selectedIndex).toBe(0);
        expect(yearddl.selectedIndex).toBe(0);

        let changeEvent = {
            target: { value: '1' , id: 'selectMonth' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(0).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.monthValue).toBe('1');
        expect(submitButton.hasAttribute('disabled')).toBe(true);

        changeEvent = {
            target: { value: '31' , id: 'selectDay' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(1).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.dayValue).toBe('31');
        expect(submitButton.hasAttribute('disabled')).toBe(true);

        changeEvent = {
            target: { value: '1985' , id: 'selectYear' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(2).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        // For code coverage
        changeEvent = {
            target: { value: '1985' , id: '' }
        };

        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(2).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.monthValue).toBe('1');
        expect(ageGate.state.dayValue).toBe('31');
        expect(ageGate.state.yearValue).toBe('1985');
        expect(submitButton.hasAttribute('disabled')).toBe(false);

        const result = ageGate.getCalculatedAge();
        expect(result).toBe(true);
        wrapper.unmount();
    });

    it('AgeGate work correctly if less than minimum age is provided', () => {
        const spySubmit = jest.fn();
        const wrapper = mount(
            <AgeGate
                onSubmitClick={spySubmit}
                aria-hidden={false}
                minmumAge={18}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        const ageGate = wrapper.instance() as AgeGate;
        const dropdowns = document.querySelectorAll('select');
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(1);
        expect(dropdowns.length).toBe(3);
        const monthddl = dropdowns[0];
        const dayddl = dropdowns[1];
        const yearddl = dropdowns[2];
        const submitButton = buttons[0];

        // verify intial state for dropdowns
        expect(monthddl.selectedIndex).toBe(0);
        expect(dayddl.selectedIndex).toBe(0);
        expect(yearddl.selectedIndex).toBe(0);

        const date = new Date();
        date.setDate(date.getDate() - 1);
        const currentDay = date.getDate();
        const currentMonth = date.getMonth();
        const currentYear = date.getFullYear();

        let changeEvent = {
            target: { value: currentMonth.toString() , id: 'selectMonth' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(0).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.monthValue).toBe(currentMonth.toString());
        expect(submitButton.hasAttribute('disabled')).toBe(true);

        changeEvent = {
            target: { value: currentDay.toString() , id: 'selectDay' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(1).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.dayValue).toBe(currentDay.toString());
        expect(submitButton.hasAttribute('disabled')).toBe(true);

        changeEvent = {
            target: { value: currentYear.toString() , id: 'selectYear' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(2).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.yearValue).toBe(currentYear.toString());
        expect(submitButton.hasAttribute('disabled')).toBe(false);

        const result = ageGate.getCalculatedAge();
        expect(result).toBe(false);
        wrapper.unmount();
    });

    it('AgeGate work correctly if less than minimum age is provided + code coverage', () => {
        const spySubmit = jest.fn();
        const wrapper = mount(
            <AgeGate
                onSubmitClick={spySubmit}
                aria-hidden={false}
                minmumAge={18}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const ageGate = wrapper.instance() as AgeGate;
        const dropdowns = document.querySelectorAll('select');
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(1);
        expect(dropdowns.length).toBe(3);
        const monthddl = dropdowns[0];
        const dayddl = dropdowns[1];
        const yearddl = dropdowns[2];
        const submitButton = buttons[0];

        // verify intial state for dropdowns
        expect(monthddl.selectedIndex).toBe(0);
        expect(dayddl.selectedIndex).toBe(0);
        expect(yearddl.selectedIndex).toBe(0);

        const date = new Date();
        date.setDate(date.getDate());
        const currentDay = date.getDay();
        const currentMonth = date.getMonth() + 1;
        const currentYear = date.getFullYear();

        let changeEvent = {
            target: { value: currentMonth.toString() , id: 'selectMonth' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(0).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.monthValue).toBe(currentMonth.toString());
        expect(submitButton.hasAttribute('disabled')).toBe(true);

        changeEvent = {
            target: { value: currentDay.toString() , id: 'selectDay' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(1).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.dayValue).toBe(currentDay.toString());
        expect(submitButton.hasAttribute('disabled')).toBe(true);

        changeEvent = {
            target: { value: currentYear.toString() , id: 'selectYear' }
        };
        // simulate change in dropdown
        expect(() => {
            wrapper.find('select').at(2).simulate('change', changeEvent);
        }).not.toThrow();
        wrapper.update();

        expect(ageGate.state.yearValue).toBe(currentYear.toString());
        expect(submitButton.hasAttribute('disabled')).toBe(false);

        const result = ageGate.getCalculatedAge();
        expect(result).toBe(false);
        wrapper.unmount();
    });
});
