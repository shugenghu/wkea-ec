import { mount } from 'enzyme';
import * as React from 'react';
import { IPlayerMenu } from '../data/player-constants';
import { KeyCodes } from '../utilities/KeyCodes';
import Menu from './menu';

describe('Menu ', () => {
    it('Menu work correctly when loaded', () => {
        const documentClick = jest.fn();
        const menuItemClick = jest.fn();
        const playerMenu: IPlayerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch '
                }]
            };
        const wrapper = mount(
            <Menu
                playerMenu={playerMenu}
                className='playerMenu'
                style={{left: '148px'}}
                onDocumentClick={documentClick}
                onMenuItemClick={menuItemClick}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const menu = wrapper.instance() as Menu;
        // For code coverage. It is returning zero
        menu.getMenuWidth();
        const mockedEvent = new Event('playing', { bubbles: true, cancelable: false, });

        menu.handleDocumentClick(mockedEvent);
        expect(() => {
            menu.componentDidMount();
        }).not.toThrow();

        expect(() => {
            menu.componentWillUnmount();
        }).not.toThrow();
        wrapper.unmount();
    });

    it('Menu raises keyup and keyDown event', () => {
        const documentClick = jest.fn();
        const menuItemClick = jest.fn();
        const spyOnKeyUp = jest.fn();
        const spyOnKeyDown = jest.fn();
        const playerMenu: IPlayerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch '
                }]
            };
        const wrapper = mount(
            <Menu
                playerMenu={playerMenu}
                className='playerMenu'
                style={{left: '148px'}}
                onDocumentClick={documentClick}
                onMenuItemClick={menuItemClick}
                onKeyDown={spyOnKeyDown}
                onKeyUp={spyOnKeyUp}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const ulWrapper = mount(wrapper.find('ul').get(0));
        ulWrapper.simulate('keyDown', { keyCode: KeyCodes.ArrowDown });
        wrapper.update();
        expect(spyOnKeyDown).toHaveBeenCalled();

        ulWrapper.simulate('keyUp', { keyCode: KeyCodes.ArrowUp });
        wrapper.update();
        expect(spyOnKeyUp).toHaveBeenCalled();
        wrapper.unmount();
    });
});
