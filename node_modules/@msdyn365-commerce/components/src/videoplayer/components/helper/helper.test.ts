import { IPlayerProps } from '../../players/player/Player.props';
import { closedCaptionsSettingDefaults } from '../closed-captions/video-closed-captions-settings';
import ClosedCaptionHelper from './closedCaptionHelper';
import LocalizationHelper, { LocalizationConstants } from './localization-helper';
import PlayerHelper from './playerHelper';

describe('PlayerHelper test cases', () => {
    it('should call error function', () => {
        const defaultProps: IPlayerProps = {
            playerData: {
                options: {
                    autoplay: true,
                    ageGate: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    hidePosterFrame: false
                },
                metaData: {
                    playerName: 'videoPlayer',
                    videoId: '',
                    title: '',
                    description: '',
                    duration: 0,
                    posterframeUrl: '',
                    shareUrl: '',
                    videoFiles: [],
                    externalPlayerUrl: '',
                    externalSourceId: '',
                    videoBinaryReferences: [],
                    ccFiles: []
                }
            },
            playerResources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                closeAriaLabel: LocalizationConstants.closeAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                pausedAriaLabel: LocalizationConstants.pausedAriaLabel,
                playingAriaLabel: LocalizationConstants.playingAriaLabel,
                seekBarLabel: LocalizationConstants.seekBarLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                closedCaptionLabel: LocalizationConstants.closedCaptionLabel
            },
        };

        const localizationHelper = new LocalizationHelper(defaultProps.playerResources!);
        const playerHelper = new PlayerHelper(defaultProps, localizationHelper);
        playerHelper.getMetadata();
        playerHelper.onErrorCallback('error', 'unhandled Error');
    });

    it('addIdPrefix should return childId if playerId is empty', () => {
        const defaultProps: IPlayerProps = {
            playerData: {
                options: {
                    autoplay: true,
                    ageGate: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    hidePosterFrame: false
                },
                metaData: {
                    playerName: 'videoPlayer',
                    videoId: '',
                    title: '',
                    description: '',
                    duration: 0,
                    posterframeUrl: '',
                    shareUrl: '',
                    videoFiles: [],
                    externalPlayerUrl: '',
                    externalSourceId: '',
                    videoBinaryReferences: []
                }
            },
            playerResources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                closeAriaLabel: LocalizationConstants.closeAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                pausedAriaLabel: LocalizationConstants.pausedAriaLabel,
                playingAriaLabel: LocalizationConstants.playingAriaLabel,
                seekBarLabel: LocalizationConstants.seekBarLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                closedCaptionLabel: LocalizationConstants.closedCaptionLabel
            }
        };

        const localizationHelper = new LocalizationHelper(defaultProps.playerResources!);
        const playerHelper = new PlayerHelper(defaultProps, localizationHelper);
        expect(playerHelper.addIdPrefix('childId')).toBe('childId');
        expect(playerHelper.removeIdPrefix('childId')).toBe('childId');
    });
});

describe('PlayerHelper test cases', () => {
    it('should call error function', () => {
        const defaultProps: IPlayerProps = {
            playerData: {
                options: {
                    autoplay: true,
                    ageGate: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    hidePosterFrame: false
                },
                metaData: {
                    playerName: 'videoPlayer',
                    videoId: '',
                    title: '',
                    description: '',
                    duration: 0,
                    posterframeUrl: '',
                    shareUrl: '',
                    videoFiles: [],
                    externalPlayerUrl: '',
                    externalSourceId: '',
                    videoBinaryReferences: [],
                    ccFiles: []
                }
            },
            playerResources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                closeAriaLabel: LocalizationConstants.closeAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                pausedAriaLabel: LocalizationConstants.pausedAriaLabel,
                playingAriaLabel: LocalizationConstants.playingAriaLabel,
                seekBarLabel: LocalizationConstants.seekBarLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                closedCaptionLabel: LocalizationConstants.closedCaptionLabel
            },
        };

        const localizationHelper = new LocalizationHelper(defaultProps.playerResources!);
        localizationHelper.getLanguageCodeFromLocale('error');
    });

});

describe('PlayerHelper test cases', () => {
    it('should call error function', () => {
        const defaultProps: IPlayerProps = {
            playerData: {
                options: {
                    autoplay: true,
                    ageGate: false,
                    mute: true,
                    loop: false,
                    playPauseTrigger: false,
                    controls: true,
                    hidePosterFrame: false
                },
                metaData: {
                    playerName: 'videoPlayer',
                    videoId: '',
                    title: '',
                    description: '',
                    duration: 0,
                    posterframeUrl: '',
                    shareUrl: '',
                    videoFiles: [],
                    externalPlayerUrl: '',
                    externalSourceId: '',
                    videoBinaryReferences: [],
                    ccFiles: []
                }
            },
            playerResources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                closeAriaLabel: LocalizationConstants.closeAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                pausedAriaLabel: LocalizationConstants.pausedAriaLabel,
                playingAriaLabel: LocalizationConstants.playingAriaLabel,
                seekBarLabel: LocalizationConstants.seekBarLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                closedCaptionLabel: LocalizationConstants.closedCaptionLabel
            },
        };

        const localizationHelper = new LocalizationHelper(defaultProps.playerResources!);
        const playerHelper = new PlayerHelper(defaultProps, localizationHelper);
        const closedCaptionHelper = new ClosedCaptionHelper(defaultProps.playerData.metaData, playerHelper, localizationHelper);
        expect(closedCaptionHelper.getUpdatedClosedCaptionSetting(closedCaptionsSettingDefaults, '', '')).toBe(closedCaptionsSettingDefaults);
    });

});