import { mount } from 'enzyme';
import * as React from 'react';
import { IPlayerMenu } from '../data/player-constants';
import MenuItem from './menu-item';

describe('MenuItem ', () => {
    it('MenuItem work correctly when clicked', () => {
        const spyClick = jest.fn();
        const spyFocus = jest.fn();
        const spyBlur = jest.fn();
        const spyMouseOver = jest.fn();
        const spyMouseOut = jest.fn();
        const wrapper = mount(
            <MenuItem
                id=''
                label=''
                className='playerMenu'
                language=''
                data=''
                image=''
                itemCount={0}
                itemIndex={0}
                imageAlt=''
                glyph=''
                selected={true}
                selectable={true}
                persistOnClick={false}
                ariaLabel=''
                onClick={spyClick}
                onFocus={spyFocus}
                onBlur={spyBlur}
                onMouseOver={spyMouseOver}
                onMouseOut={spyMouseOut}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        const menuItem = wrapper.instance() as MenuItem;
        const buttons = document.querySelectorAll('button');
        // const menuContainer = wrapper.find('.playerMenu');
        expect(buttons.length).toBe(1);
        const button = buttons[0];
        button.click();

        wrapper.update();
        expect(spyClick).toHaveBeenCalled();

        button.focus();
        wrapper.update();
        expect(spyFocus).toHaveBeenCalled();

        button.blur();
        wrapper.update();
        expect(spyBlur).toHaveBeenCalled();

        const buttonWrapper = mount(wrapper.find('button').get(0));
        buttonWrapper.simulate('mouseOver');
        wrapper.update();
        expect(spyMouseOver).toHaveBeenCalled();

        buttonWrapper.simulate('mouseOut');
        wrapper.update();
        expect(spyMouseOut).toHaveBeenCalled();

        expect(() => {
            menuItem.componentDidMount();
        }).not.toThrow();

        expect(() => {
            menuItem.componentDidUpdate();
        }).not.toThrow();

        wrapper.unmount();
    });

    jest.useFakeTimers();
    jest.setTimeout(0);
    it('MenuItem work correctly upon focus', () => {
        const spyFocus = jest.fn();
        const spyBlur = jest.fn();
        const wrapper = mount(
            <MenuItem
                id=''
                label=''
                className='playerMenu'
                language='en-us'
                hasMouseHoverEvents={true}
                data={'en-us'}
                image='abc'
                itemCount={0}
                itemIndex={0}
                imageAlt=''
                glyph=''
                selected={false}
                selectable={false}
                persistOnClick={true}
                hasFocus={true}
                onFocus={spyFocus}
                onBlur={spyBlur}
                ariaLabel='closedCaption'
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        const menuItem = wrapper.instance() as MenuItem;
        expect(() => {
            menuItem.componentDidMount();
        }).not.toThrow();

        expect(() => {
            menuItem.componentDidUpdate();
        }).not.toThrow();
        jest.runAllTimers();

        wrapper.unmount();
    });

    it('MenuItem shows correct glyph icons having submenu', () => {
        const spyFocus = jest.fn();
        const spyBlur = jest.fn();
        const playerMenu: IPlayerMenu= {
            id: 'playerMenu',
            category:'closedcaptions',
            items: [],
            label: 'Closed captions',
            glyph: '',
            cssClass: '',
            hideBackButton: false,
        };

        const wrapper = mount(
            <MenuItem
                id=''
                label=''
                className='playerMenu'
                language=''
                data=''
                image=''
                itemCount={0}
                itemIndex={0}
                imageAlt=''
                glyph=''
                selected={true}
                selectable={true}
                persistOnClick={true}
                hasFocus={true}
                onFocus={spyFocus}
                onBlur={spyBlur}
                ariaLabel=''
                subMenu={playerMenu}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(1);
        wrapper.update();

        wrapper.unmount();
    });

    it('MenuItem shows correct glyph icons if the menu is back button', () => {
        const spyFocus = jest.fn();
        const spyBlur = jest.fn();

        const wrapper = mount(
            <MenuItem
                id=''
                label=''
                className='playerMenu'
                language=''
                data=''
                image=''
                itemCount={0}
                itemIndex={0}
                imageAlt=''
                glyph=''
                selected={false}
                selectable={false}
                persistOnClick={true}
                onFocus={spyFocus}
                onBlur={spyBlur}
                ariaLabel=''
                isBackButton={true}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(1);
        wrapper.update();

        wrapper.unmount();
    });

});
