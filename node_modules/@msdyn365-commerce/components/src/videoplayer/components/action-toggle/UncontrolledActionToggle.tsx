import * as React from 'react';
import ActionToggle from './ActionToggle';
import { IActionToggleChangeNotification, IActionToggleProps } from './ActionToggle.props';

export interface IUncontrolledActionToggleState extends React.ComponentState {
    toggled: boolean;
}

/**
 * UncontrolledActionToggle - This component is toggle button which switches between states
 * and for accessibility reasons are 2 different buttons the state and toggle function are managed
 * by the parent
 */
export class UncontrolledActionToggle extends React.PureComponent<IActionToggleProps, IUncontrolledActionToggleState> {
    constructor(props: Readonly<IActionToggleProps>) {
        super(props);
        this.state = { toggled: !!props.toggled };
        this._onChange = this._onChange.bind(this);
    }

    public render(): JSX.Element {
        const { toggled, ...propsWithoutToggle } = this.props;
        const props = { ...propsWithoutToggle, toggled: this.state.toggled };
        return <ActionToggle {...props} onChange={this._onChange} />;
    }

    private _onChange(notification: Readonly<IActionToggleChangeNotification>): void {
        this.setState(() => { return { toggled: !notification.toggled }; });

        if(this.props.onChange) {
            this.props.onChange({ id: notification.id, actionToggle: notification.actionToggle, toggled: !notification.toggled, event: notification.event });
        }
    }
}
