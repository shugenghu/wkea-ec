import { render } from 'enzyme';
import * as React from 'react';
import { IPlayPosition } from '../data/player-constants';
import { LocalizationConstants } from '../helper/localization-helper';
import VideoControls from './VideoControls';

describe('Video control Bar', () => {
    it('renders Video control correctly without any props', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };
        const videoControlBar = render(
            <VideoControls
                className = ''
                playing
                onPlayClick={undefined}
                isMuted
                onMuteClick = {undefined}
                onVolumeChange = {undefined}
                onProgressChange = {undefined}
                playPosition = {playPosition}
                currentVolume = {60}
                isInFullScreen
                toggleFullScreen = {undefined}
                resources={{
                    playAriaLabel:LocalizationConstants.playAriaLabel,
                    pauseAriaLabel:LocalizationConstants.pauseAriaLabel,
                    muteAriaLabel:LocalizationConstants.muteAriaLabel,
                    unMuteAriaLabel:LocalizationConstants.unMuteAriaLabel,
                    fullScreenAriaLabel:LocalizationConstants.fullScreenAriaLabel,
                    exitFullScreenAriaLabel:LocalizationConstants.exitFullScreenAriaLabel,
                    seekBarLabel: LocalizationConstants.seekBarLabel,
                    videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel
                }}
            />
        );
        expect(videoControlBar).toMatchSnapshot();
    });

    it('renders Video control correctly with props', () => {
        const spyPlayChange = jest.fn();
        const spyMuteChange= jest.fn();
        const spyVolumeChange= jest.fn();
        const spyProgessBarChange= jest.fn();
        const spyFullScreenChange= jest.fn();
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };
        const videoControlBar = render(
            <VideoControls
                className = ''
                playing
                onPlayClick={spyPlayChange}
                isMuted
                onMuteClick = {spyMuteChange}
                onVolumeChange = {spyVolumeChange}
                onProgressChange = {spyProgessBarChange}
                playPosition = {playPosition}
                currentVolume = {60}
                isInFullScreen
                toggleFullScreen = {spyFullScreenChange}
                resources={{
                    playAriaLabel:LocalizationConstants.playAriaLabel,
                    pauseAriaLabel:LocalizationConstants.pauseAriaLabel,
                    muteAriaLabel:LocalizationConstants.muteAriaLabel,
                    unMuteAriaLabel:LocalizationConstants.unMuteAriaLabel,
                    fullScreenAriaLabel:LocalizationConstants.fullScreenAriaLabel,
                    exitFullScreenAriaLabel:LocalizationConstants.exitFullScreenAriaLabel,
                    seekBarLabel: LocalizationConstants.seekBarLabel,
                    videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel
                }}
            />
        );
        expect(videoControlBar).toMatchSnapshot();
    });

    it('renders trigger correctly classname only', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };
        const videoControlBar = render(
            <VideoControls
                className = 'VideoControlBar'
                playing
                onPlayClick={undefined}
                isMuted
                onMuteClick = {undefined}
                onVolumeChange = {undefined}
                onProgressChange = {undefined}
                playPosition = {playPosition}
                currentVolume = {60}
                isInFullScreen
                toggleFullScreen = {undefined}
                resources={{
                    playAriaLabel:LocalizationConstants.playAriaLabel,
                    pauseAriaLabel:LocalizationConstants.pauseAriaLabel,
                    muteAriaLabel:LocalizationConstants.muteAriaLabel,
                    unMuteAriaLabel:LocalizationConstants.unMuteAriaLabel,
                    fullScreenAriaLabel:LocalizationConstants.fullScreenAriaLabel,
                    exitFullScreenAriaLabel:LocalizationConstants.exitFullScreenAriaLabel,
                    seekBarLabel: LocalizationConstants.seekBarLabel,
                    videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel
                }}
            />
        );
        expect(videoControlBar).toMatchSnapshot();
    });

    it('renders trigger correctly with change handler', () => {
        const spyPlayChange = jest.fn();
        const spyMuteChange= jest.fn();
        const spyVolumeChange= jest.fn();
        const spyProgessBarChange= jest.fn();
        const spyFullScreenChange= jest.fn();
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };
        const videoControlBar = render(
            <VideoControls
                className = 'videoControlBar'
                onPlayClick={spyPlayChange}
                onMuteClick = {spyMuteChange}
                onVolumeChange = {spyVolumeChange}
                onProgressChange = {spyProgessBarChange}
                playPosition = {playPosition}
                currentVolume = {60}
                toggleFullScreen = {spyFullScreenChange}
                resources={{
                    playAriaLabel:LocalizationConstants.playAriaLabel,
                    pauseAriaLabel:LocalizationConstants.pauseAriaLabel,
                    muteAriaLabel:LocalizationConstants.muteAriaLabel,
                    unMuteAriaLabel:LocalizationConstants.unMuteAriaLabel,
                    fullScreenAriaLabel:LocalizationConstants.fullScreenAriaLabel,
                    exitFullScreenAriaLabel:LocalizationConstants.exitFullScreenAriaLabel,
                    seekBarLabel: LocalizationConstants.seekBarLabel,
                    videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel
                }}
            />
        );
        expect(videoControlBar).toMatchSnapshot();
    });

});
