import { mount } from 'enzyme';
import * as React from 'react';
import { closedCaptionsSettingDefaults } from '../closed-captions/video-closed-captions-settings';
import { ICurrentClosedCaptionsSettings, IPlayerMenu, IPlayPosition } from '../data/player-constants';
import { LocalizationConstants } from '../helper/localization-helper';
import { KeyCodes } from '../utilities/KeyCodes';
import VideoControls from './VideoControls';
import { IVideoControlsProps } from './VideoControls.props';

describe('Check video control bar loaded or not',() => {
    it('Video Control bar componentDidMount to not throw an error', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControls = wrapper.instance() as VideoControls;
        expect(() => { videoControls.componentDidMount();}).not.toThrow();
        wrapper.unmount();
    });
    it('Video Control bar componentDidMount to not throw an error when resources & glyphIcons passed', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: '',
                        pauseAriaLabel: '',
                        closeAriaLabel: '',
                        muteAriaLabel: '',
                        unMuteAriaLabel: '',
                        fullScreenAriaLabel: '',
                        exitFullScreenAriaLabel: '',
                        pausedAriaLabel: '',
                        playingAriaLabel: '',
                        seekBarLabel: '',
                        videoTimeDurationLabel: '',
                        closedCaptionLabel: ''
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControls = wrapper.instance() as VideoControls;
        expect(() => { videoControls.componentDidMount();}).not.toThrow();
        wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('Video Control bar check resize functionality', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const closedCaptonsSetting: ICurrentClosedCaptionsSettings = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };

        const playerMenu: IPlayerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch'
                },
                {
                    id: 'videoTestID-appearance',
                    label: 'Appearance',
                    selected: false,
                    selectable: false,
                    subMenu: {
                        id: 'videoTestID-cc-preset',
                        label: 'Appearance',
                        category: 'cc-settings',
                        items: [
                            {
                                id: '',
                                label: 'Appearance',
                                ariaLabel: 'Appreance - go back to previous menu',
                                selectable: false,
                                selected: false,
                                persistOnClick: false,
                                isBackButton: true,
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset1',
                                label: 'Preset 1 ',
                                data: 'preset:preset1',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset2',
                                label: 'Preset 2',
                                data: 'preset:preset2',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Monospaced Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset3',
                                label: 'Preset 3',
                                data: 'preset:preset3',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Yellow)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset4',
                                label: 'Preset 4',
                                data: 'preset:preset4',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Blue)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset5',
                                label: 'Preset 5',
                                data: 'preset:preset5',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Casual, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-customize',
                                label: 'Customize',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'reset',
                                label: 'Reset',
                                data: 'reset',
                                persistOnClick: true,
                                hasMouseHoverEvents: true
                            }]
                        }
                    }
                ]
            };
        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    closedCaptionMenu= {playerMenu}
                    currentClosedCaptionsSetting={closedCaptonsSetting}
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControls = wrapper.instance() as VideoControls;
        videoControls.setState({
            showVolumeSlider: true,
            showMenu: true
        });

        expect(() => { videoControls.componentDidMount();}).not.toThrow();
        wrapper.unmount();
    });
});

describe('Check Change Event gets Fired upon clicking', () => {
    it('PlayPause Button work correctly when clicked', () => {
        const spyPlayChange = jest.fn();
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={spyPlayChange}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const play = buttons[0];
        const pause = buttons[1];

        // Verify expected initial state
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        play.click();
        wrapper.update();
        expect(spyPlayChange).toHaveBeenCalled();

        wrapper.unmount();
    });

    it('Mute UnMute Button work correctly when clicked', () => {
        const spyMuteChange= jest.fn();
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {spyMuteChange}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const mute = buttons[2];
        const unMute = buttons[3];

        // Verify expected initial state
        expect(mute.getAttribute('aria-hidden')).toBe('true');
        expect(unMute.getAttribute('aria-hidden')).toBe('false');
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        mute.click();
        wrapper.update();
        expect(spyMuteChange).toHaveBeenCalled();

        wrapper.unmount();
    });

    jest.useFakeTimers();
    it('Check Volume slider AutoHides', () => {
        const spyMuteChange= jest.fn();
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {spyMuteChange}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;

        wrapper.find('div.action-toggle').at(1).simulate('mouseOver');
        wrapper.update();

        expect(videoControlsBar.state.showVolumeSlider).toBe(true);
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);
        jest.runAllTimers();
        expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 0);

        setTimeout(() => {
            expect(videoControlsBar.state.showVolumeSlider).toBe(false);
            expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('hide')).toBe(true);
        });

        wrapper.unmount();
    });

    it('Check Volume slider shows if focus remains on volume button', () => {
        const spyMuteChange= jest.fn();
        // const volumeAutoHideTimeout: number = 2000;
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {spyMuteChange}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const mute = buttons[2];
        mute.focus();
        wrapper.update();

        expect(videoControlsBar.state.showVolumeSlider).toBe(true);
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);

        // wrapper.find('div.msc-videoplayer__controls__volumeslider__container').simulate('mouseOver');
        mute.focus();
        wrapper.update();

        expect(videoControlsBar.state.showVolumeSlider).toBe(true);
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);

        // wrapper.find('div.msc-videoplayer__controls__volumeslider__container').simulate('mouseOver');
        mute.focus();
        wrapper.update();

        expect(videoControlsBar.state.showVolumeSlider).toBe(true);
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);

        wrapper.unmount();
    });

    it('Check Volume slider show up when focused', () => {
        const spyMuteChange= jest.fn();
        const volumeAutoHideTimeout: number = 2000;
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {spyMuteChange}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const mute = buttons[2];
        const unMute = buttons[3];

        // Verify expected initial state
        expect(mute.getAttribute('aria-hidden')).toBe('true');
        expect(unMute.getAttribute('aria-hidden')).toBe('false');

        // Test having focus and rerendering when button is clicked
        wrapper.find('div.action-toggle').at(1).simulate('focus');
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);
        // expect(videoControlsBar.state.showVolumeSlider).toBe(true);
        setTimeout(() => {
            expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('hide')).toBe(true);
        },         volumeAutoHideTimeout);
        wrapper.unmount();
    });

    it('Check Volume slider show up when moveover', () => {
        const spyMuteChange= jest.fn();
        const volumeAutoHideTimeout: number = 2000;
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {spyMuteChange}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);

        videoControlsBar.render();
        // Test having focus and rerendering when button is clicked
        wrapper.find('div.action-toggle').at(1).simulate('mouseOver');
        wrapper.update();

        expect(videoControlsBar.state.showVolumeSlider).toBe(true);
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);

        wrapper.find('div.action-toggle').at(1).simulate('mouseleave');
        wrapper.update();

        setTimeout(() => {
            expect(videoControlsBar.state.showVolumeSlider).toBe(false);
            expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('hide')).toBe(true);
        },         volumeAutoHideTimeout);

        wrapper.find('div.action-toggle').at(1).simulate('mouseOver');
        wrapper.update();
        expect(videoControlsBar.state.showVolumeSlider).toBe(true);
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);

        setTimeout(() => {
            expect(videoControlsBar.state.showVolumeSlider).toBe(false);
            expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('hide')).toBe(true);
        },         volumeAutoHideTimeout);

        wrapper.unmount();
    });

    it('Check on changing volume slider fires volume change event', () => {
        const spyMuteChange = jest.fn();
        const spyVolumeChange = jest.fn();
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {spyMuteChange}
                    onVolumeChange = {spyVolumeChange}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {50}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);

        const videoControl = document.getElementsByClassName('VideoControlBar')[0];
        const getClientWidth = jest.spyOn(videoControl, 'clientWidth', 'get');

        getClientWidth.mockImplementation(() => {
            return 590;
        });

        // Test having focus and rerendering when button is clicked
        wrapper.find('div.action-toggle').at(1).simulate('mouseOver');
        wrapper.update();

        expect(videoControlsBar.state.showVolumeSlider).toBe(true);
        expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('show')).toBe(true);

        wrapper.find('input#VolumeSliderThumbrange').simulate('change', {target:{ id: 'VolumeSliderThumbrange', value: 66}});
        expect(spyVolumeChange).toHaveBeenCalled();

        wrapper.find('input#VolumeSliderThumbrange').simulate('change', {target:{ id: 'VolumeSliderThumbrange', value: 66}});
        expect(spyVolumeChange).toHaveBeenCalled();

        wrapper.unmount();
    });

    it('Check on changing progess slider fires progess change event', () => {
        const spyProgessChange = jest.fn();
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {spyProgessChange}
                    playPosition = {playPosition}
                    currentVolume = {50}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;

        videoControlsBar.render();
        // Test having focus and rerendering when button is clicked

        wrapper.find('input#VideoSliderThumbrange').simulate('change', {target:{ id: 'VideoSliderThumbrange', value: 66}});
        expect(spyProgessChange).toHaveBeenCalled();

        wrapper.find('input#VideoSliderThumbrange').simulate('change', {target:{ id: 'VideoSliderThumbrange', value: 66}});
        expect(spyProgessChange).toHaveBeenCalled();

        wrapper.update();
        wrapper.unmount();
    });

    it('FullScreen ExitFullScreen Button work correctly when clicked', () => {
        const spyFullScreenChange= jest.fn();
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {spyFullScreenChange}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const fullScreen = buttons[4];
        const exitFulScreen = buttons[5];

        // Verify expected initial state
        expect(fullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(exitFulScreen.getAttribute('aria-hidden')).toBe('false');
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        fullScreen.click();
        wrapper.update();
        expect(spyFullScreenChange).toHaveBeenCalled();

        wrapper.unmount();
    });

    it('Video timer works correctly when time passed', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 77.334,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        // check intial value
        expect(wrapper.find('div.msc-videoplayer__controls__time__text').text()).toEqual('00:00 / 01:17');
        wrapper.unmount();
    });

    it('Video current time shows correctly when current time passed', () => {
        const playPosition: IPlayPosition = {
            currentTime: 15.553713,
            startTime: 0,
            endTime: 77.334,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        // check intial value
        expect(wrapper.find('div.msc-videoplayer__controls__time__text').text()).toEqual('00:15 / 01:17');
        wrapper.unmount();
    });

    it('Video current time shows correctly when invalid time passed', () => {
        const playPosition: IPlayPosition = {
            currentTime: -15.553713,
            startTime: 0,
            endTime: 8100,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        // check intial value
        expect(wrapper.find('div.msc-videoplayer__controls__time__text').text()).toEqual('-00:15 / 2:15:00');
        wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('closed Captions menu shows up when clicked on closed captions button', () => {
            const playPosition: IPlayPosition = {
                currentTime: 0,
                startTime: 0,
                endTime: 0,
                bufferedDuration: 0
            };

            const closedCaptonsSetting: ICurrentClosedCaptionsSettings = {
                preset: closedCaptionsSettingDefaults.preset,
                text_font: closedCaptionsSettingDefaults.text_font,
                text_color: closedCaptionsSettingDefaults.text_color,
                text_opacity: closedCaptionsSettingDefaults.text_opacity,
                text_size: closedCaptionsSettingDefaults.text_size,
                text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
                text_background_color: closedCaptionsSettingDefaults.text_background_color,
                text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
                window_color: closedCaptionsSettingDefaults.window_color,
                window_opacity: closedCaptionsSettingDefaults.window_opacity
            };
            const playerMenu: IPlayerMenu = {
                category: 'close-caption',
                id: 'videoTestID-close-caption',
                label: '',
                items: [
                    {
                        id: 'videoTestID-off',
                        label: 'Off',
                        selected: true,
                        data: 'off',
                        selectable: true,
                        persistOnClick: true,
                        ariaLabel: 'Off '
                    },
                    {
                        id: 'videoTestID-en-us',
                        label: 'English',
                        language: 'en',
                        data: 'en-us',
                        selected: false,
                        selectable: true,
                        persistOnClick: true,
                        ariaLabel: 'English '
                    },
                    {
                        id: 'videoTestID-de-de',
                        label: 'Deutsch',
                        language: 'de',
                        data: 'de-de',
                        selected: false,
                        selectable: true,
                        persistOnClick: true,
                        ariaLabel: 'Deutsch'
                    }]
                };

            const wrapper = mount(
                <VideoControls
                        className='VideoControlBar'
                        playing
                        onPlayClick={undefined}
                        isMuted
                        onMuteClick = {undefined}
                        onVolumeChange = {undefined}
                        onProgressChange = {undefined}
                        playPosition = {playPosition}
                        currentVolume = {60}
                        isInFullScreen
                        currentClosedCaptionsSetting={closedCaptonsSetting}
                        toggleFullScreen = {undefined}
                        closedCaptionMenu={playerMenu}
                        currentClosedCaptionLanguage={'en-us'}
                        isControlPanelVisible={true}
                        resources={{
                            playAriaLabel: LocalizationConstants.playAriaLabel,
                            pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                            closeAriaLabel: LocalizationConstants.closeAriaLabel,
                            muteAriaLabel: LocalizationConstants.muteAriaLabel,
                            unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                            fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                            exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                            pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                            playingAriaLabel: LocalizationConstants.playingAriaLabel,
                            videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                            closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                        }}

                />,
                { attachTo: document.body.firstElementChild as HTMLElement }
            );
            const videoControlsBar = wrapper.instance() as VideoControls;
            const buttons = document.querySelectorAll('button');
            expect(buttons.length).toBe(7);
            const closedCaption = buttons[2];
            expect(videoControlsBar.state.showMenu).toBe(false);
            videoControlsBar.render();

            // Test having focus and rerendering when button is clicked
            closedCaption.click();
            wrapper.update();
            expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
            expect(videoControlsBar.state.showMenu).toBe(true);

            closedCaption.click();
            wrapper.update();
            expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBe(0);
            expect(videoControlsBar.state.showMenu).toBe(false);

            wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('closed Captions menu works correctly if menu with submenu is clicked', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const closedCaptonsSetting: ICurrentClosedCaptionsSettings = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };

        const spyMenuItemClick = jest.fn();
        const spyMenuItemFocus = jest.fn();
        const spyMenuItemBlur = jest.fn();

        const playerMenu: IPlayerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch'
                },
                {
                    id: 'videoTestID-appearance',
                    label: 'Appearance',
                    selected: false,
                    selectable: false,
                    subMenu: {
                        id: 'videoTestID-cc-preset',
                        label: 'Appearance',
                        category: 'cc-settings',
                        items: [
                            {
                                id: '',
                                label: 'Appearance',
                                ariaLabel: 'Appreance - go back to previous menu',
                                selectable: false,
                                selected: false,
                                persistOnClick: false,
                                isBackButton: true,
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset1',
                                label: 'Preset 1 ',
                                data: 'preset:preset1',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset2',
                                label: 'Preset 2',
                                data: 'preset:preset2',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Monospaced Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset3',
                                label: 'Preset 3',
                                data: 'preset:preset3',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Yellow)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset4',
                                label: 'Preset 4',
                                data: 'preset:preset4',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Blue)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset5',
                                label: 'Preset 5',
                                data: 'preset:preset5',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Casual, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-customize',
                                label: 'Customize',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'reset',
                                label: 'Reset',
                                data: 'reset',
                                persistOnClick: true,
                                hasMouseHoverEvents: true
                            }]
                        }
                    }
                ]
            };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    currentClosedCaptionsSetting={closedCaptonsSetting}
                    closedCaptionMenu={playerMenu}
                    currentClosedCaptionLanguage={'en-us'}
                    isControlPanelVisible={true}
                    onMenuItemClick={spyMenuItemClick}
                    onMenuItemFocus={spyMenuItemFocus}
                    onMenuItemBlur={spyMenuItemBlur}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const closedCaption = buttons[2];
        expect(videoControlsBar.state.showMenu).toBe(false);
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        closedCaption.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        let menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(4);

        const offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('click');
        // wrapper.update();
        // console.log(offButton.html());
        // expect(offButton.html().indexOf('fa-check')).toBeGreaterThan(0);
        expect(spyMenuItemClick).toBeCalled();

        const englishButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        englishButton.simulate('click');
        // wrapper.update();
        // expect(englishButton.html().indexOf('fa-check')).toBeGreaterThan(0);
        expect(spyMenuItemClick).toBeCalled();

        const detuchButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(2);
        detuchButton.simulate('click');
        // wrapper.update();
        // expect(detuchButton.html().indexOf('fa-check')).toBeGreaterThan(0);
        expect(spyMenuItemClick).toBeCalled();

        const appButton = wrapper.find('div.msc-videoplayer__controls__menu button').last();
        appButton.simulate('click');
        wrapper.update();

        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(8);

        const backButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        backButton.simulate('click');
        wrapper.update();

        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(4);

        wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('closed Captions menu accessible through keyboard', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const closedCaptonsSetting: ICurrentClosedCaptionsSettings = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };

        const spyMenuItemClick = jest.fn();
        const spyMenuItemFocus = jest.fn();
        const spyMenuItemBlur = jest.fn();

        const playerMenu: IPlayerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch'
                },
                {
                    id: 'videoTestID-appearance',
                    label: 'Appearance',
                    selected: false,
                    selectable: false,
                    subMenu: {
                        id: 'videoTestID-cc-preset',
                        label: 'Appearance',
                        category: 'cc-settings',
                        items: [
                            {
                                id: '',
                                label: 'Appearance',
                                ariaLabel: 'Appreance - go back to previous menu',
                                selectable: false,
                                selected: false,
                                persistOnClick: false,
                                isBackButton: true,
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset1',
                                label: 'Preset 1 ',
                                data: 'preset:preset1',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset2',
                                label: 'Preset 2',
                                data: 'preset:preset2',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Monospaced Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset3',
                                label: 'Preset 3',
                                data: 'preset:preset3',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Yellow)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset4',
                                label: 'Preset 4',
                                data: 'preset:preset4',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Blue)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset5',
                                label: 'Preset 5',
                                data: 'preset:preset5',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Casual, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-customize',
                                label: 'Customize',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'reset',
                                label: 'Reset',
                                data: 'reset',
                                persistOnClick: true,
                                hasMouseHoverEvents: true
                            }]
                        }
                    }
                ]
            };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    currentClosedCaptionsSetting={closedCaptonsSetting}
                    closedCaptionMenu={playerMenu}
                    currentClosedCaptionLanguage={'en-us'}
                    isControlPanelVisible={true}
                    onMenuItemClick={spyMenuItemClick}
                    onMenuItemFocus={spyMenuItemFocus}
                    onMenuItemBlur={spyMenuItemBlur}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const closedCaption = buttons[2];
        expect(videoControlsBar.state.showMenu).toBe(false);
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        closedCaption.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        let menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(4);

        let offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('keyDown', { keyCode: KeyCodes.Tab});

        let englishButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        englishButton.simulate('keyDown', { keyCode: KeyCodes.Tab});

        let detuchButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(2);
        detuchButton.simulate('keyDown', { keyCode: KeyCodes.Tab, shiftKey: true});

        englishButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(1);
        englishButton.simulate('keyDown', { keyCode: KeyCodes.ArrowDown});

        englishButton.simulate('mouseover');
        expect(spyMenuItemFocus).not.toBeCalled();

        englishButton.simulate('mouseout');
        expect(spyMenuItemBlur).not.toBeCalled();

        englishButton.simulate('focus');
        expect(spyMenuItemFocus).not.toBeCalled();

        englishButton.simulate('blur');
        expect(spyMenuItemBlur).not.toBeCalled();

        detuchButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(2);
        detuchButton.simulate('keyDown', { keyCode: KeyCodes.ArrowUp});

        let appButton = wrapper.find('div.msc-videoplayer__controls__menu button').last();
        appButton.simulate('keyDown', { keyCode: KeyCodes.ArrowRight});

        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(8);

        const presetButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(2);
        presetButton.simulate('mouseover');
        expect(spyMenuItemFocus).toBeCalled();

        presetButton.simulate('mouseout');
        expect(spyMenuItemBlur).toBeCalled();

        presetButton.simulate('focus');
        expect(spyMenuItemFocus).toBeCalled();

        presetButton.simulate('blur');
        expect(spyMenuItemBlur).toBeCalled();

        const backButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        backButton.simulate('keyDown', { keyCode: KeyCodes.ArrowLeft});

        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(4);

        appButton = wrapper.find('div.msc-videoplayer__controls__menu button').last();
        appButton.simulate('keyDown', { keyCode: KeyCodes.ArrowDown});

        appButton.simulate('keyDown', {keyCode: KeyCodes.Enter});
        appButton.simulate('keyUp', {keyCode: KeyCodes.Enter});
        appButton.simulate('keyUp', {keyCode: KeyCodes.Space});

        offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('keyDown', { keyCode: KeyCodes.ArrowUp});

        appButton = wrapper.find('div.msc-videoplayer__controls__menu button').last();
        appButton.simulate('keyDown', { keyCode: KeyCodes.PageUp});

        offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('keyDown', { keyCode: KeyCodes.PageDown});

        detuchButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(2);
        detuchButton.simulate('keyDown', { keyCode: KeyCodes.ArrowUp});

        appButton = wrapper.find('div.msc-videoplayer__controls__menu button').last();
        appButton.simulate('keyDown', { keyCode: KeyCodes.Tab});

        appButton.simulate('keyDown', { keyCode: KeyCodes.Tab});
        expect(videoControlsBar.state.showMenu).toBe(false);

        closedCaption.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('keyDown', { keyCode: KeyCodes.Escape});

        wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('check document gets fired & menu hides upon document click', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const closedCaptonsSetting: ICurrentClosedCaptionsSettings = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };

        const spyMenuItemClick = jest.fn();
        const spyMenuItemFocus = jest.fn();
        const spyMenuItemBlur = jest.fn();

        const playerMenu: IPlayerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch'
                },
                {
                    id: 'videoTestID-appearance',
                    label: 'Appearance',
                    selected: false,
                    selectable: false,
                    subMenu: {
                        id: 'videoTestID-cc-preset',
                        label: 'Appearance',
                        category: 'cc-settings',
                        items: [
                            {
                                id: '',
                                label: 'Appearance',
                                ariaLabel: 'Appreance - go back to previous menu',
                                selectable: false,
                                selected: false,
                                persistOnClick: false,
                                isBackButton: true,
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset1',
                                label: 'Preset 1 ',
                                data: 'preset:preset1',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset2',
                                label: 'Preset 2',
                                data: 'preset:preset2',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Monospaced Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset3',
                                label: 'Preset 3',
                                data: 'preset:preset3',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Yellow)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset4',
                                label: 'Preset 4',
                                data: 'preset:preset4',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Blue)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset5',
                                label: 'Preset 5',
                                data: 'preset:preset5',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Casual, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-customize',
                                label: 'Customize',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'reset',
                                label: 'Reset',
                                data: 'reset',
                                persistOnClick: true,
                                hasMouseHoverEvents: true
                            }]
                        }
                    }
                ]
            };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    currentClosedCaptionsSetting={closedCaptonsSetting}
                    closedCaptionMenu={playerMenu}
                    currentClosedCaptionLanguage={'en-us'}
                    isControlPanelVisible={true}
                    onMenuItemClick={spyMenuItemClick}
                    onMenuItemFocus={spyMenuItemFocus}
                    onMenuItemBlur={spyMenuItemBlur}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        let buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const closedCaption = buttons[2];
        expect(videoControlsBar.state.showMenu).toBe(false);
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        closedCaption.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        const clickEvent = new Event('click', { bubbles: true, cancelable: false });
        document.dispatchEvent(clickEvent);
        wrapper.update();
        expect(videoControlsBar.state.showMenu).toBe(false);

        closedCaption.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        // For code coverage
        const targetElement = jest.spyOn(clickEvent, 'target', 'get');

        targetElement.mockImplementation(() => {
            return closedCaption;
        });
        document.dispatchEvent(clickEvent);

        closedCaption.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);

        buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(11);

        targetElement.mockImplementation(() => {
            return buttons[4];
        });
        document.dispatchEvent(clickEvent);

        wrapper.update();
        expect(videoControlsBar.state.showMenu).toBe(true);

        wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('closed Captions menu hides upon resize', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const closedCaptonsSetting: ICurrentClosedCaptionsSettings = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };

        const spyMenuItemClick = jest.fn();
        const spyMenuItemFocus = jest.fn();
        const spyMenuItemBlur = jest.fn();

        const playerMenu: IPlayerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch'
                },
                {
                    id: 'videoTestID-appearance',
                    label: 'Appearance',
                    selected: false,
                    selectable: false,
                    subMenu: {
                        id: 'videoTestID-cc-preset',
                        label: 'Appearance',
                        category: 'cc-settings',
                        items: [
                            {
                                id: '',
                                label: 'Appearance',
                                ariaLabel: 'Appreance - go back to previous menu',
                                selectable: false,
                                selected: false,
                                persistOnClick: false,
                                isBackButton: true,
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset1',
                                label: 'Preset 1 ',
                                data: 'preset:preset1',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset2',
                                label: 'Preset 2',
                                data: 'preset:preset2',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Monospaced Serif, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset3',
                                label: 'Preset 3',
                                data: 'preset:preset3',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Yellow)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset4',
                                label: 'Preset 4',
                                data: 'preset:preset4',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Proportional Sans Serif, Text color:Blue)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-preset-preset5',
                                label: 'Preset 5',
                                data: 'preset:preset5',
                                selectable: true,
                                selected: false,
                                persistOnClick: true,
                                ariaLabel: 'Close captions appearance : (Font:Casual, Text color:White)',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'videoTestID-cc-customize',
                                label: 'Customize',
                                hasMouseHoverEvents: true
                            },
                            {
                                id: 'reset',
                                label: 'Reset',
                                data: 'reset',
                                persistOnClick: true,
                                hasMouseHoverEvents: true
                            }]
                        }
                    }
                ]
            };

        const props: IVideoControlsProps = {
                    className:'VideoControlBar',
                    playing: true,
                    isMuted: false,
                    playPosition: playPosition,
                    currentVolume: 60,
                    currentClosedCaptionsSetting: closedCaptonsSetting,
                    closedCaptionMenu: playerMenu,
                    currentAudioTrack: '',
                    currentAudioTrackURL: '',
                    currentClosedCaptionLanguage:'en-us',
                    isControlPanelVisible:true,
                    onMenuItemClick: spyMenuItemClick,
                    onMenuItemFocus:spyMenuItemFocus,
                    onMenuItemBlur: spyMenuItemBlur,
                    isMobileDevice: false,
            resources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                closeAriaLabel: LocalizationConstants.closeAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                pausedAriaLabel: LocalizationConstants.pausedAriaLabel,
                playingAriaLabel: LocalizationConstants.playingAriaLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                closedCaptionLabel: LocalizationConstants.closedCaptionLabel
            },
            viewportMin: 900,
            viewportMax: 1200
        };

        const wrapper = mount(
            <VideoControls
                   {...props}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const closedCaption = buttons[2];
        expect(videoControlsBar.state.showMenu).toBe(false);
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        closedCaption.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        // This will call the resize fucntion
        videoControlsBar.componentDidMount();
        expect(videoControlsBar.state.showMenu).toBe(false);

        wrapper.unmount();
    });
    // tslint:disable-next-line: max-func-body-length
    it('should be able to navigate through menu using keyboard', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const closedCaptonsSetting: ICurrentClosedCaptionsSettings = {
            preset: closedCaptionsSettingDefaults.preset,
            text_font: closedCaptionsSettingDefaults.text_font,
            text_color: closedCaptionsSettingDefaults.text_color,
            text_opacity: closedCaptionsSettingDefaults.text_opacity,
            text_size: closedCaptionsSettingDefaults.text_size,
            text_edge_style: closedCaptionsSettingDefaults.text_edge_style,
            text_background_color: closedCaptionsSettingDefaults.text_background_color,
            text_background_opacity: closedCaptionsSettingDefaults.text_background_opacity,
            window_color: closedCaptionsSettingDefaults.window_color,
            window_opacity: closedCaptionsSettingDefaults.window_opacity
        };

        const spyMenuItemClick = jest.fn();
        const spyMenuItemFocus = jest.fn();
        const spyMenuItemBlur = jest.fn();

        const playerMenu: IPlayerMenu = {
            category: 'close-caption',
            id: 'videoTestID-close-caption',
            label: '',
            items: [
                {
                    id: 'videoTestID-off',
                    label: 'Off',
                    selected: true,
                    data: 'off',
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Off '
                },
                {
                    id: 'videoTestID-en-us',
                    label: 'English',
                    language: 'en',
                    data: 'en-us',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'English '
                },
                {
                    id: 'videoTestID-de-de',
                    label: 'Deutsch',
                    language: 'de',
                    data: 'de-de',
                    selected: false,
                    selectable: true,
                    persistOnClick: true,
                    ariaLabel: 'Deutsch'
                },
                {
                    id: 'videoTestID-appearance',
                    label: 'Appearance',
                    selected: false,
                    selectable: false,
                    subMenu: {
                        id: 'videoTestID-cc-preset',
                        label: 'Appearance',
                        category: 'cc-settings',
                        items: []
                        }
                    }
                ]
            };

        const props: IVideoControlsProps = {
                    className:'VideoControlBar',
                    playing: true,
                    isMuted: false,
                    playPosition: playPosition,
                    currentVolume: 60,
                    currentClosedCaptionsSetting: closedCaptonsSetting,
                    closedCaptionMenu: playerMenu,
                    currentClosedCaptionLanguage:'en-us',
                    currentAudioTrack: '',
                    currentAudioTrackURL: '',
                    isControlPanelVisible: true,
                    onMenuItemClick: spyMenuItemClick,
                    onMenuItemFocus:spyMenuItemFocus,
                    onMenuItemBlur: spyMenuItemBlur,
                    isMobileDevice: false,
            resources: {
                playAriaLabel: LocalizationConstants.playAriaLabel,
                pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                closeAriaLabel: LocalizationConstants.closeAriaLabel,
                muteAriaLabel: LocalizationConstants.muteAriaLabel,
                unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                pausedAriaLabel: LocalizationConstants.pausedAriaLabel,
                playingAriaLabel: LocalizationConstants.playingAriaLabel,
                videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                closedCaptionLabel: LocalizationConstants.closedCaptionLabel
            },
            viewportMin: 900,
            viewportMax: 1200
        };

        const wrapper = mount(
            <VideoControls
                   {...props}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const closedCaption = buttons[2];
        expect(videoControlsBar.state.showMenu).toBe(false);
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        closedCaption.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);
        wrapper.setProps({ isControlPanelVisible: false});

        const menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(4);

        const offButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        offButton.simulate('keyDown', { keyCode: KeyCodes.End});

        offButton.simulate('keyDown', { keyCode: KeyCodes.Escape});
        expect(videoControlsBar.state.showMenu).toBe(false);

        const getUserAgent = jest.spyOn(window.navigator, 'userAgent', 'get');

        getUserAgent.mockImplementation(() => {
            return 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36 /iPhone/i';
        });

        const videoControl = document.getElementsByClassName('VideoControlBar')[0];
        const getClientWidth = jest.spyOn(videoControl, 'clientWidth', 'get');

        getClientWidth.mockImplementation(() => {
            return 590;
        });

        videoControlsBar.componentDidMount();

        getClientWidth.mockImplementation(() => {
            return 1000;
        });
        videoControlsBar.componentDidMount();
        wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('should open option menu when clicked on option button', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const optionMenu: IPlayerMenu = {
            category: 'options',
            id: 'videoTestID-options',
            label: 'Options',
            items: [
                {
                id: 'videoTestID-audioTracks',
                label: 'Audio Tracks',
                selected: false,
                selectable: false,
                subMenu: {
                    category: 'audio-tracks',
                    id: 'videoTestID-audio-tracks',
                    label: 'Audio Tracks',
                    items: [
                    {
                        id: '',
                        label: 'Audio Tracks',
                        ariaLabel: 'Audio Tracks - go back to previous menu',
                        selectable: false,
                        selected: false,
                        persistOnClick: false,
                        isBackButton: true
                    },
                    {
                        id: '',
                        label: 'Default Track',
                        ariaLabel: 'Default Track',
                        language: 'default',
                        data: 'default',
                        selectable: true,
                        selected: false,
                        persistOnClick: true
                    },
                    {
                        label: 'Audio descriptions',
                        language: 'daudio-en-us',
                        data: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-daudioenus?ver=e1d0',
                        id: 'videoTestID-audio-0',
                        selected: false,
                        selectable: true,
                        persistOnClick: true
                    }
                    ]
                }
                }
            ]
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    currentClosedCaptionsSetting={undefined}
                    toggleFullScreen = {undefined}
                    closedCaptionMenu={undefined}
                    currentClosedCaptionLanguage={'en-us'}
                    isControlPanelVisible={true}
                    optionMenu={optionMenu}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const optionButton = buttons[2];
        expect(videoControlsBar.state.showMenu).toBe(false);
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        optionButton.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        optionButton.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBe(0);
        expect(videoControlsBar.state.showMenu).toBe(false);

        wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('option menu is accessible through keyboard', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const optionMenu: IPlayerMenu = {
            category: 'options',
            id: 'videoTestID-options',
            label: 'Options',
            items: [
                {
                id: 'videoTestID-audioTracks',
                label: 'Audio Tracks',
                selected: false,
                selectable: false,
                subMenu: {
                    category: 'audio-tracks',
                    id: 'videoTestID-audio-tracks',
                    label: 'Audio Tracks',
                    items: [
                    {
                        id: '',
                        label: 'Audio Tracks',
                        ariaLabel: 'Audio Tracks - go back to previous menu',
                        selectable: false,
                        selected: false,
                        persistOnClick: false,
                        isBackButton: true
                    },
                    {
                        id: '',
                        label: 'Default Track',
                        ariaLabel: 'Default Track',
                        language: 'default',
                        data: 'default',
                        selectable: true,
                        selected: false,
                        persistOnClick: true
                    },
                    {
                        label: 'Audio descriptions',
                        language: 'daudio-en-us',
                        data: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-daudioenus?ver=e1d0',
                        id: 'videoTestID-audio-0',
                        selected: false,
                        selectable: true,
                        persistOnClick: true
                    }
                    ]
                }
                }
            ]
        };

        const spyMenuItemClick = jest.fn();
        const spyMenuItemFocus = jest.fn();
        const spyMenuItemBlur = jest.fn();

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    optionMenu = {optionMenu}
                    currentClosedCaptionsSetting={undefined}
                    closedCaptionMenu={undefined}
                    currentClosedCaptionLanguage={'en-us'}
                    currentAudioTrack={'default'}
                    isControlPanelVisible={true}
                    onMenuItemClick={spyMenuItemClick}
                    onMenuItemFocus={spyMenuItemFocus}
                    onMenuItemBlur={spyMenuItemBlur}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const optionButton = buttons[2];
        expect(videoControlsBar.state.showMenu).toBe(false);
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        optionButton.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        let menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(1);

        let audioTrackButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        audioTrackButton.simulate('keyDown', { keyCode: KeyCodes.ArrowRight});

        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(3);

        const audioDescriptionButton = wrapper.find('div.msc-videoplayer__controls__menu button').at(2);
        audioDescriptionButton.simulate('click');

        const backButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        backButton.simulate('keyDown', { keyCode: KeyCodes.ArrowLeft});

        menuButtons = wrapper.find('div.msc-videoplayer__controls__menu button');
        expect(menuButtons.length).toBe(1);

        audioTrackButton = wrapper.find('div.msc-videoplayer__controls__menu button').first();
        audioTrackButton.simulate('keyDown', { keyCode: KeyCodes.Escape});

        wrapper.unmount();
    });

    // tslint:disable-next-line: max-func-body-length
    it('should hide options menu when clicked anywhere on document', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const optionMenu: IPlayerMenu = {
            category: 'options',
            id: 'videoTestID-options',
            label: 'Options',
            items: [
                {
                id: 'videoTestID-audioTracks',
                label: 'Audio Tracks',
                selected: false,
                selectable: false,
                subMenu: {
                    category: 'audio-tracks',
                    id: 'videoTestID-audio-tracks',
                    label: 'Audio Tracks',
                    items: [
                    {
                        id: '',
                        label: 'Audio Tracks',
                        ariaLabel: 'Audio Tracks - go back to previous menu',
                        selectable: false,
                        selected: false,
                        persistOnClick: false,
                        isBackButton: true
                    },
                    {
                        id: '',
                        label: 'Default Track',
                        ariaLabel: 'Default Track',
                        language: 'default',
                        data: 'default',
                        selectable: true,
                        selected: false,
                        persistOnClick: true
                    },
                    {
                        label: 'Audio descriptions',
                        language: 'daudio-en-us',
                        data: 'https://ppe-video-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikamsb/videofiledata/MAtCD0-daudioenus?ver=e1d0',
                        id: 'videoTestID-audio-0',
                        selected: false,
                        selectable: true,
                        persistOnClick: true
                    }
                    ]
                }
                }
            ]
        };

        const spyMenuItemClick = jest.fn();
        const spyMenuItemFocus = jest.fn();
        const spyMenuItemBlur = jest.fn();

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {60}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    optionMenu = {optionMenu}
                    currentClosedCaptionsSetting={undefined}
                    closedCaptionMenu={undefined}
                    currentClosedCaptionLanguage={'en-us'}
                    currentAudioTrack={'default'}
                    isControlPanelVisible={true}
                    onMenuItemClick={spyMenuItemClick}
                    onMenuItemFocus={spyMenuItemFocus}
                    onMenuItemBlur={spyMenuItemBlur}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}

            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );

        const videoControlsBar = wrapper.instance() as VideoControls;
        let buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(7);
        const optionButton = buttons[2];
        expect(videoControlsBar.state.showMenu).toBe(false);
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked
        optionButton.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        const clickEvent = new Event('click', { bubbles: true, cancelable: false });
        document.dispatchEvent(clickEvent);
        wrapper.update();
        expect(videoControlsBar.state.showMenu).toBe(false);

        optionButton.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);
        expect(videoControlsBar.state.showMenu).toBe(true);

        // For code coverage
        const targetElement = jest.spyOn(clickEvent, 'target', 'get');

        targetElement.mockImplementation(() => {
            return optionButton;
        });
        document.dispatchEvent(clickEvent);

        optionButton.click();
        wrapper.update();
        expect(wrapper.find('div.msc-videoplayer__controls__menu').length).toBeGreaterThan(0);

        buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(8);

        targetElement.mockImplementation(() => {
            return buttons[3];
        });
        document.dispatchEvent(clickEvent);

        wrapper.update();
        expect(videoControlsBar.state.showMenu).toBe(true);

        wrapper.unmount();
    });

});

describe('VideoControl button states updates upon clicking', () => {
    it('Play Pause Button when click function undefined', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControls = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const play = buttons[0];
        const pause = buttons[1];

        // Verify expected initial state
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        videoControls.render();

        // Test having focus and rerendering when button is clicked, but clicked is undefined
        play.click();
        wrapper.update();

        pause.click();
        wrapper.update();

        wrapper.unmount();
    });

    it('Mute Unmute Button when click function undefined', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const mute = buttons[2];
        const unMute = buttons[3];

        // Verify expected initial state
        expect(mute.getAttribute('aria-hidden')).toBe('true');
        expect(unMute.getAttribute('aria-hidden')).toBe('false');
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked, but clicked is undefined
        mute.click();
        wrapper.update();

        unMute.click();
        wrapper.update();

        wrapper.unmount();
    });

    it('FullScreen ExitFullScreen when click function undefined', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {0}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);
        const fullScreen = buttons[4];
        const exitFulScreen = buttons[5];

        // Verify expected initial state
        expect(fullScreen.getAttribute('aria-hidden')).toBe('true');
        expect(exitFulScreen.getAttribute('aria-hidden')).toBe('false');
        videoControlsBar.render();

        // Test having focus and rerendering when button is clicked, but clicked is undefined
        fullScreen.click();
        wrapper.update();

        exitFulScreen.click();
        wrapper.update();

        wrapper.unmount();
    });

    it('Volume slider works when onChange function undefined', () => {
        const volumeAutoHideTimeout: number = 2000;
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {50}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(6);

        videoControlsBar.render();
        // Test having focus and rerendering when button is clicked
        wrapper.find('div.action-toggle').at(1).simulate('mouseOver');
        wrapper.update();

        expect(videoControlsBar.state.showVolumeSlider).toBe(true);

        wrapper.find('div#VolumeSliderThumb').simulate('keyDown', {keyCode: 37});

        wrapper.find('div#VolumeSliderThumb').simulate('keyDown', {keyCode: 39});

        wrapper.find('div.action-toggle').at(1).simulate('mouseleave');
        wrapper.update();
        setTimeout(() => {
            expect(videoControlsBar.state.showVolumeSlider).toBe(false);
            expect(wrapper.find('div.msc-videoplayer__controls__volumeslider__container').hasClass('hide')).toBe(true);
        },         volumeAutoHideTimeout);
        wrapper.unmount();
    });

    it('Video slider works when onChange function undefined', () => {
        const playPosition: IPlayPosition = {
            currentTime: 0,
            startTime: 0,
            endTime: 0,
            bufferedDuration: 0
        };

        const wrapper = mount(
            <VideoControls
                    className='VideoControlBar'
                    playing
                    onPlayClick={undefined}
                    isMuted
                    onMuteClick = {undefined}
                    onVolumeChange = {undefined}
                    onProgressChange = {undefined}
                    playPosition = {playPosition}
                    currentVolume = {50}
                    isInFullScreen
                    toggleFullScreen = {undefined}
                    resources={{
                        playAriaLabel: LocalizationConstants.playAriaLabel,
                        pauseAriaLabel: LocalizationConstants.pauseAriaLabel,
                        closeAriaLabel: LocalizationConstants.closeAriaLabel,
                        muteAriaLabel: LocalizationConstants.muteAriaLabel,
                        unMuteAriaLabel: LocalizationConstants.unMuteAriaLabel,
                        fullScreenAriaLabel: LocalizationConstants.fullScreenAriaLabel,
                        exitFullScreenAriaLabel: LocalizationConstants.exitFullScreenAriaLabel,
                        pausedAriaLabel: LocalizationConstants.pauseAriaLabel,
                        playingAriaLabel: LocalizationConstants.playingAriaLabel,
                        seekBarLabel: LocalizationConstants.seekBarLabel,
                        videoTimeDurationLabel: LocalizationConstants.videoTimeDurationLabel,
                        closedCaptionLabel: LocalizationConstants.closedCaptionLabel
                    }}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const videoControlsBar = wrapper.instance() as VideoControls;

        videoControlsBar.render();
        // Test having focus and rerendering when button is clicked

        wrapper.find('div#VideoSliderThumb').simulate('keyDown', {keyCode: 38});

        wrapper.find('div#VideoSliderThumb').simulate('keyDown', {keyCode: 40});

        wrapper.update();
        wrapper.unmount();
    });

});
