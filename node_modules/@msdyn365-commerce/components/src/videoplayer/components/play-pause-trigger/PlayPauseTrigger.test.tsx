import { mount } from 'enzyme';
import * as React from 'react';
import PlayPauseTrigger from './PlayPauseTrigger';

describe('PlayPauseTrigger ', () => {
    it('PlayPauseTrigger work correctly when clicked', () => {
        const spyChange = jest.fn();
        const wrapper = mount(
            <PlayPauseTrigger
                className='PlayPauseTrigger'
                toggled
                onChange={spyChange}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const playPauseTrigger = wrapper.instance() as PlayPauseTrigger;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];

        // Verify expected arialabel for play pause button
        expect(play.getAttribute('aria-label')).toBe('play');
        expect(pause.getAttribute('aria-label')).toBe('pause');

        // Verify expected initial state
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        playPauseTrigger.render();

        // Test having focus and rerendering when button is clicked
        play.click();
        wrapper.update();
        expect(spyChange).toHaveBeenCalled();

        wrapper.unmount();
    });
});

describe('PlayPauseTrigger ', () => {
    it('PlayPauseTrigger when click function undefined', () => {
        const wrapper = mount(
            <PlayPauseTrigger
                className='PlayPauseTrigger'
                toggled
                onChange={undefined}
            />,
            { attachTo: document.body.firstElementChild as HTMLElement }
        );
        const playPauseTrigger = wrapper.instance() as PlayPauseTrigger;
        const buttons = document.querySelectorAll('button');
        expect(buttons.length).toBe(2);
        const play = buttons[0];
        const pause = buttons[1];

        // Verify expected arialabel for play pause button
        expect(play.getAttribute('aria-label')).toBe('play');
        expect(pause.getAttribute('aria-label')).toBe('pause');

        // Verify expected initial state
        expect(play.getAttribute('aria-hidden')).toBe('true');
        expect(pause.getAttribute('aria-hidden')).toBe('false');
        playPauseTrigger.render();

        // Test having focus and rerendering when button is clicked, but clicked is undefined
        play.click();
        wrapper.update();

        wrapper.unmount();
    });
});
