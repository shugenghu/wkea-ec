import * as utilities from './utilities';

describe('test clamp function', () => {
    it('when min is greater then max it returns 0', () => {
        expect(utilities.clamp(50,100,50)).toBe(0);
    });
});

describe('test to upper function', () => {
    it('returns empty when nothing is passed to it', () => {
        expect(utilities.toUpperCaseFirstChar('')).toBe('');
    });
    it('returns upper cased string when string is passed', () => {
        expect(utilities.toUpperCaseFirstChar('foo')).toBe('Foo');
        expect(utilities.toUpperCaseFirstChar('bar')).toBe('Bar');
        expect(utilities.toUpperCaseFirstChar('achtung')).toBe('Achtung');
    });
    it('returns upper cased string when string with one character is passed', () => {
        expect(utilities.toUpperCaseFirstChar('f')).toBe('F');
    });
});

describe('mapToCssModules test cases', () => {

    it('returns className when cssModule is null', () => {
        expect(utilities.mapToCssModules('btn-large', null)).toBe('btn-large');
    });

    it('returns empty when nothing is passed to it', () => {
        const obj = new Object();
        expect(utilities.mapToCssModules('', obj)).toBe('');
    });
});

describe('getDimensions test cases', () => {

    it('returns null when containerElement is null', () => {
        expect(utilities.getDimensions(null!)).toBe(null);
    });

});

describe('isRef test cases', () => {
    it('returns false when target is null', () => {
        expect(utilities.isRef(null)).toBe(false);
    });

    it('returns false when target is not null', () => {
        const obj = new Object();
        expect(utilities.isRef(obj)).toBe(false);
    });
});

describe('isElement test cases', () => {
    it('returns false when target is null', () => {
        expect(utilities.isElement(null)).toBe(false);
    });

    it('returns false when target is not null', () => {
        const obj = new Object();
        expect(utilities.isElement(obj)).toBe(false);
    });
});

describe('getCSS', () => {
    it('Returns the inline style of the element', () => {
        const root = document.getElementById('root');
        const div1 = document.createElement('div');
        div1.setAttribute('class', 'choice-summary__item');
        div1.style.display = 'block';
        root!.appendChild(div1);
        expect(utilities.getCSS(div1, 'display')).toEqual('block');
    });

    it('Returns the computed style of the element', () => {
        const root = document.getElementById('root');
        const div1 = document.createElement('div');
        div1.setAttribute('class', 'choice-summary__item');
        root!.appendChild(div1);
        expect(utilities.getCSS(div1, 'display')).toEqual(undefined);
    });
});

describe('htmlCollectionToArray', () => {
    it('convers an hmltCollection to an array', () => {
        const root = document.getElementById('root');
        const div1 = document.createElement('div');
        div1.setAttribute('class', 'myclass');
        root!.appendChild(div1);
        const div2 = document.createElement('div');
        div2.setAttribute('class', 'myclass');
        root!.appendChild(div2);
        const collection = document.getElementsByClassName('myclass');
        expect(utilities.htmlCollectionToArray(collection)).toEqual([div1, div2]);
    });
});

describe('addThrottledEvent', () => {
    // tslint:disable-next-line:no-any
    it('', (done: any) => {
        let counter = 0;
        const span = document.createElement('span');

        utilities.addThrottledEvent(span, 'click', () => {
            counter++;
        });

        span.click();
        span.click();
        expect(counter).toBe(1);

        // const delayStart = Date.now();

        setTimeout(() => {
            expect(counter).toBe(2);
            done();
        },         250);
    });

    // tslint:disable-next-line:no-any
    it('should throttle events that come in under the threshold', (done: any) => {
        let counter = 0;
        const span = document.createElement('span');

        utilities.addThrottledEvent(span, 'click', () => {
            counter++;
        });

        span.click();
        span.click();
        span.click();
        span.click();
        span.click();

        expect(counter).toBe(1);

        setTimeout(() => {
            expect(counter).toBe(2);
            done();
        },         250);
    });

    // tslint:disable-next-line:no-any
    it('should add an event throttle with a custom throttle', (done: any) => {
        let counter = 0;
        const customThreshold = 400;
        const subThreshold1 = 250;
        const subThreshold2 = customThreshold - 151;
        const span = document.createElement('span');

        utilities.addThrottledEvent(span, 'click', () => {
            counter++;
        },                          customThreshold);

        span.click();
        span.click();

        expect(counter).toBe(1);

        setTimeout(() => {
            expect(counter).toBe(1);

            setTimeout(() => {
                expect(counter).toBe(2);
                done();
            },         subThreshold2);
        },         subThreshold1);
    });
});

describe('extend test cases', () => {
    it('should return null if parameters are null', () => {
        expect(utilities.extend()).toBe(null);
    });

    it('should return passed value if only one parameter is passed and it is not boolean', () => {
        const arr: string = 'abc';
        expect(utilities.extend(arr)).toBe('abc');
    });

    it('should return null if only one parameter is passed and it is true', () => {
        expect(utilities.extend(true)).toBe(null);
    });

    it('should return second parameter if only two parameter is passed and the first one is true', () => {
        expect(utilities.extend(true, 'abc')).toBe('abc');
    });

    it('should return second parameter if only two parameter is passed and the first one is true', () => {
        const source = {
                ttmlNamespace: '',
                ttmlStyleNamespace: '',
                ttmlParameterNamespace: '',
                ttmlMetaNamespace:'',
                idPrefix:'',
                mediaFrameRate:30,
                mediaFrameRateMultiplier:1,
                mediaSubFrameRate:1,
                mediaTickRate:1000,
                supportedTimeBase:'media',
                rootContainerRegionDimensions:null,
                relatedMediaObjectRegion:null,
                cellResolution:{
                    rows:15, columns:32},
                defaultRegionStyle:{
                    backgroundColor: 'transparent',
                    color: '#E8E9EA',
                    direction: 'ltr',
                    display:'auto',
                    displayAlign:'before',
                    extent:'auto',
                    fontFamily:'default',
                    fontSize:'1c',
                    fontStyle:'normal',
                    fontWeight:'normal',
                    lineHeight:'normal',
                    opacity:1,
                    origin:'auto',
                    overflow:'hidden',padding:0,
                    showBackground:'always',
                    textAlign:'start',
                    textDecoration:'none',
                    textOutline:'none',
                    unicodeBidi:'normal',
                    visibility:'visible',
                    wrapOption:'normal',
                    writingMode:'lrtb'
                },
                fontMap:{
                    default:'Lucida sans typewriter, Lucida console, Consolas',
                    monospaceSerif:'Courier',
                    proportionalSerif:'Times New Roman, Serif',
                    monospaceSansSerif:'Lucida sans typewriter, Lucida console, Consolas',
                    proportionalSansSerif: 'Arial, Sans-serif',
                    casual:'Verdana',
                    cursive: 'Zapf-Chancery, Segoe script, Cursive',
                    smallCaps:'Arial, Helvetica',
                    monospace:'Lucida sans typewriter, Lucida console, Consolas',
                    sansSerif:'Arial, Sans-serif',
                    serif:'Times New Roman, Serif'}
                };
        const target = {
                    idPrefix:'',
                    fontMap:{
                        default:'Segoe ui, Arial'
                    },
                    relatedMediaObjectRegion:{
                        width:639,
                        height:319
                    }
                };
        utilities.extend(true, source, target, 'ghi', undefined, 123 , 456);
        utilities.extend(true, [['abc','def'], 'def'], [['ghi', 'jkl'], 'jkl'], 'ghi', undefined, 123 , 456);
        utilities.extend(true, [[['abc','def'], 'abc','def'], 'def'], [[ ['abc','def'],'ghi', 'jkl'], 'jkl'], 'ghi', undefined, 123 , 456);
        utilities.extend(true, [ 'def'], [['ghi', 'jkl'], 'jkl'], 'ghi', undefined, 123 , 456);
        });
});
