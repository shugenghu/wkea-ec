/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';
import * as React from 'react';
import { IWishlistIconComponentProps, WishListIconComponent } from './wishlist-icon.component';

import {render} from 'enzyme';

describe('wishlist icon tests - auth scenario', () => {
    const mockCoreContext = buildMockCoreContext({app: {config: {hideRating: false}}}) as ICoreContext;
    const telemetryContent = {  pageName: 'Homepage', moduleName: 'Wishlist icon', telemetry: mockCoreContext.telemetry} as ITelemetryContent;
    it('renders correctly', () => {
        const mockProps: IWishlistIconComponentProps = {
            context: buildMockCoreContext({}),
            wishlistTooltipText: 'My wishlist',
            id: 'id',
            typeName: 'typeName',
            data: {},
            telemetryContent: telemetryContent
        };
        mockProps.context.request.user.isAuthenticated = true;

        const component = render(<WishListIconComponent {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly without class name', () => {
        const mockProps: IWishlistIconComponentProps = {
            context: buildMockCoreContext({}),
            wishlistTooltipText: 'My wishlist',
            id: 'id',
            typeName: 'typeName',
            data: {},
            telemetryContent: telemetryContent
        };
        mockProps.context.request.user.isAuthenticated = true;

        const component = render(<WishListIconComponent {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});

describe('wishlist icon tests - anon scenario', () => {
    const mockCoreContext = buildMockCoreContext({app: {config: {hideRating: false}}}) as ICoreContext;
    const telemetryContent = {  pageName: 'Homepage', moduleName: 'Wishlist icon', telemetry: mockCoreContext.telemetry} as ITelemetryContent;

    it('renders correctly', () => {
        const mockProps: IWishlistIconComponentProps = {
            context: buildMockCoreContext({}),
            wishlistTooltipText: 'My wishlist',
            id: 'id',
            typeName: 'typeName',
            data: {},
            telemetryContent: telemetryContent
        };
        mockProps.context.request.user.isAuthenticated = false;

        const component = render(<WishListIconComponent {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly without class name', () => {
        const mockProps: IWishlistIconComponentProps = {
            context: buildMockCoreContext({}),
            wishlistTooltipText: 'My wishlist',
            id: 'id',
            typeName: 'typeName',
            data: {},
            telemetryContent: telemetryContent
        };
        mockProps.context.request.user.isAuthenticated = false;

        const component = render(<WishListIconComponent {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});