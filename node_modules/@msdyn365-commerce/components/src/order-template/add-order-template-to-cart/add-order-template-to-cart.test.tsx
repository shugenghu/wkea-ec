import { render } from 'enzyme';
import * as React from 'react';

import { OrderTemplate } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';
import {  ProductListLine } from '@msdyn365-commerce/retail-proxy';
import { ILinesAddedToCartDialogResources } from '../lines-added-to-cart-dialog/lines-added-to-cart-dialog.component';
import { AddOrderTemplateToCartComponent } from './add-order-template-to-cart.component';

describe('AddOrderTemplateToCartComponent', () => {
    let mockCoreContext: ICoreContext;
    const addToCartText = 'Add to order template';
    const closeWindowButtonText = 'Cancel';
    const addToCartFailureMessage = 'fail';
    const addToCartSuccessMessage = 'success';
    const addToCartProcessMessage = 'process';

    const productListLine: ProductListLine = {
        ProductListId: 'product-list-id',
        LineId: 'line-id',
        ProductId: 42,
        Quantity: 12,
        UnitOfMeasure: 'ea'
    };
    const orderTemplate: OrderTemplate = {
        productList: {
            Id: 'id',
            ProductListLines: [productListLine]
        },
        orderTemplateLines: [{ productListLine: productListLine }],
        totalLines: 1
    };
    const emptyOrderTemplate: OrderTemplate = {
        productList: {
            Id: 'id'
        },
        orderTemplateLines: [],
        totalLines: 0
    };
    const linesAddedToCartDialogResources: ILinesAddedToCartDialogResources = {
        viewCartButtonText: 'viewCartButtonText',
        orderTemplateCloseButtonText: 'orderTemplateCloseButtonText',
        linesAddedToCartHeaderItemsOneText: 'linesAddedToCartHeaderItemsOneText',
        linesAddedToCartHeaderLinesOneText: 'linesAddedToCartHeaderLinesOneText',
        linesAddedToCartHeaderLinesFormatText: 'linesAddedToCartHeaderLinesFormatText',
        linesAddedToCartHeaderMessageText: 'linesAddedToCartHeaderMessageText'
    };

    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: false, outOfStockThreshold: 5}}}) as ICoreContext;
    });

    it('renders correctly with all params', () => {
        const addOrderTemplateToCartComponent = render((
            <AddOrderTemplateToCartComponent
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                addToCartText={addToCartText}
                data={{orderTemplate}}
                dialogStrings={{
                    closeWindowButtonText: closeWindowButtonText,
                    addToCartFailureMessage: addToCartFailureMessage,
                    addToCartSuccessMessage: addToCartSuccessMessage,
                    addToCartProcessMessage: addToCartProcessMessage,
                    linesAddedToCartDialogResources: linesAddedToCartDialogResources
                }}
            />
        ));
        expect(addOrderTemplateToCartComponent).toMatchSnapshot();
    });

    it('renders correctly with empty list', () => {
        const addOrderTemplateToCartComponent = render((
            <AddOrderTemplateToCartComponent
                id='id'
                typeName='type-name'
                context={mockCoreContext}
                addToCartText={addToCartText}
                data={{orderTemplate: emptyOrderTemplate}}
                dialogStrings={{
                    closeWindowButtonText: closeWindowButtonText,
                    addToCartFailureMessage: addToCartFailureMessage,
                    addToCartSuccessMessage: addToCartSuccessMessage,
                    addToCartProcessMessage: addToCartProcessMessage,
                    linesAddedToCartDialogResources: linesAddedToCartDialogResources
                }}
            />
        ));
        expect(addOrderTemplateToCartComponent).toMatchSnapshot();
    });
});