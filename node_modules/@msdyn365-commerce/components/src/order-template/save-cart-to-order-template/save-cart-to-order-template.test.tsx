import { render } from 'enzyme';
import * as React from 'react';

import { OrderTemplate } from '@msdyn365-commerce-modules/retail-actions';
import { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';
import { CartLine, Customer, ProductListLine } from '@msdyn365-commerce/retail-proxy';
import { IAddToOrderTemplateDialogResources } from '../add-to-order-template-dialog/add-to-order-template-dialog.component';
import { ILinesAddedToOrderTemplateDialogResources } from '../lines-added-to-order-template-dialog/lines-added-to-order-template-dialog.component';
import { IOrderTemplateNameDialogResources } from '../order-template-name-dialog/order-template-name-dialog.component';
import { SaveCartToOrderTemplateComponent } from './save-cart-to-order-template.component';

describe('SaveCartToOrderTemplateComponent', () => {
    let mockCoreContext: ICoreContext;
    const productListLine: ProductListLine = {
        ProductListId: 'product-list-id',
        LineId: 'line-id',
        ProductId: 42,
        Quantity: 12,
        UnitOfMeasure: 'ea'
    };
    const emptyOrderTemplate: OrderTemplate = {
        productList: {
            Id: 'id'
        },
        orderTemplateLines: [],
        totalLines: 0
    };
    const orderTemplate: OrderTemplate = {
        productList: {
            Id: 'id',
            ProductListLines: [productListLine]
        },
        orderTemplateLines: [{ productListLine: productListLine }],
        totalLines: 0
    };
    const cartLine: CartLine = { ProductId: 3, Quantity: 12, UnitOfMeasureSymbol: 'ea' };
    const emptyCartLine: CartLine = { };
    const b2bCustomer: Customer = {
        AccountNumber: 'customer-id',
        IsB2b: true
    };
    const nonB2bCustomer: Customer = {
        AccountNumber: 'customer-id'
    };
    const addToOrderTemplateDialogResources: IAddToOrderTemplateDialogResources = {
        addToOrderTemplateHeader: 'addToOrderTemplateHeader',

        noOrderTemplatesMessage: 'noOrderTemplatesMessage',
        noOrderTemplatesDescription: 'noOrderTemplatesDescription',

        createAnOrderTemplateButtonText: 'createAnOrderTemplateButtonText',
        createNewOrderTemplateButtonText: 'createNewOrderTemplateButtonText',
        cancelOrderTemplateCreationButtonText: 'cancelOrderTemplateCreationButtonText',

        selectTemplatesText: 'selectTemplatesText',
        addToTemplateButtonText: 'addToTemplateButtonText',
        lineItemsText: 'lineItemsText'
    };
    const createOrderTemplateDialogResources: IOrderTemplateNameDialogResources = {
        orderTemplateHeaderLabel: 'createOrderTemplateHeader',
        orderTemplateTitleLabel: 'orderTemplateTitle',
        orderTemplateNameAriaLabel: 'orderTemplateNameAriaLabel',
        orderTemplateDescription: 'createOrderTemplateDescription',
        defaultOrderTemplateName: 'defaultOrderTemplateName',
        orderTemplateButtonLabel: 'createOrderTemplateButtonText',
        orderTemplateCancelButtonLabel: 'cancelNewOrderTemplateCreationButtonText'
    };
    const linesAddedToOrderTemplateDialogResources: ILinesAddedToOrderTemplateDialogResources = {
        viewOrderTemplateButtonText: 'viewOrderTemplateButtonText',
        continueShoppingButtonText: 'continueShoppingButtonText',
        linesAddedToOrderTemplateHeaderItemsOneText: 'itemAddedToOrderTemplateHeaderItemOneText',
        linesAddedToOrderTemplateHeaderItemsFormatText: 'itemAddedToOrderTemplateHeaderItemFormatText',
        linesAddedToOrderTemplateHeaderLinesOneText: 'itemAddedToOrderTemplateHeaderItemOneText',
        linesAddedToOrderTemplateHeaderLinesFormatText: 'itemAddedToOrderTemplateHeaderItemFormatText',
        linesAddedToOrderTemplateHeaderMessageText: 'itemAddedToOrderTemplateHeaderMessageText'
    };
    const createOrderTemplateFromCartButton = 'createOrderTemplateFromCartButton';

    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: false, outOfStockThreshold: 5}}}) as ICoreContext;
    });

    it('renders correctly with all params', () => {
        const saveCartToOrderTemplateComponent = render((
            <SaveCartToOrderTemplateComponent
                context={mockCoreContext}
                className={'class-name'}
                addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}
                createOrderTemplateDialogResources={createOrderTemplateDialogResources}
                createOrderTemplateFromCartButton={createOrderTemplateFromCartButton}
                linesAddedToOrderTemplateDialogResources={linesAddedToOrderTemplateDialogResources}
                id={'id'}
                typeName={'typeName'}
                data={{
                    orderTemplates: [orderTemplate],
                    customerInformation: b2bCustomer,
                    cartLines: [cartLine]
                }}
            />
        ));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });

    it('renders correctly with non b2b customer', () => {
        const saveCartToOrderTemplateComponent = render((
            <SaveCartToOrderTemplateComponent
                context={mockCoreContext}
                className={'class-name'}
                addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}
                createOrderTemplateDialogResources={createOrderTemplateDialogResources}
                createOrderTemplateFromCartButton={createOrderTemplateFromCartButton}
                linesAddedToOrderTemplateDialogResources={linesAddedToOrderTemplateDialogResources}
                id={'id'}
                typeName={'typeName'}
                data={{
                    orderTemplates: [orderTemplate],
                    customerInformation: nonB2bCustomer,
                    cartLines: [cartLine]
                }}
            />
        ));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });

    it('renders correctly with empty order templates', () => {
        const saveCartToOrderTemplateComponent = render((
            <SaveCartToOrderTemplateComponent
                context={mockCoreContext}
                className={'class-name'}
                addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}
                createOrderTemplateDialogResources={createOrderTemplateDialogResources}
                createOrderTemplateFromCartButton={createOrderTemplateFromCartButton}
                linesAddedToOrderTemplateDialogResources={linesAddedToOrderTemplateDialogResources}
                id={'id'}
                typeName={'typeName'}
                data={{
                    orderTemplates: [],
                    customerInformation: b2bCustomer,
                    cartLines: [cartLine]
                }}
            />
        ));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });

    it('renders correctly with empty order template', () => {
        const saveCartToOrderTemplateComponent = render((
            <SaveCartToOrderTemplateComponent
                context={mockCoreContext}
                className={'class-name'}
                addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}
                createOrderTemplateDialogResources={createOrderTemplateDialogResources}
                createOrderTemplateFromCartButton={createOrderTemplateFromCartButton}
                linesAddedToOrderTemplateDialogResources={linesAddedToOrderTemplateDialogResources}
                id={'id'}
                typeName={'typeName'}
                data={{
                    orderTemplates: [emptyOrderTemplate],
                    customerInformation: b2bCustomer,
                    cartLines: [cartLine]
                }}
            />
        ));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });

    it('renders correctly with empty cart lines', () => {
        const saveCartToOrderTemplateComponent = render((
            <SaveCartToOrderTemplateComponent
                context={mockCoreContext}
                className={'class-name'}
                addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}
                createOrderTemplateDialogResources={createOrderTemplateDialogResources}
                createOrderTemplateFromCartButton={createOrderTemplateFromCartButton}
                linesAddedToOrderTemplateDialogResources={linesAddedToOrderTemplateDialogResources}
                id={'id'}
                typeName={'typeName'}
                data={{
                    orderTemplates: [orderTemplate],
                    customerInformation: b2bCustomer,
                    cartLines: []
                }}
            />
        ));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });

    it('renders correctly with empty cart line', () => {
        const saveCartToOrderTemplateComponent = render((
            <SaveCartToOrderTemplateComponent
                context={mockCoreContext}
                className={'class-name'}
                addToOrderTemplateDialogResources={addToOrderTemplateDialogResources}
                createOrderTemplateDialogResources={createOrderTemplateDialogResources}
                createOrderTemplateFromCartButton={createOrderTemplateFromCartButton}
                linesAddedToOrderTemplateDialogResources={linesAddedToOrderTemplateDialogResources}
                id={'id'}
                typeName={'typeName'}
                data={{
                    orderTemplates: [orderTemplate],
                    customerInformation: b2bCustomer,
                    cartLines: [emptyCartLine]
                }}
            />
        ));
        expect(saveCartToOrderTemplateComponent).toMatchSnapshot();
    });
});