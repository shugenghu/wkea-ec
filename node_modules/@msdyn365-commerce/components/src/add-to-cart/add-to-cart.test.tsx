import { mount, render } from 'enzyme';
import * as React from 'react';

import { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { buildMockCoreContext, ICoreContext } from '@msdyn365-commerce/core';
import * as GlobalStateActions from '@msdyn365-commerce/global-state';
import { Cart, ProductAvailableQuantity, ProductDimension, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import {AddToCartComponent} from '../index';
import { IAddToCartFailureResult } from './add-to-cart.component';

describe('AddToCart', () => {
    let mockCoreContext: ICoreContext;
    let productDimension: ProductDimension;
    let basicProduct: SimpleProduct;
    const outOfStockProductAvailability = {AvailableQuantity: -5} as ProductAvailableQuantity;
    const inStockProductAvailability = {AvailableQuantity: 12} as ProductAvailableQuantity;
    mockCoreContext = buildMockCoreContext({app: {config: {hideRating: false}}}) as ICoreContext;
    const telemetryContent = {  pageName: 'Homepage', moduleName: 'Add to Cart', telemetry: mockCoreContext.telemetry} as ITelemetryContent;
    const mockActiveCart: Cart = {
        Id: 'gB8DCi6AK3mzMavh08C4P18wFDbEEyto',
        Version: 123
    };

    const mockCartState = {
        cart: mockActiveCart,
        addProductToCart: jest.fn(),
    };

    beforeEach(() => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: false, outOfStockThreshold: 5}}}) as ICoreContext;
        productDimension = {DimensionTypeValue: 0};
        basicProduct = {RecordId: 55555} as SimpleProduct;
    });

    it('renders correctly with all params', () => {
        const productPrice = {} as SimpleProduct;
        const productAvailability = {} as ProductAvailableQuantity;

        const addToCart = render((
                            <AddToCartComponent
                                className='myFooClass'
                                addToCartText='Add to cart'
                                outOfStockText='Out of stock'
                                quantity={1}
                                productAvailability={productAvailability}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                                data={{product: productPrice}}
                                telemetryContent={telemetryContent}
                            />
                            ));
        expect(addToCart).toMatchSnapshot();
    });

    it('Will not show out of stock when enableStockCheck app config is off', () => {
        const addToCart = mount(
                            <AddToCartComponent
                                className='myFooClass'
                                addToCartText='Add to cart'
                                outOfStockText='Out of stock'
                                quantity={1}
                                productAvailability={outOfStockProductAvailability}
                                data={{product: basicProduct}}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                            />
        );
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });

    it('Will not show out of stock when product is service item', () => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;
        const addToCart = mount(
                            <AddToCartComponent
                                className='myFooClass'
                                addToCartText='Add to cart'
                                outOfStockText='Out of stock'
                                quantity={1}
                                productAvailability={outOfStockProductAvailability}
                                data={{product: basicProduct}}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                                isAddServiceItemToCart={true}
                            />
        );
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });

    it('Will not show out of stock when product is missing', () => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;
        const addToCart = mount(
                            <AddToCartComponent
                                className='myFooClass'
                                addToCartText='Add to cart'
                                outOfStockText='Out of stock'
                                quantity={1}
                                productAvailability={outOfStockProductAvailability}
                                data={{product: {} as SimpleProduct}}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                            />
        );
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });

    it('Will not show out of stock when product dimension is missing', () => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;
        basicProduct.Dimensions = [productDimension];
        const addToCart = mount(
                            <AddToCartComponent
                                className='myFooClass'
                                addToCartText='Add to cart'
                                outOfStockText='Out of stock'
                                quantity={1}
                                productAvailability={outOfStockProductAvailability}
                                data={{product: basicProduct}}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                            />
        );
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });

    it('Will not show out of stock when product availability is greater than out of stock threshold', () => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;
        const addToCart = mount(
                            <AddToCartComponent
                                className='myFooClass'
                                addToCartText='Add to cart'
                                outOfStockText='Out of stock'
                                quantity={1}
                                productAvailability={inStockProductAvailability}
                                data={{product: basicProduct}}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                            />
        );
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Add to cart');
    });

    it('Will show add to cart when product availability is missing', () => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;
        const addToCart = mount(
                            <AddToCartComponent
                                className='myFooClass'
                                addToCartText='Add to cart'
                                outOfStockText='Out of stock'
                                quantity={1}
                                data={{product: basicProduct}}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                            />
        );
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Out of stock');
    });

    it('Will show out of stock when product availability is less than out of stock threshold', () => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;
        const addToCart = mount(
                            <AddToCartComponent
                                className='myFooClass'
                                addToCartText='Add to cart'
                                outOfStockText='Out of stock'
                                quantity={1}
                                productAvailability={outOfStockProductAvailability}
                                data={{product: basicProduct}}
                                id='id'
                                typeName='type-name'
                                context={mockCoreContext}
                            />
        );
        const button = addToCart.find('button').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode.textContent).toBe('Out of stock');
    });

    it('Add to cart fails when no product is present', () => {
        const onAdd = jest.fn();
        const onError = jest.fn().mockImplementation((result: IAddToCartFailureResult) => {
            expect(result.failureReason).toEqual('EMPTYINPUT');
        });

        const addToCart = mount(
            <AddToCartComponent
                className='myFooClass'
                addToCartText='Add to cart'
                outOfStockText='Out of stock'
                quantity={1}
                productAvailability={inStockProductAvailability}
                onAdd={onAdd}
                onError={onError}
                data={{product: {} as SimpleProduct}}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
            />
         );
        const button = addToCart.find('button').first();
        button.simulate('click');
        expect(onAdd).not.toHaveBeenCalled();
        expect(onError).toHaveBeenCalled();
    });

    it('Add to cart fails when there is a missing dimension', () => {
        const onAdd = jest.fn();
        const onError = jest.fn().mockImplementation((result: IAddToCartFailureResult) => {
            expect(result.failureReason).toEqual('MISSINGDIMENSION');
            expect(result.missingDimensions).toBeDefined();
            expect(result.missingDimensions!.length).toBe(1);
            expect(result.missingDimensions![0]).toEqual(productDimension);
        });

        basicProduct.Dimensions = [productDimension];

        const addToCart = mount(
            <AddToCartComponent
                className='myFooClass'
                addToCartText='Add to cart'
                outOfStockText='Out of stock'
                quantity={1}
                productAvailability={inStockProductAvailability}
                onAdd={onAdd}
                onError={onError}
                data={{product: basicProduct}}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
            />
        );
        const button = addToCart.find('button').first();
        button.simulate('click');
        expect(onAdd).not.toHaveBeenCalled();
        expect(onError).toHaveBeenCalled();
    });

    it('Add to cart fails when the quantity being added is greater than the productAvailability - outOfStockThreshold', () => {
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;
        const onAdd = jest.fn();
        const onError = jest.fn().mockImplementation((result: IAddToCartFailureResult) => {
            expect(result.failureReason).toEqual('OUTOFSTOCK');
            expect(result.stockLeft).toEqual(12);
        });
        const addToCart = mount(
            <AddToCartComponent
                className='myFooClass'
                addToCartText='Add to cart'
                outOfStockText='Out of stock'
                quantity={13}
                productAvailability={inStockProductAvailability}
                onAdd={onAdd}
                onError={onError}
                data={{product: basicProduct}}
                id='id'
                typeName='type-name'
                context={mockCoreContext}
            />
        );

        const button = addToCart.find('button').first();
        button.simulate('click');
        expect(onAdd).not.toHaveBeenCalled();
        expect(onError).toHaveBeenCalled();
    });

    it('Passes the error from global cart state when add to cart fails', async () => {
        const onAdd = jest.fn();
        const onError = jest.fn().mockImplementation((result: IAddToCartFailureResult) => {
            expect(result.failureReason).toEqual('CARTACTIONFAILED');
            expect(result.cartActionResult).toBeDefined();
            expect(result.cartActionResult!.substatus).toEqual('MAXQUANTITY');
        });
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'FAILED', substatus: 'MAXQUANTITY'}));
        // @ts-ignore
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(
                <AddToCartComponent
                    className='myFooClass'
                    addToCartText='Add to cart'
                    outOfStockText='Out of stock'
                    quantity={1}
                    productAvailability={inStockProductAvailability}
                    onAdd={onAdd}
                    onError={onError}
                    data={{product: basicProduct}}
                    id='id'
                    typeName='type-name'
                    context={mockCoreContext}
                    />
            );
        const button = addToCart!.find('button').first();
        button.simulate('click');

        await new Promise(resolve => setTimeout(resolve, 0));

        expect(onAdd).not.toHaveBeenCalled();
        expect(onError).toHaveBeenCalled();
    });

    it('Add to cart does not throw when onError is not passed and adding fails', () => {
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'FAILED', substatus: 'MAXQUANTITY'}));

        // @ts-ignore
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(
                <AddToCartComponent
                    className='myFooClass'
                    addToCartText='Add to cart'
                    outOfStockText='Out of stock'
                    quantity={1}
                    productAvailability={inStockProductAvailability}
                    data={{product: basicProduct}}
                    id='id'
                    typeName='type-name'
                    context={mockCoreContext}
                    />
            );
        const button = addToCart!.find('button').first();
        const test = () => {
            button.simulate('click');
        };
        expect(test).not.toThrow();
    });

    it('Calls onAdd when add to cart succeeds', async () => {
        const onAdd = jest.fn().mockImplementation((result: GlobalStateActions.ICartActionResult) => {
            expect(result.status).toBe('SUCCESS');
            expect(result.substatus).toBe('');
        });
        const onError = jest.fn();
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'SUCCESS', substatus: ''}));
        // @ts-ignore
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(
                <AddToCartComponent
                    className='myFooClass'
                    addToCartText='Add to cart'
                    outOfStockText='Out of stock'
                    quantity={1}
                    productAvailability={inStockProductAvailability}
                    onAdd={onAdd}
                    onError={onError}
                    data={{product: basicProduct}}
                    id='id'
                    typeName='type-name'
                    context={mockCoreContext}
                    />
            );
        const button = addToCart!.find('button').first();
        button.simulate('click');

        await new Promise(resolve => setTimeout(resolve, 0));

        expect(onAdd).toHaveBeenCalled();
        expect(onError).not.toHaveBeenCalled();
    });

    it('Add to cart succeeds with a dimension', async () => {
        const onAdd = jest.fn();
        mockCoreContext = buildMockCoreContext({app: {config: {enableStockCheck: true, outOfStockThreshold: 5}}}) as ICoreContext;
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'SUCCESS', substatus: ''}));
        productDimension.DimensionValue = {RecordId: 444, Value: 'foo'};
        basicProduct.Dimensions = [productDimension];

        // @ts-ignore
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(
                <AddToCartComponent
                    className='myFooClass'
                    addToCartText='Add to cart'
                    outOfStockText='Out of stock'
                    quantity={1}
                    productAvailability={inStockProductAvailability}
                    onAdd={onAdd}
                    data={{product: basicProduct}}
                    id='id'
                    typeName='type-name'
                    context={mockCoreContext}
                    />
            );
        const button = addToCart!.find('button').first();
        button.simulate('click');

        await new Promise(resolve => setTimeout(resolve, 0));

        expect(onAdd).toHaveBeenCalled();
    });

    it('Add to cart does no throw when onAdd is not passed', () => {
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'SUCCESS', substatus: ''}));

        // @ts-ignore
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(
                <AddToCartComponent
                    className='myFooClass'
                    addToCartText='Add to cart'
                    outOfStockText='Out of stock'
                    quantity={1}
                    productAvailability={inStockProductAvailability}
                    data={{product: basicProduct}}
                    id='id'
                    typeName='type-name'
                    context={mockCoreContext}
                    />
            );
        const button = addToCart!.find('button').first();
        const test = () => {
            button.simulate('click');
        };
        expect(test).not.toThrow();
    });

    it('Navigates to url when add to cart succeeds and navigationUrl it provided', async () => {
        mockCartState.addProductToCart.mockImplementation(() => Promise.resolve({status: 'SUCCESS', substatus: ''}));
        window.location.assign = jest.fn();
        // @ts-ignore
        GlobalStateActions.getCartState = jest.fn().mockImplementation(() => Promise.resolve(mockCartState));
        const addToCart = mount(
                <AddToCartComponent
                    className='myFooClass'
                    addToCartText='Add to cart'
                    outOfStockText='Out of stock'
                    quantity={1}
                    productAvailability={inStockProductAvailability}
                    data={{product: basicProduct}}
                    navigationUrl={'foo'}
                    id='id'
                    typeName='type-name'
                    context={mockCoreContext}
                    />
            );
        const button = addToCart!.find('button').first();
        button.simulate('click');

        await new Promise(resolve => setTimeout(resolve, 0));

        expect(window.location.assign).toHaveBeenCalledWith('foo');
    });
});