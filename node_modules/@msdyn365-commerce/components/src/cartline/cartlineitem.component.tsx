/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { getFallbackImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { getPayloadObject, getTelemetryAttributes, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { IComponentProps, IGridSettings, IImageSettings, Image, msdyn365Commerce } from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { CartLine, SalesLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import classNames from 'classnames';
import * as React from 'react';
import { PriceComponent } from '../index';

/**
 * ICartlineResourceString: Interface for specifying the
 * resource strings that the component needs
 */
export interface ICartlineResourceString {
    /** Display string for discount label */
    discountStringText: string;
    /** String for size key  */
    sizeString: string;
    /** String for color key  */
    colorString: string;
    /** String associated with the configuration product dimension  */
    configString: string;
    /** String for style key  */
    styleString: string;
    /** Display string for quantity label  */
    quantityDisplayString: string;
    /** Display string for quantity label  */
    inputQuantityAriaLabel: string;
    /** Aria label for the decrement button in quanitity component  */
    decrementButtonAriaLabel?: string;
    /** Aria label for the increment button in quanitity component  */
    incrementButtonAriaLabel?: string;
    /** original text screenreader */
    originalPriceText: string;
    /** current text screenreader  */
    currentPriceText: string;
    /** shipping Charges Text  */
    shippingChargesText: string;
}

interface ICartLineData {
    cartLine: CartLine | SalesLine;
    product: SimpleProduct;
}

export type CartLineDisplayMode = 'DEFAULT' | 'COMPACT';

/**
 * ICartLineProps: The props required to render cartLineitem
 */
export interface ICartLineProps extends IComponentProps<ICartLineData> {
    /** The flag to change the quantity component from interactible to static  */
    disableQuantityInteractivity?: boolean;
    /** The primary image url  */
    primaryImageUrl?: string;
    /** The product url  */
    productUrl?: string;
    /** GridSettings for the product image in cartLine  */
    gridSettings: IGridSettings;
    /** ImageSettings for the product image in cartLine  */
    imageSettings: IImageSettings;
    /** Boolean flag to indicate if the item is out of stock  */
    isOutOfStock?: boolean;
    /** Flag to make quantity section editable  */
    isQuantityEditable?: boolean;
    /** Max quantity for line item  */
    maxQuantity?: number;
    /** Current quantity for line item  */
    currentQuantity?: number;
    /** Resource string for the component  */
    resources: ICartlineResourceString;
    /** SalesLine flag  */
    isSalesLine?: boolean;
    /** Error message to show in place of quantity */
    errorMessage?: string;
    /** Display mode to use */
    displayMode?: CartLineDisplayMode;
    /** Inventory information label  */
    inventoryInformationLabel?: string;
    /** Inventory information class name  */
    inventoryLabelClassName?: string;
    /** Flag to show/hide shipping charges for line items  */
    showShippingChargesForLineItems?: boolean;
    /** Boolean flag to indicate if cart state status is ready  */
    isCartStateReady?: boolean;
    /** The telemetry content */
    telemetryContent?: ITelemetryContent;
    /** Quantity onChange callback  */
    quantityOnChange?(cartLine: CartLine, newQuantity: number): void;
}

interface IDimensionStrings {
    /** String for size key  */
    sizeString: string;
    /** String for color key  */
    colorString: string;
    /** String associated with the configuration product dimension  */
    configString: string;
    /** String for style key  */
    styleString: string;
}

const CartLineItemFunctions = {
    renderProductDimensions: (Product: SimpleProduct, DimensionStrings: IDimensionStrings) => {
        if (!Product || !Product.Dimensions) {
            return [];
        }

        return Product.Dimensions.map(productDimension => {

            if (productDimension.DimensionTypeValue === 1) {
                return (
                    <div key={`${Product.RecordId}ProductDimensions1`} className='msc-cart-line__product-variant-item'>
                        <span className='msc-cart-line__product-variant-color'>{DimensionStrings.colorString}
                            <span className='name'>{productDimension.DimensionValue && productDimension.DimensionValue.Value}</span></span>
                    </div>
                );
            }

            if (productDimension.DimensionTypeValue === 2) {
                return (
                    <div key={`${Product.RecordId}ProductDimensions2`} className='msc-cart-line__product-variant-item'>
                        <span className='msc-cart-line__product-configuration'>{DimensionStrings.configString}
                            <span className='name'>{productDimension.DimensionValue && productDimension.DimensionValue.Value}</span></span>
                    </div>
                );
            }

            if (productDimension.DimensionTypeValue === 3) {
                return (
                    <div key={`${Product.RecordId}ProductDimensions3`} className='msc-cart-line__product-variant-item'>
                        <span className='msc-cart-line__product-variant-size'>{DimensionStrings.sizeString}
                            <span className='name'>{productDimension.DimensionValue && productDimension.DimensionValue.Value}</span></span>
                    </div>
                );
            }

            if (productDimension.DimensionTypeValue === 4) {
                return (
                    <div key={`${Product.RecordId}ProductDimensions4`} className='msc-cart-line__product-variant-item'>
                        <span className='msc-cart-line__product-variant-style'>{DimensionStrings.styleString}
                            <span className='name'>{productDimension.DimensionValue && productDimension.DimensionValue.Value}</span></span>
                    </div>
                );
            }
            return null;
        });
    },
    renderDiscountLines: (props: ICartLineProps) => {

        if (!props.data.cartLine.DiscountLines || props.data.cartLine.DiscountLines.length === 0) {
            return null;
        }
        return props.data.cartLine.DiscountLines.map((discountLine, index) => {
            return (
                <div key={discountLine.OfferId || index} className='msc-cart-line-item-product-discount'>
                    <span className='msc-cart-line__product-savings-label'>
                        {discountLine.OfferName ? discountLine.OfferName : ''}:
                        {` ${props.resources.discountStringText || 'Discount'} `}
                    </span>
                    <span className='msc-cart-line__promo-codes'>
                        {discountLine.DiscountCost && (
                            <>
                                <PriceComponent
                                    data={props.isSalesLine ? {
                                        price: {
                                            // @ts-ignore
                                            CustomerContextualPrice: props.data.cartLine.PeriodicDiscount
                                        }
                                    } : {
                                            price: {
                                                CustomerContextualPrice: props.data.cartLine.DiscountAmountWithoutTax,
                                                BasePrice: props.data.cartLine.DiscountAmount
                                            }
                                        }}
                                    context={props.context}
                                    id={props.id}
                                    typeName={props.typeName}
                                    className='msc-cart-line__discount-value'
                                />
                            </>
                        )}
                    </span>
                    <span>
                        {` (${discountLine.Percentage !== undefined ? discountLine.Percentage : ''}%)`}
                    </span>
                </div>
            );
        });
    },
    renderInventoryLabel: (props: ICartLineProps) => {
        if (!props.inventoryInformationLabel) {
            return null;
        }
        const inventoryCssName = props.inventoryLabelClassName ? `msc-cart-line__product-inventory-label ${props.inventoryLabelClassName}` : 'msc-cart-line__product-inventory-label';
        return (
            <span className={inventoryCssName}>{props.inventoryInformationLabel}</span>
        );
    },
    renderShippingLabel: (props: ICartLineProps) => {
        const pickupDeliveryModeCode = props.context.request.channel?.PickupDeliveryModeCode;
        const cartline = props.data.cartLine;
        const hasShippingMethod = !!cartline.DeliveryMode && cartline.DeliveryMode !== pickupDeliveryModeCode ? true : false;
        if (!hasShippingMethod) {
            return undefined;
        }

        const shippingChargeLines = (cartline.ChargeLines || []).filter(chargeLine => chargeLine.IsShipping);

        if (shippingChargeLines.length === 0) {
            return undefined;
        }

        const freightFee = shippingChargeLines.reduce((chargeTotal, chargeLine) => {
            return chargeTotal + (chargeLine.CalculatedAmount || 0);
        },                                            0);

        const priceComponent = (
            <PriceComponent
                data={{
                    price: {
                        // @ts-ignore
                        CustomerContextualPrice: freightFee
                    }
                }}
                freePriceText={'Free'}
                context={props.context}
                id={props.id}
                typeName={props.typeName}
                className='msc-cart-line__freight-actual'
            />
        );
        return (
            <>
                <label className='msc-cart-line__freight-label'>{`${props.resources.shippingChargesText}:`}</label>
                <span className='shipping-value'>
                    {priceComponent}
                </span>
            </>
        );
    },
    renderOtherCharges: (props: ICartLineProps) => {
        const cartline = props.data.cartLine;
        const otherCharges = cartline.ChargeLines?.filter((chargeline) => !chargeline.IsShipping);

        return otherCharges && otherCharges.map((otherCharge, key) => {
            return (
                <div className='msc-cart-line__other-charges' key={key}>
                    <label className='msc-cart-line__other-charges-label'>{`${otherCharge.Description}:`}</label>
                    <span className='other-charge-value'>
                        <PriceComponent
                            data={{
                                price: {
                                    // @ts-ignore
                                    CustomerContextualPrice: otherCharge.CalculatedAmount
                                }
                            }}
                            context={props.context}
                            id={props.id}
                            typeName={props.typeName}
                            className='msc-cart-line__other-charges-actual'
                        />
                    </span>
                </div>
            );
        }) || undefined;
    }
};

// tslint:disable-next-line:max-func-body-length
const CartLine: React.FC<ICartLineProps> = (props: ICartLineProps) => {
    const { isSalesLine, productUrl, resources } = props;
    const { product } = props.data;

    const destructDimensionStrings = {
        sizeString: resources.sizeString,
        colorString: resources.colorString,
        styleString: resources.styleString,
        configString: resources.configString
    };
    const fallbackImageUrl = getFallbackImageUrl(product.ItemId, props.context.actionContext.requestContext.apiSettings);
    const { inputQuantityAriaLabel } = props.resources;
    const productDimensions = CartLineItemFunctions.renderProductDimensions(product, destructDimensionStrings);
    const renderDisountLines = CartLineItemFunctions.renderDiscountLines(props);
    const renderInventoryLabel = CartLineItemFunctions.renderInventoryLabel(props);
    const renderShippingLabel = CartLineItemFunctions.renderShippingLabel(props);
    const renderOtherCharges = CartLineItemFunctions.renderOtherCharges(props);
    const payLoad = getPayloadObject('click', props.telemetryContent!, '', product.RecordId.toString());
    const prodAttribute = getTelemetryAttributes(props.telemetryContent!, payLoad);

    const _generateErrorMessage = (): JSX.Element | null => {
        if (props.errorMessage) {
            return (
                <div className='msc-alert__header'>
                    <span className='msi-exclamation-triangle' />
                    <span>{props.errorMessage}</span>
                </div>
            );
        }

        return null;
    };

    const _updateQuantity = (event: React.ChangeEvent<HTMLSelectElement>) => {
        if (props.quantityOnChange) {
            props.quantityOnChange(props.data.cartLine, parseInt(event.target.value, 10));
        }
    };

    const _generateMenu = (quantity: number) => {
        const nodes = [];

        for (let i = 1; i <= quantity; i++) {

            // tslint:disable-next-line:react-a11y-role-has-required-aria-props
            nodes.push(<option className='msc-cart-line__quantity__select-menu__item' value={i}>{i}</option>);
        }

        return nodes;
    };

    const _generateSelectMenu = (quantity: number, currentQuantity: number | undefined): JSX.Element => {
        return (
            <select className='msc-cart-line__quantity__select-menu' aria-label={inputQuantityAriaLabel} value={currentQuantity} onChange={_updateQuantity}>
                {
                    _generateMenu(quantity)
                }
            </select>
        );
    };

    const _generateQuantityAndPrice = (): JSX.Element[] | null => {
        const nodes = [];

        const errorMessage = _generateErrorMessage();

        if (props.isOutOfStock) {
            if (errorMessage) {
                return [errorMessage];
            }

            return null;
        }

        if (props.isQuantityEditable) {
            if (errorMessage) {
                nodes.push(errorMessage);
            }
            nodes.push(_generateSelectMenu(props.maxQuantity || 10, props.currentQuantity));
        } else {
            nodes.push(
                <div className={classNames('msc-cart-line__quantity', { 'single-quantity': props.data.cartLine.Quantity === 1 })}>
                    <label className='quantity-label'>{resources.quantityDisplayString}</label>
                    {errorMessage}
                    <span className='quantity-value'>{props.data.cartLine.Quantity}</span>
                </div>
            );
        }

        nodes.push(
            <div className='msc-cart-line__product-price'>
                <PriceComponent
                    data={isSalesLine ? {
                        price: {
                            // @ts-ignore
                            CustomerContextualPrice: props.data.cartLine.NetAmount,
                            BasePrice: props.data.cartLine.Price
                        }
                    } : {
                            price: {
                                CustomerContextualPrice: props.data.cartLine.NetAmountWithoutTax,
                                BasePrice: props.data.cartLine.NetPrice
                            }
                        }}
                    context={props.context}
                    id={props.id}
                    typeName={props.typeName}
                    className='discount-value'
                    originalPriceText={resources.originalPriceText}
                    currentPriceText={resources.currentPriceText}
                />
            </div>
        );

        return nodes;
    };

    if (props.displayMode === 'COMPACT') {
        const reducedDimensions: string = product.Dimensions ? product.Dimensions.reduce<string>(
            (str, productDimension) => {
                if (productDimension.DimensionValue && productDimension.DimensionValue.Value) {
                    if (str) {
                        return `${str}, ${productDimension.DimensionValue.Value}`;
                    }

                    return `${productDimension.DimensionValue.Value}`;
                }

                return str;
            },
            '') : '';

        return (
            <div className='msc-cart-line msc-cart-line__compact'>
                <div className='msc-cart-line__product-image'>
                    <Image src={props.primaryImageUrl || ''} fallBackSrc={fallbackImageUrl} altText={product.Name} gridSettings={props.gridSettings} imageSettings={props.imageSettings} loadFailureBehavior='empty' />
                </div>
                <div className='msc-cart-line__content'>
                    <a className='msc-cart-line__product-title' href={productUrl} {...prodAttribute} >{product.Name}</a>
                    {reducedDimensions !== '' ?
                        <div className='msc-cart-line__product-variants'>{reducedDimensions}</div> :
                        ''
                    }
                    {
                        _generateQuantityAndPrice()
                    }
                </div>
            </div>
        );
    }

    return (
        <div className='msc-cart-line'>
            <div className='msc-cart-line__product-image'>
                <Image src={props.primaryImageUrl || ''}  fallBackSrc={fallbackImageUrl} altText={product.Name} gridSettings={props.gridSettings} imageSettings={props.imageSettings} loadFailureBehavior='empty' />
            </div>
            <div className='msc-cart-line__content'>
                <div className='msc-cart-line__product'>
                    <a className='msc-cart-line__product-title' href={productUrl} {...prodAttribute} >{product.Name}</a>
                    {productDimensions.length > 0 ?
                        <div className='msc-cart-line__product-variants'>{productDimensions}</div> :
                        ''
                    }
                    {renderDisountLines}
                    {renderInventoryLabel}
                    {props.showShippingChargesForLineItems && <div className='msc-cart-line__freight'>
                        {renderShippingLabel}
                    </div>}
                    {renderOtherCharges}
                </div>
                {
                    _generateQuantityAndPrice()
                }
            </div>
        </div>
    );
};

// @ts-ignore
export const CartLineItemComponent: React.FunctionComponent<ICartLineProps> = msdyn365Commerce.createComponent<ICartline>(
    'CartLineItem',
    { component: CartLine, ...CartLineItemFunctions }
);