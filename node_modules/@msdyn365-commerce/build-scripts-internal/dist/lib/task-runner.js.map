{"version":3,"file":"task-runner.js","sourceRoot":"","sources":["../../src/task-runner.ts"],"names":[],"mappings":"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","sourcesContent":["#! /usr/bin/env node\n\n/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:non-literal-require\nimport { getFilesInDirSync, trace } from '@msdyn365-commerce/utilities-internal';\nimport * as path from 'path';\nimport { IResult, ITaskRunnerOptions } from './models';\n\nlet identifiedTasks: string[] = [];\n\nconst runner = (options: ITaskRunnerOptions = {}) => {\n    const prefix = `[MSDyn365 Script Runner] `;\n\n    const taskDir = path.join(__dirname, 'tasks');\n\n    trace.info(`${prefix}Starting task runner`);\n    trace.debug(`${prefix}Current task directory: ${taskDir}`);\n\n    if (!identifiedTasks.length) {\n        identifiedTasks = getFilesInDirSync(taskDir).filter((fileName: string) => fileName.toLocaleLowerCase().endsWith('.js'));\n    }\n\n    const allTasks = [...identifiedTasks];\n\n    trace.info(`${prefix}Found ${allTasks.length} tasks.`);\n    trace.info(allTasks.map((taskFileName: string) => path.basename(taskFileName)));\n\n    const tasksToRun = allTasks.filter(taskName => {\n        const actualTaskName = path.basename(taskName, '.js');\n        // default it to run all tasks if we don't get explicit options for\n        const shouldExecute =\n            options[actualTaskName] !== undefined && options[actualTaskName].shouldExecute !== undefined\n                ? options[actualTaskName].shouldExecute\n                : true;\n        !shouldExecute && trace.debug(`Skipping task '${actualTaskName}'.`);\n        return shouldExecute;\n    });\n\n    const runTask = async (taskName: string) => {\n        const timerName = `task-${taskName}`;\n        trace.info(`${prefix}Starting task ${taskName}`);\n        trace.startTimer(timerName);\n        const stopTimer = () => trace.stopTimer(timerName);\n        // NOTE: all tasks must have single default export\n        const task = require(`./tasks/${taskName}`);\n        if (!task || !task.default) {\n            trace.info(`${prefix}Unable to run ${taskName} as it has no default export`);\n            stopTimer();\n            return;\n        }\n\n        const taskOptions = options[path.basename(taskName, '.js')] || { options: {} };\n        return task.default(taskOptions.options).then((taskResult: IResult) => {\n            stopTimer();\n            trace.info(`${prefix}Finished task ${taskName} ${taskResult.success ? 'successfully' : 'with errors'}`);\n        });\n    };\n\n    // TODO: currently we don't have any tasks with config, but could in the future so this signature would change\n    return Promise.all(tasksToRun.map(runTask));\n};\n\nexport default runner;\n"]}