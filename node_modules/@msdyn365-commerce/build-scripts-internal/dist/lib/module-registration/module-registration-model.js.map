{"version":3,"file":"module-registration-model.js","sourceRoot":"","sources":["../../../src/module-registration/module-registration-model.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n/**\n * NOTE: PLEASE MAKE SURE TO UPDATE __mocks__/module-registration-model.ts ACCORDINGLY, AS IT MOCKS THE PATHS FOR THE TESTS\n */\n\nimport { IDataActionOptions } from '@msdyn365-commerce/core-internal';\nimport { getSupportedNamespaces } from '@msdyn365-commerce/utilities-internal';\nimport * as path from 'path';\n\nexport interface IDefinitionRegistration {\n    definitionObj: IModuleDefinition;\n    definitionPath: string;\n}\n\nexport interface IDictionary<T> {\n    [index: string]: T;\n    [index: number]: T;\n}\n\nexport interface IDataAction {\n    id?: string;\n    moduleName?: string;\n    isNodeDataAction: boolean;\n    name: string;\n    path: string;\n    runOn: ActionRuntime;\n    options?: IDataActionOptions;\n}\n\nexport enum ActionRuntime {\n    server = 0,\n    client = 1,\n    serverOnly = 2\n}\n\nexport interface IIModule {\n    dataActions: IDictionary<IDataAction>;\n    view: string;\n}\n\nexport interface IModuleDefinition {\n    $ref: string;\n    $type: string;\n    // tslint:disable-next-line:no-reserved-keywords\n    module: IIModule;\n    dataActions: IDictionary<IDataAction>;\n    name: string;\n}\n\nexport interface IDataDefinition {\n    moduleName: string;\n    properties: IDictionary<IDataDefinitionProperty>;\n}\n\nexport interface IConnectorDefiition {\n    $type: string;\n    name: string;\n    // tslint:disable-next-line: no-any\n    configSchema: any;\n}\n\nexport interface IConnectorInfo {\n    name: string;\n    aliasedPaths: IDictionary<string>;\n    type: string;\n}\n\nexport interface IDataDefinitionProperty {\n    $ref: string;\n    dataAction: string;\n    runAt: ActionRuntime;\n    type: string;\n}\n\nexport interface IModuleRegistration {\n    $type: string;\n    dataActions: IDataAction[];\n    definitionPath: string;\n    definitionExtensions?: string[];\n    isNodeModule: boolean;\n    moduleNamespace: string;\n    name: string;\n    packageName: string;\n    pages?: IDictionary<string[]>;\n    parentDefinitionPath: string;\n    path: string;\n    segments?: string[];\n    moduleDirectory?: string;\n    themeSettings?: string;\n}\n\nexport const THEME_MODULE_TYPE = 'themeModule';\nexport const resolvedHoistedPath = path.resolve(process.cwd(), '../..').replace(/\\\\/gi, '/');\nexport const MODULE = {\n    registrationFileName: 'module-registration',\n    namespace: getSupportedNamespaces()\n};\n\n/**\n * Method to resolve paths for various registration file types based on the context\n * eg: hoisted, installed, local modules\n * NOTE: PLEASE MAKE SURE TO UPDATE __mocks__/module-registration-model.ts AS IT MOCKS THE PATHS FOR THE TESTS\n * @param registrationFileType registration file type\n * @param nodeExt file extension type in node_modules\n * @param localExt file extension type in local folders\n */\nconst getResolutionPathPattern = (registrationFileType: string, nodeExt: string, localExt?: string) => {\n    localExt = localExt || nodeExt;\n    const resolutionPathPattern = {\n        fromInstalledModule: MODULE.namespace.map(\n            (moduleNamespace: string) =>\n                `${process.cwd()}/node_modules/${moduleNamespace}/*/dist/lib/**/*.${registrationFileType}.${nodeExt}`\n        ),\n        fromHoistedModule: MODULE.namespace.map(\n            (moduleNamespace: string) =>\n                `${resolvedHoistedPath}/node_modules/${moduleNamespace}/*/dist/lib/**/*.${registrationFileType}.${nodeExt}`\n        ),\n        fromLocalModule: `${process.cwd()}/src/**/*.${registrationFileType}.${localExt}`\n    };\n\n    if (registrationFileType === 'data') {\n        return {\n            ...resolutionPathPattern,\n            fromLocalModule: `${process.cwd()}/build/definitions/*/*.data.json`\n        };\n    }\n\n    return resolutionPathPattern;\n};\n\nexport const nodeModulePath = path.join(process.cwd(), 'node_modules');\nexport const getRegistrationOutputPath = (fileName: string) => path.resolve(path.join(process.cwd(), 'lib', fileName));\n\nexport const VIEW = getResolutionPathPattern('view', 'js', 'tsx');\nexport const ACTION = getResolutionPathPattern('action', 'js', 'ts');\nexport const DEFINITION = getResolutionPathPattern('definition', 'json');\nexport const DATADEFINITION = getResolutionPathPattern('data', 'json');\nexport const COMPONENT = getResolutionPathPattern('component', 'js', 'tsx');\nexport const CONNECTOR = getResolutionPathPattern('connector', 'json');\n\nexport const localModuleDefaultDataPathPattern = `${process.cwd()}/src/**/previews/**/*.*`;\nexport const localModuleResourcesPathPattern = `${process.cwd()}/src/resources/**/*.json`;\nexport const themeModuleDefinitionExtensionsPathPattern = `${process.cwd()}/src/**/*.definition.ext.json`;\nexport const themeModuleLayoutsPathPattern = `${process.cwd()}/src/**/layouts/**/*.*`;\nexport const themeModuleStylesPathPattern = `${process.cwd()}/src/**/styles/**/*.*`;\nexport const themeModuleSettingsPathPattern = `${process.cwd()}/src/**/*.settings.json`;\n\nexport const THEME_MODULE_FILE_TYPE = {\n    DEFINITION_EXTENSIONS: 'definition-extensions',\n    LAYOUTS: 'layouts',\n    STYLES: 'styles',\n    SETTINGS: 'styles'\n};\n"]}