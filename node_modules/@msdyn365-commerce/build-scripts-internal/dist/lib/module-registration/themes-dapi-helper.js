"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
var lodash_1 = require("lodash");
var path_1 = tslib_1.__importStar(require("path"));
var module_dapi_helper_1 = require("./module-dapi-helper");
var module_registration_model_1 = require("./module-registration-model");
var models_1 = require("./utils/models");
var classNameDefnProperty = {
    friendlyName: 'Default CSS Class Name(s)',
    description: 'Provides a way to set configurable default css class(es) to apply to your module.',
    type: 'css'
};
exports.getThemesDAPIList = function (moduleRegistrations, parsedDefinitions) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var themeModules, themesPromises;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                themeModules = [];
                if (themeModules.length) {
                    return [2 /*return*/, themeModules];
                }
                themesPromises = (Object.keys(moduleRegistrations) || [])
                    .filter(function (moduleType) { return moduleRegistrations[moduleType].$type === module_registration_model_1.THEME_MODULE_TYPE; })
                    .map(function (moduleType) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                    var moduleBinder, parsedModuleDef, themeModule, _a, _b, _c, themeStylePresets, _d, _e, _f;
                    return tslib_1.__generator(this, function (_g) {
                        switch (_g.label) {
                            case 0:
                                moduleBinder = moduleRegistrations[moduleType];
                                parsedModuleDef = parsedDefinitions[moduleBinder.name];
                                themeModule = moduleRegistrations[moduleBinder.name];
                                _a = themeModule;
                                return [4 /*yield*/, getThemePages(moduleBinder)];
                            case 1:
                                _a.pages = _g.sent();
                                _b = themeModule;
                                return [4 /*yield*/, getThemeSegments(moduleBinder)];
                            case 2:
                                _b.segments = _g.sent();
                                _c = themeModule;
                                return [4 /*yield*/, exports.getThemeDefinitionExtensions(themeModule.name, moduleBinder)];
                            case 3:
                                _c.definitionExtensions = _g.sent();
                                return [4 /*yield*/, getDefaultThemeStylePreset(themeModule.name, moduleBinder)];
                            case 4:
                                themeStylePresets = _g.sent();
                                _d = themeModule;
                                _e = {
                                    definition: themeStylePresets
                                };
                                if (!(Object.entries(themeStylePresets).length !== 0)) return [3 /*break*/, 6];
                                return [4 /*yield*/, getThemeStylePresetInstances(themeModule.name, moduleBinder)];
                            case 5:
                                _f = _g.sent();
                                return [3 /*break*/, 7];
                            case 6:
                                _f = {};
                                _g.label = 7;
                            case 7:
                                _d.styles = (_e.presets = _f,
                                    _e);
                                return [2 /*return*/, {
                                        description: parsedModuleDef.description,
                                        friendlyName: parsedModuleDef.friendlyName,
                                        name: parsedModuleDef.name,
                                        type: parsedModuleDef.type,
                                        pages: themeModule.pages,
                                        segments: themeModule.segments || [],
                                        definitionExtensions: themeModule.definitionExtensions,
                                        styles: themeModule.styles
                                    }];
                        }
                    });
                }); });
                return [4 /*yield*/, Promise.all(themesPromises)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
/**
 * Get theme definition extensions
 * @param themeModuleName name of the theme module
 * @param themeModuleBinder theme module binder object
 */
exports.getThemeDefinitionExtensions = function (themeModuleName, themeModuleBinder) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var themeDefinitionExtensions, dapiHelper, parentThemeName, parentThemeBinder, _i, _a, moduleName, pathToDefinition, defExtensionJson, _b, _c, _d, _e, moduleName, pathToDefinition, defExtensionJson, _f, _g, partnerDefinitionExtensions, _h, partnerDefinitionExtensions_1, pathToDefExt, partnerDefExtensionJson, moduleName;
    return tslib_1.__generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                themeDefinitionExtensions = {};
                if (!themeModuleBinder.parentDefinitionPath) return [3 /*break*/, 5];
                dapiHelper = module_dapi_helper_1.getModulesDAPIHelperSingleton();
                parentThemeName = dapiHelper.getModuleName(themeModuleBinder.parentDefinitionPath);
                parentThemeBinder = dapiHelper.getModuleBinder(parentThemeName);
                parentThemeBinder.definitionExtensions = parentThemeBinder.definitionExtensions || [];
                _i = 0, _a = parentThemeBinder.definitionExtensions;
                _j.label = 1;
            case 1:
                if (!(_i < _a.length)) return [3 /*break*/, 5];
                moduleName = _a[_i];
                pathToDefinition = path_1.default.join(parentThemeBinder.moduleDirectory || '', "definition-extensions" /* DEF_EXTENSIONS */, "" + moduleName + ".definition.ext.json" /* DEF_EXT_FILE */);
                return [4 /*yield*/, utilities_internal_1.safeReadJson(pathToDefinition)];
            case 2:
                defExtensionJson = ((_j.sent()) || {});
                addDefaultModuleConfigProperties(defExtensionJson);
                _b = themeDefinitionExtensions;
                _c = moduleName;
                return [4 /*yield*/, utilities_internal_1.resolveRef(defExtensionJson, pathToDefinition)];
            case 3:
                _b[_c] = (_j.sent());
                _j.label = 4;
            case 4:
                _i++;
                return [3 /*break*/, 1];
            case 5:
                // Read theme module definition extensions
                themeModuleBinder.definitionExtensions = themeModuleBinder.definitionExtensions || [];
                _d = 0, _e = themeModuleBinder.definitionExtensions;
                _j.label = 6;
            case 6:
                if (!(_d < _e.length)) return [3 /*break*/, 10];
                moduleName = _e[_d];
                pathToDefinition = path_1.default.join(themeModuleBinder.moduleDirectory || '', "definition-extensions" /* DEF_EXTENSIONS */, "" + moduleName + ".definition.ext.json" /* DEF_EXT_FILE */);
                return [4 /*yield*/, utilities_internal_1.safeReadJson(pathToDefinition)];
            case 7:
                defExtensionJson = ((_j.sent()) || {});
                addDefaultModuleConfigProperties(defExtensionJson);
                _f = themeDefinitionExtensions;
                _g = moduleName;
                return [4 /*yield*/, utilities_internal_1.resolveRef(defExtensionJson, pathToDefinition)];
            case 8:
                _f[_g] = _j.sent();
                _j.label = 9;
            case 9:
                _d++;
                return [3 /*break*/, 6];
            case 10: return [4 /*yield*/, utilities_internal_1.safeGetAllFilesPath(path_1.default.join(models_1.keystonePaths.KEYSTONE_THEMES_DIR, themeModuleName, "definition-extensions" /* DEF_EXTENSIONS */, "*" + ".definition.ext.json" /* DEF_EXT_FILE */))];
            case 11:
                partnerDefinitionExtensions = (_j.sent()) || [];
                _h = 0, partnerDefinitionExtensions_1 = partnerDefinitionExtensions;
                _j.label = 12;
            case 12:
                if (!(_h < partnerDefinitionExtensions_1.length)) return [3 /*break*/, 16];
                pathToDefExt = partnerDefinitionExtensions_1[_h];
                return [4 /*yield*/, utilities_internal_1.safeFileExists(pathToDefExt)];
            case 13:
                if (!_j.sent()) return [3 /*break*/, 15];
                return [4 /*yield*/, utilities_internal_1.safeReadJson(pathToDefExt)];
            case 14:
                partnerDefExtensionJson = (_j.sent()) || {};
                moduleName = path_1.default.basename(pathToDefExt, ".definition.ext.json" /* DEF_EXT_FILE */);
                themeDefinitionExtensions[moduleName] = lodash_1.merge(themeDefinitionExtensions[moduleName], partnerDefExtensionJson);
                _j.label = 15;
            case 15:
                _h++;
                return [3 /*break*/, 12];
            case 16:
                // Check and remove config properties present from config of theme definition extension, if duplicate property exists in dependncies of definition extension
                themeDefinitionExtensions = filterConfigProperties(themeDefinitionExtensions);
                return [2 /*return*/, themeDefinitionExtensions];
        }
    });
}); };
/**
 * @function {getThemeSettings}   - Method to return partner theme settings
 */
exports.getThemeSettings = function (moduleRegistrations) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var themeModules, themeSettings;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                themeModules = (Object.keys(moduleRegistrations) || [])
                    .filter(function (moduleType) { return moduleRegistrations[moduleType].$type === module_registration_model_1.THEME_MODULE_TYPE; })
                    .map(function (moduleType) { return moduleRegistrations[moduleType]; });
                themeSettings = {};
                return [4 /*yield*/, Promise.all(themeModules.map(function (themeModule) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        var settings, parentModuleName, parentSettingsPath, _a, _b, overrideSettings, overrideSettingsFile;
                        return tslib_1.__generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    settings = {};
                                    if (!themeModule.themeSettings) return [3 /*break*/, 2];
                                    return [4 /*yield*/, utilities_internal_1.safeReadJson(path_1.resolve(themeModule.moduleDirectory || '', themeModule.themeSettings))];
                                case 1:
                                    settings = (_c.sent()) || {};
                                    _c.label = 2;
                                case 2:
                                    if (!themeModule.parentDefinitionPath) return [3 /*break*/, 5];
                                    parentModuleName = models_1.getModuleName(themeModule.parentDefinitionPath);
                                    parentSettingsPath = path_1.join(path_1.dirname(themeModule.parentDefinitionPath), "" + parentModuleName + ".theme.settings.json" /* SETTINGS_FILE */);
                                    return [4 /*yield*/, utilities_internal_1.safeFileExists(parentSettingsPath)];
                                case 3:
                                    if (!_c.sent()) return [3 /*break*/, 5];
                                    _a = lodash_1.merge;
                                    _b = [settings];
                                    return [4 /*yield*/, utilities_internal_1.safeReadJson(parentSettingsPath)];
                                case 4:
                                    settings = _a.apply(void 0, _b.concat([(_c.sent()) || {}]));
                                    _c.label = 5;
                                case 5:
                                    overrideSettings = {};
                                    overrideSettingsFile = path_1.resolve(models_1.keystonePaths.KEYSTONE_THEMES_DIR, themeModule.name, "" + themeModule.name + ".theme.settings.json" /* SETTINGS_FILE */);
                                    return [4 /*yield*/, utilities_internal_1.safeFileExists(overrideSettingsFile)];
                                case 6:
                                    if (!_c.sent()) return [3 /*break*/, 8];
                                    return [4 /*yield*/, utilities_internal_1.safeReadJson(overrideSettingsFile)];
                                case 7:
                                    overrideSettings = (_c.sent()) || {};
                                    _c.label = 8;
                                case 8:
                                    themeSettings[themeModule.name] = lodash_1.merge(settings, overrideSettings);
                                    return [2 /*return*/];
                            }
                        });
                    }); }))];
            case 1:
                _a.sent();
                return [2 /*return*/, themeSettings];
        }
    });
}); };
/**
 * Adds any default properties the module config should have
 * to the dapi response
 *
 * @param result List of modules
 */
var addDefaultModuleConfigProperties = function (defJson) {
    var type = defJson.type || defJson.$type;
    if (defJson && (type === 'contentModule' || type === 'containerModule' || type === 'pageModule' || type === 'definitionExtension')) {
        // Every module should have a class name property added if missing from the definition json
        if (!defJson.config) {
            defJson.config = {};
        }
        if (!defJson.config.className) {
            defJson.config.className = classNameDefnProperty;
        }
        else {
            // if className is defined ensure type is set to 'css'
            defJson.config.className.type = 'css';
        }
    }
};
/**
 * Filters config properties present from config of Definition extension, if same property exists in dependncies of definition extension
 * @param themeDefinitionExtensions Final response of theme definition extension
 */
var filterConfigProperties = function (themeDefinitionExtensions) {
    var properties = Object.keys(themeDefinitionExtensions);
    if (properties.length > 0) {
        for (var i = 0; i < properties.length; i++) {
            var DefinitionExtension = themeDefinitionExtensions[properties[i]];
            var config = DefinitionExtension && DefinitionExtension["config"];
            if (config && DefinitionExtension["dependencies"]) {
                var dependencies = DefinitionExtension.dependencies.moduleLayout.oneOf;
                // @ts-ignore
                for (var j = 0; j < dependencies.length; j++) {
                    // @ts-ignore
                    var extendedproperties = dependencies[j].properties;
                    for (var _i = 0, _a = Object.keys(extendedproperties); _i < _a.length; _i++) {
                        var propertyKey = _a[_i];
                        if (config[propertyKey]) {
                            delete config[propertyKey];
                        }
                    }
                }
            }
        }
    }
    return themeDefinitionExtensions;
};
/**
 * Gets the pages in the given theme module
 * @param themeModuleBinder binder for the theme module object
 */
var getThemePages = function (themeModuleBinder) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var pageNames, themePages, _i, pageNames_1, pageName, layouts, _a, layouts_1, layout, pathToPageLayout, pageLayoutJson, _b, _c;
    return tslib_1.__generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                pageNames = Object.keys(themeModuleBinder.pages || {});
                themePages = {};
                _i = 0, pageNames_1 = pageNames;
                _d.label = 1;
            case 1:
                if (!(_i < pageNames_1.length)) return [3 /*break*/, 7];
                pageName = pageNames_1[_i];
                layouts = themeModuleBinder.pages[pageName] || [];
                _a = 0, layouts_1 = layouts;
                _d.label = 2;
            case 2:
                if (!(_a < layouts_1.length)) return [3 /*break*/, 6];
                layout = layouts_1[_a];
                pathToPageLayout = path_1.default.join(themeModuleBinder.moduleDirectory || '', "layouts" /* LAYOUTS */, "pages" /* PAGES */, pageName, "" + layout + ".page.json" /* PAGE_FILE */);
                return [4 /*yield*/, utilities_internal_1.safeReadJson(pathToPageLayout)];
            case 3:
                pageLayoutJson = (_d.sent()) || {};
                themePages[pageName] = themePages[pageName] || {};
                _b = themePages[pageName];
                _c = layout;
                return [4 /*yield*/, utilities_internal_1.resolveRef(pageLayoutJson, pathToPageLayout)];
            case 4:
                _b[_c] = _d.sent();
                _d.label = 5;
            case 5:
                _a++;
                return [3 /*break*/, 2];
            case 6:
                _i++;
                return [3 /*break*/, 1];
            case 7: return [2 /*return*/, themePages];
        }
    });
}); };
/**
 * Gets the segments in the given theme module
 * @param themeModuleBinder binder for the theme module object
 */
var getThemeSegments = function (themeModuleBinder) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var segments, _i, _a, segment, pathToSegment, segmentJson, _b, _c;
    return tslib_1.__generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                segments = {};
                themeModuleBinder.segments = themeModuleBinder.segments || [];
                _i = 0, _a = themeModuleBinder.segments;
                _d.label = 1;
            case 1:
                if (!(_i < _a.length)) return [3 /*break*/, 5];
                segment = _a[_i];
                pathToSegment = path_1.default.join(themeModuleBinder.moduleDirectory || '', "layouts" /* LAYOUTS */, "segments" /* SEGMENTS */, "" + segment + ".segment.json" /* SEGMENT_FILE */);
                return [4 /*yield*/, utilities_internal_1.safeReadJson(pathToSegment)];
            case 2:
                segmentJson = (_d.sent()) || {};
                _b = segments;
                _c = segment;
                return [4 /*yield*/, utilities_internal_1.resolveRef(segmentJson, pathToSegment)];
            case 3:
                _b[_c] = _d.sent();
                _d.label = 4;
            case 4:
                _i++;
                return [3 /*break*/, 1];
            case 5: return [2 /*return*/, segments];
        }
    });
}); };
/**
 * Get default theme style presets definition extensions
 * @param themeModuleName name of the theme module
 * @param themeModuleBinder theme module binder object
 */
// tslint:disable-next-line:no-any
var getDefaultThemeStylePreset = function (themeModuleName, themeModuleBinder) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var pathToThemeStylesDefinition, themeStylePresets, _a, pathToPartnerThemeStylePresets, partnerThemeStylesDefinition, _b;
    return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                pathToThemeStylesDefinition = path_1.default.join(themeModuleBinder.moduleDirectory || '', "styles" /* STYLES */, "" + themeModuleName + ".definition.scss.json" /* STYLE_PRESET_DEFINITION_FILE */);
                _a = utilities_internal_1.resolveRef;
                return [4 /*yield*/, utilities_internal_1.safeReadJson(pathToThemeStylesDefinition)];
            case 1: return [4 /*yield*/, _a.apply(void 0, [(_c.sent()) || {}, pathToThemeStylesDefinition])];
            case 2:
                themeStylePresets = _c.sent();
                pathToPartnerThemeStylePresets = path_1.default.join(models_1.keystonePaths.KEYSTONE_THEMES_DIR, themeModuleName, "styles" /* STYLES */, "" + themeModuleName + ".definition.scss.json" /* STYLE_PRESET_DEFINITION_FILE */);
                _b = utilities_internal_1.resolveRef;
                return [4 /*yield*/, utilities_internal_1.safeReadJson(pathToPartnerThemeStylePresets)];
            case 3: return [4 /*yield*/, _b.apply(void 0, [(_c.sent()) || {},
                    pathToPartnerThemeStylePresets])];
            case 4:
                partnerThemeStylesDefinition = _c.sent();
                return [2 /*return*/, lodash_1.merge(themeStylePresets, partnerThemeStylesDefinition)];
        }
    });
}); };
/**
 * Get additional theme style presets extensions
 * @param themeModuleName name of the theme module
 * @param themeModuleBinder theme module binder object
 */
// tslint:disable-next-line:no-any
var getThemeStylePresetInstances = function (themeModuleName, themeModuleBinder) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var mergedFiles, keystoneThemeFilePath, getThemeFilePaths, getKeystoneFilePaths, i, stylePresetName, additionalThemeStylePresets;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                mergedFiles = {};
                keystoneThemeFilePath = path_1.default.join(models_1.keystonePaths.KEYSTONE_THEMES_DIR, themeModuleName, "styles" /* STYLES */);
                return [4 /*yield*/, utilities_internal_1.safeGetAllFilesPath(path_1.default.join(themeModuleBinder.moduleDirectory || '', "styles" /* STYLES */, "/*" + ".scss.json" /* STYLE_PRESET_INSTANCE_FILE */))];
            case 1:
                getThemeFilePaths = (_a.sent()).filter(function (p) { return !p.endsWith(".definition.scss.json" /* STYLE_PRESET_DEFINITION_FILE */); });
                getKeystoneFilePaths = utilities_internal_1.safeGetAllFilesPathSync(path_1.default.join(keystoneThemeFilePath, "/*" + ".scss.json" /* STYLE_PRESET_INSTANCE_FILE */)).filter(function (p) { return !p.endsWith(".definition.scss.json" /* STYLE_PRESET_DEFINITION_FILE */); });
                Array.prototype.push.apply(getThemeFilePaths, getKeystoneFilePaths);
                if (!(getThemeFilePaths.length > 0)) return [3 /*break*/, 5];
                i = 0;
                _a.label = 2;
            case 2:
                if (!(i < getThemeFilePaths.length)) return [3 /*break*/, 5];
                stylePresetName = path_1.default.basename(getThemeFilePaths[i], '.scss.json');
                return [4 /*yield*/, utilities_internal_1.safeReadJson(getThemeFilePaths[i])];
            case 3:
                additionalThemeStylePresets = (_a.sent()) || {};
                mergedFiles[stylePresetName] = lodash_1.merge(mergedFiles[stylePresetName], additionalThemeStylePresets);
                _a.label = 4;
            case 4:
                i++;
                return [3 /*break*/, 2];
            case 5: return [2 /*return*/, mergedFiles];
        }
    });
}); };
//# sourceMappingURL=themes-dapi-helper.js.map