"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
var path = tslib_1.__importStar(require("path"));
var ActionRuntime;
(function (ActionRuntime) {
    ActionRuntime[ActionRuntime["server"] = 0] = "server";
    ActionRuntime[ActionRuntime["client"] = 1] = "client";
    ActionRuntime[ActionRuntime["serverOnly"] = 2] = "serverOnly";
})(ActionRuntime = exports.ActionRuntime || (exports.ActionRuntime = {}));
exports.THEME_MODULE_TYPE = 'themeModule';
exports.resolvedHoistedPath = path.resolve(process.cwd(), '../..').replace(/\\/gi, '/');
exports.MODULE = {
    registrationFileName: 'module-registration',
    namespace: utilities_internal_1.getSupportedNamespaces()
};
/**
 * Method to resolve paths for various registration file types based on the context
 * eg: hoisted, installed, local modules
 * NOTE: PLEASE MAKE SURE TO UPDATE __mocks__/module-registration-model.ts AS IT MOCKS THE PATHS FOR THE TESTS
 * @param registrationFileType registration file type
 * @param nodeExt file extension type in node_modules
 * @param localExt file extension type in local folders
 */
var getResolutionPathPattern = function (registrationFileType, nodeExt, localExt) {
    localExt = localExt || nodeExt;
    var resolutionPathPattern = {
        fromInstalledModule: exports.MODULE.namespace.map(function (moduleNamespace) {
            return process.cwd() + "/node_modules/" + moduleNamespace + "/*/dist/lib/**/*." + registrationFileType + "." + nodeExt;
        }),
        fromHoistedModule: exports.MODULE.namespace.map(function (moduleNamespace) {
            return exports.resolvedHoistedPath + "/node_modules/" + moduleNamespace + "/*/dist/lib/**/*." + registrationFileType + "." + nodeExt;
        }),
        fromLocalModule: process.cwd() + "/src/**/*." + registrationFileType + "." + localExt
    };
    if (registrationFileType === 'data') {
        return tslib_1.__assign(tslib_1.__assign({}, resolutionPathPattern), { fromLocalModule: process.cwd() + "/build/definitions/*/*.data.json" });
    }
    return resolutionPathPattern;
};
exports.nodeModulePath = path.join(process.cwd(), 'node_modules');
exports.getRegistrationOutputPath = function (fileName) { return path.resolve(path.join(process.cwd(), 'lib', fileName)); };
exports.VIEW = getResolutionPathPattern('view', 'js', 'tsx');
exports.ACTION = getResolutionPathPattern('action', 'js', 'ts');
exports.DEFINITION = getResolutionPathPattern('definition', 'json');
exports.DATADEFINITION = getResolutionPathPattern('data', 'json');
exports.COMPONENT = getResolutionPathPattern('component', 'js', 'tsx');
exports.CONNECTOR = getResolutionPathPattern('connector', 'json');
exports.localModuleDefaultDataPathPattern = process.cwd() + "/src/**/previews/**/*.*";
exports.localModuleResourcesPathPattern = process.cwd() + "/src/resources/**/*.json";
exports.themeModuleDefinitionExtensionsPathPattern = process.cwd() + "/src/**/*.definition.ext.json";
exports.themeModuleLayoutsPathPattern = process.cwd() + "/src/**/layouts/**/*.*";
exports.themeModuleStylesPathPattern = process.cwd() + "/src/**/styles/**/*.*";
exports.themeModuleSettingsPathPattern = process.cwd() + "/src/**/*.settings.json";
exports.THEME_MODULE_FILE_TYPE = {
    DEFINITION_EXTENSIONS: 'definition-extensions',
    LAYOUTS: 'layouts',
    STYLES: 'styles',
    SETTINGS: 'styles'
};
//# sourceMappingURL=module-registration-model.js.map