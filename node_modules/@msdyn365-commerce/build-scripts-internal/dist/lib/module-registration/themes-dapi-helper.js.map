{"version":3,"file":"themes-dapi-helper.js","sourceRoot":"","sources":["../../../src/module-registration/themes-dapi-helper.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IDictionary, IThemeModule } from '@msdyn365-commerce/core-internal';\nimport {\n    resolveRef,\n    safeFileExists,\n    safeGetAllFilesPath,\n    safeGetAllFilesPathSync,\n    safeReadJson\n} from '@msdyn365-commerce/utilities-internal';\nimport { merge as _merge } from 'lodash';\nimport path, { dirname, join, resolve } from 'path';\nimport { getModulesDAPIHelperSingleton } from './module-dapi-helper';\nimport { IModuleRegistration, THEME_MODULE_TYPE } from './module-registration-model';\nimport { getModuleName, IModuleDefinition, IThemeDefinition, keystonePaths, THEME_MODULE } from './utils/models';\n\nconst classNameDefnProperty = {\n    friendlyName: 'Default CSS Class Name(s)',\n    description: 'Provides a way to set configurable default css class(es) to apply to your module.',\n    type: 'css'\n};\n\nexport const getThemesDAPIList = async (\n    moduleRegistrations: IDictionary<IModuleRegistration>,\n    parsedDefinitions: IDictionary<IModuleDefinition>\n): Promise<IThemeModule[]> => {\n    const themeModules: IThemeModule[] = [];\n    if (themeModules.length) {\n        return themeModules;\n    }\n\n    const themesPromises = (Object.keys(moduleRegistrations) || [])\n        .filter(moduleType => moduleRegistrations[moduleType].$type === THEME_MODULE_TYPE)\n        .map(async moduleType => {\n            const moduleBinder = moduleRegistrations[moduleType];\n\n            // tslint:disable-next-line:no-unnecessary-local-variable\n            const parsedModuleDef = parsedDefinitions[moduleBinder.name];\n            const themeModule = <IThemeDefinition>(<unknown>moduleRegistrations[moduleBinder.name]);\n\n            themeModule.pages = await getThemePages(moduleBinder);\n            themeModule.segments = await getThemeSegments(moduleBinder);\n\n            themeModule.definitionExtensions = await getThemeDefinitionExtensions(themeModule.name, moduleBinder);\n\n            const themeStylePresets = await getDefaultThemeStylePreset(themeModule.name, moduleBinder);\n            themeModule.styles = {\n                definition: themeStylePresets,\n                presets:\n                    Object.entries(themeStylePresets).length !== 0 ? await getThemeStylePresetInstances(themeModule.name, moduleBinder) : {}\n            };\n\n            return {\n                description: parsedModuleDef.description,\n                friendlyName: parsedModuleDef.friendlyName,\n                name: parsedModuleDef.name,\n                type: parsedModuleDef.type,\n                pages: themeModule.pages,\n                segments: themeModule.segments || [],\n                definitionExtensions: themeModule.definitionExtensions,\n                styles: themeModule.styles\n            };\n        });\n\n    return <IThemeModule[]>(<unknown>await Promise.all(themesPromises));\n};\n\n/**\n * Get theme definition extensions\n * @param themeModuleName name of the theme module\n * @param themeModuleBinder theme module binder object\n */\nexport const getThemeDefinitionExtensions = async (\n    themeModuleName: string,\n    themeModuleBinder: IModuleRegistration\n): Promise<IDictionary<IModuleDefinition>> => {\n    let themeDefinitionExtensions: IDictionary<IModuleDefinition> = <IDictionary<IModuleDefinition>>{};\n\n    // In case of extended theme module, read parent theme definiton extensions first\n    if (themeModuleBinder.parentDefinitionPath) {\n        const dapiHelper = getModulesDAPIHelperSingleton();\n        const parentThemeName = dapiHelper.getModuleName(themeModuleBinder.parentDefinitionPath);\n        const parentThemeBinder = dapiHelper.getModuleBinder(parentThemeName);\n        parentThemeBinder.definitionExtensions = parentThemeBinder.definitionExtensions || [];\n        for (const moduleName of parentThemeBinder.definitionExtensions) {\n            const pathToDefinition = path.join(\n                parentThemeBinder.moduleDirectory || '',\n                THEME_MODULE.DEF_EXTENSIONS,\n                `${moduleName}${THEME_MODULE.DEF_EXT_FILE}`\n            );\n\n            const defExtensionJson: IModuleDefinition = <IModuleDefinition>((await safeReadJson(pathToDefinition)) || {});\n            addDefaultModuleConfigProperties(defExtensionJson);\n            themeDefinitionExtensions[moduleName] = <IModuleDefinition>await resolveRef(defExtensionJson, pathToDefinition);\n        }\n    }\n\n    // Read theme module definition extensions\n    themeModuleBinder.definitionExtensions = themeModuleBinder.definitionExtensions || [];\n    for (const moduleName of themeModuleBinder.definitionExtensions) {\n        const pathToDefinition = path.join(\n            themeModuleBinder.moduleDirectory || '',\n            THEME_MODULE.DEF_EXTENSIONS,\n            `${moduleName}${THEME_MODULE.DEF_EXT_FILE}`\n        );\n\n        const defExtensionJson: IModuleDefinition = <IModuleDefinition>((await safeReadJson(pathToDefinition)) || {});\n        addDefaultModuleConfigProperties(defExtensionJson);\n        themeDefinitionExtensions[moduleName] = await resolveRef(defExtensionJson, pathToDefinition);\n    }\n\n    // Read partner level definition extensions\n    const partnerDefinitionExtensions =\n        (await safeGetAllFilesPath(\n            path.join(keystonePaths.KEYSTONE_THEMES_DIR, themeModuleName, THEME_MODULE.DEF_EXTENSIONS, `*${THEME_MODULE.DEF_EXT_FILE}`)\n        )) || [];\n    for (const pathToDefExt of partnerDefinitionExtensions) {\n        // Check if partner has definition extension override for this theme and merge\n        if (await safeFileExists(pathToDefExt)) {\n            const partnerDefExtensionJson = (await safeReadJson(pathToDefExt)) || {};\n            const moduleName = path.basename(pathToDefExt, THEME_MODULE.DEF_EXT_FILE);\n            themeDefinitionExtensions[moduleName] = _merge(themeDefinitionExtensions[moduleName], partnerDefExtensionJson);\n        }\n    }\n\n    // Check and remove config properties present from config of theme definition extension, if duplicate property exists in dependncies of definition extension\n    themeDefinitionExtensions = filterConfigProperties(themeDefinitionExtensions);\n    return themeDefinitionExtensions;\n};\n\n/**\n * @function {getThemeSettings}   - Method to return partner theme settings\n */\nexport const getThemeSettings = async (moduleRegistrations: IDictionary<IModuleRegistration>) => {\n    const themeModules: IModuleRegistration[] = (Object.keys(moduleRegistrations) || [])\n        .filter(moduleType => moduleRegistrations[moduleType].$type === THEME_MODULE_TYPE)\n        .map(moduleType => moduleRegistrations[moduleType]);\n\n    // tslint:disable-next-line:no-any\n    const themeSettings: any = {};\n    await Promise.all(\n        themeModules.map(async themeModule => {\n            let settings = {};\n            if (themeModule.themeSettings) {\n                settings = (await safeReadJson(resolve(themeModule.moduleDirectory || '', themeModule.themeSettings))) || {};\n            }\n\n            if (themeModule.parentDefinitionPath) {\n                const parentModuleName = getModuleName(themeModule.parentDefinitionPath);\n                const parentSettingsPath = join(\n                    dirname(themeModule.parentDefinitionPath),\n                    `${parentModuleName}${THEME_MODULE.SETTINGS_FILE}`\n                );\n                if (await safeFileExists(parentSettingsPath)) {\n                    settings = _merge(settings, (await safeReadJson(parentSettingsPath)) || {});\n                }\n            }\n\n            let overrideSettings = {};\n            const overrideSettingsFile = resolve(\n                keystonePaths.KEYSTONE_THEMES_DIR,\n                themeModule.name,\n                `${themeModule.name}${THEME_MODULE.SETTINGS_FILE}`\n            );\n            if (await safeFileExists(overrideSettingsFile)) {\n                overrideSettings = (await safeReadJson(overrideSettingsFile)) || {};\n            }\n\n            themeSettings[themeModule.name] = _merge(settings, overrideSettings);\n        })\n    );\n\n    return themeSettings;\n};\n\n/**\n * Adds any default properties the module config should have\n * to the dapi response\n *\n * @param result List of modules\n */\nconst addDefaultModuleConfigProperties = (defJson: IModuleDefinition) => {\n    const type = defJson.type || defJson.$type;\n    if (defJson && (type === 'contentModule' || type === 'containerModule' || type === 'pageModule' || type === 'definitionExtension')) {\n        // Every module should have a class name property added if missing from the definition json\n        if (!defJson.config) {\n            defJson.config = {};\n        }\n        if (!defJson.config.className) {\n            defJson.config.className = classNameDefnProperty;\n        } else {\n            // if className is defined ensure type is set to 'css'\n            defJson.config.className.type = 'css';\n        }\n    }\n};\n\n/**\n * Filters config properties present from config of Definition extension, if same property exists in dependncies of definition extension\n * @param themeDefinitionExtensions Final response of theme definition extension\n */\nconst filterConfigProperties = (themeDefinitionExtensions: IDictionary<IModuleDefinition>) => {\n    const properties = Object.keys(themeDefinitionExtensions);\n    if (properties.length > 0) {\n        for (let i = 0; i < properties.length; i++) {\n            const DefinitionExtension: IModuleDefinition = themeDefinitionExtensions[properties[i]];\n            const config = DefinitionExtension && DefinitionExtension[`config`];\n            if (config && DefinitionExtension[`dependencies`]) {\n                const dependencies = DefinitionExtension.dependencies.moduleLayout.oneOf;\n                // @ts-ignore\n                for (let j = 0; j < dependencies.length; j++) {\n                    // @ts-ignore\n                    const extendedproperties = dependencies[j].properties;\n                    for (const propertyKey of Object.keys(extendedproperties)) {\n                        if (config[propertyKey]) {\n                            delete config[propertyKey];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return themeDefinitionExtensions;\n};\n\n/**\n * Gets the pages in the given theme module\n * @param themeModuleBinder binder for the theme module object\n */\nconst getThemePages = async (themeModuleBinder: IModuleRegistration) => {\n    const pageNames = Object.keys(themeModuleBinder.pages || {});\n    const themePages: IDictionary<IDictionary<object>> = {};\n    for (const pageName of pageNames) {\n        const layouts = themeModuleBinder.pages![pageName] || [];\n        for (const layout of layouts) {\n            const pathToPageLayout = path.join(\n                themeModuleBinder.moduleDirectory || '',\n                THEME_MODULE.LAYOUTS,\n                THEME_MODULE.PAGES,\n                pageName,\n                `${layout}${THEME_MODULE.PAGE_FILE}`\n            );\n            const pageLayoutJson = (await safeReadJson(pathToPageLayout)) || {};\n            themePages[pageName] = themePages[pageName] || {};\n            themePages[pageName][layout] = await resolveRef(pageLayoutJson, pathToPageLayout);\n        }\n    }\n\n    return themePages;\n};\n\n/**\n * Gets the segments in the given theme module\n * @param themeModuleBinder binder for the theme module object\n */\nconst getThemeSegments = async (themeModuleBinder: IModuleRegistration) => {\n    const segments: IDictionary<object> = {};\n    themeModuleBinder.segments = themeModuleBinder.segments || [];\n    for (const segment of themeModuleBinder.segments) {\n        const pathToSegment = path.join(\n            themeModuleBinder.moduleDirectory || '',\n            THEME_MODULE.LAYOUTS,\n            THEME_MODULE.SEGMENTS,\n            `${segment}${THEME_MODULE.SEGMENT_FILE}`\n        );\n        const segmentJson = (await safeReadJson(pathToSegment)) || {};\n        segments[segment] = await resolveRef(segmentJson, pathToSegment);\n    }\n\n    return segments;\n};\n\n/**\n * Get default theme style presets definition extensions\n * @param themeModuleName name of the theme module\n * @param themeModuleBinder theme module binder object\n */\n// tslint:disable-next-line:no-any\nconst getDefaultThemeStylePreset = async (themeModuleName: string, themeModuleBinder: IModuleRegistration): Promise<any> => {\n    const pathToThemeStylesDefinition = path.join(\n        themeModuleBinder.moduleDirectory || '',\n        THEME_MODULE.STYLES,\n        `${themeModuleName}${THEME_MODULE.STYLE_PRESET_DEFINITION_FILE}`\n    );\n\n    const themeStylePresets = await resolveRef((await safeReadJson(pathToThemeStylesDefinition)) || {}, pathToThemeStylesDefinition);\n    const pathToPartnerThemeStylePresets = path.join(\n        keystonePaths.KEYSTONE_THEMES_DIR,\n        themeModuleName,\n        THEME_MODULE.STYLES,\n        `${themeModuleName}${THEME_MODULE.STYLE_PRESET_DEFINITION_FILE}`\n    );\n\n    const partnerThemeStylesDefinition = await resolveRef(\n        (await safeReadJson(pathToPartnerThemeStylePresets)) || {},\n        pathToPartnerThemeStylePresets\n    );\n    return _merge(themeStylePresets, partnerThemeStylesDefinition);\n};\n\n/**\n * Get additional theme style presets extensions\n * @param themeModuleName name of the theme module\n * @param themeModuleBinder theme module binder object\n */\n// tslint:disable-next-line:no-any\nconst getThemeStylePresetInstances = async (themeModuleName: string, themeModuleBinder: IModuleRegistration): Promise<any> => {\n    const mergedFiles: IDictionary<object> = {};\n    const keystoneThemeFilePath = path.join(keystonePaths.KEYSTONE_THEMES_DIR, themeModuleName, THEME_MODULE.STYLES);\n\n    const getThemeFilePaths = (\n        await safeGetAllFilesPath(\n            path.join(themeModuleBinder.moduleDirectory || '', THEME_MODULE.STYLES, `/*${THEME_MODULE.STYLE_PRESET_INSTANCE_FILE}`)\n        )\n    ).filter(p => !p.endsWith(THEME_MODULE.STYLE_PRESET_DEFINITION_FILE));\n\n    const getKeystoneFilePaths = safeGetAllFilesPathSync(\n        path.join(keystoneThemeFilePath, `/*${THEME_MODULE.STYLE_PRESET_INSTANCE_FILE}`)\n    ).filter(p => !p.endsWith(THEME_MODULE.STYLE_PRESET_DEFINITION_FILE));\n\n    Array.prototype.push.apply(getThemeFilePaths, getKeystoneFilePaths);\n\n    if (getThemeFilePaths.length > 0) {\n        for (let i = 0; i < getThemeFilePaths.length; i++) {\n            const stylePresetName = path.basename(getThemeFilePaths[i], '.scss.json');\n            const additionalThemeStylePresets = (await safeReadJson(getThemeFilePaths[i])) || {};\n\n            mergedFiles[stylePresetName] = _merge(mergedFiles[stylePresetName], additionalThemeStylePresets);\n        }\n    }\n\n    return mergedFiles;\n};\n"]}