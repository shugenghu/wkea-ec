{"version":3,"file":"registerThemes.js","sourceRoot":"","sources":["../../../src/tasks/registerThemes.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { getNodeSassOptionsForTarget, IParsedTheme, IThemeBuildTarget, render } from '@msdyn365-commerce/theming-internal';\nimport { safeFileExists, safeGetAllFilesPath, safeReadJson, safeWriteFile, trace } from '@msdyn365-commerce/utilities-internal';\nimport * as fse from 'fs-extra';\nimport { flattenDeep } from 'lodash';\nimport * as nodeSass from 'node-sass';\nimport * as path from 'path';\nimport { getAllRegisteredModulePaths } from '../helpers';\nimport { IRegisterThemesOptions } from '../models';\nimport { IModuleMetadata } from '../models/IModuleMetadata';\nimport { GreatSuccess, IResult, NoSuccess } from '../models/IResult';\nimport { MODULE } from '../module-registration/module-registration-model';\n\n/**\n * Current directory\n * @internal\n */\nexport const currentDir = path.resolve('.');\n\n/**\n * Directory for built themes output\n * @internal\n */\nexport const builtThemeOutFolder = path.resolve(path.join('.', 'build', 'public', 'static', 'css'));\n\n/**\n * Gets theme output folder\n * @param themeName\n * @internal\n */\nexport const getThemeOutFolder = (themeName: string) => path.join(builtThemeOutFolder, themeName);\n\n/**\n * Builds current theme with provided sass options and actually writes the file\n * @param theme IParsed theme definition\n * @param sassOptions Sass options for current theme\n */\nexport const buildTheme = async (theme: IParsedTheme, sassOptions: nodeSass.Options): Promise<IResult> => {\n    try {\n        const baseOutFile = path.basename(<string>sassOptions.outFile);\n        const sassResult = await render(sassOptions);\n        return (\n            Promise.all(\n                [\n                    // we always set outfile, safe cast here\n                    safeWriteFile(<string>sassOptions.outFile, sassResult.css.toString()),\n                    sassResult.map && safeWriteFile(`${sassOptions.outFile}.map`, sassResult.map.toString())\n                ].filter(Boolean)\n            )\n                .then(() => {\n                    trace.info(`Compiled ${theme.name} successfully (${baseOutFile})`);\n                    return GreatSuccess;\n                })\n                // tslint:disable-next-line:no-any\n                .catch((err: any) => {\n                    throw new Error(`Error compiling ${theme.name} ${baseOutFile}\\n${err}`);\n                })\n        );\n    } catch (e) {\n        trace.error(e);\n        throw e;\n    }\n};\n\n/**\n * Builds all themes\n * @param buildTargets All build targets\n * @internal\n */\nexport const buildAllThemes = async (buildTargets: IThemeBuildTarget[]) => {\n    const id = `build-all-themes`;\n    trace.info(`Starting to build all themes`);\n    trace.startTimer(id);\n    return Promise.all(\n        buildTargets.map((buildTarget: IThemeBuildTarget) => {\n            return buildTheme(buildTarget.theme, buildTarget.options);\n        })\n    ).then((buildResults: IResult[]) => {\n        trace.info(`Finished building all themes`);\n        trace.stopTimer(id);\n        return buildResults;\n    });\n};\n\n/**\n * Determine theme type and get all local metadata about it\n * @param themeFilePaths list of file paths where we've identified a theme entry file\n * @internal\n */\nexport const getThemeMetadata = async (themeFilePaths: string[]): Promise<IParsedTheme[]> => {\n    return Promise.all(\n        themeFilePaths.map(async (filePath: string) => {\n            const themeFolder = path.dirname(filePath);\n            const theme = {\n                // INPUTS\n                themeFolder,\n                themeEntry: filePath,\n                // input is sanitized as it must match glob pattern to get here\n                name: path.basename(filePath, '.theme.scss'),\n                functionsEntry:\n                    (await safeFileExists(path.join(themeFolder, 'functions.scss'))) ||\n                    (await safeFileExists(path.join(themeFolder, '_functions.scss'))),\n                mixinsEntry:\n                    (await safeFileExists(path.join(themeFolder, 'mixins.scss'))) ||\n                    (await safeFileExists(path.join(themeFolder, '_mixins.scss'))),\n                variablesEntry:\n                    (await safeFileExists(path.join(themeFolder, 'variables.scss'))) ||\n                    (await safeFileExists(path.join(themeFolder, '_variables.scss'))),\n                layoutsEntry:\n                    (await safeFileExists(path.join(themeFolder, 'layouts.scss'))) ||\n                    (await safeFileExists(path.join(themeFolder, '_layouts.scss')))\n            };\n            const themeOutFolder = getThemeOutFolder(theme.name);\n            return {\n                ...theme,\n                // simple is \"standard\" if it contains only an entry point and no other specific files\n                outFolder: path.join(themeOutFolder),\n                productionPath: path.join(themeOutFolder, `${theme.name}.min.css`),\n                devPath: path.join(themeOutFolder, `${theme.name}.css`)\n            };\n        })\n    );\n};\n\n/**\n * Create list of build targets\n *\n * @param parsedThemes Array of parsed themes\n * @param modulesMetadata list of modules with styles that need to be compiled\n * @internal\n */\nexport const createBuildTargets = async (\n    parsedThemes: IParsedTheme[],\n    modulesMetadata: IModuleMetadata[] = []\n): Promise<IThemeBuildTarget[]> => {\n    return flattenDeep<IThemeBuildTarget>(\n        await Promise.all(\n            [true, false].map(async (isDebug: boolean) =>\n                Promise.all(\n                    parsedThemes.map(async (theme: IParsedTheme) => {\n                        return {\n                            theme,\n                            options: await getNodeSassOptionsForTarget(theme, [], isDebug)\n                        };\n                    })\n                )\n            )\n        )\n    );\n};\n\n/**\n * Gets modules which contain styles\n */\nexport const getModulesWithStyles = async () => {\n    const moduleMetadata = await getAllRegisteredModulePaths();\n    const result = moduleMetadata.filter((m: IModuleMetadata) => m && m.hasStyles);\n    trace.info(`Modules with styles:`);\n    trace.info(result);\n    return result;\n};\n\n/**\n * Helper function to get relative dir\n * @param root root dir\n * @param dir dir\n * @internal\n */\nexport const makeDirRelative = (root: string, dir: string) => {\n    return path.relative(path.join(root, 'build', 'public'), dir).replace(/\\\\/gi, '/');\n};\n\n/**\n * Copies fonts to destination directory\n */\nexport const copyFonts = async (buildTargets: IThemeBuildTarget[]) => {\n    return Promise.all(\n        buildTargets.map(async buildTarget => {\n            const fontFolder = path.join(buildTarget.theme.themeFolder, 'fonts');\n            const fontFolderOut = path.join(buildTarget.theme.outFolder, 'fonts');\n            try {\n                // if this doesn't throw, the folder exists\n                await fse.access(fontFolder).then(() => fse.copy(fontFolder, fontFolderOut, { overwrite: true, recursive: true }));\n            } catch {\n                // continue on no fonts or error\n            }\n        })\n    );\n};\n\n/**\n *\n * @param buildTargets build targets\n */\nexport const buildAndWriteThemes = async (buildTargets: IThemeBuildTarget[]) => {\n    try {\n        return buildAllThemes(buildTargets).then((results: IResult[]) => {\n            results.forEach(result => {\n                if (!result.success) {\n                    throw new Error('Failed to build all themes');\n                }\n            });\n            return copyFonts(buildTargets).then(() => {\n                const themeRegistrationJson: { [themeName: string]: { dev: string; prod: string } } = {};\n                buildTargets.forEach((buildTarget: IThemeBuildTarget) => {\n                    themeRegistrationJson[buildTarget.theme.name] = {\n                        dev: makeDirRelative(currentDir, buildTarget.theme.devPath),\n                        prod: makeDirRelative(currentDir, buildTarget.theme.productionPath)\n                    };\n                });\n                const outFilePath = path.join(currentDir, 'build', 'theme-registration.json');\n                // tslint:disable-next-line:no-any\n                let fileContents: any = {};\n                // if the file exists, read it and update a section in it\n                return safeFileExists(outFilePath).then(async fileExists => {\n                    if (fileExists) {\n                        fileContents = await safeReadJson(outFilePath);\n                    }\n                    fileContents.themes = themeRegistrationJson;\n                    return safeWriteFile(outFilePath, JSON.stringify(fileContents, null, 4)).then(() => {\n                        return GreatSuccess;\n                    });\n                });\n            });\n        });\n    } catch (e) {\n        trace.error(`Error in 'buildAndWriteThemes'\\n${e}`);\n        return NoSuccess;\n    }\n};\n\n/**\n * Add themes Metadata in themes Map\n * @param themes parseLocalThemes/ parseNodeThemes\n * @param themeMap Theme object to map themeName to corresponding themeMetadata\n */\nconst addThemesMetadataInMap = (\n    themes: IParsedTheme[],\n    themesMap: { [themeName: string]: IParsedTheme }\n): { [themeName: string]: IParsedTheme } => {\n    if (themes.length > 0) {\n        for (let i = 0; i < themes.length; i++) {\n            const themeName = themes[i].name;\n            themesMap[themeName] = themes[i];\n        }\n    }\n    return themesMap;\n};\n\n/**\n * Overview of flow\n *  - Find all local themes\n *  - Find all node themes\n *  - Build theme registration\n *  - Write themes\n */\n/* istanbul ignore next: united tested individually */\n// tslint:disable-next-line:max-func-body-length\nexport default async (options: IRegisterThemesOptions): Promise<IResult> => {\n    try {\n        if (!options.buildNodeThemes) {\n            trace.info(`Skipping building node themes.`);\n        }\n        if (!options.buildLocalThemes) {\n            trace.info(`Skipping building local themes`);\n        }\n        if (!options.buildLocalThemes && !options.buildNodeThemes) {\n            return GreatSuccess;\n        }\n        const localThemes = options.buildLocalThemes\n            ? await safeGetAllFilesPath(path.join(currentDir, 'src', '**', 'themes', '**', '*.theme.scss'))\n            : [];\n        const isHoisted = safeFileExists(path.resolve('../../lerna.json'));\n        const promises = [\n            // msdyn365-commerce-theme Will get deprecated\n            safeGetAllFilesPath(path.join(currentDir, 'node_modules', '@msdyn365-commerce-theme', '**', '*.theme.scss'), {\n                follow: true\n            }),\n            // hoisted env\n            isHoisted &&\n                safeGetAllFilesPath(path.join(currentDir, '../..', 'node_modules', '@msdyn365-commerce-theme', '**', '*.theme.scss'), {\n                    follow: true\n                })\n        ].filter(Boolean);\n\n        // look for theme sass files in all the supported namespaces\n        MODULE.namespace.map(moduleNamespace => {\n            // normal env\n            promises.push(\n                safeGetAllFilesPath(path.join(currentDir, 'node_modules', moduleNamespace, '**', '*.theme.scss'), {\n                    follow: true\n                })\n            );\n            // hoisted env\n            if (isHoisted) {\n                promises.push(\n                    safeGetAllFilesPath(path.join(currentDir, '../..', 'node_modules', moduleNamespace, '**', '*.theme.scss'), {\n                        follow: true\n                    })\n                );\n            }\n        });\n\n        const nodeThemes = options.buildNodeThemes\n            ? await Promise.all(promises).then(result => result.reduce((acc, arr) => acc.concat(arr)).filter(Boolean))\n            : [];\n\n        // Theme Map to store themeName to theme Metadata\n        const themesMap: { [themeName: string]: IParsedTheme } = {};\n        const parseLocalThemes = await getThemeMetadata(localThemes);\n        const parseNodeThemes = await getThemeMetadata(nodeThemes);\n\n        // Add node modules themes first and then the local themes to themeMap to make sure partner overrides are given preference.\n        addThemesMetadataInMap(parseNodeThemes, themesMap);\n        addThemesMetadataInMap(parseLocalThemes, themesMap);\n\n        const parsedThemes = Object.values(themesMap);\n        trace.info('Parsed Themes:');\n        parsedThemes.forEach(i => trace.info(i.themeEntry));\n        const buildTargets = await createBuildTargets(parsedThemes, []);\n        trace.debug(buildTargets);\n        return buildAndWriteThemes(buildTargets);\n    } catch (e) {\n        trace.error(`Error building themes`, e);\n        return NoSuccess;\n    }\n};\n"]}