"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var theming_internal_1 = require("@msdyn365-commerce/theming-internal");
var utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
var fse = tslib_1.__importStar(require("fs-extra"));
var lodash_1 = require("lodash");
var path = tslib_1.__importStar(require("path"));
var helpers_1 = require("../helpers");
var IResult_1 = require("../models/IResult");
var module_registration_model_1 = require("../module-registration/module-registration-model");
/**
 * Current directory
 * @internal
 */
exports.currentDir = path.resolve('.');
/**
 * Directory for built themes output
 * @internal
 */
exports.builtThemeOutFolder = path.resolve(path.join('.', 'build', 'public', 'static', 'css'));
/**
 * Gets theme output folder
 * @param themeName
 * @internal
 */
exports.getThemeOutFolder = function (themeName) { return path.join(exports.builtThemeOutFolder, themeName); };
/**
 * Builds current theme with provided sass options and actually writes the file
 * @param theme IParsed theme definition
 * @param sassOptions Sass options for current theme
 */
exports.buildTheme = function (theme, sassOptions) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var baseOutFile_1, sassResult, e_1;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                baseOutFile_1 = path.basename(sassOptions.outFile);
                return [4 /*yield*/, theming_internal_1.render(sassOptions)];
            case 1:
                sassResult = _a.sent();
                return [2 /*return*/, (Promise.all([
                        // we always set outfile, safe cast here
                        utilities_internal_1.safeWriteFile(sassOptions.outFile, sassResult.css.toString()),
                        sassResult.map && utilities_internal_1.safeWriteFile(sassOptions.outFile + ".map", sassResult.map.toString())
                    ].filter(Boolean))
                        .then(function () {
                        utilities_internal_1.trace.info("Compiled " + theme.name + " successfully (" + baseOutFile_1 + ")");
                        return IResult_1.GreatSuccess;
                    })
                        // tslint:disable-next-line:no-any
                        .catch(function (err) {
                        throw new Error("Error compiling " + theme.name + " " + baseOutFile_1 + "\n" + err);
                    }))];
            case 2:
                e_1 = _a.sent();
                utilities_internal_1.trace.error(e_1);
                throw e_1;
            case 3: return [2 /*return*/];
        }
    });
}); };
/**
 * Builds all themes
 * @param buildTargets All build targets
 * @internal
 */
exports.buildAllThemes = function (buildTargets) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var id;
    return tslib_1.__generator(this, function (_a) {
        id = "build-all-themes";
        utilities_internal_1.trace.info("Starting to build all themes");
        utilities_internal_1.trace.startTimer(id);
        return [2 /*return*/, Promise.all(buildTargets.map(function (buildTarget) {
                return exports.buildTheme(buildTarget.theme, buildTarget.options);
            })).then(function (buildResults) {
                utilities_internal_1.trace.info("Finished building all themes");
                utilities_internal_1.trace.stopTimer(id);
                return buildResults;
            })];
    });
}); };
/**
 * Determine theme type and get all local metadata about it
 * @param themeFilePaths list of file paths where we've identified a theme entry file
 * @internal
 */
exports.getThemeMetadata = function (themeFilePaths) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        return [2 /*return*/, Promise.all(themeFilePaths.map(function (filePath) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var themeFolder, theme, _a, _b, _c, _d, _e, themeOutFolder;
                return tslib_1.__generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            themeFolder = path.dirname(filePath);
                            _a = {
                                // INPUTS
                                themeFolder: themeFolder,
                                themeEntry: filePath,
                                // input is sanitized as it must match glob pattern to get here
                                name: path.basename(filePath, '.theme.scss')
                            };
                            return [4 /*yield*/, utilities_internal_1.safeFileExists(path.join(themeFolder, 'functions.scss'))];
                        case 1:
                            _b = (_f.sent());
                            if (_b) return [3 /*break*/, 3];
                            return [4 /*yield*/, utilities_internal_1.safeFileExists(path.join(themeFolder, '_functions.scss'))];
                        case 2:
                            _b = (_f.sent());
                            _f.label = 3;
                        case 3:
                            _a.functionsEntry = _b;
                            return [4 /*yield*/, utilities_internal_1.safeFileExists(path.join(themeFolder, 'mixins.scss'))];
                        case 4:
                            _c = (_f.sent());
                            if (_c) return [3 /*break*/, 6];
                            return [4 /*yield*/, utilities_internal_1.safeFileExists(path.join(themeFolder, '_mixins.scss'))];
                        case 5:
                            _c = (_f.sent());
                            _f.label = 6;
                        case 6:
                            _a.mixinsEntry = _c;
                            return [4 /*yield*/, utilities_internal_1.safeFileExists(path.join(themeFolder, 'variables.scss'))];
                        case 7:
                            _d = (_f.sent());
                            if (_d) return [3 /*break*/, 9];
                            return [4 /*yield*/, utilities_internal_1.safeFileExists(path.join(themeFolder, '_variables.scss'))];
                        case 8:
                            _d = (_f.sent());
                            _f.label = 9;
                        case 9:
                            _a.variablesEntry = _d;
                            return [4 /*yield*/, utilities_internal_1.safeFileExists(path.join(themeFolder, 'layouts.scss'))];
                        case 10:
                            _e = (_f.sent());
                            if (_e) return [3 /*break*/, 12];
                            return [4 /*yield*/, utilities_internal_1.safeFileExists(path.join(themeFolder, '_layouts.scss'))];
                        case 11:
                            _e = (_f.sent());
                            _f.label = 12;
                        case 12:
                            theme = (_a.layoutsEntry = _e,
                                _a);
                            themeOutFolder = exports.getThemeOutFolder(theme.name);
                            return [2 /*return*/, tslib_1.__assign(tslib_1.__assign({}, theme), { 
                                    // simple is "standard" if it contains only an entry point and no other specific files
                                    outFolder: path.join(themeOutFolder), productionPath: path.join(themeOutFolder, theme.name + ".min.css"), devPath: path.join(themeOutFolder, theme.name + ".css") })];
                    }
                });
            }); }))];
    });
}); };
/**
 * Create list of build targets
 *
 * @param parsedThemes Array of parsed themes
 * @param modulesMetadata list of modules with styles that need to be compiled
 * @internal
 */
exports.createBuildTargets = function (parsedThemes, modulesMetadata) {
    if (modulesMetadata === void 0) { modulesMetadata = []; }
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = lodash_1.flattenDeep;
                    return [4 /*yield*/, Promise.all([true, false].map(function (isDebug) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                return [2 /*return*/, Promise.all(parsedThemes.map(function (theme) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                                        var _a;
                                        return tslib_1.__generator(this, function (_b) {
                                            switch (_b.label) {
                                                case 0:
                                                    _a = {
                                                        theme: theme
                                                    };
                                                    return [4 /*yield*/, theming_internal_1.getNodeSassOptionsForTarget(theme, [], isDebug)];
                                                case 1: return [2 /*return*/, (_a.options = _b.sent(),
                                                        _a)];
                                            }
                                        });
                                    }); }))];
                            });
                        }); }))];
                case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
            }
        });
    });
};
/**
 * Gets modules which contain styles
 */
exports.getModulesWithStyles = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var moduleMetadata, result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, helpers_1.getAllRegisteredModulePaths()];
            case 1:
                moduleMetadata = _a.sent();
                result = moduleMetadata.filter(function (m) { return m && m.hasStyles; });
                utilities_internal_1.trace.info("Modules with styles:");
                utilities_internal_1.trace.info(result);
                return [2 /*return*/, result];
        }
    });
}); };
/**
 * Helper function to get relative dir
 * @param root root dir
 * @param dir dir
 * @internal
 */
exports.makeDirRelative = function (root, dir) {
    return path.relative(path.join(root, 'build', 'public'), dir).replace(/\\/gi, '/');
};
/**
 * Copies fonts to destination directory
 */
exports.copyFonts = function (buildTargets) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        return [2 /*return*/, Promise.all(buildTargets.map(function (buildTarget) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var fontFolder, fontFolderOut, _a;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            fontFolder = path.join(buildTarget.theme.themeFolder, 'fonts');
                            fontFolderOut = path.join(buildTarget.theme.outFolder, 'fonts');
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            // if this doesn't throw, the folder exists
                            return [4 /*yield*/, fse.access(fontFolder).then(function () { return fse.copy(fontFolder, fontFolderOut, { overwrite: true, recursive: true }); })];
                        case 2:
                            // if this doesn't throw, the folder exists
                            _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }))];
    });
}); };
/**
 *
 * @param buildTargets build targets
 */
exports.buildAndWriteThemes = function (buildTargets) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        try {
            return [2 /*return*/, exports.buildAllThemes(buildTargets).then(function (results) {
                    results.forEach(function (result) {
                        if (!result.success) {
                            throw new Error('Failed to build all themes');
                        }
                    });
                    return exports.copyFonts(buildTargets).then(function () {
                        var themeRegistrationJson = {};
                        buildTargets.forEach(function (buildTarget) {
                            themeRegistrationJson[buildTarget.theme.name] = {
                                dev: exports.makeDirRelative(exports.currentDir, buildTarget.theme.devPath),
                                prod: exports.makeDirRelative(exports.currentDir, buildTarget.theme.productionPath)
                            };
                        });
                        var outFilePath = path.join(exports.currentDir, 'build', 'theme-registration.json');
                        // tslint:disable-next-line:no-any
                        var fileContents = {};
                        // if the file exists, read it and update a section in it
                        return utilities_internal_1.safeFileExists(outFilePath).then(function (fileExists) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!fileExists) return [3 /*break*/, 2];
                                        return [4 /*yield*/, utilities_internal_1.safeReadJson(outFilePath)];
                                    case 1:
                                        fileContents = _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        fileContents.themes = themeRegistrationJson;
                                        return [2 /*return*/, utilities_internal_1.safeWriteFile(outFilePath, JSON.stringify(fileContents, null, 4)).then(function () {
                                                return IResult_1.GreatSuccess;
                                            })];
                                }
                            });
                        }); });
                    });
                })];
        }
        catch (e) {
            utilities_internal_1.trace.error("Error in 'buildAndWriteThemes'\n" + e);
            return [2 /*return*/, IResult_1.NoSuccess];
        }
        return [2 /*return*/];
    });
}); };
/**
 * Add themes Metadata in themes Map
 * @param themes parseLocalThemes/ parseNodeThemes
 * @param themeMap Theme object to map themeName to corresponding themeMetadata
 */
var addThemesMetadataInMap = function (themes, themesMap) {
    if (themes.length > 0) {
        for (var i = 0; i < themes.length; i++) {
            var themeName = themes[i].name;
            themesMap[themeName] = themes[i];
        }
    }
    return themesMap;
};
/**
 * Overview of flow
 *  - Find all local themes
 *  - Find all node themes
 *  - Build theme registration
 *  - Write themes
 */
/* istanbul ignore next: united tested individually */
// tslint:disable-next-line:max-func-body-length
exports.default = (function (options) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var localThemes, _a, isHoisted_1, promises_1, nodeThemes, _b, themesMap, parseLocalThemes, parseNodeThemes, parsedThemes, buildTargets, e_2;
    return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _c.trys.push([0, 10, , 11]);
                if (!options.buildNodeThemes) {
                    utilities_internal_1.trace.info("Skipping building node themes.");
                }
                if (!options.buildLocalThemes) {
                    utilities_internal_1.trace.info("Skipping building local themes");
                }
                if (!options.buildLocalThemes && !options.buildNodeThemes) {
                    return [2 /*return*/, IResult_1.GreatSuccess];
                }
                if (!options.buildLocalThemes) return [3 /*break*/, 2];
                return [4 /*yield*/, utilities_internal_1.safeGetAllFilesPath(path.join(exports.currentDir, 'src', '**', 'themes', '**', '*.theme.scss'))];
            case 1:
                _a = _c.sent();
                return [3 /*break*/, 3];
            case 2:
                _a = [];
                _c.label = 3;
            case 3:
                localThemes = _a;
                isHoisted_1 = utilities_internal_1.safeFileExists(path.resolve('../../lerna.json'));
                promises_1 = [
                    // msdyn365-commerce-theme Will get deprecated
                    utilities_internal_1.safeGetAllFilesPath(path.join(exports.currentDir, 'node_modules', '@msdyn365-commerce-theme', '**', '*.theme.scss'), {
                        follow: true
                    }),
                    // hoisted env
                    isHoisted_1 &&
                        utilities_internal_1.safeGetAllFilesPath(path.join(exports.currentDir, '../..', 'node_modules', '@msdyn365-commerce-theme', '**', '*.theme.scss'), {
                            follow: true
                        })
                ].filter(Boolean);
                // look for theme sass files in all the supported namespaces
                module_registration_model_1.MODULE.namespace.map(function (moduleNamespace) {
                    // normal env
                    promises_1.push(utilities_internal_1.safeGetAllFilesPath(path.join(exports.currentDir, 'node_modules', moduleNamespace, '**', '*.theme.scss'), {
                        follow: true
                    }));
                    // hoisted env
                    if (isHoisted_1) {
                        promises_1.push(utilities_internal_1.safeGetAllFilesPath(path.join(exports.currentDir, '../..', 'node_modules', moduleNamespace, '**', '*.theme.scss'), {
                            follow: true
                        }));
                    }
                });
                if (!options.buildNodeThemes) return [3 /*break*/, 5];
                return [4 /*yield*/, Promise.all(promises_1).then(function (result) { return result.reduce(function (acc, arr) { return acc.concat(arr); }).filter(Boolean); })];
            case 4:
                _b = _c.sent();
                return [3 /*break*/, 6];
            case 5:
                _b = [];
                _c.label = 6;
            case 6:
                nodeThemes = _b;
                themesMap = {};
                return [4 /*yield*/, exports.getThemeMetadata(localThemes)];
            case 7:
                parseLocalThemes = _c.sent();
                return [4 /*yield*/, exports.getThemeMetadata(nodeThemes)];
            case 8:
                parseNodeThemes = _c.sent();
                // Add node modules themes first and then the local themes to themeMap to make sure partner overrides are given preference.
                addThemesMetadataInMap(parseNodeThemes, themesMap);
                addThemesMetadataInMap(parseLocalThemes, themesMap);
                parsedThemes = Object.values(themesMap);
                utilities_internal_1.trace.info('Parsed Themes:');
                parsedThemes.forEach(function (i) { return utilities_internal_1.trace.info(i.themeEntry); });
                return [4 /*yield*/, exports.createBuildTargets(parsedThemes, [])];
            case 9:
                buildTargets = _c.sent();
                utilities_internal_1.trace.debug(buildTargets);
                return [2 /*return*/, exports.buildAndWriteThemes(buildTargets)];
            case 10:
                e_2 = _c.sent();
                utilities_internal_1.trace.error("Error building themes", e_2);
                return [2 /*return*/, IResult_1.NoSuccess];
            case 11: return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=registerThemes.js.map