#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
var utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
var child_process_1 = require("child_process");
var fs = tslib_1.__importStar(require("fs-extra"));
var path = tslib_1.__importStar(require("path"));
var helpers_1 = require("./helpers");
var module_registration_model_1 = require("./module-registration/module-registration-model");
// Usage:
// Use yarn build-package when building a module package
// and yarn build-package --generic=false when building non-module package
// Ignore the following pacakges for pacakge validation
var EXCLUDE_PACKAGES_FROM_VALIDATION = ['@msdyn365-commerce-modules/core-components'];
// Path Constants
var packageRootDirectory = process.cwd();
var tscPath = path.resolve(require.resolve('typescript'), '../../bin/tsc');
var tslintPath = path.resolve(require.resolve('tslint'), '../../bin/tslint');
var connectorPackage = path.resolve(packageRootDirectory, 'src/connectors');
var tsConfigPath = path.resolve(__dirname, '../tsconfig', 'build-package-tsconfig.json');
var tsLintFilePath = path.resolve(__dirname, '../tsconfig', 'build-package-tslint.json');
/**
 * Runs tslint and tsc on the package to build the package components into
 * the top level dist folder
 */
// tslint:disable:no-any max-line-length
function buildPackage() {
    return new Promise(function (resolve) {
        var shouldExitWithCode = 0;
        if (!process.argv[2] || (process.argv[2] !== '--generic=false' && process.argv[2] !== '--type=connector')) {
            try {
                var result = child_process_1.spawnSync('yarn gendef -d ./', { shell: true, stdio: 'inherit' });
                if (result.status !== 0) {
                    shouldExitWithCode = result.status || 1;
                    throw result.error;
                }
            }
            catch (err) {
                console.log(err);
                utilities_internal_1.trace.error("Error running module definition generator.", err);
                utilities_internal_1.trace.error("If you're running yarn build-package in a non-module pacakge. Run 'yarn build-package --generic=false'");
                if (fs.existsSync(connectorPackage)) {
                    utilities_internal_1.trace.error("Connector package detected, please Run 'yarn build-package --type=connector' to build the package");
                }
                utilities_internal_1.trace.error(err);
                process.exit(shouldExitWithCode === 0 ? 1 : shouldExitWithCode);
            }
        }
        // run validation using the MSDyn365 CLI validate command
        var packageName = utilities_internal_1.safeReadJsonSync(path.resolve(packageRootDirectory, 'package.json')).name;
        if (EXCLUDE_PACKAGES_FROM_VALIDATION.indexOf(packageName) === -1) {
            child_process_1.exec("cd " + packageRootDirectory + " && yarn msdyn365 validate ./", function (err, stdout, stderr) {
                if (err !== null && err.message !== '') {
                    utilities_internal_1.trace.error("Package build failed on package validation. Please run 'yarn msdyn365 validate ./ on your package to identify the issues.", err);
                    // bubble build error up
                    return resolve(process.exit(err.code === 0 ? 1 : err.code));
                }
            }).stdout.pipe(process.stdout);
        }
        // Copy down the tsconfig.json from node_modules
        fs.copyFileSync(tsConfigPath, path.resolve(packageRootDirectory, 'tsconfig.json'));
        // finally lint package and fail on any lint errors or run tsc build if everything passes
        child_process_1.exec("cd " + packageRootDirectory + " && node " + tslintPath + " src/**/*.{ts,tsx} -p tsconfig.json -c " + tsLintFilePath + " --fix --format stylish", function (err, stdout, stderr) {
            if (err !== null) {
                utilities_internal_1.trace.error("tslint has identified the following errors in your package.\n" + stdout + "\n" + stderr + "Please fix tslint issues and retry", err);
                // bubble build error up
                return resolve(process.exit(err.code === 0 ? 1 : err.code));
            }
            else {
                return runTscBuild().then(resolve);
            }
        });
    });
}
/**
 * Uses the module definition generator to build the autogenerated files and then
 * runs tsc on the package against tsconfig.json
 */
function runTscBuild() {
    return new Promise(function (resolve) {
        utilities_internal_1.trace.debug({
            packageRootDirectory: packageRootDirectory,
            command: "cd " + packageRootDirectory + " && node " + tscPath + " -p tsconfig.json",
            tscPath: tscPath
        });
        child_process_1.exec("cd " + packageRootDirectory + " && node " + tscPath + " -p tsconfig.json", function (err, stdout, stderr) {
            if (err !== null) {
                utilities_internal_1.trace.error("tsc compilation error. Check the validity of .ts files and the existence of tsconfig.json", err);
                console.error("exec error: " + err);
                utilities_internal_1.trace.error("error: " + stdout);
                // bubble build error up
                return resolve(process.exit(err.code === 0 ? 1 : err.code));
            }
            else {
                return resolve(helpers_1.copyDefinitionFilesIntoDist([
                    {
                        fromPath: module_registration_model_1.DEFINITION.fromLocalModule,
                        toPath: path.join(process.cwd(), 'dist', 'lib', 'modules')
                    },
                    {
                        fromPath: module_registration_model_1.CONNECTOR.fromLocalModule,
                        toPath: path.join(process.cwd(), 'dist', 'lib', 'connectors')
                    },
                    {
                        fromPath: module_registration_model_1.localModuleResourcesPathPattern,
                        toPath: path.join(process.cwd(), 'dist', 'lib', 'resources')
                    }
                ])
                    .then(function () {
                    utilities_internal_1.trace.info('Package build has completed successfully!!!!');
                })
                    .catch(function (error) {
                    utilities_internal_1.trace.error('Package build failed!', error);
                }));
            }
        });
    });
}
buildPackage()
    // tslint:disable-next-line:no-any
    .catch(function (err) {
    utilities_internal_1.trace.error("Error in buildPackage");
    utilities_internal_1.trace.error(err);
});
// tslint:enable:no-any max-line-length
//# sourceMappingURL=build-package.js.map