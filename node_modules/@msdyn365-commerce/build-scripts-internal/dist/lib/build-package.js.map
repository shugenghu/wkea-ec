{"version":3,"file":"build-package.js","sourceRoot":"","sources":["../../src/build-package.ts"],"names":[],"mappings":"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","sourcesContent":["#! /usr/bin/env node\n\n/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { safeReadJsonSync, trace } from '@msdyn365-commerce/utilities-internal';\nimport { exec, ExecException, spawnSync } from 'child_process';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { copyDefinitionFilesIntoDist } from './helpers';\nimport { CONNECTOR, DEFINITION, localModuleResourcesPathPattern } from './module-registration/module-registration-model';\n\n// Usage:\n// Use yarn build-package when building a module package\n// and yarn build-package --generic=false when building non-module package\n\n// Ignore the following pacakges for pacakge validation\nconst EXCLUDE_PACKAGES_FROM_VALIDATION = ['@msdyn365-commerce-modules/core-components'];\n\n// Path Constants\nconst packageRootDirectory = process.cwd();\nconst tscPath = path.resolve(require.resolve('typescript'), '../../bin/tsc');\nconst tslintPath = path.resolve(require.resolve('tslint'), '../../bin/tslint');\nconst connectorPackage = path.resolve(packageRootDirectory, 'src/connectors');\n\nconst tsConfigPath = path.resolve(__dirname, '../tsconfig', 'build-package-tsconfig.json');\nconst tsLintFilePath = path.resolve(__dirname, '../tsconfig', 'build-package-tslint.json');\n\n/**\n * Runs tslint and tsc on the package to build the package components into\n * the top level dist folder\n */\n// tslint:disable:no-any max-line-length\nfunction buildPackage(): Promise<any> {\n    return new Promise((resolve: any) => {\n        let shouldExitWithCode = 0;\n        if (!process.argv[2] || (process.argv[2] !== '--generic=false' && process.argv[2] !== '--type=connector')) {\n            try {\n                const result = spawnSync('yarn gendef -d ./', { shell: true, stdio: 'inherit' });\n                if (result.status !== 0) {\n                    shouldExitWithCode = result.status || 1;\n                    throw result.error;\n                }\n            } catch (err) {\n                console.log(err);\n                trace.error(`Error running module definition generator.`, err);\n                trace.error(`If you're running yarn build-package in a non-module pacakge. Run 'yarn build-package --generic=false'`);\n                if (fs.existsSync(connectorPackage)) {\n                    trace.error(`Connector package detected, please Run 'yarn build-package --type=connector' to build the package`);\n                }\n                trace.error(err);\n                process.exit(shouldExitWithCode === 0 ? 1 : shouldExitWithCode);\n            }\n        }\n\n        // run validation using the MSDyn365 CLI validate command\n        const packageName = safeReadJsonSync<any>(path.resolve(packageRootDirectory, 'package.json')).name;\n        if (EXCLUDE_PACKAGES_FROM_VALIDATION.indexOf(packageName) === -1) {\n            exec(`cd ${packageRootDirectory} && yarn msdyn365 validate ./`, (err: ExecException | null, stdout: string, stderr: string) => {\n                if (err !== null && err.message !== '') {\n                    trace.error(\n                        `Package build failed on package validation. Please run 'yarn msdyn365 validate ./ on your package to identify the issues.`,\n                        err\n                    );\n                    // bubble build error up\n                    return resolve(process.exit(err.code === 0 ? 1 : err.code));\n                }\n            }).stdout.pipe(process.stdout);\n        }\n\n        // Copy down the tsconfig.json from node_modules\n        fs.copyFileSync(tsConfigPath, path.resolve(packageRootDirectory, 'tsconfig.json'));\n        // finally lint package and fail on any lint errors or run tsc build if everything passes\n        exec(\n            `cd ${packageRootDirectory} && node ${tslintPath} src/**/*.{ts,tsx} -p tsconfig.json -c ${tsLintFilePath} --fix --format stylish`,\n            (err: ExecException | null, stdout: string, stderr: string) => {\n                if (err !== null) {\n                    trace.error(\n                        `tslint has identified the following errors in your package.\\n${stdout}\\n${stderr}Please fix tslint issues and retry`,\n                        err\n                    );\n\n                    // bubble build error up\n                    return resolve(process.exit(err.code === 0 ? 1 : err.code));\n                } else {\n                    return runTscBuild().then(resolve);\n                }\n            }\n        );\n    });\n}\n/**\n * Uses the module definition generator to build the autogenerated files and then\n * runs tsc on the package against tsconfig.json\n */\nfunction runTscBuild(): Promise<any> {\n    return new Promise((resolve: Function) => {\n        trace.debug({\n            packageRootDirectory,\n            command: `cd ${packageRootDirectory} && node ${tscPath} -p tsconfig.json`,\n            tscPath\n        });\n        exec(\n            `cd ${packageRootDirectory} && node ${tscPath} -p tsconfig.json`,\n            (err: ExecException | null, stdout: string, stderr: string) => {\n                if (err !== null) {\n                    trace.error(`tsc compilation error. Check the validity of .ts files and the existence of tsconfig.json`, err);\n                    console.error(`exec error: ${err}`);\n                    trace.error(`error: ${stdout}`);\n                    // bubble build error up\n                    return resolve(process.exit(err.code === 0 ? 1 : err.code));\n                } else {\n                    return resolve(\n                        copyDefinitionFilesIntoDist([\n                            {\n                                fromPath: DEFINITION.fromLocalModule,\n                                toPath: path.join(process.cwd(), 'dist', 'lib', 'modules')\n                            },\n                            {\n                                fromPath: CONNECTOR.fromLocalModule,\n                                toPath: path.join(process.cwd(), 'dist', 'lib', 'connectors')\n                            },\n                            {\n                                fromPath: localModuleResourcesPathPattern,\n                                toPath: path.join(process.cwd(), 'dist', 'lib', 'resources')\n                            }\n                        ])\n                            .then(() => {\n                                trace.info('Package build has completed successfully!!!!');\n                            })\n                            .catch((error: Error) => {\n                                trace.error('Package build failed!', error);\n                            })\n                    );\n                }\n            }\n        );\n    });\n}\n\nbuildPackage()\n    // tslint:disable-next-line:no-any\n    .catch((err: any) => {\n        trace.error(`Error in buildPackage`);\n        trace.error(err);\n    });\n// tslint:enable:no-any max-line-length\n"]}