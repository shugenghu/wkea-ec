"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
var fs = tslib_1.__importStar(require("fs-extra"));
require("jest");
var path_1 = tslib_1.__importDefault(require("path"));
jest.mock('../module-registration/module-registration-model');
jest.unmock('../module-registration/module-registration');
describe('Connector registration tests (Installed modules)', function () {
    beforeAll(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var model, helper;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    model = require.requireMock('../module-registration/module-registration-model');
                    helper = require.requireActual('../module-registration/module-registration');
                    helper.msdyn365ModuleGlobPattern = jest.fn(function () { return model.installedModuleDefinitionPathPattern; });
                    return [4 /*yield*/, helper.generateConnectorRegistration()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    // tslint:disable-next-line:no-any
    it('validate installed connector registration', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var connectorRegistrationFile, _a, registrationOutput;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    connectorRegistrationFile = path_1.default.resolve(process.cwd(), 'lib/connector-registration.js');
                    _a = expect;
                    return [4 /*yield*/, utilities_internal_1.safeFileExists(connectorRegistrationFile)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).not.toBeUndefined();
                    registrationOutput = fs.readFileSync(path_1.default.resolve(connectorRegistrationFile));
                    expect(registrationOutput && registrationOutput.toString()).toMatchSnapshot();
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=connector-registration.test.js.map