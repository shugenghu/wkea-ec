{"version":3,"file":"module-registration.test.js","sourceRoot":"","sources":["../../../src/__tests__/module-registration.test.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,4EAAuE;AACvE,mDAA+B;AAC/B,gBAAc;AACd,sDAAwB;AACxB,sCAAyD;AAEzD,IAAI,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;AAC9D,IAAI,CAAC,MAAM,CAAC,4CAA4C,CAAC,CAAC;AAE1D,QAAQ,CAAC,+CAA+C,EAAE;IACtD;;;;;;OAMG;IAEH,SAAS,CAAC;;;;;oBACA,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,kDAAkD,CAAC,CAAC;oBAChF,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,4CAA4C,CAAC,CAAC;oBACnF,MAAM,CAAC,yBAAyB,GAAG,IAAI,CAAC,EAAE,CAAC,cAAM,OAAA,KAAK,CAAC,oCAAoC,EAA1C,CAA0C,CAAC,CAAC;oBAC7F,qBAAM,MAAM,CAAC,0BAA0B,EAAE,EAAA;;oBAAzC,SAAyC,CAAC;;;;SAC7C,CAAC,CAAC;IAEH,kCAAkC;IAClC,EAAE,CAAC,yCAAyC,EAAE,UAAO,IAAS;;;;;oBACpD,2BAA2B,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,4BAA4B,CAAC,CAAC;oBAC9F,KAAA,MAAM,CAAA;oBAAC,qBAAM,mCAAc,CAAC,2BAA2B,CAAC,EAAA;;oBAAxD,kBAAO,SAAiD,EAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;oBACxE,kBAAkB,GAAG,EAAE,CAAC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC;oBACtF,MAAM,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;oBAC9E,IAAI,EAAE,CAAC;;;;SACV,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,yCAAyC,EAAE;IAChD,kCAAkC;IAClC,EAAE,CAAC,oCAAoC,EAAE,UAAO,IAAS;;;;;oBAC/C,eAAe,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;oBAC3E,qBAAM,qCAA2B,CAAC;4BAC9B;gCACI,QAAQ,EAAK,OAAO,CAAC,GAAG,EAAE,6CAA0C;gCACpE,MAAM,EAAE,eAAe;6BAC1B;yBACJ,CAAC,EAAA;;oBALF,SAKE,CAAC;oBACH,KAAA,MAAM,CAAA;oBAAC,qBAAM,mCAAc,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,EAAE,wBAAwB,CAAC,CAAC,EAAA;;oBAA3F,kBAAO,SAAoF,EAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;oBACjH,KAAA,MAAM,CAAA;oBAAC,qBAAM,mCAAc,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,EAAE,8BAA8B,CAAC,CAAC,EAAA;;oBAAvG,kBAAO,SAAgG,EAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;oBAC7H,KAAA,MAAM,CAAA;oBAAC,qBAAM,mCAAc,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,EAAE,sBAAsB,CAAC,CAAC,EAAA;;oBAA/F,kBAAO,SAAwF,EAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;oBACrH,IAAI,EAAE,CAAC;;;;SACV,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { safeFileExists } from '@msdyn365-commerce/utilities-internal';\nimport * as fs from 'fs-extra';\nimport 'jest';\nimport path from 'path';\nimport { copyDefinitionFilesIntoDist } from '../helpers';\n\njest.mock('../module-registration/module-registration-model');\njest.unmock('../module-registration/module-registration');\n\ndescribe('Module registration tests (Installed modules)', () => {\n    /**\n     * THIS TEST CASE MUST NOT BE IGNORED/SKIPPED UNDER ANY CIRCUMSTANCES\n     *\n     * Valdiates installed modules to be included in build registration output. Test compares the build registration\n     * output against a snapshot file in __mocks__/snapshot/module-registration.js. In case if you need to change\n     * build-registration code, please update snapshot as well, Under no circumstances this test case can be ignored.\n     */\n\n    beforeAll(async () => {\n        const model = require.requireMock('../module-registration/module-registration-model');\n        const helper = require.requireActual('../module-registration/module-registration');\n        helper.msdyn365ModuleGlobPattern = jest.fn(() => model.installedModuleDefinitionPathPattern);\n        await helper.generateModuleRegistration();\n    });\n\n    // tslint:disable-next-line:no-any\n    it('validate installed modules registration', async (done: any) => {\n        const nodeModulesRegistrationFile = path.resolve(process.cwd(), 'lib/module-registration.js');\n        expect(await safeFileExists(nodeModulesRegistrationFile)).not.toBeUndefined();\n        const registrationOutput = fs.readFileSync(path.resolve(nodeModulesRegistrationFile));\n        expect(registrationOutput && registrationOutput.toString()).toMatchSnapshot();\n        done();\n    });\n});\n\ndescribe('Build package tests (Installed modules)', () => {\n    // tslint:disable-next-line:no-any\n    it('validate node_modules registration', async (done: any) => {\n        const destinationPath = path.join(process.cwd(), 'dist', 'lib', 'modules');\n        await copyDefinitionFilesIntoDist([\n            {\n                fromPath: `${process.cwd()}/src/__mocks__/local/*/*.definition.json`,\n                toPath: destinationPath\n            }\n        ]);\n        expect(await safeFileExists(path.join(destinationPath, 'banner', 'banner.definition.json'))).not.toBeUndefined();\n        expect(await safeFileExists(path.join(destinationPath, 'partner-hero', 'partner-hero.definition.json'))).not.toBeUndefined();\n        expect(await safeFileExists(path.join(destinationPath, 'partner-hero', 'hero.definition.json'))).not.toBeUndefined();\n        done();\n    });\n});\n"]}