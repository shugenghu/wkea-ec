"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var cssString = '.foo { color: green; }';
var theming = tslib_1.__importStar(require("@msdyn365-commerce/theming-internal"));
var utils = tslib_1.__importStar(require("@msdyn365-commerce/utilities-internal"));
require("jest");
var nodeSass = tslib_1.__importStar(require("node-sass"));
var IResult_1 = require("../../models/IResult");
var registerThemes_1 = require("../../tasks/registerThemes");
jest.mock('@msdyn365-commerce/utilities-internal', function () { return ({
    safeFileExists: jest.fn(function () { return Promise.resolve(true); }),
    safeReadJson: jest.fn(function () { return Promise.resolve({ safeReadResult: 'string' }); }),
    safeWriteFile: jest.fn(),
    safeReadFile: jest.fn().mockReturnValue(cssString),
    trace: require.requireActual('@msdyn365-commerce/utilities-internal').trace,
    safeFileExistsSync: require.requireActual('@msdyn365-commerce/utilities-internal').safeFileExistsSync,
    getSupportedNamespaces: require.requireActual('@msdyn365-commerce/utilities-internal').getSupportedNamespaces
}); });
jest.mock('node-sass', function () { return ({
    render: jest.fn().mockName('nodeSass.render')
}); });
var render = nodeSass.render;
var safeWriteFile = utils.safeWriteFile;
var defaultTheme = {
    devPath: 'msdyn365-commerce-default.css',
    functionsEntry: false,
    mixinsEntry: false,
    name: 'msdyn365-commerce-default',
    outFolder: 'msdyn365-commerce-default',
    productionPath: 'msdyn365-commerce-default.min.css',
    themeEntry: '',
    themeFolder: 'msdyn365-commerce-default',
    variablesEntry: false,
    layoutsEntry: false
};
var sourceMapMockString = 'not-actually-a-source-map';
// helper for mocking promisified values
// tslint:disable:no-any
var setReturnValue = function (value) { return function (input, callback) { return callback(undefined, value); }; };
// tslint:enable:no-any
jest.setTimeout(60000);
describe('buildThemes', function () {
    beforeEach(function () {
        // reset call counters before each test
        jest.clearAllMocks();
    });
    it('can build theme without sourcemap', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var target, returnValue, result;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, theming.getNodeSassOptionsForTarget(defaultTheme, [], true)];
                case 1:
                    target = _a.sent();
                    returnValue = {
                        css: Buffer.from(cssString)
                    };
                    render.mockImplementation(setReturnValue(returnValue));
                    return [4 /*yield*/, registerThemes_1.buildTheme(defaultTheme, target)];
                case 2:
                    result = _a.sent();
                    // assert
                    expect(safeWriteFile).toBeCalledTimes(1);
                    expect(result).toEqual(IResult_1.GreatSuccess);
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('can build theme with a sourcemap', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var target, result;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, theming.getNodeSassOptionsForTarget(defaultTheme, [], false)];
                case 1:
                    target = _a.sent();
                    render.mockImplementation(setReturnValue({
                        css: Buffer.from(cssString),
                        map: Buffer.from(sourceMapMockString)
                    }));
                    return [4 /*yield*/, registerThemes_1.buildTheme(defaultTheme, target)];
                case 2:
                    result = _a.sent();
                    // assert
                    expect(utils.safeWriteFile).toBeCalledTimes(2);
                    expect(result).toEqual(IResult_1.GreatSuccess);
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('bubbles up errors', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var expectedErr, target, e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expectedErr = "expected error";
                    render.mockImplementation(setReturnValue({
                        css: Buffer.from(cssString),
                        map: Buffer.from(sourceMapMockString)
                    }));
                    safeWriteFile.mockImplementation(function () {
                        throw new Error(expectedErr);
                    });
                    return [4 /*yield*/, theming.getNodeSassOptionsForTarget(defaultTheme, [], true)];
                case 1:
                    target = _a.sent();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, registerThemes_1.buildTheme(defaultTheme, target)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    e_1 = _a.sent();
                    expect(utils.safeWriteFile).toBeCalledTimes(1);
                    expect(e_1.message).toBe(expectedErr);
                    return [3 /*break*/, 5];
                case 5:
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('can build multiple theme targets', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var targets, result;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, registerThemes_1.createBuildTargets([defaultTheme], [])];
                case 1:
                    targets = _a.sent();
                    safeWriteFile.mockReturnValue(true);
                    render.mockImplementation(setReturnValue({
                        css: Buffer.from(cssString),
                        map: Buffer.from(sourceMapMockString)
                    }));
                    return [4 /*yield*/, registerThemes_1.buildAllThemes(targets)];
                case 2:
                    result = _a.sent();
                    // assert
                    expect(result).toEqual([IResult_1.GreatSuccess, IResult_1.GreatSuccess]);
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('can write files from build targets', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var targets, result;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, registerThemes_1.createBuildTargets([defaultTheme], [])];
                case 1:
                    targets = _a.sent();
                    safeWriteFile.mockReturnValue(Promise.resolve());
                    return [4 /*yield*/, registerThemes_1.buildAndWriteThemes(targets)];
                case 2:
                    result = _a.sent();
                    expect(result).toEqual(IResult_1.GreatSuccess);
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=registerThemes.buildTheme.test.js.map