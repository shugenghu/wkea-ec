{"version":3,"file":"registerThemes.buildTheme.test.js","sourceRoot":"","sources":["../../../../src/__tests__/tasks/registerThemes.buildTheme.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nconst cssString = '.foo { color: green; }';\nimport * as theming from '@msdyn365-commerce/theming-internal';\nimport * as utils from '@msdyn365-commerce/utilities-internal';\nimport 'jest';\nimport * as nodeSass from 'node-sass';\nimport { GreatSuccess } from '../../models/IResult';\nimport { buildAllThemes, buildAndWriteThemes, buildTheme, createBuildTargets } from '../../tasks/registerThemes';\njest.mock('@msdyn365-commerce/utilities-internal', () => ({\n    safeFileExists: jest.fn(() => Promise.resolve(true)),\n    safeReadJson: jest.fn(() => Promise.resolve({ safeReadResult: 'string' })),\n    safeWriteFile: jest.fn(),\n    safeReadFile: jest.fn().mockReturnValue(cssString),\n    trace: require.requireActual('@msdyn365-commerce/utilities-internal').trace,\n    safeFileExistsSync: require.requireActual('@msdyn365-commerce/utilities-internal').safeFileExistsSync,\n    getSupportedNamespaces: require.requireActual('@msdyn365-commerce/utilities-internal').getSupportedNamespaces\n}));\njest.mock('node-sass', () => ({\n    render: jest.fn().mockName('nodeSass.render')\n}));\n\nconst render = <jest.Mock>nodeSass.render;\nconst safeWriteFile = <jest.Mock>utils.safeWriteFile;\n\nconst defaultTheme = {\n    devPath: 'msdyn365-commerce-default.css',\n    functionsEntry: false,\n    mixinsEntry: false,\n    name: 'msdyn365-commerce-default',\n    outFolder: 'msdyn365-commerce-default',\n    productionPath: 'msdyn365-commerce-default.min.css',\n    themeEntry: '',\n    themeFolder: 'msdyn365-commerce-default',\n    variablesEntry: false,\n    layoutsEntry: false\n};\nconst sourceMapMockString = 'not-actually-a-source-map';\n\n// helper for mocking promisified values\n// tslint:disable:no-any\nconst setReturnValue = (value: any) => (input: any, callback: any) => callback(undefined, value);\n// tslint:enable:no-any\n\njest.setTimeout(60000);\n\ndescribe('buildThemes', () => {\n    beforeEach(() => {\n        // reset call counters before each test\n        jest.clearAllMocks();\n    });\n    it('can build theme without sourcemap', async (done: Function) => {\n        // arrange\n        const target = await theming.getNodeSassOptionsForTarget(defaultTheme, [], true);\n        const returnValue = {\n            css: Buffer.from(cssString)\n        };\n        render.mockImplementation(setReturnValue(returnValue));\n        // act\n        const result = await buildTheme(defaultTheme, target);\n        // assert\n        expect(safeWriteFile).toBeCalledTimes(1);\n        expect(result).toEqual(GreatSuccess);\n        done();\n    });\n    it('can build theme with a sourcemap', async (done: Function) => {\n        // arrange\n        const target = await theming.getNodeSassOptionsForTarget(defaultTheme, [], false);\n        render.mockImplementation(\n            setReturnValue({\n                css: Buffer.from(cssString),\n                map: Buffer.from(sourceMapMockString)\n            })\n        );\n        // act\n        const result = await buildTheme(defaultTheme, target);\n        // assert\n        expect(utils.safeWriteFile).toBeCalledTimes(2);\n        expect(result).toEqual(GreatSuccess);\n        done();\n    });\n    it('bubbles up errors', async (done: Function) => {\n        // arrange\n        const expectedErr = `expected error`;\n        render.mockImplementation(\n            setReturnValue({\n                css: Buffer.from(cssString),\n                map: Buffer.from(sourceMapMockString)\n            })\n        );\n        safeWriteFile.mockImplementation(() => {\n            throw new Error(expectedErr);\n        });\n        const target = await theming.getNodeSassOptionsForTarget(defaultTheme, [], true);\n        // act\n        try {\n            await buildTheme(defaultTheme, target);\n        } catch (e) {\n            expect(utils.safeWriteFile).toBeCalledTimes(1);\n            expect((<Error>e).message).toBe(expectedErr);\n        }\n        done();\n    });\n    it('can build multiple theme targets', async (done: Function) => {\n        // arrange\n        const targets = await createBuildTargets([defaultTheme], []);\n        safeWriteFile.mockReturnValue(true);\n        render.mockImplementation(\n            setReturnValue({\n                css: Buffer.from(cssString),\n                map: Buffer.from(sourceMapMockString)\n            })\n        );\n        // act\n        const result = await buildAllThemes(targets);\n        // assert\n        expect(result).toEqual([GreatSuccess, GreatSuccess]);\n        done();\n    });\n    it('can write files from build targets', async (done: Function) => {\n        const targets = await createBuildTargets([defaultTheme], []);\n        safeWriteFile.mockReturnValue(Promise.resolve());\n        const result = await buildAndWriteThemes(targets);\n        expect(result).toEqual(GreatSuccess);\n        done();\n    });\n});\n"]}