"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jest");
jest.mock('@msdyn365-commerce/utilities-internal', function () { return ({
    safeFileExists: jest.fn(),
    trace: require.requireActual('@msdyn365-commerce/utilities-internal').trace,
    getSupportedNamespaces: require.requireActual('@msdyn365-commerce/utilities-internal').getSupportedNamespaces
}); });
var utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
var registerThemes_1 = require("../../tasks/registerThemes");
/**
 * Normalizes paths cross platform & strips out path from root
 * @param str input path
 */
var normalizePath = function (str) { return str.substr(registerThemes_1.builtThemeOutFolder.length).replace(/\\/g, '/'); };
var fixPaths = function (parsedTheme) {
    return tslib_1.__assign(tslib_1.__assign({}, parsedTheme), { devPath: normalizePath(parsedTheme.devPath), productionPath: normalizePath(parsedTheme.productionPath), outFolder: normalizePath(parsedTheme.outFolder) });
};
describe('theme registration', function () {
    afterAll(function () { return jest.restoreAllMocks(); });
    it('can make dir relative', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            expect(registerThemes_1.makeDirRelative(__dirname, __dirname + "/theme/theme1.css")).toMatchSnapshot();
            return [2 /*return*/];
        });
    }); });
    describe("determineThemeType", function () {
        describe("isStandard: false", function () {
            beforeAll(function () {
                // @ts-ignore
                utilities_internal_1.safeFileExists.mockReturnValue("path/to/entry-file.scss");
            });
            it("handle no themes", function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var input, result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            input = [];
                            return [4 /*yield*/, registerThemes_1.getThemeMetadata(input).then(function (results) { return results.map(fixPaths); })];
                        case 1:
                            result = _a.sent();
                            // assert
                            expect(result).toMatchSnapshot();
                            done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it("handles multiple themes", function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var input, result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            input = ['theme1'];
                            return [4 /*yield*/, registerThemes_1.getThemeMetadata(input).then(function (results) { return results.map(fixPaths); })];
                        case 1:
                            result = _a.sent();
                            // assert
                            expect(result).toMatchSnapshot();
                            done();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe("isStandard: true", function () {
            beforeAll(function () {
                // @ts-ignore
                utilities_internal_1.safeFileExists.mockReturnValue(false);
            });
            it("handle no themes", function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var input, result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            input = [];
                            return [4 /*yield*/, registerThemes_1.getThemeMetadata(input).then(function (results) { return results.map(fixPaths); })];
                        case 1:
                            result = _a.sent();
                            // assert
                            expect(result).toMatchSnapshot();
                            done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it("handles multiple themes", function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var input, result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            input = ['theme1', 'theme2'];
                            return [4 /*yield*/, registerThemes_1.getThemeMetadata(input).then(function (results) { return results.map(fixPaths); })];
                        case 1:
                            result = _a.sent();
                            // assert
                            expect(result).toMatchSnapshot();
                            done();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
});
//# sourceMappingURL=registerThemes.test.js.map