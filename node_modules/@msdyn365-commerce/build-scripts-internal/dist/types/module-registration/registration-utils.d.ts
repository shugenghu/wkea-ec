/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IGetRelativePathOptions, IGetRelativePathResult } from '../models';
export declare const getRegistrationOutputPath: (fileName: string) => string;
export declare const msdyn365ModuleDefinitionGlobPattern: (generateLocalModuleRegistration: Boolean) => string | string[];
export declare const msdyn365ModuleDataDefinitionGlobPattern: (generateLocalModuleRegistration: Boolean) => string | string[];
export declare const msdyn365ActionDefinitionGlobPattern: (generateLocalModuleRegistration: Boolean) => string | string[];
export declare const MODULE_DETAILS_REGEX: RegExp[];
/**
 * @description Constant for hoisted path to node_modules
 * @internal
 */
export declare const hoistedPath: string;
/**
 * @description Helper function to get component relative path
 * @internal
 */
export declare const getModuleFileRelativePath: ({ moduleFileAbsolutePath, moduleNamespace }: IGetRelativePathOptions) => IGetRelativePathResult;
/**
 * Resolves module view/dataAction from the path specified in definition file. In case if a
 * definition is inherited, the path is resolved against parent definition path
 * @param parentDefinitionPath path to parent definition file - for scenarios where definition file is inherited
 * @param moduleFileRelativePath file to be resolved (view/dataAction)
 * @param moduleDirectoryPath path to module directory
 */
export declare const resolvePathFromDefinition: (parentDefinitionPath: string | null, moduleFileRelativePath: string, moduleDirectoryPath: string, forceRelativePathResolution?: boolean | undefined) => Promise<string | null>;
