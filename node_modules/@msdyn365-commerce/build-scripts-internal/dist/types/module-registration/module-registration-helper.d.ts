/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IConnectorSettings } from '../msdyn365-plugin';
import { IConnectorInfo, IDictionary, IModuleRegistration } from './module-registration-model';
/**
 * merge two path arrays, elements in array B will replace elements in array A if the file names are same
 *
 * @param pathArrayA An array of file paths
 * @param pathArrayB An array of file paths
 */
export declare const pathArrayMergeWithBaseName: (pathArrayA: string[], pathArrayB: string[]) => string[];
/**
 * Normalizes slashes to `/` to make them uniform
 *
 * @param pathToFile A path string
 * @param replaceWith The slash to normalize the path with
 * @internal
 */
export declare const fixPath: (pathToFile: string, replaceWith?: "/" | "\\" | "|") => string;
/**
 * sorts the connectors array so that entries in registration file are written in sorted order
 */
export declare const sortConnectors: (connectors: {
    name: string;
    aliasedPaths: IDictionary<string>;
}[]) => {
    name: string;
    aliasedPaths: IDictionary<string>;
}[];
/**
 * Prepares a registration key for the given file path
 * @param filePath path to the file that needs to be registered in the module registration object
 * @return {string} Returns the key generated by replacing the file extensions and slashes
 */
export declare const getRegistrationKey: (filePath: string, ext: string) => string;
/**
 * Method to add the module-registration.js file header that initializes bindings object
 * and adds handleError and isNotRegistered utility methods
 * @param modulesRegistration array of module registration objects
 */
export declare const addRegistrationFunctionHeader: (modulesRegistration: string[]) => void;
export declare const addRegistrationFunctionBody: (keys: string[], registrationJson: IDictionary<IModuleRegistration>, modulesRegistration: string[], actionRegistrations: {
    path: string;
    aliasedPath: string;
}[]) => void;
export declare const addRegistrationFunctionFooter: (modulesRegistration: string[]) => void;
/**
 * Prepares the registraion JS code for a single connector
 * Additionally creates the logic necessary for validating the connector follows any required implementation
 */
export declare const prepareConnectorRegistration: (connector: IConnectorInfo) => string;
export declare const generateConnectorValidateMethods: (connectors: IConnectorInfo[], connectorsConfig: IConnectorSettings | undefined) => Promise<string>;
export declare const DUPLICATE_MODULE_REGISTRAION_ERROR: (moduleName: string) => string;
