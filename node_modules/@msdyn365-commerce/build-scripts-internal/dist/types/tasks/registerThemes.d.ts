/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IParsedTheme, IThemeBuildTarget } from '@msdyn365-commerce/theming-internal';
import * as nodeSass from 'node-sass';
import { IRegisterThemesOptions } from '../models';
import { IModuleMetadata } from '../models/IModuleMetadata';
import { IResult } from '../models/IResult';
/**
 * Current directory
 * @internal
 */
export declare const currentDir: string;
/**
 * Directory for built themes output
 * @internal
 */
export declare const builtThemeOutFolder: string;
/**
 * Gets theme output folder
 * @param themeName
 * @internal
 */
export declare const getThemeOutFolder: (themeName: string) => string;
/**
 * Builds current theme with provided sass options and actually writes the file
 * @param theme IParsed theme definition
 * @param sassOptions Sass options for current theme
 */
export declare const buildTheme: (theme: IParsedTheme, sassOptions: nodeSass.Options) => Promise<IResult<undefined>>;
/**
 * Builds all themes
 * @param buildTargets All build targets
 * @internal
 */
export declare const buildAllThemes: (buildTargets: IThemeBuildTarget[]) => Promise<IResult<undefined>[]>;
/**
 * Determine theme type and get all local metadata about it
 * @param themeFilePaths list of file paths where we've identified a theme entry file
 * @internal
 */
export declare const getThemeMetadata: (themeFilePaths: string[]) => Promise<IParsedTheme[]>;
/**
 * Create list of build targets
 *
 * @param parsedThemes Array of parsed themes
 * @param modulesMetadata list of modules with styles that need to be compiled
 * @internal
 */
export declare const createBuildTargets: (parsedThemes: IParsedTheme[], modulesMetadata?: IModuleMetadata[]) => Promise<IThemeBuildTarget[]>;
/**
 * Gets modules which contain styles
 */
export declare const getModulesWithStyles: () => Promise<IModuleMetadata[]>;
/**
 * Helper function to get relative dir
 * @param root root dir
 * @param dir dir
 * @internal
 */
export declare const makeDirRelative: (root: string, dir: string) => string;
/**
 * Copies fonts to destination directory
 */
export declare const copyFonts: (buildTargets: IThemeBuildTarget[]) => Promise<void[]>;
/**
 *
 * @param buildTargets build targets
 */
export declare const buildAndWriteThemes: (buildTargets: IThemeBuildTarget[]) => Promise<IResult<undefined>>;
declare const _default: (options: IRegisterThemesOptions) => Promise<IResult<undefined>>;
/**
 * Overview of flow
 *  - Find all local themes
 *  - Find all node themes
 *  - Build theme registration
 *  - Write themes
 */
export default _default;
