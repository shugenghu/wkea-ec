/*******************************************************************************
* Copyright (c) Microsoft Corporation.
* All rights reserved. See LICENSE in the project root for license information.
*******************************************************************************/


const fs = require('fs');
const path = require('path');
const paths = require('./paths');

const getExecutionEnv = (target, options) => {
    // read .env file ---> no support for [target].env, just single env file at package root
    const envFilePath = path.join(process.cwd(), '.env');
    if (fs.existsSync(envFilePath)) {
        require('dotenv').config({
            path: envFilePath
        });
    }

    // list of keys to not do inline replacement on
    const exclude = ['NODE_TLS_REJECT_UNAUTHORIZED'];

    const raw = Object.keys(process.env)
        .filter(val => exclude.indexOf(val) === -1)
        .reduce(
            (env, key) => {
                env[key] = process.env[key];
                return env;
            },
            {
                // Useful for determining whether weâ€™re running in production mode.
                // Most importantly, it switches React into the correct mode.
                NODE_ENV: process.env.NODE_ENV || 'development',
                PORT: process.env.PORT || (options && options.port) || 3000,
                VERBOSE: !!process.env.VERBOSE,
                HOST: process.env.HOST || (options && options.host) || 'localhost',
                APP_BUILD_DIR: paths.appBuild,
                APP_DIR: paths.appPath,
                BUILD_TARGET: target === 'web' ? 'client' : 'server',
                // use this env variable to cut/remove code that should be client/server only
                CURRENT_ENVIRONMENT: target === 'node' ? 'node' : 'web',
                // only for production builds. Useful if you need to serve from a CDN
                PUBLIC_PATH: process.env.PUBLIC_PATH || '/',
                // CLIENT_PUBLIC_PATH is a PUBLIC_PATH for NODE_ENV === 'development' && BUILD_TARGET === 'client'
                CLIENT_PUBLIC_PATH: process.env.CLIENT_PUBLIC_PATH,
                SDK_MIN_LOG_LEVEL: Number(process.env.SDK_MIN_LOG_LEVEL)
            }
        );

    const stringified = Object.keys(raw).reduce((env, key) => {
        env[`process.env.${key}`] = JSON.stringify(raw[key]);
        return env;
    }, {});

    return { raw, stringified };
};

module.exports = {
    getExecutionEnv: getExecutionEnv
};
