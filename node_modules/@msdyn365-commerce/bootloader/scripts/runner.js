#! /usr/bin/env node
/*******************************************************************************
* Copyright (c) Microsoft Corporation.
* All rights reserved. See LICENSE in the project root for license information.
*******************************************************************************/


const cp = require('child_process');
const fs = require('fs-extra');
const path = require('path');
const args = process.argv;
process.env.TF_BUILD !== undefined && console.log(`Build running on CI machine.`);
const getExecutionEnv = require('./helpers').getExecutionEnv;
// const validateDependencies = require('@msdyn365-commerce/release-scripts').validateDependencies;

const packageRootDirectory = process.cwd();
const buildScriptsDir = require.resolve('@msdyn365-commerce/build-scripts-internal');
const partnerTsConfigPath = path.resolve(buildScriptsDir, '../../tsconfig/partner-tsconfig.json');

function copyPresetTsConfig() {
    // Copy down the tsconfig.json from node_modules
    try {
        fs.copyFileSync(partnerTsConfigPath, path.resolve(packageRootDirectory, 'tsconfig.json'));
    } catch (err) {
        console.error('Unable to copy down standard partner tsconfig file from node_modules. Using tsconfig in project');
    }
}

try {
    if (args && args.length > 1) {
        const command = args[2];
        switch (command) {
            case 'build-package':
                let isBuildPackageAction = true;
            // break omitted
            case 'lint-package':
                const procArgs = [
                    'node',
                    require.resolve(`../build-scripts-internal/dist/lib/${isBuildPackageAction ? 'build' : 'lint'}-package.js`)
                ];
                const lintOrBuildPackageProc = cp.spawnSync(procArgs);
                lintOrBuildPackageProc.exit(lintOrBuildPackageProc.status);
                break;
            case 'start':
            case 'build':
            case 'debug': // start in debug mode
            case 'debug-tests': // debug tests
                getExecutionEnv('web', { host: 'localhost', port: 3000 });
                if (process.env.MSDyn365_APP_TYPE === 'partner') {
                    // temporarily disabling actual failures
                    // validateDependencies('package.json');
                }

                copyPresetTsConfig();
                let startScript = args[2];
                const additionalNodeArgs = [];
                if (startScript === 'debug') {
                    startScript = 'start';
                    additionalNodeArgs.push('--inspect-brk');
                }
                const nodeArgs = process.argv.slice(3);
                const processToSpawnArguments = [`node`, ...additionalNodeArgs, `"${require.resolve(`./${startScript}`)}"`]
                    .concat(nodeArgs)
                    .join(' ');
                console.log(`Starting with command='${processToSpawnArguments}'`);
                const generalProc = cp.spawnSync(processToSpawnArguments, { cwd: process.cwd(), stdio: 'inherit', shell: true });
                process.exit(generalProc.status);
            default:
                throw new Error('Unrecognized command');
        }
    }
} catch (e) {
    console.error(`\nUnrecognized command, received '${args.join(' ')}'`);
    process.exit(1);
}
