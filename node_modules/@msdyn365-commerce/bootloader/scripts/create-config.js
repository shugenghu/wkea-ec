/*******************************************************************************
* Copyright (c) Microsoft Corporation.
* All rights reserved. See LICENSE in the project root for license information.
*******************************************************************************/


const path = require('path');
const fs = require('fs');
const paths = require('./paths');
const getExecutionEnv = require('./helpers').getExecutionEnv;
const webpack = require('webpack');
const StartServerPlugin = require('start-server-webpack-plugin');
const ErrorOverlayPlugin = require('error-overlay-webpack-plugin');
const SimpleProgressWebpackPlugin = require('simple-progress-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const createCertificate = require('./create-certificate');
// ----
// Make sure any symlinks in the project folder are resolved:
// https://github.com/facebookincubator/create-react-app/issues/637
const appDirectory = fs.realpathSync(process.cwd());
const resolveApp = relativePath => path.resolve(appDirectory, relativePath);
const resolveOwn = relativePath => path.resolve(__dirname, '..', relativePath);
// ---

module.exports = (target = 'web', env = 'dev', { host = 'localhost', port = 3000, devPort = 3001, modify }, webpackObject) => {
    // Define some useful shorthands.
    const IS_NODE = target === 'node';
    const IS_WEB = target === 'web';
    const IS_PROD = env === 'prod';
    const IS_DEV = env === 'dev';
    process.env.NODE_ENV = IS_PROD ? 'production' : 'development';

    const dotenv = getExecutionEnv(target, { host, port });
    const devServerPort = parseInt(devPort, 10);
    const clientPublicPath = dotenv.raw.CLIENT_PUBLIC_PATH || (IS_DEV ? `http://${dotenv.raw.HOST}:${devServerPort}/` : '/');
    let config = {
        mode: IS_DEV ? 'development' : 'production',
        // set context to current dir (assumption: running from local package root)
        context: process.cwd(),
        // 'node' or 'web'
        target: target,
        devtool: IS_NODE && IS_PROD ? '' : 'source-map',
        // resolve modules from current package as well as execution context
        resolve: {
            modules: ['node_modules', resolveApp('node_modules')],
            extensions: ['.jsx', '.js'],
            alias: {
                // needed in symlinked env
                'webpack-dev-server/client': require.resolve('webpack-dev-server/client'),
                'webpack/hot/poll': require.resolve('webpack/hot/poll'),
                'lodash-es': 'lodash'
            }
        },
        resolveLoader: {
            modules: [resolveApp('node_modules'), resolveOwn('node_modules')]
        },
        module: {
            strictExportPresence: true
        }
    };

    if (IS_DEV) {
        config.watch = true;
    }

    if (IS_NODE) {
        config.node = {
            __console: false,
            __dirname: false,
            __filename: false
        };

        config.output = {
            path: paths.appBuild,
            publicPath: clientPublicPath,
            filename: 'server.js',
            libraryTarget: 'commonjs2'
        };

        config.plugins = [
            // exclude spammy progress bar on build machines because it creates spam text
            process.env.TF_BUILD === undefined && new SimpleProgressWebpackPlugin(),
            new webpack.DefinePlugin(dotenv.stringified),
            new webpack.optimize.LimitChunkCountPlugin({
                maxChunks: 1
            })
        ].filter(Boolean);
        config.entry = [paths.appServerIndexJs];

        if (IS_DEV) {
            config.entry.unshift('webpack/hot/poll?300');
            const nodeArgs = ['-r', 'source-map-support/register'];

            if (process.env.INSPECT_BRK) {
                nodeArgs.push(`${process.env.INSPECT_BRK}=127.0.0.1:${process.env.INSPECT_PORT}`);
            }

            config.plugins = [
                ...config.plugins,
                new webpack.HotModuleReplacementPlugin(),
                new StartServerPlugin({
                    name: 'server.js',
                    nodeArgs,
                    // override for dev mode port & rs support
                    args: [`build/server.js`, `port:${dotenv.raw.PORT}`]
                    // turn off 'rs'
                    // keyboard: false
                }),
                new webpack.WatchIgnorePlugin([paths.appManifest])
            ];
        }
    }

    if (IS_WEB) {
        config.entry = {
            client: [paths.appClientIndexJs]
        };
        if (IS_DEV) {
            config.entry.client.unshift(`webpack-dev-server/client?http://${dotenv.raw.HOST}:${devServerPort}/`);
            config.output = {
                path: paths.appBuildPublic,
                publicPath: clientPublicPath,
                pathinfo: true,
                libraryTarget: 'var',
                filename: 'static/js/bundle.js',
                chunkFilename: 'static/js/[name].chunk.js',
                devtoolModuleFilenameTemplate: info => path.resolve(info.resourcePath).replace(/\\/g, '/')
            };
            config.devServer = {
                disableHostCheck: true,
                clientLogLevel: 'info',
                compress: true,
                headers: {
                    'Access-Control-Allow-Origin': '*'
                },
                host: dotenv.raw.HOST,
                // hot: true,
                // inline: false,
                overlay: true,
                port: devServerPort,
                https: {
                    ...createCertificate()
                },
                quiet: false,
                watchOptions: {
                    ignored: /node_modules/
                }
            };
            config.plugins = [
                ...(config.plugins || []),
                new ErrorOverlayPlugin(),
                new webpack.HotModuleReplacementPlugin({
                    // TODO: keep for now & see perf. has to do with multi-reload with definition generator
                    // multiStep: true
                }),
                new webpack.DefinePlugin(dotenv.stringified)
            ];
        } else {
            config.entry = {
                client: [paths.appClientIndexJs]
            };
            config.output = {
                path: paths.appBuildPublic,
                publicPath: dotenv.raw.PUBLIC_PATH || '/',
                filename: 'static/js/bundle.[chunkhash:8].js',
                chunkFilename: 'static/js/[name].[chunkhash:8].chunk.js',
                libraryTarget: 'var'
            };

            config.plugins = [
                ...(config.plugins || []),
                new webpack.DefinePlugin(dotenv.stringified),
                new webpack.HashedModuleIdsPlugin(),
                new webpack.optimize.AggressiveMergingPlugin()
            ];

            config.optimization = {
                usedExports: true,
                minimize: true,
                minimizer: [
                    new TerserPlugin({
                        test: /\.js(\?.*)?$/i,
                        cache: true,
                        parallel: true,
                        sourceMap: true,
                        terserOptions: {
                            safari10: true
                        }
                    })
                ]
            };
        }
    }

    return config;
};
