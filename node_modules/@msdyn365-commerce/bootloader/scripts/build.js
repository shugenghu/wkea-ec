#! /usr/bin/env node
/*******************************************************************************
* Copyright (c) Microsoft Corporation.
* All rights reserved. See LICENSE in the project root for license information.
*******************************************************************************/


'use strict';

process.env.NODE_ENV = 'production';
const webpack = require('webpack');
const createConfig = require('./create-config');
const modified = require('../index');
const fse = require('fs-extra');
const fs = require('fs');
const paths = require('./paths');
const path = require('path');
const filesize = require('filesize');
const gz = require('gzip-size');
const utilities = require('@msdyn365-commerce/utilities-internal');

const PRINT_WARNINGS = process.argv.find(arg => arg.match(/--warnings$/));
const doneString = `\n\n\n\n\nDone.`;

console.log(`Creating client & server bundles...`);

/**
 * Webpack stats `warnings` and `errors` will have each error message flattened and pretty-printed
 * @param {string[]} messagesArray
 * @returns {string} Formatted messages
 */
function prettyPrintWebpackMessages(messagesArray, prefix = 'Message') {
    return (messagesArray || []).map((message, index) => `> ${prefix} ${1 + index}:\r\n${message}`).join(`\r\n\r\n`);
}

// Wrap webpack compile in a try catch.
function compile(config, target) {
    return new Promise((resolve, reject) => {
        let compiler;
        try {
            // const webpack = require('webpack');
            compiler = webpack(config);
        } catch (e) {
            console.error(`Failed to build production bundle.`);
            console.error(e);
            process.exit(1);
        }
        console.log(`\n\n\nCreating build for target: ${target} `);
        compiler.run((err, stats) => {
            if (err) {
                console.error(err);
                reject(err) || process.exit(1);
            }
            if (stats.hasErrors()) {
                const jsonErrors = stats.toJson('errors-only');
                fs.writeFileSync(path.join(process.cwd(), `stats-${target}-build-errors.json`), JSON.stringify(jsonErrors, null, 4));
                console.error(`\r\nErrors:\n ${prettyPrintWebpackMessages(jsonErrors.errors, 'Error')}`);
                PRINT_WARNINGS && console.error(`\r\nWarnings:\n ${prettyPrintWebpackMessages(jsonErrors.warnings, 'Warning')}`);
                console.error(
                    `Errors during webpack build. See previous several lines for additional messages (written as 'stats-${target}-build-errors.json').`
                );
                reject(stats.errors) || process.exit(1);
            }
            if (stats.hasWarnings()) {
                const jsonWarnings = stats.toJson('errors-warnings');
                fs.writeFileSync(path.join(process.cwd(), `stats-${target}-build-warnings.json`), JSON.stringify(jsonWarnings, null, 4));
                console.warn(
                    `Completed with ${jsonWarnings.warnings.length} warnings.  Please see 'stats-${target}-build-warnings.json' for details.`
                );
            }
            // Only output the entire stats file if analyze bundle is turned
            if (process.env.ANALYZE_BUNDLE) {
                const jsonWarnings = stats.toJson('verbose');
                fs.writeFileSync(path.join(process.cwd(), `stats-${target}-build.json`), JSON.stringify(jsonWarnings, null, 4));
                console.log(`Generated verbose stats json for target: ${target}. Please see 'stats-${target}-build.json' for details.`);
            }
            resolve();
        });
    });
}

function createVersionFile() {
    console.log('Creating version information');

    // Resolve current Retail Proxy version
    const retailServerProxyVersion = utilities.getVersionForPackage('@msdyn365-commerce', 'retail-proxy', { errorOnFailure: true });
    // Resolve current SDK version
    const sdkVersion = utilities.getVersionForPackage('@msdyn365-commerce', 'bootloader', { errorOnFailure: true });
    // Resolve current SSK version
    const sskVersion = utilities.getVersionForPackage('@msdyn365-commerce-modules', 'starter-pack', { errorOnFailure: false });

    const versions = {
        sdkVersion: sdkVersion,
        sskVersion: sskVersion,
        retailServerProxyVersion: retailServerProxyVersion
    };

    fs.writeFileSync(path.join(process.cwd(), 'version.json'), JSON.stringify(versions));
    console.log(
        `version.json successfully created using sdkVersion: ${sdkVersion} sskVersion: ${sskVersion} retailServerProxyVersion:${retailServerProxyVersion}`
    );
}

async function main() {
    console.log(`Cleaning build folder...`);
    await fse.emptyDir(paths.appBuild);
    console.log(`Copying public folder...`);
    fse.copySync(paths.appPublic, paths.appBuildPublic, { dereference: true });
    console.log(`Creating webpack configs...`);
    const clientBase = createConfig('web', 'prod', {});
    const serverBase = createConfig('node', 'prod', {});
    const clientUpdated = await modified(clientBase, { target: 'web', dev: false }, webpack);
    const serverUpdated = await modified(serverBase, { target: 'node', dev: false }, webpack);
    await compile(clientUpdated, 'client');
    await compile(serverUpdated, 'server');

    console.log(`All compilation done, calculating file sizes...`);
    // print file sizes after all files are compiled
    const jsPath = path.join(paths.appBuildPublic, 'static', 'js');
    if (!fs.existsSync(jsPath)) {
        console.log(doneString);
        return;
    }
    const generatedJsFiles = fs
        .readdirSync(jsPath)
        .filter(item => item.toLowerCase().endsWith('.js'))
        .map(item => {
            const pathToItem = path.join(jsPath, item);
            const stat = fs.lstatSync(pathToItem);
            if (!stat.isFile()) {
                return false;
            }
            return {
                file: item,
                size: filesize(stat.size),
                gzipSize: filesize(gz.fileSync(pathToItem))
            };
        })
        .filter(Boolean);
    createVersionFile();
    console.log(doneString);
    console.table(generatedJsFiles);
}

main();
