#!/usr/bin/env node

/*******************************************************************************
* Copyright (c) Microsoft Corporation.
* All rights reserved. See LICENSE in the project root for license information.
*******************************************************************************/


const cp = require('child_process');
const process = require('process');
const os = require('os');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const { trace } = require('@msdyn365-commerce/utilities-internal/dist/lib/server/console-trace');

let readyToExit = false;
let testRunner;
const t = trace;

const err = message => t.log(console.error, `${chalk.bgRed('[ERROR]\t')}${chalk.red(message)}`);
const info = message => t.log(console.log, `${chalk.bgBlue('[INFO]\t')}${message}`);
const warn = message => t.log(console.warn, `${chalk.bgRed('[WARN]\t')}${message}`);
const testURI = process && process.env && process.env.NodeTestUri;

// check if process url has been set
if (testURI) {
    info('Using server specified in NodeTestUri env var');
    // check if server.js exists, if it does then don't create production build
} else if (!fs.existsSync(path.resolve(path.join(`build`, 'server.js')))) {
    // do a production build
    info(`Cleaning build directory.`);
    cp.execSync(`yarn rimraf build`, {
        stdio: 'inherit'
    });
    info(`Creating production build to test against.`);
    cp.execSync(`yarn build:prod`, {
        stdio: 'inherit'
    });
} else {
    info(`Reusing existing module build artifacts. You may have to manually delete the build folder to get a valid production build`);
}

// kill on all the platforms
const kill = function(proc, message) {
    info(`Attempting to stop ${message} (PID: ${proc.pid})...`);
    if (os.platform() === 'win32') {
        try {
            const tasklistExistResult = cp.execSync(`tasklist /fi "pid eq ${proc.pid}"`).toString();
            const pidExists = tasklistExistResult.indexOf(proc.pid) !== -1;
            if (pidExists) {
                cp.execSync(`taskkill /pid ${proc.pid} /T /F`);
            }
        } catch (e) {
            err(`Error while stopping node server.`);
            info(e);
        }
    } else {
        proc.kill();
    }
    info(`Done.`);
};

let serverProcess;
if (!testURI) {
    // Start server async
    info('Attempting to start node server');
    serverProcess = cp.spawn(`node build/server.js`, {
        cwd: process.cwd(),
        windowsHide: true,
        env: {
            HEADER_REQ: true
        },
        shell: true
    });

    serverProcess.stderr.on('data', data => {
        const strData = data.toString();
        const isServerAlreadyRunning = strData.indexOf(`Error: listen EADDRINUSE :::`) !== -1;
        if (isServerAlreadyRunning) {
            warn(`node server is already running. If you don't expect this, please kill the process manually and rerun tests`);
        } else {
            err(strData);
        }
    });

    serverProcess.on('close', code => {
        if (!readyToExit) {
            warn(`Node server stopped early with exit code ${code}, possibly running against existing instance.`);
            // 50 is our special exit code to use during build
            if (code === 50) {
                err(`Could not start server. See other log messages for details.`);
                kill(testRunner, 'test runner');
            }
        }
    });
}

// eslint-disable-next-line
new Promise(resolve => {
    let additionalArgs = [];
    if (process.argv && process.argv.length > 2) {
        additionalArgs = process.argv.slice(2).join(' ');
        info(`Received additional args for testcafe: ${additionalArgs}`);
    }

    if (process.env.TESTENVIRONMENT && process.env.SCREENSHOTFOLDERBASEPATH) {
        additionalArgs.push(`-s "${path.join(process.env.SCREENSHOTFOLDERBASEPATH, process.env.TESTENVIRONMENT)}"`);
    }

    let yarnTestCafeCmd = `yarn testcafe "chrome:headless  --no-sandbox --disable-gpu" test -r spec,junit:integration-test-report.xml --page-load-timeout 15000 --assertion-timeout 15000 --selector-timeout 15000 ${additionalArgs}`;

    const testFolderPath = process.env.TESTFOLDERBASEPATH;
    if (testFolderPath) {
        yarnTestCafeCmd = yarnTestCafeCmd.replace('test -r', `${testFolderPath} -r`);
    }

    // Run tests
    info(`Started server, running testcafe tests`);
    testRunner = cp.spawn(yarnTestCafeCmd, {
        cwd: process.cwd(),
        windowsHide: true,
        timeout: 60 * 1000 * 10,
        stdio: 'inherit',
        shell: true
    });

    testRunner.on('exit', exitCode => {
        // Kill server process
        readyToExit = true;
        serverProcess && kill(serverProcess, 'node server');
        info(`Finished running tests!`);
        process.exit(exitCode);
    });
});

if (process.platform === 'win32') {
    var rl = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.on('SIGINT', function() {
        process.emit('SIGINT');
    });
}

process.on('SIGINT', function() {
    info('Attempting to stop integration tests');
    serverProcess && kill(serverProcess, 'SIGINT');
    testRunner && kill(testRunner, 'SIGINT');
    process.exit();
});
