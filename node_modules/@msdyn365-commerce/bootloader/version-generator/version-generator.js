/*******************************************************************************
* Copyright (c) Microsoft Corporation.
* All rights reserved. See LICENSE in the project root for license information.
*******************************************************************************/


const fs = require('fs-extra');
const path = require('path');
const crypto = require('crypto');

// Utilities
const isDirectory = source => fs.lstatSync(source).isDirectory() || fs.lstatSync(source).isSymbolicLink();
const getDirectories = source => fs.readdirSync(source).filter(name => isDirectory(path.join(source, name)));

class VersionGenerator {
    constructor(nodeModulesPath, outputPath) {
        this.outputPath = outputPath;
        this.nodeModulesPath = nodeModulesPath;
    }

    getFullyQualifiedPackageName(packagePath, packageName) {
        // Getting the semver from the package.json requires the fully qualified package name
        let fullPackageName = '';
        if (packagePath.includes('starter-pack') || packagePath.includes('@msdyn365-commerce-modules')) {
            fullPackageName = '@msdyn365-commerce-modules/' + packageName;
        } else {
            fullPackageName = '@msdyn365-commerce/' + packageName;
        }
        return fullPackageName;
    }

    // Parses the package.json to determine the version of the specified modulePath/moduleName/package.json
    // Used to determine if a module brought in through booloader or starter-pack has a different version
    // in bootloader's or starter-pack's node_modules folder
    getVersion(packagePath, packageName) {
        try {
            const modulePackagePath = path.join(packagePath, packageName, 'package.json');
            if (fs.existsSync(modulePackagePath)) {
                const packageData = fs.readJsonSync(modulePackagePath);
                return packageData.version;
            } else {
                return 'HOISTED';
            }
        } catch (e) {}
    }

    // Parses the package.json to determine the semantic version of a specific dependency
    getVersionFromPackageJson(packagePath, packageName) {
        try {
            const modulePackagePath = path.join(packagePath, 'package.json');
            if (fs.existsSync(modulePackagePath)) {
                const packageData = fs.readJsonSync(modulePackagePath);
                const dependencies = packageData.dependencies;

                if (dependencies[packageName]) {
                    return dependencies[packageName];
                } else {
                    return '--';
                }
            } else {
                return '--';
            }
        } catch (e) {}
    }

    getPartnerPackageData() {
        try {
            const packagePath = './package.json';
            if (fs.existsSync(packagePath)) {
                return fs.readJsonSync(packagePath);
            }
        } catch (e) {
            console.log('[Version Generator] Unable to find partner package.json');
            console.log(e);
        }
    }

    // Stores version for the given modulePath/moduleName in moduleArray
    storeVersion(packageArray, packagePath, packageName, secondaryPackagePath, secondaryLocationNodeModules) {
        const nodeModuleVersion = this.getVersion(packagePath, packageName);

        var packageDetails = { packageName: packageName, versionDetails: [] };

        let fullPackageName = this.getFullyQualifiedPackageName(packagePath, packageName);
        const rootPackageVersion = this.getVersionFromPackageJson(path.resolve(this.nodeModulesPath, '..'), fullPackageName);

        if (secondaryPackagePath !== '') {
            var secondaryLocationPackageJson = '';
            secondaryLocationNodeModules = '';
            const secondaryPackageVersion = this.getVersionFromPackageJson(secondaryPackagePath, fullPackageName);

            let secondaryNodeModuleVersion = this.getVersion(secondaryLocationNodeModules, packageName);
            if (secondaryPackagePath.includes('bootloader')) {
                secondaryLocationPackageJson = '@msdyn365-commerce-bootloader-package-json-version';
                secondaryLocationNodeModules = '@msdyn365-commerce-bootloader-node-modules-version';
            } else {
                secondaryLocationPackageJson = 'starter-pack-package-json-version';
                secondaryLocationNodeModules = 'starter-pack-node-modules-version';
            }

            if (secondaryPackageVersion === '--') {
                packageDetails.versionDetails.push({
                    rootPackageVersion: rootPackageVersion,
                    hoistedVersion: nodeModuleVersion
                });
            } else if (secondaryNodeModuleVersion === 'HOISTED') {
                secondaryNodeModuleVersion = 'HOISTED: Using version ' + nodeModuleVersion;
                packageDetails.versionDetails.push({
                    rootPackageVersion: '--',
                    hoistedVersion: nodeModuleVersion,
                    [secondaryLocationPackageJson]: secondaryPackageVersion,
                    [secondaryLocationNodeModules]: secondaryNodeModuleVersion
                });
            } else {
                packageDetails.versionDetails.push({
                    rootPackageVersion: '--',
                    hoistedVersion: nodeModuleVersion,
                    [secondaryLocationPackageJson]: secondaryPackageVersion,
                    [secondaryLocationNodeModules]: secondaryNodeModuleVersion
                });
            }
        } else {
            packageDetails.versionDetails.push({ rootPackageVersion: rootPackageVersion, actualVersion: nodeModuleVersion });
        }

        packageArray.push(packageDetails);
    }

    // Retrieves package.json version info for all of the folders in modulePath
    // and stores the information in moduleArray

    // If the modules can be bundled as part of bootloader or starter-pack, this will also search
    // through the package.json for bootlaoder and starter-pack and their associated node_modules for any version
    // information
    storeVersionForFolder(packageArray, packagePath, secondaryPackagePath, secondaryLocationNodeModules) {
        if (!fs.existsSync(packagePath)) {
            console.log(`[Version Generator] Couldn't find:  ${packagePath}. Not a critical error.`);
            return;
        }
        let packages = getDirectories(packagePath);
        packages.forEach(packageName => {
            this.storeVersion(packageArray, packagePath, packageName, secondaryPackagePath, secondaryLocationNodeModules);
        });
    }

    buildTimeHash(inputString) {
        const hasher = crypto.createHash('md5');
        hasher.update(inputString);
        // md5 is 32 chars,
        return hasher.digest('hex').substr(0, 6);
    }

    getInstalledThemes(localThemesDir, installedThemesDir) {
        const themes = {
            localThemes: [],
            installedThemes: []
        };
        // First find all the local themes and append to the themes array
        if (fs.existsSync(localThemesDir)) {
            this.getThemeDetails(themes.localThemes, localThemesDir);
        }
        // Next find all installed themes
        if (fs.existsSync(installedThemesDir)) {
            this.getThemeDetails(themes.installedThemes, installedThemesDir);
        }
        return themes;
    }

    getThemeDetails(themesDetails, themesLocation) {
        let themes = getDirectories(themesLocation);
        themes.forEach(themeName => {
            let version = '--';
            let name = themeName;
            let packageJsonFilePath = path.resolve(themesLocation, themeName, 'package.json');
            // If a package.json file exists for the theme grab the version and name
            if (fs.existsSync(packageJsonFilePath)) {
                let packageJson = fs.readJsonSync(packageJsonFilePath);
                name = packageJson.name;
                version = packageJson.version;
            }
            themesDetails.push({
                themeName: name,
                version: version
            });
        });
    }

    // VERSION SCHEMA EXAMPLE:
    // {
    //     "partnerName": "@msdyn365-commerce/demo-partner",
    //     "partnerVersion": "1.2.3",
    //     "buildTime": "2019-01-03 00:43:43",
    //     "buildVersion": "04fdb9",
    //     "MSDyn365-Commerce": [
    //       {
    //         "packageName": "action",
    //         "versionDetails": [
    //           {
    //             "rootPackageVersion": "^1.2.12",
    //             "hoistedVersion": "1.2.12"
    //           }
    //         ]
    //       },
    //       {
    //         "packageName": "theming",
    //         "versionDetails": [
    //           {
    //             "rootPackageVersion": "--",
    //             "hoistedVersion": "1.2.12"
    //           }
    //         ]
    //       },
    //       {
    //         "packageName": "utilities",
    //         "versionDetails": [
    //           {
    //             "rootPackageVersion": "--",
    //             "hoistedVersion": "1.2.12",
    //             "@msdyn365-commerce-package-json-version": "^1.2.12",
    //             "@msdyn365-commerce-node-modules-version": "HOISTED: Using version 1.2.12"
    //           }
    //         ]
    //       }
    //     ],
    //     "MSDyn365-Commerce-Modules": [
    //       {
    //         "packageName": "core-actions",
    //         "versionDetails": [
    //           {
    //             "rootPackageVersion": "1.2.4",
    //             "hoistedVersion": "1.2.4"
    //           }
    //         ]
    //       },
    //       {
    //         "packageName": "keystone-demo-module",
    //         "versionDetails": [
    //           {
    //             "rootPackageVersion": "^1.2.12",
    //             "hoistedVersion": "1.2.12"
    //           }
    //         ]
    //       }
    //     ],
    //     "themes": []
    //   }
    apply(compiler) {
        compiler.hooks.afterCompile.tap('versionGenerator', compilation => {
            try {
                const modulesFolderName = path.join(this.nodeModulesPath, '/@msdyn365-commerce-modules');
                const msdyn365FolderName = path.join(this.nodeModulesPath, '/@msdyn365-commerce');
                const themesFolderName = path.join(this.nodeModulesPath, '/@msdyn365-commerce-theme');
                const starterPackFolder = path.join(modulesFolderName, '/starter-pack/');
                const starterPackNodeModules = path.join(modulesFolderName, '/starter-pack/node_modules/@msdyn365-commerce-modules');
                const bootloaderFolder = path.join(this.nodeModulesPath, '/@msdyn365-commerce/bootloader/');
                const partnerThemesFolder = path.resolve('./src/themes');

                const bootloaderNodeModules = path.join(
                    this.nodeModulesPath,
                    '/@msdyn365-commerce/bootloader/node_modules/@msdyn365-commerce'
                );

                const themes = this.getInstalledThemes(partnerThemesFolder, themesFolderName);
                const partnerJsonData = this.getPartnerPackageData();

                const buildTimeString = new Date()
                    .toJSON()
                    .slice(0, 19)
                    .replace('T', ' ');
                const buildVersion = this.buildTimeHash(buildTimeString);
                let packageVersions = {
                    packageName: partnerJsonData.name,
                    version: partnerJsonData.version,
                    submissionId: process.env.SUBMISSIONID || 'unknown',
                    build: {
                        id: process.env.Build_BuildId,
                        number: process.env.Build_BuildNumber,
                        url: process.env.BuildUrl
                    },
                    buildTime: buildTimeString,
                    buildVersion,
                    'MSDyn365-Commerce': [],
                    'MSDyn365-Commerce-Modules': [],
                    themes: themes
                };
                this.storeVersionForFolder(
                    packageVersions['MSDyn365-Commerce'],
                    msdyn365FolderName,
                    bootloaderFolder,
                    bootloaderNodeModules
                );
                this.storeVersionForFolder(
                    packageVersions['MSDyn365-Commerce-Modules'],
                    modulesFolderName,
                    starterPackFolder,
                    starterPackNodeModules
                );
                fs.writeFileSync(path.join(this.outputPath, '/packageVersions.json'), JSON.stringify(packageVersions, null, 2), 'utf8');
            } catch (e) {
                console.log(e);
                console.log('There was an error creating the version file');
            }
        });
    }
}

module.exports = VersionGenerator;
