/*******************************************************************************
* Copyright (c) Microsoft Corporation.
* All rights reserved. See LICENSE in the project root for license information.
*******************************************************************************/


import { uniq } from 'lodash';
/**
 * Gets list of used module types.
 */
export const getRequestedModules = windowInitialData => {
    let result = {
        modules: []
    };

    if (!windowInitialData._moduleList || windowInitialData._moduleList.length === 0) {
        return result;
    }
    windowInitialData._moduleList.forEach(moduleType => {
        result.modules.push(moduleType.typeName);
    });

    // Include requested theme modules
    if (windowInitialData._themeModulesList && windowInitialData._themeModulesList.length > 0) {
        result.modules = result.modules.concat(result.modules, windowInitialData._themeModulesList);
    }

    return result;
};

/**
 * Gets keys for used assets (modules) that were utilized on the server-side render pass. Object is
 * initialized from the page viewmodel used to initialize the clientRenderer
 */
export const getUniqueRequestedAssets = windowInitialData => {
    let result = {
        modules: []
    };
    if (!windowInitialData) {
        return result;
    }

    try {
        result = getRequestedModules(windowInitialData);
    } catch (e) {
        console.error(e);
    }

    return {
        modules: uniq(result.modules)
    };
};

/**
 * Checks if we have that key in the requested asset keys. If so, we'll allow the value and register the
 * databinder, module, or reducer (reducers reference 'key', databinders & modules use 'name').  If we don't receive
 * a set of keys at all, then register everything
 * @param {string[]} requestedAssetKeys The valid & incldued modules
 * @returns {Function} Returns function with signature of "(string) => boolean"
 */

export const filterToUsedAssets = requestedAssetKeys => {
    // curry!
    return partnerModule => (!requestedAssetKeys ? true : requestedAssetKeys.indexOf(partnerModule.name || partnerModule.key) !== -1);
};
