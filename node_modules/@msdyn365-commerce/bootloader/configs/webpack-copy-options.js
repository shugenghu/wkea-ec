/*******************************************************************************
* Copyright (c) Microsoft Corporation.
* All rights reserved. See LICENSE in the project root for license information.
*******************************************************************************/


const path = require('path');
const paths = require('../scripts/paths');
const fs = require('fs');

// in symlink scenarios, the react & react-dom may get hoisted or served from bootloader dir
// so we need the actual containing folder dir
const reactContainingPath = path.dirname(require.resolve('react'));
const reactDomContainingPath = path.dirname(require.resolve('react-dom'));

// figure out where shared-components are
let sharedComponentsDistPath = false;
try {
    sharedComponentsDistPath = require
        .resolve('@msdyn365-commerce-modules/shared-components')
        .replace(/\\/gi, '/')
        .replace('lib/index.js', '');
} catch (e) {
    // check symlink scenario
    const appSharedComponentPath = path.join(paths.appNodeModules, '@msdyn365-commerce-modules', 'shared-components');
    if (fs.existsSync(appSharedComponentPath)) {
        sharedComponentsDistPath = path.join(appSharedComponentPath, 'dist');
    }
}

let copyOptions = [
    // // copy starter pack module mocks, and parter custom module mocks to build
    {
        from: '**/mocks/*.json',
        to: 'moduleMocks/[1]/[2].json',
        context: 'src',
        test: new RegExp(`([^\\${path.sep}]+)\\${path.sep}mocks\\${path.sep}(.+).json$`),
        cache: false
    },
    {
        from: 'pageMocks/**',
        to: '',
        context: 'src',
        cache: false
    },
    {
        from: 'settings/*.json',
        to: '',
        context: 'src',
        cache: false
    },
    {
        from: '*.js',
        to: 'public/static/js/react',
        context: `${reactContainingPath}/umd`,
        cache: false
    },
    {
        from: '*.js',
        to: 'public/static/js/react-dom',
        context: `${reactDomContainingPath}/umd`,
        cache: false
    },
    sharedComponentsDistPath && {
        from: '*.css',
        to: 'public/static/shared-components',
        context: `${sharedComponentsDistPath}/bundle/css`,
        cache: false
    }
].filter(Boolean);

// If running in local development mode, copy secrets file to build folder
if (process.env.NODE_ENV === 'development') {
    copyOptions = copyOptions
        .concat([
            {
                from: 'secrets/**',
                to: '',
                context: './',
                cache: false
            }
        ])
        .filter(Boolean);
}

module.exports = copyOptions;
