/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import 'jest';
import { autorun, isObservable } from 'mobx';
import { RequestCache } from '../request-cache';

describe('Basic Cache Functionality', () => {
    it('Can put new items in the cache', () => {
        const cache = new RequestCache();

        const primitiveItem = 'foo';
        const arrayItem = [1, 2, 3];
        const objectItem = { foo: { bar: 'baz' } };

        cache.put({ typeName: 'string', key: '1' }, { item: primitiveItem });

        const primitiveItemFromCache = cache.get({ typeName: 'string', key: '1' });
        const primitiveItemFromCacheValue = cache.getValue({ typeName: 'string', key: '1' });

        if (primitiveItemFromCache !== null) {
            expect(isObservable(primitiveItemFromCache)).toBe(true);
            expect(primitiveItemFromCacheValue).toEqual('foo');
        } else {
            throw new Error('Unable to get primitive item from cache');
        }

        cache.put({ typeName: 'array', key: '1' }, { item: arrayItem });
        const arrayItemFromCache = cache.get({ typeName: 'array', key: '1' });
        const arrayItemFromCacheValue = cache.getValue({ typeName: 'array', key: '1' });

        if (arrayItemFromCache !== null) {
            expect(isObservable(arrayItemFromCache)).toBe(true);
            expect(arrayItemFromCacheValue).toEqual(arrayItem);
            expect(cache.getValue({ typeName: 'array', key: '1' })).toEqual(arrayItem);
        } else {
            throw new Error('Unable to get array item from ReqeustCache');
        }

        cache.put({ typeName: 'object', key: '1' }, { item: objectItem });
        const objectItemFromCache = cache.get({ typeName: 'object', key: '1' });
        const objectItemFromCacheValue = cache.getValue({ typeName: 'object', key: '1' });

        if (objectItemFromCache !== null) {
            expect(isObservable(objectItemFromCache)).toBe(true);
            expect(objectItemFromCacheValue).toEqual(objectItem);
            expect(cache.getValue({ typeName: 'object', key: '1' })).toEqual(objectItem);
        } else {
            throw new Error('Unable to get object item from ReqeustCache');
        }
    });

    it('Should return null on nonexistent keys', () => {
        const cache = new RequestCache();

        const fakeCacheItem = cache.get({ typeName: 'foo', key: 'bar' });
        expect(fakeCacheItem).toBeUndefined();
    });

    it('Should update primitive values', () => {
        const cache = new RequestCache();

        const primitiveItemOne = 'foo';
        const primitiveItemTwo = 'bar';

        cache.put({ typeName: 'string', key: '1' }, { item: primitiveItemOne });
        cache.put({ typeName: 'string', key: '1' }, { item: primitiveItemTwo });

        const primitiveItemFromCache = cache.get({ typeName: 'string', key: '1' });
        const primitiveItemFromCacheValue = cache.getValue({ typeName: 'string', key: '1' });

        if (primitiveItemFromCache !== null) {
            expect(isObservable(primitiveItemFromCache)).toBe(true);
            expect(primitiveItemFromCacheValue).toEqual(primitiveItemTwo);
        } else {
            throw new Error('Unable to get updated primitive item from cache');
        }
    });

    it('Should update arrays', () => {
        const cache = new RequestCache();

        const arrayOne = [1, 2, 3];
        const arrayTwo = [4, 5, 6];

        cache.put({ typeName: 'array', key: '1' }, { item: arrayOne });
        cache.put({ typeName: 'array', key: '1' }, { item: arrayTwo });

        const arrayFromCache = cache.get({ typeName: 'array', key: '1' });
        const arrayFromCacheValue = cache.getValue({ typeName: 'array', key: '1' });

        if (arrayFromCache !== null) {
            expect(isObservable(arrayFromCache)).toBe(true);
            expect(arrayFromCacheValue).toEqual(arrayTwo);
        } else {
            throw new Error('Unable to get updated array item from cache');
        }
    });

    it('Should update objects', () => {
        const cache = new RequestCache();

        const objectOne = { foo: { bar: 'baz' } };
        const objectTwo = { baz: { bar: 'foo' } };

        cache.put({ typeName: 'object', key: '1' }, { item: objectOne });
        cache.put({ typeName: 'object', key: '1' }, { item: objectTwo });

        const objectFromCache = cache.get({ typeName: 'object', key: '1' });
        const objectFromCacheValue = cache.getValue({ typeName: 'object', key: '1' });

        if (objectFromCache !== null) {
            expect(isObservable(objectFromCache)).toBe(true);
            expect(objectFromCacheValue).toEqual(objectTwo);
        } else {
            throw new Error('Unable to get object item from cache');
        }
    });

    it('Should delete cache items using del', () => {
        const cache = new RequestCache();

        const objectOne = { foo: { bar: 'baz' } };
        const objectTwo = { baz: { bar: 'foo' } };

        cache.put({ typeName: 'object', key: '1' }, { item: objectOne });
        cache.put({ typeName: 'object', key: '2' }, { item: objectTwo });

        cache.del({ typeName: 'object', key: '1' });

        const deletedObjectFromCacheValue = cache.getValue({ typeName: 'object', key: '1' });
        const objectFromCacheValue = cache.getValue({ typeName: 'object', key: '2' });

        expect(deletedObjectFromCacheValue).toBeUndefined();
        expect(objectFromCacheValue).toStrictEqual(objectTwo);
    });

    it('Should not throw an error for deleting an item that doesnt exist', () => {
        const cache = new RequestCache();
        cache.del({ typeName: 'object', key: '1' });

        const deletedObjectFromCacheValue = cache.getValue({ typeName: 'object', key: '1' });
        expect(deletedObjectFromCacheValue).toBeUndefined();
    });
});

describe('Advanced Cache Functionality', () => {
    it('Should automatically update primitives', () => {
        const cache = new RequestCache();

        const stringOne = 'foo';
        const stringTwo = 'bar';

        let observedValue: string | null = '';

        cache.put({ typeName: 'string', key: '1' }, { item: stringOne });

        autorun(() => {
            const val = cache.getValue<string>({ typeName: 'string', key: '1' });
            observedValue = val ? val : null;
        });

        expect(observedValue).toEqual(stringOne);
        cache.put({ typeName: 'string', key: '1' }, { item: stringTwo });
        expect(observedValue).toEqual(stringTwo);
    });

    it('Should automatically update arrays', () => {
        const cache = new RequestCache();

        const arrayOne = [1, 2, 3];
        const arrayTwo = [4, 5, 6];

        let observedValue: number = 0;

        cache.put({ typeName: 'array', key: '1' }, { item: arrayOne });

        autorun(() => {
            const fromCache = cache.getValue({ typeName: 'array', key: '1' });
            if (fromCache) {
                // @ts-ignore
                observedValue = fromCache[0];
            }
        });

        expect(observedValue).toEqual(arrayOne[0]);
        cache.put({ typeName: 'array', key: '1' }, { item: arrayTwo });
        expect(observedValue).toEqual(arrayTwo[0]);
    });

    it('Should automatically update objects', () => {
        const cache = new RequestCache();

        const objectOne = { foo: { bar: 'baz' } };
        const objectTwo = { baz: { bar: 'foo' } };

        let observedValue: object | undefined = {};

        cache.put({ typeName: 'object', key: '1' }, { item: objectOne });

        autorun(() => {
            observedValue = cache.getValue({ typeName: 'object', key: '1' });
        });

        expect(observedValue).toEqual(objectOne);
        cache.put({ typeName: 'object', key: '1' }, { item: objectTwo });
        expect(observedValue).toEqual(objectTwo);
    });
});
