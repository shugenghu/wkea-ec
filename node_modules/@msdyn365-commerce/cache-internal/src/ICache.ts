/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { IDictionary } from '@msdyn365-commerce/core-internal';

export enum ICacheSource {
    RequestCache,
    AppCache
}

export interface ICacheKey {
    key: string;
    typeName: string;
}

export interface ICacheItem<T> {
    item: T;
    shouldRefresh?: boolean;
    error?: boolean;

    // property to indicate the source whether it is app/request
    s?: ICacheSource;
}

/**
 * Interface exposing methods for caching
 */
export interface ICache {
    /**
     * @function        {put}           - Method to insert an item in the cache
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @param cacheItem {ICacheItem}    - item that needs to be inserted in the cache
     */
    put<T = unknown>(cacheKey: ICacheKey, item: ICacheItem<T>): boolean;

    /**
     * @function        {get}           - Method to get the cached item
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @return          {ICacheItem}    - cached value against the given cache key
     */
    get<T = unknown>(cacheKey: ICacheKey): ICacheItem<T> | undefined;

    /**
     * @function        {getValue}      - Method to get the cached item
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @return          {T}             - cached value against the given cache key
     */
    getValue<T = unknown>(cacheKey: ICacheKey): T | undefined;

    /**
     * @function        {getAllItems}   - Method to get all cached items for a given type
     * @param typeName  {typeName}      - typeName for which all items need to be fetched
     * @return          {ICacheItem}    - dictionary of cache items of the given typeName
     */
    getAllItems<T = unknown>(typeName: string): IDictionary<ICacheItem<T>> | undefined;

    /**
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @param toCache   {ICache}        - cache object to which the item needs to be copied
     * @return          {ICacheItem}    - cache item that was copied
     */
    copyTo<T = unknown>(cacheKey: ICacheKey, toCache: ICache): ICacheItem<T> | undefined;

    /**
     * @function    {del}               - Method to delete an item from the cache
     * @param key   {ICacheKey[]}       - Array of ICacheGetData items whose values need to be deleted from cache
     * @return      {number}            - returns true if the cache key is deleted successfully. Does not throw errors.
     */
    del(cacheKey: ICacheKey): boolean;

    /**
     * @function    {flushAll}          - Method to flush all data from the cache
     */
    flushAll(): void;
}
