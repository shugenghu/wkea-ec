/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { IExperimentationProvider, IExperimentRefreshOptions, msdyn365Commerce, RefreshType } from '@msdyn365-commerce/core-internal';
import { ICacheKey } from './ICache';

export const DEFAULT_EXPERIMENT_TTL = 1800;
export const DEFAULT_EXPERIMENT_TTR = 60;
export const DEFAULT_EXPERIMENT_DATAFILE_TTL = 1800;
export const DEFAULT_EXPERIMENT_DATAFILE_TTR = 60;

export const readCachedExperimentsEntries = async <T>(
    cacheKey: ICacheKey,
    experimentRefreshOptions: IExperimentRefreshOptions,
    expProvider: IExperimentationProvider,
    expConnectorName: string,
    retailServerBaseURL: string
): Promise<T | undefined> => {
    const experimentationAppCache = msdyn365Commerce.connectorCache;
    let experimentEntry: T | undefined;
    if (experimentationAppCache) {
        const experimentItem = experimentationAppCache.get<T>(cacheKey);
        if (experimentItem && experimentItem.shouldRefresh) {
            // doing background refresh here.
            // tslint:disable-next-line:no-any
            const refresh = new Promise<any>((res, rej) => {
                let newExperimentsResult;
                switch (experimentRefreshOptions.refreshType) {
                    case RefreshType.DataFile:
                        newExperimentsResult = expProvider.getConfigForClientSideInit();
                        break;
                    case RefreshType.Experiments:
                        newExperimentsResult = expProvider.getExperiments(retailServerBaseURL, expConnectorName);
                        break;
                    default:
                }
                res(newExperimentsResult);
            });
            refresh
                .then(experimentsRefreshRaw => {
                    let experimentsRefresh;
                    switch (experimentRefreshOptions.refreshType) {
                        case RefreshType.DataFile:
                            experimentsRefresh = JSON.stringify(experimentsRefreshRaw);
                            break;
                        case RefreshType.Experiments:
                            experimentsRefresh = experimentsRefreshRaw.experiments;
                            break;
                        default:
                            experimentsRefresh = experimentsRefreshRaw;
                    }
                    if (experimentsRefresh) {
                        experimentationAppCache.put(cacheKey, { item: experimentsRefresh });
                    }
                })
                .catch();
        }
        experimentEntry = experimentItem ? experimentItem.item : undefined;
    }
    return experimentEntry;
};

export const saveCachedExperimentsEntries = async <T>(cacheKey: ICacheKey, experimentationsItem: T): Promise<boolean> => {
    return (msdyn365Commerce.connectorCache && msdyn365Commerce.connectorCache.put<T>(cacheKey, { item: experimentationsItem })) || false;
};
