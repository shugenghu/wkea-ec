/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { msdyn365Commerce, RefreshType } from '@msdyn365-commerce/core-internal';
export const DEFAULT_EXPERIMENT_TTL = 1800;
export const DEFAULT_EXPERIMENT_TTR = 60;
export const DEFAULT_EXPERIMENT_DATAFILE_TTL = 1800;
export const DEFAULT_EXPERIMENT_DATAFILE_TTR = 60;
export const readCachedExperimentsEntries = async (cacheKey, experimentRefreshOptions, expProvider, expConnectorName, retailServerBaseURL) => {
    const experimentationAppCache = msdyn365Commerce.connectorCache;
    let experimentEntry;
    if (experimentationAppCache) {
        const experimentItem = experimentationAppCache.get(cacheKey);
        if (experimentItem && experimentItem.shouldRefresh) {
            // doing background refresh here.
            // tslint:disable-next-line:no-any
            const refresh = new Promise((res, rej) => {
                let newExperimentsResult;
                switch (experimentRefreshOptions.refreshType) {
                    case RefreshType.DataFile:
                        newExperimentsResult = expProvider.getConfigForClientSideInit();
                        break;
                    case RefreshType.Experiments:
                        newExperimentsResult = expProvider.getExperiments(retailServerBaseURL, expConnectorName);
                        break;
                    default:
                }
                res(newExperimentsResult);
            });
            refresh
                .then(experimentsRefreshRaw => {
                let experimentsRefresh;
                switch (experimentRefreshOptions.refreshType) {
                    case RefreshType.DataFile:
                        experimentsRefresh = JSON.stringify(experimentsRefreshRaw);
                        break;
                    case RefreshType.Experiments:
                        experimentsRefresh = experimentsRefreshRaw.experiments;
                        break;
                    default:
                        experimentsRefresh = experimentsRefreshRaw;
                }
                if (experimentsRefresh) {
                    experimentationAppCache.put(cacheKey, { item: experimentsRefresh });
                }
            })
                .catch();
        }
        experimentEntry = experimentItem ? experimentItem.item : undefined;
    }
    return experimentEntry;
};
export const saveCachedExperimentsEntries = async (cacheKey, experimentationsItem) => {
    return (msdyn365Commerce.connectorCache && msdyn365Commerce.connectorCache.put(cacheKey, { item: experimentationsItem })) || false;
};
//# sourceMappingURL=experimentation-cache-utils.js.map