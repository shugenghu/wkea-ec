{"version":3,"file":"experimentation-cache-utils.js","sourceRoot":"","sources":["../../src/experimentation-cache-utils.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAuD,gBAAgB,EAAE,WAAW,EAAE,MAAM,kCAAkC,CAAC;AAGtI,MAAM,CAAC,MAAM,sBAAsB,GAAG,IAAI,CAAC;AAC3C,MAAM,CAAC,MAAM,sBAAsB,GAAG,EAAE,CAAC;AACzC,MAAM,CAAC,MAAM,+BAA+B,GAAG,IAAI,CAAC;AACpD,MAAM,CAAC,MAAM,+BAA+B,GAAG,EAAE,CAAC;AAElD,MAAM,CAAC,MAAM,4BAA4B,GAAG,KAAK,EAC7C,QAAmB,EACnB,wBAAmD,EACnD,WAAqC,EACrC,gBAAwB,EACxB,mBAA2B,EACL,EAAE;IACxB,MAAM,uBAAuB,GAAG,gBAAgB,CAAC,cAAc,CAAC;IAChE,IAAI,eAA8B,CAAC;IACnC,IAAI,uBAAuB,EAAE;QACzB,MAAM,cAAc,GAAG,uBAAuB,CAAC,GAAG,CAAI,QAAQ,CAAC,CAAC;QAChE,IAAI,cAAc,IAAI,cAAc,CAAC,aAAa,EAAE;YAChD,iCAAiC;YACjC,kCAAkC;YAClC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAM,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAC1C,IAAI,oBAAoB,CAAC;gBACzB,QAAQ,wBAAwB,CAAC,WAAW,EAAE;oBAC1C,KAAK,WAAW,CAAC,QAAQ;wBACrB,oBAAoB,GAAG,WAAW,CAAC,0BAA0B,EAAE,CAAC;wBAChE,MAAM;oBACV,KAAK,WAAW,CAAC,WAAW;wBACxB,oBAAoB,GAAG,WAAW,CAAC,cAAc,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;wBACzF,MAAM;oBACV,QAAQ;iBACX;gBACD,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YACH,OAAO;iBACF,IAAI,CAAC,qBAAqB,CAAC,EAAE;gBAC1B,IAAI,kBAAkB,CAAC;gBACvB,QAAQ,wBAAwB,CAAC,WAAW,EAAE;oBAC1C,KAAK,WAAW,CAAC,QAAQ;wBACrB,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;wBAC3D,MAAM;oBACV,KAAK,WAAW,CAAC,WAAW;wBACxB,kBAAkB,GAAG,qBAAqB,CAAC,WAAW,CAAC;wBACvD,MAAM;oBACV;wBACI,kBAAkB,GAAG,qBAAqB,CAAC;iBAClD;gBACD,IAAI,kBAAkB,EAAE;oBACpB,uBAAuB,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;iBACvE;YACL,CAAC,CAAC;iBACD,KAAK,EAAE,CAAC;SAChB;QACD,eAAe,GAAG,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;KACtE;IACD,OAAO,eAAe,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,4BAA4B,GAAG,KAAK,EAAK,QAAmB,EAAE,oBAAuB,EAAoB,EAAE;IACpH,OAAO,CAAC,gBAAgB,CAAC,cAAc,IAAI,gBAAgB,CAAC,cAAc,CAAC,GAAG,CAAI,QAAQ,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC;AAC1I,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IExperimentationProvider, IExperimentRefreshOptions, msdyn365Commerce, RefreshType } from '@msdyn365-commerce/core-internal';\nimport { ICacheKey } from './ICache';\n\nexport const DEFAULT_EXPERIMENT_TTL = 1800;\nexport const DEFAULT_EXPERIMENT_TTR = 60;\nexport const DEFAULT_EXPERIMENT_DATAFILE_TTL = 1800;\nexport const DEFAULT_EXPERIMENT_DATAFILE_TTR = 60;\n\nexport const readCachedExperimentsEntries = async <T>(\n    cacheKey: ICacheKey,\n    experimentRefreshOptions: IExperimentRefreshOptions,\n    expProvider: IExperimentationProvider,\n    expConnectorName: string,\n    retailServerBaseURL: string\n): Promise<T | undefined> => {\n    const experimentationAppCache = msdyn365Commerce.connectorCache;\n    let experimentEntry: T | undefined;\n    if (experimentationAppCache) {\n        const experimentItem = experimentationAppCache.get<T>(cacheKey);\n        if (experimentItem && experimentItem.shouldRefresh) {\n            // doing background refresh here.\n            // tslint:disable-next-line:no-any\n            const refresh = new Promise<any>((res, rej) => {\n                let newExperimentsResult;\n                switch (experimentRefreshOptions.refreshType) {\n                    case RefreshType.DataFile:\n                        newExperimentsResult = expProvider.getConfigForClientSideInit();\n                        break;\n                    case RefreshType.Experiments:\n                        newExperimentsResult = expProvider.getExperiments(retailServerBaseURL, expConnectorName);\n                        break;\n                    default:\n                }\n                res(newExperimentsResult);\n            });\n            refresh\n                .then(experimentsRefreshRaw => {\n                    let experimentsRefresh;\n                    switch (experimentRefreshOptions.refreshType) {\n                        case RefreshType.DataFile:\n                            experimentsRefresh = JSON.stringify(experimentsRefreshRaw);\n                            break;\n                        case RefreshType.Experiments:\n                            experimentsRefresh = experimentsRefreshRaw.experiments;\n                            break;\n                        default:\n                            experimentsRefresh = experimentsRefreshRaw;\n                    }\n                    if (experimentsRefresh) {\n                        experimentationAppCache.put(cacheKey, { item: experimentsRefresh });\n                    }\n                })\n                .catch();\n        }\n        experimentEntry = experimentItem ? experimentItem.item : undefined;\n    }\n    return experimentEntry;\n};\n\nexport const saveCachedExperimentsEntries = async <T>(cacheKey: ICacheKey, experimentationsItem: T): Promise<boolean> => {\n    return (msdyn365Commerce.connectorCache && msdyn365Commerce.connectorCache.put<T>(cacheKey, { item: experimentationsItem })) || false;\n};\n"]}