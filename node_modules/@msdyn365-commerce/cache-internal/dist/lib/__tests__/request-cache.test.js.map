{"version":3,"file":"request-cache.test.js","sourceRoot":"","sources":["../../../src/__tests__/request-cache.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport 'jest';\nimport { autorun, isObservable } from 'mobx';\nimport { RequestCache } from '../request-cache';\n\ndescribe('Basic Cache Functionality', () => {\n    it('Can put new items in the cache', () => {\n        const cache = new RequestCache();\n\n        const primitiveItem = 'foo';\n        const arrayItem = [1, 2, 3];\n        const objectItem = { foo: { bar: 'baz' } };\n\n        cache.put({ typeName: 'string', key: '1' }, { item: primitiveItem });\n\n        const primitiveItemFromCache = cache.get({ typeName: 'string', key: '1' });\n        const primitiveItemFromCacheValue = cache.getValue({ typeName: 'string', key: '1' });\n\n        if (primitiveItemFromCache !== null) {\n            expect(isObservable(primitiveItemFromCache)).toBe(true);\n            expect(primitiveItemFromCacheValue).toEqual('foo');\n        } else {\n            throw new Error('Unable to get primitive item from cache');\n        }\n\n        cache.put({ typeName: 'array', key: '1' }, { item: arrayItem });\n        const arrayItemFromCache = cache.get({ typeName: 'array', key: '1' });\n        const arrayItemFromCacheValue = cache.getValue({ typeName: 'array', key: '1' });\n\n        if (arrayItemFromCache !== null) {\n            expect(isObservable(arrayItemFromCache)).toBe(true);\n            expect(arrayItemFromCacheValue).toEqual(arrayItem);\n            expect(cache.getValue({ typeName: 'array', key: '1' })).toEqual(arrayItem);\n        } else {\n            throw new Error('Unable to get array item from ReqeustCache');\n        }\n\n        cache.put({ typeName: 'object', key: '1' }, { item: objectItem });\n        const objectItemFromCache = cache.get({ typeName: 'object', key: '1' });\n        const objectItemFromCacheValue = cache.getValue({ typeName: 'object', key: '1' });\n\n        if (objectItemFromCache !== null) {\n            expect(isObservable(objectItemFromCache)).toBe(true);\n            expect(objectItemFromCacheValue).toEqual(objectItem);\n            expect(cache.getValue({ typeName: 'object', key: '1' })).toEqual(objectItem);\n        } else {\n            throw new Error('Unable to get object item from ReqeustCache');\n        }\n    });\n\n    it('Should return null on nonexistent keys', () => {\n        const cache = new RequestCache();\n\n        const fakeCacheItem = cache.get({ typeName: 'foo', key: 'bar' });\n        expect(fakeCacheItem).toBeUndefined();\n    });\n\n    it('Should update primitive values', () => {\n        const cache = new RequestCache();\n\n        const primitiveItemOne = 'foo';\n        const primitiveItemTwo = 'bar';\n\n        cache.put({ typeName: 'string', key: '1' }, { item: primitiveItemOne });\n        cache.put({ typeName: 'string', key: '1' }, { item: primitiveItemTwo });\n\n        const primitiveItemFromCache = cache.get({ typeName: 'string', key: '1' });\n        const primitiveItemFromCacheValue = cache.getValue({ typeName: 'string', key: '1' });\n\n        if (primitiveItemFromCache !== null) {\n            expect(isObservable(primitiveItemFromCache)).toBe(true);\n            expect(primitiveItemFromCacheValue).toEqual(primitiveItemTwo);\n        } else {\n            throw new Error('Unable to get updated primitive item from cache');\n        }\n    });\n\n    it('Should update arrays', () => {\n        const cache = new RequestCache();\n\n        const arrayOne = [1, 2, 3];\n        const arrayTwo = [4, 5, 6];\n\n        cache.put({ typeName: 'array', key: '1' }, { item: arrayOne });\n        cache.put({ typeName: 'array', key: '1' }, { item: arrayTwo });\n\n        const arrayFromCache = cache.get({ typeName: 'array', key: '1' });\n        const arrayFromCacheValue = cache.getValue({ typeName: 'array', key: '1' });\n\n        if (arrayFromCache !== null) {\n            expect(isObservable(arrayFromCache)).toBe(true);\n            expect(arrayFromCacheValue).toEqual(arrayTwo);\n        } else {\n            throw new Error('Unable to get updated array item from cache');\n        }\n    });\n\n    it('Should update objects', () => {\n        const cache = new RequestCache();\n\n        const objectOne = { foo: { bar: 'baz' } };\n        const objectTwo = { baz: { bar: 'foo' } };\n\n        cache.put({ typeName: 'object', key: '1' }, { item: objectOne });\n        cache.put({ typeName: 'object', key: '1' }, { item: objectTwo });\n\n        const objectFromCache = cache.get({ typeName: 'object', key: '1' });\n        const objectFromCacheValue = cache.getValue({ typeName: 'object', key: '1' });\n\n        if (objectFromCache !== null) {\n            expect(isObservable(objectFromCache)).toBe(true);\n            expect(objectFromCacheValue).toEqual(objectTwo);\n        } else {\n            throw new Error('Unable to get object item from cache');\n        }\n    });\n\n    it('Should delete cache items using del', () => {\n        const cache = new RequestCache();\n\n        const objectOne = { foo: { bar: 'baz' } };\n        const objectTwo = { baz: { bar: 'foo' } };\n\n        cache.put({ typeName: 'object', key: '1' }, { item: objectOne });\n        cache.put({ typeName: 'object', key: '2' }, { item: objectTwo });\n\n        cache.del({ typeName: 'object', key: '1' });\n\n        const deletedObjectFromCacheValue = cache.getValue({ typeName: 'object', key: '1' });\n        const objectFromCacheValue = cache.getValue({ typeName: 'object', key: '2' });\n\n        expect(deletedObjectFromCacheValue).toBeUndefined();\n        expect(objectFromCacheValue).toStrictEqual(objectTwo);\n    });\n\n    it('Should not throw an error for deleting an item that doesnt exist', () => {\n        const cache = new RequestCache();\n        cache.del({ typeName: 'object', key: '1' });\n\n        const deletedObjectFromCacheValue = cache.getValue({ typeName: 'object', key: '1' });\n        expect(deletedObjectFromCacheValue).toBeUndefined();\n    });\n});\n\ndescribe('Advanced Cache Functionality', () => {\n    it('Should automatically update primitives', () => {\n        const cache = new RequestCache();\n\n        const stringOne = 'foo';\n        const stringTwo = 'bar';\n\n        let observedValue: string | null = '';\n\n        cache.put({ typeName: 'string', key: '1' }, { item: stringOne });\n\n        autorun(() => {\n            const val = cache.getValue<string>({ typeName: 'string', key: '1' });\n            observedValue = val ? val : null;\n        });\n\n        expect(observedValue).toEqual(stringOne);\n        cache.put({ typeName: 'string', key: '1' }, { item: stringTwo });\n        expect(observedValue).toEqual(stringTwo);\n    });\n\n    it('Should automatically update arrays', () => {\n        const cache = new RequestCache();\n\n        const arrayOne = [1, 2, 3];\n        const arrayTwo = [4, 5, 6];\n\n        let observedValue: number = 0;\n\n        cache.put({ typeName: 'array', key: '1' }, { item: arrayOne });\n\n        autorun(() => {\n            const fromCache = cache.getValue({ typeName: 'array', key: '1' });\n            if (fromCache) {\n                // @ts-ignore\n                observedValue = fromCache[0];\n            }\n        });\n\n        expect(observedValue).toEqual(arrayOne[0]);\n        cache.put({ typeName: 'array', key: '1' }, { item: arrayTwo });\n        expect(observedValue).toEqual(arrayTwo[0]);\n    });\n\n    it('Should automatically update objects', () => {\n        const cache = new RequestCache();\n\n        const objectOne = { foo: { bar: 'baz' } };\n        const objectTwo = { baz: { bar: 'foo' } };\n\n        let observedValue: object | undefined = {};\n\n        cache.put({ typeName: 'object', key: '1' }, { item: objectOne });\n\n        autorun(() => {\n            observedValue = cache.getValue({ typeName: 'object', key: '1' });\n        });\n\n        expect(observedValue).toEqual(objectOne);\n        cache.put({ typeName: 'object', key: '1' }, { item: objectTwo });\n        expect(observedValue).toEqual(objectTwo);\n    });\n});\n"]}