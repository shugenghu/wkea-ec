{"version":3,"file":"ICache.js","sourceRoot":"","sources":["../../src/ICache.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAIH,MAAM,CAAN,IAAY,YAGX;AAHD,WAAY,YAAY;IACpB,+DAAY,CAAA;IACZ,uDAAQ,CAAA;AACZ,CAAC,EAHW,YAAY,KAAZ,YAAY,QAGvB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IDictionary } from '@msdyn365-commerce/core-internal';\n\nexport enum ICacheSource {\n    RequestCache,\n    AppCache\n}\n\nexport interface ICacheKey {\n    key: string;\n    typeName: string;\n}\n\nexport interface ICacheItem<T> {\n    item: T;\n    shouldRefresh?: boolean;\n    error?: boolean;\n\n    // property to indicate the source whether it is app/request\n    s?: ICacheSource;\n}\n\n/**\n * Interface exposing methods for caching\n */\nexport interface ICache {\n    /**\n     * @function        {put}           - Method to insert an item in the cache\n     * @param cacheKey  {ICacheKey}     - object to build the cache key\n     * @param cacheItem {ICacheItem}    - item that needs to be inserted in the cache\n     */\n    put<T = unknown>(cacheKey: ICacheKey, item: ICacheItem<T>): boolean;\n\n    /**\n     * @function        {get}           - Method to get the cached item\n     * @param cacheKey  {ICacheKey}     - object to build the cache key\n     * @return          {ICacheItem}    - cached value against the given cache key\n     */\n    get<T = unknown>(cacheKey: ICacheKey): ICacheItem<T> | undefined;\n\n    /**\n     * @function        {getValue}      - Method to get the cached item\n     * @param cacheKey  {ICacheKey}     - object to build the cache key\n     * @return          {T}             - cached value against the given cache key\n     */\n    getValue<T = unknown>(cacheKey: ICacheKey): T | undefined;\n\n    /**\n     * @function        {getAllItems}   - Method to get all cached items for a given type\n     * @param typeName  {typeName}      - typeName for which all items need to be fetched\n     * @return          {ICacheItem}    - dictionary of cache items of the given typeName\n     */\n    getAllItems<T = unknown>(typeName: string): IDictionary<ICacheItem<T>> | undefined;\n\n    /**\n     * @param cacheKey  {ICacheKey}     - object to build the cache key\n     * @param toCache   {ICache}        - cache object to which the item needs to be copied\n     * @return          {ICacheItem}    - cache item that was copied\n     */\n    copyTo<T = unknown>(cacheKey: ICacheKey, toCache: ICache): ICacheItem<T> | undefined;\n\n    /**\n     * @function    {del}               - Method to delete an item from the cache\n     * @param key   {ICacheKey[]}       - Array of ICacheGetData items whose values need to be deleted from cache\n     * @return      {number}            - returns true if the cache key is deleted successfully. Does not throw errors.\n     */\n    del(cacheKey: ICacheKey): boolean;\n\n    /**\n     * @function    {flushAll}          - Method to flush all data from the cache\n     */\n    flushAll(): void;\n}\n"]}