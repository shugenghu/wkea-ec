/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IDictionary, IRequestContext } from '@msdyn365-commerce/core-internal';
import NodeCache from 'node-cache';
import { ICache, ICacheItem, ICacheKey } from './ICache';
import { ICacheSettings } from './ICacheSettings';
/**
 * Server app cache implementation
 */
export declare class AppCache implements ICache {
    nodeCache: NodeCache;
    private entityKeys;
    private settings;
    private refreshTimeout;
    private requestContext?;
    constructor(settings: ICacheSettings);
    /**
     * @function        {setRefresh}               - Method to insert an item in the cache
     * @param requestContext  {requestContext}     - requestContext
     */
    setRequestContext(requestContext: IRequestContext): void;
    /**
     * @function        {getCacheEntries}          - Method to get cache entries
     */
    getCacheEntries(): string[];
    /**
     * @function        {put}           - Method to insert an item in the cache
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @param cacheItem {ICacheItem}    - item that needs to be inserted in the cache
     */
    put<T = unknown>(cacheKey: ICacheKey, item: ICacheItem<T>): boolean;
    /**
     * @function        {get<T>}        - Method to get the cached item
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @return          {ICacheItem<T>} - cached value against the given cache key
     */
    get<T = unknown>(cacheKey: ICacheKey): ICacheItem<T> | undefined;
    /**
     * @function        {getAllItems}   - Method to get all cached items for a given type
     * @param typeName  {typeName}      - typeName for which all items need to be fetched
     * @return          {ICacheItem}    - dictionary of cache items of the given typeName
     */
    getAllItems<T = unknown>(typeName: string): IDictionary<ICacheItem<T>> | undefined;
    /**
     * @function        {hasCacheSetting}   - tells if there is a cache setting defined for the given entity type
     * @param typeName  {typeName}          - typeName for which all items need to be fetched
     * @return          {boolean}           - true if a cache setting ttr/ttl is specified for the given entity
     */
    hasCacheSetting(typeName: string): boolean;
    /**
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @param toCache   {ICache}        - cache object to which the item needs to be copied
     * @return          {ICacheItem}    - cache item that was copied
     */
    copyTo<T = unknown>(cacheKey: ICacheKey, toCache: ICache): ICacheItem<T> | undefined;
    /**
     * @function        {getValue<T>}   - Method to get the cached item
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @return          {ICacheItem<T>} - cached value against the given cache key
     */
    getValue<T = unknown>(cacheKey: ICacheKey): T | undefined;
    /**
     * @function        {del}           - Method to delete an item from the cache
     * @param cacheKey  {ICacheKey}     - Array of ICacheGetData items whose values need to be deleted from cache
     * @return          {boolean}       - returns true if the cache key is deleted successfully. Does not throw errors.
     */
    del(cacheKey: ICacheKey): boolean;
    /**
     * @function    {keys}              - Method to fetch all the keys in the cache
     * @return      {string[]}          - returns a list of all the keys in the cache
     */
    keys(): string[];
    /**
     * @function    {flushAll}          - Method to flush all data from the cache
     */
    flushAll(): void;
    private _computeCacheKey;
    private _validateCacheKey;
    private _getTTR;
    private _getTTL;
    private _setRefresh;
    private _isRefreshExpired;
}
