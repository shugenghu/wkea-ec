/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IDictionary } from '@msdyn365-commerce/core-internal';
import { ICache, ICacheItem, ICacheKey } from './ICache';
/**
 * Client cache implementation
 */
export declare class RequestCache implements ICache {
    private internalCache;
    /**
     * @function        {put}           - Method to insert an item in the cache
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @param cacheItem {ICacheItem}    - item that needs to be inserted in the cache
     */
    put<T = unknown>(cacheKey: ICacheKey, item: ICacheItem<T>): boolean;
    /**
     * @function        {get}           - Method to get the cached item
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @return          {IAny}          - cached value against the given cache key
     */
    get<T = unknown>(cacheKey: ICacheKey): ICacheItem<T> | undefined;
    /**
     * @function        {get}           - Method to get the cached item
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @return          {IAny}          - cached value against the given cache key
     */
    getAllItems<T = unknown>(typeName: string): IDictionary<ICacheItem<T>> | undefined;
    /**
     * @function        {getValue}           - Method to get the cached item
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @return          {IAny}          - cached value against the given cache key
     */
    getValue<T = unknown>(cacheKey: ICacheKey): T | undefined;
    /**
     * @param cacheKey  {ICacheKey}     - object to build the cache key
     * @param toCache   {ICache}        - cache object to which the item needs to be copied
     * @return          {ICacheItem}    - cache item that was copied
     */
    copyTo<T = unknown>(cacheKey: ICacheKey, toCache: ICache): ICacheItem<T> | undefined;
    /**
     * @function    {del}               - Method to delete an item from the cache
     * @param key   {ICacheKey}       - Array of ICacheGetData items whose values need to be deleted from cache
     * @return      {number}            - returns true if the cache key is deleted successfully. Does not throw errors.
     */
    del(cacheKey: ICacheKey): boolean;
    /**
     * @function    {flushAll}          - Method to flush all data from the cache
     */
    flushAll(): void;
    /**
     * @function    {keys}              - Method to fetch all the keys in the cache
     * @return      {string[]}          - returns a list of all the keys in the cache
     */
    keys(): string[];
    /**
     * Get the value out of a cache item
     * This returns the raw value of the item, it will *not* be a MobX observable value
     * @param item The observable cache item to retireve the value from
     */
    private _value;
}
