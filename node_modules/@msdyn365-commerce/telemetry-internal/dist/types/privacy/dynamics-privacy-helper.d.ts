/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { DynamicsPrivacyLog } from './dynamics-privacy-log';
/**
 * Wraps the given data in an 'AccessControl' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asAccessControl<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'CustomerContent' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asCustomerContent<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'EUII' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asEUII<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'SupportData' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asSupportData<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'AccountData' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asAccountData<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'PublicPersonalData' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asPublicPersonalData<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'EUPI' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asEUPI<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'OII' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asOII<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'SystemMetadata' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asSystemMetadata<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Wraps the given data in an 'PublicNonPersonalData' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export declare function asPublicNonPersonalData<T>(data: T): DynamicsPrivacyLog<T>;
/**
 * Gets the data out of the input object if it is a DynamicsPrivacyLog object.
 * Filters data if it contains privacy information.
 * @param input Input object that may or may not be a DynamicsPrivacyLog
 */
export declare function getFilteredData(input: any): any;
