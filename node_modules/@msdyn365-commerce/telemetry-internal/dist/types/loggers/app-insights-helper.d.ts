/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { SeverityLevel } from 'applicationinsights/out/Declarations/Contracts';
import { ITelemetryContext } from '../interfaces';
import { IDictionary } from '../interfaces/IDictionary';
/**
 * Key value for Custom Tags custom dimension in AppInsights events
 */
export declare const customTagsKey: string;
/**
 * Key value for Message Template custom dimension in AppInsights events
 */
export declare const messageTemplateKey: string;
/**
 * Key value for Module ID custom dimension in AppInsights events
 */
export declare const moduleIdKey: string;
/**
 * Key value for Module Type custom dimension in AppInsights events
 */
export declare const moduleTypeKey: string;
/**
 * Key value for Page Type custom dimension in AppInsights events
 */
export declare const pageTypeKey: string;
/**
 * Key value for Page Type custom dimension in AppInsights events
 */
export declare const cmsPageIdKey: string;
/**
 * Builds custom properties list from telemetry context and message template arguments
 * @param context Telemetry context from which the properties will be pulled
 * @param placeholders List of placeholders in messageTemplate along with position in string
 * @param values Arguments to replace placeholders
 */
export declare function buildPropertiesList(context: ITelemetryContext, placeholders: Map<string, any>, customTags?: string[]): IDictionary<string>;
/**
 * Converts the given telemetry context into AppInsights readable properties
 * @param context Telemetry context from which the properties will be pulled
 */
export declare function getPropertiesFromContext(context: ITelemetryContext): IDictionary<string>;
/**
 * Given a severity level and if debug flag is set or not, this method will return true if we should bypass logs
 * @param severityLevel - SeverityLevel enum
 * @param isDebug - boolean
 */
export declare function shouldSkipLogging(severityLevel: SeverityLevel | undefined, isDebug: boolean): boolean;
