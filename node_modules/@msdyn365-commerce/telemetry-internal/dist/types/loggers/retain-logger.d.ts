import { ILog, ITelemetryContext, ITraceLogger, LogLevel } from '../interfaces';
import { ITrackDependency } from '../interfaces/ITrackDependency';
/**
 * This is a logger that stores logs so they can be sent back with the response
 */
export declare class RetainLogger implements ITraceLogger {
    private logList;
    /**
     * @internal
     * Retains a trace message
     * @param logLevel LogLevel of the message
     * @param context Telemetry context to add to log
     * @param messageTemplate Structured log formatted string
     * @param placeholders List of placeholders in messageTemplate along with position in string
     * @param values Arguments to replace placeholders
     * @param customTags Array of strings to attach to log
     */
    sendLog(logLevel: LogLevel, context: ITelemetryContext, messageTemplate: string, placeholders: Map<string, any>, customTags?: string[], exception?: Error): void;
    /**
     * @internal
     * Retains a trace message
     * @param logLevel Severity level of the log
     * @param message String to log
     * @param args Any additional objects to log
     * @param context Additional properties to add to the log
     */
    log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void;
    /**
     * @internal
     * Retains an error object
     * @param error Error object to log
     * @param context Additional properties to add to the log
     */
    exception(exception: Error, context: ITelemetryContext): void;
    /**
     * @internal
     * Retains a metric
     * @param name Name of the metric to log
     * @param value Value of the metric to log
     * @param context Additional properties to add to the log
     */
    trackMetric(name: string, value: number, context: ITelemetryContext): void;
    trackEvent<TProperties, TMeasurements>(name: string, properties?: TProperties, measurements?: TMeasurements): void;
    /**
     * Track a page view
     *
     * @param {string} name
     * @param {string} [url]
     */
    trackPageView(name: string, url?: string): void;
    /**
     * Track request
     * @param options the request options
     */
    trackDependency(options: ITrackDependency): void;
    getLogs(): ILog[];
}
