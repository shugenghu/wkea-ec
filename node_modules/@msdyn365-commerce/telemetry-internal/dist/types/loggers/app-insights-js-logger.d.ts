/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';
import { ITrackDependency } from '../interfaces/ITrackDependency';
/**
 * Client-side logger that sends messages to Application Insights
 */
export declare class AppInsightsJSLogger implements ITraceLogger {
    /**
     * Mapping between telemetry framework LogLevel and AppInsights JS Severity Levels
     */
    private static _severityLevelMapping;
    private options;
    /**
     * Creates a new instance of AppInsights Logger
     * @param instrumentationKey The instrumentation key for the Application Insights instance
     */
    constructor();
    initialize(options: ITraceLoggerParams): void;
    /**
     * @internal
     * Logs a trace message to AppInsights
     * @param logLevel LogLevel of the message
     * @param context Telemetry context to add to log
     * @param messageTemplate Structured log formatted string
     * @param placeholders List of placeholders in messageTemplate along with position in string
     * @param values Arguments to replace placeholders
     * @param customTags Array of strings to attach to log
     */
    sendLog(logLevel: LogLevel, context: ITelemetryContext, messageTemplate: string, placeholders: Map<string, any>, customTags?: string[], exception?: Error): void;
    /**
     * @internal
     * Logs a trace message to AppInsights
     * @param logLevel Severity level of the log
     * @param message String to log
     * @param args Any additional objects to log
     * @param context Additional properties to add to the log
     */
    log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void;
    /**
     * @internal
     * Logs an error object to AppInsights as an exception
     * @param error Error object to log
     * @param context Additional properties to add to the log
     */
    exception(error: Error, context: ITelemetryContext): void;
    /**
     * @internal
     * No-op - not tracking client side metrics
     * @param name name of the metric
     * @param value value of the metric
     */
    trackMetric(name: string, value: number, context: ITelemetryContext): void;
    /**
     * Track a structured event with app insights
     *
     * @template TProperties interface for properties
     * @template TMeasurements interface for measurements to go with the event
     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options
     */
    trackEvent<TProperties, TMeasurements>(name: string, properties?: TProperties, measurements?: TMeasurements, context?: ITelemetryContext): void;
    /**
     * Track a page view
     *
     * @param {string} name
     * @param {string} [url]
     */
    trackPageView(name: string, url?: string): void;
    /**
     * Track request
     * @param options request options
     */
    trackDependency(options: ITrackDependency): void;
}
