/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IDictionary, ITelemetryContext, ITraceLoggerParams, ITrackDependency, LogLevel } from '../interfaces';
/***
 * Interface for which methods need to be implemented for a trace logger.
 * NOTE: Please do not call these methods directly, as they are meant to be
 * hooked up to the telemetry framework, not used directly. If you want to
 * call a logging method, please use this.props.telemetry instead.
 */
export interface ITraceLogger {
    /**
     * Additional context arguments passed to the logger from the telemetry object itself
     *
     * @param options Options from telemetry object initializing this
     */
    initialize?(options: ITraceLoggerParams): void;
    /**
     * @internal
     * NOTE: Please do not call these methods directly, as they are meant to be
     * hooked up to the telemetry framework, not used directly. If you want to
     * call a logging method, please use this.props.telemetry.<log method> instead.
     * @param logLevel LogLevel of the message
     * @param context Telemetry context to add to log
     * @param messageTemplate Structured log formatted string
     * @param placeholders List of placeholders in messageTemplate along with position in string
     * @param values Arguments to replace placeholders
     * @param customTags Array of strings to attach to log
     */
    sendLog(logLevel: LogLevel, context: ITelemetryContext, messageTemplate: string, placeholders: Map<string, any>, customTags?: string[], exception?: Error): void;
    /**
     * @internal
     * Logs a trace message with the given LogLevel
     * NOTE: Please do not call these methods directly, as they are meant to be
     * hooked up to the telemetry framework, not used directly. If you want to
     * call a logging method, please use this.props.telemetry.<log method> instead.
     */
    log(logLevel: LogLevel, message: string, args: any[], context: ITelemetryContext): void;
    /**
     * @internal
     * Logs an Error object as an exception
     * NOTE: Please do not call these methods directly, as they are meant to be
     * hooked up to the telemetry framework, not used directly. If you want to
     * call a logging method, please use telemetry.exception(error) instead.
     */
    exception(error: Error, context: ITelemetryContext): void;
    /**
     * @internal
     * Logs an metric value
     * NOTE: Please do not call these methods directly, as they are meant to be
     * hooked up to the telemetry framework, not used directly. If you want to
     * call a logging method, please use telemetry.trackMetric(name, vlaue) instead.
     */
    trackMetric(name: string, value: number, context: ITelemetryContext): void;
    /**
     * Tracks page view event
     * NOTE: Please do not call these methods directly, as they are meant to be
     * hooked up to the telemetry framework, not used directly. If you want to
     * call a logging method, please use telemetry.trackMetric(name, vlaue) instead.
     *
     * @param {string} name
     * @param {string} [url]
     * @memberof ITraceLogger
     * @interal
     */
    trackPageView(name: string, url?: string): void;
    /**
     * @internal
     * Logs an event
     */
    trackEvent<TProperties = Partial<IDictionary<string>>, TMeasurements = Partial<IDictionary<number>>>(name: string, properties?: TProperties, measurements?: TMeasurements, context?: ITelemetryContext): void;
    /**
     * Track a dependency
     *
     * @internal
     * @param options the dependency options
     */
    trackDependency(options: ITrackDependency): void;
}
