/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ITelemetryCommon, ITelemetryModuleContext, LogLevel } from '../interfaces';
import { TelemetryLogOptions } from '../telemetry';
export declare const NumericLogLevel: {
    trace: number;
    debug: number;
    information: number;
    warning: number;
    error: number;
    critical: number;
    none: number;
};
export declare type ILog = {
    logLevel: LogLevel;
    message: string;
};
/**
 * Interface exposing methods for trace logging, telemetry event logging, and data attribute rendering
 * @property trace          {Function}  - Logs the given message at a Trace level
 * @property debug          {Function}  - Logs the given message at a Debug level
 * @property information    {Function}  - Logs the given message at a Information level
 * @property warning        {Function}  - Logs the given message at a Warning level
 * @property error          {Function}  - Logs the given message at a Error level
 * @property critical       {Function}  - Logs the given message at a Critical level
 * @property exception      {Function}  - Logs the given error object
 */
export interface ITelemetry extends ITelemetryCommon {
    /**
     * Logs a structured message at the given log level, with optional custom tags and/or an exception
     * @param logLevel LogLevel of the message
     * @param messageTemplate String to log, denoting placeholders with {placeholder}
     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object
     */
    log(logLevel: LogLevel, messageTemplate: string, logOptions?: TelemetryLogOptions): void;
    /**
     * Logs a trace message with the Trace log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    trace(message: string, ...args: any): void;
    /**
     * Logs a trace message with the Debug log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    debug(message: string, ...args: any): void;
    /**
     * Logs a trace message with the Information log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    information(message: string, ...args: any): void;
    /**
     * Logs a trace message with the Warning log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    warning(message: string, ...args: any): void;
    /**
     * Logs a trace message with the Error log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    error(message: string, ...args: any): void;
    /**
     * Logs a trace message with the Critical log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    critical(message: string, ...args: any): void;
    /**
     * Logs an Error object as an exception
     * @param error The Error object to log
     */
    exception(error: Error): void;
    /**
     * Sets the portion of the telemetry context that will be attached to all logs for a module
     * @param moduleContext Part of the telemetry context that lasts during a module rendering
     */
    setTelemetryModuleContext(moduleContext: ITelemetryModuleContext): () => ITelemetry;
}
