/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IDictionary, ITelemetryRequestContext, ITrackDependency, TelemetryEvent, TelemetryEventContent } from '../interfaces';
export declare enum LogLevel {
    /**
     * For information that's typically valuable only for debugging. These messages may contain sensitive application data and so shouldn't be enabled in a production environment. Disabled by default.
     */
    Trace = "trace",
    /**
     * For information that may be useful in development and debugging. Example: Entering method Configure with flag set to true. Enable Debug level logs in production only when troubleshooting, due to the high volume of logs.
     */
    Debug = "debug",
    /**
     * For tracking the general flow of the app. These logs typically have some long-term value. Example: Request received for path /api/todo
     */
    Information = "information",
    /**
     * For abnormal or unexpected events in the app flow.
     * These may include errors or other conditions that don't cause the app to stop but might need to be investigated. Handled exceptions are a common place to use the Warning log level. Example: FileNotFoundException for file quotes.txt.
     */
    Warning = "warning",
    /**
     * For errors and exceptions that cannot be handled.
     * These messages indicate a failure in the current activity or operation (such as the current HTTP request), not an app-wide failure. Example log message: Cannot insert record due to duplicate key violation.
     */
    Error = "error",
    /**
     * For failures that require immediate attention. Examples: data loss scenarios, out of disk space.
     */
    Critical = "critical",
    None = "none"
}
/**
 * Common interface shared by internal telemetry and telemetry client
 */
export interface ITelemetryCommon {
    /**
     * Log a metric
     * @param name metric name
     * @param value metriv value
     */
    trackMetric(name: string, value: number): void;
    /**
     * Log an event
     * @param trackEventOptions Event data
     */
    trackEvent<TProperties = Partial<IDictionary<string>>, TMeasurements = Partial<IDictionary<number>>>(name: string, properties?: TProperties, measurements?: TMeasurements): void;
    /**
     * Track a dependency
     *
     * @param {ITrackDependency} options the dependency options
     */
    trackDependency(options: ITrackDependency): void;
    /**
     * Sets the portion of the telemetry context that will be attached to all logs for a request
     * @param requestContext Part of the telemetry context that lasts the entire request
     */
    setTelemetryRequestContext(requestContext: ITelemetryRequestContext): void;
    /**
     * Log an event
     * @param eventType event type
     * @param payload event payload
     */
    logEvent(eventType: TelemetryEvent, payload: TelemetryEventContent): void;
    /**
     * Render telemetry data attribute
     * @param telemetryId Unique ID for telemetry object
     * @param additionalTelemetryData Any additional properties to set
     */
    setTelemetryAttribute?(telemetryId: string, additionalTelemetryData?: object): IDictionary<string>;
}
