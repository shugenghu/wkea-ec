import { IDataAttributeRenderer, IEventLogger, IExpLogger, IRegisterTraceLoggerOptions, ITelemetry, ITelemetryContext, ITelemetryRequestContext, ITraceLogger, LogLevel, TelemetryEvent, TelemetryEventContent } from '../interfaces';
import { IDictionary } from '../interfaces/IDictionary';
import { ITrackDependency } from '../interfaces/ITrackDependency';
import { InternalTelemetryLogOptions } from './internal-telemetry-log-options';
import { TelemetryLogOptions } from './telemetry-log-options';
/**
 * Base class for Telemetry & Internal telemetry
 * @abstract
 * @class TelemetryBase
 */
export declare abstract class TelemetryBase {
    /**
     * Enable Data Analytics feature switch
     */
    protected _enableDataAnalytics: boolean;
    /**
     * Map of timers
     */
    protected _timers: Map<string, number>;
    /**
     * Array of ILogger objects representing the trace loggers used.
     */
    protected _traceLoggers: ITraceLogger[];
    /**
     * An object holding the information about telemetry event loggers.
     */
    protected _eventLoggers: IEventLogger[];
    /**
     * An object holding the information about the experimentation logger.
     */
    protected _expLogger: IExpLogger | undefined;
    /**
     * Array holding the registered Data Attribute Renderers
     */
    protected _attributeRenderers: IDataAttributeRenderer[];
    /**
     * Context object used with telemetry.
     */
    protected _telemetryContext: ITelemetryContext;
    /**
     * Dictionary of loggers by name (if one is provided)
     */
    protected _namedLoggers: IDictionary<ITraceLogger>;
    /**
     * WebAnalytics client used to send BI events
     */
    protected _webAnalyticsPlugin?: object;
    static generateGuid: () => string;
    constructor();
    /**
     * Start a named timer
     *
     * @param {string} id of timer
     * @memberof InternalTelemetry
     */
    startTimer: (timerId: string) => void;
    /**
     * Stops a named timer
     *
     * @param {string} timerId id of timer
     * @param {boolean} [removeTimer=true] should time be removed from dictionary? default rue
     * @returns {number} elapsed time in ms
     */
    stopTimer: (timerId: string, removeTimer?: boolean) => number;
    /**
     * Saves the feature swtich marking whether data analytics is enabled for this request
     */
    enableDataAnalytics: (enableDataAnalytics: boolean) => void;
    /**
     * Renders a data attribute string
     */
    setTelemetryAttribute: (telemetryId: string, additionalTelemetryData?: object | undefined) => IDictionary<string>;
    /**
     * Logs a telemetry event.
     */
    logEvent: (eventType: TelemetryEvent, payload: TelemetryEventContent) => void;
    /**
     * Tracks a metric
     */
    trackMetric: (name: string, value: number) => void;
    /**
     * Tracks an event
     */
    trackEvent: <TProperties, TMeasurements>(name: string, properties?: TProperties | undefined, measurements?: TMeasurements | undefined, context?: ITelemetryContext | undefined) => void;
    trackPageView: (page: string, url?: string | undefined) => void;
    trackDependency: (options: ITrackDependency) => void;
    /**
     * Adds the given trace logger to the list of trace loggers.
     * @param traceLogger - The ILogger object to be added to the list of trace loggers
     */
    registerTraceLogger: (options: IRegisterTraceLoggerOptions) => void;
    /**
     * Adds the given event logger to the list of event loggers
     * @param eventLogger - The IEventLogger object to be added to the list of event loggers
     */
    registerEventLogger: (eventLogger: IEventLogger) => void;
    /**
     * Adds the given experimentation logger to the telemetry object
     * @param expLogger - The IExpLogger object to be added
     */
    registerExpLogger: (expLogger: IExpLogger) => void;
    /**
     * Adds the given attribute renderer to the list of attribute renderers
     * @param attributeRenderer - The IDataAttributeRenderer object to be added to the list of attribute renderers
     */
    registerAttributeRenderer: (attributeRenderer: IDataAttributeRenderer) => void;
    /**
     * Registers the Web Analytics plugin for use in the BI logging framework
     */
    registerWebAnalyticsPlugin: (webAnalyticsPlugin: object) => void;
    /**
     * Merges the properties specific to the current request that should be added to every log
     * @param requestContext Contains the context items specific to the current request
     */
    setTelemetryRequestContext: (requestContext: Partial<ITelemetryRequestContext>) => void;
    /**
     * Gets named logger if it exists
     *
     * @param {string} name name of logger to get
     */
    getNamedLoggerInstance: <T extends unknown = ITelemetry>(name: string) => T | undefined;
    /**
     * String formatter
     * @param templateString Template string
     * @param args ordered argument list
     */
    stringFormat: (templateString: string, args: string[]) => string;
    /**
     * Helper to notify trace loggers
     *
     * @private
     * @memberof Telemetry
     */
    protected notifyTraceLoggers: (fx: (logger: ITraceLogger) => void) => void;
    protected _log: (logLevel: LogLevel, messageTemplate: string, logOptions?: InternalTelemetryLogOptions | TelemetryLogOptions | undefined) => void;
    /**
     * Generates the event name for a custom click event
     * @param payload Payload of custom event
     */
    private _generateEventName;
}
