/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IInternalTelemetry, ITelemetryModuleContext, LogLevel } from '../interfaces';
import { InternalTelemetryLogOptions } from './internal-telemetry-log-options';
import { TelemetryBase } from './telemetry-base';
/**
 * Telemetry client containing trace loggers
 */
export declare class InternalTelemetry extends TelemetryBase implements IInternalTelemetry {
    /**
     * Creates a new instance of InternalTelemetry.
     */
    constructor();
    setTelemetryModuleContext: (moduleContext: ITelemetryModuleContext) => () => InternalTelemetry;
    /**
     * Logs a structured message at the given log level, with optional custom tags and/or an exception
     * @param logLevel LogLevel of the message
     * @param messageTemplate String to log, denoting placeholders with {placeholder}.
     * Example input string: "Hello {signedInUser}! Good {morningOrEvening}!"
     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.
     * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.
     */
    log: (logLevel: LogLevel, messageTemplate: string, logOptions?: InternalTelemetryLogOptions | undefined) => void;
}
