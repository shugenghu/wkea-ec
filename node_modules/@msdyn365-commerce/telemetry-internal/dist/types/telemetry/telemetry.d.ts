/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ITelemetry, ITelemetryModuleContext, LogLevel } from '../interfaces';
import { TelemetryBase } from './telemetry-base';
import { TelemetryLogOptions } from './telemetry-log-options';
/**
 * Telemetry client containing trace loggers
 */
export declare class Telemetry extends TelemetryBase implements ITelemetry {
    /**
     * Creates a new instance of Telemetry.
     */
    constructor();
    /**
     * Logs a trace message with the Trace log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    trace: (message: string, ...args: unknown[]) => void;
    /**
     * Logs a trace message with the Debug log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    debug: (message: string, ...args: unknown[]) => void;
    /**
     * Logs a trace message with the Information log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    information: (message: string, ...args: unknown[]) => void;
    /**
     * Logs a trace message with the Warning log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    warning: (message: string, ...args: unknown[]) => void;
    /**
     * Logs a trace message with the Error log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    error: (message: string, ...args: unknown[]) => void;
    /**
     * Logs a trace message with the Critical log level
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    critical: (message: string, ...args: unknown[]) => void;
    /**
     * Logs an Error object as an exception
     * @param error The Error object to log
     */
    exception: (error: Error) => void;
    /**
     * Sets the properties specific to the current module that should be added to every log
     * @param moduleContext Contains the context items specific to the current module
     */
    setTelemetryModuleContext: (moduleContext: ITelemetryModuleContext) => () => Telemetry;
    /**
     * Logs a structured message at the given log level, with optional custom tags and/or an exception
     * @param logLevel LogLevel of the message
     * @param messageTemplate String to log, denoting placeholders with {placeholder}.
     * Example input string: "Hello {signedInUser}! Good {morningOrEvening}!"
     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.
     * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.
     */
    log: (logLevel: LogLevel, messageTemplate: string, logOptions?: TelemetryLogOptions | undefined) => void;
    /**
     * Logs a trace message with the given LogLevel
     * @param logLevel LogLevel of the trace message
     * @param message The string to log
     * @param args Any extra arguments to log. Will be converted to strings and appended to message
     */
    private _logTrace;
}
