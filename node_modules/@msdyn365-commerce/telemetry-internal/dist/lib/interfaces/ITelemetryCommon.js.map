{"version":3,"file":"ITelemetryCommon.js","sourceRoot":"","sources":["../../../src/interfaces/ITelemetryCommon.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAIH,MAAM,CAAN,IAAY,QA4BX;AA5BD,WAAY,QAAQ;IAChB;;OAEG;IACH,2BAAe,CAAA;IACf;;OAEG;IACH,2BAAe,CAAA;IACf;;OAEG;IACH,uCAA2B,CAAA;IAC3B;;;OAGG;IACH,+BAAmB,CAAA;IACnB;;;OAGG;IACH,2BAAe,CAAA;IACf;;OAEG;IACH,iCAAqB,CAAA;IACrB,yBAAa,CAAA;AACjB,CAAC,EA5BW,QAAQ,KAAR,QAAQ,QA4BnB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IDictionary, ITelemetryRequestContext, ITrackDependency, TelemetryEvent, TelemetryEventContent } from '../interfaces';\n\nexport enum LogLevel {\n    /**\n     * For information that's typically valuable only for debugging. These messages may contain sensitive application data and so shouldn't be enabled in a production environment. Disabled by default.\n     */\n    Trace = 'trace',\n    /**\n     * For information that may be useful in development and debugging. Example: Entering method Configure with flag set to true. Enable Debug level logs in production only when troubleshooting, due to the high volume of logs.\n     */\n    Debug = 'debug',\n    /**\n     * For tracking the general flow of the app. These logs typically have some long-term value. Example: Request received for path /api/todo\n     */\n    Information = 'information',\n    /**\n     * For abnormal or unexpected events in the app flow.\n     * These may include errors or other conditions that don't cause the app to stop but might need to be investigated. Handled exceptions are a common place to use the Warning log level. Example: FileNotFoundException for file quotes.txt.\n     */\n    Warning = 'warning',\n    /**\n     * For errors and exceptions that cannot be handled.\n     * These messages indicate a failure in the current activity or operation (such as the current HTTP request), not an app-wide failure. Example log message: Cannot insert record due to duplicate key violation.\n     */\n    Error = 'error',\n    /**\n     * For failures that require immediate attention. Examples: data loss scenarios, out of disk space.\n     */\n    Critical = 'critical',\n    None = 'none'\n}\n\n/**\n * Common interface shared by internal telemetry and telemetry client\n */\n\nexport interface ITelemetryCommon {\n    /**\n     * Log a metric\n     * @param name metric name\n     * @param value metriv value\n     */\n    trackMetric(name: string, value: number): void;\n\n    /**\n     * Log an event\n     * @param trackEventOptions Event data\n     */\n    trackEvent<TProperties = Partial<IDictionary<string>>, TMeasurements = Partial<IDictionary<number>>>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements\n    ): void;\n\n    /**\n     * Track a dependency\n     *\n     * @param {ITrackDependency} options the dependency options\n     */\n    trackDependency(options: ITrackDependency): void;\n\n    /**\n     * Sets the portion of the telemetry context that will be attached to all logs for a request\n     * @param requestContext Part of the telemetry context that lasts the entire request\n     */\n    setTelemetryRequestContext(requestContext: ITelemetryRequestContext): void;\n\n    /**\n     * Log an event\n     * @param eventType event type\n     * @param payload event payload\n     */\n    logEvent(eventType: TelemetryEvent, payload: TelemetryEventContent): void;\n\n    /**\n     * Render telemetry data attribute\n     * @param telemetryId Unique ID for telemetry object\n     * @param additionalTelemetryData Any additional properties to set\n     */\n    setTelemetryAttribute?(telemetryId: string, additionalTelemetryData?: object): IDictionary<string>;\n}\n"]}