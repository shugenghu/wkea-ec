/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
export var LogLevel;
(function (LogLevel) {
    /**
     * For information that's typically valuable only for debugging. These messages may contain sensitive application data and so shouldn't be enabled in a production environment. Disabled by default.
     */
    LogLevel["Trace"] = "trace";
    /**
     * For information that may be useful in development and debugging. Example: Entering method Configure with flag set to true. Enable Debug level logs in production only when troubleshooting, due to the high volume of logs.
     */
    LogLevel["Debug"] = "debug";
    /**
     * For tracking the general flow of the app. These logs typically have some long-term value. Example: Request received for path /api/todo
     */
    LogLevel["Information"] = "information";
    /**
     * For abnormal or unexpected events in the app flow.
     * These may include errors or other conditions that don't cause the app to stop but might need to be investigated. Handled exceptions are a common place to use the Warning log level. Example: FileNotFoundException for file quotes.txt.
     */
    LogLevel["Warning"] = "warning";
    /**
     * For errors and exceptions that cannot be handled.
     * These messages indicate a failure in the current activity or operation (such as the current HTTP request), not an app-wide failure. Example log message: Cannot insert record due to duplicate key violation.
     */
    LogLevel["Error"] = "error";
    /**
     * For failures that require immediate attention. Examples: data loss scenarios, out of disk space.
     */
    LogLevel["Critical"] = "critical";
    LogLevel["None"] = "none";
})(LogLevel || (LogLevel = {}));
//# sourceMappingURL=ITelemetryCommon.js.map