{"version":3,"file":"IInternalTelemetry.js","sourceRoot":"","sources":["../../../src/interfaces/IInternalTelemetry.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ITelemetryCommon, ITelemetryModuleContext, LogLevel } from '../interfaces';\nimport { InternalTelemetryLogOptions } from '../telemetry/internal-telemetry-log-options';\n\nexport interface IInternalTelemetry extends ITelemetryCommon {\n    /**\n     * Logs a structured message at the given log level, with optional custom tags and/or an exception\n     * @param logLevel LogLevel of the message\n     * @param messageTemplate String to log, denoting placeholders with {placeholder}\n     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object\n     */\n    log(logLevel: LogLevel, messageTemplate: string, logOptions?: InternalTelemetryLogOptions): void;\n\n    /**\n     * Sets the portion of the telemetry context that will be attached to all logs for a module\n     * @param moduleContext Part of the telemetry context that lasts during a module rendering\n     */\n    setTelemetryModuleContext(moduleContext: ITelemetryModuleContext): () => IInternalTelemetry;\n}\n"]}