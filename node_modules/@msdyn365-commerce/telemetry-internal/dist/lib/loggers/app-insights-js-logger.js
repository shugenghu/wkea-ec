/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { AppInsights } from 'applicationinsights-js';
import { LogLevel } from '../interfaces';
import { TelemetryBase } from '../telemetry';
import { buildPropertiesList, getPropertiesFromContext, messageTemplateKey, shouldSkipLogging } from './app-insights-helper';
import { safeStringify } from './logging-helper';
/**
 * Client-side logger that sends messages to Application Insights
 */
export class AppInsightsJSLogger {
    /**
     * Creates a new instance of AppInsights Logger
     * @param instrumentationKey The instrumentation key for the Application Insights instance
     */
    constructor() {
        this.options = {};
        AppInsights.trackEvent('Client version of Application Insights registered');
    }
    initialize(options) {
        this.options = options;
    }
    /**
     * @internal
     * Logs a trace message to AppInsights
     * @param logLevel LogLevel of the message
     * @param context Telemetry context to add to log
     * @param messageTemplate Structured log formatted string
     * @param placeholders List of placeholders in messageTemplate along with position in string
     * @param values Arguments to replace placeholders
     * @param customTags Array of strings to attach to log
     */
    sendLog(logLevel, context, messageTemplate, 
    // tslint:disable-next-line:no-any
    placeholders, customTags, exception) {
        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging
        const severityLevel = AppInsightsJSLogger._severityLevelMapping.get(logLevel);
        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {
            return;
        }
        // Build properties list with telemetry context and message template arguments
        const properties = buildPropertiesList(context, placeholders, customTags);
        if (exception === undefined) {
            // Send log to AppInsights as trace event
            AppInsights.trackTrace(messageTemplate, properties, severityLevel);
        }
        else {
            // Attach message template as custom property
            properties[messageTemplateKey] = messageTemplate;
            // Send log to AppInsights as exception event
            AppInsights.trackException(exception, undefined, properties, undefined, severityLevel);
        }
    }
    /**
     * @internal
     * Logs a trace message to AppInsights
     * @param logLevel Severity level of the log
     * @param message String to log
     * @param args Any additional objects to log
     * @param context Additional properties to add to the log
     */
    log(logLevel, message, args, context) {
        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging
        const severityLevel = AppInsightsJSLogger._severityLevelMapping.get(logLevel);
        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {
            return;
        }
        // Append any extra arguments to the message
        let fullMessage = message;
        args.forEach(arg => {
            fullMessage = fullMessage.concat('\n', safeStringify(arg));
        });
        AppInsights.trackTrace(`${logLevel}: ${fullMessage}`, getPropertiesFromContext(context));
    }
    /**
     * @internal
     * Logs an error object to AppInsights as an exception
     * @param error Error object to log
     * @param context Additional properties to add to the log
     */
    exception(error, context) {
        AppInsights.trackException(error, undefined, getPropertiesFromContext(context));
    }
    /**
     * @internal
     * No-op - not tracking client side metrics
     * @param name name of the metric
     * @param value value of the metric
     */
    trackMetric(name, value, context) {
        // noop
    }
    /**
     * Track a structured event with app insights
     *
     * @template TProperties interface for properties
     * @template TMeasurements interface for measurements to go with the event
     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options
     */
    trackEvent(name, properties, measurements, context) {
        AppInsights.trackEvent(name, properties, measurements);
    }
    /**
     * Track a page view
     *
     * @param {string} name
     * @param {string} [url]
     */
    trackPageView(name, url) {
        AppInsights.trackPageView(name, url);
    }
    /**
     * Track request
     * @param options request options
     */
    trackDependency(options) {
        const id = TelemetryBase.generateGuid();
        // on the client it's a dependency call
        AppInsights.trackDependency(id, options.method, `https://${options.target}${options.name}` || '', options.name || '', options.duration, options.success, options.resultCode, options.properties);
    }
}
/**
 * Mapping between telemetry framework LogLevel and AppInsights JS Severity Levels
 */
AppInsightsJSLogger._severityLevelMapping = new Map([
    [LogLevel.Trace, 0],
    [LogLevel.Information, 1],
    [LogLevel.Warning, 2],
    [LogLevel.Error, 3],
    [LogLevel.Critical, 4]
]);
//# sourceMappingURL=app-insights-js-logger.js.map