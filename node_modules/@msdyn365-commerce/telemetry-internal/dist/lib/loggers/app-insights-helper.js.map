{"version":3,"file":"app-insights-helper.js","sourceRoot":"","sources":["../../../src/loggers/app-insights-helper.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAKH,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AACrE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAW,aAAa,CAAC;AAEnD;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAW,kBAAkB,CAAC;AAE7D;;GAEG;AACH,MAAM,CAAC,MAAM,WAAW,GAAW,WAAW,CAAC;AAE/C;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAW,aAAa,CAAC;AAEnD;;GAEG;AACH,MAAM,CAAC,MAAM,WAAW,GAAW,WAAW,CAAC;AAE/C;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAW,aAAa,CAAC;AAElD;;;;;GAKG;AACH,MAAM,UAAU,mBAAmB,CAC/B,OAA0B;AAC1B,kCAAkC;AAClC,YAA8B,EAC9B,UAAqB;IAErB,0DAA0D;IAC1D,MAAM,UAAU,GAAwB,wBAAwB,CAAC,OAAO,CAAC,CAAC;IAE1E,sDAAsD;IACtD,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAChC,iEAAiE;QACjE,MAAM,IAAI,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;QAEpC,+CAA+C;QAC/C,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,gCAAgC;IAChC,IAAI,UAAU,EAAE;QACZ,UAAU,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;KACjE;IAED,OAAO,UAAU,CAAC;AACtB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,wBAAwB,CAAC,OAA0B;IAC/D,MAAM,UAAU,GAAwB,EAAE,CAAC;IAC3C,0EAA0E;IAC1E,IAAI,OAAO,CAAC,aAAa,CAAC,QAAQ,EAAE;QAChC,UAAU,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC;KAC5D;IACD,IAAI,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE;QAClC,UAAU,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC;KAChE;IACD,IAAI,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE;QAC/B,UAAU,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC;KAC5D;IACD,IAAI,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE;QACjC,UAAU,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC;KAC7D;IAED,OAAO,UAAU,CAAC;AACtB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,aAAwC,EAAE,OAAgB;IACxF,4DAA4D;IAC5D,6EAA6E;IAE7E,OAAO,aAAa,KAAK,SAAS,IAAI,CAAC,CAAC,OAAO,IAAI,aAAa,KAAK,CAAC,CAAC,CAAC;AAC5E,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { SeverityLevel } from 'applicationinsights/out/Declarations/Contracts';\nimport { ITelemetryContext } from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\nimport { getFilteredData } from '../privacy/dynamics-privacy-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * Key value for Custom Tags custom dimension in AppInsights events\n */\nexport const customTagsKey: string = 'custom-tags';\n\n/**\n * Key value for Message Template custom dimension in AppInsights events\n */\nexport const messageTemplateKey: string = 'message-template';\n\n/**\n * Key value for Module ID custom dimension in AppInsights events\n */\nexport const moduleIdKey: string = 'Module ID';\n\n/**\n * Key value for Module Type custom dimension in AppInsights events\n */\nexport const moduleTypeKey: string = 'Module Type';\n\n/**\n * Key value for Page Type custom dimension in AppInsights events\n */\nexport const pageTypeKey: string = 'Page Type';\n\n/**\n * Key value for Page Type custom dimension in AppInsights events\n */\nexport const cmsPageIdKey: string = 'CMS Page ID';\n\n/**\n * Builds custom properties list from telemetry context and message template arguments\n * @param context Telemetry context from which the properties will be pulled\n * @param placeholders List of placeholders in messageTemplate along with position in string\n * @param values Arguments to replace placeholders\n */\nexport function buildPropertiesList(\n    context: ITelemetryContext,\n    // tslint:disable-next-line:no-any\n    placeholders: Map<string, any>,\n    customTags?: string[]\n): IDictionary<string> {\n    // Start properties list with those from telemetry context\n    const properties: IDictionary<string> = getPropertiesFromContext(context);\n\n    // Add message template arguments as custom properties\n    placeholders.forEach((value, key) => {\n        // Get filtered data out of placeholder if it is a privacy object\n        const data = getFilteredData(value);\n\n        // Add placeholder to list of custom parameters\n        properties[`param_${key}`] = safeStringify(data);\n    });\n\n    // Add custom tags to properties\n    if (customTags) {\n        properties[customTagsKey] = [].join.apply(customTags, [', ']);\n    }\n\n    return properties;\n}\n\n/**\n * Converts the given telemetry context into AppInsights readable properties\n * @param context Telemetry context from which the properties will be pulled\n */\nexport function getPropertiesFromContext(context: ITelemetryContext): IDictionary<string> {\n    const properties: IDictionary<string> = {};\n    // Only add context to properties if they have been set (non-empty string)\n    if (context.moduleContext.moduleId) {\n        properties[moduleIdKey] = context.moduleContext.moduleId;\n    }\n    if (context.moduleContext.moduleType) {\n        properties[moduleTypeKey] = context.moduleContext.moduleType;\n    }\n    if (context.requestContext.pageId) {\n        properties[cmsPageIdKey] = context.requestContext.pageId;\n    }\n    if (context.requestContext.pageType) {\n        properties[pageTypeKey] = context.requestContext.pageType;\n    }\n\n    return properties;\n}\n\n/**\n * Given a severity level and if debug flag is set or not, this method will return true if we should bypass logs\n * @param severityLevel - SeverityLevel enum\n * @param isDebug - boolean\n */\nexport function shouldSkipLogging(severityLevel: SeverityLevel | undefined, isDebug: boolean): boolean {\n    // Do not send events marked as None or Debug to AppInsights\n    // Do not send events marked as trace to AppInsights, if debug mode is not on\n\n    return severityLevel === undefined || (!isDebug && severityLevel === 0);\n}\n"]}