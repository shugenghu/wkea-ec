/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { getFilteredData } from '../privacy/dynamics-privacy-helper';
import { safeStringify } from './logging-helper';
/**
 * Key value for Custom Tags custom dimension in AppInsights events
 */
export const customTagsKey = 'custom-tags';
/**
 * Key value for Message Template custom dimension in AppInsights events
 */
export const messageTemplateKey = 'message-template';
/**
 * Key value for Module ID custom dimension in AppInsights events
 */
export const moduleIdKey = 'Module ID';
/**
 * Key value for Module Type custom dimension in AppInsights events
 */
export const moduleTypeKey = 'Module Type';
/**
 * Key value for Page Type custom dimension in AppInsights events
 */
export const pageTypeKey = 'Page Type';
/**
 * Key value for Page Type custom dimension in AppInsights events
 */
export const cmsPageIdKey = 'CMS Page ID';
/**
 * Key value for Channel id custom dimension in AppInsights events
 */
export const channelIdKey = 'Channel ID';
/**
 * Builds custom properties list from telemetry context and message template arguments
 * @param context Telemetry context from which the properties will be pulled
 * @param placeholders List of placeholders in messageTemplate along with position in string
 * @param values Arguments to replace placeholders
 */
export function buildPropertiesList(context, 
// tslint:disable-next-line:no-any
placeholders, customTags) {
    // Start properties list with those from telemetry context
    const properties = getPropertiesFromContext(context);
    // Add message template arguments as custom properties
    placeholders.forEach((value, key) => {
        // Get filtered data out of placeholder if it is a privacy object
        const data = getFilteredData(value);
        // Add placeholder to list of custom parameters
        properties[`param_${key}`] = safeStringify(data);
    });
    // Add custom tags to properties
    if (customTags) {
        properties[customTagsKey] = [].join.apply(customTags, [', ']);
    }
    return properties;
}
/**
 * Converts the given telemetry context into AppInsights readable properties
 * @param context Telemetry context from which the properties will be pulled
 */
export function getPropertiesFromContext(context) {
    const properties = {};
    // Only add context to properties if they have been set (non-empty string)
    if (context.moduleContext.moduleId) {
        properties[moduleIdKey] = context.moduleContext.moduleId;
    }
    if (context.moduleContext.moduleType) {
        properties[moduleTypeKey] = context.moduleContext.moduleType;
    }
    if (context.requestContext.pageId) {
        properties[cmsPageIdKey] = context.requestContext.pageId;
    }
    if (context.requestContext.pageType) {
        properties[pageTypeKey] = context.requestContext.pageType;
    }
    if (context.requestContext.channelId) {
        properties[channelIdKey] = context.requestContext.channelId;
    }
    return properties;
}
/**
 * Given a severity level and if debug flag is set or not, this method will return true if we should bypass logs
 * @param severityLevel - SeverityLevel enum
 * @param isDebug - boolean
 */
export function shouldSkipLogging(severityLevel, isDebug) {
    // Do not send events marked as None or Debug to AppInsights
    // Do not send events marked as trace to AppInsights, if debug mode is not on
    return severityLevel === undefined || (!isDebug && severityLevel === 0);
}
//# sourceMappingURL=app-insights-helper.js.map