{"version":3,"file":"generic-console-logger.js","sourceRoot":"","sources":["../../../src/loggers/generic-console-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-floating-promises\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\n/**\n * Default console logger\n * This is a default logger that just logs messages directly to the console\n */\nclass GenericConsoleLogger implements ITraceLogger {\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console, prefixed with custom tags, and with arguments following\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Determine console output method based on log level\n        let printFunction: Function;\n        switch (logLevel) {\n            case LogLevel.Critical:\n            case LogLevel.Error:\n                printFunction = console.error;\n                break;\n            case LogLevel.Warning:\n                printFunction = console.warn;\n                break;\n            case LogLevel.Information:\n            case LogLevel.Debug:\n            case LogLevel.Trace:\n                // Don't print debug and info messages to console unless in debug mode\n                if (!this.options.isDebug) {\n                    return;\n                }\n            default:\n                printFunction = console.log;\n        }\n\n        // Output tags and message template\n        let tagsString = '';\n        if (customTags !== undefined) {\n            customTags.forEach(tag => {\n                tagsString += `[${tag}]`;\n            });\n        }\n        tagsString && printFunction(tagsString);\n        let message = messageTemplate;\n\n        // Output arguments\n        for (const [key, value] of placeholders.entries()) {\n            let messageValue;\n            // If Dynamics privacy object only print data value, else print object\n            if (value.__isDynamicsPrivacy) {\n                messageValue = value.data;\n            } else {\n                messageValue = value;\n            }\n            if (messageValue.toString() === '[object Object]') {\n                messageValue = JSON.stringify(messageValue, null, 2);\n            }\n            message = message.replace(new RegExp(`{${key}}`, 'g'), messageValue);\n        }\n        printFunction(`[${logLevel}] ${message}`);\n\n        // Print exception if present\n        if (exception !== undefined) {\n            printFunction(exception.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console based on LogLevel\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        switch (logLevel) {\n            case LogLevel.Information:\n                // @ts-ignore\n                this.options.isInfo && this._printMessages(console.log, message, args);\n                break;\n            case LogLevel.Debug:\n                this.options.isDebug && this._printMessages(console.log, message, args);\n                break;\n            case LogLevel.Trace:\n                this._printMessages(console.log, message, args);\n                break;\n            case LogLevel.Warning:\n                this._printMessages(console.warn, message, args);\n                break;\n            case LogLevel.Critical:\n            case LogLevel.Error:\n                this._printMessages(console.error, message, args);\n                break;\n            default:\n        }\n    }\n\n    /**\n     * @internal\n     * Logs an exception object to the console\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        if (error) {\n            console.error(error.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Tracks a metric\n     * @param name Metric name\n     * @param value Metric value\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        console.log(`${name}: ${value}`);\n    }\n\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        const event = {\n            name: name,\n            time: new Date(),\n            properties,\n            measurements\n        };\n        this.log(LogLevel.Information, name, [event], <ITelemetryContext>context);\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        this.trackEvent('trackPageView', { url });\n    }\n\n    /**\n     * Track request\n     * @param options the request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        this.trackEvent('trackRequest', options);\n    }\n\n    /**\n     * Prints the given message and arguments to the console via the given function\n     * @param printFunction Function to use to print\n     * @param message String to print\n     * @param args Additional args to print\n     */\n    private _printMessages(printFunction: Function, message: string, args: unknown[]): void {\n        printFunction(message);\n        args.forEach(arg => {\n            printFunction(arg);\n        });\n    }\n}\n\nconst singletonLoggerInstance = new GenericConsoleLogger();\nexport { singletonLoggerInstance as GenericConsoleLogger };\n"]}