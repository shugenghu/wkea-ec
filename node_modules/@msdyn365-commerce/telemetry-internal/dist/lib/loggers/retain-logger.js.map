{"version":3,"file":"retain-logger.js","sourceRoot":"","sources":["../../../src/loggers/retain-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-floating-promises\nimport { p } from '../helpers';\nimport { ILog, ITelemetryContext, ITraceLogger, LogLevel } from '../interfaces';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { getFilteredData } from '../privacy/dynamics-privacy-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * This is a logger that stores logs so they can be sent back with the response\n */\nexport class RetainLogger implements ITraceLogger {\n    private logList: ILog[] = [];\n\n    /**\n     * @internal\n     * Retains a trace message\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Add message template\n        this.logList.push({ logLevel, message: messageTemplate });\n\n        // Add arguments\n        for (const value of placeholders.values()) {\n            // Get filtered data out of placeholder if it is a privacy object\n            const data = getFilteredData(value);\n\n            this.logList.push({ logLevel, message: safeStringify(data) });\n        }\n    }\n\n    /**\n     * @internal\n     * Retains a trace message\n     * @param logLevel Severity level of the log\n     * @param message String to log\n     * @param args Any additional objects to log\n     * @param context Additional properties to add to the log\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        this.logList.push({ logLevel, message });\n        // Append extra arguments to the message as strings (stringifying json objects as necessary)\n        args.forEach((arg: unknown) => {\n            p(() => {\n                let data: string = String(arg);\n                if (typeof arg === 'object') {\n                    try {\n                        data = JSON.stringify(arg);\n                    } catch (err) {\n                        // If the data is unable to be stringified\n                        // eat the error and log data as is\n                    }\n                }\n                this.logList.push({ logLevel, message: data });\n            });\n        });\n    }\n\n    /**\n     * @internal\n     * Retains an error object\n     * @param error Error object to log\n     * @param context Additional properties to add to the log\n     */\n    public exception(exception: Error, context: ITelemetryContext): void {\n        this.logList.push({ logLevel: LogLevel.Error, message: `${exception.name}: ${exception.message}` });\n    }\n\n    /**\n     * @internal\n     * Retains a metric\n     * @param name Name of the metric to log\n     * @param value Value of the metric to log\n     * @param context Additional properties to add to the log\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        const logLevel: LogLevel = LogLevel.Information;\n        const message: string = `${name}: ${value}`;\n\n        this.logList.push({ logLevel, message });\n    }\n\n    public trackEvent<TProperties, TMeasurements>(name: string, properties?: TProperties, measurements?: TMeasurements): void {\n        const message = JSON.stringify({\n            eventName: name,\n            properties,\n            measurements\n        });\n        this.logList.push({ message, logLevel: LogLevel.Information });\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        this.trackEvent('trackPageView', { url });\n    }\n\n    /**\n     * Track request\n     * @param options the request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        this.trackEvent('trackRequest', options);\n    }\n\n    public getLogs(): ILog[] {\n        return this.logList;\n    }\n}\n"]}