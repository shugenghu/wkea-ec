{"version":3,"file":"app-insights-js-logger.js","sourceRoot":"","sources":["../../../src/loggers/app-insights-js-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { AppInsights } from 'applicationinsights-js';\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { TelemetryBase } from '../telemetry';\nimport { buildPropertiesList, getPropertiesFromContext, messageTemplateKey, shouldSkipLogging } from './app-insights-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * Client-side logger that sends messages to Application Insights\n */\nexport class AppInsightsJSLogger implements ITraceLogger {\n    /**\n     * Mapping between telemetry framework LogLevel and AppInsights JS Severity Levels\n     */\n    private static _severityLevelMapping: Map<LogLevel, number> = new Map([\n        [LogLevel.Trace, 0],\n        [LogLevel.Information, 1],\n        [LogLevel.Warning, 2],\n        [LogLevel.Error, 3],\n        [LogLevel.Critical, 4]\n    ]);\n\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    /**\n     * Creates a new instance of AppInsights Logger\n     * @param instrumentationKey The instrumentation key for the Application Insights instance\n     */\n    constructor() {\n        AppInsights.trackEvent('Client version of Application Insights registered');\n    }\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a trace message to AppInsights\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\n        const severityLevel = AppInsightsJSLogger._severityLevelMapping.get(logLevel);\n\n        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {\n            return;\n        }\n\n        // Build properties list with telemetry context and message template arguments\n        const properties: IDictionary<string> = buildPropertiesList(context, placeholders, customTags);\n\n        if (exception === undefined) {\n            // Send log to AppInsights as trace event\n            AppInsights.trackTrace(messageTemplate, properties, severityLevel);\n        } else {\n            // Attach message template as custom property\n            properties[messageTemplateKey] = messageTemplate;\n\n            // Send log to AppInsights as exception event\n            AppInsights.trackException(exception, undefined, properties, undefined, severityLevel);\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a trace message to AppInsights\n     * @param logLevel Severity level of the log\n     * @param message String to log\n     * @param args Any additional objects to log\n     * @param context Additional properties to add to the log\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\n        const severityLevel = AppInsightsJSLogger._severityLevelMapping.get(logLevel);\n\n        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {\n            return;\n        }\n\n        // Append any extra arguments to the message\n        let fullMessage = message;\n        args.forEach(arg => {\n            fullMessage = fullMessage.concat('\\n', safeStringify(arg));\n        });\n        AppInsights.trackTrace(`${logLevel}: ${fullMessage}`, getPropertiesFromContext(context));\n    }\n    /**\n     * @internal\n     * Logs an error object to AppInsights as an exception\n     * @param error Error object to log\n     * @param context Additional properties to add to the log\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        AppInsights.trackException(error, undefined, getPropertiesFromContext(context));\n    }\n    /**\n     * @internal\n     * No-op - not tracking client side metrics\n     * @param name name of the metric\n     * @param value value of the metric\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        // noop\n    }\n    /**\n     * Track a structured event with app insights\n     *\n     * @template TProperties interface for properties\n     * @template TMeasurements interface for measurements to go with the event\n     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options\n     */\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        AppInsights.trackEvent(name, <IDictionary<string>>(<unknown>properties), <IDictionary<number>>(<unknown>measurements));\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        AppInsights.trackPageView(name, url);\n    }\n\n    /**\n     * Track request\n     * @param options request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        const id = TelemetryBase.generateGuid();\n\n        // on the client it's a dependency call\n        AppInsights.trackDependency(\n            id,\n            options.method,\n            `https://${options.target}${options.name}` || '',\n            options.name || '',\n            options.duration,\n            options.success,\n            options.resultCode,\n            options.properties\n        );\n    }\n}\n"]}