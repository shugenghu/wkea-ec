{"version":3,"file":"page-logger.js","sourceRoot":"","sources":["../../../src/loggers/page-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\n\n/**\n * Page Logger\n * Captures server side logs and surfaces them to the client\n */\nclass PageLogger implements ITraceLogger {\n    public logs: string[] = [];\n\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console, prefixed with custom tags, and with arguments following\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Output tags and message template\n        let tagsString = '';\n        if (customTags !== undefined) {\n            customTags.forEach(tag => {\n                tagsString += `[${tag}]`;\n            });\n        }\n\n        tagsString && this._print(logLevel, tagsString);\n        let message = messageTemplate;\n\n        // Output arguments\n        for (const [key, value] of placeholders.entries()) {\n            let messageValue;\n            // If Dynamics privacy object only print data value, else print object\n            if (value.__isDynamicsPrivacy) {\n                messageValue = value.data;\n            } else {\n                messageValue = value;\n            }\n            if (messageValue.toString() === '[object Object]') {\n                messageValue = JSON.stringify(messageValue, null, 2);\n            }\n            message = message.replace(new RegExp(`{${key}}`, 'g'), messageValue);\n        }\n\n        this._print(logLevel, message);\n\n        // Print exception if present\n        if (exception !== undefined && exception.stack) {\n            this._print(LogLevel.Error, exception.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a message to the console based on LogLevel\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        switch (logLevel) {\n            case LogLevel.Information:\n                // @ts-ignore\n                this.options.isInfo && this._print(LogLevel.Information, message, args);\n                break;\n            case LogLevel.Debug:\n                this.options.isDebug && this._print(LogLevel.Debug, message, args);\n                break;\n            case LogLevel.Trace:\n            case LogLevel.Warning:\n                this._print(logLevel, message, args);\n                break;\n            case LogLevel.Critical:\n            case LogLevel.Error:\n                this._print(LogLevel.Error, message, args);\n                break;\n            default:\n        }\n    }\n\n    /**\n     * @internal\n     * Logs an exception object to the console\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        if (error && error.stack) {\n            this._print(LogLevel.Error, error.stack);\n        }\n    }\n\n    /**\n     * @internal\n     * Tracks a metric\n     * @param name Metric name\n     * @param value Metric value\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        this._print(LogLevel.Debug, `${name}: ${value}`);\n    }\n\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        const event = {\n            name: name,\n            time: new Date(),\n            properties,\n            measurements\n        };\n        this.log(LogLevel.Information, name, [event], <ITelemetryContext>context);\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        // intentionally blank\n    }\n\n    /**\n     * Track request\n     * @param options the request options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        // intentionally blank\n    }\n\n    private _print(printLevel: LogLevel, message: string, args?: unknown[]): void {\n        this.logs.push(`[${printLevel.toUpperCase()}] ${message}`);\n        args &&\n            args.forEach(arg => {\n                this.logs.push(JSON.stringify(arg));\n            });\n    }\n}\n\nexport { PageLogger };\n"]}