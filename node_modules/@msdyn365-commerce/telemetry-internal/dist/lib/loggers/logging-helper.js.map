{"version":3,"file":"logging-helper.js","sourceRoot":"","sources":["../../../src/loggers/logging-helper.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;GAGG;AACH,MAAM,UAAU,aAAa,CAAC,KAAc;IACxC,IAAI,MAAc,CAAC;IAEnB,IAAI;QACA,MAAM,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KAC9E;IAAC,OAAO,CAAC,EAAE;QACR,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,WAAW,EAAE;YAC7B,mCAAmC;YACnC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;SAC1B;aAAM;YACH,MAAM,CAAC,CAAC;SACX;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n/**\n * Helper function that attempts to stringify data. If stringify fails, it will\n * fallback to basic string serialization.\n */\nexport function safeStringify(input: unknown): string {\n    let output: string;\n\n    try {\n        output = typeof input === 'object' ? JSON.stringify(input) : String(input);\n    } catch (e) {\n        if (e && e.name === 'TypeError') {\n            // Fallback to string serialization\n            output = String(input);\n        } else {\n            throw e;\n        }\n    }\n\n    return output;\n}\n"]}