{"version":3,"file":"app-insights-node-logger.js","sourceRoot":"","sources":["../../../src/loggers/app-insights-node-logger.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,aAAa,EAAE,MAAM,gDAAgD,CAAC;AAC/E,OAAO,EAAuD,QAAQ,EAAE,MAAM,eAAe,CAAC;AAG9F,OAAO,EAAE,mBAAmB,EAAE,wBAAwB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC7H,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAmB9B;;;OAGG;IACH,YAAmB,eAAgC;QAN3C,YAAO,GAA2C,EAAE,CAAC;QAOzD,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC;QAC/B,sDAAsD;QACtD,0FAA0F;IAC9F,CAAC;IAEM,UAAU,CAAC,OAA2B;QACzC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED;;;;;;;;;OASG;IACI,OAAO,CACV,QAAkB,EAClB,OAA0B,EAC1B,eAAuB;IACvB,kCAAkC;IAClC,YAA8B,EAC9B,UAAqB,EACrB,SAAiB;QAEjB,sFAAsF;QACtF,MAAM,aAAa,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEhF,IAAI,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACxD,OAAO;SACV;QAED,8EAA8E;QAC9E,MAAM,UAAU,GAAwB,mBAAmB,CAAC,OAAO,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;QAE/F,IAAI,SAAS,KAAK,SAAS,EAAE;YACzB,yCAAyC;YACzC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;gBACpB,OAAO,EAAE,eAAe;gBACxB,QAAQ,EAAE,aAAa;gBACvB,UAAU,EAAE,UAAU;aACzB,CAAC,CAAC;SACN;aAAM;YACH,6CAA6C;YAC7C,UAAU,CAAC,kBAAkB,CAAC,GAAG,IAAI,QAAQ,KAAK,eAAe,EAAE,CAAC;YAEpE,6CAA6C;YAC7C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;gBACxB,SAAS,EAAE,SAAS;gBACpB,UAAU,EAAE,UAAU;aACzB,CAAC,CAAC;SACN;IACL,CAAC;IAED;;;;;;;OAOG;IACI,GAAG,CAAC,QAAkB,EAAE,OAAe,EAAE,IAAe,EAAE,OAA0B;QACvF,sFAAsF;QACtF,MAAM,aAAa,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEhF,IAAI,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACxD,OAAO;SACV;QAED,4CAA4C;QAC5C,IAAI,WAAW,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACf,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,4BAA4B;QAC5B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;YACpB,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,aAAa;YACvB,UAAU,EAAE,wBAAwB,CAAC,OAAO,CAAC;SAChD,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACI,SAAS,CAAC,KAAY,EAAE,OAA0B;QACrD,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,wBAAwB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACrG,CAAC;IAED;;;;;;OAMG;IACI,WAAW,CAAC,IAAY,EAAE,KAAa,EAAE,OAA0B;QACtE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,wBAAwB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1G,CAAC;IAED;;;;;;OAMG;IACI,UAAU,CACb,IAAY,EACZ,UAAwB,EACxB,YAA4B,EAC5B,OAA2B;QAE3B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;YACpB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI,IAAI,EAAE;YAChB,UAAU,EAAiC,UAAW;YACtD,YAAY,EAAiC,YAAa;SAC7D,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACI,aAAa,CAAC,IAAY,EAAE,GAAY;QAC3C,gEAAgE;IACpE,CAAC;IAED;;;OAGG;IACI,eAAe,CAAC,OAAyB;QAC5C,IAAI,OAAO,EAAE;YACT,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;YACxB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;gBACzB,kBAAkB,EAAE,OAAO,CAAC,cAAc,IAAI,uBAAuB;gBACrE,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,IAAI,EAAE,GAAG,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,EAAE;gBACzC,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,IAAI,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;gBACjC,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC;aAClD,CAAC,CAAC;SACN;IACL,CAAC;;AApLD;;GAEG;AACY,2CAAqB,GAAiC,IAAI,GAAG,CAAC;IACzE,CAAC,QAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,OAAO,CAAC;IACvC,CAAC,QAAQ,CAAC,WAAW,EAAE,aAAa,CAAC,WAAW,CAAC;IACjD,CAAC,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC,OAAO,CAAC;IACzC,CAAC,QAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC;IACrC,CAAC,QAAQ,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC;CAC9C,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { TelemetryClient } from 'applicationinsights';\nimport { SeverityLevel } from 'applicationinsights/out/Declarations/Contracts';\nimport { ITelemetryContext, ITraceLogger, ITraceLoggerParams, LogLevel } from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { buildPropertiesList, getPropertiesFromContext, messageTemplateKey, shouldSkipLogging } from './app-insights-helper';\nimport { safeStringify } from './logging-helper';\n\n/**\n * Node logger that sends messages to Application Insights\n */\nexport class AppInsightsNodeLogger implements ITraceLogger {\n    /**\n     * Mapping between telemetry framework LogLevel and AppInsights Node Severity Levels\n     */\n    private static _severityLevelMapping: Map<LogLevel, SeverityLevel> = new Map([\n        [LogLevel.Trace, SeverityLevel.Verbose],\n        [LogLevel.Information, SeverityLevel.Information],\n        [LogLevel.Warning, SeverityLevel.Warning],\n        [LogLevel.Error, SeverityLevel.Error],\n        [LogLevel.Critical, SeverityLevel.Critical]\n    ]);\n\n    /**\n     * Application Insights client\n     */\n    private _client: TelemetryClient;\n\n    private options: ITraceLoggerParams = <ITraceLoggerParams>{};\n\n    /**\n     * Creates a new instance of AppInsights Logger\n     * @param instrumentationKey The instrumentation key for the Application Insights instance\n     */\n    public constructor(telemetryClient: TelemetryClient) {\n        this._client = telemetryClient;\n        // TODO: node logger should be a singleton Bug# 391909\n        // this._client.trackEvent({ name: 'Server version of Application Insights registered' });\n    }\n\n    public initialize(options: ITraceLoggerParams): void {\n        this.options = options;\n    }\n\n    /**\n     * @internal\n     * Logs a trace message to AppInsights\n     * @param logLevel LogLevel of the message\n     * @param context Telemetry context to add to log\n     * @param messageTemplate Structured log formatted string\n     * @param placeholders List of placeholders in messageTemplate along with position in string\n     * @param values Arguments to replace placeholders\n     * @param customTags Array of strings to attach to log\n     */\n    public sendLog(\n        logLevel: LogLevel,\n        context: ITelemetryContext,\n        messageTemplate: string,\n        // tslint:disable-next-line:no-any\n        placeholders: Map<string, any>,\n        customTags?: string[],\n        exception?: Error\n    ): void {\n        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\n        const severityLevel = AppInsightsNodeLogger._severityLevelMapping.get(logLevel);\n\n        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {\n            return;\n        }\n\n        // Build properties list with telemetry context and message template arguments\n        const properties: IDictionary<string> = buildPropertiesList(context, placeholders, customTags);\n\n        if (exception === undefined) {\n            // Send log to AppInsights as trace event\n            this._client.trackTrace({\n                message: messageTemplate,\n                severity: severityLevel,\n                properties: properties\n            });\n        } else {\n            // Attach message template as custom property\n            properties[messageTemplateKey] = `[${logLevel}] ${messageTemplate}`;\n\n            // Send log to AppInsights as exception event\n            this._client.trackException({\n                exception: exception,\n                properties: properties\n            });\n        }\n    }\n\n    /**\n     * @internal\n     * Logs a trace message to AppInsights\n     * @param logLevel Severity level of the log\n     * @param message String to log\n     * @param args Any additional objects to log\n     * @param context Additional properties to add to the log\n     */\n    public log(logLevel: LogLevel, message: string, args: unknown[], context: ITelemetryContext): void {\n        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging\n        const severityLevel = AppInsightsNodeLogger._severityLevelMapping.get(logLevel);\n\n        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {\n            return;\n        }\n\n        // Append any extra arguments to the message\n        let fullMessage = message;\n        args.forEach(arg => {\n            fullMessage = fullMessage.concat('\\n', safeStringify(arg));\n        });\n\n        // Send trace to AppInsights\n        this._client.trackTrace({\n            message: fullMessage,\n            severity: severityLevel,\n            properties: getPropertiesFromContext(context)\n        });\n    }\n\n    /**\n     * @internal\n     * Logs an error object to AppInsights as an exception\n     * @param error Error object to log\n     * @param context Additional properties to add to the log\n     */\n    public exception(error: Error, context: ITelemetryContext): void {\n        this._client.trackException({ exception: error, properties: getPropertiesFromContext(context) });\n    }\n\n    /**\n     * @internal\n     * Logs a metric to AppInsights\n     * @param name Name of the metric to log\n     * @param value Value of the metric to log\n     * @param context Additional properties to add to the log\n     */\n    public trackMetric(name: string, value: number, context: ITelemetryContext): void {\n        this._client.trackMetric({ name: name, value: value, properties: getPropertiesFromContext(context) });\n    }\n\n    /**\n     * Track a structured event with app insights\n     *\n     * @template TProperties interface for properties\n     * @template TMeasurements interface for measurements to go with the event\n     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options\n     */\n    public trackEvent<TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void {\n        this._client.trackEvent({\n            name: name,\n            time: new Date(),\n            properties: <IDictionary<string>>(<unknown>properties),\n            measurements: <IDictionary<number>>(<unknown>measurements)\n        });\n    }\n\n    /**\n     * Track a page view\n     *\n     * @param {string} name\n     * @param {string} [url]\n     */\n    public trackPageView(name: string, url?: string): void {\n        // noop -- non server-side rendered page views should be tracked\n    }\n\n    /**\n     * Track dependency\n     * @param options the dependency options\n     */\n    public trackDependency(options: ITrackDependency): void {\n        if (options) {\n            const url = options.url;\n            this._client.trackDependency({\n                dependencyTypeName: options.dependencyName || 'UnspecifiedDependency',\n                duration: options.duration,\n                name: `${options.method} ${options.name}`,\n                resultCode: options.resultCode,\n                success: options.success,\n                data: (url && url.hostname) || '',\n                properties: options.properties,\n                target: options.target || (url && url.hostname)\n            });\n        }\n    }\n}\n"]}