/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { SeverityLevel } from 'applicationinsights/out/Declarations/Contracts';
import { LogLevel } from '../interfaces';
import { buildPropertiesList, getPropertiesFromContext, messageTemplateKey, shouldSkipLogging } from './app-insights-helper';
import { safeStringify } from './logging-helper';
/**
 * Node logger that sends messages to Application Insights
 */
export class AppInsightsNodeLogger {
    /**
     * Creates a new instance of AppInsights Logger
     * @param instrumentationKey The instrumentation key for the Application Insights instance
     */
    constructor(telemetryClient) {
        this.options = {};
        this._client = telemetryClient;
        // TODO: node logger should be a singleton Bug# 391909
        // this._client.trackEvent({ name: 'Server version of Application Insights registered' });
    }
    initialize(options) {
        this.options = options;
    }
    /**
     * @internal
     * Logs a trace message to AppInsights
     * @param logLevel LogLevel of the message
     * @param context Telemetry context to add to log
     * @param messageTemplate Structured log formatted string
     * @param placeholders List of placeholders in messageTemplate along with position in string
     * @param values Arguments to replace placeholders
     * @param customTags Array of strings to attach to log
     */
    sendLog(logLevel, context, messageTemplate, 
    // tslint:disable-next-line:no-any
    placeholders, customTags, exception) {
        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging
        const severityLevel = AppInsightsNodeLogger._severityLevelMapping.get(logLevel);
        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {
            return;
        }
        // Build properties list with telemetry context and message template arguments
        const properties = buildPropertiesList(context, placeholders, customTags);
        if (exception === undefined) {
            // Send log to AppInsights as trace event
            this._client.trackTrace({
                message: messageTemplate,
                severity: severityLevel,
                properties: properties
            });
        }
        else {
            // Attach message template as custom property
            properties[messageTemplateKey] = `[${logLevel}] ${messageTemplate}`;
            // Send log to AppInsights as exception event
            this._client.trackException({
                exception: exception,
                properties: properties
            });
        }
    }
    /**
     * @internal
     * Logs a trace message to AppInsights
     * @param logLevel Severity level of the log
     * @param message String to log
     * @param args Any additional objects to log
     * @param context Additional properties to add to the log
     */
    log(logLevel, message, args, context) {
        // Convert ITelemetry LogLevel to corresponding AppInsights SeverityLevel when logging
        const severityLevel = AppInsightsNodeLogger._severityLevelMapping.get(logLevel);
        if (shouldSkipLogging(severityLevel, this.options.isDebug)) {
            return;
        }
        // Append any extra arguments to the message
        let fullMessage = message;
        args.forEach(arg => {
            fullMessage = fullMessage.concat('\n', safeStringify(arg));
        });
        // Send trace to AppInsights
        this._client.trackTrace({
            message: fullMessage,
            severity: severityLevel,
            properties: getPropertiesFromContext(context)
        });
    }
    /**
     * @internal
     * Logs an error object to AppInsights as an exception
     * @param error Error object to log
     * @param context Additional properties to add to the log
     */
    exception(error, context) {
        this._client.trackException({ exception: error, properties: getPropertiesFromContext(context) });
    }
    /**
     * @internal
     * Logs a metric to AppInsights
     * @param name Name of the metric to log
     * @param value Value of the metric to log
     * @param context Additional properties to add to the log
     */
    trackMetric(name, value, context) {
        this._client.trackMetric({ name: name, value: value, properties: getPropertiesFromContext(context) });
    }
    /**
     * Track a structured event with app insights
     *
     * @template TProperties interface for properties
     * @template TMeasurements interface for measurements to go with the event
     * @param {ITrackEventOptions<TProperties, TMeasurements>} trackEventOptions event options
     */
    trackEvent(name, properties, measurements, context) {
        this._client.trackEvent({
            name: name,
            time: new Date(),
            properties: properties,
            measurements: measurements
        });
    }
    /**
     * Track a page view
     *
     * @param {string} name
     * @param {string} [url]
     */
    trackPageView(name, url) {
        // noop -- non server-side rendered page views should be tracked
    }
    /**
     * Track dependency
     * @param options the dependency options
     */
    trackDependency(options) {
        if (options) {
            const url = options.url;
            this._client.trackDependency({
                dependencyTypeName: options.dependencyName || 'UnspecifiedDependency',
                duration: options.duration,
                name: `${options.method} ${options.name}`,
                resultCode: options.resultCode,
                success: options.success,
                data: (url && url.hostname) || '',
                properties: options.properties,
                target: options.target || (url && url.hostname)
            });
        }
    }
}
/**
 * Mapping between telemetry framework LogLevel and AppInsights Node Severity Levels
 */
AppInsightsNodeLogger._severityLevelMapping = new Map([
    [LogLevel.Trace, SeverityLevel.Verbose],
    [LogLevel.Information, SeverityLevel.Information],
    [LogLevel.Warning, SeverityLevel.Warning],
    [LogLevel.Error, SeverityLevel.Error],
    [LogLevel.Critical, SeverityLevel.Critical]
]);
//# sourceMappingURL=app-insights-node-logger.js.map