{"version":3,"file":"commerce-insights-logger.js","sourceRoot":"","sources":["../../../src/event-loggers/commerce-insights-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport {\n    ICartInfo,\n    // ICustomEvent,\n    IEventLogger,\n    // IPageViewInfo,\n    IProductInfo,\n    IProductTransaction,\n    TelemetryEvent,\n    TelemetryEventContent\n} from '../interfaces';\n\n/**\n * Commerce Insights logger that sends events to MS clickstream pipeline\n */\nexport class CommerceInsightsLogger implements IEventLogger {\n    // tslint:disable-next-line:no-any\n    private _client: any;\n\n    /**\n     * Registers the Web Analytics plugin for use with the Commerce Insights logger\n     */\n    public registerWebAnalyticsPlugin = (webAnalyticsPlugin: object): void => {\n        this._client = webAnalyticsPlugin;\n    };\n\n    /**\n     * Sends the given event to the Commerce Insights data pipeline\n     * @param eventType Type of event to log\n     * @param payload Extra parameters dependent on the eventType\n     */\n    public logEvent(eventType: TelemetryEvent, payload: TelemetryEventContent): void {\n        // Can't log if Web Analytics plugin not initialized\n        if (this._client === undefined) {\n            return;\n        }\n\n        let eventData: { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } | undefined;\n        let eventName: string;\n\n        // Check event type and convert to appropriate schema\n        switch (eventType) {\n            case TelemetryEvent.PageView:\n                // TODO (matt, 6/15/20): Filtering all manual page views, undo once 1DS forwarding to framework implemented\n                return;\n            /* if (this._isPageViewInfo(payload)) {\n                    eventName = TelemetryEvent.PageView;\n                    eventData = this._populatePageViewInfo(payload);\n                } else {\n                    console.error('PageView event needs PageViewInfo data'); return;\n                }\n                break; */\n            case TelemetryEvent.ProductPageView:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.ProductPageView;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('ProductPageView event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.AddToCart:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.AddToCart;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('AddToCart event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.RemoveFromCart:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.RemoveFromCart;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('RemoveFromCart event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.UpdateInCart:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.UpdateInCart;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('UpdateInCart event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.CheckOut:\n                if (this._isCartInfo(payload)) {\n                    eventName = TelemetryEvent.CheckOut;\n                    eventData = this._populateCartInfo(payload);\n                } else {\n                    console.error('CheckOut event needs an array of ProductUnit data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.Purchase:\n                if (this._isProductTransaction(payload)) {\n                    eventName = TelemetryEvent.Purchase;\n                    eventData = this._populateProductTransaction(payload);\n                } else {\n                    console.error('Purchase event needs ProductTransaction data');\n                    return;\n                }\n                break;\n            case TelemetryEvent.Custom:\n                // TODO (matt, 6/15/20): Filtering all manual page views, undo once 1DS forwarding to framework implemented\n                return;\n            /* if (this._isCustomEvent(payload)) {\n                    eventName = TelemetryEvent.Custom;\n                    eventData = this._populateCustomEvent(payload);\n                } else {\n                    console.error('Custom event needs CustomEvent data'); return;\n                }\n                break; */\n            default:\n                eventName = '';\n        }\n\n        // Log event\n        this._client.trackEvent({\n            name: eventName,\n            baseType: 'EventData',\n            baseData: { name: eventName },\n            data: eventData\n        });\n\n        return;\n    }\n\n    /*\n     * Determines if the telemetry event data is IPageViewInfo\n     * @param payload Telemetry event data to check\n    private _isPageViewInfo(payload: TelemetryEventContent): payload is IPageViewInfo {\n        return (<IPageViewInfo>payload).title !== undefined;\n    }\n     */\n\n    /**\n     * Determines if the telemetry event data is array of ICartInfo\n     * @param payload Telemetry event data to check\n     */\n    private _isCartInfo(payload: TelemetryEventContent): payload is ICartInfo {\n        return (<ICartInfo>payload).cartId !== undefined;\n    }\n\n    /**\n     * Determines if the telemetry event data is IProductTransaction\n     * @param payload Telemetry event data to check\n     */\n    private _isProductTransaction(payload: TelemetryEventContent): payload is IProductTransaction {\n        return (<IProductTransaction>payload).id !== undefined;\n    }\n\n    /*\n     * Determines if the telemetry event data is ICustomEvent\n     * @param payload Telemetry event data to check\n    private _isCustomEvent(payload: TelemetryEventContent): payload is ICustomEvent {\n        return (<ICustomEvent>payload).contentCategory !== undefined;\n    }\n     */\n\n    /*\n     * Converts IPageViewInfo data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n    private _populatePageViewInfo(\n        payload: IPageViewInfo\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        return {\n            title: payload.title,\n            location: payload.location || '',\n            page: payload.page || ''\n        };\n    }\n     */\n\n    /**\n     * Converts ICartInfo data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n     */\n    private _populateCartInfo(payload: ICartInfo): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        const productArray: { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] }[] = [];\n\n        payload.products.forEach(product => {\n            productArray.push(this._populateProductInfo(product));\n        });\n\n        return {\n            products: productArray,\n            orderId: payload.orderId || '',\n            cartId: payload.cartId || '',\n            cartVersion: payload.cartVersion || ''\n        };\n    }\n\n    /**\n     * Converts IProductInfo data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n     */\n    private _populateProductInfo(\n        payload: IProductInfo\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        return {\n            productChannelId: payload.productChannelId || '',\n            productChannelName: payload.productChannelName || '',\n            productCategoryId: payload.productCategoryId || '',\n            productCategoryName: payload.productCategoryName || '',\n            productId: payload.productId || '',\n            productName: payload.productName || '',\n            productSku: payload.productSku || '',\n            productPrice: payload.productPrice || '',\n            productQuantity: payload.productQuantity || '',\n            productCurrency: payload.productCurrency || ''\n        };\n    }\n\n    /**\n     * Converts IProductTransaction data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n     */\n    private _populateProductTransaction(\n        payload: IProductTransaction\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        const productArray: { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] }[] = [];\n\n        if (payload.products) {\n            payload.products.forEach(product => {\n                productArray.push(this._populateProductInfo(product));\n            });\n        }\n\n        return {\n            id: payload.id,\n            affiliation: payload.affiliation || '',\n            revenue: payload.revenue || -1,\n            tax: payload.tax || -1,\n            shippingCost: payload.shippingCost || -1,\n            products: productArray\n        };\n    }\n\n    /*\n     * Converts ICustomEvent data into the format 1DS expects\n     * @param payload Telemetry event data to convert\n    private _populateCustomEvent(\n        payload: ICustomEvent\n    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {\n        return {\n            contentCategory: payload.contentCategory,\n            contentAction: payload.contentAction || {}\n        };\n    }\n     */\n}\n"]}