/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { TelemetryEvent } from '../interfaces';
/**
 * Commerce Insights logger that sends events to MS clickstream pipeline
 */
export class CommerceInsightsLogger {
    constructor() {
        /**
         * Registers the Web Analytics plugin for use with the Commerce Insights logger
         */
        this.registerWebAnalyticsPlugin = (webAnalyticsPlugin) => {
            this._client = webAnalyticsPlugin;
        };
        /*
         * Converts ICustomEvent data into the format 1DS expects
         * @param payload Telemetry event data to convert
        private _populateCustomEvent(
            payload: ICustomEvent
        ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {
            return {
                contentCategory: payload.contentCategory,
                contentAction: payload.contentAction || {}
            };
        }
         */
    }
    /**
     * Sends the given event to the Commerce Insights data pipeline
     * @param eventType Type of event to log
     * @param payload Extra parameters dependent on the eventType
     */
    logEvent(eventType, payload) {
        // Can't log if Web Analytics plugin not initialized
        if (this._client === undefined) {
            return;
        }
        let eventData;
        let eventName;
        // Check event type and convert to appropriate schema
        switch (eventType) {
            case TelemetryEvent.PageView:
                // TODO (matt, 6/15/20): Filtering all manual page views, undo once 1DS forwarding to framework implemented
                return;
            /* if (this._isPageViewInfo(payload)) {
                    eventName = TelemetryEvent.PageView;
                    eventData = this._populatePageViewInfo(payload);
                } else {
                    console.error('PageView event needs PageViewInfo data'); return;
                }
                break; */
            case TelemetryEvent.ProductPageView:
                if (this._isCartInfo(payload)) {
                    eventName = TelemetryEvent.ProductPageView;
                    eventData = this._populateCartInfo(payload);
                }
                else {
                    console.error('ProductPageView event needs an array of ProductUnit data');
                    return;
                }
                break;
            case TelemetryEvent.AddToCart:
                if (this._isCartInfo(payload)) {
                    eventName = TelemetryEvent.AddToCart;
                    eventData = this._populateCartInfo(payload);
                }
                else {
                    console.error('AddToCart event needs an array of ProductUnit data');
                    return;
                }
                break;
            case TelemetryEvent.RemoveFromCart:
                if (this._isCartInfo(payload)) {
                    eventName = TelemetryEvent.RemoveFromCart;
                    eventData = this._populateCartInfo(payload);
                }
                else {
                    console.error('RemoveFromCart event needs an array of ProductUnit data');
                    return;
                }
                break;
            case TelemetryEvent.UpdateInCart:
                if (this._isCartInfo(payload)) {
                    eventName = TelemetryEvent.UpdateInCart;
                    eventData = this._populateCartInfo(payload);
                }
                else {
                    console.error('UpdateInCart event needs an array of ProductUnit data');
                    return;
                }
                break;
            case TelemetryEvent.CheckOut:
                if (this._isCartInfo(payload)) {
                    eventName = TelemetryEvent.CheckOut;
                    eventData = this._populateCartInfo(payload);
                }
                else {
                    console.error('CheckOut event needs an array of ProductUnit data');
                    return;
                }
                break;
            case TelemetryEvent.Purchase:
                if (this._isProductTransaction(payload)) {
                    eventName = TelemetryEvent.Purchase;
                    eventData = this._populateProductTransaction(payload);
                }
                else {
                    console.error('Purchase event needs ProductTransaction data');
                    return;
                }
                break;
            case TelemetryEvent.Custom:
                // TODO (matt, 6/15/20): Filtering all manual page views, undo once 1DS forwarding to framework implemented
                return;
            /* if (this._isCustomEvent(payload)) {
                    eventName = TelemetryEvent.Custom;
                    eventData = this._populateCustomEvent(payload);
                } else {
                    console.error('Custom event needs CustomEvent data'); return;
                }
                break; */
            default:
                eventName = '';
        }
        // Log event
        this._client.trackEvent({
            name: eventName,
            baseType: 'EventData',
            baseData: { name: eventName },
            data: eventData
        });
        return;
    }
    /*
     * Determines if the telemetry event data is IPageViewInfo
     * @param payload Telemetry event data to check
    private _isPageViewInfo(payload: TelemetryEventContent): payload is IPageViewInfo {
        return (<IPageViewInfo>payload).title !== undefined;
    }
     */
    /**
     * Determines if the telemetry event data is array of ICartInfo
     * @param payload Telemetry event data to check
     */
    _isCartInfo(payload) {
        return payload.cartId !== undefined;
    }
    /**
     * Determines if the telemetry event data is IProductTransaction
     * @param payload Telemetry event data to check
     */
    _isProductTransaction(payload) {
        return payload.id !== undefined;
    }
    /*
     * Determines if the telemetry event data is ICustomEvent
     * @param payload Telemetry event data to check
    private _isCustomEvent(payload: TelemetryEventContent): payload is ICustomEvent {
        return (<ICustomEvent>payload).contentCategory !== undefined;
    }
     */
    /*
     * Converts IPageViewInfo data into the format 1DS expects
     * @param payload Telemetry event data to convert
    private _populatePageViewInfo(
        payload: IPageViewInfo
    ): { [key: string]: string | number | boolean | object | string[] | number[] | boolean[] } {
        return {
            title: payload.title,
            location: payload.location || '',
            page: payload.page || ''
        };
    }
     */
    /**
     * Converts ICartInfo data into the format 1DS expects
     * @param payload Telemetry event data to convert
     */
    _populateCartInfo(payload) {
        const productArray = [];
        payload.products.forEach(product => {
            productArray.push(this._populateProductInfo(product));
        });
        return {
            products: productArray,
            orderId: payload.orderId || '',
            cartId: payload.cartId || '',
            cartVersion: payload.cartVersion || ''
        };
    }
    /**
     * Converts IProductInfo data into the format 1DS expects
     * @param payload Telemetry event data to convert
     */
    _populateProductInfo(payload) {
        return {
            productChannelId: payload.productChannelId || '',
            productChannelName: payload.productChannelName || '',
            productCategoryId: payload.productCategoryId || '',
            productCategoryName: payload.productCategoryName || '',
            productId: payload.productId || '',
            productName: payload.productName || '',
            productSku: payload.productSku || '',
            productPrice: payload.productPrice || '',
            productQuantity: payload.productQuantity || '',
            productCurrency: payload.productCurrency || ''
        };
    }
    /**
     * Converts IProductTransaction data into the format 1DS expects
     * @param payload Telemetry event data to convert
     */
    _populateProductTransaction(payload) {
        const productArray = [];
        if (payload.products) {
            payload.products.forEach(product => {
                productArray.push(this._populateProductInfo(product));
            });
        }
        return {
            id: payload.id,
            affiliation: payload.affiliation || '',
            revenue: payload.revenue || -1,
            tax: payload.tax || -1,
            shippingCost: payload.shippingCost || -1,
            products: productArray
        };
    }
}
//# sourceMappingURL=commerce-insights-logger.js.map