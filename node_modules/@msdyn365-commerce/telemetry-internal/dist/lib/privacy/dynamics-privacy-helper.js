/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
/**
 * Wraps the given data in an 'AccessControl' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asAccessControl(data) {
    return {
        data: data,
        classificationLevel: 'AccessControl',
        isCustomerData: false,
        isRestrictedData: true,
        isPersonalData: false,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'CustomerContent' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asCustomerContent(data) {
    return {
        data: data,
        classificationLevel: 'CustomerContent',
        isCustomerData: true,
        isRestrictedData: true,
        isPersonalData: true,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'EUII' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asEUII(data) {
    return {
        data: data,
        classificationLevel: 'EUII',
        isCustomerData: true,
        isRestrictedData: true,
        isPersonalData: true,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'SupportData' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asSupportData(data) {
    return {
        data: data,
        classificationLevel: 'SupportData',
        isCustomerData: false,
        isRestrictedData: false,
        isPersonalData: true,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'AccountData' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asAccountData(data) {
    return {
        data: data,
        classificationLevel: 'AccountData',
        isCustomerData: false,
        isRestrictedData: false,
        isPersonalData: true,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'PublicPersonalData' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asPublicPersonalData(data) {
    return {
        data: data,
        classificationLevel: 'PublicPersonalData',
        isCustomerData: false,
        isRestrictedData: false,
        isPersonalData: true,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'EUPI' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asEUPI(data) {
    return {
        data: data,
        classificationLevel: 'EUPI',
        isCustomerData: false,
        isRestrictedData: false,
        isPersonalData: true,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'OII' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asOII(data) {
    return {
        data: data,
        classificationLevel: 'OII',
        isCustomerData: false,
        isRestrictedData: false,
        isPersonalData: false,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'SystemMetadata' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asSystemMetadata(data) {
    return {
        data: data,
        classificationLevel: 'SystemMetadata',
        isCustomerData: false,
        isRestrictedData: false,
        isPersonalData: false,
        __isDynamicsPrivacy: true
    };
}
/**
 * Wraps the given data in an 'PublicNonPersonalData' DynamicsPrivacyLog object.
 * @param data Data to wrap with privacy information
 */
export function asPublicNonPersonalData(data) {
    return {
        data: data,
        classificationLevel: 'PublicNonPersonalData',
        isCustomerData: false,
        isRestrictedData: false,
        isPersonalData: false,
        __isDynamicsPrivacy: true
    };
}
/**
 * Gets the data out of the input object if it is a DynamicsPrivacyLog object.
 * Filters data if it contains privacy information.
 * @param input Input object that may or may not be a DynamicsPrivacyLog
 */
// tslint:disable-next-line:no-any
export function getFilteredData(input) {
    // Check if the input is a DynamicsPrivacyLog object
    if (input && input.__isDynamicsPrivacy) {
        // If input contains privacy data, censor output
        if (input.isCustomerData || input.isRestrictedData || input.isPersonalData) {
            return `DATA CENSORED (${input.classificationLevel})`;
        }
        else {
            return input.data;
        }
    }
    else {
        return input;
    }
}
//# sourceMappingURL=dynamics-privacy-helper.js.map