/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// tslint:disable:no-floating-promises
import { LogLevel, NumericLogLevel } from '../interfaces';
import { TelemetryBase } from './telemetry-base';
/**
 * Telemetry client containing trace loggers
 */
export class Telemetry extends TelemetryBase {
    /**
     * Creates a new instance of Telemetry.
     */
    constructor() {
        super();
        /**
         * Logs a trace message with the Trace log level
         * @param message The string to log
         * @param args Any extra arguments to log. Will be converted to strings and appended to message
         */
        this.trace = (message, ...args) => {
            this._logTrace(LogLevel.Trace, message, args);
        };
        /**
         * Logs a trace message with the Debug log level
         * @param message The string to log
         * @param args Any extra arguments to log. Will be converted to strings and appended to message
         */
        this.debug = (message, ...args) => {
            this._logTrace(LogLevel.Debug, message, args);
        };
        /**
         * Logs a trace message with the Information log level
         * @param message The string to log
         * @param args Any extra arguments to log. Will be converted to strings and appended to message
         */
        this.information = (message, ...args) => {
            this._logTrace(LogLevel.Information, message, args);
        };
        /**
         * Logs a trace message with the Warning log level
         * @param message The string to log
         * @param args Any extra arguments to log. Will be converted to strings and appended to message
         */
        this.warning = (message, ...args) => {
            this._logTrace(LogLevel.Warning, message, args);
        };
        /**
         * Logs a trace message with the Error log level
         * @param message The string to log
         * @param args Any extra arguments to log. Will be converted to strings and appended to message
         */
        this.error = (message, ...args) => {
            this._logTrace(LogLevel.Error, message, args);
        };
        /**
         * Logs a trace message with the Critical log level
         * @param message The string to log
         * @param args Any extra arguments to log. Will be converted to strings and appended to message
         */
        this.critical = (message, ...args) => {
            this._logTrace(LogLevel.Critical, message, args);
        };
        /**
         * Logs an Error object as an exception
         * @param error The Error object to log
         */
        this.exception = (error) => {
            this.notifyTraceLoggers(logger => logger.exception(error, this._telemetryContext));
        };
        /**
         * Sets the properties specific to the current module that should be added to every log
         * @param moduleContext Contains the context items specific to the current module
         */
        this.setTelemetryModuleContext = (moduleContext) => {
            return () => {
                // Create copy of telemetry object with specified module context
                // TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?
                const telemetryWithContext = new Telemetry();
                telemetryWithContext._enableDataAnalytics = this._enableDataAnalytics;
                telemetryWithContext._webAnalyticsPlugin = this._webAnalyticsPlugin;
                telemetryWithContext._traceLoggers = this._traceLoggers;
                telemetryWithContext._eventLoggers = this._eventLoggers;
                telemetryWithContext._expLogger = this._expLogger;
                telemetryWithContext._attributeRenderers = this._attributeRenderers;
                telemetryWithContext._telemetryContext.requestContext = this._telemetryContext.requestContext;
                telemetryWithContext._telemetryContext.moduleContext = moduleContext;
                return telemetryWithContext;
            };
        };
        /**
         * Logs a structured message at the given log level, with optional custom tags and/or an exception
         * @param logLevel LogLevel of the message
         * @param messageTemplate String to log, denoting placeholders with {placeholder}.
         * Example input string: "Hello {signedInUser}! Good {morningOrEvening}!"
         * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.
         * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.
         */
        this.log = (logLevel, messageTemplate, logOptions) => {
            this._log(logLevel, messageTemplate, logOptions);
        };
        /**
         * Logs a trace message with the given LogLevel
         * @param logLevel LogLevel of the trace message
         * @param message The string to log
         * @param args Any extra arguments to log. Will be converted to strings and appended to message
         */
        this._logTrace = (logLevel, message, args) => {
            const requestedLogLevel = NumericLogLevel[logLevel];
            const minLogLevel = process.env.SDK_MIN_LOG_LEVEL;
            if (minLogLevel <= requestedLogLevel) {
                this.notifyTraceLoggers(logger => logger.log(logLevel, message, args, this._telemetryContext));
            }
        };
    }
}
//# sourceMappingURL=telemetry.js.map