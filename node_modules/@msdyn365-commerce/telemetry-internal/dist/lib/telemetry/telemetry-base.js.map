{"version":3,"file":"telemetry-base.js","sourceRoot":"","sources":["../../../src/telemetry/telemetry-base.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport uuid from 'uuid/v4';\nimport { commerceInsightsAttributeRenderer } from '../attribute-renderers';\nimport { CommerceInsightsLogger } from '../event-loggers';\nimport { generateEventNameHash, p } from '../helpers';\nimport {\n    ICustomEvent,\n    IDataAttributeRenderer,\n    IEventLogger,\n    IExpLogger,\n    IPageViewInfo,\n    IRegisterTraceLoggerOptions,\n    ITelemetry,\n    ITelemetryContext,\n    ITelemetryRequestContext,\n    ITraceLogger,\n    LogLevel,\n    NumericLogLevel,\n    TelemetryEvent,\n    TelemetryEventContent\n} from '../interfaces';\nimport { IDictionary } from '../interfaces/IDictionary';\nimport { ITrackDependency } from '../interfaces/ITrackDependency';\nimport { InternalTelemetryLogOptions } from './internal-telemetry-log-options';\nimport { TelemetryLogOptions } from './telemetry-log-options';\n\n// tslint:disable:no-floating-promises\n\n/**\n * Base class for Telemetry & Internal telemetry\n * @abstract\n * @class TelemetryBase\n */\nexport abstract class TelemetryBase {\n    /**\n     * Enable Data Analytics feature switch\n     */\n    protected _enableDataAnalytics: boolean;\n\n    /**\n     * Map of timers\n     */\n    protected _timers: Map<string, number>;\n\n    /**\n     * Array of ILogger objects representing the trace loggers used.\n     */\n    protected _traceLoggers: ITraceLogger[];\n\n    /**\n     * An object holding the information about telemetry event loggers.\n     */\n    protected _eventLoggers: IEventLogger[];\n\n    /**\n     * An object holding the information about the experimentation logger.\n     */\n    protected _expLogger: IExpLogger | undefined;\n\n    /**\n     * Array holding the registered Data Attribute Renderers\n     */\n    protected _attributeRenderers: IDataAttributeRenderer[];\n\n    /**\n     * Context object used with telemetry.\n     */\n    protected _telemetryContext: ITelemetryContext;\n\n    /**\n     * Dictionary of loggers by name (if one is provided)\n     */\n    protected _namedLoggers: IDictionary<ITraceLogger>;\n\n    /**\n     * WebAnalytics client used to send BI events\n     */\n    protected _webAnalyticsPlugin?: object;\n\n    public static generateGuid = (): string => {\n        return uuid();\n    };\n\n    public constructor() {\n        this._enableDataAnalytics = false;\n        this._traceLoggers = [];\n        this._eventLoggers = [];\n        this._attributeRenderers = [];\n        this._telemetryContext = {\n            requestContext: {},\n            moduleContext: {}\n        };\n        this._namedLoggers = {};\n        this._timers = new Map<string, number>();\n    }\n\n    /**\n     * Start a named timer\n     *\n     * @param {string} id of timer\n     * @memberof InternalTelemetry\n     */\n    public startTimer = (timerId: string): void => {\n        this._timers.set(timerId, Date.now());\n    };\n\n    /**\n     * Stops a named timer\n     *\n     * @param {string} timerId id of timer\n     * @param {boolean} [removeTimer=true] should time be removed from dictionary? default rue\n     * @returns {number} elapsed time in ms\n     */\n    public stopTimer = (timerId: string, removeTimer: boolean = true): number => {\n        const now = Date.now();\n        const result: number = this._timers.has(timerId) ? now - <number>this._timers.get(timerId) : -1;\n        if (removeTimer) {\n            this._timers.delete(timerId);\n        }\n        return result;\n    };\n\n    /**\n     * Saves the feature swtich marking whether data analytics is enabled for this request\n     */\n    public enableDataAnalytics = (enableDataAnalytics: boolean): void => {\n        this._enableDataAnalytics = enableDataAnalytics;\n\n        if (this._enableDataAnalytics) {\n            this._eventLoggers = [new CommerceInsightsLogger()];\n            this._attributeRenderers = [commerceInsightsAttributeRenderer];\n        }\n    };\n\n    /**\n     * Renders a data attribute string\n     */\n    public setTelemetryAttribute = (telemetryId: string, additionalTelemetryData?: object): IDictionary<string> => {\n        let telemetryAttribute: IDictionary<string> = {};\n\n        for (let i = 0; i < this._attributeRenderers.length; ++i) {\n            telemetryAttribute = { ...telemetryAttribute, ...this._attributeRenderers[i](telemetryId, additionalTelemetryData) };\n        }\n\n        return telemetryAttribute;\n    };\n\n    /**\n     * Logs a telemetry event.\n     */\n    public logEvent = (eventType: TelemetryEvent, payload: TelemetryEventContent): void => {\n        for (let i = 0; i < this._eventLoggers.length; ++i) {\n            p(() => this._eventLoggers[i].logEvent(eventType, payload));\n        }\n\n        // If exp logger is registered, mutate and send event\n        if (this._expLogger) {\n            let eventName: string | undefined = '';\n            switch (eventType) {\n                case TelemetryEvent.PageView:\n                    const pageViewEventName = (<IPageViewInfo>payload).title ? `${(<IPageViewInfo>payload).title}.PageView` : '';\n                    eventName = pageViewEventName;\n                    break;\n                case TelemetryEvent.Custom:\n                    eventName = this._generateEventName(payload);\n                    if (eventName) {\n                        break;\n                    }\n                default:\n                    eventName = eventType;\n            }\n            const eventNameHash = generateEventNameHash(eventName);\n            this._expLogger.logEvent(eventNameHash, payload);\n        }\n    };\n\n    /**\n     * Tracks a metric\n     */\n    public trackMetric = (name: string, value: number): void => {\n        this.notifyTraceLoggers(logger => logger.trackMetric(name, value, this._telemetryContext));\n    };\n\n    /**\n     * Tracks an event\n     */\n    public trackEvent = <TProperties, TMeasurements>(\n        name: string,\n        properties?: TProperties,\n        measurements?: TMeasurements,\n        context?: ITelemetryContext\n    ): void => {\n        this.notifyTraceLoggers(logger => logger.trackEvent<TProperties, TMeasurements>(name, properties, measurements, context));\n    };\n\n    public trackPageView = (page: string, url?: string) => {\n        this.notifyTraceLoggers(logger => logger.trackPageView(page, url));\n    };\n\n    public trackDependency = (options: ITrackDependency) => {\n        this.notifyTraceLoggers(logger => logger.trackDependency(options));\n    };\n\n    /**\n     * Adds the given trace logger to the list of trace loggers.\n     * @param traceLogger - The ILogger object to be added to the list of trace loggers\n     */\n    public registerTraceLogger = (options: IRegisterTraceLoggerOptions): void => {\n        if (options.traceLogger) {\n            if (options.traceLogger.initialize && options.options) {\n                options.traceLogger.initialize(options.options);\n            }\n            this._traceLoggers.push(options.traceLogger);\n            options.name && (this._namedLoggers[options.name] = options.traceLogger);\n        }\n    };\n\n    /**\n     * Adds the given event logger to the list of event loggers\n     * @param eventLogger - The IEventLogger object to be added to the list of event loggers\n     */\n    public registerEventLogger = (eventLogger: IEventLogger): void => {\n        this._eventLoggers.push(eventLogger);\n    };\n\n    /**\n     * Adds the given experimentation logger to the telemetry object\n     * @param expLogger - The IExpLogger object to be added\n     */\n    public registerExpLogger = (expLogger: IExpLogger): void => {\n        this._expLogger = expLogger;\n    };\n\n    /**\n     * Adds the given attribute renderer to the list of attribute renderers\n     * @param attributeRenderer - The IDataAttributeRenderer object to be added to the list of attribute renderers\n     */\n    public registerAttributeRenderer = (attributeRenderer: IDataAttributeRenderer): void => {\n        this._attributeRenderers.push(attributeRenderer);\n    };\n\n    /**\n     * Registers the Web Analytics plugin for use in the BI logging framework\n     */\n    public registerWebAnalyticsPlugin = (webAnalyticsPlugin: object): void => {\n        this._webAnalyticsPlugin = webAnalyticsPlugin;\n\n        // Pass Web Analytics plugin to the Commerce Insights logger\n        if (this._enableDataAnalytics) {\n            (<CommerceInsightsLogger>this._eventLoggers[0]).registerWebAnalyticsPlugin(webAnalyticsPlugin);\n        }\n    };\n\n    /**\n     * Merges the properties specific to the current request that should be added to every log\n     * @param requestContext Contains the context items specific to the current request\n     */\n    public setTelemetryRequestContext = (requestContext: Partial<ITelemetryRequestContext>): void => {\n        this._telemetryContext.requestContext = { ...(this._telemetryContext.requestContext || {}), ...requestContext };\n    };\n\n    /**\n     * Gets named logger if it exists\n     *\n     * @param {string} name name of logger to get\n     */\n    public getNamedLoggerInstance = <T extends unknown = ITelemetry>(name: string): T | undefined => {\n        return <T>this._namedLoggers[name];\n    };\n\n    /**\n     * String formatter\n     * @param templateString Template string\n     * @param args ordered argument list\n     */\n    public stringFormat = (templateString: string, args: string[]): string => {\n        for (let index = 0; index < args.length; ++index) {\n            templateString = templateString.replace(`$${index}`, args[index]);\n        }\n        return templateString;\n    };\n\n    /**\n     * Helper to notify trace loggers\n     *\n     * @private\n     * @memberof Telemetry\n     */\n    protected notifyTraceLoggers = (fx: (logger: ITraceLogger) => void) => {\n        // tslint:disable-next-line:no-console\n        for (let i = 0; i < this._traceLoggers.length; ++i) {\n            // TODO: revisit this unhandled promise\n            fx(this._traceLoggers[i]);\n        }\n    };\n\n    protected _log = (\n        logLevel: LogLevel,\n        messageTemplate: string,\n        logOptions?: InternalTelemetryLogOptions | TelemetryLogOptions\n    ): void => {\n        const requestedLogLevel = NumericLogLevel[logLevel];\n        const minLogLevel = <number>(<unknown>process.env.SDK_MIN_LOG_LEVEL);\n\n        // Do not log if below minimum log level\n        if (requestedLogLevel < minLogLevel) {\n            return;\n        }\n\n        // Create map of placeholders in string and arguments provided\n        const regex = /{([a-zA-Z_0123456789]+)}/g;\n        const placeholders = new Map();\n        const values = logOptions && logOptions.values ? logOptions.values : [];\n        let i = 0;\n        let match = regex.exec(messageTemplate);\n\n        while (match !== null) {\n            // If this placeholder is a repeat of a previous one\n            if (placeholders.get(match[1]) !== undefined) {\n                match = regex.exec(messageTemplate);\n                // Else if a new placeholder but no more arguments were given\n            } else if (values[i] === undefined) {\n                values[i] = `Undefined - No value given for this placeholder`;\n                // Still increment in case a placeholder value in the middle was undefined\n                placeholders.set(match[1], values[i++]);\n                // Get next match\n                match = regex.exec(messageTemplate);\n                // Else save match and next argument provided\n            } else {\n                placeholders.set(match[1], values[i++]);\n\n                // Get next match\n                match = regex.exec(messageTemplate);\n            }\n        }\n        this.notifyTraceLoggers((logger: ITraceLogger) => {\n            logger.sendLog(\n                logLevel,\n                this._telemetryContext,\n                messageTemplate,\n                placeholders,\n                logOptions && logOptions.customTags,\n                logOptions && logOptions.exception\n            );\n        });\n    };\n\n    /**\n     * Generates the event name for a custom click event\n     * @param payload Payload of custom event\n     */\n    private _generateEventName(payload: TelemetryEventContent): string | undefined {\n        if ((<ICustomEvent>payload).contentCategory === 'click') {\n            // tslint:disable-next-line:no-any\n            const attributes: any = (<ICustomEvent>payload).contentAction;\n\n            // Generate event name for custom clicks with page name, module name, and either element text or recordId\n            if (attributes && attributes.pgname && attributes.mname && (attributes.etext || attributes.recid)) {\n                return `${attributes.pgname}.${attributes.mname}.${attributes.etext || attributes.recid}${\n                    attributes.etype ? `.${attributes.etype}` : ''\n                }`;\n            }\n        }\n    }\n}\n"]}