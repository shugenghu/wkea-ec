{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../../../src/telemetry/telemetry.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-floating-promises\nimport { ITelemetry, ITelemetryModuleContext, LogLevel, NumericLogLevel } from '../interfaces';\nimport { TelemetryBase } from './telemetry-base';\nimport { TelemetryLogOptions } from './telemetry-log-options';\n\n/**\n * Telemetry client containing trace loggers\n */\nexport class Telemetry extends TelemetryBase implements ITelemetry {\n    /**\n     * Creates a new instance of Telemetry.\n     */\n    public constructor() {\n        super();\n    }\n\n    /**\n     * Logs a trace message with the Trace log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public trace = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Trace, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Debug log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public debug = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Debug, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Information log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public information = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Information, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Warning log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public warning = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Warning, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Error log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public error = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Error, message, args);\n    };\n\n    /**\n     * Logs a trace message with the Critical log level\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    public critical = (message: string, ...args: unknown[]): void => {\n        this._logTrace(LogLevel.Critical, message, args);\n    };\n\n    /**\n     * Logs an Error object as an exception\n     * @param error The Error object to log\n     */\n    public exception = (error: Error): void => {\n        this.notifyTraceLoggers(logger => logger.exception(error, this._telemetryContext));\n    };\n\n    /**\n     * Sets the properties specific to the current module that should be added to every log\n     * @param moduleContext Contains the context items specific to the current module\n     */\n    public setTelemetryModuleContext = (moduleContext: ITelemetryModuleContext) => {\n        return () => {\n            // Create copy of telemetry object with specified module context\n            // TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?\n            const telemetryWithContext = new Telemetry();\n            telemetryWithContext._enableDataAnalytics = this._enableDataAnalytics;\n            telemetryWithContext._webAnalyticsPlugin = this._webAnalyticsPlugin;\n            telemetryWithContext._traceLoggers = this._traceLoggers;\n            telemetryWithContext._eventLoggers = this._eventLoggers;\n            telemetryWithContext._expLogger = this._expLogger;\n            telemetryWithContext._attributeRenderers = this._attributeRenderers;\n            telemetryWithContext._telemetryContext.requestContext = this._telemetryContext.requestContext;\n            telemetryWithContext._telemetryContext.moduleContext = moduleContext;\n\n            return telemetryWithContext;\n        };\n    };\n\n    /**\n     * Logs a structured message at the given log level, with optional custom tags and/or an exception\n     * @param logLevel LogLevel of the message\n     * @param messageTemplate String to log, denoting placeholders with {placeholder}.\n     * Example input string: \"Hello {signedInUser}! Good {morningOrEvening}!\"\n     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.\n     * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.\n     */\n    public log = (logLevel: LogLevel, messageTemplate: string, logOptions?: TelemetryLogOptions): void => {\n        this._log(logLevel, messageTemplate, logOptions);\n    };\n\n    /**\n     * Logs a trace message with the given LogLevel\n     * @param logLevel LogLevel of the trace message\n     * @param message The string to log\n     * @param args Any extra arguments to log. Will be converted to strings and appended to message\n     */\n    private _logTrace = (logLevel: LogLevel, message: string, args: unknown[]): void => {\n        const requestedLogLevel = NumericLogLevel[logLevel];\n        const minLogLevel = <number>(<unknown>process.env.SDK_MIN_LOG_LEVEL);\n        if (minLogLevel <= requestedLogLevel) {\n            this.notifyTraceLoggers(logger => logger.log(logLevel, message, args, this._telemetryContext));\n        }\n    };\n}\n"]}