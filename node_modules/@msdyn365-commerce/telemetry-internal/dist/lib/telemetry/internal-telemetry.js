import { TelemetryBase } from './telemetry-base';
/**
 * Telemetry client containing trace loggers
 */
export class InternalTelemetry extends TelemetryBase {
    /**
     * Creates a new instance of InternalTelemetry.
     */
    constructor() {
        super();
        this.setTelemetryModuleContext = (moduleContext) => {
            return () => {
                // Create copy of telemetry object with specified module context
                // TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?
                const telemetryWithContext = new InternalTelemetry();
                telemetryWithContext._enableDataAnalytics = this._enableDataAnalytics;
                telemetryWithContext._webAnalyticsPlugin = this._webAnalyticsPlugin;
                telemetryWithContext._traceLoggers = this._traceLoggers;
                telemetryWithContext._eventLoggers = this._eventLoggers;
                telemetryWithContext._expLogger = this._expLogger;
                telemetryWithContext._attributeRenderers = this._attributeRenderers;
                telemetryWithContext._telemetryContext.requestContext = this._telemetryContext.requestContext;
                telemetryWithContext._telemetryContext.moduleContext = moduleContext;
                return telemetryWithContext;
            };
        };
        /**
         * Logs a structured message at the given log level, with optional custom tags and/or an exception
         * @param logLevel LogLevel of the message
         * @param messageTemplate String to log, denoting placeholders with {placeholder}.
         * Example input string: "Hello {signedInUser}! Good {morningOrEvening}!"
         * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.
         * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.
         */
        this.log = (logLevel, messageTemplate, logOptions) => {
            this._log(logLevel, messageTemplate, logOptions);
        };
    }
}
//# sourceMappingURL=internal-telemetry.js.map