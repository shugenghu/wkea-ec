{"version":3,"file":"internal-telemetry.js","sourceRoot":"","sources":["../../../src/telemetry/internal-telemetry.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD;;GAEG;AACH,MAAM,OAAO,iBAAkB,SAAQ,aAAa;IAChD;;OAEG;IACH;QACI,KAAK,EAAE,CAAC;QAGL,8BAAyB,GAAG,CAAC,aAAsC,EAAE,EAAE;YAC1E,OAAO,GAAG,EAAE;gBACR,gEAAgE;gBAChE,qGAAqG;gBACrG,MAAM,oBAAoB,GAAG,IAAI,iBAAiB,EAAE,CAAC;gBACrD,oBAAoB,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;gBACtE,oBAAoB,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBACpE,oBAAoB,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACxD,oBAAoB,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACxD,oBAAoB,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;gBAClD,oBAAoB,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBACpE,oBAAoB,CAAC,iBAAiB,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC;gBAC9F,oBAAoB,CAAC,iBAAiB,CAAC,aAAa,GAAG,aAAa,CAAC;gBAErE,OAAO,oBAAoB,CAAC;YAChC,CAAC,CAAC;QACN,CAAC,CAAC;QAEF;;;;;;;WAOG;QACI,QAAG,GAAG,CAAC,QAAkB,EAAE,eAAuB,EAAE,UAAwC,EAAQ,EAAE;YACzG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC;QACrD,CAAC,CAAC;IA9BF,CAAC;CA+BJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { IInternalTelemetry, ITelemetryModuleContext, LogLevel } from '../interfaces';\nimport { InternalTelemetryLogOptions } from './internal-telemetry-log-options';\nimport { TelemetryBase } from './telemetry-base';\n\n/**\n * Telemetry client containing trace loggers\n */\nexport class InternalTelemetry extends TelemetryBase implements IInternalTelemetry {\n    /**\n     * Creates a new instance of InternalTelemetry.\n     */\n    public constructor() {\n        super();\n    }\n\n    public setTelemetryModuleContext = (moduleContext: ITelemetryModuleContext) => {\n        return () => {\n            // Create copy of telemetry object with specified module context\n            // TODO: kopik do we need to create new instance of telemetry here or can we just capture in closure?\n            const telemetryWithContext = new InternalTelemetry();\n            telemetryWithContext._enableDataAnalytics = this._enableDataAnalytics;\n            telemetryWithContext._webAnalyticsPlugin = this._webAnalyticsPlugin;\n            telemetryWithContext._traceLoggers = this._traceLoggers;\n            telemetryWithContext._eventLoggers = this._eventLoggers;\n            telemetryWithContext._expLogger = this._expLogger;\n            telemetryWithContext._attributeRenderers = this._attributeRenderers;\n            telemetryWithContext._telemetryContext.requestContext = this._telemetryContext.requestContext;\n            telemetryWithContext._telemetryContext.moduleContext = moduleContext;\n\n            return telemetryWithContext;\n        };\n    };\n\n    /**\n     * Logs a structured message at the given log level, with optional custom tags and/or an exception\n     * @param logLevel LogLevel of the message\n     * @param messageTemplate String to log, denoting placeholders with {placeholder}.\n     * Example input string: \"Hello {signedInUser}! Good {morningOrEvening}!\"\n     * @param logOptions Contains arguments to replace placeholders, custom tags for log, and optional error object.\n     * For the example message template, arguments need to be provided for 'user' and 'morningOrEvening'.\n     */\n    public log = (logLevel: LogLevel, messageTemplate: string, logOptions?: InternalTelemetryLogOptions): void => {\n        this._log(logLevel, messageTemplate, logOptions);\n    };\n}\n"]}