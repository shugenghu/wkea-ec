/**
  known issues this will conflict with prettier rules in TSX files (replacing single with double quotes)
  until the following PR is merged in

  PR: https://github.com/prettier/prettier/issues/1080
  Discussion: https://github.com/prettier/prettier/pull/4798

  Current workaround, as annoying as it may be, is to run format & then lint commands to get proper single quotes
*/
{
    "extends": ["tslint-react", "tslint-microsoft-contrib"],
    "rules": {
        // Allow AsyncResults to be awaitable
        "await-promise": [true, "AsyncResult"],
        // random rule, not relevant
        "chai-vague-errors": false,
        // allow destructuring of "this"
        "no-this-assignment": [
            true,
            {
                "allow-destructuring": true
            }
        ],
        // allow variables to match reserved keywords
        "no-reserved-keywords": false,
        // allow require(..) style calls
        "no-var-requires": false,
        "no-void-expression": false,
        // allow single line comments
        "no-single-line-block-comment": false,
        // don't need promise/async always
        "promise-function-async": false,
        // relax rel
        "react-anchor-blank-noopener": false,
        // allow more explicit jsdoc
        "no-redundant-jsdoc": false,
        // allow '<TObject>{}'' format
        "no-object-literal-type-assertion": false,
        // :/
        "mocha-unneeded-done": false,
        // it's a language feature!
        "no-non-null-assertion": false,
        "no-import-side-effect": [
            true,
            {
                "ignore-module": "((jest|testcafe)$)|(\\.scss$)"
            }
        ],
        // why not
        "ordered-imports": true,
        // prefer const
        "prefer-const": true,
        // Basic for loops are actually the fastest in JavaScript
        "prefer-for-of": false,
        /* In the following,
         *
         * method(arg1:string = '', arg2: number )
         *
         * allows arg2 to be uninitialized
         */
        "missing-optional-annotation": false,
        // common pattern in redux/react to reassign same value back to incoming state variable
        "no-parameter-reassignment": false,
        // allow todos as comments
        "no-suspicious-comment": false,
        // allow default export name to diff from filename/module
        "match-default-export-name": false,
        // allow imports of from "import foo from 'module/submodule'"
        "no-submodule-imports": false,
        "no-backbone-get-set-outside-model": false,
        // don't require top level jsdoc header for each file
        "missing-jsdoc": false,
        // allow ++ and --
        "no-increment-decrement": false,
        // allow conditional checks on types other than bool
        "strict-boolean-expressions": false,
        "function-name": [
            true,
            {
                "method-regex": "^[a-z][\\w\\d]+$",
                "private-method-regex": "^_[a-z][\\w\\d]+$",
                "protected-method-regex": "^[_]?[a-z][\\w\\d]+$",
                "static-method-regex": "^[a-z][\\w\\d]+$",
                "function-regex": "^[_]?[a-z][\\w\\d]+$"
            }
        ],
        "jsx-curly-spacing": {
            "when": "always"
        },
        "jsx-no-bind": true,
        "jsx-boolean-value": ["never"],
        "jsx-alignment": true,
        "align":false,
        "jsx-equals-spacing": "never",
        "jsx-key": true,
        "jsx-no-lambda": true,
        "jsx-self-close": true,
        "jsx-wrap-multiline": true,
        "jsx-no-multiline-js": false,
        "jsx-no-string-ref": true,
        "jsx-ban-props": [false, ["style", "Use className and provide css rules instead of using inline styles."]],
        "no-duplicate-variable": true,
        "use-isnan": true,
        "triple-equals": [true],
        "max-line-length": [true, 250],
        "no-arg": true,
        "radix": true,
        // allow arrow functions to be inferred
        "typedef": [true, "call-signature", "parameter", "property-declaration", "member-variable-declaration"],
        "quotemark": [true, "single", "jsx-single", "avoid-escape"],
        "no-null-keyword": false,
        "export-name": false,
        "trailing-comma": [false],
        "whitespace": [false],
        "no-switch-case-fall-through": false,
        "variable-name": [true, "check-format", "allow-leading-underscore", "allow-pascal-case", "ban-keywords"],
        "class-name": true,
        "comment-format": [true, "check-space"],
        "curly": true,
        "eofline": false,
        "forin": true,
        "indent": [true, "spaces", 4],
        "interface-name": true,
        "label-position": true,
        "member-access": true,
        "member-ordering": [
            true,
            {
                "order": [
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "public-constructor",
                    "public-instance-method",
                    "protected-constructor",
                    "protected-instance-method",
                    "private-constructor",
                    "private-instance-method"
                ]
            }
        ],
        "no-any": true,
        "no-bitwise": true,
        "no-consecutive-blank-lines": true,
        "no-console": [true, "debug", "info", "time", "timeEnd", "trace"],
        "no-constant-condition": true,
        "no-construct": true,
        "no-debugger": false,
        "no-duplicate-parameter-names": true,
        "no-duplicate-switch-case": true,
        "no-empty": true,
        "no-eval": true,
        "no-function-expression": true,
        "no-internal-module": true,
        "no-shadowed-variable": true,
        "no-string-literal": true,
        "no-trailing-whitespace": true,
        // "no-unnecessary-semicolons": true, // removing in favor of 'semicolon' rule
        "no-unused-expression": false,
        // "no-unused-variable": true, // removing in favor of tsconfig.json per https://github.com/palantir/tslint/issues/2933
        "no-use-before-declare": false,
        "no-with-statement": true,
        "no-var-keyword": true,
        "object-literal-sort-keys": false,
        "one-line": [true, "check-open-brace", "check-catch", "check-else", "check-whitespace"],
        "semicolon": [true, "always", "ignore-bound-class-methods"],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "use-named-parameter": true,
        "linebreak-style": false,
        "no-relative-imports": false,
        "no-implicit-dependencies": false,
        "no-unsafe-any": false,
        "import-name": false,
        "no-default-export": false,
        "mocha-no-side-effect-code": false,
        "newline-before-return": false
    },
    "linterOptions": {
        // Exclude all js files from tslint. If JS files need to be linted use eslint
        // NOTE: The first glob pattern is needed for any partner env that extends
        // these tslint rules as exclude file paths are relative to the configuration
        // file they were specified in.
        "exclude": ["../../../**/*.js", "**/*.js"]
    }
}
