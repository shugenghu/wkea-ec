import 'jest';

import * as core from '@msdyn365-commerce/core';
import { CartLine } from '@msdyn365-commerce/retail-proxy';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import mockRequestContextReducedMaxQuantity from '../../__mocks__/request-context-reduced-max-quantity.json';
import mockRequestContextNoSettings from '../../__mocks__/request-context-nosettings.json';
import addProductsToCart from '../add-product-to-cart';

describe('addProductsToCart', () => {
    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });
    const actionContextWithReducedMaxQuantity = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContextReducedMaxQuantity) });
    const actionContextWithNoSettings = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContextNoSettings) });

    const cartLine1: CartLine = {
        ProductId: 1,
        Quantity: 1
    };

    const cartLine1Count5: CartLine = {
        ProductId: 1,
        Quantity: 5
    };

    const cartLine1Count8: CartLine = {
        ProductId: 1,
        Quantity: 8
    };

    const cartLine1CountNone: CartLine = {
        ProductId: 1
    };

    const cartLine2: CartLine = {
        ProductId: 3,
        Quantity: 1,
        DeliveryMode: '10',
        FulfillmentStoreId: 'Houston'
    };

    const cartLine3: CartLine = {
        ProductId: 4,
        Quantity: 1,
        DeliveryMode: '10',
        FulfillmentStoreId: 'Houston'
    };

    const cartLine4: CartLine = {
        ProductId: 3,
        Quantity: 1,
        DeliveryMode: '20',
        FulfillmentStoreId: 'Houston'
    };

    const cartLine5: CartLine = {
        ProductId: 3,
        Quantity: 1,
        DeliveryMode: '10',
        FulfillmentStoreId: 'Seattle'
    };

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });

    beforeEach(() => {
        jest.resetAllMocks();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockImplementation((ctx, id, cartLines) => {
            return Promise.resolve({
                Id: id,
                CartLines: cartLines
            });
        });
    });

    it('addProductsToCart returns FAILED if cart has no cart lines', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1 }, cartLine1, actionContext);

        expect(result.status).toBe('FAILED');
    });

    it('addProductsToCart merges lines if match found', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining(cartLine1)]));
    });

    it('addProductsToCart merges lines if match found version 2', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine2, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining(cartLine2)]));
    });

    it('addProductsToCart returns MAXQUANTITY error if product count already at max', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1, actionContextWithReducedMaxQuantity);

        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();

        expect(result.status).toBe('FAILED');
        expect(result.substatus).toBe('MAXQUANTITY');
        expect(result.cart).toEqual({
            CartLines: [ cartLine1Count5, cartLine2 ],
            Id: 'cart1'
        });
    });

    it('addProductsToCart uses 10 by default for MAXQUANTITY (below max quantity)', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1, actionContextWithNoSettings);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining(cartLine1)]));
    });

    it('addProductsToCart uses 10 by default for MAXQUANTITY (above max quantity)', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1Count8, actionContextWithNoSettings);

        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();

        expect(result.status).toBe('FAILED');
        expect(result.cart).toEqual({
            CartLines: [ cartLine1Count5, cartLine2 ],
            Id: 'cart1'
        });
    });

    it('addProductsToCart can merge when new line has no quantity', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1CountNone, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({
            ProductId: 1,
            Quantity: 1
        })]));
    });

    it('addProductsToCart can merge when existing line has no quantity', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1CountNone, cartLine2 ] }, cartLine1Count5, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({
            ProductId: 1,
            Quantity: 5
        })]));
    });

    it('addProductsToCart not adds line with reduced quantity if greater than min of max and availabilityQuantity with enableStockCheck is false', async () => {
        const availabilityQuantity = 5;
        const enableStockCheck = false;
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithReducedMaxQuantity, availabilityQuantity, enableStockCheck);

        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();

        expect(result.status).toBe('FAILED');
        expect(result.cart).not.toBeUndefined();
    });

    it('addProductsToCart adds line if greater than availabilityQuantity with enableStockCheck is false', async () => {
        const availabilityQuantity = 5;
        const enableStockCheck = false;
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithNoSettings, availabilityQuantity, enableStockCheck);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
    });

    it('addProductsToCart adds line if no match found', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({
            ProductId: 1,
            Quantity: 1
        })]));
    });

    it('addProductsToCart not adds line with reduced quantity if greater than max', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithReducedMaxQuantity);

        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();

        expect(result.status).toBe('FAILED');
        expect(result.cart).not.toBeUndefined();
    });

    it('addProductsToCart not adds line with reduced quantity if greater than min of max and availabilityQuantity', async () => {
        const availabilityQuantity = 5;
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithReducedMaxQuantity, availabilityQuantity);

        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();

        expect(result.status).toBe('FAILED');
        expect(result.cart).not.toBeUndefined();
    });

    it('addProductsToCart not adds line with reduced quantity if greater than availabilityQuantity', async () => {
        const availabilityQuantity = 5;
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithNoSettings, availabilityQuantity);

        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();

        expect(result.status).toBe('FAILED');
        expect(result.cart).not.toBeUndefined();
    });

    it('addProductsToCart adds line with quantity 1 if not specified', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1CountNone, actionContextWithReducedMaxQuantity);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({
            ProductId: 1,
            Quantity: 1
        })]));
    });

    it('addProductsToCart doesn\'t match if product ids don\'t match', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1, cartLine2 ] }, cartLine3, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({
            ProductId: 4,
            Quantity: 1,
            DeliveryMode: '10',
            FulfillmentStoreId: 'Houston'
        })]));
    });

    it('addProductsToCart doesn\'t match if delivery modes dont don\'t match', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1, cartLine2 ] }, cartLine4, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({
            ProductId: 3,
            Quantity: 1,
            DeliveryMode: '20',
            FulfillmentStoreId: 'Houston'
        })]));
    });

    it('addProductsToCart doesn\'t match if store ids ids don\'t match', async () => {
        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1, cartLine2 ] }, cartLine5, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({
            ProductId: 3,
            Quantity: 1,
            DeliveryMode: '10',
            FulfillmentStoreId: 'Seattle'
        })]));
    });

    it('addProductsToCart returns failure if trying to add but not cart version', async () => {
        const result = await addProductsToCart({ Id: 'cart1', CartLines: [ ] }, cartLine1, actionContext);

        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();

        expect(result.status).toBe('FAILED');
    });

    it('addProductsToCart returns failure if addCartLinesAsync fails', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockImplementation(cb => {
            return Promise.reject(new Error('Fail'));
        });

        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1, actionContext);

        expect(CartsDataActions.addCartLinesAsync).toBeCalled();

        expect(result.status).toBe('FAILED');
    });
});