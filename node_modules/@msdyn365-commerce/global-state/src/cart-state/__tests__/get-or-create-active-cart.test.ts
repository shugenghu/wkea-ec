import 'jest';

import * as core from '@msdyn365-commerce/core';
import { Cart } from '@msdyn365-commerce/retail-proxy';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import * as StoreOperationsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';
import mockRequestContextAnon from '../../__mocks__/request-context-anon.json';
import mockRequestContext from '../../__mocks__/request-context.json';
import getOrCreateActiveCart, * as helpers from '../get-or-create-active-cart';

const enum CartTokenPrefix {
    Auth = 't',
    Anon = 'p'
}

const requestContext = core.buildMockRequest(<Partial<core.IRequestContext>><unknown>mockRequestContext);
const requestContextAnon = core.buildMockRequest(<Partial<core.IRequestContext>><unknown>mockRequestContextAnon);
// @ts-ignore
StoreOperationsDataActions.getCustomerLoyaltyCardsAsync = jest.fn().mockResolvedValue([]);

describe('getOrCreateActiveCart Action Unit Tests: Auth customer with existing cartId p: and one auth cart', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });
    });

    beforeEach(() => {
        jest.resetAllMocks();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([
            {
                Id: 't:123',
                Version: 123,
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ]
            }
        ]);
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
                {
                    LineId: 'cl123'
                },
                {
                    LineId: 'cl456',
                    DeliveryMode: '50'
                }
            ]
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
            ]
        });
    });

    it('cartId present and a p: cartId is present in the cookie', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 't:123',
            CartLines: [
                {
                    LineId: 'cl12345'
                },
                {
                    LineId: 'cl123'
                }
            ]
        });

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(2);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });

    it('addCartLinesAsync throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockRejectedValue(new Error('Fail'));

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });

    it('addCartLinesAsync returns undefined', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockResolvedValue(undefined);

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });

    it('addCartLinesAsync returns bad data', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockResolvedValue({});

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });
});

describe('getOrCreateActiveCart Action Unit Tests: Auth customer with existing cartId p: and one auth cart', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });
    });

    beforeEach(() => {
        jest.resetAllMocks();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([
            {
                Id: 't:123',
                Version: 123,
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ]
            }
        ]);
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
                {
                    LineId: 'cl123'
                },
                {
                    LineId: 'cl456',
                    DeliveryMode: '50'
                }
            ]
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
            ]
        });
    });

    it('cartId present and a p: cartId is present in the cookie', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 't:123',
            CartLines: [
                {
                    LineId: 'cl12345'
                },
                {
                    LineId: 'cl123'
                }
            ]
        });

        currentCartCookie = 'p:2345';
        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(2);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });
});
describe('getOrCreateActiveCart Action Unit Tests: Auth customer with existing cartId p: and one auth cart destination cart lacks version', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        actionContext.requestContext.app.config.maxQuantityForCartLineItem =10;
        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });
    });

    beforeEach(() => {
        jest.resetAllMocks();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([
            {
                Id: 't:123',
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ]
            }
        ]);
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
                {
                    LineId: undefined
                },
                {
                    LineId: undefined,
                    DeliveryMode: '50'
                }
            ]
        });
    });

    it('cartId present and a p: cartId is present in the cookie', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 't:123',
            CartLines: [
                {
                    LineId: 'undefined',
                    DeliveryMode: '50'
                },
                {
                    LineId: 'undefined',
                    DeliveryMode: '50'
                }
            ]
        });

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });
});

describe('getOrCreateActiveCart Action Unit Tests: Auth customer with existing cartId p: and one auth cart but its empty', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');

        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });
    });

    beforeEach(() => {
        jest.resetAllMocks();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([
            {
                Id: 't:123',
                Version: 123,
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ]
            }
        ]);
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
            ]
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
            ]
        });
    });

    it('cartId present and a p: cartId is present in the cookie', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 't:123',
            CartLines: [
                {
                    LineId: 'cl12345'
                },
                {
                    LineId: 'cl123'
                }
            ]
        });

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });
});

describe('getOrCreateActiveCart Action Unit Tests: Auth customer with existing cartId p: and one auth cart with coupons', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([
            {
                Id: 't:123',
                Version: 123,
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ],
                Coupons: [
                    {
                        Code: '01'
                    },
                    {
                        Code: '02'
                    },
                ]
            }
        ]);
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
                {
                    LineId: 'cl123'
                },
                {
                    LineId: 'cl456',
                    DeliveryMode: '50'
                },
                {
                    LineId: 'cl12346',
                    Price: 50,
                    IsGiftCardLine: true
                }
            ],
            Coupons: [
                {
                    Code: '01'
                },
                {
                    Code: '02'
                },
            ]
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 't:123',
            CartLines: [
                {
                    LineId: 'cl12345'
                },
                {
                    LineId: 'cl123'
                }
            ],
            Coupons: [
                {
                    Code: '01'
                },
                {
                    Code: '02'
                },
            ]
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
            ],
            Coupons: [
                {
                    Code: '01'
                },
                {
                    Code: '02'
                },
            ]
        });
    });

    it('coupons successfully added', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCouponsAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345X',
            CartLines: [
                {
                    LineId: 'cl123'
                },
                {
                    LineId: 'cl456',
                    DeliveryMode: '50'
                }
            ],
            Coupons: [
                {
                    Code: '01'
                },
                {
                    Code: '02'
                },
            ]
        });

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('p:2345X');
                expect(cart!.Coupons).toBeDefined();
                expect(cart!.Coupons!.length).toBe(2);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });

    it('coupons not successfully added', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCouponsAsync = jest.fn().mockRejectedValue(Error('fail'));

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.Coupons).not.toBe(undefined);
                expect(cart!.Coupons!.length).toBe(2);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });
});

describe('getOrCreateActiveCart Action Unit Tests: Auth customer with existing cartId p: no auth cart', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();
        actionContext.requestContext.app.config.maxQuantityForCartLineItem =10;
        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([]);

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: '2345',
            CartLines: [
                {
                    LineId: 'cl123'
                }
            ]
        });
    });

    it('cartId present and a p: cartId is present in the cookie', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockResolvedValue({
            Id: '2345',
            CustomerId: '12345',
            CartLines: [
                {
                    LineId: 'cl123'
                }
            ]
         });

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('2345');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
                expect(currentCartCookie).toBe('t:2345');
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });

    });

    it('cartId present and a p: cartId is present in the cookie and claim cart fails', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockResolvedValue(undefined);

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).toBeUndefined();
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });
});

describe('getOrCreateActiveCart Action Unit Tests: Auth customer with existing cartId t:', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([
            {
                Id: 't:123',
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ]
            }
        ]);
    });

    it('cartId present and a t: cartId is present in the cookie and read async passes', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: 't:0123',
            CartLines: [
                {
                    LineId: 'cl12345'
                }
            ]
        });

        currentCartCookie = 't:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:0123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to fetch existing auth cart from retail server');
            });

    });

    it('cartId present and a t: cartId is present in the cookie but read async fails so does a search', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue(undefined);

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.createCartAsync = jest.fn().mockResolvedValue({
            Id: 't:456',
            CartLines: [
                {
                    LineId: 'cl12345'
                }
            ]
        });

        currentCartCookie = 't:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to fetch existing auth cart from retail server');
            });
    });
});

describe('getOrCreateActiveCart Action Unit Tests: Auth customer with no existing cartId and one auth cart', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([
            {
                Id: 't:123',
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ]
            }
        ]);
        document.cookie='cart=';
    });

    it('returns auth cart', async () => {
        currentCartCookie = '';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to return existing auth cart when cookie not available');
            });

    });
});

// tslint:disable-next-line:mocha-avoid-only
describe('getOrCreateActiveCart Action Unit Tests: Auth customer with no existing cartId and no auth cart', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([]);

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.createCartAsync = jest.fn().mockResolvedValue({
            Id: 't:123',
            CartLines: [
                {
                    LineId: 'cl12345'
                }
            ]
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockResolvedValue(
            {
                Id: 't:123',
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ]
            }
        );

        document.cookie='cart=';
    });

    it('will create a new cart and return it', async () => {
        currentCartCookie = '';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable create a new cart and claim it as auth cart');
            });

    });
});

describe('getOrCreateActiveCart Action Unit Tests: Anon customer with existing cartId', () => {
    const actionContextAnon = core.buildMockActionContext({ requestContext: requestContextAnon });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContextAnon.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContextAnon.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
                {
                    LineId: 'cl123'
                }
            ]
        });
    });

    it('cartId present and a p: cartId is present in the cookie', async () => {
        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContextAnon)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('p:2345');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable get anon cart based on cookie');
            });

    });
});

describe('getOrCreateActiveCart Action Unit Tests: Anon customer with no existing cartId', () => {
    const actionContextAnon = core.buildMockActionContext({ requestContext: requestContextAnon });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContextAnon.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContextAnon.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.createCartAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
                {
                    LineId: 'cl123'
                }
            ]
        });
        document.cookie='cart=';
    });

    it('creates a new anon cart', async () => {
        currentCartCookie = '';

        await getOrCreateActiveCart(actionContextAnon)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('p:2345');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run create a new anon cart');
            });

    });
});

describe('getOrCreateActiveCart Action Unit Tests: Anon customer with no existing cartId', () => {
    const actionContextAnon = core.buildMockActionContext({ requestContext: requestContextAnon });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContextAnon.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContextAnon.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.createCartAsync = jest.fn()
            .mockImplementationOnce(cb => {
                return {
                    Id: 'p:2345',
                    CartLines: [
                        {
                            LineId: 'cl123'
                        }
                    ]
                };
        });
    });

    it('creates a new anon cart', async () => {
        currentCartCookie = '';

        await getOrCreateActiveCart(actionContextAnon)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('p:2345');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(1);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Worst case scenario creation of cart failed');
            });

    });
});

describe('Other tests for getOrCreateActiveCart', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });
    });

    it('Defaults to createCartAsync when other steps fail', async () => {
        currentCartCookie = 'p:2345';

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.createCartAsync = jest.fn().mockImplementation(cb => {
            return {
                Id: 'p:2345',
                CartLines: [
                    {
                        LineId: 'cl123'
                    }
                ]
            };
        });

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockImplementation(cb => {
            throw new Error('Fail');
        });

        const newCart = await getOrCreateActiveCart(actionContext);

        expect(newCart).not.toBeUndefined();
        expect(newCart!.Id).toBe('p:2345');
    });

    it('Returns undefined when createNewCart fails', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.createCartAsync = jest.fn().mockImplementation(cb => undefined);

        const newCart = await helpers.createNewCart(actionContext);

        expect(newCart).toBeUndefined();
    });
});

describe('Queries for loyalty card when cart is not read from the cookie', () => {

    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
        jest.resetAllMocks();

        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });

        const mockCart =  {
            Id: 't:123',
            CartLines: [
                {
                    LineId: 'cl12345'
                }
            ]
        };

        // @ts-ignore
        StoreOperationsDataActions.getCustomerLoyaltyCardsAsync = jest.fn().mockResolvedValue([{CardNumber: 'foo'}]);

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([mockCart]);
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, cart)=> {
            return cart;
        });
        document.cookie='cart=';
    });

    it('returns auth cart', async () => {
        currentCartCookie = '';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();
                expect(cart!.LoyaltyCardId).toBe('foo');
            });
    });
});
describe('getOrCreateActiveCart Action Unit Tests: Auth customer with existing cartId p: and one auth cart lines dont have ids', () => {
    const actionContext = core.buildMockActionContext({ requestContext });
    let currentCartCookie: string = '';

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');

        actionContext.requestContext.cookies.setCartCookie = ((cart, isAuthenticated) => {
            const prefix = isAuthenticated ? CartTokenPrefix.Auth : CartTokenPrefix.Anon;
            currentCartCookie = [prefix, cart.Id].join(':');
        });

        actionContext.requestContext.cookies.getCartCookie = (() => {
            return currentCartCookie;
        });
    });

    beforeEach(() => {
        jest.resetAllMocks();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.searchAsync = jest.fn().mockResolvedValue([
            {
                Id: 't:123',
                Version: 123,
                CartLines: [
                    {
                        LineId: 'cl12345'
                    }
                ]
            }
        ]);
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: 'p:2345',
            CartLines: [
                {
                    LineId: undefined
                },
                {
                    LineId: undefined,
                    DeliveryMode: '505'
                }
            ]
        });
    });

    it('cartId present and a p: cartId is present in the cookie', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addCartLinesAsync = jest.fn().mockResolvedValue({
            Id: 't:123',
            CartLines: [
                {
                    LineId: 'cl12345'
                },
                {
                    LineId: 'cl123'
                }
            ]
        });

        currentCartCookie = 'p:2345';

        await getOrCreateActiveCart(actionContext)
            .then((cart: Cart | undefined) => {
                expect(cart).not.toBeUndefined();

                expect(cart!.Id).toBe('t:123');
                expect(cart!.CartLines).not.toBe(undefined);
                expect(cart!.CartLines!.length).toBe(2);
            })
            .catch((error: Error) => {
                console.error(error);
                throw new Error('Unable to run getOrCreateActiveCart Action with cartId present and a p: cartId');
            });
    });
});