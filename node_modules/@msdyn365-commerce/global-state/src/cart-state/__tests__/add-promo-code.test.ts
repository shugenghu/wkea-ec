import 'jest';

import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import addPromoCode from '../add-promo-code';

describe('addPromoCode tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });

    beforeEach(() => {
        jest.resetAllMocks();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addDiscountCodeAsync = jest.fn();
    });

    it('addPromoCode returns FAILED if cart is undefined', async () => {
        const result = await addPromoCode(undefined, 'SAVE10', actionContext);

        expect(result.status).toBe('FAILED');

        expect(CartsDataActions.addDiscountCodeAsync).not.toBeCalled();
    });

    it('addPromoCode returns ALREADYADDED if code is already in cart', async () => {
        const result = await addPromoCode({ Id: 'cart1', Coupons: [ { Code: 'save5' }, { Code: 'save10' } ]}, 'SAVE10', actionContext);

        expect(result.status).toBe('FAILED');
        expect(result.substatus).toBe('ALREADYADDED');

        expect(CartsDataActions.addDiscountCodeAsync).not.toBeCalled();
    });

    it('addPromoCode returns success if code added', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addDiscountCodeAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve({
                Id: 'cart2',
                Coupons: [
                    {
                        Code: 'SAVE10'
                    }
                ]
            });
        });

        const result = await addPromoCode({ Id: 'cart1'}, 'SAVE10', actionContext);

        expect(CartsDataActions.addDiscountCodeAsync).toHaveBeenCalledWith(
            expect.anything(),
            'cart1',
            'SAVE10'
        );

        expect(result.status).toBe('SUCCESS');
        expect(result.cart!.Id).toEqual('cart2');
    });

    it('addPromoCode returns failure if RTS call succeeds but code not added', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addDiscountCodeAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve({
                Id: 'cart2',
                Coupons: [
                ]
            });
        });

        const result = await addPromoCode({ Id: 'cart1'}, 'SAVE10', actionContext);

        expect(CartsDataActions.addDiscountCodeAsync).toHaveBeenCalledWith(
            expect.anything(),
            'cart1',
            'SAVE10'
        );

        expect(result.status).toBe('FAILED');
        expect(result.cart).toBeUndefined();
    });

    it('addPromoCode returns failure if addDiscountCodeAsync throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.addDiscountCodeAsync = jest.fn().mockImplementation(cb => {
            return Promise.reject(new Error('Fail'));
        });

        const result = await addPromoCode({ Id: 'cart1'}, 'SAVE10', actionContext);

        expect(CartsDataActions.addDiscountCodeAsync).toHaveBeenCalledWith(
            expect.anything(),
            'cart1',
            'SAVE10'
        );

        expect(result.status).toBe('FAILED');
        expect(result.cart).toBeUndefined();
    });
});