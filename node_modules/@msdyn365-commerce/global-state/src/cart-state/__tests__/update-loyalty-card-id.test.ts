import 'jest';

import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import updateLoyaltyCardId from '../update-loyalty-card-id';

describe('updateLoyaltyCardId tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });

    beforeEach(() => {
        jest.resetAllMocks();

        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn();
    });

    it('returns FAILED if cart is undefined', async () => {
        const result = await updateLoyaltyCardId(undefined, 'CARD1', actionContext);

        expect(result.status).toBe('FAILED');

        expect(CartsDataActions.updateAsync).not.toBeCalled();
    });

    it('returns success if code added', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve({
                Id: 'cart2'
            });
        });

        const result = await updateLoyaltyCardId({ Id: 'cart1'}, 'CARD1', actionContext);

        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(
            expect.anything(),
            expect.objectContaining({
                Id: 'cart1',
                LoyaltyCardId: 'CARD1'
            })
        );

        expect(result.status).toBe('SUCCESS');
        expect(result.cart!.Id).toEqual('cart2');
    });

    it('returns failure if updateAsync throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation(cb => {
            return Promise.reject(new Error('Fail'));
        });

        const result = await updateLoyaltyCardId({ Id: 'cart1'}, 'CARD1', actionContext);

        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(
            expect.anything(),
            expect.objectContaining({
                Id: 'cart1',
                LoyaltyCardId: 'CARD1'
            })
        );

        expect(result.status).toBe('FAILED');
        expect(result.cart).toBeUndefined();
    });
});