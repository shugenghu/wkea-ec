import { Cart, OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { AttributeValueBase, CommerceProperty } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { IActionResult } from '../global-state/i-action-result';
import { IGlobalState } from '../global-state/i-global-state';

export type ICartActionSubStatus = 'MAXQUANTITY' | 'NOTFOUND' | 'ALREADYADDED' | 'NOCONTENT' | 'EMPTYINPUT' | 'MISSINGDIMENSION';
export interface ICartActionResult extends IActionResult<ICartActionSubStatus> { }

export interface ICartState extends IGlobalState {
    readonly cart: Readonly<Cart>;

    /**
     * Returns a count of the total number of items in the cart
     */
    readonly totalItemsInCart: number;

    /**
     * Returns if cart is empty or not
     */
    readonly isEmpty: boolean;

    /**
     * Returns cart attribute values
     */
    readonly attributeValues: AttributeValueBase[];

    /**
     * Returns cart extension properties
     */
    readonly extensionProperties: CommerceProperty[];

    /**
     * Gets a new version of the cart from the retail server and uses the result
     * to update the existing cart
     *
     * Other actions should keep cart up to date so shouldn't need to call this
     * outside of initialization but still might be scenarios where a manual
     * refresh is needed
     */
    refreshCart(input: { additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Adds the specified product to the current cart. If product is already in cart
     * will update its cart line, otherwise will add a new cart line to the cart
     *
     * @param product The product to add to the cart
     * @param count: How many copies of the product to add
     * @param location: The org unit location, used for BuyOnlinePickupInStore scenarios
     * (If you want item to simply be shipped, leave this parameter undefined)
     */
    addProductToCart(input: {product: SimpleProduct; count?: number; location?: OrgUnitLocation; additionalProperties?: object; availableQuantity?: number; enableStockCheck?: boolean}): Promise<ICartActionResult>;

    /**
     * Removes the cart lines with the provided ids from the cart
     *
     * @param cartLineIds The cart lines to remove
     */
    removeCartLines(input: { cartLineIds: string[]; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Clears the pickup location information from the provided cart line,
     * resulting in it getting shipped to the customer
     *
     * @param cartLineId The cart line to clear the location from
     */
    clearCartLinePickupLocation(input: { cartLineId: string; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Marks the provided cartline for pickup in store, with the provided location as
     * the pickup location
     *
     * @param cartLineId The cart line to mark for pickup
     * @param location The location to set for pickup
     */
    updateCartLinePickupLocation(input: { cartLineId: string; location: OrgUnitLocation; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Updates the delivery mode for items in the cart with the desired delivery mode, preserving BOPIS status for stuff already marked as BOPIS
     *
     * @param deliveryModeId The delivery mode to use
     */
    updateCartDeliverySpecification(input: { deliveryModeId: string; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Updates the quantity of the cart line
     *
     * @param cartLineId The cart line to update the quantity
     * @param newQuantity The new quantity to use (note that if this exceeds max quantity, will set quantity to max quantity)
     */
    updateCartLineQuantity(input: { cartLineId: string; newQuantity: number; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Updates the loyalty card ID on the card
     *
     * @param loyaltyCardId The loyalty card id to use
     */
    updateLoyaltyCardId(input: { loyaltyCardNumber: string | undefined; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Adds promo code to the cart
     *
     * @param promoCode The promo code to add
     */
    addPromoCode(input: { promoCode: string; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Removes promo codes from the cart
     *
     * @param promoCodes The promo codes to remove
     */
    removePromoCodes(input: { promoCodes: string[]; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Removes all promo code from the cart
     */
    removeAllPromoCodes(input: { additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Adds reciept email to the cart
     */
    updateReceiptEmail(input: { newEmail: string; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Updates the cart object
     *
     * @param newCart The new cart to update
     */
    updateCart(input: { newCartObject: Cart; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Updates the attribute values
     *
     * @param newAttributeValues The new attribute values to update
     */
    updateAttributeValues(input: { newAttributeValues: AttributeValueBase[]; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Updates the extension properties
     *
     * @param newExtensionProperties The new extension properties to update
     */
    updateExtensionProperties(input: { newExtensionProperties: CommerceProperty[]; additionalProperties?: object }): Promise<ICartActionResult>;

    /**
     * Clears the delivery mode, and other information for the shipping cart lines.
     */
    clearCartLinesDeliveryInformation(input: {cart: Readonly<Cart | undefined>; additionalProperties?: object }): Promise<ICartActionResult>;
}