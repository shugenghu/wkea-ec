import 'jest';

import * as core from '@msdyn365-commerce/core';
import {
    Address, AttributeValueBase, CommerceProperty, GiftCard, SalesOrder, TenderLine,
    TokenizedPaymentCard
} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';

import mockRequestContext from '../../__mocks__/request-context.json';
import getCheckoutCart from '../../data-actions/get-checkout-cart';
import { ICheckoutGenericData, IGiftCardExtend } from '../../state-interfaces';
import * as CheckoutCartState from '../base-checkout-cart-state';
import { BaseCheckoutState } from '../base-checkout-state';
import { CheckoutStorageKey } from '../checkout-state-storage';
import { Cart } from '@msdyn365-commerce/retail-proxy';

describe('BaseCheckoutState', () => {
    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();

        jest.mock('../base-checkout-cart-state');
    });

    beforeEach(() => {
        jest.resetAllMocks();
        // @ts-ignore
        actionContext.requestContext.sessionStorage = {
            setCheckoutCartData: jest.fn().mockResolvedValue({}),
            getCheckoutCartData: jest.fn().mockResolvedValue(undefined),
            removeCheckoutCartData: jest.fn().mockResolvedValue(undefined)
        };
    });

    it('salesOrder and orderedProducts have default values and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.salesOrder).toEqual(undefined);
        expect(checkoutState.orderedProducts).toEqual(undefined);

        const mockSalesOrder: SalesOrder = {
            Id: '0',
            AttributeValues: [{ Name: 'attributeValues' }],
            ExtensionProperties: [{ Key: 'key', Value: { StringValue: 'stringValue' } }]
        };

        checkoutState.updateSalesOrder({ newSalesOrder: mockSalesOrder, newOrderedProducts: [] });
        expect(checkoutState.salesOrder).toEqual(mockSalesOrder);
        expect(checkoutState.orderedProducts).toEqual([]);
        expect(checkoutState.attributeValues).toEqual([{ Name: 'attributeValues' }]);
        expect(checkoutState.extensionProperties).toEqual([{ Key: 'key', Value: { StringValue: 'stringValue' } }]);

        const mockSalesOrder2: SalesOrder = {
            Id: '0'
        };

        checkoutState.updateSalesOrder({ newSalesOrder: mockSalesOrder2, newOrderedProducts: [] });
        expect(checkoutState.attributeValues).toEqual([]);
        expect(checkoutState.extensionProperties).toEqual([]);
    });

    it('attributeValues have default values and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.attributeValues).toEqual([]);

        const newAttributeValues: AttributeValueBase[] = [{ Name: 'attributeValues' }];

        checkoutState.updateAttributeValues({ newAttributeValues: newAttributeValues });
        expect(checkoutState.attributeValues).toEqual(newAttributeValues);
    });

    it('extensionProperties have default values and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.extensionProperties).toEqual([]);

        const newExtensionProperties: CommerceProperty[] = [{ Key: 'key', Value: { StringValue: 'stringValue' } }];

        checkoutState.updateExtensionProperties({ newExtensionProperties: newExtensionProperties });
        expect(checkoutState.extensionProperties).toEqual(newExtensionProperties);
    });

    it('guestCheckoutEmail has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.guestCheckoutEmail).toEqual('');
        checkoutState.updateGuestCheckoutEmail({ newGuestCheckoutEmail: 'example@test.com' });
        expect(checkoutState.guestCheckoutEmail).toEqual('example@test.com');
    });

    it('guestCheckoutEmail has default value and saved in cart', async () => {

        const cart: Cart = {
            Id: 'c1',
            ReceiptEmail: 'oldexample@test.com'
        };

        // @ts-ignore
        getCheckoutCart = jest.fn().mockImplementation(cb => {
            return cart;
        });

        const checkoutState = new BaseCheckoutState(actionContext);
        await checkoutState.initialize();

        checkoutState.checkoutCart.updateReceiptEmail = jest.fn().mockImplementation(cb => {
            return Promise.resolve({ Id: 'c1', ReceiptEmail: 'example@test.com' });
        });

        await checkoutState.updateGuestCheckoutEmail({ newGuestCheckoutEmail: 'example@test.com', additionalProperties: { saveEmail: true } });

        expect(getCheckoutCart).toBeCalled();
        expect(checkoutState.checkoutCart.updateReceiptEmail).toBeCalled();
        expect(checkoutState.guestCheckoutEmail).toEqual('example@test.com');
    });

    it('guestCheckoutEmail should not call updateReceiptEmail if same email set in cart', async () => {
        const cart: Cart = {
            Id: 'c1',
            ReceiptEmail: 'example@test.com'
        };

        // @ts-ignore
        getCheckoutCart = jest.fn().mockImplementation(cb => {
            return cart;
        });

        const checkoutState = new BaseCheckoutState(actionContext);
        await checkoutState.initialize();

        checkoutState.checkoutCart.updateReceiptEmail = jest.fn().mockImplementation(cb => {
            return Promise.resolve({ Id: 'c1', ReceiptEmail: 'example@test.com' });
        });

        await checkoutState.updateGuestCheckoutEmail({ newGuestCheckoutEmail: 'example@test.com', additionalProperties: { saveEmail: true } });

        expect(checkoutState.checkoutCart.updateReceiptEmail).not.toBeCalled();
        expect(checkoutState.guestCheckoutEmail).toEqual('example@test.com');
    });

    it('billingAddress has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newAddress: Address = {};

        expect(checkoutState.billingAddress).toEqual(undefined);
        checkoutState.updateBillingAddress({ newBillingAddress: newAddress });
        expect(checkoutState.billingAddress).toEqual(newAddress);
    });

    it('isTermsAndConditionAccepted has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newIsTermsAndConditionAccepted = true;

        expect(checkoutState.isTermsAndConditionAccepted).toEqual(undefined);
        checkoutState.updateTermsAndConditionsAcceptance({ newIsTermsAndConditionAccepted: newIsTermsAndConditionAccepted });
        expect(checkoutState.isTermsAndConditionAccepted).toEqual(newIsTermsAndConditionAccepted);
    });

    it('billingAddress with additional value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newAddress: Address = {};

        expect(checkoutState.billingAddress).toEqual(undefined);
        checkoutState.updateBillingAddress({ newBillingAddress: newAddress, additionalProperties: { isBillingAddressSameAsShippingAddress: true } });
        expect(checkoutState.billingAddress).toEqual(newAddress);
        expect(checkoutState.isBillingAddressSameAsShippingAddress).toEqual(true);
    });

    it('remove billingAddress', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newAddress: Address = {};

        expect(checkoutState.billingAddress).toEqual(undefined);
        checkoutState.updateBillingAddress({ newBillingAddress: newAddress, additionalProperties: { isBillingAddressSameAsShippingAddress: true } });
        expect(checkoutState.billingAddress).toEqual(newAddress);
        expect(checkoutState.isBillingAddressSameAsShippingAddress).toEqual(true);

        checkoutState.removeBillingAddress({});
        expect(checkoutState.billingAddress).toBeUndefined();
        expect(checkoutState.isBillingAddressSameAsShippingAddress).toBeUndefined();
    });

    it('shippingAddress has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newAddress: Address = {};

        expect(checkoutState.shippingAddress).toEqual(undefined);
        checkoutState.updateShippingAddress({ newShippingAddress: newAddress });
        expect(checkoutState.shippingAddress).toEqual(newAddress);
    });

    it('cardPrefix has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.cardPrefix).toEqual(undefined);
        checkoutState.updateCardPrefix({ newCardPrefix: 'A1' });
        expect(checkoutState.cardPrefix).toEqual('A1');
    });

    it('loyaltyAmount has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.loyaltyAmount).toEqual(0);
        checkoutState.updateLoyaltyAmount({ newAmount: 9000 });
        expect(checkoutState.loyaltyAmount).toEqual(9000);
    });

    it('loyaltyAmount rounds if fractional past two digits', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.loyaltyAmount).toEqual(0);
        checkoutState.updateLoyaltyAmount({ newAmount: 123.4567 });
        expect(checkoutState.loyaltyAmount).toEqual(123.46);
    });

    it('loyaltyCardNumber has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.loyaltyCardNumber).toEqual(undefined);
        checkoutState.updateLoyaltyCardNumber({ newLoyaltyCardNumber: '10000000' });
        expect(checkoutState.loyaltyCardNumber).toEqual('10000000');
    });

    it('tenderLine has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newTenderLine: TenderLine = {};

        expect(checkoutState.tenderLine).toEqual(undefined);
        checkoutState.updateTenderLine({ newTenderLine });
        expect(checkoutState.tenderLine).toEqual(newTenderLine);
    });

    it('tokenizedPaymentCart has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newTokenizedPaymentCard: TokenizedPaymentCard = {};

        expect(checkoutState.tokenizedPaymentCard).toEqual(undefined);
        checkoutState.updateTokenizedPaymentCard({ newTokenizedPaymentCard });
        expect(checkoutState.tokenizedPaymentCard).toEqual(newTokenizedPaymentCard);
    });

    it('tender type has default value and can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newPaymentTenderType: string = 'newPaymentTenderType';

        expect(checkoutState.paymentTenderType).toEqual(undefined);
        checkoutState.updatePaymentTenderType({ newPaymentTenderType });
        expect(checkoutState.paymentTenderType).toEqual(newPaymentTenderType);
    });

    it('giftCards starts out as empty', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.giftCards).toEqual([]);
    });

    it('giftCards can be added', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newGiftCard: GiftCard = { Id: '1' };
        checkoutState.addGiftCard({ giftCard: newGiftCard });
        expect(checkoutState.giftCards).toContainEqual(newGiftCard);

        const anotherNewGiftCard: GiftCard = { Id: '2' };
        checkoutState.addGiftCard({ giftCard: anotherNewGiftCard });
        expect(checkoutState.giftCards).toContainEqual(newGiftCard);
        expect(checkoutState.giftCards).toContainEqual(anotherNewGiftCard);
    });

    it('giftCards can add extended gift card', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newGiftCard: IGiftCardExtend = { Id: '1', Pin: '1111', ExpirationDate: 'date-1', TenderTypeId: '12-1' };
        checkoutState.addGiftCard({ giftCard: newGiftCard, additionalProperties: { Pin: '1111', ExpirationDate: 'date-1', TenderTypeId: '12-1' } });
        expect(checkoutState.giftCardExtends).toContainEqual(newGiftCard);

        const anotherNewGiftCard: IGiftCardExtend = { Id: '2', Pin: '2222', ExpirationDate: 'date-2', TenderTypeId: '12-2' };
        checkoutState.addGiftCard({ giftCard: anotherNewGiftCard, additionalProperties: { Pin: '2222', ExpirationDate: 'date-2', TenderTypeId: '12-2' } });
        expect(checkoutState.giftCardExtends).toContainEqual(newGiftCard);
        expect(checkoutState.giftCardExtends).toContainEqual(anotherNewGiftCard);
    });

    it('giftCards can be removed', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const giftCard1: GiftCard = { Id: '1' };
        const giftCard2: GiftCard = { Id: '2' };
        const giftCard3: GiftCard = { Id: '3' };

        // @ts-ignore: initializing test data
        checkoutState['_giftCardExtends'] = [giftCard1, giftCard2, giftCard3, giftCard1];

        checkoutState.removeGiftCard({ giftCardNumber: '1' });
        checkoutState.removeGiftCard({ giftCardNumber: '2' });

        expect(checkoutState.giftCards).not.toContainEqual(giftCard1);
        expect(checkoutState.giftCards).not.toContainEqual(giftCard2);
        expect(checkoutState.giftCards).toContainEqual(giftCard3);
    });

    it('giftCardExtended can added', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const newGiftCard: IGiftCardExtend = { Id: '1', Pin: '1111', ExpirationDate: 'date-1', TenderTypeId: '12-1' };
        checkoutState.addGiftCardExtend({ giftCard: newGiftCard, additionalProperties: { Pin: '1111', ExpirationDate: 'date-1', TenderTypeId: '12-1' } });
        expect(checkoutState.giftCardExtends).toContainEqual(newGiftCard);

        const anotherNewGiftCard: IGiftCardExtend = { Id: '2', Pin: '2222', ExpirationDate: 'date-2', TenderTypeId: '12-2' };
        checkoutState.addGiftCardExtend({ giftCard: anotherNewGiftCard, additionalProperties: { Pin: '2222', ExpirationDate: 'date-2', TenderTypeId: '12-2' } });
        expect(checkoutState.giftCardExtends).toContainEqual(newGiftCard);
        expect(checkoutState.giftCardExtends).toContainEqual(anotherNewGiftCard);
    });

    it('giftCardExtended can be removed', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        const giftCard1: GiftCard = { Id: '1' };
        const giftCard2: GiftCard = { Id: '2' };
        const giftCard3: GiftCard = { Id: '3' };

        // @ts-ignore: initializing test data
        checkoutState['_giftCardExtends'] = [giftCard1, giftCard2, giftCard3, giftCard1];

        checkoutState.removeGiftCardExtend({ giftCardNumber: '1' });
        checkoutState.removeGiftCardExtend({ giftCardNumber: '2' });

        expect(checkoutState.giftCards).not.toContainEqual(giftCard1);
        expect(checkoutState.giftCards).not.toContainEqual(giftCard2);
        expect(checkoutState.giftCards).toContainEqual(giftCard3);
    });

    it('remove removeCheckoutCartId', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.cookies = {
            // @ts-ignore
            removeCheckoutCartCookie: jest.fn().mockResolvedValue(undefined)
        };

        checkoutState.removeCheckoutCartId({});

        // @ts-ignore
        expect(actionContext.requestContext.cookies.removeCheckoutCartCookie).toBeCalled();
    });

    it('save DataInStorage', () => {
        const checkoutState = new BaseCheckoutState(actionContext);
        const newAddress: Address = {};
        const giftCard1: IGiftCardExtend = { Id: '1' };
        const loyaltyCardNumber: string = '10000000';
        const loyaltyAmount: number = 123;
        const checkoutGenericData: ICheckoutGenericData = { Data: 'data', SaveDataBeforeRedirect: true };
        const isTermsAndConditionAccepted: boolean = true;
        const paymentTenderType: string = 'testTender';

        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.sessionStorage = {
            setCheckoutCartData: jest.fn().mockResolvedValue(undefined)
        };

        checkoutState.updateBillingAddress({ newBillingAddress: newAddress });
        checkoutState.addGiftCard({ giftCard: giftCard1 });
        checkoutState.updateLoyaltyCardNumber({ newLoyaltyCardNumber: loyaltyCardNumber });
        checkoutState.updateLoyaltyAmount({ newAmount: loyaltyAmount });
        checkoutState.setCheckoutGenericData({ key: 'key', checkoutGenericData: checkoutGenericData });
        checkoutState.updateTermsAndConditionsAcceptance({ newIsTermsAndConditionAccepted: isTermsAndConditionAccepted });
        checkoutState.updatePaymentTenderType({ newPaymentTenderType: paymentTenderType });
        checkoutState.saveDataInStorage({});


        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).toBeCalled();
        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).toBeCalledTimes(7);
    });

    it('save DataInStorage in storage should not save empty data', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.sessionStorage = {
            setCheckoutCartData: jest.fn().mockResolvedValue(undefined)
        };

        checkoutState.saveDataInStorage({});

        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).not.toBeCalled();
    });

    it('checkoutGenericData can be updated', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.getCheckoutGenericData({ key: 'key' })).toBe(undefined);
        checkoutState.setCheckoutGenericData({ key: 'key', checkoutGenericData: { Data: { name: 'generic data' } } });
        expect(checkoutState.getCheckoutGenericData({ key: 'key' })).toEqual({ Data: { name: 'generic data' } });
    });

    it('save checkoutData without SaveDataBeforeRedirect', () => {
        const checkoutState = new BaseCheckoutState(actionContext);
        const checkoutGenericData: ICheckoutGenericData = {
            Data: {},
            SaveDataBeforeRedirect: false
        };

        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.sessionStorage = {
            setCheckoutCartData: jest.fn().mockResolvedValue(undefined)
        };

        checkoutState.setCheckoutGenericData({ key: 'key', checkoutGenericData: checkoutGenericData });
        checkoutState.saveDataInStorage({});

        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).not.toBeCalled();
    });

    it('save checkoutData with SaveDataBeforeRedirect', () => {
        const checkoutState = new BaseCheckoutState(actionContext);
        const checkoutGenericData: ICheckoutGenericData = {
            Data: {},
            SaveDataBeforeRedirect: true
        };

        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.sessionStorage = {
            setCheckoutCartData: jest.fn().mockResolvedValue(undefined)
        };

        checkoutState.setCheckoutGenericData({ key: 'key', checkoutGenericData: checkoutGenericData });
        checkoutState.saveDataInStorage({});

        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).toBeCalled();
        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).toBeCalledTimes(1);
    });

    it('set setInitialData', async () => {
        const newAddress: Address = {};
        const isBillingAddressSameAsShippingAddress: boolean = true;
        const giftCard1: IGiftCardExtend = { Id: '1' };
        const loyaltyCardNumber: string = '10000000';
        const loyaltyAmount: number = 123;
        const checkoutGenericData: ICheckoutGenericData = { Data: {} };

        const newAddressStoredData: object = { billingAddress: newAddress, isBillingAddressSameAsShippingAddress: isBillingAddressSameAsShippingAddress };
        const giftCardStoredData: object = [giftCard1];
        const loyaltyCardNumberStoredData: object = { loyaltyCardNumber: loyaltyCardNumber };
        const loyaltyAmountStoredData: object = { loyaltyAmount: loyaltyAmount };
        const checkoutStoredData: object = { checkoutData: checkoutGenericData };

        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext = {
            requestFormData: {},
            query: {
                pv: '1'
            },
            // @ts-ignore: Jest Mocking Confuses TS Complier
            sessionStorage: {
                setCheckoutCartData: jest.fn((key) => {
                    switch (key) {
                        case CheckoutStorageKey.BillingAddress:
                            return newAddressStoredData;
                        case CheckoutStorageKey.GiftCard:
                            return giftCardStoredData;
                        case CheckoutStorageKey.LoyaltyCardNumber:
                            return loyaltyCardNumberStoredData;
                        case CheckoutStorageKey.LoyaltyAmount:
                            return loyaltyAmountStoredData;
                        case CheckoutStorageKey.CheckoutGenericData:
                            return checkoutStoredData;
                    }

                    return undefined;
                }),
                getCheckoutCartData: jest.fn((key: string) => {
                    switch (key) {
                        case CheckoutStorageKey.BillingAddress:
                            return newAddressStoredData;
                        case CheckoutStorageKey.GiftCard:
                            return giftCardStoredData;
                        case CheckoutStorageKey.LoyaltyCardNumber:
                            return loyaltyCardNumberStoredData;
                        case CheckoutStorageKey.LoyaltyAmount:
                            return loyaltyAmountStoredData;
                    }
                    return {}
                }),
                removeCheckoutCartData: jest.fn().mockResolvedValue(undefined)
            }
        };

        const checkoutState = new BaseCheckoutState(actionContext);
        await checkoutState.initialize();

        expect(checkoutState.billingAddress).toStrictEqual(newAddress);
        expect(checkoutState.isBillingAddressSameAsShippingAddress).toBe(isBillingAddressSameAsShippingAddress);
        expect(checkoutState.giftCardExtends.length).toBe(1);
        expect(checkoutState.loyaltyCardNumber).toBe(loyaltyCardNumber);
        expect(checkoutState.loyaltyAmount).toBe(loyaltyAmount);

        expect(actionContext.requestContext.sessionStorage.removeCheckoutCartData).toBeCalledTimes(1);
    });

    it('set setInitialData without giftcard', async () => {
        const newAddress: Address = {};
        const isBillingAddressSameAsShippingAddress: boolean = true;
        const loyaltyCardNumber: string = '10000000';
        const loyaltyAmount: number = 123;
        const checkoutGenericData: ICheckoutGenericData = { Data: {} };

        const newAddressStoredData: object = { billingAddress: newAddress, isBillingAddressSameAsShippingAddress: isBillingAddressSameAsShippingAddress };
        const loyaltyCardNumberStoredData: object = { loyaltyCardNumber: loyaltyCardNumber };
        const loyaltyAmountStoredData: object = { loyaltyAmount: loyaltyAmount };
        const checkoutStoredData: object = { checkoutData: checkoutGenericData };

        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext = {
            requestFormData: {},
            query: {
                pv: '1'
            },
            // @ts-ignore: Jest Mocking Confuses TS Complier
            sessionStorage: {
                getCheckoutCartData: jest.fn((key) => {
                    switch (key) {
                        case CheckoutStorageKey.BillingAddress:
                            return newAddressStoredData;
                        case CheckoutStorageKey.GiftCard:
                            return {};
                        case CheckoutStorageKey.LoyaltyCardNumber:
                            return loyaltyCardNumberStoredData;
                        case CheckoutStorageKey.LoyaltyAmount:
                            return loyaltyAmountStoredData;
                        case CheckoutStorageKey.CheckoutGenericData:
                            return checkoutStoredData;
                    }

                    return {};
                }),
                removeCheckoutCartData: jest.fn().mockResolvedValue(undefined)
            }
        };

        const checkoutState = new BaseCheckoutState(actionContext);
        await checkoutState.initialize();

        expect(checkoutState.billingAddress).toStrictEqual(newAddress);
        expect(checkoutState.isBillingAddressSameAsShippingAddress).toBe(isBillingAddressSameAsShippingAddress);
        expect(checkoutState.giftCardExtends.length).toBe(0);
        expect(checkoutState.loyaltyCardNumber).toBe(loyaltyCardNumber);
        expect(checkoutState.loyaltyAmount).toBe(loyaltyAmount);

        expect(actionContext.requestContext.sessionStorage.removeCheckoutCartData).toBeCalledTimes(1);
    });

    it('Initializes the checkout cart state', async () => {
        let isInitialized: boolean = false;

        // @ts-ignore
        CheckoutCartState.BaseCheckoutCartState = jest.fn().mockImplementation(() => {
            return {
                initialize: () => isInitialized = true
            };
        });

        const checkoutState = new BaseCheckoutState(actionContext);
        await checkoutState.initialize();

        expect(isInitialized).toBe(true);
        expect(checkoutState.status).toBe('READY');
        expect(checkoutState.checkoutCart).toBeDefined();
    });

    it('No-ops after first initializes call', async () => {
        let timesInitializeCalled: number = 0;

        // @ts-ignore
        CheckoutCartState.BaseCheckoutCartState = jest.fn().mockImplementation(() => {
            return {
                initialize: () => timesInitializeCalled++
            };
        });

        const checkoutState = new BaseCheckoutState(actionContext);
        await checkoutState.initialize();
        await checkoutState.initialize();

        expect(timesInitializeCalled).toBe(1);
        expect(checkoutState.status).toBe('READY');
        expect(checkoutState.checkoutCart).toBeDefined();
    });

    it('update customerAccountAmount updates the amount', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.customerAccountAmount).toEqual(0);
        checkoutState.updateCustomerAccountAmount({ newAmount: 1537 });
        expect(checkoutState.customerAccountAmount).toEqual(1537);
    });

    it('update customerAccountAmount rounds two digits', () => {
        const checkoutState = new BaseCheckoutState(actionContext);

        expect(checkoutState.customerAccountAmount).toEqual(0);
        checkoutState.updateCustomerAccountAmount({ newAmount: 867.5309 });
        expect(checkoutState.customerAccountAmount).toEqual(867.53);
    });
});