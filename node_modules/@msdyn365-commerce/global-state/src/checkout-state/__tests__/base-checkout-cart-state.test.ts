import 'jest';

import * as core from '@msdyn365-commerce/core';
import { Cart } from '@msdyn365-commerce/retail-proxy';
import mockRequestContext from '../../__mocks__/request-context.json';
import getCheckoutCart from '../../data-actions/get-checkout-cart';
import { BaseCheckoutCartState } from '../base-checkout-cart-state';

describe('initialize tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });

    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();

        jest.mock('../../data-actions/get-checkout-cart');
    });

    beforeEach(() => {
        jest.resetAllMocks();
    });

    it('Goes into error state if getting cart fails', async () => {
        // @ts-ignore
        getCheckoutCart = jest.fn().mockImplementation(cb => {
            return undefined;
        });

        const cartState = new BaseCheckoutCartState(actionContext);

        await cartState.initialize();

        expect(cartState.status).toBe('ERROR');
        expect(getCheckoutCart).toBeCalled();
    });

    it('Calls get or create active cart', async () => {
        const cart: Cart = {
            Id: 'mockCart_refreshCart'
        };

        // @ts-ignore
        getCheckoutCart = jest.fn().mockImplementation(cb => {
            return cart;
        });

        const cartState = new BaseCheckoutCartState(actionContext);

        await cartState.initialize();

        expect(cartState.cart.Id).toBe(cart.Id);
        expect(getCheckoutCart).toBeCalled();
        expect(cartState.status).toBe('READY');
    });

    it('Doesn\'t update  after multiple calls', async () => {
        const cart: Cart = {
            Id: 'mockCart_refreshCart'
        };

        // @ts-ignore
        getCheckoutCart = jest.fn().mockImplementation(cb => {
            return cart;
        });

        const cartState = new BaseCheckoutCartState(actionContext);

        await cartState.initialize();

        await cartState.initialize();
        expect(cartState.cart.Id).toBe(cart.Id);
        expect(getCheckoutCart).toBeCalledTimes(1);
        expect(cartState.status).toBe('READY');
    });
});