import { Address, AttributeValueBase, CommerceProperty, GiftCard, SalesOrder, SimpleProduct, TenderLine, TokenizedPaymentCard } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { IActionResult } from '../global-state/i-action-result';
import { IGlobalState } from '../global-state/i-global-state';
import { ICartState } from './i-cart-state';
export declare type ICheckoutActionSubStatus = '';
export interface ICheckoutActionResult extends IActionResult<ICheckoutActionSubStatus> {
}
export interface IGiftCardExtend extends GiftCard {
    Pin?: string;
    ExpirationDate?: string;
    TenderTypeId?: string;
}
export interface ICheckoutGenericData {
    Data: Object;
    SaveDataBeforeRedirect?: boolean;
}
export interface ICheckoutState extends IGlobalState {
    /**
     * Cart State for the checkout cart
     */
    readonly checkoutCart: Readonly<ICartState>;
    /**
     * The completed sales order
     */
    readonly salesOrder: Readonly<SalesOrder | undefined>;
    /**
     * Returns salesOrder attribute values
     */
    readonly attributeValues: Readonly<AttributeValueBase[] | undefined>;
    /**
     * Returns salesOrder extension properties
     */
    readonly extensionProperties: Readonly<CommerceProperty[] | undefined>;
    /**
     * The products ordered
     */
    readonly orderedProducts: Readonly<SimpleProduct[] | undefined>;
    /**
     * The tokenized payment card to use for the checkout
     */
    readonly tokenizedPaymentCard: Readonly<TokenizedPaymentCard | undefined>;
    /**
     * The tender line to use for the checkout
     */
    readonly tenderLine: Readonly<TenderLine | undefined>;
    /**
     * The billing address to use for the checkout
     */
    readonly billingAddress: Readonly<Address | undefined>;
    /**
     * The billing address to use for the checkout
     */
    readonly isBillingAddressSameAsShippingAddress: Readonly<boolean | undefined>;
    /**
     * The shipping address to use for the checkout
     */
    readonly shippingAddress: Readonly<Address | undefined>;
    /**
     * The card prefix to use for the checkout
     */
    readonly cardPrefix: Readonly<string | undefined>;
    /**
     * The payment tender type
     */
    readonly paymentTenderType: Readonly<string | undefined>;
    /**
     * The gift cards to use for the checkout
     */
    readonly giftCards: Readonly<GiftCard[]>;
    /**
     * The extended gift cards to use for the checkout
     */
    readonly giftCardExtends: Readonly<IGiftCardExtend[]>;
    /**
     * The loyalty ammount to apply during the checkout
     */
    readonly loyaltyAmount: Readonly<number>;
    /**
     * The amount to pay with the customer's account
     */
    readonly customerAccountAmount: Readonly<number>;
    /**
     * The email address to use for guest checkout
     */
    readonly guestCheckoutEmail: Readonly<string>;
    /**
     * The isTermsAndCondtionAccepted to use for guest checkout
     */
    readonly isTermsAndConditionAccepted: Readonly<boolean | undefined>;
    /**
     * Updates sales order property of the checkout state
     *
     * @param newSalesOrder The new sales order to use
     */
    updateSalesOrder(input: {
        newSalesOrder: SalesOrder;
        newOrderedProducts: SimpleProduct[];
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates the attribute values
     *
     * @param newAttributeValues The new attribute values to update
     */
    updateAttributeValues(input: {
        newAttributeValues: AttributeValueBase[];
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates the extension properties
     *
     * @param newExtensionProperties The new extension properties to update
     */
    updateExtensionProperties(input: {
        newExtensionProperties: CommerceProperty[];
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates tokenized payment card property of the checkout state
     *
     * @param newTokenizedPaymentCard The new tokenized payment card to use
     */
    updateTokenizedPaymentCard(input: {
        newTokenizedPaymentCard?: TokenizedPaymentCard;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates tender line property of the checkout state
     *
     * @param newTenderLine The new tender line to use
     */
    updateTenderLine(input: {
        newTenderLine?: TenderLine;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates tender line property of the checkout state
     *
     * @param newIsTermsAndConditionAccepted The new IsTermsAndConditionAccepted line to use
     */
    updateTermsAndConditionsAcceptance(input: {
        newIsTermsAndConditionAccepted: boolean;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates shipping address property of the checkout state
     *
     * @param newShippingAddress The new shipping address to use
     */
    updateShippingAddress(input: {
        newShippingAddress: Address;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates billing address property of the checkout state
     *
     * @param newBillingAddress The new billing address to use
     */
    updateBillingAddress(input: {
        newBillingAddress: Address;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Remove billing address property of the checkout state
     *
     */
    removeBillingAddress(input: {
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates card prefix property of the checkout state
     *
     * @param newCardPrefix The new card prefix to use
     */
    updateCardPrefix(input: {
        newCardPrefix: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
    * Updates paymentTenderType property of the checkout state
    *
    * @param newPaymentTenderType The new payment tender id
    */
    updatePaymentTenderType(input: {
        newPaymentTenderType?: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Removes a gift card from the gift card list on the checkout state
     *
     * @param giftCardNumber The id for the gift card to remove
     */
    removeGiftCard(input: {
        giftCardNumber: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Removes an extended gift card from the extended gift card list on the checkout state
     *
     * @param giftCardNumber The id for the gift card to remove
     */
    removeGiftCardExtend(input: {
        giftCardNumber: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Adds a gift card to the gift card list on the checkout state
     *
     * @param giftCard The new gift card to add
     */
    addGiftCard(input: {
        giftCard: GiftCard;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Adds an extended gift card to the extended gift card list on the checkout state
     *
     * @param giftCard The new gift card to add
     */
    addGiftCardExtend(input: {
        giftCard: IGiftCardExtend;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates loyalty amount property of the checkout state
     *
     * @param newAmount The new loyalty amount to use
     */
    updateLoyaltyAmount(input: {
        newAmount: number;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates guest checkout email property of the checkout state
     *
     * @param newGuestCheckoutEmail The new guest checkout email to use
     */
    updateGuestCheckoutEmail(input: {
        newGuestCheckoutEmail: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Remove checkout cart id
     */
    removeCheckoutCartId(input: {
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Save checkout data in storage
     */
    saveDataInStorage(input: {
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Updates customer account amount property of the checkout state
     *
     * @param newAmount The new customer account amount to use
     */
    updateCustomerAccountAmount(input: {
        newAmount: number;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Set generic data
     */
    setCheckoutGenericData(input: {
        key: string;
        checkoutGenericData: ICheckoutGenericData;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    /**
     * Get generic data by key
     */
    getCheckoutGenericData(input: {
        key: string;
    }): ICheckoutGenericData | undefined;
}
