import { IActionContext } from '@msdyn365-commerce/core';
import { Address, AttributeValueBase, CommerceProperty, GiftCard, SalesOrder, SimpleProduct, TenderLine, TokenizedPaymentCard } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { GlobalState } from '../global-state/global-state';
import { ICartState } from '../state-interfaces/i-cart-state';
import { ICheckoutActionResult, ICheckoutGenericData, ICheckoutState, IGiftCardExtend } from '../state-interfaces/i-checkout-state';
/**
 * State information related to what is needed to succesfully perform a checkout
 */
export declare class BaseCheckoutState extends GlobalState implements ICheckoutState {
    protected _checkoutCart: ICartState;
    get checkoutCart(): ICartState;
    protected _salesOrder?: SalesOrder;
    get salesOrder(): Readonly<SalesOrder | undefined>;
    protected _attributeValues: AttributeValueBase[];
    get attributeValues(): Readonly<AttributeValueBase[] | undefined>;
    protected _extensionProperties: CommerceProperty[];
    get extensionProperties(): Readonly<CommerceProperty[] | undefined>;
    protected _orderedProducts?: SimpleProduct[];
    get orderedProducts(): Readonly<SimpleProduct[] | undefined>;
    protected _tokenizedPaymentCard?: TokenizedPaymentCard;
    get tokenizedPaymentCard(): Readonly<TokenizedPaymentCard | undefined>;
    protected _tenderLine?: TenderLine;
    get tenderLine(): Readonly<TenderLine | undefined>;
    protected _billingAddress?: Address;
    get billingAddress(): Readonly<Address | undefined>;
    protected _isBillingAddressSameAsShippingAddress?: boolean;
    get isBillingAddressSameAsShippingAddress(): Readonly<boolean | undefined>;
    protected _shippingAddress?: Address;
    get shippingAddress(): Readonly<Address | undefined>;
    protected _cardPrefix?: string;
    get cardPrefix(): Readonly<string | undefined>;
    protected _paymentTenderType?: string;
    get paymentTenderType(): Readonly<string | undefined>;
    /**
     * @deprecated Use giftCardExtends method
     */
    get giftCards(): Readonly<GiftCard[]>;
    protected _giftCardExtends: IGiftCardExtend[];
    get giftCardExtends(): Readonly<IGiftCardExtend[]>;
    protected _loyaltyCardNumber?: string;
    get loyaltyCardNumber(): Readonly<string | undefined>;
    protected _loyaltyAmount: number;
    get loyaltyAmount(): Readonly<number>;
    protected _guestCheckoutEmail: string;
    get guestCheckoutEmail(): Readonly<string>;
    protected _isTermsAndConditionAccepted?: boolean;
    get isTermsAndConditionAccepted(): Readonly<boolean | undefined>;
    protected _customerAccountAmount: number;
    get customerAccountAmount(): Readonly<number>;
    protected _checkoutGenericData: object;
    constructor(actionContext: IActionContext);
    initialize(): Promise<void>;
    updateSalesOrder(input: {
        newSalesOrder: SalesOrder;
        newOrderedProducts: SimpleProduct[];
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateAttributeValues(input: {
        newAttributeValues: AttributeValueBase[];
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateExtensionProperties(input: {
        newExtensionProperties: CommerceProperty[];
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateTokenizedPaymentCard(input: {
        newTokenizedPaymentCard?: TokenizedPaymentCard;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateTenderLine(input: {
        newTenderLine?: TenderLine;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateShippingAddress(input: {
        newShippingAddress: Address;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateTermsAndConditionsAcceptance(input: {
        newIsTermsAndConditionAccepted: boolean;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateBillingAddress(input: {
        newBillingAddress: Address;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    removeBillingAddress(input: {
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updatePaymentTenderType(input: {
        newPaymentTenderType?: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateCardPrefix(input: {
        newCardPrefix: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    removeGiftCard(input: {
        giftCardNumber: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    removeGiftCardExtend(input: {
        giftCardNumber: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    addGiftCard(input: {
        giftCard: GiftCard;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    addGiftCardExtend(input: {
        giftCard: IGiftCardExtend;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateLoyaltyCardNumber(input: {
        newLoyaltyCardNumber: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateLoyaltyAmount(input: {
        newAmount: number;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateGuestCheckoutEmail(input: {
        newGuestCheckoutEmail: string;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    removeCheckoutCartId(input: {
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    saveDataInStorage(input: {
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    updateCustomerAccountAmount(input: {
        newAmount: number;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    setCheckoutGenericData(input: {
        key: string;
        checkoutGenericData: ICheckoutGenericData;
        additionalProperties?: object;
    }): Promise<ICheckoutActionResult>;
    getCheckoutGenericData(input: {
        key: string;
    }): ICheckoutGenericData | undefined;
    private cleanCheckoutData;
    private isPaymentVerificationRedirection;
    private setInitialData;
}
