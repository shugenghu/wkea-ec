{"version":3,"file":"global-state.js","sourceRoot":"./src/","sources":["global-state/global-state.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAI5C;;GAEG;AACH,MAAM,OAAO,WAAW;IASpB,YAAY,aAA6B;QAR/B,kBAAa,GAAY,KAAK,CAAC;QASrC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;IAC9B,CAAC;IAPS,IAAW,MAAM;QACvB,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAOM,KAAK,CAAC,UAAU;QACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,OAAO;IACX,CAAC;IAES,KAAK,CAAC,cAAc,CAAO,MAA2B;QAC5D,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;QAE1B,OAAO,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvB,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA9Be;IAAX,UAAU;4CAAsC;AACvC;IAAT,QAAQ;yCAER","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { computed, observable } from 'mobx';\n\nimport { GlobalStateStatus, IGlobalState } from './i-global-state';\n\n/**\n * Base global state that handles common global state behavior that other state can extend from\n */\nexport class GlobalState implements IGlobalState {\n    protected isInitialized: boolean = false;\n    protected actionContext: IActionContext;\n\n    @observable protected _status: GlobalStateStatus;\n    @computed public get status(): Readonly<GlobalStateStatus> {\n        return this._status;\n    }\n\n    constructor(actionContext: IActionContext) {\n        this.actionContext = actionContext;\n        this._status = 'UPDATING';\n    }\n\n    public async initialize(): Promise<void> {\n        this.isInitialized = true;\n        this._status = 'READY';\n\n        return;\n    }\n\n    protected async _doAsyncAction<TOut>(lambda: () => Promise<TOut>): Promise<TOut> {\n        this._status = 'UPDATING';\n\n        return lambda().then(result => {\n            this._status = 'READY';\n            return result;\n        }).catch(error => {\n            console.log(error);\n            this._status = 'ERROR';\n\n            return Promise.reject(error);\n        });\n    }\n}\n"]}