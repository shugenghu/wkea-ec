{"version":3,"file":"i-cart-state.js","sourceRoot":"./src/","sources":["state-interfaces/i-cart-state.ts"],"names":[],"mappings":"","sourcesContent":["import { Cart, OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { AttributeValueBase, CommerceProperty } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { IActionResult } from '../global-state/i-action-result';\nimport { IGlobalState } from '../global-state/i-global-state';\n\nexport type ICartActionSubStatus = 'MAXQUANTITY' | 'NOTFOUND' | 'ALREADYADDED' | 'NOCONTENT' | 'EMPTYINPUT' | 'MISSINGDIMENSION';\nexport interface ICartActionResult extends IActionResult<ICartActionSubStatus> { }\n\nexport interface ICartState extends IGlobalState {\n    readonly cart: Readonly<Cart>;\n\n    /**\n     * Returns a count of the total number of items in the cart\n     */\n    readonly totalItemsInCart: number;\n\n    /**\n     * Returns if cart is empty or not\n     */\n    readonly isEmpty: boolean;\n\n    /**\n     * Returns cart attribute values\n     */\n    readonly attributeValues: AttributeValueBase[];\n\n    /**\n     * Returns cart extension properties\n     */\n    readonly extensionProperties: CommerceProperty[];\n\n    /**\n     * Gets a new version of the cart from the retail server and uses the result\n     * to update the existing cart\n     *\n     * Other actions should keep cart up to date so shouldn't need to call this\n     * outside of initialization but still might be scenarios where a manual\n     * refresh is needed\n     */\n    refreshCart(input: { additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Adds the specified product to the current cart. If product is already in cart\n     * will update its cart line, otherwise will add a new cart line to the cart\n     *\n     * @param product The product to add to the cart\n     * @param count: How many copies of the product to add\n     * @param location: The org unit location, used for BuyOnlinePickupInStore scenarios\n     * (If you want item to simply be shipped, leave this parameter undefined)\n     */\n    addProductToCart(input: {product: SimpleProduct; count?: number; location?: OrgUnitLocation; additionalProperties?: object; availableQuantity?: number; enableStockCheck?: boolean}): Promise<ICartActionResult>;\n\n    /**\n     * Removes the cart lines with the provided ids from the cart\n     *\n     * @param cartLineIds The cart lines to remove\n     */\n    removeCartLines(input: { cartLineIds: string[]; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Clears the pickup location information from the provided cart line,\n     * resulting in it getting shipped to the customer\n     *\n     * @param cartLineId The cart line to clear the location from\n     */\n    clearCartLinePickupLocation(input: { cartLineId: string; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Marks the provided cartline for pickup in store, with the provided location as\n     * the pickup location\n     *\n     * @param cartLineId The cart line to mark for pickup\n     * @param location The location to set for pickup\n     */\n    updateCartLinePickupLocation(input: { cartLineId: string; location: OrgUnitLocation; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Updates the delivery mode for items in the cart with the desired delivery mode, preserving BOPIS status for stuff already marked as BOPIS\n     *\n     * @param deliveryModeId The delivery mode to use\n     */\n    updateCartDeliverySpecification(input: { deliveryModeId: string; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Updates the quantity of the cart line\n     *\n     * @param cartLineId The cart line to update the quantity\n     * @param newQuantity The new quantity to use (note that if this exceeds max quantity, will set quantity to max quantity)\n     */\n    updateCartLineQuantity(input: { cartLineId: string; newQuantity: number; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Updates the loyalty card ID on the card\n     *\n     * @param loyaltyCardId The loyalty card id to use\n     */\n    updateLoyaltyCardId(input: { loyaltyCardNumber: string | undefined; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Adds promo code to the cart\n     *\n     * @param promoCode The promo code to add\n     */\n    addPromoCode(input: { promoCode: string; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Removes promo codes from the cart\n     *\n     * @param promoCodes The promo codes to remove\n     */\n    removePromoCodes(input: { promoCodes: string[]; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Removes all promo code from the cart\n     */\n    removeAllPromoCodes(input: { additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Adds reciept email to the cart\n     */\n    updateReceiptEmail(input: { newEmail: string; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Updates the cart object\n     *\n     * @param newCart The new cart to update\n     */\n    updateCart(input: { newCartObject: Cart; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Updates the attribute values\n     *\n     * @param newAttributeValues The new attribute values to update\n     */\n    updateAttributeValues(input: { newAttributeValues: AttributeValueBase[]; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Updates the extension properties\n     *\n     * @param newExtensionProperties The new extension properties to update\n     */\n    updateExtensionProperties(input: { newExtensionProperties: CommerceProperty[]; additionalProperties?: object }): Promise<ICartActionResult>;\n\n    /**\n     * Clears the delivery mode, and other information for the shipping cart lines.\n     */\n    clearCartLinesDeliveryInformation(input: {cart: Readonly<Cart | undefined>; additionalProperties?: object }): Promise<ICartActionResult>;\n}"]}