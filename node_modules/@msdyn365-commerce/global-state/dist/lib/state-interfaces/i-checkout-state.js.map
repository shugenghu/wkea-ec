{"version":3,"file":"i-checkout-state.js","sourceRoot":"./src/","sources":["state-interfaces/i-checkout-state.ts"],"names":[],"mappings":"","sourcesContent":["import {\n    Address, AttributeValueBase, CommerceProperty, GiftCard, SalesOrder, SimpleProduct, TenderLine,\n    TokenizedPaymentCard\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { IActionResult } from '../global-state/i-action-result';\nimport { IGlobalState } from '../global-state/i-global-state';\nimport { ICartState } from './i-cart-state';\n\nexport type ICheckoutActionSubStatus = '';\nexport interface ICheckoutActionResult extends IActionResult<ICheckoutActionSubStatus> { }\n\nexport interface IGiftCardExtend extends GiftCard {\n    Pin?: string;\n    ExpirationDate?: string;\n    TenderTypeId?: string;\n}\n\nexport interface ICheckoutGenericData {\n    Data: Object;\n    SaveDataBeforeRedirect?: boolean;\n}\n\nexport interface ICheckoutState extends IGlobalState {\n    /**\n     * Cart State for the checkout cart\n     */\n    readonly checkoutCart: Readonly<ICartState>;\n\n    /**\n     * The completed sales order\n     */\n    readonly salesOrder: Readonly<SalesOrder | undefined>;\n\n    /**\n     * Returns salesOrder attribute values\n     */\n    readonly attributeValues: Readonly<AttributeValueBase[] | undefined>;\n\n    /**\n     * Returns salesOrder extension properties\n     */\n    readonly extensionProperties: Readonly<CommerceProperty[] | undefined>;\n\n    /**\n     * The products ordered\n     */\n    readonly orderedProducts: Readonly<SimpleProduct[] | undefined>;\n\n    /**\n     * The tokenized payment card to use for the checkout\n     */\n    readonly tokenizedPaymentCard: Readonly<TokenizedPaymentCard | undefined>;\n\n    /**\n     * The tender line to use for the checkout\n     */\n    readonly tenderLine: Readonly<TenderLine | undefined>;\n\n    /**\n     * The billing address to use for the checkout\n     */\n    readonly billingAddress: Readonly<Address | undefined>;\n\n    /**\n     * The billing address to use for the checkout\n     */\n    readonly isBillingAddressSameAsShippingAddress: Readonly<boolean | undefined>;\n\n    /**\n     * The shipping address to use for the checkout\n     */\n    readonly shippingAddress: Readonly<Address | undefined>;\n\n    /**\n     * The card prefix to use for the checkout\n     */\n    readonly cardPrefix: Readonly<string | undefined>;\n\n    /**\n     * The payment tender type\n     */\n    readonly paymentTenderType: Readonly<string | undefined>;\n\n    /**\n     * The gift cards to use for the checkout\n     */\n    readonly giftCards: Readonly<GiftCard[]>;\n\n    /**\n     * The extended gift cards to use for the checkout\n     */\n    readonly giftCardExtends: Readonly<IGiftCardExtend[]>;\n\n    /**\n     * The loyalty ammount to apply during the checkout\n     */\n    readonly loyaltyAmount: Readonly<number>;\n\n    /**\n     * The amount to pay with the customer's account\n     */\n    readonly customerAccountAmount: Readonly<number>;\n\n    /**\n     * The email address to use for guest checkout\n     */\n    readonly guestCheckoutEmail: Readonly<string>;\n\n    /**\n     * The isTermsAndCondtionAccepted to use for guest checkout\n     */\n    readonly isTermsAndConditionAccepted: Readonly<boolean | undefined>;\n\n\n    /**\n     * Updates sales order property of the checkout state\n     *\n     * @param newSalesOrder The new sales order to use\n     */\n    updateSalesOrder(input: { newSalesOrder: SalesOrder; newOrderedProducts: SimpleProduct[]; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates the attribute values\n     *\n     * @param newAttributeValues The new attribute values to update\n     */\n    updateAttributeValues(input: { newAttributeValues: AttributeValueBase[]; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates the extension properties\n     *\n     * @param newExtensionProperties The new extension properties to update\n     */\n    updateExtensionProperties(input: { newExtensionProperties: CommerceProperty[]; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates tokenized payment card property of the checkout state\n     *\n     * @param newTokenizedPaymentCard The new tokenized payment card to use\n     */\n    updateTokenizedPaymentCard(input: { newTokenizedPaymentCard?: TokenizedPaymentCard; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates tender line property of the checkout state\n     *\n     * @param newTenderLine The new tender line to use\n     */\n    updateTenderLine(input: { newTenderLine?: TenderLine; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates tender line property of the checkout state\n     *\n     * @param newIsTermsAndConditionAccepted The new IsTermsAndConditionAccepted line to use\n     */\n    updateTermsAndConditionsAcceptance(input: { newIsTermsAndConditionAccepted: boolean; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n    /**\n     * Updates shipping address property of the checkout state\n     *\n     * @param newShippingAddress The new shipping address to use\n     */\n    updateShippingAddress(input: { newShippingAddress: Address; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates billing address property of the checkout state\n     *\n     * @param newBillingAddress The new billing address to use\n     */\n    updateBillingAddress(input: { newBillingAddress: Address; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Remove billing address property of the checkout state\n     *\n     */\n    removeBillingAddress(input: { additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates card prefix property of the checkout state\n     *\n     * @param newCardPrefix The new card prefix to use\n     */\n    updateCardPrefix(input: { newCardPrefix: string; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n    * Updates paymentTenderType property of the checkout state\n    *\n    * @param newPaymentTenderType The new payment tender id\n    */\n    updatePaymentTenderType(input: { newPaymentTenderType?: string; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Removes a gift card from the gift card list on the checkout state\n     *\n     * @param giftCardNumber The id for the gift card to remove\n     */\n    removeGiftCard(input: { giftCardNumber: string; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Removes an extended gift card from the extended gift card list on the checkout state\n     *\n     * @param giftCardNumber The id for the gift card to remove\n     */\n    removeGiftCardExtend(input: { giftCardNumber: string; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Adds a gift card to the gift card list on the checkout state\n     *\n     * @param giftCard The new gift card to add\n     */\n    addGiftCard(input: { giftCard: GiftCard; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Adds an extended gift card to the extended gift card list on the checkout state\n     *\n     * @param giftCard The new gift card to add\n     */\n    addGiftCardExtend(input: { giftCard: IGiftCardExtend; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates loyalty amount property of the checkout state\n     *\n     * @param newAmount The new loyalty amount to use\n     */\n    updateLoyaltyAmount(input: { newAmount: number; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates guest checkout email property of the checkout state\n     *\n     * @param newGuestCheckoutEmail The new guest checkout email to use\n     */\n    updateGuestCheckoutEmail(input: { newGuestCheckoutEmail: string; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Remove checkout cart id\n     */\n    removeCheckoutCartId(input: { additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Save checkout data in storage\n     */\n    saveDataInStorage(input: { additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Updates customer account amount property of the checkout state\n     *\n     * @param newAmount The new customer account amount to use\n     */\n    updateCustomerAccountAmount(input: { newAmount: number; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Set generic data\n     */\n    setCheckoutGenericData(input: { key: string; checkoutGenericData: ICheckoutGenericData; additionalProperties?: object }): Promise<ICheckoutActionResult>;\n\n    /**\n     * Get generic data by key\n     */\n    getCheckoutGenericData(input: { key: string }): ICheckoutGenericData | undefined;\n}"]}