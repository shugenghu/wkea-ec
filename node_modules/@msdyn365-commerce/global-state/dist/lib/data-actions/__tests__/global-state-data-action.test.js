import 'jest';
import * as core from '@msdyn365-commerce/core';
import mockRequestContext from '../../__mocks__/request-context.json';
import createGlobalStateDataAction, { getState, GlobalStateInput } from '../global-state-data-action';
import { BaseCartState } from '../../cart-state/base-cart-state';
import { BaseCheckoutState } from '../../checkout-state/base-checkout-state';
const requestContext = core.buildMockRequest(mockRequestContext);
describe('getState', () => {
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
    });
    beforeEach(() => {
        jest.resetAllMocks();
    });
    it('creates new cart state if state is CARTSTATE', async () => {
        jest.spyOn(BaseCartState.prototype, 'initialize');
        const actionContext = core.buildMockActionContext({ requestContext });
        // @ts-ignore
        actionContext.requestContext.sessionStorage = {
            removeCheckoutCartData: jest.fn().mockResolvedValue(undefined)
        };
        const input = new GlobalStateInput('CARTSTATE', BaseCartState, actionContext.requestContext.apiSettings);
        const result = await getState(input, actionContext);
        expect(result.initialize).toBeCalledTimes(1);
    });
    it('creates new checkouit state if state is CHECKOUTSTATE', async () => {
        jest.spyOn(BaseCheckoutState.prototype, 'initialize');
        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
        // @ts-ignore
        actionContext.requestContext.sessionStorage = {
            removeCheckoutCartData: jest.fn().mockResolvedValue(undefined)
        };
        const input = new GlobalStateInput('CHECKOUTSTATE', BaseCheckoutState, actionContext.requestContext.apiSettings);
        const result = await getState(input, actionContext);
        expect(result.initialize).toBeCalledTimes(1);
    });
});
describe('GlobalStateInput', () => {
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
    });
    beforeEach(() => {
        jest.resetAllMocks();
    });
    it('Properly sets getCacheKey', async () => {
        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
        const input = new GlobalStateInput('CARTSTATE', BaseCartState, actionContext.requestContext.apiSettings);
        expect(input.getCacheKey()).toEqual('CARTSTATE-chanId:5637144608-catId:1111111111');
    });
    it('Properly sets getCacheObjectType', async () => {
        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
        const input = new GlobalStateInput('CARTSTATE', BaseCartState, actionContext.requestContext.apiSettings);
        expect(input.getCacheObjectType()).toEqual('CARTSTATE');
    });
    it('Properly set dataCacheType to instance', async () => {
        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
        const input = new GlobalStateInput('CARTSTATE', BaseCartState, actionContext.requestContext.apiSettings);
        expect(input.dataCacheType()).toEqual('instance');
    });
});
describe('createGlobalStateDataAction', () => {
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
    });
    beforeEach(() => {
        jest.resetAllMocks();
    });
    it('creates createObservableDataAction', async () => {
        const dataAction = createGlobalStateDataAction('CARTSTATE', BaseCartState);
        const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
        const input = dataAction.prototype.inputFunc({ requestContext: actionContext.requestContext });
        expect(input).toBeDefined();
        expect(input.key).toBe('CARTSTATE');
    });
});
//# sourceMappingURL=global-state-data-action.test.js.map