import 'jest';
import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import getCheckoutCartDataActionn, { getCheckoutCart, GetCheckoutCartInput } from '../get-checkout-cart';
import { getCartState } from '../get-cart-state';
describe('getCheckoutCart tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
    // @ts-ignore partial mock
    const apiSettings = {
        channelId: 0,
        catalogId: 0
    };
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('../../data-actions/get-cart-state');
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });
    beforeEach(() => {
        jest.resetAllMocks();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.copyAsync = jest.fn().mockResolvedValue({
            Id: 'cart2'
        });
    });
    it('returns undefined if no cart', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        getCartState = jest.fn().mockResolvedValue({
            cart: {},
            status: 'FAILED'
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.cookies = {
            getCheckoutCartCookie: jest.fn().mockReturnValue('')
        };
        const result = await getCheckoutCart(new GetCheckoutCartInput(apiSettings), actionContext);
        expect(result).toBeUndefined();
        expect(CartsDataActions.copyAsync).not.toBeCalled();
        expect(getCartState).toBeCalled();
    });
    it('calls copyAsync and returns result', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        getCartState = jest.fn().mockResolvedValue({
            cart: { Id: 'cart1' },
            status: 'SUCCESS'
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.cookies = {
            getCheckoutCartCookie: jest.fn().mockReturnValue(''),
            setCheckoutCartCookie: jest.fn()
        };
        const result = await getCheckoutCart(new GetCheckoutCartInput(apiSettings), actionContext);
        expect(result).toBeDefined();
        expect(result.Id).toEqual('cart2');
        expect(CartsDataActions.copyAsync).toBeCalled();
        expect(getCartState).toBeCalled();
    });
    it('returns undefined if copyAsync throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        getCartState = jest.fn().mockResolvedValue({
            cart: { Id: 'cart1' },
            status: 'SUCCESS'
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.cookies = {
            getCheckoutCartCookie: jest.fn().mockReturnValue('')
        };
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.copyAsync = jest.fn().mockRejectedValue(new Error('Failed'));
        const result = await getCheckoutCart(new GetCheckoutCartInput(apiSettings), actionContext);
        expect(result).toBeUndefined();
        expect(CartsDataActions.copyAsync).toBeCalled();
        expect(getCartState).toBeCalled();
    });
    it('input created as expected', async () => {
        const input = new GetCheckoutCartInput(apiSettings);
        expect(input.dataCacheType()).toEqual('request');
        expect(input.getCacheObjectType()).toEqual('CheckoutCart');
        expect(input.getCacheKey()).toEqual('CheckoutCart-chanId:0-catId:0');
    });
    it('data action input works as epxected', async () => {
        const input = getCheckoutCartDataActionn.prototype.inputFunc({ requestContext: actionContext.requestContext });
        expect(input).toBeDefined();
    });
    it('returns existing anon checkout cart if checkoutCartId set in cookie', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        getCartState = jest.fn().mockResolvedValue({
            cart: {
                Id: '1',
                Version: 1
            },
            status: 'SUCCESS'
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: '2',
            Version: 2
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.user = {
            isAuthenticated: false
        };
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.cookies = {
            getCheckoutCartCookie: jest.fn().mockReturnValue('p:2')
        };
        const result = await getCheckoutCart(new GetCheckoutCartInput(apiSettings), actionContext);
        expect(result).toBeDefined();
        expect(result?.Id).toEqual('2');
    });
    it('returns existing auth checkout cart if checkoutCartId set in cookie', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        getCartState = jest.fn().mockResolvedValue({
            cart: {
                Id: '1',
                Version: 1
            },
            status: 'SUCCESS'
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockResolvedValue({
            Id: '2',
            Version: 2
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.user = {
            isAuthenticated: true
        };
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.cookies = {
            getCheckoutCartCookie: jest.fn().mockReturnValue('t:2')
        };
        const result = await getCheckoutCart(new GetCheckoutCartInput(apiSettings), actionContext);
        expect(result).toBeDefined();
        expect(result?.Id).toEqual('2');
    });
    it('returns new checkout cart if get checkoutCart failed for saved auth checkoutcard id', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        getCartState = jest.fn().mockResolvedValue({
            cart: {
                Id: '1',
                Version: 1
            },
            status: 'SUCCESS'
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockRejectedValue(new Error('Fail'));
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.user = {
            isAuthenticated: true
        };
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.cookies = {
            getCheckoutCartCookie: jest.fn().mockReturnValue('t:2'),
            setCheckoutCartCookie: jest.fn()
        };
        const result = await getCheckoutCart(new GetCheckoutCartInput(apiSettings), actionContext);
        expect(result).toBeDefined();
        expect(actionContext.requestContext.cookies.setCheckoutCartCookie).toBeCalled();
        expect(result?.Id).toEqual('cart2');
    });
    it('returns new checkout cart if get checkoutCart failed for saved anon checkoutcard id', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        getCartState = jest.fn().mockResolvedValue({
            cart: {
                Id: '1',
                Version: 1
            },
            status: 'SUCCESS'
        });
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockRejectedValue(new Error('Fail'));
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.user = {
            isAuthenticated: false
        };
        // @ts-ignore: Jest Mocking Confuses TS Complier
        actionContext.requestContext.cookies = {
            getCheckoutCartCookie: jest.fn().mockReturnValue('p:2'),
            setCheckoutCartCookie: jest.fn()
        };
        const result = await getCheckoutCart(new GetCheckoutCartInput(apiSettings), actionContext);
        expect(result).toBeDefined();
        expect(actionContext.requestContext.cookies.setCheckoutCartCookie).toBeCalled();
        expect(result?.Id).toEqual('cart2');
    });
});
//# sourceMappingURL=get-checkout-cart.test.js.map