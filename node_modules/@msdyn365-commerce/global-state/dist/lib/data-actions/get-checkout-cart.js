import { createObservableDataAction } from '@msdyn365-commerce/core';
import { copyAsync, readAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import { getCartState } from './get-cart-state';
/**
 * Input class for getCheckoutCart data action
 */
export class GetCheckoutCartInput {
    constructor(apiSettings) {
        this.getCacheKey = () => `CheckoutCart-chanId:${this.apiSettings.channelId}-catId:${this.apiSettings.catalogId}`;
        this.getCacheObjectType = () => 'CheckoutCart';
        this.dataCacheType = () => 'request';
        this.apiSettings = apiSettings;
    }
}
const createInput = (inputData) => {
    return new GetCheckoutCartInput(inputData.requestContext.apiSettings);
};
/**
 * Data action to copy the cart for checkout actions
 */
export async function getCheckoutCart(input, ctx) {
    let savedCheckoutCartId = ctx.requestContext.cookies.getCheckoutCartCookie();
    const cartCookieParts = savedCheckoutCartId.split(':');
    let checkoutCartId = null;
    const isAuthenticated = ctx.requestContext.user.isAuthenticated;
    if ((isAuthenticated && cartCookieParts[0] === "t" /* Auth */) || (!isAuthenticated && cartCookieParts[0] === "p" /* Anon */)) {
        checkoutCartId = cartCookieParts[1];
    }
    let checkoutCart;
    if (checkoutCartId) {
        try {
            checkoutCart = await readAsync({ callerContext: ctx, bypassCache: 'none' }, checkoutCartId);
        }
        catch (error) {
            ctx.telemetry.error('Error getting checkout cart based on saved checkout card id');
            ctx.telemetry.exception(error);
        }
    }
    const cartState = await getCartState(ctx);
    if (cartState && cartState.cart.Id !== undefined) {
        if (checkoutCart && checkoutCart.Version && cartState.cart.Version && checkoutCart.Version > cartState.cart.Version) {
            return Promise.resolve(checkoutCart);
        }
        return copyAsync({ callerContext: ctx }, cartState.cart.Id, 2)
            .then(cart => {
            ctx.requestContext.cookies.setCheckoutCartCookie(cart, isAuthenticated);
            return cart;
        })
            .catch(error => {
            ctx.telemetry.error('Error copying cart');
            ctx.telemetry.exception(error);
            return undefined;
        });
    }
    return undefined;
}
export default createObservableDataAction({
    id: '@msdyn365-commerce/global-state/get-checkout-cart',
    action: getCheckoutCart,
    input: createInput
});
//# sourceMappingURL=get-checkout-cart.js.map