{"version":3,"file":"get-or-create-active-cart.js","sourceRoot":"./src/","sources":["cart-state/get-or-create-active-cart.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { addCartLinesAsync, addCouponsAsync, createCartAsync, readAsync, removeCartLinesAsync, searchAsync, updateAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { getCustomerLoyaltyCardsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/StoreOperationsDataActions.g';\nimport { Cart, CartLine, CartSearchCriteria, Coupon, QueryResultSettings } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nconst enum CartTokenPrefix {\n    Auth = 't',\n    Anon = 'p'\n}\n\nexport default async function getOrCreateActiveCart(ctx: IActionContext): Promise<Cart | undefined> {\n    let cart: Cart | undefined;\n    const cartCookie: string = ctx.requestContext.cookies.getCartCookie();\n    const cartCookieParts: string[] = cartCookie.split(':');\n    try {\n        // Check if there are already is a cart cookie and it is in the format we understand\n        cart = await getCartFromCookie(cartCookieParts, ctx);\n        const wasReadFromCookie = !!cart && cart.Id;\n\n        // If the customer is authenticated, and the auth cookie didn't give us a cart OR doesn't have a cookie, search for the customer's cart\n        if (!(cart && cart.Id)) {\n            cart = await getCartFromCustomer(ctx);\n        }\n\n        // if the customer just went from anon to signed in state then get that anon cart\n        // if the search of carts didn't result in a cart, claim the current anon cart as a new auth cart for the customer\n        // if the search resulted in a cart, and the read also resulted in cart, then go ahead an merge the carts\n        const anonCart = await claimAnonCart(cartCookieParts, cart, ctx);\n        if (anonCart) {\n            cart = anonCart;\n        }\n\n        // If there is no cookie or everything else fails, create an empty cart and return that for the customer\n        if (!(cart && cart.Id)) {\n            cart = await createNewCart(ctx);\n        }\n        if (!wasReadFromCookie && ctx.requestContext.user.isAuthenticated && cart && !cart.LoyaltyCardId) {\n            const card = await getCustomerLoyaltyCardsAsync({ callerContext: ctx, queryResultSettings: {} }, null);\n            if (card && card.length > 0) {\n\n                cart = await updateAsync(\n                    { callerContext: ctx },\n                    {\n                        Id: cart.Id,\n                        LoyaltyCardId: card[0].CardNumber\n                    }\n                );\n            }\n        }\n\n    } catch (ex) {\n        ctx.telemetry.error(`Caught exception in getting cart: ${ex}`);\n        cart = await createNewCart(ctx);\n    }\n    return cart;\n}\n\nexport async function createNewCart(ctx: IActionContext): Promise<Cart | undefined> {\n    const newCart = await createCartAsync({ callerContext: ctx }, <Cart>{});\n    if (newCart && newCart.Id) {\n        ctx.requestContext.cookies.setCartCookie(newCart, ctx.requestContext.user.isAuthenticated);\n\n        return newCart;\n    }\n\n    return undefined;\n}\n\nexport async function getCartFromCookie(cartCookieParts: string[], ctx: IActionContext): Promise<Cart | undefined> {\n    if (cartCookieParts && cartCookieParts.length === 2) {\n        // If the customer is authenticated and they have an auth cookie\n        // OR if the customer is not authenticated and then have an anon cookie\n        // just get the cart and return that\n\n        if ((ctx.requestContext.user.isAuthenticated && cartCookieParts[0] === CartTokenPrefix.Auth) ||\n            (!ctx.requestContext.user.isAuthenticated && cartCookieParts[0] === CartTokenPrefix.Anon)) {\n            const readCart = await readAsync({ callerContext: ctx, bypassCache: 'none' }, cartCookieParts[1]);\n\n            if (readCart && readCart.Id) {\n                ctx.requestContext.cookies.setCartCookie(readCart, ctx.requestContext.user.isAuthenticated);\n                return readCart;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport async function getCartFromCustomer(ctx: IActionContext): Promise<Cart | undefined> {\n    if (ctx.requestContext.user.isAuthenticated) {\n        const authCarts = await searchCarts(ctx);\n        if (authCarts && authCarts.length > 0) {\n            ctx.requestContext.cookies.setCartCookie(authCarts[0], ctx.requestContext.user.isAuthenticated);\n            return authCarts[0];\n        }\n    }\n\n    return undefined;\n}\n\nexport async function claimAnonCart(cartCookieParts: string[], currentCart: Cart | undefined, ctx: IActionContext): Promise<Cart | undefined> {\n    if (ctx.requestContext.user.isAuthenticated && cartCookieParts && cartCookieParts.length === 2 && cartCookieParts[0] === CartTokenPrefix.Anon) {\n        const anonCurrentCart = await readAsync({ callerContext: ctx, bypassCache: 'none' }, cartCookieParts[1]);\n\n        if (anonCurrentCart && !currentCart) {\n            const newCart = await claimCart(anonCurrentCart.Id, ctx);\n            if (newCart && newCart.Id) {\n                ctx.requestContext.cookies.setCartCookie(newCart, ctx.requestContext.user.isAuthenticated);\n                return newCart;\n            }\n        }\n\n        if (anonCurrentCart && anonCurrentCart.Id && currentCart) {\n            const mergedCart = await addCartLines(anonCurrentCart, currentCart, ctx);\n            // Once updated, take that merged cart ID and store the cart ID in the cookie\n            if (!(mergedCart instanceof Error) && mergedCart.Id) {\n                ctx.requestContext.cookies.setCartCookie(mergedCart, ctx.requestContext.user.isAuthenticated);\n                return mergedCart;\n            }\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Function that copies a cartline for giftcard\n * @param cartline Source CartLine you want to copy\n */\nfunction buildGiftCardLine(cartline: CartLine): CartLine {\n    return {\n        DeliveryMode: cartline.DeliveryMode,\n        CatalogId: cartline.CatalogId,\n        Description: cartline.Description,\n        EntryMethodTypeValue: cartline.EntryMethodTypeValue || 3,\n        ItemId: cartline.ItemId,\n        ProductId: cartline.ProductId,\n        Quantity: cartline.Quantity,\n        Price: cartline.Price,\n        NetPrice: cartline.NetPrice,\n        GiftCardBalance: cartline.GiftCardBalance,\n        TrackingId: '',\n        UnitOfMeasureSymbol: cartline.UnitOfMeasureSymbol,\n        IsPriceKeyedIn: true,\n        IsGiftCardLine: true,\n        ExtensionProperties: cartline.ExtensionProperties\n    };\n}\n\n/**\n * Function that adds cart lines from source cart to destination cart\n * @param sourceCart Source cart you want to add cart lines from\n * @param destinationCart Destination cart that you want to add cart lines to\n * @param ctx Request context\n */\nexport async function addCartLines(sourceCart: Cart, destinationCart: Cart, ctx: IActionContext): Promise<Cart> {\n    let updatedCart;\n    const cartLines: CartLine[] = [];\n    const cartLinesToDelete: string[] = [];\n\n    const channelConfiguration = ctx.requestContext.channel;\n\n    if (destinationCart.Version) {\n        if (sourceCart.CartLines && sourceCart.CartLines.length > 0) {\n            for (const cartline of sourceCart.CartLines) {\n                let newCartLine: CartLine;\n\n                if (cartline.IsGiftCardLine) {\n                    newCartLine = buildGiftCardLine(cartline);\n                } else {\n                    newCartLine = {};\n                    // Copy over BOPIS information from sourceCart to destination cart\n                    if (cartline.DeliveryMode && cartline.DeliveryMode !== '' && channelConfiguration && cartline.DeliveryMode === channelConfiguration.PickupDeliveryModeCode) {\n                        newCartLine.DeliveryMode = channelConfiguration.PickupDeliveryModeCode;\n                        newCartLine.FulfillmentStoreId = cartline.FulfillmentStoreId;\n                        newCartLine.ShippingAddress = cartline.ShippingAddress;\n                    }\n\n                    newCartLine.ProductId = cartline.ProductId;\n                    newCartLine.Quantity = cartline.Quantity;\n                    newCartLine.ExtensionProperties = cartline.ExtensionProperties;\n                    newCartLine.Description = cartline.Description;\n                }\n\n                cartLines.push({ ...newCartLine });\n                if (cartline.LineId) {\n                    cartLinesToDelete.push(cartline.LineId);\n                }\n            }\n        }\n\n        if (cartLines.length > 0) {\n            try {\n                updatedCart = await addCartLinesAsync({ callerContext: ctx }, destinationCart.Id, cartLines, destinationCart.Version);\n\n                if (cartLinesToDelete.length > 0) {\n                    sourceCart = await removeCartLinesAsync({ callerContext: ctx }, sourceCart.Id, cartLinesToDelete);\n                }\n            } catch (e) {\n                ctx.telemetry.error('Error adding cart lines to desination cart');\n                ctx.telemetry.exception(e);\n                return destinationCart;\n            }\n        }\n\n        // Copy over coupon codes from source cart to destination cart so that the customer doesn't lose couponCodes while migration\n        if (sourceCart.Coupons && sourceCart.Coupons.length > 0) {\n            const coupons = sourceCart.Coupons.map((coupon: Coupon) => {\n                return coupon.Code!;\n            });\n\n            try {\n                updatedCart = await addCouponsAsync({ callerContext: ctx }, destinationCart.Id, coupons, false);\n            } catch (e) {\n                ctx.telemetry.error('Error adding existing coupon codes to the cart');\n                ctx.telemetry.exception(e);\n                return destinationCart;\n            }\n        }\n    }\n\n    return updatedCart || destinationCart;\n}\n\n/**\n * Function to claim a cart as auth cart and set the browser cookie accordingly\n *\n * @param cartId Cart Id to claim as auth cart\n * @param ctx Request Context\n */\nexport async function claimCart(cartId: string, ctx: IActionContext): Promise<Cart> {\n    const claimAuthCart = await updateAsync(\n        { callerContext: ctx },\n        {\n            Id: cartId\n        }\n    );\n    if (!(claimAuthCart instanceof Error) && claimAuthCart && claimAuthCart.Id) {\n        return claimAuthCart;\n    } else {\n        return <Cart>{};\n    }\n}\n\n/**\n * Function to search carts that belong to a customer\n *\n * @param ctx Request context\n */\nexport async function searchCarts(ctx: IActionContext): Promise<Cart[]> {\n    const cartSearchCriteria: CartSearchCriteria = {\n        IncludeAnonymous: false,\n        CartTypeValue: 1\n    };\n\n    const queryResultSettings: QueryResultSettings = {\n        Paging: {\n            Top: 1,\n            Skip: 0\n        },\n        Sorting: {\n            Columns: [\n                {\n                    ColumnName: 'ModifiedDateTime'\n                }\n            ]\n        }\n    };\n\n    return searchAsync({ callerContext: ctx, queryResultSettings: queryResultSettings }, cartSearchCriteria);\n}"]}