{"version":3,"file":"base-cart-state.js","sourceRoot":"./src/","sources":["cart-state/base-cart-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { Address, Cart, CartLine, OrgUnitLocation, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { action, computed, observable } from 'mobx';\n\nimport { AttributeValueBase, CommerceProperty, ReleasedProductType } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { GlobalState } from '../global-state/global-state';\nimport { ICartActionResult, ICartActionSubStatus, ICartState } from '../state-interfaces/i-cart-state';\nimport addProductToCartInternal from './add-product-to-cart';\nimport addPromoCodeInternal from './add-promo-code';\nimport { ICartActionResultWithCart } from './cart-action-result';\nimport clearCartLineDeliveryModeInternal from './clear-cart-line-delivery-mode';\nimport clearCartLinesDeliveryInformation from './clear-cart-lines-delivery-information';\nimport getOrCreateActiveCart from './get-or-create-active-cart';\nimport refreshCartInternal from './refresh-cart';\nimport removeAllPromoCodesInternal from './remove-all-promo-codes';\nimport removeCartLineInternal from './remove-cart-lines';\nimport removePromoCodesInternal from './remove-promo-codes';\nimport updateCart from './update-cart';\nimport updateCartLineDeliverySpecificationsInternal from './update-cart-line-delivery-specifications';\nimport updateCartLineQuantityInternal from './update-cart-line-quantity';\nimport updateLoyaltyCardIdInternal from './update-loyalty-card-id';\nimport updateReceiptEmail from './update-receipt-email';\n\n/**\n * Cart state information\n */\nexport class BaseCartState extends GlobalState implements ICartState {\n    @observable protected _cart: Cart;\n\n    @computed public get cart(): Readonly<Cart> {\n        return this._cart;\n    }\n\n    @observable protected _attributeValues: AttributeValueBase[];\n\n    @computed public get attributeValues(): AttributeValueBase[] {\n        return this._attributeValues;\n    }\n\n    @observable protected _extensionProperties: CommerceProperty[];\n\n    @computed public get extensionProperties(): CommerceProperty[] {\n        return this._extensionProperties;\n    }\n\n    @computed public get totalItemsInCart(): number {\n        if (this._cart.CartLines) {\n            return this._cart.CartLines.map(cartLine => cartLine.Quantity || 1).reduce((total, num) => total + num, 0);\n        }\n\n        return 0;\n    }\n\n    @computed public get isEmpty(): boolean {\n        return !(this._cart.CartLines && this._cart.CartLines.length > 0);\n    }\n\n    constructor(actionContext: IActionContext) {\n        super(actionContext);\n        this._cart = <Cart>{};\n        this._attributeValues = [];\n        this._extensionProperties = [];\n    }\n\n    public async initialize(): Promise<void> {\n        if (this.isInitialized) {\n            return;\n        }\n\n        const newCart = await getOrCreateActiveCart(this.actionContext);\n\n        if (newCart) {\n            this._cart = newCart;\n            this._status = 'READY';\n        } else {\n            this._status = 'ERROR';\n        }\n\n        this.isInitialized = true;\n    }\n\n    /**\n     * Refreshes the cart by getting it from the server\n     *\n     * Other actions should keep cart up to date so shouldn't need to call this\n     * outside of initialization but still might be scenarios where a manual\n     * refresh is needed\n     */\n    @action\n    public async refreshCart(input: { additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            const newCart = await refreshCartInternal(this.cart.Id, this.actionContext);\n\n            if (newCart) {\n                this._cart = newCart;\n\n                return { status: 'SUCCESS' };\n            }\n\n            return { status: 'FAILED' };\n        });\n    }\n\n    /**\n     * Adds the specified product to the current cart. If product is already in cart\n     * will update its cart line, otherwise will add a new cart line to the cart\n     *\n     * @param product The product to add to the cart\n     * @param count: How many copies of the product to add\n     * @param location: The org unit location, used for BuyOnlinePickupInStore scenarios\n     * (If you want item to simply be shipped, leave this parameter undefined)\n     */\n    @action\n    public async addProductToCart(input: {product: SimpleProduct; count?: number; location?: OrgUnitLocation; additionalProperties?: object; availableQuantity?: number; enableStockCheck?: boolean}): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            const cartLine: CartLine = {\n                CatalogId: this.actionContext.requestContext.apiSettings.catalogId,\n                Description: input.product.Description,\n                // TODO: Investigate this value and what it represents\n                EntryMethodTypeValue: 3,\n                ItemId: input.product.ItemId,\n                ProductId: input.product.RecordId,\n                Quantity: input.count || 1,\n                TrackingId: '',\n                UnitOfMeasureSymbol: input.product.DefaultUnitOfMeasure\n            };\n\n            if (input.location) {\n                if (!this.actionContext.requestContext.channel) {\n                    return { status: 'FAILED' };\n                }\n\n                cartLine.DeliveryMode = this.actionContext.requestContext.channel.PickupDeliveryModeCode;\n                cartLine.FulfillmentStoreId = cartLine.WarehouseId = input.location.OrgUnitNumber;\n                cartLine.ShippingAddress = this._buildAddressFromOrgUnitLocation(input.location);\n            }\n\n            // check if the product is service or not by product type\n            // tslint:disable-next-line:prefer-type-cast\n            const PRODUCTASSERVICE = 2 as ReleasedProductType.Service;\n            const isAddServiceItemToCart = input.product.ItemTypeValue === PRODUCTASSERVICE;\n\n            return this._doCartOperationWithRetry(() => addProductToCartInternal(this.cart, cartLine, this.actionContext, input.availableQuantity, input.enableStockCheck, isAddServiceItemToCart));\n        });\n    }\n\n    /**\n     * Removes the cart lines with the provided ids from the cart\n     *\n     * @param cartLineIds The cart lines to remove\n     */\n    @action\n    public async removeCartLines(input: { cartLineIds: string[]; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => removeCartLineInternal(this.cart, input.cartLineIds, this.actionContext));\n        });\n    }\n\n    /**\n     * Clears the pickup location information from the provided cart line,\n     * resulting in it getting shipped to the customer\n     *\n     * @param cartLineId The cart line to clear the location from\n     */\n    @action\n    public async clearCartLinePickupLocation(input: { cartLineId: string; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => clearCartLineDeliveryModeInternal(this.cart, input.cartLineId, this.actionContext));\n        });\n    }\n\n    /**\n     * Clears the delivery mode, and other information for the shipping cart lines.\n     */\n    @action\n    public async clearCartLinesDeliveryInformation(input: { additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => clearCartLinesDeliveryInformation(this.cart, this.actionContext));\n        });\n    }\n\n    /**\n     * Marks the provided cartline for pickup in store, with the provided location as\n     * the pickup location\n     *\n     * @param cartLineId The cart line to mark for pickup\n     * @param location The location to set for pickup\n     */\n    @action\n    public async updateCartLinePickupLocation(input: { cartLineId: string; location: OrgUnitLocation; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            if (!this.actionContext.requestContext.channel) {\n                return { status: 'FAILED' };\n            }\n\n            const cartLineDeliverySpecification = {\n                LineId: input.cartLineId,\n                DeliverySpecification: {\n                    DeliveryModeId: this.actionContext.requestContext.channel.PickupDeliveryModeCode,\n                    DeliveryPreferenceTypeValue: 2, // Pick up in store\n                    PickUpStoreId: input.location.OrgUnitNumber,\n                    DeliveryAddress: this._buildAddressFromOrgUnitLocation(input.location)\n                }\n            };\n\n            return this._doCartOperationWithRetry(() => updateCartLineDeliverySpecificationsInternal(this.cart, [cartLineDeliverySpecification], this.actionContext));\n        });\n    }\n\n    /**\n     * Updates the delivery mode for items in the cart with the desired delivery mode, preserving BOPIS status for stuff already marked as BOPIS\n     *\n     * @param deliveryModeId The delivery mode to use\n     */\n    @action\n    public async updateCartDeliverySpecification(input: { deliveryModeId: string; shippingAddress: Address | undefined; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            if (input.deliveryModeId.trim() === '') {\n                return { status: 'FAILED', substatus: 'EMPTYINPUT' };\n            }\n\n            const pickupDeliveryModeCode =\n                this.actionContext.requestContext.channel && this.actionContext.requestContext.channel.PickupDeliveryModeCode;\n\n            const cartLinesForShipping = (this.cart.CartLines || []).filter(\n                cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine\n            );\n\n            if (cartLinesForShipping.length > 0) {\n                const deliverySpecifications = cartLinesForShipping.map(cartLine => {\n                    return {\n                        LineId: cartLine.LineId,\n                        DeliverySpecification: {\n                            DeliveryModeId: input.deliveryModeId,\n                            DeliveryPreferenceTypeValue: 1, // Ship\n                            DeliveryAddress: input.shippingAddress\n                        }\n                    };\n                });\n\n                return this._doCartOperationWithRetry(() => updateCartLineDeliverySpecificationsInternal(this.cart, deliverySpecifications, this.actionContext));\n            }\n\n            return { status: 'FAILED', substatus: 'NOCONTENT' };\n        });\n    }\n\n    /**\n     * Updates the quantity of the cart line\n     *\n     * @param cartLineId The cart line to update the quantity\n     * @param newQuantity The new quantity to use (note that if this exceeds max quantity, will set quantity to max quantity)\n     */\n    @action\n    public async updateCartLineQuantity(input: { cartLineId: string; newQuantity: number; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => updateCartLineQuantityInternal(this.cart, input.cartLineId, input.newQuantity, this.actionContext));\n        });\n    }\n\n    /**\n     * Updates the loyalty card ID on the card\n     *\n     * @param loyaltyCardId The loyalty card id to use\n     */\n    @action\n    public async updateLoyaltyCardId(input: { loyaltyCardNumber: string | undefined; additionalProperties?: object }): Promise<ICartActionResult> {\n        if (!input.loyaltyCardNumber) {\n            return { status: 'FAILED', substatus: 'EMPTYINPUT' };\n        }\n\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => updateLoyaltyCardIdInternal(this.cart, input.loyaltyCardNumber!, this.actionContext));\n        });\n    }\n\n    /**\n     * Adds promo code to the cart\n     *\n     * @param promoCode The promo code to add\n     */\n    @action\n    public addPromoCode(input: { promoCode: string; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => addPromoCodeInternal(this.cart, input.promoCode, this.actionContext));\n        });\n    }\n\n    /**\n     * Removes promo codes from the cart\n     *\n     * @param promoCodes The promo codes to remove\n     */\n    @action\n    public removePromoCodes(input: { promoCodes: string[]; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => removePromoCodesInternal(this.cart, input.promoCodes, this.actionContext));\n        });\n    }\n\n    /**\n     * Removes all promo code from the cart\n     */\n    @action\n    public removeAllPromoCodes(input: { additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => removeAllPromoCodesInternal(this.cart, this.actionContext));\n        });\n    }\n\n    /**\n     * Updates receipt email\n     *\n     * @param newEmail The receipt email\n     */\n    @action\n    public async updateReceiptEmail(input: { newEmail: string; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => updateReceiptEmail(this.cart, input.newEmail, this.actionContext));\n        });\n    }\n\n    /**\n     * Updates the attribute values\n     *\n     * @param newAttributeValues The new attribute values to update\n     */\n    @action\n    public async updateAttributeValues(input: { newAttributeValues: AttributeValueBase[]; additionalProperties?: object }): Promise<ICartActionResult> {\n        this._attributeValues = input.newAttributeValues;\n        const newCartObject: Cart = {\n            Id: this.cart.Id,\n            AttributeValues: input.newAttributeValues\n        };\n        return this.updateCart({ newCartObject: newCartObject });\n    }\n\n    /**\n     * Updates the extension properties\n     *\n     * @param newExtensionProperties The new Extension properties to update\n     */\n    @action\n    public async updateExtensionProperties(input: { newExtensionProperties: CommerceProperty[]; additionalProperties?: object }): Promise<ICartActionResult> {\n        this._extensionProperties = input.newExtensionProperties;\n        const newCartObject: Cart = {\n            Id: this.cart.Id,\n            ExtensionProperties: input.newExtensionProperties\n        };\n        return this.updateCart({ newCartObject: newCartObject });\n    }\n\n    /**\n     * Updates cart object\n     *\n     * @param newCart The cart object\n     */\n    @action\n    public async updateCart(input: { newCartObject: Cart; additionalProperties?: object }): Promise<ICartActionResult> {\n        return this._doAsyncAction<ICartActionResult>(async () => {\n            return this._doCartOperationWithRetry(() => updateCart(this.cart, input.newCartObject, this.actionContext));\n        });\n    }\n\n    private async _doCartOperationWithRetry(callback: () => Promise<ICartActionResultWithCart>): Promise<ICartActionResult> {\n        let callbackResult = await callback();\n\n        if (callbackResult.status === 'SUCCESS' || !this._shouldRetrySubstatus(callbackResult.substatus)) {\n            if (callbackResult.cart) {\n                this._cart = callbackResult.cart;\n            }\n        } else {\n            const refreshCartResult = await this.refreshCart({});\n\n            if (refreshCartResult.status === 'SUCCESS') {\n                callbackResult = await callback();\n\n                if (callbackResult.status === 'SUCCESS' || !this._shouldRetrySubstatus(callbackResult.substatus)) {\n                    if (callbackResult.cart) {\n                        this._cart = callbackResult.cart;\n                    }\n                }\n            }\n        }\n\n        return { status: callbackResult.status, substatus: callbackResult.substatus };\n    }\n\n    private _shouldRetrySubstatus(subsatus?: ICartActionSubStatus): boolean {\n        if (!subsatus) {\n            return true;\n        }\n\n        // all substatus currently don't result in a retry\n        return false;\n    }\n\n    private _buildAddressFromOrgUnitLocation(location: OrgUnitLocation): Address {\n        return {\n            RecordId: location.PostalAddressId,\n            Name: location.OrgUnitName,\n            FullAddress: location.Address,\n            Street: location.Street,\n            StreetNumber: location.StreetNumber,\n            City: location.City,\n            DistrictName: location.DistrictName,\n            BuildingCompliment: location.BuildingCompliment,\n            Postbox: location.Postbox,\n            ThreeLetterISORegionName: location.Country,\n            ZipCode: location.Zip,\n            County: location.County,\n            CountyName: location.CountyName,\n            State: location.State,\n            StateName: location.StateName\n        };\n    }\n}\n"]}