{"version":3,"file":"add-product-to-cart.js","sourceRoot":"./src/","sources":["cart-state/add-product-to-cart.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { addCartLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { Cart, CartLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { ICartActionResultWithCart } from './cart-action-result';\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport default async function addProductToCartInternal(cart: Readonly<Cart>, cartLineToAdd: CartLine, actionContext: IActionContext, availableQuantity?: number,\n                                                       enableStockCheck?: boolean, isAddServiceItemToCart?: boolean): Promise<ICartActionResultWithCart> {\n    if (!cart.CartLines) {\n        return { cart: undefined, status: 'FAILED' };\n    }\n\n    const maxQuantityForCartLineItem = actionContext.requestContext.app.config.maxQuantityForCartLineItem;\n    let quantityLimit: number;\n\n    if (enableStockCheck === false) {\n        quantityLimit = maxQuantityForCartLineItem || 10;\n    } else {\n        if (maxQuantityForCartLineItem === undefined && availableQuantity === undefined) {\n            quantityLimit = 10;\n        } else if (availableQuantity === undefined) {\n            quantityLimit = maxQuantityForCartLineItem;\n        } else if (maxQuantityForCartLineItem === undefined) {\n            quantityLimit = availableQuantity;\n        } else {\n            quantityLimit = Math.min(maxQuantityForCartLineItem, availableQuantity);\n        }\n    }\n\n    let elementFoundAt:number = -1;\n    const productIdToFind = cartLineToAdd.ProductId;\n\n    for (let i = 0; i < cart.CartLines.length; i++) {\n        if (cart.CartLines[i].ProductId === productIdToFind &&\n            (cart.CartLines[i].DeliveryMode || '') === (cartLineToAdd.DeliveryMode || '') &&\n            (cart.CartLines[i].FulfillmentStoreId || '') === (cartLineToAdd.FulfillmentStoreId || '')) {\n            elementFoundAt = i;\n\n            break;\n        }\n    }\n\n    if (!isAddServiceItemToCart && elementFoundAt !== -1) {\n        const cartLineToUpdate = {...cart.CartLines[elementFoundAt]};\n        const curQuantity = cartLineToUpdate.Quantity || 0;\n\n        if (curQuantity + (cartLineToAdd.Quantity || 1) > quantityLimit) {\n            return {\n                cart: {\n                    Id: cart.Id,\n                    CartLines: cart.CartLines\n                },\n                status: 'FAILED',\n                substatus: 'MAXQUANTITY'\n            };\n        }\n    }\n\n    const newCartLine = {...cartLineToAdd};\n\n    if (!isAddServiceItemToCart && cartLineToAdd && cartLineToAdd.Quantity && cartLineToAdd.Quantity > quantityLimit) {\n        return {\n            cart: {\n                Id: cart.Id,\n                CartLines: cart.CartLines\n            },\n            status: 'FAILED',\n            substatus: 'MAXQUANTITY'\n        };\n    }\n\n    newCartLine.Quantity = cartLineToAdd.Quantity || 1;\n\n    if (cart.Version) {\n        return addCartLinesAsync({ callerContext: actionContext }, cart.Id, [newCartLine], cart.Version)\n        .then(newCart => {\n            return <ICartActionResultWithCart> { cart: newCart, status: 'SUCCESS' };\n        }).catch(error => {\n            actionContext.telemetry.trace(error);\n            actionContext.telemetry.trace('Unable to add Cart Line');\n\n            return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED' };\n        });\n    } else {\n        actionContext.telemetry.warning('Unable to update Cart Line, Cart Version could not be found');\n    }\n\n    return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED' };\n}"]}