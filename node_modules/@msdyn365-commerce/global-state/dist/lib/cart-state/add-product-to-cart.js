import { addCartLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
// tslint:disable-next-line:cyclomatic-complexity
export default async function addProductToCartInternal(cart, cartLineToAdd, actionContext, availableQuantity, enableStockCheck, isAddServiceItemToCart) {
    if (!cart.CartLines) {
        return { cart: undefined, status: 'FAILED' };
    }
    const maxQuantityForCartLineItem = actionContext.requestContext.app.config.maxQuantityForCartLineItem;
    let quantityLimit;
    if (enableStockCheck === false) {
        quantityLimit = maxQuantityForCartLineItem || 10;
    }
    else {
        if (maxQuantityForCartLineItem === undefined && availableQuantity === undefined) {
            quantityLimit = 10;
        }
        else if (availableQuantity === undefined) {
            quantityLimit = maxQuantityForCartLineItem;
        }
        else if (maxQuantityForCartLineItem === undefined) {
            quantityLimit = availableQuantity;
        }
        else {
            quantityLimit = Math.min(maxQuantityForCartLineItem, availableQuantity);
        }
    }
    let elementFoundAt = -1;
    const productIdToFind = cartLineToAdd.ProductId;
    for (let i = 0; i < cart.CartLines.length; i++) {
        if (cart.CartLines[i].ProductId === productIdToFind &&
            (cart.CartLines[i].DeliveryMode || '') === (cartLineToAdd.DeliveryMode || '') &&
            (cart.CartLines[i].FulfillmentStoreId || '') === (cartLineToAdd.FulfillmentStoreId || '')) {
            elementFoundAt = i;
            break;
        }
    }
    if (!isAddServiceItemToCart && elementFoundAt !== -1) {
        const cartLineToUpdate = { ...cart.CartLines[elementFoundAt] };
        const curQuantity = cartLineToUpdate.Quantity || 0;
        if (curQuantity + (cartLineToAdd.Quantity || 1) > quantityLimit) {
            return {
                cart: {
                    Id: cart.Id,
                    CartLines: cart.CartLines
                },
                status: 'FAILED',
                substatus: 'MAXQUANTITY'
            };
        }
    }
    const newCartLine = { ...cartLineToAdd };
    if (!isAddServiceItemToCart && cartLineToAdd && cartLineToAdd.Quantity && cartLineToAdd.Quantity > quantityLimit) {
        return {
            cart: {
                Id: cart.Id,
                CartLines: cart.CartLines
            },
            status: 'FAILED',
            substatus: 'MAXQUANTITY'
        };
    }
    newCartLine.Quantity = cartLineToAdd.Quantity || 1;
    if (cart.Version) {
        return addCartLinesAsync({ callerContext: actionContext }, cart.Id, [newCartLine], cart.Version)
            .then(newCart => {
            return { cart: newCart, status: 'SUCCESS' };
        }).catch(error => {
            actionContext.telemetry.trace(error);
            actionContext.telemetry.trace('Unable to add Cart Line');
            return { cart: undefined, status: 'FAILED' };
        });
    }
    else {
        actionContext.telemetry.warning('Unable to update Cart Line, Cart Version could not be found');
    }
    return { cart: undefined, status: 'FAILED' };
}
//# sourceMappingURL=add-product-to-cart.js.map