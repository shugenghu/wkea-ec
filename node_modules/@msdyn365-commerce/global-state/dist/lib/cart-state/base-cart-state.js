import { __decorate } from "tslib";
import { action, computed, observable } from 'mobx';
import { GlobalState } from '../global-state/global-state';
import addProductToCartInternal from './add-product-to-cart';
import addPromoCodeInternal from './add-promo-code';
import clearCartLineDeliveryModeInternal from './clear-cart-line-delivery-mode';
import clearCartLinesDeliveryInformation from './clear-cart-lines-delivery-information';
import getOrCreateActiveCart from './get-or-create-active-cart';
import refreshCartInternal from './refresh-cart';
import removeAllPromoCodesInternal from './remove-all-promo-codes';
import removeCartLineInternal from './remove-cart-lines';
import removePromoCodesInternal from './remove-promo-codes';
import updateCart from './update-cart';
import updateCartLineDeliverySpecificationsInternal from './update-cart-line-delivery-specifications';
import updateCartLineQuantityInternal from './update-cart-line-quantity';
import updateLoyaltyCardIdInternal from './update-loyalty-card-id';
import updateReceiptEmail from './update-receipt-email';
/**
 * Cart state information
 */
export class BaseCartState extends GlobalState {
    constructor(actionContext) {
        super(actionContext);
        this._cart = {};
        this._attributeValues = [];
        this._extensionProperties = [];
    }
    get cart() {
        return this._cart;
    }
    get attributeValues() {
        return this._attributeValues;
    }
    get extensionProperties() {
        return this._extensionProperties;
    }
    get totalItemsInCart() {
        if (this._cart.CartLines) {
            return this._cart.CartLines.map(cartLine => cartLine.Quantity || 1).reduce((total, num) => total + num, 0);
        }
        return 0;
    }
    get isEmpty() {
        return !(this._cart.CartLines && this._cart.CartLines.length > 0);
    }
    async initialize() {
        if (this.isInitialized) {
            return;
        }
        const newCart = await getOrCreateActiveCart(this.actionContext);
        if (newCart) {
            this._cart = newCart;
            this._status = 'READY';
        }
        else {
            this._status = 'ERROR';
        }
        this.isInitialized = true;
    }
    /**
     * Refreshes the cart by getting it from the server
     *
     * Other actions should keep cart up to date so shouldn't need to call this
     * outside of initialization but still might be scenarios where a manual
     * refresh is needed
     */
    async refreshCart(input) {
        return this._doAsyncAction(async () => {
            const newCart = await refreshCartInternal(this.cart.Id, this.actionContext);
            if (newCart) {
                this._cart = newCart;
                return { status: 'SUCCESS' };
            }
            return { status: 'FAILED' };
        });
    }
    /**
     * Adds the specified product to the current cart. If product is already in cart
     * will update its cart line, otherwise will add a new cart line to the cart
     *
     * @param product The product to add to the cart
     * @param count: How many copies of the product to add
     * @param location: The org unit location, used for BuyOnlinePickupInStore scenarios
     * (If you want item to simply be shipped, leave this parameter undefined)
     */
    async addProductToCart(input) {
        return this._doAsyncAction(async () => {
            const cartLine = {
                CatalogId: this.actionContext.requestContext.apiSettings.catalogId,
                Description: input.product.Description,
                // TODO: Investigate this value and what it represents
                EntryMethodTypeValue: 3,
                ItemId: input.product.ItemId,
                ProductId: input.product.RecordId,
                Quantity: input.count || 1,
                TrackingId: '',
                UnitOfMeasureSymbol: input.product.DefaultUnitOfMeasure
            };
            if (input.location) {
                if (!this.actionContext.requestContext.channel) {
                    return { status: 'FAILED' };
                }
                cartLine.DeliveryMode = this.actionContext.requestContext.channel.PickupDeliveryModeCode;
                cartLine.FulfillmentStoreId = cartLine.WarehouseId = input.location.OrgUnitNumber;
                cartLine.ShippingAddress = this._buildAddressFromOrgUnitLocation(input.location);
            }
            // check if the product is service or not by product type
            // tslint:disable-next-line:prefer-type-cast
            const PRODUCTASSERVICE = 2;
            const isAddServiceItemToCart = input.product.ItemTypeValue === PRODUCTASSERVICE;
            return this._doCartOperationWithRetry(() => addProductToCartInternal(this.cart, cartLine, this.actionContext, input.availableQuantity, input.enableStockCheck, isAddServiceItemToCart));
        });
    }
    /**
     * Removes the cart lines with the provided ids from the cart
     *
     * @param cartLineIds The cart lines to remove
     */
    async removeCartLines(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => removeCartLineInternal(this.cart, input.cartLineIds, this.actionContext));
        });
    }
    /**
     * Clears the pickup location information from the provided cart line,
     * resulting in it getting shipped to the customer
     *
     * @param cartLineId The cart line to clear the location from
     */
    async clearCartLinePickupLocation(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => clearCartLineDeliveryModeInternal(this.cart, input.cartLineId, this.actionContext));
        });
    }
    /**
     * Clears the delivery mode, and other information for the shipping cart lines.
     */
    async clearCartLinesDeliveryInformation(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => clearCartLinesDeliveryInformation(this.cart, this.actionContext));
        });
    }
    /**
     * Marks the provided cartline for pickup in store, with the provided location as
     * the pickup location
     *
     * @param cartLineId The cart line to mark for pickup
     * @param location The location to set for pickup
     */
    async updateCartLinePickupLocation(input) {
        return this._doAsyncAction(async () => {
            if (!this.actionContext.requestContext.channel) {
                return { status: 'FAILED' };
            }
            const cartLineDeliverySpecification = {
                LineId: input.cartLineId,
                DeliverySpecification: {
                    DeliveryModeId: this.actionContext.requestContext.channel.PickupDeliveryModeCode,
                    DeliveryPreferenceTypeValue: 2,
                    PickUpStoreId: input.location.OrgUnitNumber,
                    DeliveryAddress: this._buildAddressFromOrgUnitLocation(input.location)
                }
            };
            return this._doCartOperationWithRetry(() => updateCartLineDeliverySpecificationsInternal(this.cart, [cartLineDeliverySpecification], this.actionContext));
        });
    }
    /**
     * Updates the delivery mode for items in the cart with the desired delivery mode, preserving BOPIS status for stuff already marked as BOPIS
     *
     * @param deliveryModeId The delivery mode to use
     */
    async updateCartDeliverySpecification(input) {
        return this._doAsyncAction(async () => {
            if (input.deliveryModeId.trim() === '') {
                return { status: 'FAILED', substatus: 'EMPTYINPUT' };
            }
            const pickupDeliveryModeCode = this.actionContext.requestContext.channel && this.actionContext.requestContext.channel.PickupDeliveryModeCode;
            const cartLinesForShipping = (this.cart.CartLines || []).filter(cartLine => (cartLine.DeliveryMode && cartLine.DeliveryMode !== '') ? cartLine.DeliveryMode !== pickupDeliveryModeCode : cartLine);
            if (cartLinesForShipping.length > 0) {
                const deliverySpecifications = cartLinesForShipping.map(cartLine => {
                    return {
                        LineId: cartLine.LineId,
                        DeliverySpecification: {
                            DeliveryModeId: input.deliveryModeId,
                            DeliveryPreferenceTypeValue: 1,
                            DeliveryAddress: input.shippingAddress
                        }
                    };
                });
                return this._doCartOperationWithRetry(() => updateCartLineDeliverySpecificationsInternal(this.cart, deliverySpecifications, this.actionContext));
            }
            return { status: 'FAILED', substatus: 'NOCONTENT' };
        });
    }
    /**
     * Updates the quantity of the cart line
     *
     * @param cartLineId The cart line to update the quantity
     * @param newQuantity The new quantity to use (note that if this exceeds max quantity, will set quantity to max quantity)
     */
    async updateCartLineQuantity(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => updateCartLineQuantityInternal(this.cart, input.cartLineId, input.newQuantity, this.actionContext));
        });
    }
    /**
     * Updates the loyalty card ID on the card
     *
     * @param loyaltyCardId The loyalty card id to use
     */
    async updateLoyaltyCardId(input) {
        if (!input.loyaltyCardNumber) {
            return { status: 'FAILED', substatus: 'EMPTYINPUT' };
        }
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => updateLoyaltyCardIdInternal(this.cart, input.loyaltyCardNumber, this.actionContext));
        });
    }
    /**
     * Adds promo code to the cart
     *
     * @param promoCode The promo code to add
     */
    addPromoCode(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => addPromoCodeInternal(this.cart, input.promoCode, this.actionContext));
        });
    }
    /**
     * Removes promo codes from the cart
     *
     * @param promoCodes The promo codes to remove
     */
    removePromoCodes(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => removePromoCodesInternal(this.cart, input.promoCodes, this.actionContext));
        });
    }
    /**
     * Removes all promo code from the cart
     */
    removeAllPromoCodes(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => removeAllPromoCodesInternal(this.cart, this.actionContext));
        });
    }
    /**
     * Updates receipt email
     *
     * @param newEmail The receipt email
     */
    async updateReceiptEmail(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => updateReceiptEmail(this.cart, input.newEmail, this.actionContext));
        });
    }
    /**
     * Updates the attribute values
     *
     * @param newAttributeValues The new attribute values to update
     */
    async updateAttributeValues(input) {
        this._attributeValues = input.newAttributeValues;
        const newCartObject = {
            Id: this.cart.Id,
            AttributeValues: input.newAttributeValues
        };
        return this.updateCart({ newCartObject: newCartObject });
    }
    /**
     * Updates the extension properties
     *
     * @param newExtensionProperties The new Extension properties to update
     */
    async updateExtensionProperties(input) {
        this._extensionProperties = input.newExtensionProperties;
        const newCartObject = {
            Id: this.cart.Id,
            ExtensionProperties: input.newExtensionProperties
        };
        return this.updateCart({ newCartObject: newCartObject });
    }
    /**
     * Updates cart object
     *
     * @param newCart The cart object
     */
    async updateCart(input) {
        return this._doAsyncAction(async () => {
            return this._doCartOperationWithRetry(() => updateCart(this.cart, input.newCartObject, this.actionContext));
        });
    }
    async _doCartOperationWithRetry(callback) {
        let callbackResult = await callback();
        if (callbackResult.status === 'SUCCESS' || !this._shouldRetrySubstatus(callbackResult.substatus)) {
            if (callbackResult.cart) {
                this._cart = callbackResult.cart;
            }
        }
        else {
            const refreshCartResult = await this.refreshCart({});
            if (refreshCartResult.status === 'SUCCESS') {
                callbackResult = await callback();
                if (callbackResult.status === 'SUCCESS' || !this._shouldRetrySubstatus(callbackResult.substatus)) {
                    if (callbackResult.cart) {
                        this._cart = callbackResult.cart;
                    }
                }
            }
        }
        return { status: callbackResult.status, substatus: callbackResult.substatus };
    }
    _shouldRetrySubstatus(subsatus) {
        if (!subsatus) {
            return true;
        }
        // all substatus currently don't result in a retry
        return false;
    }
    _buildAddressFromOrgUnitLocation(location) {
        return {
            RecordId: location.PostalAddressId,
            Name: location.OrgUnitName,
            FullAddress: location.Address,
            Street: location.Street,
            StreetNumber: location.StreetNumber,
            City: location.City,
            DistrictName: location.DistrictName,
            BuildingCompliment: location.BuildingCompliment,
            Postbox: location.Postbox,
            ThreeLetterISORegionName: location.Country,
            ZipCode: location.Zip,
            County: location.County,
            CountyName: location.CountyName,
            State: location.State,
            StateName: location.StateName
        };
    }
}
__decorate([
    observable
], BaseCartState.prototype, "_cart", void 0);
__decorate([
    computed
], BaseCartState.prototype, "cart", null);
__decorate([
    observable
], BaseCartState.prototype, "_attributeValues", void 0);
__decorate([
    computed
], BaseCartState.prototype, "attributeValues", null);
__decorate([
    observable
], BaseCartState.prototype, "_extensionProperties", void 0);
__decorate([
    computed
], BaseCartState.prototype, "extensionProperties", null);
__decorate([
    computed
], BaseCartState.prototype, "totalItemsInCart", null);
__decorate([
    computed
], BaseCartState.prototype, "isEmpty", null);
__decorate([
    action
], BaseCartState.prototype, "refreshCart", null);
__decorate([
    action
], BaseCartState.prototype, "addProductToCart", null);
__decorate([
    action
], BaseCartState.prototype, "removeCartLines", null);
__decorate([
    action
], BaseCartState.prototype, "clearCartLinePickupLocation", null);
__decorate([
    action
], BaseCartState.prototype, "clearCartLinesDeliveryInformation", null);
__decorate([
    action
], BaseCartState.prototype, "updateCartLinePickupLocation", null);
__decorate([
    action
], BaseCartState.prototype, "updateCartDeliverySpecification", null);
__decorate([
    action
], BaseCartState.prototype, "updateCartLineQuantity", null);
__decorate([
    action
], BaseCartState.prototype, "updateLoyaltyCardId", null);
__decorate([
    action
], BaseCartState.prototype, "addPromoCode", null);
__decorate([
    action
], BaseCartState.prototype, "removePromoCodes", null);
__decorate([
    action
], BaseCartState.prototype, "removeAllPromoCodes", null);
__decorate([
    action
], BaseCartState.prototype, "updateReceiptEmail", null);
__decorate([
    action
], BaseCartState.prototype, "updateAttributeValues", null);
__decorate([
    action
], BaseCartState.prototype, "updateExtensionProperties", null);
__decorate([
    action
], BaseCartState.prototype, "updateCart", null);
//# sourceMappingURL=base-cart-state.js.map