{"version":3,"file":"clear-cart-line-delivery-mode.js","sourceRoot":"./src/","sources":["cart-state/clear-cart-line-delivery-mode.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,oBAAoB,EAAE,MAAM,qEAAqE,CAAC;AAI3G,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,yBAAyB,CAAC,IAAgC,EAAE,UAAkB,EAAE,aAA6B;IACvI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QAC1B,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC;KAC/C;IAED,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC;IAExF,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,OAAmC,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC;KAC3E;IAED,MAAM,YAAY,GAAa,EAAC,GAAG,aAAa,CAAC,CAAC,CAAC,EAAC,CAAC;IAErD,YAAY,CAAC,YAAY,GAAG,EAAE,CAAC;IAC/B,YAAY,CAAC,kBAAkB,GAAG,EAAE,CAAC;IACrC,YAAY,CAAC,eAAe,GAAG,EAAE,CAAC;IAElC,OAAO,oBAAoB,CAAC,EAAE,aAAa,EAAE,aAAa,EAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,EAAC,IAAI,CAAC;SACrF,IAAI,CAAC,OAAO,CAAC,EAAE;QACZ,OAAmC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAC,CAAC;IAC3E,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAE5D,OAAmC,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;AACX,CAAC","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { updateCartLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { Cart, CartLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { ICartActionResultWithCart } from './cart-action-result';\n\nexport default async function clearCartLineDeliveryMode(cart: Readonly<Cart | undefined>, cartLineId: string, actionContext: IActionContext): Promise<ICartActionResultWithCart> {\n    if (!cart || !cart.CartLines) {\n        return { cart: undefined, status: 'FAILED'};\n    }\n\n    const matchingLines = cart.CartLines.filter(cartLine => cartLine.LineId === cartLineId);\n\n    if (matchingLines.length === 0) {\n        return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED'};\n    }\n\n    const copyCartLine: CartLine = {...matchingLines[0]};\n\n    copyCartLine.DeliveryMode = '';\n    copyCartLine.FulfillmentStoreId = '';\n    copyCartLine.ShippingAddress = {};\n\n    return updateCartLinesAsync({ callerContext: actionContext}, cart.Id, [copyCartLine],null)\n        .then(newCart => {\n            return <ICartActionResultWithCart> { cart: newCart, status: 'SUCCESS'};\n        })\n        .catch(error => {\n            actionContext.telemetry.warning(error);\n            actionContext.telemetry.debug('Unable to Update Cart Line');\n\n            return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED'};\n        });\n}"]}