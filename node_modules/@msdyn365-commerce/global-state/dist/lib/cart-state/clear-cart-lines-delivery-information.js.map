{"version":3,"file":"clear-cart-lines-delivery-information.js","sourceRoot":"./src/","sources":["cart-state/clear-cart-lines-delivery-information.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,oBAAoB,EAAE,MAAM,qEAAqE,CAAC;AAG3G,OAAO,CAAC,MAAM,QAAQ,CAAC;AAEvB,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,iCAAiC,CAAC,IAAgC,EAAE,aAA6B;IAE3H,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QAC1B,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC;KAC/C;IAED,MAAM,sBAAsB,GAAG,aAAa,IAAI,aAAa,CAAC,cAAc,IAAI,aAAa,CAAC,cAAc,CAAC,OAAO,EAAE,sBAAsB,CAAC;IAE7I,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CACvC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,YAAY,IAAI,QAAQ,CAAC,YAAY,KAAK,sBAAsB,IAAI,QAAQ,CAAC,MAAM,CAC3G,CAAC;IAEF,6DAA6D;IAC7D,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,OAAmC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAC,CAAC;KACvE;IAED,IAAI,WAAW,GAAe,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAEzD,WAAW,CAAC,OAAO,CAAE,IAAI,CAAC,EAAE;QACxB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,OAAO,oBAAoB,CAAC,EAAE,aAAa,EAAE,aAAa,EAAC,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,EAAE,IAAI,CAAC;SACnF,IAAI,CAAC,CAAC,OAAY,EAAE,EAAE;QACnB,OAAmC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAC,CAAC;IAC3E,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAa,EAAE,EAAE;QACrB,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAE7D,OAAmC,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;AACX,CAAC","sourcesContent":["import { IActionContext } from '@msdyn365-commerce/core';\nimport { updateCartLinesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport { Cart, CartLine } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { ICartActionResultWithCart } from './cart-action-result';\nimport _ from 'lodash';\n\nexport default async function clearCartLinesDeliveryInformation(cart: Readonly<Cart | undefined>, actionContext: IActionContext): Promise<ICartActionResultWithCart> {\n\n    if (!cart || !cart.CartLines) {\n        return { cart: undefined, status: 'FAILED'};\n    }\n\n    const pickupDeliveryModeCode = actionContext && actionContext.requestContext && actionContext.requestContext.channel?.PickupDeliveryModeCode;\n\n    const matchingLines = cart.CartLines.filter(\n        cartLine => cartLine.DeliveryMode && cartLine.DeliveryMode !== pickupDeliveryModeCode && cartLine.LineId\n    );\n\n    // If there are no lines needing updates, just return success\n    if (matchingLines.length === 0) {\n        return <ICartActionResultWithCart> { cart: cart, status: 'SUCCESS'};\n    }\n\n    let copiedLines: CartLine[] = _.cloneDeep(matchingLines);\n\n    copiedLines.forEach( line => {\n        line.DeliveryMode = '';\n        line.FulfillmentStoreId = '';\n        line.ShippingAddress = {};\n    });\n\n    return updateCartLinesAsync({ callerContext: actionContext}, cart.Id, copiedLines, null)\n        .then((newCart: any) => {\n            return <ICartActionResultWithCart> { cart: newCart, status: 'SUCCESS'};\n        })\n        .catch((error: string) => {\n            actionContext.telemetry.warning(error);\n            actionContext.telemetry.debug('Unable to Update Cart Lines');\n\n            return <ICartActionResultWithCart> { cart: undefined, status: 'FAILED'};\n        });\n}"]}