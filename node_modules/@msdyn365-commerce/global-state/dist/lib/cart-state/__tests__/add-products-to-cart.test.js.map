{"version":3,"file":"add-products-to-cart.test.js","sourceRoot":"./src/","sources":["cart-state/__tests__/add-products-to-cart.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport { CartLine } from '@msdyn365-commerce/retail-proxy';\nimport * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport mockRequestContext from '../../__mocks__/request-context.json';\nimport mockRequestContextReducedMaxQuantity from '../../__mocks__/request-context-reduced-max-quantity.json';\nimport mockRequestContextNoSettings from '../../__mocks__/request-context-nosettings.json';\nimport addProductsToCart from '../add-product-to-cart';\n\ndescribe('addProductsToCart', () => {\n    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });\n    const actionContextWithReducedMaxQuantity = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContextReducedMaxQuantity) });\n    const actionContextWithNoSettings = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContextNoSettings) });\n\n    const cartLine1: CartLine = {\n        ProductId: 1,\n        Quantity: 1\n    };\n\n    const cartLine1Count5: CartLine = {\n        ProductId: 1,\n        Quantity: 5\n    };\n\n    const cartLine1Count8: CartLine = {\n        ProductId: 1,\n        Quantity: 8\n    };\n\n    const cartLine1CountNone: CartLine = {\n        ProductId: 1\n    };\n\n    const cartLine2: CartLine = {\n        ProductId: 3,\n        Quantity: 1,\n        DeliveryMode: '10',\n        FulfillmentStoreId: 'Houston'\n    };\n\n    const cartLine3: CartLine = {\n        ProductId: 4,\n        Quantity: 1,\n        DeliveryMode: '10',\n        FulfillmentStoreId: 'Houston'\n    };\n\n    const cartLine4: CartLine = {\n        ProductId: 3,\n        Quantity: 1,\n        DeliveryMode: '20',\n        FulfillmentStoreId: 'Houston'\n    };\n\n    const cartLine5: CartLine = {\n        ProductId: 3,\n        Quantity: 1,\n        DeliveryMode: '10',\n        FulfillmentStoreId: 'Seattle'\n    };\n\n    // Setup mocks\n    beforeAll(() => {\n        core.initializeMockApp();\n        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n    });\n\n    beforeEach(() => {\n        jest.resetAllMocks();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.addCartLinesAsync = jest.fn().mockImplementation((ctx, id, cartLines) => {\n            return Promise.resolve({\n                Id: id,\n                CartLines: cartLines\n            });\n        });\n    });\n\n    it('addProductsToCart returns FAILED if cart has no cart lines', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1 }, cartLine1, actionContext);\n\n        expect(result.status).toBe('FAILED');\n    });\n\n    it('addProductsToCart merges lines if match found', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining(cartLine1)]));\n    });\n\n    it('addProductsToCart merges lines if match found version 2', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine2, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining(cartLine2)]));\n    });\n\n    it('addProductsToCart returns MAXQUANTITY error if product count already at max', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1, actionContextWithReducedMaxQuantity);\n\n        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n        expect(result.substatus).toBe('MAXQUANTITY');\n        expect(result.cart).toEqual({\n            CartLines: [ cartLine1Count5, cartLine2 ],\n            Id: 'cart1'\n        });\n    });\n\n    it('addProductsToCart uses 10 by default for MAXQUANTITY (below max quantity)', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1, actionContextWithNoSettings);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining(cartLine1)]));\n    });\n\n    it('addProductsToCart uses 10 by default for MAXQUANTITY (above max quantity)', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1Count8, actionContextWithNoSettings);\n\n        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).toEqual({\n            CartLines: [ cartLine1Count5, cartLine2 ],\n            Id: 'cart1'\n        });\n    });\n\n    it('addProductsToCart can merge when new line has no quantity', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1Count5, cartLine2 ] }, cartLine1CountNone, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({\n            ProductId: 1,\n            Quantity: 1\n        })]));\n    });\n\n    it('addProductsToCart can merge when existing line has no quantity', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1CountNone, cartLine2 ] }, cartLine1Count5, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({\n            ProductId: 1,\n            Quantity: 5\n        })]));\n    });\n\n    it('addProductsToCart not adds line with reduced quantity if greater than min of max and availabilityQuantity with enableStockCheck is false', async () => {\n        const availabilityQuantity = 5;\n        const enableStockCheck = false;\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithReducedMaxQuantity, availabilityQuantity, enableStockCheck);\n\n        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).not.toBeUndefined();\n    });\n\n    it('addProductsToCart adds line if greater than availabilityQuantity with enableStockCheck is false', async () => {\n        const availabilityQuantity = 5;\n        const enableStockCheck = false;\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithNoSettings, availabilityQuantity, enableStockCheck);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n    });\n\n    it('addProductsToCart adds line if no match found', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({\n            ProductId: 1,\n            Quantity: 1\n        })]));\n    });\n\n    it('addProductsToCart not adds line with reduced quantity if greater than max', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithReducedMaxQuantity);\n\n        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).not.toBeUndefined();\n    });\n\n    it('addProductsToCart not adds line with reduced quantity if greater than min of max and availabilityQuantity', async () => {\n        const availabilityQuantity = 5;\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithReducedMaxQuantity, availabilityQuantity);\n\n        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).not.toBeUndefined();\n    });\n\n    it('addProductsToCart not adds line with reduced quantity if greater than availabilityQuantity', async () => {\n        const availabilityQuantity = 5;\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1Count8, actionContextWithNoSettings, availabilityQuantity);\n\n        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).not.toBeUndefined();\n    });\n\n    it('addProductsToCart adds line with quantity 1 if not specified', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1CountNone, actionContextWithReducedMaxQuantity);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({\n            ProductId: 1,\n            Quantity: 1\n        })]));\n    });\n\n    it('addProductsToCart doesn\\'t match if product ids don\\'t match', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1, cartLine2 ] }, cartLine3, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({\n            ProductId: 4,\n            Quantity: 1,\n            DeliveryMode: '10',\n            FulfillmentStoreId: 'Houston'\n        })]));\n    });\n\n    it('addProductsToCart doesn\\'t match if delivery modes dont don\\'t match', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1, cartLine2 ] }, cartLine4, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({\n            ProductId: 3,\n            Quantity: 1,\n            DeliveryMode: '20',\n            FulfillmentStoreId: 'Houston'\n        })]));\n    });\n\n    it('addProductsToCart doesn\\'t match if store ids ids don\\'t match', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ cartLine1, cartLine2 ] }, cartLine5, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.CartLines).toEqual(expect.arrayContaining([expect.objectContaining({\n            ProductId: 3,\n            Quantity: 1,\n            DeliveryMode: '10',\n            FulfillmentStoreId: 'Seattle'\n        })]));\n    });\n\n    it('addProductsToCart returns failure if trying to add but not cart version', async () => {\n        const result = await addProductsToCart({ Id: 'cart1', CartLines: [ ] }, cartLine1, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).not.toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n    });\n\n    it('addProductsToCart returns failure if addCartLinesAsync fails', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.addCartLinesAsync = jest.fn().mockImplementation(cb => {\n            return Promise.reject(new Error('Fail'));\n        });\n\n        const result = await addProductsToCart({ Id: 'cart1', Version: 1, CartLines: [ ] }, cartLine1, actionContext);\n\n        expect(CartsDataActions.addCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n    });\n});"]}