import 'jest';
import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import refreshCart from '../refresh-cart';
describe('refreshCart tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });
    beforeEach(() => {
        jest.resetAllMocks();
    });
    it('refresh cart returns the refreshed cart', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve({
                Id: 'cart2'
            });
        });
        const result = await refreshCart('cart1', actionContext);
        expect(result).toBeDefined();
        expect(result.Id).toBe('cart2');
        expect(CartsDataActions.readAsync).toBeCalled();
    });
    it('refresh cart returns undefined if readAsync fails', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.readAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.reject(new Error('fail'));
        });
        const result = await refreshCart('cart1', actionContext);
        expect(result).toBeUndefined();
        expect(CartsDataActions.readAsync).toBeCalled();
    });
});
//# sourceMappingURL=refresh-cart.test.js.map