{"version":3,"file":"update-loyalty-card-id.test.js","sourceRoot":"./src/","sources":["cart-state/__tests__/update-loyalty-card-id.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport mockRequestContext from '../../__mocks__/request-context.json';\nimport updateLoyaltyCardId from '../update-loyalty-card-id';\n\ndescribe('updateLoyaltyCardId tests', () => {\n    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });\n\n    // Setup mocks\n    beforeAll(() => {\n        core.initializeMockApp();\n        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n    });\n\n    beforeEach(() => {\n        jest.resetAllMocks();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateAsync = jest.fn();\n    });\n\n    it('returns FAILED if cart is undefined', async () => {\n        const result = await updateLoyaltyCardId(undefined, 'CARD1', actionContext);\n\n        expect(result.status).toBe('FAILED');\n\n        expect(CartsDataActions.updateAsync).not.toBeCalled();\n    });\n\n    it('returns success if code added', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {\n            return Promise.resolve({\n                Id: 'cart2'\n            });\n        });\n\n        const result = await updateLoyaltyCardId({ Id: 'cart1'}, 'CARD1', actionContext);\n\n        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            expect.objectContaining({\n                Id: 'cart1',\n                LoyaltyCardId: 'CARD1'\n            })\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart!.Id).toEqual('cart2');\n    });\n\n    it('returns failure if updateAsync throws', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateAsync = jest.fn().mockImplementation(cb => {\n            return Promise.reject(new Error('Fail'));\n        });\n\n        const result = await updateLoyaltyCardId({ Id: 'cart1'}, 'CARD1', actionContext);\n\n        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            expect.objectContaining({\n                Id: 'cart1',\n                LoyaltyCardId: 'CARD1'\n            })\n        );\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).toBeUndefined();\n    });\n});"]}