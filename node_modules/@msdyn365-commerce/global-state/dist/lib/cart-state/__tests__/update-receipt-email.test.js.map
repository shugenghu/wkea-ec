{"version":3,"file":"update-receipt-email.test.js","sourceRoot":"./src/","sources":["cart-state/__tests__/update-receipt-email.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport mockRequestContext from '../../__mocks__/request-context.json';\nimport updateReceiptEmail from '../update-receipt-email';\n\ndescribe('updateReceiptEmail tests', () => {\n    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });\n\n    // Setup mocks\n    beforeAll(() => {\n        core.initializeMockApp();\n        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n    });\n\n    beforeEach(() => {\n        jest.resetAllMocks();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, cart) => {\n            return Promise.resolve({\n                Id: 'cart2',\n                ReceiptEmail: cart.ReceiptEmail\n            });\n        });\n    });\n\n    it('updateReceiptEmail returns FAILED if cart is undefined', async () => {\n        const result = await updateReceiptEmail(undefined, 'email', actionContext);\n\n        expect(result.status).toBe('FAILED');\n\n        expect(CartsDataActions.updateAsync).not.toBeCalled();\n    });\n\n    it('updateReceiptEmail returns updateAsync result', async () => {\n        const result = await updateReceiptEmail({ Id: 'cart1' }, 'email', actionContext);\n\n        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            {\n                Id: 'cart1',\n                ReceiptEmail: 'email'\n            }\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart2');\n        expect(result.cart!.ReceiptEmail).toEqual('email');\n    });\n\n    it('updateReceiptEmail returns failure if updateAsync throws', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateAsync = jest.fn().mockImplementation(cb => {\n            return Promise.reject(new Error('Fail'));\n        });\n\n        const result = await updateReceiptEmail({ Id: 'cart1' }, 'email', actionContext);\n\n        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            {\n                Id: 'cart1',\n                ReceiptEmail: 'email'\n            }\n        );\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).toBeUndefined();\n    });\n\n    it('updateReceiptEmail returns handles tsProxy typing error case', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {\n            return Promise.resolve({\n                Id: 'cart1',\n                ReceiptEmail: 'email'\n            });\n        });\n\n        const result = await updateReceiptEmail({ Id: 'cart1' }, 'email', actionContext);\n\n        expect(CartsDataActions.updateAsync).toBeCalledWith(\n            expect.anything(),\n            {\n                Id: 'cart1',\n                ReceiptEmail: 'email'\n            }\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart1');\n        expect(result.cart!.ReceiptEmail).toEqual('email');\n    });\n});"]}