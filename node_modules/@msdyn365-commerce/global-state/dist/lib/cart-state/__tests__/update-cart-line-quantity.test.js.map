{"version":3,"file":"update-cart-line-quantity.test.js","sourceRoot":"./src/","sources":["cart-state/__tests__/update-cart-line-quantity.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport mockRequestContextNoSetting from '../../__mocks__/request-context-nosettings.json';\nimport mockRequestContextReduced from '../../__mocks__/request-context-reduced-max-quantity.json';\nimport mockRequestContext from '../../__mocks__/request-context.json';\nimport updateCartLineQuantityInternal from '../update-cart-line-quantity';\n\ndescribe('updateCartLineQuantity tests', () => {\n    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });\n    const actionContextNoSetting = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContextNoSetting) });\n    const actionContextReduced = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContextReduced) });\n\n    const sampleCart = {\n        Id: 'cart1',\n        CartLines: [\n            {\n                LineId: 'cl1',\n                ProductId: 1\n            },\n            {\n                LineId: 'cl2',\n                ProductId: 3\n            },\n            {\n                LineId: 'cl3',\n                ProductId: 5\n            },\n            {\n                LineId: 'cl4',\n                ProductId: 7\n            }\n        ]\n    };\n\n    // Setup mocks\n    beforeAll(() => {\n        core.initializeMockApp();\n        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n    });\n\n    beforeEach(() => {\n        jest.resetAllMocks();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateCartLinesAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {\n            return Promise.resolve({\n                Id: 'cart2'\n            });\n        });\n    });\n\n    it('updateCartLineQuantity returns FAILED if cart is undefined', async () => {\n        const result = await updateCartLineQuantityInternal(undefined, 'cl1', 5, actionContext);\n\n        expect(result.status).toBe('FAILED');\n\n        expect(CartsDataActions.updateCartLinesAsync).not.toBeCalled();\n    });\n\n    it('updateCartLineQuantity returns FAILED if cart doesn\\'t contain line', async () => {\n        const result = await updateCartLineQuantityInternal(sampleCart, 'cl0', 5, actionContext);\n\n        expect(result.status).toBe('FAILED');\n\n        expect(CartsDataActions.updateCartLinesAsync).not.toBeCalled();\n    });\n\n    it('updateCartLineQuantity matches line with avail quantity', async () => {\n        const result = await updateCartLineQuantityInternal(sampleCart, 'cl1', 5, actionContext);\n\n        expect(CartsDataActions.updateCartLinesAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            'cart1',\n            expect.arrayContaining([\n                expect.objectContaining(\n                    {\n                        LineId: 'cl1',\n                        Quantity: 5,\n                        ProductId: 1\n                    }\n                )\n            ]),\n            null\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart2');\n    });\n\n    it('updateCartLineQuantity respects MAXQUANTITY', async () => {\n        const result = await updateCartLineQuantityInternal(sampleCart, 'cl1', 10, actionContextReduced);\n\n        expect(CartsDataActions.updateCartLinesAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            'cart1',\n            expect.arrayContaining([\n                expect.objectContaining(\n                    {\n                        LineId: 'cl1',\n                        Quantity: 5,\n                        ProductId: 1\n                    }\n                )\n            ]),\n            null\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart2');\n    });\n\n    it('updateCartLineQuantity respects default MAXQUANTITY of 10', async () => {\n        const result = await updateCartLineQuantityInternal(sampleCart, 'cl1', 15, actionContextNoSetting);\n\n        expect(CartsDataActions.updateCartLinesAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            'cart1',\n            expect.arrayContaining([\n                expect.objectContaining(\n                    {\n                        LineId: 'cl1',\n                        Quantity: 10,\n                        ProductId: 1\n                    }\n                )\n            ]),\n            null\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart2');\n    });\n\n    it('updateCartLineQuantity returns failure if updateCartLinesAsync throws', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateCartLinesAsync = jest.fn().mockImplementation(cb => {\n            return Promise.reject(new Error('Fail'));\n        });\n\n        const result = await updateCartLineQuantityInternal(sampleCart, 'cl1', 5, actionContext);\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).toBeUndefined();\n    });\n});"]}