{"version":3,"file":"clear-cart-lines-delivery-information.js","sourceRoot":"./src/","sources":["cart-state/__tests__/clear-cart-lines-delivery-information.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport { Cart } from '@msdyn365-commerce/retail-proxy';\nimport * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport mockRequestContext from '../../__mocks__/request-context.json';\nimport clearCartLinesDeliveryInformation from '../clear-cart-lines-delivery-information';\nimport _ from 'lodash';\n\ndescribe('clearCartLinesDeliveryInformation tests', () => {\n    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });\n\n    const sampleCart: Cart = {\n        Id: 'cart1',\n        CartLines: [\n            {\n                LineId: '1',\n                ProductId: 1,\n                DeliveryMode: '10',\n                FulfillmentStoreId: 'HOUSTON',\n                ShippingAddress: {\n                    State: 'Texas'\n                }\n            },\n            {\n                LineId: '2',\n                ProductId: 1,\n                DeliveryMode: '60',\n                FulfillmentStoreId: 'HOUSTON',\n                ShippingAddress: {\n                    State: 'Texas'\n                }\n            },\n            {\n                LineId: undefined, // This is just needed, because otherwise the test-coverage check things there is an uncovered line/\n                ProductId: 1,\n                DeliveryMode: '15',\n                FulfillmentStoreId: 'HOUSTON',\n                ShippingAddress: {\n                    State: 'Texas'\n                }\n            }\n        ]\n    };\n\n    const bopisCart: Cart = {\n        Id: 'cart2',\n        CartLines: [\n            {\n                LineId: '1',\n                ProductId: 1,\n                DeliveryMode: '50'\n            }\n        ]\n    };\n\n    // Setup mocks\n    beforeAll(() => {\n        core.initializeMockApp();\n        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n    });\n\n    beforeEach(() => {\n        jest.resetAllMocks();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateCartLinesAsync = jest.fn().mockImplementation(() => {\n            return Promise.resolve({\n                Id: 'cart2'\n            });\n        });\n    });\n\n    it('returns FAILED if cart is undefined', async () => {\n        const result = await clearCartLinesDeliveryInformation(undefined,  actionContext);\n\n        expect(result.status).toBe('FAILED');\n\n        expect(CartsDataActions.updateCartLinesAsync).not.toBeCalled();\n    });\n\n    it('still returns if channel or pickup delivery mode code undefined', async () => {\n        let actionContext2 = _.cloneDeep(actionContext);\n        actionContext2.requestContext.channel = undefined;\n\n        const result = await clearCartLinesDeliveryInformation(sampleCart,  actionContext2);\n\n        expect(result.status).toBe('SUCCESS');\n\n        expect(CartsDataActions.updateCartLinesAsync).toBeCalled();\n    });\n\n    it('clears delivery information from shipping lines', async () => {\n        const result = await clearCartLinesDeliveryInformation(sampleCart, actionContext);\n\n        expect(CartsDataActions.updateCartLinesAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            'cart1',\n            expect.arrayContaining([\n                expect.objectContaining(\n                    {\n                        LineId: '1',\n                        ProductId: 1,\n                        DeliveryMode: '',\n                        FulfillmentStoreId: '',\n                        ShippingAddress: {}\n                    }\n                ),\n                expect.objectContaining(\n                    {\n                        LineId: '2',\n                        ProductId: 1,\n                        DeliveryMode: '',\n                        FulfillmentStoreId: '',\n                        ShippingAddress: {}\n                    }\n                )\n            ]),\n            null\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart2');\n    });\n\n    it('returns failure if updateCartLinesAsync throws', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.updateCartLinesAsync = jest.fn().mockImplementation(() => {\n            return Promise.reject(new Error('Fail'));\n        });\n\n        const result = await clearCartLinesDeliveryInformation(sampleCart, actionContext);\n\n        expect(CartsDataActions.updateCartLinesAsync).toBeCalled();\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).toBeUndefined();\n    });\n\n    it('returns the cart with success if no lines need updating', async () => {\n        const result = await clearCartLinesDeliveryInformation(bopisCart, actionContext);\n\n        expect(CartsDataActions.updateCartLinesAsync).not.toBeCalled();\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart2');\n    });\n});"]}