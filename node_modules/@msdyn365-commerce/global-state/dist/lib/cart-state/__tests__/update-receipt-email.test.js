import 'jest';
import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import updateReceiptEmail from '../update-receipt-email';
describe('updateReceiptEmail tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });
    beforeEach(() => {
        jest.resetAllMocks();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, cart) => {
            return Promise.resolve({
                Id: 'cart2',
                ReceiptEmail: cart.ReceiptEmail
            });
        });
    });
    it('updateReceiptEmail returns FAILED if cart is undefined', async () => {
        const result = await updateReceiptEmail(undefined, 'email', actionContext);
        expect(result.status).toBe('FAILED');
        expect(CartsDataActions.updateAsync).not.toBeCalled();
    });
    it('updateReceiptEmail returns updateAsync result', async () => {
        const result = await updateReceiptEmail({ Id: 'cart1' }, 'email', actionContext);
        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(expect.anything(), {
            Id: 'cart1',
            ReceiptEmail: 'email'
        });
        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart.Id).toEqual('cart2');
        expect(result.cart.ReceiptEmail).toEqual('email');
    });
    it('updateReceiptEmail returns failure if updateAsync throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation(cb => {
            return Promise.reject(new Error('Fail'));
        });
        const result = await updateReceiptEmail({ Id: 'cart1' }, 'email', actionContext);
        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(expect.anything(), {
            Id: 'cart1',
            ReceiptEmail: 'email'
        });
        expect(result.status).toBe('FAILED');
        expect(result.cart).toBeUndefined();
    });
    it('updateReceiptEmail returns handles tsProxy typing error case', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve({
                Id: 'cart1',
                ReceiptEmail: 'email'
            });
        });
        const result = await updateReceiptEmail({ Id: 'cart1' }, 'email', actionContext);
        expect(CartsDataActions.updateAsync).toBeCalledWith(expect.anything(), {
            Id: 'cart1',
            ReceiptEmail: 'email'
        });
        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart.Id).toEqual('cart1');
        expect(result.cart.ReceiptEmail).toEqual('email');
    });
});
//# sourceMappingURL=update-receipt-email.test.js.map