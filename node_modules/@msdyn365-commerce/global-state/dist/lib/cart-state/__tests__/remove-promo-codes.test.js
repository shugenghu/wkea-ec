import 'jest';
import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import removePromoCodes from '../remove-promo-codes';
describe('removePromoCode tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });
    beforeEach(() => {
        jest.resetAllMocks();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeDiscountCodesAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve({
                Id: 'cart2'
            });
        });
    });
    it('removePromoCode returns FAILED if cart is undefined', async () => {
        const result = await removePromoCodes(undefined, ['SAVE10'], actionContext);
        expect(result.status).toBe('FAILED');
        expect(CartsDataActions.removeDiscountCodesAsync).not.toBeCalled();
    });
    it('removePromoCode returns removeDiscountCodesAsync result', async () => {
        const result = await removePromoCodes({ Id: 'cart1' }, ['SAVE10'], actionContext);
        expect(CartsDataActions.removeDiscountCodesAsync).toHaveBeenCalledWith(expect.anything(), 'cart1', expect.arrayContaining(['SAVE10']));
        expect(result.status).toBe('SUCCESS');
        expect(result.cart.Id).toEqual('cart2');
    });
    it('removePromoCode returns failure if removePromoCode throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeDiscountCodesAsync = jest.fn().mockImplementation(cb => {
            return Promise.reject(new Error('Fail'));
        });
        const result = await removePromoCodes({ Id: 'cart1' }, ['SAVE10'], actionContext);
        expect(CartsDataActions.removeDiscountCodesAsync).toHaveBeenCalledWith(expect.anything(), 'cart1', expect.arrayContaining(['SAVE10']));
        expect(result.status).toBe('FAILED');
        expect(result.cart).toBeUndefined();
    });
});
//# sourceMappingURL=remove-promo-codes.test.js.map