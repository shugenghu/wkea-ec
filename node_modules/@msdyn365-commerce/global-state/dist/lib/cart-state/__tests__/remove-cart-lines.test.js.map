{"version":3,"file":"remove-cart-lines.test.js","sourceRoot":"./src/","sources":["cart-state/__tests__/remove-cart-lines.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';\nimport mockRequestContext from '../../__mocks__/request-context.json';\nimport removeCartLineInternal from '../remove-cart-lines';\n\ndescribe('removeCartLine tests', () => {\n    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });\n\n    const allCartLineIds: string[] = ['cl1', 'cl2', 'cl3', 'cl4', 'cl5'];\n\n    // Setup mocks\n    beforeAll(() => {\n        core.initializeMockApp();\n        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');\n    });\n\n    beforeEach(() => {\n        jest.resetAllMocks();\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.removeCartLinesAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {\n            return Promise.resolve({\n                Id: 'cart2',\n                CartLines: allCartLineIds\n            });\n        });\n    });\n\n    it('removeCartLine returns FAILED if cart is undefined', async () => {\n        const result = await removeCartLineInternal(undefined, ['cl1'], actionContext);\n\n        expect(result.status).toBe('FAILED');\n\n        expect(CartsDataActions.removeCartLinesAsync).not.toBeCalled();\n    });\n\n    it('removeCartLine returns removeCartLinesAsync result', async () => {\n        const result = await removeCartLineInternal({ Id: 'cart1' }, ['cl1'], actionContext);\n\n        expect(CartsDataActions.removeCartLinesAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            'cart1',\n            expect.arrayContaining(['cl1'])\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart2');\n    });\n\n    it('removeCartLine returns failure if removeCartLinesAsync throws', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.removeCartLinesAsync = jest.fn().mockImplementation(cb => {\n            return Promise.reject(new Error('Fail'));\n        });\n\n        const result = await removeCartLineInternal({ Id: 'cart1' }, ['cl1'], actionContext);\n\n        expect(CartsDataActions.removeCartLinesAsync).toHaveBeenCalledWith(\n            expect.anything(),\n            'cart1',\n            expect.arrayContaining(['cl1'])\n        );\n\n        expect(result.status).toBe('FAILED');\n        expect(result.cart).toBeUndefined();\n    });\n\n    it('removeCartLine returns handles tsProxy typing error case', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        CartsDataActions.removeCartLinesAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {\n            return Promise.resolve([{\n                Id: 'cart2',\n                CartLines: allCartLineIds\n            }]);\n        });\n\n        const result = await removeCartLineInternal({ Id: 'cart1' }, ['cl1'], actionContext);\n\n        expect(CartsDataActions.removeCartLinesAsync).toBeCalledWith(\n            expect.anything(),\n            'cart1',\n            expect.arrayContaining(['cl1'])\n        );\n\n        expect(result.status).toBe('SUCCESS');\n        expect(result.cart).not.toBeUndefined();\n        expect(result.cart!.Id).toEqual('cart2');\n    });\n});"]}