import 'jest';
import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import clearCartLinesDeliveryInformation from '../clear-cart-lines-delivery-information';
import _ from 'lodash';
describe('clearCartLinesDeliveryInformation tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
    const sampleCart = {
        Id: 'cart1',
        CartLines: [
            {
                LineId: '1',
                ProductId: 1,
                DeliveryMode: '10',
                FulfillmentStoreId: 'HOUSTON',
                ShippingAddress: {
                    State: 'Texas'
                }
            },
            {
                LineId: '2',
                ProductId: 1,
                DeliveryMode: '60',
                FulfillmentStoreId: 'HOUSTON',
                ShippingAddress: {
                    State: 'Texas'
                }
            },
            {
                LineId: undefined,
                ProductId: 1,
                DeliveryMode: '15',
                FulfillmentStoreId: 'HOUSTON',
                ShippingAddress: {
                    State: 'Texas'
                }
            }
        ]
    };
    const bopisCart = {
        Id: 'cart2',
        CartLines: [
            {
                LineId: '1',
                ProductId: 1,
                DeliveryMode: '50'
            }
        ]
    };
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });
    beforeEach(() => {
        jest.resetAllMocks();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateCartLinesAsync = jest.fn().mockImplementation(() => {
            return Promise.resolve({
                Id: 'cart2'
            });
        });
    });
    it('returns FAILED if cart is undefined', async () => {
        const result = await clearCartLinesDeliveryInformation(undefined, actionContext);
        expect(result.status).toBe('FAILED');
        expect(CartsDataActions.updateCartLinesAsync).not.toBeCalled();
    });
    it('still returns if channel or pickup delivery mode code undefined', async () => {
        let actionContext2 = _.cloneDeep(actionContext);
        actionContext2.requestContext.channel = undefined;
        const result = await clearCartLinesDeliveryInformation(sampleCart, actionContext2);
        expect(result.status).toBe('SUCCESS');
        expect(CartsDataActions.updateCartLinesAsync).toBeCalled();
    });
    it('clears delivery information from shipping lines', async () => {
        const result = await clearCartLinesDeliveryInformation(sampleCart, actionContext);
        expect(CartsDataActions.updateCartLinesAsync).toHaveBeenCalledWith(expect.anything(), 'cart1', expect.arrayContaining([
            expect.objectContaining({
                LineId: '1',
                ProductId: 1,
                DeliveryMode: '',
                FulfillmentStoreId: '',
                ShippingAddress: {}
            }),
            expect.objectContaining({
                LineId: '2',
                ProductId: 1,
                DeliveryMode: '',
                FulfillmentStoreId: '',
                ShippingAddress: {}
            })
        ]), null);
        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart.Id).toEqual('cart2');
    });
    it('returns failure if updateCartLinesAsync throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateCartLinesAsync = jest.fn().mockImplementation(() => {
            return Promise.reject(new Error('Fail'));
        });
        const result = await clearCartLinesDeliveryInformation(sampleCart, actionContext);
        expect(CartsDataActions.updateCartLinesAsync).toBeCalled();
        expect(result.status).toBe('FAILED');
        expect(result.cart).toBeUndefined();
    });
    it('returns the cart with success if no lines need updating', async () => {
        const result = await clearCartLinesDeliveryInformation(bopisCart, actionContext);
        expect(CartsDataActions.updateCartLinesAsync).not.toBeCalled();
        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart.Id).toEqual('cart2');
    });
});
//# sourceMappingURL=clear-cart-lines-delivery-information.js.map