import 'jest';
import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import removeCartLineInternal from '../remove-cart-lines';
describe('removeCartLine tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
    const allCartLineIds = ['cl1', 'cl2', 'cl3', 'cl4', 'cl5'];
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });
    beforeEach(() => {
        jest.resetAllMocks();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeCartLinesAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve({
                Id: 'cart2',
                CartLines: allCartLineIds
            });
        });
    });
    it('removeCartLine returns FAILED if cart is undefined', async () => {
        const result = await removeCartLineInternal(undefined, ['cl1'], actionContext);
        expect(result.status).toBe('FAILED');
        expect(CartsDataActions.removeCartLinesAsync).not.toBeCalled();
    });
    it('removeCartLine returns removeCartLinesAsync result', async () => {
        const result = await removeCartLineInternal({ Id: 'cart1' }, ['cl1'], actionContext);
        expect(CartsDataActions.removeCartLinesAsync).toHaveBeenCalledWith(expect.anything(), 'cart1', expect.arrayContaining(['cl1']));
        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart.Id).toEqual('cart2');
    });
    it('removeCartLine returns failure if removeCartLinesAsync throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeCartLinesAsync = jest.fn().mockImplementation(cb => {
            return Promise.reject(new Error('Fail'));
        });
        const result = await removeCartLineInternal({ Id: 'cart1' }, ['cl1'], actionContext);
        expect(CartsDataActions.removeCartLinesAsync).toHaveBeenCalledWith(expect.anything(), 'cart1', expect.arrayContaining(['cl1']));
        expect(result.status).toBe('FAILED');
        expect(result.cart).toBeUndefined();
    });
    it('removeCartLine returns handles tsProxy typing error case', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.removeCartLinesAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve([{
                    Id: 'cart2',
                    CartLines: allCartLineIds
                }]);
        });
        const result = await removeCartLineInternal({ Id: 'cart1' }, ['cl1'], actionContext);
        expect(CartsDataActions.removeCartLinesAsync).toBeCalledWith(expect.anything(), 'cart1', expect.arrayContaining(['cl1']));
        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart.Id).toEqual('cart2');
    });
});
//# sourceMappingURL=remove-cart-lines.test.js.map