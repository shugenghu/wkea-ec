import 'jest';
import * as core from '@msdyn365-commerce/core';
import * as CartsDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g';
import mockRequestContext from '../../__mocks__/request-context.json';
import updateCart from '../update-cart';
describe('updateCart tests', () => {
    const actionContext = core.buildMockActionContext({ requestContext: mockRequestContext });
    const newCartObject = {
        AffiliationLines: [],
        IsRequiredAmountPaid: false,
        IsDiscountFullyCalculated: true,
        AmountDue: 612.35,
        AmountPaid: 0,
        AttributeValues: [],
        BeginDateTime: undefined,
        BusinessDate: undefined,
        CancellationChargeAmount: undefined,
        EstimatedShippingAmount: undefined,
        CartLines: [],
        CartTypeValue: 1,
        ChannelId: 5637144608,
        ChargeAmount: 0,
        ChargeLines: [],
        TaxViewLines: [],
        Id: 'Id',
        Comment: '',
        InvoiceComment: '',
        Coupons: [],
        CustomerId: '',
        CustomerOrderModeValue: 0,
        DeliveryMode: undefined,
        DeliveryModeChargeAmount: undefined,
        DiscountAmount: 0,
        DiscountAmountWithoutTax: 0,
        DiscountCodes: [],
        TransactionTypeValue: 0,
        CustomerAccountDepositLines: [],
        IncomeExpenseLines: [],
        IncomeExpenseTotalAmount: 0,
        IsReturnByReceipt: false,
        ReturnTransactionHasLoyaltyPayment: false,
        IsFavorite: false,
        IsRecurring: false,
        IsSuspended: false,
        LoyaltyCardId: 'CARD1',
        ModifiedDateTime: undefined,
        Name: undefined,
        OrderNumber: undefined,
        AvailableDepositAmount: 0,
        OverriddenDepositAmount: undefined,
        OverriddenDepositWithoutCarryoutAmount: undefined,
        PrepaymentAmountPaid: 0,
        PrepaymentAppliedOnPickup: 0,
        PromotionLines: [],
        QuotationExpiryDate: undefined,
        ReasonCodeLines: [],
        ReceiptEmail: 'email',
        RequestedDeliveryDate: undefined,
        RequiredDepositAmount: 0,
        RequiredDepositWithoutCarryoutAmount: 0,
        SalesId: undefined,
        ShippingAddress: undefined,
        StaffId: undefined,
        SubtotalAmount: 612.35,
        SubtotalAmountWithoutTax: 612.35,
        NetPrice: 612.35,
        SubtotalSalesAmount: 612.35,
        TaxAmount: 0,
        TaxOnCancellationCharge: 0,
        TaxOverrideCode: undefined,
        TenderLines: [],
        TerminalId: '',
        TotalAmount: 612.35,
        TotalSalesAmount: 612.35,
        TotalReturnAmount: 0,
        TotalCarryoutSalesAmount: 612.35,
        TotalCustomerOrderSalesAmount: 0,
        TotalManualDiscountAmount: 0,
        TotalManualDiscountPercentage: 0,
        WarehouseId: 'DC-CENTRAL',
        IsCreatedOffline: false,
        CartStatusValue: 1,
        ReceiptTransactionTypeValue: 1,
        CommissionSalesGroup: '',
        Version: 13203852,
        TotalItems: 2,
        HasTaxCalculationTriggered: true,
        ExtensionProperties: [
            {
                Key: 'CurrencyStringTemplate',
                Value: {
                    BooleanValue: undefined,
                    ByteValue: undefined,
                    DateTimeOffsetValue: undefined,
                    DecimalValue: undefined,
                    IntegerValue: undefined,
                    LongValue: undefined,
                    StringValue: undefined
                }
            }
        ]
    };
    // Setup mocks
    beforeAll(() => {
        core.initializeMockApp();
        jest.mock('@msdyn365-commerce/retail-proxy/dist/DataActions/CartsDataActions.g');
    });
    beforeEach(() => {
        jest.resetAllMocks();
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, cart) => {
            return Promise.resolve({
                Id: 'updatedCart',
            });
        });
    });
    it('updateCart returns FAILED if cart is undefined', async () => {
        const result = await updateCart(undefined, newCartObject, actionContext);
        expect(result.status).toBe('FAILED');
        expect(CartsDataActions.updateAsync).not.toBeCalled();
    });
    it('updateCart returns updateAsync result', async () => {
        const result = await updateCart({ Id: 'cart1' }, newCartObject, actionContext);
        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(expect.anything(), {
            Id: 'cart1',
            ...newCartObject
        });
        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart.Id).toEqual('updatedCart');
    });
    it('updateCart returns failure if updateAsync throws', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation(cb => {
            return Promise.reject(new Error('Fail'));
        });
        const result = await updateCart({ Id: 'cart1' }, newCartObject, actionContext);
        expect(CartsDataActions.updateAsync).toHaveBeenCalledWith(expect.anything(), {
            Id: 'cart1',
            ...newCartObject
        });
        expect(result.status).toBe('FAILED');
        expect(result.cart).toBeUndefined();
    });
    it('updateCart returns handles tsProxy typing error case', async () => {
        // @ts-ignore: Jest Mocking Confuses TS Complier
        CartsDataActions.updateAsync = jest.fn().mockImplementation((ctx, id, cartLineIds) => {
            return Promise.resolve({
                Id: 'updatedCart',
                ...newCartObject
            });
        });
        const result = await updateCart({ Id: 'cart1' }, newCartObject, actionContext);
        expect(CartsDataActions.updateAsync).toBeCalledWith(expect.anything(), {
            Id: 'cart1',
            ...newCartObject
        });
        expect(result.status).toBe('SUCCESS');
        expect(result.cart).not.toBeUndefined();
        expect(result.cart.Id).toEqual('updatedCart');
    });
});
//# sourceMappingURL=update-cart.test.js.map