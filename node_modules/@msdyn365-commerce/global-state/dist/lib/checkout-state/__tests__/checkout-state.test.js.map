{"version":3,"file":"checkout-state.test.js","sourceRoot":"./src/","sources":["checkout-state/__tests__/checkout-state.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport {\n    Address, AttributeValueBase, CommerceProperty, GiftCard, SalesOrder, TenderLine,\n    TokenizedPaymentCard\n} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport mockRequestContext from '../../__mocks__/request-context.json';\nimport getCheckoutCart from '../../data-actions/get-checkout-cart';\nimport { ICheckoutGenericData, IGiftCardExtend } from '../../state-interfaces';\nimport * as CheckoutCartState from '../base-checkout-cart-state';\nimport { BaseCheckoutState } from '../base-checkout-state';\nimport { CheckoutStorageKey } from '../checkout-state-storage';\nimport { Cart } from '@msdyn365-commerce/retail-proxy';\n\ndescribe('BaseCheckoutState', () => {\n    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });\n\n    // Setup mocks\n    beforeAll(() => {\n        core.initializeMockApp();\n\n        jest.mock('../base-checkout-cart-state');\n    });\n\n    beforeEach(() => {\n        jest.resetAllMocks();\n        // @ts-ignore\n        actionContext.requestContext.sessionStorage = {\n            setCheckoutCartData: jest.fn().mockResolvedValue({}),\n            getCheckoutCartData: jest.fn().mockResolvedValue(undefined),\n            removeCheckoutCartData: jest.fn().mockResolvedValue(undefined)\n        };\n    });\n\n    it('salesOrder and orderedProducts have default values and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.salesOrder).toEqual(undefined);\n        expect(checkoutState.orderedProducts).toEqual(undefined);\n\n        const mockSalesOrder: SalesOrder = {\n            Id: '0',\n            AttributeValues: [{ Name: 'attributeValues' }],\n            ExtensionProperties: [{ Key: 'key', Value: { StringValue: 'stringValue' } }]\n        };\n\n        checkoutState.updateSalesOrder({ newSalesOrder: mockSalesOrder, newOrderedProducts: [] });\n        expect(checkoutState.salesOrder).toEqual(mockSalesOrder);\n        expect(checkoutState.orderedProducts).toEqual([]);\n        expect(checkoutState.attributeValues).toEqual([{ Name: 'attributeValues' }]);\n        expect(checkoutState.extensionProperties).toEqual([{ Key: 'key', Value: { StringValue: 'stringValue' } }]);\n\n        const mockSalesOrder2: SalesOrder = {\n            Id: '0'\n        };\n\n        checkoutState.updateSalesOrder({ newSalesOrder: mockSalesOrder2, newOrderedProducts: [] });\n        expect(checkoutState.attributeValues).toEqual([]);\n        expect(checkoutState.extensionProperties).toEqual([]);\n    });\n\n    it('attributeValues have default values and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.attributeValues).toEqual([]);\n\n        const newAttributeValues: AttributeValueBase[] = [{ Name: 'attributeValues' }];\n\n        checkoutState.updateAttributeValues({ newAttributeValues: newAttributeValues });\n        expect(checkoutState.attributeValues).toEqual(newAttributeValues);\n    });\n\n    it('extensionProperties have default values and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.extensionProperties).toEqual([]);\n\n        const newExtensionProperties: CommerceProperty[] = [{ Key: 'key', Value: { StringValue: 'stringValue' } }];\n\n        checkoutState.updateExtensionProperties({ newExtensionProperties: newExtensionProperties });\n        expect(checkoutState.extensionProperties).toEqual(newExtensionProperties);\n    });\n\n    it('guestCheckoutEmail has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.guestCheckoutEmail).toEqual('');\n        checkoutState.updateGuestCheckoutEmail({ newGuestCheckoutEmail: 'example@test.com' });\n        expect(checkoutState.guestCheckoutEmail).toEqual('example@test.com');\n    });\n\n    it('guestCheckoutEmail has default value and saved in cart', async () => {\n\n        const cart: Cart = {\n            Id: 'c1',\n            ReceiptEmail: 'oldexample@test.com'\n        };\n\n        // @ts-ignore\n        getCheckoutCart = jest.fn().mockImplementation(cb => {\n            return cart;\n        });\n\n        const checkoutState = new BaseCheckoutState(actionContext);\n        await checkoutState.initialize();\n\n        checkoutState.checkoutCart.updateReceiptEmail = jest.fn().mockImplementation(cb => {\n            return Promise.resolve({ Id: 'c1', ReceiptEmail: 'example@test.com' });\n        });\n\n        await checkoutState.updateGuestCheckoutEmail({ newGuestCheckoutEmail: 'example@test.com', additionalProperties: { saveEmail: true } });\n\n        expect(getCheckoutCart).toBeCalled();\n        expect(checkoutState.checkoutCart.updateReceiptEmail).toBeCalled();\n        expect(checkoutState.guestCheckoutEmail).toEqual('example@test.com');\n    });\n\n    it('guestCheckoutEmail should not call updateReceiptEmail if same email set in cart', async () => {\n        const cart: Cart = {\n            Id: 'c1',\n            ReceiptEmail: 'example@test.com'\n        };\n\n        // @ts-ignore\n        getCheckoutCart = jest.fn().mockImplementation(cb => {\n            return cart;\n        });\n\n        const checkoutState = new BaseCheckoutState(actionContext);\n        await checkoutState.initialize();\n\n        checkoutState.checkoutCart.updateReceiptEmail = jest.fn().mockImplementation(cb => {\n            return Promise.resolve({ Id: 'c1', ReceiptEmail: 'example@test.com' });\n        });\n\n        await checkoutState.updateGuestCheckoutEmail({ newGuestCheckoutEmail: 'example@test.com', additionalProperties: { saveEmail: true } });\n\n        expect(checkoutState.checkoutCart.updateReceiptEmail).not.toBeCalled();\n        expect(checkoutState.guestCheckoutEmail).toEqual('example@test.com');\n    });\n\n    it('billingAddress has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newAddress: Address = {};\n\n        expect(checkoutState.billingAddress).toEqual(undefined);\n        checkoutState.updateBillingAddress({ newBillingAddress: newAddress });\n        expect(checkoutState.billingAddress).toEqual(newAddress);\n    });\n\n    it('isTermsAndConditionAccepted has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newIsTermsAndConditionAccepted = true;\n\n        expect(checkoutState.isTermsAndConditionAccepted).toEqual(undefined);\n        checkoutState.updateTermsAndConditionsAcceptance({ newIsTermsAndConditionAccepted: newIsTermsAndConditionAccepted });\n        expect(checkoutState.isTermsAndConditionAccepted).toEqual(newIsTermsAndConditionAccepted);\n    });\n\n    it('billingAddress with additional value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newAddress: Address = {};\n\n        expect(checkoutState.billingAddress).toEqual(undefined);\n        checkoutState.updateBillingAddress({ newBillingAddress: newAddress, additionalProperties: { isBillingAddressSameAsShippingAddress: true } });\n        expect(checkoutState.billingAddress).toEqual(newAddress);\n        expect(checkoutState.isBillingAddressSameAsShippingAddress).toEqual(true);\n    });\n\n    it('remove billingAddress', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newAddress: Address = {};\n\n        expect(checkoutState.billingAddress).toEqual(undefined);\n        checkoutState.updateBillingAddress({ newBillingAddress: newAddress, additionalProperties: { isBillingAddressSameAsShippingAddress: true } });\n        expect(checkoutState.billingAddress).toEqual(newAddress);\n        expect(checkoutState.isBillingAddressSameAsShippingAddress).toEqual(true);\n\n        checkoutState.removeBillingAddress({});\n        expect(checkoutState.billingAddress).toBeUndefined();\n        expect(checkoutState.isBillingAddressSameAsShippingAddress).toBeUndefined();\n    });\n\n    it('shippingAddress has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newAddress: Address = {};\n\n        expect(checkoutState.shippingAddress).toEqual(undefined);\n        checkoutState.updateShippingAddress({ newShippingAddress: newAddress });\n        expect(checkoutState.shippingAddress).toEqual(newAddress);\n    });\n\n    it('cardPrefix has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.cardPrefix).toEqual(undefined);\n        checkoutState.updateCardPrefix({ newCardPrefix: 'A1' });\n        expect(checkoutState.cardPrefix).toEqual('A1');\n    });\n\n    it('loyaltyAmount has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.loyaltyAmount).toEqual(0);\n        checkoutState.updateLoyaltyAmount({ newAmount: 9000 });\n        expect(checkoutState.loyaltyAmount).toEqual(9000);\n    });\n\n    it('loyaltyAmount rounds if fractional past two digits', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.loyaltyAmount).toEqual(0);\n        checkoutState.updateLoyaltyAmount({ newAmount: 123.4567 });\n        expect(checkoutState.loyaltyAmount).toEqual(123.46);\n    });\n\n    it('loyaltyCardNumber has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.loyaltyCardNumber).toEqual(undefined);\n        checkoutState.updateLoyaltyCardNumber({ newLoyaltyCardNumber: '10000000' });\n        expect(checkoutState.loyaltyCardNumber).toEqual('10000000');\n    });\n\n    it('tenderLine has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newTenderLine: TenderLine = {};\n\n        expect(checkoutState.tenderLine).toEqual(undefined);\n        checkoutState.updateTenderLine({ newTenderLine });\n        expect(checkoutState.tenderLine).toEqual(newTenderLine);\n    });\n\n    it('tokenizedPaymentCart has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newTokenizedPaymentCard: TokenizedPaymentCard = {};\n\n        expect(checkoutState.tokenizedPaymentCard).toEqual(undefined);\n        checkoutState.updateTokenizedPaymentCard({ newTokenizedPaymentCard });\n        expect(checkoutState.tokenizedPaymentCard).toEqual(newTokenizedPaymentCard);\n    });\n\n    it('tender type has default value and can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newPaymentTenderType: string = 'newPaymentTenderType';\n\n        expect(checkoutState.paymentTenderType).toEqual(undefined);\n        checkoutState.updatePaymentTenderType({ newPaymentTenderType });\n        expect(checkoutState.paymentTenderType).toEqual(newPaymentTenderType);\n    });\n\n    it('giftCards starts out as empty', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.giftCards).toEqual([]);\n    });\n\n    it('giftCards can be added', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newGiftCard: GiftCard = { Id: '1' };\n        checkoutState.addGiftCard({ giftCard: newGiftCard });\n        expect(checkoutState.giftCards).toContainEqual(newGiftCard);\n\n        const anotherNewGiftCard: GiftCard = { Id: '2' };\n        checkoutState.addGiftCard({ giftCard: anotherNewGiftCard });\n        expect(checkoutState.giftCards).toContainEqual(newGiftCard);\n        expect(checkoutState.giftCards).toContainEqual(anotherNewGiftCard);\n    });\n\n    it('giftCards can add extended gift card', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newGiftCard: IGiftCardExtend = { Id: '1', Pin: '1111', ExpirationDate: 'date-1', TenderTypeId: '12-1' };\n        checkoutState.addGiftCard({ giftCard: newGiftCard, additionalProperties: { Pin: '1111', ExpirationDate: 'date-1', TenderTypeId: '12-1' } });\n        expect(checkoutState.giftCardExtends).toContainEqual(newGiftCard);\n\n        const anotherNewGiftCard: IGiftCardExtend = { Id: '2', Pin: '2222', ExpirationDate: 'date-2', TenderTypeId: '12-2' };\n        checkoutState.addGiftCard({ giftCard: anotherNewGiftCard, additionalProperties: { Pin: '2222', ExpirationDate: 'date-2', TenderTypeId: '12-2' } });\n        expect(checkoutState.giftCardExtends).toContainEqual(newGiftCard);\n        expect(checkoutState.giftCardExtends).toContainEqual(anotherNewGiftCard);\n    });\n\n    it('giftCards can be removed', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const giftCard1: GiftCard = { Id: '1' };\n        const giftCard2: GiftCard = { Id: '2' };\n        const giftCard3: GiftCard = { Id: '3' };\n\n        // @ts-ignore: initializing test data\n        checkoutState['_giftCardExtends'] = [giftCard1, giftCard2, giftCard3, giftCard1];\n\n        checkoutState.removeGiftCard({ giftCardNumber: '1' });\n        checkoutState.removeGiftCard({ giftCardNumber: '2' });\n\n        expect(checkoutState.giftCards).not.toContainEqual(giftCard1);\n        expect(checkoutState.giftCards).not.toContainEqual(giftCard2);\n        expect(checkoutState.giftCards).toContainEqual(giftCard3);\n    });\n\n    it('giftCardExtended can added', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const newGiftCard: IGiftCardExtend = { Id: '1', Pin: '1111', ExpirationDate: 'date-1', TenderTypeId: '12-1' };\n        checkoutState.addGiftCardExtend({ giftCard: newGiftCard, additionalProperties: { Pin: '1111', ExpirationDate: 'date-1', TenderTypeId: '12-1' } });\n        expect(checkoutState.giftCardExtends).toContainEqual(newGiftCard);\n\n        const anotherNewGiftCard: IGiftCardExtend = { Id: '2', Pin: '2222', ExpirationDate: 'date-2', TenderTypeId: '12-2' };\n        checkoutState.addGiftCardExtend({ giftCard: anotherNewGiftCard, additionalProperties: { Pin: '2222', ExpirationDate: 'date-2', TenderTypeId: '12-2' } });\n        expect(checkoutState.giftCardExtends).toContainEqual(newGiftCard);\n        expect(checkoutState.giftCardExtends).toContainEqual(anotherNewGiftCard);\n    });\n\n    it('giftCardExtended can be removed', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        const giftCard1: GiftCard = { Id: '1' };\n        const giftCard2: GiftCard = { Id: '2' };\n        const giftCard3: GiftCard = { Id: '3' };\n\n        // @ts-ignore: initializing test data\n        checkoutState['_giftCardExtends'] = [giftCard1, giftCard2, giftCard3, giftCard1];\n\n        checkoutState.removeGiftCardExtend({ giftCardNumber: '1' });\n        checkoutState.removeGiftCardExtend({ giftCardNumber: '2' });\n\n        expect(checkoutState.giftCards).not.toContainEqual(giftCard1);\n        expect(checkoutState.giftCards).not.toContainEqual(giftCard2);\n        expect(checkoutState.giftCards).toContainEqual(giftCard3);\n    });\n\n    it('remove removeCheckoutCartId', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        actionContext.requestContext.cookies = {\n            // @ts-ignore\n            removeCheckoutCartCookie: jest.fn().mockResolvedValue(undefined)\n        };\n\n        checkoutState.removeCheckoutCartId({});\n\n        // @ts-ignore\n        expect(actionContext.requestContext.cookies.removeCheckoutCartCookie).toBeCalled();\n    });\n\n    it('save DataInStorage', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n        const newAddress: Address = {};\n        const giftCard1: IGiftCardExtend = { Id: '1' };\n        const loyaltyCardNumber: string = '10000000';\n        const loyaltyAmount: number = 123;\n        const checkoutGenericData: ICheckoutGenericData = { Data: 'data', SaveDataBeforeRedirect: true };\n        const isTermsAndConditionAccepted: boolean = true;\n        const paymentTenderType: string = 'testTender';\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        actionContext.requestContext.sessionStorage = {\n            setCheckoutCartData: jest.fn().mockResolvedValue(undefined)\n        };\n\n        checkoutState.updateBillingAddress({ newBillingAddress: newAddress });\n        checkoutState.addGiftCard({ giftCard: giftCard1 });\n        checkoutState.updateLoyaltyCardNumber({ newLoyaltyCardNumber: loyaltyCardNumber });\n        checkoutState.updateLoyaltyAmount({ newAmount: loyaltyAmount });\n        checkoutState.setCheckoutGenericData({ key: 'key', checkoutGenericData: checkoutGenericData });\n        checkoutState.updateTermsAndConditionsAcceptance({ newIsTermsAndConditionAccepted: isTermsAndConditionAccepted });\n        checkoutState.updatePaymentTenderType({ newPaymentTenderType: paymentTenderType });\n        checkoutState.saveDataInStorage({});\n\n\n        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).toBeCalled();\n        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).toBeCalledTimes(7);\n    });\n\n    it('save DataInStorage in storage should not save empty data', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        actionContext.requestContext.sessionStorage = {\n            setCheckoutCartData: jest.fn().mockResolvedValue(undefined)\n        };\n\n        checkoutState.saveDataInStorage({});\n\n        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).not.toBeCalled();\n    });\n\n    it('checkoutGenericData can be updated', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.getCheckoutGenericData({ key: 'key' })).toBe(undefined);\n        checkoutState.setCheckoutGenericData({ key: 'key', checkoutGenericData: { Data: { name: 'generic data' } } });\n        expect(checkoutState.getCheckoutGenericData({ key: 'key' })).toEqual({ Data: { name: 'generic data' } });\n    });\n\n    it('save checkoutData without SaveDataBeforeRedirect', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n        const checkoutGenericData: ICheckoutGenericData = {\n            Data: {},\n            SaveDataBeforeRedirect: false\n        };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        actionContext.requestContext.sessionStorage = {\n            setCheckoutCartData: jest.fn().mockResolvedValue(undefined)\n        };\n\n        checkoutState.setCheckoutGenericData({ key: 'key', checkoutGenericData: checkoutGenericData });\n        checkoutState.saveDataInStorage({});\n\n        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).not.toBeCalled();\n    });\n\n    it('save checkoutData with SaveDataBeforeRedirect', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n        const checkoutGenericData: ICheckoutGenericData = {\n            Data: {},\n            SaveDataBeforeRedirect: true\n        };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        actionContext.requestContext.sessionStorage = {\n            setCheckoutCartData: jest.fn().mockResolvedValue(undefined)\n        };\n\n        checkoutState.setCheckoutGenericData({ key: 'key', checkoutGenericData: checkoutGenericData });\n        checkoutState.saveDataInStorage({});\n\n        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).toBeCalled();\n        expect(actionContext.requestContext.sessionStorage.setCheckoutCartData).toBeCalledTimes(1);\n    });\n\n    it('set setInitialData', async () => {\n        const newAddress: Address = {};\n        const isBillingAddressSameAsShippingAddress: boolean = true;\n        const giftCard1: IGiftCardExtend = { Id: '1' };\n        const loyaltyCardNumber: string = '10000000';\n        const loyaltyAmount: number = 123;\n        const checkoutGenericData: ICheckoutGenericData = { Data: {} };\n\n        const newAddressStoredData: object = { billingAddress: newAddress, isBillingAddressSameAsShippingAddress: isBillingAddressSameAsShippingAddress };\n        const giftCardStoredData: object = [giftCard1];\n        const loyaltyCardNumberStoredData: object = { loyaltyCardNumber: loyaltyCardNumber };\n        const loyaltyAmountStoredData: object = { loyaltyAmount: loyaltyAmount };\n        const checkoutStoredData: object = { checkoutData: checkoutGenericData };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        actionContext.requestContext = {\n            requestFormData: {},\n            query: {\n                pv: '1'\n            },\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            sessionStorage: {\n                setCheckoutCartData: jest.fn((key) => {\n                    switch (key) {\n                        case CheckoutStorageKey.BillingAddress:\n                            return newAddressStoredData;\n                        case CheckoutStorageKey.GiftCard:\n                            return giftCardStoredData;\n                        case CheckoutStorageKey.LoyaltyCardNumber:\n                            return loyaltyCardNumberStoredData;\n                        case CheckoutStorageKey.LoyaltyAmount:\n                            return loyaltyAmountStoredData;\n                        case CheckoutStorageKey.CheckoutGenericData:\n                            return checkoutStoredData;\n                    }\n\n                    return undefined;\n                }),\n                getCheckoutCartData: jest.fn((key: string) => {\n                    switch (key) {\n                        case CheckoutStorageKey.BillingAddress:\n                            return newAddressStoredData;\n                        case CheckoutStorageKey.GiftCard:\n                            return giftCardStoredData;\n                        case CheckoutStorageKey.LoyaltyCardNumber:\n                            return loyaltyCardNumberStoredData;\n                        case CheckoutStorageKey.LoyaltyAmount:\n                            return loyaltyAmountStoredData;\n                    }\n                    return {}\n                }),\n                removeCheckoutCartData: jest.fn().mockResolvedValue(undefined)\n            }\n        };\n\n        const checkoutState = new BaseCheckoutState(actionContext);\n        await checkoutState.initialize();\n\n        expect(checkoutState.billingAddress).toStrictEqual(newAddress);\n        expect(checkoutState.isBillingAddressSameAsShippingAddress).toBe(isBillingAddressSameAsShippingAddress);\n        expect(checkoutState.giftCardExtends.length).toBe(1);\n        expect(checkoutState.loyaltyCardNumber).toBe(loyaltyCardNumber);\n        expect(checkoutState.loyaltyAmount).toBe(loyaltyAmount);\n\n        expect(actionContext.requestContext.sessionStorage.removeCheckoutCartData).toBeCalledTimes(1);\n    });\n\n    it('set setInitialData without giftcard', async () => {\n        const newAddress: Address = {};\n        const isBillingAddressSameAsShippingAddress: boolean = true;\n        const loyaltyCardNumber: string = '10000000';\n        const loyaltyAmount: number = 123;\n        const checkoutGenericData: ICheckoutGenericData = { Data: {} };\n\n        const newAddressStoredData: object = { billingAddress: newAddress, isBillingAddressSameAsShippingAddress: isBillingAddressSameAsShippingAddress };\n        const loyaltyCardNumberStoredData: object = { loyaltyCardNumber: loyaltyCardNumber };\n        const loyaltyAmountStoredData: object = { loyaltyAmount: loyaltyAmount };\n        const checkoutStoredData: object = { checkoutData: checkoutGenericData };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        actionContext.requestContext = {\n            requestFormData: {},\n            query: {\n                pv: '1'\n            },\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            sessionStorage: {\n                getCheckoutCartData: jest.fn((key) => {\n                    switch (key) {\n                        case CheckoutStorageKey.BillingAddress:\n                            return newAddressStoredData;\n                        case CheckoutStorageKey.GiftCard:\n                            return {};\n                        case CheckoutStorageKey.LoyaltyCardNumber:\n                            return loyaltyCardNumberStoredData;\n                        case CheckoutStorageKey.LoyaltyAmount:\n                            return loyaltyAmountStoredData;\n                        case CheckoutStorageKey.CheckoutGenericData:\n                            return checkoutStoredData;\n                    }\n\n                    return {};\n                }),\n                removeCheckoutCartData: jest.fn().mockResolvedValue(undefined)\n            }\n        };\n\n        const checkoutState = new BaseCheckoutState(actionContext);\n        await checkoutState.initialize();\n\n        expect(checkoutState.billingAddress).toStrictEqual(newAddress);\n        expect(checkoutState.isBillingAddressSameAsShippingAddress).toBe(isBillingAddressSameAsShippingAddress);\n        expect(checkoutState.giftCardExtends.length).toBe(0);\n        expect(checkoutState.loyaltyCardNumber).toBe(loyaltyCardNumber);\n        expect(checkoutState.loyaltyAmount).toBe(loyaltyAmount);\n\n        expect(actionContext.requestContext.sessionStorage.removeCheckoutCartData).toBeCalledTimes(1);\n    });\n\n    it('Initializes the checkout cart state', async () => {\n        let isInitialized: boolean = false;\n\n        // @ts-ignore\n        CheckoutCartState.BaseCheckoutCartState = jest.fn().mockImplementation(() => {\n            return {\n                initialize: () => isInitialized = true\n            };\n        });\n\n        const checkoutState = new BaseCheckoutState(actionContext);\n        await checkoutState.initialize();\n\n        expect(isInitialized).toBe(true);\n        expect(checkoutState.status).toBe('READY');\n        expect(checkoutState.checkoutCart).toBeDefined();\n    });\n\n    it('No-ops after first initializes call', async () => {\n        let timesInitializeCalled: number = 0;\n\n        // @ts-ignore\n        CheckoutCartState.BaseCheckoutCartState = jest.fn().mockImplementation(() => {\n            return {\n                initialize: () => timesInitializeCalled++\n            };\n        });\n\n        const checkoutState = new BaseCheckoutState(actionContext);\n        await checkoutState.initialize();\n        await checkoutState.initialize();\n\n        expect(timesInitializeCalled).toBe(1);\n        expect(checkoutState.status).toBe('READY');\n        expect(checkoutState.checkoutCart).toBeDefined();\n    });\n\n    it('update customerAccountAmount updates the amount', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.customerAccountAmount).toEqual(0);\n        checkoutState.updateCustomerAccountAmount({ newAmount: 1537 });\n        expect(checkoutState.customerAccountAmount).toEqual(1537);\n    });\n\n    it('update customerAccountAmount rounds two digits', () => {\n        const checkoutState = new BaseCheckoutState(actionContext);\n\n        expect(checkoutState.customerAccountAmount).toEqual(0);\n        checkoutState.updateCustomerAccountAmount({ newAmount: 867.5309 });\n        expect(checkoutState.customerAccountAmount).toEqual(867.53);\n    });\n});"]}