{"version":3,"file":"base-checkout-cart-state.test.js","sourceRoot":"./src/","sources":["checkout-state/__tests__/base-checkout-cart-state.test.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,CAAC;AAEd,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,kBAAkB,MAAM,sCAAsC,CAAC;AACtE,OAAO,eAAe,MAAM,sCAAsC,CAAC;AACnE,OAAO,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAC;AAEpE,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC9B,MAAM,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,EAAE,cAAc,EAAkC,kBAAmB,EAAE,CAAC,CAAC;IAE3H,cAAc;IACd,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACZ,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QACzD,aAAa;QACb,eAAe,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE;YAChD,OAAO,SAAS,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,aAAa,CAAC,CAAC;QAE3D,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;QAE7B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvC,MAAM,CAAC,eAAe,CAAC,CAAC,UAAU,EAAE,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAS;YACf,EAAE,EAAE,sBAAsB;SAC7B,CAAC;QAEF,aAAa;QACb,eAAe,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE;YAChD,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,aAAa,CAAC,CAAC;QAE3D,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;QAE7B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxC,MAAM,CAAC,eAAe,CAAC,CAAC,UAAU,EAAE,CAAC;QACrC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,IAAI,GAAS;YACf,EAAE,EAAE,sBAAsB;SAC7B,CAAC;QAEF,aAAa;QACb,eAAe,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE;YAChD,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,aAAa,CAAC,CAAC;QAE3D,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;QAE7B,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxC,MAAM,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import 'jest';\n\nimport * as core from '@msdyn365-commerce/core';\nimport { Cart } from '@msdyn365-commerce/retail-proxy';\nimport mockRequestContext from '../../__mocks__/request-context.json';\nimport getCheckoutCart from '../../data-actions/get-checkout-cart';\nimport { BaseCheckoutCartState } from '../base-checkout-cart-state';\n\ndescribe('initialize tests', () => {\n    const actionContext = core.buildMockActionContext({ requestContext: <core.IRequestContext>(<unknown>mockRequestContext) });\n\n    // Setup mocks\n    beforeAll(() => {\n        core.initializeMockApp();\n\n        jest.mock('../../data-actions/get-checkout-cart');\n    });\n\n    beforeEach(() => {\n        jest.resetAllMocks();\n    });\n\n    it('Goes into error state if getting cart fails', async () => {\n        // @ts-ignore\n        getCheckoutCart = jest.fn().mockImplementation(cb => {\n            return undefined;\n        });\n\n        const cartState = new BaseCheckoutCartState(actionContext);\n\n        await cartState.initialize();\n\n        expect(cartState.status).toBe('ERROR');\n        expect(getCheckoutCart).toBeCalled();\n    });\n\n    it('Calls get or create active cart', async () => {\n        const cart: Cart = {\n            Id: 'mockCart_refreshCart'\n        };\n\n        // @ts-ignore\n        getCheckoutCart = jest.fn().mockImplementation(cb => {\n            return cart;\n        });\n\n        const cartState = new BaseCheckoutCartState(actionContext);\n\n        await cartState.initialize();\n\n        expect(cartState.cart.Id).toBe(cart.Id);\n        expect(getCheckoutCart).toBeCalled();\n        expect(cartState.status).toBe('READY');\n    });\n\n    it('Doesn\\'t update  after multiple calls', async () => {\n        const cart: Cart = {\n            Id: 'mockCart_refreshCart'\n        };\n\n        // @ts-ignore\n        getCheckoutCart = jest.fn().mockImplementation(cb => {\n            return cart;\n        });\n\n        const cartState = new BaseCheckoutCartState(actionContext);\n\n        await cartState.initialize();\n\n        await cartState.initialize();\n        expect(cartState.cart.Id).toBe(cart.Id);\n        expect(getCheckoutCart).toBeCalledTimes(1);\n        expect(cartState.status).toBe('READY');\n    });\n});"]}