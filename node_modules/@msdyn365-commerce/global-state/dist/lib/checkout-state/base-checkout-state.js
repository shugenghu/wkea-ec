import { __decorate } from "tslib";
import get from 'lodash/get';
import { action, computed, observable } from 'mobx';
import { GlobalState } from '../global-state/global-state';
import { BaseCheckoutCartState } from './base-checkout-cart-state';
import { CheckoutStorageKey } from './checkout-state-storage';
/**
 * State information related to what is needed to succesfully perform a checkout
 */
export class BaseCheckoutState extends GlobalState {
    constructor(actionContext) {
        super(actionContext);
        this._giftCardExtends = [];
        this._loyaltyAmount = 0;
        this._guestCheckoutEmail = '';
        this._customerAccountAmount = 0;
        this._checkoutGenericData = {};
        this._checkoutCart = new BaseCheckoutCartState(actionContext);
        this._attributeValues = [];
        this._extensionProperties = [];
    }
    get checkoutCart() {
        return this._checkoutCart;
    }
    get salesOrder() {
        return this._salesOrder;
    }
    get attributeValues() {
        return this._attributeValues;
    }
    get extensionProperties() {
        return this._extensionProperties;
    }
    get orderedProducts() {
        return this._orderedProducts;
    }
    get tokenizedPaymentCard() {
        return this._tokenizedPaymentCard;
    }
    get tenderLine() {
        return this._tenderLine;
    }
    get billingAddress() {
        return this._billingAddress;
    }
    get isBillingAddressSameAsShippingAddress() {
        return this._isBillingAddressSameAsShippingAddress;
    }
    get shippingAddress() {
        return this._shippingAddress;
    }
    get cardPrefix() {
        return this._cardPrefix;
    }
    get paymentTenderType() {
        return this._paymentTenderType;
    }
    /**
     * @deprecated Use giftCardExtends method
     */
    get giftCards() {
        return this.giftCardExtends;
    }
    get giftCardExtends() {
        return this._giftCardExtends;
    }
    get loyaltyCardNumber() {
        return this._loyaltyCardNumber;
    }
    get loyaltyAmount() {
        return this._loyaltyAmount;
    }
    get guestCheckoutEmail() {
        return this._guestCheckoutEmail;
    }
    get isTermsAndConditionAccepted() {
        return this._isTermsAndConditionAccepted;
    }
    get customerAccountAmount() {
        return this._customerAccountAmount;
    }
    async initialize() {
        if (this.isInitialized) {
            return;
        }
        await this._checkoutCart.initialize();
        this.setInitialData();
        this.isInitialized = true;
        this._status = 'READY';
        this._attributeValues = [];
        this._extensionProperties = [];
    }
    updateSalesOrder(input) {
        this._salesOrder = input.newSalesOrder;
        this._orderedProducts = input.newOrderedProducts;
        this._attributeValues = input.newSalesOrder.AttributeValues || [];
        this._extensionProperties = input.newSalesOrder.ExtensionProperties || [];
        return Promise.resolve({ status: 'SUCCESS' });
    }
    async updateAttributeValues(input) {
        this._attributeValues = input.newAttributeValues;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    async updateExtensionProperties(input) {
        this._extensionProperties = input.newExtensionProperties;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    updateTokenizedPaymentCard(input) {
        this._tokenizedPaymentCard = input.newTokenizedPaymentCard;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    updateTenderLine(input) {
        this._tenderLine = input.newTenderLine;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    async updateShippingAddress(input) {
        this._shippingAddress = input.newShippingAddress;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    async updateTermsAndConditionsAcceptance(input) {
        this._isTermsAndConditionAccepted = input.newIsTermsAndConditionAccepted;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    updateBillingAddress(input) {
        this._billingAddress = input.newBillingAddress;
        // @ts-ignore
        this._isBillingAddressSameAsShippingAddress = input.additionalProperties?.isBillingAddressSameAsShippingAddress || false;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    removeBillingAddress(input) {
        this._billingAddress = undefined;
        this._isBillingAddressSameAsShippingAddress = undefined;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    updatePaymentTenderType(input) {
        this._paymentTenderType = input.newPaymentTenderType;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    updateCardPrefix(input) {
        this._cardPrefix = input.newCardPrefix;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    removeGiftCard(input) {
        this._giftCardExtends = this._giftCardExtends.filter(giftCard => giftCard.Id !== input.giftCardNumber);
        return Promise.resolve({ status: 'SUCCESS' });
    }
    removeGiftCardExtend(input) {
        this._giftCardExtends = this._giftCardExtends.filter(giftCard => giftCard.Id !== input.giftCardNumber);
        return Promise.resolve({ status: 'SUCCESS' });
    }
    addGiftCard(input) {
        // @ts-ignore
        const { Pin, ExpirationDate, TenderTypeId } = input.additionalProperties || {};
        const gitCardExtend = { ...input.giftCard, ...{ Pin, ExpirationDate, TenderTypeId } };
        this._giftCardExtends = [gitCardExtend, ...this._giftCardExtends];
        return Promise.resolve({ status: 'SUCCESS' });
    }
    addGiftCardExtend(input) {
        this._giftCardExtends = [input.giftCard, ...this._giftCardExtends];
        return Promise.resolve({ status: 'SUCCESS' });
    }
    updateLoyaltyCardNumber(input) {
        this._loyaltyCardNumber = input.newLoyaltyCardNumber;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    updateLoyaltyAmount(input) {
        this._loyaltyAmount = Number(input.newAmount.toFixed(2));
        return Promise.resolve({ status: 'SUCCESS' });
    }
    async updateGuestCheckoutEmail(input) {
        this._guestCheckoutEmail = input.newGuestCheckoutEmail;
        const emailOnCart = this.checkoutCart.cart.ReceiptEmail;
        if (emailOnCart !== input.newGuestCheckoutEmail) {
            await this.checkoutCart.updateReceiptEmail({ newEmail: input.newGuestCheckoutEmail });
        }
        return Promise.resolve({ status: 'SUCCESS' });
    }
    removeCheckoutCartId(input) {
        //@ts-ignore
        this.actionContext.requestContext.cookies.removeCheckoutCartCookie();
        return Promise.resolve({ status: 'SUCCESS' });
    }
    saveDataInStorage(input) {
        const { sessionStorage } = this.actionContext.requestContext;
        // Add all local data to session storage
        if (this.billingAddress) {
            sessionStorage.setCheckoutCartData(CheckoutStorageKey.BillingAddress, { billingAddress: this.billingAddress, isBillingAddressSameAsShippingAddress: this.isBillingAddressSameAsShippingAddress });
        }
        if (this.giftCardExtends && this.giftCardExtends.length > 0) {
            sessionStorage.setCheckoutCartData(CheckoutStorageKey.GiftCard, this.giftCardExtends);
        }
        if (this.loyaltyCardNumber) {
            sessionStorage.setCheckoutCartData(CheckoutStorageKey.LoyaltyCardNumber, { loyaltyCardNumber: this.loyaltyCardNumber });
        }
        if (this.loyaltyAmount) {
            sessionStorage.setCheckoutCartData(CheckoutStorageKey.LoyaltyAmount, { loyaltyAmount: this.loyaltyAmount });
        }
        if (this.isTermsAndConditionAccepted) {
            sessionStorage.setCheckoutCartData(CheckoutStorageKey.TermsAndCondition, { isTermsAndConditionAccepted: this.isTermsAndConditionAccepted });
        }
        if (this.paymentTenderType) {
            sessionStorage.setCheckoutCartData(CheckoutStorageKey.PaymentTenderType, { paymentTenderType: this.paymentTenderType });
        }
        // save generic data with SaveDataBeforeRedirect value true
        const filtered = Object.keys(this._checkoutGenericData).reduce((filteredData, key) => {
            if (this._checkoutGenericData[key].SaveDataBeforeRedirect) {
                filteredData[key] = this._checkoutGenericData[key];
            }
            return filteredData;
        }, {});
        if (Object.keys(filtered).length > 0) {
            sessionStorage.setCheckoutCartData(CheckoutStorageKey.CheckoutGenericData, { checkoutGenericData: filtered });
        }
        return Promise.resolve({ status: 'SUCCESS' });
    }
    updateCustomerAccountAmount(input) {
        this._customerAccountAmount = Number(input.newAmount.toFixed(2));
        return Promise.resolve({ status: 'SUCCESS' });
    }
    setCheckoutGenericData(input) {
        this._checkoutGenericData[input.key] = input.checkoutGenericData;
        return Promise.resolve({ status: 'SUCCESS' });
    }
    getCheckoutGenericData(input) {
        return this._checkoutGenericData[input.key];
    }
    cleanCheckoutData(input) {
        this.actionContext.requestContext.sessionStorage.removeCheckoutCartData();
        return Promise.resolve({ status: 'SUCCESS' });
    }
    isPaymentVerificationRedirection() {
        const { requestFormData, query } = this.actionContext.requestContext;
        return (requestFormData && query && query.pv === '1') ? true : false;
    }
    setInitialData() {
        const { sessionStorage } = this.actionContext.requestContext;
        if (this.isPaymentVerificationRedirection()) {
            const billingAddress = sessionStorage.getCheckoutCartData(CheckoutStorageKey.BillingAddress);
            const giftCard = sessionStorage.getCheckoutCartData(CheckoutStorageKey.GiftCard);
            this._billingAddress = get(billingAddress, 'billingAddress');
            this._isBillingAddressSameAsShippingAddress = get(billingAddress, 'isBillingAddressSameAsShippingAddress');
            this._giftCardExtends = (giftCard && Array.isArray(giftCard) ? giftCard : []);
            this._loyaltyCardNumber = get(sessionStorage.getCheckoutCartData(CheckoutStorageKey.LoyaltyCardNumber), 'loyaltyCardNumber');
            this._loyaltyAmount = get(sessionStorage.getCheckoutCartData(CheckoutStorageKey.LoyaltyAmount), 'loyaltyAmount');
            this._isTermsAndConditionAccepted = get(sessionStorage.getCheckoutCartData(CheckoutStorageKey.TermsAndCondition), 'isTermsAndConditionAccepted');
            this._checkoutGenericData = get(sessionStorage.getCheckoutCartData(CheckoutStorageKey.CheckoutGenericData), 'checkoutGenericData') || {};
            this._paymentTenderType = get(sessionStorage.getCheckoutCartData(CheckoutStorageKey.PaymentTenderType), 'paymentTenderType');
        }
        this.cleanCheckoutData({});
    }
}
__decorate([
    observable
], BaseCheckoutState.prototype, "_checkoutCart", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "checkoutCart", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_salesOrder", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "salesOrder", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_attributeValues", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "attributeValues", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_extensionProperties", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "extensionProperties", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_orderedProducts", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "orderedProducts", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_tokenizedPaymentCard", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "tokenizedPaymentCard", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_tenderLine", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "tenderLine", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_billingAddress", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "billingAddress", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_isBillingAddressSameAsShippingAddress", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "isBillingAddressSameAsShippingAddress", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_shippingAddress", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "shippingAddress", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_cardPrefix", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "cardPrefix", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_paymentTenderType", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "paymentTenderType", null);
__decorate([
    computed
], BaseCheckoutState.prototype, "giftCards", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_giftCardExtends", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "giftCardExtends", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_loyaltyCardNumber", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "loyaltyCardNumber", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_loyaltyAmount", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "loyaltyAmount", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_guestCheckoutEmail", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "guestCheckoutEmail", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_isTermsAndConditionAccepted", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "isTermsAndConditionAccepted", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_customerAccountAmount", void 0);
__decorate([
    computed
], BaseCheckoutState.prototype, "customerAccountAmount", null);
__decorate([
    observable
], BaseCheckoutState.prototype, "_checkoutGenericData", void 0);
__decorate([
    action
], BaseCheckoutState.prototype, "updateSalesOrder", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateAttributeValues", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateExtensionProperties", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateTokenizedPaymentCard", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateTenderLine", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateShippingAddress", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateTermsAndConditionsAcceptance", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateBillingAddress", null);
__decorate([
    action
], BaseCheckoutState.prototype, "removeBillingAddress", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updatePaymentTenderType", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateCardPrefix", null);
__decorate([
    action
], BaseCheckoutState.prototype, "removeGiftCard", null);
__decorate([
    action
], BaseCheckoutState.prototype, "removeGiftCardExtend", null);
__decorate([
    action
], BaseCheckoutState.prototype, "addGiftCard", null);
__decorate([
    action
], BaseCheckoutState.prototype, "addGiftCardExtend", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateLoyaltyCardNumber", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateLoyaltyAmount", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateGuestCheckoutEmail", null);
__decorate([
    action
], BaseCheckoutState.prototype, "removeCheckoutCartId", null);
__decorate([
    action
], BaseCheckoutState.prototype, "saveDataInStorage", null);
__decorate([
    action
], BaseCheckoutState.prototype, "updateCustomerAccountAmount", null);
__decorate([
    action
], BaseCheckoutState.prototype, "setCheckoutGenericData", null);
__decorate([
    action
], BaseCheckoutState.prototype, "getCheckoutGenericData", null);
__decorate([
    action
], BaseCheckoutState.prototype, "cleanCheckoutData", null);
//# sourceMappingURL=base-checkout-state.js.map