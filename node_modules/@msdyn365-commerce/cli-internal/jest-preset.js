/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

const fs = require('fs');
const path = require('path');
const _ = require('lodash');

const jestConfigFilePath = path.resolve('.', 'jest.partial.js');
let config = {};

if (fs.existsSync(jestConfigFilePath)) {
    try {
        config = require(jestConfigFilePath);
        console.log(`Merging jest config file with one located at ${jestConfigFilePath}`);
    } catch (e) {
        console.log(`Could not successfully read local jest config file for merging`);
    }
}

const options = {
    collectCoverage: true,
    collectCoverageFrom: [
        // include all js(x) & ts(x)
        'src/**/*.{js,jsx,ts,tsx}',
        // exclude test files themselves
        '!src/**/*.test.{js,jsx,ts,tsx}',
        // exclude node_modules
        '!node_modules/**'
    ],
    coverageReporters: ['cobertura', 'html'],
    moduleNameMapper: {
        '\\.(css|less|scss|sass)$': 'identity-obj-proxy'
    },
    moduleFileExtensions: ['ts', 'tsx', 'js', 'json'],
    reporters: ['default', 'jest-junit'],
    testMatch: [
        '<rootDir>/__tests__/**/*.(ts|js)?(x)',
        '<rootDir>/src/**/__tests__/**/*.(ts|js)?(x)',
        '<rootDir>/src/**/*.(spec|test).(ts|js)?(x)'
    ],
    testPathIgnorePatterns: ['/node_modules/', 'snapshot', 'testresult', '.disabled.ts', 'mock-definitions'],
    transform: {
        '^.+\\.(js|jsx|ts|tsx)$': 'ts-jest'
    },
    modulePathIgnorePatterns: ['<rootDir>/.*/__mocks__'],
    transformIgnorePatterns: ['/node_modules/(?!@msdyn365-commerce)', '/node_modules/(?!react-ts-strap)/'],
    setupFiles: [path.join(__dirname, 'jest.setup.appinsights')],
    globals: {
        'ts-jest': {
            isolatedModules: true,
            tsConfig: {
                allowJs: true,
                target: 'es5'
            }
        }
    }
};

// concat arrays
const customizer = (objValue, srcValue) => {
    if (_.isArray(objValue)) {
        return objValue.concat(srcValue);
    }
};

module.exports = _.mergeWith(options, config, customizer);
