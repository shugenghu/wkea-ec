#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const fs = require("fs-extra");
const logSymbols = require("log-symbols");
const path = require("path");
const yargs = require("yargs");
const add_component_override_1 = require("./scripts/add-component-override");
const add_data_action_1 = require("./scripts/add-data-action");
const add_module_1 = require("./scripts/add-module");
const add_theme_1 = require("./scripts/add-theme");
const add_view_extension_1 = require("./scripts/add-view-extension");
const copy_module_1 = require("./scripts/copy-module");
const generate_resources_1 = require("./scripts/generate-resources");
const pack_1 = require("./scripts/pack");
const print_package_versions_1 = require("./scripts/print-package-versions");
const update_versions_1 = require("./scripts/update-versions");
const validation_station_1 = require("./scripts/validation-station");
/**
 * Checks to make sure the number of arguments to a command does not exceed the required amount
 *
 * @param argv An containing the command and any extra arguments. A length greater than 1 signifies
 * that extra arguments were passed to this command
 */
function checkExtraArguments(args, maxNumber = 1) {
    if (args.length > maxNumber) {
        utilities_internal_1.trace.error('Too many arguments provided. See example usage below.');
        yargs.showHelp();
    }
}
const getCLIVersion = () => {
    const packageJson = fs.readJSONSync(path.resolve(__dirname, '..', 'package.json'));
    return packageJson.version;
};
// Parses the CLI command and executes the correct script
utilities_internal_1.trace.info(`Running MSDyn365 CLI Version ${getCLIVersion()}`);
const yargsCLI = yargs
    .usage('usage: yarn msdyn365 <command>')
    // CLONE MODULE COMMAND
    .command('clone [starterPackModuleName] [newModuleName] [--listmodules]', `Creates a renamed clone of a starter-pack module's view source code in you environment\n`, (params) => {
    return params
        .positional('starterPackModuleName', {
        describe: 'The name of the starter pack module'
    })
        .positional('newModuleName', {
        describe: 'The new name to clone the starter pack module as. The module name must be unique across local and installed modules.'
    })
        .positional('--listmodules', {
        describe: 'Lists the modules currently available for modification'
    })
        .example('yarn msdyn365 clone hello-world my-hello-world\nyarn msdyn365 clone hero hero-2\nyarn msdyn365 clone --listmodules', '')
        .usage('usage: yarn msdyn365 clone <starterPackModuleName> <newModuleName> or yarn msdyn365 clone --listmodules to see a list of available modules to clone');
}, (args) => {
    if (args.starterPackModuleName && args.listmodules) {
        utilities_internal_1.trace.error('Cannot provide the name and --listmodules option at the same time');
        yargs.showHelp();
    }
    else if (args.starterPackModuleName && args.newModuleName) {
        copy_module_1.default(args);
    }
    else if (args.listmodules) {
        copy_module_1.default(args);
    }
    else {
        utilities_internal_1.trace.error('You must either provide the name of the module you want to clone or choose to display a list of modules availble for cloning.');
        yargs.showHelp();
    }
})
    // UPDATE-VERSIONS COMMAND
    .command('update-versions <entity> [--no-resolutions] [--dry-run]', 'updates either the SDK, SSK or retail-proxy version to the latest version\n', (params) => {
    return params
        .positional('entity', {
        describe: 'The entity that you wish to update to the latest available version'
    })
        .positional('resolutions', {
        describe: 'Use --no-resolutions to disable setting dependency resolutions to the latest version.'
    })
        .positional('dry-run', {
        describe: 'Use --dry-run to output information about the latest version without actually updating to that version.'
    })
        .example('yarn msdyn365 update-versions retail-proxy', 'updates retail-proxy to the latest version')
        .example('yarn msdyn365 update-versions ssk', 'updates store starter-kit (ssk) to the latest version')
        .example('yarn msdyn365 update-versions sdk', 'updates sdk to the latest version')
        .usage('usage: yarn msdyn365 update-versions <entity>');
}, (args) => {
    checkExtraArguments(args._);
    update_versions_1.default(args.entity, args.resolutions, args['dry-run'])
        .then((version) => {
        utilities_internal_1.trace.info(`=====================================================================`);
        utilities_internal_1.trace.info(`COMMAND SUMMARY: `);
        if (args['dry-run']) {
            utilities_internal_1.trace.info(`\t${logSymbols.success} Running with --dry-run, versions have not been updated.`);
        }
        else {
            utilities_internal_1.trace.info(`\t${logSymbols.success} Updated ${args.entity} to version ${version}`);
            if (args.resolutions) {
                utilities_internal_1.trace.info(`\t${logSymbols.success} Set resolutions in package.json`);
            }
        }
        utilities_internal_1.trace.info(`Command completed successfully!`);
    })
        .catch(error => {
        utilities_internal_1.trace.info(`=====================================================================`);
        utilities_internal_1.trace.info(`COMMAND SUMMARY: `);
        utilities_internal_1.trace.info(`\t${logSymbols.error} Unable to update versions. Error ${error}}`);
        utilities_internal_1.trace.info(`Command encountered errors. See above.`);
    });
})
    // ADD-DATA-ACTION COMMAND
    .command('add-data-action <actionName>', 'Creates a template action with the given name in the project\n', (params) => {
    return params
        .positional('actionName', {
        describe: 'The name of the data action'
    })
        .example('yarn msdyn365 add-data-action get-cart', '')
        .usage('usage: yarn msdyn365 add-data-action <actionName>');
}, (args) => {
    checkExtraArguments(args._);
    add_data_action_1.default(args.actionName);
})
    // VALIDATE PACKAGE COMMAND
    .command('validate <path>', 'Runs a series of validation checks on your package and/or module\n', (params) => {
    return params
        .positional('path', {
        describe: 'The path to /packages or your package to validate'
    })
        .example('yarn msdyn365 validate ./', '')
        .usage('usage: yarn msdyn365 validate <path>');
}, (args) => {
    checkExtraArguments(args._);
    const givenPath = path.resolve(path.join(args.path));
    const basename = path.basename(givenPath);
    let promise;
    if (basename === 'packages') {
        promise = validation_station_1.validateAllPackages(givenPath);
    }
    else {
        promise = validation_station_1.validatePackage(givenPath);
    }
    promise
        .then((result) => {
        if (result.success) {
            utilities_internal_1.trace.info('All Validations Passed :)');
        }
        else {
            process.exitCode = 1;
            utilities_internal_1.trace.error('Validation Failed');
        }
    })
        .catch((reason) => {
        utilities_internal_1.trace.error('Validaton threw the following error. Validation Failed.');
        utilities_internal_1.trace.error(reason);
        process.exitCode = 1;
    });
})
    // ADD-MODULE COMMAND
    .command('add-module <moduleName>', 'Creates a template module with the given name in the project\n', (params) => {
    return params
        .positional('moduleName', {
        describe: 'The name of the module'
    })
        .example('yarn msdyn365 add-module my-msdyn365-module', '')
        .usage('usage: yarn msdyn365 add-module <moduleName>');
}, (args) => {
    checkExtraArguments(args._);
    add_module_1.default(args.moduleName);
})
    // PRINT-PACKAGE-VERSIONS COMMAND
    .command('packages', 'Prints information about MSDyn365 Commerce packages and their versions\n', (params) => {
    return params;
}, (args) => {
    checkExtraArguments(args._);
    print_package_versions_1.default();
})
    .command('pack [packageName]', 'Packages partner application. PackageName optional\n', (params) => {
    return params
        .positional('packageName', {
        describe: 'Name of the package'
    })
        .example('yarn msdyn365 pack myPackage', 'Optionally names the package as myPackage')
        .usage('usage: yarn msdyn365 pack [packageName]');
}, (args) => {
    checkExtraArguments(args._);
    pack_1.default(args.packageName);
})
    .command('generate-resources <outputFolder> [exportSDKResources]', 'Generete default resource file (global.json) for modules/authoring\n', (params) => {
    return (params
        .positional('outputFolder', {
        describe: 'output folder location where resources folder containing modules/authoring global.json files should be generated'
    })
        // this is an internal switch and we dont want to document this at this point.
        .positional('exportSDKResources', {
        describe: 'Set to true if you want to export the SDK resources as well. Default is false. Optional'
    })
        .example('yarn msdyn365 generate-resources src', '')
        .usage('usage: yarn msdyn365 generate-resources <outputFolder>'));
}, (args) => {
    checkExtraArguments(args._);
    generate_resources_1.default(args.outputFolder, args.exportSDKResources)
        .then(() => {
        utilities_internal_1.trace.info(`Generated resources at ${args.outputFolder || generate_resources_1.SRC_FOLDER}`);
    })
        .catch(e => {
        utilities_internal_1.trace.error(`Couldn't generate resources`);
        utilities_internal_1.trace.error(e);
    });
})
    // ADD-THEME COMMAND
    .command('add-theme <themeName>', 'Creates a template theme with the given name in the project\n', (params) => {
    return params
        .positional('themeName', {
        describe: 'The name of the Theme'
    })
        .example('yarn msdyn365 add-theme my-msdyn365-template-theme', '')
        .usage('usage: yarn msdyn365 add-theme <themeName>');
}, (args) => {
    checkExtraArguments(args._);
    add_theme_1.default(args.themeName);
})
    // ADD-VIEW-EXTENSION COMMAND
    .command('add-view-extension <themeName> <moduleName> [--copy-from-theme]', 'Creates a clone of view with the given name in the themes directory in the project\n', (params) => {
    return params
        .positional('themeName', {
        describe: 'The name of the theme'
    })
        .positional('moduleName', {
        describe: 'The name of the module from which the view is extended'
    })
        .positional('--copy-from-theme', {
        describe: 'copy the view from the installed theme'
    })
        .example('yarn msdyn365 add-view-extension contoso-theme partner-hero --copy-from-theme', '')
        .usage('usage: yarn mdyn365 add-view-extension <themeName> <moduleName>');
}, (args) => {
    checkExtraArguments(args._);
    add_view_extension_1.default(args);
})
    // ADD-COMPONENT-OVERRIDE
    .command('add-component-override [themeName] [componentName] [--list-components]', 'Creates a clone of view with the given name in the themes directory in the project\n', (params) => {
    return params
        .positional('themeName', {
        describe: 'The name of the theme'
    })
        .positional('componentName', {
        describe: 'The name of the component to override in your theme'
    })
        .positional('--list-components', {
        describe: 'Lists the components currently available to override'
    })
        .example('yarn msdyn365 add-component-override contoso-theme CartIcon\nyarn msdyn365 add-component-override --list-components', '')
        .usage('usage: yarn mdyn365 add-component-override <themeName> <componentName>');
}, (args) => {
    checkExtraArguments(args._);
    if ((args.themeName || args.componentName) && args['list-components']) {
        utilities_internal_1.trace.error('Cannot provide the theme name/component name and --list-components option at the same time');
        yargs.showHelp();
    }
    else if (args.themeName && args.componentName) {
        add_component_override_1.default(args);
    }
    else if (args['list-components']) {
        add_component_override_1.default(args);
    }
    else {
        utilities_internal_1.trace.error('You must either provide list components option or the theme name and component you wish to override.');
        yargs.showHelp();
    }
})
    .strict()
    .example('validate', 'yarn msdyn365 validate ./')
    .example('add-module', 'yarn msdyn365 add-module hello-world')
    .example('clone', 'yarn msdyn365 clone hello-world my-hello-world')
    .example('add-data-action', 'yarn msdyn365 add-data-action get-cart')
    .example('packages', 'yarn msdyn365 packages')
    .example('pack', 'yarn msdyn365 pack')
    .example('update-versions', 'yarn msdyn365 update-versions sdk')
    .example('add-theme', 'yarn msdyn365 add-theme template-theme')
    .example('add-view-extension', 'yarn msdyn365 add-view-extension contoso-theme partner-hero')
    .example('add-component-override', 'yarn msdyn365 add-component-override contoso-theme CartIcon')
    .scriptName('')
    .wrap(yargs.terminalWidth())
    .recommendCommands().argv;
// If no command was received show help section
if (yargsCLI && yargsCLI._ && yargsCLI._.length === 0) {
    yargs.showHelp();
}
