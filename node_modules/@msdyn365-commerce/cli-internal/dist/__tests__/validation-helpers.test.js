"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
require("jest");
const path = require("path");
const validation_helpers_1 = require("../scripts/validation-helpers");
describe('test checkFileExists', () => {
    xit('correctly returns true when a file exists for the given path', () => {
        // Create a test file
        const testFilePath = path.resolve(process.cwd(), `test.txt`);
        try {
            fs.writeFileSync(testFilePath, 'Test Content');
        }
        catch (error) {
            console.log('Unable to create test file during read file test. Aborting.', error);
        }
        expect(validation_helpers_1.checkFileExists(testFilePath, 'test error string')).toBeTruthy();
        // Remove test file
        try {
            fs.unlinkSync(testFilePath);
        }
        catch (error) {
            console.log('Unable to delete test file during read file test. Aborting', error);
        }
    });
    it('correctly returns false when a file does not exists for the given path', () => {
        const testFilePath = path.resolve(process.cwd(), `test.txt`);
        console.log(`Intentionally print error log as part of test. Ignore error below.`);
        expect(validation_helpers_1.checkFileExists(testFilePath, 'test error string')).toBeFalsy();
    });
});
describe('test generateStatusJson', () => {
    it('correctly returns a new Status with its success field set to true', () => {
        // Create a test file
        const testStatus1 = validation_helpers_1.generateStatusJson();
        const testStatus2 = validation_helpers_1.generateStatusJson();
        expect(testStatus1.success).toBeTruthy();
        expect(testStatus1 === testStatus2).toBeFalsy();
    });
});
describe('test mergeStatuJson', () => {
    it('correctly merges two true status into one true status', () => {
        // Create a test file
        const testStatus1 = validation_helpers_1.generateStatusJson();
        const testStatus2 = validation_helpers_1.generateStatusJson();
        expect(validation_helpers_1.mergeStatusJson(testStatus1, testStatus2).success).toBeTruthy();
    });
    it('correctly merges one true status and one false into one false status', () => {
        // Create a test file
        const testStatus1 = validation_helpers_1.generateStatusJson();
        const testStatus2 = validation_helpers_1.generateStatusJson();
        testStatus2.success = false;
        expect(validation_helpers_1.mergeStatusJson(testStatus1, testStatus2).success).toBeFalsy();
    });
    it('correctly merges two false status into one false status', () => {
        // Create a test file
        const testStatus1 = validation_helpers_1.generateStatusJson();
        const testStatus2 = validation_helpers_1.generateStatusJson();
        testStatus1.success = false;
        testStatus2.success = false;
        expect(validation_helpers_1.mergeStatusJson(testStatus1, testStatus2).success).toBeFalsy();
    });
});
describe('test markFailure', () => {
    it('correctly returns a new Status with its success field set to false', () => {
        // Create a test file
        const testStatus1 = validation_helpers_1.generateStatusJson();
        const testStatus2 = validation_helpers_1.markFailure(testStatus1);
        expect(testStatus2.success).toBeFalsy();
    });
});
