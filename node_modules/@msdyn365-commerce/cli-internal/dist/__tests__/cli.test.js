"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const fs = require("fs-extra");
require("jest");
const path = require("path");
const add_component_override_1 = require("../scripts/add-component-override");
const add_data_action_1 = require("../scripts/add-data-action");
const add_module_1 = require("../scripts/add-module");
const add_theme_1 = require("../scripts/add-theme");
const add_view_extension_1 = require("../scripts/add-view-extension");
const copy_module_1 = require("../scripts/copy-module");
const generate_resources_1 = require("../scripts/generate-resources");
const pack_1 = require("../scripts/pack");
const validation_station_1 = require("../scripts/validation-station");
const moduleName = 'test-module';
const actionName = 'test-action';
const themeName = 'test-theme';
const plexTheme = 'plex-theme';
const copyModuleName = 'my-sample-hero';
const srcDir = path.resolve(process.cwd(), 'src');
const moduleDir = path.resolve(srcDir, 'modules', moduleName);
const actionDir = path.resolve(srcDir, 'actions');
const copyModuleDir = path.resolve(srcDir, 'modules', copyModuleName);
const themeDir = path.resolve(srcDir, 'themes', themeName);
const styleDir = path.resolve(srcDir, 'themes', themeName, 'styles');
const viewExtensionDir = path.resolve(srcDir, 'themes', themeName, 'views');
const plexThemeLocal = path.resolve(srcDir, 'themes', plexTheme, 'views');
// tslint:disable:no-any
const exit = jest.spyOn(process, 'exit').mockImplementation(
// @ts-ignore: disabling type checking
(code) => {
    // intentionally blank
});
// tslint:enable:no-any
describe('test add-module', () => {
    afterEach(() => {
        fs.removeSync(moduleDir);
    });
    it('runs add-module without any errors', () => {
        add_module_1.default(moduleName);
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(moduleDir, 'test-module.data.ts'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(moduleDir, 'test-module.definition.json'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(moduleDir, 'test-module.props.autogenerated.ts'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(moduleDir, 'test-module.view.tsx'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(moduleDir, 'test-module.tsx'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(moduleDir, 'mocks', 'test-module.json'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(moduleDir, 'tests', 'test-module.test.tsx'))).toBeTruthy();
    });
    it('fails add-module when module with name already exists', () => {
        add_module_1.default(moduleName);
        add_module_1.default(moduleName);
        expect(exit).toHaveBeenCalledWith(1);
    });
    it('runs add-module and validation passes', () => __awaiter(void 0, void 0, void 0, function* () {
        add_module_1.default(moduleName);
        const validationResult = yield validation_station_1.validatePackage(process.cwd());
        if (!validationResult.success) {
            throw new Error('add-module creates a module that does not pass validation');
        }
    }));
});
describe('test add-data-action', () => {
    afterEach(() => {
        fs.removeSync(actionDir);
    });
    it('runs add-data-action without any errors', () => {
        add_data_action_1.default(actionName);
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(actionDir, 'test-action.action.ts'))).toBeTruthy();
    });
    it('fails add-data-action when action with name already exists', () => {
        add_data_action_1.default(actionName);
        add_data_action_1.default(actionName);
        expect(exit).toHaveBeenCalledWith(1);
    });
});
describe('test pack command', () => {
    const originalTraceInfo = utilities_internal_1.trace.info;
    afterEach(() => {
        fs.removeSync(copyModuleDir);
        utilities_internal_1.trace.info = originalTraceInfo;
    });
    it('check if pack command packs with provided name', () => __awaiter(void 0, void 0, void 0, function* () {
        const consoleOutput = [];
        const mockedTraceInfo = (output) => consoleOutput.push(output);
        utilities_internal_1.trace.info = mockedTraceInfo;
        pack_1.default('testPackage');
        expect(utilities_internal_1.safeFileExistsSync('testPackage.zip')).toBeTruthy();
    }));
});
describe('test clone command', () => {
    const originalTraceInfo = utilities_internal_1.trace.info;
    afterEach(() => {
        fs.removeSync(copyModuleDir);
        utilities_internal_1.trace.info = originalTraceInfo;
    });
    it('lists all the available modules for cloning', () => {
        const consoleOutput = [];
        const mockedTraceInfo = (output) => consoleOutput.push(output);
        utilities_internal_1.trace.info = mockedTraceInfo;
        copy_module_1.default({ listmodules: true, $0: 'clone', _: [] });
        expect(consoleOutput).toMatchSnapshot();
    });
    it('successfully clones a module', () => {
        copy_module_1.default({ starterPackModuleName: 'sample-hero', newModuleName: copyModuleName, $0: 'clone', _: [] });
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(copyModuleDir, 'my-sample-hero.definition.json'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(copyModuleDir, 'my-sample-hero.props.autogenerated.ts'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(copyModuleDir, 'my-sample-hero.tsx'))).toBeTruthy();
        expect(fs.readJSONSync(path.resolve(copyModuleDir, 'my-sample-hero.definition.json')).name).toBe('my-sample-hero');
    });
});
describe('test generate-resources command', () => {
    it('validate modules resources generation', () => __awaiter(void 0, void 0, void 0, function* () {
        const testsFolder = path.resolve(path.join(process.cwd(), '__tests__'));
        yield generate_resources_1.default('__tests__');
        // Read generated resource files for modules
        const generatedModuleResources = yield utilities_internal_1.safeReadJson(path.join(testsFolder, 'resources', 'modules', 'global.json'));
        // Read expected resource file snapshots
        const expectedModuleResources = yield utilities_internal_1.safeReadJson(path.join(testsFolder, '__mocks__', 'modules.global.json'));
        // Compare the results
        expect(generatedModuleResources).toEqual(expectedModuleResources);
    }));
    it('validate authoring resources generation', () => __awaiter(void 0, void 0, void 0, function* () {
        const testsFolder = path.resolve(path.join(process.cwd(), '__tests__'));
        yield generate_resources_1.default('__tests__');
        // Read generated resource files for authoring
        const generatedAuthoringResources = yield utilities_internal_1.safeReadJson(path.join(testsFolder, 'resources', 'authoring', 'global.json'));
        // Read expected resource file snapshots
        const expectedAuthoringResources = yield utilities_internal_1.safeReadJson(path.join(testsFolder, '__mocks__', 'authoring.global.json'));
        // Compare the results
        expect(generatedAuthoringResources).toEqual(expectedAuthoringResources);
    }));
});
describe('test add-theme', () => {
    afterEach(() => {
        fs.removeSync(themeDir);
    });
    it('runs add-theme without any errors', () => {
        add_theme_1.default(themeName);
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(themeDir, 'test-theme.definition.json'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(themeDir, 'test-theme.theme.settings.json'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(themeDir, 'test-theme.tsx'))).toBeTruthy();
        expect(utilities_internal_1.isDirectory(path.resolve(themeDir, 'styles'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(styleDir, 'test-theme.definition.scss.json'))).toBeTruthy();
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(styleDir, 'test-theme.theme.scss'))).toBeTruthy();
    });
    it('fails add-theme when theme when name already exists', () => {
        add_theme_1.default(themeName);
        add_theme_1.default(themeName);
        expect(exit).toHaveBeenCalledWith(1);
    });
    it('runs add-theme and validation passes', () => __awaiter(void 0, void 0, void 0, function* () {
        add_theme_1.default(themeName);
        const validationResult = yield validation_station_1.validatePackage(process.cwd());
        if (!validationResult.success) {
            throw new Error('add-theme creates a theme that does not pass validation');
        }
    }));
});
describe('test add-view-extension', () => {
    beforeEach(() => {
        add_theme_1.default(themeName);
    });
    afterEach(() => {
        fs.removeSync(viewExtensionDir);
    });
    it('succesfully copies the view file without any errors', () => {
        add_view_extension_1.default({ themeName: themeName, moduleName: 'sample-favorite-locations' });
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(viewExtensionDir, `sample-favorite-locations.view.tsx`))).toBeTruthy();
    });
    it('successfully copies the view file from theme module', () => {
        add_theme_1.default(plexTheme);
        add_view_extension_1.default({ themeName: plexTheme, moduleName: 'sample-favorite-locations', copyFromTheme: true });
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(plexThemeLocal, `sample-favorite-locations.view.tsx`))).toBeTruthy();
    });
    it('fails add-view-extension when a theme does not exist', () => {
        add_view_extension_1.default({ themeName: 'Not-exist-theme', moduleName: moduleName });
        expect(exit).toHaveBeenCalledWith(1);
    });
    it('fails add-view-extension when view file already exists', () => {
        add_view_extension_1.default({ themeName: themeName, moduleName: 'sample-favorite-locations' });
        add_view_extension_1.default({ themeName: themeName, moduleName: 'sample-favorite-locations' });
        expect(exit).toHaveBeenCalledWith(1);
    });
});
describe('test add-component-override', () => {
    beforeEach(() => {
        add_theme_1.default(themeName);
    });
    afterEach(() => {
        fs.removeSync(viewExtensionDir);
    });
    it('succesfully overrides component file without any errors', () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-ignore
        add_component_override_1.default({ themeName: themeName, componentName: 'Price' });
        expect(utilities_internal_1.safeFileExistsSync(path.resolve(viewExtensionDir, `components`, `price.component.tsx`))).toBeTruthy();
    }));
    it('fails add-component override when a theme does not exist', () => {
        add_view_extension_1.default({ themeName: 'Not-exist-theme', moduleName: moduleName });
        expect(exit).toHaveBeenCalledWith(1);
    });
});
afterAll(() => {
    // Clear out the src dir where the temporary modules and actions were generated
    fs.removeSync(srcDir);
    exit.mockRestore();
});
