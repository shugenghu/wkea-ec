"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const fs = require("fs-extra");
const logSymbols = require("log-symbols");
const path = require("path");
const utils_1 = require("./utils");
// Grab the path to package containing the e-commerce components
const componentsPath = path.resolve(utils_1.getMSDyn365Dir());
const componentNameToFilePathMap = {};
let didFindComponentToOverride = false;
let didCompleteComponentOverrideCodeGeneration = false;
/**
 * Checks the required parameters and path to execute the CLI command
 *
 * Returns the file path to the theme if found
 */
const checkBaseCliConditions = (themeName, componentName) => {
    if (!themeName) {
        utilities_internal_1.trace.error('Please specify the theme name \nExample: ');
        utilities_internal_1.trace.error('yarn mdyn365 add-component-override contoso-theme CartIcon');
        utils_1.printCmdAndExit(printCommandSummary, themeName);
    }
    if (!componentName) {
        utilities_internal_1.trace.error('Please specify the component name to override');
        utilities_internal_1.trace.error('yarn mdyn365 add-component-override contoso-theme CartIcon');
        utils_1.printCmdAndExit(printCommandSummary, componentName);
    }
    let themePath = '';
    // check if the theme path is valid and return the filepath to the theme if it exists
    if (utilities_internal_1.safeFileExistsSync(path.resolve(process.cwd(), `src/themes/${themeName}`))) {
        themePath = path.resolve(process.cwd(), `src/themes/${themeName}`);
    }
    else if (utilities_internal_1.safeFileExistsSync(path.resolve(process.cwd(), `src/modules/${themeName}`))) {
        themePath = path.resolve(process.cwd(), `src/modules/${themeName}`);
    }
    else {
        utilities_internal_1.trace.error(`Theme ${themeName} does not exist`);
        utils_1.printCmdAndExit(printCommandSummary, componentName);
    }
    return themePath;
};
/**
 * Returns a list of the components that are available to override
 * and constructs a mapping of component name to it's file path
 */
const getOverridableComponents = () => {
    const componentDirs = utilities_internal_1.getDirectories(componentsPath);
    const overridableComponents = [];
    // Regex to find the function call that registers the component so we can grab the component name
    const regex = new RegExp(`msdyn365Commerce\.createComponent<.*>\(.*\)`, 'gs');
    // Loop through the components package to find components that are available to override
    for (let i = 0; i < componentDirs.length; i++) {
        const curComponentDir = componentDirs[i];
        // tslint:disable-next-line: no-empty disabling this rule so we can provide a no-op for the trace function to reduce console spam
        const components = utilities_internal_1.safeGetAllFilesPathSync(`${path.resolve(componentsPath, curComponentDir)}/**/*.component?(s).tsx`, {
            // tslint:disable-next-line: no-empty
            error: () => { },
            // tslint:disable-next-line: no-empty
            info: () => { }
        });
        for (let j = 0; j < components.length; j++) {
            // Read the components file contents and try to find the regex match
            const fileContents = utilities_internal_1.safeReadFileSync(components[j]);
            const matches = fileContents.match(regex);
            if (matches && matches.length > 0) {
                let componentName;
                try {
                    /* the matches should be in the form
                        msdyn365Commerce.createComponent<IAddtoWishlistComponent>(
                            'AddToWishlist',
                            { component: AddToWishlist, ...AddToWishlistComponentActions }
                        );
                    */
                    // This will give us the first argument to this function call which is the component name
                    componentName = matches[0]
                        .split('(')[1]
                        .split(',')[0]
                        .trim();
                    // Remove the single quotes from the component name
                    componentName = componentName.replace(/\'/gi, '');
                    // Add entry to array of overridable components and component name to file path map
                    overridableComponents.push(componentName);
                    componentNameToFilePathMap[componentName] = components[j];
                }
                catch (err) {
                    // Error case, unable to determine component name, skip this file
                }
            }
        }
    }
    return overridableComponents;
};
/**
 * Checks to see if the component name exists and returns the file path to that component
 *
 * @param overridableComponents A list of overridable components
 * @param componentName The component name that the user wishes to override
 */
const checkIfComponentExists = (overridableComponents, componentName) => {
    // If the component name does not exist in the lit of overridable components, error out and present
    // a list of overridable components to the user
    if (overridableComponents.indexOf(componentName) === -1) {
        utilities_internal_1.trace.error(`Component name ${componentName} could not be found`);
        utilities_internal_1.trace.error(`Available Components to Override:`);
        utilities_internal_1.trace.error(overridableComponents);
        utils_1.printCmdAndExit(printCommandSummary, componentName);
    }
    didFindComponentToOverride = true;
    return componentNameToFilePathMap[componentName];
};
/**
 * Prints a summary of what the command did and documents any steps that failed
 */
function printCommandSummary(componentName) {
    utilities_internal_1.trace.info(`=====================================================================`);
    utilities_internal_1.trace.info(`COMMAND SUMMARY: `);
    utilities_internal_1.trace.info(`\t${didFindComponentToOverride ? logSymbols.success : logSymbols.error} Found component ${componentName}`);
    utilities_internal_1.trace.info(`\t${didCompleteComponentOverrideCodeGeneration ? logSymbols.success : logSymbols.error} Generated component override for ${componentName}`);
    utilities_internal_1.trace.info(didFindComponentToOverride && didCompleteComponentOverrideCodeGeneration
        ? `Command completed successfully!`
        : `Command encountered errors. See above.`);
}
function addComponentOverride(args) {
    // Construct a list of components that are available to override
    const overridableComponents = getOverridableComponents();
    if (args['list-components']) {
        overridableComponents.length === 0
            ? utilities_internal_1.trace.error('No components available to override.')
            : utilities_internal_1.trace.info(`Available Components:\n ${JSON.stringify(overridableComponents)}`);
    }
    else {
        const themeName = args.themeName;
        const componentName = args.componentName;
        const themePath = checkBaseCliConditions(themeName, componentName);
        const pathToComponentToOverride = checkIfComponentExists(overridableComponents, componentName);
        let componentFileContents = utilities_internal_1.safeReadFileSync(pathToComponentToOverride);
        if (componentFileContents.includes('../index')) {
            componentFileContents = componentFileContents.replace('../index', '@msdyn365-commerce/components');
        }
        // Replace the component registration function with createComponentOverride function call and add a default export
        // both of which are required when overriding a component inside a theme
        componentFileContents = componentFileContents.replace(/msdyn365Commerce\.createComponent/, 'msdyn365Commerce.createComponentOverride');
        componentFileContents += `\n\nexport default ${componentName}Component;`;
        // Write out this modified file to the theme/views/components
        try {
            fs.outputFileSync(path.resolve(themePath, 'views', 'components', `${componentName.toLowerCase()}.component.tsx`), componentFileContents);
            didCompleteComponentOverrideCodeGeneration = true;
            printCommandSummary(componentName);
        }
        catch (err) {
            utilities_internal_1.trace.error(`Error encountered when generating component override file`);
            utilities_internal_1.trace.error(err);
            utils_1.printCmdAndExit(printCommandSummary, componentName);
        }
    }
}
exports.default = addComponentOverride;
