"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const fs = require("fs-extra");
/**
 * Given a file path returns a boolean indicating whether or not the file exists
 *
 * @param path The string representing the file path
 * @param errorMessageString An error message to display if the file does not exist
 */
exports.checkFileExists = (path, errorMessageString) => {
    if (!fs.existsSync(path)) {
        utilities_internal_1.trace.error(errorMessageString);
        utilities_internal_1.trace.error(path);
        return false;
    }
    return true;
};
/**
 * Returns a new Status object with its success field set to true
 */
exports.generateStatusJson = () => {
    return {
        success: true
    };
};
/**
 * Returns a new status as the result of merging two status objects.
 * The new status will have its success field set to true if and only if both input status object success fields are true
 *
 * @param statusA The first status object
 * @param statusB The second status object
 */
exports.mergeStatusJson = (statusA, statusB) => {
    const statusToReturn = exports.generateStatusJson();
    statusToReturn.success = statusA.success && statusB.success;
    return statusToReturn;
};
/**
 * Sets the success field of a Status object to false to mark validation failure
 *
 * @param statusJson The status object that will be marked with failure
 */
exports.markFailure = (statusJson) => {
    statusJson.success = false;
    return statusJson;
};
