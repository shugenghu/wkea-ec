"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @description add view extension script
 */
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const fs = require("fs-extra");
const klawSync = require("klaw-sync");
const logSymbols = require("log-symbols");
const path = require("path");
// @ts-ignore
const replaceInFile = require("replace-in-file");
const utils_1 = require("./utils");
let didCompleteViewExtensionCodeGeneration = false;
let viewFoundInLocalModule = false;
const MODULE = {
    namespace: '@msdyn365-commerce-modules'
};
const PATHS = {
    hoistedPath: path.join(process.cwd(), `../../node_modules/${MODULE.namespace}`),
    installedPath: path.join(process.cwd(), `node_modules/${MODULE.namespace}`)
};
const resolvedHoistedPath = path.join(process.cwd(), '../..').replace(/\\/gi, '/');
const copyViewExtensionFileFromThemeModule = (installedModuleExtensionPaths, destinationPath, moduleName) => {
    try {
        fs.copySync(installedModuleExtensionPaths, path.join(destinationPath, `${moduleName}.view.tsx`));
        utilities_internal_1.trace.info(`Copied view file to path: ${destinationPath}`);
        didCompleteViewExtensionCodeGeneration = true;
    }
    catch (error) {
        utilities_internal_1.trace.error(`Error while copying the view file`);
    }
};
/**
 *  Performs the copy operation of the view file into the module folder.
 * @param localModuleExtensionPaths A valid view file extension path in the local module
 * @param installedModuleExtensionPaths A valid view file extension path in the installed node module
 * @param hoistedModuleExtensionPaths  A valid view file extension path in the hoisted module
 * @param destinationPath Destination ath where the view file will be to
 * @param moduleName Name of the valid module
 */
const copyViewExtensionFile = (localModuleExtensionPaths, installedModuleExtensionPaths, hoistedModuleExtensionPaths, destinationPath, moduleName) => {
    // Searches and copies view file with the give priority: 1) Local module 2) Intalled module 3) Hoisted module
    if (localModuleExtensionPaths && localModuleExtensionPaths.length > 0) {
        try {
            fs.copySync(localModuleExtensionPaths[0], path.join(destinationPath, `${moduleName}.view.tsx`));
            utilities_internal_1.trace.info(`Copied view file to path: ${destinationPath}`);
            didCompleteViewExtensionCodeGeneration = true;
        }
        catch (error) {
            utilities_internal_1.trace.error(`Error while copying the view file`, error);
        }
    }
    else if (installedModuleExtensionPaths && installedModuleExtensionPaths.length > 0) {
        try {
            fs.copySync(installedModuleExtensionPaths[0], path.join(destinationPath, `${moduleName}.view.tsx`));
            utilities_internal_1.trace.info(`Copied view file to path: ${destinationPath}`);
            didCompleteViewExtensionCodeGeneration = true;
        }
        catch (error) {
            utilities_internal_1.trace.error(`Error while copying the view file`, error);
        }
    }
    else if (hoistedModuleExtensionPaths && hoistedModuleExtensionPaths.length > 0) {
        try {
            fs.copySync(hoistedModuleExtensionPaths[0], path.join(destinationPath, `${moduleName}.view.tsx`));
            utilities_internal_1.trace.info(`Copied view file to path: ${destinationPath}`);
            didCompleteViewExtensionCodeGeneration = true;
        }
        catch (error) {
            utilities_internal_1.trace.error(`Error while copying the view file`, error);
        }
    }
};
/**
 * Checks the required parameters and path to execute the CLI command
 */
const checkBaseCliConditions = (themeName, moduleName) => {
    if (!themeName) {
        utilities_internal_1.trace.error('Please specify the theme name \nExample: ');
        utilities_internal_1.trace.error('mdyn365 add-view-extension my-msdyn365-theme my-msdyn365-module');
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
    if (!moduleName) {
        utilities_internal_1.trace.error('Please specify the module name form which view will be extended from \nExample: ');
        utilities_internal_1.trace.error('mdyn365 add-view-extension my-msdyn365-theme my-msdyn365-module');
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
    const themepath = path.join(process.cwd(), `src/themes/${themeName}`);
    // check if the theme path is valid
    if (!fs.existsSync(themepath)) {
        utilities_internal_1.trace.error(`Theme ${themeName} does not exist`);
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
};
const getNewImportPath = (moduleType, moduleName, fromPath, parentModule) => {
    switch (moduleType) {
        case "local" /* LOCAL_MODULE */:
            return `../../../modules/${moduleName}/${fromPath}`;
        case "installedModule" /* INSTALLED_MODULE */:
            return `${parentModule}/src/modules/${moduleName}/${fromPath}`;
        case "themModule" /* THEM_MODULE */:
            return `${parentModule}/src/modules/${moduleName}/view/${fromPath}`;
        default:
            return null;
    }
};
/**
 * Renames the import paths in the view file to the correct paths
 */
const renameImportPaths = (destinationPath, moduleName, moduleType, parentModule, themName) => {
    const readViewFile = fs.readFileSync(path.join(destinationPath, `${moduleName}.view.tsx`)).toString();
    // Regex to indentify relative import paths
    const relativePathRegex = new RegExp(/(\.{1,2}\/){1}.*\;/, 'gm');
    const importPathsToBeRenamed = readViewFile.match(relativePathRegex);
    const destinationFilePath = path.join(path.join(destinationPath, `${moduleName}.view.tsx`));
    if (importPathsToBeRenamed && importPathsToBeRenamed.length) {
        importPathsToBeRenamed.forEach(fromPath => {
            const toPath = getNewImportPath(moduleType, themName ? themName : moduleName, fromPath, parentModule);
            const options = {
                files: destinationFilePath,
                from: fromPath,
                to: toPath
            };
            try {
                replaceInFile.sync(options);
            }
            catch (error) {
                utilities_internal_1.trace.error(`Error occurred while replacing placeholders within file ${destinationFilePath}`, error);
            }
        });
    }
};
/**
 * Finds if the local module is a content module and initiates import-paths rename operation
 */
const findLocalPath = (destinationPath, moduleName) => {
    const modulePath = path.join(process.cwd(), `src/modules`);
    if (fs.existsSync(modulePath)) {
        const paths = klawSync(modulePath, { nodir: true });
        paths.forEach((pathName) => {
            const filePath = pathName.path;
            if (path.basename(filePath) === `${moduleName}.definition.json`) {
                const readJson = fs.readJSONSync(filePath);
                if (readJson.$type === 'moduleDefinition' || readJson.$type === 'contentModule' || readJson.$type === 'containerModule') {
                    renameImportPaths(destinationPath, moduleName, "local" /* LOCAL_MODULE */);
                    viewFoundInLocalModule = true;
                }
            }
        });
    }
};
/**
 * Find if the installed module is a content module and initates import-path rename operation
 */
const findInstalledPath = (destinationPath, moduleName) => {
    const modulePath = utilities_internal_1.isMSDyn365CommerceModulesHoisted() ? PATHS.hoistedPath : PATHS.installedPath;
    const paths = klawSync(modulePath, { nodir: true });
    paths.forEach((pathName) => {
        const filePath = pathName.path;
        if (path.basename(filePath) === `${moduleName}.definition.json`) {
            const readJson = fs.readJSONSync(filePath);
            if (readJson.$type === 'moduleDefinition' || readJson.$type === 'contentModule' || readJson.$type === 'containerModule') {
                const parentNameRegex = new RegExp('@msdyn365-commerce-modules.*(?=.src)', 'g');
                const parentModulePath = filePath.match(parentNameRegex);
                if (parentModulePath) {
                    const replacePath = parentModulePath[0].replace(/\\/g, '/');
                    renameImportPaths(destinationPath, moduleName, "installedModule" /* INSTALLED_MODULE */, replacePath);
                }
            }
        }
    });
};
/**
 * Find if the installed module is a view module and initates import-path rename operation
 */
const findInstalledViewModulePath = (destinationPath, themeName, moduleName) => {
    const modulePath = utilities_internal_1.isMSDyn365CommerceModulesHoisted() ? PATHS.hoistedPath : PATHS.installedPath;
    const paths = klawSync(modulePath, { nodir: true });
    paths.forEach((pathName) => {
        const filePath = pathName.path;
        if (path.basename(filePath) === `${moduleName}.definition.json`) {
            const readJson = fs.readJSONSync(filePath);
            if (readJson.$type === 'themeModule') {
                const parentNameRegex = new RegExp('@msdyn365-commerce-modules.*(?=.src)', 'g');
                const parentModulePath = filePath.match(parentNameRegex);
                if (parentModulePath) {
                    const replacePath = parentModulePath[0].replace(/\\/g, '/');
                    renameImportPaths(destinationPath, moduleName, "themModule" /* THEM_MODULE */, replacePath, themeName);
                }
            }
        }
    });
};
/**
 *  Adds the view file from a module into the given ../themes/views directory
 * @param themeName  The name of the theme to which the view file is copied into
 * @param moduleName The name of the module which is used by the original theme module
 */
function addThemeView(themeName, moduleName) {
    const destinationPath = path.join(process.cwd(), `src/themes/${themeName}/views`);
    const modulePath = path.join(utils_1.getMSDyn365ModuleDir(), '**', 'src', '**', `${themeName}.definition.json`);
    const installedThemeModuleDefinitionPath = utilities_internal_1.safeGetAllFilesPathSync(modulePath);
    // check if the Theme module view path exist
    if (!installedThemeModuleDefinitionPath.length) {
        utilities_internal_1.trace.error(`Module ${moduleName} does not exist, please use a valid theme module`);
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
    // get themeModule directory name
    const themeModuleDir = path.dirname(installedThemeModuleDefinitionPath[0]);
    const viewModuleExtensionPath = path.join(themeModuleDir, 'views', `${moduleName}.view.tsx`);
    // check if the theme view file exists in the given module
    if (!utilities_internal_1.safeFileExistsSync(viewModuleExtensionPath)) {
        utilities_internal_1.trace.error(`Could not find view file for the modules: ${moduleName} in theme: ${themeName}`);
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
    // check if the view file is already exist in the current theme
    if (fs.existsSync(path.join(destinationPath, `${moduleName}.view.tsx`))) {
        utilities_internal_1.trace.error(`View ${moduleName} already exist, delete it or use another module\nExsisting`);
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
    // copy the module view file from the original theme module
    copyViewExtensionFileFromThemeModule(viewModuleExtensionPath, destinationPath, moduleName);
    findInstalledViewModulePath(destinationPath, themeName, moduleName);
}
/**
 *  Adds the view file from a module into the given ../themes/views directory
 * @param themeName  The name of the theme to which the view file is copied into
 * @param moduleName The name of the module from which the view file is exteded/ copied from
 */
function addModuleView(themeName, moduleName) {
    const destinationPath = path.join(process.cwd(), `src/themes/${themeName}/views`);
    const localModulePath = utilities_internal_1.safeGetAllFilesPathSync(`${process.cwd()}/src/modules/${moduleName}`);
    const installedModulePath = utilities_internal_1.safeGetAllFilesPathSync(`${process.cwd()}/node_modules/${MODULE.namespace}/**/src/**/${moduleName}`);
    const hoistedModulePath = utilities_internal_1.safeGetAllFilesPathSync(`${resolvedHoistedPath}/node_modules/${MODULE.namespace}/**/src/modules/${moduleName}`);
    // check if the module path exist
    if (!localModulePath.length && !installedModulePath.length && !hoistedModulePath.length) {
        utilities_internal_1.trace.error(`Module ${moduleName} does not exist, please use a valid module`);
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
    const localModuleExtension = `${process.cwd()}/src/modules/**/${moduleName}/*${moduleName}.view.tsx`;
    const installedModuleExtension = `${process.cwd()}/node_modules/${MODULE.namespace}/**/src/**/${moduleName}/*${moduleName}.view.tsx`;
    const hoistedModuleExtension = `${resolvedHoistedPath}/node_modules/${MODULE.namespace}/**/src//modules/${moduleName}/*${moduleName}.view.tsx`;
    const localModuleExtensionPaths = utilities_internal_1.safeGetAllFilesPathSync(localModuleExtension);
    const installedModuleExtensionPaths = utilities_internal_1.safeGetAllFilesPathSync(installedModuleExtension);
    const hoistedModuleExtensionPaths = utilities_internal_1.safeGetAllFilesPathSync(hoistedModuleExtension);
    // check if the view file exists in the given module
    if (!localModuleExtensionPaths.length && !installedModuleExtensionPaths.length && !hoistedModuleExtensionPaths.length) {
        utilities_internal_1.trace.error(`View file does not exist, please use different module to extend the view from`);
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
    // check if the view file copied from a module already exisits in the given theme directory
    if (fs.existsSync(path.join(destinationPath, `${moduleName}.view.tsx`))) {
        utilities_internal_1.trace.error(`View ${moduleName} already exist, delete it or use another module\nExsisting`);
        utils_1.printCmdAndExit(printCommandSummary, moduleName);
    }
    // copy from the installed Theme module
    copyViewExtensionFile(localModuleExtensionPaths, installedModuleExtensionPaths, hoistedModuleExtensionPaths, destinationPath, moduleName);
    findLocalPath(destinationPath, moduleName);
    if (!viewFoundInLocalModule) {
        findInstalledPath(destinationPath, moduleName);
    }
}
function addViewExtension(args) {
    const moduleName = args.moduleName;
    const themeName = args.themeName;
    const copyFromThemeFlag = args['copy-from-theme'];
    checkBaseCliConditions(themeName, moduleName);
    if (copyFromThemeFlag) {
        addThemeView(themeName, moduleName);
    }
    else {
        addModuleView(themeName, moduleName);
    }
    printCommandSummary(moduleName);
}
exports.default = addViewExtension;
/**
 * Prints a summary of what the command did and documents any steps that failed
 */
function printCommandSummary(fileName) {
    utilities_internal_1.trace.info(`=====================================================================`);
    utilities_internal_1.trace.info(`COMMAND SUMMARY: `);
    utilities_internal_1.trace.info(`\t${didCompleteViewExtensionCodeGeneration ? logSymbols.success : logSymbols.error} Created view extension ${fileName}.view.tsx`);
    utilities_internal_1.trace.info(didCompleteViewExtensionCodeGeneration ? `File copying successful!` : `File copying unsuccessful`);
    utilities_internal_1.trace.info(didCompleteViewExtensionCodeGeneration ? `Command completed successfully!` : `Command encountered errors. See above.`);
}
