"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @description add action script
 */
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const fs = require("fs-extra");
const klawSync = require("klaw-sync");
const logSymbols = require("log-symbols");
const path = require("path");
// @ts-ignore
const replaceInFile = require("replace-in-file");
const utils_1 = require("./utils");
let didCreateDataActionSuccessfully = false;
/**
 * Copies over template action files into the appropriately named directory under the actions directory
 *
 * @param actionPath The path to the newly created action
 */
const copyTemplateFilesToActionsDir = (actionPath) => {
    // copy template to the action directory
    try {
        fs.copySync(utils_1.CLI_ACTION_TEMPLATE_DIR, actionPath);
    }
    catch (error) {
        utilities_internal_1.trace.error(`Error while copying template`, error);
        if (error.code === `EPERM`) {
            utilities_internal_1.trace.error(`Please ensure that you have write permissions to the ${actionPath} directory and try again`);
        }
        process.exit(1);
    }
};
/**
 * Creates a templated data action within src/action/
 *
 * @param actionName The name of the data action
 */
function addDataAction(actionName) {
    if (!actionName) {
        utilities_internal_1.trace.error('Please specify the project name\nExample:');
        utilities_internal_1.trace.error('msdyn365 add-data-action get-cart');
        utils_1.printCmdAndExit(printCommandSummary, actionName);
    }
    // check if package.json file exists
    const packageJsonPath = path.resolve(process.cwd(), `package.json`);
    if (!fs.existsSync(packageJsonPath)) {
        utilities_internal_1.trace.error(`Please run this cli in the package root folder (where your package.json is)\nExiting`);
        utils_1.printCmdAndExit(printCommandSummary, actionName);
    }
    const kebabCaseName = utils_1.buildKebabCaseName(actionName);
    const pascalCaseName = utils_1.convertToPascalCaseName(kebabCaseName);
    const actionPath = path.resolve(process.cwd(), `src/actions`);
    // check if the data action already exists
    if (fs.existsSync(path.resolve(actionPath, kebabCaseName))) {
        utilities_internal_1.trace.error(`Action ${kebabCaseName} already exists, delete it or use another name\nExiting`);
        utils_1.printCmdAndExit(printCommandSummary, kebabCaseName);
    }
    // Copy over the template files into the actions folder
    copyTemplateFilesToActionsDir(actionPath);
    // rename directories first to avoid naming conflicts while modifying files
    // copy file names to editable array
    const readOnlyPathNames = klawSync(actionPath, {
        nofile: true
    });
    const editablePathNames = [];
    readOnlyPathNames.forEach((pathName, index) => {
        editablePathNames[index] = pathName.path;
    });
    // modify files
    const paths = klawSync(actionPath, { nodir: true });
    paths.forEach((pathName) => {
        // replace placeholders within files.
        const options = {
            files: pathName.path,
            from: utils_1.ACTION_REPLACEMENT,
            to: [pascalCaseName, kebabCaseName]
        };
        try {
            replaceInFile.sync(options);
        }
        catch (error) {
            utilities_internal_1.trace.error(`Error occurred while replacing placeholders within file ${pathName}`, error);
            utils_1.printCmdAndExit(printCommandSummary, kebabCaseName);
        }
        // rename files
        if (pathName.path.indexOf(utils_1.ACTION_NAME_PLACEHOLDER) !== -1) {
            try {
                fs.renameSync(pathName.path, pathName.path.replace(utils_1.ACTION_NAME_PLACEHOLDER, kebabCaseName));
            }
            catch (error) {
                utilities_internal_1.trace.error(`Error while renaming file ${pathName}`, error);
                utils_1.printCmdAndExit(printCommandSummary, kebabCaseName);
            }
        }
    });
    didCreateDataActionSuccessfully = true;
    printCommandSummary(kebabCaseName);
}
exports.default = addDataAction;
/**
 * Prints a summary of what the command did and documents any steps that failed
 */
function printCommandSummary(dataActionName) {
    utilities_internal_1.trace.info(`=====================================================================`);
    utilities_internal_1.trace.info(`COMMAND SUMMARY: `);
    utilities_internal_1.trace.info(`\t${didCreateDataActionSuccessfully ? logSymbols.success : logSymbols.error} Created data action with name ${dataActionName}`);
    utilities_internal_1.trace.info(didCreateDataActionSuccessfully
        ? `Command completed successfully! Please check the newly created action to complete the TODO items before building`
        : `Command encountered errors. See above.`);
}
