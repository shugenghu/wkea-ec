"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @description add theme script
 */
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const fs = require("fs-extra");
const klawSync = require("klaw-sync");
const logSymbols = require("log-symbols");
const path = require("path");
// @ts-ignore
const replaceInFile = require("replace-in-file");
const utils_1 = require("./utils");
let didCompleteThemeCodeGeneration = false;
let didRunDefinitionGeneratorSuccessfully = false;
/**
 * Creates a templated theme within src/themes/ containing the basic theme structure
 *
 * @param projectName The name of the theme that will be applied to all the files contained in the themes dir
 */
function addTheme(projectName) {
    if (!projectName) {
        utilities_internal_1.trace.error('Please specify the project name');
        utilities_internal_1.trace.error('Example: msdyn365 add-theme my-msdyn365-theme');
        utils_1.printCmdAndExit(printCommandSummary, projectName);
    }
    // check if package.json file exists
    const packageJsonPath = path.resolve(process.cwd(), `package.json`);
    if (!fs.existsSync(packageJsonPath)) {
        utilities_internal_1.trace.error(`Please run this cli in the root folder (where your package.json is)\nExiting`);
        utils_1.printCmdAndExit(printCommandSummary, projectName);
    }
    const kebabCaseName = utils_1.buildKebabCaseName(projectName);
    const pascalCaseName = utils_1.convertToPascalCaseName(kebabCaseName);
    const themePath = path.resolve(process.cwd(), `src/themes/${kebabCaseName}`);
    const definitionExtensionDirPath = path.resolve(themePath, "definition-extensions" /* DEF_EXTENSIONS_FOLDER */);
    const viewsDirPath = path.resolve(themePath, "views" /* viewsDir */);
    // check if starter pack theme with same name exists
    const starterPackThemePath = path.resolve(process.cwd(), `node_modules\\@msdyn365-commerce-themes`, kebabCaseName);
    if (fs.existsSync(starterPackThemePath)) {
        utilities_internal_1.trace.error(`Starter pack theme with name ${kebabCaseName} already exists, use another name\nExiting`);
        utils_1.printCmdAndExit(printCommandSummary, kebabCaseName);
    }
    // check if regular theme already exists
    if (fs.existsSync(themePath)) {
        utilities_internal_1.trace.error(`Theme ${kebabCaseName} already exists, delete it or use another name\nExiting`);
        utils_1.printCmdAndExit(printCommandSummary, projectName);
    }
    // Copy over the template files into the theme folder
    utils_1.copyTemplateFilesToDir(themePath, 'template/____keystone_theme_name____');
    if (!fs.existsSync(definitionExtensionDirPath)) {
        fs.mkdirSync(definitionExtensionDirPath);
    }
    if (!fs.existsSync(viewsDirPath)) {
        fs.mkdirSync(viewsDirPath);
    }
    // rename directories first to avoid naming conflicts while modifying files
    // copy file names to editable array
    const readOnlyPathNames = klawSync(themePath, {
        nofile: true
    });
    const editablePathNames = readOnlyPathNames.map(pathName => pathName.path);
    // Rename directories
    editablePathNames.forEach((pathName, index, pathNames) => {
        if (pathName.indexOf(utils_1.THEME_PLACEHOLDER) !== -1) {
            const oldName = pathName;
            const newName = oldName.replace(utils_1.THEME_PLACEHOLDER, kebabCaseName);
            try {
                fs.renameSync(oldName, newName);
            }
            catch (error) {
                utilities_internal_1.trace.error(`Error while renaming directory ${oldName}`, error);
                utils_1.printCmdAndExit(printCommandSummary, projectName);
            }
            // Since directory has been renamed, modify the remaining paths
            for (let i = index; i < pathNames.length; i++) {
                if (pathNames[i].indexOf(oldName) !== -1) {
                    pathNames[i] = pathNames[i].replace(oldName, newName);
                }
            }
        }
    });
    // modify files
    const paths = klawSync(themePath, { nodir: true });
    paths.forEach((pathName) => {
        // replace placeholders within files.
        const options = {
            files: pathName.path,
            from: utils_1.THEME_REPLACEMENT,
            to: [pascalCaseName, kebabCaseName]
        };
        try {
            replaceInFile.sync(options);
        }
        catch (error) {
            utilities_internal_1.trace.error(`Error occurred while replacing placeholders within file ${pathName}`, error);
            utils_1.printCmdAndExit(printCommandSummary, projectName);
        }
        // rename files
        if (pathName.path.indexOf(utils_1.THEME_PLACEHOLDER) !== -1) {
            try {
                fs.renameSync(pathName.path, pathName.path.replace(utils_1.THEME_PLACEHOLDER, kebabCaseName));
            }
            catch (error) {
                utilities_internal_1.trace.error(`Error while renaming file ${pathName}`, error);
                utils_1.printCmdAndExit(printCommandSummary, projectName);
            }
        }
    });
    didRunDefinitionGeneratorSuccessfully = runDefinitionGenerator(kebabCaseName);
    didCompleteThemeCodeGeneration = true;
    printCommandSummary(kebabCaseName);
}
exports.default = addTheme;
/**
 * Creates the autogenerated files for a theme after pulling down the theme
 * from starter pack. Returns true if the definition generator completed successfully
 */
function runDefinitionGenerator(themeName) {
    utilities_internal_1.trace.info(`Created ${themeName} ... Now running definition generator`);
    const result = utils_1.spawnSyncWithConsoleOutput(utils_1.DEFINITION_GENERATOR_COMMAND);
    return result.status === 0;
}
/**
 * Prints a summary of what the command did and documents any steps that failed
 */
function printCommandSummary(themeName) {
    utilities_internal_1.trace.info(`=====================================================================`);
    utilities_internal_1.trace.info(`COMMAND SUMMARY: `);
    utilities_internal_1.trace.info(`\t${didCompleteThemeCodeGeneration ? logSymbols.success : logSymbols.error} Created theme ${themeName}`);
    utilities_internal_1.trace.info(`\t${didRunDefinitionGeneratorSuccessfully ? logSymbols.success : logSymbols.error} Ran definition generator`);
    utilities_internal_1.trace.info(didCompleteThemeCodeGeneration && didRunDefinitionGeneratorSuccessfully
        ? `Command completed successfully!`
        : `Command encountered errors. See above.`);
}
