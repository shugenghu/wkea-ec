"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @description util functions used by add-module and add-data-binder scripts
 */
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const child_process_1 = require("child_process");
const fs = require("fs-extra");
const path = require("path");
// Project level constant used in module template replacements
exports.PROJECT_PLACEHOLDER = '____keystone_module_name____';
exports.ACTION_NAME_PLACEHOLDER = '____keystone_action_name____';
exports.THEME_PLACEHOLDER = '____keystone_theme_name____';
// CLI Template location in node_modules
exports.getCLITemplateDir = () => {
    return path.resolve(process.cwd(), `${utilities_internal_1.isCliTemplateHoisted() ? utilities_internal_1.getHoistedNodeModules() : 'node_modules'}/@msdyn365-commerce/cli-template-internal`);
};
// CLI Action Template Location
exports.CLI_ACTION_TEMPLATE_DIR = path.resolve(exports.getCLITemplateDir(), 'template/actions');
exports.getMSDyn365Dir = () => {
    return path.resolve(process.cwd(), `${utilities_internal_1.isMSDyn365CommerceModulesHoisted() ? utilities_internal_1.getHoistedNodeModules() : 'node_modules'}/@msdyn365-commerce/`);
};
// CLI Template location in node_modules
exports.getMSDyn365ModuleDir = () => {
    return path.resolve(process.cwd(), `${utilities_internal_1.isMSDyn365CommerceHoisted() ? utilities_internal_1.getHoistedNodeModules() : 'node_modules'}/@msdyn365-commerce-modules/`);
};
// Used to generate the autogenerated files
exports.DEFINITION_GENERATOR_COMMAND = 'yarn gendef -d ./';
exports.ACTION_REPLACEMENT = [/____keystone_action_class_name____/g, /'____keystone_action_name____'/g];
exports.MODULE_REPLACEMENT = [
    /____keystone_class_name____/g,
    /____keystone_module_name____/g,
    /____keystone_original_module_name____/g
];
exports.THEME_REPLACEMENT = [/____keystone_class_name____/g, /____keystone_template_name____/g];
/**
 * Reads a file and returns the file contents as a string or returns undefined if unable to read the file
 *
 * @param mockFilePath The file path of the file to read from
 */
exports.readFile = (mockFilePath) => {
    const fileContents = utilities_internal_1.safeReadFileSync(mockFilePath);
    return fileContents !== '' ? fileContents : undefined;
};
/**
 * Runs exec sync command while piping the live
 * output of the command to the console
 *
 * @param command The shell command to execute
 * @param cwd? Optional argument used to control the directory in which to run the command
 */
exports.execSyncWithConsoleOutput = (command, cwd) => {
    const execSyncOptions = { stdio: 'inherit' };
    if (cwd) {
        execSyncOptions.cwd = cwd;
    }
    child_process_1.execSync(command, execSyncOptions);
};
/**
 * Runs spawm sync command while piping the live
 * output of the command to the console
 *
 * @param command The shell command to execute
 */
exports.spawnSyncWithConsoleOutput = (command) => {
    return child_process_1.spawnSync(command, { shell: true, stdio: 'inherit' });
};
/**
 * Builds a kebab-case-name from a project name
 *
 * @param name The project name
 */
exports.buildKebabCaseName = (name) => {
    return name
        .split(' ')
        .join('-')
        .toLowerCase()
        .trim();
};
/**
 * Converts a kebab-case-name into a PascalCaseName
 *
 * @param kebabCaseNameToConvert The string kebab case name to convert into a pascal case name
 */
exports.convertToPascalCaseName = (kebabCaseNameToConvert) => {
    let pascalCasedName = ``;
    const parts = kebabCaseNameToConvert.split(`-`);
    parts.forEach((part) => {
        pascalCasedName = pascalCasedName.concat(part.charAt(0).toUpperCase() + part.slice(1));
    });
    return pascalCasedName;
};
/**
 * Converts a PascalCaseName to camelCase name
 *
 * @param pascalCaseNameToConvert The PascalCaseName to conver to camelCase
 */
exports.convertPascalCaseNameToCamelCase = (pascalCaseNameToConvert) => {
    return pascalCaseNameToConvert.charAt(0).toLowerCase() + pascalCaseNameToConvert.substr(1);
};
/**
 * Parses a valid JSON string into a JSON object
 *
 * @param content The string representation of a valid JSON object'
 * Returns null if unable to JSON parse the string or object
 */
exports.parsePayload = (content) => {
    try {
        // @ts-ignore
        return content.constructor === String ? JSON.parse(content) : content;
    }
    catch (error) {
        utilities_internal_1.trace.error(`JSON Parsing fails for content -- ${content}`);
        return null;
    }
};
exports.printCmdAndExit = (printSummaryFunc, name) => {
    printSummaryFunc(name);
    process.exit(1);
};
/**
 * Copies over template files into the appropriately named directory under the destination directory
 *
 * @param ActionPath The path to the newly created directory under (Modules/Themes)
 * @param inputDir The path of the tempalte directory from which the files needs to be copied from
 */
exports.copyTemplateFilesToDir = (actionPath, inputDir) => {
    // copy template to the action directory (Modules/themes)
    try {
        fs.copySync(path.resolve(exports.getCLITemplateDir(), inputDir), actionPath);
    }
    catch (error) {
        utilities_internal_1.trace.error(`Error while copying template`);
        utilities_internal_1.trace.error(error);
        if (error.code === `EPERM`) {
            utilities_internal_1.trace.error(`Please ensure that you have write permissions to the ${actionPath} directory and try again`);
        }
        process.exit(1);
    }
};
