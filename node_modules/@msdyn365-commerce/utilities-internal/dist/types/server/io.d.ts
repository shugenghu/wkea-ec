/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import * as fs from 'fs-extra';
import { IOptions } from 'glob';
import { Validator } from 'jsonschema';
export declare type FunctionReturn<TIn = undefined, TOut = undefined> = (input: TIn) => TOut;
export declare const safeReadFile: (filePath: string, traceToUse?: {
    error: Function;
}) => Promise<string>;
export declare const safeReadFileSync: (filePath: string, traceToUse?: {
    error: Function;
}) => string;
/**
 * Utility function to async check if file exists but returns path of it does, false if it doesn't
 * @param filePath file path to check
 */
export declare const safeFileExists: (filePath: string, trace?: {
    debug: FunctionReturn<string, void>;
    error: FunctionReturn<string, void>;
} | undefined) => Promise<string | boolean>;
/**
 * Utility function to sync check if file exists but returns path of it does, false if it doesn't
 * @param filePath file path to check
 */
export declare const safeFileExistsSync: (filePath: string) => boolean;
export declare function asyncForEach(array: unknown[], callback: Function): Promise<void>;
export declare const safeParseJson: <T extends object>(content: string, trace?: {
    error: Function;
} | undefined) => T | null;
/**
 * Implementation to safely read a file and try to parse JSON. If the file does not exist or there is some issue,
 * undefined is returned which is NOT valid JSON and should be checked.
 *
 * @param filePath Path of the file to try to read and parse
 * @param trace optional trace logger to use while reading file
 */
export declare const safeReadJson: <T extends object>(filePath: string, trace?: {
    error: Function;
} | undefined) => Promise<T | undefined>;
export declare const safeReadJsonSync: <T extends object>(filePath: string, trace?: {
    debug: Function;
    error: Function;
} | undefined) => T | undefined;
/**
 * Writes starter pack initialization data to file
 */
export declare const safeWriteJson: (filePath: string, data: object, trace?: {
    error: Function;
} | undefined, spacing?: string | number | undefined) => Promise<boolean>;
/**
 * Writes starter pack initialization data to file
 */
export declare const safeWriteJS: (filePath: string, data: string[], trace?: {
    error: Function;
} | undefined) => Promise<boolean>;
export declare const safeGetAllFilesPath: (globFilePattern: string | string[], options?: IOptions | undefined) => Promise<string[]>;
export declare const safeGetAllFilesPathSync: (globFilePattern: string, trace?: {
    error: Function;
    info: Function;
} | undefined, options?: IOptions | undefined) => string[];
export declare const isDirectory: (source: string) => boolean;
export declare const getDirectories: (source: string) => string[];
export declare const runSchemaValidationWithNestedError: (validator: Validator, runValidationOn: any, schema: any) => import("jsonschema").ValidatorResult;
/**
 * Checks to see if the specified path is a file
 * @param source Fully qualified path
 */
export declare const isFileSync: (source: string | null | undefined) => boolean | "" | null | undefined;
/**
 * Returns all files in a directory
 * @param sourceDir Directory
 */
export declare const getFilesInDirSync: (sourceDir: string) => string[];
/**
 * Will write a file in an async way and attempt to create all directories that do not exist.  Any error
 * is gracefully eaten and printed to console
 *
 * @param file file path
 * @param data data to write
 * @param options options
 */
export declare const safeWriteFile: (file: string, data: any, options?: string | fs.WriteFileOptions | undefined) => Promise<void>;
/**
 * Returns true if the environment is detected to be yarn workspaces env and cli template has been hoisted
 */
export declare const isCliTemplateHoisted: () => boolean;
/**
 * Returns true if the environment is detected to be yarn workspaces env and MSDyn365 Commerce Modules has been hoisted
 */
export declare const isMSDyn365CommerceModulesHoisted: () => boolean;
/**
 * Returns true if the environment is detected to be yarn workspaces env and MSDyn365 Commerce has been hoisted
 */
export declare const isMSDyn365CommerceHoisted: () => boolean;
/**
 * Returns the hoisted node_modules directory
 * Assumes the node modules are two levels above
 * node_modules
 * packages
 *     --> module
 *         ---> process.cwd()
 */
export declare const getHoistedNodeModules: () => string;
/**
 * Gets the current version of a pacakage
 * @param packageNamespace
 * @param packageName
 * @param errorOnFailure
 */
export declare const getVersionForPackage: (packageNamespace: string, packageName: string, options: {
    errorOnFailure: boolean;
}) => string;
/**
 * Gets the Retail Cloud Scale Unit (RCSU) version info of a partner
 * @param baseUrl Base url from the partners .evn file
 */
export declare const getRCSUversion: (baseUrl: string) => Promise<string>;
