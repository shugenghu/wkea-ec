"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
// tslint:disable:no-any no-require-imports no-var-requires no-console
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var path_1 = tslib_1.__importDefault(require("path"));
var stackTrace = require('stack-trace');
var util_1 = require("util");
var log = console.log, warn = console.warn;
/**
 * console tracing for build scripts
 */
var Trace = /** @class */ (function () {
    function Trace() {
        var _this = this;
        this.getStackInfo = process.env.NODE_DEBUG === 'detail' ? this._getStackTrace : this._getStackTracDetailed;
        /**
         * Custom format logger
         */
        this.log = function (loggerFunction, thingToLog) {
            loggerFunction(thingToLog);
        };
        this.info = function (arg) {
            _this._log(chalk_1.default.cyan, arg, _this.info);
        };
        this.debug = function (arg) {
            if (!_this.isDebug) {
                return;
            }
            _this._log(chalk_1.default.magenta, arg, _this.debug);
        };
        this.warn = function (arg) {
            _this._log(chalk_1.default.yellow, arg, _this.warn);
        };
        this.error = function (arg, err) {
            _this._log(chalk_1.default.red, arg, err || _this.error);
        };
        this.startTimer = function (label, additionalMessage) {
            log(chalk_1.default.yellow("Start -- "), chalk_1.default.yellow(label), "  ", chalk_1.default.yellow(additionalMessage || ''));
            var now = Date.now();
            if (_this.timers.has(label)) {
                warn(chalk_1.default.redBright("[WARN] There is already a timer label '" + label + "', your timings might be inaccurate"));
            }
            _this.timers.set(label, now);
        };
        this.stopTimer = function (label, additionalMessage) {
            var endTime = Date.now();
            if (_this.timers.has(label)) {
                // @ts-ignore -- we check for key existence
                log(label + ": " + (endTime - _this.timers.get(label)) + "ms");
                _this.timers.delete(label);
            }
            else {
                log(chalk_1.default.redBright("[WARN] No timer with label " + label));
            }
            log(chalk_1.default.yellow("End -- "), chalk_1.default.yellow(label), "  ", chalk_1.default.yellow(additionalMessage || ''));
        };
        this._log = function (chalkFunc, arg, func) {
            if (!_this.isDebug) {
                log(chalkFunc('--'), chalkFunc(typeof arg === 'string' ? arg : util_1.inspect(arg, { depth: null })));
            }
            else if (typeof arg === 'string') {
                log(chalkFunc(_this.getStackInfo(_this.info) + " : "), chalkFunc(arg), chalkFunc(_this.getStackInfo(func)));
            }
            else {
                log(chalkFunc("\n" + _this.getStackInfo(func) + " ------------------"));
                log(chalkFunc(util_1.inspect(arg, { depth: null })));
                log(chalkFunc("----------------------XXXXX----------------------\n\n"));
            }
        };
        this.isDebug = process.env.NODE_DEBUG !== 'false' && !!process.env.NODE_DEBUG;
        this.timers = new Map();
        log("process.env.NODE_DEBUG --> [" + process.env.NODE_DEBUG + "][" + this.isDebug + "]");
    }
    Trace.prototype._getStackTrace = function (func) {
        try {
            var traceLogger = stackTrace.get(func)[0];
            return "[" + path_1.default.basename(traceLogger.getFileName()) + "][" + traceLogger.getLineNumber() + "]";
        }
        catch (e) {
            return '[]';
        }
    };
    Trace.prototype._getStackTracDetailed = function (func) {
        try {
            var traceMessage = stackTrace.get(func).map(function (traceLogger) {
                return "[" + path_1.default.basename(traceLogger.getFileName()) + "]\n                         [" + path_1.default.basename(traceLogger.getMethodName()) + "]\n                         [" + traceLogger.getLineNumber() + "]";
            });
            return traceMessage.join('-');
        }
        catch (e) {
            return '[]';
        }
    };
    return Trace;
}());
exports.trace = new Trace();
//# sourceMappingURL=console-trace.js.map