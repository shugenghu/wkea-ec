{"version":3,"file":"json-ref-parser.js","sourceRoot":"","sources":["../../../src/server/json-ref-parser.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any\nimport parser from 'json-schema-ref-parser';\nimport * as path from 'path';\nimport { isEmptyOrNullObject } from '../common/extensions';\nimport { safeFileExistsSync, safeReadJson } from './io';\n\n/**\n * Marks ref paths to save the url from the ref parser\n * @param json JSON object of the module definition\n */\nconst markRefPaths = (json: any) => {\n    if (isEmptyOrNullObject(json)) {\n        return;\n    }\n\n    Object.keys(json).forEach((key: string) => {\n        if (key === '$ref') {\n            // Add reference path marker. This is needed so that json-ref-parser\n            // sends the path untouched which is required to decide to look for\n            // the definition within 'src' or 'node_modules' scopes\n            if (json[key].indexOf('#') !== 0) {\n                json[key] = `file://json/${json[key]}`;\n            }\n        } else if (typeof json[key] === 'object') {\n            markRefPaths(json[key]);\n        }\n    });\n};\n\n/**\n * Resolves the parent definition file w.r.t child definition file. A definition file can be referenced in a child\n * defintion file. The path follows the standard node resolution process i.e. supports paths relative to the child\n * and also to the node_modules.\n * @param parentDefinitionPath Path to definition file which is referenced in the child definition file\n * @param inheritedModuleDir Path to child definition file which is inheriting parent definition or a part of it\n */\nexport const resolveParentDefinitionPath = (wrappedParentDefinitionPath: string, inheritedModuleDir: string): string => {\n    const parentDefinitionPath = wrappedParentDefinitionPath.replace(/file:\\/\\/json\\//, '');\n    if (parentDefinitionPath.startsWith('.')) {\n        // path is relative to the current module directory, but resolution is\n        // relative to src/. Therefore, lets make it relative to the current module directory\n        return path.join(inheritedModuleDir, parentDefinitionPath);\n    }\n\n    // resolve against partner\n    const pathRelativeToPartner = path.join(process.cwd(), 'node_modules', parentDefinitionPath);\n    if (safeFileExistsSync(pathRelativeToPartner)) {\n        return pathRelativeToPartner;\n    }\n\n    // resolve against hoisted path\n    return path.resolve(path.join(process.cwd(), '../../node_modules', parentDefinitionPath));\n};\n\n/**\n * Resolves referenced definition files\n * @param moduleDirectory Path to module directory\n * @param trace logger\n */\nconst refPathResolver = (moduleDirectory: string, trace?: { error: Function }) => {\n    return {\n        order: 1,\n        canRead: true,\n        // tslint:disable-next-line:no-any\n        read: (wrappedParentDefinitionPath: any): Promise<any> => {\n            // Remove reference path marker\n            const parentDefinitionPath = resolveParentDefinitionPath(wrappedParentDefinitionPath.url, moduleDirectory);\n            return safeReadJson(parentDefinitionPath);\n        }\n    };\n};\n\n/**\n * Takes definition json object and resolves all the file references ($ref) defined in definition.\n * @param json definition json object\n * @param jsonFilePath path to definition file\n * @param trace logger\n */\nexport const resolveRef = async (json: object, jsonFilePath: string, trace?: { error: Function }) => {\n    if (isEmptyOrNullObject(json)) {\n        return;\n    }\n    try {\n        markRefPaths(json);\n        const definitionParser = new parser();\n        return await definitionParser.dereference(json, {\n            resolve: {\n                file: refPathResolver(path.dirname(jsonFilePath))\n            }\n        });\n    } catch (e) {\n        trace = trace || console;\n        trace.error(`error in processing file [${jsonFilePath}]`);\n        trace.error(e);\n        return Promise.resolve();\n    }\n};\n"]}