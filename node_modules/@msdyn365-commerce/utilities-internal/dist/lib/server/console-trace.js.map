{"version":3,"file":"console-trace.js","sourceRoot":"","sources":["../../../src/server/console-trace.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any no-require-imports no-var-requires no-console\nimport chalk from 'chalk';\nimport path from 'path';\nconst stackTrace = require('stack-trace');\nimport { inspect } from 'util';\n\nconst { log, warn } = console;\n\n/**\n * console tracing for build scripts\n */\nclass Trace {\n    private timers: Map<string, number>;\n    private isDebug: boolean;\n    private getStackInfo: Function = process.env.NODE_DEBUG === 'detail' ? this._getStackTrace : this._getStackTracDetailed;\n\n    constructor() {\n        this.isDebug = process.env.NODE_DEBUG !== 'false' && !!process.env.NODE_DEBUG;\n        this.timers = new Map();\n        log(`process.env.NODE_DEBUG --> [${process.env.NODE_DEBUG}][${this.isDebug}]`);\n    }\n\n    /**\n     * Custom format logger\n     */\n    public log = (loggerFunction: Function, thingToLog: any) => {\n        loggerFunction(thingToLog);\n    };\n\n    public info = (arg: any): void => {\n        this._log(chalk.cyan, arg, this.info);\n    };\n\n    public debug = (arg: any): void => {\n        if (!this.isDebug) {\n            return;\n        }\n        this._log(chalk.magenta, arg, this.debug);\n    };\n\n    public warn = (arg: any): void => {\n        this._log(chalk.yellow, arg, this.warn);\n    };\n\n    public error = (arg: any, err?: Error): void => {\n        this._log(chalk.red, arg, err || this.error);\n    };\n\n    public startTimer = (label: string, additionalMessage?: string): void => {\n        log(chalk.yellow(`Start -- `), chalk.yellow(label), `  `, chalk.yellow(additionalMessage || ''));\n        const now = Date.now();\n        if (this.timers.has(label)) {\n            warn(chalk.redBright(`[WARN] There is already a timer label '${label}', your timings might be inaccurate`));\n        }\n        this.timers.set(label, now);\n    };\n\n    public stopTimer = (label: string, additionalMessage?: string): void => {\n        const endTime = Date.now();\n        if (this.timers.has(label)) {\n            // @ts-ignore -- we check for key existence\n            log(`${label}: ${endTime - this.timers.get(label)}ms`);\n            this.timers.delete(label);\n        } else {\n            log(chalk.redBright(`[WARN] No timer with label ${label}`));\n        }\n        log(chalk.yellow(`End -- `), chalk.yellow(label), `  `, chalk.yellow(additionalMessage || ''));\n    };\n\n    private _log = (chalkFunc: (...text: string[]) => string, arg: any, func: Function | Error): void => {\n        if (!this.isDebug) {\n            log(chalkFunc('--'), chalkFunc(typeof arg === 'string' ? arg : inspect(arg, { depth: null })));\n        } else if (typeof arg === 'string') {\n            log(chalkFunc(`${this.getStackInfo(this.info)} : `), chalkFunc(arg), chalkFunc(this.getStackInfo(func)));\n        } else {\n            log(chalkFunc(`\\n${this.getStackInfo(func)} ------------------`));\n            log(chalkFunc(inspect(arg, { depth: null })));\n            log(chalkFunc(`----------------------XXXXX----------------------\\n\\n`));\n        }\n    };\n\n    private _getStackTrace(func: Function | Error): string {\n        try {\n            const traceLogger = stackTrace.get(func)[0];\n            return `[${path.basename(traceLogger.getFileName())}][${traceLogger.getLineNumber()}]`;\n        } catch (e) {\n            return '[]';\n        }\n    }\n\n    private _getStackTracDetailed(func: Function | Error): string {\n        try {\n            const traceMessage = stackTrace.get(func).map(\n                (traceLogger: any) =>\n                    `[${path.basename(traceLogger.getFileName())}]\n                         [${path.basename(traceLogger.getMethodName())}]\n                         [${traceLogger.getLineNumber()}]`\n            );\n            return traceMessage.join('-');\n        } catch (e) {\n            return '[]';\n        }\n    }\n}\n\nexport const trace = new Trace();\n"]}