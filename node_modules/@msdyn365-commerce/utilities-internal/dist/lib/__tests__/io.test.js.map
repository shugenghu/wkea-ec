{"version":3,"file":"io.test.js","sourceRoot":"","sources":["../../../src/__tests__/io.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport 'jest';\nimport { safeFileExists, safeGetAllFilesPath, safeReadJson, safeReadJsonSync } from '../server';\n\ndescribe('validate io util methods', () => {\n    it('validate safeReadJson', async () => {\n        const traceToUse = {\n            error: jest.fn(),\n            debug: jest.fn()\n        };\n        expect(await safeReadJson('./src/__tests__/mocks/test1.json', traceToUse)).toEqual({});\n        expect(safeReadJsonSync('./src/__tests__/mocks/test1.json', traceToUse)).toEqual({});\n    });\n    it('validate safeReadJson should return undefined for non-existent-file', async () => {\n        const traceToUse = {\n            error: jest.fn(),\n            debug: jest.fn()\n        };\n        expect(await safeReadJson('/non-existent-file.json', traceToUse)).toBeUndefined();\n        expect(safeReadJsonSync('/non-existent-file.json', traceToUse)).toBeUndefined();\n    });\n    it('validate safeReadJson should return undefined for directory path', async () => {\n        const traceToUse = {\n            error: jest.fn(),\n            debug: jest.fn()\n        };\n        expect(await safeReadJson('./src/__tests__/mocks', traceToUse)).toBeUndefined();\n        expect(safeReadJsonSync('./src/__tests__/mocks', traceToUse)).toBeUndefined();\n    });\n    it('validate safeReadJson', async () => {\n        const traceToUse = {\n            error: jest.fn(),\n            debug: jest.fn()\n        };\n        expect(await safeFileExists('./src/__tests__/mocks/test1.json', traceToUse)).toBe('./src/__tests__/mocks/test1.json');\n    });\n    it('validate safeReadJson should return false for non-existent-file', async () => {\n        const traceToUse = {\n            error: jest.fn(),\n            debug: jest.fn()\n        };\n        expect(await safeFileExists('/non-existent-file.json', traceToUse)).toBeFalsy();\n    });\n    it('validate safeFileExists should return path for valid directory path', async () => {\n        const traceToUse = {\n            error: jest.fn(),\n            debug: jest.fn()\n        };\n        expect(await safeFileExists('./src/__tests__/mocks', traceToUse)).toBe('./src/__tests__/mocks');\n    });\n    it('validate safeFileExists should return false for invalid directory path', async () => {\n        const traceToUse = {\n            error: jest.fn(),\n            debug: jest.fn()\n        };\n        expect(await safeFileExists('./src/__tests__/invalid-directory', traceToUse)).toBeFalsy();\n    });\n    it('validate safeGetAllFilesPath should return paths to all files in the directory', async () => {\n        expect(await safeGetAllFilesPath('./src/__tests__/**/*.ts')).toEqual(['./src/__tests__/io.test.ts']);\n    });\n    it('validate safeGetAllFilesPath should return empty for invalid glob pattern', async () => {\n        expect(await safeGetAllFilesPath('./invalid-directory/__tests__/**/*.ts')).toEqual([]);\n    });\n});\n"]}