/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ICache } from '@msdyn365-commerce/cache-internal';
import { CacheType, IActionContext, IActionInput, IDataActionOptions } from '@msdyn365-commerce/core-internal';
import { ITelemetry } from '@msdyn365-commerce/telemetry-internal';
/**
 * This class contains the logic to batch and de-dupe the actions that can be executed.
 * This class is also responsible for checking and saving the action response to cache.
 */
export default class ActionExecutor {
    readonly action: Function;
    readonly cacheType: CacheType;
    private readonly isBatched;
    private readonly eventId;
    private readonly isObservable;
    private inputs;
    /**
     * @param action the action to execute
     * @param inputs the action input
     */
    constructor(action: Function, inputs: IActionInput[], telemetry: ITelemetry, dataActionOption?: IDataActionOptions);
    /**
     *
     * @param inputs add more inputs
     */
    addInputs(inputs: IActionInput[]): void;
    /** Execute the action  */
    execute(context: IActionContext, requestCache: ICache, appCache: ICache | null, bypassAppCache?: boolean, refreshingInputs?: IActionInput[]): Promise<IActionInput[]>;
    private _checkShouldInteractWithCache;
    private _fetchOutputsAndRunPostReadHook;
    private _removeDuplicates;
    private _getActionIdFromInputs;
    private _getActionFromId;
    private _runPreReadHooks;
    private _runPostReaderHooks;
    private _runPreReaderHooks;
    private _runPreHooks;
    private _runPostReadHooks;
    private _runPostHooks;
    /**
     * Add performance logging before and after calling the action?
     */
    private _actionWrapper;
    private _saveResponseToCache;
    /**
     * Method that executes a set of batchable observable data actions
     * @param uncached The uncached action inputs
     * @param requestCache The request cache
     * @param appCache The application cache, if available
     * @param context The action context
     */
    private _executeBatchedObservableActions;
    /**
     * Executes a standard (non-batched) observable data action
     * @param input The action input
     * @param requestCache The request cache
     * @param appCache The application cache, if available
     * @param context The action context
     */
    private _executeObservableAction;
    private _checkForCachedData;
    /**
     * Searches cache for mocks matching the inputs
     * @param inputs Current action inputs
     * @param context Current action context
     * @param requestCache Current request cache
     */
    private _interceptCacheForMocks;
    private _getMockItem;
    private _convertToJSError;
}
