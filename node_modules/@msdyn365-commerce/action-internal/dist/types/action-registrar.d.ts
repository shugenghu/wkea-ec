/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ActionPostHook, ActionPostReaderHook, ActionPreHook, ActionPreReaderHook, IAnyAction } from '@msdyn365-commerce/core-internal';
export declare namespace ActionRegistrar {
    type ActionRegistration = {
        action?: IAnyAction<unknown>;
        pre?: Set<ActionPreHook>;
        post?: Set<ActionPostHook<unknown>>;
        preRead?: Set<ActionPreHook>;
        postRead?: Set<ActionPostHook<unknown>>;
        preReader?: Set<ActionPreReaderHook>;
        postReader?: Set<ActionPostReaderHook<unknown>>;
    };
    const getRegistration: (id?: string | undefined) => ActionRegistration | undefined;
    const unwrapAction: (action: IAnyAction<unknown>) => IAnyAction<unknown>;
    /**
     * Gets the action registered with id
     * @param id - ID to look up action
     */
    const getAction: <TOut>(id?: string | undefined) => IAnyAction<TOut> | undefined;
    /**
     * registers action. Does nothing if action is already registered
     * @param id - ID to register action with
     * @param action - action to register
     */
    const registerAction: <T>(id: string, dataAction: IAnyAction<T>) => IAnyAction<T> | undefined;
    const registerPostHook: (id: string, hook: ActionPostHook<any> | ActionPostHook<any>[]) => ActionPostHook<any> | ActionPostHook<any>[];
    const registerPreHook: (id: string, hook: ActionPreHook | ActionPreHook[]) => ActionPreHook | ActionPreHook[];
    const registerPreReadOnlyHook: (id: string, hook: ActionPreHook | ActionPreHook[]) => ActionPreHook | ActionPreHook[];
    const registerPostReadOnlyHook: (id: string, hook: ActionPostHook<any> | ActionPostHook<any>[]) => ActionPostHook<any> | ActionPostHook<any>[];
    const registerPreReaderHook: (id: string, hook: ActionPreReaderHook | ActionPreReaderHook[]) => ActionPreReaderHook | ActionPreReaderHook[];
    const registerPostReaderHook: (id: string, hook: ActionPostReaderHook<any> | ActionPostReaderHook<any>[]) => ActionPostReaderHook<any> | ActionPostReaderHook<any>[];
    const getPreHooks: (id: string) => Set<ActionPreHook> | undefined;
    const getPostHooks: (id: string) => Set<ActionPostHook<unknown>> | undefined;
    const getPreReadHooks: (id: string) => Set<ActionPreHook> | undefined;
    const getPostReadHooks: (id: string) => Set<ActionPostHook<unknown>> | undefined;
    const getPreReaderHooks: (id: string) => Set<ActionPreReaderHook> | undefined;
    const getPostReaderHooks: (id: string) => Set<ActionPostReaderHook<unknown>> | undefined;
    /**
     * Resolves the action and returns first action in action chain. Registers action if not yet registered
     * @param id - Action id to look up or register under
     * @param action - Action function
     */
    const resolveAction: <T>(id: string, action: IAnyAction<T>) => IAnyAction<T> | undefined;
    const resolveRegistration: (id: string, action: IAnyAction<unknown>, preHooks?: ActionPreHook[] | undefined, postHooks?: ActionPostHook<unknown>[] | undefined, preReadHooks?: ActionPreHook[] | undefined, postReadHooks?: ActionPostHook<unknown>[] | undefined, preReaderHooks?: ActionPreReaderHook[] | undefined, postReaderHooks?: ActionPostReaderHook<unknown>[] | undefined) => ActionRegistration | undefined;
}
