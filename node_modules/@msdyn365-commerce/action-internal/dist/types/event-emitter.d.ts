/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
/** EventEmitter is available in node, but not on the browser,
 * this class attempts to polyfill that so the action context can remain Isomorphic
 */
/**
 * Type for event emitter listener callback
 */
export declare type ListenerCallback<T extends unknown[] = unknown[]> = (...args0: T) => void;
/**
 * Generic cast type
 */
export declare type GenericCallback = (...args: any) => void;
/**
 * Custom isomorphic event emitter implementation
 *
 * @export
 * @class CustomEventEmitter
 */
declare class CustomEventEmitter {
    private listeners;
    private eventEmitter;
    on<T extends unknown[] = unknown[]>(event: string, callback: ListenerCallback<T>): void;
    emit<T extends unknown[] = []>(event: string, ...args: T): boolean;
    removeAllListeners(event: string): void;
}
declare const _default: CustomEventEmitter;
export default _default;
