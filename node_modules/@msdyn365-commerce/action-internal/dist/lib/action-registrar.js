/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { msdyn365Commerce } from '@msdyn365-commerce/core-internal';
import { LogLevel, StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';
const DEPRECATED_HOOK_TYPES = ['pre', 'post', 'preRead', 'postRead'];
export var ActionRegistrar;
(function (ActionRegistrar) {
    const dataActionRegister = {};
    ActionRegistrar.getRegistration = (id) => {
        return id ? dataActionRegister[id] : undefined;
    };
    ActionRegistrar.unwrapAction = (action) => {
        if (action && action.prototype && !action.prototype.isAction) {
            // registered action is an action wrapper. Unwrap it.
            return action.prototype.Action;
        }
        return action;
    };
    /**
     * Gets the action registered with id
     * @param id - ID to look up action
     */
    ActionRegistrar.getAction = (id) => {
        if (!id) {
            return;
        }
        const registeredAction = dataActionRegister[id];
        if (registeredAction) {
            return registeredAction.action;
        }
        return;
    };
    /**
     * registers action. Does nothing if action is already registered
     * @param id - ID to register action with
     * @param action - action to register
     */
    ActionRegistrar.registerAction = (id, dataAction) => {
        if (!id || !dataAction) {
            // unable to register no id or action
            return;
        }
        if (dataActionRegister[id]) {
            const registration = dataActionRegister[id];
            registration.action = dataAction;
            return dataActionRegister[id].action;
        }
        else {
            const registration = { action: dataAction };
            dataActionRegister[id] = registration;
            return dataAction;
        }
    };
    const registerHook = (hookType) => (id, hook) => {
        // deprecate read only hook
        if (!msdyn365Commerce.isBrowser && DEPRECATED_HOOK_TYPES.indexOf(hookType) > -1) {
            StaticTelemetry.log(LogLevel.Warning, `Data action hooks are deprecated and will be removed in later versions. Please use data action overrides to extend data actions. The related action of this ${hookType} hook is - ${id}`);
        }
        const registration = ActionRegistrar.getRegistration(id);
        // coerce hook into an iterable
        const hooks = Array.isArray(hook) ? hook : [hook];
        if (!registration) {
            // If the registration does not exist init one with just the hooks
            const newRegistration = {};
            newRegistration[hookType] = new Set(hooks);
            dataActionRegister[id] = newRegistration;
        }
        else {
            // If the registration does exist merge new hooks with existing hooks
            const hookRegistration = registration[hookType] || new Set();
            hooks.forEach(h => {
                hookRegistration.add(h);
            });
            // @ts-ignore
            registration[hookType] = hookRegistration;
        }
        return hook;
    };
    // tslint:disable-next-line: no-any
    ActionRegistrar.registerPostHook = registerHook('post');
    ActionRegistrar.registerPreHook = registerHook('pre');
    ActionRegistrar.registerPreReadOnlyHook = registerHook('preRead');
    // tslint:disable-next-line: no-any
    ActionRegistrar.registerPostReadOnlyHook = registerHook('postRead');
    ActionRegistrar.registerPreReaderHook = registerHook('preReader');
    // tslint:disable-next-line: no-any
    ActionRegistrar.registerPostReaderHook = registerHook('postReader');
    ActionRegistrar.getPreHooks = (id) => {
        return dataActionRegister[id] && dataActionRegister[id].pre;
    };
    ActionRegistrar.getPostHooks = (id) => {
        return dataActionRegister[id] && dataActionRegister[id].post;
    };
    ActionRegistrar.getPreReadHooks = (id) => {
        return dataActionRegister[id] && dataActionRegister[id].preRead;
    };
    ActionRegistrar.getPostReadHooks = (id) => {
        return dataActionRegister[id] && dataActionRegister[id].postRead;
    };
    ActionRegistrar.getPreReaderHooks = (id) => {
        return dataActionRegister[id] && dataActionRegister[id].preReader;
    };
    ActionRegistrar.getPostReaderHooks = (id) => {
        return dataActionRegister[id] && dataActionRegister[id].postReader;
    };
    /**
     * Resolves the action and returns first action in action chain. Registers action if not yet registered
     * @param id - Action id to look up or register under
     * @param action - Action function
     */
    ActionRegistrar.resolveAction = (id, action) => {
        return ActionRegistrar.getAction(id) || ActionRegistrar.registerAction(id, action) || action;
    };
    ActionRegistrar.resolveRegistration = (id, action, preHooks, postHooks, preReadHooks, postReadHooks, preReaderHooks, postReaderHooks) => {
        const resolvedAction = ActionRegistrar.resolveAction(id, action);
        if (!resolvedAction) {
            return;
        }
        preHooks && ActionRegistrar.registerPreHook(id, preHooks);
        postHooks && ActionRegistrar.registerPostHook(id, postHooks);
        preReadHooks && ActionRegistrar.registerPreReadOnlyHook(id, preReadHooks);
        postReadHooks && ActionRegistrar.registerPostReadOnlyHook(id, postReadHooks);
        preReaderHooks && ActionRegistrar.registerPreReaderHook(id, preReaderHooks);
        postReaderHooks && ActionRegistrar.registerPostReaderHook(id, postReaderHooks);
        return ActionRegistrar.getRegistration(id);
    };
})(ActionRegistrar || (ActionRegistrar = {}));
//# sourceMappingURL=action-registrar.js.map