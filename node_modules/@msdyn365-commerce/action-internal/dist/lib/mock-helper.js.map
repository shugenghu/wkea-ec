{"version":3,"file":"mock-helper.js","sourceRoot":"","sources":["../../src/mock-helper.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAC;AAEjE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,OAAiC,EAAkB,EAAE;IAChG,OAAO,IAAI,aAAa,CAAC;QACrB,EAAE,EAAE,cAAc;QAClB,YAAY,EAAE,IAAI,YAAY,EAAE;QAChC,cAAc,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE;QACzD,QAAQ,EAAE,IAAI;KACjB,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { RequestCache } from '@msdyn365-commerce/cache-internal';\nimport { IActionContext } from '@msdyn365-commerce/core-internal';\nimport { ActionContext } from './action-context';\n\n/**\n * Creates a mock but usable ActionContext.\n * @param context The partial context to add to the return action context.\n *\n * DEPRECATED: Please use buildMockActionContext and pass in a constructed\n * ActionContext to build a hydrated mock action context\n * Example:\n *      const actionContext = buildMockActionContext(new ActionContext({\n *           id: 'mock-context',\n *           requestCache: new RequestCache(),\n *           requestContext: {},\n *           appCache: null\n *       }));\n *\n */\nexport const buildHydratedMockActionContext = (context?: Partial<IActionContext>): IActionContext => {\n    return new ActionContext({\n        id: 'mock-context',\n        requestCache: new RequestCache(),\n        requestContext: (context && context.requestContext) || {},\n        appCache: null\n    });\n};\n"]}