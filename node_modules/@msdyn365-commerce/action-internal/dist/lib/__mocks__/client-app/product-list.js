/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { __decorate, __metadata } from "tslib";
import { observer } from 'mobx-react';
import React from 'react';
import addToCartAction, { AddToCartInput } from '../actions/add-cart';
import getCartData, { CartInput } from '../actions/get-cart';
import getRecommendationData, { RecoInput } from '../actions/get-recommendation-products';
import removeFromCartAction, { RemoveFromCartInput } from '../actions/remove-cart';
/*@internal*/
let ProductList = class ProductList extends React.Component {
    constructor(props) {
        super(props);
        this.state = { products: [], cart: undefined };
    }
    async componentWillMount() {
        const ctx = this.props.actionContext;
        const [recommendations, cart] = await Promise.all([
            getRecommendationData(new RecoInput(this.props.channel), ctx),
            getCartData(new CartInput(), ctx)
        ]);
        const recoProducts = !!recommendations ? recommendations.products : undefined;
        this.props.actionContext.trace('Recommendations' + JSON.stringify(recommendations));
        this.setState({
            products: recoProducts,
            cart: cart
        });
    }
    render() {
        const cart = this.state.cart;
        return (React.createElement("div", null,
            React.createElement("h3", null, this.props.channel),
            React.createElement("div", { className: 'row' }, this.state.products
                ? this.state.products.map((p) => {
                    const inCart = !!cart && !!cart.lines && !!cart.lines.find(l => l.productId === p.product.Id);
                    return (React.createElement(ProductComponent, { channel: this.props.channel, product: p.product, inCart: inCart, actionContext: this.props.actionContext, key: `${this.props.channel}|${p.product.Id}` }));
                })
                : '')));
    }
};
ProductList = __decorate([
    observer,
    __metadata("design:paramtypes", [Object])
], ProductList);
export default ProductList;
class ProductComponent extends React.PureComponent {
    constructor(props) {
        super(props);
    }
    async addToCart() {
        this.props.actionContext.trace(`Calling add to cart with id: ${this.props.product.Id}`);
        // await this.props.actionContext.chainAction(AddToCart, new AddToCartInput(this.props.product, 1));
        await addToCartAction(new AddToCartInput(this.props.product, 1), this.props.actionContext);
    }
    async removeFromCart() {
        this.props.actionContext.trace(`Calling remove to cart with id: ${this.props.product.Id}`);
        await removeFromCartAction(new RemoveFromCartInput(this.props.product), this.props.actionContext);
    }
    render() {
        return (React.createElement("div", { className: 'col-12 col-sm-6 col-lg-3' },
            React.createElement("div", { className: 'card' },
                React.createElement("div", { className: 'card-body' },
                    React.createElement("h5", { className: 'card-title' }, this.props.product.Title),
                    React.createElement("p", { className: 'card-text' }, this.props.product.Description),
                    this.props.inCart ? (React.createElement("a", { href: '#', className: 'btn btn-secondary', onClick: () => this.removeFromCart() }, "Remove from Cart")) : (React.createElement("a", { href: '#', className: 'btn btn-primary', onClick: () => this.addToCart() }, "Add To Cart"))))));
    }
}
//# sourceMappingURL=product-list.js.map