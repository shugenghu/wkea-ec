{"version":3,"file":"get-long-chain.js","sourceRoot":"","sources":["../../../../src/__mocks__/actions/get-long-chain.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAC5D,OAAO,iBAAiB,EAAE,EAAiB,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAC7F,OAAO,WAAW,EAAE,EAAe,YAAY,EAAE,MAAM,gBAAgB,CAAC;AACxE,OAAO,yBAAyB,EAAE,EAAE,SAAS,EAAc,MAAM,+BAA+B,CAAC;AAEjG,aAAa;AACb,MAAM,OAAO,cAAc;IAGvB,YAAY,EAAU;QAIf,sBAAiB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;QAChC,uBAAkB,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC;QAClC,gBAAW,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;QALhC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAClB,CAAC;CAKJ;AAED,KAAK,UAAU,YAAY,CAAC,KAAqB,EAAE,GAAmB;IAClE,MAAM,MAAM,GAAoB,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;IAC/C,MAAM,QAAQ,GAAG,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAkB,CAAC;IAClG,MAAM,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAoB,CAAC;IAC/G,MAAM,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,yBAAyB,EAAE,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAe,CAAC;IACvG,MAAM,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,yBAAyB,EAAE,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,CAAe,CAAC;IACtG,MAAM,QAAQ,GAAG,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAkB,CAAC;IAClG,MAAM,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAoB,CAAC;IAE/G,8BAA8B;IAC9B,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,KAAK,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE7E,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,MAAM,eAAe,GAAG,CAAC,GAAyB,EAAgB,EAAE;IAChE,OAAO,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,aAAa;AACb,eAAe,gBAAgB,CAAC;IAC5B,MAAM,EAAE,YAAwC;IAChD,KAAK,EAAE,eAAe;CACzB,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAction, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core-internal';\nimport { createDataAction } from '../../create-data-action';\nimport GetProductRatings, { ProductRating, ProductRatingInput } from './get-product-ratings';\nimport GetProducts, { MockProduct, ProductInput } from './get-products';\nimport GetRecommendationProducts, { RecoInput, RecoOutput } from './get-recommendation-products';\n\n/*@internal*/\nexport class LongChainInput implements IActionInput {\n    public foo: string;\n\n    constructor(id: string) {\n        this.foo = id;\n    }\n\n    public shouldCacheOutput = () => false;\n    public getCacheObjectType = () => 'RECO';\n    public getCacheKey = () => this.foo;\n}\n\nasync function GetLongChain(input: LongChainInput, ctx: IActionContext): Promise<LongChainOutput> {\n    const output: LongChainOutput = { results: 0 };\n    const product1 = (await ctx.chainAction(GetProducts, [new ProductInput('110')])) as MockProduct[];\n    const rating1 = (await ctx.chainAction(GetProductRatings, [new ProductRatingInput('110')])) as ProductRating[];\n    const reco1 = (await ctx.chainAction(GetRecommendationProducts, new RecoInput('games'))) as RecoOutput;\n    const reco2 = (await ctx.chainAction(GetRecommendationProducts, new RecoInput('apps'))) as RecoOutput;\n    const product2 = (await ctx.chainAction(GetProducts, [new ProductInput('112')])) as MockProduct[];\n    const rating2 = (await ctx.chainAction(GetProductRatings, [new ProductRatingInput('112')])) as ProductRating[];\n\n    // Count products with ratings\n    let count = product1.length === 1 && product1.length === rating1.length ? 1 : 0;\n    count += reco1.products ? reco1.products.length : 0;\n    count += reco2.products ? reco2.products.length : 0;\n    count += product2.length === 1 && product2.length === rating2.length ? 1 : 0;\n\n    output.results = count;\n    return output;\n}\n\nconst createTestInput = (arg: ICreateActionContext): IActionInput => {\n    return new LongChainInput('bar');\n};\n\n/*@internal*/\nexport default createDataAction({\n    action: GetLongChain as IAction<LongChainOutput>,\n    input: createTestInput\n});\n\nexport interface LongChainOutput {\n    results: number;\n}\n"]}