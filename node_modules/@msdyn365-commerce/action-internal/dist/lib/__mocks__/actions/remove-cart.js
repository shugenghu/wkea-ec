/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createDataAction } from '../../create-data-action';
import GetCart, { CartInput } from './get-cart';
/*@internal*/
export class RemoveFromCartInput {
    constructor(product) {
        this.getCacheObjectType = () => this.cartInput.getCacheObjectType();
        this.getCacheKey = () => this.cartInput.getCacheKey();
        this.shouldCacheOutput = () => false;
        this.cartInput = new CartInput();
        this.productId = product.Id;
    }
}
async function removeFromCart(input, ctx) {
    // var cartInfo = await ctx.chainAction(GetCart, input) as ICartInfo;
    const cartInfo = await GetCart(input.cartInput, ctx);
    if (!!cartInfo) {
        const productLineIndex = cartInfo.lines.findIndex(line => line.productId === input.productId);
        if (productLineIndex !== -1) {
            cartInfo.lines.splice(productLineIndex, 1);
        }
    }
    // For any write call, we'll need to fire the update manually
    ctx.update(input.cartInput, cartInfo);
    return Promise.resolve({ lines: cartInfo.lines });
}
/*@internal*/
export default createDataAction({
    action: removeFromCart
});
//# sourceMappingURL=remove-cart.js.map