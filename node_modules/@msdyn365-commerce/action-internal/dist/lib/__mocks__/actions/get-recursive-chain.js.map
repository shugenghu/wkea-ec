{"version":3,"file":"get-recursive-chain.js","sourceRoot":"","sources":["../../../../src/__mocks__/actions/get-recursive-chain.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAE5D,aAAa;AACb,MAAM,OAAO,mBAAmB;IAI5B,YAAY,SAAiB,EAAE,YAAqB;QAK7C,sBAAiB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;QAChC,uBAAkB,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC;QACrC,gBAAW,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC;QANjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,CAAC,CAAC;IAC1C,CAAC;CAKJ;AAED,KAAK,UAAU,iBAAiB,CAAC,KAA0B,EAAE,GAAmB;IAC5E,MAAM,MAAM,GAAyB,EAAE,kBAAkB,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC;IAEhF,8HAA8H;IAC9H,IAAI,KAAK,CAAC,YAAY,KAAK,KAAK,CAAC,SAAS,EAAE;QACxC,OAAO,MAAM,CAAC;KACjB;SAAM;QACH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,IAAI,mBAAmB,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACvG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC;KACjE;AACL,CAAC;AAED,MAAM,eAAe,GAAG,CAAC,GAA8B,EAAgB,EAAE;IACrE,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE;QACpC,OAAO,IAAI,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;KAC3D;IAED,OAAO,IAAI,mBAAmB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,gBAAgB,CAAC;IAChC,MAAM,EAAE,iBAAkD;IAC1D,KAAK,EAAE,eAAe;CACzB,CAAC,CAAC;AAEH,aAAa;AACb,eAAe,UAAU,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAction, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core-internal';\nimport { createDataAction } from '../../create-data-action';\n\n/*@internal*/\nexport class RecursiveChainInput implements IActionInput {\n    public loopCount: number;\n    public currentCount: number;\n\n    constructor(loopCount: number, currentCount?: number) {\n        this.loopCount = loopCount;\n        this.currentCount = currentCount || 0;\n    }\n\n    public shouldCacheOutput = () => false;\n    public getCacheObjectType = () => 'nocache';\n    public getCacheKey = () => 'nocache';\n}\n\nasync function GetRecursiveChain(input: RecursiveChainInput, ctx: IActionContext): Promise<RepeatingChainOutput> {\n    const output: RepeatingChainOutput = { recursionsComplete: input.currentCount };\n\n    // ctx.trace('Starting repeating chain action with loop count: ' + input.loopCount + ' current count: ' + input.currentCount);\n    if (input.currentCount === input.loopCount) {\n        return output;\n    } else {\n        const result = await dataAction(new RecursiveChainInput(input.loopCount, input.currentCount + 1), ctx);\n        return (Array.isArray(result) ? result[0] : result) || output;\n    }\n}\n\nconst createTestInput = (arg: ICreateActionContext<any>): IActionInput => {\n    if (arg.config && arg.config.loopCount) {\n        return new RecursiveChainInput(arg.config.loopCount, 0);\n    }\n\n    return new RecursiveChainInput(1, 0);\n};\n\nconst dataAction = createDataAction({\n    action: GetRecursiveChain as IAction<RepeatingChainOutput>,\n    input: createTestInput\n});\n\n/*@internal*/\nexport default dataAction;\n\nexport interface RepeatingChainOutput {\n    recursionsComplete: number;\n}\n"]}