/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createDataAction } from '../../create-data-action';
import GetProductRatings, { ProductRatingInput } from './get-product-ratings';
import GetProducts, { ProductInput } from './get-products';
import GetRecommendationProducts, { RecoInput } from './get-recommendation-products';
/*@internal*/
export class LongChainInput {
    constructor(id) {
        this.shouldCacheOutput = () => false;
        this.getCacheObjectType = () => 'RECO';
        this.getCacheKey = () => this.foo;
        this.foo = id;
    }
}
async function GetLongChain(input, ctx) {
    const output = { results: 0 };
    const product1 = (await ctx.chainAction(GetProducts, [new ProductInput('110')]));
    const rating1 = (await ctx.chainAction(GetProductRatings, [new ProductRatingInput('110')]));
    const reco1 = (await ctx.chainAction(GetRecommendationProducts, new RecoInput('games')));
    const reco2 = (await ctx.chainAction(GetRecommendationProducts, new RecoInput('apps')));
    const product2 = (await ctx.chainAction(GetProducts, [new ProductInput('112')]));
    const rating2 = (await ctx.chainAction(GetProductRatings, [new ProductRatingInput('112')]));
    // Count products with ratings
    let count = product1.length === 1 && product1.length === rating1.length ? 1 : 0;
    count += reco1.products ? reco1.products.length : 0;
    count += reco2.products ? reco2.products.length : 0;
    count += product2.length === 1 && product2.length === rating2.length ? 1 : 0;
    output.results = count;
    return output;
}
const createTestInput = (arg) => {
    return new LongChainInput('bar');
};
/*@internal*/
export default createDataAction({
    action: GetLongChain,
    input: createTestInput
});
//# sourceMappingURL=get-long-chain.js.map