/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createDataAction } from '../../create-data-action';
import getCategoriesAsync, { CategoryInput } from './get-categories';
import GetProducts, { ProductInput } from './get-products';
import searchByCategoryAsync, { ProductSearchInput } from './search-products-by-category';
/*@internal*/
export class ProductsByCategoryInput {
    constructor(id, name) {
        this.shouldCacheOutput = () => true;
        this.getCacheObjectType = () => 'GetProductByCategory';
        this.getCacheKey = () => `${this.categoryId}|${this.categoryName}`;
        this.categoryId = id;
        this.categoryName = name;
    }
}
/**
 * createInput method for the getProductsByCategory data aciton
 */
export const createGetProductsByCategoryInput = (arg) => {
    if (!arg.config || (!arg.config.categoryId && !arg.config.categoryName)) {
        throw new Error('Please specify categoryId or categoryName.');
    }
    return new ProductsByCategoryInput(arg.config.categoryId, arg.config.categoryName);
};
async function GetProductByCategory(input, ctx) {
    ctx.trace(`Calling GetProductByCategory with category: ${input.categoryId}|${input.categoryName}`);
    let categoryId = input.categoryId;
    if (!categoryId) {
        const categories = await getCategoriesAsync(new CategoryInput('mock-chanel-id'), ctx);
        if (!categories || categories.length === 0) {
            throw new Error(`get categories failed for channel ID`);
        }
        categories.forEach((category) => {
            if (category.Name.toLowerCase() === input.categoryName.toLowerCase()) {
                categoryId = category.Id;
            }
        });
    }
    if (!categoryId) {
        throw new Error(`Invalid category name - '[${input.categoryName}]'`);
    }
    const productInputs = await searchByCategoryAsync(new ProductSearchInput(categoryId), ctx).then(productSearchResults => {
        return productSearchResults.map((product) => {
            return new ProductInput(product.RecordId);
        });
    });
    if (productInputs.length > 0) {
        return GetProducts(productInputs, ctx);
    }
    else {
        return [];
    }
}
export const productForCategoryNameAA3 = [
    { Id: '108', Title: 'Product 108', Description: 'Product Description for 108' },
    { Id: '109', Title: 'Product 109', Description: 'Product Description for 109' },
    { Id: '104', Title: 'Product 104', Description: 'Product Description for 104' },
    { Id: '111', Title: 'Product 111', Description: 'Product Description for 111' }
];
export const productForCategoryIdC103 = [
    { Id: '103', Title: 'Product 103', Description: 'Product Description for 103' },
    { Id: '106', Title: 'Product 106', Description: 'Product Description for 106' },
    { Id: '108', Title: 'Product 108', Description: 'Product Description for 108' },
    { Id: '112', Title: 'Product 112', Description: 'Product Description for 112' },
    { Id: '107', Title: 'Product 107', Description: 'Product Description for 107' },
    { Id: '104', Title: 'Product 104', Description: 'Product Description for 104' }
];
/*@internal*/
export default createDataAction({
    action: GetProductByCategory,
    input: createGetProductsByCategoryInput
});
//# sourceMappingURL=get-products-by-category.js.map