{"version":3,"file":"get-list-data.js","sourceRoot":"","sources":["../../../../src/__mocks__/actions/get-list-data.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAC5D,OAAO,eAAe,EAAE,EAAE,SAAS,EAAc,MAAM,+BAA+B,CAAC;AAEvF,aAAa;AACb,MAAM,CAAC,IAAI,uCAAuC,GAAW,CAAC,CAAC;AAE/D,aAAa;AACb,MAAM,OAAO,SAAS;IAGlB,YAAY,EAAU;QAIf,sBAAiB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;QAChC,uBAAkB,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC;QAClC,gBAAW,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC;QALpC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACtB,CAAC;CAKJ;AAED,KAAK,UAAU,WAAW,CAAC,KAAgB,EAAE,GAAmB;IAC5D,GAAG,CAAC,KAAK,CAAC,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7C,uCAAuC,EAAE,CAAC;IAE1C,+EAA+E;IAC/E,+EAA+E;IAE/E,OAAO,eAAe,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,eAAe,GAAG,CAAC,GAAmC,EAAgB,EAAE;IAC1E,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;QAC3F,OAAO,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC/C;IAED,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,aAAa;AACb,eAAe,gBAAgB,CAAC;IAC5B,MAAM,EAAE,WAAkC;IAC1C,KAAK,EAAE,eAAe;CACzB,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAction, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core-internal';\nimport { createDataAction } from '../../create-data-action';\nimport GetRecoProducts, { RecoInput, RecoOutput } from './get-recommendation-products';\n\n/*@internal*/\nexport let numberOfTimesGetistDataCalledDuringTest: number = 0;\n\n/*@internal*/\nexport class ListInput implements IActionInput {\n    public Channel: string;\n\n    constructor(id: string) {\n        this.Channel = id;\n    }\n\n    public shouldCacheOutput = () => false;\n    public getCacheObjectType = () => 'LIST';\n    public getCacheKey = () => this.Channel;\n}\n\nasync function GetListData(input: ListInput, ctx: IActionContext): Promise<RecoOutput> {\n    ctx.trace('List Channels: ' + input.Channel);\n    numberOfTimesGetistDataCalledDuringTest++;\n\n    // If we want to move the reco call to the next TIER, un-comment the below line\n    // return await ctx.chainAction(GetRecoProducts, new RecoInput(input.Channel));\n\n    return GetRecoProducts(new RecoInput(input.Channel), ctx);\n}\n\nconst createListInput = (arg: ICreateActionContext<any, any>): IActionInput => {\n    if (arg.config && arg.data.list && arg.data.list.listType === 'Reco' && arg.data.list.channel) {\n        return new RecoInput(arg.data.list.channel);\n    }\n\n    throw new Error('data is not well defined for list action input');\n};\n\n/*@internal*/\nexport default createDataAction({\n    action: GetListData as IAction<RecoOutput>,\n    input: createListInput\n});\n"]}