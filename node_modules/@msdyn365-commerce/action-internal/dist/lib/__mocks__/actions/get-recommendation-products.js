/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createDataAction } from '../../create-data-action';
import GetProductRatings, { ProductRatingInput } from './get-product-ratings';
import GetProducts, { ProductInput } from './get-products';
/*@internal*/
export class RecoInput {
    constructor(id) {
        this.shouldCacheOutput = () => true;
        this.getCacheObjectType = () => 'RECO';
        this.getCacheKey = () => this.Channel;
        this.Channel = id;
    }
}
async function GetRecoProducts(input, ctx) {
    ctx.trace('Calling reco with channel: ' + input.Channel);
    // Fetch Reco product id list
    const items = mockChannelData[input.Channel];
    const output = {};
    const productInputs = items.map(i => new ProductInput(i));
    if (items !== null) {
        // Fetch products
        const productResponse = (await ctx.chainAction(GetProducts, productInputs));
        output.responseIds = items;
        if (productResponse === null) {
            output.products = [];
            return output;
        }
        // Fetch product ratings
        // TODO: Add support for parallel fetch on same tier
        const productRatingInputs = items.map(i => new ProductRatingInput(i));
        const ratingResponse = (await ctx.chainAction(GetProductRatings, productRatingInputs));
        if (ratingResponse !== null) {
            const productsWithRating = [];
            productResponse.forEach(product => {
                const rating = ratingResponse.find(r => r.Id === product.Id);
                const productWithRating = { product: product, rating: rating ? rating.Rating : undefined };
                productsWithRating.push(productWithRating);
            });
            output.products = productsWithRating;
        }
    }
    return output;
}
const createRecoInput = (arg) => {
    if (arg.config && arg.config.channel) {
        return new RecoInput(arg.config.channel);
    }
    throw new Error('config is not well defined for reco input');
};
/*@internal*/
export default createDataAction({
    action: GetRecoProducts,
    input: createRecoInput
});
/*@internal*/
export const mockChannelData = {
    'top-free': ['100', '102', '103', '104'],
    trending: ['108', '101', '103', '106'],
    'top-paid': ['106', '108', '105', '107'],
    games: ['109', '108'],
    apps: ['111', '104']
};
//# sourceMappingURL=get-recommendation-products.js.map