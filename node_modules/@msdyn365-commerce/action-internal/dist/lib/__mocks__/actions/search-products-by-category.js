/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createDataAction } from '../../create-data-action';
/*@internal*/
export let numberOfTimesGetProductCalledDuringTest = 0;
/*@internal*/
export class ProductSearchInput {
    constructor(id) {
        this.shouldCacheOutput = () => true;
        this.getCacheObjectType = () => 'ProductSearch';
        this.getCacheKey = () => this.categoryId;
        this.categoryId = id;
    }
}
async function GetProductSearch(inputs, ctx) {
    ctx.trace(`Calling GetProductSearch with : ${inputs.categoryId}`);
    const products = mockCategory && Object.keys(mockCategory).indexOf(inputs.categoryId) > -1 ? mockCategory[inputs.categoryId] : undefined;
    return Promise.resolve(products);
}
const createGetProductsInput = (arg) => {
    if (arg.config && arg.config.categoryId) {
        return new ProductSearchInput(arg.config.categoryId);
    }
    throw new Error('config is not well defined for ProductSearchInput input');
};
/*@internal*/
export const mockCategory = {
    C100: [{ RecordId: '100' }, { RecordId: '103' }, { RecordId: '105' }],
    C101: [{ RecordId: '102' }, { RecordId: '106' }, { RecordId: '101' }, { RecordId: '103' }, { RecordId: '105' }],
    C102: [{ RecordId: '108' }, { RecordId: '109' }, { RecordId: '104' }, { RecordId: '111' }],
    C103: [{ RecordId: '103' }, { RecordId: '106' }, { RecordId: '108' }, { RecordId: '112' }, { RecordId: '107' }, { RecordId: '104' }],
    C104: [{ RecordId: '109' }, { RecordId: '111' }]
};
/*@internal*/
export default createDataAction({
    action: GetProductSearch,
    input: createGetProductsInput
});
//# sourceMappingURL=search-products-by-category.js.map