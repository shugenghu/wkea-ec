{"version":3,"file":"add-cart.js","sourceRoot":"","sources":["../../../../src/__mocks__/actions/add-cart.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAC5D,OAAO,OAAO,EAAE,EAAE,SAAS,EAAa,MAAM,YAAY,CAAC;AAG3D;;GAEG;AACH,aAAa;AACb,MAAM,OAAO,cAAc;IAKvB,YAAY,OAAoB,EAAE,QAAgB;QAO3C,uBAAkB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QAC/D,gBAAW,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACjD,sBAAiB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;QARnC,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;CAKJ;AAED,KAAK,UAAU,SAAS,CAAC,KAAqB,EAAE,GAAmB;IAC/D,qEAAqE;IACrE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IACrD,IAAI,CAAC,CAAC,QAAQ,EAAE;QACZ,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,CAAC,CAAC;QACpF,IAAI,CAAC,CAAC,WAAW,EAAE;YACf,WAAW,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC;SAC1C;aAAM;YACH,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;SACzG;KACJ;IAED,gEAAgE;IAChE,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC5B,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;AACtD,CAAC;AAED,aAAa;AACb,eAAe,gBAAgB,CAAC,EAAE,MAAM,EAAE,SAA+B,EAAE,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAction, IActionContext, IActionInput } from '@msdyn365-commerce/core-internal';\nimport { createDataAction } from '../../create-data-action';\nimport GetCart, { CartInput, ICartInfo } from './get-cart';\nimport { MockProduct } from './get-products';\n\n/**\n * ad to cart input class\n */\n/*@internal*/\nexport class AddToCartInput implements IActionInput {\n    public cartInput: CartInput;\n    public productId: string;\n    public quantity: number;\n    public price: number;\n    constructor(product: MockProduct, quantity: number) {\n        this.cartInput = new CartInput();\n        this.productId = product.Id;\n        this.price = 100;\n        this.quantity = quantity;\n    }\n\n    public getCacheObjectType = () => this.cartInput.getCacheObjectType();\n    public getCacheKey = () => this.cartInput.getCacheKey();\n    public shouldCacheOutput = () => false;\n}\n\nasync function addToCart(input: AddToCartInput, ctx: IActionContext): Promise<ICartInfo> {\n    // var cartInfo = await ctx.chainAction(GetCart, input) as ICartInfo;\n    const cartInfo = await GetCart(input.cartInput, ctx);\n    if (!!cartInfo) {\n        const productLine = cartInfo.lines.find(line => line.productId === input.productId);\n        if (!!productLine) {\n            productLine.quantity += input.quantity;\n        } else {\n            cartInfo.lines.push({ productId: input.productId, quantity: input.quantity, userPrice: input.price });\n        }\n    }\n\n    // If the method gets called directly, then update will not fire\n    ctx.update(input, cartInfo);\n    return Promise.resolve({ lines: cartInfo.lines });\n}\n\n/*@internal*/\nexport default createDataAction({ action: addToCart as IAction<ICartInfo> });\n"]}