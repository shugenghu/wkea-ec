/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createDataAction } from '../../create-data-action';
import GetProducts, { ProductInput } from './get-products';
/*@internal*/
export class RepeatingChainInput {
    constructor(loopCount) {
        this.shouldCacheOutput = () => false;
        this.getCacheObjectType = () => 'nocache';
        this.getCacheKey = () => 'nocache';
        this.loopCount = loopCount;
    }
}
async function GetRepeatingChain(input, ctx) {
    const output = { iterationsCompleted: 0 };
    let iterationsCompleted = 0;
    ctx.trace('Starting repeating chain action with loop count: ' + input.loopCount);
    for (let i = 0; i < input.loopCount; i++) {
        const result = await GetProducts([new ProductInput('101')], ctx);
        if (!result) {
            break;
        }
        iterationsCompleted++;
    }
    output.iterationsCompleted = iterationsCompleted;
    return output;
}
const createTestInput = (arg) => {
    if (arg.config && arg.config.loopCount) {
        return new RepeatingChainInput(arg.config.loopCount);
    }
    return new RepeatingChainInput(1);
};
const dataAction = createDataAction({
    action: GetRepeatingChain,
    input: createTestInput
});
/*@internal*/
export default dataAction;
//# sourceMappingURL=get-repeating-chain.js.map