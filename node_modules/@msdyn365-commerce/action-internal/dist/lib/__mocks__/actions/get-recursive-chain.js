/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createDataAction } from '../../create-data-action';
/*@internal*/
export class RecursiveChainInput {
    constructor(loopCount, currentCount) {
        this.shouldCacheOutput = () => false;
        this.getCacheObjectType = () => 'nocache';
        this.getCacheKey = () => 'nocache';
        this.loopCount = loopCount;
        this.currentCount = currentCount || 0;
    }
}
async function GetRecursiveChain(input, ctx) {
    const output = { recursionsComplete: input.currentCount };
    // ctx.trace('Starting repeating chain action with loop count: ' + input.loopCount + ' current count: ' + input.currentCount);
    if (input.currentCount === input.loopCount) {
        return output;
    }
    else {
        const result = await dataAction(new RecursiveChainInput(input.loopCount, input.currentCount + 1), ctx);
        return (Array.isArray(result) ? result[0] : result) || output;
    }
}
const createTestInput = (arg) => {
    if (arg.config && arg.config.loopCount) {
        return new RecursiveChainInput(arg.config.loopCount, 0);
    }
    return new RecursiveChainInput(1, 0);
};
const dataAction = createDataAction({
    action: GetRecursiveChain,
    input: createTestInput
});
/*@internal*/
export default dataAction;
//# sourceMappingURL=get-recursive-chain.js.map