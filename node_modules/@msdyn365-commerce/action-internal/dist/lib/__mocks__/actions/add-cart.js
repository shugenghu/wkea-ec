/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createDataAction } from '../../create-data-action';
import GetCart, { CartInput } from './get-cart';
/**
 * ad to cart input class
 */
/*@internal*/
export class AddToCartInput {
    constructor(product, quantity) {
        this.getCacheObjectType = () => this.cartInput.getCacheObjectType();
        this.getCacheKey = () => this.cartInput.getCacheKey();
        this.shouldCacheOutput = () => false;
        this.cartInput = new CartInput();
        this.productId = product.Id;
        this.price = 100;
        this.quantity = quantity;
    }
}
async function addToCart(input, ctx) {
    // var cartInfo = await ctx.chainAction(GetCart, input) as ICartInfo;
    const cartInfo = await GetCart(input.cartInput, ctx);
    if (!!cartInfo) {
        const productLine = cartInfo.lines.find(line => line.productId === input.productId);
        if (!!productLine) {
            productLine.quantity += input.quantity;
        }
        else {
            cartInfo.lines.push({ productId: input.productId, quantity: input.quantity, userPrice: input.price });
        }
    }
    // If the method gets called directly, then update will not fire
    ctx.update(input, cartInfo);
    return Promise.resolve({ lines: cartInfo.lines });
}
/*@internal*/
export default createDataAction({ action: addToCart });
//# sourceMappingURL=add-cart.js.map