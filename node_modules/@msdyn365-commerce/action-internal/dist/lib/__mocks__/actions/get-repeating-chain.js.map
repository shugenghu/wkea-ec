{"version":3,"file":"get-repeating-chain.js","sourceRoot":"","sources":["../../../../src/__mocks__/actions/get-repeating-chain.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAC5D,OAAO,WAAW,EAAE,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE3D,aAAa;AACb,MAAM,OAAO,mBAAmB;IAG5B,YAAY,SAAiB;QAItB,sBAAiB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;QAChC,uBAAkB,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC;QACrC,gBAAW,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC;QALjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;CAKJ;AAED,KAAK,UAAU,iBAAiB,CAAC,KAA0B,EAAE,GAAmB;IAC5E,MAAM,MAAM,GAAyB,EAAE,mBAAmB,EAAE,CAAC,EAAE,CAAC;IAChE,IAAI,mBAAmB,GAAG,CAAC,CAAC;IAE5B,GAAG,CAAC,KAAK,CAAC,mDAAmD,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;IAEjF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE;QACtC,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACjE,IAAI,CAAC,MAAM,EAAE;YACT,MAAM;SACT;QAED,mBAAmB,EAAE,CAAC;KACzB;IAED,MAAM,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACjD,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,MAAM,eAAe,GAAG,CAAC,GAA8B,EAAgB,EAAE;IACrE,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE;QACpC,OAAO,IAAI,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KACxD;IAED,OAAO,IAAI,mBAAmB,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,gBAAgB,CAAC;IAChC,MAAM,EAAE,iBAAkD;IAC1D,KAAK,EAAE,eAAe;CACzB,CAAC,CAAC;AAEH,aAAa;AACb,eAAe,UAAU,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAction, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core-internal';\nimport { createDataAction } from '../../create-data-action';\nimport GetProducts, { ProductInput } from './get-products';\n\n/*@internal*/\nexport class RepeatingChainInput implements IActionInput {\n    public loopCount: number;\n\n    constructor(loopCount: number) {\n        this.loopCount = loopCount;\n    }\n\n    public shouldCacheOutput = () => false;\n    public getCacheObjectType = () => 'nocache';\n    public getCacheKey = () => 'nocache';\n}\n\nasync function GetRepeatingChain(input: RepeatingChainInput, ctx: IActionContext): Promise<RepeatingChainOutput> {\n    const output: RepeatingChainOutput = { iterationsCompleted: 0 };\n    let iterationsCompleted = 0;\n\n    ctx.trace('Starting repeating chain action with loop count: ' + input.loopCount);\n\n    for (let i = 0; i < input.loopCount; i++) {\n        const result = await GetProducts([new ProductInput('101')], ctx);\n        if (!result) {\n            break;\n        }\n\n        iterationsCompleted++;\n    }\n\n    output.iterationsCompleted = iterationsCompleted;\n    return output;\n}\n\nconst createTestInput = (arg: ICreateActionContext<any>): IActionInput => {\n    if (arg.config && arg.config.loopCount) {\n        return new RepeatingChainInput(arg.config.loopCount);\n    }\n\n    return new RepeatingChainInput(1);\n};\n\nconst dataAction = createDataAction({\n    action: GetRepeatingChain as IAction<RepeatingChainOutput>,\n    input: createTestInput\n});\n\n/*@internal*/\nexport default dataAction;\n\nexport interface RepeatingChainOutput {\n    iterationsCompleted: number;\n}\n"]}