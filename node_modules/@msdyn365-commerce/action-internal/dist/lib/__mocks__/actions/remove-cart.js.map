{"version":3,"file":"remove-cart.js","sourceRoot":"","sources":["../../../../src/__mocks__/actions/remove-cart.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAC5D,OAAO,OAAO,EAAE,EAAE,SAAS,EAAa,MAAM,YAAY,CAAC;AAG3D,aAAa;AACb,MAAM,OAAO,mBAAmB;IAG5B,YAAY,OAAoB;QAKzB,uBAAkB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QAC/D,gBAAW,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACjD,sBAAiB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;QANnC,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,EAAE,CAAC;IAChC,CAAC;CAKJ;AAED,KAAK,UAAU,cAAc,CAAC,KAA0B,EAAE,GAAmB;IACzE,qEAAqE;IACrE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IACrD,IAAI,CAAC,CAAC,QAAQ,EAAE;QACZ,MAAM,gBAAgB,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,CAAC,CAAC;QAC9F,IAAI,gBAAgB,KAAK,CAAC,CAAC,EAAE;YACzB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;SAC9C;KACJ;IAED,6DAA6D;IAC7D,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACtC,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;AACtD,CAAC;AAED,aAAa;AACb,eAAe,gBAAgB,CAAC;IAC5B,MAAM,EAAE,cAAoC;CAC/C,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAction, IActionContext, IActionInput } from '@msdyn365-commerce/core-internal';\nimport { createDataAction } from '../../create-data-action';\nimport GetCart, { CartInput, ICartInfo } from './get-cart';\nimport { MockProduct } from './get-products';\n\n/*@internal*/\nexport class RemoveFromCartInput implements IActionInput {\n    public cartInput: CartInput;\n    public productId: string;\n    constructor(product: MockProduct) {\n        this.cartInput = new CartInput();\n        this.productId = product.Id;\n    }\n\n    public getCacheObjectType = () => this.cartInput.getCacheObjectType();\n    public getCacheKey = () => this.cartInput.getCacheKey();\n    public shouldCacheOutput = () => false;\n}\n\nasync function removeFromCart(input: RemoveFromCartInput, ctx: IActionContext): Promise<ICartInfo> {\n    // var cartInfo = await ctx.chainAction(GetCart, input) as ICartInfo;\n    const cartInfo = await GetCart(input.cartInput, ctx);\n    if (!!cartInfo) {\n        const productLineIndex = cartInfo.lines.findIndex(line => line.productId === input.productId);\n        if (productLineIndex !== -1) {\n            cartInfo.lines.splice(productLineIndex, 1);\n        }\n    }\n\n    // For any write call, we'll need to fire the update manually\n    ctx.update(input.cartInput, cartInfo);\n    return Promise.resolve({ lines: cartInfo.lines });\n}\n\n/*@internal*/\nexport default createDataAction({\n    action: removeFromCart as IAction<ICartInfo>\n});\n"]}