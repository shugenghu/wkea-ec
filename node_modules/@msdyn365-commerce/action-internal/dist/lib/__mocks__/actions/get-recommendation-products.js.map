{"version":3,"file":"get-recommendation-products.js","sourceRoot":"","sources":["../../../../src/__mocks__/actions/get-recommendation-products.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAction, IActionContext, IActionInput, ICreateActionContext } from '@msdyn365-commerce/core-internal';\nimport { createDataAction } from '../../create-data-action';\nimport GetProductRatings, { ProductRating, ProductRatingInput } from './get-product-ratings';\nimport GetProducts, { MockProduct, ProductInput } from './get-products';\n\n/*@internal*/\nexport class RecoInput implements IActionInput {\n    public Channel: string;\n\n    constructor(id: string) {\n        this.Channel = id;\n    }\n\n    public shouldCacheOutput = () => true;\n    public getCacheObjectType = () => 'RECO';\n    public getCacheKey = () => this.Channel;\n}\n\nasync function GetRecoProducts(input: RecoInput, ctx: IActionContext): Promise<RecoOutput> {\n    ctx.trace('Calling reco with channel: ' + input.Channel);\n\n    // Fetch Reco product id list\n    const items = mockChannelData[input.Channel] as string[];\n    const output: RecoOutput = {};\n\n    const productInputs = items.map(i => new ProductInput(i));\n\n    if (items !== null) {\n        // Fetch products\n        const productResponse = (await ctx.chainAction(GetProducts, productInputs)) as MockProduct[];\n        output.responseIds = items;\n\n        if (productResponse === null) {\n            output.products = [];\n            return output;\n        }\n\n        // Fetch product ratings\n        // TODO: Add support for parallel fetch on same tier\n        const productRatingInputs = items.map(i => new ProductRatingInput(i));\n        const ratingResponse = (await ctx.chainAction(GetProductRatings, productRatingInputs)) as ProductRating[];\n        if (ratingResponse !== null) {\n            const productsWithRating: ProductWithRating[] = [];\n            productResponse.forEach(product => {\n                const rating = ratingResponse.find(r => r.Id === product.Id);\n                const productWithRating: ProductWithRating = { product: product, rating: rating ? rating.Rating : undefined };\n                productsWithRating.push(productWithRating);\n            });\n            output.products = productsWithRating;\n        }\n    }\n\n    return output;\n}\n\nconst createRecoInput = (arg: ICreateActionContext<any>): IActionInput => {\n    if (arg.config && arg.config.channel) {\n        return new RecoInput(arg.config.channel);\n    }\n\n    throw new Error('config is not well defined for reco input');\n};\n\n/*@internal*/\nexport default createDataAction({\n    action: GetRecoProducts as IAction<RecoOutput>,\n    input: createRecoInput\n});\n\n//////////////// Mock input\n/*@internal*/\nexport interface RecoOutput {\n    responseIds?: string[];\n    products?: ProductWithRating[];\n}\n\nexport interface ProductWithRating {\n    product: MockProduct;\n    rating?: number;\n}\n\n/*@internal*/\nexport const mockChannelData: any = {\n    'top-free': ['100', '102', '103', '104'],\n    trending: ['108', '101', '103', '106'],\n    'top-paid': ['106', '108', '105', '107'],\n    games: ['109', '108'],\n    apps: ['111', '104']\n};\n"]}