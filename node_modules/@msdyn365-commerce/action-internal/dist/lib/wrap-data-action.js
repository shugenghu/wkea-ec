/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ActionRegistrar } from './action-registrar';
/**
 * Wraps a data action with the associated action wrap.
 * @param options
 * @param actionWrap
 */
export const wrapDataAction = (options, actionWrap) => {
    if (!options) {
        throw new Error('wrapDataAction called with invalid options. Options should have atleast action defined');
    }
    if (!options.action) {
        throw new Error(`Received invalid actions when attempting to parse options. Input name: ${options.input ? options.input.name : 'undefined'}`);
    }
    let inputFunc = options.input;
    let id = options.id;
    let isBatched = options.isBatched;
    options.action.prototype = {
        id,
        isBatched,
        isAction: true
    };
    actionWrap.prototype = {
        id,
        isAction: false,
        _action: options.action,
        set RegistrationId(registrationId) {
            options.action.prototype.RegistrationId = registrationId;
        },
        get RegistrationId() {
            return options.action.prototype.RegistrationId || '';
        },
        set inputFunc(func) {
            // @ts-ignore
            inputFunc = func;
        },
        get inputFunc() {
            return inputFunc;
        },
        get isBatched() {
            return isBatched;
        },
        set isBatched(_isBatched) {
            isBatched = _isBatched;
        },
        get Action() {
            return options.action;
        },
        set Action(newAction) {
            // There are no getter/setters on the action function prototype so this behaves as expected.
            inputFunc = newAction.prototype.input || inputFunc;
            id = newAction.prototype.id || id;
            isBatched = newAction.prototype.isBatched || isBatched;
            newAction.prototype = { ...newAction.prototype, ...options.action.prototype };
            options.action = newAction;
        },
        setProperty: (propertyName, value) => {
            options.action.prototype[propertyName] = value;
            actionWrap.prototype[propertyName] = options.action.prototype[propertyName];
        }
    };
    if (actionWrap.prototype.id) {
        ActionRegistrar.registerAction(actionWrap.prototype.id, actionWrap);
    }
    return actionWrap;
};
//# sourceMappingURL=wrap-data-action.js.map