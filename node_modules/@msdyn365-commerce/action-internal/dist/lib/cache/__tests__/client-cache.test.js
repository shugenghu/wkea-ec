/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import 'jest';
import { autorun, isObservable } from 'mobx';
import { ClientCache } from '../client-cache';
describe('Basic Cache Functionality', () => {
    it('Can put new items in the cache', () => {
        const cache = new ClientCache();
        const primitiveItem = 'foo';
        const arrayItem = [1, 2, 3];
        const objectItem = { foo: { bar: 'baz' } };
        cache.Put('string', '1', primitiveItem);
        const primitiveItemFromCache = cache.Get('string', '1');
        const primitiveItemFromCacheValue = cache.GetValue('string', '1');
        if (primitiveItemFromCache !== null) {
            expect(isObservable(primitiveItemFromCache)).toBe(true);
            expect(primitiveItemFromCacheValue).toEqual('foo');
        }
        else {
            throw new Error('Unable to get primitive item from cache');
        }
        cache.Put('array', '1', arrayItem);
        const arrayItemFromCache = cache.Get('array', '1');
        const arrayItemFromCacheValue = cache.GetValue('array', '1');
        if (arrayItemFromCache !== null) {
            expect(isObservable(arrayItemFromCache)).toBe(true);
            expect(arrayItemFromCacheValue).toEqual(arrayItem);
            expect(cache.GetValue('array', '1')).toEqual(arrayItem);
        }
        else {
            throw new Error('Unable to get array item from ClientCache');
        }
        cache.Put('object', '1', objectItem);
        const objectItemFromCache = cache.Get('object', '1');
        const objectItemFromCacheValue = cache.GetValue('object', '1');
        if (objectItemFromCache !== null) {
            expect(isObservable(objectItemFromCache)).toBe(true);
            expect(objectItemFromCacheValue).toEqual(objectItem);
            expect(cache.GetValue('object', '1')).toEqual(objectItem);
        }
        else {
            throw new Error('Unable to get object item from ClientCache');
        }
    });
    it('Should return null on nonexistent keys', () => {
        const cache = new ClientCache();
        const fakeCacheItem = cache.Get('foo', 'bar');
        expect(fakeCacheItem).toBeNull();
    });
    it('Should update primitive values', () => {
        const cache = new ClientCache();
        const primitiveItemOne = 'foo';
        const primitiveItemTwo = 'bar';
        cache.Put('string', '1', primitiveItemOne);
        cache.Put('string', '1', primitiveItemTwo);
        const primitiveItemFromCache = cache.Get('string', '1');
        const primitiveItemFromCacheValue = cache.GetValue('string', '1');
        if (primitiveItemFromCache !== null) {
            expect(isObservable(primitiveItemFromCache)).toBe(true);
            expect(primitiveItemFromCacheValue).toEqual(primitiveItemTwo);
        }
        else {
            throw new Error('Unable to get updated primitive item from cache');
        }
    });
    it('Should update arrays', () => {
        const cache = new ClientCache();
        const arrayOne = [1, 2, 3];
        const arrayTwo = [4, 5, 6];
        cache.Put('array', '1', arrayOne);
        cache.Put('array', '1', arrayTwo);
        const arrayFromCache = cache.Get('array', '1');
        const arrayFromCacheValue = cache.GetValue('array', '1');
        if (arrayFromCache != null) {
            expect(isObservable(arrayFromCache)).toBe(true);
            expect(arrayFromCacheValue).toEqual(arrayTwo);
        }
        else {
            throw new Error('Unable to get updated array item from cache');
        }
    });
    it('Should update objects', () => {
        const cache = new ClientCache();
        const objectOne = { foo: { bar: 'baz' } };
        const objectTwo = { baz: { bar: 'foo' } };
        cache.Put('object', '1', objectOne);
        cache.Put('object', '1', objectTwo);
        const objectFromCache = cache.Get('object', '1');
        const objectFromCacheValue = cache.GetValue('object', '1');
        if (objectFromCache !== null) {
            expect(isObservable(objectFromCache)).toBe(true);
            expect(objectFromCacheValue).toEqual(objectTwo);
        }
        else {
            throw new Error('Unable to get object item from cache');
        }
    });
});
describe('Advanced Cache Functionality', () => {
    it('Should automatically update primitives', () => {
        const cache = new ClientCache();
        const stringOne = 'foo';
        const stringTwo = 'bar';
        let observedValue = '';
        cache.Put('string', '1', stringOne);
        autorun(() => {
            observedValue = cache.GetValue('string', '1');
        });
        expect(observedValue).toEqual(stringOne);
        cache.Put('string', '1', stringTwo);
        expect(observedValue).toEqual(stringTwo);
    });
    it('Should automatically update arrays', () => {
        const cache = new ClientCache();
        const arrayOne = [1, 2, 3];
        const arrayTwo = [4, 5, 6];
        let observedValue = 0;
        cache.Put('array', '1', arrayOne);
        autorun(() => {
            const fromCache = cache.GetValue('array', '1');
            if (fromCache) {
                observedValue = fromCache[0];
            }
        });
        expect(observedValue).toEqual(arrayOne[0]);
        cache.Put('array', '1', arrayTwo);
        expect(observedValue).toEqual(arrayTwo[0]);
    });
    it('Should automatically update objects', () => {
        const cache = new ClientCache();
        const objectOne = { foo: { bar: 'baz' } };
        const objectTwo = { baz: { bar: 'foo' } };
        let observedValue = {};
        cache.Put('object', '1', objectOne);
        autorun(() => {
            observedValue = cache.GetValue('object', '1');
        });
        expect(observedValue).toEqual(objectOne);
        cache.Put('object', '1', objectTwo);
        expect(observedValue).toEqual(objectTwo);
    });
});
//# sourceMappingURL=client-cache.test.js.map