/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// tslint:disable-next-line:no-any
const appCache = {};
/**
 * SimpleCache implementation
 *
 * @class SimpleCache
 * @implements {ICache}
 * @internal
 */
export default class SimpleCache {
    constructor(useRequestCache) {
        this.localCache = useRequestCache ? {} : appCache;
    }
    Get(type, key) {
        if (!type || !key) {
            throw new Error('Cannot send null arguments');
        }
        type = type.toUpperCase();
        key = key.toUpperCase();
        if (!!this.localCache[type]) {
            return this.localCache[type][key];
        }
        return null;
    }
    Put(type, key, item) {
        if (!type || !key) {
            throw new Error('Cannot send null arguments');
        }
        type = type.toUpperCase();
        key = key.toUpperCase();
        if (this.localCache[type] === undefined) {
            this.localCache[type] = {};
        }
        const cacheItem = { Item: item };
        this.localCache[type][key] = cacheItem;
        return cacheItem;
    }
    GetValue(type, key) {
        const item = this.Get(type, key);
        return item ? this.Value(item) : null;
    }
    Value(item) {
        return item.Item;
    }
}
//# sourceMappingURL=simple-cache.js.map