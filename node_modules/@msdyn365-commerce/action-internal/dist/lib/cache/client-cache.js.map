{"version":3,"file":"client-cache.js","sourceRoot":"","sources":["../../../src/cache/client-cache.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAKH,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,MAAM,CAAC;AAEzD;;;;;;GAMG;AACH,MAAM,OAAO,WAAW;IAAxB;QACY,kBAAa,GAAsD,EAAE,CAAC;IAwElF,CAAC;IAtEG;;;;OAIG;IACI,GAAG,CAAI,IAAY,EAAE,GAAW;QACnC,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,GAAG,EAAE;YACN,OAAO,IAAI,CAAC;SACf;QAED,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAgB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1F,CAAC;IAED;;;;;OAKG;IACI,GAAG,CAAI,IAAY,EAAE,GAAW,EAAE,IAAO;QAC5C,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SACjD;QAED,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;YACxC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;SACjC;QACD,OAAO,WAAW,CAAgB,GAAG,EAAE;YACnC,IAAI,SAAS,GAAe,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YAC1D,IAAI,SAAS,EAAE;gBACX,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;aAChC;iBAAM;gBACH,SAAS,GAAG,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE;oBAC9C,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,KAAK,IAAI,MAAM,GAAG,EAAE;iBAC7B,CAAC,CAAC;gBACH,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;aAC7C;YAED,OAAsB,SAAS,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACI,QAAQ,CAAI,IAAY,EAAE,GAAW;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAI,IAAI,EAAE,GAAG,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAI,IAAmB;QAC/B,OAAO,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC7B,CAAC;CACJ;AAED,eAAe,WAAW,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:function-name\n// @TODO: change property names to be cammelCased\nimport { ICache, ICacheItem } from '@msdyn365-commerce/core-internal';\nimport { get, observable, set, transaction } from 'mobx';\n\n/**\n * ClientCache implementation\n *\n * @class ClientCache\n * @implements {ICache}\n * @internal\n */\nexport class ClientCache implements ICache {\n    private internalCache: { [type: string]: { [key: string]: ICacheItem } } = {};\n\n    /**\n     * Gets an item from the cache, and returning it wrapped in a ICacheItem\n     * @param type A string representing the type of the cache item\n     * @param key The key of the cache item\n     */\n    public Get<T>(type: string, key: string): ICacheItem<T> | null {\n        if (!type) {\n            throw new Error('Cannot send null arguments');\n        }\n\n        if (!key) {\n            return null;\n        }\n\n        type = type.toUpperCase();\n        key = key.toUpperCase();\n        return this.internalCache[type] ? <ICacheItem<T>>this.internalCache[type][key] : null;\n    }\n\n    /**\n     * Puts an item into the cache\n     * @param type A string representing the type of the cache item\n     * @param key The key of the cache item\n     * @param item The item to be put into the cache\n     */\n    public Put<T>(type: string, key: string, item: T): ICacheItem<T> {\n        if (!type || !key) {\n            throw new Error('Cannot send null arguments');\n        }\n\n        type = type.toUpperCase();\n        key = key.toUpperCase();\n        if (this.internalCache[type] === undefined) {\n            this.internalCache[type] = {};\n        }\n        return transaction<ICacheItem<T>>(() => {\n            let cacheItem: ICacheItem = this.internalCache[type][key];\n            if (cacheItem) {\n                set(cacheItem, 'Item', item);\n            } else {\n                cacheItem = observable({ Item: item }, undefined, {\n                    deep: true,\n                    name: `T:${type}_K:${key}`\n                });\n                this.internalCache[type][key] = cacheItem;\n            }\n\n            return <ICacheItem<T>>cacheItem;\n        });\n    }\n\n    /**\n     * Gets the value only for a specific item from the cache\n     * This differs from the Get() method as this will not return a MobX observable value\n     * @param type A string representing the type of the cache item\n     * @param key The key of the cache item\n     */\n    public GetValue<T>(type: string, key: string): T | null {\n        const item = this.Get<T>(type, key);\n        return item ? this.Value<T>(item) : null;\n    }\n\n    /**\n     * Get the value out of a cache item\n     * This returns the raw value of the item, it will *not* be a MobX observable value\n     * @param item The observable cache item to retireve the value from\n     */\n    public Value<T>(item: ICacheItem<T>): T {\n        return get(item, 'Item');\n    }\n}\n\nexport default ClientCache;\n"]}