{"version":3,"file":"retail-cache-helper.js","sourceRoot":"","sources":["../../../src/cache/retail-cache-helper.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAsB,YAAY,EAAE,MAAM,mCAAmC,CAAC;AACrF,OAAO,EAAgB,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AAClF,OAAO,EAAE,WAAW,EAAE,kBAAkB,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AACjG,OAAO,EAAc,QAAQ,EAAE,MAAM,uCAAuC,CAAC;AAE7E,MAAM,yBAAyB,GAAW,kCAAkC,CAAC;AAE7E,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,MAAqC,EAAE,MAAc,EAAQ,EAAE;IAChG,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACtC,IAAI,OAAO,EAAE;QACT,aAAa;QACb,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC3B,IAAI,KAAK,YAAY,kBAAkB,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE;gBACpF,aAAa;gBACb,MAAM,GAAG,GAAG,KAAK,CAAC,kBAAkB,CAAC;gBACrC,aAAa;gBACb,KAAK,CAAC,kBAAkB,GAAG,GAAG,GAAG,IAAI,MAAM,EAAE,CAAC;aACjD;QACL,CAAC,CAAC,CAAC;KACN;SAAM;QACH,IAAI,MAAM,YAAY,kBAAkB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE;YACtF,aAAa;YACb,MAAM,GAAG,GAAG,MAAM,CAAC,kBAAkB,CAAC;YACtC,aAAa;YACb,MAAM,CAAC,kBAAkB,GAAG,GAAG,GAAG,IAAI,MAAM,EAAE,CAAC;SAClD;KACJ;AACL,CAAC,CAAC;AACF,iBAAiB;AACjB,MAAM,2BAA2B,GAAG,CAChC,kBAAsC,EACtC,IAAS,EACT,YAAoB,EACpB,QAAgB,EAChB,sBAAgC,EAChC,iBAA2B,EAC7B,EAAE;IACA,MAAM,iBAAiB,GAAI,IAAI,CAAC,KAAK,CAAc;SAC9C,GAAG,CAAC,GAAG,CAAC,EAAE;QACP,aAAa;QACb,MAAM,KAAK,GAAG,YAAY,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAC;QAEvF,IAAI,CAAC,KAAK,IAAI,sBAAsB,IAAI,QAAQ,EAAE;YAC9C,aAAa;YACb,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;SACzF;QAED,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACvB,OAAO,SAAS,CAAC;SACpB;QACD,aAAa;QACb,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAC3B,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;SAC5B;QAED,OAAO,KAAK,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC;SACD,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,CAAC,CAAC;IAEzD,IAAK,IAAI,CAAC,KAAK,CAAc,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,EAAE;QAC7D,OAAO;KACV;IAED,0FAA0F;IAC1F,aAAa;IACb,MAAM,uBAAuB,GAAG,kBAAkB,CAAC,MAAM,CAAC,uBAAuB,CAAC;IAClF,OAAO,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC;QACpD,CAAC,CAAC,uBAAuB,IAAI,CAAC,iBAAiB;YAC3C,CAAC,CAAC,iBAAiB;YACnB,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,SAAS,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CACvB,UAA2B,EAC3B,kBAAsC,EACtC,QAAgB,EAChB,SAAsB,EACxB,EAAE;IACA,IAAI,CAAC,SAAS,EAAE;QACZ,OAAO;KACV;IACD,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE;QAC7B,QAAQ,UAAU,CAAC,CAAE,EAAE;YACnB,KAAK,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACxB,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,iEAAiE,EAAE;oBACnG,MAAM,EAAE;wBACJ,aAAa;wBACb,kBAAkB,CAAC,gBAAgB,IAAI,MAAM;wBAC7C,QAAQ;wBACR,UAAU;qBACb;iBACJ,CAAC,CAAC;gBACH,MAAM;aACT;YACD,KAAK,YAAY,CAAC,YAAY,CAAC,CAAC;gBAC5B,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,iEAAiE,EAAE;oBACnG,MAAM,EAAE;wBACJ,aAAa;wBACb,kBAAkB,CAAC,gBAAgB,IAAI,MAAM;wBAC7C,QAAQ;wBACR,cAAc;qBACjB;iBACJ,CAAC,CAAC;gBACH,MAAM;aACT;YACD,OAAO,CAAC,CAAC;gBACL,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,iEAAiE,EAAE;oBACnG,MAAM,EAAE;wBACJ,aAAa;wBACb,kBAAkB,CAAC,gBAAgB,IAAI,MAAM;wBAC7C,QAAQ;wBACR,SAAS;qBACZ;iBACJ,CAAC,CAAC;gBACH,MAAM;aACT;SACJ;KACJ;AACL,CAAC,CAAC;AAEF,MAAM,6CAA6C,GAAG,CAClD,kBAAsC,EACtC,YAAoB,EACpB,QAAgB,EAChB,sBAA+B,EAC/B,SAAsB,EACnB,EAAE;IACL,aAAa;IACb,IAAI,kBAAkB,CAAC,uBAAuB,CAAC,MAAM,KAAK,CAAC,EAAE;QACzD,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;KAChD;IACD,IAAI,gBAAgB,GAAG,IAAI,CAAC;IAC5B,aAAa;IACb,MAAM,YAAY,GAAG,kBAAkB,CAAC,uBAAuB;QAC3D,aAAa;SACZ,GAAG,CAAC,KAAK,CAAC,EAAE;QACT,aAAa;QACb,MAAM,GAAG,GAAG,GAAG,kBAAkB,CAAC,iCAAiC,IAAI,KAAK,EAAE,CAAC;QAC/E,aAAa;QACb,IAAI,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAC;QAE1F,IAAI,CAAC,UAAU,IAAI,sBAAsB,IAAI,QAAQ,EAAE;YACnD,aAAa;YACb,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;SACtG;QAED,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;YACjC,OAAO,IAAI,CAAC;SACf;QACD,uGAAuG;QACvG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE;YAC3B,gBAAgB,GAAG,KAAK,CAAC;SAC5B;QACD,kBAAkB,CAAC,UAAU,EAAE,kBAAkB,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;QAEnE,OAAO,UAAU,CAAC,IAAI,CAAC;IAC3B,CAAC,CAAC;SACD,MAAM,CAAC,OAAO,CAAC,CAAC;IACrB,aAAa;IACb,MAAM,uBAAuB,GAAG,kBAAkB,CAAC,MAAM,CAAC,uBAAuB,CAAC;IAClF,MAAM,kBAAkB,GAAG,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACvI,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,aAAa,EAAE,gBAAgB,EAAE,CAAC;AAC1E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC5B,kBAAsC,EACtC,YAAoB,EACpB,QAAgB,EAChB,yBAAkC,KAAK,EACvC,SAAsB,EACnB,EAAE;IACL,IACI,CAAC,YAAY;QACb,aAAa;QACb,CAAC,CAAC,kBAAkB,CAAC,WAAW,EAAE,IAAI,kBAAkB,CAAC,uBAAuB,CAAC,MAAM,KAAK,CAAC,CAAC;QAC9F,aAAa;QACb,CAAC,kBAAkB,CAAC,gBAAgB,EACtC;QACE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;KAChD;IACD;IACI,aAAa;IACb,kBAAkB,CAAC,kBAAkB,KAAK,yBAAyB;QACnE,aAAa;QACb,CAAC,kBAAkB,CAAC,iCAAiC,IAAI,kBAAkB,CAAC,uBAAuB,CAAC,MAAM,KAAK,CAAC,CAAC,EACnH;QACE,MAAM,OAAO,GAAG,6CAA6C,CACzD,kBAAkB,EAClB,YAAY,EACZ,QAAQ,EACR,sBAAsB,EACtB,SAAS,CACZ,CAAC;QACF,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE;YAC1B,OAAO,OAAO,CAAC;SAClB;KACJ;IACD,aAAa;IACb,MAAM,QAAQ,GAAG,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;IAC/G,IAAI,uBAAuB,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAI,uBAAuB,EAAE;QACzB,uBAAuB,GAAG,EAAE,GAAG,uBAAuB,EAAE,CAAC;KAC5D;SAAM,IAAI,sBAAsB,IAAI,QAAQ,EAAE;QAC3C,uBAAuB,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KACrE;IAED,IAAI,CAAC,uBAAuB,EAAE;QAC1B,OAAO,6CAA6C,CAAC,kBAAkB,EAAE,YAAY,EAAE,QAAQ,EAAE,sBAAsB,EAAE,SAAS,CAAC,CAAC;KACvI;IACD,aAAa;IACb,kBAAkB,CAAC,uBAAuB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;IAClH,IAAI,uBAAuB,CAAC,IAAI,YAAY,WAAW,EAAE;QACrD,IAAI,uBAAuB,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YACnD,uBAAuB,CAAC,IAAI,GAAG,uBAAuB,CAAC,IAAI,CAAC,MAAM,IAAI,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC;SAC5G;aAAM;YACH,MAAM,WAAW,GAAG,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBAC3D,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE;oBACvD,OAAO,MAAM,CAAC;iBACjB;gBAED,OAAO,2BAA2B,CAAC,kBAAkB,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YACnH,CAAC,CAAC,CAAC;YACH,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,aAAa,EAAE,uBAAuB,CAAC,aAAa,EAAE,CAAC;SACvF;KACJ;IACD,IACI,OAAO,uBAAuB,CAAC,IAAI,KAAK,QAAQ;QAChD,aAAa;QACb,CAAC,uBAAuB,CAAC,IAAI,IAAI,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,EACjF;QACE,OAAO,EAAE,KAAK,EAAE,uBAAuB,CAAC,IAAI,EAAE,aAAa,EAAE,uBAAuB,CAAC,aAAa,EAAE,CAAC;KACxG;IAED,MAAM,WAAW,GAAG,2BAA2B,CAC3C,kBAAkB,EAClB,uBAAuB,CAAC,IAAI,EAC5B,YAAY,EACZ,QAAQ,EACR,sBAAsB;IACtB,aAAa;IACb,aAAa,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAC9C,CAAC;IACF,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,aAAa,EAAE,uBAAuB,CAAC,aAAa,EAAE,CAAC;AACxF,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CACvB,kBAAsC,EACtC,IAAS,EACT,YAAoB,EACpB,QAAgB,EAChB,sBAA+B,EACQ,EAAE;IACzC,aAAa;IACb,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,kBAAkB,CAAC,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,iCAAiC,CAAC,EAAE;QAC5G,OAAO;KACV;IAED,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,OAAO,GAAG,IAAI,CAAC;IAErB,sIAAsI;IACtI,aAAa;IACb,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,uBAAuB,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,gBAAgB,EAAE;QACpH,aAAa;QACb,IAAI,kBAAkB,CAAC,iCAAiC,EAAE;YACtD,aAAa;YACb,MAAM,GAAG,GAAG,GAAG,kBAAkB,CAAC,iCAAiC,IAAI;YACnE,aAAa;YACb,OAAO,CAAC,kBAAkB,CAAC,iCAAiC,CAChE,EAAE,CAAC;YACH,aAAa;YACb,YAAY,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;YAC5B,aAAa;YACb,IAAI,kBAAkB,CAAC,kBAAkB,EAAE;gBACvC,IAAI,iBAAiB,GAAG,YAAY,CAAC,GAAG,CAAC;oBACrC,aAAa;oBACb,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB;oBAC7C,aAAa;oBACb,GAAG,EAAE,kBAAkB,CAAC,kBAAkB;iBAC7C,CAAC,CAAC;gBACH,IAAI,iBAAiB,EAAE;oBACnB,iBAAiB,GAAG,EAAE,GAAG,iBAAiB,EAAE,CAAC;iBAChD;gBACD,IACI,iBAAiB;oBACjB,iBAAiB,CAAC,IAAI;oBACtB,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,YAAY,WAAW,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC;oBACjG,aAAa;oBACb,CAAC,OAAO,iBAAiB,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,iBAAiB,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,EAChH;oBACE,aAAa;oBACb,YAAY,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC;iBACjE;qBAAM;oBACH,aAAa;oBACb,YAAY,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,GAAG;wBAClD,IAAI,EAAE,IAAI;wBACV,aAAa;wBACb,IAAI,EAAE,kBAAkB,CAAC,gBAAgB;wBACzC,aAAa;wBACb,UAAU,EAAE,kBAAkB,CAAC,iCAAiC;wBAChE,GAAG,EAAE,CAAC,GAAG,CAAC;wBACV,aAAa;wBACb,KAAK,EAAE,kBAAkB,CAAC,WAAW;qBACxC,CAAC;iBACL;aACJ;SACJ;aAAM;YACH,aAAa;YACb,YAAY,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC;SACjE;QACD,aAAa;KAChB;SAAM,IAAI,CAAC,kBAAkB,CAAC,iCAAiC,EAAE;QAC9D,aAAa;QACb,YAAY,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC;KACjE;SAAM;QACH,MAAM,UAAU,GAAG,OAAO;YACtB,aAAa;aACZ,GAAG,CAAC,MAAM,CAAC,EAAE;YACV,aAAa;YACb,MAAM,eAAe,GAAG,MAAM,CAAC,kBAAkB,CAAC,iCAAiC,CAAC,CAAC;YACrF,IAAI,eAAe,EAAE;gBACjB,aAAa;gBACb,MAAM,GAAG,GAAG,GAAG,kBAAkB,CAAC,iCAAiC,IAAI,eAAe,EAAE,CAAC;gBACzF,aAAa;gBACb,YAAY,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;gBAC3B,OAAO,GAAG,CAAC;aACd;QACL,CAAC,CAAC;aACD,MAAM,CAAC,OAAO,CAAC,CAAC;QACrB,IAAI,iBAAiB,GAAG,YAAY,CAAC,GAAG,CAAC;YACrC,aAAa;YACb,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB;YAC7C,aAAa;YACb,GAAG,EAAE,kBAAkB,CAAC,kBAAkB;SAC7C,CAAC,CAAC;QACH,IAAI,iBAAiB,EAAE;YACnB,iBAAiB,GAAG,EAAE,GAAG,iBAAiB,EAAE,CAAC;SAChD;QACD,IACI,iBAAiB;YACjB,iBAAiB,CAAC,IAAI;YACtB,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,YAAY,WAAW,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC;YACjG,aAAa;YACb,CAAC,OAAO,iBAAiB,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,iBAAiB,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,EAChH;YACE,aAAa;YACb,YAAY,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC;SACjE;aAAM;YACH,aAAa;YACb,YAAY,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,GAAG;gBAClD,IAAI,EAAE,IAAI;gBACV,aAAa;gBACb,IAAI,EAAE,iBAAiB,CAAC,gBAAgB;gBACxC,aAAa;gBACb,UAAU,EAAE,iBAAiB,CAAC,iCAAiC;gBAC/D,aAAa;gBACb,YAAY,EAAE,iBAAiB,CAAC,MAAM,CAAC,uBAAuB;gBAC9D,GAAG,EAAE,UAAU;gBACf,aAAa;gBACb,KAAK,EAAE,iBAAiB,CAAC,WAAW;aACvC,CAAC;SACL;KACJ;IAED,IAAI,YAAY,EAAE;QACd,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YACrC,aAAa;YACb,YAAY,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAErH,IAAI,QAAQ,IAAI,sBAAsB,EAAE;gBACpC,aAAa;gBACb,QAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;aACpH;QACL,CAAC,CAAC,CAAC;KACN;IAED,OAAO,YAAY,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC5B,kBAAsC,EACtC,IAA4B,EAC5B,YAAoB,EACpB,QAAgB,EAChB,sBAA+B,EACQ,EAAE;IACzC,iCAAiC;IACjC,mDAAmD;IACnD,mGAAmG;IACnG,yDAAyD;IACzD,cAAc;IACd,kDAAkD;IAClD,EAAE;IACF,kDAAkD;IAClD,kDAAkD;IAClD,IACI,CAAC,IAAI;QACL,aAAa;QACb,CAAC,CAAC,kBAAkB,CAAC,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,iCAAiC,CAAC;QACjG,aAAa;QACb,CAAC,kBAAkB,CAAC,gBAAgB,EACtC;QACE,OAAO;KACV;IAED,IAAI,IAAI,YAAY,WAAW,EAAE;QAC7B,kGAAkG;QAClG,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACf,aAAa;gBACb,IAAI,kBAAkB,CAAC,WAAW,KAAK,SAAS,EAAE;oBAC9C,aAAa;oBACb,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,kBAAkB,CAAC,WAAW,CAAC;iBACxD;gBAED,kBAAkB,CAAC,kBAAkB,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,sBAAsB,CAAC,CAAC;gBAC/F,OAAO,MAAM,CAAC;YAClB,CAAC,CAAC,CAAC;YACH,aAAa;YACb,YAAY,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,kBAAkB,CAAC,kBAAkB,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YAEhI,IAAI,QAAQ,IAAI,sBAAsB,EAAE;gBACpC,aAAa;gBACb,QAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,GAAG,EAAE,kBAAkB,CAAC,kBAAkB,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;aAC/H;YACD,gEAAgE;SACnE;aAAM;YACH,aAAa;YACb,IAAI,kBAAkB,CAAC,WAAW,KAAK,SAAS,EAAE;gBAC9C,aAAa;gBACb,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,kBAAkB,CAAC,WAAW,CAAC;aACxD;YAED,kBAAkB,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YACpG,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;KACJ;SAAM;QACH,OAAO,kBAAkB,CAAC,kBAAkB,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,sBAAsB,CAAC,CAAC;KACvG;AACL,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { ICache, ICacheItem, ICacheSource } from '@msdyn365-commerce/cache-internal';\nimport { IActionInput, msdyn365Commerce } from '@msdyn365-commerce/core-internal';\nimport { AsyncResult, DataServiceRequest, isAsyncResult } from '@msdyn365-commerce/retail-proxy';\nimport { ITelemetry, LogLevel } from '@msdyn365-commerce/telemetry-internal';\n\nconst GET_FROM_RETURNIDENTIFIER: string = '___GET__FROM__RETURNIDENTIIER___';\n\nexport const addLocaleInformation = (inputs: IActionInput | IActionInput[], locale: string): void => {\n    const isArray = Array.isArray(inputs);\n    if (isArray) {\n        // @ts-ignore\n        (inputs || []).forEach(input => {\n            if (input instanceof DataServiceRequest && !input.getCacheKey().endsWith(`-${locale}`)) {\n                // @ts-ignore\n                const tmp = input._cacheKeyFromInput;\n                // @ts-ignore\n                input._cacheKeyFromInput = `${tmp}-${locale}`;\n            }\n        });\n    } else {\n        if (inputs instanceof DataServiceRequest && !inputs.getCacheKey().endsWith(`-${locale}`)) {\n            // @ts-ignore\n            const tmp = inputs._cacheKeyFromInput;\n            // @ts-ignore\n            inputs._cacheKeyFromInput = `${tmp}-${locale}`;\n        }\n    }\n};\n// tslint:disable\nconst _resolveCacheEntryReference = (\n    dataServiceRequest: DataServiceRequest,\n    item: any,\n    requestCache: ICache,\n    appCache: ICache,\n    shouldReadFromAppCache?: boolean,\n    isWrappingPromise?: boolean\n) => {\n    const cacheValueAsArray = (item['key'] as string[])\n        .map(key => {\n            // @ts-ignore\n            const value = requestCache.get({ typeName: dataServiceRequest._cacheObjectType, key });\n\n            if (!value && shouldReadFromAppCache && appCache) {\n                // @ts-ignore\n                appCache.copyTo({ typeName: dataServiceRequest._cacheObjectType, key }, requestCache);\n            }\n\n            if (!value || !value.item) {\n                return undefined;\n            }\n            // @ts-ignore\n            if (isAsyncResult(value.item)) {\n                return value.item.result;\n            }\n\n            return value.item;\n        })\n        .filter(data => data !== undefined && data !== null);\n\n    if ((item['key'] as string[]).length > cacheValueAsArray.length) {\n        return;\n    }\n\n    // If we are returning a Promise that represents a future collection, we need to unwrap it\n    // @ts-ignore\n    const isReturnTypeACollection = dataServiceRequest._query.isReturnTypeACollection;\n    return cacheValueAsArray && cacheValueAsArray.length > 0\n        ? isReturnTypeACollection && !isWrappingPromise\n            ? cacheValueAsArray\n            : cacheValueAsArray[0]\n        : undefined;\n};\n\nconst logTelemetrySource = (\n    cacheValue: ICacheItem<any>,\n    dataServiceRequest: DataServiceRequest,\n    cacheKey: string,\n    telemetry?: ITelemetry\n) => {\n    if (!telemetry) {\n        return;\n    }\n    if (!msdyn365Commerce.isBrowser) {\n        switch (cacheValue.s!) {\n            case ICacheSource.AppCache: {\n                telemetry.log(LogLevel.Information, 'dataAction with {actiontype}, {cacheKey}.  source {cacheSource}', {\n                    values: [\n                        // @ts-ignore\n                        dataServiceRequest._cacheObjectType || 'none',\n                        cacheKey,\n                        'AppCache'\n                    ]\n                });\n                break;\n            }\n            case ICacheSource.RequestCache: {\n                telemetry.log(LogLevel.Information, 'dataAction with {actiontype}, {cacheKey}.  source {cacheSource}', {\n                    values: [\n                        // @ts-ignore\n                        dataServiceRequest._cacheObjectType || 'none',\n                        cacheKey,\n                        'RequestCache'\n                    ]\n                });\n                break;\n            }\n            default: {\n                telemetry.log(LogLevel.Information, 'dataAction with {actiontype}, {cacheKey}.  source {cacheSource}', {\n                    values: [\n                        // @ts-ignore\n                        dataServiceRequest._cacheObjectType || 'none',\n                        cacheKey,\n                        'Default'\n                    ]\n                });\n                break;\n            }\n        }\n    }\n};\n\nconst readCacheEntriesBasedOnCacheKeyFromReturnType = (\n    dataServiceRequest: DataServiceRequest,\n    requestCache: ICache,\n    appCache: ICache,\n    shouldReadFromAppCache: boolean,\n    telemetry?: ITelemetry\n): any => {\n    // @ts-ignore\n    if (dataServiceRequest._cacheKeyFromReturnType.length === 0) {\n        return { entry: null, shouldRefresh: false };\n    }\n    let shouldRefreshAll = true;\n    // @ts-ignore\n    const cacheEntries = dataServiceRequest._cacheKeyFromReturnType\n        // @ts-ignore\n        .map(entry => {\n            // @ts-ignore\n            const key = `${dataServiceRequest._cacheKeyIdentifierFromReturnType}-${entry}`;\n            // @ts-ignore\n            let cacheValue = requestCache.get({ typeName: dataServiceRequest._cacheObjectType, key });\n\n            if (!cacheValue && shouldReadFromAppCache && appCache) {\n                // @ts-ignore\n                cacheValue = appCache.copyTo({ typeName: dataServiceRequest._cacheObjectType, key }, requestCache);\n            }\n\n            if (!cacheValue || !cacheValue.item) {\n                return null;\n            }\n            // according to the logic, will treat the entries to shouldRefresh when all entries have shouldRefresh.\n            if (!cacheValue.shouldRefresh) {\n                shouldRefreshAll = false;\n            }\n            logTelemetrySource(cacheValue, dataServiceRequest, key, telemetry);\n\n            return cacheValue.item;\n        })\n        .filter(Boolean);\n    // @ts-ignore\n    const isReturnTypeACollection = dataServiceRequest._query.isReturnTypeACollection;\n    const cacheEntriesReturn = cacheEntries && cacheEntries.length > 0 ? (isReturnTypeACollection ? cacheEntries : cacheEntries[0]) : null;\n    return { entry: cacheEntriesReturn, shouldRefresh: shouldRefreshAll };\n};\n\nexport const readCacheEntries = (\n    dataServiceRequest: DataServiceRequest,\n    requestCache: ICache,\n    appCache: ICache,\n    shouldReadFromAppCache: boolean = false,\n    telemetry?: ITelemetry\n): any => {\n    if (\n        !requestCache ||\n        // @ts-ignore\n        (!dataServiceRequest.getCacheKey() && dataServiceRequest._cacheKeyFromReturnType.length === 0) ||\n        // @ts-ignore\n        !dataServiceRequest._cacheObjectType\n    ) {\n        return { entry: null, shouldRefresh: false };\n    }\n    if (\n        // @ts-ignore\n        dataServiceRequest._cacheKeyFromInput === GET_FROM_RETURNIDENTIFIER ||\n        // @ts-ignore\n        (dataServiceRequest._cacheKeyIdentifierFromReturnType && dataServiceRequest._cacheKeyFromReturnType.length !== 0)\n    ) {\n        const entries = readCacheEntriesBasedOnCacheKeyFromReturnType(\n            dataServiceRequest,\n            requestCache,\n            appCache,\n            shouldReadFromAppCache,\n            telemetry\n        );\n        if (entries && entries.entry) {\n            return entries;\n        }\n    }\n    // @ts-ignore\n    const cacheKey = { typeName: dataServiceRequest._cacheObjectType, key: dataServiceRequest._cacheKeyFromInput };\n    let cachedValueBasedOnInput = requestCache.get(cacheKey);\n    if (cachedValueBasedOnInput) {\n        cachedValueBasedOnInput = { ...cachedValueBasedOnInput };\n    } else if (shouldReadFromAppCache && appCache) {\n        cachedValueBasedOnInput = appCache.copyTo(cacheKey, requestCache);\n    }\n\n    if (!cachedValueBasedOnInput) {\n        return readCacheEntriesBasedOnCacheKeyFromReturnType(dataServiceRequest, requestCache, appCache, shouldReadFromAppCache, telemetry);\n    }\n    // @ts-ignore\n    logTelemetrySource(cachedValueBasedOnInput, dataServiceRequest, dataServiceRequest._cacheKeyFromInput, telemetry);\n    if (cachedValueBasedOnInput.item instanceof AsyncResult) {\n        if (cachedValueBasedOnInput.item.status !== 'LOADING') {\n            cachedValueBasedOnInput.item = cachedValueBasedOnInput.item.result || cachedValueBasedOnInput.item.error;\n        } else {\n            const asyncResult = cachedValueBasedOnInput.item.then(result => {\n                if (typeof result !== 'object' || result['$ref'] !== true) {\n                    return result;\n                }\n\n                return _resolveCacheEntryReference(dataServiceRequest, result, requestCache, appCache, shouldReadFromAppCache);\n            });\n            return { entry: asyncResult, shouldRefresh: cachedValueBasedOnInput.shouldRefresh };\n        }\n    }\n    if (\n        typeof cachedValueBasedOnInput.item !== 'object' ||\n        // @ts-ignore\n        (cachedValueBasedOnInput.item && cachedValueBasedOnInput.item['$ref'] !== true)\n    ) {\n        return { entry: cachedValueBasedOnInput.item, shouldRefresh: cachedValueBasedOnInput.shouldRefresh };\n    }\n\n    const resolvedRef = _resolveCacheEntryReference(\n        dataServiceRequest,\n        cachedValueBasedOnInput.item,\n        requestCache,\n        appCache,\n        shouldReadFromAppCache,\n        // @ts-ignore\n        isAsyncResult(cachedValueBasedOnInput.item)\n    );\n    return { entry: resolvedRef, shouldRefresh: cachedValueBasedOnInput.shouldRefresh };\n};\n\nconst _saveEntityToCache = (\n    dataServiceRequest: DataServiceRequest,\n    data: any,\n    requestCache: ICache,\n    appCache: ICache,\n    isCacheTypeApplication: boolean\n): { [cacheKey: string]: any } | undefined => {\n    // @ts-ignore\n    if (!data || (!dataServiceRequest._cacheKeyFromInput && !dataServiceRequest._cacheKeyIdentifierFromReturnType)) {\n        return;\n    }\n\n    const cacheEntries = {};\n    const results = data;\n\n    // using Object.prototype instead of Array.isArray because results can be Observable Array which cann't be detected with Array.isArray\n    // @ts-ignore\n    if (!dataServiceRequest._query.isReturnTypeACollection || Object.prototype.toString.call(results) !== '[object Array]') {\n        // @ts-ignore\n        if (dataServiceRequest._cacheKeyIdentifierFromReturnType) {\n            // @ts-ignore\n            const key = `${dataServiceRequest._cacheKeyIdentifierFromReturnType}-${\n                // @ts-ignore\n                results[dataServiceRequest._cacheKeyIdentifierFromReturnType]\n            }`;\n            // @ts-ignore\n            cacheEntries[key] = results;\n            // @ts-ignore\n            if (dataServiceRequest._cacheKeyFromInput) {\n                let existingCacheItem = requestCache.get({\n                    // @ts-ignore\n                    typeName: dataServiceRequest._cacheObjectType,\n                    // @ts-ignore\n                    key: dataServiceRequest._cacheKeyFromInput\n                });\n                if (existingCacheItem) {\n                    existingCacheItem = { ...existingCacheItem };\n                }\n                if (\n                    existingCacheItem &&\n                    existingCacheItem.item &&\n                    (!(existingCacheItem.item instanceof AsyncResult) || existingCacheItem.item.status === 'SUCCESS') &&\n                    // @ts-ignore\n                    (typeof existingCacheItem.item !== 'object' || (existingCacheItem && existingCacheItem.item['$ref'] !== true))\n                ) {\n                    // @ts-ignore\n                    cacheEntries[dataServiceRequest._cacheKeyFromInput] = results;\n                } else {\n                    // @ts-ignore\n                    cacheEntries[dataServiceRequest._cacheKeyFromInput] = {\n                        $ref: true,\n                        // @ts-ignore\n                        type: dataServiceRequest._cacheObjectType,\n                        // @ts-ignore\n                        identifier: dataServiceRequest._cacheKeyIdentifierFromReturnType,\n                        key: [key],\n                        // @ts-ignore\n                        count: dataServiceRequest._totalCount\n                    };\n                }\n            }\n        } else {\n            // @ts-ignore\n            cacheEntries[dataServiceRequest._cacheKeyFromInput] = results;\n        }\n        // @ts-ignore\n    } else if (!dataServiceRequest._cacheKeyIdentifierFromReturnType) {\n        // @ts-ignore\n        cacheEntries[dataServiceRequest._cacheKeyFromInput] = results;\n    } else {\n        const cacheValue = results\n            // @ts-ignore\n            .map(result => {\n                // @ts-ignore\n                const identifierValue = result[dataServiceRequest._cacheKeyIdentifierFromReturnType];\n                if (identifierValue) {\n                    // @ts-ignore\n                    const key = `${dataServiceRequest._cacheKeyIdentifierFromReturnType}-${identifierValue}`;\n                    // @ts-ignore\n                    cacheEntries[key] = result;\n                    return key;\n                }\n            })\n            .filter(Boolean);\n        let existingCacheItem = requestCache.get({\n            // @ts-ignore\n            typeName: dataServiceRequest._cacheObjectType,\n            // @ts-ignore\n            key: dataServiceRequest._cacheKeyFromInput\n        });\n        if (existingCacheItem) {\n            existingCacheItem = { ...existingCacheItem };\n        }\n        if (\n            existingCacheItem &&\n            existingCacheItem.item &&\n            (!(existingCacheItem.item instanceof AsyncResult) || existingCacheItem.item.status === 'SUCCESS') &&\n            // @ts-ignore\n            (typeof existingCacheItem.item !== 'object' || (existingCacheItem && existingCacheItem.item['$ref'] !== true))\n        ) {\n            // @ts-ignore\n            cacheEntries[dataServiceRequest._cacheKeyFromInput] = results;\n        } else {\n            // @ts-ignore\n            cacheEntries[dataServiceRequest._cacheKeyFromInput] = {\n                $ref: true,\n                // @ts-ignore\n                type: existingCacheItem._cacheObjectType,\n                // @ts-ignore\n                identifier: existingCacheItem._cacheKeyIdentifierFromReturnType,\n                // @ts-ignore\n                isCollection: existingCacheItem._query.isReturnTypeACollection,\n                key: cacheValue,\n                // @ts-ignore\n                count: existingCacheItem._totalCount\n            };\n        }\n    }\n\n    if (cacheEntries) {\n        Object.keys(cacheEntries).map(entryKey => {\n            // @ts-ignore\n            requestCache.put({ typeName: dataServiceRequest._cacheObjectType, key: entryKey }, { item: cacheEntries[entryKey] });\n\n            if (appCache && isCacheTypeApplication) {\n                // @ts-ignore\n                appCache.put({ typeName: dataServiceRequest._cacheObjectType, key: entryKey }, { item: cacheEntries[entryKey] });\n            }\n        });\n    }\n\n    return cacheEntries;\n};\n\nexport const saveCacheEntries = (\n    dataServiceRequest: DataServiceRequest,\n    data: AsyncResult<any> | any,\n    requestCache: ICache,\n    appCache: ICache,\n    isCacheTypeApplication: boolean\n): { [cacheKey: string]: any } | undefined => {\n    // if return Entity is collection\n    //        if entity type has identifier/primary key\n    //              1. cache array of primay key value of returned entity collection on input cache key\n    //              2. cache individual entity on primary key\n    //        else\n    //              1. cache output on input cache key\n    //\n    // else  if entity type has identifier/primary key\n    //           2. cache output entity on primary key\n    if (\n        !data ||\n        // @ts-ignore\n        (!dataServiceRequest._cacheKeyFromInput && !dataServiceRequest._cacheKeyIdentifierFromReturnType) ||\n        // @ts-ignore\n        !dataServiceRequest._cacheObjectType\n    ) {\n        return;\n    }\n\n    if (data instanceof AsyncResult) {\n        // For a loading Promise, cache based on input cachekey, and then cache output again once complete\n        if (data.status === 'LOADING') {\n            data.then(result => {\n                // @ts-ignore\n                if (dataServiceRequest._totalCount !== undefined) {\n                    // @ts-ignore\n                    data.metadata.count = dataServiceRequest._totalCount;\n                }\n\n                _saveEntityToCache(dataServiceRequest, result, requestCache, appCache, isCacheTypeApplication);\n                return result;\n            });\n            // @ts-ignore\n            requestCache.put({ typeName: dataServiceRequest._cacheObjectType, key: dataServiceRequest._cacheKeyFromInput }, { item: data });\n\n            if (appCache && isCacheTypeApplication) {\n                // @ts-ignore\n                appCache.put({ typeName: dataServiceRequest._cacheObjectType, key: dataServiceRequest._cacheKeyFromInput }, { item: data });\n            }\n            // For a completed promise, save the action results to the cache\n        } else {\n            // @ts-ignore\n            if (dataServiceRequest._totalCount !== undefined) {\n                // @ts-ignore\n                data.metadata.count = dataServiceRequest._totalCount;\n            }\n\n            _saveEntityToCache(dataServiceRequest, data.result, requestCache, appCache, isCacheTypeApplication);\n            return data.result;\n        }\n    } else {\n        return _saveEntityToCache(dataServiceRequest, data, requestCache, appCache, isCacheTypeApplication);\n    }\n};\n"]}