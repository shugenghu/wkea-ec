/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { get, observable, set, transaction } from 'mobx';
/**
 * ClientCache implementation
 *
 * @class ClientCache
 * @implements {ICache}
 * @internal
 */
export class ClientCache {
    constructor() {
        this.internalCache = {};
    }
    /**
     * Gets an item from the cache, and returning it wrapped in a ICacheItem
     * @param type A string representing the type of the cache item
     * @param key The key of the cache item
     */
    Get(type, key) {
        if (!type) {
            throw new Error('Cannot send null arguments');
        }
        if (!key) {
            return null;
        }
        type = type.toUpperCase();
        key = key.toUpperCase();
        return this.internalCache[type] ? this.internalCache[type][key] : null;
    }
    /**
     * Puts an item into the cache
     * @param type A string representing the type of the cache item
     * @param key The key of the cache item
     * @param item The item to be put into the cache
     */
    Put(type, key, item) {
        if (!type || !key) {
            throw new Error('Cannot send null arguments');
        }
        type = type.toUpperCase();
        key = key.toUpperCase();
        if (this.internalCache[type] === undefined) {
            this.internalCache[type] = {};
        }
        return transaction(() => {
            let cacheItem = this.internalCache[type][key];
            if (cacheItem) {
                set(cacheItem, 'Item', item);
            }
            else {
                cacheItem = observable({ Item: item }, undefined, {
                    deep: true,
                    name: `T:${type}_K:${key}`
                });
                this.internalCache[type][key] = cacheItem;
            }
            return cacheItem;
        });
    }
    /**
     * Gets the value only for a specific item from the cache
     * This differs from the Get() method as this will not return a MobX observable value
     * @param type A string representing the type of the cache item
     * @param key The key of the cache item
     */
    GetValue(type, key) {
        const item = this.Get(type, key);
        return item ? this.Value(item) : null;
    }
    /**
     * Get the value out of a cache item
     * This returns the raw value of the item, it will *not* be a MobX observable value
     * @param item The observable cache item to retireve the value from
     */
    Value(item) {
        return get(item, 'Item');
    }
}
export default ClientCache;
//# sourceMappingURL=client-cache.js.map