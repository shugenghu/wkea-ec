{"version":3,"file":"simple-cache.js","sourceRoot":"","sources":["../../../src/cache/simple-cache.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAKH,kCAAkC;AAClC,MAAM,QAAQ,GAAQ,EAAE,CAAC;AAEzB;;;;;;GAMG;AACH,MAAM,CAAC,OAAO,OAAO,WAAW;IAE5B,YAAY,eAAwB;QAChC,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;IACtD,CAAC;IAEM,GAAG,CAAI,IAAY,EAAE,GAAW;QACnC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SACjD;QAED,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACxB,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACzB,OAAsB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SACpD;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,GAAG,CAAI,IAAY,EAAE,GAAW,EAAE,IAAO;QAC5C,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SACjD;QAED,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;YACrC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;SAC9B;QAED,MAAM,SAAS,GAAkB,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAEhD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;QACvC,OAAO,SAAS,CAAC;IACrB,CAAC;IAEM,QAAQ,CAAI,IAAY,EAAE,GAAW;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAI,IAAI,EAAE,GAAG,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAI,IAAmB;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:function-name\nimport { ICache, ICacheItem } from '@msdyn365-commerce/core-internal';\n\n// tslint:disable-next-line:no-any\nconst appCache: any = {};\n\n/**\n * SimpleCache implementation\n *\n * @class SimpleCache\n * @implements {ICache}\n * @internal\n */\nexport default class SimpleCache implements ICache {\n    public localCache: { [type: string]: { [key: string]: ICacheItem } };\n    constructor(useRequestCache: boolean) {\n        this.localCache = useRequestCache ? {} : appCache;\n    }\n\n    public Get<T>(type: string, key: string): ICacheItem<T> | null {\n        if (!type || !key) {\n            throw new Error('Cannot send null arguments');\n        }\n\n        type = type.toUpperCase();\n        key = key.toUpperCase();\n        if (!!this.localCache[type]) {\n            return <ICacheItem<T>>this.localCache[type][key];\n        }\n\n        return null;\n    }\n\n    public Put<T>(type: string, key: string, item: T): ICacheItem<T> | null {\n        if (!type || !key) {\n            throw new Error('Cannot send null arguments');\n        }\n\n        type = type.toUpperCase();\n        key = key.toUpperCase();\n        if (this.localCache[type] === undefined) {\n            this.localCache[type] = {};\n        }\n\n        const cacheItem: ICacheItem<T> = { Item: item };\n\n        this.localCache[type][key] = cacheItem;\n        return cacheItem;\n    }\n\n    public GetValue<T>(type: string, key: string): T | null {\n        const item = this.Get<T>(type, key);\n        return item ? this.Value<T>(item) : null;\n    }\n\n    public Value<T>(item: ICacheItem<T>): T {\n        return item.Item;\n    }\n}\n"]}