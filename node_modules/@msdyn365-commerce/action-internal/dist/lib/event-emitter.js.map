{"version":3,"file":"event-emitter.js","sourceRoot":"","sources":["../../src/event-emitter.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,wBAAwB;AACxB,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAiBtC;;;;;GAKG;AACH,MAAM,kBAAkB;IAAxB;QACY,cAAS,GAAoC,IAAI,GAAG,EAA8B,CAAC;QACnF,iBAAY,GAAwB,OAAO,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,YAAY,EAAE,CAAC;IAwCxG,CAAC;IAtCU,EAAE,CAAkC,KAAa,EAAE,QAA6B;QACnF,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,EAAmB,QAAQ,CAAC,CAAC;SAC1D;aAAM;YACH,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE;gBACd,SAAS,GAAG,EAAE,CAAC;gBACf,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;aACxC;YAED,SAAS,CAAC,IAAI,CAAmB,QAAQ,CAAC,CAAC;SAC9C;IACL,CAAC;IAEM,IAAI,CAA2B,KAAa,EAAE,GAAG,IAAO;QAC3D,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YACrB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAC9C;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAE5C,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;YAC/B,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACzB,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,kBAAkB,CAAC,KAAa;QACnC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;SAC/C;aAAM;YACH,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAChC;IACL,CAAC;CACJ;AAED,eAAe,IAAI,kBAAkB,EAAE,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any\nimport { EventEmitter } from 'events';\n\n/** EventEmitter is available in node, but not on the browser,\n * this class attempts to polyfill that so the action context can remain Isomorphic\n */\n/*@internal*/\n\n/**\n * Type for event emitter listener callback\n */\nexport type ListenerCallback<T extends unknown[] = unknown[]> = (...args0: T) => void;\n\n/**\n * Generic cast type\n */\nexport type GenericCallback = (...args: any) => void;\n\n/**\n * Custom isomorphic event emitter implementation\n *\n * @export\n * @class CustomEventEmitter\n */\nclass CustomEventEmitter {\n    private listeners: Map<string, ListenerCallback[]> = new Map<string, ListenerCallback[]>();\n    private eventEmitter: EventEmitter | null = typeof window !== undefined ? null : new EventEmitter();\n\n    public on<T extends unknown[] = unknown[]>(event: string, callback: ListenerCallback<T>): void {\n        if (!!this.eventEmitter) {\n            this.eventEmitter.on(event, <GenericCallback>callback);\n        } else {\n            let listeners = this.listeners.get(event);\n            if (!!!listeners) {\n                listeners = [];\n                this.listeners.set(event, listeners);\n            }\n\n            listeners.push(<ListenerCallback>callback);\n        }\n    }\n\n    public emit<T extends unknown[] = []>(event: string, ...args: T): boolean {\n        if (!!this.eventEmitter) {\n            return this.eventEmitter.emit(event, args);\n        }\n\n        const listeners = this.listeners.get(event);\n\n        if (listeners && listeners.length) {\n            listeners.forEach(listener => {\n                listener(...args);\n            });\n            return true;\n        }\n\n        return false;\n    }\n\n    public removeAllListeners(event: string): void {\n        if (!!this.eventEmitter) {\n            this.eventEmitter.removeAllListeners(event);\n        } else {\n            this.listeners.delete(event);\n        }\n    }\n}\n\nexport default new CustomEventEmitter();\n"]}