{"version":3,"file":"action-error.js","sourceRoot":"","sources":["../../src/action-error.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH;;GAEG;AACH,MAAM,OAAO,WAAY,SAAQ,KAAK;IA0BlC,YAAY,KAAY;QACpB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,KAAK,YAAY,KAAK,EAAE;YACxB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;aAAM;YACH,IAAI,KAAK,4BAA8B,EAAE;gBACrC,IAAI,CAAC,MAAM,GAAsB,KAAK,CAAC;gBACvC,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC;aACnC;iBAAM,IAAI,KAAK,qCAAkC,EAAE;gBAChD,IAAI,CAAC,MAAM,GAAsB,KAAK,CAAC;gBACvC,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC;aACxC;iBAAM,IAAI,KAAK,mDAAyC,EAAE;gBACvD,IAAI,CAAC,MAAM,GAAsB,KAAK,CAAC;gBACvC,IAAI,CAAC,OAAO,GAAG,0CAA0C,CAAC;aAC7D;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAClC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACxB;iBAAM;gBACH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACtB;SACJ;QAED,0FAA0F;QAC1F,oJAAoJ;QACpJ,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;IA9CD;;OAEG;IACI,MAAM,CAAC,aAAa,CAAC,KAAc;QACtC,OAAO,KAAK,YAAY,KAAK,IAAkB,KAAM,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,CAAC;IACpF,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,KAAc;QACvC,OAAO,KAAK,IAAkB,KAAM,CAAC,MAAM,4BAA8B,CAAC;IAC9E,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,KAAc;QAC7C,OAAO,KAAK,IAAkB,KAAM,CAAC,MAAM,mDAAyC,CAAC;IACzF,CAAC;;AAlBsB,gBAAI,GAAW,aAAa,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n/**\n * Known action error failure states\n */\nexport const enum ActionErrorStatus {\n    Timeout = 'Timeout',\n    HookTimeout = 'Hook Timeout',\n    ServiceUnavailable = 'Service Unavailable'\n}\n\n/**\n * Action Error Wrapper\n */\nexport class ActionError extends Error {\n    public static readonly Name: string = 'ActionError';\n\n    public error?: unknown;\n    public status?: ActionErrorStatus;\n\n    /**\n     * Checks if an object is an action error\n     */\n    public static isActionError(error: unknown): boolean {\n        return error instanceof Error && (<ActionError>error).name === ActionError.Name;\n    }\n\n    public static isTimeoutError(error: unknown): boolean {\n        return error && (<ActionError>error).status === ActionErrorStatus.Timeout;\n    }\n\n    public static isServiceUnavailable(error: unknown): boolean {\n        return error && (<ActionError>error).status === ActionErrorStatus.ServiceUnavailable;\n    }\n\n    /**\n     * Action Errors\n     * @param error Original Error\n     */\n    constructor(error: ActionErrorStatus | Error);\n    constructor(error: Error) {\n        super();\n        this.name = ActionError.Name;\n        if (error instanceof Error) {\n            this.message = error.message;\n            this.error = error;\n        } else {\n            if (error === ActionErrorStatus.Timeout) {\n                this.status = <ActionErrorStatus>error;\n                this.message = 'Action Timeout';\n            } else if (error === ActionErrorStatus.HookTimeout) {\n                this.status = <ActionErrorStatus>error;\n                this.message = 'Action hook Timeout';\n            } else if (error === ActionErrorStatus.ServiceUnavailable) {\n                this.status = <ActionErrorStatus>error;\n                this.message = 'Action failed due to service unavailable';\n            } else if (typeof error === 'string') {\n                this.message = error;\n            } else {\n                this.error = error;\n            }\n        }\n\n        // As of Typescript 2.1 if we extend the Error object the prototype must be set explicitly\n        // See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ActionError.prototype);\n    }\n}\n"]}