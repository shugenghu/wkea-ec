{"version":3,"file":"action-executor.test.js","sourceRoot":"","sources":["../../../src/__tests__/action-executor.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { AppCache, ICache } from '@msdyn365-commerce/cache-internal';\nimport { IActionContext, IActionInput, IRequestContext } from '@msdyn365-commerce/core-internal';\nimport { GenericConsoleLogger, Telemetry } from '@msdyn365-commerce/telemetry-internal';\nimport 'jest';\nimport ActionExecutor from '../action-executor';\nimport * as cacheHelper from '../cache/retail-cache-helper';\nimport { DataServiceQuery } from '@msdyn365-commerce/retail-proxy';\n\nconst StaticTelemetry = new Telemetry();\nStaticTelemetry.registerTraceLogger({ traceLogger: GenericConsoleLogger });\nStaticTelemetry.log = jest.fn();\n\ndescribe('Action Executor', () => {\n    describe('Constructor', () => {\n        it('Should correctly construct a new Action Executor', () => {\n            const mockAction = () => {\n                console.log('Action');\n            };\n            mockAction.prototype.isBatched = false;\n            const mockInput: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey',\n                dataCacheType: () => 'none'\n            };\n            const mockinputs: IActionInput[] = [mockInput];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            expect(actionExecutor).not.toBeNull();\n            expect(actionExecutor.action).toBe(mockAction);\n            expect(actionExecutor.cacheType).toBe('none');\n        });\n        it('Should assign cacheType none if shouldCacheOutput is false', () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockInput: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey',\n                shouldCacheOutput: () => false\n            };\n            const mockinputs: IActionInput[] = [mockInput];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n\n            expect(actionExecutor.cacheType).toBe('none');\n        });\n        it('Should assign cache type request if shouldCacheOutput is true', () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockInput: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey',\n                shouldCacheOutput: () => true\n            };\n            const mockinputs: IActionInput[] = [mockInput];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n\n            expect(actionExecutor.cacheType).toBe('request');\n        });\n        it('Should assign cache type none if no cache strategy is set', () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockInput: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey'\n            };\n            const mockinputs: IActionInput[] = [mockInput];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n\n            expect(actionExecutor.cacheType).toBe('none');\n        });\n        it('Should assign cache type from dataCacheType', () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockInput: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey',\n                dataCacheType: () => 'application'\n            };\n            const mockinputs: IActionInput[] = [mockInput];\n            const trace = jest.fn();\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n\n            expect(actionExecutor.cacheType).toBe('application');\n            expect(trace).not.toHaveBeenCalled();\n        });\n        it('Should create a copy of inputs', () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockInput: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey',\n                dataCacheType: () => 'application'\n            };\n            const mockinputs: IActionInput[] = [mockInput];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            expect((<any>actionExecutor).inputs).not.toBe(mockinputs);\n            expect((<any>actionExecutor).inputs).toEqual(mockinputs);\n        });\n    });\n    describe('Add Inputs', () => {\n        it('Successfully adds inputs', () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockInput: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey',\n                dataCacheType: () => 'application'\n            };\n            const mockInput2: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey2',\n                dataCacheType: () => 'application'\n            };\n            const mockInput3: IActionInput = {\n                getCacheObjectType: () => 'mockAction',\n                getCacheKey: () => 'mockCacheKey3',\n                dataCacheType: () => 'application'\n            };\n            const mockinputs: IActionInput[] = [mockInput];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            actionExecutor.addInputs([mockInput2, mockInput3]);\n            expect((<any>actionExecutor).inputs).toHaveLength(3);\n            expect((<any>actionExecutor).inputs[1]).toEqual(mockInput2);\n            expect((<any>actionExecutor).inputs[2]).toEqual(mockInput3);\n        });\n    });\n    describe('Execute', () => {\n        it('Should not execute if there are no inputs', async () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockinputs: IActionInput[] = [];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            const mockContext: IActionContext = {\n                chainAction: jest.fn(),\n                update: jest.fn(),\n                trace: jest.fn(),\n                get: jest.fn(),\n                getAll: jest.fn(),\n                telemetry: StaticTelemetry,\n                requestContext: <IRequestContext>{},\n                runAllActionsInQueue: jest.fn()\n            };\n            const mockCache: ICache = {\n                get: jest.fn(),\n                put: jest.fn(),\n                getValue: jest.fn(),\n                del: jest.fn(),\n                getAllItems: jest.fn(),\n                flushAll: jest.fn(),\n                copyTo: jest.fn()\n            };\n            const output = await actionExecutor.execute(mockContext, mockCache, mockCache);\n            expect(output.length).toBe(0);\n            expect(mockAction).not.toHaveBeenCalled();\n        });\n        it('Should not execute if input value is already in cache', async () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockinputs: IActionInput[] = [\n                {\n                    getCacheObjectType: () => 'mockAction',\n                    getCacheKey: () => 'mockCacheKey',\n                    dataCacheType: () => 'application'\n                }\n            ];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            const mockContext: IActionContext = {\n                chainAction: jest.fn(),\n                update: jest.fn(),\n                trace: jest.fn(),\n                get: jest.fn(),\n                getAll: jest.fn(),\n                telemetry: <Telemetry>{},\n                requestContext: <IRequestContext>{},\n                runAllActionsInQueue: jest.fn()\n            };\n            const mockCache: ICache = {\n                get: jest.fn(() => <any>{ item: 'super-secret-string' }),\n                put: jest.fn(),\n                getValue: jest.fn(),\n                del: jest.fn(),\n                getAllItems: jest.fn(),\n                flushAll: jest.fn(),\n                copyTo: jest.fn()\n            };\n            const output = await actionExecutor.execute(mockContext, mockCache, mockCache);\n            expect(output.length).toBe(0);\n            expect(mockAction).not.toHaveBeenCalled();\n        });\n        it('Should execute if retail server data action doesnt have cache type', async () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const query = new DataServiceQuery('Tests', 'Test');\n            const dataRequest = query.create({});\n            dataRequest.getCacheObjectType = () => '';\n            dataRequest.getCacheKey = () => 'mockCacheKey';\n            // @ts-ignore\n            dataRequest.dataCacheType = () => 'request';\n            // @ts-ignore\n            dataRequest.getActionId = undefined;\n            const mockinputs: IActionInput[] = [dataRequest];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            const mockContext: IActionContext = {\n                chainAction: jest.fn(),\n                update: jest.fn(),\n                trace: jest.fn(),\n                get: jest.fn(),\n                getAll: jest.fn(),\n                telemetry: <Telemetry>{},\n                requestContext: <IRequestContext>{},\n                runAllActionsInQueue: jest.fn()\n            };\n            const mockCache: ICache = {\n                get: jest.fn(),\n                put: jest.fn(),\n                getValue: jest.fn(),\n                del: jest.fn(),\n                getAllItems: jest.fn(),\n                flushAll: jest.fn(),\n                copyTo: jest.fn()\n            };\n            const output = await actionExecutor.execute(mockContext, mockCache, mockCache);\n            expect(output.length).toBe(0);\n            expect(mockAction).toHaveBeenCalled();\n            expect(mockCache.get).not.toHaveBeenCalled();\n        });\n        it('should execute an action if cache strategy is none', async () => {\n            // arrange\n            const mockAction = jest.fn(() => 'super-secret-action');\n            mockAction.prototype.isBatched = false;\n            const mockinputs: IActionInput[] = [\n                {\n                    getCacheObjectType: () => 'mockAction',\n                    getCacheKey: () => 'mockCacheKey',\n                    dataCacheType: () => 'none'\n                }\n            ];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            const mockContext: IActionContext = {\n                chainAction: jest.fn(),\n                update: jest.fn(),\n                trace: jest.fn(),\n                get: jest.fn(),\n                getAll: jest.fn(),\n                telemetry: <Telemetry>{},\n                requestContext: <IRequestContext>{},\n                runAllActionsInQueue: jest.fn()\n            };\n            const mockCache: ICache = {\n                get: jest.fn(() => {\n                    return <any>{ item: 'super-secret-string' };\n                }),\n                put: jest.fn(),\n                getValue: jest.fn(),\n                del: jest.fn(),\n                getAllItems: jest.fn(),\n                flushAll: jest.fn(),\n                copyTo: jest.fn()\n            };\n\n            // @ts-ignore -- don't need to mock whole object\n            const appCache: AppCache = {\n                get: jest.fn(),\n                put: jest.fn(),\n                getValue: jest.fn(),\n                getAllItems: jest.fn(),\n                flushAll: jest.fn(),\n                del: jest.fn(),\n                copyTo: jest.fn(),\n                hasCacheSetting: jest.fn()\n            };\n\n            // act\n            await actionExecutor.execute(mockContext, mockCache, appCache);\n\n            // assert\n            expect(mockCache.put).toBeCalledWith({ typeName: 'mockAction', key: 'mockCacheKey' }, { item: 'super-secret-action' });\n        });\n\n        it('Should execute an action if the input is not in the cache and cache strategy is not none', async () => {\n            const mockAction = jest.fn(() => 'super-secret-action');\n            mockAction.prototype.isBatched = false;\n            const mockinputs: IActionInput[] = [\n                {\n                    getCacheObjectType: () => 'mockAction',\n                    getCacheKey: () => 'mockCacheKey',\n                    dataCacheType: () => 'application'\n                }\n            ];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            const mockContext: IActionContext = {\n                chainAction: jest.fn(),\n                update: jest.fn(),\n                trace: jest.fn(),\n                get: jest.fn(),\n                getAll: jest.fn(),\n                telemetry: <Telemetry>{},\n                requestContext: <IRequestContext>{},\n                runAllActionsInQueue: jest.fn()\n            };\n            const mockCache: ICache = {\n                get: jest.fn(),\n                put: jest.fn(),\n                getValue: jest.fn(),\n                getAllItems: jest.fn(),\n                flushAll: jest.fn(),\n                del: jest.fn(),\n                copyTo: jest.fn()\n            };\n\n            await actionExecutor.execute(mockContext, mockCache, mockCache);\n            expect(mockCache.put).toBeCalledWith({ typeName: 'mockAction', key: 'mockCacheKey' }, { item: 'super-secret-action' });\n        });\n        it('Should call respect readCacheEntries results', async () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const readCacheEntriesMock = jest.spyOn(cacheHelper, 'readCacheEntries');\n            readCacheEntriesMock.mockReturnValue({ item: 'super-secret-string' });\n            const mockinputs: IActionInput[] = [\n                {\n                    getCacheObjectType: () => 'mockAction',\n                    getCacheKey: () => 'mockCacheKey',\n                    dataCacheType: () => 'application',\n                    // @ts-ignore\n                    readCacheEntries: jest.fn(() => {\n                        return { entry: { item: 'super-secret-string' } };\n                    })\n                }\n            ];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            const mockContext: IActionContext = {\n                chainAction: jest.fn(),\n                update: jest.fn(),\n                trace: jest.fn(),\n                get: jest.fn(),\n                getAll: jest.fn(),\n                telemetry: <Telemetry>{},\n                requestContext: <IRequestContext>{},\n                runAllActionsInQueue: jest.fn()\n            };\n            // @ts-ignore -- don't need to mock all values\n            const mockCache: ICache = {\n                get: jest.fn(() => {\n                    return <any>{ item: 'super-secret-string' };\n                }),\n                put: jest.fn(),\n                getValue: jest.fn()\n            };\n            const output = await actionExecutor.execute(mockContext, mockCache, mockCache);\n            expect(output.length).toBe(0);\n            expect(mockAction).not.toHaveBeenCalled();\n        });\n        it('Should not call cache put if action input has saveCacheEntries', async () => {\n            const mockAction = jest.fn();\n            mockAction.prototype.isBatched = false;\n            const mockinputs: IActionInput[] = [\n                {\n                    getCacheObjectType: () => 'mockAction',\n                    getCacheKey: () => 'mockCacheKey',\n                    dataCacheType: () => 'application',\n                    // @ts-ignore\n                    saveCacheEntries: jest.fn()\n                }\n            ];\n            const actionExecutor = new ActionExecutor(mockAction, mockinputs, StaticTelemetry);\n            const mockContext: IActionContext = {\n                chainAction: jest.fn(),\n                update: jest.fn(),\n                trace: jest.fn(),\n                get: jest.fn(),\n                getAll: jest.fn(),\n                telemetry: <Telemetry>{},\n                requestContext: <IRequestContext>{},\n                runAllActionsInQueue: jest.fn()\n            };\n            // @ts-ignore -- don't need to mock all values\n            const mockCache: ICache = {\n                get: jest.fn(() => {\n                    return <any>{ item: 'super-secret-string' };\n                }),\n                put: jest.fn(),\n                getValue: jest.fn()\n            };\n            const output = await actionExecutor.execute(mockContext, mockCache, mockCache);\n            expect(output.length).toBe(0);\n            expect(mockAction).not.toHaveBeenCalled();\n            expect(mockCache.put).not.toHaveBeenCalled();\n        });\n    });\n});\n"]}