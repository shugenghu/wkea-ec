{"version":3,"file":"EventHelper.test.js","sourceRoot":"","sources":["../../../../src/__tests__/helpers/EventHelper.test.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,WAAW,MAAM,qBAAqB,CAAC;AAE9C;;GAEG;AACH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAChC,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,WAAW,GAAG,WAAW,CAAC;QAChC,IAAI,OAAO,GAAW,EAAE,CAAC;QACzB,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,IAAW,EAAE,EAAE;YACzC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,IAAW,EAAE,EAAE;YACzC,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzB,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACpC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAE7C,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,MAAM,WAAW,GAAG,WAAW,CAAC;QAChC,IAAI,OAAO,GAAW,EAAE,CAAC;QACzB,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,IAAW,EAAE,EAAE;YACzC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEzB,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport EventHelper from '../../event-emitter';\n\n/**\n * @jest-environment node\n */\ndescribe('Event Helper Tests', () => {\n    test('handlers get called when the subscribed even fires', () => {\n        const eventHelper = EventHelper;\n        let message: string = '';\n        let message2: string = '';\n        eventHelper.on('started', (...args: any[]) => {\n            message = args[0];\n        });\n        eventHelper.on('started', (...args: any[]) => {\n            message2 = 'Message-' + args[0];\n        });\n        expect(message).toBe('');\n        eventHelper.emit('started', 'Hello World');\n        expect(message).toBe('Hello World');\n        expect(message2).toBe('Message-Hello World');\n\n        eventHelper.emit('started', 'Goodbye!!');\n        expect(message).toBe('Goodbye!!');\n        expect(message2).toBe('Message-Goodbye!!');\n    });\n\n    test('handlers called only when the subscribed event is called', () => {\n        const eventHelper = EventHelper;\n        let message: string = '';\n        eventHelper.on('started', (...args: any[]) => {\n            message = args[0];\n        });\n\n        expect(message).toBe('');\n\n        eventHelper.emit('ended', 'Hello World');\n        expect(message).toBe('');\n    });\n});\n"]}