/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
/**
 * Action Error Wrapper
 */
export class ActionError extends Error {
    constructor(error) {
        super();
        this.name = ActionError.Name;
        if (error instanceof Error) {
            this.message = error.message;
            this.error = error;
        }
        else {
            if (error === "Timeout" /* Timeout */) {
                this.status = error;
                this.message = 'Action Timeout';
            }
            else if (error === "Hook Timeout" /* HookTimeout */) {
                this.status = error;
                this.message = 'Action hook Timeout';
            }
            else if (error === "Service Unavailable" /* ServiceUnavailable */) {
                this.status = error;
                this.message = 'Action failed due to service unavailable';
            }
            else if (typeof error === 'string') {
                this.message = error;
            }
            else {
                this.error = error;
            }
        }
        // As of Typescript 2.1 if we extend the Error object the prototype must be set explicitly
        // See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, ActionError.prototype);
    }
    /**
     * Checks if an object is an action error
     */
    static isActionError(error) {
        return error instanceof Error && error.name === ActionError.Name;
    }
    static isTimeoutError(error) {
        return error && error.status === "Timeout" /* Timeout */;
    }
    static isServiceUnavailable(error) {
        return error && error.status === "Service Unavailable" /* ServiceUnavailable */;
    }
}
ActionError.Name = 'ActionError';
//# sourceMappingURL=action-error.js.map