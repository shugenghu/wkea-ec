{"version":3,"file":"create-data-action.vnext.js","sourceRoot":"","sources":["../../src/create-data-action.vnext.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAC9D,OAAO,EAAqB,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAEvE;;;;;GAKG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAO,OAAgC,EAA2B,EAAE;IAC1G,MAAM,aAAa,GAAG,cAAc,CAChC,OAAO,EACP,CAAC,IAAmC,EAAE,IAAoB,EAAqB,EAAE;QAC7E,OAAO,IAAI,WAAW,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACvC,IAAI,CAAC,WAAW,CAAO,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;iBACvC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACX,OAAO,CAAO,MAAM,CAAC,CAAC;YAC1B,CAAC,CAAC;iBACD,KAAK,CAAC,KAAK,CAAC,EAAE;gBACX,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CACJ,CAAC;IACwB,aAAa,CAAC,SAAU,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IACrF,OAAgC,aAAa,CAAC;AAClD,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IActionContext, IActionInput, IActionWrapperPrototype, IObservableAction } from '@msdyn365-commerce/core-internal';\nimport { AsyncResult } from '@msdyn365-commerce/retail-proxy';\nimport { dataActionOptions, wrapDataAction } from './wrap-data-action';\n\n/**\n * Higher order function which exposes the current method as an action\n * @param action The action method\n * @param isBatched If the service call can handle batched requests efficiently\n * @param input Optional parameter of a single instance or an array of IActionInputs that will be passed to the action method.\n */\nexport const createObservableDataAction = <TOut>(options: dataActionOptions<TOut>): IObservableAction<TOut> => {\n    const wrappedAction = wrapDataAction(\n        options,\n        (arg1: IActionInput | IActionInput[], arg2: IActionContext): AsyncResult<TOut> => {\n            return new AsyncResult((resolve, reject) => {\n                arg2.chainAction<TOut>(options.action, arg1)\n                    .then(result => {\n                        resolve(<TOut>result);\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            });\n        }\n    );\n    (<IActionWrapperPrototype>wrappedAction.prototype).setProperty('isObservable', true);\n    return <IObservableAction<TOut>>wrappedAction;\n};\n"]}