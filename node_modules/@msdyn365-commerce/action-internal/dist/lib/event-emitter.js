/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// tslint:disable:no-any
import { EventEmitter } from 'events';
/**
 * Custom isomorphic event emitter implementation
 *
 * @export
 * @class CustomEventEmitter
 */
class CustomEventEmitter {
    constructor() {
        this.listeners = new Map();
        this.eventEmitter = typeof window !== undefined ? null : new EventEmitter();
    }
    on(event, callback) {
        if (!!this.eventEmitter) {
            this.eventEmitter.on(event, callback);
        }
        else {
            let listeners = this.listeners.get(event);
            if (!!!listeners) {
                listeners = [];
                this.listeners.set(event, listeners);
            }
            listeners.push(callback);
        }
    }
    emit(event, ...args) {
        if (!!this.eventEmitter) {
            return this.eventEmitter.emit(event, args);
        }
        const listeners = this.listeners.get(event);
        if (listeners && listeners.length) {
            listeners.forEach(listener => {
                listener(...args);
            });
            return true;
        }
        return false;
    }
    removeAllListeners(event) {
        if (!!this.eventEmitter) {
            this.eventEmitter.removeAllListeners(event);
        }
        else {
            this.listeners.delete(event);
        }
    }
}
export default new CustomEventEmitter();
//# sourceMappingURL=event-emitter.js.map