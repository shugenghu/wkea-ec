{"version":3,"file":"wrap-data-action.js","sourceRoot":"","sources":["../../src/wrap-data-action.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAarD;;;;GAIG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAO,OAAgC,EAAE,UAA6B,EAAqB,EAAE;IACvH,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,wFAAwF,CAAC,CAAC;KAC7G;IAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACjB,MAAM,IAAI,KAAK,CACX,0EAA0E,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE,CAC/H,CAAC;KACL;IAED,IAAI,SAAS,GAAG,OAAO,CAAC,KAAM,CAAC;IAC/B,IAAI,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACpB,IAAI,SAAS,GAAG,OAAO,CAAC,SAAU,CAAC;IACnC,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG;QACvB,EAAE;QACF,SAAS;QACT,QAAQ,EAAE,IAAI;KACjB,CAAC;IAEF,UAAU,CAAC,SAAS,GAAG;QACnB,EAAE;QACF,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,OAAO,CAAC,MAAM;QACvB,IAAI,cAAc,CAAC,cAAsB;YACrC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,GAAG,cAAc,CAAC;QAC7D,CAAC;QACD,IAAI,cAAc;YACd,OAAO,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,IAAI,EAAE,CAAC;QACzD,CAAC;QACD,IAAI,SAAS,CAAC,IAAc;YACxB,aAAa;YACb,SAAS,GAAG,IAAI,CAAC;QACrB,CAAC;QACD,IAAI,SAAS;YACT,OAAO,SAAS,CAAC;QACrB,CAAC;QACD,IAAI,SAAS;YACT,OAAO,SAAS,CAAC;QACrB,CAAC;QACD,IAAI,SAAS,CAAC,UAAmB;YAC7B,SAAS,GAAG,UAAU,CAAC;QAC3B,CAAC;QACD,IAAI,MAAM;YACN,OAAO,OAAO,CAAC,MAAM,CAAC;QAC1B,CAAC;QACD,IAAI,MAAM,CAAC,SAAwB;YAC/B,4FAA4F;YAC5F,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC;YACnD,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,CAAC;YAClC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC;YACvD,SAAS,CAAC,SAAS,GAAG,EAAE,GAAG,SAAS,CAAC,SAAS,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YAC9E,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;QAC/B,CAAC;QACD,WAAW,EAAE,CAAC,YAAoB,EAAE,KAAc,EAAE,EAAE;YAClD,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;YAC/C,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAChF,CAAC;KACJ,CAAC;IACF,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE;QACzB,eAAe,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;KACvE;IAED,OAAO,UAAU,CAAC;AACtB,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAction, IActionInput, IObservableAction } from '@msdyn365-commerce/core-internal';\nimport { ActionRegistrar } from './action-registrar';\n\n// tslint:disable:prefer-method-signature no-any\n\nexport type dataActionOptions<TOut> = {\n    action: IAction<TOut>;\n    isBatched?: boolean;\n    id?: string;\n    input?: (...args: any[]) => IActionInput | IActionInput[];\n};\n\ntype IActionWrap<TOut> = IAction<TOut> | IObservableAction<TOut>;\n\n/**\n * Wraps a data action with the associated action wrap.\n * @param options\n * @param actionWrap\n */\nexport const wrapDataAction = <TOut>(options: dataActionOptions<TOut>, actionWrap: IActionWrap<TOut>): IActionWrap<TOut> => {\n    if (!options) {\n        throw new Error('wrapDataAction called with invalid options. Options should have atleast action defined');\n    }\n\n    if (!options.action) {\n        throw new Error(\n            `Received invalid actions when attempting to parse options. Input name: ${options.input ? options.input.name : 'undefined'}`\n        );\n    }\n\n    let inputFunc = options.input!;\n    let id = options.id;\n    let isBatched = options.isBatched!;\n    options.action.prototype = {\n        id,\n        isBatched,\n        isAction: true\n    };\n\n    actionWrap.prototype = {\n        id,\n        isAction: false,\n        _action: options.action,\n        set RegistrationId(registrationId: string) {\n            options.action.prototype.RegistrationId = registrationId;\n        },\n        get RegistrationId(): string {\n            return options.action.prototype.RegistrationId || '';\n        },\n        set inputFunc(func: Function) {\n            // @ts-ignore\n            inputFunc = func;\n        },\n        get inputFunc(): Function {\n            return inputFunc;\n        },\n        get isBatched(): boolean {\n            return isBatched;\n        },\n        set isBatched(_isBatched: boolean) {\n            isBatched = _isBatched;\n        },\n        get Action(): IAction<TOut> {\n            return options.action;\n        },\n        set Action(newAction: IAction<TOut>) {\n            // There are no getter/setters on the action function prototype so this behaves as expected.\n            inputFunc = newAction.prototype.input || inputFunc;\n            id = newAction.prototype.id || id;\n            isBatched = newAction.prototype.isBatched || isBatched;\n            newAction.prototype = { ...newAction.prototype, ...options.action.prototype };\n            options.action = newAction;\n        },\n        setProperty: (propertyName: string, value: unknown) => {\n            options.action.prototype[propertyName] = value;\n            actionWrap.prototype[propertyName] = options.action.prototype[propertyName];\n        }\n    };\n    if (actionWrap.prototype.id) {\n        ActionRegistrar.registerAction(actionWrap.prototype.id, actionWrap);\n    }\n\n    return actionWrap;\n};\n"]}