/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
/**
 * Method to indicate if the action should look in app cache for data
 * @param input ActionInput
 */
export const shouldReadFromAppCache = (input, appCache) => {
    return !!appCache && input && input.dataCacheType !== undefined && input.dataCacheType() !== 'none';
};
/**
 * Method to indicate if the action should write in app cache
 * @param input ActionInput
 */
export const shouldWriteToAppCache = (input, appCache) => {
    return isAppCacheData(input, appCache);
};
/**
 * Method to indicate if the action's cache type is application
 * @param input ActionInput
 */
export const isAppCacheData = (input, appCache) => {
    if (!appCache) {
        return false;
    }
    if (input) {
        if (input.dataCacheType !== undefined && input.dataCacheType() === 'application') {
            return true;
        }
        // if an entity has a cache setting defined, we cache that entity - caching retail proxy actions
        return appCache.hasCacheSetting(input.getCacheObjectType());
    }
    return false;
};
//# sourceMappingURL=action-runtime-utils.js.map