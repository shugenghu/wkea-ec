{"version":3,"file":"action-registrar.js","sourceRoot":"","sources":["../../src/action-registrar.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport {\n    ActionPostHook,\n    ActionPostReaderHook,\n    ActionPreHook,\n    ActionPreReaderHook,\n    IAnyAction,\n    msdyn365Commerce\n} from '@msdyn365-commerce/core-internal';\nimport { LogLevel, StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';\n\nconst DEPRECATED_HOOK_TYPES = ['pre', 'post', 'preRead', 'postRead'];\n\nexport namespace ActionRegistrar {\n    type ActionHook<TOut = unknown> = ActionPreHook | ActionPostHook<TOut>;\n\n    export type ActionRegistration = {\n        action?: IAnyAction<unknown>;\n        pre?: Set<ActionPreHook>;\n        post?: Set<ActionPostHook<unknown>>;\n        preRead?: Set<ActionPreHook>;\n        postRead?: Set<ActionPostHook<unknown>>;\n        preReader?: Set<ActionPreReaderHook>;\n        postReader?: Set<ActionPostReaderHook<unknown>>;\n    };\n\n    interface IActionDictionary {\n        [actionKey: string]: ActionRegistration;\n    }\n\n    const dataActionRegister: IActionDictionary = {};\n\n    export const getRegistration = (id?: string): ActionRegistration | undefined => {\n        return id ? dataActionRegister[id] : undefined;\n    };\n\n    export const unwrapAction = (action: IAnyAction<unknown>): IAnyAction<unknown> => {\n        if (action && action.prototype && !action.prototype.isAction) {\n            // registered action is an action wrapper. Unwrap it.\n            // @ts-ignore;\n            return action.prototype.Action;\n        }\n        return action;\n    };\n    /**\n     * Gets the action registered with id\n     * @param id - ID to look up action\n     */\n    export const getAction = <TOut>(id?: string): IAnyAction<TOut> | undefined => {\n        if (!id) {\n            return;\n        }\n        const registeredAction = dataActionRegister[id];\n        if (registeredAction) {\n            return <IAnyAction<TOut>>registeredAction.action;\n        }\n        return;\n    };\n\n    /**\n     * registers action. Does nothing if action is already registered\n     * @param id - ID to register action with\n     * @param action - action to register\n     */\n    export const registerAction = <T>(id: string, dataAction: IAnyAction<T>): IAnyAction<T> | undefined => {\n        if (!id || !dataAction) {\n            // unable to register no id or action\n            return;\n        }\n\n        if (dataActionRegister[id]) {\n            const registration = dataActionRegister[id];\n            registration.action = dataAction;\n            return <IAnyAction<T>>dataActionRegister[id].action;\n        } else {\n            const registration = { action: dataAction };\n            dataActionRegister[id] = registration;\n            return dataAction;\n        }\n    };\n\n    const registerHook = <HookType = ActionHook | ActionHook[]>(\n        hookType: 'pre' | 'post' | 'preRead' | 'postRead' | 'preReader' | 'postReader'\n    ) => (id: string, hook: HookType) => {\n        // deprecate read only hook\n        if (!msdyn365Commerce.isBrowser && DEPRECATED_HOOK_TYPES.indexOf(hookType) > -1) {\n            StaticTelemetry.log(LogLevel.Warning,\n                                `Data action hooks are deprecated and will be removed in later versions. Please use data action overrides to extend data actions. The related action of this ${hookType} hook is - ${id}`\n            );\n        }\n\n        const registration = getRegistration(id);\n        // coerce hook into an iterable\n        const hooks = Array.isArray(hook) ? hook : [hook];\n        if (!registration) {\n            // If the registration does not exist init one with just the hooks\n            const newRegistration: { [id: string]: unknown } = {};\n            newRegistration[hookType] = new Set<ActionHook>(<ActionHook[]>hooks);\n            dataActionRegister[id] = newRegistration;\n        } else {\n            // If the registration does exist merge new hooks with existing hooks\n            const hookRegistration = registration[hookType] || new Set<ActionHook>();\n            hooks.forEach(h => {\n                hookRegistration.add(<ActionHook>h);\n            });\n            // @ts-ignore\n            registration[hookType] = hookRegistration;\n        }\n        return hook;\n    };\n\n    // tslint:disable-next-line: no-any\n    export const registerPostHook = registerHook<ActionPostHook<any> | ActionPostHook<any>[]>('post');\n    export const registerPreHook = registerHook<ActionPreHook | ActionPreHook[]>('pre');\n    export const registerPreReadOnlyHook = registerHook<ActionPreHook | ActionPreHook[]>('preRead');\n    // tslint:disable-next-line: no-any\n    export const registerPostReadOnlyHook = registerHook<ActionPostHook<any> | ActionPostHook<any>[]>('postRead');\n    export const registerPreReaderHook = registerHook<ActionPreReaderHook | ActionPreReaderHook[]>('preReader');\n    // tslint:disable-next-line: no-any\n    export const registerPostReaderHook = registerHook<ActionPostReaderHook<any> | ActionPostReaderHook<any>[]>('postReader');\n\n    export const getPreHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].pre;\n    };\n\n    export const getPostHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].post;\n    };\n\n    export const getPreReadHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].preRead;\n    };\n\n    export const getPostReadHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].postRead;\n    };\n\n    export const getPreReaderHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].preReader;\n    };\n    export const getPostReaderHooks = (id: string) => {\n        return dataActionRegister[id] && dataActionRegister[id].postReader;\n    };\n\n    /**\n     * Resolves the action and returns first action in action chain. Registers action if not yet registered\n     * @param id - Action id to look up or register under\n     * @param action - Action function\n     */\n    export const resolveAction = <T>(id: string, action: IAnyAction<T>): IAnyAction<T> | undefined => {\n        return getAction(id) || <IAnyAction<T>>registerAction(id, action) || action;\n    };\n\n    export const resolveRegistration = (\n        id: string,\n        action: IAnyAction<unknown>,\n        preHooks?: ActionPreHook[],\n        postHooks?: ActionPostHook<unknown>[],\n        preReadHooks?: ActionPreHook[],\n        postReadHooks?: ActionPostHook<unknown>[],\n        preReaderHooks?: ActionPreReaderHook[],\n        postReaderHooks?: ActionPostReaderHook<unknown>[]\n    ) => {\n        const resolvedAction = resolveAction(id, action);\n        if (!resolvedAction) {\n            return;\n        }\n        preHooks && registerPreHook(id, preHooks);\n        postHooks && registerPostHook(id, postHooks);\n        preReadHooks && registerPreReadOnlyHook(id, preReadHooks);\n        postReadHooks && registerPostReadOnlyHook(id, postReadHooks);\n        preReaderHooks && registerPreReaderHook(id, preReaderHooks);\n        postReaderHooks && registerPostReaderHook(id, postReaderHooks);\n        return getRegistration(id);\n    };\n}\n"]}