{"version":3,"file":"action-runtime-utils.js","sourceRoot":"","sources":["../../src/action-runtime-utils.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAKH;;;GAGG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,KAAmB,EAAE,QAAuB,EAAW,EAAE;IAC5F,OAAO,CAAC,CAAC,QAAQ,IAAI,KAAK,IAAI,KAAK,CAAC,aAAa,KAAK,SAAS,IAAI,KAAK,CAAC,aAAa,EAAE,KAAK,MAAM,CAAC;AACxG,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAAmB,EAAE,QAAuB,EAAW,EAAE;IAC3F,OAAO,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAmB,EAAE,QAAuB,EAAW,EAAE;IACpF,IAAI,CAAC,QAAQ,EAAE;QACX,OAAO,KAAK,CAAC;KAChB;IAED,IAAI,KAAK,EAAE;QACP,IAAI,KAAK,CAAC,aAAa,KAAK,SAAS,IAAI,KAAK,CAAC,aAAa,EAAE,KAAK,aAAa,EAAE;YAC9E,OAAO,IAAI,CAAC;SACf;QAED,gGAAgG;QAChG,OAAkB,QAAS,CAAC,eAAe,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC;KAC3E;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { AppCache, ICache } from '@msdyn365-commerce/cache-internal';\nimport { IActionInput } from '@msdyn365-commerce/core-internal';\n\n/**\n * Method to indicate if the action should look in app cache for data\n * @param input ActionInput\n */\nexport const shouldReadFromAppCache = (input: IActionInput, appCache: ICache | null): boolean => {\n    return !!appCache && input && input.dataCacheType !== undefined && input.dataCacheType() !== 'none';\n};\n\n/**\n * Method to indicate if the action should write in app cache\n * @param input ActionInput\n */\nexport const shouldWriteToAppCache = (input: IActionInput, appCache: ICache | null): boolean => {\n    return isAppCacheData(input, appCache);\n};\n\n/**\n * Method to indicate if the action's cache type is application\n * @param input ActionInput\n */\nexport const isAppCacheData = (input: IActionInput, appCache: ICache | null): boolean => {\n    if (!appCache) {\n        return false;\n    }\n\n    if (input) {\n        if (input.dataCacheType !== undefined && input.dataCacheType() === 'application') {\n            return true;\n        }\n\n        // if an entity has a cache setting defined, we cache that entity - caching retail proxy actions\n        return (<AppCache>appCache).hasCacheSetting(input.getCacheObjectType());\n    }\n\n    return false;\n};\n"]}