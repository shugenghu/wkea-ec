{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../src/functions.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,8EAAqE;AACrE,4DAAsC;AACtC,mDAA6B;AAC7B,+BAAiC;AACjC,qCAAwD;AAExD,MAAM,QAAQ,GAAG,KAAK,CAAC;AAEvB;;;;GAIG;AACU,QAAA,iBAAiB,GAAG,CAAC,SAAmB,EAAE,EAAE;IACrD,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;QACjC,OAAO,EAAE,CAAC;KACb;IACD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,UAAkB,EAAE,EAAE,CAAC,YAAY,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AAChG,CAAC,CAAC;AAEF;;;;;GAKG;AACU,QAAA,SAAS,GAAG,CAAC,OAA8D,EAAU,EAAE;IAChG,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,EAAE,CAAC;KACb;IACD,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;SACtB,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,OAAO,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;SAClD,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxB,CAAC,CAAC;AAEF;;GAEG;AACU,QAAA,MAAM,GAAG,gBAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAEpC,QAAA,eAAe,GAAG,CAAC,KAAmB,EAAE,EAAE;IACnD,OAAO;QACH,kCAAkC;QAClC,KAAK,CAAC,WAAW;QACjB,iCAAiC;QACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC;QACxC,oDAAoD;QACpD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,oBAAoB,CAAC;QAC9C,8BAA8B;QAC9B,qCAA4B;KAC/B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC,CAAC;AAEF;;;;;GAKG;AACU,QAAA,2BAA2B,GAAG,CAAO,KAAmB,EAAE,OAAiB,EAAE,OAAgB,EAA6B,EAAE;IACrI,MAAM,MAAM,GAAG;QACX,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY;QAChD,cAAc,EAAE,OAAO;QACvB,SAAS,EAAE,CAAC,OAAO;QACnB,iBAAiB,EAAE,IAAI;QACvB,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,cAAc;QACvD,mBAAmB;QACnB,cAAc,EAAE,OAAO;KAC1B,CAAC;IAEF,MAAM,OAAO,GAAuB,CAAC,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAEpH,MAAM,cAAc,GAAG,yBAAiB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,MAAM,YAAY,GAAG,uBAAe,CAAC,KAAK,CAAC,CAAC;IAC5C,OAAO,gCACA,MAAM,KACT,IAAI,EAAE;YACF,cAAc;YACd,4BAA4B;YAC5B,MAAM,iCAAY,CAAC,KAAK,CAAC,UAAU,CAAC;SACvC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAChB,YAAY,GACf,CAAC;AACN,CAAC,CAAA,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { safeReadFile } from '@msdyn365-commerce/utilities-internal';\nimport * as nodeSass from 'node-sass';\nimport * as path from 'path';\nimport { promisify } from 'util';\nimport { getSharedComponentsSourceDir } from './consts';\nimport { IParsedTheme } from './IThemeRegistration';\nconst SCSS_SEP = `;\\n`;\n\n/**\n * Create scss import statements based on file paths\n * @param filePaths paths to files that should be imported\n * @internal\n */\nexport const createImportPaths = (filePaths: string[]) => {\n    if (!filePaths || !filePaths.length) {\n        return [];\n    }\n    return filePaths.map((importPath: string) => `@import \"${importPath.replace(/\\\\/g, '/')}\"`);\n};\n\n/**\n * Helper function to return SCSS string for object map\n *\n * @param jsonMap JSON Key-value pairs where key = variable name, value = value\n * @internal\n */\nexport const json2scss = (jsonMap: { [variableName: string]: string | number | boolean }): string => {\n    if (!jsonMap) {\n        return '';\n    }\n    return Object.keys(jsonMap)\n        .map(propKey => `$${propKey}: ${jsonMap[propKey]}`)\n        .join(SCSS_SEP);\n};\n\n/**\n * Convenience function\n */\nexport const render = promisify(nodeSass.render);\n\nexport const getIncludePaths = (theme: IParsedTheme) => {\n    return [\n        // resolve first from theme folder\n        theme.themeFolder,\n        // then resolve from node_modules\n        path.join(process.cwd(), 'node_modules'),\n        // then attempt to resolve from hoisted node_modules\n        path.join(process.cwd(), '../../node_modules'),\n        // then try shared components,\n        getSharedComponentsSourceDir\n    ].filter(Boolean);\n};\n\n/**\n *\n * @param theme Parsed theme\n * @param modules Modules to import\n * @param isDebug IsDebug target\n */\nexport const getNodeSassOptionsForTarget = async (theme: IParsedTheme, modules: string[], isDebug: boolean): Promise<nodeSass.Options> => {\n    const result = {\n        outputStyle: isDebug ? 'expanded' : 'compressed',\n        sourceComments: isDebug,\n        sourceMap: !isDebug,\n        sourceMapContents: true,\n        outFile: isDebug ? theme.devPath : theme.productionPath,\n        // embed sourcemaps\n        sourceMapEmbed: isDebug\n    };\n\n    const imports: string[] = <string[]>[theme.functionsEntry, theme.variablesEntry, theme.mixinsEntry].filter(Boolean);\n\n    const orderedImports = createImportPaths(imports).join(SCSS_SEP);\n    const includePaths = getIncludePaths(theme);\n    return <nodeSass.Options>{\n        ...result,\n        data: [\n            orderedImports,\n            // theme entry file contents\n            await safeReadFile(theme.themeEntry)\n        ].join(SCSS_SEP),\n        includePaths\n    };\n};\n"]}