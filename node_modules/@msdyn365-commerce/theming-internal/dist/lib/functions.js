"use strict";
/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utilities_internal_1 = require("@msdyn365-commerce/utilities-internal");
const nodeSass = tslib_1.__importStar(require("node-sass"));
const path = tslib_1.__importStar(require("path"));
const util_1 = require("util");
const consts_1 = require("./consts");
const SCSS_SEP = `;\n`;
/**
 * Create scss import statements based on file paths
 * @param filePaths paths to files that should be imported
 * @internal
 */
exports.createImportPaths = (filePaths) => {
    if (!filePaths || !filePaths.length) {
        return [];
    }
    return filePaths.map((importPath) => `@import "${importPath.replace(/\\/g, '/')}"`);
};
/**
 * Helper function to return SCSS string for object map
 *
 * @param jsonMap JSON Key-value pairs where key = variable name, value = value
 * @internal
 */
exports.json2scss = (jsonMap) => {
    if (!jsonMap) {
        return '';
    }
    return Object.keys(jsonMap)
        .map(propKey => `$${propKey}: ${jsonMap[propKey]}`)
        .join(SCSS_SEP);
};
/**
 * Convenience function
 */
exports.render = util_1.promisify(nodeSass.render);
exports.getIncludePaths = (theme) => {
    return [
        // resolve first from theme folder
        theme.themeFolder,
        // then resolve from node_modules
        path.join(process.cwd(), 'node_modules'),
        // then attempt to resolve from hoisted node_modules
        path.join(process.cwd(), '../../node_modules'),
        // then try shared components,
        consts_1.getSharedComponentsSourceDir
    ].filter(Boolean);
};
/**
 *
 * @param theme Parsed theme
 * @param modules Modules to import
 * @param isDebug IsDebug target
 */
exports.getNodeSassOptionsForTarget = (theme, modules, isDebug) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const result = {
        outputStyle: isDebug ? 'expanded' : 'compressed',
        sourceComments: isDebug,
        sourceMap: !isDebug,
        sourceMapContents: true,
        outFile: isDebug ? theme.devPath : theme.productionPath,
        // embed sourcemaps
        sourceMapEmbed: isDebug
    };
    const imports = [theme.functionsEntry, theme.variablesEntry, theme.mixinsEntry].filter(Boolean);
    const orderedImports = exports.createImportPaths(imports).join(SCSS_SEP);
    const includePaths = exports.getIncludePaths(theme);
    return Object.assign(Object.assign({}, result), { data: [
            orderedImports,
            // theme entry file contents
            yield utilities_internal_1.safeReadFile(theme.themeEntry)
        ].join(SCSS_SEP), includePaths });
});
//# sourceMappingURL=functions.js.map