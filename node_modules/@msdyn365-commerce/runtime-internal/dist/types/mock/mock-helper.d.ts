/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IDictionary, IModule, IPageResponse } from '@msdyn365-commerce/core-internal';
import { InternalTelemetry } from '@msdyn365-commerce/telemetry-internal';
import { IModuleOverrideData } from '../utils/query-utils';
/**
 * Captures mock ids from query parameters
 * @param query Dictionary of query parameters
 * @returns array of module mock ids
 */
export declare const getMockIdFromRequest: (query: IDictionary<string>) => string[];
/**
 * Parses the payload
 * @param content stringified version of paryload
 * @returns JSON object
 */
export declare const parsePayload: (content: string | object) => any;
export declare const getOverrideProperties: (query: IDictionary<string>, telemetry: InternalTelemetry) => IModuleOverrideData | null;
export declare const overrideMockDataIfNeeded: (mockId: string, mockModule: object, queryStrings: IDictionary<string>, telemetry: InternalTelemetry) => IModule<{
    [x: string]: any;
}, {
    [x: string]: any;
}>;
/**
 * Searches for mock regiserted under module name. First checks partner mocks from source then microsoft-modules.
 * @param moduleName
 * @param mock
 */
export declare const searchForMock: (moduleName: string, mock: string) => Promise<string | false>;
/**
 * Retrives a mocked module from file without overrides
 * @returns Parsed module if found otherwise false.
 */
declare let getMockModule: (moduleName: string, mock: string) => Promise<any>;
export declare const getV3mockPageJson: () => IPageResponse;
declare let getMockDataBasedOnRequestQueryString: (queryStrings: IDictionary<string>, telemetry: InternalTelemetry) => Promise<IPageResponse>;
export { getMockModule, getMockDataBasedOnRequestQueryString };
