/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ICache } from '@msdyn365-commerce/cache-internal';
import { IModuleContract, IPageResponse, IRequestContext } from '@msdyn365-commerce/core-internal';
import { IInternalTelemetry } from '@msdyn365-commerce/telemetry-internal';
interface IModuleContractWithMock extends IModuleContract {
    actionMock?: string;
}
/**
 * Searches a module contract for all listed action mocks
 * @param module module or array of modules to search for
 * @param mocks Array of mocks that have been found. This array will be modified
 */
export declare const searchPage: (module: IModuleContractWithMock | IModuleContractWithMock[], mocks: string[]) => void;
/**
 * Captures all action mocks from a page context
 * @param pageResponse Current page context
 */
export declare const getMockPathPageResponse: (pageResponse: IPageResponse) => string[];
/**
 * Formats the correct path and mock based from query string
 *  Looks for requestMock=moduleName:mockName,moduleName:mockName,moduleName
 *  where mock name is either a file or a directory
 */
export declare const getMockPathQuery: (query: {
    [x: string]: any;
}) => string[];
/**
 * Searches file system for mocks
 * mockTuple = 'moduleName:mockName'
 */
export declare const findMockPaths: (mockTuple: string) => Promise<string | false>;
/**
 * Pulls mock data
 */
export declare const populateClientCache: (context: IRequestContext, pageResponse: IPageResponse, clientCache: ICache, telemetry: IInternalTelemetry) => Promise<void>;
export {};
