/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ICache } from '@msdyn365-commerce/cache-internal';
import { IModule, IModuleContract, IPageResponse, IRequestContext, IResourceManager } from '@msdyn365-commerce/core-internal';
import { ITelemetry } from '@msdyn365-commerce/telemetry-internal';
/**
 * Class to hold the page view model, areas and regions
 */
export declare class PageContext {
    requestContext: IRequestContext;
    pageRoot: IModuleContract & {
        theme: string;
    };
    requestCache: ICache;
    private _moduleList;
    private _themeModulesList;
    constructor(pageData: IPageResponse | any, requestContext: IRequestContext, requestCache: ICache, resourceManager?: IResourceManager);
    /**
     * Returns callback function that returns module rendering metadata for a given module
     */
    get modules(): (name: string) => IModule;
    /**
     * Get all the modules listed in the PageContext from the cache
     */
    get allModules(): IModule[];
    setAppCacheEntries(appCacheEntries: string[]): void;
    /**
     * Checkis if the given module is deferred module
     * @param name name of the module
     */
    deferred(name: string): Boolean;
    getResourceTextForPlaceholderPreview(): string;
    /**
     * Marks module as deferred
     * @param name name of the module
     */
    markModuleAsDeferred(name: string): void;
    /**
     * Inserts requested modules into cache on client side
     * @param pageData page data object
     * @param telemetry telemetry object
     */
    putRequestedModulesInCacheOnClient(pageData: any, telemetry: ITelemetry): Promise<void>;
    /**
     * Populates data actions results from cache
     * @param cacheObjectType entity type
     * @param cacheKey cache key
     */
    private _populateDataActionResultFromCache;
    /**
     * Resolves cache reference for the given entity type
     * @param cacheObjectType entity type that is cached
     * @param cacheRefInfo cache ref key
     */
    private _resolveCacheRef;
    /**
     * Inserts requested modules in cache to prepare the initialData that will be sent to client
     * @param pageData pageData object with list of modules
     * @param resourceManager resourceManager that contains the localized strings
     */
    private _putRequestedModulesInCacheOnServer;
    /**
     * Initializes theme modules list that need to be loaded on the client
     */
    private _initThemeModulesList;
}
