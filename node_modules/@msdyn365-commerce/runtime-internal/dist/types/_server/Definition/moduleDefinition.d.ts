/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IPlatformSettings, IThemeModule } from '@msdyn365-commerce/core-internal';
import { IInternalTelemetry } from '@msdyn365-commerce/telemetry-internal';
import { IModuleBinder } from '../../app-initialization/models';
export declare const enum THEME_MODULE {
    TYPE = "themeModule",
    PAGES = "pages",
    LAYOUTS = "layouts",
    SEGMENTS = "segments",
    STYLES = "styles",
    STYLE_PRESET_DEFINITION_FILE = ".definition.scss.json",
    STYLE_PRESET_INSTANCE_FILE = ".scss.json",
    DEF_EXTENSIONS = "definition-extensions",
    VIEWS = "views",
    DEF_EXT_FILE = ".definition.ext.json",
    SETTINGS_FILE = ".theme.settings.json",
    PAGE_FILE = ".page.json",
    SEGMENT_FILE = ".segment.json",
    DEFINITION_FILE = ".definition.json"
}
export declare const enum DefinitionType {
    Modules = "modules",
    ModuleList = "modulelist",
    /**
     * Contains themes & styles definitions
     */
    Styles = "styles",
    AppSettings = "appsettings",
    ImageSettings = "imagesettings",
    ThemeSettings = "themesettings",
    Themes = "themes",
    ThemesList = "themeslist",
    Resources = "resources",
    Experiments = "experiments"
}
export declare function getFailedModulesList(): Object[];
/**
 * route [/dapi/modulelist] to return list of all register modules.
 */
export declare function getModulesList(): Promise<string[]>;
export declare const getModuleDefinition: (moduleBinder: IModuleBinder, telemetry: IInternalTelemetry) => Promise<any>;
export declare const isDAPIOptimizationDisabled: (platformSettings?: IPlatformSettings | undefined) => boolean | undefined;
export declare const getDataJsonAndParse: (moduleBinder: IModuleBinder, telemetry: IInternalTelemetry) => Promise<any>;
export declare const getModuleDefinitionApiFile: (modules: IModuleBinder[], telemetry: IInternalTelemetry) => Promise<object[] | undefined>;
/**
 * route to return definition JSON
 * [/dapi/modules] - return all modules defintion
 * [/dapi/modules?type=<moduleType>] - return specific module type defintion
 * @param moduleType
 * @param telemetry
 */
export declare function getModuleDefinitions(moduleType: string, telemetry: IInternalTelemetry): Promise<string | object[]>;
/**
 * Method to return the full theme module object with layouts and segments
 * @param moduleName theme module name to be filtered
 * @param telemetry
 */
export declare const getThemeModules: (moduleName: string | null, telemetry: IInternalTelemetry) => Promise<string | IThemeModule[]>;
/**
 * Method to return list of theme modules names
 * @param telemetry
 */
export declare const getThemeModulesList: (telemetry: IInternalTelemetry) => Promise<string[]>;
