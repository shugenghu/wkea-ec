/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IRequestContext } from '@msdyn365-commerce/core-internal';
import { IInternalTelemetry } from '@msdyn365-commerce/telemetry-internal';
/**
 * Convenience shorthand for number | type which can be used as a valid key index into an object
 */
export declare type IndexableType = number | string;
/**
 * @description Interface representing returned data for chunks used in rendering pass, <script> and <link> tags,
 *             paths to files, and flag to determine of chunking is currently even enabled
 */
export interface IUsedChunks {
    isChunkingEnabled: boolean;
    assets?: IAssetsByChunkName;
    entryChunkScripts?: string[];
    bootstrapChunkScripts?: string[];
    jsScriptChunks?: string[];
    cssScriptChunks?: string[];
    chunkIds?: IndexableType[];
}
/**
 * @description Represents assets for chunk names along with <script> & <link> tags
 */
export interface IAssetsByChunkName {
    chunks: IndexableType[];
    jsFiles: string[];
    cssFiles: string[];
    jsScripts: string[];
    cssScripts: string[];
}
/**
 * @description Returns object containing all necessary information to render chunks including
 *              paths to files, chunk information (entry, bootstrap, other), and breaks assets up into
 *              different groups (css, js)
 *
 * @param baseUrl baseUrl to map in front of file paths, relative from root
 * @param chunkNames list of chunk names to look up
 * @param clientStats generated webpack client stats
 * @returns {Promise<IUsedChunks>} returns value
 */
export declare const processClientStatsForChunking: (baseUrl: string, chunkNames: any, clientStats: {
    [x: string]: any;
}, telemetry: IInternalTelemetry, context: IRequestContext) => Promise<IUsedChunks>;
