/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IAppSettings, ICommerceApiSettings, IPageConfig, IPageResponse, IParsedQSP, IRenderingContext, IRequestContext } from '@msdyn365-commerce/core-internal';
import { IInternalTelemetry } from '@msdyn365-commerce/telemetry-internal';
import { Request } from 'express';
/**
 * Returns default values for platform-provided page config values that all pages will have
 *
 * Default values are provided to avoid to avoid having to type check everything later
 */
export declare const getDefaultPageConfig: () => IPageConfig;
export declare const getDefaultAppSettings: () => IAppSettings;
export declare const getHeaders: (req: Request<import("express-serve-static-core").ParamsDictionary>) => {};
export declare const getApiSettingsFromEnv: () => ICommerceApiSettings;
export declare const getDefaultRequestContext: (req: Request<import("express-serve-static-core").ParamsDictionary>, apiSettingsFromEnv: ICommerceApiSettings, concatJs: IParsedQSP<any>) => {
    url: {
        requestUrl: URL;
        staticCdnUrl: string;
    };
    urlTokens: {};
    locale: string;
    market: string;
    textDirection: string;
    sitePath: any;
    device: {
        Type: string;
    };
    user: {
        token: string;
        isAuthenticated: boolean;
    };
    app: {};
    query: any;
    apiSettings: ICommerceApiSettings;
    operationId: string;
    params: {
        mock: any;
        isDebug: boolean;
        isEditor: boolean;
        isPreview: boolean;
        concatJs: IParsedQSP<any>;
        theme: any;
    };
    features: {};
    pageData: {};
    _debug: {
        commerceSDKVersion: string;
        commerceSSKVersion: string;
        retailProxyVersion: string;
    };
    themeOverride: {
        url: any;
        disableDefault: any;
    };
    telemetrySettings: {
        eventHubEndPoint: string;
        eventHubAuthToken: string;
        optOutWebActivityTracking: boolean;
        operationId: string;
        instrumentationKey: string;
        environmentId: string;
    };
};
export declare const parseRequest: (req: Request<import("express-serve-static-core").ParamsDictionary>) => IRequestContext;
export declare const mergeSwtichFromPlatformSettingsWithFeatureSwitch: (requestContext: IRequestContext) => IRequestContext;
export declare const mapRequestContextWithRenderingContext: (req: Request<import("express-serve-static-core").ParamsDictionary>, requestContext: IRequestContext, renderingContext: IRenderingContext, appContext?: IAppSettings, pageConfig?: IPageConfig) => any;
export declare const getBodyConfig: (pageResponse: IPageResponse) => unknown;
export declare const getPageConfig: (pageResponse: IPageResponse, telemetry: IInternalTelemetry) => IPageConfig;
