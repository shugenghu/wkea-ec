/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
export interface ITTLCacheOptions {
    removalThresholdInMs?: number;
    intervalForRemovalInMs?: number;
}
export declare type TOnRemoveCallback = (removedKey: string) => void;
/**
 * Cache with TTL and polling to remove items from it, default implementaiton is to only poll on server
 */
export declare class TTLCache<TValue> {
    readonly removalThresholdInMs: number;
    readonly intervalForRemovalInMs: number;
    private _cache;
    constructor(options?: ITTLCacheOptions);
    /**
     * Gets a value from cache
     *
     * @param {string} key the key
     * @returns {(TValue | undefined)} the value, if it exists
     */
    get(key: string): TValue | undefined;
    /**
     * Set a value
     *
     * @param {string} key the key
     * @param {TValue} value the value
     */
    set(key: string, value: TValue, onRemoveCallback?: TOnRemoveCallback): void;
    clear(): void;
    private _cleanCache;
}
