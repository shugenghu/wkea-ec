/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IEventRetailServerRequestProperties } from '@msdyn365-commerce/telemetry-internal';
import { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { TTLCache } from './ttl-cache';
/**
 * Formats commerce URL parts used in retail server calls with odata formatting
 *
 * @param inputString The input string to replace
 * @param replaceString The replacement value, default of `(~)`.
 */
export declare const replaceIdentifiers: (inputString: string | undefined, replaceString?: string | undefined) => string;
/**
 * Helper mapping lowercase keys to real keys in an object. Note this returns the keys only, mapping
 * lower case key to the actual cased key name in the dictionary
 *
 * e.g.
 *
 * HelloWorld will be returned as 'helloworld' allowing you to look up 'helloworld' to get HelloWorld to index into the real dictionary
 * @param objectDictionary the object dictionary
 */
export declare const toLowerCaseDict: (objectDictionary: any) => {
    [lowerCaseKeyName: string]: string;
};
/**
 * Error retail se interceptor for axios
 *
 * @param config The request cofiguration
 * @param status The response status code
 * @param requestCache The optional request cache to use (mostly for testing)
 */
export declare const RSErrorResponseHandler: (config: AxiosRequestConfig, status: number, requestCache?: TTLCache<IEventRetailServerRequestProperties> | undefined) => void;
/**
 * Response interceptor for axios
 *
 * @param response The resposne
 * @param requestCache The optional request cache to use (mostly for testing)
 */
export declare const RSResponseInterceptor: (response: AxiosResponse<any>, requestCache?: TTLCache<IEventRetailServerRequestProperties> | undefined) => AxiosResponse<any>;
/**
 * Captures outgoing calls to retail server
 */
export declare const RSRequestInterceptor: (request: AxiosRequestConfig) => AxiosRequestConfig;
export declare const RSRequestInterceptorErrorHandler: (error: AxiosError) => never;
export declare const RSResponseInterceptorErrorHandler: (error: AxiosError) => never;
