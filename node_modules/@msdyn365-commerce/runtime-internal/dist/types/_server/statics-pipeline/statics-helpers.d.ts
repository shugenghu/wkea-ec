/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IInternalTelemetry } from '@msdyn365-commerce/telemetry-internal';
import { IUsedChunks } from '../chunking';
/**
 * Separator for concat partial IDs
 */
export declare const URL_SEPARATOR = "!";
/**
 * Prefix for including JS files
 */
export declare const HASHED_STATICS_PREFIX = "_j/";
/**
 * Max number of URLs to generator
 */
export declare const MAX_JS_ASSETS: number;
/**
 * Map hashed URL to actual asset files
 *
 * @param requestedAssets hashed asset string
 * @param clientStats webpack client stats
 */
export declare const mapAssetUrlToFiles: (requestedAssets: string, clientStats: {
    [x: string]: any;
}) => string[];
/**
 * Private helper functions below, exported for ease in testing
 */
/**
 * Takes in a single array of N items and splits it into an array with numPart arrays
 *
 * @param array The array of to split
 * @param numParts The max number of arrays to return
 * @private
 */
export declare const splitToMaxNArrays: <TArray>(array: TArray[], numParts: number) => TArray[][];
/**
 * Generates a set of magic asset urls
 * @param usedAssetChunks The required assets for the current render pass
 */
export declare const generateAssetUrls: (baseUrl: string, usedAssetChunks: IUsedChunks, numMax?: number) => string[];
/**
 * Helper function to map the public folder to the currently requested file
 *
 * @param publicDir Public directory from app root, env.PUBLIC_DIR
 * @param filePath Current statics file path
 * @private
 */
export declare const mapPublicDirToPath: (publicDir: string) => (filePath: string) => string;
/**
 *
 * @param filePaths File paths of files we need to stream
 * @param res
 * @returns {CombinedStream} combined stream response
 * @private
 */
/**
 *  TODO: remove use of any once the following PR gets merged in
 *  https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30295 to properly update type definitions
 */
export declare const createFileStreamResponse: (filePaths: string[], publicDir: string, telemetry: IInternalTelemetry) => Promise<any>;
