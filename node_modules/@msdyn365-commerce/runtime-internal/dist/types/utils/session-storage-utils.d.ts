/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ISessionStorageContext } from '@msdyn365-commerce/core-internal';
import { CookieContext } from './cookie-utils';
/**
 * Context for session storage handling
 *
 * @export
 * @class CookieContext
 */
export declare class SessionStorageContext implements ISessionStorageContext {
    private _cookieContext;
    constructor(_cookieContext: CookieContext);
    /**
     * Gets the value stored in the session storage.
     * Returns an empty object if no such value exists.
     *
     * @param {string} key - The key string.
     */
    getDataFromStorage: (key: string) => object;
    /**
     * Sets a new key pair value in the session storage.
     *
     * @param {string} key - The key string.
     * @param {object} value - The data object.
     */
    setDataInStorage: (key: string, value: object) => void;
    /**
     * Gets the checkout cart stored in the session storage.
     * Returns an empty object if no such value exists.
     *
     * @param {string} key - The key string.
     */
    getCheckoutCartData: (key: string) => object;
    /**
     * Sets checkout cart value in the session storage.
     *
     * @param {string} key - The key string.
     * @param {object} value - The cart data object.
     */
    setCheckoutCartData: (key: string, value: object) => void;
    /**
     * Remove session storage by giving key
     *
     * @param {string} key - The key string.
     */
    removeDataFromStorage: (key: string) => void;
    /**
     * Remove checkout cart data from the session storage by giving key
     *
     * @param {string} key - The key string. If key is not provided clear all data from session storage that contais the checkout cart key prefix.
     */
    removeCheckoutCartData: (key?: string | undefined) => void;
    /**
     * Get session storage value.
     * If server side, no-op.
     *
     * @param {string} key - The key string
     * @return {ISessionStorageValue} value with status
     */
    private get;
    /**
     * Set session storage data.
     * If server side, no-op.
     *
     * @param {string} key - The key string
     * @param {T} value - The session storage value
     */
    private set;
    /**
     * Remove session storage data by giving key
     * If server side, no-op.
     *
     * @param {string} key - The key string
     */
    private remove;
    /**
     * Build the checkout cart key for the session storage
     */
    private getCheckoutCartKey;
}
