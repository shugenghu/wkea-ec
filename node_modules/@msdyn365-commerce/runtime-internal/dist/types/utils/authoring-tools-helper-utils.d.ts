/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ICache } from '@msdyn365-commerce/cache-internal';
import { IPartnerThemeSettings } from '@msdyn365-commerce/core-internal';
export interface IImageData {
    $type: string;
    altText: string;
    source: string;
    imageQuality: string;
    title: string;
    focalRegion?: IFocalRegion;
    cropRegions?: ICropRegion[];
    format?: string;
}
/**
 * cms datatype for focal region
 */
export interface IFocalRegion {
    x1?: number;
    y1?: number;
    x2?: number;
    y2?: number;
}
/**
 * cms datatype for crop region
 */
export interface ICropRegion {
    top?: number;
    left?: number;
    width?: number;
    height?: number;
    targetWidth?: number;
    targetHeight?: number;
    name: string;
}
export interface IBinaryReference {
    format?: string;
    clientHref?: string;
    alias?: string;
    contentType?: string;
    extension?: string;
    sourceHref?: string;
}
export interface IVideoData {
    fileName: string;
    title: string;
    playTime: number;
    thumbnail: IImageData;
    interactiveTriggersEnabled?: boolean;
    binaryReferences: IBinaryReference[];
}
/**
 * Resolves any image/video types in the module config as given by authoring in a fragment or a module
 * into what is required to render these images/videos on SDK side
 */
export declare const resolveTypesInConfig: (config: any, moduleId: string, moduleType: string, moduleLayout: string | undefined, themeSettings: IPartnerThemeSettings) => void;
/**
 * Constructs the viewport information for an image using the current module and theme settings
 * Also constructs the query string for the image resizer
 *
 * @param moduleId The id of the module
 * @param moduleConfig The config object for the module
 * @param pathToField The path to the image the field
 * @param quality The image quality selected
 * @param themeSettings The current theme settings
 * @param focalRegion The image focal region settings
 * @param cropRegions The image crop region per layout/viewport settings
 * @param format The image format
 */
export declare const constructViewportInformationForImage: (moduleName: string, moduleLayout: string | undefined, pathToField: string[], quality: string | undefined, themeSettings: IPartnerThemeSettings, focalRegion?: IFocalRegion, cropRegions?: ICropRegion[], format?: string | undefined) => any;
export declare const moveArrayItem: (array: any[], newIndex: number, newElement: any) => void;
/**
 * Deletes all the cache entries for a specific module id
 *
 * @param moduleId The module id of the module whose cache entries are to be deleted
 * @param cache The cache object
 */
export declare const deleteCacheEntriesForModuleId: (moduleId: string, cache: ICache) => void;
/**
 * Constructs a video object used to render a video using data given by authoring
 *
 * @param videoData The video data given by authoring
 * @param moduleId The module id of the module for which this information is being constructed
 */
export declare const constructVideoInformation: (videoData: IVideoData, moduleId: string, id?: string | undefined) => any;
/**
 * Gets the property value of the specified property key
 * from a data-i attribute string
 *
 * @param dataIAttribute data-i attribute string
 * @param key property key
 */
export declare const getPropertyFromDataIAttribute: (dataIAttribute: string, key: string) => any;
