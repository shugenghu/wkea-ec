/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ICookieContext, ICookieContextOptions, ICookieValue } from '@msdyn365-commerce/core-internal';
import { Cart } from '@msdyn365-commerce/retail-proxy';
import { CookieSetOptions } from 'universal-cookie';
export interface ICookieSetOptions extends CookieSetOptions {
    isEssential?: boolean;
}
export declare const enum CartTokenPrefix {
    Auth = "t",
    Anon = "p"
}
/**
 * Context for cookie handling
 *
 * @export
 * @class CookieContext
 */
export declare class CookieContext implements ICookieContext {
    private _cookies;
    private _setCookieList;
    private _serverCookieList;
    private _clientCookieList;
    private _options;
    /**
     * Returns a cookies class from the selected cookie store. If the express server
     * is passed the cookie header will be used otherwise the global cookie store will be used.
     * @param options Optional ICookieContextOptions.
     */
    constructor(options?: ICookieContextOptions);
    /**
     * Get Cookie Value
     *
     * @param {string} cookieName - A string cookie name
     * @return {ICookieValue} cookie value with status
     */
    get: <T>(cookieName: string, isEssential?: boolean | undefined) => ICookieValue<T>;
    /**
     * Set Cookie
     *
     * @param {string} cookieName - A string cookie name
     * @param {T} cookieValue - A cookie value
     * @param {ICookieSetOptions} options cookie options same as document.cookie
     */
    set: <T>(cookieName: string, cookieValue: T, options?: ICookieSetOptions | undefined) => void;
    /**
     * Gets the value stored in the cart cookie that contains the
     * cart context and information. Returns an empty string if no such value exists.
     *
     */
    getCartCookie: () => string;
    /**
     * Sets the cart cookie with a new expiry time time of one year
     * from the current date
     *
     * @param cart The object containing the current cart information
     * @param isAuthenticated Boolean representing whether current user is authenticated or not
     */
    setCartCookie: (cart: Cart, isAuthenticated: boolean) => void;
    /**
     * Gets the value stored in the checkout cart cookie that contains the
     * checkout cart context and information. Returns an empty string if no such value exists.
     */
    getCheckoutCartCookie: () => string;
    /**
     * Sets the checkout cart cookie with a new expiry time time of one year
     * from the current date
     *
     * @param cart The object containing the current checkout cart information
     * @param isAuthenticated Boolean representing whether current user is authenticated or not
     */
    setCheckoutCartCookie: (cart: Cart, isAuthenticated: boolean) => void;
    /**
     * Remove checkout cart cookie.
     */
    removeCheckoutCartCookie: () => void;
    /**
     * Remove cookie
     *
     */
    remove: (cookieName: string) => void;
    /**
     * Get whether consent is given or not
     *
     */
    isConsentGiven: () => boolean;
    /**
     * Set consent cookie
     *
     */
    setConsentCookie: () => void;
    /**
     * Remove consent cookie
     *
     */
    deleteConsentCookie: () => void;
    /**
     * Returns the list of server side cookies to set
     * only if currently executing server side
     */
    get serverCookies(): string[];
    /**
     * Returns the list of client side cookies to set
     */
    get clientCookie(): string[];
    private createCookieString;
    private _appendCookieOptions;
}
