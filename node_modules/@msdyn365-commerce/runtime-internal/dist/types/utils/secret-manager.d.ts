/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ICache } from '@msdyn365-commerce/cache-internal';
import { IDictionary, ISecretManager, ISecretValue } from '@msdyn365-commerce/core-internal';
export declare const DEFAULT_ACCESS_TOKEN_SECRET_TTL = 86400;
export declare const DEFAULT_ACCESS_TOKEN_SECRET_TTR = 500;
export declare const DEFAULT_KV_SECRET_TTL = 86400;
export declare const DEFAULT_KV_SECRET_TTR = 500;
export declare const ACCESS_TOKEN_SECRET_CACHE_TYPE = "ACCESSTOKEN";
export declare const KEY_VAULT_SECRET_CACHE_TYPE = "KEYVAULT";
export declare const ACCESS_TOKEN_SECRET_KEY = "RETAIL_SERVER";
export declare enum AppSecretRefreshType {
    ACCESS_TOKEN = "ACCESSTOKEN",
    KEY_VAULT = "KEYVAULT"
}
export interface IAppSecretRefreshOptions {
    refreshType: AppSecretRefreshType;
    parameters: string[];
}
/**
 * SecretManager class exposes one public method used to access customer secrets from key-vault
 * Access token (used to talk to the RS API that will retrive customer secrets) and secrets are cached in
 * an app-cache entry. The instantiated class is available on the global msdyn365Commerce object but only server-side
 */
export declare class SecretManager implements ISecretManager {
    private _appSecretsCache;
    private _localSecrets;
    constructor(appSecretsCache: ICache, localSecrets?: IDictionary<string>);
    /**
     * Returns the customer defined secret value given a secret key.
     * If the secret key could not be found an empty string is returned
     *
     * @param secretKey The secret key
     */
    getSecretValue(secretKey: string, baseRetailServerURL: string): Promise<ISecretValue>;
    private _readCachedAppSecrets;
    /**
     * Fetches the bearer access token that Node will use to authenticate with retail server
     */
    private _getRSAccessToken;
    /**
     * Returns the secret value for the given secret key
     *
     * @param accessToken The access token obtained from user assigned identity
     * @param secretKey The secret key
     * @param baseRsURL The base retail server url where the key was configured
     */
    private _getKVSecretValue;
}
