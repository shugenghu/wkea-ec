/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ICacheSettings } from '@msdyn365-commerce/cache-internal';
import { IDictionary, IPlatformSettings, IRequestContext } from '@msdyn365-commerce/core-internal';
import { AsyncResult, ChannelConfiguration } from '@msdyn365-commerce/retail-proxy';
import { InternalTelemetry, Telemetry } from '@msdyn365-commerce/telemetry-internal';
import { NextFunction, Request, Response } from 'express';
export declare const KEYSTONE_ENVIRONMENT: IDictionary<string>;
export declare const loadFeatureFlags: (req: Request<import("express-serve-static-core").ParamsDictionary>, res: Response<any>, next: NextFunction) => void;
export declare const setCorsHeaders: (req: Request<import("express-serve-static-core").ParamsDictionary>, res: Response<any>, next: NextFunction) => void;
export declare const setResponseHeaders: (req: Request<import("express-serve-static-core").ParamsDictionary>, res: Response<any>, next: NextFunction) => void;
export declare const getPlatformSettingsSync: () => IPlatformSettings;
export declare const registerAttributeRenderers: (instanceTelemetryClient: InternalTelemetry, moduleInstanceTelemetryClient: Telemetry, requestContext: IRequestContext) => void;
export declare const setTelemetryObject: (appInsightsTelemetryClient: any) => (req: Request<import("express-serve-static-core").ParamsDictionary>, res: Response<any>, next: NextFunction) => void;
/**
 * Page render method, used on pageResponse and request context have been parsed/calulated
 */
export declare const renderPage: (req: Request<import("express-serve-static-core").ParamsDictionary>, res: Response<any>, next: NextFunction, { clientStats }: {
    clientStats: {};
}) => void;
/**
 * Helper function to await a promise and wrap in try/catch - used for getting channel configuration. Also sets the
 * `res.local.getOrgUnitConfigurationAsyncResult` property with the actual channel config so it can be retrieved as part
 * of this request
 * @param promiseToAwait
 */
export declare const awaitChannelConfigPromise: (res: Response<any>, promiseToAwait: AsyncResult<ChannelConfiguration>, telemetry: Telemetry) => Promise<void>;
/**
 * Middleware that performs validation logic based on the type of page being rendered
 * @param pageResponse The page response
 */
export declare const validateRouteAndChannelConfig: (_req: Request<import("express-serve-static-core").ParamsDictionary>, res: Response<any>, next: NextFunction) => Promise<void>;
/**
 * Checks if a proxy is available while in debug mode and routes all outgoing requests to proxy if possible
 * @param req The Request Object
 * @param res The Response Object
 * @param next The next function
 */
export declare const detectProxy: (req: Request<import("express-serve-static-core").ParamsDictionary>, res: Response<any>, next: NextFunction) => void;
/**
 * Creates and returns the app cache settings to be used to cache app and key vault secrets
 */
export declare const getAppSecretsCacheSetings: () => ICacheSettings;
export declare const getExperimentsCacheSettings: () => ICacheSettings;
export declare const getCacheSettings: () => ICacheSettings;
export declare const getRequestUrl: (res: Response<any>) => URL | undefined;
export declare const sanitizeUrlForLogging: (requestUrl: URL | undefined) => string;
export declare const resolveRouteInformation: (res: Response<any>, requestUrl: URL | undefined) => string | undefined;
export declare const getCheckoutRoute: (res: Response<any>) => string | undefined;
