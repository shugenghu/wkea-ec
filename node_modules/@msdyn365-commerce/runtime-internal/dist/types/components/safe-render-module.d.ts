/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IAny, IGeneric, IModuleContract } from '@msdyn365-commerce/core-internal';
import { InternalTelemetry, ITelemetry } from '@msdyn365-commerce/telemetry-internal';
import * as React from 'react';
declare type ErrorInfo = {
    componentStack: string;
};
export declare type TSafeRenderModuleState = {
    error?: Error;
    info?: ErrorInfo;
    isRegistered?: boolean;
    isConfigured?: boolean;
    mounted?: boolean;
};
/**
 * Known types on the props
 */
export declare type TSafeRenderModuleProps = IGeneric<IAny> & {
    telemetry: ITelemetry;
    internalTelemetry: InternalTelemetry;
};
/**
 * Component to render module
 */
export declare class SafeRenderModule extends React.Component<TSafeRenderModuleProps, TSafeRenderModuleState> {
    private componentRef;
    private shouldDisplayErrors;
    private isRenderAttrributeCalled;
    private disableDefer?;
    static getDerivedStateFromError(error: Error): TSafeRenderModuleState;
    constructor(props: TSafeRenderModuleProps);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: TSafeRenderModuleProps, nextState: TSafeRenderModuleState): boolean;
    componentDidUpdate(): void;
    componentDidCatch(error: Error, info: ErrorInfo): void;
    render(): JSX.Element | null;
    private renderModuleAttributes;
    /**
     * Set the data info attribute to be added to the modules
     * @param props The module props.
     */
    private _setDataInfoAttribute;
    /**
     * isEditor
     * Determines if request is coming from the editor
     */
    private _isEditorial;
    /**
     * Creates data info string to be used by cms e.g '{id:prop-id,s:content,p:parent-id}'
     */
    private _generateDataInfo;
    /**
     * Conducts the server side render and returns the result.
     * If disable defer flag is turned on, the React Element is returned immediately,
     * otherwise the render result is calculated using renderToString to catch errors
     * and defer modules (used for editor and debug scenarios)
     */
    private _doServerSideRender;
    /**
     * Assignes data-i and data-t attributes to child component if isEditor is enabled
     */
    private _setDataAttributes;
    private _setErrorStates;
}
export declare const getRenderSlotComponent: (parentProps: {
    [x: string]: any;
}, moduleConfigs: IModuleContract<{}, unknown>[], slotId: string, addSiblingIndices?: number[] | undefined) => React.ReactNode[];
declare const SafeRenderModuleWithContext: (props: any) => JSX.Element;
export default SafeRenderModuleWithContext;
