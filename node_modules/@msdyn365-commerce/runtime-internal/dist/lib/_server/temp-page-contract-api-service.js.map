{"version":3,"file":"temp-page-contract-api-service.js","sourceRoot":"","sources":["../../../src/_server/temp-page-contract-api-service.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable-next-line:match-default-export-name 'axios' doesn't match 'Axios'\nimport msdyn365Commerce, {\n    IDictionary,\n    ILocalCredentials,\n    IPageResponse,\n    IRenderingContext,\n    IRequestContext,\n    IThemeModule\n} from '@msdyn365-commerce/core-internal';\nimport {\n    asSystemMetadata,\n    EXCEPTION_NO1RFRESPONSE,\n    IInternalTelemetry,\n    InternalTelemetry,\n    LogLevel,\n    MESSAGE_GETTING_PAGE_RESPONSE,\n    MESSAGE_NO_SERVER_ENDPOINT_SET,\n    MESSAGE_SERVER_ENDPOINT\n} from '@msdyn365-commerce/telemetry-internal';\nimport { safeReadJson } from '@msdyn365-commerce/utilities-internal';\nimport axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport { Request, Response } from 'express';\nimport jwt_decode from 'jwt-decode';\nimport path from 'path';\nimport Url from 'url';\nimport { getMockModule } from '../mock/mock-helper';\nimport keystonePaths from '../paths';\nimport { getFlattenedListOfModules } from '../utils/get-modules-flat-list';\nimport { getUserInformationROPC } from '../utils/ropc-auth-utils';\nimport { getThemeModules } from './Definition/moduleDefinition';\nimport { HttpException, HttpRedirectException } from './error';\n\ninterface IJWTDecoded {\n    given_name: string;\n    family_name: string;\n    emails: string[];\n}\n\n/**\n * PageContract API\n *\n */\nexport namespace PageContractApiService {\n    const AUTHORIZATION_PATH = '/ForceAzureADSignIn';\n\n    /**\n     * Throws an HTTPRedirectException to prompt the user to log in\n     * @param requestContext Current request context\n     * @param platformUrl Platform url as string\n     */\n    const getAuthorization = async (requestContext: IRequestContext, platformUrl: string) => {\n        const authUrl = new URL(platformUrl);\n        authUrl.pathname = AUTHORIZATION_PATH;\n        authUrl.searchParams.append('ru', Url.format(requestContext.url.requestUrl));\n        throw new HttpRedirectException(Url.format(authUrl));\n    };\n\n    /**\n     * Populates page module section\n     * @param page\n     */\n    export const _inlineMockModules = async (page: IPageResponse): Promise<IPageResponse> => {\n        // make sure we null out the modules so legacy workflow does not kick in\n        const newPageResponse = { ...page, ...{ modules: null } };\n        const slots = getFlattenedListOfModules(newPageResponse);\n        let index: number = 0;\n        for (const m of slots) {\n            // @ts-ignore - mockId is not a first-class property\n            const mockName = m.mockId || m.typeName;\n            // @ts-ignore - array access is prohibited\n            const existing = page.modules && page.modules[m.id];\n            if (existing) {\n                Object.assign(slots[index], existing);\n            } else if (mockName) {\n                const mock = await getMockModule(m.typeName, mockName);\n                if (mock) {\n                    Object.assign(m, { ...mock, ...m });\n                }\n            }\n            index++;\n        }\n\n        newPageResponse.slots = slots;\n        return newPageResponse;\n    };\n\n    /**\n     * Retireves page response data from mock JSON files\n     */\n    export const getMockPayload = async (mockName: string) => {\n        const mockFilePath = path.resolve(keystonePaths.KEYSTONE_PAGE_MOCKS_DIR, `${mockName}.json`);\n        const page = <IPageResponse>await safeReadJson(mockFilePath);\n\n        if (!page) {\n            throw new HttpException(404, `Mock page: ${mockName} is either invalid json or not found`);\n        }\n\n        return _inlineMockModules(page);\n    };\n\n    /**\n     * Retrieves page response data from theme layout\n     */\n    export const getThemeLayout = async (themeName: string, pageType: string, layout: string, telemetry: IInternalTelemetry) => {\n        const themeModules = <IThemeModule[]>await getThemeModules(null, telemetry);\n        const theme = (themeModules || []).filter(themeModule => themeModule.name === themeName)[0];\n\n        if (!theme) {\n            throw new HttpException(404, `Theme: ${themeName} is either invalid json or not found`);\n        }\n\n        if (!theme.pages[pageType]) {\n            throw new HttpException(404, `Page: ${pageType} is either invalid json or not found for theme ${themeName}`);\n        }\n\n        if (!theme.pages[pageType][layout]) {\n            throw new HttpException(404, `Layout: ${layout} is either invalid json or not found for theme ${themeName}`);\n        }\n\n        return theme.pages[pageType][layout];\n    };\n\n    /**\n     * Retrieves theme segment\n     */\n    export const getThemeSegment = async (themeName: string, segmentName: string, telemetry: IInternalTelemetry) => {\n        const themeModules = <IThemeModule[]>await getThemeModules(null, telemetry);\n        const theme = (themeModules || []).filter(themeModule => themeModule.name === themeName)[0];\n\n        if (!theme) {\n            throw new HttpException(404, `Theme: ${themeName} is either invalid json or not found`);\n        }\n\n        if (!theme.segments[segmentName]) {\n            throw new HttpException(404, `Segment: ${segmentName} is either invalid json or not found for theme ${themeName}`);\n        }\n\n        return theme.segments[segmentName];\n    };\n\n    /**\n     * Call server to retrieve page response\n     */\n    export const getServerPageResponse = async (\n        url: string,\n        telemetry: IInternalTelemetry,\n        requestContext: IRequestContext,\n        idToken: string,\n        userAgent: string | undefined,\n        mockUser: boolean = false,\n        retry: boolean = true\n    ) => {\n        const platformUrl = new URL(url);\n        const platformReqConfig: Partial<AxiosRequestConfig> = {};\n        if (process.env.HEADER_REQ) {\n            platformReqConfig.method = 'post';\n            platformReqConfig.headers = {\n                'Content-Type': 'application/json',\n                nodeServiceProxy: true,\n                'accept-language': 'en-US,en'\n            };\n        } else {\n            if (!idToken) {\n                await getAuthorization(requestContext, url);\n            }\n            platformUrl.searchParams.append('item', 'nodeserviceproxy:true');\n            platformReqConfig.method = 'get';\n            platformReqConfig.maxRedirects = 0;\n            platformReqConfig.headers = {\n                Authorization: `Bearer ${idToken}`,\n                'accept-language': 'en-US,en'\n            };\n        }\n        if (userAgent) {\n            platformReqConfig.headers['User-Agent'] = userAgent;\n        }\n        // If mock user has been set, set X-Disable-C2ForceAuth to bypass forced C2 Auth\n        if (mockUser) {\n            platformReqConfig.headers['X-Disable-C2ForceAuth'] = true;\n        }\n        return axios(Url.format(platformUrl), platformReqConfig)\n            .then(response => {\n                return response.data;\n            })\n            .catch((error: AxiosError) => {\n                if (error.response && error.response.status === 302) {\n                    return getAuthorization(requestContext, url);\n                }\n                if (retry && error.response && error.response.status === 403) {\n                    return getServerPageResponse(url, telemetry, requestContext, '', userAgent, mockUser, false);\n                }\n                telemetry.log(LogLevel.Error, EXCEPTION_NO1RFRESPONSE, { exception: error });\n\n                if (error.response && error.response.status) {\n                    throw new HttpException(error.response.status, EXCEPTION_NO1RFRESPONSE);\n                } else {\n                    throw new Error(EXCEPTION_NO1RFRESPONSE);\n                }\n            });\n    };\n\n    export const parsePayload = (content: string | object) => {\n        const pageResponse = <IPageResponse>(typeof content === 'string' ? JSON.parse(content) : content);\n        pageResponse.slots = getFlattenedListOfModules(pageResponse);\n        return pageResponse;\n    };\n\n    /**\n     * Sets the pageResponse object by either using mock if mock query param is supplied\n     * or by requesting the page response object from OneRF\n     *\n     * @param req Request\n     * @param res Response\n     * @param serverHost OneRF server host\n     */\n    export const handleGetPageResponse = async (req: Request, res: Response, serverHost: string) => {\n        let userToken: string | undefined;\n        let modifiedSignInUrl: string | undefined;\n        let modifiedSignOutUrl: string | undefined;\n\n        // If in local dev mode and credentials are defined get user mock token and modify sign in and sign out url\n        // to user mockUser query param\n        if (process.env.NODE_ENV === 'development' && msdyn365Commerce.localCredentials) {\n            userToken = await getMockUserToken(msdyn365Commerce.localCredentials, req.query);\n            modifiedSignInUrl = Url.format({\n                protocol: 'https',\n                hostname: 'localhost',\n                port: process.env.PORT,\n                pathname: req.path,\n                query: { ...req.query, ...{ mockUser: 'true' } }\n            });\n            modifiedSignOutUrl = Url.format({\n                protocol: 'https',\n                hostname: 'localhost',\n                port: process.env.PORT,\n                pathname: req.path,\n                query: { ...req.query, ...{ mockUser: 'false' } }\n            });\n        }\n        // @ts-ignore\n        const idToken = req.session && req.session.id_token;\n        const userAgent = req.header('User-Agent');\n        const serverUrl = {\n            serverHost,\n            pathname: req.path,\n            query: req.query\n        };\n        const content = await getPageResponse(\n            res.locals.telemetry,\n            res.locals.requestContext,\n            idToken,\n            userAgent,\n            serverUrl,\n            userToken !== undefined\n        );\n\n        if (process.env.NODE_ENV === 'development') {\n            // If no page response was set as result of non-C2 signed in user, send message back indicating mockUser query param should be used\n            // @ts-ignore - statusCode is not a typed property but is part of the returned pageResponse from OneRF\n            if (!content.pageRoot && content?.statusCode === 302) {\n                res.status(200).send(\n                    `Unable to retrieve server page resonse for path ${req.path} because it requires a signed in user to access. Use 'mockUser' query param to mock a signed in C2 user.`\n                );\n            }\n\n            // If a user token has been generated through credentials.json and ROPC, inject it\n            if (content.renderingContext && userToken) {\n                injectUserToken(content.renderingContext, userToken, msdyn365Commerce.localCredentials?.customerAccountNumber);\n            }\n\n            // Modify the sign in and sign out url if local sign in is enabled to make use of the mockUser query param\n            if (msdyn365Commerce.localCredentials && content.renderingContext.userContext) {\n                content.renderingContext.userContext.signInUrl = modifiedSignInUrl;\n                content.renderingContext.userContext.signOutUrl = modifiedSignOutUrl;\n            }\n\n        }\n\n        res.locals.pageResponse = content;\n    };\n\n    /**\n     * Controls the mock user token that is added to the rendering context to enable signed in behavior during local development\n     * Uses ROPC auth flow to get an access token to impersonate signed in status. Retruns the user impersonation access token\n     *\n     * @param credentials Credentials config object containing config information required to make the ROPC request\n     * @param query query param object\n     */\n    const getMockUserToken = async (credentials: ILocalCredentials, query: IDictionary<string>): Promise<string | undefined> => {\n        // Flush token out if mockUser query param is set to false, otherwise use that to fetch the token for user\n        if (query?.mockUser) {\n            if (query.mockUser === 'false') {\n                delete credentials.accessToken;\n                return;\n            }\n            await getUserInformationROPC(credentials, query.mockUser);\n            return credentials.accessToken;\n        }\n        // If access token has already been fetched and set, use it for any following requests until it is flushed out\n        if (credentials.expiryDate && credentials.currentUser) {\n            // If the token has expired, fetch the token again for current user\n            if (Math.floor(Date.now() / 1000) >= credentials.expiryDate) {\n                await getUserInformationROPC(credentials, credentials.currentUser);\n            }\n            return credentials.accessToken;\n        }\n    };\n\n    // Injects the user token into rendering context user information if available\n    const injectUserToken = (\n        renderingContext: IRenderingContext,\n        token: string,\n        customerAccountNumber?: string\n    ) => {\n        const decodedToken: IJWTDecoded = jwt_decode(token);\n        renderingContext.userContext = {\n            ...renderingContext.userContext,\n            ...{\n                token: token,\n                isAuthenticated: true,\n                emailAddress: decodedToken.emails[0] || '',\n                firstName: decodedToken.given_name || '',\n                lastName: decodedToken.family_name || '',\n                name: `${decodedToken.given_name} ${decodedToken.family_name}`,\n                signinName: `${decodedToken.given_name} ${decodedToken.family_name}`,\n                customerAccountNumber: customerAccountNumber || ''\n            }\n        };\n    };\n\n    /**\n     * Retrieves a page response from server or Mock data\n     */\n    export const getPageResponse = async (\n        telemetry: InternalTelemetry,\n        requestContext: IRequestContext,\n        idToken: string,\n        userAgent: string | undefined,\n        serverUrlConfigs: { serverHost: string; pathname: string; query: string },\n        mockUser: boolean\n    ): Promise<IPageResponse> => {\n        if (requestContext && requestContext.query && requestContext.query.mock) {\n            return getMockPayload(requestContext.query.mock);\n        }\n\n        if (!serverUrlConfigs.serverHost) {\n            telemetry.log(LogLevel.Error, MESSAGE_NO_SERVER_ENDPOINT_SET);\n        }\n        const serverUrl = Url.format({ protocol: 'https', hostname: serverUrlConfigs.serverHost });\n        const serverPageUrl = Url.format({\n            protocol: 'https',\n            hostname: serverUrlConfigs.serverHost,\n            pathname: serverUrlConfigs.pathname,\n            query: serverUrlConfigs.query\n        });\n\n        telemetry.log(LogLevel.Debug, MESSAGE_SERVER_ENDPOINT, { values: [asSystemMetadata(serverUrl)] });\n        telemetry.log(LogLevel.Debug, MESSAGE_GETTING_PAGE_RESPONSE, { values: [asSystemMetadata(serverPageUrl)] });\n\n        const resp = await getServerPageResponse(serverPageUrl, telemetry, requestContext, idToken, userAgent, mockUser);\n\n        return parsePayload(resp);\n    };\n}\n\nexport default PageContractApiService;\n"]}