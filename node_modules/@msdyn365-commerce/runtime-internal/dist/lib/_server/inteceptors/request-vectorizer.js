/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { TTLCache } from './ttl-cache';
/**
 * Class which handles vectorizing requests
 */
class RequestVectorizer {
    constructor(options) {
        this._cache = new TTLCache(options);
        // binds
        this.next = this.next.bind(this);
    }
    /**
     * The next request in the sequence
     *
     * @param {string} requestId
     * @returns {string} the next vectorized request
     */
    next(requestId) {
        const value = this._cache.get(requestId);
        const nextValue = value === undefined ? 0 : value + 1;
        this._cache.set(requestId, nextValue);
        return `${requestId}${RequestVectorizer.SEP}${nextValue}`;
    }
}
// differentiate vectors generated client/server side
RequestVectorizer.SEP = process.env.CURRENT_ENVIRONMENT === 'node' ? '.' : '/';
const RequestVectorizerInstance = new RequestVectorizer();
export { RequestVectorizerInstance, RequestVectorizer };
//# sourceMappingURL=request-vectorizer.js.map