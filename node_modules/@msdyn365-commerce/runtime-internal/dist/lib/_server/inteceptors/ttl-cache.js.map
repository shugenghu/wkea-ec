{"version":3,"file":"ttl-cache.js","sourceRoot":"","sources":["../../../../src/_server/inteceptors/ttl-cache.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAQH;;GAEG;AACH,MAAM,OAAO,QAAQ;IAUjB,YAAY,OAA0B;QAClC,IAAI,CAAC,oBAAoB,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,oBAAoB,CAAC,IAAI,MAAM,CAAC;QAChF,IAAI,CAAC,sBAAsB,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,sBAAsB,CAAC,IAAI,MAAM,CAAC;QACpF,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAgD,CAAC;QAEtE,IAAI,OAAO,CAAC,GAAG,CAAC,mBAAmB,KAAK,MAAM,EAAE;YAC5C,sDAAsD;YACtD,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;SACtE;IACL,CAAC;IAED;;;;;OAKG;IACI,GAAG,CAAC,GAAW;QAClB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,KAAK,EAAE;YACP,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;SACnB;IACL,CAAC;IAED;;;;;OAKG;IACI,GAAG,CAAC,GAAW,EAAE,KAAa,EAAE,gBAAoC;QACvE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAED,mCAAmC;IAC3B,WAAW;QACf,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAChC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACpB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,oBAAoB,EAAE;gBACzE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;oBAChC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;iBACjB;aACJ;SACJ;IACL,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nexport interface ITTLCacheOptions {\n    removalThresholdInMs?: number;\n    intervalForRemovalInMs?: number;\n}\n\nexport type TOnRemoveCallback = (removedKey: string) => void;\n/**\n * Cache with TTL and polling to remove items from it, default implementaiton is to only poll on server\n */\nexport class TTLCache<TValue> {\n    // threshold for removal, 5mins\n    public readonly removalThresholdInMs: number;\n\n    // frequency of cleaning, 2mins -- this is the period it'll look for keys older than removalThresholdInMs\n    public readonly intervalForRemovalInMs: number;\n\n    // internal cache\n    private _cache: Map<string, [TValue, number, TOnRemoveCallback?]>;\n\n    constructor(options?: ITTLCacheOptions) {\n        this.removalThresholdInMs = (options && options.removalThresholdInMs) || 300000;\n        this.intervalForRemovalInMs = (options && options.intervalForRemovalInMs) || 120000;\n        this._cache = new Map<string, [TValue, number, TOnRemoveCallback?]>();\n\n        if (process.env.CURRENT_ENVIRONMENT === 'node') {\n            // interval trigger to clear the map -- only on server\n            setInterval(() => this._cleanCache(), this.intervalForRemovalInMs);\n        }\n    }\n\n    /**\n     * Gets a value from cache\n     *\n     * @param {string} key the key\n     * @returns {(TValue | undefined)} the value, if it exists\n     */\n    public get(key: string): TValue | undefined {\n        const value = this._cache.get(key);\n        if (value) {\n            return value[0];\n        }\n    }\n\n    /**\n     * Set a value\n     *\n     * @param {string} key the key\n     * @param {TValue} value the value\n     */\n    public set(key: string, value: TValue, onRemoveCallback?: TOnRemoveCallback): void {\n        const now = Date.now();\n        this._cache.set(key, [value, now, onRemoveCallback]);\n    }\n\n    public clear(): void {\n        this._cache.clear();\n    }\n\n    // cleans up the map implementation\n    private _cleanCache(): void {\n        const now = Date.now();\n        const keys = this._cache.keys();\n        for (const key of keys) {\n            const value = this._cache.get(key);\n            if (value && value.length > 1 && now - value[1] > this.removalThresholdInMs) {\n                this._cache.delete(key);\n                if (typeof value[2] === 'function') {\n                    value[2](key);\n                }\n            }\n        }\n    }\n}\n"]}