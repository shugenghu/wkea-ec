{"version":3,"file":"rs-logging-interceptor.js","sourceRoot":"","sources":["../../../../src/_server/inteceptors/rs-logging-interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { RequestCache } from '@msdyn365-commerce/cache-internal';\nimport { IEventRetailServerRequestProperties, StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';\nimport { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport url from 'url';\nimport { RequestVectorizerInstance } from './request-vectorizer';\nimport { TTLCache } from './ttl-cache';\n\n/**\n * Regular expression to match content inside round braces\n */\nconst regexGetRoundBraces = /\\(.+?\\)/gm;\n\n/**\n * Default client error\n */\nconst DEFAULT_ERROR_STATUS_CODE = 408;\n\n/**\n * Formats commerce URL parts used in retail server calls with odata formatting\n *\n * @param inputString The input string to replace\n * @param replaceString The replacement value, default of `(~)`.\n */\nexport const replaceIdentifiers = (inputString: string | undefined, replaceString?: string) => {\n    return (inputString || '').replace(regexGetRoundBraces, replaceString || `(~)`);\n};\n\n/**\n * Helper mapping lowercase keys to real keys in an object. Note this returns the keys only, mapping\n * lower case key to the actual cased key name in the dictionary\n *\n * e.g.\n *\n * HelloWorld will be returned as 'helloworld' allowing you to look up 'helloworld' to get HelloWorld to index into the real dictionary\n * @param objectDictionary the object dictionary\n */\nexport const toLowerCaseDict = (objectDictionary): { [lowerCaseKeyName: string]: string } => {\n    return Object.keys(objectDictionary || {}).reduce(\n        (prevValue, current) => ({ ...prevValue, [current.toLocaleLowerCase()]: current }),\n        {}\n    );\n};\n\nconst ttlRequestCache = new TTLCache<IEventRetailServerRequestProperties>();\n\n/**\n * Error retail se interceptor for axios\n *\n * @param config The request cofiguration\n * @param status The response status code\n * @param requestCache The optional request cache to use (mostly for testing)\n */\n\nexport const RSErrorResponseHandler = (\n    config: AxiosRequestConfig,\n    status: number,\n    requestCache?: TTLCache<IEventRetailServerRequestProperties>\n) => {\n    if (!requestCache) {\n        requestCache = ttlRequestCache;\n    }\n    const headers = config && config.headers;\n    let requestId;\n    if (headers) {\n        const lowercaseHeaders = toLowerCaseDict(headers);\n        requestId = lowercaseHeaders.requestid && headers[lowercaseHeaders.requestid];\n    }\n    const statusCode = status ? status : DEFAULT_ERROR_STATUS_CODE;\n    const properties = requestCache.get(requestId);\n    if (properties) {\n        const elapsedTime = StaticTelemetry.stopTimer(requestId);\n        const parsedUrl = url.parse((config && (config.url || config.baseURL)) || '');\n        StaticTelemetry.trackDependency({\n            duration: elapsedTime,\n            method: (properties.m || 'unknown').toUpperCase(),\n            name: properties.e,\n            resultCode: statusCode,\n            success: status < 400,\n            url: parsedUrl,\n            target: parsedUrl.hostname,\n            properties: {\n                requestId\n            },\n            dependencyName: 'RetailServer'\n        });\n    }\n};\n\n/**\n * Response interceptor for axios\n *\n * @param response The resposne\n * @param requestCache The optional request cache to use (mostly for testing)\n */\nexport const RSResponseInterceptor = (response: AxiosResponse, requestCache?: TTLCache<IEventRetailServerRequestProperties>) => {\n    if (!requestCache) {\n        requestCache = ttlRequestCache;\n    }\n    // try get properties from request based on requestid header\n    let requestId;\n    if (process.env.CURRENT_ENVIRONMENT !== 'node') {\n        // on web we need to check config\n        const headers = response && response.config && response.config.headers;\n        if (headers) {\n            const lowercaseHeaders = toLowerCaseDict(headers);\n            requestId = lowercaseHeaders.requestid && headers[lowercaseHeaders.requestid];\n        }\n    } else {\n        requestId = response && response.headers && response.headers.requestid;\n    }\n    const properties = requestCache.get(requestId);\n    if (properties) {\n        const elapsedTime = StaticTelemetry.stopTimer(requestId);\n        const { config, status, request } = response;\n        const parsedUrl = url.parse((config && (config.url || config.baseURL)) || '');\n        StaticTelemetry.trackDependency({\n            duration: elapsedTime,\n            method: (properties.m || (request && request.method) || 'unknown').toUpperCase(),\n            name: properties.e,\n            resultCode: status,\n            success: status < 400,\n            url: parsedUrl,\n            target: parsedUrl.hostname,\n            properties: {\n                requestId\n            },\n            dependencyName: 'RetailServer'\n        });\n    }\n\n    return response;\n};\n\n/**\n * Captures outgoing calls to retail server\n */\nexport const RSRequestInterceptor = (request: AxiosRequestConfig) => {\n    if (!request || !request.headers) {\n        return request;\n    }\n    const requestHeaders = request.headers;\n    const caseInsensitiveHeaderMap = toLowerCaseDict(requestHeaders);\n\n    // check if it's an outgoing request to retail server\n\n    if (caseInsensitiveHeaderMap.oun && request.url) {\n        // get the API endpoint\n        const parsedUrl = url.parse(request.url, false);\n        const apiEndPoint = replaceIdentifiers(parsedUrl.pathname);\n\n        // associate with the request-id vector\n        const requestIdVector = requestHeaders[caseInsensitiveHeaderMap['request-id']];\n\n        // associate with the requestid (non-vectored)\n        const caseInsensitiveRequestIdHeaderName = caseInsensitiveHeaderMap.requestid || 'requestid';\n        const currentRequestId = requestHeaders[caseInsensitiveRequestIdHeaderName];\n        const requestId = RequestVectorizerInstance.next(currentRequestId);\n\n        StaticTelemetry.startTimer(requestId);\n\n        const properties = {\n            // method\n            m: request.method!,\n            // endpoint\n            e: apiEndPoint,\n            // request vector\n            rv: requestIdVector,\n            // request id\n            r: requestId\n        };\n\n        // add to cache\n        ttlRequestCache.set(requestId, properties, () => {\n            StaticTelemetry.stopTimer(requestId);\n        });\n\n        request.headers[caseInsensitiveRequestIdHeaderName] = requestId;\n    }\n\n    return request;\n};\n\nexport const RSRequestInterceptorErrorHandler = (error: AxiosError) => {\n    if (error.request) {\n        RSRequestInterceptor(error.request);\n    }\n\n    throw error;\n};\n\nexport const RSResponseInterceptorErrorHandler = (error: AxiosError) => {\n    if (error.response) {\n        RSResponseInterceptor(error.response);\n    } else if (error.config) {\n        RSErrorResponseHandler(error.config, DEFAULT_ERROR_STATUS_CODE);\n    }\n\n    throw error;\n};\n"]}