{"version":3,"file":"request-vectorizer.test.js","sourceRoot":"","sources":["../../../../../src/_server/inteceptors/__tests__/request-vectorizer.test.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,yEAAyE;AACzE,4DAA4D;AAC5D,OAAO,EAAE,iBAAiB,EAAE,yBAAyB,EAAE,MAAM,uBAAuB,CAAC;AAErF,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IACxB,MAAM,GAAG,GAAG,iBAAiB,CAAC,GAAG,CAAC;IAClC,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC1B,yBAAyB,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;QAC5C,MAAM,KAAK,GAAG,WAAW,CAAC;QAC1B,MAAM,OAAO,GAAG;YACZ,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC;YACrC,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC;YACrC,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC;SACxC,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC7C,yBAAyB,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;QAC5C,MAAM,MAAM,GAAG,YAAY,CAAC;QAC5B,MAAM,MAAM,GAAG,YAAY,CAAC;QAC5B,MAAM,OAAO,GAAG;YACZ,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC;YACtC,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC;YACtC,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC;YACtC,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC;YACtC,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC;SACzC,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QAC/B,UAAU;QACV,MAAM,KAAK,GAAG,WAAW,CAAC;QAC1B,MAAM,YAAY,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACjD,MAAM,cAAc,GAAG,CAAC,GAAG,KAAK,GAAG,iBAAiB,CAAC,GAAG,GAAG,EAAE,GAAG,KAAK,GAAG,iBAAiB,CAAC,GAAG,GAAG,CAAC,CAAC;QAElG,MAAM;QACN,MAAM,MAAM,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAEpE,SAAS;QACT,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-string-literal -- required for private member access\n// tslint:disable:align -- setTimeout alignment bug inTsLint\nimport { RequestVectorizer, RequestVectorizerInstance } from '../request-vectorizer';\n\ndescribe('vectorizer', () => {\n    const sep = RequestVectorizer.SEP;\n    it('works for requests', () => {\n        RequestVectorizerInstance['_cache'].clear();\n        const input = 'abcdefghi';\n        const results = [\n            RequestVectorizerInstance.next(input),\n            RequestVectorizerInstance.next(input),\n            RequestVectorizerInstance.next(input)\n        ];\n        expect(results[0]).not.toEqual(results[1]);\n        expect(results[0]).not.toEqual(results[2]);\n        expect(results[1]).not.toEqual(results[2]);\n        expect(results[0].endsWith(`${sep}0`));\n        expect(results[1].endsWith(`${sep}1`));\n        expect(results[2].endsWith(`${sep}2`));\n    });\n    it('works when updating multiple requests', () => {\n        RequestVectorizerInstance['_cache'].clear();\n        const input1 = 'RequestId1';\n        const input2 = 'RequestId2';\n        const results = [\n            RequestVectorizerInstance.next(input1),\n            RequestVectorizerInstance.next(input1),\n            RequestVectorizerInstance.next(input2),\n            RequestVectorizerInstance.next(input1),\n            RequestVectorizerInstance.next(input2)\n        ];\n        expect(results).toMatchSnapshot();\n    });\n    it('can increment correctly', () => {\n        // arrange\n        const reqId = 'abcdefghi';\n        const testInstance = new RequestVectorizer();\n        const nextSpy = jest.spyOn(testInstance, 'next');\n        const expectedResult = [`${reqId}${RequestVectorizer.SEP}0`, `${reqId}${RequestVectorizer.SEP}1`];\n\n        // act\n        const result = [testInstance.next(reqId), testInstance.next(reqId)];\n\n        // assert\n        expect(result).toEqual(expectedResult);\n        expect(nextSpy).toHaveBeenCalledTimes(2);\n    });\n});\n"]}