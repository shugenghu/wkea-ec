{"version":3,"file":"rs-logging-interceptor.test.js","sourceRoot":"","sources":["../../../../../src/_server/inteceptors/__tests__/rs-logging-interceptor.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:align\nimport { IEventRetailServerRequestProperties, StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';\nimport { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport {\n    replaceIdentifiers,\n    RSRequestInterceptor,\n    RSRequestInterceptorErrorHandler,\n    RSResponseInterceptor\n} from '../rs-logging-interceptor';\nimport { TTLCache } from '../ttl-cache';\n\n// tslint:disable:no-unnecessary-callback-wrapper\ndescribe('helper functions', () => {\n    it('can replace identifiers correctly', () => {\n        // arrange\n        const baseUrl = 'https://www.foo.com';\n        const urlPaths = [\n            '/Commerce/BasicEndpoint',\n            '/Commerce/BasicEndpoint(withArgument)',\n            '/Commerce/BasicEndpoint(%20withEscapedArgument%20)',\n            '/Commerce/Controller/Method',\n            '/Commerce/Controller/Method(withArgument)',\n            '/Commerce/Controller/Method(%20withEscapedArgument%20)',\n            '/Commerce/Controller(%20withArguments%20)/Method(%20withEscapedArgument%20)'\n        ];\n\n        // act\n        const result = urlPaths.map(u => `${baseUrl}${u}`).map(u => replaceIdentifiers(u));\n\n        // assert\n        expect(result).toMatchSnapshot();\n    });\n});\n\ndescribe('retail server logging interceptor', () => {\n    const inputs = ['Commerce/Cart(asdflasfadsfasdf)/Foo', 'Commerce(asdfas1231_)/Foo(asfas12312)/Bar(12321312)', undefined];\n    const urlAsString = 'https://foo.bar/commerce/request/endpoint?baz=123&etc=abc#anchor5';\n\n    it('properly replaces url parts', () => {\n        // arrange\n        // act\n        const outputs = inputs.map(input => replaceIdentifiers(input));\n        // assert\n        expect(outputs).toMatchSnapshot();\n    });\n    it('properly replaces url parts with custom replacer', () => {\n        // arrange\n        // act\n        const outputs = inputs.map(input => replaceIdentifiers(input, '(REPLACED)'));\n        // assert\n        expect(outputs).toMatchSnapshot();\n    });\n    describe('interceptor', () => {\n        describe('response', () => {\n            let response: Partial<AxiosResponse> = {};\n            describe('as web', () => {\n                let originalEnv;\n                beforeAll(() => {\n                    originalEnv = process.env;\n                    process.env.CURRENT_ENVIRONMENT = 'web';\n                    response = {\n                        request: {\n                            method: 'GET'\n                        },\n                        headers: {\n                            requestid: 12345\n                        },\n                        status: 200,\n                        config: {\n                            headers: {\n                                requestid: 12345\n                            },\n                            url: urlAsString\n                        }\n                    };\n                });\n                afterAll(() => {\n                    process.env = originalEnv;\n                });\n                it('can parse if the request is a web request', () => {\n                    expect(RSResponseInterceptor(<AxiosResponse>response)).toMatchSnapshot();\n                });\n            });\n            [urlAsString, '', undefined].forEach(theUrl => {\n                ['get', 'POST', 'PatCH', undefined].forEach(theMethod => {\n                    const testArguments = `${theUrl}:${theMethod}`;\n                    const testName = `can process a response: ${testArguments}`;\n                    it(testName, () => {\n                        // arrange\n                        response = {\n                            request: {\n                                method: theMethod\n                            },\n                            status: 200,\n                            config: {\n                                headers: {\n                                    requestid: 12345\n                                },\n                                url: theUrl\n                            }\n                        };\n                        const staticTelemetryTrackDependencySpy = jest\n                            .spyOn(StaticTelemetry, 'trackDependency')\n                            .mockImplementationOnce(trackDependencyOptions => {\n                                expect(trackDependencyOptions).toMatchSnapshot(`${testName}-trackDependency`);\n                            });\n                        jest.spyOn(StaticTelemetry, 'stopTimer').mockImplementation(timerId => {\n                            // fake timer response\n                            return 456;\n                        });\n                        const requestCache = new TTLCache<IEventRetailServerRequestProperties>({\n                            intervalForRemovalInMs: 250,\n                            removalThresholdInMs: 1500\n                        });\n\n                        requestCache.set(response.config!.headers.requestid, {\n                            e: theUrl || '',\n                            m: theMethod || '',\n                            r: response.config!.headers.requestid,\n                            rv: undefined\n                        });\n\n                        // act\n                        const result = RSResponseInterceptor(<AxiosResponse>response, requestCache);\n\n                        // assert\n                        return new Promise(resolve => {\n                            setTimeout(() => {\n                                expect(result).toMatchSnapshot(`${testName}-results`);\n                                expect(staticTelemetryTrackDependencySpy).toHaveBeenCalledTimes(1);\n                                staticTelemetryTrackDependencySpy.mockClear();\n                                resolve();\n                            }, 2000);\n                        });\n                    });\n                });\n            });\n        });\n        describe('request', () => {\n            let request: AxiosRequestConfig;\n\n            beforeEach(() => {\n                request = {\n                    method: 'POST',\n                    url: urlAsString,\n                    headers: {\n                        RequestId: 'abcdefghijklmnopq',\n                        'Request-Id': 'vectora.123',\n                        OUN: 'oun'\n                    }\n                };\n            });\n            it('handles invalid requests', () => {\n                delete request.headers;\n                expect(RSRequestInterceptor).not.toThrow();\n                request = undefined!;\n                expect(RSRequestInterceptor).not.toThrow();\n            });\n            it('can ignores non-retail server requests', () => {\n                // arrange\n                delete request.headers.OUN;\n                // act\n                const result = RSRequestInterceptor(request);\n                // assert\n                expect(result).toMatchSnapshot();\n            });\n            it('processes valid requests requests', () => {\n                // act\n                const result = RSRequestInterceptor(request);\n                // assert\n                expect(result).toMatchSnapshot();\n            });\n\n            it('can handle error callback for request interceptor', () => {\n                const errorMessage = 'foo';\n                expect(() => RSRequestInterceptorErrorHandler(<AxiosError>new Error(errorMessage))).toThrow(errorMessage);\n            });\n        });\n    });\n});\n"]}