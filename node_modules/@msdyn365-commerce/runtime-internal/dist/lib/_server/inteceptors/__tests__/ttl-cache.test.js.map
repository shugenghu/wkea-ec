{"version":3,"file":"ttl-cache.test.js","sourceRoot":"","sources":["../../../../../src/_server/inteceptors/__tests__/ttl-cache.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-string-literal -- required for private member access\n// tslint:disable:align -- setTimeout alignment bug inTsLint\nimport { RequestVectorizer, RequestVectorizerInstance } from '../request-vectorizer';\nimport { TTLCache } from '../ttl-cache';\n\ndescribe('TTL cache', () => {\n    it('can fetch get things from cache', () => {\n        const instance = new TTLCache<number>();\n        const keys = ['abc', 'def', 'egh'];\n        const values = [1, 2, 3];\n        // @ts-ignore -- private spy access\n        const _cleanCacheSpy = jest.spyOn(instance, '_cleanCache');\n        expect(instance['_cache'].size).toBe(0);\n\n        instance.set(keys[0], values[0]);\n        instance.set(keys[1], values[1]);\n        instance.set(keys[2], values[2]);\n\n        expect(instance['_cache'].size).toBe(3);\n        expect(_cleanCacheSpy).not.toHaveBeenCalled();\n\n        // read from cache\n        const results = [instance.get(keys[0]), instance.get(keys[1]), instance.get(keys[2])];\n        expect(results).toEqual(values);\n\n        // clean\n        instance.clear();\n        expect(instance['_cache'].size).toBe(0);\n        expect(instance.get(keys[0])).toBeUndefined();\n    });\n    describe('short lived cached', () => {\n        let instance: TTLCache<number>;\n        let originalEnv;\n        const newPollInternal = 200;\n        const newThreshold = 2000;\n        beforeAll(() => {\n            originalEnv = process.env;\n            process.env.CURRENT_ENVIRONMENT = 'node';\n            instance = new TTLCache({\n                intervalForRemovalInMs: newPollInternal,\n                removalThresholdInMs: newThreshold\n            });\n        });\n        afterAll(() => {\n            process.env = originalEnv;\n        });\n        it('can remove after timeout', done => {\n            // arrange\n            const key = 'abcd';\n            const callback = jest.fn().mockImplementationOnce((removedKey: string) => {\n                expect(removedKey).toBe(key);\n            });\n            expect(instance['_cache'].size).toBe(0);\n            // @ts-ignore -- private spy access\n            const _cleanCacheSpy = jest.spyOn(instance, '_cleanCache');\n            // act\n            instance.set(key, 12345, callback);\n            expect(instance['_cache'].size).toBe(1);\n            expect(callback).toHaveBeenCalledTimes(0);\n            // assert\n            setTimeout(() => {\n                expect(_cleanCacheSpy).toBeCalled();\n                expect(instance['_cache'].size).toBe(0);\n                expect(instance['_cache'].get(key)).toBeUndefined();\n                expect(callback).toHaveBeenCalledTimes(1);\n                done();\n            }, newThreshold * 2);\n        });\n    });\n});\n"]}