{"version":3,"file":"request-router-helper.js","sourceRoot":"","sources":["../../../../src/_server/request-routers/request-router-helper.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport {\n    EVENT_STATICRESOURCE_FAILURE,\n    EVENT_STATICRESOURCETYPE_CSS,\n    EVENT_STATICRESOURCETYPE_IMAGE,\n    EVENT_STATICRESOURCETYPE_JS,\n    EVENT_STATICRESOURCETYPE_OTHER,\n    EXCEPTION_GENERIC_EXPRESS,\n    IEventStaticResourceTypeProperties,\n    IInternalTelemetry,\n    InternalTelemetry,\n    LogLevel\n} from '@msdyn365-commerce/telemetry-internal';\nimport { NextFunction, Request, Response } from 'express';\nimport { HttpException, HttpRedirectException } from '../error';\nimport { parseRequest } from '../parse-request';\n\nexport const preProcessRequest = (req: Request, res: Response, computerName: string | undefined, telemetry: IInternalTelemetry) => {\n    return parseRequest(req);\n};\n\nexport const handleServerException = (res: Response, message: string, error: Error, telemetry: InternalTelemetry, status: number = 500) => {\n    if (telemetry) {\n        telemetry.log(LogLevel.Error, '', { exception: error });\n    }\n    res.status(status);\n    if (process.env.NODE_ENV === 'development') {\n        const formattedStack = error.stack && error.stack.split(`\\n`);\n        return res.json({\n            name: error.name,\n            message: EXCEPTION_GENERIC_EXPRESS,\n            stack: formattedStack,\n            originalStack: error.stack\n        });\n    } else {\n        return res.json({ name: error.name, message });\n    }\n};\n\n/**\n * Express middleware function for error handling.\n * @param error javascript Error object that was thrown by the server\n * @param req Express request object\n * @param res Express response object\n * @param next Express Next function\n */\nexport const serverExceptionParser = (error: Error, req: Request, res: Response, next: NextFunction) => {\n    if (!error) {\n        return next();\n    }\n    if (error.name === HttpRedirectException.Name) {\n        return res.redirect((<HttpRedirectException>error).location);\n    }\n    const httpException = <HttpException>error;\n    handleServerException(\n        res,\n        EXCEPTION_GENERIC_EXPRESS,\n        error,\n        res.locals.telemetry,\n        httpException.statusCode || httpException.statusCode !== 200 ? httpException.statusCode : undefined\n    );\n};\n\nexport const prepareErrorResponse = (request: Request, response: Response, error: Error, telemetry: IInternalTelemetry): void => {\n    let staticsType: string = EVENT_STATICRESOURCETYPE_OTHER;\n    try {\n        const index = (request.originalUrl || '').lastIndexOf('.');\n        if (index !== -1) {\n            const suffix = request.originalUrl.substr(index + 1).toLocaleLowerCase();\n            switch (suffix) {\n                case 'js':\n                    staticsType = EVENT_STATICRESOURCETYPE_JS;\n                    break;\n                case 'css':\n                    staticsType = EVENT_STATICRESOURCETYPE_CSS;\n                    break;\n                case 'png':\n                case 'jpg':\n                case 'jpeg':\n                case 'gif':\n                    staticsType = EVENT_STATICRESOURCETYPE_IMAGE;\n                    break;\n                default:\n                    staticsType = EVENT_STATICRESOURCETYPE_OTHER;\n            }\n        }\n        telemetry.trackEvent<IEventStaticResourceTypeProperties, {}>(EVENT_STATICRESOURCE_FAILURE, {\n            type: staticsType\n        });\n        telemetry.log(LogLevel.Error, '', { exception: error });\n        // try change content type\n        if (!response.headersSent) {\n            response.status(404).contentType('text/plain');\n        }\n        response.write(`The requested URL ${request.originalUrl} was not found on this server`);\n        response.end();\n    } catch (e) {\n        telemetry.log(LogLevel.Error, '', { exception: e });\n    }\n};\n"]}