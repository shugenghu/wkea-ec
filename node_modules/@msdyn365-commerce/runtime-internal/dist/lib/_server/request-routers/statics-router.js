/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { EXCEPTION_INVALID_URL } from '@msdyn365-commerce/telemetry-internal';
import express from 'express';
import path from 'path';
import url from 'url';
import { safeRoute } from '../../utils/helpers';
import { createFileStreamResponse, HASHED_STATICS_PREFIX, mapAssetUrlToFiles } from '../statics-pipeline/statics-helpers';
import { prepareErrorResponse } from './request-router-helper';
export const parseHashedStaticsRequest = async (req, res, next, additionalArgs, telemetry) => {
    res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');
    res.setHeader('Accept-Ranges', 'bytes');
    const requestedJsAssets = mapAssetUrlToFiles(req.params.hashedUrl, additionalArgs.clientStats);
    const streamResponse = await createFileStreamResponse(requestedJsAssets, additionalArgs.PUBLIC_DIR, telemetry);
    if (streamResponse) {
        streamResponse.pipe(res);
    }
    else {
        res.end();
    }
};
export default function (PUBLIC_DIR, clientStats) {
    const _staticsRouter = express.Router();
    /**
     * Platform serving of assets
     */
    _staticsRouter.get([
        // js endpoint for concatenated chunks
        `/${process.env.SUBMISSIONID || 'statics'}/:hashedUrl`,
        // legacy chunk concat ID
        `/${HASHED_STATICS_PREFIX}:hashedUrl`
    ], safeRoute(async (req, res, next) => {
        return parseHashedStaticsRequest(req, res, next, { clientStats, PUBLIC_DIR }, res.locals.telemetry);
    }));
    _staticsRouter.get('/*', safeRoute(async (req, res, next) => {
        const telemetry = res.locals.telemetry;
        const requestPath = url.parse(req.url, true);
        if (!requestPath.pathname || requestPath.pathname.indexOf('..') > 0) {
            return prepareErrorResponse(req, res, new Error(EXCEPTION_INVALID_URL), telemetry);
        }
        // substring url after /_scnr/ will give resource path starts from static
        const resourcePath = path.resolve(`${PUBLIC_DIR}/${requestPath.pathname}`);
        return res.sendFile(resourcePath, {}, (error) => {
            if (error) {
                return prepareErrorResponse(req, res, error, telemetry);
            }
        });
    }));
    return _staticsRouter;
}
//# sourceMappingURL=statics-router.js.map