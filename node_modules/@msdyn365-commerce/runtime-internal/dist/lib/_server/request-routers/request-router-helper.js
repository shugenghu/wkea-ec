/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { EVENT_STATICRESOURCE_FAILURE, EVENT_STATICRESOURCETYPE_CSS, EVENT_STATICRESOURCETYPE_IMAGE, EVENT_STATICRESOURCETYPE_JS, EVENT_STATICRESOURCETYPE_OTHER, EXCEPTION_GENERIC_EXPRESS, LogLevel } from '@msdyn365-commerce/telemetry-internal';
import { HttpRedirectException } from '../error';
import { parseRequest } from '../parse-request';
export const preProcessRequest = (req, res, computerName, telemetry) => {
    return parseRequest(req);
};
export const handleServerException = (res, message, error, telemetry, status = 500) => {
    if (telemetry) {
        telemetry.log(LogLevel.Error, '', { exception: error });
    }
    res.status(status);
    if (process.env.NODE_ENV === 'development') {
        const formattedStack = error.stack && error.stack.split(`\n`);
        return res.json({
            name: error.name,
            message: EXCEPTION_GENERIC_EXPRESS,
            stack: formattedStack,
            originalStack: error.stack
        });
    }
    else {
        return res.json({ name: error.name, message });
    }
};
/**
 * Express middleware function for error handling.
 * @param error javascript Error object that was thrown by the server
 * @param req Express request object
 * @param res Express response object
 * @param next Express Next function
 */
export const serverExceptionParser = (error, req, res, next) => {
    if (!error) {
        return next();
    }
    if (error.name === HttpRedirectException.Name) {
        return res.redirect(error.location);
    }
    const httpException = error;
    handleServerException(res, EXCEPTION_GENERIC_EXPRESS, error, res.locals.telemetry, httpException.statusCode || httpException.statusCode !== 200 ? httpException.statusCode : undefined);
};
export const prepareErrorResponse = (request, response, error, telemetry) => {
    let staticsType = EVENT_STATICRESOURCETYPE_OTHER;
    try {
        const index = (request.originalUrl || '').lastIndexOf('.');
        if (index !== -1) {
            const suffix = request.originalUrl.substr(index + 1).toLocaleLowerCase();
            switch (suffix) {
                case 'js':
                    staticsType = EVENT_STATICRESOURCETYPE_JS;
                    break;
                case 'css':
                    staticsType = EVENT_STATICRESOURCETYPE_CSS;
                    break;
                case 'png':
                case 'jpg':
                case 'jpeg':
                case 'gif':
                    staticsType = EVENT_STATICRESOURCETYPE_IMAGE;
                    break;
                default:
                    staticsType = EVENT_STATICRESOURCETYPE_OTHER;
            }
        }
        telemetry.trackEvent(EVENT_STATICRESOURCE_FAILURE, {
            type: staticsType
        });
        telemetry.log(LogLevel.Error, '', { exception: error });
        // try change content type
        if (!response.headersSent) {
            response.status(404).contentType('text/plain');
        }
        response.write(`The requested URL ${request.originalUrl} was not found on this server`);
        response.end();
    }
    catch (e) {
        telemetry.log(LogLevel.Error, '', { exception: e });
    }
};
//# sourceMappingURL=request-router-helper.js.map