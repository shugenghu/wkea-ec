{"version":3,"file":"health-router.js","sourceRoot":"","sources":["../../../../src/_server/request-routers/health-router.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AACpE,OAAO,EAAqB,QAAQ,EAAE,MAAM,uCAAuC,CAAC;AACpF,OAAO,OAAsC,MAAM,SAAS,CAAC;AAE7D,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAC;AAEtE,IAAI,OAAO,GAAG,IAAI,CAAC;AACnB,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,OAAO,GAAG,KAAK,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,MAAM,WAAW,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAChD,MAAM,SAAS,GAAsB,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;IAC1D,OAAO,CAAC,OAAO,EAAE;SACZ,IAAI,CAAC,KAAK,IAAI,EAAE;QACb,IAAI,CAAC,OAAO,EAAE;YACV,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,mDAAmD,CAAC,CAAC;YACzF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC1B;QACD,aAAa;QACb,MAAM,cAAc,GAAgC,gBAAiB,CAAC,kBAAkB,EAAE,CAAC;QAC3F,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;YAC3C,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,4CAA4C,CAAC,CAAC;YAC5E,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;SAC7E;QACD,MAAM,uBAAuB,GAAG,oBAAoB,EAAE,CAAC;QACvD,IAAI,uBAAuB,CAAC,MAAM,EAAE;YAChC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,mEAAmE,CAAC,CAAC;YACnG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mEAAmE,CAAC,CAAC;SACpG;QAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IAC3D,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,qCAAqC,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAC3F,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,qCAAqC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;IACtG,CAAC,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO;IACV,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAEtC,YAAY;SACP,GAAG,CAAC,YAAY,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SACzF,GAAG,CAAC,oBAAoB,EAAE,WAAW,CAAC;SACtC,GAAG,CAAC,kBAAkB,EAAE,WAAW,CAAC,CAAC;IAE1C,OAAO,YAAY,CAAC;AACxB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { msdyn365Commerce } from '@msdyn365-commerce/core-internal';\nimport { InternalTelemetry, LogLevel } from '@msdyn365-commerce/telemetry-internal';\nimport express, { Request, Response, Router } from 'express';\nimport { IMSDyn365CommerceExtension } from '../../app-initialization/models';\nimport { getFailedModulesList } from '../Definition/moduleDefinition';\n\nlet healthy = true;\nprocess.on('SIGTERM', () => {\n    healthy = false;\n});\n\nconst healthCheck = (req: Request, res: Response) => {\n    const telemetry: InternalTelemetry = res.locals.telemetry;\n    Promise.resolve()\n        .then(async () => {\n            if (!healthy) {\n                telemetry.log(LogLevel.Information, 'Server is in shutdown mode, due to sigterm signal');\n                return res.status(503);\n            }\n            // @ts-ignore\n            const moduleBindings = (<IMSDyn365CommerceExtension>msdyn365Commerce).getAllModuleBinder();\n            if (!moduleBindings || !moduleBindings.length) {\n                telemetry.log(LogLevel.Error, 'Environment is unhealthy. no modules found');\n                return res.status(503).send('Environment is unhealthy. no modules found');\n            }\n            const failedModuleDefinitions = getFailedModulesList();\n            if (failedModuleDefinitions.length) {\n                telemetry.log(LogLevel.Error, 'Environment is unhealthy, contains modules with definition errors');\n                return res.status(503).send('Environment is unhealthy, contains modules with definition errors');\n            }\n\n            return res.status(200).send(`Environment is healthy!`);\n        })\n        .catch(error => {\n            telemetry.log(LogLevel.Error, 'Environment check encountered error', { exception: error });\n            return res.status(503).send({ message: 'Environment check encountered error', exception: error });\n        });\n};\n\nexport default function(): Router {\n    const healthRouter = express.Router();\n\n    healthRouter\n        .get('/keepalive', (req: Request, res: Response) => res.status(200).send('Server is up!'))\n        .get('/environmenthealth', healthCheck)\n        .get('/containerhealth', healthCheck);\n\n    return healthRouter;\n}\n"]}