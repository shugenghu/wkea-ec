{"version":3,"file":"render-default-router.js","sourceRoot":"","sources":["../../../../src/_server/request-routers/render-default-router.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { RequestCache } from '@msdyn365-commerce/cache-internal';\nimport { IModuleContract, IPageResponse, IRequestContext } from '@msdyn365-commerce/core-internal';\nimport { EXCEPTION_PARSE_ISSUE, InternalTelemetry, LogLevel, Telemetry } from '@msdyn365-commerce/telemetry-internal';\nimport { NextFunction, Request, Response } from 'express';\nimport { sha256 } from 'js-sha256';\nimport { inspect } from 'util';\nimport { getContentSecurityPolicy } from '../../utils/base-page-utils';\nimport { getPageConfig } from '../parse-request';\nimport serverRenderVnext from '../server-render.vnext';\nimport { handleServerException } from './request-router-helper';\n\nexport const renderDefaultRouter = (\n    req: Request,\n    res: Response,\n    next: NextFunction,\n    content: IPageResponse,\n    context: IRequestContext,\n    { clientStats }: { clientStats: {} }\n) => {\n    Promise.resolve()\n        .then(async () => {\n            const { telemetry }: { telemetry: InternalTelemetry } = res.locals;\n            try {\n                if (!content) {\n                    throw new Error(EXCEPTION_PARSE_ISSUE);\n                }\n\n                const isEditor = context.params.isEditor;\n                const enableAuthoringRemoveAndAddModule = context.features?.enableAuthoringRemoveAndAddModule;\n                const pageConfig = getPageConfig(content, telemetry);\n\n                // If OneRF sends back config errors for a particular module, OneRF will automatically set the module type to placeholder. However,\n                // in editor mode, and iff authoring helper client side refresh feature is enabled (enableAuthoringRemoveAndAddModule)\n                // we want to control this logic client side to enable client refresh once the module receives valid information\n                // Therefore, we change the typename back to its original type and let safe-render-module decide whether to render a placeholder or not\n                if (isEditor && enableAuthoringRemoveAndAddModule && content && content.slots) {\n                    changePlaceholdersBackToOriginalModuleType(content.slots);\n                }\n\n                telemetry.setTelemetryRequestContext({\n                    siteId: '[[Placeholder]]',\n                    channelId: context.channel?.RecordId ? context.channel.RecordId.toString() : 'Unavailable',\n                    pageType: context.urlTokens.pageType,\n                    pageId: content.pageRoot.id\n                });\n\n                if (!res.locals.isMockRequest) {\n                    // set channel from res.locals as it's initially set in middleware or has errored out\n                    context.channel = res.locals.getOrgUnitConfigurationAsyncResult;\n                }\n\n                const routeRefreshActions = res.locals.routeRefreshActions;\n                // generate nonce token based on request id, and save it to requestContext\n                generateNonceToken(context);\n                let rootComponentResponse: string = '';\n                if (content.slots && content.slots.length) {\n                    rootComponentResponse = await serverRenderVnext({\n                        content,\n                        options: { clientStats },\n                        context,\n                        telemetry,\n                        moduleTelemetry: res.locals.moduleTelemetry,\n                        pageConfig,\n                        // set request cache or re-use one created from route validation\n                        requestCache: res.locals.requestCache || new RequestCache(),\n                        routeRefreshActions\n                    });\n                }\n                // Add Content-Security-Policy Header\n\n                // If report-only mode set Content-Security-Policy-Report-Only header\n                let contentSecurityPolicyHeader: string = 'Content-Security-Policy';\n                if (context.app && context.app.contentSecurityPolicy && context.app.contentSecurityPolicy.enableReportOnlyMode) {\n                    contentSecurityPolicyHeader = 'Content-Security-Policy-Report-Only';\n                }\n                const contentSecurityPolicy = getContentSecurityPolicy(context);\n                // Set header if policies exist and if CSP is enabled\n                if (contentSecurityPolicy) {\n                    res.setHeader(contentSecurityPolicyHeader, contentSecurityPolicy);\n                }\n\n                // Apppend server side cookies to response header if present\n                // @ts-ignore not part of public contract\n                const serverCookies = context.cookies ? context.cookies.serverCookies : [];\n                if (serverCookies.length > 0) {\n                    // In local dev scenario, because we directly return this response,\n                    // send the response with the Set-Cookie headers to set the cookies from server side\n                    if (process.env.NODE_ENV === 'development') {\n                        for (let i = 0; i < serverCookies.length; i++) {\n                            res.setHeader('Set-Cookie', serverCookies[i]);\n                        }\n                    }\n                    res.setHeader('X-Server-Cookies', serverCookies);\n                }\n\n                telemetry.log(LogLevel.Debug, 'End of Page Render... Sending response');\n\n                res.send(rootComponentResponse);\n            } catch (e) {\n                handleServerException(res, 'Server Exception', e, telemetry);\n            }\n        })\n        .catch((e: Error) => {\n            const { telemetry }: { telemetry: InternalTelemetry } = res.locals;\n            telemetry.log(LogLevel.Error, 'Failed to render page', { exception: e });\n            next();\n        });\n};\n\nconst changePlaceholdersBackToOriginalModuleType = (slots: IModuleContract[]) => {\n    for (let i = 0; i < slots.length; i++) {\n        const curModule = slots[i];\n        if (curModule.configErrors && curModule.configErrors.length > 0) {\n            // OneRF will send the original module type in the config but in case it cannot be derived fall back to using\n            // placeholder\n            // @ts-ignore\n            const originalModuleType = curModule.config?.moduleType;\n            if (originalModuleType) {\n                curModule.typeName = originalModuleType;\n            }\n        }\n    }\n};\n\nconst generateNonceToken = (requestContext: IRequestContext) => {\n    if (\n        !requestContext ||\n        !requestContext.app ||\n        !requestContext.app.contentSecurityPolicy ||\n        requestContext.app.contentSecurityPolicy.disableContentSecurityPolicy ||\n        !requestContext.app.contentSecurityPolicy.enableNonce\n    ) {\n        return;\n    }\n    const requestId = requestContext.operationId;\n    const nonceToken = sha256(requestId);\n    requestContext.app.contentSecurityPolicy ? (requestContext.app.contentSecurityPolicy.nonceToken = nonceToken) : null;\n};\n"]}