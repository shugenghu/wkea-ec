/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { msdyn365Commerce } from '@msdyn365-commerce/core-internal';
import { LogLevel } from '@msdyn365-commerce/telemetry-internal';
import express from 'express';
import { getFailedModulesList } from '../Definition/moduleDefinition';
let healthy = true;
process.on('SIGTERM', () => {
    healthy = false;
});
const healthCheck = (req, res) => {
    const telemetry = res.locals.telemetry;
    Promise.resolve()
        .then(async () => {
        if (!healthy) {
            telemetry.log(LogLevel.Information, 'Server is in shutdown mode, due to sigterm signal');
            return res.status(503);
        }
        // @ts-ignore
        const moduleBindings = msdyn365Commerce.getAllModuleBinder();
        if (!moduleBindings || !moduleBindings.length) {
            telemetry.log(LogLevel.Error, 'Environment is unhealthy. no modules found');
            return res.status(503).send('Environment is unhealthy. no modules found');
        }
        const failedModuleDefinitions = getFailedModulesList();
        if (failedModuleDefinitions.length) {
            telemetry.log(LogLevel.Error, 'Environment is unhealthy, contains modules with definition errors');
            return res.status(503).send('Environment is unhealthy, contains modules with definition errors');
        }
        return res.status(200).send(`Environment is healthy!`);
    })
        .catch(error => {
        telemetry.log(LogLevel.Error, 'Environment check encountered error', { exception: error });
        return res.status(503).send({ message: 'Environment check encountered error', exception: error });
    });
};
export default function () {
    const healthRouter = express.Router();
    healthRouter
        .get('/keepalive', (req, res) => res.status(200).send('Server is up!'))
        .get('/environmenthealth', healthCheck)
        .get('/containerhealth', healthCheck);
    return healthRouter;
}
//# sourceMappingURL=health-router.js.map