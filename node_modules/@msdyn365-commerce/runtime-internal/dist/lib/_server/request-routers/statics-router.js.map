{"version":3,"file":"statics-router.js","sourceRoot":"","sources":["../../../../src/_server/request-routers/statics-router.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,qBAAqB,EAAyC,MAAM,uCAAuC,CAAC;AACrH,OAAO,OAAoD,MAAM,SAAS,CAAC;AAC3E,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,GAAG,MAAM,KAAK,CAAC;AACtB,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,wBAAwB,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAC;AAC1H,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAE/D,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAC1C,GAAY,EACZ,GAAa,EACb,IAAkB,EAClB,cAGC,EACD,SAA6B,EAC/B,EAAE;IACA,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,uCAAuC,CAAC,CAAC;IACvE,GAAG,CAAC,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;IACxC,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;IAC/F,MAAM,cAAc,GAAG,MAAM,wBAAwB,CAAC,iBAAiB,EAAE,cAAc,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IAC/G,IAAI,cAAc,EAAE;QAChB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC5B;SAAM;QACH,GAAG,CAAC,GAAG,EAAE,CAAC;KACb;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO,WAAU,UAAkB,EAAE,WAAe;IACvD,MAAM,cAAc,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IACxC;;OAEG;IACH,cAAc,CAAC,GAAG,CACd;QACI,sCAAsC;QACtC,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,SAAS,aAAa;QACtD,yBAAyB;QACzB,IAAI,qBAAqB,YAAY;KACxC,EACD,SAAS,CAAC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QAChE,OAAO,yBAAyB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,UAAU,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACxG,CAAC,CAAC,CACL,CAAC;IACF,cAAc,CAAC,GAAG,CACd,IAAI,EACJ,SAAS,CAAC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QAChE,MAAM,SAAS,GAAsB,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;QAC1D,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACjE,OAAO,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,KAAK,CAAC,qBAAqB,CAAC,EAAE,SAAS,CAAC,CAAC;SACtF;QACD,yEAAyE;QACzE,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,UAAU,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE3E,OAAO,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,EAAE,CAAC,KAAY,EAAE,EAAE;YACnD,IAAI,KAAK,EAAE;gBACP,OAAO,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;aAC3D;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CACL,CAAC;IAEF,OAAO,cAAc,CAAC;AAC1B,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { EXCEPTION_INVALID_URL, IInternalTelemetry, InternalTelemetry } from '@msdyn365-commerce/telemetry-internal';\nimport express, { NextFunction, Request, Response, Router } from 'express';\nimport path from 'path';\nimport url from 'url';\nimport { safeRoute } from '../../utils/helpers';\nimport { createFileStreamResponse, HASHED_STATICS_PREFIX, mapAssetUrlToFiles } from '../statics-pipeline/statics-helpers';\nimport { prepareErrorResponse } from './request-router-helper';\n\nexport const parseHashedStaticsRequest = async (\n    req: Request,\n    res: Response,\n    next: NextFunction,\n    additionalArgs: {\n        clientStats: {};\n        PUBLIC_DIR: string;\n    },\n    telemetry: IInternalTelemetry\n) => {\n    res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');\n    res.setHeader('Accept-Ranges', 'bytes');\n    const requestedJsAssets = mapAssetUrlToFiles(req.params.hashedUrl, additionalArgs.clientStats);\n    const streamResponse = await createFileStreamResponse(requestedJsAssets, additionalArgs.PUBLIC_DIR, telemetry);\n    if (streamResponse) {\n        streamResponse.pipe(res);\n    } else {\n        res.end();\n    }\n};\n\nexport default function(PUBLIC_DIR: string, clientStats: {}): Router {\n    const _staticsRouter = express.Router();\n    /**\n     * Platform serving of assets\n     */\n    _staticsRouter.get(\n        [\n            // js endpoint for concatenated chunks\n            `/${process.env.SUBMISSIONID || 'statics'}/:hashedUrl`,\n            // legacy chunk concat ID\n            `/${HASHED_STATICS_PREFIX}:hashedUrl`\n        ],\n        safeRoute(async (req: Request, res: Response, next: NextFunction) => {\n            return parseHashedStaticsRequest(req, res, next, { clientStats, PUBLIC_DIR }, res.locals.telemetry);\n        })\n    );\n    _staticsRouter.get(\n        '/*',\n        safeRoute(async (req: Request, res: Response, next: NextFunction) => {\n            const telemetry: InternalTelemetry = res.locals.telemetry;\n            const requestPath = url.parse(req.url, true);\n            if (!requestPath.pathname || requestPath.pathname.indexOf('..') > 0) {\n                return prepareErrorResponse(req, res, new Error(EXCEPTION_INVALID_URL), telemetry);\n            }\n            // substring url after /_scnr/ will give resource path starts from static\n            const resourcePath = path.resolve(`${PUBLIC_DIR}/${requestPath.pathname}`);\n\n            return res.sendFile(resourcePath, {}, (error: Error) => {\n                if (error) {\n                    return prepareErrorResponse(req, res, error, telemetry);\n                }\n            });\n        })\n    );\n\n    return _staticsRouter;\n}\n"]}