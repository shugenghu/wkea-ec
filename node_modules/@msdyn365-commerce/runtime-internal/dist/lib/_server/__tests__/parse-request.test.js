/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import msdyn365Commerce from '@msdyn365-commerce/core-internal';
import * as fs from 'fs';
import * as glob from 'glob';
import 'jest';
import { Request } from 'jest-express/lib/request';
import * as path from 'path';
import { getHeaders, mapRequestContextWithRenderingContext, parseRequest } from '../parse-request';
describe('request parsing', () => {
    const mockRequests = [];
    const mockRenderingContexts = [];
    beforeAll(() => {
        // arrange
        // setup all request mocks
        let files = glob.sync(path.resolve(__dirname, '../__mocks__/request-context.*.json'));
        files.forEach(filePath => {
            const mockRequest = new Request('http://localhost/test');
            const mockFile = JSON.parse(fs.readFileSync(filePath).toString());
            mockRequest.setQuery(mockFile.query);
            mockRequest.setPath(mockFile.path);
            mockRequests.push(mockRequest);
        });
        // load rendering context mocks
        files = glob.sync(path.resolve(__dirname, '../__mocks__/rendering-context.*.json'));
        files.forEach(filePath => {
            const mockRenderingContext = JSON.parse(fs.readFileSync(filePath).toString());
            mockRenderingContexts.push(mockRenderingContext);
        });
        // validate that we read mocks successfully -- subsequent changes to tests should update
        expect(mockRequests.length).toBe(2);
        expect(mockRenderingContexts.length).toBe(4);
        jest.resetModules();
        jest.mock('@msdyn365-commerce/core-internal', () => {
            return {
                msdyn365Commerce: {
                    moduleBinder: name => {
                        // blank
                    }
                }
            };
        });
        // Used to test retrival of api settings from .env file if not provided by page mock in
        // renderingContext
        process.env.MSDyn365Commerce_BASEURL = 'https://rushec-tie-topaz4a3a309f5438ce85ret.cloudax.test.dynamics.com/';
        process.env.MSDyn365Commerce_CHANNELID = '5637145359';
        process.env.MSDyn365Commerce_CATALOGID = '0';
        process.env.MSDyn365Commerce_OUN = '077';
        process.env.MSDyn365Commerce_BASEIMAGEURL =
            'https://img-ppe-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/search?fileName=/';
    });
    it('can parse page requests correctly', () => {
        // act
        mockRequests.forEach((req, index) => {
            // @ts-ignore: it's not a real request object
            const result = parseRequest(mockRequests[0]);
            // assert
            expect(result).toMatchSnapshot(`request #${index}`);
        });
    });
    it('can parse rendering contexts', () => {
        // arrange -- dependency on rendering context is by design
        [true, false].forEach(hasAppModule => {
            // @ts-ignore: set fake function for module binder
            msdyn365Commerce.moduleBinder = jest.fn(name => {
                return hasAppModule;
            });
            console.log(`${mockRequests[1].protocol}://${mockRequests[1].get('host')}${mockRequests[1].originalUrl}`);
            // @ts-ignore: it's not a real request object
            const requestContext = parseRequest(mockRequests[1]);
            // act
            mockRenderingContexts.forEach((renderingContext, index) => {
                // @ts-ignore: it's not a real request object
                const result = mapRequestContextWithRenderingContext(mockRequests[0], requestContext, renderingContext);
                // assert
                expect(result).toMatchSnapshot(`request ${hasAppModule} ${index}`);
            });
            jest.unmock('@msdyn365-commerce/core-internal');
            // expect N assertions where N = num of rendering context mocks
        });
        expect.assertions(mockRenderingContexts.length * 2);
    });
    describe('getHeaders', () => {
        it('Should return headers', () => {
            const req = {
                headers: {
                    'x-custom-header': 'hello'
                }
            };
            // @ts-ignore
            const headers = getHeaders(req);
            expect(headers).toMatchObject({
                'x-custom-header': 'hello'
            });
        });
        it('Should mask reserved headers', () => {
            const req = {
                headers: {
                    Authorization: 'Bearer super-secret-token'
                }
            };
            // @ts-ignore
            const headers = getHeaders(req);
            expect(headers).toMatchObject({});
        });
    });
    it('Should omit headers and cookies from serialized request context', () => {
        // @ts-ignore: it's not a real request object
        const serverContext = parseRequest(mockRequests[0]);
        expect(serverContext).toHaveProperty('headers');
        const clientContext = JSON.parse(JSON.stringify(serverContext));
        expect(clientContext).not.toHaveProperty('cookies');
        expect(clientContext).not.toHaveProperty('headers');
    });
    afterAll(() => {
        jest.resetAllMocks();
    });
});
//# sourceMappingURL=parse-request.test.js.map