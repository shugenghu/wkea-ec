{"version":3,"file":"theming.test.js","sourceRoot":"","sources":["../../../../src/_server/__tests__/theming.test.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,MAAM,wBAAwB,GAAG,GAAuB,EAAE,CAAC,CAAC;IACxD,MAAM,EAAE;QACJ,YAAY,EAAE;YACV,GAAG,EAAE,gBAAgB;YACrB,IAAI,EAAE,oBAAoB;SAC7B;QACD,2BAA2B,EAAE;YACzB,GAAG,EAAE,+BAA+B;YACpC,IAAI,EAAE,mCAAmC;SAC5C;KACJ;IACD,MAAM,EAAE,EAAE;CACb,CAAC,CAAC;AAEH,OAAO,gBAAwC,MAAM,kCAAkC,CAAC;AACxF,OAAO,MAAM,CAAC;AACd,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACnB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,OAAgB,EAAE,EAAE,CACvC,EAAE,CAAC,sDAAsD,OAAO,EAAE,EAAE,GAAG,EAAE;QACrE,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,mBAAmB,CAAC,wBAAwB,EAAE,CAAC,CAAC;QAC9F,MAAM,QAAQ,GAAG,cAAc,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7D,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CACL,CAAC;IAEF,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAClC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,mBAAmB,CAAC,wBAAwB,EAAE,CAAC,CAAC;QAC9F,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAoB,SAAU,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACjD,MAAM,GAAG,GAAG,wBAAwB,EAAE,CAAC;QACvC,OAAO,GAAG,CAAC,2BAA2B,CAAC,CAAC;QACxC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACvE,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACnD,2BAA2B;QAC3B,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,mBAAmB,CAAgB,IAAK,CAAC,CAAC;QACxF,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QAC/B,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAC9B,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nconst getMockThemeRegistration = (): IThemeRegistration => ({\n    themes: {\n        'mock-theme': {\n            dev: 'mock-theme.css',\n            prod: 'mock-theme.min.css'\n        },\n        'msdyn365-commerce-default': {\n            dev: 'msdyn365-commerce-default.css',\n            prod: 'msdyn365-commerce-default.min.css'\n        }\n    },\n    styles: {}\n});\n\nimport msdyn365Commerce, { IThemeRegistration } from '@msdyn365-commerce/core-internal';\nimport 'jest';\nimport { getTheme } from '../theming';\n\ndescribe('theme', () => {\n    [true, false].forEach((isDebug: boolean) =>\n        it(`can grabs existing theme from registration isDebug:${isDebug}`, () => {\n            jest.spyOn(msdyn365Commerce, 'themes', 'get').mockReturnValueOnce(getMockThemeRegistration());\n            const expected = `mock-theme.${isDebug ? 'css' : 'min.css'}`;\n            const result = getTheme(isDebug, 'mock-theme');\n            expect(result).toEqual([expected]);\n        })\n    );\n\n    it('can handle no theme passed', () => {\n        jest.spyOn(msdyn365Commerce, 'themes', 'get').mockReturnValueOnce(getMockThemeRegistration());\n        expect(getTheme(true, <string>(<unknown>undefined))).toEqual([]);\n    });\n    it('can handle unknown theme with no fallback', () => {\n        const reg = getMockThemeRegistration();\n        delete reg['msdyn365-commerce-default'];\n        jest.spyOn(msdyn365Commerce, 'themes', 'get').mockReturnValueOnce(reg);\n        expect(getTheme(true, 'asdf')).toEqual([]);\n    });\n    it('can handle no theme registration gracefully', () => {\n        // tslint:disable-next-line\n        jest.spyOn(msdyn365Commerce, 'themes', 'get').mockReturnValueOnce(<any>(<unknown>null));\n        expect(getTheme(true, 'mock-theme')).toEqual([]);\n    });\n\n    it('can handle theme=\"None\"', () => {\n        expect(getTheme(true, 'None')).toEqual([]);\n    });\n\n    it('can handle empty theme', () => {\n        expect(getTheme(true, '')).toEqual([]);\n    });\n});\n"]}