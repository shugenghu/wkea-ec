/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
const getMockThemeRegistration = () => ({
    themes: {
        'mock-theme': {
            dev: 'mock-theme.css',
            prod: 'mock-theme.min.css'
        },
        'msdyn365-commerce-default': {
            dev: 'msdyn365-commerce-default.css',
            prod: 'msdyn365-commerce-default.min.css'
        }
    },
    styles: {}
});
import msdyn365Commerce from '@msdyn365-commerce/core-internal';
import 'jest';
import { getTheme } from '../theming';
describe('theme', () => {
    [true, false].forEach((isDebug) => it(`can grabs existing theme from registration isDebug:${isDebug}`, () => {
        jest.spyOn(msdyn365Commerce, 'themes', 'get').mockReturnValueOnce(getMockThemeRegistration());
        const expected = `mock-theme.${isDebug ? 'css' : 'min.css'}`;
        const result = getTheme(isDebug, 'mock-theme');
        expect(result).toEqual([expected]);
    }));
    it('can handle no theme passed', () => {
        jest.spyOn(msdyn365Commerce, 'themes', 'get').mockReturnValueOnce(getMockThemeRegistration());
        expect(getTheme(true, undefined)).toEqual([]);
    });
    it('can handle unknown theme with no fallback', () => {
        const reg = getMockThemeRegistration();
        delete reg['msdyn365-commerce-default'];
        jest.spyOn(msdyn365Commerce, 'themes', 'get').mockReturnValueOnce(reg);
        expect(getTheme(true, 'asdf')).toEqual([]);
    });
    it('can handle no theme registration gracefully', () => {
        // tslint:disable-next-line
        jest.spyOn(msdyn365Commerce, 'themes', 'get').mockReturnValueOnce(null);
        expect(getTheme(true, 'mock-theme')).toEqual([]);
    });
    it('can handle theme="None"', () => {
        expect(getTheme(true, 'None')).toEqual([]);
    });
    it('can handle empty theme', () => {
        expect(getTheme(true, '')).toEqual([]);
    });
});
//# sourceMappingURL=theming.test.js.map