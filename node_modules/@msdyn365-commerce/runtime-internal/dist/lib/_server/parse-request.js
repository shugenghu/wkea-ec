/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// tslint:disable: prefer-object-spread - needed to preserve proto properties
import msdyn365Commerce, { tryParseInt } from '@msdyn365-commerce/core-internal';
import { EXCEPTION_PAGECONFIG, LogLevel } from '@msdyn365-commerce/telemetry-internal';
import { mergeWith as _mergeWith, pick as _pick } from 'lodash';
import { CookieContext } from '../utils/cookie-utils';
import { getFlattenedListOfModules } from '../utils/get-modules-flat-list';
import { getAbsoluteUri, isTruthy, parseItemQSP, parseToQSPObject } from '../utils/helpers';
import { populateApiSettingsFromQSP } from '../utils/query-utils';
import { SessionStorageContext } from '../utils/session-storage-utils';
/**
 * Returns default values for platform-provided page config values that all pages will have
 *
 * Default values are provided to avoid to avoid having to type check everything later
 */
export const getDefaultPageConfig = () => ({
    className: undefined,
    pageTheme: undefined
});
export const getDefaultAppSettings = () => {
    return {
        config: {},
        routes: {}
    };
};
const getFromReq = (namespaceKey, disallow) => {
    return (req) => {
        return Object.keys(req[namespaceKey]).reduce((memo, key) => {
            if (key && !disallow.has(key.toLowerCase())) {
                memo[key] = req[namespaceKey][key];
            }
            return memo;
            // tslint:disable-next-line:align
        }, {});
    };
};
const apiSettingsMergeCustomizer = (requestApiSetting, renderingApiSetting) => {
    if (typeof requestApiSetting === 'object') {
        return _mergeWith(requestApiSetting, renderingApiSetting, apiSettingsMergeCustomizer);
    }
    return requestApiSetting ? requestApiSetting : renderingApiSetting;
};
const getLocale = (requestContext, renderingContext) => {
    let locale = renderingContext.query ? renderingContext.query.locale : undefined;
    if (process.env.NODE_ENV === 'development' && requestContext.query) {
        locale = requestContext.query.locale || locale;
    }
    return locale;
};
export const getHeaders = getFromReq('headers', new Set([
    'authorization',
    'x-client-ip',
    'x-client-port',
    'sec-fetch-site',
    'sec-fetch-mode',
    'sec-fetch-user',
    'sec-fetch-dest',
    'x-forwarded-for',
    'x-azure-clientip',
    'x-azure-ref',
    'x-forwarded-host',
    'x-forwarded-proto',
    'x-azure-requestchain',
    'x-azure-socketip',
    'x-azure-fdid',
    'x-waws-unencoded-url',
    'client-ip',
    'x-arr-log-id',
    'disguised-host',
    'x-site-deployment-id',
    'was-default-hostname',
    'x-original-url',
    'x-arr-ssl',
    'x-appservice-proto',
    'x-forwarded-tlsversion',
    'appex-activity-id',
    'x-ms-client-principal-name',
    'x-ms-client-principal-id',
    'x-ms-client-principal-idp',
    'x-ms-client-principal',
    'ms-cv'
]));
// tslint:disable-next-line:cyclomatic-complexity
export const parseRequest = (req) => {
    const apiSettingsFromEnv = {
        baseUrl: process.env.MSDyn365Commerce_BASEURL || '',
        channelId: tryParseInt(process.env.MSDyn365Commerce_CHANNELID) || 0,
        catalogId: tryParseInt(process.env.MSDyn365Commerce_CATALOGID) || 0,
        oun: process.env.MSDyn365Commerce_OUN || '',
        baseImageUrl: process.env.MSDyn365Commerce_BASEIMAGEURL || '',
        ratingsReviewsEndpoint: process.env.MSDyn365Commerce_RATINGSREVIEWSENDPOINT || '',
        retailServerProxyVersion: process.env.MSDyn365Commerce_RSVERSION || '',
        rnr: {
            proxyUrl: process.env.MSDyn365Commerce_RATINGSREVIEWS_PROXYURL || '',
            url: process.env.MSDyn365Commerce_RATINGSREVIEWS_URL || '',
            id: process.env.MSDyn365Commerce_RATINGSREVIEWS_ID || ''
        }
    };
    const concatJs = parseToQSPObject(req.query.concatJs);
    const serverProperties = Object.create({
        headers: getHeaders(req)
    });
    return Object.assign(serverProperties, {
        url: {
            requestUrl: new URL(getAbsoluteUri(req)),
            staticCdnUrl: `${req.protocol}://${req.get('host')}/`
        },
        urlTokens: {},
        locale: '',
        market: '',
        textDirection: '',
        sitePath: req.query && req.query.sitePath,
        device: {
            Type: 'pc'
        },
        user: {
            token: '',
            isAuthenticated: false
        },
        app: {},
        query: req.query || undefined,
        apiSettings: apiSettingsFromEnv,
        operationId: '',
        params: {
            mock: req.query && req.query.mock ? req.query.mock.toString() : '',
            isDebug: req.query && isTruthy(req.query.debug),
            isEditor: req.query && isTruthy(req.query.editorial),
            isPreview: req.query && isTruthy(req.query.preview),
            concatJs: concatJs.hasValue
                ? concatJs
                : {
                    hasValue: true,
                    isTruthy: false,
                    value: false
                },
            theme: req.query && req.query.theme
        },
        features: {
        // initialize default empty set of features
        },
        pageData: {},
        _debug: {
            commerceSDKVersion: process.env.MSDyn365Commerce_SDK_VERSION || '',
            commerceSSKVersion: process.env.MSDyn365Commerce_SSK_VERSION || '',
            retailProxyVersion: process.env.MSDyn365Commerce_RSVERSION || ''
        },
        themeOverride: {
            url: req.query.themeOverride || '',
            disableDefault: req.query.disableDefaultSiteTheme || false
        },
        telemetrySettings: {
            eventHubEndPoint: '',
            eventHubAuthToken: '',
            optOutWebActivityTracking: false,
            operationId: '',
            instrumentationKey: '',
            environmentId: 'Development'
        }
    });
};
export const mergeSwtichFromPlatformSettingsWithFeatureSwitch = (requestContext) => {
    // add local flag in platform settings to feature switch if feature switch does not have those.
    // feature switch will take priority of controlling  the behavior.
    const platformSettings = msdyn365Commerce.platformSettings;
    const enableUrlLocalization = requestContext.features.enableUrlLocalization || (platformSettings && platformSettings.enableUrlLocalization) || false;
    const enableUrlEncoding = requestContext.features.enableUrlEncoding || (platformSettings && platformSettings.enableUrlEncoding) || false;
    requestContext.features.enableUrlEncoding = enableUrlEncoding;
    requestContext.features.enableUrlLocalization = enableUrlLocalization;
    return requestContext;
};
// tslint:disable-next-line:cyclomatic-complexity max-func-body-length
export const mapRequestContextWithRenderingContext = (req, requestContext, renderingContext, appContext = getDefaultAppSettings(), pageConfig = getDefaultPageConfig()) => {
    const disableCookieCompliance = (appContext && appContext.platform && appContext.platform.disableCookieCompliance) || false;
    const cartCookieExpiration = (appContext && appContext.config && appContext.config.cartSessionExpiration) || 0;
    const cookieContext = new CookieContext({
        req,
        isConsentRequired: !disableCookieCompliance,
        cartExpirationInDays: cartCookieExpiration,
        sameSiteRequired: renderingContext.sameSiteRequired
    });
    const serverProperties = Object.create({
        headers: requestContext.headers,
        cookies: cookieContext,
        sessionStorage: new SessionStorageContext(cookieContext)
    });
    if (!renderingContext) {
        return Object.assign(serverProperties, requestContext);
    }
    let itemQuery = {};
    const mergedRequestContext = Object.assign(serverProperties, requestContext, renderingContext);
    // Extra merge here required because spread operator only does shallow merge
    mergedRequestContext.apiSettings =
        process.env.NODE_ENV === 'development'
            ? _mergeWith(requestContext.apiSettings, renderingContext.apiSettings, apiSettingsMergeCustomizer)
            : { ...requestContext.apiSettings, ...renderingContext.apiSettings };
    mergedRequestContext.stylePresets = requestContext.siteStylePreset || renderingContext.siteStylePreset;
    if (renderingContext.staticContext && renderingContext.staticContext.staticCdnUrl) {
        mergedRequestContext.url.staticCdnUrl = renderingContext.staticContext.staticCdnUrl;
    }
    if (renderingContext.requestUrl) {
        // TODO - remove http check after fixing all mocks
        mergedRequestContext.url.requestUrl = new URL(renderingContext.requestUrl.startsWith('http') ? renderingContext.requestUrl : `https://${renderingContext.requestUrl}`);
    }
    if (mergedRequestContext.query) {
        itemQuery = parseItemQSP(mergedRequestContext.query.item);
        const concatJs = parseToQSPObject(itemQuery.concatJs);
        mergedRequestContext.params = {
            // default merge so that any switch related QSPs will be merged here and we don't have to explicitly set
            ...requestContext.params,
            mock: mergedRequestContext.query.mock || mergedRequestContext.params.mock,
            isDebug: isTruthy(mergedRequestContext.query.debug) || mergedRequestContext.params.isDebug,
            isEditor: isTruthy(mergedRequestContext.query.editorial) || isTruthy(itemQuery.editorial) || mergedRequestContext.params.isEditor,
            isPreview: isTruthy(mergedRequestContext.query.preview) || mergedRequestContext.params.isPreview,
            concatJs: concatJs.hasValue ? concatJs : mergedRequestContext.params.concatJs,
            theme: itemQuery.theme || mergedRequestContext.query.theme || pageConfig.pageTheme || mergedRequestContext.params.theme
        };
    }
    if (mergedRequestContext.clientContext) {
        mergedRequestContext.device = {
            Type: mergedRequestContext.clientContext.deviceType || mergedRequestContext.device.Type
        };
    }
    if (mergedRequestContext.userContext) {
        mergedRequestContext.user = {
            ...mergedRequestContext.user,
            ...mergedRequestContext.userContext
        };
    }
    mergedRequestContext.app = appContext;
    // tslint:disable-next-line:no-any
    const apiSettings = _pick({ ...itemQuery, ...mergedRequestContext.query }, [
        'oun',
        'baseUrl',
        'baseImageUrl',
        'rsVersion',
        'rnrUrl',
        'channelId',
        'catalogId',
        'rnrId'
    ]);
    populateApiSettingsFromQSP(apiSettings, mergedRequestContext);
    mergedRequestContext.apiSettings.channelId = +mergedRequestContext.apiSettings.channelId;
    // Override the locale with locale query string if given
    mergedRequestContext.locale = getLocale(requestContext, renderingContext) || mergedRequestContext.locale;
    if (renderingContext.themeOverride) {
        mergedRequestContext.themeOverride = { ...requestContext.themeOverride, ...renderingContext.themeOverride };
    }
    // add node specific telemetry settings
    if (process.env.APPINSIGHTS_INSTRUMENTATIONKEY) {
        mergedRequestContext.telemetrySettings.instrumentationKey = process.env.APPINSIGHTS_INSTRUMENTATIONKEY;
    }
    if (process.env.NODE_ENV !== 'development') {
        if (!mergedRequestContext.telemetrySettings.environmentId) {
            mergedRequestContext.telemetrySettings.environmentId = (process.env.Fabric_ApplicationName || '-').slice((process.env.Fabric_ApplicationName || '-').indexOf('-') + 1);
        }
        if (!mergedRequestContext.telemetrySettings.commerceCoreEnvId && process.env.CommerceCore_EnvironmentId) {
            mergedRequestContext.telemetrySettings.commerceCoreEnvId = process.env.CommerceCore_EnvironmentId;
        }
    }
    // Add information about selected connectors
    mergedRequestContext.connectors = addConnectorInformation();
    mergedRequestContext.telemetryData = mergedRequestContext.telemetryData || {};
    // Create a mapping of module id to the experiment it is assocaited with
    const moduleIdToExperimentId = {};
    if (mergedRequestContext.experiments?.activeExperiments?.length > 0) {
        const activeExperiments = mergedRequestContext.experiments.activeExperiments;
        for (let i = 0; i < activeExperiments.length; i++) {
            const currentExperiment = activeExperiments[i];
            if (currentExperiment.moduleId) {
                moduleIdToExperimentId[currentExperiment.moduleId] = currentExperiment.experimentId;
            }
        }
        mergedRequestContext.experiments.moduleIdToExperimentIdMap = moduleIdToExperimentId;
    }
    return mergedRequestContext;
};
const addConnectorInformation = () => {
    const connectors = {};
    if (msdyn365Commerce.experimentationConnector) {
        connectors.expConnector = msdyn365Commerce.experimentationConnector.name;
    }
    return connectors;
};
export const getBodyConfig = (pageResponse) => {
    return pageResponse &&
        pageResponse.pageRoot &&
        pageResponse.pageRoot.modules &&
        pageResponse.pageRoot.modules.body &&
        pageResponse.pageRoot.modules.body[0]
        ? pageResponse.pageRoot.modules.body[0].config
        : {};
};
export const getPageConfig = (pageResponse, telemetry) => {
    try {
        if (!pageResponse || !pageResponse.pageRoot) {
            return getDefaultPageConfig();
        }
        if (!pageResponse.slots || !pageResponse.slots.length) {
            pageResponse.slots = getFlattenedListOfModules(pageResponse);
        }
        // TODO: Figure out the body slot once we have head slots
        const bodySlot = pageResponse.pageRoot.modules && pageResponse.pageRoot.modules.body
            ? pageResponse.pageRoot.modules.body[0]
            : pageResponse.slots[0];
        const bodyConfig = bodySlot ? bodySlot.config : {};
        return Object.assign(getDefaultPageConfig(), bodyConfig);
    }
    catch (e) {
        telemetry.log(LogLevel.Error, EXCEPTION_PAGECONFIG, { exception: e });
        throw new Error(e);
    }
};
//# sourceMappingURL=parse-request.js.map