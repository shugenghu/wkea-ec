/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// External Scripts Declarations
const BootstrapCSSVersion = `4.2.1`;
// Can also be moved to registration if we need to
const ReactScript = {
    src: {
        debug: `static/js/react/react.development.js`,
        production: `static/js/react/react.production.min.js`
    },
    scriptType: 0 /* Script */,
    mapBaseUrl: true,
    required: true
};
const ReactDOMScript = {
    src: {
        debug: `static/js/react-dom/react-dom.development.js`,
        production: `static/js/react-dom/react-dom.production.min.js`
    },
    scriptType: 0 /* Script */,
    mapBaseUrl: true,
    required: true
};
const BootstrapStyle = {
    src: {
        debug: `https://stackpath.bootstrapcdn.com/bootstrap/${BootstrapCSSVersion}/css/bootstrap.css`,
        production: `https://stackpath.bootstrapcdn.com/bootstrap/${BootstrapCSSVersion}/css/bootstrap.min.css`
    },
    scriptType: 1 /* Style */,
    attributes: {
        crossOrigin: 'anonymous'
    }
};
/**
 * Static per app lifetime of the platform external scripts
 */
export const platformExternalScripts = [ReactScript, ReactDOMScript, BootstrapStyle];
/**
 * Private helper for mapping a dictionary of key/value pairs to HTML attributes
 * @param attributes attributes dictionary
 */
const attributeToHtmlAttribute = (attributes = {}) => {
    return Object.keys(attributes)
        .map((key) => {
        return attributes[key] !== undefined ? `${key}="${attributes[key]}"` : key;
    })
        .join(' ');
};
/**
 * Private helper to add preload attribute for required script
 * @param externalScripts external script object
 * @param preloadRequiredScripts add preload data attribute
 */
const addPreLoadAttributeToRequiredScripts = (externalScripts, preloadRequiredScripts = false) => {
    if (externalScripts) {
        for (let i = 0; i < externalScripts.length; i++) {
            const script = externalScripts[i];
            if (preloadRequiredScripts && script.required) {
                if (!script.attributes) {
                    script.attributes = {};
                }
                script.attributes['data-preload'] = 'true';
            }
            else if (script.attributes && script.attributes['data-preload']) {
                delete script.attributes['data-preload'];
            }
        }
    }
};
/**
 * Convert external script object to HTML tag string.
 *
 * @param externalScript external script object
 * @param isDebug Use debug URL for script if available
 */
export const externalStaticToHtmlTag = (baseUrl, externalScript, isDebug = false) => {
    let result = ``;
    const scriptSource = isDebug && externalScript.src.debug ? externalScript.src.debug : externalScript.src.production;
    switch (externalScript.scriptType) {
        case 0 /* Script */:
            result = `<script type="text/javascript" src="${externalScript.mapBaseUrl ? baseUrl : ''}${scriptSource}" ${attributeToHtmlAttribute(externalScript.attributes)} crossOrigin="anonymous"></script>`;
            break;
        default:
            // ExternalScriptType.Style
            result = `<link rel="stylesheet" href="${externalScript.mapBaseUrl ? baseUrl : ''}${scriptSource}" ${attributeToHtmlAttribute(externalScript.attributes)}/>`;
    }
    return result;
};
const _staticsCache = {};
/**
 * Pre-processed strings
 */
export const getPlatformExternalStaticsAsStrings = (baseUrl, preloadRequiredScripts = false) => {
    const cacheKey = `${baseUrl}-preloadrequiredscripts-${preloadRequiredScripts}`;
    if (_staticsCache[cacheKey]) {
        return _staticsCache[cacheKey];
    }
    const externals = {
        scripts: platformExternalScripts.filter((script) => script.scriptType === 0 /* Script */),
        styles: platformExternalScripts.filter((script) => script.scriptType === 1 /* Style */)
    };
    addPreLoadAttributeToRequiredScripts(externals.scripts, preloadRequiredScripts);
    const result = {
        debugScriptHtmlString: externals.scripts.map((kvp) => externalStaticToHtmlTag(baseUrl, kvp, true)).join(''),
        productionScriptHtmlString: externals.scripts.map((kvp) => externalStaticToHtmlTag(baseUrl, kvp, false)).join(''),
        debugStyleHtmlString: externals.styles.map((kvp) => externalStaticToHtmlTag(baseUrl, kvp, true)).join(''),
        productionStyleHtmlString: externals.styles.map((kvp) => externalStaticToHtmlTag(baseUrl, kvp, false)).join('')
    };
    _staticsCache[cacheKey] = result;
    return result;
};
//# sourceMappingURL=platformExternalStatics.js.map