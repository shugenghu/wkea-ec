{"version":3,"file":"statics-helpers.js","sourceRoot":"","sources":["../../../../src/_server/statics-pipeline/statics-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IGeneric } from '@msdyn365-commerce/core-internal';\nimport { IInternalTelemetry } from '@msdyn365-commerce/telemetry-internal';\nimport CombinedStream from 'combined-stream';\nimport * as fs from 'fs';\nimport { uniq } from 'lodash';\nimport * as path from 'path';\nimport { fileExists } from '../../utils/helpers';\nimport { IndexableType, IUsedChunks } from '../chunking';\n\n/**\n * Separator for concat partial IDs\n */\nexport const URL_SEPARATOR = '!';\n/**\n * Prefix for including JS files\n */\nexport const HASHED_STATICS_PREFIX = '_j/';\n/**\n * Max number of URLs to generator\n */\nexport const MAX_JS_ASSETS = Number(process.env.MAX_JS_ASSETS || 1);\n\n/**\n * Map hashed URL to actual asset files\n *\n * @param requestedAssets hashed asset string\n * @param clientStats webpack client stats\n */\nexport const mapAssetUrlToFiles = (requestedAssets: string, clientStats: IGeneric<{}>): string[] => {\n    const result: string[] = [];\n    if (!requestedAssets) {\n        return result;\n    }\n    const requestedIds = uniq(requestedAssets.split(URL_SEPARATOR) || []);\n    const requestedChunks: string[] = [];\n    requestedIds.forEach((chunkId: string) => {\n        const targetIndex = clientStats.chunks.findIndex(\n            (item: { id: IndexableType }) => String(item.id) === String(decodeURIComponent(chunkId))\n        );\n        if (targetIndex !== -1) {\n            Array.prototype.push.apply(requestedChunks, clientStats.chunks[targetIndex].files);\n        }\n    });\n\n    // dedupe again as there may be commmon chunks between top level dependencies\n    return uniq(requestedChunks.filter((pathToFile: string) => pathToFile.endsWith('.js')));\n};\n\n/**\n * Private helper functions below, exported for ease in testing\n */\n\n/**\n * Takes in a single array of N items and splits it into an array with numPart arrays\n *\n * @param array The array of to split\n * @param numParts The max number of arrays to return\n * @private\n */\nexport const splitToMaxNArrays = <TArray>(array: TArray[], numParts: number) => {\n    const res: TArray[][] = [];\n    const m = array.length / numParts + (array.length % numParts);\n    while (array.length) {\n        res.push(array.splice(0, m));\n    }\n\n    return res;\n};\n\n/**\n * Generates a set of magic asset urls\n * @param usedAssetChunks The required assets for the current render pass\n */\nexport const generateAssetUrls = (baseUrl: string, usedAssetChunks: IUsedChunks, numMax: number = MAX_JS_ASSETS): string[] => {\n    if (!usedAssetChunks || (usedAssetChunks.chunkIds && !usedAssetChunks.chunkIds.length)) {\n        return [];\n    }\n\n    return splitToMaxNArrays(usedAssetChunks.chunkIds || [], numMax).map(\n        (array: IndexableType[]) => `${baseUrl}${HASHED_STATICS_PREFIX}${encodeURIComponent(array.join(URL_SEPARATOR))}`\n    );\n};\n\n/**\n * Helper function to map the public folder to the currently requested file\n *\n * @param publicDir Public directory from app root, env.PUBLIC_DIR\n * @param filePath Current statics file path\n * @private\n */\nexport const mapPublicDirToPath = (publicDir: string) => (filePath: string) => path.resolve(path.join(publicDir, filePath));\n\n/**\n *\n * @param filePaths File paths of files we need to stream\n * @param res\n * @returns {CombinedStream} combined stream response\n * @private\n */\n/**\n *  TODO: remove use of any once the following PR gets merged in\n *  https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30295 to properly update type definitions\n */\n// tslint:disable-next-line:no-any\nexport const createFileStreamResponse = async (filePaths: string[], publicDir: string, telemetry: IInternalTelemetry): Promise<any> => {\n    if (!filePaths || !filePaths.length) {\n        return;\n    }\n    const realFilePathsPromises = filePaths.map(mapPublicDirToPath(publicDir)).map((item: string) => fileExists(item, telemetry));\n    const realFilePaths = await Promise.all(realFilePathsPromises).then(\n        (possibleFilePaths: string[]) => (possibleFilePaths && possibleFilePaths.filter(Boolean)) || []\n    );\n    if (!realFilePaths.length) {\n        return;\n    }\n    const jsStream = CombinedStream.create();\n    realFilePaths.forEach((filePath: string) => {\n        jsStream.append(fs.createReadStream(filePath));\n        jsStream.append('\\n;');\n    });\n    return jsStream;\n};\n"]}