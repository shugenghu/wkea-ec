{"version":3,"file":"statics-helpers.test.js","sourceRoot":"","sources":["../../../../../src/_server/statics-pipeline/__tests__/statics-helpers.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';\nimport * as fs from 'fs';\nimport 'jest';\nimport MemoryStream from 'memorystream';\nimport mockfs from 'mock-fs';\nimport * as path from 'path';\nimport { streamToString } from '../../../utils/helpers';\nimport { IUsedChunks, processClientStatsForChunking } from '../../chunking';\nimport {\n    createFileStreamResponse,\n    generateAssetUrls,\n    HASHED_STATICS_PREFIX,\n    mapAssetUrlToFiles,\n    mapPublicDirToPath,\n    splitToMaxNArrays\n} from '../statics-helpers';\n\nconst telemetry = StaticTelemetry;\n\ndescribe('helper functions', () => {\n    it('maps publicDir to filepath correctly', () => {\n        // arrange\n        const publicDir = 'public';\n        const filePaths = ['static/js/file1.js', 'static/js/file2.js'];\n        const expectedResult = [path.resolve('public/static/js/file1.js'), path.resolve('public/static/js/file2.js')];\n        // act\n        const actualResult = filePaths.map(mapPublicDirToPath(publicDir));\n        // assert\n        expect(actualResult).toEqual(expectedResult);\n    });\n    it('can split array of even items correctly', () => {\n        // arrange\n        const input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n        const n = 2;\n        const expected = [\n            [1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10]\n        ];\n\n        const result = splitToMaxNArrays(input, n);\n        expect(result.length).toBe(2);\n        expect(result[0].length).toBe(5);\n        expect(result[1].length).toBe(5);\n        expect(result[0]).toEqual(expected[0]);\n        expect(result[1]).toEqual(expected[1]);\n    });\n\n    it('can split array of odd items correctly', () => {\n        // arrange\n        const input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n        const n = 2;\n        const expected = [\n            [1, 2, 3, 4, 5, 6],\n            [7, 8, 9, 10, 11]\n        ];\n\n        const result = splitToMaxNArrays(input, n);\n        expect(result.length).toBe(2);\n        expect(result[0].length).toBe(6);\n        expect(result[1].length).toBe(5);\n        expect(result[0]).toEqual(expected[0]);\n        expect(result[1]).toEqual(expected[1]);\n    });\n\n    it('can split into more than 2 groups correctly', () => {\n        // arrange\n        const input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n        const n = 3;\n        const expected = [\n            [1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10]\n        ];\n\n        const result = splitToMaxNArrays(input, n);\n        expect(result.length).toBe(3);\n        expect(result[0].length).toBe(4);\n        expect(result[1].length).toBe(4);\n        expect(result[2].length).toBe(2);\n        expect(result[0]).toEqual(expected[0]);\n        expect(result[1]).toEqual(expected[1]);\n        expect(result[2]).toEqual(expected[2]);\n    });\n});\ndescribe('url', () => {\n    let usedAssetChunks: IUsedChunks;\n    let clientStats: {};\n    beforeEach(async (done: Function) => {\n        clientStats = JSON.parse(fs.readFileSync(path.join(__dirname, '__mocks__', 'stats-web-a.json')).toString());\n        usedAssetChunks = await processClientStatsForChunking(\n            '',\n            [\n                'partner/modules-search-data-binders-search-data-binder',\n                'partner/modules-product-placement-data-binders-search-filter-product-placement-data-binder',\n                'partner/modules-search-reducers-reddit-search-reducer',\n                'partner/modules-search-search',\n                'partner/modules-product-placement-product-placement'\n            ],\n            clientStats,\n            telemetry,\n            // tslint:disable-next-line\n            <any>{}\n        );\n        done();\n    });\n    describe('generation', () => {\n        it('handles generating url with blank used assets', () => {\n            const generatedUrls = generateAssetUrls('', { isChunkingEnabled: true, chunkIds: [] }, 1);\n            expect(generatedUrls).toEqual([]);\n        });\n\n        it('can properly generate a valid single asset url (localhost)', async (done: Function) => {\n            // arrange\n            // IDs map to IDs in json file -- keep commented block to understand how snapshot is generated\n            // const expectedUrl = `${HASHED_STATICS_PREFIX}75!70!77!79!72!89!0!90`;\n            // act\n            const generatedUrls = generateAssetUrls('', usedAssetChunks, 1);\n            // assert\n            expect(generatedUrls.length).toBe(1);\n            expect(generatedUrls[0]).toMatchSnapshot('ExpectedUrl');\n            done();\n        });\n\n        it('can properly generate a valid single asset url (cdn)', async (done: Function) => {\n            // arrange\n            const CdnUrl = '//testsite-int.onerf.microsoft.com/testsite/_scnr/';\n            // IDs map to IDs in json file -- keep commented block to understand how snapshot is genereated\n            // const expectedUrl = `${CdnUrl}${HASHED_STATICS_PREFIX}75!70!77!79!72!89!0!90`;\n            // act\n            const generatedUrls = generateAssetUrls(CdnUrl, usedAssetChunks, 1);\n            // assert\n            expect(generatedUrls.length).toBe(1);\n            expect(generatedUrls[0]).toMatchSnapshot('ExpectedUrl');\n            done();\n        });\n    });\n    describe('parsing', () => {\n        it('can parse a valid url back to assets properly', () => {\n            // arrange\n            const urlPart = '75!70';\n            const expectedResult = [\n                'static/js/partner/modules-search-data-binders-search-data-binder.chunk.js',\n                'static/js/partner/modules-product-placement-data-binders-search-filter-product-placement-data-binder.chunk.js'\n            ];\n            // act\n            const result = mapAssetUrlToFiles(urlPart, clientStats);\n            // assert\n            expect(result).toEqual(expectedResult);\n        });\n\n        it('can successfully dedupe requested assets', () => {\n            // arrange\n            const urlPart = '75!70!75!75';\n            const expectedResult = [\n                'static/js/partner/modules-search-data-binders-search-data-binder.chunk.js',\n                'static/js/partner/modules-product-placement-data-binders-search-filter-product-placement-data-binder.chunk.js'\n            ];\n            // act\n            const result = mapAssetUrlToFiles(urlPart, clientStats);\n            // assert\n            expect(result).toEqual(expectedResult);\n        });\n\n        it('handles empty requests gracefully', () => {\n            // arrange\n            const urlPart = '';\n            const expectedResult = [];\n            // act\n            const result = mapAssetUrlToFiles(urlPart, clientStats);\n            // assert\n            expect(result).toEqual(expectedResult);\n        });\n\n        it('handles mix of valid & invalid resource requests correctly', () => {\n            // arrange\n            const urlPart = '999999!75!70!1234567890';\n            const expectedResult = [\n                'static/js/partner/modules-search-data-binders-search-data-binder.chunk.js',\n                'static/js/partner/modules-product-placement-data-binders-search-filter-product-placement-data-binder.chunk.js'\n            ];\n            // act\n            const result = mapAssetUrlToFiles(urlPart, clientStats);\n            // assert\n            expect(result).toEqual(expectedResult);\n        });\n    });\n});\n\ndescribe('file streaming', () => {\n    beforeAll(() => {\n        const dirName = mapPublicDirToPath('public')('static/js');\n        mockfs({\n            [dirName]: {\n                'file1.js': 'file 1 contents',\n                'file2.js': 'file 2 contents'\n            }\n        });\n    });\n\n    afterAll(() => {\n        mockfs.restore();\n    });\n\n    it('successfully exits on empty set of files', async (done: Function) => {\n        // arrange\n        const publicDir = 'public';\n        const files = [];\n        // act\n        // @ts-ignore\n        const response = await createFileStreamResponse(files, publicDir, telemetry);\n        // assert\n        expect(response).toBe(undefined);\n        done();\n    });\n\n    it('successfully exits on non-existing set of files', async (done: Function) => {\n        // arrange\n        const publicDir = 'public';\n        const files = ['static/js/file3.js'];\n        // act\n        // @ts-ignore\n        const response = await createFileStreamResponse(files, publicDir, telemetry);\n        // assert\n        expect(response).toBe(undefined);\n        done();\n    });\n\n    it('successfully parses existing & non-existing files', async (done: Function) => {\n        jest.setTimeout(10000);\n        // arrange\n        const publicDir = 'public';\n        const files = ['static/js/file2.js', 'static/js/file3.js'];\n        // act\n        // @ts-ignore\n        const response = await createFileStreamResponse(files, publicDir, telemetry);\n        // assert\n        expect(response).not.toEqual(undefined);\n        const memstr = new MemoryStream();\n        // act\n        const streamPromise = streamToString(memstr);\n        response.pipe(memstr);\n        return streamPromise.then((fileStreamStrings: string) => {\n            // assert\n            expect(fileStreamStrings).toEqual('file 2 contents\\n;');\n            done();\n        });\n    });\n\n    it('successfully concatenates files correctly', async (done: Function) => {\n        jest.setTimeout(10000);\n        // arrange\n        const publicDir = 'public';\n        const files = ['static/js/file1.js', 'static/js/file2.js'];\n        // act\n        // @ts-ignore\n        const response = await createFileStreamResponse(files, publicDir, telemetry);\n        // assert\n        expect(response).not.toEqual(undefined);\n        // @ts-ignore\n        const memstr = new MemoryStream();\n        // act\n        const streamPromise = streamToString(memstr);\n        response.pipe(memstr);\n        return streamPromise.then((fileStreamStrings: string) => {\n            // assert\n            expect(fileStreamStrings).toEqual('file 1 contents\\n;file 2 contents\\n;');\n            done();\n        });\n    });\n});\n"]}