/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
'use strict';
import * as fs from 'fs';
import * as path from 'path';
// Make sure any symlinks in the project folder are resolved:
// https://github.com/facebookincubator/create-react-app/issues/637
const appDirectory = fs.realpathSync(process.cwd());
const resolveFromBuildFolder = (relativePath) => path.resolve(appDirectory, 'build', relativePath);
const resolveFromNodeModules = (relativePath) => path.resolve(appDirectory, 'node_modules', relativePath);
const _cache = new Map();
export const getSharedComponentCssPath = (isDebug) => {
    const key = `${isDebug}`;
    if (_cache.has(key)) {
        return _cache.get(key);
    }
    const rootPath = path.resolve(appDirectory, 'build', 'public', 'static', 'shared-components').replace(/\\/gi, '/');
    const appBuildPublicStatic = path.resolve(appDirectory, 'build', 'public', 'static').replace(/\\/gi, '/');
    // @TODO remove fallback logic
    const sharedComponentsDev = path.relative(appBuildPublicStatic, path.join(rootPath, 'main.css')).replace(/\\/gi, '/');
    const sharedComponentsDevVnext = path.relative(appBuildPublicStatic, path.join(rootPath, 'shared-components.css')).replace(/\\/gi, '/');
    const sharedComponentsProdVnext = path
        .relative(appBuildPublicStatic, path.join(rootPath, 'shared-components.min.css'))
        .replace(/\\/gi, '/');
    // @TODO this is part of the hack until shared components ships two bundles excluding bootstrap
    if (fs.existsSync(path.resolve(appBuildPublicStatic, sharedComponentsDev))) {
        _cache.set(key, sharedComponentsDev);
    }
    else {
        // this code should take over...
        if (isDebug && fs.existsSync(path.resolve(appBuildPublicStatic, sharedComponentsDevVnext))) {
            _cache.set(key, sharedComponentsDevVnext);
        }
        else if (!isDebug && fs.existsSync(path.resolve(appBuildPublicStatic, sharedComponentsProdVnext))) {
            _cache.set(key, sharedComponentsProdVnext);
        }
        else {
            // falsey string, won't create output
            _cache.set(key, '');
        }
    }
    return _cache.get(key);
};
export default {
    KEYSTONE_PAGE_MOCKS_DIR: resolveFromBuildFolder('pageMocks'),
    KEYSTONE_MODULE_MOCKS_DIR: resolveFromBuildFolder('moduleMocks'),
    KEYSTONE_NODE_MODULES_DIR: resolveFromNodeModules('@msdyn365-commerce-modules'),
    KEYSTONE_DEFINITIONS_DIR: resolveFromBuildFolder('definitions'),
    KEYSTONE_THEMES_DIR: path.resolve(appDirectory, 'src', 'themes'),
    KEYSTONE_STATIC_DIR: resolveFromBuildFolder('public/static'),
    KEYSTONE_APP_DEFINITION_FILEPATH: path.resolve(appDirectory, 'lib', 'module-definition-api.json'),
    KEYSTONE_APP_DAPI_FILEPATH: path.resolve(appDirectory, 'lib', 'module-definition-dapi.json'),
    KEYSTONE_APP_THEMES_DAPI_FILEPATH: path.resolve(appDirectory, 'lib', 'themes-definition-dapi.json'),
    KEYSTONE_APP_RESOURCES_DAPI_FILEPATH: path.resolve(appDirectory, 'lib', 'resources-definition-dapi.json'),
    KEYSTONE_APP_SETTINGS_DAPI_FILEPATH: path.resolve(appDirectory, 'lib', 'themesettings-dapi.json'),
    KEYSTONE_APP_PACKAGE_VERSION: resolveFromBuildFolder('packageVersions.json'),
    KEYSTONE_APP_YARN_LOCK: path.resolve(appDirectory, 'yarn.lock'),
    KEYSTONE_APP_SETTINGS_DIR: resolveFromBuildFolder('settings'),
    KEYSTONE_SECRETS_DIR: resolveFromBuildFolder('secrets')
};
//# sourceMappingURL=paths.js.map