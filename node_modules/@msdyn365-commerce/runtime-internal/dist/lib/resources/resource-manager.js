/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { msdyn365Commerce } from '@msdyn365-commerce/core-internal';
import { StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';
import { safeGetAllFilesPath, safeReadJson } from '@msdyn365-commerce/utilities-internal';
import { merge as _merge } from 'lodash';
import path from 'path';
import { getModuleDefinition, getThemeModules } from '../_server/Definition/moduleDefinition';
import keystonePaths from '../paths';
import { getParentModuleName } from '../utils/helpers';
import { hoistedAuthoringResourcesPathPattern, hoistedModulesResourcesPathPattern, installedAuthoringResourcesPathPattern, installedModulesResourcesPathPattern, localAuthoringResourcesPathPattern, localModulesResourcesPathPattern } from './constants';
const GLOBAL_LOCALE = 'global';
const RESOURCE_DETAILS_REGEX = /\/node_modules\/(?<namespace>.*)\/(?<packageName>.*)\/dist\/lib\/.*/;
/**
 * Resource manager implementation
 */
export class ResourceManager {
    constructor() {
        this.authoringResourcesMap = {};
        this.moduleResourcesMap = {};
        this.moduleResourceKeys = {};
        this.moduleNamespaceMap = {};
    }
    /**
     * @function        {init}          - Method to initialize and load all the resource strings
     */
    async init(platformSettings) {
        if (platformSettings && !!!platformSettings.disableDAPIOptimizations) {
            const resourcesDapi = await safeReadJson(keystonePaths.KEYSTONE_APP_RESOURCES_DAPI_FILEPATH) || {};
            this.authoringResourcesMap = resourcesDapi.authoringResourcesMap || {};
            this.moduleResourcesMap = resourcesDapi.moduleResourcesMap || {};
            this.moduleResourceKeys = resourcesDapi.moduleResourceKeys || {};
            this.moduleNamespaceMap = resourcesDapi.moduleNamespaceMap || {};
            return;
        }
        await this._readAuthoringResourceFiles();
        const localAuthoringResourceFiles = await safeGetAllFilesPath(localAuthoringResourcesPathPattern);
        if (localAuthoringResourceFiles.length > 0) {
            await Promise.all(localAuthoringResourceFiles.map(async (resourceFile) => {
                const locale = path.basename(resourceFile, '.json').toLocaleLowerCase();
                const content = await safeReadJson(resourceFile);
                if (!content || !content.modules) {
                    return;
                }
                this.authoringResourcesMap[locale] = this.authoringResourcesMap[locale] || {
                    settings: {},
                    modules: {},
                    themes: {}
                };
                content.modules &&
                    Object.keys(content.modules).forEach(moduleName => {
                        this.authoringResourcesMap[locale].modules[moduleName] = this._getMergedAuthoringResources(this.authoringResourcesMap[locale].modules[moduleName], content.modules[moduleName]);
                        if (content.settings) {
                            this.authoringResourcesMap[locale].settings = content.settings;
                        }
                        this.authoringResourcesMap[locale].themes = {};
                    });
                if (content.themes) {
                    Object.keys(content.themes).forEach(themeName => {
                        this.authoringResourcesMap[locale].themes[themeName] = _merge(this.authoringResourcesMap[locale].themes[themeName], content.themes[themeName]);
                    });
                }
            }));
        }
        await this._readModuleResourceFiles();
        const localModulesResourceFiles = await safeGetAllFilesPath(localModulesResourcesPathPattern);
        if (localModulesResourceFiles.length > 0) {
            await Promise.all(localModulesResourceFiles.map(async (resourceFile) => {
                const locale = path.basename(resourceFile, '.json').toLocaleLowerCase();
                const content = await safeReadJson(resourceFile);
                if (!content) {
                    return;
                }
                this.moduleResourcesMap[locale] = this.moduleResourcesMap[locale] || {};
                const resourceKeys = Object.keys(content);
                resourceKeys.forEach(resourceKey => {
                    if (content[resourceKey].value) {
                        this.moduleResourcesMap[locale][resourceKey] = content[resourceKey].value;
                    }
                });
            }));
        }
        await this._getAllModuleDefinitions();
    }
    /**
     * @function    {getModuleResources}    - Method to fetch resource strings of a module for given locale
     * @param       {moduleName}            - name of the module
     * @param       {themeName}             - name of the theme
     * @param       {locale}                - locale for which resource strings need to be fetched
     */
    getModuleResources(moduleName, themeName, locale) {
        if (!this.moduleResourceKeys ||
            !this.moduleResourceKeys[moduleName] ||
            !this.moduleNamespaceMap ||
            !this.moduleNamespaceMap[moduleName]) {
            return {};
        }
        const parentFallbackLocale = locale.length > 0 ? locale.split('-', 1)[0].toLocaleLowerCase() : '';
        locale = locale ? locale.toLocaleLowerCase() : GLOBAL_LOCALE;
        const resourcesObj = {};
        const moduleNamespace = this.moduleNamespaceMap[moduleName];
        const resourceKeys = Object.keys(this.moduleResourceKeys[moduleName]);
        const themeNamespace = this.moduleNamespaceMap[themeName];
        const parentThemeName = getParentModuleName(themeName);
        const parentThemeNamespace = this.moduleNamespaceMap[parentThemeName];
        const fillModuleResources = (resourceKey, localeStr) => {
            if (this.moduleResourcesMap[localeStr]) {
                // Resource string override preference in order: 1) Theme specific resource string override, 2) All module resource string override
                // Theme specific resource string override
                if (themeName && themeNamespace && this.moduleResourcesMap[localeStr][`${themeNamespace}.${themeName}.${resourceKey}`]) {
                    resourcesObj[resourceKey] = this.moduleResourcesMap[localeStr][`${themeNamespace}.${themeName}.${resourceKey}`];
                }
                else if (parentThemeName !== '' &&
                    parentThemeNamespace &&
                    this.moduleResourcesMap[localeStr][`${parentThemeNamespace}.${parentThemeName}.${resourceKey}`]) {
                    // Fallback to parent theme resource string
                    resourcesObj[resourceKey] = this.moduleResourcesMap[localeStr][`${parentThemeNamespace}.${parentThemeName}.${resourceKey}`];
                }
                else if (moduleNamespace === '__local__' && this.moduleResourcesMap[localeStr][resourceKey]) {
                    resourcesObj[resourceKey] = this.moduleResourcesMap[localeStr][resourceKey];
                }
                else if (this.moduleResourcesMap[localeStr][`${moduleNamespace}.${resourceKey}`]) {
                    resourcesObj[resourceKey] = this.moduleResourcesMap[localeStr][`${moduleNamespace}.${resourceKey}`];
                }
            }
        };
        resourceKeys.forEach(resourceKey => {
            fillModuleResources(resourceKey, locale);
            // Fallback to parent locale resource, eg: if `es-ar` then parent fallback is `es`
            if (!resourcesObj[resourceKey]) {
                fillModuleResources(resourceKey, parentFallbackLocale);
            }
            // Fallback to global locale resource
            if (!resourcesObj[resourceKey]) {
                fillModuleResources(resourceKey, GLOBAL_LOCALE);
            }
            // Fall back to defaults in module definition
            if (!resourcesObj[resourceKey]) {
                resourcesObj[resourceKey] = this.moduleResourceKeys[moduleName][resourceKey];
            }
        });
        return resourcesObj;
    }
    getAuthoringResources() {
        return this.authoringResourcesMap;
    }
    async _readAuthoringResourceFiles() {
        let installedAuthoringResourceFiles = await safeGetAllFilesPath(installedAuthoringResourcesPathPattern);
        installedAuthoringResourceFiles = installedAuthoringResourceFiles.concat(await safeGetAllFilesPath(hoistedAuthoringResourcesPathPattern));
        await Promise.all(installedAuthoringResourceFiles.map(async (resourceFile) => {
            const locale = path.basename(resourceFile, '.json').toLocaleLowerCase();
            const content = await safeReadJson(resourceFile);
            if (content) {
                this.authoringResourcesMap[locale] = content;
            }
        }));
    }
    async _readModuleResourceFiles() {
        let installedModulesResourceFiles = await safeGetAllFilesPath(installedModulesResourcesPathPattern);
        installedModulesResourceFiles = installedModulesResourceFiles.concat(await safeGetAllFilesPath(hoistedModulesResourcesPathPattern));
        await Promise.all(installedModulesResourceFiles.map(async (resourceFile) => {
            const matchResult = resourceFile.match(RESOURCE_DETAILS_REGEX);
            let moduleNamespace = '__installed__';
            if (matchResult !== null && matchResult.groups && matchResult.groups.namespace) {
                moduleNamespace = matchResult.groups.namespace;
            }
            const locale = path.basename(resourceFile, '.json').toLocaleLowerCase();
            const content = await safeReadJson(resourceFile);
            if (!content) {
                return;
            }
            this.moduleResourcesMap[locale] = this.moduleResourcesMap[locale] || {};
            Object.keys(content).forEach(resourceKey => {
                if (content[resourceKey].value) {
                    this.moduleResourcesMap[locale][`${moduleNamespace}.${resourceKey}`] = content[resourceKey].value;
                }
            });
        }));
    }
    async _getAllModuleDefinitions() {
        // tslint:disable-next-line:no-any
        const modules = msdyn365Commerce.getAllModuleBinder();
        const themeModules = await getThemeModules(null, StaticTelemetry);
        const defExtResources = {};
        // Get resources object from definition extensions of theme modules
        if (themeModules && Array.isArray(themeModules)) {
            (themeModules || []).map(themeModule => {
                Object.keys(themeModule.definitionExtensions || []).map(moduleName => {
                    if (defExtResources[moduleName]) {
                        defExtResources[moduleName] = {
                            ...defExtResources[moduleName],
                            ...(themeModule.definitionExtensions[moduleName].resources || {})
                        };
                    }
                    else {
                        defExtResources[moduleName] = themeModule.definitionExtensions[moduleName].resources || {};
                    }
                });
            });
        }
        return Promise.all(modules.map(async (moduleBinder) => {
            const definition = await getModuleDefinition(moduleBinder, StaticTelemetry);
            this.moduleNamespaceMap[moduleBinder.name] = moduleBinder.moduleNamespace;
            let moduleResources = definition.resources || {};
            // Merge definition extension resources
            if (defExtResources[moduleBinder.name]) {
                moduleResources = {
                    ...moduleResources,
                    ...defExtResources[moduleBinder.name]
                };
            }
            const resourcesObject = {};
            Object.keys(moduleResources).map(key => {
                resourcesObject[key] = moduleResources[key].value;
            });
            this.moduleResourceKeys[definition.name] = resourcesObject;
            return definition;
        }));
    }
    _getMergedAuthoringResources(moduleAuthoringResources, overrideModuleAuthoringResources) {
        moduleAuthoringResources = moduleAuthoringResources || {};
        overrideModuleAuthoringResources = overrideModuleAuthoringResources || {};
        const mergedModuleAuthoringResources = {
            ...moduleAuthoringResources,
            ...overrideModuleAuthoringResources
        };
        // Do explicit merge of each properties as '...' does not do recursive merge
        const moduleAuthoringResourceProperties = Object.keys(moduleAuthoringResources);
        if (moduleAuthoringResourceProperties) {
            moduleAuthoringResourceProperties.forEach(property => {
                if (overrideModuleAuthoringResources[property]) {
                    mergedModuleAuthoringResources[property] = {
                        ...moduleAuthoringResources[property],
                        ...(overrideModuleAuthoringResources[property] || {})
                    };
                }
            });
        }
        return mergedModuleAuthoringResources;
    }
}
//# sourceMappingURL=resource-manager.js.map