import { msdyn365Commerce } from '@msdyn365-commerce/core-internal';
import { asSystemMetadata, EXCEPTION_NOMODULEBINDER, LogLevel } from '@msdyn365-commerce/telemetry-internal';
import React from 'react';
import { getModuleName } from '../utils/helpers';
const getModuleBinder = (typeName) => msdyn365Commerce.moduleBinder(typeName);
const getBinder = (lookupKey) => {
    const view = msdyn365Commerce.componentBinder(lookupKey);
    if (view) {
        return { key: lookupKey, view };
    }
    return undefined;
};
/* component will be read in following hierarchy
        1) __local__/__local__|views/theme1/BuyBox/Components/PriceComponent
        2) __local__/__local__|views/theme1/Components/PriceComponent
        3) @msdyn-365-commerce-modules/theme1/views/BuyBox/Components/PriceComponent
        4) @msdyn-365-commerce-modules/theme1/views/Components/PriceComponent
    */
const lookupFunc = (moduleBinder, themeBinder, name) => {
    name = name.toLowerCase();
    return ((themeBinder &&
        (getBinder(`__local__|__local__|themes|${themeBinder.name}|views|${moduleBinder.name}|components|${name}`) ||
            getBinder(`__local__|__local__|themes|${themeBinder.name}|views|components|${name}`) ||
            getBinder(`${themeBinder.moduleNamespace}|${themeBinder.packageName}|modules|${themeBinder.name}|views|components|${moduleBinder.name}|${name}`) ||
            getBinder(`${themeBinder.moduleNamespace}|${themeBinder.packageName}|modules|${themeBinder.name}|views|components|${name}`))) ||
        getBinder(`${moduleBinder.moduleNamespace}|${moduleBinder.packageName}|views|${moduleBinder.name}|components|${name}`));
};
/**
 * Component will be read from the module
 *  @msdyn-365-commerce-modules/BuyBox/views/BuyBox/Components/PriceComponent
 */
const defaultComponentLookupFunc = (moduleBinder, name) => {
    const parentModuleBinder = getModuleBinder(getModuleName(moduleBinder.parentDefinitionPath));
    return (getBinder(`${moduleBinder.moduleNamespace}|${moduleBinder.packageName}|views|${moduleBinder.name}|components|${name}`) ||
        (parentModuleBinder &&
            getBinder(`${parentModuleBinder.moduleNamespace}|${parentModuleBinder.packageName}|views|${parentModuleBinder.name}|components|${name}`)));
};
const getComponent = (name, moduleBinder, themeBinder, context) => {
    if (!moduleBinder) {
        return { view: null };
    }
    // tslint:disable-next-line:no-any
    const cache = msdyn365Commerce.getAppCache(context.actionContext.requestContext);
    const cacheKey = {
        key: `${name}|${moduleBinder.name}|${themeBinder ? themeBinder.name : 'no-theme'}`,
        typeName: '__ComponentCacheKey__'
    };
    const lookupKey = cache.getValue(cacheKey);
    if (lookupKey) {
        context.telemetry.log(LogLevel.Debug, `lookup key for component [${cacheKey.key}] found at - [${lookupKey}]`);
        // @ts-ignore
        !msdyn365Commerce.isBrowser && context.actionContext.requestCache.put(cacheKey, { item: lookupKey });
        return getBinder(lookupKey) || { view: null };
    }
    let component = lookupFunc(moduleBinder, themeBinder, name);
    // If no component found in the theme, search in parent theme (in case of inherited theme)
    if (!component && themeBinder) {
        const parentThemeName = getModuleName(themeBinder.parentDefinitionPath);
        const parentThemeBinder = getModuleBinder(parentThemeName);
        component = lookupFunc(moduleBinder, parentThemeBinder, name);
    }
    // If no component file found, fall back to module's default component
    if (!component) {
        component = defaultComponentLookupFunc(moduleBinder, name);
    }
    if (component) {
        context.telemetry.log(LogLevel.Debug, `lookup key for component [${cacheKey.key}] found at - [${component.key}]`);
        cache.put(cacheKey, { item: component.key });
        // @ts-ignore
        context.actionContext.requestCache.put(cacheKey, { item: component.key });
        return component;
    }
    return { view: null };
};
export const createComponent = (name, componentObj) => (props) => {
    props.context.telemetry.log(LogLevel.Debug, `rendering component-'${name}' within module-'${props.id}-${props.typeName}'`);
    const moduleBinder = getModuleBinder(props.typeName);
    if (!moduleBinder) {
        props.context.telemetry.log(LogLevel.Error, EXCEPTION_NOMODULEBINDER, { values: [asSystemMetadata(props.typeName)] });
        return null;
    }
    const themeBinder = getModuleBinder(props.context.actionContext.requestContext.params.theme);
    const { view } = getComponent(name, moduleBinder, themeBinder, props.context);
    const mergedComponent = view ? { ...componentObj, ...view } : componentObj;
    const Component = mergedComponent.component;
    return React.createElement(Component, Object.assign({}, props));
};
//# sourceMappingURL=render-component.js.map