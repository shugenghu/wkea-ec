{"version":3,"file":"process-page-response.js","sourceRoot":"","sources":["../../../src/hydrators/process-page-response.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { IActionContext, IModuleContract } from '@msdyn365-commerce/core-internal';\nimport { PROCESS_TYPE } from '../consts';\nimport { IProductListMetaData, IServerLink } from './hydrator-action-inputs';\nimport { hydrateLink } from './link-hydrator';\nimport { hydrateProductList } from './product-list-hydrator';\n\nconst TYPE_KEY = 'type';\nconst LIST_TYPE_KEY = 'listType';\n\n/**\n * Recusrively traverses a module's config properties to find link/list types to transform\n *\n * @param obj The current object\n * @param context The current action context\n */\nconst searchForComplexType = (obj: unknown, context: IActionContext): Promise<void>[] => {\n    const promisesArray: Promise<void>[] = [];\n    if (!obj) {\n        return promisesArray;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            promisesArray.push(...searchForComplexType(obj[i], context));\n        }\n    } else if (typeof obj === 'object' && obj) {\n        const children = Object.keys(obj);\n\n        // Link scenario ('type' is defined)\n        if (obj[TYPE_KEY]) {\n            promisesArray.push(hydrateLink(<IServerLink>obj, context));\n            // ProductList scenario ('list_type') is defined\n        } else if (obj[LIST_TYPE_KEY]) {\n            promisesArray.push(hydrateProductList(<IProductListMetaData>obj, context));\n        } else if (children.length > 0) {\n            for (let i = 0; i < children.length; i++) {\n                promisesArray.push(...searchForComplexType(obj[children[i]], context));\n            }\n        }\n    }\n\n    return promisesArray;\n};\n\n/**\n * Entry point, processes a page response and looks for link and list types\n * to transform\n *\n * @param pageResponse The inital page response\n * @param context The current action context\n */\nexport const processComplexDataTypes = async (\n    lazyloadAllDataActions: boolean,\n    processType: string,\n    pageSlots: IModuleContract[],\n    context: IActionContext\n) => {\n    const promisesArray = processComplexDataTypesAsync(lazyloadAllDataActions, processType, pageSlots, context);\n    if (promisesArray) {\n        await Promise.all(promisesArray);\n    }\n};\n\n// tslint:disable-next-line: cyclomatic-complexity\nexport const processComplexDataTypesAsync = (\n    lazyLoadAllDataActions: boolean,\n    processType: string,\n    pageSlots: IModuleContract[],\n    context: IActionContext\n) => {\n    if (pageSlots && pageSlots.length) {\n        const promisesArray: Promise<void>[] = [];\n        let lazyLoadAllModuleQueryString; // Query string switch to lazyLoad all modules\n        const requestContext = context.requestContext;\n        const requestContextFeatures = requestContext.features;\n        const clientRenderModules = 'clientRender_modules';\n        const clientRenderAllModuleQueryString = 'client_render_all_modules';\n\n        // Feature switch for lazyLoading render and data action currenlty for product collection module\n        let lazyLoadModuleFeature = requestContextFeatures[clientRenderModules];\n\n        // Query param to lazyLoad all modules\n        if (requestContext.query && requestContext.query.clientRenderAllModuleQueryString) {\n            lazyLoadAllModuleQueryString = requestContext.query[clientRenderAllModuleQueryString];\n        }\n\n        // If request is coming from the editor then, turn off all lazyloading feature\n        if (requestContext.params && requestContext.params.isEditor && requestContext.params.isEditor === true) {\n            lazyLoadModuleFeature = false;\n            lazyLoadAllModuleQueryString = 'false';\n            lazyLoadAllDataActions = false;\n        }\n\n        for (let i = 0; i < pageSlots.length; i++) {\n            const currModule = pageSlots[i];\n            const currModuleConfig = currModule.config;\n            let clientRenderConfigSwitch; // Module config switch for lazyLoading render and data action for product collection module\n\n            if (typeof currModuleConfig === 'object' && currModuleConfig) {\n                lazyLoadAllModuleQueryString === 'true' ? (currModuleConfig[`clientRender`] = true) : clientRenderConfigSwitch;\n                if (currModuleConfig.hasOwnProperty('clientRender')) {\n                    // When the lazyLoading feature switch is false, turn the lazyloading config switch to false\n                    if (lazyLoadModuleFeature === false) {\n                        currModuleConfig[`clientRender`] = false;\n                    }\n                    clientRenderConfigSwitch = currModuleConfig[`clientRender`];\n                }\n            }\n\n            if ((lazyLoadAllDataActions || clientRenderConfigSwitch) && processType === PROCESS_TYPE.client) {\n                // When lazyLoad_all feature switch is true or lazyload Module config switch is true and processComplexDataType call is from client, do hydration\n                promisesArray.push(...searchForComplexType(currModuleConfig, context));\n            } else if (!lazyLoadAllDataActions && !clientRenderConfigSwitch && processType === PROCESS_TYPE.server) {\n                // When lazyLoad_all feature switch is OFF, lazyload Module config switch is OFF and processComplexDataType call is from server, do hydration\n                promisesArray.push(...searchForComplexType(currModuleConfig, context));\n            }\n        }\n        // tslint:disable-next-line: no-floating-promises\n        context.runAllActionsInQueue();\n        return promisesArray;\n    }\n};\n"]}