{"version":3,"file":"product-list-hydrator.js","sourceRoot":"","sources":["../../../src/hydrators/product-list-hydrator.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAKH,OAAO,EAAE,6BAA6B,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAC;AACjH,OAAO,EAAwB,gBAAgB,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AACnG,OAAO,EAAE,+BAA+B,EAAE,MAAM,oDAAoD,CAAC;AACrG,OAAO,EAAE,qCAAqC,EAAE,MAAM,0DAA0D,CAAC;AACjH,OAAO,EAAE,qCAAqC,EAAE,MAAM,2DAA2D,CAAC;AAClH,OAAO,EAAE,6BAA6B,EAAE,MAAM,kDAAkD,CAAC;AAEjG;;;GAGG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,YAAkC,EAAE,OAAuB,EAAiB,EAAE;IACnH,IAAI,MAA4D,CAAC;IACjE,QAAQ,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;QAC5C,KAAK,eAAe,CAAC,eAAe;YAChC,MAAM,GAAG,6BAA6B,CAAC;YACvC,MAAM;QACV,KAAK,eAAe,CAAC,iBAAiB;YAClC,MAAM,GAAG,+BAA+B,CAAC;YACzC,MAAM;QACV,KAAK,eAAe,CAAC,eAAe;YAChC,MAAM,GAAG,qCAAqC,CAAC;YAC/C,MAAM;QACV,KAAK,eAAe,CAAC,SAAS,CAAC;QAC/B,KAAK,eAAe,CAAC,IAAI,CAAC;QAC1B,KAAK,eAAe,CAAC,cAAc;YAC/B,MAAM,GAAG,qCAAqC,CAAC;YAC/C,MAAM;QACV;YACI,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,yBAAyB,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;YACjD,YAAc,CAAC,QAAQ,GAAG,EAAE,CAAC;YAC7B,YAAc,CAAC,YAAY,GAAG,EAAE,KAAK,EAAE,yBAAyB,EAAE,CAAC;KACnG;IAED,IAAI,MAAM,KAAK,SAAS,EAAE;QACtB,OAAO,MAAM,CAAC,IAAI,gBAAgB,CAAC,YAAY,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC;aAC9D,IAAI,CAAC,WAAW,CAAC,EAAE;YACS,YAAc,CAAC,QAAQ,GAAG,WAAW,CAAC;QACnE,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE;YACX,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACvD,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACV,YAAc,CAAC,QAAQ,GAAG,EAAE,CAAC;YAC7B,YAAc,CAAC,YAAY,GAAG,EAAE,KAAK,EAAE,6BAA6B,EAAE,CAAC;QACpG,CAAC,CAAC,CAAC;KACV;IAED,OAAO;AACX,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { CacheType, IActionContext, IActionInput, ICommerceApiSettings, IObservableAction } from '@msdyn365-commerce/core-internal';\nimport { IProductList } from '@msdyn365-commerce/retail-proxy/dist/data-types';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { EXCEPTION_PRODUCT_LIST_ACTION, INVALID_PRODUCT_LIST_TYPE } from '@msdyn365-commerce/telemetry-internal';\nimport { IProductListMetaData, ProductListInput, ProductListType } from './hydrator-action-inputs';\nimport { getProductsByCategoryListAction } from './product-list-actions/products-by-category.action';\nimport { getProductsByRecommendationListAction } from './product-list-actions/products-by-recommendation.action';\nimport { getProductsByRelationshipIdListAction } from './product-list-actions/products-by-relationship-id.action';\nimport { getProductsBySearchListAction } from './product-list-actions/products-by-search.action';\n\n/**\n * Method to hydrate a product list from metadata provided by CMS\n * @param listMetaData The metadata for the product list from CMS\n */\nexport const hydrateProductList = async (listMetaData: IProductListMetaData, context: IActionContext): Promise<void> => {\n    let action: IObservableAction<ProductSearchResult[]> | undefined;\n    switch (ProductListType[listMetaData.listType]) {\n        case ProductListType.productBySearch:\n            action = getProductsBySearchListAction;\n            break;\n        case ProductListType.productByCategory:\n            action = getProductsByCategoryListAction;\n            break;\n        case ProductListType.relatedProducts:\n            action = getProductsByRelationshipIdListAction;\n            break;\n        case ProductListType.editorial:\n        case ProductListType.algo:\n        case ProductListType.recommendation:\n            action = getProductsByRecommendationListAction;\n            break;\n        default:\n            context.telemetry.error(INVALID_PRODUCT_LIST_TYPE, listMetaData.listType);\n            (<IProductList>(<unknown>listMetaData)).products = [];\n            (<IProductList>(<unknown>listMetaData)).listMetadata = { error: INVALID_PRODUCT_LIST_TYPE };\n    }\n\n    if (action !== undefined) {\n        return action(new ProductListInput(listMetaData, context), context)\n            .then(productList => {\n                (<IProductList>(<unknown>listMetaData)).products = productList;\n            })\n            .catch(error => {\n                context.telemetry.error(EXCEPTION_PRODUCT_LIST_ACTION);\n                context.telemetry.exception(error);\n                (<IProductList>(<unknown>listMetaData)).products = [];\n                (<IProductList>(<unknown>listMetaData)).listMetadata = { error: EXCEPTION_PRODUCT_LIST_ACTION };\n            });\n    }\n\n    return;\n};\n"]}