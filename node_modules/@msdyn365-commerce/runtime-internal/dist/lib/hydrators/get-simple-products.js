/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createObservableDataAction } from '@msdyn365-commerce/core';
import { getByIdsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
import { getProductImageUrls } from '../utils/product-list-utils';
const buildCacheKey = (base, apiSettings) => {
    return `${base}-chanId:${apiSettings.channelId}-catId:${apiSettings.catalogId}`;
};
/**
 * Product Input
 */
export class ProductInput {
    constructor(productId, apiSettings) {
        this.getCacheKey = () => buildCacheKey(`RecordId-${this.productId.toString()}`, this.apiSettings);
        this.getCacheObjectType = () => 'SimpleProduct';
        this.dataCacheType = () => 'application';
        this.apiSettings = apiSettings;
        this.productId = +productId;
        this.channelId = apiSettings.channelId;
    }
}
/**
 * Calls the Retail API and returns the product based on the passed ProductInput
 */
export async function getSimpleProductsAction(inputs, ctx) {
    if (!inputs || !Array.isArray(inputs) || inputs.length === 0) {
        ctx.trace('[getSimpleProductsAction] Invalid or empty inputs passed.');
        return [];
    }
    const productIdMapping = {};
    const productIds = inputs.map((input, idx) => {
        productIdMapping[input.productId] = idx;
        return input.productId;
    });
    return getByIdsAsync({ callerContext: ctx }, inputs[0].channelId, productIds).then(products => {
        if (!products) {
            return [];
        }
        const mappedProducts = getProductImageUrls(products, ctx.requestContext.apiSettings).reduce((memo, product) => {
            if (!product) {
                return memo;
            }
            const idx = productIdMapping[product.RecordId];
            memo[idx] = product;
            return memo;
        }, []);
        // NOTE: <ZAFINE> This is not an ideal fix, but will resolve all current issues
        return inputs.map(input => {
            const foundProduct = mappedProducts.find(product => product && product.RecordId === input.productId);
            return foundProduct || {};
        });
    });
}
export default createObservableDataAction({
    action: getSimpleProductsAction,
    id: '@msdyn365-commerce/get-simple-products',
    isBatched: true
});
//# sourceMappingURL=get-simple-products.js.map