{"version":3,"file":"link-hydrator.js","sourceRoot":"","sources":["../../../src/hydrators/link-hydrator.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAA+B,MAAM,kCAAkC,CAAC;AAC9G,OAAO,EAAE,qBAAqB,EAAE,MAAM,uCAAuC,CAAC;AAC9E,OAAO,EAAE,iBAAiB,EAAiC,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAC9G,OAAO,EAAE,4BAA4B,EAAE,MAAM,wCAAwC,CAAC;AAEtF;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,UAAuB,EAAE,OAAuB,EAAE,EAAE;IAClF,IAAI,cAAkC,CAAC;IACvC,sFAAsF;IACtF,uCAAuC;IACvC,QAAQ,UAAU,CAAC,IAAI,EAAE;QACrB,qEAAqE;QACrE,kEAAkE;QAClE,KAAK,cAAc,CAAC;QACpB,KAAK,cAAc;YACf,IAAI,UAAU,CAAC,cAAc,EAAE;gBAC3B,2CAA2C;gBAC3C,MAAM,WAAW,GAAG,CAAC,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBACnF,cAAc,GAAG,iBAAiB,CAAC,UAAU,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;gBAC3E,MAAM;aACT;YACD,OAAO;QACX,KAAK,aAAa;YACd,0EAA0E;YAC1E,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,UAAU,EAAE;gBAC/C,0CAA0C;gBAC1C,IAAI,YAA8B,CAAC;gBACnC,IAAI;oBACA,YAAY,GAAG,MAAM,4BAA4B,CAC7C,IAAI,gBAAgB,CAAC,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,SAAS,CAAC,EACrG,OAAO,CACV,CAAC;oBACF,2BAA2B;oBAC3B,cAAc,GAAG,UAAU,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;iBACjE;gBAAC,OAAO,GAAG,EAAE;oBACV,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;oBAC/C,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACjC,UAAU,CAAC,cAAc,GAAG,EAAE,CAAC;oBAC/B,UAAU,CAAC,KAAK,GAAG,qBAAqB,CAAC;oBACzC,OAAO;iBACV;gBACD,MAAM;aACT;YACD,OAAO;QACX,KAAK,cAAc;YACf,gEAAgE;YAChE,IAAI,UAAU,CAAC,UAAU,EAAE;gBACvB,0CAA0C;gBAC1C,IAAI,YAA8B,CAAC;gBACnC,IAAI;oBACA,YAAY,GAAG,MAAM,4BAA4B,CAC7C,IAAI,iBAAiB,CAAC,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,UAAU,CAAC,EAChF,OAAO,CACV,CAAC;oBACF,2BAA2B;oBAC3B,cAAc,GAAG,UAAU,CAAC,UAAU,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;iBAClE;gBAAC,OAAO,GAAG,EAAE;oBACV,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;oBAC/C,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACjC,UAAU,CAAC,cAAc,GAAG,EAAE,CAAC;oBAC/B,UAAU,CAAC,KAAK,GAAG,qBAAqB,CAAC;oBACzC,OAAO;iBACV;gBACD,MAAM;aACT;YACD,OAAO;QACX;YACI,4FAA4F;YAC5F,kCAAkC;YAClC,OAAO;KACd;IAED,kEAAkE;IAClE,UAAU,CAAC,cAAc,GAAG,cAAc,CAAC;IAC3C,OAAO,UAAU,CAAC,UAAU,CAAC;IAC7B,OAAO,UAAU,CAAC,SAAS,CAAC;AAChC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { appendQueryParams, getUrlSync, IActionContext, IDictionary } from '@msdyn365-commerce/core-internal';\nimport { EXCEPTION_LINK_ACTION } from '@msdyn365-commerce/telemetry-internal';\nimport { CategoryLinkInput, IPageTypeContext, IServerLink, ProductLinkInput } from './hydrator-action-inputs';\nimport { getPageTypeContextByIdAction } from './link-actions/page-type-context-by-id';\n\n/**\n * Takes a Link object from the Page Response and uses URL Builder to construct a destination url and transform the\n * existing link structure to expose two porperties type and destinationUrl\n *\n * @param linkObject The current link object being modified\n * @param context The current action context\n */\nexport const hydrateLink = async (linkObject: IServerLink, context: IActionContext) => {\n    let destinationUrl: string | undefined;\n    // In each switch case if the required information is not present to construct the URL\n    // The object will be return unmodified\n    switch (linkObject.type) {\n        // In the case of internal and external links, no transform is needed\n        // If destination url is present set the destination url and break\n        case 'internalLink':\n        case 'externalLink':\n            if (linkObject.destinationUrl) {\n                // Append the pass through query parameters\n                const queryParams = (context.requestContext && context.requestContext.query) || {};\n                destinationUrl = appendQueryParams(linkObject.destinationUrl, queryParams);\n                break;\n            }\n            return;\n        case 'productLink':\n            // To build the url for a productLink we need the product and category ids\n            if (linkObject.productId && linkObject.categoryId) {\n                // Grab the route context using the action\n                let routeContext: IPageTypeContext;\n                try {\n                    routeContext = await getPageTypeContextByIdAction(\n                        new ProductLinkInput(context.requestContext.apiSettings, linkObject.categoryId, linkObject.productId),\n                        context\n                    );\n                    // Create the URL and break\n                    destinationUrl = getUrlSync('product', context, routeContext);\n                } catch (err) {\n                    context.telemetry.error(EXCEPTION_LINK_ACTION);\n                    context.telemetry.exception(err);\n                    linkObject.destinationUrl = '';\n                    linkObject.error = EXCEPTION_LINK_ACTION;\n                    return;\n                }\n                break;\n            }\n            return;\n        case 'categoryLink':\n            // To build the url for the categoryLink we need the category id\n            if (linkObject.categoryId) {\n                // Grab the route context using the action\n                let routeContext: IPageTypeContext;\n                try {\n                    routeContext = await getPageTypeContextByIdAction(\n                        new CategoryLinkInput(context.requestContext.apiSettings, linkObject.categoryId),\n                        context\n                    );\n                    // Create the URL and break\n                    destinationUrl = getUrlSync('category', context, routeContext);\n                } catch (err) {\n                    context.telemetry.error(EXCEPTION_LINK_ACTION);\n                    context.telemetry.exception(err);\n                    linkObject.destinationUrl = '';\n                    linkObject.error = EXCEPTION_LINK_ACTION;\n                    return;\n                }\n                break;\n            }\n            return;\n        default:\n            // If it is not one of these types or does not contain the information required for the link\n            // building do not modify the data\n            return;\n    }\n\n    // Set the computed destinationUrl and delete the other properties\n    linkObject.destinationUrl = destinationUrl;\n    delete linkObject.categoryId;\n    delete linkObject.productId;\n};\n"]}