{"version":3,"file":"link-hydrator.test.js","sourceRoot":"","sources":["../../../../src/hydrators/__tests__/link-hydrator.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { ActionContext } from '@msdyn365-commerce/action-internal';\nimport { RequestCache } from '@msdyn365-commerce/cache-internal';\nimport { buildMockActionContext, buildMockRequest } from '@msdyn365-commerce/core-internal';\n// @ts-ignore: compiler will complain that we aren't using these imports when in fact they are being used to mock return values\nimport { getCategoriesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CategoriesDataActions.g';\n// @ts-ignore: compiler will complain that we aren't using these imports when in fact they are being used to mock return values\nimport { getByIdAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport 'jest';\nimport { CategoryLinkInput, IServerLink, ProductLinkInput } from '../hydrator-action-inputs';\n// @ts-ignore: compiler will complain that we aren't using these imports when in fact they are being used to mock return values\nimport { getCategorySlug, getPageTypeContextByIdAction } from '../link-actions/page-type-context-by-id';\nimport { hydrateLink } from '../link-hydrator';\n\ndescribe('link hydrator tests', () => {\n    const queryParamsWithPreview = { preview: 'inprogress', locale: 'en-us', market: 'us', item: 'nodeserviceproxy:false' };\n    const queryParamsWithoutPreview = { locale: 'en-us', market: 'us', item: 'nodeserviceproxy:false' };\n\n    const requestContextWithSite = buildMockRequest({ sitePath: '/contoso', query: queryParamsWithoutPreview });\n    const requestContextWithSiteWithPreviewQueryParam = buildMockRequest({ sitePath: '/contoso', query: queryParamsWithPreview });\n    const actionContextWithSite = buildMockActionContext({ requestContext: requestContextWithSite });\n    const actionContextWithSiteWithPreviewQueryParam = buildMockActionContext({\n        requestContext: requestContextWithSiteWithPreviewQueryParam\n    });\n\n    describe('get page type context by id action tests', () => {\n        let actionInputForCategory: CategoryLinkInput;\n        let actionInputForProduct: ProductLinkInput;\n\n        const actionContext = new ActionContext({\n            id: 'T1',\n            requestContext: {},\n            requestCache: new RequestCache(),\n            appCache: null,\n            expectedActionCount: 1\n        });\n\n        const getProductByIdResult = {\n            Name: 'My Awesome Product',\n            RecordId: 2256223231321\n        };\n\n        const getCategoriesAsyncResult = [\n            {\n                RecordId: 1234,\n                Name: 'Cat 3',\n                ParentCategory: 1235\n            },\n            {\n                RecordId: 1235,\n                Name: 'Cat 2',\n                ParentCategory: 1236\n            },\n            {\n                RecordId: 1236,\n                Name: 'Cat 1'\n            }\n        ];\n\n        beforeEach(() => {\n            actionInputForCategory = new CategoryLinkInput(buildMockRequest().apiSettings, 1234);\n            actionInputForProduct = new ProductLinkInput(buildMockRequest().apiSettings, 1234, 2256223231321);\n            jest.clearAllMocks();\n        });\n\n        it('returns a correct route context for category', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            getCategoriesAsync = jest.fn().mockResolvedValueOnce(getCategoriesAsyncResult);\n\n            const routeContext = await getPageTypeContextByIdAction(actionInputForCategory, actionContext);\n            expect(routeContext.product).toBeUndefined();\n            expect(routeContext.category).toBeDefined();\n            expect(routeContext.category && routeContext.category.Slug).toBe('/cat-1/cat-2/cat-3');\n            expect(routeContext.category && routeContext.category.RecordId).toBe(1234);\n        });\n\n        it('returns a correct route context for product', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            getCategoriesAsync = jest.fn().mockResolvedValueOnce(getCategoriesAsyncResult);\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            getByIdAsync = jest.fn().mockResolvedValueOnce(getProductByIdResult);\n\n            const routeContext = await getPageTypeContextByIdAction(actionInputForProduct, actionContext);\n            expect(routeContext.product).toBeDefined();\n            expect(routeContext.category).toBeDefined();\n            expect(routeContext.product && routeContext.product.Name).toBe('My Awesome Product');\n            expect(routeContext.product && routeContext.product.RecordId).toBe(2256223231321);\n            expect(routeContext.category && routeContext.category.Slug).toBe('/cat-1/cat-2/cat-3');\n            expect(routeContext.category && routeContext.category.RecordId).toBe(1234);\n        });\n    });\n\n    describe('construct external link tests', () => {\n        let testExternalLink: IServerLink;\n\n        beforeEach(() => {\n            testExternalLink = {\n                type: 'externalLink',\n                destinationUrl: 'www.example.com'\n            };\n        });\n\n        it('should leave external links as is', async () => {\n            await hydrateLink(testExternalLink, actionContextWithSite);\n            expect(testExternalLink.type).toBe('externalLink');\n            expect(testExternalLink.destinationUrl).toBe('www.example.com');\n        });\n\n        it('should not modify external links object if it does not contain a destination url', async () => {\n            const testExternalLinkWithoutDestinationUrl = {\n                type: 'externalLink',\n                property1: 'prop1'\n            };\n            await hydrateLink(testExternalLinkWithoutDestinationUrl, actionContextWithSite);\n            expect(testExternalLinkWithoutDestinationUrl.type).toBe('externalLink');\n            expect(testExternalLinkWithoutDestinationUrl.property1).toBe('prop1');\n            // @ts-ignore - want to test that this property wasnt added - expect undefined\n            expect(testExternalLinkWithoutDestinationUrl.destinationUrl).toBeUndefined();\n        });\n\n        it('should leave external links as is and not append allowed query params when preview is false', async () => {\n            await hydrateLink(testExternalLink, actionContextWithSite);\n            expect(testExternalLink.type).toBe('externalLink');\n            expect(testExternalLink.destinationUrl).toBe('www.example.com');\n        });\n\n        it('should leave external links as is and append allowed query parameters when preview is set to true', async () => {\n            await hydrateLink(testExternalLink, actionContextWithSiteWithPreviewQueryParam);\n            expect(testExternalLink.type).toBe('externalLink');\n            expect(testExternalLink.destinationUrl).toBe('www.example.com?preview=inprogress&locale=en-us&market=us');\n        });\n    });\n\n    describe('construct internal link tests', () => {\n        let testInternalLink: IServerLink;\n\n        beforeEach(() => {\n            testInternalLink = {\n                type: 'internalLink',\n                destinationUrl: '/site-path/url-path'\n            };\n        });\n\n        it('should leave internal links as is', async () => {\n            await hydrateLink(testInternalLink, actionContextWithSite);\n            expect(testInternalLink.type).toBe('internalLink');\n            expect(testInternalLink.destinationUrl).toBe('/site-path/url-path');\n        });\n\n        it('should leave internal links as is and append allowed query parameters when preview is set to true', async () => {\n            await hydrateLink(testInternalLink, actionContextWithSiteWithPreviewQueryParam);\n            expect(testInternalLink.type).toBe('internalLink');\n            expect(testInternalLink.destinationUrl).toBe('/site-path/url-path?preview=inprogress&locale=en-us&market=us');\n        });\n    });\n\n    describe('construct category link tests', () => {\n        let testCategoryLink: IServerLink;\n\n        const categoryRouteContext = {\n            category: {\n                Slug: 'cat-1/cat-2',\n                RecordId: 1234\n            }\n        };\n\n        beforeEach(() => {\n            testCategoryLink = {\n                type: 'categoryLink',\n                categoryId: 1234\n            };\n        });\n\n        it('should construct category links using url builder', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            getPageTypeContextByIdAction = jest.fn().mockResolvedValueOnce(categoryRouteContext);\n\n            await hydrateLink(testCategoryLink, actionContextWithSite);\n            expect(testCategoryLink.type).toBe('categoryLink');\n            expect(testCategoryLink.destinationUrl).toBe('/contoso/cat-1/cat-2/1234.c');\n            expect(testCategoryLink.categoryId).toBeUndefined();\n        });\n\n        it('should return unmodified object if the link object does not contain category ID', async () => {\n            const testCategoryLinkWithExtraProps = {\n                type: 'categoryLink',\n                property1: 'prop1'\n            };\n\n            await hydrateLink(testCategoryLinkWithExtraProps, actionContextWithSite);\n            expect(testCategoryLinkWithExtraProps.type).toBe('categoryLink');\n            expect(testCategoryLinkWithExtraProps.property1).toBe('prop1');\n            // @ts-ignore - want to test that this property wasnt added\n            expect(testCategoryLinkWithExtraProps.destinationUrl).toBeUndefined();\n        });\n\n        it('should construct category links using url builder with query params', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            getPageTypeContextByIdAction = jest.fn().mockResolvedValueOnce(categoryRouteContext);\n\n            await hydrateLink(testCategoryLink, actionContextWithSiteWithPreviewQueryParam);\n            expect(testCategoryLink.type).toBe('categoryLink');\n            expect(testCategoryLink.destinationUrl).toBe('/contoso/cat-1/cat-2/1234.c?preview=inprogress&locale=en-us&market=us');\n            expect(testCategoryLink.categoryId).toBeUndefined();\n        });\n    });\n\n    describe('construct product link tests', () => {\n        let testProductLink: IServerLink;\n        const productRouteContext = {\n            product: {\n                Name: 'My Awesome Product',\n                RecordId: 2256223231321\n            },\n            category: {\n                Slug: 'cat-1/cat-2',\n                RecordId: 1234\n            }\n        };\n\n        beforeEach(() => {\n            testProductLink = {\n                type: 'productLink',\n                categoryId: 1234,\n                productId: 2256223231321\n            };\n        });\n\n        it('should construct product links using url builder', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            getPageTypeContextByIdAction = jest.fn().mockResolvedValueOnce(productRouteContext);\n\n            await hydrateLink(testProductLink, actionContextWithSite);\n            expect(testProductLink.type).toBe('productLink');\n            expect(testProductLink.destinationUrl).toBe('/contoso/cat-1/cat-2/my-awesome-product/2256223231321.p');\n            expect(testProductLink.categoryId).toBeUndefined();\n            expect(testProductLink.productId).toBeUndefined();\n        });\n\n        it('should construct product links using url builder with query params', async () => {\n            // @ts-ignore: Jest Mocking Confuses TS Complier\n            getPageTypeContextByIdAction = jest.fn().mockResolvedValueOnce(productRouteContext);\n\n            await hydrateLink(testProductLink, actionContextWithSiteWithPreviewQueryParam);\n            expect(testProductLink.type).toBe('productLink');\n            expect(testProductLink.destinationUrl).toBe(\n                '/contoso/cat-1/cat-2/my-awesome-product/2256223231321.p?preview=inprogress&locale=en-us&market=us'\n            );\n            expect(testProductLink.categoryId).toBeUndefined();\n            expect(testProductLink.productId).toBeUndefined();\n        });\n\n        it('should return an unmodifed object if the object does not contain the required information', async () => {\n            const testProductLinkWithExtraProps = {\n                type: 'productLink',\n                property1: 'prop1',\n                categoryId: 2256223231321\n            };\n\n            await hydrateLink(testProductLinkWithExtraProps, actionContextWithSite);\n            expect(testProductLinkWithExtraProps.type).toBe('productLink');\n            expect(testProductLinkWithExtraProps.property1).toBe('prop1');\n            expect(testProductLinkWithExtraProps.categoryId).toBe(2256223231321);\n            // @ts-ignore - want to test that this property wasnt added - expect undefined\n            expect(testProductLinkWithExtraProps.destinationUrl).toBeUndefined();\n        });\n    });\n\n    describe('construct category slug tests', () => {\n        const parentCategories = [\n            {\n                Name: 'Test Category 2',\n                RecordId: 1235,\n                ParentCategory: 1236\n            },\n            {\n                Name: 'Test Category 3',\n                RecordId: 1236\n            }\n        ];\n\n        it('should construct the slug for one category', () => {\n            const currentCategoryResult = {\n                Name: 'Test Category 1',\n                RecordId: 1234\n            };\n            expect(getCategorySlug(currentCategoryResult, [])).toBe('/test-category-1');\n        });\n\n        it('should construct the slug for one category if it cant find parent categories', () => {\n            const currentCategoryResult = {\n                Name: 'Test Category 1',\n                RecordId: 1234,\n                ParentCategory: 5633\n            };\n            expect(getCategorySlug(currentCategoryResult, parentCategories)).toBe('/test-category-1');\n        });\n\n        it('should construct the slug recursively when parent categories are found', async () => {\n            const currentCategoryResult = {\n                Name: 'Test Category 1',\n                RecordId: 1234,\n                ParentCategory: 1235\n            };\n            expect(getCategorySlug(currentCategoryResult, parentCategories)).toBe('/test-category-3/test-category-2/test-category-1');\n        });\n    });\n});\n"]}