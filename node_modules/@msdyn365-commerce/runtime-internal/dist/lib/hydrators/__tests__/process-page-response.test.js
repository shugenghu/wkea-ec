/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { buildMockActionContext, buildMockRequest } from '@msdyn365-commerce/core';
import { Telemetry } from '@msdyn365-commerce/telemetry-internal';
import * as fs from 'fs';
import 'jest';
import * as path from 'path';
import { getPageConfig } from '../../_server/parse-request';
// @ts-ignore: compiler will complain that we aren't using these imports when in fact they are being used to mock return values
import { getPageTypeContextByIdAction } from '../link-actions/page-type-context-by-id';
import { processComplexDataTypesAsync } from '../process-page-response';
describe('process-page-response tests', () => {
    const queryParamsWithPreview = { preview: 'inprogress', locale: 'en-us', market: 'us', item: 'nodeserviceproxy:false' };
    const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });
    const requestContextWithSiteWithPreviewQueryParam = buildMockRequest({ sitePath: '/contoso', query: queryParamsWithPreview });
    const actionContextWithSite = buildMockActionContext({ requestContext: requestContextWithSite });
    const actionContextWithSiteWithPreviewQueryParam = buildMockActionContext({
        requestContext: requestContextWithSiteWithPreviewQueryParam
    });
    describe('process links tests', () => {
        const routeContext = {
            product: {
                Name: 'My Awesome Product',
                RecordId: 2256223231321
            },
            category: {
                Slug: 'cat-1/cat-2/cat-3',
                RecordId: 1234
            }
        };
        beforeEach(() => {
            // @ts-ignore: Jest Mocking Confuses TS Complier
            getPageTypeContextByIdAction = jest.fn().mockResolvedValue(routeContext);
        });
        it('replace link object with the constructed url given a page response', async () => {
            const pageResponse = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../../_server/__mocks__/page-response.1.json')).toString());
            getPageConfig(pageResponse, new Telemetry());
            const complexPromises = processComplexDataTypesAsync(false, 'server', pageResponse.slots, actionContextWithSiteWithPreviewQueryParam);
            if (complexPromises) {
                await Promise.all(complexPromises);
            }
            expect(JSON.stringify(pageResponse, null, 4)).toMatchSnapshot();
        });
        it('replace link object with the constructed url given a page response with complex object', async () => {
            const pageResponse = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../../_server/__mocks__/page-response.2.json')).toString());
            getPageConfig(pageResponse, new Telemetry());
            const complexPromises = processComplexDataTypesAsync(false, 'server', pageResponse.slots, actionContextWithSite);
            if (complexPromises) {
                await Promise.all(complexPromises);
            }
            expect(JSON.stringify(pageResponse, null, 4)).toMatchSnapshot();
        });
    });
});
//# sourceMappingURL=process-page-response.test.js.map