{"version":3,"file":"product-list-hydrator.test.js","sourceRoot":"","sources":["../../../../src/hydrators/__tests__/product-list-hydrator.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport 'jest';\n\nimport { buildMockActionContext } from '@msdyn365-commerce/core';\nimport { IProductList } from '@msdyn365-commerce/retail-proxy/dist/data-types';\nimport { EXCEPTION_PRODUCT_LIST_ACTION, INVALID_PRODUCT_LIST_TYPE } from '@msdyn365-commerce/telemetry-internal';\nimport { IProductListMetaData } from '../hydrator-action-inputs';\n// @ts-ignore: compiler will complain that we aren't using these imports when in fact they are being used to mock return values\nimport { getProductsByCategoryListAction } from '../product-list-actions/products-by-category.action';\n// @ts-ignore: compiler will complain that we aren't using these imports when in fact they are being used to mock return values\nimport { getProductsByRecommendationListAction } from '../product-list-actions/products-by-recommendation.action';\n// @ts-ignore: compiler will complain that we aren't using these imports when in fact they are being used to mock return values\nimport { getProductsByRelationshipIdListAction } from '../product-list-actions/products-by-relationship-id.action';\n// @ts-ignore: compiler will complain that we aren't using these imports when in fact they are being used to mock return values\nimport { getProductsBySearchListAction } from '../product-list-actions/products-by-search.action';\nimport { hydrateProductList } from '../product-list-hydrator';\n\ndescribe('product list hydrator tests', () => {\n    const actionContext = buildMockActionContext();\n\n    it('should call getProductsByCategory action for productByCategory list type', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        getProductsByCategoryListAction = jest.fn().mockResolvedValue([{ recordId: 1234 }]);\n\n        const listMetadata: IProductListMetaData = {\n            listType: 'productByCategory',\n            categoryIds: [123]\n        };\n\n        await hydrateProductList(listMetadata, actionContext);\n\n        expect((<IProductList>(<unknown>listMetadata)).products[0]).toEqual({ recordId: 1234 });\n        expect(getProductsByCategoryListAction).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call getProductsBySearch action for productBySearch list type', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        getProductsBySearchListAction = jest.fn().mockResolvedValue([{ recordId: 1234 }]);\n\n        const listMetadata: IProductListMetaData = {\n            listType: 'productBySearch'\n        };\n\n        await hydrateProductList(listMetadata, actionContext);\n\n        expect((<IProductList>(<unknown>listMetadata)).products[0]).toEqual({ recordId: 1234 });\n        expect(getProductsBySearchListAction).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call getRelatedProducts action for relatedProducts list type', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        getProductsByRelationshipIdListAction = jest.fn().mockResolvedValue([{ recordId: 1234 }]);\n\n        const listMetadata: IProductListMetaData = {\n            listType: 'relatedProducts'\n        };\n\n        await hydrateProductList(listMetadata, actionContext);\n\n        expect((<IProductList>(<unknown>listMetadata)).products[0]).toEqual({ recordId: 1234 });\n        expect(getProductsByRelationshipIdListAction).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call getProductsByRecommendationListAction for editorial list type', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        getProductsByRecommendationListAction = jest.fn().mockResolvedValue([{ recordId: 1234 }]);\n\n        const listMetadata: IProductListMetaData = {\n            listType: 'editorial'\n        };\n\n        await hydrateProductList(listMetadata, actionContext);\n\n        expect((<IProductList>(<unknown>listMetadata)).products[0]).toEqual({ recordId: 1234 });\n        expect(getProductsByRecommendationListAction).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call getProductsByRecommendationListAction for recommendation list type', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        getProductsByRecommendationListAction = jest.fn().mockResolvedValue([{ recordId: 1234 }]);\n\n        const listMetadata: IProductListMetaData = {\n            listType: 'recommendation'\n        };\n\n        await hydrateProductList(listMetadata, actionContext);\n\n        expect((<IProductList>(<unknown>listMetadata)).products[0]).toEqual({ recordId: 1234 });\n        expect(getProductsByRecommendationListAction).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call getProductsByRecommendationListAction for algo list type', async () => {\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        getProductsByRecommendationListAction = jest.fn().mockResolvedValue([{ recordId: 1234 }]);\n\n        const listMetadata: IProductListMetaData = {\n            listType: 'algo'\n        };\n\n        await hydrateProductList(listMetadata, actionContext);\n\n        expect((<IProductList>(<unknown>listMetadata)).products[0]).toEqual({ recordId: 1234 });\n        expect(getProductsByRecommendationListAction).toHaveBeenCalledTimes(1);\n    });\n\n    it('Should fail on invalid list type', async () => {\n        const listMetadata: IProductListMetaData = {\n            listType: 'badListType'\n        };\n\n        await hydrateProductList(listMetadata, actionContext);\n\n        // No products should be returned\n        expect((<IProductList>(<unknown>listMetadata)).products).toEqual([]);\n        expect((<IProductList>(<unknown>listMetadata)).listMetadata.error).toEqual(INVALID_PRODUCT_LIST_TYPE);\n    });\n\n    it('Should fail on error during hydration action', async () => {\n        const listMetadata: IProductListMetaData = {\n            listType: 'productByCategory',\n            categoryIds: [123]\n        };\n\n        // @ts-ignore: Jest Mocking Confuses TS Complier\n        getProductsByCategoryListAction = jest.fn().mockRejectedValue(new Error('ERROR'));\n\n        await hydrateProductList(listMetadata, actionContext);\n\n        // No products should be returned\n        expect((<IProductList>(<unknown>listMetadata)).products).toEqual([]);\n        expect((<IProductList>(<unknown>listMetadata)).listMetadata.error).toEqual(EXCEPTION_PRODUCT_LIST_ACTION);\n    });\n});\n"]}