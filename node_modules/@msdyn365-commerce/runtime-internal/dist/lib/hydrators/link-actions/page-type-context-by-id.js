/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { createObservableDataAction } from '@msdyn365-commerce/action-internal';
import { getFriendlyName, getParameterizeFeatureFlagsWithRequestContext, parameterize } from '@msdyn365-commerce/core-internal';
import { getCategoriesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CategoriesDataActions.g';
import { getByIdAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
import { ProductLinkInput } from '../hydrator-action-inputs';
/**
 * Computes a root category's SLUG
 *
 * @param rootCategory The category for which you want to determine the slug
 * @param ctx Action context
 */
export const getCategorySlug = (rootCategory, categories, parameterizeFeatureFlags) => {
    let slug = parameterize(rootCategory.Name, undefined, parameterizeFeatureFlags, rootCategory.NeutralizedName);
    let currentCategory = rootCategory;
    while (currentCategory.ParentCategory) {
        const parentId = currentCategory.ParentCategory;
        const parentCategory = categories.find((category) => {
            if (category.RecordId) {
                return category.RecordId === parentId;
            }
            return false;
        });
        if (!parentCategory) {
            break;
        }
        slug = `${parameterize(parentCategory.Name, undefined, parameterizeFeatureFlags, parentCategory.NeutralizedName)}/${slug}`;
        currentCategory = parentCategory;
    }
    return slug.length > 0 ? `/${slug}` : '';
};
/**
 * Returns an object containing information used to by the URL builder to build
 * the formatted product or category URL
 * =
 * @param input Action input
 * @param context Action context
 */
const getPageTypeContextById = async (input, context) => {
    // If product ID exits get the product details for that product
    const pageTypeContext = {};
    if (input instanceof ProductLinkInput && input.productId) {
        try {
            const product = await getByIdAsync({ callerContext: context }, input.productId, input.channelId);
            if (!(product && product.Name)) {
                throw new Error(`Unable to retrieve product details for product id: ${input.productId}`);
            }
            pageTypeContext.product = { Name: product.Name || '', RecordId: product.RecordId };
        }
        catch (err) {
            context.telemetry.error(err);
            throw new Error(`Unable run getById action. Error: ${err}`);
        }
    }
    // Get the category details for the passed category id
    return getCategoriesAsync({ callerContext: context }, input.channelId)
        .then((categories) => {
        // Find the category by id from the list of returned categories
        const rootCategory = categories.find((category) => {
            if (category.RecordId) {
                return category.RecordId === input.categoryId;
            }
            return false;
        });
        if (!rootCategory) {
            throw new Error(`Unable to retrieve category details for category id: ${input.categoryId}`);
        }
        const localName = getFriendlyName(context.requestContext.locale, rootCategory.NameTranslations);
        const rootCategoryWithNeutralizedName = { ...rootCategory };
        rootCategoryWithNeutralizedName.NeutralizedName = rootCategory.Name;
        rootCategoryWithNeutralizedName.Name = localName || rootCategoryWithNeutralizedName.NeutralizedName;
        // Compute the found category's slug
        const parameterizeFeatureFlags = getParameterizeFeatureFlagsWithRequestContext(context.requestContext);
        const slug = getCategorySlug(rootCategoryWithNeutralizedName, categories, parameterizeFeatureFlags);
        pageTypeContext.category = { Slug: slug, RecordId: rootCategoryWithNeutralizedName.RecordId };
        return Promise.resolve(pageTypeContext);
    })
        .catch(err => {
        // In the event of an error return just the category id
        context.telemetry.error(err);
        throw new Error(`Unable to run getCategories action. Error: ${err}`);
    });
};
export const getPageTypeContextByIdAction = createObservableDataAction({
    action: getPageTypeContextById
});
//# sourceMappingURL=page-type-context-by-id.js.map