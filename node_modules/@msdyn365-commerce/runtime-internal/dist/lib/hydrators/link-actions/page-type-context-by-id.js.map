{"version":3,"file":"page-type-context-by-id.js","sourceRoot":"","sources":["../../../../src/hydrators/link-actions/page-type-context-by-id.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createObservableDataAction } from '@msdyn365-commerce/action-internal';\nimport {\n    getFriendlyName,\n    getParameterizeFeatureFlagsWithRequestContext,\n    IAction,\n    IActionContext,\n    IParameterizeFeatureFlags,\n    parameterize\n} from '@msdyn365-commerce/core-internal';\nimport { getCategoriesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CategoriesDataActions.g';\nimport { getByIdAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { Category, SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { CategoryLinkInput, IPageTypeContext, ProductLinkInput } from '../hydrator-action-inputs';\n\ntype CategoryWithNeutralizedName = Category & { NeutralizedName?: string };\n/**\n * Computes a root category's SLUG\n *\n * @param rootCategory The category for which you want to determine the slug\n * @param ctx Action context\n */\nexport const getCategorySlug = (\n    rootCategory: CategoryWithNeutralizedName,\n    categories: CategoryWithNeutralizedName[],\n    parameterizeFeatureFlags?: IParameterizeFeatureFlags\n): string => {\n    let slug: string = parameterize(rootCategory.Name, undefined, parameterizeFeatureFlags, rootCategory.NeutralizedName);\n    let currentCategory: Category = rootCategory;\n    while (currentCategory.ParentCategory) {\n        const parentId = currentCategory.ParentCategory;\n        const parentCategory: CategoryWithNeutralizedName | undefined = categories.find((category: Category) => {\n            if (category.RecordId) {\n                return category.RecordId === parentId;\n            }\n            return false;\n        });\n        if (!parentCategory) {\n            break;\n        }\n        slug = `${parameterize(parentCategory.Name, undefined, parameterizeFeatureFlags, parentCategory.NeutralizedName)}/${slug}`;\n        currentCategory = parentCategory;\n    }\n    return slug.length > 0 ? `/${slug}` : '';\n};\n\n/**\n * Returns an object containing information used to by the URL builder to build\n * the formatted product or category URL\n * =\n * @param input Action input\n * @param context Action context\n */\nconst getPageTypeContextById = async (input: ProductLinkInput | CategoryLinkInput, context: IActionContext): Promise<IPageTypeContext> => {\n    // If product ID exits get the product details for that product\n    const pageTypeContext: IPageTypeContext = {};\n    if (input instanceof ProductLinkInput && input.productId) {\n        try {\n            const product: SimpleProduct = await getByIdAsync({ callerContext: context }, input.productId, input.channelId);\n            if (!(product && product.Name)) {\n                throw new Error(`Unable to retrieve product details for product id: ${input.productId}`);\n            }\n            pageTypeContext.product = { Name: product.Name || '', RecordId: product.RecordId };\n        } catch (err) {\n            context.telemetry.error(err);\n            throw new Error(`Unable run getById action. Error: ${err}`);\n        }\n    }\n\n    // Get the category details for the passed category id\n    return getCategoriesAsync({ callerContext: context }, input.channelId)\n        .then((categories: Category[]) => {\n            // Find the category by id from the list of returned categories\n            const rootCategory: Category | undefined = categories.find((category: Category) => {\n                if (category.RecordId) {\n                    return category.RecordId === input.categoryId;\n                }\n                return false;\n            });\n            if (!rootCategory) {\n                throw new Error(`Unable to retrieve category details for category id: ${input.categoryId}`);\n            }\n            const localName = getFriendlyName(context.requestContext.locale, rootCategory.NameTranslations);\n            const rootCategoryWithNeutralizedName = <CategoryWithNeutralizedName>{ ...rootCategory };\n            rootCategoryWithNeutralizedName.NeutralizedName = rootCategory.Name;\n            rootCategoryWithNeutralizedName.Name = localName || rootCategoryWithNeutralizedName.NeutralizedName;\n            // Compute the found category's slug\n            const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlagsWithRequestContext(\n                context.requestContext\n            );\n            const slug = getCategorySlug(rootCategoryWithNeutralizedName, categories, parameterizeFeatureFlags);\n            pageTypeContext.category = { Slug: slug, RecordId: rootCategoryWithNeutralizedName.RecordId };\n            return Promise.resolve(pageTypeContext);\n        })\n        .catch(err => {\n            // In the event of an error return just the category id\n            context.telemetry.error(err);\n            throw new Error(`Unable to run getCategories action. Error: ${err}`);\n        });\n};\n\nexport const getPageTypeContextByIdAction = createObservableDataAction({\n    action: <IAction<IPageTypeContext>>getPageTypeContextById\n});\n"]}