{"version":3,"file":"products-by-category.action.js","sourceRoot":"","sources":["../../../../src/hydrators/product-list-actions/products-by-category.action.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,0BAA0B,EAAE,MAAM,oCAAoC,CAAC;AAEhF,OAAO,EAAE,qBAAqB,EAAE,MAAM,wEAAwE,CAAC;AAE/G,OAAO,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAClD,OAAO,EAAE,mBAAmB,EAAE,MAAM,gCAAgC,CAAC;AAGrE,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAAE,KAAuB,EAAE,OAAuB,EAAkC,EAAE;IAChI,IAAI,UAAkB,CAAC;IACvB,MAAM,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC;IAEnD,kHAAkH;IAClH,IAAI,KAAK,CAAC,YAAY,CAAC,WAAW,IAAI,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;QAC7E,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;KAClD;SAAM,IAAI,SAAS,IAAI,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,kBAAkB,IAAI,SAAS,CAAC,QAAQ,EAAE;QACzH,UAAU,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC;KACpC;SAAM,IAAI,SAAS,IAAI,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC7E,UAAU,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KACzC;SAAM;QACH,8DAA8D;QAC9D,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;KACrE;IACD,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,oDAAoD,UAAU,EAAE,CAAC,CAAC;IAC1F,MAAM,qBAAqB,GAA0B;QACjD,OAAO,EAAE;YACL,SAAS,EAAE,CAAC,KAAK,CAAC,SAAS;YAC3B,SAAS,EAAE,CAAC,KAAK,CAAC,SAAS;SAC9B;QACD,WAAW,EAAE,CAAC,UAAU,CAAC;KAC5B,CAAC;IAEF,OAAO,qBAAqB,CACxB,EAAE,aAAa,EAAE,OAAO,EAAE,mBAAmB,EAAE,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,YAAY,CAAC,QAAQ,IAAI,EAAE,EAAE,EAAE,EAAE,EACvG,qBAAqB,CACxB;SACI,IAAI,CAAC,CAAC,QAA+B,EAAE,EAAE;QACtC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,+CAA+C,EAAE,QAAQ,CAAC,CAAC;QACnF,OAAO,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC7E,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,2CAA2C,KAAK,EAAE,CAAC,CAAC;QAC5E,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAG,0BAA0B,CAAC;IACtE,MAAM,EAAkC,yBAAyB;IACjE,EAAE,EAAE,yCAAyC;CAChD,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createObservableDataAction } from '@msdyn365-commerce/action-internal';\nimport { IAction, IActionContext } from '@msdyn365-commerce/core-internal';\nimport { searchByCriteriaAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductSearchCriteria, ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { CATEGORY_PAGE_NAME } from '../../consts';\nimport { getProductImageUrls } from '../../utils/product-list-utils';\nimport { ProductListInput } from '../hydrator-action-inputs';\n\nexport const getProductsByCategoryList = async (input: ProductListInput, context: IActionContext): Promise<ProductSearchResult[]> => {\n    let categoryId: number;\n    const urlTokens = context.requestContext.urlTokens;\n\n    // If the category ID has been provided from the list metadata use it, otherwise grab the category ID from context\n    if (input.listMetadata.categoryIds && input.listMetadata.categoryIds.length > 0) {\n        categoryId = input.listMetadata.categoryIds[0];\n    } else if (urlTokens && urlTokens.pageType && urlTokens.pageType.toLowerCase() === CATEGORY_PAGE_NAME && urlTokens.recordId) {\n        categoryId = +urlTokens.recordId;\n    } else if (urlTokens && urlTokens.categories && urlTokens.categories.length > 0) {\n        categoryId = +urlTokens.categories[0];\n    } else {\n        // Unable to determine category from list meta data or context\n        throw new Error('CategoryId Missing for ProductsByCategory List');\n    }\n    context.telemetry.debug(`Category Id input to ProductsByCategory action : ${categoryId}`);\n    const productSearchCriteria: ProductSearchCriteria = {\n        Context: {\n            ChannelId: +input.channelId,\n            CatalogId: +input.catalogId\n        },\n        CategoryIds: [categoryId]\n    };\n\n    return searchByCriteriaAsync(\n        { callerContext: context, queryResultSettings: { Paging: { Top: input.listMetadata.pageSize || 10 } } },\n        productSearchCriteria\n    )\n        .then((products: ProductSearchResult[]) => {\n            context.telemetry.debug('Products returned by ProductByCategory action', products);\n            return getProductImageUrls(products, context.requestContext.apiSettings);\n        })\n        .catch(error => {\n            context.telemetry.error(`Error running ProductByCategory action: ${error}`);\n            throw new Error(error);\n        });\n};\n\nexport const getProductsByCategoryListAction = createObservableDataAction({\n    action: <IAction<ProductSearchResult[]>>getProductsByCategoryList,\n    id: '@msdyn365-commerce/products-by-category'\n});\n"]}