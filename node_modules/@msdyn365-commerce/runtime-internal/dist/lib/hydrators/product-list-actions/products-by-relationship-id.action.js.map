{"version":3,"file":"products-by-relationship-id.action.js","sourceRoot":"","sources":["../../../../src/hydrators/product-list-actions/products-by-relationship-id.action.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,0BAA0B,EAAE,MAAM,oCAAoC,CAAC;AAEhF,OAAO,EAAE,uBAAuB,EAAE,MAAM,wEAAwE,CAAC;AAEjH,OAAO,EAAE,mBAAmB,EAAE,MAAM,gCAAgC,CAAC;AAGrE,MAAM,gBAAgB,GAAG,CAAC,WAAmB,EAAE,EAAE;IAC7C,MAAM,IAAI,KAAK,CAAC,SAAS,WAAW,kEAAkE,CAAC,CAAC;AAC5G,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAG,KAAK,EAAE,KAAuB,EAAE,OAAuB,EAAkC,EAAE;IACtI,IAAI,SAAS,CAAC;IACd,IAAI,cAAc,CAAC;IACnB,yDAAyD;IACzD,IAAI,KAAK,CAAC,YAAY,CAAC,UAAU,IAAI,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3E,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAChD;SAAM,IAAI,OAAO,CAAC,cAAc,CAAC,SAAS,IAAI,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,EAAE;QACpF,SAAS,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;KACxD;SAAM;QACH,gBAAgB,CAAC,WAAW,CAAC,CAAC;KACjC;IACD,+DAA+D;IAC/D,IAAI,KAAK,CAAC,YAAY,CAAC,cAAc,EAAE;QACnC,cAAc,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,cAAc,CAAC;KACvD;SAAM;QACH,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;KACtC;IACD,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,qDAAqD,SAAS,EAAE,CAAC,CAAC;IAC1F,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,0DAA0D,cAAc,EAAE,CAAC,CAAC;IAEpG,OAAO,uBAAuB,CAC1B,EAAE,aAAa,EAAE,OAAO,EAAE,mBAAmB,EAAE,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,YAAY,CAAC,QAAQ,IAAI,EAAE,EAAE,EAAE,EAAE,EACvG,SAAS,EACT,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,SAAS,EACf,cAAc,CACjB;SACI,IAAI,CAAC,CAAC,QAA+B,EAAE,EAAE;QACtC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,gDAAgD,EAAE,QAAQ,CAAC,CAAC;QACpF,OAAO,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC7E,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,4CAA4C,KAAK,EAAE,CAAC,CAAC;QAC7E,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qCAAqC,GAAG,0BAA0B,CAAC;IAC5E,MAAM,EAAkC,+BAA+B;IACvE,EAAE,EAAE,gDAAgD;CACvD,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createObservableDataAction } from '@msdyn365-commerce/action-internal';\nimport { IAction, IActionContext } from '@msdyn365-commerce/core-internal';\nimport { getRelatedProductsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { getProductImageUrls } from '../../utils/product-list-utils';\nimport { ProductListInput } from '../hydrator-action-inputs';\n\nconst actionInputError = (missingType: string) => {\n    throw new Error(`Input ${missingType} is missing and required to run GetProductsByRelationship action`);\n};\n\nexport const getProductsByRelationshipIdList = async (input: ProductListInput, context: IActionContext): Promise<ProductSearchResult[]> => {\n    let productId;\n    let relationshipId;\n    // Grab the product ID from the list meta data or context\n    if (input.listMetadata.productIds && input.listMetadata.productIds.length > 0) {\n        productId = input.listMetadata.productIds[0];\n    } else if (context.requestContext.urlTokens && context.requestContext.urlTokens.itemId) {\n        productId = +context.requestContext.urlTokens.itemId;\n    } else {\n        actionInputError('productId');\n    }\n    // The relationship ID must be provided with the list meta data\n    if (input.listMetadata.relationshipId) {\n        relationshipId = +input.listMetadata.relationshipId;\n    } else {\n        actionInputError('relationshipId');\n    }\n    context.telemetry.debug(`Product Id input to productByRelationship action: ${productId}`);\n    context.telemetry.debug(`Relationship Id input to productByRelationship action: ${relationshipId}`);\n\n    return getRelatedProductsAsync(\n        { callerContext: context, queryResultSettings: { Paging: { Top: input.listMetadata.pageSize || 10 } } },\n        productId,\n        input.channelId,\n        input.catalogId,\n        relationshipId\n    )\n        .then((products: ProductSearchResult[]) => {\n            context.telemetry.debug('Products returned by getRelatedProducts action', products);\n            return getProductImageUrls(products, context.requestContext.apiSettings);\n        })\n        .catch(error => {\n            context.telemetry.error(`Error running getRelatedProducts action: ${error}`);\n            throw new Error(error);\n        });\n};\n\nexport const getProductsByRelationshipIdListAction = createObservableDataAction({\n    action: <IAction<ProductSearchResult[]>>getProductsByRelationshipIdList,\n    id: '@msdyn365-commerce/products-by-relationship-id'\n});\n"]}