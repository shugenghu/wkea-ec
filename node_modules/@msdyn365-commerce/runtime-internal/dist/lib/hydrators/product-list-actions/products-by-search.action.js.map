{"version":3,"file":"products-by-search.action.js","sourceRoot":"","sources":["../../../../src/hydrators/product-list-actions/products-by-search.action.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,0BAA0B,EAAE,MAAM,oCAAoC,CAAC;AAEhF,OAAO,EAAE,iBAAiB,EAAE,MAAM,wEAAwE,CAAC;AAE3G,OAAO,EAAE,mBAAmB,EAAE,MAAM,gCAAgC,CAAC;AAGrE,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAAE,KAAuB,EAAE,OAAuB,EAAkC,EAAE;IAC9H,IAAI,UAAkB,CAAC;IACvB,IAAI,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE;QAC/B,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC;KAC9C;SAAM,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;QACvG,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;KAC/C;SAAM;QACH,MAAM,IAAI,KAAK,CACX,0HAA0H,CAC7H,CAAC;KACL;IAED,OAAO,iBAAiB,CACpB,EAAE,aAAa,EAAE,OAAO,EAAE,mBAAmB,EAAE,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,YAAY,CAAC,QAAQ,IAAI,EAAE,EAAE,EAAE,EAAE,EACvG,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,SAAS,EACf,UAAU,CACb;SACI,IAAI,CAAC,CAAC,QAA+B,EAAE,EAAE;QACtC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,+CAA+C,EAAE,QAAQ,CAAC,CAAC;QACnF,OAAO,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC7E,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,0CAA0C,KAAK,EAAE,CAAC,CAAC;QAC3E,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,6BAA6B,GAAG,0BAA0B,CAAC;IACpE,MAAM,EAAkC,uBAAuB;IAC/D,EAAE,EAAE,uCAAuC;CAC9C,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { createObservableDataAction } from '@msdyn365-commerce/action-internal';\nimport { IAction, IActionContext } from '@msdyn365-commerce/core-internal';\nimport { searchByTextAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { ProductSearchResult } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\nimport { getProductImageUrls } from '../../utils/product-list-utils';\nimport { ProductListInput } from '../hydrator-action-inputs';\n\nexport const getProductsBySearchList = async (input: ProductListInput, context: IActionContext): Promise<ProductSearchResult[]> => {\n    let searchText: string;\n    if (input.listMetadata.searchText) {\n        searchText = input.listMetadata.searchText;\n    } else if (context.requestContext.query && context.requestContext.query && context.requestContext.query.q) {\n        searchText = context.requestContext.query.q;\n    } else {\n        throw new Error(\n            'Search text missing for ProductsBySearch. Query string ?q={searchText} or search text in list meta data must be present.'\n        );\n    }\n\n    return searchByTextAsync(\n        { callerContext: context, queryResultSettings: { Paging: { Top: input.listMetadata.pageSize || 10 } } },\n        input.channelId,\n        input.catalogId,\n        searchText\n    )\n        .then((products: ProductSearchResult[]) => {\n            context.telemetry.debug('Products returned by productsBySearch action:', products);\n            return getProductImageUrls(products, context.requestContext.apiSettings);\n        })\n        .catch(error => {\n            context.telemetry.error(`Error running productsBySearch action: ${error}`);\n            throw new Error(error);\n        });\n};\n\nexport const getProductsBySearchListAction = createObservableDataAction({\n    action: <IAction<ProductSearchResult[]>>getProductsBySearchList,\n    id: '@msdyn365-commerce/products-by-search'\n});\n"]}