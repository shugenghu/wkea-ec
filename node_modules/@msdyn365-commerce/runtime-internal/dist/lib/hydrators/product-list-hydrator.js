/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { EXCEPTION_PRODUCT_LIST_ACTION, INVALID_PRODUCT_LIST_TYPE } from '@msdyn365-commerce/telemetry-internal';
import { ProductListInput, ProductListType } from './hydrator-action-inputs';
import { getProductsByCategoryListAction } from './product-list-actions/products-by-category.action';
import { getProductsByRecommendationListAction } from './product-list-actions/products-by-recommendation.action';
import { getProductsByRelationshipIdListAction } from './product-list-actions/products-by-relationship-id.action';
import { getProductsBySearchListAction } from './product-list-actions/products-by-search.action';
/**
 * Method to hydrate a product list from metadata provided by CMS
 * @param listMetaData The metadata for the product list from CMS
 */
export const hydrateProductList = async (listMetaData, context) => {
    let action;
    switch (ProductListType[listMetaData.listType]) {
        case ProductListType.productBySearch:
            action = getProductsBySearchListAction;
            break;
        case ProductListType.productByCategory:
            action = getProductsByCategoryListAction;
            break;
        case ProductListType.relatedProducts:
            action = getProductsByRelationshipIdListAction;
            break;
        case ProductListType.editorial:
        case ProductListType.algo:
        case ProductListType.recommendation:
            action = getProductsByRecommendationListAction;
            break;
        default:
            context.telemetry.error(INVALID_PRODUCT_LIST_TYPE, listMetaData.listType);
            listMetaData.products = [];
            listMetaData.listMetadata = { error: INVALID_PRODUCT_LIST_TYPE };
    }
    if (action !== undefined) {
        return action(new ProductListInput(listMetaData, context), context)
            .then(productList => {
            listMetaData.products = productList;
        })
            .catch(error => {
            context.telemetry.error(EXCEPTION_PRODUCT_LIST_ACTION);
            context.telemetry.exception(error);
            listMetaData.products = [];
            listMetaData.listMetadata = { error: EXCEPTION_PRODUCT_LIST_ACTION };
        });
    }
    return;
};
//# sourceMappingURL=product-list-hydrator.js.map