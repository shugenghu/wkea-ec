{"version":3,"file":"get-simple-products.js","sourceRoot":"","sources":["../../../src/hydrators/get-simple-products.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAEH,0BAA0B,EAM7B,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,aAAa,EAAE,MAAM,wEAAwE,CAAC;AAGvG,OAAO,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AAElE,MAAM,aAAa,GAAG,CAAC,IAAY,EAAE,WAAiC,EAAU,EAAE;IAC9E,OAAO,GAAG,IAAI,WAAW,WAAW,CAAC,SAAS,UAAU,WAAW,CAAC,SAAS,EAAE,CAAC;AACpF,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,OAAO,YAAY;IAKrB,YAAY,SAA0B,EAAE,WAAiC;QAMlE,gBAAW,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7F,uBAAkB,GAAG,GAAG,EAAE,CAAC,eAAe,CAAC;QAC3C,kBAAa,GAAG,GAAc,EAAE,CAAC,aAAa,CAAC;QAPlD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,CAAC,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;CAKJ;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,MAAsB,EAAE,GAAmB;IACrF,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QAC1D,GAAG,CAAC,KAAK,CAAC,2DAA2D,CAAC,CAAC;QACvE,OAAO,EAAE,CAAC;KACb;IAED,MAAM,gBAAgB,GAAwB,EAAE,CAAC;IACjD,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QACzC,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;QACxC,OAAO,KAAK,CAAC,SAAS,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,OAAO,aAAa,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC1F,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,EAAE,CAAC;SACb;QACD,MAAM,cAAc,GAAqB,mBAAmB,CAAC,QAAQ,EAAE,GAAG,CAAC,cAAc,CAAC,WAAW,CAAE,CAAC,MAAM,CAC1G,CAAC,IAAqB,EAAE,OAAkC,EAAE,EAAE;YAC1D,IAAI,CAAC,OAAO,EAAE;gBACV,OAAO,IAAI,CAAC;aACf;YACD,MAAM,GAAG,GAAG,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;YACpB,OAAO,IAAI,CAAC;QAChB,CAAC,EACD,EAAE,CACL,CAAC;QAEF,+EAA+E;QAC/E,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACtB,MAAM,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC,SAAS,CAAC,CAAC;YACrG,OAAO,YAAY,IAAmB,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;AAED,eAAe,0BAA0B,CAAC;IACtC,MAAM,EAA4B,uBAAuB;IACzD,EAAE,EAAE,wCAAwC;IAC5C,SAAS,EAAE,IAAI;CAClB,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport {\n    CacheType,\n    createObservableDataAction,\n    IAction,\n    IActionContext,\n    IActionInput,\n    ICommerceApiSettings,\n    IDictionary\n} from '@msdyn365-commerce/core';\nimport { getByIdsAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport { SimpleProduct } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';\n\nimport { getProductImageUrls } from '../utils/product-list-utils';\n\nconst buildCacheKey = (base: string, apiSettings: ICommerceApiSettings): string => {\n    return `${base}-chanId:${apiSettings.channelId}-catId:${apiSettings.catalogId}`;\n};\n\n/**\n * Product Input\n */\nexport class ProductInput implements IActionInput {\n    public productId: number;\n    public channelId: number;\n    private apiSettings: ICommerceApiSettings;\n\n    constructor(productId: number | string, apiSettings: ICommerceApiSettings) {\n        this.apiSettings = apiSettings;\n        this.productId = +productId;\n        this.channelId = apiSettings.channelId;\n    }\n\n    public getCacheKey = () => buildCacheKey(`RecordId-${this.productId.toString()}`, this.apiSettings);\n    public getCacheObjectType = () => 'SimpleProduct';\n    public dataCacheType = (): CacheType => 'application';\n}\n\n/**\n * Calls the Retail API and returns the product based on the passed ProductInput\n */\nexport async function getSimpleProductsAction(inputs: ProductInput[], ctx: IActionContext): Promise<SimpleProduct[]> {\n    if (!inputs || !Array.isArray(inputs) || inputs.length === 0) {\n        ctx.trace('[getSimpleProductsAction] Invalid or empty inputs passed.');\n        return [];\n    }\n\n    const productIdMapping: IDictionary<number> = {};\n    const productIds = inputs.map((input, idx) => {\n        productIdMapping[input.productId] = idx;\n        return input.productId;\n    });\n\n    return getByIdsAsync({ callerContext: ctx }, inputs[0].channelId, productIds).then(products => {\n        if (!products) {\n            return [];\n        }\n        const mappedProducts = (<SimpleProduct[]>getProductImageUrls(products, ctx.requestContext.apiSettings)).reduce(\n            (memo: SimpleProduct[], product: SimpleProduct | undefined) => {\n                if (!product) {\n                    return memo;\n                }\n                const idx = productIdMapping[product.RecordId];\n                memo[idx] = product;\n                return memo;\n            },\n            []\n        );\n\n        // NOTE: <ZAFINE> This is not an ideal fix, but will resolve all current issues\n        return inputs.map(input => {\n            const foundProduct = mappedProducts.find(product => product && product.RecordId === input.productId);\n            return foundProduct || <SimpleProduct>{};\n        });\n    });\n}\n\nexport default createObservableDataAction({\n    action: <IAction<SimpleProduct[]>>getSimpleProductsAction,\n    id: '@msdyn365-commerce/get-simple-products',\n    isBatched: true\n});\n"]}