import { getCacheKey } from '../utils/link-utils';
/**
 * Input Class for ProductLink related actions
 */
export class ProductLinkInput {
    constructor(apiSettings, categoryId, productId) {
        this.getCacheKey = () => `${getCacheKey(this.apiSettings)}-${this.categoryId}-${this.productId}`;
        this.getCacheObjectType = () => 'ProductLink';
        this.dataCacheType = () => 'application';
        this.categoryId = categoryId;
        this.productId = productId;
        this.channelId = apiSettings.channelId;
        this.apiSettings = apiSettings;
    }
}
/**
 * Input Class for CategoryLink related actions
 */
export class CategoryLinkInput {
    constructor(apiSettings, categoryId) {
        this.getCacheKey = () => `${getCacheKey(this.apiSettings)}-${this.categoryId}`;
        this.getCacheObjectType = () => 'CategoryLink';
        this.dataCacheType = () => 'application';
        this.categoryId = categoryId;
        this.channelId = apiSettings.channelId;
        this.apiSettings = apiSettings;
    }
}
// Enum Representing all supported ProductList types
export var ProductListType;
(function (ProductListType) {
    ProductListType[ProductListType["algo"] = 0] = "algo";
    ProductListType[ProductListType["editorial"] = 1] = "editorial";
    ProductListType[ProductListType["productByCategory"] = 2] = "productByCategory";
    ProductListType[ProductListType["productBySearch"] = 3] = "productBySearch";
    ProductListType[ProductListType["recommendation"] = 4] = "recommendation";
    ProductListType[ProductListType["relatedProducts"] = 5] = "relatedProducts";
})(ProductListType || (ProductListType = {}));
/**
 * Input Class for ProductList related actions
 */
export class ProductListInput {
    constructor(listMetadata, actionContext) {
        this.getCacheKey = () => this._cacheKey;
        this.getCacheObjectType = () => this._cacheObjectType;
        this.dataCacheType = () => this._cacheType;
        const requestContext = actionContext.requestContext;
        this.listMetadata = listMetadata;
        this.catalogId = requestContext.apiSettings.catalogId;
        this.channelId = requestContext.apiSettings.channelId;
        this._cacheObjectType = `ProductList-${listMetadata.listType}`;
        const query = requestContext.query || {};
        const skipToken = query.skip;
        const context = JSON.stringify(requestContext.urlTokens);
        const locale = actionContext.requestContext.locale || 'unknown';
        const baseCacheKey = `${this.channelId}-${this.catalogId}-${locale}-${JSON.stringify(listMetadata)}-${skipToken || ''}`;
        switch (ProductListType[listMetadata.listType]) {
            case ProductListType.productBySearch:
                // application cache if not reading from context
                this._cacheType = listMetadata.searchText ? 'application' : 'request';
                this._cacheKey = listMetadata.searchText ? baseCacheKey : `${baseCacheKey}-${query.q || ''}`;
                break;
            case ProductListType.productByCategory:
                this._cacheType = 'application';
                this._cacheKey = listMetadata.categoryIds && listMetadata.categoryIds.length ? baseCacheKey : `${baseCacheKey}-${context}`;
                break;
            case ProductListType.relatedProducts:
                this._cacheType = 'application';
                this._cacheKey = listMetadata.productIds && listMetadata.productIds.length ? baseCacheKey : `${baseCacheKey}-${context}`;
                break;
            case ProductListType.editorial:
            case ProductListType.algo:
            case ProductListType.recommendation:
            default:
                this._cacheType = listMetadata.includeCart || listMetadata.personalization ? 'request' : 'application';
                this._cacheKey = `${baseCacheKey}-${context}`;
        }
    }
}
//# sourceMappingURL=hydrator-action-inputs.js.map