import { hydrateLink } from './link-hydrator';
import { hydrateProductList } from './product-list-hydrator';
const TYPE_KEY = 'type';
const LIST_TYPE_KEY = 'listType';
/**
 * Recusrively traverses a module's config properties to find link/list types to transform
 *
 * @param obj The current object
 * @param context The current action context
 */
const searchForComplexType = (obj, context) => {
    const promisesArray = [];
    if (!obj) {
        return promisesArray;
    }
    if (Array.isArray(obj)) {
        for (let i = 0; i < obj.length; i++) {
            promisesArray.push(...searchForComplexType(obj[i], context));
        }
    }
    else if (typeof obj === 'object' && obj) {
        const children = Object.keys(obj);
        // Link scenario ('type' is defined)
        if (obj[TYPE_KEY]) {
            promisesArray.push(hydrateLink(obj, context));
            // ProductList scenario ('list_type') is defined
        }
        else if (obj[LIST_TYPE_KEY]) {
            promisesArray.push(hydrateProductList(obj, context));
        }
        else if (children.length > 0) {
            for (let i = 0; i < children.length; i++) {
                promisesArray.push(...searchForComplexType(obj[children[i]], context));
            }
        }
    }
    return promisesArray;
};
/**
 * Entry point, processes a page response and looks for link and list types
 * to transform
 *
 * @param pageResponse The inital page response
 * @param context The current action context
 */
export const processComplexDataTypes = async (lazyloadAllDataActions, processType, pageSlots, context) => {
    const promisesArray = processComplexDataTypesAsync(lazyloadAllDataActions, processType, pageSlots, context);
    if (promisesArray) {
        await Promise.all(promisesArray);
    }
};
// tslint:disable-next-line: cyclomatic-complexity
export const processComplexDataTypesAsync = (lazyLoadAllDataActions, processType, pageSlots, context) => {
    if (pageSlots && pageSlots.length) {
        const promisesArray = [];
        let lazyLoadAllModuleQueryString; // Query string switch to lazyLoad all modules
        const requestContext = context.requestContext;
        const requestContextFeatures = requestContext.features;
        const clientRenderModules = 'clientRender_modules';
        const clientRenderAllModuleQueryString = 'client_render_all_modules';
        // Feature switch for lazyLoading render and data action currenlty for product collection module
        let lazyLoadModuleFeature = requestContextFeatures[clientRenderModules];
        // Query param to lazyLoad all modules
        if (requestContext.query && requestContext.query.clientRenderAllModuleQueryString) {
            lazyLoadAllModuleQueryString = requestContext.query[clientRenderAllModuleQueryString];
        }
        // If request is coming from the editor then, turn off all lazyloading feature
        if (requestContext.params && requestContext.params.isEditor && requestContext.params.isEditor === true) {
            lazyLoadModuleFeature = false;
            lazyLoadAllModuleQueryString = 'false';
            lazyLoadAllDataActions = false;
        }
        for (let i = 0; i < pageSlots.length; i++) {
            const currModule = pageSlots[i];
            const currModuleConfig = currModule.config;
            let clientRenderConfigSwitch; // Module config switch for lazyLoading render and data action for product collection module
            if (typeof currModuleConfig === 'object' && currModuleConfig) {
                lazyLoadAllModuleQueryString === 'true' ? (currModuleConfig[`clientRender`] = true) : clientRenderConfigSwitch;
                if (currModuleConfig.hasOwnProperty('clientRender')) {
                    // When the lazyLoading feature switch is false, turn the lazyloading config switch to false
                    if (lazyLoadModuleFeature === false) {
                        currModuleConfig[`clientRender`] = false;
                    }
                    clientRenderConfigSwitch = currModuleConfig[`clientRender`];
                }
            }
            if ((lazyLoadAllDataActions || clientRenderConfigSwitch) && processType === "client" /* client */) {
                // When lazyLoad_all feature switch is true or lazyload Module config switch is true and processComplexDataType call is from client, do hydration
                promisesArray.push(...searchForComplexType(currModuleConfig, context));
            }
            else if (!lazyLoadAllDataActions && !clientRenderConfigSwitch && processType === "server" /* server */) {
                // When lazyLoad_all feature switch is OFF, lazyload Module config switch is OFF and processComplexDataType call is from server, do hydration
                promisesArray.push(...searchForComplexType(currModuleConfig, context));
            }
        }
        // tslint:disable-next-line: no-floating-promises
        context.runAllActionsInQueue();
        return promisesArray;
    }
};
//# sourceMappingURL=process-page-response.js.map