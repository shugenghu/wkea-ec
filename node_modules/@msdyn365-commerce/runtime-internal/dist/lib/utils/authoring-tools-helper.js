import { CoreContext, onDrag as _onDrag, removePlaceholder as _removePlaceholder, setDraggable as _setDraggable } from '@msdyn365-commerce/core-internal';
import { generateEventNameHash } from '@msdyn365-commerce/telemetry-internal';
import { cloneDeep as _cloneDeep, get as _get, isEqual as _isEqual, pullAt as _pullAt, remove as _remove, set as _set } from 'lodash';
import { toJS } from 'mobx';
import React from 'react';
import ReactDOM from 'react-dom';
import { SafeRenderModule } from '../components/safe-render-module';
import { LAYOUT_MOUNT_POINT, MODULE_ACTION_KEY, MODULE_CACHE_KEY, MODULE_CONFIG_ERRORS_KEY, MODULE_CONFIG_KEY, MODULE_DATA_KEY, MSDYN365_WYSIWYG_CANADDMODULE, MSDYN365_WYSIWYG_DISABLED_PROPS } from '../consts';
import { loadData } from '../data/load-data';
import { hydrateProductList } from '../hydrators/product-list-hydrator';
import { disableChildModules, findModule } from '../store/authoring-edit-helper';
import { constructVideoInformation, constructViewportInformationForImage, deleteCacheEntriesForModuleId, getPropertyFromDataIAttribute, moveArrayItem, resolveTypesInConfig } from './authoring-tools-helper-utils';
import { getFlattenedListOfModulesForFragment } from './get-modules-flat-list';
var MODULE_OPERATION;
(function (MODULE_OPERATION) {
    MODULE_OPERATION[MODULE_OPERATION["Find"] = 0] = "Find";
    MODULE_OPERATION[MODULE_OPERATION["Remove"] = 1] = "Remove";
    MODULE_OPERATION[MODULE_OPERATION["Add"] = 2] = "Add";
    MODULE_OPERATION[MODULE_OPERATION["Move"] = 3] = "Move";
})(MODULE_OPERATION || (MODULE_OPERATION = {}));
/**
 * Provides the CMS tooling a way to update the CMS content
 */
export class AuthoringToolsHelper {
    constructor(actionContext, themeSettings, coreContext, pageContext, moduleTelemetry) {
        this.didFindModule = false;
        this.enableAuthoringRemoveAndAddModule = false;
        this.cache = pageContext.requestCache;
        this.actionContext = actionContext;
        this.themeSettings = themeSettings;
        this.coreContext = coreContext;
        this.pageContext = pageContext;
        this.moduleTelemetry = moduleTelemetry;
        this.enableAuthoringRemoveAndAddModule =
            coreContext.request.features && coreContext.request.features.enableAuthoringRemoveAndAddModule;
    }
    initRenderingHelper(renderingHelper) {
        this.renderingHelper = renderingHelper;
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.updateModule(
     *  "HELLO-WORLD__0",
     *  {
     *     "data": {
     *          "myTitle": {"$type":"heading","_id":"xekqxgmtadc", "text":"Hello World Heading"},
     *          "myText": {"$type":"simpleText","_id":"hkd849ztr3x", "text":"Hello............"}
     *      },
     *     "config": {
     *          showText: "test 123"
     *     },
     *     "configErrors": []
     * })
     */
    updateModule(moduleId, content) {
        if (!moduleId || !moduleId.length) {
            // TODO: Log to telemetry
            return false;
        }
        if (!content || (!content.data && !content.config)) {
            return false;
        }
        let updated = false;
        if (content.data) {
            updated = this.cache.put({ typeName: MODULE_DATA_KEY, key: moduleId }, { item: content.data });
        }
        if (content.config) {
            updated = this.cache.put({ typeName: MODULE_CONFIG_KEY, key: moduleId }, { item: content.config }) || updated;
        }
        if (content.configErrors) {
            updated = this.cache.put({ typeName: MODULE_CONFIG_ERRORS_KEY, key: moduleId }, { item: content.configErrors });
        }
        return updated;
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.updateModuleConfig(
     *  "HELLO-WORLD__0",
     *  {
     *          showText: "test 123"
     * })
     */
    updateModuleConfig(moduleId, config, configErrors) {
        if (!moduleId || !moduleId.length || !config || !configErrors) {
            // TODO: Log to telemetry
            console.log('configErrors is a required argument to updateModuleConfig');
            return false;
        }
        // In case of errors, first update module config errors so that the module does not try to render
        // In the case of no errors, put the valid config object in first so that module does render
        if (configErrors.length > 0) {
            this.updateModuleConfigErrors(moduleId, configErrors);
            return this.cache.put({ typeName: MODULE_CONFIG_KEY, key: moduleId }, { item: config });
        }
        else {
            this.cache.put({ typeName: MODULE_CONFIG_KEY, key: moduleId }, { item: config });
            return this.updateModuleConfigErrors(moduleId, configErrors);
        }
    }
    updateModuleClassName(moduleId, propertyName, oldValue, newValue, configErrors) {
        if (!moduleId || !moduleId.length || !propertyName || !configErrors) {
            return false;
        }
        const moduleConfig = this.cache.get({ typeName: MODULE_CONFIG_KEY, key: moduleId });
        if (!moduleConfig) {
            return false;
        }
        let moduleConfigItem = moduleConfig.item;
        if (!moduleConfigItem) {
            moduleConfigItem = {};
        }
        const className = _get(moduleConfigItem, 'className', '');
        const classNameParts = className.split(' ');
        let oldPropertyKeyValue = `${propertyName}__${oldValue}`;
        let newPropertyKeyValue = `${propertyName}__${newValue}`;
        // If property is class name root, set the old and new property keys to the old and new class name root values.
        // Otherwise, leave it as <propertyName>__<value> and update the config item property.
        if (propertyName === 'className') {
            oldPropertyKeyValue = oldValue;
            newPropertyKeyValue = newValue;
        }
        else {
            _set(moduleConfigItem, propertyName, newValue);
        }
        // If new value is set, replace the old <propertyName>__<value> pair with the new one.
        // Otherwise, push the new <propertyName>__<value> pair to the end of class name.
        if (newValue) {
            const partIdx = classNameParts.findIndex(part => part.includes(oldPropertyKeyValue));
            if (partIdx >= 0) {
                classNameParts[partIdx] = newPropertyKeyValue;
            }
            else {
                classNameParts.push(newPropertyKeyValue);
            }
        }
        else {
            // If new value is not set, remove old <propertyName>__<value> pair from class name.
            _remove(classNameParts, part => part.includes(oldPropertyKeyValue));
        }
        // Update class name according to all its parts.
        _set(moduleConfigItem, 'className', classNameParts.join(' '));
        return this.updateModuleConfig(moduleId, moduleConfigItem, configErrors);
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.updateModuleConfigErrors(
     *  "HELLO-WORLD__0",
     *  [{
     *          message: "heading_text is not configured",
     *          property: "heading_text"
     *  }])
     */
    updateModuleConfigErrors(moduleId, configErrors) {
        if (!moduleId || !moduleId.length) {
            // TODO: Log to telemetry
            return false;
        }
        return this.cache.put({ typeName: MODULE_CONFIG_ERRORS_KEY, key: moduleId }, { item: configErrors });
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.updateModuleImage(
     *  "HELLO-WORLD__0",
     *  "['images', '0', 'primaryImage'"],
     *   {
     *       "source": "https://image-url-here",
     *       "altText": "alt-text",
     *       "$type": "image",
     *       "imageQuality": 80
     *       "title": "image title"
     *  }, []);
     */
    updateModuleImage(moduleId, pathToField, imageData, configErrors = []) {
        if (!moduleId || !moduleId.length) {
            return false;
        }
        const moduleConfig = this.cache.get({ typeName: MODULE_CONFIG_KEY, key: moduleId });
        // @ts-ignore typename exists on the cache entry for module
        const moduleType = this.cache.get({ typeName: MODULE_CACHE_KEY, key: moduleId })?.item?.typeName;
        if (!moduleConfig) {
            return false;
        }
        let moduleConfigItem = toJS(moduleConfig.item);
        if (!moduleConfigItem) {
            moduleConfigItem = {};
        }
        // @ts-ignore - this is known property that tools will set for the module layout
        const moduleLayout = moduleConfig.item?.msdyn365__moduleLayout;
        // Construct the viewport image settings information using the current theme and module
        const viewportInfo = constructViewportInformationForImage(moduleType, moduleLayout, pathToField, imageData.imageQuality, this.themeSettings, imageData.focalRegion, imageData.cropRegions, imageData.format).viewports;
        _set(moduleConfigItem, pathToField, {
            src: imageData.source,
            $type: imageData.$type,
            altText: imageData.altText,
            title: imageData.title,
            imageSettings: {
                quality: imageData.imageQuality,
                viewports: viewportInfo
            }
        });
        return this.updateModuleConfig(moduleId, moduleConfigItem, configErrors);
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.updateModuleVideo(
     *  "HELLO-WORLD__0",
     *  "['videos', '0', 'primaryVideo'"],
     *   {
     *       binaryReferences: [
     *           {
     *           $type: 'videoBinaryReference',
     *           alias: '1001',
     *           contentType: 'video/mp4',
     *           extension: '.mp4',
     *           sourceHref: 'https://streaming-west-prod.cms.commerce.dynamics.com/0c38a35a-159e-4603-9ad6-82b721f07274/1dc55c98-7d32-4ab8-9be9-5da298b4ce81.mp4',
     *           format: '1001',
     *           clientHref: 'https://streaming-west-prod.cms.commerce.dynamics.com/0c38a35a-159e-4603-9ad6-82b721f07274/1dc55c98-7d32-4ab8-9be9-5da298b4ce81.mp4'
     *           },
     *       title: 'Homepage video',
     *       fileName: '7e181ddf-1d45-497c-ba99-d17af574_650.mp4',
     *       playtime: 13,
     *       thumbnail: {
     *           $type: 'image',
     *           source: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/phpjqgrmtp/imageFileData/MAkOl',
     *           title: 'Homepage video Thumbnail',
     *           imageQuality: 70,
     *       },
     *       interactiveTriggersEnabled: false
     *       }, []);
     */
    updateModuleVideo(moduleId, pathToField, videoData, configErrors = []) {
        if (!moduleId || !moduleId.length) {
            return false;
        }
        const moduleConfig = this.cache.get({ typeName: MODULE_CONFIG_KEY, key: moduleId });
        if (!moduleConfig) {
            return false;
        }
        let moduleConfigItem = toJS(moduleConfig.item);
        if (!moduleConfigItem) {
            moduleConfigItem = {};
        }
        // Construct the viewport image settings information using the current theme and module
        const video = constructVideoInformation(videoData, moduleId);
        _set(moduleConfigItem, pathToField, video);
        return this.updateModuleConfig(moduleId, moduleConfigItem, configErrors);
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.updateModuleProductCollection(
     *  "HELLO-WORLD__0",
     *  "['productCollection', 'products'"],
     *   {
     *       "listType": "recommendation",
     *       "recommendationListId": "fbt"
     *  });
     */
    async updateModuleProductCollection(moduleId, pathToField, listMetadata, configErrors = []) {
        if (!moduleId || !moduleId.length) {
            return false;
        }
        const moduleConfig = this.cache.get({ typeName: MODULE_CONFIG_KEY, key: moduleId });
        if (!moduleConfig) {
            return false;
        }
        let moduleConfigItem = toJS(moduleConfig.item);
        if (!moduleConfigItem) {
            moduleConfigItem = {};
        }
        await hydrateProductList(listMetadata, this.actionContext);
        if (!listMetadata.products) {
            return false;
        }
        _set(moduleConfigItem, pathToField, listMetadata);
        return this.updateModuleConfig(moduleId, moduleConfigItem, configErrors);
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.removeModule("HELLO-WORLD__0", []);
     * window._msdyn365.authoringHelper.removeModule("DEFAULT-CONTAINER__0", ["HERO__0", "HERO__1"]);
     */
    removeModule(moduleId, childrenIds, removeFromPageFragment = false) {
        const pageRoot = this._checkForFeatureFlagAndGetPageRoot(removeFromPageFragment);
        if (!pageRoot) {
            return false;
        }
        // Remove module from the pageRoot
        this._findModule(pageRoot, moduleId, MODULE_OPERATION.Remove, {});
        // Remove module and its children from _moduleList
        // @ts-ignore _moduleList is a private property of pageContext
        this.pageContext._moduleList = this.pageContext._moduleList.filter(obj => {
            return obj.id !== moduleId && childrenIds.indexOf(obj.id) === -1;
        });
        deleteCacheEntriesForModuleId(moduleId, this.cache);
        for (let i = 0; i < childrenIds.length; i++) {
            deleteCacheEntriesForModuleId(childrenIds[i], this.cache);
        }
        return this._renderPage(moduleId);
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.moveModule("HELLO-WORLD__0", "DEFAULT-CONTAINER__0", 0);
     *
     * If slot name is not provided the module will be moved within its current slot and cannot be moved to a new parent
     */
    moveModule(moduleId, parentId, newIndex, moduleSlotName, moveFromPageFragment = false) {
        const pageRoot = this._checkForFeatureFlagAndGetPageRoot(moveFromPageFragment);
        if (!pageRoot) {
            return false;
        }
        // If no slot name is provided move the module within its own slot
        if (!moduleSlotName) {
            this._findModule(pageRoot, moduleId, MODULE_OPERATION.Move, { newIndex: newIndex });
        }
        else {
            // Find and grab reference to the module that is supposed to be moved
            this._findModule(pageRoot, moduleId, MODULE_OPERATION.Find, { deleteAfterFind: true });
            const moduleToMove = this.foundModule;
            if (!moduleToMove) {
                console.log(`Unable to find module with id ${moduleId} in page structure. Aborting move.`);
                return false;
            }
            // Now find and grab a reference to the parent to which this module should be moved to
            this._findModule(pageRoot, parentId, MODULE_OPERATION.Find, {});
            const parentModule = this.foundModule;
            if (!parentModule) {
                console.log(`Unable to find parent module with id ${parentId} in page structure. Aborting move.`);
                return false;
            }
            // Move module to new parent
            // If the slot doesn't exist, create it
            if (!parentModule.modules || !parentModule.modules[moduleSlotName]) {
                _set(parentModule, ['modules', moduleSlotName], []);
            }
            moveArrayItem(parentModule.modules[moduleSlotName], newIndex, moduleToMove);
        }
        try {
            return this._renderPage(moduleId);
        }
        catch (err) {
            console.log(`Uncaught error when moving module ${moduleId}`);
            console.log(err);
            return false;
        }
    }
    /**
     * Helper function used to sync the placeholder between rendering and tools in drag/drop scenarios
     * @param parentId module id where the module/container needs to be dropped
     * @param index index position for the module drop
     * @param slotId slot id where the module/container needs to be dropped
     */
    onDrag(parentId, index, slotId, moduleId) {
        _onDrag(parentId, index, slotId, moduleId);
    }
    /**
     * Helper function used to set modules as draggable in drag/drop scenarios.
     * @param sourceModuleId The module to be set as draggable.
     */
    setDraggable(sourceModuleId) {
        _setDraggable(sourceModuleId, LAYOUT_MOUNT_POINT);
    }
    /**
     * Helper function used to remove the placeholder between rendering and tools in drag/drop scenarios
     */
    removePlaceholder() {
        _removePlaceholder();
    }
    /**
     * usage: _msdyn365.authoringHelper.addModule('hero', 'hero__2', 'primaryArea__0', {config:{moduleConfig: 'config value'}});
     */
    async addModule(moduleType, moduleId, parentId, content, moduleSlotName = 'content', addIndex, addFromPageFragment = false, imagePaths) {
        if (content.config && typeof content.config === 'object' && imagePaths && imagePaths.length > 0) {
            this._setImageSettingsForDefaultImage(content.config, moduleType, imagePaths);
        }
        // Construct the module object that needs to be added
        const moduleToAdd = {
            typeName: moduleType,
            id: moduleId,
            modules: undefined,
            config: content.config,
            data: {},
            dataActions: [],
            friendlyName: content.friendlyName,
            configErrors: content.configErrors
        };
        return this._addModuleFragment(moduleId, parentId, moduleToAdd, false, moduleSlotName, addIndex, addFromPageFragment);
    }
    async addFragment(fragmentId, parentId, pageFragment, moduleSlotName = 'content', addIndex, addFromPageFragment = false) {
        return this._addModuleFragment(fragmentId, parentId, pageFragment, true, moduleSlotName, addIndex, addFromPageFragment);
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.updateModuleData(
     *  "HELLO-WORLD__0",
     *  {
     *      "myTitle": {"$type":"heading","_id":"xekqxgmtadc", "text":"Hello World Heading"},
     *      "myText": {"$type":"simpleText","_id":"hkd849ztr3x", "text":"Hello............"}
     *  })
     */
    updateModuleData(moduleId, data) {
        if (!moduleId || !moduleId.length || !data) {
            // TODO: Log to telemetry
            return false;
        }
        return this.cache.put({ typeName: MODULE_DATA_KEY, key: moduleId }, { item: data });
    }
    updateDisabledProperties(moduleName, disabledProperties, isFragment) {
        const cacheKey = { typeName: MSDYN365_WYSIWYG_DISABLED_PROPS, key: moduleName };
        if (_isEqual(this.cache.getValue(cacheKey), disabledProperties)) {
            // skip re-render if the module already has disabled properties
            return;
        }
        this.cache.put(cacheKey, { item: disabledProperties });
        // In case of fragment, disable all child modules
        if (!!isFragment) {
            const currentModule = findModule(moduleName, this.pageContext.pageRoot);
            if (currentModule) {
                disableChildModules(currentModule, this.cache);
            }
        }
    }
    /**
     * Helper function used to update the slots available in a container to add modules
     * @param moduleId module id thats being updated
     * @param addSlots lists of slots in the module where modules can be added
     */
    updateAddModuleProperties(moduleId, addSlots) {
        this.cache.put({ typeName: MSDYN365_WYSIWYG_CANADDMODULE, key: moduleId }, { item: addSlots });
    }
    getDisabledProperties(moduleName) {
        return this.cache.getValue({ typeName: MSDYN365_WYSIWYG_DISABLED_PROPS, key: moduleName }) || [];
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.getModuleConfig("HELLO-WORLD__0");
     */
    getModuleConfig(moduleId) {
        if (!moduleId || !moduleId.length) {
            // TODO: Log to telemetry
            return null;
        }
        const config = this.cache.get({ typeName: MODULE_CONFIG_KEY, key: moduleId });
        if (config && config.item) {
            return toJS(config.item);
        }
        return null;
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.getModuleConfigErrors("HELLO-WORLD__0");
     */
    getModuleConfigErrors(moduleId) {
        if (!moduleId || !moduleId.length) {
            // TODO: Log to telemetry
            return null;
        }
        const configErrors = this.cache.get({ typeName: MODULE_CONFIG_ERRORS_KEY, key: moduleId });
        if (configErrors && configErrors.item) {
            return toJS(configErrors.item);
        }
        return null;
    }
    /**
     * usage:
     * window._msdyn365.authoringHelper.getModuleData("HELLO-WORLD__0");
     */
    getModuleData(moduleId) {
        if (!moduleId || !moduleId.length) {
            // TODO: Log to telemetry
            return null;
        }
        const data = this.cache.get({ typeName: MODULE_DATA_KEY, key: moduleId });
        if (data && data.item) {
            return toJS(data.item);
        }
        return null;
    }
    /**
     * This function is deprecated please use the updated function
     * getExperimentEventHashesForModule
     * @deprecated
     * @param moduleId
     */
    getExperimentEventIdsForModule(moduleId) {
        const plainEventIds = {};
        const eventNameToHashes = this.getExperimentEventHashesForModule(moduleId);
        Object.keys(eventNameToHashes).forEach((key) => {
            plainEventIds[key] = eventNameToHashes[key].map((value) => value.eventIdName);
        });
        return plainEventIds;
    }
    /**
     * Returns mapping of moduleId to an array of objects containing exp event name (
     * and the SHA-256 hash of its friendly name (used for the actual track event calls)
     * @param moduleId
     */
    getExperimentEventHashesForModule(moduleId) {
        const moduleIdToEventIds = {};
        const moduleIds = [moduleId];
        // Find the element in the DOM
        const parentElement = document.querySelector(`[data-i*="id:${moduleId}"]`);
        if (!parentElement) {
            console.warn(`Unable to find module ${moduleId} on the page`);
            return moduleIdToEventIds;
        }
        // Determine if there are any children modules and those to the list to search for experiment event ids
        parentElement.querySelectorAll(`[data-i*="id:"]`).forEach((moduleElement) => {
            const dataIAttribute = moduleElement.getAttribute('data-i');
            if (dataIAttribute) {
                const childModuleId = getPropertyFromDataIAttribute(dataIAttribute, 'id');
                if (childModuleId) {
                    moduleIds.push(childModuleId);
                }
            }
        });
        for (let i = 0; i < moduleIds.length; i++) {
            const currentModuleId = moduleIds[i];
            // Selects a module with module id that has the data-exp-event-id attribute on its element or on one of its child elements
            const selector = `[data-i*="id:${currentModuleId},"][data-exp-event-id],[data-i*="id:${currentModuleId},"] [data-exp-event-id]`;
            const elements = document.querySelectorAll(selector);
            const expEventIds = [];
            for (let j = 0; j < elements.length; j++) {
                const element = elements[j];
                const eventId = element.getAttribute('data-exp-event-id');
                if (eventId) {
                    const hash = generateEventNameHash(eventId);
                    expEventIds.push({ eventIdName: eventId, eventIdHash: hash });
                }
            }
            moduleIdToEventIds[currentModuleId] = expEventIds;
        }
        return moduleIdToEventIds;
    }
    _checkForFeatureFlagAndGetPageRoot(addFromPageFragment = false) {
        if (!this.enableAuthoringRemoveAndAddModule) {
            console.log(`Authoring helper functionality for add/remove/move module is turned off. Please turn on 'enableAuthoringRemoveAndAddModule' feature to use this API`);
            return undefined;
        }
        const pageRoot = this._getPageRoot(addFromPageFragment);
        if (!pageRoot) {
            return undefined;
        }
        return pageRoot;
    }
    _getPageRoot(addFromPageFragment = false) {
        const pageRoot = this.pageContext.pageRoot;
        if (pageRoot) {
            const body = pageRoot.modules?.body;
            if (!body && addFromPageFragment) {
                return [pageRoot];
            }
            return body;
        }
    }
    /**
     * Renders the page again with the updated page structure
     */
    _renderPage(moduleId) {
        // Used to generate unique keys so that even reused module ID will still trigger re-render
        const uniqueTime = new Date().getTime();
        // Get the page structure to pass on to SafeRenderModule
        const pageRoot = this.pageContext.pageRoot;
        const body = pageRoot.modules && pageRoot.modules.body;
        const props = body && body.length > 0 ? body[0] : pageRoot;
        // Re-hydrate page with new page structure
        ReactDOM.hydrate(React.createElement(CoreContext.Provider, { value: this.coreContext }, React.createElement(SafeRenderModule, {
            ...props,
            context: this.coreContext,
            key: `${moduleId}:${uniqueTime}`,
            telemetry: this.moduleTelemetry,
            internalTelemetry: window._msdyn365.telemetry,
            store: this.pageContext
        })), document.getElementById(LAYOUT_MOUNT_POINT));
        return true;
    }
    _findModule(obj, moduleId, method, options) {
        this.didFindModule = false;
        this.foundModule = undefined;
        this._findModuleHelper(obj, moduleId, method, options);
    }
    // Recurses through the pageRoot structure to find and either remove the module and all of its children
    // or add a module depending on whether addModule is passed in
    _findModuleHelper(obj, moduleId, method, options) {
        if (!obj || this.didFindModule) {
            return;
        }
        if (Array.isArray(obj)) {
            for (let i = 0; i < obj.length; i++) {
                if (obj[i].id && obj[i].id === moduleId) {
                    // Remove module scenario
                    if (method === MODULE_OPERATION.Remove) {
                        _pullAt(obj, i);
                        // Add/Move module scenario
                    }
                    else if (method === MODULE_OPERATION.Add) {
                        this._processAddModule(obj[i], options);
                        // Find module scenario
                    }
                    else if (method === MODULE_OPERATION.Find) {
                        // If delete after find is set, remove the element
                        if (options.deleteAfterFind) {
                            this.foundModule = _cloneDeep(obj[i]);
                            _pullAt(obj, i);
                        }
                        else {
                            this.foundModule = obj[i];
                        }
                    }
                    else if (method === MODULE_OPERATION.Move && options.newIndex !== undefined) {
                        // Moves a module within its own slot
                        const itemToMove = _pullAt(obj, i);
                        moveArrayItem(obj, options.newIndex, itemToMove[0]);
                    }
                    this.didFindModule = true;
                    return;
                }
                this._findModuleHelper(obj[i], moduleId, method, options);
            }
        }
        else if (typeof obj === 'object' && obj) {
            const children = Object.keys(obj);
            if (children.length > 0) {
                for (let i = 0; i < children.length; i++) {
                    this._findModuleHelper(obj[children[i]], moduleId, method, options);
                }
            }
        }
    }
    _processAddModule(parentModule, options) {
        if (!options.moduleSlotName) {
            options.moduleSlotName = 'content';
        }
        if (!parentModule.modules || !parentModule.modules[options.moduleSlotName]) {
            parentModule.modules = {};
            parentModule.modules[options.moduleSlotName] = [];
        }
        if (options.newIndex) {
            parentModule.modules[options.moduleSlotName].splice(options.newIndex, 0, options.moduleToAdd);
        }
        else {
            parentModule.modules[options.moduleSlotName].push(options.moduleToAdd);
        }
        this.foundModule = parentModule;
    }
    async _addModuleFragment(fragmentId, parentId, pageFragment, isFragmentType, moduleSlotName = 'content', addIndex, addFromPageFragment = false) {
        const pageRoot = this._checkForFeatureFlagAndGetPageRoot(addFromPageFragment);
        if (!pageRoot) {
            return false;
        }
        // Get flattened list of modules
        // If adding a fragment type pass along the fragment id to prepend this id to every module id inside the fragment to avoid any cache collisions
        // with existing modules on the page
        const flatListModules = getFlattenedListOfModulesForFragment(pageFragment, isFragmentType ? fragmentId : '');
        // Invoke the helper function to find the parent module and add the module(s) to the page structure
        this._findModule(pageRoot, parentId, MODULE_OPERATION.Add, {
            moduleSlotName: moduleSlotName,
            moduleToAdd: pageFragment,
            newIndex: addIndex
        });
        if (!this.foundModule) {
            throw new Error(`Unable to find parent module with id ${parentId}`);
        }
        // Add items to the cache for the new module(s)
        for (let i = 0; i < flatListModules.length; i++) {
            const curModule = flatListModules[i];
            this.cache.put({ typeName: MODULE_CACHE_KEY, key: curModule.id }, { item: { id: curModule.id, typeName: curModule.typeName } });
            // @ts-ignore - this is known property that tools will set for the module layout
            const moduleLayout = curModule.config?.msdyn365__moduleLayout;
            resolveTypesInConfig(curModule.config, curModule.id, curModule.typeName, moduleLayout, this.themeSettings);
            this.cache.put({ typeName: MODULE_CONFIG_KEY, key: curModule.id }, { item: curModule.config || {} });
            this.cache.put({ typeName: MODULE_CONFIG_ERRORS_KEY, key: curModule.id }, { item: curModule.configErrors || [] });
        }
        // Load any data actions that the new modules(s) are dependent on
        try {
            await loadData(flatListModules, this.pageContext.requestContext, window._msdyn365.telemetry, this.moduleTelemetry, this.cache, null);
            // @ts-ignore - Ignoring complaint that _moduleList is a private property of pageContext
            this.pageContext._moduleList.push(...flatListModules);
            // Put results of the data action into the cache for the module(s) that are being added
            for (let i = 0; i < flatListModules.length; i++) {
                const curModule = flatListModules[i];
                this.cache.put({ typeName: MODULE_DATA_KEY, key: curModule.id }, { item: curModule.data });
                this.cache.put({ typeName: MODULE_ACTION_KEY, key: curModule.id }, { item: curModule.dataActions });
            }
            // Finally, call render to render the new modules in context of the parent module
            try {
                return this._renderPage(fragmentId);
            }
            catch (err) {
                console.log(`Uncaught error when adding module/fragment: ${fragmentId}`);
                console.log(err);
                return false;
            }
        }
        catch (err) {
            console.log(`Error running load data when adding module/fragment: ${fragmentId}`);
            console.log(err);
            return false;
        }
    }
    _setImageSettingsForDefaultImage(moduleConfig, moduleType, imagePaths) {
        // @ts-ignore
        if (!moduleConfig || !moduleConfig.msdyn365__moduleLayout || !this.pageContext.requestContext.features.enableDefaultPlaceholder) {
            return;
        }
        imagePaths.forEach(pathArray => {
            const imageSettingPathArray = pathArray.concat('imageSettings');
            const imageSettings = _get(moduleConfig, imageSettingPathArray);
            // if there is no viewPort, add viewport.
            if (!imageSettings || !imageSettings.viewports) {
                // @ts-ignore
                const moduleLayout = moduleConfig.msdyn365__moduleLayout;
                const viewportInfo = constructViewportInformationForImage(moduleType, moduleLayout, pathArray, undefined, this.themeSettings).viewports;
                // disable this because imageSettings could be undefined.
                // tslint:disable-next-line:prefer-object-spread
                const newImageSettings = Object.assign({ viewports: viewportInfo }, imageSettings);
                _set(moduleConfig, imageSettingPathArray, newImageSettings);
            }
        });
    }
}
//# sourceMappingURL=authoring-tools-helper.js.map