{"version":3,"file":"ropc-auth-utils.js","sourceRoot":"","sources":["../../../src/utils/ropc-auth-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ILocalCredentials, ILocalCredentialsUser } from '@msdyn365-commerce/core-internal';\nimport axios from 'axios';\nimport qs from 'querystring';\n\nexport interface IUserCreds {\n    token: string;\n    customerAccountNumber?: string;\n}\n\n/**\n * Makes an ROPC (resource owner password credentials) auth flow request with the given mock user\n * to retrieve user access token and set signed in behavior during local development\n *\n * See https://docs.microsoft.com/en-us/azure/active-directory-b2c/configure-ropc?tabs=app-reg-ga for more information\n * @param credentials credentials object containing config information\n */\nexport const getUserInformationROPC = async (credentials: ILocalCredentials, user: string): Promise<IUserCreds | undefined> => {\n    // Construct the URL and request body\n    const ropcAuthUrl = constructRopcAuthUrl(credentials);\n    const chosenUser = getUserInfoFromCredentialsFile(credentials, user);\n    const ropcAuthRequestBody = constructRopcAuthRequestBody(credentials, chosenUser);\n\n    let ropcAuthRequest;\n    try {\n        ropcAuthRequest = await axios({\n            method: 'post',\n            url: ropcAuthUrl,\n            data: ropcAuthRequestBody,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        });\n    } catch (err) {\n        throw new Error(\n            `Access Token Fetch for user ${user} failed with status ${err.code} and error ${err.response}. Check B2C configuration steps.`\n        );\n    }\n    // Return access token if successful and set current user and expiry date\n    const authResult = ropcAuthRequest.data;\n    credentials.currentUser = user;\n    credentials.expiryDate = Math.floor(Date.now() / 1000) + parseInt(authResult.expires_in, 10);\n    credentials.accessToken = authResult.access_token;\n    credentials.customerAccountNumber = chosenUser.customerAccountNumber;\n\n    return { token: authResult.access_token, customerAccountNumber: chosenUser.customerAccountNumber };\n};\n\n/**\n * Constructs the URL to invoke the ROPC auth flow\n * @param credentials credentials object containing config information\n */\nconst constructRopcAuthUrl = (credentials: ILocalCredentials): string => {\n    if (!credentials.loginDomain) {\n        throw constructMissingInformationError('loginDomain');\n    }\n    if (!credentials.b2cTenant) {\n        throw constructMissingInformationError('b2cTenant');\n    }\n    if (!credentials.ropcUserFlowName) {\n        throw constructMissingInformationError('ropcUserFlowName');\n    }\n    return `https://${credentials.loginDomain}/${credentials.b2cTenant}.onmicrosoft.com/${credentials.ropcUserFlowName}/oauth2/v2.0/token`;\n};\n\n/**\n * Gets the user information (email, password, customerAccountNumber) from the credentials file\n *\n * @param credentials credentials object containing config information\n * @param user User to sign in as\n */\nconst getUserInfoFromCredentialsFile = (credentials: ILocalCredentials, user: string): ILocalCredentialsUser => {\n    // Find the user in the list of configured users\n    let chosenUser: ILocalCredentialsUser | undefined;\n    // If the mockUser query param is just set to true then use the default user\n    if (user === 'true' || user === 'default') {\n        user = 'default';\n        chosenUser = credentials.defaultUser;\n    } else {\n        // Otherwise search through additional configured users to look for user requested\n        const additionalUsers = credentials.additionalUsers;\n        for (let i = 0; i < additionalUsers.length; i++) {\n            if (additionalUsers[i].name === user) {\n                chosenUser = additionalUsers[i];\n            }\n        }\n    }\n    if (!chosenUser) {\n        if (user === 'default') {\n            throw new Error(`No default user configured in list of users credentials.json. Verify default user has been configured.`);\n        } else {\n            throw new Error(\n                `Requested user '${user}' was not found in the list of users configured in credentials.json. Verify user with name '${user}' exists.`\n            );\n        }\n    }\n    return chosenUser;\n};\n\n/**\n * Constructs the POST request body containing user information and scope to be made to the ROPC auth URL\n * to get user access token\n *\n * @param credentials credentials object containing config information\n * @param chosenUser User to sign in as\n */\nconst constructRopcAuthRequestBody = (credentials: ILocalCredentials, chosenUser: ILocalCredentialsUser): string => {\n    if (!credentials.nativeApplicationId) {\n        throw constructMissingInformationError('nativeApplicationId');\n    }\n    if (!credentials.userImpersonationScopeURL) {\n        throw constructMissingInformationError('userImpersonationScopeURL');\n    }\n    // Construct POST request body\n    return qs.stringify({\n        username: chosenUser.email,\n        password: chosenUser.password,\n        grant_type: 'password',\n        client_id: credentials.nativeApplicationId,\n        response_type: 'token id_token',\n        scope: `openid ${credentials.userImpersonationScopeURL}`\n    });\n};\n\n/**\n * Constructs an error indicating the ROPC flow was not able to run due to missing configuration missing\n * @param missingProperty The missing property\n */\nconst constructMissingInformationError = (missingProperty: string) => {\n    return new Error(`Unable to login with mock user. Missing property ${missingProperty} from credentials.json`);\n};\n"]}