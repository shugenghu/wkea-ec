{"version":3,"file":"platform-utils.js","sourceRoot":"","sources":["../../../src/utils/platform-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ActionContext } from '@msdyn365-commerce/action-internal';\nimport {\n    DEFAULT_EXPERIMENT_DATAFILE_TTL,\n    DEFAULT_EXPERIMENT_DATAFILE_TTR,\n    DEFAULT_EXPERIMENT_TTL,\n    DEFAULT_EXPERIMENT_TTR,\n    DEFAULT_GEOLOOKUP_TTL,\n    ICache,\n    ICacheItem,\n    ICacheKey,\n    ICacheSettings,\n    RequestCache\n} from '@msdyn365-commerce/cache-internal';\nimport {\n    EXPERIMENTATION_CACHE_TYPE,\n    EXPERIMENTATION_DATAFILE_CACHE_TYPE,\n    GEOLOOKUP_CACHE_TYPE,\n    IConnectorSettings,\n    IDictionary,\n    IPlatformSettings,\n    IRequestContext,\n    msdyn365Commerce\n} from '@msdyn365-commerce/core-internal';\nimport { AsyncResult, Category, ChannelConfiguration } from '@msdyn365-commerce/retail-proxy';\nimport { getCategoriesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/CategoriesDataActions.g';\nimport { getOrgUnitConfigurationAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/OrgUnitsDataActions.g';\nimport { getByIdAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport {\n    EVENT_VALIDATE_ROUTE_START,\n    EVENT_VALIDATE_ROUTE_STOP,\n    expAttributeRenderer,\n    GenericConsoleLogger,\n    IEventTime,\n    InternalTelemetry,\n    LogLevel,\n    PageLogger,\n    RetainLogger,\n    StaticTelemetry,\n    Telemetry\n} from '@msdyn365-commerce/telemetry-internal';\nimport { AppInsightsNodeLogger, TelemetryClient } from '@msdyn365-commerce/telemetry-internal/dist/lib/server';\nimport { safeReadJson, safeReadJsonSync } from '@msdyn365-commerce/utilities-internal';\nimport axios, { AxiosError, AxiosResponse } from 'axios';\nimport { NextFunction, Request, Response } from 'express';\nimport { merge as _merge } from 'lodash';\nimport { isObservableArray } from 'mobx';\nimport { resolve } from 'path';\nimport { parseRequest } from '../_server/parse-request';\nimport { handleServerException, renderDefaultRouter } from '../_server/request-routers';\nimport {\n    CATEGORY_PAGE_NAME,\n    DEFAULT_PROXY_HOST,\n    DEFAULT_PROXY_PORT,\n    GLIMPSE_LOGGER_NAME,\n    LIST_PAGE_NAME,\n    PAGE_LOGGER_NAME,\n    PDP_PAGE_NAME\n} from '../consts';\nimport keystonePaths from '../paths';\nimport defaultCacheSettings from '../settings/cache.settings.json';\nimport {\n    ACCESS_TOKEN_SECRET_CACHE_TYPE,\n    DEFAULT_ACCESS_TOKEN_SECRET_TTL,\n    DEFAULT_ACCESS_TOKEN_SECRET_TTR,\n    DEFAULT_KV_SECRET_TTL,\n    DEFAULT_KV_SECRET_TTR,\n    KEY_VAULT_SECRET_CACHE_TYPE\n} from '../utils/secret-manager';\n\nconst CONNECTOR_SETTINGS = 'connector.settings';\n\nconst cacheSettingsPath = resolve(keystonePaths.KEYSTONE_APP_SETTINGS_DIR, 'cache.settings.json');\nconst overrideCacheSettings = safeReadJsonSync<ICacheSettings>(cacheSettingsPath, console);\nconst connectorSettings = safeReadJsonSync<IConnectorSettings>(\n    resolve(keystonePaths.KEYSTONE_APP_SETTINGS_DIR, `${CONNECTOR_SETTINGS}.json`)\n);\nconst DESTINATIONURL = 'destinationUrl';\n\nconst stopRouteValidationTimer = (telemetry: InternalTelemetry, validateRouteCorrelationId: string) => {\n    telemetry &&\n        telemetry.trackEvent<{}, IEventTime>(EVENT_VALIDATE_ROUTE_STOP, {}, { time: telemetry.stopTimer(validateRouteCorrelationId) });\n};\n\nexport const KEYSTONE_ENVIRONMENT = Object.keys(process.env)\n    .filter((processKeyName: string) => processKeyName.startsWith('MSDyn365_'))\n    .reduce(\n        (env: IDictionary<string>, key: string) => {\n            env[key] = <string>process.env[key];\n\n            return env;\n        },\n        {\n            NODE_ENV: <string>process.env.NODE_ENV,\n            HOST: <string>process.env.HOST,\n            PORT: <string>process.env.PORT,\n            PUBLIC_PATH: <string>process.env.PUBLIC_PATH,\n            PUBLIC_DIR: <string>process.env.PUBLIC_DIR,\n            Views: <string>process.env.Dynamic_View\n        }\n    );\n\nexport const loadFeatureFlags = (req: Request, res: Response, next: NextFunction) => {\n    // initialize pageResponse default to request.body\n    res.locals.pageResponse = req.body;\n    if (req.body && req.body.renderingContext && req.body.renderingContext.features) {\n        res.locals.features = req.body.renderingContext.features;\n    } else {\n        res.locals.features = {};\n    }\n    next();\n};\n\nexport const setCorsHeaders = (req: Request, res: Response, next: NextFunction) => {\n    // FEATURE FLAG TO ALLOW ALL CORS REQUESTS\n    const allowAllCors = res.locals && res.locals.features && res.locals.features.allowAllCors;\n    if (allowAllCors) {\n        res.setHeader('Access-Control-Allow-Origin', '*');\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n        res.setHeader('Access-Control-Allow-Credentials', 'true');\n    }\n\n    next();\n};\n\nexport const setResponseHeaders = (req: Request, res: Response, next: NextFunction) => {\n    if (process.env.NODE_ENV === 'development') {\n        // cache bust in local dev scenarios without passing build #\n        res.setHeader('Cache-Control', 'max-age=1');\n    }\n    next();\n};\n\nexport const getPlatformSettingsSync = () => {\n    const platFormSettings = safeReadJsonSync<IPlatformSettings>(\n        resolve(keystonePaths.KEYSTONE_APP_SETTINGS_DIR, `platform.settings.json`)\n    );\n    return platFormSettings ? platFormSettings : {};\n};\n\nexport const registerAttributeRenderers = (\n    instanceTelemetryClient: InternalTelemetry,\n    moduleInstanceTelemetryClient: Telemetry,\n    requestContext: IRequestContext\n) => {\n    // If enable data analytics is turned on, update telemetry objects accordingly\n    instanceTelemetryClient.enableDataAnalytics(requestContext.features.enableDataAnalytics);\n    moduleInstanceTelemetryClient.enableDataAnalytics(requestContext.features.enableDataAnalytics);\n\n    // Register the exp attribute renderers\n    instanceTelemetryClient.registerAttributeRenderer(expAttributeRenderer);\n    moduleInstanceTelemetryClient.registerAttributeRenderer(expAttributeRenderer);\n};\n\nexport const setTelemetryObject = (appInsightsTelemetryClient: TelemetryClient) => {\n    let hasRun = false;\n    return (req: Request, res: Response, next: NextFunction) => {\n        const requestContext = parseRequest(req);\n        const { isDebug } = requestContext.params;\n        const options = { isDebug };\n        // initialize the static telemetry object only once\n        if (!hasRun) {\n            hasRun = true;\n            StaticTelemetry.registerTraceLogger({ traceLogger: new AppInsightsNodeLogger(appInsightsTelemetryClient) });\n        }\n\n        const instanceTelemetryClient = new InternalTelemetry();\n        const moduleInstanceTelemetryClient = new Telemetry();\n\n        instanceTelemetryClient.registerTraceLogger({ traceLogger: new AppInsightsNodeLogger(appInsightsTelemetryClient) });\n\n        if (process.env.NODE_ENV === 'development') {\n            instanceTelemetryClient.registerTraceLogger({ traceLogger: GenericConsoleLogger, options });\n            moduleInstanceTelemetryClient.registerTraceLogger({ traceLogger: GenericConsoleLogger, options });\n        }\n\n        if (isDebug) {\n            instanceTelemetryClient.registerTraceLogger({ traceLogger: new RetainLogger(), name: GLIMPSE_LOGGER_NAME });\n\n            const pageLogger = new PageLogger();\n            moduleInstanceTelemetryClient.registerTraceLogger({ traceLogger: pageLogger, options, name: PAGE_LOGGER_NAME });\n            instanceTelemetryClient.registerTraceLogger({ traceLogger: pageLogger, options, name: PAGE_LOGGER_NAME });\n        }\n\n        res.locals.telemetry = instanceTelemetryClient;\n        res.locals.moduleTelemetry = moduleInstanceTelemetryClient;\n        next();\n    };\n};\n\n/**\n * Page render method, used on pageResponse and request context have been parsed/calulated\n */\nexport const renderPage = (req: Request, res: Response, next: NextFunction, { clientStats }: { clientStats: {} }) => {\n    try {\n        return renderDefaultRouter(req, res, next, res.locals.pageResponse, res.locals.requestContext, { clientStats });\n    } catch (e) {\n        handleServerException(res, 'Server Exception', e, res.locals.telemetry);\n    }\n};\n\n/**\n * Helper function to await a promise and wrap in try/catch - used for getting channel configuration. Also sets the\n * `res.local.getOrgUnitConfigurationAsyncResult` property with the actual channel config so it can be retrieved as part\n * of this request\n * @param promiseToAwait\n */\nconst awaitChannelConfigPromise = async (\n    context: ActionContext,\n    res: Response,\n    promiseToAwait: AsyncResult<ChannelConfiguration>,\n    telemetry: Telemetry\n) => {\n    try {\n        res.locals.getOrgUnitConfigurationAsyncResult = await promiseToAwait;\n        res.locals.routeRefreshActions = context.getRefreshActions();\n    } catch (e) {\n        if (telemetry && typeof telemetry.log === 'function') {\n            telemetry.log(LogLevel.Error, 'error in getting channel configuration', { exception: e });\n        }\n    }\n};\n\n/**\n * Logs an error to application insights and terminates the request\n * @param res               - Express response object\n * @param httpErrorCode     - Http Error code\n * @param message           - Http message\n * @param telemetry         - current internal telemetry\n * @param                   - correlation id for the telemetry\n * @param error             - optional Error object\n */\nconst sendValidationErrorAndLogToTelemetry = (\n    res: Response,\n    httpErrorCode: number,\n    message: string,\n    telemetry: InternalTelemetry,\n    correlationId: string,\n    error?: Error,\n    fromCache?: boolean\n) => {\n    stopRouteValidationTimer(telemetry, correlationId);\n    telemetry.log(LogLevel.Error, fromCache ? `(route-cache) - ${message}` : message, { exception: error });\n    res.status(httpErrorCode).send(message);\n};\n\n/**\n * Middleware that performs validation logic based on the type of page being rendered\n * @param pageResponse The page response\n */\n// tslint:disable-next-line:max-func-body-length cyclomatic-complexity\nexport const validateRouteAndChannelConfig = async (_req: Request, res: Response, next: NextFunction) => {\n    const requestContext: IRequestContext = res.locals.requestContext;\n    const telemetry = res.locals.telemetry;\n    const shouldCacheRouteErrors = !!!requestContext.features.disable_routeerrors_cache;\n    const validateRouteCorrelationId: string = InternalTelemetry.generateGuid();\n    telemetry && telemetry.startTimer(validateRouteCorrelationId);\n    telemetry && telemetry.trackEvent(EVENT_VALIDATE_ROUTE_START);\n\n    // re-use the request cache for any lookups we do here\n    res.locals.requestCache = new RequestCache();\n    // tslint:disable-next-line:no-any\n    const appCache: ICache = (<any>msdyn365Commerce).getAppCache(requestContext);\n\n    const actionContext = new ActionContext({\n        id: 'Validation Context',\n        requestContext: requestContext,\n        requestCache: res.locals.requestCache,\n        telemetry: telemetry,\n        appCache\n    });\n\n    // kick off the call but dont await it yet\n    const getOrgUnitConfigurationAsyncPromise = getOrgUnitConfigurationAsync({ callerContext: actionContext });\n\n    if (!requestContext.urlTokens.pageType) {\n        // we always look up channel config\n        await awaitChannelConfigPromise(actionContext, res, getOrgUnitConfigurationAsyncPromise, res.locals.telemetry);\n        stopRouteValidationTimer(telemetry, validateRouteCorrelationId);\n        return next();\n    }\n\n    // Validate the page has a page type\n    const internalTelemetry = <InternalTelemetry>res.locals.telemetry;\n    switch (requestContext.urlTokens.pageType.toLowerCase()) {\n        // PDP Route Validation\n        case PDP_PAGE_NAME:\n            // @ts-ignore: recordId URLToken not yet typed\n            if (requestContext.urlTokens.recordId) {\n                try {\n                    const recordId: string = requestContext.urlTokens.recordId;\n                    const pdpRouteErrorKey: ICacheKey = { typeName: '__validate_route_pdp__', key: recordId.toString() };\n                    if (shouldCacheRouteErrors) {\n                        const productRouteValidationResult: ICacheItem<boolean> | undefined = appCache.get(pdpRouteErrorKey);\n                        if (productRouteValidationResult && !productRouteValidationResult.shouldRefresh) {\n                            // Bad Product Response from Retail Server\n                            sendValidationErrorAndLogToTelemetry(\n                                res,\n                                404,\n                                'Invalid PDP Route: Product Not Found.',\n                                internalTelemetry,\n                                validateRouteCorrelationId,\n                                undefined,\n                                true\n                            );\n                            return;\n                        }\n                    }\n\n                    // tslint:disable-next-line:prefer-const\n                    let product = await getByIdAsync(\n                        { callerContext: actionContext },\n                        // @ts-ignore: recordId URLToken not yet typed\n                        +recordId,\n                        requestContext.apiSettings.channelId\n                    );\n\n                    // Array Bug\n                    product = Array.isArray(product) ? product[0] : product;\n                    if (!(product instanceof Error) && product && product.RecordId) {\n                        // await only if we have a successful result\n                        await awaitChannelConfigPromise(actionContext, res, getOrgUnitConfigurationAsyncPromise, res.locals.telemetry);\n                        stopRouteValidationTimer(telemetry, validateRouteCorrelationId);\n                        return next();\n                    } else if (shouldCacheRouteErrors) {\n                        // store validation error in app cache with default ttr of 60 seconds\n                        // this is to avoid clients bombading retail server in case of invalid product ids\n                        appCache.put(pdpRouteErrorKey, { item: true });\n                    }\n\n                    // Bad Product Response from Retail Server\n                    sendValidationErrorAndLogToTelemetry(\n                        res,\n                        404,\n                        'Invalid PDP Route: Product Not Found.',\n                        internalTelemetry,\n                        validateRouteCorrelationId\n                    );\n                    return;\n                } catch (error) {\n                    sendValidationErrorAndLogToTelemetry(res, 500, error, internalTelemetry, validateRouteCorrelationId, error);\n                    return;\n                }\n            }\n            sendValidationErrorAndLogToTelemetry(\n                res,\n                404,\n                'Invalid PDP Route: No ProductId Detected',\n                internalTelemetry,\n                validateRouteCorrelationId\n            );\n            return;\n        // Category Route validation\n        case CATEGORY_PAGE_NAME:\n            // @ts-ignore: recordId URLToken not yet typed\n            const activeCategoryRecordId = +requestContext.urlTokens.recordId;\n            if (activeCategoryRecordId) {\n                try {\n                    const categoryRouteErrorKey = { typeName: '__validate_route_category__', key: activeCategoryRecordId.toString() };\n                    let requestedCategory: Category | Category[] | undefined;\n\n                    if (shouldCacheRouteErrors) {\n                        const categoryRouteValidationResult: ICacheItem<string> | undefined = appCache.get(categoryRouteErrorKey);\n                        if (categoryRouteValidationResult && !categoryRouteValidationResult.shouldRefresh) {\n                            res.locals.telemetry.log(LogLevel.Error, `(route-cache) - ${categoryRouteValidationResult.item}`);\n                            res.status(404).send('Invalid Category Route: Category Not Found');\n                            return next;\n                        }\n                    }\n\n                    requestedCategory = await getCategoriesAsync({ callerContext: actionContext }, requestContext.apiSettings.channelId)\n                        .then(async (response: Category[]) => {\n                            const cacheError = (errorMsg: string) => {\n                                if (shouldCacheRouteErrors) {\n                                    // store validation error in app cache with default ttr of 60 seconds\n                                    // this is to avoid clients bombading retail server in case of invalid product ids\n                                    appCache.put(categoryRouteErrorKey, { item: errorMsg });\n                                }\n                            };\n\n                            if (!response) {\n                                const errorMsg = `Error validating category, received invalid response: ${response}`;\n                                res.locals.telemetry.log(LogLevel.Error, errorMsg);\n                                cacheError(errorMsg);\n                                return undefined;\n                            }\n\n                            if (!Array.isArray(response) && !isObservableArray(response)) {\n                                const errorMsg = 'Error validating category, received invalid response: non-array';\n                                res.locals.telemetry.log(LogLevel.Error, errorMsg);\n                                cacheError(errorMsg);\n                                return undefined;\n                            }\n\n                            const result = response.find(category => {\n                                if (category.RecordId) {\n                                    return category.RecordId === activeCategoryRecordId;\n                                }\n                                return false;\n                            });\n\n                            if (!result) {\n                                const errorMsg = `Error validating category, couldn't resolve the category in the list of categories returned by server`;\n                                res.locals.telemetry.log(LogLevel.Error, errorMsg);\n                                cacheError(errorMsg);\n                                return undefined;\n                            }\n\n                            // await only if we have a successful result\n                            return awaitChannelConfigPromise(\n                                actionContext,\n                                res,\n                                getOrgUnitConfigurationAsyncPromise,\n                                res.locals.telemetry\n                            ).then(() => {\n                                return result;\n                            });\n                        })\n                        .catch(e => {\n                            res.locals.telemetry.log(LogLevel.Error, `Error validating category`, { exception: e });\n                            throw e;\n                        });\n\n                    if (!requestedCategory) {\n                        res.status(404).send('Invalid Category Route: Category Not Found');\n                        return;\n                    }\n                    return next();\n                } catch (e) {\n                    sendValidationErrorAndLogToTelemetry(\n                        res,\n                        500,\n                        'Invalid Category Route: Error Validating Category',\n                        internalTelemetry,\n                        validateRouteCorrelationId,\n                        e\n                    );\n                    return;\n                }\n            }\n            sendValidationErrorAndLogToTelemetry(\n                res,\n                404,\n                'Invalid Category Route: No Categories Found In URL',\n                internalTelemetry,\n                validateRouteCorrelationId\n            );\n            return;\n        // List Route Validation\n        // Strictly Prop Checks: If valid data is provided by CMS, route is good\n        case LIST_PAGE_NAME:\n            const listData = requestContext.pageData.list;\n            if (listData && listData.content && listData.content.items && listData.content.title && listData._id) {\n                // await only if we have a successful result\n                return awaitChannelConfigPromise(actionContext, res, getOrgUnitConfigurationAsyncPromise, res.locals.telemetry).then(() => {\n                    return next();\n                });\n            }\n            sendValidationErrorAndLogToTelemetry(\n                res,\n                404,\n                'Invalid List Route: List Data Invalid',\n                internalTelemetry,\n                validateRouteCorrelationId\n            );\n            return;\n        default:\n            return awaitChannelConfigPromise(actionContext, res, getOrgUnitConfigurationAsyncPromise, res.locals.telemetry).then(() => {\n                stopRouteValidationTimer(telemetry, validateRouteCorrelationId);\n                return next();\n            });\n    }\n};\n\n/**\n * Checks if a proxy is available while in debug mode and routes all outgoing requests to proxy if possible\n * @param req The Request Object\n * @param res The Response Object\n * @param next The next function\n */\nexport const detectProxy = (req: Request, res: Response, next: NextFunction) => {\n    // Only allow proxy rerouting when in debug mode\n    if (process.env.NODE_ENV === 'development' && req.query.debug) {\n        axios\n            .get(`${DEFAULT_PROXY_HOST}:${DEFAULT_PROXY_PORT}`)\n            .then((response: AxiosResponse) => {\n                if (response.status === 200) {\n                    console.log('Debug Proxy Detected and Enabled for External Requests');\n\n                    // This Env variable allows to go through proxy\n                    // ONLY ENABLE THIS IN DEBUG\n                    process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n                    process.env.NODE_USE_DEBUG_PROXY = '1';\n                }\n                next();\n            })\n            .catch((error: AxiosError) => {\n                // Reset to defaults if no proxy is detected\n                process.env.NODE_TLS_REJECT_UNAUTHORIZED = '1';\n                process.env.NODE_USE_DEBUG_PROXY = '0';\n                next();\n            });\n    } else {\n        // Reset to defaults if debug flag turned off\n        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '1';\n        process.env.NODE_USE_DEBUG_PROXY = '0';\n        next();\n    }\n};\n\n/**\n * Creates and returns the app cache settings to be used to cache app and key vault secrets\n */\nexport const getAppSecretsCacheSetings = (): ICacheSettings => {\n    const appSecretsCacheSettings: ICacheSettings = { ttlInSeconds: {}, ttrInSeconds: {} };\n    if (appSecretsCacheSettings.ttlInSeconds) {\n        appSecretsCacheSettings.ttlInSeconds[ACCESS_TOKEN_SECRET_CACHE_TYPE] = DEFAULT_ACCESS_TOKEN_SECRET_TTL;\n        appSecretsCacheSettings.ttlInSeconds[KEY_VAULT_SECRET_CACHE_TYPE] = DEFAULT_KV_SECRET_TTL;\n    }\n\n    if (appSecretsCacheSettings.ttrInSeconds) {\n        appSecretsCacheSettings.ttrInSeconds[ACCESS_TOKEN_SECRET_CACHE_TYPE] = DEFAULT_ACCESS_TOKEN_SECRET_TTR;\n        appSecretsCacheSettings.ttrInSeconds[KEY_VAULT_SECRET_CACHE_TYPE] = DEFAULT_KV_SECRET_TTR;\n    }\n    return appSecretsCacheSettings;\n};\n\nconst resolveConnectorCacheSettings = (cacheSettings: ICacheSettings) => {\n    if (cacheSettings.ttlInSeconds) {\n        const upperCasedTTLSettings = {};\n        Object.keys(cacheSettings.ttlInSeconds).forEach(entity => {\n            // @ts-ignore: TS Compiler not recognizing if check correctly\n            upperCasedTTLSettings[entity.toUpperCase()] = cacheSettings.ttlInSeconds[entity];\n        });\n\n        cacheSettings.ttlInSeconds = upperCasedTTLSettings;\n    }\n\n    if (cacheSettings.ttrInSeconds) {\n        const upperCasedTTRSettings = {};\n        Object.keys(cacheSettings.ttrInSeconds).forEach(entity => {\n            // @ts-ignore: TS Compiler not recognizing if check correctly\n            upperCasedTTRSettings[entity.toUpperCase()] = cacheSettings.ttrInSeconds[entity];\n        });\n\n        cacheSettings.ttrInSeconds = upperCasedTTRSettings;\n    }\n};\n\nexport const getGeoLookupCacheSettings = (): ICacheSettings => {\n    const geoLookupCacheSettings: ICacheSettings =\n        (connectorSettings && connectorSettings.geoLookup && connectorSettings.geoLookup.cacheConfig) || {};\n    resolveConnectorCacheSettings(geoLookupCacheSettings);\n    // make sure ttrInSeconds and ttlInSeconds property exist in cache setting with default value\n    geoLookupCacheSettings.ttlInSeconds = geoLookupCacheSettings.ttlInSeconds ? geoLookupCacheSettings.ttlInSeconds : {};\n    geoLookupCacheSettings.ttrInSeconds = geoLookupCacheSettings.ttrInSeconds ? geoLookupCacheSettings.ttrInSeconds : {};\n\n    // setup default TTL for geo lookup cache.\n    geoLookupCacheSettings.ttlInSeconds[GEOLOOKUP_CACHE_TYPE] =\n        geoLookupCacheSettings.ttlInSeconds[GEOLOOKUP_CACHE_TYPE] || DEFAULT_GEOLOOKUP_TTL;\n\n    return geoLookupCacheSettings;\n};\n\nexport const getExperimentsCacheSettings = (): ICacheSettings => {\n    const experimentsCacheSettings: ICacheSettings =\n        (connectorSettings && connectorSettings.experimentation && connectorSettings.experimentation.cacheConfig) || {};\n\n    resolveConnectorCacheSettings(experimentsCacheSettings);\n\n    // make sure ttrInSeconds and ttlInSeconds property exist in cache setting with default value\n    experimentsCacheSettings.ttlInSeconds = experimentsCacheSettings.ttlInSeconds ? experimentsCacheSettings.ttlInSeconds : {};\n    experimentsCacheSettings.ttrInSeconds = experimentsCacheSettings.ttrInSeconds ? experimentsCacheSettings.ttrInSeconds : {};\n\n    experimentsCacheSettings.ttlInSeconds[EXPERIMENTATION_CACHE_TYPE] =\n        experimentsCacheSettings.ttlInSeconds[EXPERIMENTATION_CACHE_TYPE] || DEFAULT_EXPERIMENT_TTL;\n    experimentsCacheSettings.ttrInSeconds[EXPERIMENTATION_CACHE_TYPE] =\n        experimentsCacheSettings.ttrInSeconds[EXPERIMENTATION_CACHE_TYPE] || DEFAULT_EXPERIMENT_TTR;\n\n    experimentsCacheSettings.ttlInSeconds[EXPERIMENTATION_DATAFILE_CACHE_TYPE] =\n        experimentsCacheSettings.ttlInSeconds[EXPERIMENTATION_DATAFILE_CACHE_TYPE] || DEFAULT_EXPERIMENT_DATAFILE_TTL;\n    experimentsCacheSettings.ttrInSeconds[EXPERIMENTATION_DATAFILE_CACHE_TYPE] =\n        experimentsCacheSettings.ttrInSeconds[EXPERIMENTATION_DATAFILE_CACHE_TYPE] || DEFAULT_EXPERIMENT_DATAFILE_TTR;\n    return experimentsCacheSettings;\n};\n\nexport const getConnectorSettings = async (): Promise<IConnectorSettings | undefined> => {\n    return safeReadJson<IConnectorSettings>(resolve(keystonePaths.KEYSTONE_APP_SETTINGS_DIR, `${CONNECTOR_SETTINGS}.json`));\n};\n\nexport const getCacheSettings = (): ICacheSettings => {\n    const cacheSettings: ICacheSettings = _merge({}, defaultCacheSettings, overrideCacheSettings);\n\n    if (cacheSettings.ttlInSeconds) {\n        const upperCasedTTLSettings = {};\n        Object.keys(cacheSettings.ttlInSeconds).forEach(entity => {\n            // @ts-ignore: TS Compiler not recognizing if check correctly\n            upperCasedTTLSettings[entity.toUpperCase()] = cacheSettings.ttlInSeconds[entity];\n        });\n\n        cacheSettings.ttlInSeconds = upperCasedTTLSettings;\n    }\n\n    if (cacheSettings.ttrInSeconds) {\n        const upperCasedTTRSettings = {};\n        Object.keys(cacheSettings.ttrInSeconds).forEach(entity => {\n            // @ts-ignore: TS Compiler not recognizing if check correctly\n            upperCasedTTRSettings[entity.toUpperCase()] = cacheSettings.ttrInSeconds[entity];\n        });\n\n        cacheSettings.ttrInSeconds = upperCasedTTRSettings;\n    }\n    // make sure ttrInSeconds and ttlInSeconds property exist in cache setting\n    cacheSettings.ttlInSeconds = cacheSettings.ttlInSeconds ? cacheSettings.ttlInSeconds : {};\n    cacheSettings.ttrInSeconds = cacheSettings.ttrInSeconds ? cacheSettings.ttrInSeconds : {};\n    return cacheSettings;\n};\n\nexport const getRequestUrl = (res: Response): URL | undefined => {\n    try {\n        if (\n            res.locals &&\n            res.locals.pageResponse &&\n            res.locals.pageResponse.renderingContext &&\n            res.locals.pageResponse.renderingContext.requestUrl\n        ) {\n            return new URL(res.locals.pageResponse.renderingContext.requestUrl);\n        }\n        // tslint:disable-next-line:no-empty\n    } catch {}\n\n    return undefined;\n};\n\nexport const sanitizeUrlForLogging = (requestUrl: URL | undefined): string => {\n    if (!requestUrl) {\n        return '';\n    }\n    if (requestUrl.pathname.endsWith('.p')) {\n        return `${requestUrl.hostname}/~.p`;\n    } else if (requestUrl.pathname.endsWith('.c')) {\n        return `${requestUrl.hostname}~/.c`;\n    }\n\n    return requestUrl.href;\n};\n\nexport const resolveRouteInformation = (res: Response, requestUrl: URL | undefined): string | undefined => {\n    const pageType = res.locals.requestContext.urlTokens && res.locals.requestContext.urlTokens.pageType;\n    const pageTypeLower = !!pageType ? pageType.toLowerCase() : undefined;\n\n    const originalUrl = requestUrl ? requestUrl.href : '';\n\n    if (originalUrl.endsWith('.p') || pageTypeLower === PDP_PAGE_NAME) {\n        return 'PRODUCT_ROUTE';\n    } else if (originalUrl.endsWith('.c') || pageTypeLower === CATEGORY_PAGE_NAME) {\n        return 'CATEGORY_ROUTE';\n    } else {\n        const routeMap: IDictionary<object> =\n            res.locals.pageResponse && res.locals.pageResponse.appContext && res.locals.pageResponse.appContext.routes;\n\n        if (routeMap && requestUrl && requestUrl.pathname) {\n            const routeUrl = requestUrl.pathname.toLowerCase();\n            for (const key of Object.keys(routeMap)) {\n                const routeDestinationUrl: string = (routeMap[key][DESTINATIONURL] || '').toLowerCase();\n                if (routeUrl === routeDestinationUrl) {\n                    // Processing request for {route} route\n                    return key;\n                }\n            }\n        }\n\n        return 'UNKNOWN_ROUTE';\n    }\n};\n\nexport const getCheckoutRoute = (res: Response): string | undefined => {\n    const routeMap: IDictionary<object> =\n        res.locals.pageResponse && res.locals.pageResponse.appContext && res.locals.pageResponse.appContext.routes;\n\n    if (routeMap && routeMap.checkout && routeMap.checkout[DESTINATIONURL]) {\n        return routeMap.checkout[DESTINATIONURL];\n    }\n\n    return 'CHECKOUT_ROUTE_UNAVAILABLE';\n};\n"]}