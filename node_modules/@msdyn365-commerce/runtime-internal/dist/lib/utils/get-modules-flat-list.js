/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
function getFlattenedListOfChildren(slot, fragmentId) {
    if (!slot) {
        return [];
    }
    let slotArr = [slot];
    slot.modules &&
        Object.values(slot.modules).forEach((current) => {
            if (current) {
                current.forEach(m => {
                    if (fragmentId) {
                        m.id = `${fragmentId}__${m.id}`;
                    }
                    slotArr = slotArr.concat(getFlattenedListOfChildren(m, fragmentId));
                });
            }
        });
    return slotArr;
}
export function getFlattenedListOfModulesForFragment(fragment, fragmentId) {
    if (!fragment) {
        return [];
    }
    return getFlattenedListOfChildren(fragment, fragmentId);
}
export function getFlattenedListOfModules(pageResponse) {
    if (!pageResponse) {
        return [];
    }
    const response = pageResponse;
    const propValue = response.slots;
    if (propValue) {
        return propValue;
    }
    const modulesFromLegacy = response.modules && Object.values(response.modules);
    if (modulesFromLegacy && modulesFromLegacy.length) {
        return modulesFromLegacy.map((m) => m);
    }
    else {
        return getFlattenedListOfChildren(pageResponse.pageRoot);
    }
}
//# sourceMappingURL=get-modules-flat-list.js.map