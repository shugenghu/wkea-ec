{"version":3,"file":"session-storage-utils.js","sourceRoot":"","sources":["../../../src/utils/session-storage-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport msdyn365Commerce, { ISessionStorageContext, ISessionStorageValue } from '@msdyn365-commerce/core-internal';\nimport { CookieContext } from './cookie-utils';\n\n/**\n * Context for session storage handling\n *\n * @export\n * @class CookieContext\n */\nexport class SessionStorageContext implements ISessionStorageContext {\n    private _cookieContext: CookieContext;\n\n    constructor(_cookieContext: CookieContext) {\n        this._cookieContext = _cookieContext;\n    }\n\n    /**\n     * Gets the value stored in the session storage.\n     * Returns an empty object if no such value exists.\n     *\n     * @param {string} key - The key string.\n     */\n    public getDataFromStorage = (key: string): object => {\n        if (key) {\n            return this.get<object>(key).value || {};\n        }\n        return {};\n    };\n\n    /**\n     * Sets a new key pair value in the session storage.\n     *\n     * @param {string} key - The key string.\n     * @param {object} value - The data object.\n     */\n    public setDataInStorage = (key: string, value: object): void => {\n        if (key && value) {\n            this.set<object>(key, value);\n        }\n    };\n\n    /**\n     * Gets the checkout cart stored in the session storage.\n     * Returns an empty object if no such value exists.\n     *\n     * @param {string} key - The key string.\n     */\n    public getCheckoutCartData = (key: string): object => {\n        if (key) {\n            return key ? this.getDataFromStorage(this.getCheckoutCartKey(key)) : {};\n        }\n        return {};\n    };\n\n    /**\n     * Sets checkout cart value in the session storage.\n     *\n     * @param {string} key - The key string.\n     * @param {object} value - The cart data object.\n     */\n    public setCheckoutCartData = (key: string, value: object): void => {\n        if (key && value) {\n            this.setDataInStorage(this.getCheckoutCartKey(key), value);\n        }\n    };\n\n    /**\n     * Remove session storage by giving key\n     *\n     * @param {string} key - The key string.\n     */\n    public removeDataFromStorage = (key: string): void => {\n        if (key) {\n            this.remove(key);\n        }\n    };\n\n    /**\n     * Remove checkout cart data from the session storage by giving key\n     *\n     * @param {string} key - The key string. If key is not provided clear all data from session storage that contais the checkout cart key prefix.\n     */\n    public removeCheckoutCartData = (key?: string): void => {\n        if (key) {\n            this.removeDataFromStorage(this.getCheckoutCartKey(key));\n        } else {\n            const keyList = Object.keys(sessionStorage);\n            keyList.map(k => {\n                if (k.startsWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-`)) {\n                    this.removeDataFromStorage(k);\n                }\n            });\n        }\n    };\n\n    /**\n     * Get session storage value.\n     * If server side, no-op.\n     *\n     * @param {string} key - The key string\n     * @return {ISessionStorageValue} value with status\n     */\n    private get = <T>(key: string): ISessionStorageValue<T> => {\n        if (key && msdyn365Commerce.isBrowser) {\n            const objString = sessionStorage.getItem(key);\n            if (objString) {\n                const obj = JSON.parse(objString);\n                return { name: key, value: <T>obj, status: obj ? 'FOUND' : 'NOT_FOUND' };\n            }\n        }\n        return { name: key, value: undefined, status: 'NOT_FOUND' };\n    };\n\n    /**\n     * Set session storage data.\n     * If server side, no-op.\n     *\n     * @param {string} key - The key string\n     * @param {T} value - The session storage value\n     */\n    private set = <T>(key: string, value: T): void => {\n        if (key && msdyn365Commerce.isBrowser) {\n            sessionStorage.setItem(key, JSON.stringify(value));\n        }\n    };\n\n    /**\n     * Remove session storage data by giving key\n     * If server side, no-op.\n     *\n     * @param {string} key - The key string\n     */\n    private remove = (key: string): void => {\n        if (key && msdyn365Commerce.isBrowser) {\n            sessionStorage.removeItem(key);\n        }\n    };\n\n    /**\n     * Build the checkout cart key for the session storage\n     */\n    private getCheckoutCartKey = (key: string): string => {\n        const checkoutCartCookie = this._cookieContext.getCheckoutCartCookie();\n        if (checkoutCartCookie) {\n            return `${msdyn365Commerce.checkoutCartKeyPrefix}-${checkoutCartCookie}-${key}`;\n        }\n        return '';\n    };\n}\n"]}