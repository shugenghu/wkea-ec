/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import axios from 'axios';
import qs from 'querystring';
/**
 * Makes an ROPC (resource owner password credentials) auth flow request with the given mock user
 * to retrieve user access token and set signed in behavior during local development
 *
 * See https://docs.microsoft.com/en-us/azure/active-directory-b2c/configure-ropc?tabs=app-reg-ga for more information
 * @param credentials credentials object containing config information
 */
export const getUserInformationROPC = async (credentials, user) => {
    // Construct the URL and request body
    const ropcAuthUrl = constructRopcAuthUrl(credentials);
    const chosenUser = getUserInfoFromCredentialsFile(credentials, user);
    const ropcAuthRequestBody = constructRopcAuthRequestBody(credentials, chosenUser);
    let ropcAuthRequest;
    try {
        ropcAuthRequest = await axios({
            method: 'post',
            url: ropcAuthUrl,
            data: ropcAuthRequestBody,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        });
    }
    catch (err) {
        throw new Error(`Access Token Fetch for user ${user} failed with status ${err.code} and error ${err.response}. Check B2C configuration steps.`);
    }
    // Return access token if successful and set current user and expiry date
    const authResult = ropcAuthRequest.data;
    credentials.currentUser = user;
    credentials.expiryDate = Math.floor(Date.now() / 1000) + parseInt(authResult.expires_in, 10);
    credentials.accessToken = authResult.access_token;
    credentials.customerAccountNumber = chosenUser.customerAccountNumber;
    return { token: authResult.access_token, customerAccountNumber: chosenUser.customerAccountNumber };
};
/**
 * Constructs the URL to invoke the ROPC auth flow
 * @param credentials credentials object containing config information
 */
const constructRopcAuthUrl = (credentials) => {
    if (!credentials.loginDomain) {
        throw constructMissingInformationError('loginDomain');
    }
    if (!credentials.b2cTenant) {
        throw constructMissingInformationError('b2cTenant');
    }
    if (!credentials.ropcUserFlowName) {
        throw constructMissingInformationError('ropcUserFlowName');
    }
    return `https://${credentials.loginDomain}/${credentials.b2cTenant}.onmicrosoft.com/${credentials.ropcUserFlowName}/oauth2/v2.0/token`;
};
/**
 * Gets the user information (email, password, customerAccountNumber) from the credentials file
 *
 * @param credentials credentials object containing config information
 * @param user User to sign in as
 */
const getUserInfoFromCredentialsFile = (credentials, user) => {
    // Find the user in the list of configured users
    let chosenUser;
    // If the mockUser query param is just set to true then use the default user
    if (user === 'true' || user === 'default') {
        user = 'default';
        chosenUser = credentials.defaultUser;
    }
    else {
        // Otherwise search through additional configured users to look for user requested
        const additionalUsers = credentials.additionalUsers;
        for (let i = 0; i < additionalUsers.length; i++) {
            if (additionalUsers[i].name === user) {
                chosenUser = additionalUsers[i];
            }
        }
    }
    if (!chosenUser) {
        if (user === 'default') {
            throw new Error(`No default user configured in list of users credentials.json. Verify default user has been configured.`);
        }
        else {
            throw new Error(`Requested user '${user}' was not found in the list of users configured in credentials.json. Verify user with name '${user}' exists.`);
        }
    }
    return chosenUser;
};
/**
 * Constructs the POST request body containing user information and scope to be made to the ROPC auth URL
 * to get user access token
 *
 * @param credentials credentials object containing config information
 * @param chosenUser User to sign in as
 */
const constructRopcAuthRequestBody = (credentials, chosenUser) => {
    if (!credentials.nativeApplicationId) {
        throw constructMissingInformationError('nativeApplicationId');
    }
    if (!credentials.userImpersonationScopeURL) {
        throw constructMissingInformationError('userImpersonationScopeURL');
    }
    // Construct POST request body
    return qs.stringify({
        username: chosenUser.email,
        password: chosenUser.password,
        grant_type: 'password',
        client_id: credentials.nativeApplicationId,
        response_type: 'token id_token',
        scope: `openid ${credentials.userImpersonationScopeURL}`
    });
};
/**
 * Constructs an error indicating the ROPC flow was not able to run due to missing configuration missing
 * @param missingProperty The missing property
 */
const constructMissingInformationError = (missingProperty) => {
    return new Error(`Unable to login with mock user. Missing property ${missingProperty} from credentials.json`);
};
//# sourceMappingURL=ropc-auth-utils.js.map