{"version":3,"file":"query-utils.js","sourceRoot":"","sources":["../../../src/utils/query-utils.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,gBAAgB,EAAE,0BAA0B,EAAsB,QAAQ,EAAE,MAAM,uCAAuC,CAAC;AAEnI,MAAM,CAAC,MAAM,gCAAgC,GAAG,GAAG,CAAC;AAEpD,MAAM,CAAC,MAAM,+BAA+B,GAAG,GAAG,CAAC;AAQnD,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,SAAiB,EAAE,SAA6B,EAA8B,EAAE;IACvH,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAEpE,+FAA+F;IAC/F,kDAAkD;IAClD,wEAAwE;IACxE,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;QACtC,oDAAoD;QACpD,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAE1C,IAAI;YACA,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAChD,OAAO;gBACH,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;gBACzB,+DAA+D;gBAC/D,QAAQ,EAAE,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC1F,KAAK,EAAE,WAAW;aACrB,CAAC;SACL;QAAC,OAAO,CAAC,EAAE;YACR,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,0BAA0B,EAAE,EAAE,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;YAC/G,OAAO,IAAI,CAAC;SACf;KACJ;IAED,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,cAAmC,EAAE,cAA+B,EAAQ,EAAE;IACrH,IAAI,cAAc,CAAC,SAAS,KAAK,SAAS,EAAE;QACxC,cAAc,CAAC,WAAW,CAAC,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;KAC3E;IACD,IAAI,cAAc,CAAC,SAAS,KAAK,SAAS,EAAE;QACxC,cAAc,CAAC,WAAW,CAAC,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;KAC3E;IAED,IAAI,cAAc,CAAC,KAAK,KAAK,SAAS,EAAE;QACpC,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,GAAG,cAAc,CAAC,KAAK,CAAC;KAC5D;IAED,IAAI,cAAc,CAAC,MAAM,KAAK,SAAS,EAAE;QACrC,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,cAAc,CAAC,MAAM,CAAC;KAC9D;IAED,IAAI,cAAc,CAAC,GAAG,KAAK,SAAS,EAAE;QAClC,cAAc,CAAC,WAAW,CAAC,GAAG,GAAG,cAAc,CAAC,GAAG,CAAC;KACvD;IAED,IAAI,cAAc,CAAC,OAAO,KAAK,SAAS,EAAE;QACtC,cAAc,CAAC,WAAW,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC;KAC/D;IAED,IAAI,cAAc,CAAC,YAAY,KAAK,SAAS,EAAE;QAC3C,cAAc,CAAC,WAAW,CAAC,YAAY,GAAG,cAAc,CAAC,YAAY,CAAC;KACzE;IAED,IAAI,cAAc,CAAC,SAAS,KAAK,SAAS,EAAE;QACxC,cAAc,CAAC,WAAW,CAAC,wBAAwB,GAAG,cAAc,CAAC,SAAS,CAAC;KAClF;AACL,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAny, IDictionary, IRequestContext } from '@msdyn365-commerce/core-internal';\nimport { asSystemMetadata, EXCEPTION_PARSECONFIGVALUE, IInternalTelemetry, LogLevel } from '@msdyn365-commerce/telemetry-internal';\n\nexport const MODULE_QUERY_PARAMETER_SEPARATOR = ',';\n\nexport const MODULE_QUERY_PROPERTY_SEPARATOR = '/';\n\nexport interface IModuleOverrideData {\n    moduleName: string;\n    jsonPath: string;\n    value: IAny;\n}\n\nexport const validateAndGetOverrideData = (itemToken: string, telemetry: IInternalTelemetry): IModuleOverrideData | null => {\n    const pathTokens = itemToken.split(MODULE_QUERY_PROPERTY_SEPARATOR);\n\n    // Expected pattern to edit a property of a module is <module_name>/<json_pointer_path>/<value>\n    // eg1: partner-hero/dataBinder:\"BannerDataBinder\"\n    // eg2: partner-hero/dataProviders/0/data/Items/0/PrimaryImage/Width:200\n    if (pathTokens && pathTokens.length >= 2) {\n        // extract value string after the first occuring ':'\n        const value = itemToken.split(/:(.+)/)[1];\n\n        try {\n            const parsedValue = JSON.parse(unescape(value));\n            return {\n                moduleName: pathTokens[0],\n                // extract the jsoin pointer path between module-name and value\n                jsonPath: itemToken.substring(pathTokens[0].length, itemToken.length - (value.length + 1)),\n                value: parsedValue\n            };\n        } catch (e) {\n            telemetry.log(LogLevel.Error, EXCEPTION_PARSECONFIGVALUE, { values: [asSystemMetadata(value)], exception: e });\n            return null;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Method to read apisettings passed as part of query parameters and populate in request context\n * @param apiSettingsQSP apisettings passed as part of query service parameters\n * @param requestContext Request context object\n */\nexport const populateApiSettingsFromQSP = (apiSettingsQSP: IDictionary<string>, requestContext: IRequestContext): void => {\n    if (apiSettingsQSP.channelId !== undefined) {\n        requestContext.apiSettings.channelId = Number(apiSettingsQSP.channelId);\n    }\n    if (apiSettingsQSP.catalogId !== undefined) {\n        requestContext.apiSettings.catalogId = Number(apiSettingsQSP.catalogId);\n    }\n\n    if (apiSettingsQSP.rnrId !== undefined) {\n        requestContext.apiSettings.rnr.id = apiSettingsQSP.rnrId;\n    }\n\n    if (apiSettingsQSP.rnrUrl !== undefined) {\n        requestContext.apiSettings.rnr.url = apiSettingsQSP.rnrUrl;\n    }\n\n    if (apiSettingsQSP.oun !== undefined) {\n        requestContext.apiSettings.oun = apiSettingsQSP.oun;\n    }\n\n    if (apiSettingsQSP.baseUrl !== undefined) {\n        requestContext.apiSettings.baseUrl = apiSettingsQSP.baseUrl;\n    }\n\n    if (apiSettingsQSP.baseImageUrl !== undefined) {\n        requestContext.apiSettings.baseImageUrl = apiSettingsQSP.baseImageUrl;\n    }\n\n    if (apiSettingsQSP.rsVersion !== undefined) {\n        requestContext.apiSettings.retailServerProxyVersion = apiSettingsQSP.rsVersion;\n    }\n};\n"]}