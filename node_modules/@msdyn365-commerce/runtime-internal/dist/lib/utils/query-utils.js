/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { asSystemMetadata, EXCEPTION_PARSECONFIGVALUE, LogLevel } from '@msdyn365-commerce/telemetry-internal';
export const MODULE_QUERY_PARAMETER_SEPARATOR = ',';
export const MODULE_QUERY_PROPERTY_SEPARATOR = '/';
export const validateAndGetOverrideData = (itemToken, telemetry) => {
    const pathTokens = itemToken.split(MODULE_QUERY_PROPERTY_SEPARATOR);
    // Expected pattern to edit a property of a module is <module_name>/<json_pointer_path>/<value>
    // eg1: partner-hero/dataBinder:"BannerDataBinder"
    // eg2: partner-hero/dataProviders/0/data/Items/0/PrimaryImage/Width:200
    if (pathTokens && pathTokens.length >= 2) {
        // extract value string after the first occuring ':'
        const value = itemToken.split(/:(.+)/)[1];
        try {
            const parsedValue = JSON.parse(unescape(value));
            return {
                moduleName: pathTokens[0],
                // extract the jsoin pointer path between module-name and value
                jsonPath: itemToken.substring(pathTokens[0].length, itemToken.length - (value.length + 1)),
                value: parsedValue
            };
        }
        catch (e) {
            telemetry.log(LogLevel.Error, EXCEPTION_PARSECONFIGVALUE, { values: [asSystemMetadata(value)], exception: e });
            return null;
        }
    }
    return null;
};
/**
 * Method to read apisettings passed as part of query parameters and populate in request context
 * @param apiSettingsQSP apisettings passed as part of query service parameters
 * @param requestContext Request context object
 */
export const populateApiSettingsFromQSP = (apiSettingsQSP, requestContext) => {
    if (apiSettingsQSP.channelId !== undefined) {
        requestContext.apiSettings.channelId = Number(apiSettingsQSP.channelId);
    }
    if (apiSettingsQSP.catalogId !== undefined) {
        requestContext.apiSettings.catalogId = Number(apiSettingsQSP.catalogId);
    }
    if (apiSettingsQSP.rnrId !== undefined) {
        requestContext.apiSettings.rnr.id = apiSettingsQSP.rnrId;
    }
    if (apiSettingsQSP.rnrUrl !== undefined) {
        requestContext.apiSettings.rnr.url = apiSettingsQSP.rnrUrl;
    }
    if (apiSettingsQSP.oun !== undefined) {
        requestContext.apiSettings.oun = apiSettingsQSP.oun;
    }
    if (apiSettingsQSP.baseUrl !== undefined) {
        requestContext.apiSettings.baseUrl = apiSettingsQSP.baseUrl;
    }
    if (apiSettingsQSP.baseImageUrl !== undefined) {
        requestContext.apiSettings.baseImageUrl = apiSettingsQSP.baseImageUrl;
    }
    if (apiSettingsQSP.rsVersion !== undefined) {
        requestContext.apiSettings.retailServerProxyVersion = apiSettingsQSP.rsVersion;
    }
};
//# sourceMappingURL=query-utils.js.map