{"version":3,"file":"ropc-auth-utils.test.js","sourceRoot":"","sources":["../../../../src/utils/__tests__/ropc-auth-utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { ILocalCredentials } from '@msdyn365-commerce/core-internal';\nimport axios from 'axios';\nimport 'jest';\nimport { getUserInformationROPC } from '../ropc-auth-utils';\n\njest.mock('axios');\n\nlet credentials: ILocalCredentials;\ndescribe('ROPC Auth Utils test', () => {\n    beforeEach(() => {\n        credentials = {\n            loginDomain: 'login.fabrikam.com',\n            b2cTenant: 'rushmoreb2c',\n            nativeApplicationId: 'af2b5746-95d9-412f-a4e9-ef9b19f32edc',\n            ropcUserFlowName: 'B2C_1_ROPC_Sidd_Test',\n            userImpersonationScopeURL: 'https://login.fabrikam.com/B2CAPI/user_impersonation',\n            defaultUser: {\n                name: 'default',\n                email: 'xibiki4869@gomaild.com',\n                password: 'test123!',\n                customerAccountNumber: '00123465'\n            },\n            additionalUsers: [\n                {\n                    name: 'test-user',\n                    email: 'xibiki4869@gomaild.com',\n                    password: 'test123!',\n                    customerAccountNumber: '00123467'\n                }\n            ]\n        };\n    });\n    describe('error scenarios', () => {\n        it('should throw error if loginDomain is missing', async () => {\n            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes\n            delete credentials.loginDomain;\n            await expect(getUserInformationROPC(credentials, 'test-user')).rejects.toThrowErrorMatchingSnapshot();\n        });\n\n        it('should throw error if b2cTenant is missing', async () => {\n            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes\n            delete credentials.b2cTenant;\n            await expect(getUserInformationROPC(credentials, 'test-user')).rejects.toThrowErrorMatchingSnapshot();\n        });\n\n        it('should throw error if ropcUserFlowName is missing', async () => {\n            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes\n            delete credentials.ropcUserFlowName;\n            await expect(getUserInformationROPC(credentials, 'test-user')).rejects.toThrowErrorMatchingSnapshot();\n        });\n\n        it('should throw error if trying to sign in with default user and default user not configured', async () => {\n            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes\n            delete credentials.defaultUser;\n            await expect(getUserInformationROPC(credentials, 'true')).rejects.toThrowErrorMatchingSnapshot();\n        });\n\n        it('should throw error if trying to sign in with non-configured user', async () => {\n            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes\n            delete credentials.defaultUser;\n            await expect(getUserInformationROPC(credentials, 'not-configured')).rejects.toThrowErrorMatchingSnapshot();\n        });\n\n        it('should throw error if missing native application id', async () => {\n            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes\n            delete credentials.nativeApplicationId;\n            await expect(getUserInformationROPC(credentials, 'true')).rejects.toThrowErrorMatchingSnapshot();\n        });\n\n        it('should tbrow error if missing userImpersonationScopeUrl', async () => {\n            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes\n            delete credentials.userImpersonationScopeURL;\n            await expect(getUserInformationROPC(credentials, 'true')).rejects.toThrowErrorMatchingSnapshot();\n        });\n    });\n\n    describe('login scenarios', () => {\n        let data;\n        const constantDate = new Date();\n        beforeEach(() => {\n            data = {\n                data: {\n                    access_token: '12345',\n                    expires_in: 3600\n                }\n            };\n        });\n\n        it('login happy path', async () => {\n            // @ts-ignore jest mocking confuses ts compiler\n            axios.mockImplementationOnce(() => Promise.resolve(data));\n            jest.spyOn(global.Date, 'now').mockImplementationOnce(() => constantDate.valueOf());\n\n            await getUserInformationROPC(credentials, 'true');\n            expect(credentials.accessToken).toBe('12345');\n            expect(credentials.currentUser).toBe('true');\n            expect(credentials.customerAccountNumber).toBe('00123465');\n            expect(credentials.expiryDate).toBe(Math.floor(constantDate.getTime() / 1000) + 3600);\n        });\n\n        it('login error', async () => {\n            // @ts-ignore jest mocking confuses ts compiler\n            axios.mockImplementationOnce(() => Promise.reject({ code: '401', response: 'Unauthorized' }));\n            await expect(getUserInformationROPC(credentials, 'true')).rejects.toThrowErrorMatchingSnapshot();\n        });\n    });\n});\n"]}