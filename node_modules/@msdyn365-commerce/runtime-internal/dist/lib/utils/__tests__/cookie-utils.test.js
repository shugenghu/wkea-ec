/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import msdyn365Commerce from '@msdyn365-commerce/core';
import { CookieContext } from '../cookie-utils';
describe('Cookie Utilities', () => {
    const cookieGetter = jest.fn();
    const cookieSetter = jest.fn();
    // workaround to allow cookies in jsdom when imitating client browser (document.cookie)
    const createCookieContext = (contextArgs) => {
        const cookie = new CookieContext(contextArgs);
        // tslint:disable-next-line
        cookie['_cookies']['HAS_DOCUMENT_COOKIE'] = true;
        return cookie;
    };
    beforeAll(() => {
        Object.defineProperty(document, 'cookie', {
            get: cookieGetter,
            set: cookieSetter
        });
    });
    afterEach(() => {
        cookieGetter.mockReset();
        cookieSetter.mockReset();
    });
    describe('test cart cookie utilities', () => {
        const mockCookieContext = createCookieContext({ isConsentRequired: false });
        describe('test get cart cookie function', () => {
            it('returns default value of empty string when cookie context does not contain cart cookie', () => {
                cookieGetter.mockReturnValue('');
                expect(mockCookieContext.getCartCookie()).toBe('');
            });
            it('returns cart cookie value when cookie context contains cart cookie', () => {
                cookieGetter.mockReturnValue(`${msdyn365Commerce.CartCookie}=cart-cookie-value`);
                expect(mockCookieContext.getCartCookie()).toBe('cart-cookie-value');
            });
        });
        describe('test set cart cookie function', () => {
            it('sets the cart cookie as a session cookie', () => {
                const constantDate = new Date();
                jest.spyOn(global.Date, 'now').mockImplementationOnce(() => constantDate.valueOf());
                const isAuthenticated = false;
                mockCookieContext.setCartCookie({ Id: 'cart' }, isAuthenticated);
                expect(cookieSetter).toBeCalled();
                expect(cookieSetter).toBeCalledWith(`${msdyn365Commerce.CartCookie}=p%3Acart; Path=/; Secure`);
            });
            it('sets the cart cookie with an expiration time', () => {
                const cookieContext = createCookieContext({ isConsentRequired: false, cartExpirationInDays: 365 });
                const constantDate = new Date();
                jest.spyOn(global.Date, 'now').mockImplementationOnce(() => constantDate.valueOf());
                const expiryDate = new Date(new Date(constantDate.getTime()).setDate(constantDate.getDate() + 365));
                const isAuthenticated = false;
                cookieContext.setCartCookie({ Id: 'cart' }, isAuthenticated);
                expect(cookieSetter).toBeCalled();
                expect(cookieSetter).toBeCalledWith(`${msdyn365Commerce.CartCookie}=p%3Acart; Path=/; Expires=${expiryDate.toUTCString()}; Secure`);
            });
        });
    });
    describe('test checkout cart cookie utilities', () => {
        const mockCookieContext = createCookieContext({ isConsentRequired: false });
        describe('test get checkout cart cookie function', () => {
            it('returns default value of empty string when cookie context does not contain checkout cart cookie', () => {
                cookieGetter.mockReturnValue('');
                expect(mockCookieContext.getCheckoutCartCookie()).toBe('');
            });
            it('returns cart cookie value when cookie context contains cart cookie', () => {
                cookieGetter.mockReturnValue(`${msdyn365Commerce.checkoutCartCookie}=checkout-cart-cookie-value`);
                expect(mockCookieContext.getCheckoutCartCookie()).toBe('checkout-cart-cookie-value');
            });
        });
        describe('test set checkout cart cookie function', () => {
            it('sets the checkout cart cookie as a session cookie', () => {
                const constantDate = new Date();
                jest.spyOn(global.Date, 'now').mockImplementationOnce(() => constantDate.valueOf());
                const isAuthenticated = false;
                mockCookieContext.setCheckoutCartCookie({ Id: 'cart' }, isAuthenticated);
                expect(cookieSetter).toBeCalled();
                expect(cookieSetter).toBeCalledWith(`${msdyn365Commerce.checkoutCartCookie}=p%3Acart; Path=/; Secure`);
            });
            it('sets the checkout cart cookie with an expiration time', () => {
                const constantDate = new Date();
                jest.spyOn(global.Date, 'now')
                    .mockImplementationOnce(() => constantDate.valueOf())
                    .mockImplementationOnce(() => constantDate.valueOf());
                const cookieContext = createCookieContext({ isConsentRequired: false, cartExpirationInDays: 365 });
                const expiryDate = new Date(Date.now() + 365 * 86400000);
                const isAuthenticated = false;
                cookieContext.setCheckoutCartCookie({ Id: 'cart' }, isAuthenticated);
                expect(cookieSetter).toBeCalled();
                expect(cookieSetter).toBeCalledWith(`${msdyn365Commerce.checkoutCartCookie}=p%3Acart; Path=/; Expires=${expiryDate.toUTCString()}; Secure`);
            });
        });
        describe('test remove checkout cart cookie function', () => {
            it('validate if remove method is called with expected checkout cart cookie key', () => {
                // tslint:disable-next-line:no-string-literal
                const removeSpy = jest.spyOn(mockCookieContext['_cookies'], 'remove');
                mockCookieContext.removeCheckoutCartCookie();
                expect(removeSpy).toBeCalledWith(msdyn365Commerce.checkoutCartCookie, { path: '/' });
            });
        });
    });
    describe('test set cookie consent functionality', () => {
        it('sets the consent cookie', () => {
            const mockCookieContext = createCookieContext({ isConsentRequired: false });
            mockCookieContext.setConsentCookie();
            expect(mockCookieContext.clientCookie).toStrictEqual(['_msdyn365___ucc_=now; Path=/; Max-Age=31536000; Secure']);
        });
        it('sets the consent cookie without samesite', () => {
            const mockCookieContext = createCookieContext({ isConsentRequired: false, sameSiteRequired: true });
            mockCookieContext.setConsentCookie();
            expect(mockCookieContext.clientCookie).toStrictEqual(['_msdyn365___ucc_=now; Path=/; Max-Age=31536000; Secure; SameSite=none']);
        });
    });
    describe('Get Cookies', () => {
        describe('Client side', () => {
            it('Should be able to get cookies from the document', () => {
                cookieGetter.mockReturnValue('SPECIAL-COOKIE=HELLOWORLD;');
                let cookie = createCookieContext({ isConsentRequired: false });
                expect(cookie.get('SPECIAL-COOKIE').value).toBe('HELLOWORLD');
                expect(cookie.get('SPECIAL-COOKIE').status).toBe('FOUND');
                expect(cookie.get('notdefined').value).toBeUndefined();
                expect(cookie.get('notdefined').status).toBe('NOT_FOUND');
                cookieGetter.mockReturnValue('SPECIAL-COOKIE=HELLOWORLD;');
                cookie = createCookieContext();
                expect(cookie.get('SPECIAL-COOKIE').value).toBeUndefined();
                expect(cookie.get('SPECIAL-COOKIE').status).toBe('NO_CONSENT');
                expect(cookie.get('notdefined').value).toBeUndefined();
                expect(cookie.get('notdefined').status).toBe('NO_CONSENT');
                cookieGetter.mockReturnValue('SPECIAL-COOKIE=HELLOWORLD;_msdyn365___ucc_=1');
                cookie = createCookieContext();
                expect(cookie.get('SPECIAL-COOKIE').value).toBe('HELLOWORLD');
                expect(cookie.get('SPECIAL-COOKIE').status).toBe('FOUND');
                expect(cookie.get('notdefined').value).toBeUndefined();
                expect(cookie.get('notdefined').status).toBe('NOT_FOUND');
            });
            it('Should set cookies with correct options when sameSiteRequired: true', () => {
                jest.spyOn(msdyn365Commerce, 'isBrowser', 'get').mockReturnValue(true);
                const cookie = createCookieContext({ isConsentRequired: false, sameSiteRequired: true });
                cookie.set('test-cookie', 'test-value');
                expect(cookie.clientCookie).toStrictEqual(['test-cookie=test-value; Path=/; Secure; SameSite=none']);
            });
            it('Should set cookies with correct options when sameSiteRequired: false', () => {
                jest.spyOn(msdyn365Commerce, 'isBrowser', 'get').mockReturnValue(true);
                const cookie = createCookieContext({ isConsentRequired: false, sameSiteRequired: false });
                const options = { sameSite: 'none', httpOnly: true };
                cookie.set('test-cookie', 'test-value', options);
                expect(cookie.clientCookie).toStrictEqual(['test-cookie=test-value; Path=/; Secure; HttpOnly']);
            });
        });
        describe('Server Side', () => {
            afterAll(() => {
                jest.restoreAllMocks();
            });
            it('Should be able to get cookies from the request object', () => {
                const mockReq = (cookieString) => {
                    return {
                        headers: {
                            cookie: cookieString
                        }
                    };
                };
                // @ts-ignore
                let cookie = new CookieContext({ req: mockReq('server-cookie=superduperhello;'), isConsentRequired: false });
                expect(cookie.get('server-cookie').value).toBe('superduperhello');
                expect(cookie.get('server-cookie').status).toBe('FOUND');
                expect(cookie.get('notdefined').value).toBeUndefined();
                expect(cookie.get('notdefined').status).toBe('NOT_FOUND');
                // @ts-ignore
                cookie = new CookieContext({ req: mockReq('server-cookie=superduperhello;') });
                expect(cookie.get('server-cookie').value).toBeUndefined();
                expect(cookie.get('server-cookie').status).toBe('NO_CONSENT');
                expect(cookie.get('notdefined').value).toBeUndefined();
                expect(cookie.get('notdefined').status).toBe('NO_CONSENT');
                // @ts-ignore
                cookie = new CookieContext({ req: mockReq('server-cookie=superduperhello;_msdyn365___ucc_=1') });
                expect(cookie.get('server-cookie').value).toBe('superduperhello');
                expect(cookie.get('server-cookie').status).toBe('FOUND');
                expect(cookie.get('notdefined').value).toBeUndefined();
                expect(cookie.get('notdefined').status).toBe('NOT_FOUND');
            });
            it('Should be able to store cookies server side and pass to platform', () => {
                jest.spyOn(msdyn365Commerce, 'isBrowser', 'get').mockReturnValue(false);
                const cookie = createCookieContext({ isConsentRequired: false, sameSiteRequired: true });
                // No cookies set should return an empty array
                expect(cookie.serverCookies).toStrictEqual([]);
                // Single cookie test
                cookie.set('server-cookie', 'superduperhello');
                expect(cookie.serverCookies).toStrictEqual(['server-cookie=superduperhello; Path=/; Secure; SameSite=none']);
                // Multiple cookies with options
                cookie.set('server-cookie-2', 'superduperhello', { maxAge: 60, secure: true });
                expect(cookie.serverCookies).toStrictEqual([
                    'server-cookie=superduperhello; Path=/; Secure; SameSite=none',
                    'server-cookie-2=superduperhello; Path=/; Max-Age=60; Secure; SameSite=none'
                ]);
            });
        });
    });
});
//# sourceMappingURL=cookie-utils.test.js.map