/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// tslint:disable:react-no-dangerous-html -- intentionally set inner html
import { SDK_FRAGMENT_NAME } from '@msdyn365-commerce/core-internal';
import 'jest';
import * as React from 'react';
import { renderToString } from 'react-dom/server';
import { isTruthy, parseItemQSP, parseToQSPObject, patchedRenderToString } from '../helpers';
describe('helpers', () => {
    describe('patchedRenderToString', () => {
        it('properly replaces tag', () => {
            // arrange
            const expectedOutput = '<div>Hello world</div>';
            const element = React.createElement(SDK_FRAGMENT_NAME, { dangerouslySetInnerHTML: { __html: expectedOutput } });
            // act
            const defaultResult = renderToString(element);
            const patchedResult = patchedRenderToString(element, false);
            // assert
            expect(defaultResult).not.toEqual(patchedResult);
            expect(patchedResult).toEqual(expectedOutput);
        });
        it('skips other output', () => {
            // arrange
            const inputElement = React.createElement("div", null, "hello world");
            // act
            const baselineResult = renderToString(inputElement);
            const patchedResult = patchedRenderToString(inputElement, false);
            // assert -- if baseline changed, then snapshot & functions should be re-evaluated
            expect(baselineResult).toMatchSnapshot('renderToString baseline');
            expect(patchedResult).toMatchSnapshot('patched');
            expect(baselineResult).toEqual(patchedResult);
        });
    });
    describe('isTruthy', () => {
        it('detects truthy values correctly', () => {
            const truthyValues = [1, '1', true, 'true', 'yes', 'YEs', 'TRue'];
            truthyValues.forEach((value) => expect(isTruthy(value)).toBe(true));
        });
        it('detects falsy values correctly', () => {
            const truthyValues = [0, '0', false, 'false', null, undefined, 'no', 'FAlse', ''];
            truthyValues.forEach((value) => expect(isTruthy(value)).toBe(false));
        });
    });
    describe('parseToQSPObject', () => {
        it('parses valid falsy value successfully', () => {
            const qsp = 'somevalidqspvalue';
            const result = parseToQSPObject(qsp);
            const expectedResult = { hasValue: true, isTruthy: true, value: qsp };
            expect(result).toEqual(expectedResult);
        });
        it('parses valid truthy value successfully', () => {
            const qsp = 'true';
            const result = parseToQSPObject(qsp);
            const expectedResult = { hasValue: true, isTruthy: true, value: qsp };
            expect(result).toEqual(expectedResult);
        });
        it('parses undefined successfully', () => {
            const qsp = undefined;
            const result = parseToQSPObject(qsp);
            const expectedResult = { hasValue: false, isTruthy: false, value: qsp };
            expect(result).toEqual(expectedResult);
        });
    });
    describe('parseItemQSP', () => {
        it('detects single valid flag', () => {
            const qsp = encodeURIComponent('debug:true');
            const result = parseItemQSP(qsp);
            expect(result).toEqual({ debug: 'true' });
        });
        it('detects multiple valid flags', () => {
            const qsp = encodeURIComponent('debug:false,otherarg:3,foobar:yes');
            const result = parseItemQSP(qsp);
            expect(result).toEqual({ debug: 'false', otherarg: '3', foobar: 'yes' });
        });
        it('handles undefined gracefully', () => {
            const result = parseItemQSP(undefined);
            expect(result).toEqual({});
        });
        it('handles null gracefully', () => {
            const result = parseItemQSP(null);
            expect(result).toEqual({});
        });
        it('handles bad arguments', () => {
            const qsp = encodeURIComponent('debug:,,');
            const result = parseItemQSP(qsp);
            expect(result).toEqual({});
        });
        it('handles mix of bad & valid arguments', () => {
            const qsp = encodeURIComponent('debug:true,,foo=12:');
            const result = parseItemQSP(qsp);
            expect(result).toEqual({ debug: 'true' });
        });
    });
});
//# sourceMappingURL=helpers.test.js.map