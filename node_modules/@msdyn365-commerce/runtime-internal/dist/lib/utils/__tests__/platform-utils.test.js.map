{"version":3,"file":"platform-utils.test.js","sourceRoot":"","sources":["../../../../src/utils/__tests__/platform-utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { AppCache } from '@msdyn365-commerce/cache-internal';\nimport { buildMockRequest } from '@msdyn365-commerce/core';\nimport { buildMockTelemetry, msdyn365Commerce } from '@msdyn365-commerce/core-internal';\nimport * as CategoryDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/CategoriesDataActions.g';\nimport * as ProductDataActions from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';\nimport 'jest';\nimport { NextFunction } from 'jest-express/lib/next';\nimport { Request } from 'jest-express/lib/request';\nimport { Response } from 'jest-express/lib/response';\nimport { loadFeatureFlags, setCorsHeaders, setResponseHeaders, validateRouteAndChannelConfig } from '../platform-utils';\n// tslint:disable no-string-based-set-timeout\nconst noop = () => null;\nconst mockTelemetryObject = {\n    ...buildMockTelemetry(),\n    startTimer: (correlationId: string) => null,\n    stopTimer: (correlationId: string) => null\n};\n\nconst appCache = new AppCache({\n    ttrInSeconds: {\n        __VALIDATE_ROUTE_PDP__: 2,\n        __VALIDATE_ROUTE_CATEGORY__: 2\n    }\n});\n\ndescribe('platform utilities', () => {\n    describe('Validate Routes', () => {\n        afterEach(() => {\n            jest.restoreAllMocks();\n        });\n\n        describe('pdp', () => {\n            // tslint:disable-next-line:mocha-avoid-only\n            it('Should return 404 if no product is found in url', async () => {\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                // @ts-ignore\n                mockRes.setLocals('requestContext', buildMockRequest({ urlTokens: { pageType: 'product' } }));\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(mockRes.status).toBeCalledWith(404);\n                expect(next).not.toHaveBeenCalled();\n            });\n            // tslint:disable-next-line:mocha-avoid-only\n            it('Should return 500 if the data action throws and not cache the error', async () => {\n                const getProduct = jest.spyOn(ProductDataActions, 'getByIdAsync');\n                // @ts-ignore\n                getProduct.mockRejectedValue();\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                // @ts-ignore\n                mockRes.setLocals('requestContext', buildMockRequest({ urlTokens: { recordId: 5002, pageType: 'product' } }));\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(getProduct).toHaveBeenCalled();\n                expect(mockRes.status).toBeCalledWith(500);\n                expect(next).not.toHaveBeenCalled();\n\n                // should not cache 500 error, so subsequent call should invoke getCategories again\n                // tslint:disable-next-line:no-any\n                await validateRouteAndChannelConfig(<any>mockReq, <any>mockRes, next);\n                expect(getProduct).toHaveBeenCalled();\n                expect(next).not.toHaveBeenCalled();\n            });\n            it('Should return 404 if no product is found on the server when disable_routeerrors_cache is true', async () => {\n                const getProduct = jest.spyOn(ProductDataActions, 'getByIdAsync');\n                // @ts-ignore\n                getProduct.mockResolvedValue([]);\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                mockRes.setLocals(\n                    'requestContext',\n                    // tslint:disable-next-line:no-any\n                    <any>buildMockRequest({\n                        urlTokens: { recordId: '5', pageType: 'product' },\n                        features: { disable_routeerrors_cache: true }\n                    })\n                );\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(getProduct).toHaveBeenCalled();\n                expect(mockRes.status).toBeCalledWith(404);\n                expect(next).not.toHaveBeenCalled();\n            });\n            // tslint:disable-next-line:mocha-avoid-only\n            it('Should return 404 and then return product once cached validate route error expires', async () => {\n                const getProduct = jest.spyOn(ProductDataActions, 'getByIdAsync');\n                // @ts-ignore\n                getProduct.mockResolvedValue([]);\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                // @ts-ignore\n                mockRes.setLocals('requestContext', buildMockRequest({ urlTokens: { recordId: 5000, pageType: 'product' } }));\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(getProduct).toHaveBeenCalled();\n                expect(mockRes.status).toBeCalledWith(404);\n                expect(next).not.toHaveBeenCalled();\n\n                // should return same error since ttr (2 seconds) is not expired\n                getProduct.mockReset();\n                // tslint:disable-next-line:no-any\n                getProduct.mockResolvedValue(<any>{ RecordId: 5000 });\n                // tslint:disable-next-line:no-any\n                await validateRouteAndChannelConfig(<any>mockReq, <any>mockRes, next);\n                expect(getProduct).not.toHaveBeenCalled();\n                expect(next).not.toHaveBeenCalled();\n\n                // sleep for 3 seconds until ttr for the validate route error expires\n                await new Promise(r => setTimeout(r, 3000));\n                getProduct.mockReset();\n                // tslint:disable-next-line:no-any\n                getProduct.mockResolvedValue(<any>{ RecordId: 5000 });\n                // tslint:disable-next-line:no-any\n                await validateRouteAndChannelConfig(<any>mockReq, <any>mockRes, next);\n                expect(getProduct).toHaveBeenCalled();\n            });\n        });\n        describe('category', () => {\n            it('Should return 404 if no category is found in url', async () => {\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                // @ts-ignore\n                mockRes.setLocals('requestContext', buildMockRequest({ urlTokens: { pageType: 'category' } }));\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(mockRes.status).toBeCalledWith(404);\n                expect(next).not.toHaveBeenCalled();\n            });\n            it('Should return 500 if the data action throws and not cache the error', async () => {\n                const getCategories = jest.spyOn(CategoryDataActions, 'getCategoriesAsync');\n                // @ts-ignore\n                getCategories.mockRejectedValue();\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                // @ts-ignore\n                mockRes.setLocals('requestContext', buildMockRequest({ urlTokens: { recordId: 5001, pageType: 'category' } }));\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(getCategories).toHaveBeenCalled();\n                expect(mockRes.status).toBeCalledWith(500);\n                expect(next).not.toHaveBeenCalled();\n\n                // should not cache 500 error, so subsequent call should invoke getCategories again\n                // tslint:disable-next-line:no-any\n                await validateRouteAndChannelConfig(<any>mockReq, <any>mockRes, next);\n                expect(getCategories).toHaveBeenCalled();\n                expect(next).not.toHaveBeenCalled();\n            });\n            it('Should return 404 if no category is found on the server when disable_routeerrors_cache is true', async () => {\n                const getCategories = jest.spyOn(CategoryDataActions, 'getCategoriesAsync');\n                // @ts-ignore\n                getCategories.mockResolvedValue([]);\n                // tslint:disable-next-line:no-any\n                (<any>msdyn365Commerce).getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                mockRes.setLocals(\n                    'requestContext',\n                    // tslint:disable-next-line:no-any\n                    <any>buildMockRequest({\n                        urlTokens: { recordId: '5', pageType: 'category' },\n                        features: { disable_routeerrors_cache: true }\n                    })\n                );\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(getCategories).toHaveBeenCalled();\n                expect(mockRes.status).toBeCalledWith(404);\n                expect(next).not.toHaveBeenCalled();\n            });\n            it('Should return 404 if no category is found on the server and execute getCategories once route error cache ttr expires', async () => {\n                const getCategories = jest.spyOn(CategoryDataActions, 'getCategoriesAsync');\n                // @ts-ignore\n                getCategories.mockResolvedValue([]);\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                // @ts-ignore\n                mockRes.setLocals('requestContext', buildMockRequest({ urlTokens: { recordId: 5000, pageType: 'category' } }));\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(getCategories).toHaveBeenCalled();\n                expect(mockRes.status).toBeCalledWith(404);\n                expect(next).not.toHaveBeenCalled();\n\n                // should return same error since ttr (2 seconds) is not expired and not call getCategories\n                getCategories.mockReset();\n                // tslint:disable-next-line:no-any\n                getCategories.mockResolvedValue([<any>{ RecordId: 5000 }]);\n                // tslint:disable-next-line:no-any\n                await validateRouteAndChannelConfig(<any>mockReq, <any>mockRes, next);\n                expect(getCategories).not.toHaveBeenCalled();\n                expect(next).not.toHaveBeenCalled();\n\n                // sleep for 3 seconds until ttr for the validate route error expires\n                await new Promise(r => setTimeout(r, 3000));\n                getCategories.mockReset();\n                // tslint:disable-next-line:no-any\n                getCategories.mockResolvedValue([<any>{ RecordId: 5000 }]);\n                // tslint:disable-next-line:no-any\n                await validateRouteAndChannelConfig(<any>mockReq, <any>mockRes, next);\n                expect(getCategories).toHaveBeenCalled();\n            });\n        });\n        describe('list', () => {\n            it('Should return 404 if no list is found', async () => {\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                // @ts-ignore\n                mockRes.setLocals('requestContext', buildMockRequest({ urlTokens: { pageType: 'list' }, pageData: { list: 'invalid' } }));\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(mockRes.status).toBeCalledWith(404);\n                expect(next).not.toHaveBeenCalled();\n            });\n        });\n        describe('invalid', () => {\n            it('should pass through when page type is unknown', async () => {\n                jest.setTimeout(10000);\n                // @ts-ignore\n                msdyn365Commerce.getAppCache = () => appCache;\n                const getProduct = jest.spyOn(ProductDataActions, 'getByIdAsync');\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n                // @ts-ignore\n                mockRes.setLocals('requestContext', buildMockRequest({ urlTokens: { pageType: 'invalid' } }));\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(next).toHaveBeenCalled();\n                expect(getProduct).not.toHaveBeenCalled();\n            });\n            it('should pass through when page type is not defined', async () => {\n                const getProduct = jest.spyOn(ProductDataActions, 'getByIdAsync');\n                const mockReq: Request = new Request();\n                const mockRes: Response = new Response();\n\n                // @ts-ignore\n                mockRes.setLocals('requestContext', { ...buildMockRequest() });\n                // @ts-ignore\n                mockRes.setLocals('telemetry', mockTelemetryObject);\n                // @ts-ignore\n                const next: NextFunction = jest.fn();\n                // @ts-ignore\n                await validateRouteAndChannelConfig(mockReq, mockRes, next);\n                expect(next).toHaveBeenCalled();\n                expect(getProduct).not.toHaveBeenCalled();\n            });\n        });\n    });\n\n    describe('Set Cors Headers', () => {\n        it('Should not set access control headers if flights are not loaded', done => {\n            const setHeader = jest.fn();\n            const mockRes = {\n                locals: {},\n                setHeader\n            };\n            // @ts-ignore\n            setCorsHeaders({}, mockRes, () => {\n                expect(setHeader).not.toHaveBeenCalledWith('Access-Control-Allow-Origin', '*');\n                expect(setHeader).not.toHaveBeenCalledWith('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n                expect(setHeader).not.toHaveBeenCalledWith('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n                expect(setHeader).not.toHaveBeenCalledWith('Access-Control-Allow-Credentials', 'true');\n                done();\n            });\n        });\n        it('Should not set access control headers if allowAllCors is false', done => {\n            const setHeader = jest.fn();\n            const mockRes = {\n                locals: {\n                    features: {\n                        allowAllCors: false\n                    }\n                },\n                setHeader\n            };\n            // @ts-ignore\n            setCorsHeaders({}, mockRes, () => {\n                expect(setHeader).not.toHaveBeenCalledWith('Access-Control-Allow-Origin', '*');\n                expect(setHeader).not.toHaveBeenCalledWith('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n                expect(setHeader).not.toHaveBeenCalledWith('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n                expect(setHeader).not.toHaveBeenCalledWith('Access-Control-Allow-Credentials', 'true');\n                done();\n            });\n        });\n        it('Should set access control headers if allowAllCors is true', done => {\n            const setHeader = jest.fn();\n            const mockRes = {\n                locals: {\n                    features: {\n                        allowAllCors: true\n                    }\n                },\n                setHeader\n            };\n            // @ts-ignore\n            setCorsHeaders({}, mockRes, () => {\n                expect(setHeader).toHaveBeenCalledWith('Access-Control-Allow-Origin', '*');\n                expect(setHeader).toHaveBeenCalledWith('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n                expect(setHeader).toHaveBeenCalledWith('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n                expect(setHeader).toHaveBeenCalledWith('Access-Control-Allow-Credentials', 'true');\n                done();\n            });\n        });\n    });\n\n    describe('Set Response Headers', () => {\n        const oldEnv = process.env;\n        beforeEach(() => {\n            jest.resetModules();\n            // shallow copy\n            process.env = { ...oldEnv };\n        });\n\n        afterAll(() => {\n            process.env = oldEnv;\n        });\n\n        it('Should not set cache control if process is in production mode', done => {\n            const setHeader = jest.fn();\n            const mockRes = {\n                setHeader\n            };\n            process.env.NODE_ENV = 'production';\n            // @ts-ignore\n            setResponseHeaders({}, mockRes, () => {\n                expect(setHeader).not.toHaveBeenCalledWith('Cache-Control', 'max-age=1');\n                done();\n            });\n        });\n\n        it('Should set cache control if process is in development mode', done => {\n            const setHeader = jest.fn();\n            const mockRes = {\n                setHeader\n            };\n            process.env.NODE_ENV = 'development';\n            // @ts-ignore\n            setResponseHeaders({}, mockRes, () => {\n                expect(setHeader).toHaveBeenCalledWith('Cache-Control', 'max-age=1');\n                done();\n            });\n        });\n    });\n\n    describe('Load Feature Flags', () => {\n        it('Should set features to an empty object if they are not specified', done => {\n            const mockReq = {\n                body: {}\n            };\n            const mockRes = {\n                locals: {}\n            };\n            // @ts-ignore\n            loadFeatureFlags(mockReq, mockRes, () => {\n                // @ts-ignore\n                expect(mockRes.locals.features).toMatchObject({});\n                done();\n            });\n        });\n\n        it('SHould set features to the rendering context features', done => {\n            const mockReq = {\n                body: {\n                    renderingContext: {\n                        features: {\n                            special_feature_one: true\n                        }\n                    }\n                }\n            };\n            const mockRes = {\n                locals: {}\n            };\n            // @ts-ignore\n            loadFeatureFlags(mockReq, mockRes, () => {\n                // @ts-ignore\n                expect(mockRes.locals.features).toMatchObject({ special_feature_one: true });\n                done();\n            });\n        });\n\n        it('Should set the page response from the request body', done => {\n            const mockReq = {\n                body: {\n                    pageValue: 1235\n                }\n            };\n            const mockRes = {\n                locals: {}\n            };\n            // @ts-ignore\n            loadFeatureFlags(mockReq, mockRes, () => {\n                // @ts-ignore\n                expect(mockRes.locals.pageResponse).toMatchObject({ pageValue: 1235 });\n                done();\n            });\n        });\n    });\n});\n"]}