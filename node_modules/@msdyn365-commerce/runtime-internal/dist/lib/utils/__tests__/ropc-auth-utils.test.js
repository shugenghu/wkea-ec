import axios from 'axios';
import 'jest';
import { getUserInformationROPC } from '../ropc-auth-utils';
jest.mock('axios');
let credentials;
describe('ROPC Auth Utils test', () => {
    beforeEach(() => {
        credentials = {
            loginDomain: 'login.fabrikam.com',
            b2cTenant: 'rushmoreb2c',
            nativeApplicationId: 'af2b5746-95d9-412f-a4e9-ef9b19f32edc',
            ropcUserFlowName: 'B2C_1_ROPC_Sidd_Test',
            userImpersonationScopeURL: 'https://login.fabrikam.com/B2CAPI/user_impersonation',
            defaultUser: {
                name: 'default',
                email: 'xibiki4869@gomaild.com',
                password: 'test123!',
                customerAccountNumber: '00123465'
            },
            additionalUsers: [
                {
                    name: 'test-user',
                    email: 'xibiki4869@gomaild.com',
                    password: 'test123!',
                    customerAccountNumber: '00123467'
                }
            ]
        };
    });
    describe('error scenarios', () => {
        it('should throw error if loginDomain is missing', async () => {
            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes
            delete credentials.loginDomain;
            await expect(getUserInformationROPC(credentials, 'test-user')).rejects.toThrowErrorMatchingSnapshot();
        });
        it('should throw error if b2cTenant is missing', async () => {
            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes
            delete credentials.b2cTenant;
            await expect(getUserInformationROPC(credentials, 'test-user')).rejects.toThrowErrorMatchingSnapshot();
        });
        it('should throw error if ropcUserFlowName is missing', async () => {
            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes
            delete credentials.ropcUserFlowName;
            await expect(getUserInformationROPC(credentials, 'test-user')).rejects.toThrowErrorMatchingSnapshot();
        });
        it('should throw error if trying to sign in with default user and default user not configured', async () => {
            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes
            delete credentials.defaultUser;
            await expect(getUserInformationROPC(credentials, 'true')).rejects.toThrowErrorMatchingSnapshot();
        });
        it('should throw error if trying to sign in with non-configured user', async () => {
            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes
            delete credentials.defaultUser;
            await expect(getUserInformationROPC(credentials, 'not-configured')).rejects.toThrowErrorMatchingSnapshot();
        });
        it('should throw error if missing native application id', async () => {
            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes
            delete credentials.nativeApplicationId;
            await expect(getUserInformationROPC(credentials, 'true')).rejects.toThrowErrorMatchingSnapshot();
        });
        it('should tbrow error if missing userImpersonationScopeUrl', async () => {
            // @ts-ignore - This is a required property so TS compiler does not like delete but we are deleting for testing purposes
            delete credentials.userImpersonationScopeURL;
            await expect(getUserInformationROPC(credentials, 'true')).rejects.toThrowErrorMatchingSnapshot();
        });
    });
    describe('login scenarios', () => {
        let data;
        const constantDate = new Date();
        beforeEach(() => {
            data = {
                data: {
                    access_token: '12345',
                    expires_in: 3600
                }
            };
        });
        it('login happy path', async () => {
            // @ts-ignore jest mocking confuses ts compiler
            axios.mockImplementationOnce(() => Promise.resolve(data));
            jest.spyOn(global.Date, 'now').mockImplementationOnce(() => constantDate.valueOf());
            await getUserInformationROPC(credentials, 'true');
            expect(credentials.accessToken).toBe('12345');
            expect(credentials.currentUser).toBe('true');
            expect(credentials.customerAccountNumber).toBe('00123465');
            expect(credentials.expiryDate).toBe(Math.floor(constantDate.getTime() / 1000) + 3600);
        });
        it('login error', async () => {
            // @ts-ignore jest mocking confuses ts compiler
            axios.mockImplementationOnce(() => Promise.reject({ code: '401', response: 'Unauthorized' }));
            await expect(getUserInformationROPC(credentials, 'true')).rejects.toThrowErrorMatchingSnapshot();
        });
    });
});
//# sourceMappingURL=ropc-auth-utils.test.js.map