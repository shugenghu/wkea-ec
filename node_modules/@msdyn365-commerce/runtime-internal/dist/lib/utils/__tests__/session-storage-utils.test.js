/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import msdyn365Commerce from '@msdyn365-commerce/core';
import { CookieContext } from '../cookie-utils';
import { SessionStorageContext } from '../session-storage-utils';
describe('Session Storage Utilities', () => {
    const cookieGetter = jest.fn();
    const cookieSetter = jest.fn();
    // workaround to allow cookies in jsdom when imitating client browser (document.cookie)
    const createCookieContext = (contextArgs) => {
        const cookie = new CookieContext(contextArgs);
        // tslint:disable-next-line
        cookie['_cookies']['HAS_DOCUMENT_COOKIE'] = true;
        return cookie;
    };
    const createSessionStorageContext = (cookieContext) => {
        return new SessionStorageContext(cookieContext);
    };
    beforeAll(() => {
        Object.defineProperty(document, 'cookie', {
            get: cookieGetter,
            set: cookieSetter
        });
    });
    afterEach(() => {
        cookieGetter.mockReset();
        cookieSetter.mockReset();
        sessionStorage.clear();
        jest.clearAllMocks();
    });
    const mockCookieContext = createCookieContext({ isConsentRequired: false });
    const mockSessionStorage = createSessionStorageContext(mockCookieContext);
    describe('test get and set data from storage', () => {
        it('gets and sets data from storage and validate the returned value', () => {
            const key = '<testKey>';
            const obj = { label: 'MyTestLabel', value: 'SomeValue' };
            mockSessionStorage.setDataInStorage(key, obj);
            expect(sessionStorage.setItem).toBeCalledTimes(1);
            expect(sessionStorage.setItem).toBeCalledWith(key, `{\"label\":\"MyTestLabel\",\"value\":\"SomeValue\"}`);
            const objFromStorage = mockSessionStorage.getDataFromStorage(key);
            expect(sessionStorage.getItem).toBeCalledTimes(1);
            expect(sessionStorage.getItem).toBeCalledWith(key);
            expect(objFromStorage).toMatchObject(obj);
        });
        it('gets and sets data from storage with empty key and validate if it returns a empty object', () => {
            const key = '';
            const obj = { label: 'MyTestLabel', value: 'SomeValue' };
            mockSessionStorage.setDataInStorage(key, obj);
            expect(sessionStorage.setItem).toBeCalledTimes(0);
            const objFromStorage = mockSessionStorage.getDataFromStorage(key);
            expect(sessionStorage.getItem).toBeCalledTimes(0);
            expect(objFromStorage).toMatchObject({});
        });
        it('gets and sets data from storage with non existent key and validate if it returns a empty object', () => {
            const key = 'NonExistentKey';
            const objFromStorage = mockSessionStorage.getDataFromStorage(key);
            expect(sessionStorage.getItem).toBeCalledTimes(1);
            expect(sessionStorage.getItem).toBeCalledWith(key);
            expect(objFromStorage).toMatchObject({});
        });
    });
    describe('test remove data from session storage', () => {
        it('remove item when key is provided', () => {
            const key1 = '<testKey1>';
            const key2 = '<testKey2>';
            const obj1 = { label: 'MyTestLabel', value: 'SomeValue' };
            const obj2 = { label: 'MyOtherTestLabel', value: 'DifferentValue' };
            mockSessionStorage.setDataInStorage(key1, obj1);
            mockSessionStorage.setDataInStorage(key2, obj2);
            mockSessionStorage.removeDataFromStorage(key1);
            expect(sessionStorage.removeItem).toBeCalledTimes(1);
            expect(sessionStorage.removeItem).toBeCalledWith(key1);
            let objFromStorage = mockSessionStorage.getDataFromStorage(key1);
            expect(objFromStorage).toMatchObject({});
            objFromStorage = mockSessionStorage.getDataFromStorage(key2);
            expect(objFromStorage).toMatchObject(obj2);
        });
        it('do not remove items when non existent key is provided', () => {
            const key1 = '<testKey>';
            const nonExistentKey = 'NonExistentKey';
            const obj1 = { label: 'MyTestLabel', value: 'SomeValue' };
            mockSessionStorage.setDataInStorage(key1, obj1);
            mockSessionStorage.removeDataFromStorage(nonExistentKey);
            expect(sessionStorage.removeItem).toBeCalledTimes(1);
            expect(sessionStorage.removeItem).toBeCalledWith(nonExistentKey);
            const objFromStorage = mockSessionStorage.getDataFromStorage(key1);
            expect(objFromStorage).toMatchObject(obj1);
        });
    });
    describe('test get and set checkout cart data from session storage', () => {
        it('gets and sets checkout cart data in the session storage', () => {
            const checkoutCartDataObj = { Id: 'cart', data: 'SomeData' };
            const testKey = '<testKey>';
            cookieGetter.mockReturnValue(`${msdyn365Commerce.checkoutCartCookie}=<checkout-cart-cookie-id>`);
            mockSessionStorage.setCheckoutCartData(testKey, checkoutCartDataObj);
            expect(sessionStorage.setItem).toBeCalledTimes(1);
            expect(sessionStorage.setItem).toBeCalledWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-<checkout-cart-cookie-id>-${testKey}`, `{\"Id\":\"cart\",\"data\":\"SomeData\"}`);
            const checkoutCartFromStorage = mockSessionStorage.getCheckoutCartData(testKey);
            expect(sessionStorage.getItem).toBeCalledTimes(1);
            expect(sessionStorage.getItem).toBeCalledWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-<checkout-cart-cookie-id>-${testKey}`);
            expect(checkoutCartFromStorage).toMatchObject(checkoutCartDataObj);
        });
        it('gets and sets checkout cart data in the session storage when there is not checkout cart cookie', () => {
            const checkoutCartDataObj = { Id: 'cart', data: 'SomeData' };
            const testKey = '<testKey>';
            cookieGetter.mockReturnValue('');
            mockSessionStorage.setCheckoutCartData(testKey, checkoutCartDataObj);
            expect(sessionStorage.setItem).toBeCalledTimes(0);
            const checkoutCartFromStorage = mockSessionStorage.getCheckoutCartData(testKey);
            expect(sessionStorage.getItem).toBeCalledTimes(0);
            expect(checkoutCartFromStorage).toMatchObject({});
        });
        it('gets and sets checkout cart data in the session storage with empty key', () => {
            const checkoutCartDataObj = { Id: 'cart', data: 'SomeData' };
            const testKey = '';
            cookieGetter.mockReturnValue(`${msdyn365Commerce.checkoutCartCookie}=<checkout-cart-cookie-id>`);
            mockSessionStorage.setCheckoutCartData(testKey, checkoutCartDataObj);
            expect(sessionStorage.getItem).toBeCalledTimes(0);
            expect(sessionStorage.setItem).toBeCalledTimes(0);
            const checkoutCartFromStorage = mockSessionStorage.getCheckoutCartData(testKey);
            expect(sessionStorage.getItem).toBeCalledTimes(0);
            expect(checkoutCartFromStorage).toMatchObject({});
        });
        it('gets checkout cart data in the session storage with non existent data', () => {
            const testKey = 'NonExistentKey';
            cookieGetter.mockReturnValue(`${msdyn365Commerce.checkoutCartCookie}=<checkout-cart-cookie-id>`);
            const checkoutCartFromStorage = mockSessionStorage.getCheckoutCartData(testKey);
            expect(sessionStorage.getItem).toBeCalledTimes(1);
            expect(sessionStorage.getItem).toBeCalledWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-<checkout-cart-cookie-id>-${testKey}`);
            expect(checkoutCartFromStorage).toMatchObject({});
        });
    });
    describe('test remove checkout cart data from session storage', () => {
        it('remove checkout cart data when key is provided', () => {
            const key1 = '<testKey1>';
            const key2 = '<testKey2>';
            const checkoutCartObj1 = { id: 'cart1', value: 'SomeValue' };
            const checkoutCartObj2 = { id: 'cart2', value: 'DifferentValue' };
            cookieGetter.mockReturnValue(`${msdyn365Commerce.checkoutCartCookie}=<checkout-cart-cookie-id>`);
            mockSessionStorage.setCheckoutCartData(key1, checkoutCartObj1);
            mockSessionStorage.setCheckoutCartData(key2, checkoutCartObj2);
            mockSessionStorage.removeCheckoutCartData(key1);
            expect(sessionStorage.removeItem).toBeCalledTimes(1);
            expect(sessionStorage.removeItem).toBeCalledWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-<checkout-cart-cookie-id>-${key1}`);
            let checkoutCartFromStorage = mockSessionStorage.getCheckoutCartData(key1);
            expect(checkoutCartFromStorage).toMatchObject({});
            checkoutCartFromStorage = mockSessionStorage.getCheckoutCartData(key2);
            expect(checkoutCartFromStorage).toMatchObject(checkoutCartObj2);
        });
        it('remove all checkout cart data when no key is provided', () => {
            const key1 = '<testKey1>';
            const key2 = '<testKey2>';
            const checkoutCartObj1 = { id: 'cart1', value: 'SomeValue' };
            const checkoutCartObj2 = { id: 'cart2', value: 'DifferentValue' };
            cookieGetter.mockReturnValue(`${msdyn365Commerce.checkoutCartCookie}=<checkout-cart-cookie-id>`);
            mockSessionStorage.setCheckoutCartData(key1, checkoutCartObj1);
            mockSessionStorage.setCheckoutCartData(key2, checkoutCartObj2);
            mockSessionStorage.removeCheckoutCartData();
            expect(sessionStorage.removeItem).toBeCalledTimes(2);
            expect(sessionStorage.removeItem).toBeCalledWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-<checkout-cart-cookie-id>-${key1}`);
            expect(sessionStorage.removeItem).toBeCalledWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-<checkout-cart-cookie-id>-${key2}`);
            let checkoutCartFromStorage = mockSessionStorage.getCheckoutCartData(key1);
            expect(checkoutCartFromStorage).toMatchObject({});
            checkoutCartFromStorage = mockSessionStorage.getCheckoutCartData(key2);
            expect(checkoutCartFromStorage).toMatchObject({});
        });
        it('do not remove checkout cart data when non existent key is provided', () => {
            const key1 = '<testKey1>s';
            const nonExistentKey = 'NonExistentKey';
            const obj1 = { label: 'MyTestLabel', value: 'SomeValue' };
            mockSessionStorage.setDataInStorage(key1, obj1);
            mockSessionStorage.removeDataFromStorage(nonExistentKey);
            expect(sessionStorage.removeItem).toBeCalledTimes(1);
            expect(sessionStorage.removeItem).toBeCalledWith(nonExistentKey);
            const objFromStorage = mockSessionStorage.getDataFromStorage(key1);
            expect(objFromStorage).toMatchObject(obj1);
        });
    });
});
//# sourceMappingURL=session-storage-utils.test.js.map