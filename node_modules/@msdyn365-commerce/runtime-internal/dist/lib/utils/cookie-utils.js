/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import msdyn365Commerce from '@msdyn365-commerce/core-internal';
import Cookies from 'universal-cookie';
import { USER_CONSENT_GIVEN_EVENT } from '../consts';
const UserConsentCookieName = '_msdyn365___ucc_';
/**
 * Context for cookie handling
 *
 * @export
 * @class CookieContext
 */
export class CookieContext {
    /**
     * Returns a cookies class from the selected cookie store. If the express server
     * is passed the cookie header will be used otherwise the global cookie store will be used.
     * @param options Optional ICookieContextOptions.
     */
    constructor(options) {
        this._setCookieList = [];
        this._serverCookieList = [];
        this._clientCookieList = [];
        /**
         * Get Cookie Value
         *
         * @param {string} cookieName - A string cookie name
         * @return {ICookieValue} cookie value with status
         */
        this.get = (cookieName, isEssential) => {
            if (isEssential || this.isConsentGiven()) {
                const cookieValue = this._cookies.get(cookieName);
                return { name: cookieName, value: cookieValue, status: cookieValue ? 'FOUND' : 'NOT_FOUND' };
            }
            return { name: cookieName, value: undefined, status: 'NO_CONSENT' };
        };
        /**
         * Set Cookie
         *
         * @param {string} cookieName - A string cookie name
         * @param {T} cookieValue - A cookie value
         * @param {ICookieSetOptions} options cookie options same as document.cookie
         */
        this.set = (cookieName, cookieValue, options) => {
            const sameSiteRequiredFlag = this._options.sameSiteRequired;
            let cookieOptionsWithDefaults;
            cookieOptionsWithDefaults = { path: '/', secure: true, isEssential: false };
            if (sameSiteRequiredFlag === true) {
                cookieOptionsWithDefaults = { path: '/', secure: true, isEssential: false, sameSite: 'none', ...options };
            }
            else {
                if (options) {
                    const filteredOptions = {};
                    for (const [key, value] of Object.entries(options)) {
                        if (key.toLowerCase() !== 'samesite') {
                            filteredOptions[key] = value;
                        }
                    }
                    cookieOptionsWithDefaults = { path: '/', secure: true, isEssential: false, ...filteredOptions };
                }
            }
            if (cookieOptionsWithDefaults.isEssential || this.isConsentGiven()) {
                // Set the cookie if client side
                if (msdyn365Commerce.isBrowser) {
                    this._cookies.set(cookieName, cookieValue, cookieOptionsWithDefaults);
                    const clientCookieString = this.createCookieString(cookieName, cookieValue, cookieOptionsWithDefaults);
                    this._clientCookieList.push(clientCookieString);
                    return;
                }
                // If server side, convert the cookie into a header string and push it onto an array
                const serverCookieString = this.createCookieString(cookieName, cookieValue, cookieOptionsWithDefaults);
                this._serverCookieList.push(serverCookieString);
            }
            else {
                this._setCookieList.push(() => {
                    this._cookies.set(cookieName, cookieValue, cookieOptionsWithDefaults);
                });
            }
        };
        /**
         * Gets the value stored in the cart cookie that contains the
         * cart context and information. Returns an empty string if no such value exists.
         *
         */
        this.getCartCookie = () => {
            return this.get(msdyn365Commerce.CartCookie, true).value || '';
        };
        /**
         * Sets the cart cookie with a new expiry time time of one year
         * from the current date
         *
         * @param cart The object containing the current cart information
         * @param isAuthenticated Boolean representing whether current user is authenticated or not
         */
        this.setCartCookie = (cart, isAuthenticated) => {
            const prefix = isAuthenticated ? "t" /* Auth */ : "p" /* Anon */;
            const cartCookieOptions = { isEssential: true, secure: true, sameSite: 'none' };
            if (this._options.cartExpirationInDays) {
                // 86400000 is 1 day in ms
                cartCookieOptions.expires = new Date(Date.now() + this._options.cartExpirationInDays * 86400000);
            }
            this.set(msdyn365Commerce.CartCookie, `${prefix}:${cart.Id}`, cartCookieOptions);
        };
        /**
         * Gets the value stored in the checkout cart cookie that contains the
         * checkout cart context and information. Returns an empty string if no such value exists.
         */
        this.getCheckoutCartCookie = () => {
            return this.get(msdyn365Commerce.checkoutCartCookie, true).value || '';
        };
        /**
         * Sets the checkout cart cookie with a new expiry time time of one year
         * from the current date
         *
         * @param cart The object containing the current checkout cart information
         * @param isAuthenticated Boolean representing whether current user is authenticated or not
         */
        this.setCheckoutCartCookie = (cart, isAuthenticated) => {
            const prefix = isAuthenticated ? "t" /* Auth */ : "p" /* Anon */;
            const checkoutCartCookieOptions = { isEssential: true, secure: true, sameSite: 'none' };
            if (this._options.cartExpirationInDays) {
                // 86400000 is 1 day in ms
                checkoutCartCookieOptions.expires = new Date(Date.now() + this._options.cartExpirationInDays * 86400000);
            }
            this.set(msdyn365Commerce.checkoutCartCookie, `${prefix}:${cart.Id}`, checkoutCartCookieOptions);
        };
        /**
         * Remove checkout cart cookie.
         */
        this.removeCheckoutCartCookie = () => {
            this.remove(msdyn365Commerce.checkoutCartCookie);
        };
        /**
         * Remove cookie
         *
         */
        this.remove = (cookieName) => {
            return this._cookies.remove(cookieName, { path: '/' });
        };
        /**
         * Get whether consent is given or not
         *
         */
        this.isConsentGiven = () => {
            return this._options.isConsentRequired ? !!this._cookies.get(UserConsentCookieName) : true;
        };
        /**
         * Set consent cookie
         *
         */
        this.setConsentCookie = () => {
            const sameSiteRequiredFlag = this._options.sameSiteRequired;
            const cookieOptionsWithDefaults = { path: '/', maxAge: 31536000, secure: true };
            if (sameSiteRequiredFlag) {
                cookieOptionsWithDefaults.sameSite = 'none';
            }
            this._cookies.set(UserConsentCookieName, Date.now(), cookieOptionsWithDefaults);
            const clientCookieString = this.createCookieString(UserConsentCookieName, 'now', cookieOptionsWithDefaults);
            this._clientCookieList.push(clientCookieString);
            this._setCookieList.forEach(setCookieFunction => setCookieFunction());
            if (process.env.CURRENT_ENVIRONMENT === 'web') {
                document.dispatchEvent(new Event(USER_CONSENT_GIVEN_EVENT));
            }
        };
        /**
         * Remove consent cookie
         *
         */
        this.deleteConsentCookie = () => {
            return this._cookies.remove(UserConsentCookieName);
        };
        this.createCookieString = (cookieName, cookieValue, cookieOptionsWithDefaults) => {
            let cookieString = `${cookieName}=${cookieValue}`;
            if (cookieOptionsWithDefaults) {
                const optionsString = this._appendCookieOptions(cookieOptionsWithDefaults);
                if (optionsString) {
                    cookieString = `${cookieString}; ${optionsString}`;
                }
            }
            return cookieString;
        };
        this._appendCookieOptions = (options) => {
            const cookieOptions = [];
            if (options.path) {
                cookieOptions.push(`Path=${options.path}`);
            }
            if (options.expires) {
                cookieOptions.push(`Expires=${options.expires}`);
            }
            if (options.maxAge) {
                cookieOptions.push(`Max-Age=${options.maxAge}`);
            }
            if (options.domain) {
                cookieOptions.push(`Domain=${options.domain}`);
            }
            if (options.secure) {
                cookieOptions.push(`Secure`);
            }
            if (options.httpOnly) {
                cookieOptions.push(`HttpOnly`);
            }
            if (options.sameSite) {
                cookieOptions.push(`SameSite=${options.sameSite}`);
            }
            return cookieOptions.length !== 0 ? cookieOptions.join('; ') : '';
        };
        this._options = { isConsentRequired: true, ...options };
        this._cookies = new Cookies(this._options.req &&
            this._options.req.headers &&
            (this._options.req.headers['x-msdyn365-cookie'] || this._options.req.headers.cookie));
    }
    /**
     * Returns the list of server side cookies to set
     * only if currently executing server side
     */
    get serverCookies() {
        // tslint:disable-next-line: prefer-object-spread
        return msdyn365Commerce.isBrowser ? [] : Object.assign([], this._serverCookieList);
    }
    /**
     * Returns the list of client side cookies to set
     */
    get clientCookie() {
        // tslint:disable-next-line: prefer-object-spread
        return msdyn365Commerce.isBrowser ? Object.assign([], this._clientCookieList) : [];
    }
}
//# sourceMappingURL=cookie-utils.js.map