/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import msdyn365Commerce from '@msdyn365-commerce/core-internal';
/**
 * Context for session storage handling
 *
 * @export
 * @class CookieContext
 */
export class SessionStorageContext {
    constructor(_cookieContext) {
        /**
         * Gets the value stored in the session storage.
         * Returns an empty object if no such value exists.
         *
         * @param {string} key - The key string.
         */
        this.getDataFromStorage = (key) => {
            if (key) {
                return this.get(key).value || {};
            }
            return {};
        };
        /**
         * Sets a new key pair value in the session storage.
         *
         * @param {string} key - The key string.
         * @param {object} value - The data object.
         */
        this.setDataInStorage = (key, value) => {
            if (key && value) {
                this.set(key, value);
            }
        };
        /**
         * Gets the checkout cart stored in the session storage.
         * Returns an empty object if no such value exists.
         *
         * @param {string} key - The key string.
         */
        this.getCheckoutCartData = (key) => {
            if (key) {
                return key ? this.getDataFromStorage(this.getCheckoutCartKey(key)) : {};
            }
            return {};
        };
        /**
         * Sets checkout cart value in the session storage.
         *
         * @param {string} key - The key string.
         * @param {object} value - The cart data object.
         */
        this.setCheckoutCartData = (key, value) => {
            if (key && value) {
                this.setDataInStorage(this.getCheckoutCartKey(key), value);
            }
        };
        /**
         * Remove session storage by giving key
         *
         * @param {string} key - The key string.
         */
        this.removeDataFromStorage = (key) => {
            if (key) {
                this.remove(key);
            }
        };
        /**
         * Remove checkout cart data from the session storage by giving key
         *
         * @param {string} key - The key string. If key is not provided clear all data from session storage that contais the checkout cart key prefix.
         */
        this.removeCheckoutCartData = (key) => {
            if (key) {
                this.removeDataFromStorage(this.getCheckoutCartKey(key));
            }
            else {
                const keyList = Object.keys(sessionStorage);
                keyList.map(k => {
                    if (k.startsWith(`${msdyn365Commerce.checkoutCartKeyPrefix}-`)) {
                        this.removeDataFromStorage(k);
                    }
                });
            }
        };
        /**
         * Get session storage value.
         * If server side, no-op.
         *
         * @param {string} key - The key string
         * @return {ISessionStorageValue} value with status
         */
        this.get = (key) => {
            if (key && msdyn365Commerce.isBrowser) {
                const objString = sessionStorage.getItem(key);
                if (objString) {
                    const obj = JSON.parse(objString);
                    return { name: key, value: obj, status: obj ? 'FOUND' : 'NOT_FOUND' };
                }
            }
            return { name: key, value: undefined, status: 'NOT_FOUND' };
        };
        /**
         * Set session storage data.
         * If server side, no-op.
         *
         * @param {string} key - The key string
         * @param {T} value - The session storage value
         */
        this.set = (key, value) => {
            if (key && msdyn365Commerce.isBrowser) {
                sessionStorage.setItem(key, JSON.stringify(value));
            }
        };
        /**
         * Remove session storage data by giving key
         * If server side, no-op.
         *
         * @param {string} key - The key string
         */
        this.remove = (key) => {
            if (key && msdyn365Commerce.isBrowser) {
                sessionStorage.removeItem(key);
            }
        };
        /**
         * Build the checkout cart key for the session storage
         */
        this.getCheckoutCartKey = (key) => {
            const checkoutCartCookie = this._cookieContext.getCheckoutCartCookie();
            if (checkoutCartCookie) {
                return `${msdyn365Commerce.checkoutCartKeyPrefix}-${checkoutCartCookie}-${key}`;
            }
            return '';
        };
        this._cookieContext = _cookieContext;
    }
}
//# sourceMappingURL=session-storage-utils.js.map