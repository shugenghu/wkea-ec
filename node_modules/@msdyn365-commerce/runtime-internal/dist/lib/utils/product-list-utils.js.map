{"version":3,"file":"product-list-utils.js","sourceRoot":"","sources":["../../../src/utils/product-list-utils.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAMH;;;;GAIG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,QAA4B,EAAE,WAAiC,EAAsB,EAAE;IACpH,IAAI,QAAQ,EAAE;QACV,sCAAsC;QACtC,IAAI,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC7B,OAAO,QAAQ,CAAC;SACnB;QAED,oFAAoF;QACpF,OAAO,WAAW,CAAC,YAAY,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;KAClE;SAAM;QACH,4GAA4G;QAC5G,OAAO,SAAS,CAAC;KACpB;AACL,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAC/B,QAAiD,EACjD,WAAiC,EACM,EAAE;IACzC,MAAM,qBAAqB,GAA4C,EAAE,CAAC;IAE1E,QAAQ;QACJ,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACvB,IAAI,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE;gBAC7B,OAAO,CAAC,eAAe,GAAG,gBAAgB,CAAC,OAAO,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;gBACjF,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACvC;QACL,CAAC,CAAC,CAAC;IAEP,OAAO,qBAAqB,CAAC;AACjC,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CACrC,WAAqB,EACrB,6BAAoD,EAC/B,EAAE;IACvB,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,MAA6B,EAAE,MAAc,EAAE,EAAE;QACxE,MAAM,OAAO,GAAG,6BAA6B,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC;QAC3F,IAAI,OAAO,EAAE;YACT,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACxB;QACD,OAAO,MAAM,CAAC;QACd,kCAAkC;IACtC,CAAC,EAAE,EAAE,CAAC,CAAC;AACX,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ICommerceApiSettings } from '@msdyn365-commerce/core-internal';\nimport { ProductSearchResult, SimpleProduct } from '@msdyn365-commerce/retail-proxy';\nimport { merge as _merge } from 'lodash';\n\n/**\n * Generates a Image URL based on data return from retail server\n * @param imageUrl The image url returned by Retail Server\n * @param ctx The request context\n */\nexport const generateImageUrl = (imageUrl: string | undefined, apiSettings: ICommerceApiSettings): string | undefined => {\n    if (imageUrl) {\n        // Images hosted in CMS include schema\n        if (imageUrl.startsWith('http')) {\n            return imageUrl;\n        }\n\n        // Images hosted in Retail Server must be encoded and joined with the base image url\n        return apiSettings.baseImageUrl + encodeURIComponent(imageUrl);\n    } else {\n        // d365Commerce.telemetry.warning(`Unable to generate a proper Image URL for Product: ${product.RecordId}`);\n        return undefined;\n    }\n};\n\n/**\n * Generates a Image URL for a product based on data return from retail server\n * @param product The Product returned by Retail Server\n * @param ctx The request context\n */\nexport const getProductImageUrls = (\n    products: SimpleProduct[] | ProductSearchResult[],\n    apiSettings: ICommerceApiSettings\n): SimpleProduct[] | ProductSearchResult[] => {\n    const productsWithImageUrls: SimpleProduct[] | ProductSearchResult[] = [];\n\n    products &&\n        products.forEach(product => {\n            if (product && product.RecordId) {\n                product.PrimaryImageUrl = generateImageUrl(product.PrimaryImageUrl, apiSettings);\n                productsWithImageUrls.push(product);\n            }\n        });\n\n    return productsWithImageUrls;\n};\n\n/**\n * Uses the order in which the product ids were returned from the reco call to order\n * the results from the product hydration call\n *\n * @param itemIdOrder The order of product ids to observe\n * @param unorderedProductSearchResults Unordered set of hydrated products\n */\nexport const orderProductSearchResults = (\n    itemIdOrder: number[],\n    unorderedProductSearchResults: ProductSearchResult[]\n): ProductSearchResult[] => {\n    return itemIdOrder.reduce((result: ProductSearchResult[], itemId: number) => {\n        const product = unorderedProductSearchResults.find(element => element.RecordId === itemId);\n        if (product) {\n            result.push(product);\n        }\n        return result;\n        // tslint:disable-next-line: align\n    }, []);\n};\n"]}