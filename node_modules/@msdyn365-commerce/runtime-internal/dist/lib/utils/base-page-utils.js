/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { isNonceEnabled, sanitizeForXss } from '@msdyn365-commerce/core-internal';
import fastJson from 'fast-json-stringify';
import { renderToString } from 'react-dom/server';
import { GLIMPSE_LOGGER_NAME, PAGE_LOGGER_NAME } from '../consts';
import { CommentTag } from './helpers';
let APPINSIGHTS_EXCLUDED_DOMAINS = [];
export const getExcludedDomains = (appContext) => {
    if (!APPINSIGHTS_EXCLUDED_DOMAINS.length) {
        const excludedDomains = (appContext.platform && appContext.platform.correlationHeaderExcludedDomains) || [];
        APPINSIGHTS_EXCLUDED_DOMAINS = excludedDomains;
    }
    return JSON.stringify(APPINSIGHTS_EXCLUDED_DOMAINS);
};
const renderToStringWithNonceToken = (scriptTags, nonceToken) => {
    let scriptTagStringsWithNonce = '';
    for (const scriptTag of scriptTags) {
        const scriptTagString = renderToString(scriptTag);
        // if it is inline script, we add nonce token to it.
        if (nonceToken && scriptTag.props && scriptTag.props.children && scriptTag.type === 'script' && !scriptTag.props.src) {
            scriptTagStringsWithNonce = scriptTagStringsWithNonce.concat(scriptTagString.replace(/<script/g, `<script nonce=${nonceToken}`));
        }
        else {
            scriptTagStringsWithNonce = scriptTagStringsWithNonce.concat(scriptTagString);
        }
    }
    return scriptTagStringsWithNonce;
};
export const renderTags = (tags, nonceToken) => {
    // nonceToken will only be used when render <script> element. For this, we
    // only check if it is inline script when nonceToken parameter is passed in.
    if (!tags || tags.length === 0) {
        return '';
    }
    return renderToStringWithNonceToken(tags, nonceToken);
};
export const injectStylePresets = (url) => {
    if (!url) {
        return '';
    }
    return `<link rel="stylesheet" href="${url}" crossorigin="anonymous" />`;
};
/**
 * Returns the following debug information in json format
 * to be included in the head tag as data-info attribute
 *      v: Version
 *      dg: DeviceGroup
 *      th: Theme
 *      lo: Locale
 *      m: Market
 *      la: Language
 *      ru: RequestUrl
 * @param props
 * @param isWindowDataInfo
 */
export const getDebugInfo = (props, isWindowDataInfo) => {
    const { context, requestUrl } = props;
    const version = props.appData.bv ? props.appData.bv : 'Unable to get build version';
    const baseDataInfo = {
        lo: context.locale,
        ru: requestUrl && requestUrl.href
    };
    const localeParts = context.locale.split('-');
    // Grab the language and market from the locale
    let market = context.locale;
    let language = context.locale;
    if (localeParts.length === 2) {
        market = localeParts[1];
        language = localeParts[0];
    }
    // tslint:disable-next-line: no-any
    let debugValues = baseDataInfo;
    if (isWindowDataInfo) {
        debugValues = {
            ...baseDataInfo,
            v: version,
            dg: context.device.Type,
            m: market,
            la: language,
            ru: requestUrl && requestUrl.href,
            fs: props.context.features
        };
    }
    return JSON.stringify(debugValues);
};
export const useToolGlimpse = (props) => {
    const params = props.context.query;
    return params && params.usetool === 'glimpse';
};
export const includePageLogs = (props) => {
    const logger = props.telemetry.getNamedLoggerInstance(PAGE_LOGGER_NAME);
    if (logger) {
        return `${CommentTag('Start Server Logs')}<script type="text/javascript">window.__pageLogs__ = ${JSON.stringify(logger.logs)};</script>${CommentTag('End Server Logs')}`;
    }
    return '';
};
// tslint:disable:max-line-length
export const includeGlimpseNodeTab = (props) => {
    const logger = props.telemetry.getNamedLoggerInstance(GLIMPSE_LOGGER_NAME);
    if (logger) {
        if (useToolGlimpse(props)) {
            return `${CommentTag('START GLIMPSE JS')}<script type="text/javascript">function glm(){if(window.glimpse){var e=window._glimpseData.data;delete e.glimpse_views,delete e.microsoft_onerenderframework_webproject_toolshelper_partnermodulestab,Object.assign(e,{Node:{name:"Node",data:${sanitizeForXss(JSON.stringify(logger.getLogs()))}}}),window.glimpse.data.update(window._glimpseData)}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",glm):glm();
                        </script>${CommentTag('END GLIMPSE JS')}`;
        }
        else if (props.isDebug) {
            // TODO: is there a better way to add this?
            // @ts-ignore
            return `${CommentTag('Start Server Logs')}<script type="text/javascript">window.__server__ = ${JSON.stringify(logger.getLogs())};</script>${CommentTag('End Server Logs')}`;
        }
    }
    return '';
};
/**
 * Parses app-settings to return the content security policy
 * that should be applied to this site
 */
export const getContentSecurityPolicy = (ctx) => {
    // If CSP is disabled return policy that allows everything
    // Check if disableContentSecurityPolicy is set to true
    if (!ctx || !ctx.app || !ctx.app.contentSecurityPolicy || ctx.app.contentSecurityPolicy.disableContentSecurityPolicy) {
        return '';
    }
    const cspDirectives = ctx.app.contentSecurityPolicy;
    let directives = '';
    // If running in dev mode add the following to allowed list for connect and img src
    if (process.env.NODE_ENV === 'development') {
        cspDirectives['connect-src'] = (cspDirectives['connect-src'] || []).concat(['localhost:*', 'wss:']);
        if (process.env.MSDyn365Commerce_BASEURL) {
            cspDirectives['connect-src'].push(process.env.MSDyn365Commerce_BASEURL);
        }
        if (process.env.MSDyn365Commerce_BASEIMAGEURL) {
            const baseImageUrl = new URL(process.env.MSDyn365Commerce_BASEIMAGEURL).origin;
            cspDirectives['img-src'] = (cspDirectives['img-src'] || []).concat([baseImageUrl]);
        }
    }
    const nonceToken = isNonceEnabled(ctx);
    if (nonceToken) {
        cspDirectives['script-src'] = (cspDirectives['script-src'] || []).concat([`'nonce-${nonceToken}'`]);
    }
    Object.keys(cspDirectives).forEach((directive) => {
        const policies = cspDirectives[directive];
        directives += Array.isArray(policies) ? `${directive} ${policies.join(' ')};` : '';
    });
    return directives;
};
/*
Fast JSON Stringify Constructors

The following are Fast JSON Stringify constructors for initialData properties.
If a property of _moduleList, requestContext, _themeModulesList or pageRoot is updated
you will need to update the JSON schema of the following constructors to reflect the change
*/
export const moduleListFastJson = fastJson({
    type: 'array',
    items: {
        type: 'object',
        properties: {
            id: {
                type: 'string'
            },
            typeName: {
                type: 'string'
            },
            dataActions: {
                type: 'array',
                nullable: true,
                items: {
                    type: 'object',
                    nullable: true,
                    additionalProperties: true,
                    properties: {
                        name: {
                            nullable: true,
                            type: 'string'
                        },
                        entity: {
                            nullable: true,
                            type: 'string'
                        },
                        inputs: {
                            nullable: true,
                            type: 'string'
                        }
                    }
                }
            }
        }
    }
});
export const requestContextFastJson = fastJson({
    type: 'object',
    additionalProperties: true,
    nullable: true,
    properties: {
        channel: {
            type: 'object',
            additionalProperties: true
        },
        url: {
            type: 'object',
            properties: {
                requestUrl: {
                    type: 'string'
                },
                staticCdnUrl: {
                    type: 'string'
                }
            }
        },
        urlTokens: {
            additionalProperties: true,
            type: 'object',
            properties: {
                itemId: {
                    type: 'string'
                },
                recordId: {
                    type: 'string'
                },
                productName: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                },
                categories: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                pageType: {
                    type: 'string'
                }
            }
        },
        locale: {
            type: 'string'
        },
        telemetryPageName: {
            type: 'string'
        },
        market: {
            type: 'string'
        },
        textDirection: {
            type: 'string'
        },
        sitePath: {
            type: 'string'
        },
        device: {
            type: 'object',
            properties: {
                Type: {
                    type: 'string'
                }
            }
        },
        user: {
            type: 'object',
            additionalProperties: true,
            properties: {
                token: {
                    nullable: true,
                    type: 'string'
                },
                isAuthenticated: {
                    type: 'boolean'
                },
                signInUrl: {
                    type: 'string'
                },
                signOutUrl: {
                    type: 'string'
                },
                signUpUrl: {
                    type: 'string'
                },
                editProfileUrl: {
                    type: 'string'
                },
                signInName: {
                    nullable: true,
                    type: 'string'
                },
                name: {
                    nullable: true,
                    type: 'string'
                },
                firstName: {
                    nullable: true,
                    type: 'string'
                },
                lastName: {
                    nullable: true,
                    type: 'string'
                },
                emailAddress: {
                    nullable: true,
                    type: 'string'
                },
                customerAccountNumer: {
                    nullable: true,
                    type: 'string'
                },
                tenantId: {
                    nullable: true,
                    type: 'string'
                },
                optOutWebActivityTracking: {
                    nullable: true,
                    type: 'boolean'
                },
                userClaims: {
                    type: 'object',
                    nullable: true,
                    additionalProperties: true
                }
            }
        },
        app: {
            type: 'object',
            additionalProperties: true,
            properties: {
                config: {
                    type: 'object',
                    additionalProperties: true
                },
                routes: {
                    type: 'object',
                    additionalProperties: true,
                    properties: {
                        account: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        accountProfile: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        backToShopping: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        cart: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        checkout: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        home: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        loyalty: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        loyaltyJoin: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        orderConfirmation: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        orderDetails: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        search: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        wishlist: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        },
                        loyaltyTerms: {
                            type: 'object',
                            properties: {
                                destinationUrl: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                },
                platform: {
                    type: 'object',
                    additionalProperties: true,
                    properties: {
                        disableCookieCompliance: {
                            type: 'boolean'
                        },
                        imageQuality: {
                            type: 'integer'
                        },
                        skipToMainText: {
                            type: 'string'
                        }
                    }
                },
                contentSecurityPolicy: {
                    type: 'object',
                    properties: {
                        enableNonce: {
                            type: 'boolean'
                        },
                        disableContentSecurityPolicy: {
                            type: 'boolean'
                        },
                        enableReportOnlyMode: {
                            type: 'boolean'
                        },
                        'child-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'connect-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'img-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'script-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'style-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'default-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'base-uri': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'font-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'object-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        'media-src': {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        },
        query: {
            type: 'object',
            additionalProperties: true
        },
        previewContext: {
            nullable: true,
            type: 'string'
        },
        suggestedMarket: {
            nullable: true,
            type: 'string'
        },
        apiSettings: {
            type: 'object',
            properties: {
                baseUrl: {
                    type: 'string'
                },
                channelId: {
                    type: 'integer'
                },
                catalogId: {
                    type: 'integer'
                },
                oun: {
                    type: 'string'
                },
                baseImageUrl: {
                    type: 'string'
                },
                ratingsReviewsEndpoint: {
                    type: 'string'
                },
                retailServerProxyVersion: {
                    type: 'string'
                },
                rnr: {
                    type: 'object',
                    properties: {
                        proxyUrl: {
                            type: 'string'
                        },
                        url: {
                            type: 'string'
                        },
                        id: {
                            type: 'string'
                        }
                    }
                },
                ratingsReviewsProxyEndpoint: {
                    type: 'string'
                }
            }
        },
        operationId: {
            type: 'string'
        },
        connectors: {
            type: 'object',
            nullable: true,
            properties: {
                expConnector: {
                    nullable: true,
                    type: 'string'
                }
            }
        },
        params: {
            type: 'object',
            properties: {
                mock: {
                    type: 'string'
                },
                isDebug: {
                    type: 'boolean'
                },
                isEditor: {
                    type: 'boolean'
                },
                isPreview: {
                    type: 'boolean'
                },
                concatJs: {
                    type: 'object',
                    properties: {
                        hasValue: {
                            type: 'boolean'
                        },
                        isTruthy: {
                            type: 'boolean'
                        },
                        value: {
                            type: 'boolean'
                        }
                    }
                },
                theme: {
                    type: 'string'
                }
            }
        },
        features: {
            type: 'object',
            additionalProperties: true
        },
        pageData: {
            type: 'object',
            additionalProperties: true
        },
        _debug: {
            type: 'object',
            properties: {
                commerceSDKVersion: {
                    type: 'string'
                },
                commerceSSKVersion: {
                    type: 'string'
                },
                retailProxyVersion: {
                    type: 'string'
                }
            }
        },
        themeOverride: {
            type: 'object',
            properties: {
                url: {
                    type: 'string'
                },
                disableDefault: {
                    type: 'boolean'
                }
            }
        },
        telemetrySettings: {
            type: 'object',
            additionalProperties: true,
            properties: {
                doNotCollectBiData: {
                    type: 'boolean'
                },
                optOutWebActivityTracking: {
                    type: 'boolean'
                },
                eventHubEndPoint: {
                    type: 'string'
                },
                eventHubAuthToken: {
                    type: 'string'
                },
                operationId: {
                    type: 'string'
                },
                instrumentationKey: {
                    type: 'string'
                },
                environmentId: {
                    type: 'string'
                },
                url: {
                    type: 'string'
                },
                clientAuth: {
                    type: 'string'
                },
                commerceCoreEnvId: {
                    type: 'string'
                }
            }
        },
        requestUrl: {
            type: 'string'
        },
        clientContext: {
            type: 'object',
            properties: {
                deviceType: {
                    type: 'string'
                }
            }
        },
        requestFormData: {
            nullable: true,
            type: 'object',
            additionalProperties: true
        },
        canonicalDomain: {
            type: 'string'
        },
        canonicalUrl: {
            nullable: true,
            type: 'string'
        },
        staticContext: {
            type: 'object',
            properties: {
                staticCdnUrl: {
                    type: 'string'
                },
                staticCdnUrlWithLocale: {
                    type: 'string'
                }
            }
        },
        gridSettings: {
            type: 'object',
            properties: {
                xs: {
                    type: 'object',
                    properties: {
                        w: {
                            type: 'integer'
                        },
                        h: {
                            type: 'integer'
                        }
                    }
                },
                sm: {
                    type: 'object',
                    properties: {
                        w: {
                            type: 'integer'
                        },
                        h: {
                            type: 'integer'
                        }
                    }
                },
                md: {
                    type: 'object',
                    properties: {
                        w: {
                            type: 'integer'
                        },
                        h: {
                            type: 'integer'
                        }
                    }
                },
                lg: {
                    type: 'object',
                    properties: {
                        w: {
                            type: 'integer'
                        },
                        h: {
                            type: 'integer'
                        }
                    }
                },
                xl: {
                    type: 'object',
                    properties: {
                        w: {
                            type: 'integer'
                        },
                        h: {
                            type: 'integer'
                        }
                    }
                }
            }
        },
        debugMode: {
            type: 'integer'
        },
        redirectUrl: {
            nullable: true,
            type: 'string'
        },
        sameSiteRequired: {
            type: 'boolean'
        },
        siteStylePreset: {
            type: 'string'
        },
        pageStylePreset: {
            type: 'string'
        },
        telemetryData: {
            type: 'object',
            additionalProperties: true
        },
        headers: {
            type: 'object',
            additionalProperties: true
        },
        experiments: {
            type: 'object',
            nullable: true,
            properties: {
                userId: {
                    type: 'string',
                    nullable: true
                },
                activeExperiments: {
                    type: 'array',
                    items: {
                        type: 'object',
                        nullable: true,
                        properties: {
                            experimentId: {
                                type: 'string'
                            },
                            variantId: {
                                type: 'string'
                            },
                            moduleId: {
                                type: 'string'
                            }
                        }
                    }
                },
                moduleIdToExperimentIdMap: {
                    type: 'object',
                    nullable: true,
                    additionalProperties: true
                }
            }
        }
    }
});
export const themeModulesFastJson = fastJson({
    type: 'array',
    items: {
        type: 'string'
    }
});
export const pageRootFastJson = fastJson({
    additionalProperties: true,
    title: 'Page root fast json',
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        typeName: {
            type: 'string'
        },
        config: {
            $ref: '#/definitions/setting'
        },
        modules: {
            $ref: '#/definitions/rootModules'
        }
    },
    definitions: {
        rootModules: {
            type: 'object',
            additionalProperties: true,
            properties: {
                htmlHead: {
                    $ref: '#/definitions/moduleContent'
                },
                bodyBegin: {
                    $ref: '#/definitions/moduleContent'
                },
                bodyEnd: {
                    $ref: '#/definitions/moduleContent'
                },
                body: {
                    $ref: '#/definitions/moduleContent'
                }
            }
        },
        moduleContent: {
            type: 'array',
            items: {
                type: 'object',
                additionalProperties: true,
                properties: {
                    config: {
                        $ref: '#/definitions/setting'
                    },
                    id: {
                        type: 'string'
                    },
                    typeName: {
                        type: 'string'
                    },
                    friendlyName: {
                        type: 'string',
                        nullable: true
                    },
                    modules: {
                        type: 'object',
                        additionalProperties: true,
                        nullable: true
                    }
                }
            }
        },
        setting: {
            additionalProperties: true,
            nullable: true,
            type: 'object'
        }
    }
});
//# sourceMappingURL=base-page-utils.js.map