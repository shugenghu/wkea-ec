{"version":3,"file":"authoring-tools-helper-utils.js","sourceRoot":"","sources":["../../../src/utils/authoring-tools-helper-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable: no-any\nimport { ICache } from '@msdyn365-commerce/cache-internal';\nimport { IPartnerThemeSettings } from '@msdyn365-commerce/core-internal';\nimport { cloneDeep as _cloneDeep, get as _get, set as _set } from 'lodash';\nimport {\n    MODULE_ACTION_KEY,\n    MODULE_CACHE_KEY,\n    MODULE_CONFIG_ERRORS_KEY,\n    MODULE_CONFIG_KEY,\n    MODULE_DATA_KEY,\n    MODULE_DEFERRED_KEY\n} from '../consts';\n\nexport interface IImageData {\n    $type: string;\n    altText: string;\n    source: string;\n    imageQuality: string;\n    title: string;\n    focalRegion?: IFocalRegion;\n    cropRegions?: ICropRegion[];\n    format?: string;\n}\n\n/**\n * cms datatype for focal region\n */\nexport interface IFocalRegion {\n    x1?: number;\n    y1?: number;\n    x2?: number;\n    y2?: number;\n}\n\n/**\n * cms datatype for crop region\n */\n\nexport interface ICropRegion {\n    top?: number;\n    left?: number;\n    width?: number;\n    height?: number;\n    targetWidth?: number;\n    targetHeight?: number;\n    name: string;\n}\n\nexport interface IBinaryReference {\n    format?: string;\n    clientHref?: string;\n    alias?: string;\n    contentType?: string;\n    extension?: string;\n    sourceHref?: string;\n}\n\nexport interface IVideoData {\n    fileName: string;\n    title: string;\n    playTime: number;\n    thumbnail: IImageData;\n    interactiveTriggersEnabled?: boolean;\n    binaryReferences: IBinaryReference[];\n}\n\ninterface IImageResizerQueryParams {\n    /* Image width */\n    w: string;\n\n    /* Image height */\n    h: string;\n\n    /* Image quality */\n    q: string;\n\n    /* Image mode, 6 represents focal point mode and 8 represents crop region mode.\n    6 is the default value if neither focal or crop region information is present */\n    m: string;\n\n    /* Used to toggle focal mode. If o=t use focal crop. If o=f disable focal point crop */\n    o?: string;\n\n    /* X cooridnate for focal point or crop region start */\n    x?: string;\n\n    /* Y coordinate for focal point or crop region start */\n    y?: string;\n\n    /* Image size, used with crop regions */\n    s?: string;\n\n    /* Image depth, used with crop regions */\n    d?: string;\n\n    /* Image format, e.g. jpg, png */\n    f?: string;\n}\n\n/**\n * Resolves any image/video types in the module config as given by authoring in a fragment or a module\n * into what is required to render these images/videos on SDK side\n */\nexport const resolveTypesInConfig = (\n    config: any,\n    moduleId: string,\n    moduleType: string,\n    moduleLayout: string | undefined,\n    themeSettings: IPartnerThemeSettings\n) => {\n    resolveTypesInConfigHelper(config, moduleId, moduleType, moduleLayout, [], themeSettings);\n};\n\nconst resolveTypesInConfigHelper = (\n    obj: any,\n    moduleId: string,\n    moduleType: string,\n    moduleLayout: string | undefined,\n    pathToField: string[],\n    themeSettings: IPartnerThemeSettings\n) => {\n    if (!obj) {\n        return;\n    } else if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            resolveTypesInConfigHelper(obj[i], moduleId, moduleType, moduleLayout, pathToField.concat([`${i}`]), themeSettings);\n        }\n    } else if (typeof obj === 'object' && obj) {\n        Object.keys(obj).forEach((value: string) => {\n            const updatedPathToField = pathToField.concat([`${value}`]);\n            if (obj[value].type === 'imageFileData') {\n                const imageData = obj[value];\n\n                // Construct the viewport image settings information using the current theme and module\n                const viewportInfo = constructViewportInformationForImage(\n                    moduleType,\n                    moduleLayout,\n                    updatedPathToField,\n                    imageData.binaryMetadata?.quality || 80,\n                    themeSettings,\n                    imageData.binaryMetadata?.focalRegion,\n                    imageData.binaryMetadata?.cropRegions,\n                    imageData.binaryMetadata?.extension\n                ).viewports;\n                obj[value] = {\n                    src: imageData.publicUrl,\n                    $type: 'image',\n                    altText: imageData.variantInfo?.variantProperties?.altText,\n                    title: imageData.variantInfo?.variantProperties?.title,\n                    imageSettings: {\n                        quality: imageData.binaryMetadata?.quality,\n                        viewports: viewportInfo\n                    }\n                };\n            } else if (obj[value].type === 'videoFileData') {\n                const authoringVideoData = obj[value];\n                const videoData: IVideoData = {\n                    binaryReferences: authoringVideoData.binaryMetadata?.binaryReferences,\n                    title: authoringVideoData.binaryMetadata?.title,\n                    playTime: authoringVideoData.binaryMetadata?.playtime,\n                    fileName: authoringVideoData.sourceUrl,\n                    interactiveTriggersEnabled: authoringVideoData.variantProperties?.interactiveTriggersEnabled,\n                    thumbnail: {\n                        $type: 'image',\n                        source: authoringVideoData.thumbnailUrl,\n                        imageQuality: '80',\n                        altText: authoringVideoData.binaryMetadata?.thumbnail?.title,\n                        title: authoringVideoData.binaryMetadata?.thumbnail?.altText\n                    }\n                };\n                obj[value] = constructVideoInformation(videoData, moduleId);\n            } else {\n                resolveTypesInConfigHelper(obj[value], moduleId, moduleType, moduleLayout, updatedPathToField, themeSettings);\n            }\n        });\n    }\n};\n\n/**\n * Constructs the viewport information for an image using the current module and theme settings\n * Also constructs the query string for the image resizer\n *\n * @param moduleId The id of the module\n * @param moduleConfig The config object for the module\n * @param pathToField The path to the image the field\n * @param quality The image quality selected\n * @param themeSettings The current theme settings\n * @param focalRegion The image focal region settings\n * @param cropRegions The image crop region per layout/viewport settings\n * @param format The image format\n */\nexport const constructViewportInformationForImage = (\n    moduleName: string,\n    moduleLayout: string | undefined,\n    pathToField: string[],\n    quality: string,\n    themeSettings: IPartnerThemeSettings,\n    focalRegion: IFocalRegion = {},\n    cropRegions: ICropRegion[] = [],\n    format?: string\n): any => {\n    const imageSettings = {\n        viewports: {\n            xs: {\n                width: 800,\n                height: 600\n            },\n            sm: {\n                width: 1200,\n                height: 900\n            },\n            md: {\n                width: 1600,\n                height: 900\n            },\n            lg: {\n                width: 1600,\n                height: 700\n            },\n            xl: {\n                width: 1600,\n                height: 700\n            }\n        }\n    };\n\n    // Drill down into the theme settings object for the current module, current module layout and image property name\n    if (themeSettings && themeSettings.modules && moduleLayout) {\n        const themeSettingsForModule = themeSettings.modules[moduleName];\n        if (themeSettingsForModule) {\n            const themeSettingsForLayout = themeSettingsForModule.properties[moduleLayout];\n            if (themeSettingsForLayout) {\n                const imageViewportProperties = _get(themeSettingsForLayout.properties, pathToField, { properties: imageSettings })\n                    .properties;\n                // Clone the image viewport properties from theme settings\n                // so that the proxy traps do not affect the global themesettings\n                imageSettings.viewports = _cloneDeep(imageViewportProperties);\n            }\n        }\n    }\n\n    // Construct the query string to use for the image resizer given the width, height and quality selected\n    Object.keys(imageSettings.viewports).forEach((viewport: string) => {\n        const currentViewport = imageSettings.viewports[viewport];\n        const width = getWidth(currentViewport);\n        const height = getHeight(currentViewport);\n        currentViewport.q = constructImageQueryString(\n            width,\n            height,\n            quality,\n            focalRegion,\n            cropRegions,\n            moduleName,\n            moduleLayout,\n            pathToField,\n            viewport,\n            format\n        );\n    });\n    return imageSettings;\n};\n\nconst getWidth = (currentViewport: any) => {\n    if (currentViewport.w) {\n        return currentViewport.w;\n    } else if (currentViewport.width) {\n        return currentViewport.width;\n    }\n    return undefined;\n};\n\nconst getHeight = (currentViewport: any) => {\n    if (currentViewport.h) {\n        return currentViewport.h;\n    } else if (currentViewport.height) {\n        return currentViewport.height;\n    }\n    return undefined;\n};\n\n/**\n * Constructs the image resizer query param string\n * taking into account width, height, quality, focal point and crop regions\n */\nconst constructImageQueryString = (\n    width: string,\n    height: string,\n    quality: string,\n    focalRegion: IFocalRegion,\n    cropRegions: ICropRegion[],\n    moduleName: string,\n    moduleLayout: string | undefined,\n    pathToField: string[],\n    viewport: string,\n    format?: string\n): string => {\n    // Set the base properties\n    const resizerProperties: IImageResizerQueryParams = {\n        w: width,\n        h: height,\n        q: quality,\n        m: '6'\n    };\n\n    // If focal region properties exist set the focal point information\n    if (focalRegion && focalRegion.x1 && focalRegion.y1) {\n        resizerProperties.o = 't';\n        resizerProperties.x = `${focalRegion.x1}`;\n        resizerProperties.y = `${focalRegion.y1}`;\n    }\n\n    const pathToFieldString = pathToField.join('|');\n    const cropRegion = cropRegions.find(\n        (value: ICropRegion) => value.name === `${moduleName}|${moduleLayout}|${pathToFieldString}|${viewport}|${width}x${height}`\n    );\n    // If crop region exists for the particular viewport and layout\n    // If both focal and crop region information exist, crop region takes precedence\n    if (cropRegion) {\n        resizerProperties.o = undefined;\n        resizerProperties.m = '8';\n        resizerProperties.x = `${cropRegion.left}`;\n        resizerProperties.y = `${cropRegion.top}`;\n        resizerProperties.s = `${cropRegion.width}`;\n        resizerProperties.d = `${cropRegion.height}`;\n    }\n\n    // Add format information if available\n    if (format) {\n        resizerProperties.f = format.slice(1);\n    }\n\n    let queryString: string = '';\n    Object.keys(resizerProperties).forEach((key: string) => {\n        if (resizerProperties[key]) {\n            queryString += `${key}=${resizerProperties[key]}&`;\n        }\n    });\n    // Remove trailing ampersand if length greater than 0\n    return queryString.length > 0 ? queryString.slice(0, -1) : queryString;\n};\n\n// Moves an element in the given array to the newIndex,\n// pushing all elements after the new index to the right\nexport const moveArrayItem = (array: any[], newIndex: number, newElement: any): void => {\n    array.splice(newIndex, 0, newElement);\n};\n\n/**\n * Deletes all the cache entries for a specific module id\n *\n * @param moduleId The module id of the module whose cache entries are to be deleted\n * @param cache The cache object\n */\nexport const deleteCacheEntriesForModuleId = (moduleId: string, cache: ICache): void => {\n    // Delete module from all cache types\n    cache.del({ typeName: MODULE_CONFIG_ERRORS_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_CONFIG_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_CACHE_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_ACTION_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_DATA_KEY, key: moduleId });\n    cache.del({ typeName: MODULE_DEFERRED_KEY, key: moduleId });\n};\n\n/**\n * Constructs a video object used to render a video using data given by authoring\n *\n * @param videoData The video data given by authoring\n * @param moduleId The module id of the module for which this information is being constructed\n */\nexport const constructVideoInformation = (videoData: IVideoData, moduleId: string, id?: string): any => {\n    // Used to generate unique keys so that even reused module ID will still trigger re-render of player component\n    const uniqueTime = new Date().getTime();\n    return {\n        $type: 'video',\n        id: `${moduleId}:${uniqueTime}`,\n        _links: {\n            binaryReferences: videoData.binaryReferences\n        },\n        playTime: videoData.playTime,\n        title: videoData.title,\n        fileName: videoData.fileName,\n        thumbnail: {\n            $type: 'image',\n            src: videoData.thumbnail.source,\n            title: videoData.thumbnail.title,\n            quality: videoData.thumbnail.imageQuality\n        },\n        interactiveTriggersEnabled: videoData.interactiveTriggersEnabled || false\n    };\n};\n\n/**\n * Gets the property value of the specified property key\n * from a data-i attribute string\n *\n * @param dataIAttribute data-i attribute string\n * @param key property key\n */\nexport const getPropertyFromDataIAttribute = (dataIAttribute: string, key: string) => {\n    dataIAttribute = dataIAttribute.slice(1, -1);\n    const properties = dataIAttribute?.split(',');\n    const obj = {};\n    properties?.forEach((property: string) => {\n        const keyValuePairs = property.split(':');\n        obj[keyValuePairs[0]] = keyValuePairs[1];\n    });\n    return obj[key];\n};\n"]}