/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { parsePayload } from '@msdyn365-commerce/core-internal';
import 'jest';
import * as path from 'path';
import { getMockDataBasedOnRequestQueryString, getMockIdFromRequest, getOverrideProperties, searchForMock } from '../mock-helper';
describe('Mock Helper', () => {
    describe('getMockIdFromRequest', () => {
        it('Should return type param as an array', () => {
            const query = {
                type: 'hello:world,hello2:world2'
            };
            const mockIds = getMockIdFromRequest(query);
            expect(mockIds).toHaveLength(2);
        });
        it('Should throw an error when no type query is passed', () => {
            const query = {
                notType: 'hello:world'
            };
            expect(() => getMockIdFromRequest(query)).toThrowError(`Please specify type query string. Eg: http://localhost:3000/modules?type=hero:hero1,hero:hero2`);
        });
    });
    describe('Parse Payload', () => {
        it('Should throw an error if payload cannot be parsed', () => {
            const invalidPayload = 'asdfa';
            expect(() => parsePayload(invalidPayload)).toThrowError();
        });
        it('Should return a JSON object when passed', () => {
            const payload = {
                hello: 'world'
            };
            // @ts-ignore
            const parsedPayload = parsePayload(payload);
            expect(parsedPayload).toMatchObject(payload);
        });
        it('Should return a JSON object when passed a JSON string', () => {
            const payload = {
                hello: 'world'
            };
            // @ts-ignore
            const parsedPayload = parsePayload(JSON.stringify(payload));
            expect(parsedPayload).toMatchObject(payload);
        });
    });
    describe('getOverrideProperties', () => {
        it('Should return null if no config is passed', () => {
            const overrideProperties = getOverrideProperties({}, {});
            expect(overrideProperties).toBeNull();
        });
        it('Should return null if a malformed config is passed', () => {
            const telemetry = {
                stringFormat: jest.fn(),
                log: jest.fn()
            };
            const overrideProperties = getOverrideProperties({ config: '%E0%A4%A' }, telemetry);
            expect(telemetry.log).toHaveBeenCalledTimes(1);
            expect(overrideProperties).toBeNull();
        });
    });
    describe('getMockDataBasedOnRequestQueryString tests', () => {
        it('Should generate page json with the order of modules specified in query string preserved', async () => {
            const telemetry = {
                stringFormat: jest.fn(),
                log: jest.fn()
            };
            const appDir = process.cwd();
            const pathToHelloWorldModule = path.resolve(appDir, 'src/mock/mocks/hello-world.json');
            const pathToHelloWorld2Module = path.resolve(appDir, 'src/mock/mocks/hello-world2.json');
            const pathToHelloWorld3Module = path.resolve(appDir, 'src/mock/mocks/hello-world3.json');
            // Mock search for mock to return paths to test module mock for modules
            // @ts-ignore jest mocking confuses ts compiler
            searchForMock = jest
                .fn()
                .mockReturnValueOnce(pathToHelloWorldModule)
                .mockReturnValueOnce(pathToHelloWorld2Module)
                .mockReturnValueOnce(pathToHelloWorld3Module);
            const pageJson = await getMockDataBasedOnRequestQueryString({ type: 'hello-world,hello-world-2,hello-world-3' }, telemetry);
            expect(pageJson.pageRoot.modules).toBeDefined();
            // @ts-ignore This test is to check whether it is defined
            expect(pageJson.pageRoot.modules.body).toBeDefined();
            // @ts-ignore Previous test will fail if body is undefined
            expect(pageJson.pageRoot.modules.body[0].modules.primary[0].modules).toMatchSnapshot();
        });
    });
});
//# sourceMappingURL=mock-helper.test.js.map