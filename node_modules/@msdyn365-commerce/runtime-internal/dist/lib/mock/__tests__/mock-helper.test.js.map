{"version":3,"file":"mock-helper.test.js","sourceRoot":"","sources":["../../../../src/mock/__tests__/mock-helper.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { parsePayload } from '@msdyn365-commerce/core-internal';\nimport { InternalTelemetry } from '@msdyn365-commerce/telemetry-internal';\nimport 'jest';\nimport * as path from 'path';\nimport { getMockDataBasedOnRequestQueryString, getMockIdFromRequest, getOverrideProperties, searchForMock } from '../mock-helper';\n\ndescribe('Mock Helper', () => {\n    describe('getMockIdFromRequest', () => {\n        it('Should return type param as an array', () => {\n            const query = {\n                type: 'hello:world,hello2:world2'\n            };\n            const mockIds = getMockIdFromRequest(query);\n            expect(mockIds).toHaveLength(2);\n        });\n\n        it('Should throw an error when no type query is passed', () => {\n            const query = {\n                notType: 'hello:world'\n            };\n            expect(() => getMockIdFromRequest(query)).toThrowError(\n                `Please specify type query string. Eg: http://localhost:3000/modules?type=hero:hero1,hero:hero2`\n            );\n        });\n    });\n\n    describe('Parse Payload', () => {\n        it('Should throw an error if payload cannot be parsed', () => {\n            const invalidPayload = 'asdfa';\n            expect(() => parsePayload(invalidPayload)).toThrowError();\n        });\n        it('Should return a JSON object when passed', () => {\n            const payload = {\n                hello: 'world'\n            };\n            // @ts-ignore\n            const parsedPayload = parsePayload(payload);\n            expect(parsedPayload).toMatchObject(payload);\n        });\n        it('Should return a JSON object when passed a JSON string', () => {\n            const payload = {\n                hello: 'world'\n            };\n            // @ts-ignore\n            const parsedPayload = parsePayload(JSON.stringify(payload));\n            expect(parsedPayload).toMatchObject(payload);\n        });\n    });\n\n    describe('getOverrideProperties', () => {\n        it('Should return null if no config is passed', () => {\n            const overrideProperties = getOverrideProperties({}, <InternalTelemetry>{});\n            expect(overrideProperties).toBeNull();\n        });\n\n        it('Should return null if a malformed config is passed', () => {\n            const telemetry: InternalTelemetry = <InternalTelemetry>(<unknown>{\n                stringFormat: jest.fn(),\n                log: jest.fn()\n            });\n\n            const overrideProperties = getOverrideProperties({ config: '%E0%A4%A' }, telemetry);\n            expect(telemetry.log).toHaveBeenCalledTimes(1);\n            expect(overrideProperties).toBeNull();\n        });\n    });\n\n    describe('getMockDataBasedOnRequestQueryString tests', () => {\n        it('Should generate page json with the order of modules specified in query string preserved', async () => {\n            const telemetry: InternalTelemetry = <InternalTelemetry>(<unknown>{\n                stringFormat: jest.fn(),\n                log: jest.fn()\n            });\n            const appDir = process.cwd();\n            const pathToHelloWorldModule = path.resolve(appDir, 'src/mock/mocks/hello-world.json');\n            const pathToHelloWorld2Module = path.resolve(appDir, 'src/mock/mocks/hello-world2.json');\n            const pathToHelloWorld3Module = path.resolve(appDir, 'src/mock/mocks/hello-world3.json');\n\n            // Mock search for mock to return paths to test module mock for modules\n            // @ts-ignore jest mocking confuses ts compiler\n            searchForMock = jest\n                .fn()\n                .mockReturnValueOnce(pathToHelloWorldModule)\n                .mockReturnValueOnce(pathToHelloWorld2Module)\n                .mockReturnValueOnce(pathToHelloWorld3Module);\n            const pageJson = await getMockDataBasedOnRequestQueryString({ type: 'hello-world,hello-world-2,hello-world-3' }, telemetry);\n            expect(pageJson.pageRoot.modules).toBeDefined();\n            // @ts-ignore This test is to check whether it is defined\n            expect(pageJson.pageRoot.modules.body).toBeDefined();\n            // @ts-ignore Previous test will fail if body is undefined\n            expect(pageJson.pageRoot.modules.body[0].modules.primary[0].modules).toMatchSnapshot();\n        });\n    });\n});\n"]}