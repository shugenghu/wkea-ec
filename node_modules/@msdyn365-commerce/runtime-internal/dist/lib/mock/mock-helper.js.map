{"version":3,"file":"mock-helper.js","sourceRoot":"","sources":["../../../src/mock/mock-helper.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n'use strict';\n\nimport { IAny, IDictionary, IGeneric, IModule, IPageResponse } from '@msdyn365-commerce/core-internal';\nimport {\n    asSystemMetadata,\n    EXCEPTION_BADCONFIGPASSED,\n    EXCEPTION_JSONPARSEFAILED,\n    EXCEPTION_NOTYPEQUERY,\n    InternalTelemetry,\n    LogLevel,\n    MESSAGE_INVALIDJSONPATH,\n    MESSAGE_MOCKSNOTFOUND,\n    MESSAGE_MULTIPLE_REND_CONTEXTS,\n    MESSAGE_NEWCHILDPROP,\n    MESSAGE_OVERRIDE_MODULE_CONFIG,\n    StaticTelemetry\n} from '@msdyn365-commerce/telemetry-internal';\nimport { isEmptyOrNullObject, safeFileExists, safeGetAllFilesPath, safeReadJson } from '@msdyn365-commerce/utilities-internal';\nimport { IOptions } from 'glob';\nimport * as JsonPointer from 'jsonpointer';\nimport { memoize } from 'lodash';\nimport path from 'path';\nimport keystonePaths from '../paths';\nimport {\n    IModuleOverrideData,\n    MODULE_QUERY_PARAMETER_SEPARATOR,\n    MODULE_QUERY_PROPERTY_SEPARATOR,\n    validateAndGetOverrideData\n} from '../utils/query-utils';\n\n/**\n * Captures mock ids from query parameters\n * @param query Dictionary of query parameters\n * @returns array of module mock ids\n */\nexport const getMockIdFromRequest = (query: IDictionary<string>) => {\n    const typeQuery = query.type;\n    if (!typeQuery) {\n        throw new Error(EXCEPTION_NOTYPEQUERY);\n    }\n\n    return typeQuery.split(MODULE_QUERY_PARAMETER_SEPARATOR);\n};\n\n/**\n * Parses the payload\n * @param content stringified version of paryload\n * @returns JSON object\n */\nexport const parsePayload = (content: string | object) => {\n    try {\n        return typeof content === 'string' ? JSON.parse(content) : content;\n    } catch (error) {\n        StaticTelemetry.log(LogLevel.Debug, EXCEPTION_JSONPARSEFAILED, { values: [asSystemMetadata(content)] });\n        throw new Error(EXCEPTION_JSONPARSEFAILED);\n    }\n};\n\nexport const getOverrideProperties = (query: IDictionary<string>, telemetry: InternalTelemetry): IModuleOverrideData | null => {\n    try {\n        if (query.config) {\n            const configQuery = decodeURIComponent(query.config);\n            return validateAndGetOverrideData(configQuery, telemetry);\n        }\n    } catch (e) {\n        telemetry.log(LogLevel.Error, telemetry.stringFormat(EXCEPTION_BADCONFIGPASSED, [query.config]), { exception: e });\n        return null;\n    }\n\n    return null;\n};\n\nexport const overrideMockDataIfNeeded = (\n    mockId: string,\n    mockModule: object,\n    queryStrings: IDictionary<string>,\n    telemetry: InternalTelemetry\n): IModule<IGeneric<IAny>> => {\n    const overrideProp: IModuleOverrideData | null = getOverrideProperties(queryStrings, telemetry);\n    // Expected pattern to edit a property of a module is <module_name>/<json_pointer_path>/<value>\n    // eg1: partner-hero/dataBinder/BannerDataBinder\n    // eg2: partner-hero/dataProviders/0/data/Items/0/PrimaryImage/Width/200\n    if (overrideProp) {\n        if (mockId === overrideProp.moduleName && JsonPointer.get(mockModule, overrideProp.jsonPath)) {\n            JsonPointer.set(mockModule, overrideProp.jsonPath, overrideProp.value);\n            telemetry.log(\n                LogLevel.Debug,\n                telemetry.stringFormat(MESSAGE_OVERRIDE_MODULE_CONFIG, [overrideProp.jsonPath, <string>overrideProp.value, mockId])\n            );\n        } else {\n            // Get the parent json pointer path\n            // eg: parent path of partner-hero/config/size is partner-hero/config\n            const parentPathPosition = overrideProp.jsonPath.lastIndexOf(MODULE_QUERY_PROPERTY_SEPARATOR);\n            const parentPath = overrideProp.jsonPath.substring(0, parentPathPosition);\n            const parentValue = JsonPointer.get(mockModule, parentPath);\n            if (parentValue) {\n                const newChildProperty = overrideProp.jsonPath.substring(parentPathPosition + 1, overrideProp.jsonPath.length);\n                parentValue[`${newChildProperty}`] = overrideProp.value;\n                JsonPointer.set(mockModule, parentPath, parentValue);\n                telemetry.log(LogLevel.Debug, telemetry.stringFormat(MESSAGE_NEWCHILDPROP, [newChildProperty, parentPath, mockId]));\n            } else {\n                telemetry.log(LogLevel.Debug, telemetry.stringFormat(MESSAGE_INVALIDJSONPATH, [parentPath, mockId]));\n            }\n        }\n    }\n\n    return <IModule<IGeneric<IAny>>>mockModule;\n};\n\nconst readMockFile = async (mockFilePath: string): Promise<string | undefined> => {\n    let mockFile;\n    try {\n        mockFile = await safeReadJson(mockFilePath);\n    } catch {\n        return undefined;\n    }\n    return mockFile;\n};\n\n/**\n * Searches for mock regiserted under module name. First checks partner mocks from source then microsoft-modules.\n * @param moduleName\n * @param mock\n */\nexport const searchForMock = async (moduleName: string, mock: string) => {\n    const partnerModuleMockPath = path.resolve(keystonePaths.KEYSTONE_MODULE_MOCKS_DIR, `${moduleName}/`, `${mock}.json`);\n\n    if (await safeFileExists(partnerModuleMockPath)) {\n        return partnerModuleMockPath;\n    }\n\n    const moduleRoot = path.resolve(keystonePaths.KEYSTONE_NODE_MODULES_DIR, `${moduleName}`);\n    const mockPattern = `@(dist|build|src)/**/mocks/${mock}.json`;\n    const opts: Partial<IOptions> = {\n        cwd: moduleRoot\n    };\n    const mocks = await safeGetAllFilesPath(mockPattern, opts);\n    if (mocks.length) {\n        // file has been found\n        return path.resolve(keystonePaths.KEYSTONE_NODE_MODULES_DIR, `${moduleName}`, mocks[0]);\n    }\n    return false;\n};\n\n/**\n * Retrives a mocked module from file without overrides\n * @returns Parsed module if found otherwise false.\n */\nlet getMockModule = async (moduleName: string, mock: string) => {\n    const moduleMockFilePathForModule = await searchForMock(moduleName, mock);\n\n    if (!moduleMockFilePathForModule) {\n        return false;\n    }\n\n    const moduleFile = await readMockFile(moduleMockFilePathForModule);\n\n    if (!moduleFile || moduleFile.length <= 0) {\n        return false;\n    }\n\n    return parsePayload(moduleFile);\n};\n\nexport const getV3mockPageJson = (): IPageResponse => {\n    return <IPageResponse>parsePayload({\n        pageRoot: {\n            bodyClass: 'this should be body class',\n            modules: {\n                htmlHead: [],\n                bodyBegin: [],\n                body: [\n                    {\n                        modules: {\n                            primary: [\n                                {\n                                    modules: {\n                                        content: []\n                                    },\n                                    id: 'primaryRegion',\n                                    typeName: 'default-container'\n                                }\n                            ]\n                        },\n                        id: 'page',\n                        config: {},\n                        typeName: 'default-page'\n                    }\n                ],\n                bodyEnd: [],\n                app: []\n            },\n            id: 'coreroot',\n            typeName: 'core-root'\n        },\n        renderingContext: {\n            gridSettings: {\n                xs: { w: 768 },\n                sm: { w: 992 },\n                md: { w: 1200 },\n                lg: { w: 1600 },\n                xl: { w: 1800 }\n            }\n        }\n    });\n};\n\nconst getMockModuleWithOverride = async (\n    mockId: string,\n    index: number,\n    mocksNotFound: string[],\n    idSet: Set<String>,\n    queryStrings: IDictionary<string>,\n    telemetry: InternalTelemetry\n) => {\n    const mockIdString: string = mockId.toString();\n    const queryArg: string[] = mockIdString.split(':');\n    const moduleName = queryArg[0];\n    const mock = queryArg[1] || moduleName;\n\n    let mockModule = await getMockModule(moduleName, mock);\n\n    if (!mockModule) {\n        mocksNotFound.push(mockId);\n        return;\n    }\n\n    // any necessary here as type varies by module\n    mockModule = overrideMockDataIfNeeded(mock, mockModule, queryStrings, telemetry);\n\n    // Populate page with mock\n    const id = mockModule.id;\n    if (id && idSet.has(id)) {\n        mockModule.id = mockModule.id.concat(index.toString());\n    }\n    idSet.add(mockModule.id);\n\n    return mockModule;\n};\n\nlet getMockDataBasedOnRequestQueryString = async (queryStrings: IDictionary<string>, telemetry: InternalTelemetry) => {\n    const mockIds = getMockIdFromRequest(queryStrings);\n    if (mockIds.length < 1 || (mockIds.length === 1 && mockIds[0] === '')) {\n        throw new Error(EXCEPTION_NOTYPEQUERY);\n    }\n    // Get the default mock page json\n    const pageJsonV3: IPageResponse = getV3mockPageJson();\n    const idSet: Set<String> = new Set();\n    // For each mock id, populate page\n    const mocksNotFound: string[] = [];\n    // Create a list of promises to fetch the module mocks and then resolve all using Promise all\n    const modulePromises = mockIds.map((mockId: string, index: number) => {\n        return getMockModuleWithOverride(mockId, index, mocksNotFound, idSet, queryStrings, telemetry);\n    });\n    return Promise.all(modulePromises).then(mockModules => {\n        // Loop through the list of returned mock modules, if the module is defined\n        // add it to the page json\n        for (let i = 0; i < mockModules.length; i++) {\n            const curModule = mockModules[i];\n            if (curModule) {\n                // @ts-ignore\n                pageJsonV3.pageRoot.modules.body[0].modules.primary[0].modules.content.push(curModule);\n                // Add properties from module mocks rendering context if provided\n                pageJsonV3.renderingContext = { ...pageJsonV3.renderingContext, ...curModule.renderingContext };\n            }\n        }\n\n        // If there were mocks that weren't found, add those at the end and log an error message\n        if (mocksNotFound.length > 0 && queryStrings.debug) {\n            mocksNotFound.forEach((mockNotFound: string, index: number) => {\n                // @ts-ignore\n                pageJsonV3.pageRoot.modules.body[0].modules.primary[0].modules.content.push({\n                    id: `${mockNotFound}-${index}`,\n                    typeName: mockNotFound,\n                    data: {},\n                    dataActions: [],\n                    config: {}\n                });\n            });\n\n            telemetry.log(LogLevel.Warning, telemetry.stringFormat(MESSAGE_MOCKSNOTFOUND, [mocksNotFound.join()]));\n        }\n        return pageJsonV3;\n    });\n};\n\nif (process.env.NODE_ENV === 'production') {\n    getMockModule = memoize(getMockModule, (moduleName: string, mock: string): string => {\n        return `${moduleName}${mock}`;\n    });\n    getMockDataBasedOnRequestQueryString = memoize(getMockDataBasedOnRequestQueryString, (queryString: IDictionary<string>) => {\n        return JSON.stringify(queryString);\n    });\n}\nexport { getMockModule, getMockDataBasedOnRequestQueryString };\n"]}