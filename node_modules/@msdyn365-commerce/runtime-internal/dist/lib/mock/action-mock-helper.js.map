{"version":3,"file":"action-mock-helper.js","sourceRoot":"","sources":["../../../src/mock/action-mock-helper.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { ICache } from '@msdyn365-commerce/cache-internal';\nimport { IAny, IGeneric, IModuleContract, IPageResponse, IRequestContext } from '@msdyn365-commerce/core-internal';\nimport { safeFileExists, safeGetAllFilesPath, safeReadJson } from '@msdyn365-commerce/utilities-internal';\nimport { IOptions } from 'glob';\nimport { each as _each, flatten as _flatten, get as _get } from 'lodash';\nimport { resolve } from 'path';\n\nimport { AsyncResult, createObservableDataAction } from '@msdyn365-commerce/core';\nimport { EXCEPTION_NO_MOCKS_FOUND, IInternalTelemetry, LogLevel, MESSAGE_NO_MOCK_FOUND } from '@msdyn365-commerce/telemetry-internal';\nimport keystonePaths from '../paths';\n\ninterface IActionMock {\n    id?: string;\n    CacheObjectType: string;\n    CacheKey?: string;\n    Mock: IGeneric<IAny>;\n}\n\ninterface IModuleContractWithMock extends IModuleContract {\n    actionMock?: string;\n}\n\n/**\n * Searches a module contract for all listed action mocks\n * @param module module or array of modules to search for\n * @param mocks Array of mocks that have been found. This array will be modified\n */\nexport const searchPage = (module: IModuleContractWithMock | IModuleContractWithMock[], mocks: string[]) => {\n    if (Array.isArray(module)) {\n        _each(module, value => searchPage(value, mocks));\n    } else if (module.modules) {\n        _each(module.modules, value => {\n            if (Array.isArray(value)) {\n                searchPage(value, mocks);\n            }\n        });\n    } else if (module.actionMock) {\n        mocks.push(module.actionMock);\n    }\n};\n\n/**\n * Captures all action mocks from a page context\n * @param pageResponse Current page context\n */\nexport const getMockPathPageResponse = (pageResponse: IPageResponse): string[] => {\n    const mocks: string[] = [];\n    pageResponse.slots.forEach((moduleContract: IModuleContract) => {\n        const actionMock = _get(pageResponse, ['modules', moduleContract.id, 'actionMock']);\n        if (actionMock) {\n            mocks.concat(actionMock.split(','));\n        }\n    });\n\n    return mocks;\n};\n\n/**\n * Formats the correct path and mock based from query string\n *  Looks for requestMock=moduleName:mockName,moduleName:mockName,moduleName\n *  where mock name is either a file or a directory\n */\nexport const getMockPathQuery = (query: IGeneric<IAny>): string[] => {\n    const { actionMock } = query;\n    if (!actionMock) {\n        return [];\n    }\n    return actionMock.split(',');\n};\n\n/**\n * Searches file system for mocks\n * mockTuple = 'moduleName:mockName'\n */\nexport const findMockPaths = async (mockTuple: string): Promise<string | false> => {\n    // tslint:disable-next-line:prefer-const -- tsc is confused about us having a const & a var on the same destruct\n    let [moduleName, mockName] = mockTuple.split(':');\n\n    if (!mockName) {\n        mockName = moduleName;\n    }\n\n    const partnerModuleMockPath = resolve(keystonePaths.KEYSTONE_MODULE_MOCKS_DIR, `${moduleName}/`, `${mockName}.actionmock.json`);\n    if (await safeFileExists(partnerModuleMockPath)) {\n        return partnerModuleMockPath;\n    }\n\n    const moduleRoot = resolve(keystonePaths.KEYSTONE_NODE_MODULES_DIR, moduleName);\n    const mockPattern = `@(dist|build|src)/**/${mockName}.actionmock.json`;\n    const opts: Partial<IOptions> = {\n        cwd: moduleRoot\n    };\n    const mocks = await safeGetAllFilesPath(mockPattern, opts);\n    if (mocks.length) {\n        // file has been found\n        return resolve(keystonePaths.KEYSTONE_NODE_MODULES_DIR, `${moduleName}`, mocks[0]);\n    }\n    return false;\n};\n\n/**\n * Pulls mock data\n */\nexport const populateClientCache = async (\n    context: IRequestContext,\n    pageResponse: IPageResponse,\n    clientCache: ICache,\n    telemetry: IInternalTelemetry\n): Promise<void> => {\n    let mocks: string[] = getMockPathQuery({ ...context.params, ...context.query });\n    if (context.query && context.query.mock) {\n        mocks = mocks.concat(getMockPathPageResponse(pageResponse));\n    }\n\n    if (!mocks || !mocks.length) {\n        return;\n    }\n\n    const mockPaths: string[] = [];\n\n    for (const mockPath of mocks) {\n        const path = await findMockPaths(mockPath);\n        if (path) {\n            mockPaths.push(path);\n        }\n    }\n\n    if (!mockPaths.length) {\n        // no file found\n        telemetry.log(LogLevel.Error, EXCEPTION_NO_MOCKS_FOUND);\n        return;\n    }\n\n    // @ts-ignore\n    const actionMocks: (IActionMock | null)[] = await Promise.all(mockPaths.map(safeReadJson));\n\n    _flatten(actionMocks).forEach((mock: IActionMock | null) => {\n        if (mock) {\n            clientCache.put({ typeName: '__MOCK', key: `${mock.id || mock.CacheObjectType}:${mock.CacheKey || '*'}` }, { item: mock.Mock });\n        }\n    });\n    return;\n};\n"]}