import React from 'react';
import { getRenderingHelper } from '../utils/helpers';
export var AddControlMode;
(function (AddControlMode) {
    AddControlMode[AddControlMode["EmptySlot"] = 0] = "EmptySlot";
    AddControlMode[AddControlMode["Sibling"] = 1] = "Sibling";
})(AddControlMode || (AddControlMode = {}));
/**
 * Editable field component, containing all the logic for inline editable properties in editorial preview
 * Current support: text, image
 */
export class AddModuleControl extends React.Component {
    constructor(props) {
        super(props);
        this.toggleMenuDisplay = () => {
            const button = document.getElementById(this.getAddButtonId());
            const menu = document.getElementById(this.getAddButtonMenuId());
            if (button && menu) {
                if (menu.style.display === 'block') {
                    menu.style.display = 'none';
                }
                else {
                    menu.style.display = 'block';
                }
            }
        };
        this.hideMenuDisplay = () => {
            const button = document.getElementById(this.getAddButtonId());
            const menu = document.getElementById(this.getAddButtonMenuId());
            if (button && menu) {
                menu.style.display = 'none';
            }
        };
        this.getAddButtonId = () => {
            return this.props.index
                ? `add-${this.props.moduleId}-${this.props.slotId}-${this.props.index}`
                : `add-${this.props.moduleId}-${this.props.slotId}`;
        };
        this.onKeyPressMenu = (event) => {
            if (event.key === 'Enter') {
                this.toggleMenuDisplay();
            }
            else if (event.key === 'Escape') {
                this.hideMenuDisplay();
            }
        };
        this.onKeyPressAddModule = (event) => {
            if (event.key === 'Enter') {
                this.addModule();
            }
            else if (event.key === 'Escape') {
                this.hideMenuDisplay();
            }
        };
        this.onKeyPressAddFragment = (event) => {
            if (event.key === 'Enter') {
                this.addFragment();
            }
            else if (event.key === 'Escape') {
                this.hideMenuDisplay();
            }
        };
        this.getAddButtonMenuId = () => {
            return this.props.index
                ? `add-menu-${this.props.moduleId}-${this.props.slotId}-${this.props.index}`
                : `add-menu-${this.props.moduleId}-${this.props.slotId}`;
        };
        this.addModule = () => {
            this.toggleMenuDisplay();
            const helper = getRenderingHelper();
            if (helper) {
                helper.addModule(this.props.moduleId, this.props.slotId, this.props.index || 0);
            }
        };
        this.addFragment = () => {
            this.toggleMenuDisplay();
            const helper = getRenderingHelper();
            if (helper) {
                helper.addFragment(this.props.moduleId, this.props.slotId, this.props.index || 0);
            }
        };
        this.getLocalizedStringsfromTools = (stringName) => {
            const helper = getRenderingHelper();
            if (helper && typeof helper.getLocalizedString === 'function') {
                return helper.getLocalizedString(stringName);
            }
            return '';
        };
        this.state = {
            moduleId: props.moduleId
        };
    }
    render() {
        if (!this.props.enabled) {
            return null;
        }
        const localizedStrings = {
            insertModule: this.getLocalizedStringsfromTools('insertModule') !== ''
                ? this.getLocalizedStringsfromTools('insertModule')
                : 'Insert module',
            insertFragment: this.getLocalizedStringsfromTools('insertFragment') !== ''
                ? this.getLocalizedStringsfromTools('insertFragment')
                : 'Insert fragment',
            moveNotAllowed: this.getLocalizedStringsfromTools('moveNotAllowed') !== ''
                ? this.getLocalizedStringsfromTools('moveNotAllowed')
                : 'Move not allowed'
        };
        const button = (tooltip) => {
            return (React.createElement("div", { title: tooltip, "aria-label": tooltip, className: 'add-module-button', role: 'button', id: this.getAddButtonId(), onClick: this.toggleMenuDisplay, onKeyDown: this.onKeyPressMenu, tabIndex: 0 },
                React.createElement("div", { className: 'add-module-icon' },
                    React.createElement("svg", { viewBox: '0 0 2048 2048' },
                        React.createElement("path", { className: 'ms-add-module-icon', d: 'M1963 939v85h-939v939h-85v-939H0v-85h939V0h85v939h939z' }))),
                React.createElement("div", { className: 'add-button-group', id: this.getAddButtonMenuId() },
                    React.createElement("button", { onClick: this.addModule, tabIndex: 0, onKeyDown: this.onKeyPressAddModule }, localizedStrings.insertModule),
                    React.createElement("button", { onClick: this.addFragment, tabIndex: 0, onKeyDown: this.onKeyPressAddFragment }, localizedStrings.insertFragment))));
        };
        if (this.props.mode === AddControlMode.Sibling) {
            return (React.createElement("div", { className: 'add-sibling' },
                React.createElement("div", { className: 'add-ruler' }),
                React.createElement("div", { className: 'add-sibling-inner' }, button(`Add a module to ${this.props.slotName || this.props.slotId}`)),
                React.createElement("div", { className: 'add-ruler' })));
        }
        else {
            const parentData = this.props.parentId ? `,p:${this.props.parentId}` : '';
            return (React.createElement("div", { className: 'add-container', "data-i": `{id:${this.props.moduleId},s:${this.props.slotId},t:empty-slot${parentData}}` },
                React.createElement("div", { className: 'add-container-inner' },
                    React.createElement("div", { className: 'default-buttons' }, button(`Configure ${this.props.slotName || this.props.slotId}`)),
                    React.createElement("div", { className: 'placeholder-drop' },
                        React.createElement("div", { className: 'placeholder-drop-icon' },
                            React.createElement("div", { className: 'ondrop-module placeholder-drop-icon-bg' },
                                React.createElement("svg", { viewBox: '0 0 2048 2048' },
                                    React.createElement("path", { className: 'ms-drop-module-slot-icon', d: 'M768 1664h128v128H768v-128zm256 0h128v128h-128v-128zm-512 0h128v128H512v-128zm1152-896h-128V640h128v128zm256-384v1664H256v-640H0V0h731l384 384h805zm-1152 0h165L768 219v165zm256 896V512H640V128H128v1152h896zm768-768h-640v896H640v128H512v-128H384v512h1408V512zm-384 1280h-128v-128h128v128zm256 0h-128v-128h128v128zm0-768h-128V896h128v128zm-256-256h-128V640h128v128zm256 512h-128v-128h128v128zm0 256h-128v-128h128v128z' }))),
                            React.createElement("div", { className: 'ondrop-fragment placeholder-drop-icon-bg' },
                                React.createElement("svg", { viewBox: '0 0 2048 2048' },
                                    React.createElement("path", { className: 'ms-drop-module-slot-icon', d: 'M768 1664h128v128H768v-128zm256 0h128v128h-128v-128zm-512 0h128v128H512v-128zm1152-896h-128V640h128v128zm256-384v1664H256v-640H0V0h731l384 384h805zm-1152 0h165L768 219v165zm256 896V512H640V128H128v1152h896zm768-768h-640v896H640v128H512v-128H384v512h1408V512zm-384 1280h-128v-128h128v128zm256 0h-128v-128h128v128zm0-768h-128V896h128v128zm-256-256h-128V640h128v128zm256 512h-128v-128h128v128zm0 256h-128v-128h128v128z' }))),
                            React.createElement("div", { className: 'ondrop-error placeholder-drop-icon-error-bg' },
                                React.createElement("svg", { viewBox: '0 0 2048 2048' },
                                    React.createElement("path", { className: 'ms-add-module-error-icon', d: 'M960 0q132 0 255 34t229 97 194 150 150 194 97 230 35 255q0 133-34 255t-97 229-150 194-194 150-230 97-255 35q-133 0-255-34t-229-97-194-150-150-194-97-230T0 960q0-132 34-255t97-229 150-194 194-150 230-97T960 0zm576 1024V896H384v128h1152z' })))),
                        React.createElement("span", { className: 'ondrop-module' }, localizedStrings.insertModule),
                        React.createElement("span", { className: 'ondrop-fragment' }, localizedStrings.insertFragment),
                        React.createElement("span", { className: 'ondrop-error' }, localizedStrings.moveNotAllowed)))));
        }
    }
}
//# sourceMappingURL=add-module-control.js.map