{"version":3,"file":"module-list-page.js","sourceRoot":"","sources":["../../../src/components/module-list-page.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAiBH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,UAAkB,EAAU,EAAE;IACnE,QAAQ,UAAU,EAAE;QAChB,KAAK,oBAAoB,CAAC,CAAC;YACvB,OAAO,WAAW,CAAC;SACtB;QACD,KAAK,cAAc,CAAC,CAAC;YACjB,OAAO,QAAQ,CAAC;SACnB;QACD,KAAK,iBAAiB,CAAC,CAAC;YACpB,OAAO,WAAW,CAAC;SACtB;QACD,KAAK,eAAe,CAAC,CAAC;YAClB,OAAO,SAAS,CAAC;SACpB;QACD,KAAK,WAAW,CAAC,CAAC;YACd,OAAO,KAAK,CAAC;SAChB;QACD,KAAK,YAAY,CAAC,CAAC;YACf,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,CAAC,CAAC;YACL,OAAO,eAAe,CAAC;SAC1B;KACJ;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,UAAU,EAAE,UAAkB,EAAU,EAAE;IAChF,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAErE,IAAI,cAAc,CAAC;IACnB,IAAI,UAAU,KAAK,eAAe,IAAI,UAAU,KAAK,sBAAsB,EAAE;QACzE,cAAc,GAAG,UAAU,CAAC,GAAG,CAC3B,aAAa,CAAC,EAAE,CAAC,yCAAyC,aAAa,CAAC,OAAO,KAAK,aAAa,CAAC,IAAI,WAAW,CACpH,CAAC;KACL;SAAM;QACH,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,gCAAgC,aAAa,CAAC,IAAI,OAAO,CAAC,CAAC;KAC/G;IACD,OAAO,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACnC,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,UAA4B,EAAU,EAAE;IACnE,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,IAAI,gBAAgB,GAAG,CAAC,CAAC;IAEzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,UAAkB,EAAE,EAAE;QACnD,MAAM,cAAc,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;QAC9C,IAAI,cAAc,EAAE;YAChB,cAAc,IAAI,OAAO,wBAAwB,CAAC,UAAU,CAAC,UAAU,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;YACrH,cAAc,IAAI;kBACZ,yBAAyB,CAAC,cAAc,EAAE,UAAU,CAAC;kBACrD,CAAC;YACP,gBAAgB,IAAI,cAAc,CAAC,MAAM,CAAC;SAC7C;IACL,CAAC,CAAC,CAAC;IAEH,OAAO;;;;;;;6CAOkC,gBAAgB,UAAU,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;;cAE1F,cAAc;;YAEhB,CAAC;AACb,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nexport interface IModuleListTypes {\n    htmlHeadTagsModule?: IModuleDetails[];\n    scriptModule?: IModuleDetails[];\n    containerModule?: IModuleDetails[];\n    contentModule?: IModuleDetails[];\n    appModule?: IModuleDetails[];\n    pageModule?: IModuleDetails[];\n    uncategorizedModules?: IModuleDetails[];\n}\n\nexport interface IModuleDetails {\n    name: string;\n    mockUrl?: string;\n}\n\nexport const moduleTypeToFriendlyName = (moduleType: string): string => {\n    switch (moduleType) {\n        case 'htmlHeadTagsModule': {\n            return 'HTML Head';\n        }\n        case 'scriptModule': {\n            return 'Script';\n        }\n        case 'containerModule': {\n            return 'Container';\n        }\n        case 'contentModule': {\n            return 'Content';\n        }\n        case 'appModule': {\n            return 'App';\n        }\n        case 'pageModule': {\n            return 'Page';\n        }\n        default: {\n            return 'Uncategorized';\n        }\n    }\n};\n\nexport const generateModueListForAType = (moduleList, moduleType: string): string => {\n    moduleList = moduleList.sort((a, b) => a.name.localeCompare(b.name));\n\n    let mappedListHtml;\n    if (moduleType === 'contentModule' || moduleType === 'uncategorizedModules') {\n        mappedListHtml = moduleList.map(\n            moduleDetails => `<li style=\"line-height: 1.5\"><a href=\"${moduleDetails.mockUrl}\">${moduleDetails.name}</a></li>`\n        );\n    } else {\n        mappedListHtml = moduleList.map(moduleDetails => `<li style=\"line-height: 1.5\">${moduleDetails.name}</li>`);\n    }\n    return mappedListHtml.join('');\n};\n\n/**\n * Renders a simple web page with a list of registered content modules\n * taken from DAPI. Each module links to a view with its default mock\n *\n * @param moduleList The list of registered content modules\n */\nexport const moduleListPage = (moduleList: IModuleListTypes): string => {\n    let moduleListHtml = '';\n    let totalModuleCount = 0;\n\n    Object.keys(moduleList).forEach((moduleType: string) => {\n        const modulesForType = moduleList[moduleType];\n        if (modulesForType) {\n            moduleListHtml += `<h2>${moduleTypeToFriendlyName(moduleType)} Module${modulesForType.length !== 1 ? 's' : ''}</h2>`;\n            moduleListHtml += `<ul style=\"font-size: 1.5rem\">\n                ${generateModueListForAType(modulesForType, moduleType)}\n            </ul>`;\n            totalModuleCount += modulesForType.length;\n        }\n    });\n\n    return `<!DOCTYPE html>\n    <html>\n        <head>\n            <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n            <title>Installed Modules </title>\n        </head>\n        <body>\n            <h1>List of installed modules (${totalModuleCount} module${totalModuleCount !== 1 ? 's' : ''} found)</h1>\n            <p style=\"font-size: 1.25rem\">If available, click on a module to see its preview</p>\n            ${moduleListHtml}\n        </body>\n    </html>`;\n};\n"]}