/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import * as React from 'react';
/**
 * App level const available to module/action developer
 */
export class MSDyn365Commerce {
    constructor() {
        this._cartCookie = '_msdyn365___cart_';
        this._checkoutCartCookie = '_msdyn365___checkout_cart_';
        this._checkoutCartKeyPrefix = 'checkout';
        this._buildVersion = '00-0000';
        this._env = 'development';
        this._commerceApiSetting = {};
        this._themeRegistration = { themes: {}, styles: {} };
        this._imageSettings = { imageSettings: {}, gridSettings: {} };
        this._themeSettings = {};
        this._themeModules = [];
        this._initialLoadCompleted = false;
        this._appSettings = {
            app: { config: {}, routes: {} },
            msdyn365: { config: {}, routes: {}, contentSecurityPolicy: {} }
        };
        this.setInitialLoadCompleted = (initialLoadCompleted) => {
            this._initialLoadCompleted = initialLoadCompleted;
        };
        this.setThemeRegistration = (themeRegistration) => {
            this._themeRegistration = themeRegistration;
        };
        /**
         * Sets list of theme module objects
         */
        this.setThemeModules = (themeModules) => {
            this._themeModules = themeModules;
        };
        /**
         * Sets list of theme module objects
         */
        this.createComponent = (name, componentObj) => (props) => {
            if (!(componentObj && componentObj.component)) {
                throw new Error(`Component ${name} missing`);
            }
            const Element = componentObj.component;
            return React.createElement(Element, props);
        };
        /**
         * Creates a component override
         */
        this.createComponentOverride = (name, componentObj) => (props) => {
            if (!(componentObj && componentObj.component)) {
                throw new Error(`Component ${name} missing`);
            }
            const Element = componentObj.component;
            return React.createElement(Element, props);
        };
    }
    /**
     * Check if its in postInitialLoading status
     */
    get initialLoadCompleted() {
        return this._initialLoadCompleted;
    }
    // DO NOT DELETE - keeping this method for backwards
    // compatibility reasons. After modules code tranisitions to using cartCookieName
    // we will delete this getter
    get CartCookie() {
        return this._cartCookie;
    }
    get cartCookieName() {
        return this._cartCookie;
    }
    /**
     * Get checkout cart cookie
     */
    get checkoutCartCookie() {
        return this._checkoutCartCookie;
    }
    /**
     * Get checkout cart cookie
     */
    get checkoutCartKeyPrefix() {
        return this._checkoutCartKeyPrefix;
    }
    get themes() {
        return this._themeRegistration;
    }
    /**
     * Gets theme modules with full layouts and segment objects
     */
    get themeModules() {
        return this._themeModules;
    }
    /**
     * Gets the current build version
     */
    get buildVersion() {
        return this._buildVersion;
    }
    /**
     * Gets the current runtime environment
     */
    get env() {
        return this._env;
    }
    /**
     * Gets the commerce related API settings
     */
    get apiSettings() {
        return this._commerceApiSetting;
    }
    /**
     * Gets the commerce related image settings
     */
    get imageSettings() {
        return this._imageSettings;
    }
    /**
     * Gets the commerce related theme settings
     */
    get themeSettings() {
        return this._themeSettings;
    }
    /**
     * Gets the commerce related APP settings
     */
    get appSettings() {
        return this._appSettings;
    }
    /**
     * Gets the experimentation connector object that contains the registered provider, listener and connector name
     * Returns undefined if an experimentation connector has not been registered
     */
    get experimentationConnector() {
        return this._experimentationConnector;
    }
    /**
     * Gets the geoLookup connector object that contains the registered provider and connector name
     * Returns undefined if a geo lookup connector has not been registered
     */
    get geoLookupConnector() {
        return this._geoLookupConnector;
    }
    /**
     * Gets the experimentation app cache
     */
    get connectorCache() {
        return this._connectorCache;
    }
    /**
     * Gets secret manager object
     */
    get secretManager() {
        return this._secretManager;
    }
    /**
     * Gets local credential details
     */
    get localCredentials() {
        return this._localCredentials;
    }
    /**
     * Gets the platformSettings
     */
    get platformSettings() {
        return this._platformSettings;
    }
    /**
     * Returns a boolean value indicating whether or not the current operating environment is browser or server
     */
    get isBrowser() {
        // tslint:disable-next-line:no-typeof-undefined
        return typeof window !== 'undefined';
    }
    /**
     * Gets the resource manager instance
     */
    get resourceManager() {
        if (!this.isBrowser) {
            return this._resourceManager;
        }
        return undefined;
    }
}
const msdyn365Commerce = new MSDyn365Commerce();
export default msdyn365Commerce;
//# sourceMappingURL=msdyn365-commerce.js.map