{"version":3,"file":"ICultureFormatter.js","sourceRoot":"","sources":["../../../src/interfaces/ICultureFormatter.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// Controls the formatting and representation of a time\nexport interface ITimeFormatOptions {\n    // Allows one to set the algorithm used to match and find the locale.\n    // the \"lookup\" matcher follows the Lookup algorithm specified in BCP 47;\n    // the \"best fit\" matcher lets the runtime provide a locale that's at least,\n    // but possibly more, suited for the request than the result of the Lookup algorithm\n    localeMatcher?: 'best fit' | 'lookup';\n\n    formatMatcher?: 'basic' | 'best fit';\n\n    // Sets the hour cycle to use\n    hourCycle?: 'h11' | 'h12' | 'h23' | 'h24';\n\n    // Sets the timezone to use. The default is the runtime's default timezone\n    // IF environment lacks native Intl support and Intl is polyfilled, this option\n    // will not be supported (Intl polyfill does not support timezones)\n    timeZone?: string;\n\n    // Controls whether or not 12-hour time is used (as opposed to 24-hour time)\n    // Default values are locale dependant\n    hour12?: boolean;\n\n    // Controls the representation of individual time components\n    // 2-digit will force numbers less than 10 to be displayed with two digits\n    // E.G. For a time of 4:34 AM -> Numeric: 4:34 AM, 2-digit: 04:34AM\n    hour?: 'numeric' | '2-digit';\n    minute?: 'numeric' | '2-digit';\n    second?: 'numeric' | '2-digit';\n    timeZoneName?: 'short' | 'long';\n}\n\n// Controls the formatting and representation of a date\nexport interface IDateFormatOptions extends ITimeFormatOptions {\n    // Controls the representation of individual date components\n\n    // For weekday, 'narrow' is the 1-2 character representation of the weekday\n    // 'short is the 3 character representation and 'long' is the full name\n    // E.G. Monday -> narrow: M, short: Mon, long: Monday\n    weekday?: 'narrow' | 'short' | 'long';\n    era?: 'narrow' | 'short' | 'long';\n\n    // For year, 2-digit will force the year to be displayed with only 2 digits while numeric\n    // will display the entire year\n    year?: 'numeric' | '2-digit';\n\n    // For month there are several options to control the formatting.\n    // E.G. Month - June ->\n    // 'numeric': 6\n    // '2-digit': 06 (forces two digit representation of the month)\n    // 'narrow': J (1 or 2 character representation of the month)\n    // 'short': Jun (3 character representation of the month)\n    // 'long': June (full month name)\n    month?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';\n\n    // 2-digit will force days less than 10 to be displayed with two digits\n    day?: 'numeric' | '2-digit';\n}\n\n// Controls the formatting and representation of a number\nexport interface INumberFormatOptions {\n    // Allows one to set the algorithm used to match and find the locale.\n    // the \"lookup\" matcher follows the Lookup algorithm specified in BCP 47;\n    // the \"best fit\" matcher lets the runtime provide a locale that's at least,\n    // but possibly more, suited for the request than the result of the Lookup algorithm\n    localeMatcher?: 'best fit' | 'lookup';\n\n    // Allows one to specify whether to format this number as a decimal or percent\n    style?: 'decimal' | 'percent' | 'currency';\n    // Allows one to specify the 3 character currency code\n    currency?: string;\n\n    minimumIntegerDigits?: number;\n    minimumFractionDigits?: number;\n    maximumFractionDigits?: number;\n    minimumSignificantDigits?: number;\n    maximumSignificantDigits?: number;\n}\n\nexport interface ICultureInfoFormatter {\n    formatCurrency(price: string | number, currencyCode?: string): string;\n    formatNumber(value: number, options?: INumberFormatOptions): string;\n    formatDate(date: Date, options?: IDateFormatOptions): string;\n    formatTime(time: Date, options?: ITimeFormatOptions): string;\n}\n"]}