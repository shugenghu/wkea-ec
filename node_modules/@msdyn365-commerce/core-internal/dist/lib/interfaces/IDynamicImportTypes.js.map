{"version":3,"file":"IDynamicImportTypes.js","sourceRoot":"","sources":["../../../src/interfaces/IDynamicImportTypes.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IAny } from './types';\n\n// tslint:disable:max-line-length\n/**\n * Options to create a dynamic import\n */\nexport interface IDynamicImportArgs {\n    /**\n     * The result of a dynamic import from within your code.  It needs to be within your code\n     * as the path is dynamically generated based on the `import` statement\n     */\n    universalImport(): IUniversalImport;\n}\n\n// interface is for babel-plugin-universal-import which dynamically generates import webpack chunk names from import statements\nexport interface IUniversalImport {\n    id: string;\n    then(callback: IAny): void;\n    chunkName(): string;\n    // tslint:disable-next-line:no-any\n    load(): Promise<any>;\n    path(): string;\n    // tslint:disable-next-line:no-any\n    resolve(): string;\n}\n\n/**\n * Result object of a dynamic import\n */\nexport interface IDynamicLoadResult {\n    /**\n     * Is the result a promise?\n     */\n    isPromise: boolean;\n    /**\n     * Was the call for the dynamic import a success?\n     */\n    isSuccess: boolean;\n    /**\n     * Actual result of the dynamic import. Will be either a `Promise<Module>` or the module itself,\n     * which is the same as the result of a normal `require(Module)`.\n     */\n    result: unknown;\n    /**\n     * The chunk name corresponding to this dynamic import.  This is autogenerated.\n     */\n    chunkName: string;\n    /**\n     * Discriminator property to determine of object is of type IDynamicResult\n     */\n    __isDynamicResult: boolean;\n    /**\n     * Convenience function to point to default import. If no default is provided, will return module\n     * import result, which will contain all exports. Currently will only be populated if\n     * the module was able to be loaded synchronously. For modules loaded asynch, you'll need\n     * to await the promise resolve in the `result` property.\n     */\n    defaultExport?: null | Function | {};\n}\n"]}