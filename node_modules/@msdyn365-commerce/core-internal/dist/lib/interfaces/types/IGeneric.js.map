{"version":3,"file":"IGeneric.js","sourceRoot":"","sources":["../../../../src/interfaces/types/IGeneric.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any\n/**\n * This type declaration cab be used as a generic interface to allow indexing into properties\n *\n * Example:\n * ```\n *  interface IBar {\n *      hello: string;\n *  }\n *\n *  let temp:IBar;\n *  temp.hello = 'world!'; // no error\n *  temp.otherProp = 'oops!'; // error, 'otherProp' does not exist on 'temp'\n * ```\n *\n * Now, we using the below definition, let us instead define temp as follows\n *\n * ```\n *  let temp:IGeneric<IBar>;\n *  temp.hello = 'world!'; // no error, we get intellisense too!\n *  temp.otherProps = 'no error'; // no error now due to fallback of IGeneric definition\n * ```\n */\nexport type IGeneric<T extends unknown> = T & {\n    [x: string]: any;\n};\n\nexport type IAny = unknown;\n"]}