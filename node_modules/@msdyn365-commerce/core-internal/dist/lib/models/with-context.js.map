{"version":3,"file":"with-context.js","sourceRoot":"","sources":["../../../src/models/with-context.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,6DAA6D;AAC7D,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,WAAW,EAAE,MAAM,WAAW,CAAC;AAExC;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,SAAc;IACtC,OAAO,SAAS,oBAAoB,CAAC,KAAU;QAC3C,OAAO,CACH,oBAAC,WAAW,CAAC,QAAQ,QAChB,CAAC,KAAmB,EAAE,EAAE,CAAC,CACtB,oBAAC,SAAS,oBACF,KAAK,IACT,OAAO,EAAE,KAAK,EACd,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,yBAAyB,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;YAC1G,0EAA0E;YAC1E,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,CAAC,yBAAyB,CAAC;gBACjE,QAAQ,EAAE,KAAK,CAAC,EAAE;gBAClB,UAAU,EAAE,KAAK,CAAC,QAAQ;aAC7B,CAAC,EAAE,EACJ,GAAG,EAAE,KAAK,CAAC,GAAG,IAChB,CACL,CACkB,CAC1B,CAAC;IACN,CAAC,CAAC;AACN,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\n// tslint:disable:no-any function-name no-function-expression\nimport React from 'react';\nimport { ICoreContext } from '../interfaces';\nimport { CoreContext } from '../models';\n\n/**\n * HOC that injects all the content of the generic context into the component\n * @param Component The component that the context will be injected into\n */\nexport function WithContext(Component: any): (props: any) => JSX.Element {\n    return function ComponentWithContext(props: any): JSX.Element {\n        return (\n            <CoreContext.Consumer>\n                {(value: ICoreContext) => (\n                    <Component\n                        {...props}\n                        context={value}\n                        telemetry={value.telemetry.setTelemetryModuleContext({ moduleId: props.id, moduleType: props.typeName })()}\n                        // @ts-ignore -- we don't actually have this prop defined on the interface\n                        internalTelemetry={value.internalTelemetry.setTelemetryModuleContext({\n                            moduleId: props.id,\n                            moduleType: props.typeName\n                        })()}\n                        app={value.app}\n                    />\n                )}\n            </CoreContext.Consumer>\n        );\n    };\n}\n"]}