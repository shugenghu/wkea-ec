{"version":3,"file":"commerce-request.js","sourceRoot":"","sources":["../../../src/models/commerce-request.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport {\n    EVENT_COMMERCE_REQUEST_START,\n    EVENT_COMMERCE_REQUEST_STOP,\n    IEventCommerceRequestStopProperties,\n    InternalTelemetry,\n    StaticTelemetry,\n    TelemetryBase\n} from '@msdyn365-commerce/telemetry-internal';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport { IAny, IGeneric } from '..';\nimport { ICommerceApiSettings } from '../contract';\nimport { HTTPMethod, IActionContext, IHTTPError, IHTTPRequestOptions, IHTTPResponse, IODataResponse, IRequestContext } from '../interfaces';\n\n// Default timeout is 10 seconds\nconst defaultTimeout = 10000;\n\n/**\n * Helper class to call the commerce retail server\n */\nexport class CommerceRequest {\n    private readonly apiSettings: ICommerceApiSettings;\n    private readonly requestContext: IRequestContext;\n\n    constructor(context: IActionContext) {\n        if (!context) {\n            throw Error('Context passed in as null, cannot call API');\n        }\n\n        const requestContext = <IRequestContext>(<IGeneric<IAny>>context).requestContext;\n        if (!requestContext || !requestContext.apiSettings || !requestContext.apiSettings.baseUrl) {\n            throw Error('Context passed is not of type ActionContext, cannot call API');\n        }\n\n        this.apiSettings = requestContext.apiSettings;\n        this.requestContext = requestContext;\n    }\n\n    public post = async <T>(args: { requestUrl: string; body?: unknown; options?: IHTTPRequestOptions }): Promise<IHTTPResponse<T>> => {\n        const { httpOptions } = this.parseOptions(args);\n        return this.sendCommerceRequest(args.requestUrl, 'post', args.body, httpOptions);\n    };\n\n    public get = async <T>(args: {\n        requestUrl: string;\n        context: IRequestContext;\n        options?: IHTTPRequestOptions;\n    }): Promise<IHTTPResponse<T>> => {\n        const { httpOptions } = this.parseOptions(args);\n        return this.sendCommerceRequest(args.requestUrl, 'get', null, httpOptions);\n    };\n\n    private parseOptions = (args: { requestUrl: string; body?: unknown; options?: IHTTPRequestOptions }) => {\n        const apiSettings = this.apiSettings;\n        const { options } = args;\n        const requestId =\n            (options && options.headers && (options.headers.requestId || options.headers.operationId)) ||\n            this.requestContext.operationId ||\n            TelemetryBase.generateGuid();\n        const httpOptions: IHTTPRequestOptions = {\n            ...{ headers: { oun: apiSettings.oun, requestId } },\n            ...args.options\n        };\n        return { httpOptions };\n    };\n\n    /**\n     * Creates a basic Axios Request Config that is shared across commerce and standard HTTP calls\n     * @param requestUrl The url of the request\n     * @param httpMethod The HTTP method of the request\n     * @param body The body content of the request\n     * @param options The options associated with the request\n     */\n    private createDefaultRequest = (\n        requestUrl: string,\n        httpMethod?: HTTPMethod,\n        body?: unknown,\n        options?: IHTTPRequestOptions\n    ): AxiosRequestConfig => {\n        return {\n            method: httpMethod || 'get',\n            url: requestUrl,\n            data: body,\n            timeout: options ? options.timeout || defaultTimeout : defaultTimeout,\n            headers: options ? options.headers || {} : {}\n        };\n    };\n\n    /**\n     * Sets retail server specific headers needed for auth\n     * @param requestConfig The current configuration settings of the request\n     * @param apiSettings The retail server API configuration settings\n     */\n    private setRetailServerRequestHeaders = (requestConfig: AxiosRequestConfig) => {\n        if (!requestConfig.headers) {\n            requestConfig.headers = {};\n        }\n\n        requestConfig.headers['from-keystone'] = 'true';\n        requestConfig.headers.oun = requestConfig.headers.oun || '';\n        requestConfig.headers.Accept = requestConfig.headers.Accept || 'application/json;odata=nometadata';\n        requestConfig.headers.ContentType = requestConfig.headers.ContentType || 'application/json;odata=verbose';\n\n        return requestConfig;\n    };\n\n    /**\n     * Parses an OData Response and returns just the return type of the call without the extra OData Metadata\n     */\n    private parseODataResponse = <T>(response?: IODataResponse<T>): T => {\n        if (response && response.value && response['@odata.context']) {\n            return response.value;\n        } else {\n            return <T>(<unknown>response);\n        }\n    };\n\n    /**\n     * Send an retail server request\n     * @param requestUrl The url of the request\n     * @param httpMethod The HTTP method of the request\n     * @param body The body content of the request\n     * @param options The options associated with the request\n     */\n    private sendCommerceRequest = async <T>(\n        requestUrl: string,\n        httpMethod?: HTTPMethod,\n        body?: unknown,\n        options?: IHTTPRequestOptions\n    ): Promise<IHTTPResponse<T>> => {\n        const apiVersion = requestUrl.indexOf('?') === -1 ? '?api-version=7.3' : '&api-version=7.3';\n        requestUrl = `${this.apiSettings.baseUrl}${requestUrl}${apiVersion}`;\n        let request = this.createDefaultRequest(requestUrl, httpMethod, body, options);\n        // generate telemetryid to track event\n        const requestId = InternalTelemetry.generateGuid();\n\n        // Add pre-call telemetry here\n        StaticTelemetry.trackEvent(EVENT_COMMERCE_REQUEST_START, { id: requestId });\n\n        // Add the retail server request headers\n        // Ideally these will be pulled via our zone implementation so they can be completely hidden from the end user\n        request = this.setRetailServerRequestHeaders(request);\n\n        // Send the request\n        return axios\n            .request(request)\n            .then((response: IHTTPResponse<IODataResponse<T>>) => {\n                // Add any post-call telemetry here\n                StaticTelemetry.trackEvent<IEventCommerceRequestStopProperties, {}>(EVENT_COMMERCE_REQUEST_STOP, {\n                    statusCode: `${response.status}`,\n                    success: 'true',\n                    id: requestId\n                });\n\n                // Parse OData and return response\n                return {\n                    ...response,\n                    data: this.parseODataResponse(response.data)\n                };\n            })\n            .catch((error: IHTTPError) => {\n                StaticTelemetry.trackEvent<IEventCommerceRequestStopProperties, {}>(EVENT_COMMERCE_REQUEST_STOP, {\n                    statusCode: `${error.code}`,\n                    success: 'false',\n                    id: requestId\n                });\n\n                // Return either passed error response or empty response to user\n                return error.response || <IHTTPResponse>{};\n            });\n    };\n}\n"]}