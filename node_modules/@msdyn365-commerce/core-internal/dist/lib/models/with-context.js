/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// tslint:disable:no-any function-name no-function-expression
import React from 'react';
import { CoreContext } from '../models';
/**
 * HOC that injects all the content of the generic context into the component
 * @param Component The component that the context will be injected into
 */
export function WithContext(Component) {
    return function ComponentWithContext(props) {
        return (React.createElement(CoreContext.Consumer, null, (value) => (React.createElement(Component, Object.assign({}, props, { context: value, telemetry: value.telemetry.setTelemetryModuleContext({ moduleId: props.id, moduleType: props.typeName })(), 
            // @ts-ignore -- we don't actually have this prop defined on the interface
            internalTelemetry: value.internalTelemetry.setTelemetryModuleContext({
                moduleId: props.id,
                moduleType: props.typeName
            })(), app: value.app })))));
    };
}
//# sourceMappingURL=with-context.js.map