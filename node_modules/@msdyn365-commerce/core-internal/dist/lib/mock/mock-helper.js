/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
// tslint:disable:no-any
import { merge as _merge } from 'lodash';
import * as React from 'react';
import msdyn365Commerce, { MSDyn365Commerce } from '../msdyn365-commerce';
import { CultureInfoFormatter, getCurrencyCodeFromContext } from '../utilities';
const renderModuleAttributes = (props) => {
    if (!props || !props.id) {
        return {};
    }
    return { 'data-m-t': props.typeName };
};
/**
 * Creates a new mock telemetry object, takes a partial ITelemetry and fills in missing required properties
 * @param telemetry A partial or full implmentation of ITelemetry
 */
export const buildMockTelemetry = (telemetry) => {
    const defaultMockTelemetry = {
        trace: (message) => console.log(`[Mock Trace]: ${message}`),
        debug: (message, ...meta) => console.log(`[Mock Debug]: ${message}`, ...meta),
        information: (message) => console.log(`[Mock Info]: ${message}`),
        warning: (message) => console.log(`[Mock Warning]: ${message}`),
        error: (message, ...meta) => console.log(`[Mock Error]: ${message}`, ...meta),
        exception: (error) => console.log(`[Mock Exception]: ${error}`),
        critical: (message) => console.log(`[Mock Info]: ${message}`),
        log: (logLevel, messageTemplate, logOptions) => console.log('[Mock Log]: ', logLevel, messageTemplate, logOptions),
        logEvent: (eventType, payload) => {
            // intentionally blank
        },
        trackMetric: (name, value) => console.log('[Mock Track Metric]: ', name, value),
        trackEvent: (name, properties, measurements) => console.log('[Mock Track Event]: ', properties, measurements),
        setTelemetryRequestContext: () => {
            return;
        },
        setTelemetryModuleContext: (moduleContext) => buildMockTelemetry,
        trackDependency: (options) => {
            console.log('[Mock Track Dependency]: ', options);
        },
        setTelemetryAttribute: (telemetryId, additionalTelemetryProperties) => {
            return { 'data-bi-id': '12345', 'data-m': '{"id":"12345","key1":"val1"}"' };
        }
    };
    return telemetry ? { ...defaultMockTelemetry, ...telemetry } : defaultMockTelemetry;
};
/**
 * Creates a mock CookieContext. Takes a partial ICookieContext and fills in required properties
 * @param context Partial action context.
 */
// tslint:disable-next-line:cyclomatic-complexity
export const buildMockCookieContext = (context) => {
    return {
        get: (context && context.get) ||
            ((cookiename) => {
                return { name: cookiename, value: undefined, status: 'NOT_FOUND' };
            }),
        set: (context && context.set) ||
            ((_cookieName, _cookieValue) => {
                console.log('set called');
            }),
        remove: (context && context.remove) ||
            (() => {
                console.log('remove called');
            }),
        getCartCookie: (context && context.getCartCookie) ||
            (() => {
                console.log('getCartCookie called');
                return '';
            }),
        setCartCookie: (context && context.setCartCookie) ||
            (() => {
                console.log('setCartCookie called');
            }),
        getCheckoutCartCookie: (context && context.getCheckoutCartCookie) ||
            (() => {
                console.log('getCheckouCartCookie called');
                return '';
            }),
        setCheckoutCartCookie: (context && context.setCheckoutCartCookie) ||
            (() => {
                console.log('setCheckouCartCookie called');
            }),
        removeCheckoutCartCookie: (context && context.removeCheckoutCartCookie) ||
            (() => {
                console.log('removeCheckoutCartCookie called');
            }),
        isConsentGiven: (context && context.isConsentGiven) ||
            (() => {
                return true;
            }),
        setConsentCookie: (context && context.setConsentCookie) ||
            (() => {
                console.log('setConsentCookie called');
            }),
        deleteConsentCookie: (context && context.deleteConsentCookie) ||
            (() => {
                console.log('deleteConsentCookie called');
            })
    };
};
export const buildMockSessionStorageContext = (context) => {
    return {
        getDataFromStorage: (context && context.getDataFromStorage) ||
            (() => {
                console.log('getDataFromStorage called');
                return {};
            }),
        setDataInStorage: (context && context.setDataInStorage) ||
            (() => {
                console.log('setDataInStorage called');
                return;
            }),
        getCheckoutCartData: (context && context.getCheckoutCartData) ||
            (() => {
                console.log('getCheckoutCartData called');
                return {};
            }),
        setCheckoutCartData: (context && context.setCheckoutCartData) ||
            (() => {
                console.log('setCheckoutCartData called');
                return;
            }),
        removeDataFromStorage: (context && context.removeDataFromStorage) ||
            (() => {
                console.log('removeDataFromStorage called');
                return;
            }),
        removeCheckoutCartData: (context && context.removeCheckoutCartData) ||
            (() => {
                console.log('removeCheckoutCartData called');
                return;
            })
    };
};
/**
 * Creates a mock IRequestContext. Takes a partial IRequestContext and fills in required properties
 * @param requestContext Partial IRequestContext
 */
// tslint:disable-next-line:max-func-body-length
export const buildMockRequest = (requestContext) => {
    const mockRequest = {
        url: {
            requestUrl: new URL('https://contoso.com'),
            staticCdnUrl: 'string'
        },
        canonicalDomain: 'contoso.com',
        canonicalUrl: 'https://contoso.com',
        locale: 'en-us',
        textDirection: 'ltr',
        params: {
            isDebug: false,
            isEditor: false,
            isPreview: false,
            concatJs: {
                hasValue: false,
                isTruthy: false,
                value: undefined
            },
            /**
             * Theme SCSS override matching registered theme name
             */
            theme: ''
        },
        device: {
            Type: 'pc'
        },
        user: {
            token: 'mockToken',
            isAuthenticated: false,
            optOutWebActivityTracking: false
        },
        app: {},
        apiSettings: {
            baseUrl: 'mockBaseUrl',
            channelId: 1,
            oun: 'mockOUN',
            catalogId: 2,
            baseImageUrl: 'mockBaseImageUrl',
            ratingsReviewsEndpoint: '',
            retailServerProxyVersion: '9.0.0',
            rnr: {
                proxyUrl: '',
                url: '',
                id: ''
            }
        },
        gridSettings: {
            xs: { w: 768 },
            sm: { w: 992 },
            md: { w: 1200 },
            lg: { w: 1600 },
            xl: { w: 1800 }
        },
        urlTokens: {},
        operationId: 'mockOperationId',
        // feature switches coming from server
        features: {},
        pageData: {},
        headers: {},
        cookies: buildMockCookieContext(),
        sessionStorage: buildMockSessionStorageContext(),
        themeOverride: {
            url: '',
            disableDefault: false
        },
        telemetrySettings: {
            eventHubAuthToken: '',
            eventHubEndPoint: '',
            optOutWebActivityTracking: false,
            operationId: 'mockOperationId',
            instrumentationKey: '',
            environmentId: 'Development'
        },
        telemetryData: {
            Checkout: [
                {
                    orderId: '',
                    cartId: '097504969642348742',
                    cartVersion: '12432',
                    Products: [
                        {
                            productChannelId: 18629762,
                            productChannelName: 'store',
                            productCategoryId: '9754',
                            productCategoryName: 'Sunglasses',
                            productId: '970374',
                            productName: 'Aviator',
                            productSku: 'special',
                            productPrice: 120,
                            productQuantity: 1,
                            productCurrency: 'USD'
                        }
                    ]
                }
            ],
            ProductPageView: {
                productChannelId: 18629762,
                productChannelName: '',
                productCategoryId: '',
                productCategoryName: '',
                productId: '08439484',
                productName: 'Awesome Tie',
                productSku: '',
                productPrice: 98,
                productQuantity: '',
                productCurrency: ''
            }
        },
        siteStylePreset: ''
    };
    return _merge(mockRequest, requestContext);
};
const mockRenderView = (FunctionalComponent) => (props) => {
    if (!FunctionalComponent) {
        return null;
    }
    // @ts-ignore
    return React.createElement(FunctionalComponent, props);
};
/**
 * Creates a mock IMSDyn365ActionContext. Takes a partial IActionContext and fills in required properties
 * @param context Partial action context.
 */
export const buildMockActionContext = (context) => {
    return {
        chainAction: (context && context.chainAction) ||
            (async (action, input) => {
                return null;
            }),
        update: (context && context.update) ||
            ((input, data) => {
                return data;
            }),
        trace: (context && context.trace) ||
            ((message) => {
                return;
            }),
        get: (context && context.get) ||
            ((cacheObjectType, cacheKey) => {
                return null;
            }),
        getAll: (context && context.getAll) ||
            ((cacheObjectType) => {
                return null;
            }),
        runAllActionsInQueue: async () => {
            return;
        },
        requestContext: buildMockRequest(context && context.requestContext),
        telemetry: buildMockTelemetry(context && context.telemetry),
        ...context
    };
};
/**
 * Creates a mock Core Context
 * @param coreContext Partial core context
 */
export const buildMockCoreContext = (coreContext) => {
    const request = buildMockRequest(coreContext.request);
    return {
        actionContext: buildMockActionContext(coreContext.actionContext),
        app: coreContext.app || {},
        telemetry: buildMockTelemetry(coreContext.telemetry),
        request,
        cultureFormatter: coreContext.cultureFormatter || new CultureInfoFormatter(request.locale, getCurrencyCodeFromContext(request))
    };
};
/**
 * Creates a mock MSDyn365 App with fake API settings for use in testing
 */
export const initializeMockApp = (mockSettings) => {
    MSDyn365Commerce.prototype.setMockSettings = function () {
        // tslint:disable-next-line
        this._env = process.env.NODE_ENV;
        // tslint:disable-next-line
        this._commerceApiSetting = mockSettings || {
            // tslint:disable-next-line
            baseUrl: 'http://mock.cloud.retail.dynamics.com/',
            channelId: 1,
            catalogId: 0,
            oun: '1',
            // tslint:disable-next-line
            baseImageUrl: `http://mock.cloud.retail.dynamics.com/MediaServer/`
        };
    };
    msdyn365Commerce.setMockSettings();
};
/**
 * Generates a mock IModule<TData> prop
 * @param moduleData Mock TData that maps to props.data
 * @param dataActions Mock data actions that map to props.dataActions
 * @param moduleConfig Mock module configs that map to props.config
 * @param mockContext Mock ICoreContext that map to props.context
 * @param mockTelemetry Mock ITelemetry that map to props.telemetry. If no mock is provided a default will be passed that logs to console.
 */
export const buildMockModuleProps = (moduleData, dataActions, moduleConfig, mockContext, mockTelemetry, app, view) => {
    mockContext = buildMockCoreContext(mockContext || {});
    return {
        // @ts-ignore TODO: Generate a default mock context.
        context: mockContext,
        data: moduleData,
        dataActions: dataActions,
        config: moduleConfig || {},
        id: 'mock-id',
        friendlyName: 'Mock Id',
        typeName: 'mock-type',
        telemetry: buildMockTelemetry(mockTelemetry),
        app: { ...{ config: {} }, ...app },
        renderModuleAttributes: renderModuleAttributes,
        renderView: mockRenderView(view)
    };
};
//# sourceMappingURL=mock-helper.js.map