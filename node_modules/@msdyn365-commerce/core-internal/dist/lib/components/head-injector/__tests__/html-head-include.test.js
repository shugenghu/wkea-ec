/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import 'jest';
import React from 'react';
import ReactDOM from 'react-dom';
import { HtmlHeadInclude, unique } from '../html-head-include';
import msdyn365Commerce from '../../../msdyn365-commerce';
describe('HtmlHeadInclude - Declarative API', () => {
    let headElement;
    const container = document.createElement('div');
    const mockIsBrowser = jest.spyOn(msdyn365Commerce, 'isBrowser', 'get');
    beforeEach(() => {
        headElement = headElement || document.head || document.querySelector('head');
        // resets DOM after each run
        // tslint:disable-next-line:no-inner-html
        headElement.innerHTML = '';
        // set isBrower to false to render HtmlHeadInclude component on server side
        mockIsBrowser.mockReturnValue(false);
    });
    afterEach(() => {
        ReactDOM.unmountComponentAtNode(container);
    });
    describe('api', () => {
        // tslint:disable-next-line:no-any
        it('updates page title', (done) => {
            ReactDOM.render(React.createElement(HtmlHeadInclude, null,
                React.createElement("title", null, "Some Great Title")), container);
            expect(document.title).toBe('Some Great Title');
            done();
        });
        // tslint:disable-next-line:no-any
        it('overrides page title', (done) => {
            ReactDOM.render(React.createElement(HtmlHeadInclude, null,
                React.createElement("title", null, "Some Great Title"),
                React.createElement("title", { "data-ms-action": 'override' }, "Some Other Great Title")), container);
            expect(document.title).toBe('Some Other Great Title');
            done();
        });
        // tslint:disable-next-line:no-any
        it('Multiple HtmlHeadInclude instances override page title', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", null, "Some Great Title")),
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", null, "Some Other Great Title"))), container);
            expect(document.title).toBe('Some Other Great Title');
            done();
        });
        // tslint:disable-next-line:no-any
        it('appends page title', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", null, "Contoso products")),
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", { "data-ms-action": 'append' }, "Department Electronics"))), container);
            expect(document.title).toBe('Contoso products Department Electronics');
            done();
        });
        // tslint:disable-next-line:no-any
        it('fallback to default override behavior when invalid action attribute is specified', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", null, "Contoso products")),
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", { "data-ms-invalid-action": 'append' }, "Department Electronics"))), container);
            expect(document.title).toBe('Department Electronics');
            done();
        });
        // tslint:disable-next-line:no-any
        it('fallback to default override behavior when invalid action attribute value is specified', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", null, "Contoso products")),
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", { "data-ms-action": 'invalid action' }, "Department Electronics"))), container);
            expect(document.title).toBe('Department Electronics');
            done();
        });
        // tslint:disable-next-line:no-any
        it('HtmlHeadInclude supports title, meta, base, link and script tags', (done) => {
            ReactDOM.render(React.createElement(HtmlHeadInclude, null,
                React.createElement("title", null, "Some Great Title"),
                React.createElement("meta", { name: 'description', content: 'Page description' }),
                React.createElement("script", { src: 'https://include.com/partner-hero.js', type: 'text/javascript' }),
                React.createElement("base", { href: 'https://www.microsoft.com' }),
                React.createElement("link", { rel: 'stylesheet', type: 'text/css', href: 'theme.css' })), container);
            expect(document.getElementsByTagName('meta').length).toBe(1);
            expect(document.getElementsByTagName('script').length).toBe(1);
            expect(document.getElementsByTagName('link').length).toBe(1);
            done();
        });
        // tslint:disable-next-line:no-any
        it('Merge tags between multiple HtmlHeadInclude instances', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", null, "Some Great Title"),
                    React.createElement("meta", { name: 'og:description', content: 'page-description' })),
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("meta", { name: 'og:property', content: 'page-property' }))), container);
            expect(document.title).toBe('Some Great Title');
            expect(document.getElementsByTagName('meta').length).toBe(2);
            done();
        });
        // tslint:disable-next-line:no-any
        it('Append content in case of conflict between tags', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("title", null, "Some Great Title"),
                    React.createElement("meta", { name: 'description', content: 'At Microsoft1', "data-append-content": true }),
                    React.createElement("meta", { name: 'description', content: 'At Microsoft2' }))), container);
            expect(document.getElementsByTagName('meta').length).toBe(1);
            expect(document.getElementsByTagName('meta')[0].getAttribute('content')).toBe('At Microsoft1, At Microsoft2');
            done();
        });
        // tslint:disable-next-line:no-any
        it('retains existing meta tag', (done) => {
            const metaEl = document.createElement('meta');
            headElement.appendChild(metaEl);
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("meta", { name: 'description', content: 'Page description' }))), container);
            expect(document.getElementsByTagName('meta').length).toBe(2);
            done();
        });
        // tslint:disable-next-line:no-any
        it('HtmlHeadInclude can contain script tag', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("script", { src: 'https://include.com/partner-hero.js', type: 'text/javascript', "data-load-point": 'head-start' }))), container);
            expect(document.getElementsByTagName('script').length).toBe(1);
            done();
        });
        // tslint:disable-next-line:no-any
        it('Retain script tags between multiple HtmlHeadInclude instances', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("script", { src: 'https://include.com/partner-hero.js', type: 'text/javascript' })),
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("script", { src: 'https://include.com/partner-hero.js', type: 'text/javascript' }))), container);
            expect(document.getElementsByTagName('script').length).toBe(2);
            done();
        });
        // tslint:disable-next-line:no-any
        it('HtmlHeadInclude supports deferred script tags', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("script", { src: 'https://include.com/partner-hero.js', type: 'text/javascript', defer: true }))), container);
            expect(document.getElementsByTagName('script')[0].src).toBe('https://include.com/partner-hero.js');
            expect(document.getElementsByTagName('script')[0].defer).toBe(true);
            done();
        });
        // tslint:disable-next-line:no-any
        it('HtmlHeadInclude can contain inline script tag', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("script", { type: 'text/javascript' }, `//<![CDATA[var i = 10;if (i < 5) { // some code }//]]>`))), container);
            expect(document.getElementsByTagName('script').length).toBe(1);
            expect(document.getElementsByTagName('script')[0].innerHTML).toBe(`//<![CDATA[var i = 10;if (i < 5) { // some code }//]]>`);
            done();
        });
        // tslint:disable-next-line:no-any
        it('HtmlHeadInclude can accept script load point', (done) => {
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("script", { type: 'text/javascript' }, `//<![CDATA[var i = 10;if (i < 5) { // some code }//]]>`),
                    React.createElement("meta", { name: 'description', content: 'Page description' }),
                    React.createElement("script", { src: 'https://include.com/partner-hero.js', type: 'text/javascript', "data-load-point": 'headStart' }),
                    React.createElement("script", { src: 'https://include.com/partner-hero.js', type: 'text/javascript', "data-load-point": 'headEnd' }),
                    React.createElement("script", { src: 'https://include.com/partner-hero.js', type: 'text/javascript', "data-load-point": 'bodyStart' }))), container);
            const tags = HtmlHeadInclude.peek();
            expect(tags.tags.length).toBe(5);
            expect(tags.nonScriptTags.length).toBe(1);
            expect(tags.scriptTags.headStart.length).toBe(1);
            expect(tags.scriptTags.headEnd.length).toBe(1);
            expect(tags.scriptTags.bodyStart.length).toBe(1);
            expect(tags.scriptTags.bodyEnd.length).toBe(1);
            // Default load point is body end
            const bodyScript = Array.prototype.slice.call(document.querySelectorAll('body script'));
            expect(bodyScript.length).toBe(2);
            expect(bodyScript[0].getAttribute('src')).toEqual('https://include.com/partner-hero.js');
            const headScript = Array.prototype.slice.call(document.querySelectorAll('head script'));
            expect(headScript.length).toBe(2);
            done();
        });
        // tslint:disable-next-line:no-any
        it('Unqiue function correctly filters head child elements', (done) => {
            // tslint:disable:jsx-key
            let testElems = [
                React.createElement("title", null, "This is a title"),
                React.createElement("title", null, "One more title"),
                React.createElement("title", null, "One more extra title")
            ];
            expect(testElems.filter(Boolean).filter(unique())).toMatchSnapshot();
            // Test two different tags with duplicates
            testElems = [React.createElement("title", null, "This is a title"), React.createElement("meta", { charSet: 'UTF-8' }), React.createElement("meta", { charSet: 'UTF-8' })];
            expect(testElems.filter(Boolean).filter(unique())).toMatchSnapshot();
            // Test allowed duplicate tags
            testElems = [
                React.createElement("title", null, "Some Great Title"),
                React.createElement("meta", { name: 'og:description', content: 'page-description' }),
                React.createElement("meta", { name: 'og:description', content: 'page-description' })
            ];
            expect(testElems.filter(Boolean).filter(unique())).toMatchSnapshot();
            done();
        });
        it('HtmlHeadInclude properly merges array of JSX.Elements', (done) => {
            const additionalMetaTags = [
                { key: 'test-key-1', value: 'test-value-1' },
                { key: 'test-key-2', value: 'test-value-2' }
            ];
            const pageTitle = 'page-title-test';
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    pageTitle && React.createElement("title", null, pageTitle),
                    additionalMetaTags
                        ? additionalMetaTags.map((tag, index) => React.createElement("meta", { key: index, name: tag.key, content: tag.value }))
                        : false)), container);
            expect(document.title).toBe('page-title-test');
            expect(document.getElementsByTagName('meta').length).toBe(2);
            expect(document.getElementsByTagName('meta')[0].getAttribute('content')).toBe('test-value-1');
            expect(document.getElementsByTagName('meta')[1].getAttribute('content')).toBe('test-value-2');
            done();
        });
        it('On browser do not render HtmlHeadInclude components', (done) => {
            // restore msdyn365Commerce.isBrowser to its original behavior
            mockIsBrowser.mockRestore();
            ReactDOM.render(React.createElement("div", null,
                React.createElement(HtmlHeadInclude, null,
                    React.createElement("script", { type: 'text/javascript' }, `//<![CDATA[var i = 10;if (i < 5) { // some code }//]]>`))), container);
            // since the component HtmlHeadInclude is not rendered on the browser do not expect script tag
            expect(document.getElementsByTagName('script').length).toBe(0);
            done();
        });
    });
});
//# sourceMappingURL=html-head-include.test.js.map