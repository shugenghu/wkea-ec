{"version":3,"file":"html-head-utils.js","sourceRoot":"","sources":["../../../../src/components/head-injector/html-head-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { IGeneric } from '../../interfaces';\nimport {\n    BODY_START_LOAD_POINT,\n    DATA_LOAD_POINT,\n    HEAD_ELEMENT_IDENTIFIER_ATTR,\n    HEAD_START_LOAD_POINT,\n    HtmlHeadElement,\n    IHtmlHead\n} from './IHtmlHeadModel';\nconst DOMAttributeNames: IGeneric<unknown> = {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv'\n};\n\n/**\n * update title of the page\n * @function updateTitle\n * @param {HtmlHeadElement} title - final derived title component\n */\nconst updateTitle = (titleComponent: HtmlHeadElement): void => {\n    let title: string = '';\n    if (titleComponent) {\n        const { children } = titleComponent.props;\n        title = typeof children === 'string' ? children : '';\n    }\n\n    switch (titleComponent && titleComponent.props['data-ms-action']) {\n        case 'format':\n            // @ts-ignore\n            if (window && window.___initialData___ && window.___initialData___.pageRoot) {\n                // @ts-ignore\n                const titleTemplate = window.___initialData___.pageRoot.titleTemplate;\n                title = titleTemplate.replace(/\\{0\\}/, title);\n            }\n\n            break;\n        case 'append':\n            title = document.title !== title ? `${document.title} ${title}` : title;\n            break;\n        case 'override':\n        default:\n    }\n\n    if (document.title !== title) {\n        document.title = title;\n    }\n};\n\n/**\n * update head tag on change, on client side\n * @function reactElementToDOM\n * @param {HtmlHeadElement} element - final react element that needs to be added to DOM\n * @return {HTMLElement} - html dom element\n */\nconst reactElementToDOM = (element: HtmlHeadElement): HTMLElement => {\n    const tagType = typeof element.type === 'string' ? element.type : '';\n    const el = document.createElement(tagType);\n    Object.keys(element.props).forEach((property: string) => {\n        if (property !== 'children' && property !== 'dangerouslySetInnerHTML') {\n            const attr = DOMAttributeNames[property] || property.toLowerCase();\n            el.setAttribute(attr, element.props[property]);\n        }\n    });\n\n    // @ts-ignore\n    const { children, dangerouslySetInnerHTML } = element.props;\n    if (el && dangerouslySetInnerHTML) {\n        // tslint:disable-next-line:no-inner-html\n        el.innerHTML = dangerouslySetInnerHTML.__html || '';\n    } else if (el && children) {\n        el.textContent = typeof children === 'string' ? children : children.join('');\n    }\n\n    return el;\n};\n\n/**\n * Filters a script based on the filterFromBody parameter\n * If filterFromBody is true, only those scripts that have head load points will\n * return true. Otherwise, only scripts with body load points will return true.\n *\n * @param filterBody Set to true to filter out scripts in body. False to filter out scripts in the head\n * @param t The script node\n */\nconst filterScripts = (filterBody: boolean, t: Node): boolean => {\n    const el = <Element>t;\n    if (el.tagName === 'SCRIPT') {\n        const attrVal = el.getAttribute(DATA_LOAD_POINT);\n        if (attrVal === 'bodyStart' || attrVal === 'bodyEnd' || attrVal === null) {\n            return filterBody ? false : true;\n        }\n    }\n    return filterBody ? true : false;\n};\n\n/**\n * Adds an HTML node to a particular slot\n *\n * @param slot The parent Element to which the HTML node should be added\n * @param loadPointToLookFor The load point type to look for to determine if the node should be prepended to append to the parent node\n * @param t The HTML node to add\n */\nconst addElementToHtmlSlot = (slot: HTMLElement, loadPointToLookFor: string, t: Node) => {\n    const loadPoint = (<Element>t).getAttribute(DATA_LOAD_POINT);\n    if (loadPoint && loadPoint === loadPointToLookFor) {\n        slot.prepend(t);\n    } else {\n        slot.appendChild(t);\n    }\n};\n\n/**\n * update head tag on change, on client side\n * @function doUpdateHead\n * @param {HtmlHead} head - final list of merged tags\n * @return {HtmlHead} - final list of merged tags\n */\nconst updateElements = (tagType: string, components: HtmlHeadElement[]): void => {\n    const headEl = document.getElementsByTagName('head')[0];\n    const bodyEl = document.getElementsByTagName('body')[0];\n    let oldTags: HTMLElement[] = Array.prototype.slice.call(headEl.querySelectorAll(`${tagType}.${HEAD_ELEMENT_IDENTIFIER_ATTR}`));\n    // sepcial condition for scripts: read script tags from body tag as well\n    if (tagType === 'script') {\n        const bodyScriptTags = Array.prototype.slice.call(bodyEl.querySelectorAll(`script.${HEAD_ELEMENT_IDENTIFIER_ATTR}`));\n        oldTags = oldTags.concat(bodyScriptTags);\n    }\n    const newTags = components.map(reactElementToDOM).filter((newTag: HTMLElement) => {\n        const len = oldTags.length;\n        for (let i = 0; i < len; i++) {\n            const oldTag = oldTags[i];\n            oldTag.removeAttribute('data-reactroot');\n            if (oldTag.isEqualNode(newTag)) {\n                oldTags.splice(i, 1);\n                return false;\n            } else if (\n                oldTag.nodeName === 'SCRIPT' &&\n                (oldTag.innerHTML === newTag.innerHTML || oldTag.getAttribute('src') === newTag.getAttribute('src'))\n            ) {\n                oldTags.splice(i, 1);\n                return false;\n            }\n        }\n        return true;\n    });\n    // Remove all the old tags and add new tags in the correct places\n    oldTags.forEach((t: Node) => t.parentNode && t.parentNode.removeChild(t));\n    // First, filter out all the script tags that are in the body and then reinsert\n    // the new tags in the head in their appropriate locations based on the load-point (if applicable)\n    newTags\n        .filter((t: Node) => {\n            return filterScripts(true, t);\n        })\n        .forEach((t: Node) => {\n            addElementToHtmlSlot(headEl, HEAD_START_LOAD_POINT, t);\n        });\n    // If any script tags were defined in the body, add these script tags back into the body\n    // based on their load-points\n    newTags\n        .filter((t: Node) => {\n            return filterScripts(false, t);\n        })\n        .forEach((t: Node) => {\n            addElementToHtmlSlot(bodyEl, BODY_START_LOAD_POINT, t);\n        });\n};\n\n/**\n * update head tag on change, on client side\n * @function doUpdateHead\n * @param {HtmlHead} head - final list of merged tags\n */\nconst doUpdateHead = (head: IHtmlHead): void => {\n    const tags: IGeneric<unknown> = {};\n    head.tags.forEach((h: HtmlHeadElement) => {\n        const headType = h.type.toString();\n        const components = tags[headType] || [];\n        components.push(h);\n        tags[headType] = components;\n    });\n\n    const titleTag = tags.title;\n    updateTitle(titleTag && titleTag.length > 0 ? titleTag[0] : null);\n\n    const types = ['meta', 'link', 'style', 'script'];\n    types.forEach((tagType: string) => {\n        updateElements(tagType, tags[tagType] || []);\n    });\n};\n\n/**\n * update head on change, on client side\n * @function updateHead\n * @param {HtmlHead} head - final list of merged tags\n */\nexport const updateHead = (head: IHtmlHead): void => {\n    doUpdateHead(head);\n};\n"]}