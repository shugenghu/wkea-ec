{"version":3,"file":"place-holder-for-preview.js","sourceRoot":"","sources":["../../../../src/components/place-holder-for-preview/place-holder-for-preview.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AACH,qCAAqC;AACrC,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAwB1D,MAAM,8BAA8B,GAAG,CAAC,KAAmD,EAAe,EAAE;IACxG,MAAM,GAAG,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IACzC,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,GAAG,CAAC,OAAO,EAAE;YACb,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;YAC/C,MAAM,OAAO,GAAG;gBACZ,EAAE;gBACF,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE;gBAChC,OAAO;gBACP,QAAQ;gBACR,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,QAAQ,EAAE,KAAK,CAAC,QAAQ;aAC3B,CAAC;YACF,GAAG,CAAC,OAAO,CAAC,SAAS,GAAG,QAAQ,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;SAC1E;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,OAAO,OAAO,CAAC,GAAG,EAAE;QAChB,OAAO,CACH,2CACI,SAAS,EAAC,WAAW,EACrB,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,EACzE,IAAI,EAAC,QAAQ,aACL,cAAc,EACtB,EAAE,EAAE,KAAK,CAAC,EAAE,IACR,KAAK,CAAC,sBAAsB,CAAC,KAAK,CAAC;YAEvC,6BAAK,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,GAAI;YAC7C,2BAAG,SAAS,EAAC,WAAW;gBACpB,2BAAG,SAAS,EAAC,6BAA6B,GAAG;gBAC5C,KAAK,CAAC,SAAS,CAAC,gBAAgB,CACjC,CACF,CACT,CAAC;IACN,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uCAAuC,GAAG,8BAA8B,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:align no-inner-html\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { IModule, IModuleConfig } from '../../contract';\n\nexport interface IPlaceHolderForContainerPreviewConfig extends IModuleConfig {\n    slotId?: string;\n    parent?: string;\n    parentType?: string;\n}\n\nexport interface IPlaceHolderForContainerPreviewResources {\n    clickToConfigure: string;\n}\n\nexport interface IPlaceHolderForContainerPreviewProps<T> extends IModule<T> {\n    resources: IPlaceHolderForContainerPreviewResources;\n    config: IPlaceHolderForContainerPreviewConfig;\n}\n\ninterface IPlaceholderForContainerPreviewPropsExtended extends IPlaceHolderForContainerPreviewProps<{}> {\n    id: string;\n    error: Error;\n    message?: string;\n}\n\nconst PlaceholderForContainerPreview = (props: IPlaceholderForContainerPreviewPropsExtended): JSX.Element => {\n    const ref = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n        if (ref.current) {\n            const { id, error, message, typeName } = props;\n            const comment = {\n                id,\n                error: error && error.toString(),\n                message,\n                typeName,\n                slotId: props.slotId,\n                parentId: props.parentId\n            };\n            ref.current.innerHTML = `<!-- ${JSON.stringify(comment, null, 4)} -->`;\n        }\n    }, []);\n    return useMemo(() => {\n        return (\n            <div\n                className='card-body'\n                style={{ color: '#fff', backgroundColor: '#6c757d', textAlign: 'center' }}\n                role='button'\n                data-ft='setting-icon'\n                id={props.id}\n                {...props.renderModuleAttributes(props)}\n            >\n                <div ref={ref} style={{ display: 'none' }} />\n                <p className='card-text'>\n                    <i className='ms-Icon ms-Icon--EditCreate' />\n                    {props.resources.clickToConfigure}\n                </p>\n            </div>\n        );\n    }, [props]);\n};\n\nexport const PlaceholderForContainerPreviewComponent = PlaceholderForContainerPreview;\n"]}