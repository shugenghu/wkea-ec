{"version":3,"file":"image.test.js","sourceRoot":"","sources":["../../../../../src/components/image/__tests__/image.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport * as React from 'react';\nimport * as renderer from 'react-test-renderer';\nimport { IGridSettings } from '../../../contract';\nimport { IImageData, IImageSettings } from '../../../interfaces';\nimport { IImageProps } from '../IImage';\nimport { Image } from '../image';\n\ndescribe('Image Component', () => {\n    it('Should render with correct lazyload properties', () => {\n        const mockGridSetting: IGridSettings = {\n            xs: { w: 768 },\n            sm: { w: 992 },\n            md: { w: 1200 },\n            lg: { w: 1600 },\n            xl: { w: 1800 }\n        };\n        const mockImage: IImageData = {\n            src: 'https://www.microsoft.com/super-duper-gif.jpeg'\n        };\n        const mockImageSetting: IImageSettings = {\n            disableLazyLoad: false,\n            viewports: {\n                xs: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=2'\n                },\n                sm: {\n                    h: 10,\n                    w: 6,\n                    q: 'h=10&w=6'\n                },\n                md: {\n                    h: 10,\n                    w: 11,\n                    q: 'h=10&w=11'\n                },\n                lg: {\n                    h: 10,\n                    w: 16,\n                    q: 'h=10&w=16'\n                },\n                xl: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=20'\n                }\n            }\n        };\n        const imageProps: IImageProps = {\n            ...mockImage,\n            gridSettings: mockGridSetting,\n            imageSettings: mockImageSetting\n        };\n\n        const image = renderer.create(<Image {...imageProps} />);\n        expect(image.toJSON()).toMatchSnapshot();\n    });\n    it('Should render without lazyload properties', () => {\n        const mockGridSetting: IGridSettings = {\n            xs: { w: 768 },\n            sm: { w: 992 },\n            md: { w: 1200 },\n            lg: { w: 1600 },\n            xl: { w: 1800 }\n        };\n        const mockImage: IImageData = {\n            src: 'https://www.microsoft.com/super-duper-gif.jpeg'\n        };\n        const mockImageSetting: IImageSettings = {\n            disableLazyLoad: true,\n            viewports: {\n                xs: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=2'\n                },\n                sm: {\n                    h: 10,\n                    w: 6,\n                    q: 'h=10&w=6'\n                },\n                md: {\n                    h: 10,\n                    w: 11,\n                    q: 'h=10&w=11'\n                },\n                lg: {\n                    h: 10,\n                    w: 16,\n                    q: 'h=10&w=16'\n                },\n                xl: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=20'\n                }\n            }\n        };\n        const imageProps: IImageProps = {\n            ...mockImage,\n            gridSettings: mockGridSetting,\n            image: mockImage,\n            imageSettings: mockImageSetting\n        };\n\n        const image = renderer.create(<Image {...imageProps} />);\n        expect(image.toJSON()).toMatchSnapshot();\n    });\n\n    it('Should render correctly when only xs and md define in imageSettings', () => {\n        const mockGridSetting: IGridSettings = {\n            xs: { w: 768 },\n            sm: { w: 992 },\n            md: { w: 1200 },\n            lg: { w: 1600 },\n            xl: { w: 1800 }\n        };\n        const mockImage: IImageData = {\n            src: 'https://www.microsoft.com/super-duper-gif.jpeg'\n        };\n        const mockImageSetting: IImageSettings = {\n            lazyload: true,\n            viewports: {\n                xs: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=2'\n                },\n                md: {\n                    h: 10,\n                    w: 11,\n                    q: 'h=10&w=11'\n                }\n            }\n        };\n        const imageProps: IImageProps = {\n            ...mockImage,\n            gridSettings: mockGridSetting,\n            imageSettings: mockImageSetting\n        };\n\n        const image = renderer.create(<Image {...imageProps} />);\n        expect(image.toJSON()).toMatchSnapshot();\n    });\n    it('Should render correctly when only sm and largest viewport define in imageSettings', () => {\n        const mockGridSetting: IGridSettings = {\n            xs: { w: 768 },\n            sm: { w: 992 },\n            md: { w: 1200 },\n            lg: { w: 1600 },\n            xl: { w: 1600 }\n        };\n        const mockImage: IImageData = {\n            src: 'https://www.microsoft.com/super-duper-gif.jpeg'\n        };\n        const mockImageSetting: IImageSettings = {\n            lazyload: true,\n            viewports: {\n                xs: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=2'\n                },\n                sm: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=10'\n                },\n                xl: {\n                    h: 10,\n                    w: 15,\n                    q: 'h=10&w=15'\n                }\n            }\n        };\n        const imageProps: IImageProps = {\n            ...mockImage,\n            gridSettings: mockGridSetting,\n            imageSettings: mockImageSetting\n        };\n\n        const image = renderer.create(<Image {...imageProps} />);\n        expect(image.toJSON()).toMatchSnapshot();\n    });\n    it('Should render correctly when only xs, md and largest viewport define in imageSettings', () => {\n        const mockGridSetting: IGridSettings = {\n            xs: { w: 768 },\n            sm: { w: 992 },\n            md: { w: 1200 },\n            lg: { w: 1600 }\n        };\n        const mockImage: IImageData = {\n            src: 'https://www.microsoft.com/super-duper-gif.jpeg'\n        };\n        const mockImageSetting: IImageSettings = {\n            lazyload: true,\n            viewports: {\n                xs: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=2'\n                },\n                md: {\n                    h: 10,\n                    w: 11,\n                    q: 'h=10&w=11'\n                },\n                lg: {\n                    h: 10,\n                    w: 15,\n                    q: 'h=10&w=15'\n                }\n            }\n        };\n        const imageProps: IImageProps = {\n            ...mockImage,\n            gridSettings: mockGridSetting,\n            imageSettings: mockImageSetting\n        };\n\n        const image = renderer.create(<Image {...imageProps} />);\n        expect(image.toJSON()).toMatchSnapshot();\n    });\n\n    it('Should render with updated valid image from previous invalid image', () => {\n        const mockGridSetting: IGridSettings = {\n            xs: { w: 768 },\n            sm: { w: 992 },\n            md: { w: 1200 },\n            lg: { w: 1600 },\n            xl: { w: 1800 }\n        };\n        const mockInvalidImage: IImageData = {\n            src: ''\n        };\n        const mockValidImage: IImageData = {\n            src: 'https://www.microsoft.com/super-duper-gif.jpeg'\n        };\n\n        const mockImageSetting: IImageSettings = {\n            disableLazyLoad: false,\n            viewports: {\n                xs: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=2'\n                },\n                sm: {\n                    h: 10,\n                    w: 6,\n                    q: 'h=10&w=6'\n                },\n                md: {\n                    h: 10,\n                    w: 11,\n                    q: 'h=10&w=11'\n                },\n                lg: {\n                    h: 10,\n                    w: 16,\n                    q: 'h=10&w=16'\n                },\n                xl: {\n                    h: 10,\n                    w: 2,\n                    q: 'h=10&w=20'\n                }\n            }\n        };\n        const inValidImageProps: IImageProps = {\n            ...mockInvalidImage,\n            gridSettings: mockGridSetting,\n            imageSettings: mockImageSetting,\n            loadFailureBehavior: 'empty'\n        };\n\n        const invalidImage = renderer.create(<Image {...inValidImageProps} />);\n        expect(invalidImage.toJSON()).toMatchSnapshot();\n\n        const validImageProps: IImageProps = {\n            ...mockValidImage,\n            gridSettings: mockGridSetting,\n            imageSettings: mockImageSetting,\n            loadFailureBehavior: 'empty'\n        };\n\n        invalidImage.update(<Image {...validImageProps} />);\n        expect(invalidImage.toJSON()).toMatchSnapshot();\n    });\n});\n"]}