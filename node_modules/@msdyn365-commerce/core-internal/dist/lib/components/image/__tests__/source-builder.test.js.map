{"version":3,"file":"source-builder.test.js","sourceRoot":"","sources":["../../../../../src/components/image/__tests__/source-builder.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGridSettings } from '../../../contract/IGridSettings';\nimport { getSourceData, getImageResizeUrl } from '../source-builder';\nimport { IImageSettings, IImageData } from '../../../interfaces';\n\ndescribe('Source Builder', () => {\n    describe('getSourceData', () => {\n        it('Should return undefined if grid setting viewport does not exist', () => {\n            const gridSetting: IGridSettings = {\n                xs: { w: 0 },\n                sm: { w: 5 },\n                md: { w: 10 },\n                xl: { w: 20 }\n            };\n\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n            // @ts-ignore\n            const mockImageSetting: IImageSettings = {};\n            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'lg', 'xl');\n            expect(src).toBeUndefined();\n        });\n\n        it('Should return undefined if image setting viewport does not exist', () => {\n            const gridSetting: IGridSettings = {\n                xs: { w: 0 },\n                sm: { w: 5 },\n                md: { w: 10 },\n                lg: { w: 15 },\n                xl: { w: 20 }\n            };\n\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n            // @ts-ignore\n            const mockImageSetting: IImageSettings = {\n                // @ts-ignore\n                viewports: {}\n            };\n            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'lg', 'xl');\n            expect(src).toBeUndefined();\n        });\n\n        it('Should return the correct source data', () => {\n            const gridSetting: IGridSettings = {\n                xs: { w: 0 },\n                sm: { w: 5 },\n                md: { w: 10 },\n                lg: { w: 15 },\n                xl: { w: 20 }\n            };\n\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n            // @ts-ignore\n            const mockImageSetting: IImageSettings = {\n                viewports: {\n                    xs: {\n                        h: 10,\n                        w: 2,\n                        q: 'h=10&w=2'\n                    },\n                    sm: {\n                        h: 10,\n                        w: 6,\n                        q: 'h=10&w=6'\n                    },\n                    md: {\n                        h: 10,\n                        w: 11,\n                        q: 'h=10&w=11'\n                    },\n                    lg: {\n                        h: 10,\n                        w: 16,\n                        q: 'h=10&w=16'\n                    },\n                    xl: {\n                        h: 10,\n                        w: 2,\n                        q: 'h=10&w=2'\n                    }\n                }\n            };\n            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'lg', 'xl');\n            expect(src).toMatchObject({\n                media: '(min-width:11px) and (max-width:15px)',\n                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=16'\n            });\n        });\n        it('Should return find the correct minimum based on gridsetting', () => {\n            const gridSetting: IGridSettings = {\n                xs: { w: 0 },\n                sm: { w: 5 },\n                lg: { w: 15 },\n                xl: { w: 20 }\n            };\n\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n            // @ts-ignore\n            const mockImageSetting: IImageSettings = {\n                viewports: {\n                    xs: {\n                        h: 10,\n                        w: 2,\n                        q: 'h=10&w=2'\n                    },\n                    sm: {\n                        h: 10,\n                        w: 6,\n                        q: 'h=10&w=6'\n                    },\n                    md: {\n                        h: 10,\n                        w: 11,\n                        q: 'h=10&w=11'\n                    },\n                    lg: {\n                        h: 10,\n                        w: 16,\n                        q: 'h=10&w=16'\n                    },\n                    xl: {\n                        h: 10,\n                        w: 2,\n                        q: 'h=10&w=2'\n                    }\n                }\n            };\n            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'lg', 'xl');\n            expect(src).toMatchObject({\n                media: '(min-width:6px) and (max-width:15px)',\n                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=16'\n            });\n        });\n        it('Should return find the correct minimum based on imagesettings', () => {\n            const gridSetting: IGridSettings = {\n                xs: { w: 1 },\n                sm: { w: 5 },\n                md: { w: 10 },\n                lg: { w: 15 },\n                xl: { w: 20 }\n            };\n\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n            // @ts-ignore\n            const mockImageSetting: IImageSettings = {\n                viewports: {\n                    xs: {\n                        h: 10,\n                        w: 2,\n                        q: 'h=10&w=2'\n                    },\n                    md: {\n                        h: 10,\n                        w: 11,\n                        q: 'h=10&w=11'\n                    }\n                }\n            };\n            expect(getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'xs', 'xl')).toMatchObject({\n                media: '(max-width:1px)',\n                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=2'\n            });\n            expect(getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'md', 'xl')).toMatchObject({\n                media: '(min-width:2px) and (max-width:10px)',\n                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=11'\n            });\n        });\n        it('Should render min-width only for largest specifiy viewport', () => {\n            const gridSetting: IGridSettings = {\n                xs: { w: 0 },\n                sm: { w: 5 },\n                md: { w: 10 },\n                lg: { w: 15 },\n                xl: { w: 20 }\n            };\n\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n            // @ts-ignore\n            const mockImageSetting: IImageSettings = {\n                viewports: {\n                    xs: {\n                        h: 10,\n                        w: 2,\n                        q: 'h=10&w=2'\n                    },\n                    md: {\n                        h: 10,\n                        w: 11,\n                        q: 'h=10&w=11'\n                    },\n                    xl: {\n                        h: 10,\n                        w: 20,\n                        q: 'h=10&w=20'\n                    }\n                }\n            };\n            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'xl', 'xl');\n            expect(src).toMatchObject({\n                media: '(min-width:11px)',\n                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=20'\n            });\n        });\n\n        it('getImageResizeUrl should build URL correctly from valid viewport', () => {\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n\n            const mockImageSetting: IImageSettings = {\n                quality: 50,\n                lazyload: true,\n                viewports: {\n                    xs: { w: 800, h: 600, q: 'w=800&h=600&q=80&m=6&f=jpg' },\n                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },\n                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },\n                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },\n                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }\n                }\n            };\n\n            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], mockImageSetting)).toMatch(\n                'https://microsoft.com/super-super-gif.jpeg?w=800&h=600&q=80&m=6&f=jpg'\n            );\n        });\n\n        it('getImageResizeUrl should handle invalid imageSrc ', () => {\n            const mockImage: IImageData = {\n                src: ''\n            };\n\n            const mockImageSetting: IImageSettings = {\n                quality: 50,\n                lazyload: true,\n                viewports: {\n                    xs: { w: 800, h: 600, q: 'w=800&h=600&q=80&m=6&f=jpg' },\n                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },\n                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },\n                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },\n                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }\n                }\n            };\n\n            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], mockImageSetting)).toMatch('');\n        });\n\n        it('getImageResizeUrl should fallback if no querystring provided in viewport', () => {\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n\n            const mockImageSetting: IImageSettings = {\n                quality: 50,\n                lazyload: true,\n                viewports: {\n                    xs: { h: 10, w: 2 },\n                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },\n                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },\n                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },\n                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }\n                }\n            };\n\n            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], mockImageSetting)).toMatch(\n                'https://microsoft.com/super-super-gif.jpeg?m=6&w=2&h=10&q=50'\n            );\n        });\n\n        it('getImageResizeUrl should fallback to imageSetting if no viewport configured ', () => {\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n\n            const mockImageSetting: IImageSettings = {\n                quality: 50,\n                lazyload: true,\n                viewports: {\n                    xs: { w: 800, h: 600, q: 'w=800&h=600&q=80&m=6&f=jpg' }\n                }\n            };\n\n            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['sm'], mockImageSetting)).toMatch(\n                'https://microsoft.com/super-super-gif.jpeg?m=6&q=50'\n            );\n        });\n\n        it('getImageResizeUrl should build URL correctly based on just height and width of viewport', () => {\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n\n            const mockImageSetting: IImageSettings = {\n                lazyload: true,\n                viewports: {\n                    xs: { w: 2, h: 10 },\n                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },\n                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },\n                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },\n                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }\n                }\n            };\n\n            expect(getImageResizeUrl(mockImage.src, undefined, undefined)).toMatch('https://microsoft.com/super-super-gif.jpeg');\n            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], mockImageSetting)).toMatch(\n                'https://microsoft.com/super-super-gif.jpeg?m=6&w=2&h=10'\n            );\n        });\n\n        it('getImageResizeUrl should build URL correctly if imageSetting not provided', () => {\n            const mockImage: IImageData = {\n                src: 'https://microsoft.com/super-super-gif.jpeg'\n            };\n\n            const mockImageSetting: IImageSettings = {\n                quality: 50,\n                lazyload: true,\n                viewports: {\n                    xs: { w: 800, h: 600, q: 'w=800&h=600&q=80&m=6&f=jpg' },\n                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },\n                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },\n                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },\n                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }\n                }\n            };\n\n            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], undefined)).toMatch(\n                'https://microsoft.com/super-super-gif.jpeg?w=800&h=600&q=80&m=6&f=jpg'\n            );\n        });\n    });\n});\n"]}