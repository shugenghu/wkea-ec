/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import * as React from 'react';
import * as renderer from 'react-test-renderer';
import { Image } from '../image';
describe('Image Component', () => {
    it('Should render with correct lazyload properties', () => {
        const mockGridSetting = {
            xs: { w: 768 },
            sm: { w: 992 },
            md: { w: 1200 },
            lg: { w: 1600 },
            xl: { w: 1800 }
        };
        const mockImage = {
            src: 'https://www.microsoft.com/super-duper-gif.jpeg'
        };
        const mockImageSetting = {
            disableLazyLoad: false,
            viewports: {
                xs: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=2'
                },
                sm: {
                    h: 10,
                    w: 6,
                    q: 'h=10&w=6'
                },
                md: {
                    h: 10,
                    w: 11,
                    q: 'h=10&w=11'
                },
                lg: {
                    h: 10,
                    w: 16,
                    q: 'h=10&w=16'
                },
                xl: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=20'
                }
            }
        };
        const imageProps = {
            ...mockImage,
            gridSettings: mockGridSetting,
            imageSettings: mockImageSetting
        };
        const image = renderer.create(React.createElement(Image, Object.assign({}, imageProps)));
        expect(image.toJSON()).toMatchSnapshot();
    });
    it('Should render without lazyload properties', () => {
        const mockGridSetting = {
            xs: { w: 768 },
            sm: { w: 992 },
            md: { w: 1200 },
            lg: { w: 1600 },
            xl: { w: 1800 }
        };
        const mockImage = {
            src: 'https://www.microsoft.com/super-duper-gif.jpeg'
        };
        const mockImageSetting = {
            disableLazyLoad: true,
            viewports: {
                xs: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=2'
                },
                sm: {
                    h: 10,
                    w: 6,
                    q: 'h=10&w=6'
                },
                md: {
                    h: 10,
                    w: 11,
                    q: 'h=10&w=11'
                },
                lg: {
                    h: 10,
                    w: 16,
                    q: 'h=10&w=16'
                },
                xl: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=20'
                }
            }
        };
        const imageProps = {
            ...mockImage,
            gridSettings: mockGridSetting,
            image: mockImage,
            imageSettings: mockImageSetting
        };
        const image = renderer.create(React.createElement(Image, Object.assign({}, imageProps)));
        expect(image.toJSON()).toMatchSnapshot();
    });
    it('Should render correctly when only xs and md define in imageSettings', () => {
        const mockGridSetting = {
            xs: { w: 768 },
            sm: { w: 992 },
            md: { w: 1200 },
            lg: { w: 1600 },
            xl: { w: 1800 }
        };
        const mockImage = {
            src: 'https://www.microsoft.com/super-duper-gif.jpeg'
        };
        const mockImageSetting = {
            lazyload: true,
            viewports: {
                xs: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=2'
                },
                md: {
                    h: 10,
                    w: 11,
                    q: 'h=10&w=11'
                }
            }
        };
        const imageProps = {
            ...mockImage,
            gridSettings: mockGridSetting,
            imageSettings: mockImageSetting
        };
        const image = renderer.create(React.createElement(Image, Object.assign({}, imageProps)));
        expect(image.toJSON()).toMatchSnapshot();
    });
    it('Should render correctly when only sm and largest viewport define in imageSettings', () => {
        const mockGridSetting = {
            xs: { w: 768 },
            sm: { w: 992 },
            md: { w: 1200 },
            lg: { w: 1600 },
            xl: { w: 1600 }
        };
        const mockImage = {
            src: 'https://www.microsoft.com/super-duper-gif.jpeg'
        };
        const mockImageSetting = {
            lazyload: true,
            viewports: {
                xs: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=2'
                },
                sm: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=10'
                },
                xl: {
                    h: 10,
                    w: 15,
                    q: 'h=10&w=15'
                }
            }
        };
        const imageProps = {
            ...mockImage,
            gridSettings: mockGridSetting,
            imageSettings: mockImageSetting
        };
        const image = renderer.create(React.createElement(Image, Object.assign({}, imageProps)));
        expect(image.toJSON()).toMatchSnapshot();
    });
    it('Should render correctly when only xs, md and largest viewport define in imageSettings', () => {
        const mockGridSetting = {
            xs: { w: 768 },
            sm: { w: 992 },
            md: { w: 1200 },
            lg: { w: 1600 }
        };
        const mockImage = {
            src: 'https://www.microsoft.com/super-duper-gif.jpeg'
        };
        const mockImageSetting = {
            lazyload: true,
            viewports: {
                xs: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=2'
                },
                md: {
                    h: 10,
                    w: 11,
                    q: 'h=10&w=11'
                },
                lg: {
                    h: 10,
                    w: 15,
                    q: 'h=10&w=15'
                }
            }
        };
        const imageProps = {
            ...mockImage,
            gridSettings: mockGridSetting,
            imageSettings: mockImageSetting
        };
        const image = renderer.create(React.createElement(Image, Object.assign({}, imageProps)));
        expect(image.toJSON()).toMatchSnapshot();
    });
    it('Should render with updated valid image from previous invalid image', () => {
        const mockGridSetting = {
            xs: { w: 768 },
            sm: { w: 992 },
            md: { w: 1200 },
            lg: { w: 1600 },
            xl: { w: 1800 }
        };
        const mockInvalidImage = {
            src: ''
        };
        const mockValidImage = {
            src: 'https://www.microsoft.com/super-duper-gif.jpeg'
        };
        const mockImageSetting = {
            disableLazyLoad: false,
            viewports: {
                xs: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=2'
                },
                sm: {
                    h: 10,
                    w: 6,
                    q: 'h=10&w=6'
                },
                md: {
                    h: 10,
                    w: 11,
                    q: 'h=10&w=11'
                },
                lg: {
                    h: 10,
                    w: 16,
                    q: 'h=10&w=16'
                },
                xl: {
                    h: 10,
                    w: 2,
                    q: 'h=10&w=20'
                }
            }
        };
        const inValidImageProps = {
            ...mockInvalidImage,
            gridSettings: mockGridSetting,
            imageSettings: mockImageSetting,
            loadFailureBehavior: 'empty'
        };
        const invalidImage = renderer.create(React.createElement(Image, Object.assign({}, inValidImageProps)));
        expect(invalidImage.toJSON()).toMatchSnapshot();
        const validImageProps = {
            ...mockValidImage,
            gridSettings: mockGridSetting,
            imageSettings: mockImageSetting,
            loadFailureBehavior: 'empty'
        };
        invalidImage.update(React.createElement(Image, Object.assign({}, validImageProps)));
        expect(invalidImage.toJSON()).toMatchSnapshot();
    });
});
//# sourceMappingURL=image.test.js.map