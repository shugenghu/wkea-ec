import { getSourceData, getImageResizeUrl } from '../source-builder';
describe('Source Builder', () => {
    describe('getSourceData', () => {
        it('Should return undefined if grid setting viewport does not exist', () => {
            const gridSetting = {
                xs: { w: 0 },
                sm: { w: 5 },
                md: { w: 10 },
                xl: { w: 20 }
            };
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            // @ts-ignore
            const mockImageSetting = {};
            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'lg', 'xl');
            expect(src).toBeUndefined();
        });
        it('Should return undefined if image setting viewport does not exist', () => {
            const gridSetting = {
                xs: { w: 0 },
                sm: { w: 5 },
                md: { w: 10 },
                lg: { w: 15 },
                xl: { w: 20 }
            };
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            // @ts-ignore
            const mockImageSetting = {
                // @ts-ignore
                viewports: {}
            };
            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'lg', 'xl');
            expect(src).toBeUndefined();
        });
        it('Should return the correct source data', () => {
            const gridSetting = {
                xs: { w: 0 },
                sm: { w: 5 },
                md: { w: 10 },
                lg: { w: 15 },
                xl: { w: 20 }
            };
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            // @ts-ignore
            const mockImageSetting = {
                viewports: {
                    xs: {
                        h: 10,
                        w: 2,
                        q: 'h=10&w=2'
                    },
                    sm: {
                        h: 10,
                        w: 6,
                        q: 'h=10&w=6'
                    },
                    md: {
                        h: 10,
                        w: 11,
                        q: 'h=10&w=11'
                    },
                    lg: {
                        h: 10,
                        w: 16,
                        q: 'h=10&w=16'
                    },
                    xl: {
                        h: 10,
                        w: 2,
                        q: 'h=10&w=2'
                    }
                }
            };
            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'lg', 'xl');
            expect(src).toMatchObject({
                media: '(min-width:11px) and (max-width:15px)',
                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=16'
            });
        });
        it('Should return find the correct minimum based on gridsetting', () => {
            const gridSetting = {
                xs: { w: 0 },
                sm: { w: 5 },
                lg: { w: 15 },
                xl: { w: 20 }
            };
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            // @ts-ignore
            const mockImageSetting = {
                viewports: {
                    xs: {
                        h: 10,
                        w: 2,
                        q: 'h=10&w=2'
                    },
                    sm: {
                        h: 10,
                        w: 6,
                        q: 'h=10&w=6'
                    },
                    md: {
                        h: 10,
                        w: 11,
                        q: 'h=10&w=11'
                    },
                    lg: {
                        h: 10,
                        w: 16,
                        q: 'h=10&w=16'
                    },
                    xl: {
                        h: 10,
                        w: 2,
                        q: 'h=10&w=2'
                    }
                }
            };
            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'lg', 'xl');
            expect(src).toMatchObject({
                media: '(min-width:6px) and (max-width:15px)',
                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=16'
            });
        });
        it('Should return find the correct minimum based on imagesettings', () => {
            const gridSetting = {
                xs: { w: 1 },
                sm: { w: 5 },
                md: { w: 10 },
                lg: { w: 15 },
                xl: { w: 20 }
            };
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            // @ts-ignore
            const mockImageSetting = {
                viewports: {
                    xs: {
                        h: 10,
                        w: 2,
                        q: 'h=10&w=2'
                    },
                    md: {
                        h: 10,
                        w: 11,
                        q: 'h=10&w=11'
                    }
                }
            };
            expect(getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'xs', 'xl')).toMatchObject({
                media: '(max-width:1px)',
                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=2'
            });
            expect(getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'md', 'xl')).toMatchObject({
                media: '(min-width:2px) and (max-width:10px)',
                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=11'
            });
        });
        it('Should render min-width only for largest specifiy viewport', () => {
            const gridSetting = {
                xs: { w: 0 },
                sm: { w: 5 },
                md: { w: 10 },
                lg: { w: 15 },
                xl: { w: 20 }
            };
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            // @ts-ignore
            const mockImageSetting = {
                viewports: {
                    xs: {
                        h: 10,
                        w: 2,
                        q: 'h=10&w=2'
                    },
                    md: {
                        h: 10,
                        w: 11,
                        q: 'h=10&w=11'
                    },
                    xl: {
                        h: 10,
                        w: 20,
                        q: 'h=10&w=20'
                    }
                }
            };
            const src = getSourceData(mockImage.src, gridSetting, mockImage, mockImageSetting, 'xl', 'xl');
            expect(src).toMatchObject({
                media: '(min-width:11px)',
                srcSet: 'https://microsoft.com/super-super-gif.jpeg?h=10&w=20'
            });
        });
        it('getImageResizeUrl should build URL correctly from valid viewport', () => {
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            const mockImageSetting = {
                quality: 50,
                lazyload: true,
                viewports: {
                    xs: { w: 800, h: 600, q: 'w=800&h=600&q=80&m=6&f=jpg' },
                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },
                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },
                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },
                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }
                }
            };
            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], mockImageSetting)).toMatch('https://microsoft.com/super-super-gif.jpeg?w=800&h=600&q=80&m=6&f=jpg');
        });
        it('getImageResizeUrl should handle invalid imageSrc ', () => {
            const mockImage = {
                src: ''
            };
            const mockImageSetting = {
                quality: 50,
                lazyload: true,
                viewports: {
                    xs: { w: 800, h: 600, q: 'w=800&h=600&q=80&m=6&f=jpg' },
                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },
                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },
                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },
                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }
                }
            };
            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], mockImageSetting)).toMatch('');
        });
        it('getImageResizeUrl should fallback if no querystring provided in viewport', () => {
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            const mockImageSetting = {
                quality: 50,
                lazyload: true,
                viewports: {
                    xs: { h: 10, w: 2 },
                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },
                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },
                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },
                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }
                }
            };
            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], mockImageSetting)).toMatch('https://microsoft.com/super-super-gif.jpeg?m=6&w=2&h=10&q=50');
        });
        it('getImageResizeUrl should fallback to imageSetting if no viewport configured ', () => {
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            const mockImageSetting = {
                quality: 50,
                lazyload: true,
                viewports: {
                    xs: { w: 800, h: 600, q: 'w=800&h=600&q=80&m=6&f=jpg' }
                }
            };
            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['sm'], mockImageSetting)).toMatch('https://microsoft.com/super-super-gif.jpeg?m=6&q=50');
        });
        it('getImageResizeUrl should build URL correctly based on just height and width of viewport', () => {
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            const mockImageSetting = {
                lazyload: true,
                viewports: {
                    xs: { w: 2, h: 10 },
                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },
                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },
                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },
                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }
                }
            };
            expect(getImageResizeUrl(mockImage.src, undefined, undefined)).toMatch('https://microsoft.com/super-super-gif.jpeg');
            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], mockImageSetting)).toMatch('https://microsoft.com/super-super-gif.jpeg?m=6&w=2&h=10');
        });
        it('getImageResizeUrl should build URL correctly if imageSetting not provided', () => {
            const mockImage = {
                src: 'https://microsoft.com/super-super-gif.jpeg'
            };
            const mockImageSetting = {
                quality: 50,
                lazyload: true,
                viewports: {
                    xs: { w: 800, h: 600, q: 'w=800&h=600&q=80&m=6&f=jpg' },
                    sm: { w: 1200, h: 900, q: 'w=1200&h=900&q=80&m=6&f=jpg' },
                    md: { w: 1600, h: 900, q: 'w=1600&h=900&q=80&m=6&f=jpg' },
                    lg: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' },
                    xl: { w: 1600, h: 700, q: 'w=1600&h=700&q=80&m=6&f=jpg' }
                }
            };
            expect(getImageResizeUrl(mockImage.src, mockImageSetting.viewports['xs'], undefined)).toMatch('https://microsoft.com/super-super-gif.jpeg?w=800&h=600&q=80&m=6&f=jpg');
        });
    });
});
//# sourceMappingURL=source-builder.test.js.map