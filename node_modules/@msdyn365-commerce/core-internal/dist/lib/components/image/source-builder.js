const CROP_FOCAL_REGION = 'cropfocalregion';
export const getLargestGridSettingViewportName = (gridSettings) => {
    return ((gridSettings &&
        ((gridSettings.xl && 'xl') ||
            (gridSettings.lg && 'lg') ||
            (gridSettings.md && 'md') ||
            (gridSettings.sm && 'sm') ||
            (gridSettings.xs && 'xs'))) ||
        'xl');
};
const formatMediaQuery = (max, min) => `${min ? `(min-width:${min}px)${max ? ' and ' : ''}` : ''}${max ? `(max-width:${max}px)` : ''}`;
const getMedia = (gridSettings, imageSettings, viewport, largestGridSettingViewportName) => {
    const gridSetting = gridSettings[viewport];
    const max = gridSetting && gridSetting.w;
    if (!max) {
        return;
    }
    // find first setting smaller than max
    const min = [
        imageSettings.viewports.xl && gridSettings.xl && gridSettings.xl.w,
        imageSettings.viewports.lg && gridSettings.lg && gridSettings.lg.w,
        imageSettings.viewports.md && gridSettings.md && gridSettings.md.w,
        imageSettings.viewports.sm && gridSettings.sm && gridSettings.sm.w,
        imageSettings.viewports.xs && gridSettings.xs && gridSettings.xs.w
    ]
        .filter(Boolean)
        .find(setting => setting && setting < max);
    return formatMediaQuery(viewport !== largestGridSettingViewportName ? max : undefined, min ? min + 1 : min);
};
export const getImageResizeUrl = (imageSrc, vpSetting, inputImageSettings) => {
    if (!imageSrc) {
        return imageSrc;
    }
    if (imageSrc.startsWith('svg.')) {
        return imageSrc;
    }
    try {
        const srcUrl = new URL(imageSrc);
        let queryString;
        if (vpSetting && vpSetting.q) {
            queryString = vpSetting.q;
        }
        else {
            queryString = 'm=6';
            if (vpSetting && vpSetting.w && vpSetting.h) {
                queryString = `${queryString}&w=${vpSetting.w}&h=${vpSetting.h}`;
            }
            if (inputImageSettings && inputImageSettings.quality) {
                queryString = `${queryString}&q=${inputImageSettings.quality}`;
            }
        }
        if (inputImageSettings && inputImageSettings.cropFocalRegion) {
            queryString = `${queryString}&${CROP_FOCAL_REGION}=true`;
        }
        if (srcUrl.search) {
            srcUrl.search += `&${queryString}`;
        }
        else {
            srcUrl.search += queryString;
        }
        return srcUrl.href;
    }
    catch (e) {
        return imageSrc;
    }
};
export const getSourceData = (src, gridSetting, image, imageSettings, viewport, largestGridSettingViewportName) => {
    if (!image || !src || !imageSettings || !imageSettings.viewports || !imageSettings.viewports[viewport]) {
        return;
    }
    const media = getMedia(gridSetting, imageSettings, viewport, largestGridSettingViewportName);
    if (!media) {
        return;
    }
    const srcSet = getImageResizeUrl(src, imageSettings.viewports[viewport], imageSettings);
    if (!srcSet) {
        return;
    }
    return {
        media,
        srcSet
    };
};
//# sourceMappingURL=source-builder.js.map