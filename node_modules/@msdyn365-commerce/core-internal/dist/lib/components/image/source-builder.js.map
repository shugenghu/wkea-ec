{"version":3,"file":"source-builder.js","sourceRoot":"","sources":["../../../../src/components/image/source-builder.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { IGridSettings } from '../../contract/IGridSettings';\nimport { IImageData } from '../../interfaces/data-types/IImageData';\nimport { IImageDimension, IImageSettings } from '../../interfaces/data-types/IImageSettings';\nimport { Viewport } from './IImage';\n\nconst CROP_FOCAL_REGION = 'cropfocalregion';\n\nexport const getLargestGridSettingViewportName = (gridSettings: IGridSettings): Viewport => {\n    return (\n        (gridSettings &&\n            ((gridSettings.xl && 'xl') ||\n                (gridSettings.lg && 'lg') ||\n                (gridSettings.md && 'md') ||\n                (gridSettings.sm && 'sm') ||\n                (gridSettings.xs && 'xs'))) ||\n        'xl'\n    );\n};\n\nconst formatMediaQuery = (max?: number, min?: number) =>\n    `${min ? `(min-width:${min}px)${max ? ' and ' : ''}` : ''}${max ? `(max-width:${max}px)` : ''}`;\n\nconst getMedia = (\n    gridSettings: IGridSettings,\n    imageSettings: IImageSettings,\n    viewport: Viewport,\n    largestGridSettingViewportName: Viewport\n) => {\n    const gridSetting = gridSettings[viewport];\n    const max: number | undefined = gridSetting && gridSetting.w;\n    if (!max) {\n        return;\n    }\n    // find first setting smaller than max\n    const min = [\n        imageSettings.viewports.xl && gridSettings.xl && gridSettings.xl.w,\n        imageSettings.viewports.lg && gridSettings.lg && gridSettings.lg.w,\n        imageSettings.viewports.md && gridSettings.md && gridSettings.md.w,\n        imageSettings.viewports.sm && gridSettings.sm && gridSettings.sm.w,\n        imageSettings.viewports.xs && gridSettings.xs && gridSettings.xs.w\n    ]\n        .filter(Boolean)\n        .find(setting => setting && setting < max);\n    return formatMediaQuery(viewport !== largestGridSettingViewportName ? max : undefined, min ? min + 1 : min);\n};\n\nexport const getImageResizeUrl = (\n    imageSrc: string,\n    vpSetting: IImageDimension | undefined,\n    inputImageSettings?: IImageSettings | undefined\n): string => {\n    if (!imageSrc) {\n        return imageSrc;\n    }\n    if (imageSrc.startsWith('svg.')) {\n        return imageSrc;\n    }\n\n    try {\n        const srcUrl = new URL(imageSrc);\n        let queryString;\n        if (vpSetting && vpSetting.q) {\n            queryString = vpSetting.q;\n        } else {\n            queryString = 'm=6';\n            if (vpSetting && vpSetting.w && vpSetting.h) {\n                queryString = `${queryString}&w=${vpSetting.w}&h=${vpSetting.h}`;\n            }\n\n            if (inputImageSettings && inputImageSettings.quality) {\n                queryString = `${queryString}&q=${inputImageSettings.quality}`;\n            }\n        }\n\n        if (inputImageSettings && inputImageSettings.cropFocalRegion) {\n            queryString = `${queryString}&${CROP_FOCAL_REGION}=true`;\n        }\n\n        if (srcUrl.search) {\n            srcUrl.search += `&${queryString}`;\n        } else {\n            srcUrl.search += queryString;\n        }\n\n        return srcUrl.href;\n    } catch (e) {\n        return imageSrc;\n    }\n};\n\nexport const getSourceData = (\n    src: string,\n    gridSetting: IGridSettings,\n    image: IImageData,\n    imageSettings: IImageSettings,\n    viewport: Viewport,\n    largestGridSettingViewportName: Viewport\n) => {\n    if (!image || !src || !imageSettings || !imageSettings.viewports || !imageSettings.viewports[viewport]) {\n        return;\n    }\n\n    const media = getMedia(gridSetting, imageSettings, viewport, largestGridSettingViewportName);\n    if (!media) {\n        return;\n    }\n\n    const srcSet = getImageResizeUrl(src, imageSettings.viewports[viewport], imageSettings);\n    if (!srcSet) {\n        return;\n    }\n    return {\n        media,\n        srcSet\n    };\n};\n"]}