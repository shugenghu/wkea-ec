{"version":3,"file":"http-service.js","sourceRoot":"","sources":["../../../src/utilities/http-service.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport {\n    EVENT_HTTP_SERVICE_START,\n    EVENT_HTTP_SERVICE_STOP,\n    IEventHttpServiceStopProperties,\n    InternalTelemetry,\n    StaticTelemetry\n} from '@msdyn365-commerce/telemetry-internal';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport { HTTPMethod, IHTTPError, IHTTPRequestOptions, IHTTPResponse, IODataResponse } from '../interfaces';\nimport msdyn365Commerce from '../msdyn365-commerce';\n\n// Default timeout is 10 seconds\nconst defaultTimeout = 10000;\n\n/**\n * Sets retail server specific headers needed for auth\n * @param requestConfig The current configuration settings of the request\n * @param apiSettings The retail server API configuration settings\n */\nconst setRetailServerRequestHeaders = (requestConfig: AxiosRequestConfig) => {\n    if (!requestConfig.headers) {\n        requestConfig.headers = {};\n    }\n\n    requestConfig.headers['from-keystone'] = 'true';\n    requestConfig.headers.oun = requestConfig.headers.oun || msdyn365Commerce.apiSettings.oun || '';\n    requestConfig.headers.Accept = requestConfig.headers.Accept || 'application/json;odata=nometadata';\n    requestConfig.headers.ContentType = requestConfig.headers.ContentType || 'application/json;odata=verbose';\n\n    return requestConfig;\n};\n\n/**\n * Parses an OData Response and returns just the return type of the call without the extra OData Metadata\n */\nconst parseODataResponse = <T>(response?: IODataResponse<T>): T => {\n    if (response && response.value && response['@odata.context']) {\n        return response.value;\n    } else {\n        return <T>(<unknown>response);\n    }\n};\n\n/**\n * Creates a basic Axios Request Config that is shared across commerce and standard HTTP calls\n * @param requestUrl The url of the request\n * @param httpMethod The HTTP method of the request\n * @param body The body content of the request\n * @param options The options associated with the request\n */\nconst createDefaultRequest = (\n    requestUrl: string,\n    httpMethod?: HTTPMethod,\n    body?: unknown,\n    options?: IHTTPRequestOptions\n): AxiosRequestConfig => {\n    return {\n        method: httpMethod || 'get',\n        url: requestUrl,\n        data: body,\n        timeout: options ? options.timeout || defaultTimeout : defaultTimeout,\n        headers: options ? options.headers || {} : {}\n    };\n};\n\n/**\n * Send an retail server request\n * @param requestUrl The url of the request\n * @param httpMethod The HTTP method of the request\n * @param body The body content of the request\n * @param options The options associated with the request\n */\nexport const sendCommerceRequest = async <T>(\n    requestUrl: string,\n    httpMethod?: HTTPMethod,\n    body?: unknown,\n    options?: IHTTPRequestOptions\n): Promise<IHTTPResponse<T>> => {\n    let request = createDefaultRequest(requestUrl, httpMethod, body, options);\n    const requestId = InternalTelemetry.generateGuid();\n\n    // Add pre-call telemetry here\n    StaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_START, { id: requestId });\n\n    // Add the retail server request headers\n    // Ideally these will be pulled via our zone implementation so they can be completely hidden from the end user\n    request = setRetailServerRequestHeaders(request);\n\n    // Send the request\n    return axios\n        .request(request)\n        .then((response: IHTTPResponse<IODataResponse<T>>) => {\n            // Add any post-call telemetry here\n            StaticTelemetry.trackEvent<IEventHttpServiceStopProperties, {}>(EVENT_HTTP_SERVICE_STOP, {\n                statusCode: `${response.status}`,\n                success: 'true',\n                id: requestId\n            });\n\n            // Parse OData and return response\n            return {\n                ...response,\n                data: parseODataResponse(response.data)\n            };\n        })\n        .catch((error: IHTTPError) => {\n            // Add error handling telemetry and response here\n            StaticTelemetry.trackEvent<IEventHttpServiceStopProperties, {}>(EVENT_HTTP_SERVICE_STOP, {\n                statusCode: `${error.code}`,\n                success: 'false',\n                id: requestId\n            });\n\n            // Return either passed error response or empty response to user\n            return error.response || <IHTTPResponse>{};\n        });\n};\n\n/**\n * Send an external HTTP request\n * @param requestUrl The url of the request\n * @param httpMethod The HTTP method of the request\n * @param body The body content of the request\n * @param options The options associated with the request\n */\nexport const sendRequest = async <T>(\n    requestUrl: string,\n    httpMethod?: HTTPMethod,\n    body?: unknown,\n    options?: IHTTPRequestOptions\n): Promise<IHTTPResponse<T>> => {\n    const request = createDefaultRequest(requestUrl, httpMethod, body, options);\n    const requestId = InternalTelemetry.generateGuid();\n\n    // Add pre-call telemetry here\n    StaticTelemetry.trackEvent(EVENT_HTTP_SERVICE_START, { id: requestId });\n\n    // Send the request\n    return axios\n        .request(request)\n        .then((response: IHTTPResponse<T>) => {\n            // Add any post-call telemetry here\n            StaticTelemetry.trackEvent<IEventHttpServiceStopProperties, {}>(EVENT_HTTP_SERVICE_STOP, {\n                statusCode: `${response.status}`,\n                success: 'true',\n                id: requestId\n            });\n\n            // Return response\n            return response;\n        })\n        .catch((error: IHTTPError) => {\n            StaticTelemetry.trackEvent<IEventHttpServiceStopProperties, {}>(EVENT_HTTP_SERVICE_STOP, {\n                statusCode: `${error.code}`,\n                success: 'false',\n                id: requestId\n            });\n\n            // Return either passed error response or empty response to user\n            return error.response || <IHTTPResponse>{};\n        });\n};\n"]}