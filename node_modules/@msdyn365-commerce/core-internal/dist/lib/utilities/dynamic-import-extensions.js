/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { fixChunkName, getDefaultOrResult } from './internal/dynamic-import-extensions-helpers';
/**
 * Method tries to load the module synchronously if it is available or will return undefined
 * if module cannot be loaded synchronously.
 *
 * @param webpackResolvePath The path where webpack will try to load the module from
 */
const requireModuleSync = (webpackResolvePath) => {
    let result;
    try {
        result = __webpack_require__(webpackResolvePath);
        /**
         * The above is analagous to the following but more succinct.
         *
         * let requiredModule = __webpack_require__(loadedModWebpackyName);
         * if (requiredModule) {
         *    result = requiredModule;
         * }
         *
         */
    }
    catch (e) {
        // intentionally blank, module was not able to be loaded synchronously
    }
    return result;
};
export const dynamicImport = (args) => {
    if (!args) {
        throw new Error(`args cannot be null or undefined`);
    }
    let result;
    const univeralImport = args.universalImport();
    const actualResolvedPath = univeralImport.resolve();
    let loadedMod;
    // try to load module synchronously
    loadedMod = requireModuleSync(actualResolvedPath);
    const loadedSync = !!loadedMod;
    if (!loadedSync) {
        loadedMod = univeralImport.load();
    }
    // This is how to check if object is a promise per spec http://www.ecma-international.org/ecma-262/6.0/#sec-promise.resolve
    const isPromise = Promise.resolve(loadedMod) === loadedMod;
    result = {
        isPromise,
        isSuccess: loadedMod !== undefined,
        result: loadedMod,
        // TODO: handle promise case in promise resolve for custom module async loading
        defaultExport: !isPromise ? getDefaultOrResult(loadedMod) : null,
        chunkName: fixChunkName(univeralImport),
        __isDynamicResult: true
    };
    return result;
};
//# sourceMappingURL=dynamic-import-extensions.js.map