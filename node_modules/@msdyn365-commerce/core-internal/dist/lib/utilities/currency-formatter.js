/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { EXCEPTION_CURRENCY_FORMATTER, LogLevel, NAME_CURRENCY_FORMATTER_EXCEPTION, StaticTelemetry } from '@msdyn365-commerce/telemetry-internal';
// If there's not a match with specific currency~culture~market,
// then fall back to formats based only on currency.
const currencyFallbackFormats = {
    usd: ['$', ',', '.', '2', ''],
    chf: ['CHF ', '\'', '.', '2', ''],
    nzd: ['$', ',', '.', '2', ''],
    sar: ['‪ر.س.‏‎', ',', '.', '2', '‬'],
    egp: ['‪ج.م.‏‎', ',', '.', '3', '‬'],
    thb: ['฿', ',', '.', '2', ''],
    sgd: ['SG$', ',', '.', '2', ''],
    hkd: ['HK$', ',', '.', '2', ''],
    inr: ['₹ ', ',', '.', '2', '']
};
// Used to change currency code to some other characters.
// For example, instead of displaying AUD$ we want to display AU$.
const currencyCodeMap = {
    aud: 'AU',
    nzd: 'NZ',
    twd: 'TW'
};
// all keys lowercase.
// the top 218 currency~culture~market combos ordered by popularity
// array values are: beforePrice, thousandSeparator, separator, precision, afterPrice
// warning: some string values include hidden characters necessary for right-to-left text
// note: in the list below, there are 50 thousandSeparators that are non-breaking spaces
//       which is not a normal space. Be careful if hand-editing.
// A server-side tool for creating these formats is available in the WebBlends solution.
// tslint:disable:max-func-body-length
// tslint:disable:no-irregular-whitespace
const getFormats = () => {
    return {
        'usd~en-us~us': ['$', ',', '.', '2', ''],
        'eur~de-de~de': ['', '.', ',', '2', ' €'],
        'gbp~en-gb~gb': ['£', ',', '.', '2', ''],
        'brl~pt-br~br': ['R$', '.', ',', '2', ''],
        'eur~fr-fr~fr': ['', ' ', ',', '2', ' €'],
        'eur~it-it~it': ['', '.', ',', '2', ' €'],
        'mxn~es-mx~mx': ['MXN$', ',', '.', '2', ''],
        'jpy~ja~jp': ['¥', ',', '', '0', ''],
        'rub~ru~ru': ['', ' ', ',', '2', ' ₽'],
        'aud~en-au~au': ['$', ',', '.', '2', ''],
        'cad~en-ca~ca': ['$', ',', '.', '2', ''],
        'eur~es-es~es': ['', '.', ',', '2', ' €'],
        'cny~zh-hans-cn~cn': ['¥', ',', '.', '2', ''],
        'eur~nl-nl~nl': ['€ ', '.', ',', '2', ''],
        'pln~pl~pl': ['', ' ', ',', '2', ' zł'],
        'chf~de-ch~ch': ['CHF ', '\'', '.', '2', ''],
        'try~tr~tr': ['', '.', ',', '2', ' ₺'],
        'ars~es-ar~ar': ['$ ', '.', ',', '2', ''],
        'cad~en-us~ca': ['$', ',', '.', '2', ''],
        'cny~zh-cn~cn': ['¥', ',', '.', '2', ''],
        'vnd~vi~vn': ['', '.', ',', '2', ' ₫'],
        'czk~cs~cz': ['', ' ', ',', '2', ' Kč'],
        'inr~en-in~in': ['₹ ', ',', '.', '2', ''],
        'cad~fr-ca~ca': ['', ' ', ',', '2', ' $'],
        'sek~sv-se~se': ['', '.', ',', '2', ' kr'],
        'dkk~da~dk': ['', '.', ',', '2', ' kr.'],
        'eur~pt-pt~pt': ['', ' ', ',', '2', ' €'],
        'gbp~en-us~gb': ['£', ',', '.', '2', ''],
        'eur~de-at~at': ['€ ', '.', ',', '2', ''],
        'krw~ko~kr': ['₩', ',', '', '0', ''],
        'eur~nl-be~be': ['', '.', ',', '2', ' €'],
        'nok~nb~no': ['kr ', ' ', ',', '2', ''],
        'mxn~es-es~mx': ['MXN$', ',', '.', '2', ''],
        'huf~hu~hu': ['', ' ', ',', '2', ' HUF'],
        'aud~en-us~au': ['$', ',', '.', '2', ''],
        'eur~fr-be~be': ['', '.', ',', '2', ' €'],
        'eur~fi~fi': ['', ' ', ',', '2', ' €'],
        'cop~es-co~co': ['$', '.', '', '0', ''],
        'clp~es-cl~cl': ['$', '.', '', '0', ''],
        'nzd~en-nz~nz': ['$', ',', '.', '2', ''],
        'chf~fr-ch~ch': ['CHF ', ' ', '.', '2', ''],
        'twd~zh-hant-tw~tw': ['NT$', ',', '.', '2', ''],
        'ars~es-es~ar': ['$ ', '.', ',', '2', ''],
        'usd~en-gb~us': ['$', ',', '.', '2', ''],
        'pen~es-pe~pe': ['S/.', ',', '.', '2', ''],
        'idr~id~id': ['Rp', '.', '', '0', ''],
        'eur~en-ie~ie': ['€', ',', '.', '2', ''],
        'eur~el~gr': ['', '.', ',', '2', ' €'],
        'eur~de-de~at': ['€ ', '.', ',', '2', ''],
        'inr~en-us~in': ['₹ ', ',', '.', '2', ''],
        'idr~en-us~id': ['Rp', '.', '', '0', ''],
        'eur~sk~sk': ['', ' ', ',', '2', ' €'],
        'zar~en-za~za': ['R', ' ', ',', '2', ''],
        'vnd~en-us~vn': ['₫', ',', '.', '2', ''],
        'php~en-ph~ph': ['₱', ',', '.', '2', ''],
        'ils~he~il': ['‪₪‎', ',', '.', '2', '‬'],
        'sar~ar-sa~sa': ['‪ر.س.‏‎', ',', '.', '2', '‬'],
        'ron~ro-ro~ro': ['', '.', ',', '2', ' RON'],
        'usd~en-ca~us': ['$', ',', '.', '2', ''],
        'uah~ru~ua': ['', ' ', ',', '2', ' ₴'],
        'hkd~zh-hant-hk~hk': ['HK$', ',', '.', '2', ''],
        'usd~es-ec~ec': ['$', '.', ',', '2', ''],
        'thb~th~th': ['฿', ',', '.', '2', ''],
        'sgd~en-sg~sg': ['SG$', ',', '.', '2', ''],
        'mxn~en-us~mx': ['MXN$', ',', '.', '2', ''],
        'uah~es-es~ua': ['', ' ', ',', '2', ' ₴'],
        'rub~en-us~ru': ['', ' ', ',', '2', ' ₽'],
        'usd~pt-br~us': ['', '.', ',', '2', ' $'],
        'chf~de-de~ch': ['CHF ', '\'', '.', '2', ''],
        'usd~en-in~us': ['$', ',', '.', '2', ''],
        'crc~es-cr~cr': ['₡', '.', '', '0', ''],
        'eur~es-mx~es': ['', '.', ',', '2', ' €'],
        'cny~en-us~cn': ['¥', ',', '.', '2', ''],
        'hrk~hr-hr~hr': ['', '.', ',', '2', ' kn'],
        'usd~ru~us': ['', '.', ',', '2', ' $'],
        'cad~fr-fr~ca': ['', ' ', ',', '2', ' $'],
        'brl~en-us~br': ['R$', '.', ',', '2', ''],
        'egp~ar-eg~eg': ['‪ج.م.‏‎', ',', '.', '3', '‬'],
        'eur~en-us~nl': ['€ ', '.', ',', '2', ''],
        'eur~en-us~de': ['', '.', ',', '2', ' €'],
        'eur~sl~si': ['', '.', ',', '2', ' €'],
        'eur~de-at~de': ['', '.', ',', '2', ' €'],
        'nzd~en-us~nz': ['$', ',', '.', '2', ''],
        'twd~zh-tw~tw': ['NT$', ',', '.', '2', ''],
        'usd~zh-cn~us': ['', '.', ',', '2', ' $'],
        'aud~en-gb~au': ['$', ',', '.', '2', ''],
        'usd~es-us~us': ['$', ',', '.', '2', ''],
        'cop~es-es~co': ['$', '.', '', '0', ''],
        'myr~en-my~my': ['RM', ',', '.', '2', ''],
        'eur~fr-fr~be': ['', '.', ',', '2', ' €'],
        'uah~en-us~ua': ['', ' ', ',', '2', ' ₴'],
        'eur~nl-nl~be': ['', '.', ',', '2', ' €'],
        'idr~en-id~id': ['Rp', '.', '', '0', ''],
        'gbp~pl~gb': ['£', ',', '.', '2', ''],
        'usd~en-us~ae': ['$', ',', '.', '2', ''],
        'usd~es-mx~us': ['', '.', ',', '2', ' $'],
        'eur~en-us~gr': ['', '.', ',', '2', ' €'],
        'uah~ko~ua': ['', ' ', ',', '2', ' ₴'],
        'uah~uk~ua': ['', ' ', ',', '2', ' ₴'],
        'usd~ko~us': ['', '.', ',', '2', ' $'],
        'bgn~bg~bg': ['', ' ', ',', '2', ' лв.'],
        'zar~en-us~za': ['R', ' ', ',', '2', ''],
        'inr~en-gb~in': ['₹ ', ',', '.', '2', ''],
        'usd~es-ve~ve': ['$', ',', '.', '2', ''],
        'ils~en-us~il': ['₪', ',', '.', '2', ''],
        'clp~es-es~cl': ['$', '.', '', '0', ''],
        'eur~en-my~de': ['', '.', ',', '2', ' €'],
        'nok~nb-no~no': ['kr ', ' ', ',', '2', ''],
        'ron~en-us~ro': ['', '.', ',', '2', ' RON'],
        'usd~vi~us': ['', '.', ',', '2', ' $'],
        'usd~de-de~us': ['', '.', ',', '2', ' $'],
        'php~en-us~ph': ['₱', ',', '.', '2', ''],
        'rsd~sr-latn-rs~rs': ['', '.', '', '0', ' RSD'],
        'eur~fi-fi~fi': ['', ' ', ',', '2', ' €'],
        'usd~en-au~us': ['$', ',', '.', '2', ''],
        'usd~es-es~ve': ['$', ',', '.', '2', ''],
        'eur~en-gb~de': ['', '.', ',', '2', ' €'],
        'eur~en-us~fr': ['', ' ', ',', '2', ' €'],
        'usd~es-es~us': ['', '.', ',', '2', ' $'],
        'eur~et~ee': ['', ' ', ',', '2', ' €'],
        'jpy~en-us~jp': ['¥', ',', '', '0', ''],
        'eur~lt~lt': ['', ' ', ',', '2', ' €'],
        'pen~es-es~pe': ['S/.', ',', '.', '2', ''],
        'pkr~en-us~pk': ['Rs', ',', '', '0', ''],
        'usd~ar-sa~us': ['', '.', ',', '2', ' $'],
        'usd~es-gt~gt': ['$', ',', '.', '2', ''],
        'jpy~ja-jp~jp': ['¥', ',', '', '0', ''],
        'sek~en-us~se': ['', ' ', ',', '2', ' kr'],
        'eur~en-us~it': ['', '.', ',', '2', ' €'],
        'eur~en-us~ie': ['€', ',', '.', '2', ''],
        'usd~ru~by': ['$', ',', '.', '2', ''],
        'usd~es-uy~uy': ['$', ',', '.', '2', ''],
        'usd~es-es~ec': ['$', '.', ',', '2', ''],
        'eur~de-ch~de': ['', '.', ',', '2', ' €'],
        'vnd~pt-br~vn': ['₫', ',', '.', '2', ''],
        'chf~en-us~ch': ['CHF ', '.', ',', '2', ''],
        'usd~fa~us': ['', '.', ',', '2', ' $'],
        'chf~it-ch~ch': ['CHF ', '\'', '.', '2', ''],
        'jod~ar-jo~jo': ['‪د.ا.‏‎', ',', '.', '3', '‬'],
        'usd~es-do~do': ['$', ',', '.', '2', ''],
        'uah~ru-ua~ua': ['', ' ', ',', '2', ' ₴'],
        'usd~ar-kw~us': ['', '.', ',', '2', ' $'],
        'eur~en-us~be': ['', '.', ',', '2', ' €'],
        'jpy~zh-hans-cn~jp': ['¥', ',', '', '0', ''],
        'myr~en-us~my': ['RM', ',', '.', '2', ''],
        'dkk~da-dk~dk': ['', '.', ',', '2', ' kr.'],
        'iqd~ar-iq~iq': ['‪د.ع.‏‎', ',', '.', '2', '‬'],
        'nok~en-us~no': ['kr ', ' ', ',', '2', ''],
        'usd~ja~us': ['', '.', ',', '2', ' $'],
        'eur~en-gb~ie': ['€', ',', '.', '2', ''],
        'gbp~en-in~gb': ['£', ',', '.', '2', ''],
        'eur~en-gb~nl': ['€ ', '.', ',', '2', ''],
        'dkk~en-us~dk': ['', '.', ',', '2', ' kr.'],
        'kwd~en-us~kw': ['‪د.ك.‏‎', ',', '.', '3', '‬'],
        'rsd~en-us~rs': ['', '.', ',', '2', ' дин.'],
        'usd~id~us': ['', '.', ',', '2', ' $'],
        'dzd~fr-fr~dz': ['', ' ', ',', '2', ' DA'],
        'eur~en-us~es': ['', '.', ',', '2', ' €'],
        'kzt~ru~kz': ['', ' ', ',', '2', ' ₸'],
        'bdt~en-us~bd': ['', ',', '.', '2', '৳'],
        'chf~fr-fr~ch': ['CHF ', ' ', '.', '2', ''],
        'iqd~en-us~iq': ['‪د.ع.‏‎', ',', '.', '2', '‬'],
        'eur~en-gb~fr': ['', ' ', ',', '2', ' €'],
        'bgn~en-us~bg': ['', ' ', ',', '2', ' лв.'],
        'eur~es-co~es': ['', '.', ',', '2', ' €'],
        'pln~en-us~pl': ['', ' ', ',', '2', ' zł'],
        'usd~en-id~us': ['$', ',', '.', '2', ''],
        'ars~es-419~ar': ['$ ', '.', ',', '2', ''],
        'huf~it-it~hu': ['', ' ', ',', '2', ' HUF'],
        'usd~es-sv~sv': ['$', ',', '.', '2', ''],
        'mad~fr-fr~ma': ['', '.', ',', '2', ' DH'],
        'rub~zh-cn~ru': ['', ' ', ',', '2', ' ₽'],
        'ttd~en-tt~tt': ['$', ',', '.', '2', ''],
        'eur~en-us~lt': ['', ' ', ',', '2', ' €'],
        'usd~en-ph~us': ['$', ',', '.', '2', ''],
        'usd~sv-se~us': ['', '.', ',', '2', ' $'],
        'zar~en-gb~za': ['R', ' ', ',', '2', ''],
        'eur~en-gb~es': ['', '.', ',', '2', ' €'],
        'usd~nl-nl~us': ['', '.', ',', '2', ' $'],
        'eur~nl-be~nl': ['€ ', '.', ',', '2', ''],
        'hrk~en-us~hr': ['', '.', ',', '2', ' kn'],
        'nzd~en-au~nz': ['$', ',', '.', '2', ''],
        'usd~es-es~uy': ['$', ',', '.', '2', ''],
        'usd~ru-by~by': ['$', ',', '.', '2', ''],
        'usd~en-us~ke': ['$', ',', '.', '2', ''],
        'usd~es-ec~us': ['', '.', ',', '2', ' $'],
        'eur~en-gb~pt': ['', ' ', ',', '2', ' €'],
        'pkr~en-gb~pk': ['Rs', ',', '', '0', ''],
        'pkr~en-pk~pk': ['Rs', ',', '', '0', ''],
        'rub~ru-ru~ru': ['', ' ', ',', '2', ' ₽'],
        'twd~en-us~tw': ['NT$', ',', '.', '2', ''],
        'usd~zh-hans-cn~us': ['', '.', ',', '2', ' $'],
        'czk~en-us~cz': ['', ' ', ',', '2', ' Kč'],
        'eur~en-gb~it': ['', '.', ',', '2', ' €'],
        'eur~en-us~pt': ['', ' ', ',', '2', ' €'],
        'sek~en-gb~se': ['', ' ', ',', '2', ' kr'],
        'usd~en-gb~ae': ['$', ',', '.', '2', ''],
        'usd~en-us~lk': ['$', ',', '.', '2', ''],
        'usd~es-pa~pa': ['$', ',', '.', '2', ''],
        'eur~fr-ch~fr': ['', ' ', ',', '2', ' €'],
        'usd~en-gb~ng': ['$', ',', '.', '2', ''],
        'eur~en-gb~be': ['', '.', ',', '2', ' €'],
        'eur~en-us~fi': ['', ' ', ',', '2', ' €'],
        'eur~ru~de': ['', '.', ',', '2', ' €'],
        'jod~en-us~jo': ['‪د.ا.‏‎', ',', '.', '3', '‬'],
        'pln~en-gb~pl': ['', ' ', ',', '2', ' zł'],
        'pln~pl-pl~pl': ['', ' ', ',', '2', ' zł'],
        'usd~fr-fr~re': ['$', ',', '.', '2', '']
    };
};
/**
 * Returns the currency formatting details for a given currency code, language and market
 */
const getFormat = (currencyCode, language, market) => {
    currencyCode = currencyCode.toLowerCase();
    language = language.toLowerCase();
    market = market.toLowerCase();
    const key = `${currencyCode}~${language}~${market}`;
    let formatArray = null;
    const formats = getFormats();
    if (formats.hasOwnProperty(key)) {
        formatArray = formats[key];
    }
    if (formatArray === null && currencyFallbackFormats.hasOwnProperty(currencyCode)) {
        formatArray = currencyFallbackFormats[currencyCode];
    }
    if (formatArray === null) {
        return undefined;
    }
    if (market !== 'us' && market !== 'cl') {
        if (currencyCodeMap.hasOwnProperty(currencyCode)) {
            currencyCode = currencyCodeMap[currencyCode];
        }
        if (currencyCode === 'usd' && formatArray[0] === '$') {
            // non US market using USD. Prefix with USD.
            formatArray[0] = 'USD$';
        }
        else if (currencyCode === 'usd' && formatArray[4] === ' $') {
            // non US market using USD. Suffix with USD.
            formatArray[4] = ' $USD';
        }
        else if (formatArray[0].startsWith('$')) {
            // non USD currency outside US using $ symbol. Prefix with currency code.
            const includeSpace = currencyCode === 'cad';
            formatArray[0] = currencyCode.toUpperCase() + (includeSpace ? ' ' : '') + formatArray[0];
        }
        else if (formatArray[4] === ' $') {
            // non USD currency outside US using $ symbol. Suffix with currency code.
            formatArray[4] = ` $${currencyCode.toUpperCase()}`;
        }
    }
    return {
        beforePrice: formatArray[0],
        thousandSeparator: formatArray[1],
        separator: formatArray[2],
        precision: formatArray[3],
        afterPrice: formatArray[4]
    };
};
/**
 * Returns the locale formatted version of some currency ammount
 *
 * @param price The price
 * @param currencyCode The 3 letter currency code
 * @param language the BCP-47 language tag
 * @param market The ALPHA-2 code representing the country/region this price will be served in.
 */
export default function formatCurrency(price, currencyCode, language, market) {
    let result;
    try {
        const numberPrice = Number(price);
        if (isNaN(numberPrice)) {
            throw new Error(`Invalid price passed to format currency: ${price}`);
        }
        const formatObject = getFormat(currencyCode, language, market);
        if (formatObject) {
            price = numberPrice.toFixed(Number(formatObject.precision));
            price = price.replace('.', formatObject.separator);
            price = price.replace(/\B(?=(\d{3})+(?!\d))/g, formatObject.thousandSeparator);
            result = formatObject.beforePrice + price + formatObject.afterPrice;
        }
        else {
            // If unable to determine the propery currency format return undefined
            return undefined;
        }
    }
    catch (ex) {
        // TODO: can we use currency code, language, market here?
        StaticTelemetry.log(LogLevel.Error, NAME_CURRENCY_FORMATTER_EXCEPTION, { exception: ex });
        throw new Error(EXCEPTION_CURRENCY_FORMATTER);
    }
    return result;
}
//# sourceMappingURL=currency-formatter.js.map