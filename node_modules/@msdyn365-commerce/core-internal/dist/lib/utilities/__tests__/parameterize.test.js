import 'jest';
import { parameterize } from '../parameterize';
describe('parameterize', () => {
    it('Should remove special characters', () => {
        const invalidString = '<>*%&:?';
        const parameterizeFeatureFlags = {
            enableUrlEncoding: true,
            enableUrlLocalization: true
        };
        expect(parameterize(invalidString)).toBe('');
        expect(parameterize(invalidString, undefined, parameterizeFeatureFlags)).toBe('%3C%3E-%25-%3A%3F');
    });
    it('Should encode foreigner characters', () => {
        const invalidString = 'ستكشاف فابريكام';
        const parameterizeFeatureFlags = {
            enableUrlEncoding: true,
            enableUrlLocalization: true
        };
        expect(parameterize(invalidString, undefined, parameterizeFeatureFlags)).toBe('%D8%B3%D8%AA%D9%83%D8%B4%D8%A7%D9%81-%D9%81%D8%A7%D8%A8%D8%B1%D9%8A%D9%83%D8%A7%D9%85');
    });
    it('Should replace whitespace', () => {
        expect(parameterize('hello world')).toBe('hello-world');
    });
    it('Should replace whitespace at the beginning and end of a string', () => {
        expect(parameterize(' at the beginning')).toBe('at-the-beginning');
        expect(parameterize('at the end ')).toBe('at-the-end');
        expect(parameterize('front and back')).toBe('front-and-back');
    });
    it('should only assign one seperator for multiple whitespace', () => {
        expect(parameterize('hello  world')).toBe('hello-world');
    });
    it('Should replace special characters with a single seperator', () => {
        expect(parameterize('hello&world')).toBe('hello-world');
    });
    it('Should replace special characters with a single seperator when surrounded by whitespace', () => {
        expect(parameterize('hello & world')).toBe('hello-world');
    });
    it('Should replace special characters with a single seperator when there are multiple special characters', () => {
        expect(parameterize('hello&*&world')).toBe('hello-world');
    });
    it('Should not assign a separator for a trailing invalid character', () => {
        expect(parameterize('boop&')).toBe('boop');
        expect(parameterize('boop !')).toBe('boop');
    });
    it('Should not assign a separator for a leading invalid character', () => {
        expect(parameterize('&boop')).toBe('boop');
        expect(parameterize('! boop')).toBe('boop');
    });
    it('Should preserve underscore', () => {
        expect(parameterize('hello_world')).toBe('hello_world');
    });
    it('Should convert a string to lower case', () => {
        expect(parameterize('Hello World')).toBe('hello-world');
    });
});
//# sourceMappingURL=parameterize.test.js.map