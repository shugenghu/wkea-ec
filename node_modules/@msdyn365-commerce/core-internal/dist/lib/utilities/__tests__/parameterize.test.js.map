{"version":3,"file":"parameterize.test.js","sourceRoot":"","sources":["../../../../src/utilities/__tests__/parameterize.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\nimport { parameterize, IParameterizeFeatureFlags } from '../parameterize';\n\ndescribe('parameterize', () => {\n    it('Should remove special characters', () => {\n        const invalidString = '<>*%&:?';\n        const parameterizeFeatureFlags: IParameterizeFeatureFlags = {\n            enableUrlEncoding: true,\n            enableUrlLocalization: true\n        };\n        expect(parameterize(invalidString)).toBe('');\n        expect(parameterize(invalidString, undefined, parameterizeFeatureFlags)).toBe('%3C%3E-%25-%3A%3F');\n    });\n    it('Should encode foreigner characters', () => {\n        const invalidString = 'ستكشاف فابريكام';\n        const parameterizeFeatureFlags: IParameterizeFeatureFlags = {\n            enableUrlEncoding: true,\n            enableUrlLocalization: true\n        };\n        expect(parameterize(invalidString, undefined, parameterizeFeatureFlags)).toBe(\n            '%D8%B3%D8%AA%D9%83%D8%B4%D8%A7%D9%81-%D9%81%D8%A7%D8%A8%D8%B1%D9%8A%D9%83%D8%A7%D9%85'\n        );\n    });\n    it('Should replace whitespace', () => {\n        expect(parameterize('hello world')).toBe('hello-world');\n    });\n    it('Should replace whitespace at the beginning and end of a string', () => {\n        expect(parameterize(' at the beginning')).toBe('at-the-beginning');\n        expect(parameterize('at the end ')).toBe('at-the-end');\n        expect(parameterize('front and back')).toBe('front-and-back');\n    });\n    it('should only assign one seperator for multiple whitespace', () => {\n        expect(parameterize('hello  world')).toBe('hello-world');\n    });\n    it('Should replace special characters with a single seperator', () => {\n        expect(parameterize('hello&world')).toBe('hello-world');\n    });\n    it('Should replace special characters with a single seperator when surrounded by whitespace', () => {\n        expect(parameterize('hello & world')).toBe('hello-world');\n    });\n    it('Should replace special characters with a single seperator when there are multiple special characters', () => {\n        expect(parameterize('hello&*&world')).toBe('hello-world');\n    });\n    it('Should not assign a separator for a trailing invalid character', () => {\n        expect(parameterize('boop&')).toBe('boop');\n        expect(parameterize('boop !')).toBe('boop');\n    });\n    it('Should not assign a separator for a leading invalid character', () => {\n        expect(parameterize('&boop')).toBe('boop');\n        expect(parameterize('! boop')).toBe('boop');\n    });\n    it('Should preserve underscore', () => {\n        expect(parameterize('hello_world')).toBe('hello_world');\n    });\n    it('Should convert a string to lower case', () => {\n        expect(parameterize('Hello World')).toBe('hello-world');\n    });\n});\n"]}