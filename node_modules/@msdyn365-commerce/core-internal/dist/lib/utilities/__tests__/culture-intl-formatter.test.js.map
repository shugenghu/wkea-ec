{"version":3,"file":"culture-intl-formatter.test.js","sourceRoot":"","sources":["../../../../src/utilities/__tests__/culture-intl-formatter.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport 'jest';\nimport { IDateFormatOptions, INumberFormatOptions, ITimeFormatOptions } from '../../interfaces';\nimport { CultureInfoFormatter } from '../culture-info-formatter';\n\ndescribe('test currency formatter', () => {\n    describe('test fr-FR currency formatter', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('fr-FR', 'eur');\n        it('formats eur currency correctly', () => {\n            expect(keystoneIntlFormatter.formatCurrency('34', 'eur')).toMatchSnapshot();\n        });\n\n        it('formats eur currency correctly when given a integer price instead of string', () => {\n            expect(keystoneIntlFormatter.formatCurrency(34.12, 'eur')).toMatchSnapshot();\n        });\n\n        it('formats eur currency correctly when just given the price, using locale to determine currency code', () => {\n            expect(keystoneIntlFormatter.formatCurrency(34.12, 'eur')).toMatchSnapshot();\n        });\n\n        it('throws an error when price input is undefined', () => {\n            try {\n                // @ts-ignore: Explicit error scenario\n                keystoneIntlFormatter.formatCurrency(undefined);\n            } catch (e) {\n                expect(e).toMatchSnapshot();\n            }\n        });\n    });\n\n    describe('test for invalid initialization', () => {\n        it('currency formatter fails to initialize if locale and currency code are empty', () => {\n            try {\n                new CultureInfoFormatter('', '');\n            } catch (e) {\n                expect(e).toMatchSnapshot();\n            }\n        });\n    });\n\n    describe('test currency formatter returns same result for server/clinet', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('en-NZ', 'nzd');\n        it('formats en-NZ currency correctly browser side', () => {\n            expect(keystoneIntlFormatter.formatCurrency('34.12', 'nzd')).toMatchSnapshot();\n        });\n\n        it('formats en-NZ currency correctly server side', () => {\n            const OLD_ENV = process.env;\n            process.env.CURRENT_ENVIRONMENT = 'node';\n            expect(keystoneIntlFormatter.formatCurrency('34.12', 'nzd')).toMatchSnapshot();\n            process.env = OLD_ENV;\n        });\n    });\n\n    describe('test edge cases currency/number formatter', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('en-us', 'usd');\n        it('formats currency correctly when given string 0', () => {\n            expect(keystoneIntlFormatter.formatCurrency('0', 'usd')).toMatchSnapshot();\n        });\n\n        it('formats currency correctly when given 0 number', () => {\n            expect(keystoneIntlFormatter.formatCurrency(0, 'usd')).toMatchSnapshot();\n        });\n\n        it('formats currency correctly when given null as price input', () => {\n            // @ts-ignore - we want to test this case where it breaks the type\n            expect(keystoneIntlFormatter.formatCurrency(null, 'usd')).toMatchSnapshot();\n        });\n\n        it('formats number correctly when given 0 number', () => {\n            expect(keystoneIntlFormatter.formatNumber(0)).toMatchSnapshot();\n        });\n\n        it('formats number correctly when given negative number', () => {\n            expect(keystoneIntlFormatter.formatCurrency(-100.78, 'usd')).toMatchSnapshot();\n        });\n\n        it('formats number correctly when given null as input', () => {\n            // @ts-ignore - we want to test this case where it breaks the type\n            expect(keystoneIntlFormatter.formatNumber(null)).toMatchSnapshot();\n        });\n    });\n\n    describe('test en-us currency formatter', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('en-us', 'usd');\n        it('formats usd currency correctly', () => {\n            expect(keystoneIntlFormatter.formatCurrency('34', 'usd')).toMatchSnapshot();\n        });\n\n        it('formats usd currency correctly when given a integer price instead of string', () => {\n            expect(keystoneIntlFormatter.formatCurrency(34.12, 'usd')).toMatchSnapshot();\n        });\n\n        it('formats usd currency correctly when just given the price, using locale to determine currency code', () => {\n            expect(keystoneIntlFormatter.formatCurrency(34.12, 'usd')).toMatchSnapshot();\n        });\n    });\n\n    describe('test currency fallback for a particular currency-language-market', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('ar-SA', 'sar');\n        it('formats sar currency correctly even when given invalid currency-language', () => {\n            expect(keystoneIntlFormatter.formatCurrency('34', 'sar')).toMatchSnapshot();\n        });\n\n        it('formats inr currency correctly even when given invalid currency-language', () => {\n            expect(new CultureInfoFormatter('en-US', 'inr').formatCurrency(34.12, 'inr')).toMatchSnapshot();\n        });\n    });\n\n    describe('test invalid currency-code/language combination to fallback to default Intl', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('hi', 'cop');\n        it('formats using intl fallback', () => {\n            expect(keystoneIntlFormatter.formatCurrency('34', 'cop')).toMatchSnapshot();\n        });\n    });\n});\n\ndescribe('test number formatter', () => {\n    describe('test en-us number formatter', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('en-us', 'usd');\n        it('formats number correctly', () => {\n            expect(keystoneIntlFormatter.formatNumber(123456789)).toMatchSnapshot();\n        });\n\n        it('formats decimal correctly', () => {\n            expect(keystoneIntlFormatter.formatNumber(1234567.89)).toMatchSnapshot();\n        });\n\n        it('formats percent correctly', () => {\n            const options: INumberFormatOptions = <INumberFormatOptions>{};\n            options.style = 'percent';\n            options.minimumFractionDigits = 2;\n            expect(keystoneIntlFormatter.formatNumber(0.7842, options)).toMatchSnapshot();\n        });\n\n        it('throws an error when value input is undefined', () => {\n            try {\n                // @ts-ignore: Explicit error scenario\n                keystoneIntlFormatter.formatNumber(undefined);\n            } catch (e) {\n                expect(e).toMatchSnapshot();\n            }\n        });\n    });\n\n    describe('test arabic number formatter', () => {\n        // Test unqiue numerals\n        const keystoneIntlFormatter = new CultureInfoFormatter('ar-EG', 'aed');\n        it('formats number correctly', () => {\n            expect(keystoneIntlFormatter.formatNumber(123456789)).toMatchSnapshot();\n        });\n\n        it('formats decimal correctly', () => {\n            expect(keystoneIntlFormatter.formatNumber(1234567.89)).toMatchSnapshot();\n        });\n\n        it('formats percent correctly', () => {\n            const options: INumberFormatOptions = <INumberFormatOptions>{};\n            options.style = 'percent';\n            options.minimumFractionDigits = 2;\n            expect(keystoneIntlFormatter.formatNumber(0.7842, options)).toMatchSnapshot();\n        });\n    });\n\n    describe('test german number formatter', () => {\n        // German uses comma as decimal separator and period for thousands\n        const keystoneIntlFormatter = new CultureInfoFormatter('de-DE', 'eur');\n        it('formats number correctly', () => {\n            expect(keystoneIntlFormatter.formatNumber(123456789)).toMatchSnapshot();\n        });\n\n        it('formats decimal correctly', () => {\n            expect(keystoneIntlFormatter.formatNumber(1234567.89)).toMatchSnapshot();\n        });\n\n        it('formats percent correctly', () => {\n            const options: INumberFormatOptions = <INumberFormatOptions>{};\n            options.style = 'percent';\n            options.minimumFractionDigits = 2;\n            expect(keystoneIntlFormatter.formatNumber(0.7842, options)).toMatchSnapshot();\n        });\n    });\n\n    describe('test indian number formatter', () => {\n        // India uses thoursands/lakh/crore separators\n        const keystoneIntlFormatter = new CultureInfoFormatter('en-IN', 'inr');\n        it('formats number correctly', () => {\n            expect(keystoneIntlFormatter.formatNumber(123456789)).toMatchSnapshot();\n        });\n\n        it('formats decimal correctly', () => {\n            expect(keystoneIntlFormatter.formatNumber(1234567.89)).toMatchSnapshot();\n        });\n\n        it('formats percent correctly', () => {\n            const options: INumberFormatOptions = <INumberFormatOptions>{};\n            options.style = 'percent';\n            options.minimumFractionDigits = 2;\n            expect(keystoneIntlFormatter.formatNumber(0.7842, options)).toMatchSnapshot();\n        });\n    });\n});\n\ndescribe('test date formatter', () => {\n    const testDate = new Date(2012, 11, 20, 3, 0, 0); // 12/20/2012 (in US format)\n    describe('test en-us date', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('en-US', 'inr');\n        it('formats date correctly', () => {\n            expect(keystoneIntlFormatter.formatDate(testDate)).toMatchSnapshot();\n        });\n\n        it('formats date correctly with options', () => {\n            const options: IDateFormatOptions = <IDateFormatOptions>{};\n            options.weekday = 'long';\n            options.year = 'numeric';\n            options.month = 'long';\n            options.day = 'numeric';\n            expect(keystoneIntlFormatter.formatDate(testDate, options)).toMatchSnapshot();\n        });\n\n        it('formats date correctly with timezone information', () => {\n            const options: IDateFormatOptions = <IDateFormatOptions>{};\n            options.weekday = 'long';\n            options.year = 'numeric';\n            options.month = 'long';\n            options.day = 'numeric';\n            options.timeZone = 'UTC';\n            options.timeZoneName = 'short';\n            // Expect 3AM UTC\n            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n            expect(keystoneIntlFormatter.formatDate(utcDate, options)).toMatchSnapshot();\n        });\n\n        it('formats date correctly with timezone information when given a valid date string', () => {\n            const options: IDateFormatOptions = <IDateFormatOptions>{};\n            options.weekday = 'long';\n            options.year = 'numeric';\n            options.month = 'long';\n            options.day = 'numeric';\n            options.timeZone = 'UTC';\n            options.timeZoneName = 'short';\n            // Expect 3AM UTC\n            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)).toISOString();\n            expect(keystoneIntlFormatter.formatDate(utcDate, options)).toMatchSnapshot();\n        });\n\n        xit('throws an error when given an invalid date string', () => {\n            const options: IDateFormatOptions = <IDateFormatOptions>{};\n            options.weekday = 'long';\n            options.year = 'numeric';\n            options.month = 'long';\n            options.day = 'numeric';\n            options.timeZone = 'UTC';\n            options.timeZoneName = 'short';\n            try {\n                // @ts-ignore: Explicit error scenario\n                keystoneIntlFormatter.formatDate('bad-string', options);\n            } catch (e) {\n                expect(e).toMatchSnapshot();\n            }\n        });\n\n        it('throws an error when date input is undefined', () => {\n            try {\n                // @ts-ignore: Explicit error scenario\n                keystoneIntlFormatter.formatDate(undefined);\n            } catch (e) {\n                expect(e).toMatchSnapshot();\n            }\n        });\n    });\n\n    describe('test en-GB date', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('en-GB', 'inr');\n        it('formats date correctly', () => {\n            expect(keystoneIntlFormatter.formatDate(testDate)).toMatchSnapshot();\n        });\n\n        it('formats date correctly with options', () => {\n            const options: IDateFormatOptions = <IDateFormatOptions>{};\n            options.weekday = 'long';\n            options.year = 'numeric';\n            options.month = 'long';\n            options.day = 'numeric';\n            expect(keystoneIntlFormatter.formatDate(testDate, options)).toMatchSnapshot();\n        });\n\n        it('formats date correctly with timezone information', () => {\n            const options: IDateFormatOptions = <IDateFormatOptions>{};\n            options.weekday = 'long';\n            options.year = 'numeric';\n            options.month = 'long';\n            options.day = 'numeric';\n            options.timeZone = 'UTC';\n            options.timeZoneName = 'short';\n            // Expect 3:00 UTC (NO AM)\n            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n            expect(keystoneIntlFormatter.formatDate(utcDate, options)).toMatchSnapshot();\n        });\n    });\n\n    describe('test unique locales', () => {\n        it('formats korean date correctly', () => {\n            const keystoneIntlFormatter = new CultureInfoFormatter('ko-KR', 'krw');\n            expect(keystoneIntlFormatter.formatDate(testDate)).toMatchSnapshot();\n        });\n\n        it('formats full german date correctly ', () => {\n            const keystoneIntlFormatter = new CultureInfoFormatter('de-DE', 'eur');\n            let options: IDateFormatOptions = <IDateFormatOptions>{};\n            options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n            expect(keystoneIntlFormatter.formatDate(testDate, options)).toMatchSnapshot();\n        });\n\n        it('formats 24 hour american time', () => {\n            const keystoneIntlFormatter = new CultureInfoFormatter('en-US', 'usd');\n            let options: IDateFormatOptions = <IDateFormatOptions>{};\n            options = {\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: false\n            };\n            expect(keystoneIntlFormatter.formatDate(testDate, options)).toMatchSnapshot();\n        });\n\n        it('throws an error when time input is undefined', () => {\n            try {\n                // @ts-ignore: Explicit error scenario\n                keystoneIntlFormatter.formatTime(undefined);\n            } catch (e) {\n                expect(e).toMatchSnapshot();\n            }\n        });\n    });\n});\n\ndescribe('test time formatter', () => {\n    const testDate = new Date(2012, 11, 20, 13, 34, 23); // 1:34:23 PM in en-US Format\n\n    describe('test en-us time', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('en-US', 'usd');\n\n        it('formats time correctly', () => {\n            expect(keystoneIntlFormatter.formatTime(testDate)).toMatchSnapshot();\n        });\n\n        it('formats time with 24 hour options', () => {\n            const options: ITimeFormatOptions = <ITimeFormatOptions>{};\n            options.hour12 = false;\n            expect(keystoneIntlFormatter.formatTime(testDate, options)).toMatchSnapshot();\n        });\n\n        it('formats date correctly with timezone information', () => {\n            const options: ITimeFormatOptions = <ITimeFormatOptions>{};\n            options.timeZone = 'UTC';\n            options.timeZoneName = 'short';\n            // Expect 3AM UTC\n            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n            expect(keystoneIntlFormatter.formatTime(utcDate, options)).toMatchSnapshot();\n        });\n\n        it('formats date correctly with timezone information when given a valid date string', () => {\n            const options: ITimeFormatOptions = <ITimeFormatOptions>{};\n            options.timeZone = 'UTC';\n            options.timeZoneName = 'short';\n            // Expect 3AM UTC\n            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)).toISOString();\n            expect(keystoneIntlFormatter.formatTime(utcDate, options)).toMatchSnapshot();\n        });\n\n        xit('throws an error when given an invalid date string', () => {\n            const options: ITimeFormatOptions = <ITimeFormatOptions>{};\n            options.timeZone = 'UTC';\n            options.timeZoneName = 'short';\n            try {\n                // @ts-ignore: Explicit error scenario\n                keystoneIntlFormatter.formatTime('bad-string', options);\n            } catch (e) {\n                expect(e).toMatchSnapshot();\n            }\n        });\n    });\n\n    describe('test fr-FR time', () => {\n        const keystoneIntlFormatter = new CultureInfoFormatter('fr-FR', 'eur');\n        it('formats time correctly', () => {\n            expect(keystoneIntlFormatter.formatTime(testDate)).toMatchSnapshot();\n        });\n\n        it('formats time with seconds', () => {\n            const options: ITimeFormatOptions = <ITimeFormatOptions>{};\n            options.second = 'numeric';\n            expect(keystoneIntlFormatter.formatTime(testDate, options)).toMatchSnapshot();\n        });\n    });\n});\n"]}