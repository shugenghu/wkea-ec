{"version":3,"file":"http-service.test.js","sourceRoot":"","sources":["../../../../src/utilities/__tests__/http-service.test.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport 'jest';\nimport sinon, { SinonSandbox } from 'sinon';\nimport { IHTTPError, IHTTPResponse } from '../../interfaces';\nimport { sendCommerceRequest, sendRequest } from '../http-service';\n\n// Promise that imitates a successful HTTP Request\nconst successfulRequestPromise = new Promise<IHTTPResponse>((resolve: Function) => {\n    setTimeout(() => {\n        resolve(<IHTTPResponse<object>>{\n            status: 200,\n            data: { foo: 'bar' },\n            config: {},\n            statusText: ''\n        });\n    }, 100);\n});\n\n// Promise that imitates a unsuccessful HTTP request\nconst unsuccessfulRequestPromise = new Promise<IHTTPResponse>((resolve: Function, reject: Function) => {\n    setTimeout(() => {\n        reject(<IHTTPError>{\n            code: '404',\n            response: {\n                status: 404,\n                config: {},\n                statusText: ''\n            }\n        });\n    }, 100);\n});\n\ndescribe('sendCommerceRequest', () => {\n    let sandbox: SinonSandbox;\n\n    beforeEach(() => {\n        sandbox = sinon.createSandbox();\n    });\n\n    afterEach(() => {\n        sandbox.restore();\n    });\n\n    it('should allow you to set a custom oun value', async () => {\n        sandbox.stub(axios, 'request').returns(successfulRequestPromise);\n\n        await sendCommerceRequest('/foo', 'post', {}, { headers: { oun: 'test123' } });\n        // @ts-ignore\n        sinon.assert.calledWith(axios.request, {\n            data: {},\n            headers: {\n                Accept: 'application/json;odata=nometadata',\n                ContentType: 'application/json;odata=verbose',\n                'from-keystone': 'true',\n                oun: 'test123'\n            },\n            method: 'post',\n            timeout: 10000,\n            url: '/foo'\n        });\n    });\n});\n\ndescribe('sendRequest', () => {\n    let sandbox: SinonSandbox;\n\n    beforeEach(() => {\n        sandbox = sinon.createSandbox();\n    });\n\n    afterEach(() => {\n        sandbox.restore();\n    });\n\n    it('should properly return reponse object on successful request', () => {\n        sandbox.stub(axios, 'request').returns(successfulRequestPromise);\n\n        sendRequest<{}>('/foo')\n            .then((response: IHTTPResponse) => {\n                expect(response.status).toEqual(200);\n                expect(response.data).toEqual({ foo: 'bar' });\n            })\n            .catch((error: IHTTPError) => {\n                console.error('Error during test!');\n            });\n    });\n\n    it('should properly return reponse object on unsuccessful request', () => {\n        sandbox.stub(axios, 'request').returns(unsuccessfulRequestPromise);\n\n        sendRequest<{}>('/foo')\n            .then((response: IHTTPResponse) => {\n                expect(response.status).toEqual(404);\n                expect(response.data).toBeUndefined();\n            })\n            .catch((error: IHTTPError) => {\n                console.error('Error during test!');\n            });\n    });\n});\n"]}