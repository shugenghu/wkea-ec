/**
 * @jest-environment jsdom
 */
import 'jest';
import { CultureInfoFormatter } from '../culture-info-formatter';
describe('test currency formatter', () => {
    describe('test fr-FR currency formatter', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('fr-FR', 'eur');
        it('formats eur currency correctly', () => {
            expect(keystoneIntlFormatter.formatCurrency('34', 'eur')).toMatchSnapshot();
        });
        it('formats eur currency correctly when given a integer price instead of string', () => {
            expect(keystoneIntlFormatter.formatCurrency(34.12, 'eur')).toMatchSnapshot();
        });
        it('formats eur currency correctly when just given the price, using locale to determine currency code', () => {
            expect(keystoneIntlFormatter.formatCurrency(34.12, 'eur')).toMatchSnapshot();
        });
        it('throws an error when price input is undefined', () => {
            try {
                // @ts-ignore: Explicit error scenario
                keystoneIntlFormatter.formatCurrency(undefined);
            }
            catch (e) {
                expect(e).toMatchSnapshot();
            }
        });
    });
    describe('test for invalid initialization', () => {
        it('currency formatter fails to initialize if locale and currency code are empty', () => {
            try {
                new CultureInfoFormatter('', '');
            }
            catch (e) {
                expect(e).toMatchSnapshot();
            }
        });
    });
    describe('test currency formatter returns same result for server/clinet', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('en-NZ', 'nzd');
        it('formats en-NZ currency correctly browser side', () => {
            expect(keystoneIntlFormatter.formatCurrency('34.12', 'nzd')).toMatchSnapshot();
        });
        it('formats en-NZ currency correctly server side', () => {
            const OLD_ENV = process.env;
            process.env.CURRENT_ENVIRONMENT = 'node';
            expect(keystoneIntlFormatter.formatCurrency('34.12', 'nzd')).toMatchSnapshot();
            process.env = OLD_ENV;
        });
    });
    describe('test edge cases currency/number formatter', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('en-us', 'usd');
        it('formats currency correctly when given string 0', () => {
            expect(keystoneIntlFormatter.formatCurrency('0', 'usd')).toMatchSnapshot();
        });
        it('formats currency correctly when given 0 number', () => {
            expect(keystoneIntlFormatter.formatCurrency(0, 'usd')).toMatchSnapshot();
        });
        it('formats currency correctly when given null as price input', () => {
            // @ts-ignore - we want to test this case where it breaks the type
            expect(keystoneIntlFormatter.formatCurrency(null, 'usd')).toMatchSnapshot();
        });
        it('formats number correctly when given 0 number', () => {
            expect(keystoneIntlFormatter.formatNumber(0)).toMatchSnapshot();
        });
        it('formats number correctly when given negative number', () => {
            expect(keystoneIntlFormatter.formatCurrency(-100.78, 'usd')).toMatchSnapshot();
        });
        it('formats number correctly when given null as input', () => {
            // @ts-ignore - we want to test this case where it breaks the type
            expect(keystoneIntlFormatter.formatNumber(null)).toMatchSnapshot();
        });
    });
    describe('test en-us currency formatter', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('en-us', 'usd');
        it('formats usd currency correctly', () => {
            expect(keystoneIntlFormatter.formatCurrency('34', 'usd')).toMatchSnapshot();
        });
        it('formats usd currency correctly when given a integer price instead of string', () => {
            expect(keystoneIntlFormatter.formatCurrency(34.12, 'usd')).toMatchSnapshot();
        });
        it('formats usd currency correctly when just given the price, using locale to determine currency code', () => {
            expect(keystoneIntlFormatter.formatCurrency(34.12, 'usd')).toMatchSnapshot();
        });
    });
    describe('test currency fallback for a particular currency-language-market', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('ar-SA', 'sar');
        it('formats sar currency correctly even when given invalid currency-language', () => {
            expect(keystoneIntlFormatter.formatCurrency('34', 'sar')).toMatchSnapshot();
        });
        it('formats inr currency correctly even when given invalid currency-language', () => {
            expect(new CultureInfoFormatter('en-US', 'inr').formatCurrency(34.12, 'inr')).toMatchSnapshot();
        });
    });
    describe('test invalid currency-code/language combination to fallback to default Intl', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('hi', 'cop');
        it('formats using intl fallback', () => {
            expect(keystoneIntlFormatter.formatCurrency('34', 'cop')).toMatchSnapshot();
        });
    });
});
describe('test number formatter', () => {
    describe('test en-us number formatter', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('en-us', 'usd');
        it('formats number correctly', () => {
            expect(keystoneIntlFormatter.formatNumber(123456789)).toMatchSnapshot();
        });
        it('formats decimal correctly', () => {
            expect(keystoneIntlFormatter.formatNumber(1234567.89)).toMatchSnapshot();
        });
        it('formats percent correctly', () => {
            const options = {};
            options.style = 'percent';
            options.minimumFractionDigits = 2;
            expect(keystoneIntlFormatter.formatNumber(0.7842, options)).toMatchSnapshot();
        });
        it('throws an error when value input is undefined', () => {
            try {
                // @ts-ignore: Explicit error scenario
                keystoneIntlFormatter.formatNumber(undefined);
            }
            catch (e) {
                expect(e).toMatchSnapshot();
            }
        });
    });
    describe('test arabic number formatter', () => {
        // Test unqiue numerals
        const keystoneIntlFormatter = new CultureInfoFormatter('ar-EG', 'aed');
        it('formats number correctly', () => {
            expect(keystoneIntlFormatter.formatNumber(123456789)).toMatchSnapshot();
        });
        it('formats decimal correctly', () => {
            expect(keystoneIntlFormatter.formatNumber(1234567.89)).toMatchSnapshot();
        });
        it('formats percent correctly', () => {
            const options = {};
            options.style = 'percent';
            options.minimumFractionDigits = 2;
            expect(keystoneIntlFormatter.formatNumber(0.7842, options)).toMatchSnapshot();
        });
    });
    describe('test german number formatter', () => {
        // German uses comma as decimal separator and period for thousands
        const keystoneIntlFormatter = new CultureInfoFormatter('de-DE', 'eur');
        it('formats number correctly', () => {
            expect(keystoneIntlFormatter.formatNumber(123456789)).toMatchSnapshot();
        });
        it('formats decimal correctly', () => {
            expect(keystoneIntlFormatter.formatNumber(1234567.89)).toMatchSnapshot();
        });
        it('formats percent correctly', () => {
            const options = {};
            options.style = 'percent';
            options.minimumFractionDigits = 2;
            expect(keystoneIntlFormatter.formatNumber(0.7842, options)).toMatchSnapshot();
        });
    });
    describe('test indian number formatter', () => {
        // India uses thoursands/lakh/crore separators
        const keystoneIntlFormatter = new CultureInfoFormatter('en-IN', 'inr');
        it('formats number correctly', () => {
            expect(keystoneIntlFormatter.formatNumber(123456789)).toMatchSnapshot();
        });
        it('formats decimal correctly', () => {
            expect(keystoneIntlFormatter.formatNumber(1234567.89)).toMatchSnapshot();
        });
        it('formats percent correctly', () => {
            const options = {};
            options.style = 'percent';
            options.minimumFractionDigits = 2;
            expect(keystoneIntlFormatter.formatNumber(0.7842, options)).toMatchSnapshot();
        });
    });
});
describe('test date formatter', () => {
    const testDate = new Date(2012, 11, 20, 3, 0, 0); // 12/20/2012 (in US format)
    describe('test en-us date', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('en-US', 'inr');
        it('formats date correctly', () => {
            expect(keystoneIntlFormatter.formatDate(testDate)).toMatchSnapshot();
        });
        it('formats date correctly with options', () => {
            const options = {};
            options.weekday = 'long';
            options.year = 'numeric';
            options.month = 'long';
            options.day = 'numeric';
            expect(keystoneIntlFormatter.formatDate(testDate, options)).toMatchSnapshot();
        });
        it('formats date correctly with timezone information', () => {
            const options = {};
            options.weekday = 'long';
            options.year = 'numeric';
            options.month = 'long';
            options.day = 'numeric';
            options.timeZone = 'UTC';
            options.timeZoneName = 'short';
            // Expect 3AM UTC
            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));
            expect(keystoneIntlFormatter.formatDate(utcDate, options)).toMatchSnapshot();
        });
        it('formats date correctly with timezone information when given a valid date string', () => {
            const options = {};
            options.weekday = 'long';
            options.year = 'numeric';
            options.month = 'long';
            options.day = 'numeric';
            options.timeZone = 'UTC';
            options.timeZoneName = 'short';
            // Expect 3AM UTC
            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)).toISOString();
            expect(keystoneIntlFormatter.formatDate(utcDate, options)).toMatchSnapshot();
        });
        xit('throws an error when given an invalid date string', () => {
            const options = {};
            options.weekday = 'long';
            options.year = 'numeric';
            options.month = 'long';
            options.day = 'numeric';
            options.timeZone = 'UTC';
            options.timeZoneName = 'short';
            try {
                // @ts-ignore: Explicit error scenario
                keystoneIntlFormatter.formatDate('bad-string', options);
            }
            catch (e) {
                expect(e).toMatchSnapshot();
            }
        });
        it('throws an error when date input is undefined', () => {
            try {
                // @ts-ignore: Explicit error scenario
                keystoneIntlFormatter.formatDate(undefined);
            }
            catch (e) {
                expect(e).toMatchSnapshot();
            }
        });
    });
    describe('test en-GB date', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('en-GB', 'inr');
        it('formats date correctly', () => {
            expect(keystoneIntlFormatter.formatDate(testDate)).toMatchSnapshot();
        });
        it('formats date correctly with options', () => {
            const options = {};
            options.weekday = 'long';
            options.year = 'numeric';
            options.month = 'long';
            options.day = 'numeric';
            expect(keystoneIntlFormatter.formatDate(testDate, options)).toMatchSnapshot();
        });
        it('formats date correctly with timezone information', () => {
            const options = {};
            options.weekday = 'long';
            options.year = 'numeric';
            options.month = 'long';
            options.day = 'numeric';
            options.timeZone = 'UTC';
            options.timeZoneName = 'short';
            // Expect 3:00 UTC (NO AM)
            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));
            expect(keystoneIntlFormatter.formatDate(utcDate, options)).toMatchSnapshot();
        });
    });
    describe('test unique locales', () => {
        it('formats korean date correctly', () => {
            const keystoneIntlFormatter = new CultureInfoFormatter('ko-KR', 'krw');
            expect(keystoneIntlFormatter.formatDate(testDate)).toMatchSnapshot();
        });
        it('formats full german date correctly ', () => {
            const keystoneIntlFormatter = new CultureInfoFormatter('de-DE', 'eur');
            let options = {};
            options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            expect(keystoneIntlFormatter.formatDate(testDate, options)).toMatchSnapshot();
        });
        it('formats 24 hour american time', () => {
            const keystoneIntlFormatter = new CultureInfoFormatter('en-US', 'usd');
            let options = {};
            options = {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                hour12: false
            };
            expect(keystoneIntlFormatter.formatDate(testDate, options)).toMatchSnapshot();
        });
        it('throws an error when time input is undefined', () => {
            try {
                // @ts-ignore: Explicit error scenario
                keystoneIntlFormatter.formatTime(undefined);
            }
            catch (e) {
                expect(e).toMatchSnapshot();
            }
        });
    });
});
describe('test time formatter', () => {
    const testDate = new Date(2012, 11, 20, 13, 34, 23); // 1:34:23 PM in en-US Format
    describe('test en-us time', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('en-US', 'usd');
        it('formats time correctly', () => {
            expect(keystoneIntlFormatter.formatTime(testDate)).toMatchSnapshot();
        });
        it('formats time with 24 hour options', () => {
            const options = {};
            options.hour12 = false;
            expect(keystoneIntlFormatter.formatTime(testDate, options)).toMatchSnapshot();
        });
        it('formats date correctly with timezone information', () => {
            const options = {};
            options.timeZone = 'UTC';
            options.timeZoneName = 'short';
            // Expect 3AM UTC
            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));
            expect(keystoneIntlFormatter.formatTime(utcDate, options)).toMatchSnapshot();
        });
        it('formats date correctly with timezone information when given a valid date string', () => {
            const options = {};
            options.timeZone = 'UTC';
            options.timeZoneName = 'short';
            // Expect 3AM UTC
            const utcDate = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)).toISOString();
            expect(keystoneIntlFormatter.formatTime(utcDate, options)).toMatchSnapshot();
        });
        xit('throws an error when given an invalid date string', () => {
            const options = {};
            options.timeZone = 'UTC';
            options.timeZoneName = 'short';
            try {
                // @ts-ignore: Explicit error scenario
                keystoneIntlFormatter.formatTime('bad-string', options);
            }
            catch (e) {
                expect(e).toMatchSnapshot();
            }
        });
    });
    describe('test fr-FR time', () => {
        const keystoneIntlFormatter = new CultureInfoFormatter('fr-FR', 'eur');
        it('formats time correctly', () => {
            expect(keystoneIntlFormatter.formatTime(testDate)).toMatchSnapshot();
        });
        it('formats time with seconds', () => {
            const options = {};
            options.second = 'numeric';
            expect(keystoneIntlFormatter.formatTime(testDate, options)).toMatchSnapshot();
        });
    });
});
//# sourceMappingURL=culture-intl-formatter.test.js.map