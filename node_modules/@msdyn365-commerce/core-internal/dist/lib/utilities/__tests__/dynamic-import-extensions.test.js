import { fixChunkName, getDefaultOrResult } from '../internal/dynamic-import-extensions-helpers';
const fixNameHarness = (input) => {
    const mockedUniveralImports = input.map((testCase) => {
        return {
            id: testCase.id,
            chunkName: () => testCase.chunkName
        };
    });
    return mockedUniveralImports.map((testCase) => fixChunkName(testCase));
};
describe('dynamic-import-extensions', () => {
    it('properly fixes chunk names', () => {
        // arrange
        const testCases = [
            {
                id: 'partner/',
                chunkName: 'partner/path/to/my-module',
                expectedValue: 'partner/path-to-my-module'
            },
            {
                id: 'partner/foo/',
                chunkName: 'partner/foo/path/to/my-module',
                expectedValue: 'partner/foo/path-to-my-module'
            },
            {
                id: 'partner/foo/.real',
                chunkName: 'partner/foo/path/to/my-module.real',
                expectedValue: 'partner/foo/path-to-my-module-real'
            }
        ];
        // act
        const results = fixNameHarness(testCases);
        // assert
        results.map((result, index) => expect(result).toEqual(testCases[index].expectedValue));
    });
    describe('default helper', () => {
        it('can properly get default export if available', () => {
            // arrange
            const obj = {
                default: () => {
                    return null;
                }
            };
            // act
            const result = getDefaultOrResult(obj);
            // assert
            expect(result).toBe(obj.default);
        });
        it('returns object if no default is defined', () => {
            const obj = {
                NamedExport: () => {
                    return null;
                }
            };
            // tslint:disable-next-line:no-any
            const result = getDefaultOrResult(obj);
            expect(result).toBe(obj);
        });
        it('pass undefined through', () => {
            // tslint:disable-next-line:no-any
            const result = getDefaultOrResult(undefined);
            expect(result).toBe(undefined);
        });
        it('passes promise through', () => {
            const obj = Promise.resolve();
            // tslint:disable-next-line:no-any
            const result = getDefaultOrResult(obj);
            expect(result).toBe(obj);
        });
    });
});
//# sourceMappingURL=dynamic-import-extensions.test.js.map