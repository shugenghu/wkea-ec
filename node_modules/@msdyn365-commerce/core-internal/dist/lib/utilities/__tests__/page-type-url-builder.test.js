import { buildMockActionContext, buildMockRequest } from '../../mock/mock-helper';
import { getUrlSync, getCategoriesUrlSync } from '../page-type-url-builder';
describe('page-type-url-builder', () => {
    describe('App urls', () => {
        it('Should generate a url registered in app', () => {
            const requestContext = buildMockRequest({
                app: {
                    routes: {
                        cart: '/cart',
                        'sign-in': '/sign-in'
                    }
                }
            });
            const actionContext = buildMockActionContext({ requestContext });
            const cartUrl = getUrlSync('cart', actionContext);
            expect(cartUrl).toBe('/cart');
            const signInUrl = getUrlSync('sign-in', actionContext);
            expect(signInUrl).toBe('/sign-in');
        });
        it('Should respect new urls registered in app', () => {
            const requestContext = buildMockRequest({
                app: {
                    routes: {
                        cart: '/cart'
                    }
                }
            });
            const newRequestContext = buildMockRequest({
                app: {
                    routes: {
                        cart: '/new-cart'
                    }
                }
            });
            const actionContext = buildMockActionContext({ requestContext });
            const cartUrl = getUrlSync('cart', actionContext);
            expect(cartUrl).toBe('/cart');
            actionContext.requestContext = newRequestContext;
            const newCartUrl = getUrlSync('cart', actionContext);
            expect(newCartUrl).toBe('/new-cart');
        });
        it('Should generate a url registered in app with a sitePath', () => {
            const requestContext = buildMockRequest({
                app: {
                    routes: {
                        cart: { destinationUrl: '/contoso/cart' },
                        home: { destinationUrl: '/' },
                        'sign-in': '/sign-in'
                    }
                },
                sitePath: '/contoso'
            });
            const actionContext = buildMockActionContext({ requestContext });
            const cartUrl = getUrlSync('cart', actionContext);
            expect(cartUrl).toBe('/contoso/cart');
            const signInUrl = getUrlSync('sign-in', actionContext);
            expect(signInUrl).toBe('/contoso/sign-in');
            const homeUrl = getUrlSync('home', actionContext);
            expect(homeUrl).toBe('/');
        });
    });
    describe('query urls', () => {
        it('override urls registerd in app', () => {
            const requestContext = buildMockRequest({
                app: {
                    routes: {
                        cart: '/cart',
                        'sign-in': '/sign-in'
                    }
                },
                query: {
                    cart: '/my-cart'
                }
            });
            const actionContext = buildMockActionContext({ requestContext });
            const cartUrl = getUrlSync('cart', actionContext);
            expect(cartUrl).toBe('/my-cart');
        });
        it('override urls registerd in app with site path', () => {
            const requestContext = buildMockRequest({
                app: {
                    routes: {
                        cart: '/cart',
                        'sign-in': '/sign-in'
                    }
                },
                query: {
                    cart: '/my-cart',
                    rdc: '1',
                    domain: 'contoso.com'
                },
                sitePath: '/contoso'
            });
            const actionContext = buildMockActionContext({ requestContext });
            const cartUrl = getUrlSync('cart', actionContext);
            expect(cartUrl).toBe('/contoso/my-cart?domain=contoso.com');
        });
    });
    describe('default urls', () => {
        it('Should generate a product url', () => {
            const product = {
                Name: 'My Super Cool Product',
                RecordId: 1234
            };
            const category1 = {
                Name: 'Cat 1',
                RecordId: 1234
            };
            const category2 = {
                Name: 'Cat 2',
                RecordId: '4321'
            };
            const category3 = {
                Name: 'Cat 3',
                RecordId: '9876',
                Slug: '/cat-1/cat-2/cat-3/super-duper-slug'
            };
            const contextWithCategories = {
                categories: [category1, category2, category3],
                product
            };
            const contextWithCategory = { category: category3, product };
            const contextWithoutCategory = { product };
            const actionContext = buildMockActionContext();
            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });
            const actionContextWithSite = buildMockActionContext({ requestContext: requestContextWithSite });
            const urlWithCat = getUrlSync('product', actionContext, contextWithCategories);
            expect(urlWithCat).toBe('/cat-1/cat-2/cat-3/my-super-cool-product/1234.p');
            const urlWithoutCat = getUrlSync('product', actionContext, contextWithoutCategory);
            expect(urlWithoutCat).toBe('/my-super-cool-product/1234.p');
            const urlWithSitePath = getUrlSync('product', actionContextWithSite, contextWithoutCategory);
            expect(urlWithSitePath).toMatch('/contoso/my-super-cool-product/1234.p');
            const urlWithSitePathAndCategories = getUrlSync('product', actionContextWithSite, contextWithCategories);
            expect(urlWithSitePathAndCategories).toMatch('/contoso/cat-1/cat-2/cat-3/my-super-cool-product/1234.p');
            const urlWithSitePathAndCategorySlug = getUrlSync('product', actionContextWithSite, contextWithCategory);
            expect(urlWithSitePathAndCategorySlug).toMatch('/contoso/cat-1/cat-2/cat-3/super-duper-slug/my-super-cool-product/1234.p');
        });
        it('Should respect category slugs', () => {
            const category3 = {
                Slug: '/cat-1/cat-2/cat-3',
                RecordId: 1234
            };
            const context = { category: category3 };
            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });
            const actionContext = buildMockActionContext({
                requestContext: requestContextWithSite
            });
            const url = getUrlSync('category', actionContext, context);
            expect(url).toBe('/contoso/cat-1/cat-2/cat-3/1234.c');
        });
        it('Should generate a category url', () => {
            const category1 = {
                Name: 'Cat 1',
                RecordId: 1234
            };
            const category2 = {
                Name: 'Cat 2',
                RecordId: '4321'
            };
            const category3 = {
                Name: 'Cat 3',
                RecordId: '9876'
            };
            const context = {
                categories: [category1, category2, category3]
            };
            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });
            const actionContext = buildMockActionContext({
                requestContext: requestContextWithSite
            });
            const url = getUrlSync('category', actionContext, context);
            expect(url).toBe('/contoso/cat-1/cat-2/cat-3/9876.c');
        });
        it('Should generate a list url', () => {
            const list = {
                Name: 'List one'
            };
            const context = { list };
            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });
            const actionContext = buildMockActionContext({
                requestContext: requestContextWithSite
            });
            const url = getUrlSync('list', actionContext, context);
            expect(url).toBe('/contoso/list-one.l');
        });
        it('Should prevent users from overriding default routes', () => {
            const list = {
                Name: 'List one'
            };
            const context = { list };
            const requestContext = buildMockRequest({
                sitePath: '/contoso',
                app: {
                    routes: {
                        list: '/my-cart'
                    }
                }
            });
            const actionContext = buildMockActionContext({ requestContext });
            const url = getUrlSync('list', actionContext, context);
            expect(url).toBe('/contoso/list-one.l');
        });
        it('Should return page type if no route is found', () => {
            const requestContext = buildMockRequest({
                sitePath: '/contoso',
                app: {
                    routes: {
                        list: '/my-cart'
                    }
                }
            });
            const actionContext = buildMockActionContext({ requestContext });
            const url = getUrlSync('not-a-real-page', actionContext, {});
            expect(url).toBe('/contoso/not-a-real-page');
        });
        it('Should accept page type enums', () => {
            const requestContext = buildMockRequest({
                sitePath: '/contoso'
            });
            const actionContext = buildMockActionContext({ requestContext });
            const list = {
                Name: 'List one'
            };
            const context = { list };
            const url = getUrlSync("list" /* List */, actionContext, context);
            expect(url).toBe('/contoso/list-one.l');
        });
        it('Validate categories URLs when list of seguiments is provided', () => {
            const categoryPath = {
                Segments: [
                    {
                        CategoryName: 'Cat 1',
                        CategoryId: 1234
                    },
                    {
                        CategoryName: 'Cat 2',
                        CategoryId: 4321
                    },
                    {
                        CategoryName: 'Cat 3',
                        CategoryId: 9876
                    }
                ]
            };
            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });
            const actionContext = buildMockActionContext({
                requestContext: requestContextWithSite
            });
            const categoriesUrl = getCategoriesUrlSync(categoryPath, actionContext) || [];
            expect(categoriesUrl.length).toBe(3);
            expect(categoriesUrl[0].Name).toBe('Cat 1');
            expect(categoriesUrl[0].Url).toBe('/contoso/cat-1/1234.c');
            expect(categoriesUrl[1].Name).toBe('Cat 2');
            expect(categoriesUrl[1].Url).toBe('/contoso/cat-1/cat-2/4321.c');
            expect(categoriesUrl[2].Name).toBe('Cat 3');
            expect(categoriesUrl[2].Url).toBe('/contoso/cat-1/cat-2/cat-3/9876.c');
        });
        it('Validate categories URLs when list of seguiments is not provided', () => {
            const categoryPath = {
                Segments: []
            };
            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });
            const actionContext = buildMockActionContext({
                requestContext: requestContextWithSite
            });
            const categoriesUrl = getCategoriesUrlSync(categoryPath, actionContext) || [];
            expect(categoriesUrl.length).toBe(0);
        });
    });
});
//# sourceMappingURL=page-type-url-builder.test.js.map