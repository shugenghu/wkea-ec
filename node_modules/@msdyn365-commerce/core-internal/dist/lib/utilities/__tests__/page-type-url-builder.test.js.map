{"version":3,"file":"page-type-url-builder.test.js","sourceRoot":"","sources":["../../../../src/utilities/__tests__/page-type-url-builder.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,oBAAoB,EAAY,MAAM,0BAA0B,CAAC;AAGtF,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACnC,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YAC/C,MAAM,cAAc,GAAG,gBAAgB,CAAC;gBACpC,GAAG,EAAE;oBACD,MAAM,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,SAAS,EAAE,UAAU;qBACxB;iBACJ;aACJ,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YAEjE,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAE9B,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACjD,MAAM,cAAc,GAAG,gBAAgB,CAAC;gBACpC,GAAG,EAAE;oBACD,MAAM,EAAE;wBACJ,IAAI,EAAE,OAAO;qBAChB;iBACJ;aACJ,CAAC,CAAC;YAEH,MAAM,iBAAiB,GAAG,gBAAgB,CAAC;gBACvC,GAAG,EAAE;oBACD,MAAM,EAAE;wBACJ,IAAI,EAAE,WAAW;qBACpB;iBACJ;aACJ,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YAEjE,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAE9B,aAAa,CAAC,cAAc,GAAG,iBAAiB,CAAC;YAEjD,MAAM,UAAU,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YACrD,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YAC/D,MAAM,cAAc,GAAG,gBAAgB,CAAC;gBACpC,GAAG,EAAE;oBACD,MAAM,EAAE;wBACJ,IAAI,EAAE,EAAE,cAAc,EAAE,eAAe,EAAE;wBACzC,IAAI,EAAE,EAAE,cAAc,EAAE,GAAG,EAAE;wBAC7B,SAAS,EAAE,UAAU;qBACxB;iBACJ;gBACD,QAAQ,EAAE,UAAU;aACvB,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YAEjE,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAEtC,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAE3C,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACtC,MAAM,cAAc,GAAG,gBAAgB,CAAC;gBACpC,GAAG,EAAE;oBACD,MAAM,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,SAAS,EAAE,UAAU;qBACxB;iBACJ;gBACD,KAAK,EAAE;oBACH,IAAI,EAAE,UAAU;iBACnB;aACJ,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YAEjE,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACrD,MAAM,cAAc,GAAG,gBAAgB,CAAC;gBACpC,GAAG,EAAE;oBACD,MAAM,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,SAAS,EAAE,UAAU;qBACxB;iBACJ;gBACD,KAAK,EAAE;oBACH,IAAI,EAAE,UAAU;oBAChB,GAAG,EAAE,GAAG;oBACR,MAAM,EAAE,aAAa;iBACxB;gBACD,QAAQ,EAAE,UAAU;aACvB,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YAEjE,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACrC,MAAM,OAAO,GAAG;gBACZ,IAAI,EAAE,uBAAuB;gBAC7B,QAAQ,EAAE,IAAI;aACjB,CAAC;YACF,MAAM,SAAS,GAAG;gBACd,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,IAAI;aACjB,CAAC;YACF,MAAM,SAAS,GAAG;gBACd,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,MAAM;aACnB,CAAC;YACF,MAAM,SAAS,GAAG;gBACd,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,MAAM;gBAChB,IAAI,EAAE,qCAAqC;aAC9C,CAAC;YAEF,MAAM,qBAAqB,GAAG;gBAC1B,UAAU,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;gBAC7C,OAAO;aACV,CAAC;YAEF,MAAM,mBAAmB,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;YAE7D,MAAM,sBAAsB,GAAG,EAAE,OAAO,EAAE,CAAC;YAE3C,MAAM,aAAa,GAAG,sBAAsB,EAAE,CAAC;YAE/C,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,qBAAqB,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,sBAAsB,EAAE,CAAC,CAAC;YAEjG,MAAM,UAAU,GAAG,UAAU,CAAC,SAAS,EAAE,aAAa,EAAE,qBAAqB,CAAC,CAAC;YAC/E,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;YAE3E,MAAM,aAAa,GAAG,UAAU,CAAC,SAAS,EAAE,aAAa,EAAE,sBAAsB,CAAC,CAAC;YACnF,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;YAE5D,MAAM,eAAe,GAAG,UAAU,CAAC,SAAS,EAAE,qBAAqB,EAAE,sBAAsB,CAAC,CAAC;YAC7F,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC;YAEzE,MAAM,4BAA4B,GAAG,UAAU,CAAC,SAAS,EAAE,qBAAqB,EAAE,qBAAqB,CAAC,CAAC;YACzG,MAAM,CAAC,4BAA4B,CAAC,CAAC,OAAO,CAAC,yDAAyD,CAAC,CAAC;YAExG,MAAM,8BAA8B,GAAG,UAAU,CAAC,SAAS,EAAE,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;YACzG,MAAM,CAAC,8BAA8B,CAAC,CAAC,OAAO,CAAC,0EAA0E,CAAC,CAAC;QAC/H,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACrC,MAAM,SAAS,GAAG;gBACd,IAAI,EAAE,oBAAoB;gBAC1B,QAAQ,EAAE,IAAI;aACjB,CAAC;YACF,MAAM,OAAO,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;YACxC,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,aAAa,GAAG,sBAAsB,CAAC;gBACzC,cAAc,EAAE,sBAAsB;aACzC,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,UAAU,CAAC,UAAU,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YAC3D,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACtC,MAAM,SAAS,GAAG;gBACd,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,IAAI;aACjB,CAAC;YACF,MAAM,SAAS,GAAG;gBACd,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,MAAM;aACnB,CAAC;YACF,MAAM,SAAS,GAAG;gBACd,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,MAAM;aACnB,CAAC;YAEF,MAAM,OAAO,GAAG;gBACZ,UAAU,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;aAChD,CAAC;YAEF,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,aAAa,GAAG,sBAAsB,CAAC;gBACzC,cAAc,EAAE,sBAAsB;aACzC,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,UAAU,CAAC,UAAU,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YAC3D,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YAClC,MAAM,IAAI,GAAG;gBACT,IAAI,EAAE,UAAU;aACnB,CAAC;YAEF,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC;YAEzB,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,aAAa,GAAG,sBAAsB,CAAC;gBACzC,cAAc,EAAE,sBAAsB;aACzC,CAAC,CAAC;YACH,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC3D,MAAM,IAAI,GAAG;gBACT,IAAI,EAAE,UAAU;aACnB,CAAC;YAEF,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC;YAEzB,MAAM,cAAc,GAAG,gBAAgB,CAAC;gBACpC,QAAQ,EAAE,UAAU;gBACpB,GAAG,EAAE;oBACD,MAAM,EAAE;wBACJ,IAAI,EAAE,UAAU;qBACnB;iBACJ;aACJ,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YAEjE,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACpD,MAAM,cAAc,GAAG,gBAAgB,CAAC;gBACpC,QAAQ,EAAE,UAAU;gBACpB,GAAG,EAAE;oBACD,MAAM,EAAE;wBACJ,IAAI,EAAE,UAAU;qBACnB;iBACJ;aACJ,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YAEjE,MAAM,GAAG,GAAG,UAAU,CAAC,iBAAiB,EAAE,aAAa,EAAE,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACrC,MAAM,cAAc,GAAG,gBAAgB,CAAC;gBACpC,QAAQ,EAAE,UAAU;aACvB,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,sBAAsB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YACjE,MAAM,IAAI,GAAG;gBACT,IAAI,EAAE,UAAU;aACnB,CAAC;YAEF,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC;YACzB,MAAM,GAAG,GAAG,UAAU,oBAAgB,aAAa,EAAE,OAAO,CAAC,CAAC;YAC9D,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;YACpE,MAAM,YAAY,GAAkB;gBAChC,QAAQ,EAAE;oBACN;wBACI,YAAY,EAAE,OAAO;wBACrB,UAAU,EAAE,IAAI;qBACnB;oBACD;wBACI,YAAY,EAAE,OAAO;wBACrB,UAAU,EAAE,IAAI;qBACnB;oBACD;wBACI,YAAY,EAAE,OAAO;wBACrB,UAAU,EAAE,IAAI;qBACnB;iBACJ;aACJ,CAAC;YAEF,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,aAAa,GAAG,sBAAsB,CAAC;gBACzC,cAAc,EAAE,sBAAsB;aACzC,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,oBAAoB,CAAC,YAAY,EAAE,aAAa,CAAC,IAAI,EAAE,CAAC;YAE9E,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5C,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAC3D,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5C,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;YACjE,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5C,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;YACxE,MAAM,YAAY,GAAkB;gBAChC,QAAQ,EAAE,EAAE;aACf,CAAC;YAEF,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,aAAa,GAAG,sBAAsB,CAAC;gBACzC,cAAc,EAAE,sBAAsB;aACzC,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,oBAAoB,CAAC,YAAY,EAAE,aAAa,CAAC,IAAI,EAAE,CAAC;YAE9E,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { buildMockActionContext, buildMockRequest } from '../../mock/mock-helper';\nimport { getUrlSync, getCategoriesUrlSync, PageType } from '../page-type-url-builder';\nimport { ICategoryPath } from '../../interfaces/ICategoryPathInterfaces';\n\ndescribe('page-type-url-builder', () => {\n    describe('App urls', () => {\n        it('Should generate a url registered in app', () => {\n            const requestContext = buildMockRequest({\n                app: {\n                    routes: {\n                        cart: '/cart',\n                        'sign-in': '/sign-in'\n                    }\n                }\n            });\n\n            const actionContext = buildMockActionContext({ requestContext });\n\n            const cartUrl = getUrlSync('cart', actionContext);\n            expect(cartUrl).toBe('/cart');\n\n            const signInUrl = getUrlSync('sign-in', actionContext);\n            expect(signInUrl).toBe('/sign-in');\n        });\n\n        it('Should respect new urls registered in app', () => {\n            const requestContext = buildMockRequest({\n                app: {\n                    routes: {\n                        cart: '/cart'\n                    }\n                }\n            });\n\n            const newRequestContext = buildMockRequest({\n                app: {\n                    routes: {\n                        cart: '/new-cart'\n                    }\n                }\n            });\n\n            const actionContext = buildMockActionContext({ requestContext });\n\n            const cartUrl = getUrlSync('cart', actionContext);\n            expect(cartUrl).toBe('/cart');\n\n            actionContext.requestContext = newRequestContext;\n\n            const newCartUrl = getUrlSync('cart', actionContext);\n            expect(newCartUrl).toBe('/new-cart');\n        });\n\n        it('Should generate a url registered in app with a sitePath', () => {\n            const requestContext = buildMockRequest({\n                app: {\n                    routes: {\n                        cart: { destinationUrl: '/contoso/cart' },\n                        home: { destinationUrl: '/' },\n                        'sign-in': '/sign-in'\n                    }\n                },\n                sitePath: '/contoso'\n            });\n\n            const actionContext = buildMockActionContext({ requestContext });\n\n            const cartUrl = getUrlSync('cart', actionContext);\n            expect(cartUrl).toBe('/contoso/cart');\n\n            const signInUrl = getUrlSync('sign-in', actionContext);\n            expect(signInUrl).toBe('/contoso/sign-in');\n\n            const homeUrl = getUrlSync('home', actionContext);\n            expect(homeUrl).toBe('/');\n        });\n    });\n    describe('query urls', () => {\n        it('override urls registerd in app', () => {\n            const requestContext = buildMockRequest({\n                app: {\n                    routes: {\n                        cart: '/cart',\n                        'sign-in': '/sign-in'\n                    }\n                },\n                query: {\n                    cart: '/my-cart'\n                }\n            });\n\n            const actionContext = buildMockActionContext({ requestContext });\n\n            const cartUrl = getUrlSync('cart', actionContext);\n            expect(cartUrl).toBe('/my-cart');\n        });\n\n        it('override urls registerd in app with site path', () => {\n            const requestContext = buildMockRequest({\n                app: {\n                    routes: {\n                        cart: '/cart',\n                        'sign-in': '/sign-in'\n                    }\n                },\n                query: {\n                    cart: '/my-cart',\n                    rdc: '1',\n                    domain: 'contoso.com'\n                },\n                sitePath: '/contoso'\n            });\n\n            const actionContext = buildMockActionContext({ requestContext });\n\n            const cartUrl = getUrlSync('cart', actionContext);\n            expect(cartUrl).toBe('/contoso/my-cart?domain=contoso.com');\n        });\n    });\n    describe('default urls', () => {\n        it('Should generate a product url', () => {\n            const product = {\n                Name: 'My Super Cool Product',\n                RecordId: 1234\n            };\n            const category1 = {\n                Name: 'Cat 1',\n                RecordId: 1234\n            };\n            const category2 = {\n                Name: 'Cat 2',\n                RecordId: '4321'\n            };\n            const category3 = {\n                Name: 'Cat 3',\n                RecordId: '9876',\n                Slug: '/cat-1/cat-2/cat-3/super-duper-slug'\n            };\n\n            const contextWithCategories = {\n                categories: [category1, category2, category3],\n                product\n            };\n\n            const contextWithCategory = { category: category3, product };\n\n            const contextWithoutCategory = { product };\n\n            const actionContext = buildMockActionContext();\n\n            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });\n            const actionContextWithSite = buildMockActionContext({ requestContext: requestContextWithSite });\n\n            const urlWithCat = getUrlSync('product', actionContext, contextWithCategories);\n            expect(urlWithCat).toBe('/cat-1/cat-2/cat-3/my-super-cool-product/1234.p');\n\n            const urlWithoutCat = getUrlSync('product', actionContext, contextWithoutCategory);\n            expect(urlWithoutCat).toBe('/my-super-cool-product/1234.p');\n\n            const urlWithSitePath = getUrlSync('product', actionContextWithSite, contextWithoutCategory);\n            expect(urlWithSitePath).toMatch('/contoso/my-super-cool-product/1234.p');\n\n            const urlWithSitePathAndCategories = getUrlSync('product', actionContextWithSite, contextWithCategories);\n            expect(urlWithSitePathAndCategories).toMatch('/contoso/cat-1/cat-2/cat-3/my-super-cool-product/1234.p');\n\n            const urlWithSitePathAndCategorySlug = getUrlSync('product', actionContextWithSite, contextWithCategory);\n            expect(urlWithSitePathAndCategorySlug).toMatch('/contoso/cat-1/cat-2/cat-3/super-duper-slug/my-super-cool-product/1234.p');\n        });\n        it('Should respect category slugs', () => {\n            const category3 = {\n                Slug: '/cat-1/cat-2/cat-3',\n                RecordId: 1234\n            };\n            const context = { category: category3 };\n            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });\n            const actionContext = buildMockActionContext({\n                requestContext: requestContextWithSite\n            });\n\n            const url = getUrlSync('category', actionContext, context);\n            expect(url).toBe('/contoso/cat-1/cat-2/cat-3/1234.c');\n        });\n        it('Should generate a category url', () => {\n            const category1 = {\n                Name: 'Cat 1',\n                RecordId: 1234\n            };\n            const category2 = {\n                Name: 'Cat 2',\n                RecordId: '4321'\n            };\n            const category3 = {\n                Name: 'Cat 3',\n                RecordId: '9876'\n            };\n\n            const context = {\n                categories: [category1, category2, category3]\n            };\n\n            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });\n            const actionContext = buildMockActionContext({\n                requestContext: requestContextWithSite\n            });\n\n            const url = getUrlSync('category', actionContext, context);\n            expect(url).toBe('/contoso/cat-1/cat-2/cat-3/9876.c');\n        });\n\n        it('Should generate a list url', () => {\n            const list = {\n                Name: 'List one'\n            };\n\n            const context = { list };\n\n            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });\n            const actionContext = buildMockActionContext({\n                requestContext: requestContextWithSite\n            });\n            const url = getUrlSync('list', actionContext, context);\n            expect(url).toBe('/contoso/list-one.l');\n        });\n\n        it('Should prevent users from overriding default routes', () => {\n            const list = {\n                Name: 'List one'\n            };\n\n            const context = { list };\n\n            const requestContext = buildMockRequest({\n                sitePath: '/contoso',\n                app: {\n                    routes: {\n                        list: '/my-cart'\n                    }\n                }\n            });\n\n            const actionContext = buildMockActionContext({ requestContext });\n\n            const url = getUrlSync('list', actionContext, context);\n            expect(url).toBe('/contoso/list-one.l');\n        });\n\n        it('Should return page type if no route is found', () => {\n            const requestContext = buildMockRequest({\n                sitePath: '/contoso',\n                app: {\n                    routes: {\n                        list: '/my-cart'\n                    }\n                }\n            });\n\n            const actionContext = buildMockActionContext({ requestContext });\n\n            const url = getUrlSync('not-a-real-page', actionContext, {});\n            expect(url).toBe('/contoso/not-a-real-page');\n        });\n\n        it('Should accept page type enums', () => {\n            const requestContext = buildMockRequest({\n                sitePath: '/contoso'\n            });\n\n            const actionContext = buildMockActionContext({ requestContext });\n            const list = {\n                Name: 'List one'\n            };\n\n            const context = { list };\n            const url = getUrlSync(PageType.List, actionContext, context);\n            expect(url).toBe('/contoso/list-one.l');\n        });\n\n        it('Validate categories URLs when list of seguiments is provided', () => {\n            const categoryPath: ICategoryPath = {\n                Segments: [\n                    {\n                        CategoryName: 'Cat 1',\n                        CategoryId: 1234\n                    },\n                    {\n                        CategoryName: 'Cat 2',\n                        CategoryId: 4321\n                    },\n                    {\n                        CategoryName: 'Cat 3',\n                        CategoryId: 9876\n                    }\n                ]\n            };\n\n            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });\n            const actionContext = buildMockActionContext({\n                requestContext: requestContextWithSite\n            });\n\n            const categoriesUrl = getCategoriesUrlSync(categoryPath, actionContext) || [];\n\n            expect(categoriesUrl.length).toBe(3);\n            expect(categoriesUrl[0].Name).toBe('Cat 1');\n            expect(categoriesUrl[0].Url).toBe('/contoso/cat-1/1234.c');\n            expect(categoriesUrl[1].Name).toBe('Cat 2');\n            expect(categoriesUrl[1].Url).toBe('/contoso/cat-1/cat-2/4321.c');\n            expect(categoriesUrl[2].Name).toBe('Cat 3');\n            expect(categoriesUrl[2].Url).toBe('/contoso/cat-1/cat-2/cat-3/9876.c');\n        });\n\n        it('Validate categories URLs when list of seguiments is not provided', () => {\n            const categoryPath: ICategoryPath = {\n                Segments: []\n            };\n\n            const requestContextWithSite = buildMockRequest({ sitePath: '/contoso' });\n            const actionContext = buildMockActionContext({\n                requestContext: requestContextWithSite\n            });\n\n            const categoriesUrl = getCategoriesUrlSync(categoryPath, actionContext) || [];\n\n            expect(categoriesUrl.length).toBe(0);\n        });\n    });\n});\n"]}