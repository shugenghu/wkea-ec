{"version":3,"file":"drag-and-drop-image.js","sourceRoot":"","sources":["../../../../src/utilities/drag-and-drop/drag-and-drop-image.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { CONTAINER_TYPE, ElementDataInfo, getRenderingHelper } from './drag-and-drop-utils';\n\ntype IconType = 'container' | 'module' | 'fragment' | 'notDroppable';\ntype IconInfo = { className: string; viewBox: string; iconType: IconType; isDroppable: boolean; d: string };\ntype IconTypeDictionary = Record<IconType, IconInfo>;\nconst ICON_TYPE: IconTypeDictionary = {\n    container: {\n        className: 'ms-container-icon',\n        d:\n            'M0 1664v-256h128v256H0zM256 0v128H0V0h256zM0 2048v-256h128v256H0zM1792 0v128h-256V0h256zM0 1280v-256h128v256H0zm640-896h768l384 640-384 640H640l-384-640 384-640zm696 1152l307-512-307-512H712l-307 512 307 512h624zM640 0v128H384V0h256zM0 896V640h128v256H0zM1024 0v128H768V0h256zm384 0v128h-256V0h256zm512 1792v-256h128v256h-128zm0-768V768h128v256h-128zm0 384v-256h128v256h-128zm0-768V384h128v256h-128zm0-640h128v256h-128V0zM0 512V256h128v256H0zm640 1536v-128h256v128H640zm-384 0v-128h256v128H256zm1152 0v-128h256v128h-256zm-384 0v-128h256v128h-256zm768 0v-128h256v128h-256z',\n        viewBox: '30 0 2048 2048',\n        iconType: 'container',\n        isDroppable: true\n    },\n    module: {\n        className: 'ms-module-icon',\n        d: 'M1536 128l512 896-512 896H512L0 1024l512-896h1024zm-74 1664l439-768-439-768H586l-439 768 439 768h876z',\n        viewBox: '30 0 2048 2048',\n        iconType: 'module',\n        isDroppable: true\n    },\n    fragment: {\n        className: 'ms-fragment-icon',\n        d:\n            'M768 896H256L0 448 256 0h512l256 448-256 448zM330 128L147 448l183 320h364l183-320-183-320H330zm-74 896h512l256 448-256 448H256L0 1472l256-448zm438 768l183-320-183-320H330l-183 320 183 320h364zm970-1280l256 448-256 448h-512L896 960l256-448h512zm-74 768l183-320-183-320h-364l-183 320 183 320h364z',\n        viewBox: '0 0 1920 1920',\n        iconType: 'fragment',\n        isDroppable: true\n    },\n    notDroppable: {\n        className: 'ms-not-droppable-icon',\n        d:\n            'M939 171q129 0 249 33t224 95 190 146 147 190 94 225 34 249q0 129-33 249t-95 224-146 191-190 147-225 94-249 34q-130 0-250-33t-224-95-190-147-147-190-94-224-34-250q0-129 33-249t95-224 147-190 190-147 224-94 250-34zm0 1740q111 0 213-28t192-81 162-126 125-162 81-191 29-214q0-110-28-212t-81-192-126-162-163-126-191-81-213-29q-111 0-213 28t-192 81-162 126-125 162-81 191-29 214q0 111 28 213t81 192 125 162 163 126 191 80 214 29zm-470-887h939v171H469v-171z',\n        viewBox: '20 170 1877 1877',\n        iconType: 'notDroppable',\n        isDroppable: false\n    }\n};\n// The styles for these classes are defined in base-page.tsx\nconst DRAG_IMAGE_CLASS_NAME = 'ms-drag-image';\nconst DRAG_ICON_BOX_CLASS_NAME = 'ms-drag-icon-box';\nconst DRAG_TEXT_BOX_CLASS_NAME = 'ms-drag-text-box';\nconst DRAG_TEXT_CONTENT_CLASS_NAME = 'ms-drag-text-content';\n// tslint:disable-next-line:no-http-string\nconst SVG_URL = 'http://www.w3.org/2000/svg';\n\n/**\n * Provides the drag and drop image control\n */\nexport class DragAndDropImage {\n    private dragImage: HTMLElement | null;\n    private transparentImage: HTMLElement | null;\n    private iconType: IconType | null;\n\n    constructor() {\n        this.dragImage = null;\n        this.transparentImage = null;\n        this.iconType = null;\n    }\n\n    /**\n     * Update the drag image position.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     */\n    public updatePosition = (x: number, y: number): void => {\n        if (this.dragImage) {\n            this.dragImage.style.display = '';\n            this.dragImage.style.left = `${x}px`;\n            this.dragImage.style.top = `${y}px`;\n        }\n    };\n\n    /**\n     * Hide image.\n     */\n    public hide = (): void => {\n        if (this.dragImage) {\n            this.dragImage.style.display = 'none';\n        }\n    };\n\n    /**\n     * Set transparent image to be used as the data transfer image.\n     * @returns {HTMLElement | null} The transparent image element.\n     */\n    public setTransparentImage = (): HTMLElement => {\n        this.transparentImage = document.createElement('div');\n        document.body.appendChild(this.transparentImage);\n        return this.transparentImage;\n    };\n\n    /**\n     * Check if the status of the image is droppable.\n     * @returns {boolean} If the current status of the image is droppable.\n     */\n    public isStatusDroppable = (): boolean => {\n        return !!this.dragImage && this.iconType !== 'notDroppable';\n    };\n\n    /**\n     * Check if the status of the image is not droppable.\n     * @returns {boolean} If the current status of the image is not droppable.\n     */\n    public isStatusNotDroppable = (): boolean => {\n        return !!this.dragImage && this.iconType === 'notDroppable';\n    };\n\n    /**\n     * Create or update the drop allowed image element if necessary.\n     * @param dragElementDataInfo The drag element data info.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     */\n    public setDropAllowedImage = (dragElementDataInfo: ElementDataInfo, x: number, y: number): void => {\n        this._setDragImage(this._getIconInfo(dragElementDataInfo), this._getImageName(dragElementDataInfo), x, y);\n    };\n\n    /**\n     * Create or update the drop not allowed image element if necessary.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     */\n    public setDropNotAllowedImage = (x: number, y: number): void => {\n        this._setDragImage(this._getIconInfo(), 'Move not allowed', x, y);\n    };\n\n    /**\n     * Clear the drag and drop image.\n     */\n    public clear = (): void => {\n        if (this.dragImage) {\n            this.dragImage.remove();\n        }\n        if (this.transparentImage) {\n            this.transparentImage.remove();\n        }\n        this.dragImage = null;\n        this.transparentImage = null;\n        this.iconType = null;\n    };\n\n    /**\n     * Get the name to be displayed on the drag image.\n     * @param dragElementDataInfo The drag element data info.\n     * @returns {string} The name to be displayed on the drag image.\n     */\n    private _getImageName(dragElementDataInfo: ElementDataInfo): string {\n        let dragImageName = dragElementDataInfo.dataInfo.friendlyName;\n        if (dragElementDataInfo.dataInfo.isFragment) {\n            const helper = getRenderingHelper();\n            if (helper && helper.getFragmentDisplayName) {\n                dragImageName = helper.getFragmentDisplayName(dragElementDataInfo.dataInfo.id);\n            }\n        }\n        return dragImageName;\n    }\n\n    /**\n     * Get the information about the icon to be used inside the drag image.\n     * @param dragElementDataInfo The drag element data info.\n     * @returns {IconInfo} The info about the icon to be used inside the drag image.\n     */\n    private _getIconInfo(dragElementDataInfo?: ElementDataInfo): IconInfo {\n        if (!dragElementDataInfo) {\n            return ICON_TYPE.notDroppable;\n        } else if (dragElementDataInfo.dataInfo.isFragment || dragElementDataInfo.dataInfo.isFragmentModule) {\n            return ICON_TYPE.fragment;\n        } else if (dragElementDataInfo.dataInfo.moduleType === CONTAINER_TYPE) {\n            return ICON_TYPE.container;\n        } else {\n            return ICON_TYPE.module;\n        }\n    }\n\n    /**\n     * Create or update the drag image element if necessary.\n     * @param iconInfo The info about the icon to be displayed in the drag image.\n     * @param textContent The text content to be placed inside the text box.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     */\n    private _setDragImage = (iconInfo: IconInfo, textContent: string, x: number, y: number): void => {\n        if (!this.dragImage) {\n            this.dragImage = this._createDragImage(iconInfo, textContent, x, y);\n            document.body.appendChild(this.dragImage);\n        } else if (this.iconType && this.iconType !== iconInfo.iconType) {\n            const droppableClassName = iconInfo.isDroppable ? 'droppable' : 'not-droppable';\n            const textBox = this.dragImage.querySelector(`.${DRAG_TEXT_BOX_CLASS_NAME}`);\n            if (textBox) {\n                const text = textBox.querySelector(`.${DRAG_TEXT_CONTENT_CLASS_NAME}`);\n                if (text) {\n                    text.className = `${DRAG_TEXT_CONTENT_CLASS_NAME} ${droppableClassName}`;\n                    text.textContent = textContent;\n                    textBox.className = `${DRAG_TEXT_BOX_CLASS_NAME} ${droppableClassName}`;\n                }\n            }\n            const iconBox = this.dragImage.querySelector(`.${DRAG_ICON_BOX_CLASS_NAME}`);\n            if (iconBox) {\n                iconBox.className = `${DRAG_ICON_BOX_CLASS_NAME} ${droppableClassName}`;\n                const iconPath = iconBox.querySelector(`.${ICON_TYPE[this.iconType].className}`);\n                if (iconPath) {\n                    iconPath.setAttribute('class', iconInfo.className);\n                }\n                const iconSVG = iconBox.querySelector(`svg`);\n                if (iconSVG) {\n                    iconSVG.setAttribute('viewBox', iconInfo.viewBox);\n                }\n            }\n        }\n        this.iconType = iconInfo.iconType;\n    };\n\n    /**\n     * Create the drag image element.\n     * @param iconInfo The info about the icon to be displayed in the drag image.\n     * @param textContent The text content to be placed inside the text box.\n     * @param x The position of the image on the x-axis.\n     * @param y The position of the image on the y-axis.\n     * @returns {HTMLElement} The drag image element.\n     */\n    private _createDragImage = (iconInfo: IconInfo, textContent: string, x: number, y: number): HTMLElement => {\n        const image = document.createElement('div');\n        image.className = DRAG_IMAGE_CLASS_NAME;\n        image.style.left = `${x}px`;\n        image.style.top = `${y}px`;\n\n        const iconBox = this._createDragIcon(iconInfo);\n        const textBox = this._createDragText(textContent, iconInfo.isDroppable);\n\n        image.appendChild(iconBox);\n        image.appendChild(textBox);\n\n        return image;\n    };\n\n    /**\n     * Create the icon box for the drag image element.\n     * @param iconInfo The info about the icon to be displayed in the drag image.\n     * @returns {HTMLElement} The drag icon element.\n     */\n    private _createDragIcon = (iconInfo: IconInfo): HTMLElement => {\n        const iconBox = document.createElement('div');\n        iconBox.className = `${DRAG_ICON_BOX_CLASS_NAME} ${iconInfo.isDroppable ? 'droppable' : 'not-droppable'}`;\n\n        const svg = document.createElementNS(SVG_URL, 'svg');\n        svg.setAttribute('viewBox', iconInfo.viewBox);\n\n        const path = document.createElementNS(SVG_URL, 'path');\n        path.setAttribute('class', iconInfo.className);\n        path.setAttribute('d', iconInfo.d);\n\n        svg.appendChild(path);\n        iconBox.appendChild(svg);\n\n        return iconBox;\n    };\n\n    /**\n     * Create the drag image element.\n     * @param textContent The text content to be placed inside the text box.\n     * @param isDroppable If the textbox is for droppable elements.\n     * @returns {HTMLElement} The drag text content.\n     */\n    private _createDragText = (textContent: string, isDroppable: boolean): HTMLElement => {\n        const droppableClassName = isDroppable ? 'droppable' : 'not-droppable';\n        const textBox = document.createElement('div');\n        textBox.className = `${DRAG_TEXT_BOX_CLASS_NAME} ${droppableClassName}`;\n\n        const text = document.createElement('p');\n        text.className = `${DRAG_TEXT_CONTENT_CLASS_NAME} ${droppableClassName}`;\n        text.textContent = textContent;\n\n        textBox.appendChild(text);\n\n        return textBox;\n    };\n}\nconst dragAndDropImage = new DragAndDropImage();\nexport default dragAndDropImage;\n"]}