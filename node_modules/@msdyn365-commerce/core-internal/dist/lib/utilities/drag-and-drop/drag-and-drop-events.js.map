{"version":3,"file":"drag-and-drop-events.js","sourceRoot":"","sources":["../../../../src/utilities/drag-and-drop/drag-and-drop-events.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { get as _get, has as _has, set as _set } from 'lodash';\nimport { IAny, IDictionary } from '../../interfaces';\nimport { IRenderingHelper } from '../../interfaces/IRenderingHelper';\nimport dragAndDropImage from './drag-and-drop-image';\nimport dragAndDropPlaceholder from './drag-and-drop-placehoder';\nimport {\n    cleanDataInfo,\n    ElementDataInfo,\n    EMPTY_SLOT_TYPE_NAME,\n    getElementDataInfoById,\n    getElementDataInfoByTarget,\n    getModuleById,\n    getRenderingHelper,\n    getRootModule,\n    updateAddModuleInnerContainerClass\n} from './drag-and-drop-utils';\n\n/**\n * Provides the drag and drop events implementation\n */\nexport class DragAndDropEvents {\n    private cache: IDictionary<IAny>;\n    private dragElement: ElementDataInfo;\n    private dropElement: ElementDataInfo;\n    private isCursorOnDroppableArea: boolean;\n    private isDragging: boolean;\n    private renderingHelper: IRenderingHelper | undefined;\n\n    constructor() {\n        this.cache = {};\n        this.dragElement = cleanDataInfo();\n        this.dropElement = cleanDataInfo();\n        this.isCursorOnDroppableArea = false;\n        this.isDragging = false;\n    }\n\n    /**\n     * Set draggable events for a specific module.\n     * @param sourceModuleId The module to be set as draggable.\n     */\n    public setModuleAsDraggable = (sourceModuleId: string): void => {\n        this.renderingHelper = getRenderingHelper();\n        if (this.renderingHelper) {\n            dragAndDropPlaceholder.setRenderingHelper(this.renderingHelper);\n        }\n        this._setRootModuleAsDroppable();\n\n        const module = getModuleById(sourceModuleId);\n        if (module) {\n            module.addEventListener('dragstart', this._onDragStart);\n            module.addEventListener('drag', this._onDrag);\n            module.addEventListener('dragend', this._onDragEnd);\n            module.setAttribute('draggable', 'true');\n        }\n    };\n\n    /**\n     * Clear cache object.\n     */\n    private _clearCache = (): void => {\n        this.cache = {};\n    };\n\n    /**\n     * Check if cache has the information whether or not a module can be dropped in parent container.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     * @returns {boolean} Returns true cache has the information whether or not a module can be dropped in parent container. Otherwise returns false.\n     */\n    private _cacheHasIsDroppableInfo = (moduleId: string, parentId: string, slotId: string): boolean => {\n        return _has(this.cache, this._getCacheKey(moduleId, parentId, slotId));\n    };\n\n    /**\n     * Return whether or not a module can be dropped in parent container.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     * @returns {boolean | unknown} Returns whether or not a module can be dropped in parent container.\n     */\n    private _isModuleDroppable = (moduleId: string, parentId: string, slotId: string): boolean | unknown => {\n        if (!parentId || !moduleId || !slotId) {\n            return false;\n        }\n        this._checkIsDroppableAndAddToCache(moduleId, parentId, slotId);\n        return _get(this.cache, this._getCacheKey(moduleId, parentId, slotId), false);\n    };\n\n    /**\n     * Set whether or not a module can be dropped in parent container.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     */\n    private _setModuleIsDroppable = (moduleId: string, parentId: string, slotId: string, canBeDrop: boolean): void => {\n        _set(this.cache, this._getCacheKey(moduleId, parentId, slotId), canBeDrop);\n    };\n\n    /**\n     * Create a key to cache information whether or not a module is droppable in parent container.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     * @returns {string} Returns the cache key.\n     */\n    private _getCacheKey = (moduleId: string, parentId: string, slotId: string): string => {\n        return `${moduleId}_${parentId}_${slotId}`;\n    };\n\n    /**\n     * Check if module can be dropped in parent container and cache the information.\n     * @param moduleId The module id.\n     * @param parentId The parent container id.\n     * @param slotId The slot id.\n     */\n    private _checkIsDroppableAndAddToCache = (moduleId: string, parentId: string, slotId: string): void => {\n        if (!this._cacheHasIsDroppableInfo(moduleId, parentId, slotId)) {\n            const elementDataInfo = getElementDataInfoById(parentId);\n            if (elementDataInfo.dataInfo.isFragment || elementDataInfo.dataInfo.isFragmentModule) {\n                this._setModuleIsDroppable(moduleId, parentId, slotId, false);\n            } else {\n                const isDroppable = this.renderingHelper?.isDroppable(moduleId, parentId, slotId) || false;\n                this._setModuleIsDroppable(moduleId, parentId, slotId, isDroppable);\n            }\n        }\n    };\n\n    /**\n     * Handles the on drag over event for containers.\n     * @param e The react drag event.\n     */\n    private _onDragOver = (e: Event): void => {\n        if (!this.isDragging) {\n            return;\n        }\n\n        e.preventDefault();\n        this.isCursorOnDroppableArea = true;\n        const dragEvent = <DragEvent>e;\n        const elementDataInfo = getElementDataInfoByTarget(<HTMLElement>e.target);\n        if (elementDataInfo.dataInfo.typeName === EMPTY_SLOT_TYPE_NAME) {\n            dragAndDropImage.updatePosition(dragEvent.pageX, dragEvent.pageY);\n            return;\n        }\n\n        this.dropElement = elementDataInfo;\n        if (this._isModuleDroppable(this.dragElement.dataInfo.id, this.dropElement.dataInfo.parentId, this.dropElement.dataInfo.slotId)) {\n            dragAndDropPlaceholder.setPlaceHolderOnPosition(this.dragElement, this.dropElement, dragEvent.clientY);\n            if (dragAndDropImage.isStatusNotDroppable()) {\n                dragAndDropImage.setDropAllowedImage(this.dragElement, dragEvent.pageX, dragEvent.pageY);\n            }\n        } else if (dragAndDropImage.isStatusDroppable()) {\n            dragAndDropPlaceholder.clearAll();\n            dragAndDropImage.setDropNotAllowedImage(dragEvent.pageX, dragEvent.pageY);\n        }\n        dragAndDropImage.updatePosition(dragEvent.pageX, dragEvent.pageY);\n        this.isCursorOnDroppableArea = false;\n    };\n\n    /**\n     * Handles the on drag enter event for containers.\n     * @param e The react drag event.\n     */\n    private _onDragEnter = (e: Event): void => {\n        if (this.isDragging) {\n            e.preventDefault();\n            this.isCursorOnDroppableArea = true;\n            const elementDataInfo = getElementDataInfoByTarget(<HTMLElement>e.target);\n            if (\n                elementDataInfo.dataInfo.typeName === EMPTY_SLOT_TYPE_NAME &&\n                elementDataInfo.element &&\n                elementDataInfo.element.firstElementChild\n            ) {\n                const dragEvent = <DragEvent>e;\n                // Remove placeholder from canvas and from site builder.\n                dragAndDropPlaceholder.clearAll();\n\n                if (this._isModuleDroppable(this.dragElement.dataInfo.id, elementDataInfo.dataInfo.id, elementDataInfo.dataInfo.slotId)) {\n                    this.dropElement = elementDataInfo;\n                    // Get the container inner element and update its class.\n                    updateAddModuleInnerContainerClass(\n                        elementDataInfo.element.firstElementChild,\n                        this.dragElement.dataInfo.isFragment ? 'InsertFragment' : 'InsertModule'\n                    );\n                    // Add placeholder to position 0 on site builder.\n                    this.renderingHelper?.onDrag(elementDataInfo.dataInfo.id, 0, elementDataInfo.dataInfo.slotId);\n\n                    dragAndDropImage.setDropAllowedImage(this.dragElement, dragEvent.pageX, dragEvent.pageY);\n                } else {\n                    // Get the container inner element and update its class.\n                    updateAddModuleInnerContainerClass(elementDataInfo.element.firstElementChild, 'MoveNotAllowed');\n                    if (dragAndDropImage.isStatusDroppable()) {\n                        dragAndDropImage.setDropNotAllowedImage(dragEvent.pageX, dragEvent.pageY);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Handles the on drag leave event for containers.\n     * @param e The react drag event.\n     */\n    private _onDragLeave = (e: Event): void => {\n        if (this.isDragging) {\n            e.preventDefault();\n            const elementDataInfo = getElementDataInfoByTarget(<HTMLElement>e.target);\n            if (\n                elementDataInfo.dataInfo.typeName === EMPTY_SLOT_TYPE_NAME &&\n                elementDataInfo.element &&\n                elementDataInfo.element.firstElementChild\n            ) {\n                updateAddModuleInnerContainerClass(elementDataInfo.element.firstElementChild);\n            }\n            this.isCursorOnDroppableArea = false;\n        }\n    };\n\n    /**\n     * Handles the on drop event for containers.\n     * @param e The react drag event.\n     */\n    private _onDrop = (e: Event): void => {\n        if (this.isDragging) {\n            e.preventDefault();\n            if (this.dropElement.dataInfo.typeName === EMPTY_SLOT_TYPE_NAME) {\n                if (this._isModuleDroppable(this.dragElement.dataInfo.id, this.dropElement.dataInfo.id, this.dropElement.dataInfo.slotId)) {\n                    this.renderingHelper?.onDrop(\n                        this.dragElement.dataInfo.id,\n                        this.dropElement.dataInfo.id,\n                        0,\n                        this.dropElement.dataInfo.slotId\n                    );\n                }\n                if (this.dropElement.element && this.dropElement.element.firstElementChild) {\n                    updateAddModuleInnerContainerClass(this.dropElement.element.firstElementChild);\n                }\n            } else {\n                const placeholderInfo = dragAndDropPlaceholder.getPlaceholder();\n                if (placeholderInfo) {\n                    const { moduleId, parentId, index, slotId } = placeholderInfo;\n                    if (index >= 0 && this._isModuleDroppable(moduleId, parentId, slotId)) {\n                        this.renderingHelper?.onDrop(moduleId, parentId, index, slotId);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Remove draggable attributes and events.\n     * @param moduleId The module to have attributes removed.\n     */\n    private _removeDraggableEvents = (moduleId: string): void => {\n        if (moduleId) {\n            const draggableModule = getModuleById(moduleId);\n            if (draggableModule) {\n                draggableModule.removeEventListener('dragstart', this._onDragStart);\n                draggableModule.removeEventListener('drag', this._onDrag);\n                draggableModule.removeEventListener('dragend', this._onDragEnd);\n                draggableModule.removeAttribute('draggable');\n            }\n        }\n    };\n\n    /**\n     * Handles the drag event.\n     * @param e The drag event.\n     */\n    private _onDrag = (e: Event): void => {\n        if (!this.isDragging || !this.isCursorOnDroppableArea) {\n            dragAndDropImage.hide();\n        }\n    };\n\n    /**\n     * Handles the drag start event.\n     * @param e The drag event.\n     */\n    // tslint:disable-next-line:no-any\n    private _onDragStart = (e: Event): void => {\n        const dragEvent = <DragEvent>e;\n        this.isDragging = true;\n        this.isCursorOnDroppableArea = true;\n        this.dragElement = getElementDataInfoByTarget(<HTMLElement>e.target);\n        dragAndDropImage.setDropAllowedImage(this.dragElement, dragEvent.pageX, dragEvent.pageY);\n        // Set drag image to a empty div.\n        // This prevents the ghost image from being displayed.\n        dragEvent.dataTransfer?.setDragImage(dragAndDropImage.setTransparentImage(), 0, 0);\n    };\n\n    /**\n     * Handles the drag end event.\n     * @param e The drag event.\n     */\n    private _onDragEnd = (e: Event): void => {\n        this.isDragging = false;\n        this.isCursorOnDroppableArea = false;\n        // remove draggable events\n        this._removeDraggableEvents(this.dragElement.dataInfo.id);\n        this._removeDroppableEvents();\n        this._clearAllCache();\n    };\n\n    /**\n     * Clear all cache information.\n     */\n    private _clearAllCache = (): void => {\n        this.dragElement = cleanDataInfo();\n        this.dropElement = cleanDataInfo();\n        this.isDragging = false;\n        this.isCursorOnDroppableArea = false;\n        this._clearCache();\n        dragAndDropPlaceholder.clearAll();\n        dragAndDropImage.clear();\n    };\n\n    /**\n     * Set droppable events for the root module.\n     */\n    private _setRootModuleAsDroppable = (): void => {\n        const droppableModule = getRootModule();\n        if (droppableModule) {\n            droppableModule.addEventListener('dragenter', this._onDragEnter);\n            droppableModule.addEventListener('dragleave', this._onDragLeave);\n            droppableModule.addEventListener('dragover', this._onDragOver);\n            droppableModule.addEventListener('drop', this._onDrop);\n        }\n    };\n\n    /**\n     * Remove droppable events.\n     */\n    private _removeDroppableEvents = (): void => {\n        const droppableModule = getRootModule();\n        if (droppableModule) {\n            droppableModule.removeEventListener('dragenter', this._onDragEnter);\n            droppableModule.removeEventListener('dragleave', this._onDragLeave);\n            droppableModule.removeEventListener('dragover', this._onDragOver);\n            droppableModule.removeEventListener('drop', this._onDrop);\n        }\n    };\n}\nconst dragAndDropEvents = new DragAndDropEvents();\nexport default dragAndDropEvents;\n"]}