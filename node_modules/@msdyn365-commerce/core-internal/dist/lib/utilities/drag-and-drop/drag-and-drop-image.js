/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { CONTAINER_TYPE, getRenderingHelper } from './drag-and-drop-utils';
const ICON_TYPE = {
    container: {
        className: 'ms-container-icon',
        d: 'M0 1664v-256h128v256H0zM256 0v128H0V0h256zM0 2048v-256h128v256H0zM1792 0v128h-256V0h256zM0 1280v-256h128v256H0zm640-896h768l384 640-384 640H640l-384-640 384-640zm696 1152l307-512-307-512H712l-307 512 307 512h624zM640 0v128H384V0h256zM0 896V640h128v256H0zM1024 0v128H768V0h256zm384 0v128h-256V0h256zm512 1792v-256h128v256h-128zm0-768V768h128v256h-128zm0 384v-256h128v256h-128zm0-768V384h128v256h-128zm0-640h128v256h-128V0zM0 512V256h128v256H0zm640 1536v-128h256v128H640zm-384 0v-128h256v128H256zm1152 0v-128h256v128h-256zm-384 0v-128h256v128h-256zm768 0v-128h256v128h-256z',
        viewBox: '30 0 2048 2048',
        iconType: 'container',
        isDroppable: true
    },
    module: {
        className: 'ms-module-icon',
        d: 'M1536 128l512 896-512 896H512L0 1024l512-896h1024zm-74 1664l439-768-439-768H586l-439 768 439 768h876z',
        viewBox: '30 0 2048 2048',
        iconType: 'module',
        isDroppable: true
    },
    fragment: {
        className: 'ms-fragment-icon',
        d: 'M768 896H256L0 448 256 0h512l256 448-256 448zM330 128L147 448l183 320h364l183-320-183-320H330zm-74 896h512l256 448-256 448H256L0 1472l256-448zm438 768l183-320-183-320H330l-183 320 183 320h364zm970-1280l256 448-256 448h-512L896 960l256-448h512zm-74 768l183-320-183-320h-364l-183 320 183 320h364z',
        viewBox: '0 0 1920 1920',
        iconType: 'fragment',
        isDroppable: true
    },
    notDroppable: {
        className: 'ms-not-droppable-icon',
        d: 'M939 171q129 0 249 33t224 95 190 146 147 190 94 225 34 249q0 129-33 249t-95 224-146 191-190 147-225 94-249 34q-130 0-250-33t-224-95-190-147-147-190-94-224-34-250q0-129 33-249t95-224 147-190 190-147 224-94 250-34zm0 1740q111 0 213-28t192-81 162-126 125-162 81-191 29-214q0-110-28-212t-81-192-126-162-163-126-191-81-213-29q-111 0-213 28t-192 81-162 126-125 162-81 191-29 214q0 111 28 213t81 192 125 162 163 126 191 80 214 29zm-470-887h939v171H469v-171z',
        viewBox: '20 170 1877 1877',
        iconType: 'notDroppable',
        isDroppable: false
    }
};
// The styles for these classes are defined in base-page.tsx
const DRAG_IMAGE_CLASS_NAME = 'ms-drag-image';
const DRAG_ICON_BOX_CLASS_NAME = 'ms-drag-icon-box';
const DRAG_TEXT_BOX_CLASS_NAME = 'ms-drag-text-box';
const DRAG_TEXT_CONTENT_CLASS_NAME = 'ms-drag-text-content';
// tslint:disable-next-line:no-http-string
const SVG_URL = 'http://www.w3.org/2000/svg';
/**
 * Provides the drag and drop image control
 */
export class DragAndDropImage {
    constructor() {
        /**
         * Update the drag image position.
         * @param x The position of the image on the x-axis.
         * @param y The position of the image on the y-axis.
         */
        this.updatePosition = (x, y) => {
            if (this.dragImage) {
                this.dragImage.style.display = '';
                this.dragImage.style.left = `${x}px`;
                this.dragImage.style.top = `${y}px`;
            }
        };
        /**
         * Hide image.
         */
        this.hide = () => {
            if (this.dragImage) {
                this.dragImage.style.display = 'none';
            }
        };
        /**
         * Set transparent image to be used as the data transfer image.
         * @returns {HTMLElement | null} The transparent image element.
         */
        this.setTransparentImage = () => {
            this.transparentImage = document.createElement('div');
            document.body.appendChild(this.transparentImage);
            return this.transparentImage;
        };
        /**
         * Check if the status of the image is droppable.
         * @returns {boolean} If the current status of the image is droppable.
         */
        this.isStatusDroppable = () => {
            return !!this.dragImage && this.iconType !== 'notDroppable';
        };
        /**
         * Check if the status of the image is not droppable.
         * @returns {boolean} If the current status of the image is not droppable.
         */
        this.isStatusNotDroppable = () => {
            return !!this.dragImage && this.iconType === 'notDroppable';
        };
        /**
         * Create or update the drop allowed image element if necessary.
         * @param dragElementDataInfo The drag element data info.
         * @param x The position of the image on the x-axis.
         * @param y The position of the image on the y-axis.
         */
        this.setDropAllowedImage = (dragElementDataInfo, x, y) => {
            this._setDragImage(this._getIconInfo(dragElementDataInfo), this._getImageName(dragElementDataInfo), x, y);
        };
        /**
         * Create or update the drop not allowed image element if necessary.
         * @param x The position of the image on the x-axis.
         * @param y The position of the image on the y-axis.
         */
        this.setDropNotAllowedImage = (x, y) => {
            this._setDragImage(this._getIconInfo(), 'Move not allowed', x, y);
        };
        /**
         * Clear the drag and drop image.
         */
        this.clear = () => {
            if (this.dragImage) {
                this.dragImage.remove();
            }
            if (this.transparentImage) {
                this.transparentImage.remove();
            }
            this.dragImage = null;
            this.transparentImage = null;
            this.iconType = null;
        };
        /**
         * Create or update the drag image element if necessary.
         * @param iconInfo The info about the icon to be displayed in the drag image.
         * @param textContent The text content to be placed inside the text box.
         * @param x The position of the image on the x-axis.
         * @param y The position of the image on the y-axis.
         */
        this._setDragImage = (iconInfo, textContent, x, y) => {
            if (!this.dragImage) {
                this.dragImage = this._createDragImage(iconInfo, textContent, x, y);
                document.body.appendChild(this.dragImage);
            }
            else if (this.iconType && this.iconType !== iconInfo.iconType) {
                const droppableClassName = iconInfo.isDroppable ? 'droppable' : 'not-droppable';
                const textBox = this.dragImage.querySelector(`.${DRAG_TEXT_BOX_CLASS_NAME}`);
                if (textBox) {
                    const text = textBox.querySelector(`.${DRAG_TEXT_CONTENT_CLASS_NAME}`);
                    if (text) {
                        text.className = `${DRAG_TEXT_CONTENT_CLASS_NAME} ${droppableClassName}`;
                        text.textContent = textContent;
                        textBox.className = `${DRAG_TEXT_BOX_CLASS_NAME} ${droppableClassName}`;
                    }
                }
                const iconBox = this.dragImage.querySelector(`.${DRAG_ICON_BOX_CLASS_NAME}`);
                if (iconBox) {
                    iconBox.className = `${DRAG_ICON_BOX_CLASS_NAME} ${droppableClassName}`;
                    const iconPath = iconBox.querySelector(`.${ICON_TYPE[this.iconType].className}`);
                    if (iconPath) {
                        iconPath.setAttribute('class', iconInfo.className);
                    }
                    const iconSVG = iconBox.querySelector(`svg`);
                    if (iconSVG) {
                        iconSVG.setAttribute('viewBox', iconInfo.viewBox);
                    }
                }
            }
            this.iconType = iconInfo.iconType;
        };
        /**
         * Create the drag image element.
         * @param iconInfo The info about the icon to be displayed in the drag image.
         * @param textContent The text content to be placed inside the text box.
         * @param x The position of the image on the x-axis.
         * @param y The position of the image on the y-axis.
         * @returns {HTMLElement} The drag image element.
         */
        this._createDragImage = (iconInfo, textContent, x, y) => {
            const image = document.createElement('div');
            image.className = DRAG_IMAGE_CLASS_NAME;
            image.style.left = `${x}px`;
            image.style.top = `${y}px`;
            const iconBox = this._createDragIcon(iconInfo);
            const textBox = this._createDragText(textContent, iconInfo.isDroppable);
            image.appendChild(iconBox);
            image.appendChild(textBox);
            return image;
        };
        /**
         * Create the icon box for the drag image element.
         * @param iconInfo The info about the icon to be displayed in the drag image.
         * @returns {HTMLElement} The drag icon element.
         */
        this._createDragIcon = (iconInfo) => {
            const iconBox = document.createElement('div');
            iconBox.className = `${DRAG_ICON_BOX_CLASS_NAME} ${iconInfo.isDroppable ? 'droppable' : 'not-droppable'}`;
            const svg = document.createElementNS(SVG_URL, 'svg');
            svg.setAttribute('viewBox', iconInfo.viewBox);
            const path = document.createElementNS(SVG_URL, 'path');
            path.setAttribute('class', iconInfo.className);
            path.setAttribute('d', iconInfo.d);
            svg.appendChild(path);
            iconBox.appendChild(svg);
            return iconBox;
        };
        /**
         * Create the drag image element.
         * @param textContent The text content to be placed inside the text box.
         * @param isDroppable If the textbox is for droppable elements.
         * @returns {HTMLElement} The drag text content.
         */
        this._createDragText = (textContent, isDroppable) => {
            const droppableClassName = isDroppable ? 'droppable' : 'not-droppable';
            const textBox = document.createElement('div');
            textBox.className = `${DRAG_TEXT_BOX_CLASS_NAME} ${droppableClassName}`;
            const text = document.createElement('p');
            text.className = `${DRAG_TEXT_CONTENT_CLASS_NAME} ${droppableClassName}`;
            text.textContent = textContent;
            textBox.appendChild(text);
            return textBox;
        };
        this.dragImage = null;
        this.transparentImage = null;
        this.iconType = null;
    }
    /**
     * Get the name to be displayed on the drag image.
     * @param dragElementDataInfo The drag element data info.
     * @returns {string} The name to be displayed on the drag image.
     */
    _getImageName(dragElementDataInfo) {
        let dragImageName = dragElementDataInfo.dataInfo.friendlyName;
        if (dragElementDataInfo.dataInfo.isFragment) {
            const helper = getRenderingHelper();
            if (helper && helper.getFragmentDisplayName) {
                dragImageName = helper.getFragmentDisplayName(dragElementDataInfo.dataInfo.id);
            }
        }
        return dragImageName;
    }
    /**
     * Get the information about the icon to be used inside the drag image.
     * @param dragElementDataInfo The drag element data info.
     * @returns {IconInfo} The info about the icon to be used inside the drag image.
     */
    _getIconInfo(dragElementDataInfo) {
        if (!dragElementDataInfo) {
            return ICON_TYPE.notDroppable;
        }
        else if (dragElementDataInfo.dataInfo.isFragment || dragElementDataInfo.dataInfo.isFragmentModule) {
            return ICON_TYPE.fragment;
        }
        else if (dragElementDataInfo.dataInfo.moduleType === CONTAINER_TYPE) {
            return ICON_TYPE.container;
        }
        else {
            return ICON_TYPE.module;
        }
    }
}
const dragAndDropImage = new DragAndDropImage();
export default dragAndDropImage;
//# sourceMappingURL=drag-and-drop-image.js.map