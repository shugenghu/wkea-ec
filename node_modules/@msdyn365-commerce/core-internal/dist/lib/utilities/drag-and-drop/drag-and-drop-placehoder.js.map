{"version":3,"file":"drag-and-drop-placehoder.js","sourceRoot":"","sources":["../../../../src/utilities/drag-and-drop/drag-and-drop-placehoder.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\nimport { isEqual as _isEqual } from 'lodash';\nimport { IRenderingHelper } from '../../interfaces/IRenderingHelper';\nimport {\n    ElementDataInfo,\n    getAllAddModuleBoxes,\n    getElementDataInfo,\n    getElementDataInfoById,\n    getModuleById,\n    getModulesByParentIdAndSlotId,\n    updateAddModuleInnerContainerClass\n} from './drag-and-drop-utils';\nconst PLACEHOLDER_TOP_CLASS_NAME = 'ms-drag-placeholder-top';\nconst PLACEHOLDER_BOTTOM_CLASS_NAME = 'ms-drag-placeholder-bottom';\n\nexport type PlaceHolderPlacement = {\n    moduleId: string;\n    parentId: string;\n    slotId: string;\n    index: number;\n    relativeIndex: number;\n    placeBottom: boolean;\n};\n\n/**\n * Provides the drag and drop events implementation\n */\nexport class DragAndDropPlaceholder {\n    private placement: PlaceHolderPlacement | null;\n    private moduleElement: HTMLElement | null;\n    private addModuleBoxes: ElementDataInfo[] | null;\n    private renderingHelper: IRenderingHelper | undefined;\n\n    constructor() {\n        this.placement = null;\n        this.moduleElement = null;\n        this.addModuleBoxes = null;\n    }\n\n    /**\n     * Return the placeholder information.\n     */\n    public getPlaceholder = (): PlaceHolderPlacement | null => {\n        return this.placement;\n    };\n\n    /**\n     * Clear placeholder.\n     */\n    public clear = (): void => {\n        this._removePlaceholderFromElement();\n        this._setAllAddModuleBoxesToInitialState();\n        this.placement = null;\n        this.moduleElement = null;\n        this.addModuleBoxes = null;\n    };\n\n    /**\n     * Clear placeholder on site builder and SDK.\n     */\n    public clearAll = (): void => {\n        this.clear();\n        this.renderingHelper?.removePlaceholder();\n    };\n\n    /**\n     * Set rendering helper to be used when calling site builder APIs.\n     * @param renderingHelper The rendring helper interface.\n     */\n    public setRenderingHelper = (renderingHelper: IRenderingHelper): void => {\n        this.renderingHelper = renderingHelper;\n    };\n\n    /**\n     * Move placeholder to a specific position inside a specific container.\n     * @param parentId The module id where the module/container should to be dropped\n     * @param index The index position for the module drop.\n     * @param slotId The slot id where the module/container should to be dropped.\n     * @param moduleId The module id of the element being dropped.\n     */\n    public movePlaceholder = (parentId: string, index: number, slotId: string, moduleId?: string): void => {\n        if (!parentId || !slotId || index < 0) {\n            return;\n        }\n\n        const parentModule = getModuleById(parentId);\n        if (parentModule) {\n            // get all modules inside the container.\n            const modules = getModulesByParentIdAndSlotId(parentId, slotId);\n            this._setAllAddModuleBoxesToInitialState();\n            if (modules.length === 0) {\n                this._removePlaceholderFromElement();\n                this._setAddModuleBoxToInsertState(\n                    parentId,\n                    slotId,\n                    moduleId ? getElementDataInfoById(moduleId).dataInfo.isFragment : false\n                );\n            } else {\n                if (index >= 0 && index < modules.length) {\n                    // if position index is within the range of possible indexes, insert place holder in the position of the current module.\n                    const currentModule = modules[index];\n                    this._movePlaceholder(<HTMLElement>currentModule);\n                } else {\n                    // if position is not in the range of available indexes, append placeholder to last module.\n                    const currentModule = modules[modules.length - 1];\n                    this._movePlaceholder(<HTMLElement>currentModule, true);\n                }\n            }\n        }\n    };\n\n    /**\n     * Set placeholder on position.\n     * @param dragModule The draggable module attributes and html element.\n     * @param dropModule The droppable module attributes and html element.\n     * @param y The position of the mouse cursor on the y-axis.\n     */\n    public setPlaceHolderOnPosition = (dragModule: ElementDataInfo, dropModule: ElementDataInfo, y: number): void => {\n        const placeholderInfo = this._getPlaceholderPlacementInfo(dragModule, dropModule, y);\n        if (placeholderInfo) {\n            if (dropModule.element && this._hasPlaceholderPositionChanged(placeholderInfo)) {\n                // If placeholder should be displayed in a new location, update placeholder on canvas and site builder.\n                this._movePlaceholder(dropModule.element, placeholderInfo.placeBottom);\n                this.renderingHelper?.onDrag(dropModule.dataInfo.parentId, placeholderInfo.relativeIndex, dropModule.dataInfo.slotId);\n            }\n        } else if (this._hasPlaceholderPositionChanged(placeholderInfo)) {\n            // If placeholder should be removed and has not been yet, clear placeholder from canvas and site builder.\n            this.clearAll();\n        }\n\n        this.placement = placeholderInfo;\n    };\n\n    /**\n     * Get a specific add module box html element.\n     * @param parentId The parent data Id.\n     * @param slotId The slot data Id.\n     * @returns {HTMLElement | null} Returns the html module element if module exists. Otherwise, return null.\n     */\n    private _getAddModuleBox = (parentId: string, slotId: string): HTMLElement | null => {\n        if (!this.addModuleBoxes) {\n            this.addModuleBoxes = getAllAddModuleBoxes();\n        }\n        const foundBox = this.addModuleBoxes.find(a => a.dataInfo.id === parentId && a.dataInfo.slotId === slotId);\n        return foundBox ? foundBox.element : null;\n    };\n\n    /**\n     * Update the targeted add module box to insert state.\n     * @param parentId The parent data Id.\n     * @param slotId The slot data Id.\n     * @param isFragment True, if the module to be added is a fragment. Otherwise, false.\n     */\n    private _setAddModuleBoxToInsertState = (parentId: string, slotId: string, isFragment: boolean): void => {\n        const addModuleBoxElement = this._getAddModuleBox(parentId, slotId);\n        if (addModuleBoxElement && addModuleBoxElement.firstElementChild) {\n            updateAddModuleInnerContainerClass(\n                <HTMLElement>addModuleBoxElement.firstElementChild,\n                isFragment ? 'InsertFragment' : 'InsertModule'\n            );\n        }\n    };\n\n    /**\n     * Update all add module boxes to its initial state.\n     */\n    private _setAllAddModuleBoxesToInitialState = (): void => {\n        if (!this.addModuleBoxes) {\n            this.addModuleBoxes = getAllAddModuleBoxes();\n        }\n        this.addModuleBoxes.map(m => {\n            if (m.element?.firstElementChild) {\n                updateAddModuleInnerContainerClass(m.element.firstElementChild);\n            }\n        });\n    };\n\n    /**\n     * Returns whether or not the placeholder position has changed.\n     */\n    private _hasPlaceholderPositionChanged = (placement: PlaceHolderPlacement | null): boolean => {\n        return !_isEqual(this.placement, placement);\n    };\n\n    /**\n     * Get the information for the placeholder placement on modules.\n     * @param dragModule The draggable module attributes and html element.\n     * @param dropModule The droppable module attributes and html element.\n     * @param y The position of the mouse cursor on the y-axis.\n     */\n    private _getPlaceholderPlacementInfo(dragModule: ElementDataInfo, dropModule: ElementDataInfo, y: number): PlaceHolderPlacement | null {\n        // Get all modules inside the container.\n        const modules = getModulesByParentIdAndSlotId(dropModule.dataInfo.parentId, dropModule.dataInfo.slotId);\n\n        if (modules.length === 0) {\n            return null;\n        }\n\n        const dragModuleIndex = modules.findIndex(m => getElementDataInfo(<HTMLElement>m).dataInfo.id === dragModule.dataInfo.id);\n        let dropModuleIndex = modules.findIndex(m => getElementDataInfo(<HTMLElement>m).dataInfo.id === dropModule.dataInfo.id);\n        let dropModuleRelativeIndex = dropModuleIndex;\n\n        // if drop module is not found or if it is the drag module, ignore it.\n        if (dropModuleIndex < 0 || dropModuleIndex === dragModuleIndex) {\n            return null;\n        }\n\n        // If the dragged module is in the current container and comes before the droppend module, update the drop index to ignore the drag module position.\n        if (dragModuleIndex >= 0 && dragModuleIndex < dropModuleIndex) {\n            dropModuleIndex -= 1;\n        }\n\n        let placeBottom = false;\n\n        if (dropModule.element) {\n            const box = dropModule.element.getBoundingClientRect();\n\n            const distanceToBottom = box.bottom - y;\n            const distanceToTop = y - box.top;\n            if (distanceToBottom < distanceToTop) {\n                dropModuleIndex += 1;\n                dropModuleRelativeIndex += 1;\n                placeBottom = true;\n            }\n        }\n\n        return {\n            moduleId: dragModule.dataInfo.id,\n            parentId: dropModule.dataInfo.parentId,\n            slotId: dropModule.dataInfo.slotId,\n            index: dropModuleIndex,\n            relativeIndex: dropModuleRelativeIndex,\n            placeBottom\n        };\n    }\n\n    /**\n     * Add placeholder to the top or to the bottom of a module.\n     * @param moduleElement The module element.\n     * @param placeBottom If the placeholder should be placed at the bottom of the module.\n     */\n    private _movePlaceholder = (moduleElement: HTMLElement, placeBottom: boolean = false): void => {\n        this._removePlaceholderFromElement();\n        if (placeBottom) {\n            moduleElement.className += ` ${PLACEHOLDER_BOTTOM_CLASS_NAME}`;\n        } else {\n            moduleElement.className += ` ${PLACEHOLDER_TOP_CLASS_NAME}`;\n        }\n\n        this.moduleElement = moduleElement;\n    };\n\n    /**\n     * Remove placeholder.\n     */\n    private _removePlaceholderFromElement = (): void => {\n        if (this.moduleElement && this.moduleElement.className) {\n            if (this.moduleElement.className.includes(PLACEHOLDER_BOTTOM_CLASS_NAME)) {\n                this.moduleElement.className = this.moduleElement.className.replace(PLACEHOLDER_BOTTOM_CLASS_NAME, '').trim();\n            } else if (this.moduleElement.className.includes(PLACEHOLDER_TOP_CLASS_NAME)) {\n                this.moduleElement.className = this.moduleElement.className.replace(PLACEHOLDER_TOP_CLASS_NAME, '').trim();\n            }\n        }\n        this.moduleElement = null;\n    };\n}\nconst dragAndDropPlaceholder = new DragAndDropPlaceholder();\nexport default dragAndDropPlaceholder;\n"]}