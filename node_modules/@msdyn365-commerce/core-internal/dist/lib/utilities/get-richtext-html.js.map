{"version":3,"file":"get-richtext-html.js","sourceRoot":"","sources":["../../../src/utilities/get-richtext-html.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,aAAa,EAAE,SAAS,EAAkB,MAAM,kCAAkC,CAAC;AAQ5F,MAAM,UAAU,eAAe,CAAC,IAAe;IAC3C,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,IAAc,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;AACzD,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,iBAAkB,SAAQ,KAAK,CAAC,SAAoB;IAC7D,YAAY,KAAgB;QACxB,KAAK,CAAC,KAAK,CAAC,CAAC;QAIV,WAAM,GAAG,GAAgB,EAAE;YAC9B,OAAO,CACH,oBAAC,aAAa,IACV,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAC1E,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,cAAc,EAC3E,UAAU,EAAE;oBACR,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAc;oBAC/B,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;iBAClC,EACD,IAAI,EAAE,SAAS,CAAC,QAAQ,GAC1B,CACL,CAAC;QACN,CAAC,CAAC;QAEM,WAAM,GAAG,CAAC,KAA2B,EAAE,EAAE,CAAC,IAAI,CAAC;QAjBnD,IAAI,CAAC,KAAK,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC;IACtC,CAAC;CAiBJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport * as React from 'react';\nimport { ContentEditableEvent } from 'react-contenteditable';\nimport { RichText } from '../interfaces/data-types';\nimport { EditableField, FieldType, ITextEditProps } from './editable-fields/editable-field';\n\nexport interface IRichText {\n    text?: RichText;\n    className?: string;\n    editProps?: ITextEditProps;\n}\n\nexport function getRichTextHtml(text?: RichText): { __html: string } | undefined {\n    return text ? { __html: text as string } : undefined;\n}\n\n/**\n * Rich text interactive component\n */\nexport class RichTextComponent extends React.Component<IRichText> {\n    constructor(props: IRichText) {\n        super(props);\n        this.state = { html: props.text };\n    }\n\n    public render = (): JSX.Element => {\n        return (\n            <EditableField\n                onChange={this.props.editProps ? this.props.editProps.onEdit : this.onEdit} // handle innerHTML change\n                requestContext={this.props.editProps && this.props.editProps.requestContext}\n                fieldProps={{\n                    text: this.props.text as string,\n                    className: this.props.className\n                }}\n                type={FieldType.RichText}\n            />\n        );\n    };\n\n    private onEdit = (event: ContentEditableEvent) => null;\n}\n"]}