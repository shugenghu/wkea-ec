/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import React from 'react';
import { isAuthoringEditEnabled } from '../helper';
import { EditError, PROPERTY_DISABLED, PROPERTY_INIT } from './edit-errors';
import { ImageField } from './image-field';
import { LinkField } from './link-field';
import { TextField } from './text-field';
import { VideoField } from './video-field';
export var FieldType;
(function (FieldType) {
    FieldType[FieldType["Text"] = 0] = "Text";
    FieldType[FieldType["RichText"] = 1] = "RichText";
    FieldType[FieldType["Image"] = 2] = "Image";
    FieldType[FieldType["Video"] = 3] = "Video";
    FieldType[FieldType["Link"] = 4] = "Link";
})(FieldType || (FieldType = {}));
/**
 * Editable field component, containing all the logic for inline editable properties in editorial preview
 * Current support: text, image
 */
// tslint:disable-next-line:no-any
export class EditableField extends React.Component {
    // tslint:disable-next-line:no-any
    constructor(props) {
        super(props);
        this._onChangeHandler = this._onChangeHandler.bind(this);
        this._isRequired = false;
        this.state = {
            isDisabled: props.disabled || true
        };
    }
    componentDidMount() {
        this._checkDisabledStatus();
    }
    // tslint:disable-next-line:no-any
    componentWillReceiveProps(nextProps) {
        // hook to handle props changes - when a field is changed between edit enabled/disabled states
        this._checkDisabledStatus();
    }
    render() {
        const props = this.props;
        const enabled = !this.state.isDisabled;
        switch (props.type) {
            case FieldType.Text:
            case FieldType.RichText:
                props.fieldProps.required = this._isRequired;
                return React.createElement(TextField, Object.assign({ disabled: !!!enabled }, props, { onChange: this._onChangeHandler }));
            case FieldType.Image:
                return React.createElement(ImageField, Object.assign({ disabled: !!!enabled }, props, { onChange: this._onChangeHandler }));
            case FieldType.Video:
                // tslint:disable-next-line:no-any
                const videoProps = {
                    ...this.props,
                    disabled: !!!enabled,
                    onChange: this._onChangeHandler
                };
                return videoProps.fieldProps.children ? React.createElement(VideoField, Object.assign({}, videoProps)) : null;
            case FieldType.Link:
                return React.createElement(LinkField, Object.assign({ type: FieldType.Link }, props, { disabled: !!!enabled, onChange: this._onChangeHandler }));
            default:
                return null;
        }
    }
    _onChangeHandler(event) {
        try {
            if (this.props.onChange) {
                // @ts-ignore
                this.props.onChange(event);
            }
            if (this.props.editPropKey) {
                const binding = this.props.editPropKey;
                // @ts-ignore
                binding.$type = event.target.value;
            }
        }
        catch (e) {
            // if property is disabled, disable editing
            if (e instanceof EditError) {
                if (e.name === PROPERTY_DISABLED) {
                    this._updateStatus(true);
                }
                else if (e.name === PROPERTY_INIT) {
                    this._updateStatus(false);
                    this._isRequired = !!e.required;
                }
            }
        }
    }
    _checkDisabledStatus() {
        if (isAuthoringEditEnabled(this.props.requestContext)) {
            this._onChangeHandler({ target: { value: '__MSDYN365_WYSIWYG_INIT__' } });
        }
    }
    _updateStatus(status) {
        if (status !== this.state.isDisabled) {
            this.setState({
                isDisabled: status
            });
        }
    }
}
//# sourceMappingURL=editable-field.js.map