{"version":3,"file":"text-field.js","sourceRoot":"","sources":["../../../../src/utilities/editable-fields/text-field.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,eAAe,MAAM,WAAW,CAAC;AACxC,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,eAAyC,MAAM,uBAAuB,CAAC;AAC9E,OAAO,EAAE,SAAS,EAA8B,MAAM,kBAAkB,CAAC;AACzE,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AAEpD;;GAEG;AACH,MAAM,OAAO,SAAU,SAAQ,SAA8D;IAEzF,YAAY,KAA0D;QAClE,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG;YACT,WAAW,EAAE,KAAK,CAAC,UAAU,CAAC,IAAI;SACrC,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAEM,yBAAyB,CAAC,SAAqC;QAClE,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE;YAC1D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAE5D,8FAA8F;YAC9F,IAAI,CAAC,KAAK,GAAG;gBACT,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC;aAC/D,CAAC;SACL;IACL,CAAC;IAEM,MAAM;QACT,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACvB,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAChC,oBAAC,eAAe,IACZ,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAC5B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,EAClC,QAAQ,EAAE,IAAI,EACd,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,SAAS,EAAE,yBAAyB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,GACxG,CACL,CAAC,CAAC,CAAC,IAAI,CAAC;SACZ;QAED,OAAO,CACH,oBAAC,eAAe,kBACZ,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAC5B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,EAClC,QAAQ,EAAE,KAAK,EACf,QAAQ,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,EAC1C,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAC3B,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EACzC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EACnC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EACjC,SAAS,EAAE,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IACnG,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,oBAAoB,IAAI,EAAE,CAAC,EACxD,CACL,CAAC;IACN,CAAC;IAEO,SAAS,CAAC,KAA2B;QACzC,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACrB,MAAM,YAAY,GACd,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI;gBACpE,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS;gBAC/B,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAC/C,IAAI,CAAC,QAAQ,CAAC;gBACV,WAAW,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;aACjD,CAAC,CAAC;YACH,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC9B;IACL,CAAC;IAEO,OAAO,CAAC,KAAuC;QACnD,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE;YAClD,IAAI,CAAC,QAAQ,CAAC;gBACV,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC;aAChE,CAAC,CAAC;SACN;IACL,CAAC;IAEO,eAAe,CAAC,IAAY;QAChC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC;IACnH,CAAC;IAEO,YAAY,CAAC,IAAY;QAC7B,MAAM,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC3C,YAAY,EAAE,EAAE;SACnB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAErB,OAAO,aAAa,KAAK,EAAE,CAAC;IAChC,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport createDOMPurify from 'dompurify';\nimport React, { Component } from 'react';\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable';\nimport { FieldType, IEditableFieldProps, IText } from './editable-field';\nimport { getEditableFieldClassName } from './utils';\n\n/**\n * Component class for text field\n */\nexport class TextField extends Component<IEditableFieldProps<IText>, { displayHtml: string }> {\n    private isEmpty: boolean;\n    constructor(props: { isFocused: boolean } & IEditableFieldProps<IText>) {\n        super(props);\n        this.state = {\n            displayHtml: props.fieldProps.text\n        };\n\n        this._onChange = this._onChange.bind(this);\n        this._onBlur = this._onBlur.bind(this);\n        this.isEmpty = false;\n    }\n\n    public componentWillReceiveProps(nextProps: IEditableFieldProps<IText>): void {\n        if (this.props.fieldProps.text !== nextProps.fieldProps.text) {\n            this.isEmpty = this._isTextEmpty(nextProps.fieldProps.text);\n\n            // hook to handle props changes - when a field is changed between edit enabled/disabled states\n            this.state = {\n                displayHtml: this._getDisplayText(nextProps.fieldProps.text)\n            };\n        }\n    }\n\n    public render(): JSX.Element | null {\n        if (!!this.props.disabled) {\n            return this.props.fieldProps.text ? (\n                <ContentEditable\n                    html={this.state.displayHtml}\n                    tagName={this.props.fieldProps.tag}\n                    disabled={true}\n                    onChange={this._onChange}\n                    className={getEditableFieldClassName(true, this.props.fieldProps.className, this.props.requestContext)}\n                />\n            ) : null;\n        }\n\n        return (\n            <ContentEditable\n                html={this.state.displayHtml}\n                tagName={this.props.fieldProps.tag}\n                disabled={false}\n                onChange={this._onChange || this._onChange}\n                onFocus={this.props.onFocus}\n                onBlur={this.props.onBlur || this._onBlur}\n                onMouseOver={this.props.onMouseOver}\n                onMouseOut={this.props.onMouseOut}\n                className={getEditableFieldClassName(false, this.props.fieldProps.className, this.props.requestContext)}\n                {...(this.props.fieldProps.additionalProperties || {})}\n            />\n        );\n    }\n\n    private _onChange(event: ContentEditableEvent): void {\n        if (this.props.onChange) {\n            const displayValue =\n                this.props.type === FieldType.Text || this.props.type === FieldType.Link\n                    ? event.currentTarget.innerText\n                    : event.target.value;\n            this.isEmpty = this._isTextEmpty(displayValue);\n            this.setState({\n                displayHtml: !this.isEmpty ? displayValue : ''\n            });\n            event.target.value = displayValue;\n            this.props.onChange(event);\n        }\n    }\n\n    private _onBlur(event: React.FocusEvent<HTMLDivElement>): void {\n        if (this.isEmpty && !!this.props.fieldProps.required) {\n            this.setState({\n                displayHtml: this._getDisplayText(this.props.fieldProps.text)\n            });\n        }\n    }\n\n    private _getDisplayText(text: string): string {\n        return !!this.props.fieldProps.required && this.isEmpty ? this.props.placeholderText || 'Click to Edit' : text;\n    }\n\n    private _isTextEmpty(text: string): boolean {\n        const DOMPurify = createDOMPurify(window);\n        const sanitizedText = DOMPurify.sanitize(text, {\n            ALLOWED_TAGS: []\n        }).replace(/\\n/, '');\n\n        return sanitizedText === '';\n    }\n}\n"]}