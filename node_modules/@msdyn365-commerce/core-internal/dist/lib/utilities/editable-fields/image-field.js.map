{"version":3,"file":"image-field.js","sourceRoot":"","sources":["../../../../src/utilities/editable-fields/image-field.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAG7D,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AAEpD,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAA0C,EAAE,EAAE;IACrE,MAAM,UAAU,GAAG,CAAC,KAA4C,EAAE,EAAE;QAChE,cAAc;QACd,IAAI,KAAK,CAAC,QAAQ,KAAK,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE;YACzC,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACzB;IACL,CAAC,CAAC;IAEF,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ;QAChC,CAAC,CAAC,EAAE;QACJ,CAAC,CAAC;YACI,UAAU,EAAE,UAAU;YACtB,aAAa,EAAE,KAAK,CAAC,QAAQ;YAC7B,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,QAAQ,EAAE,CAAC;SACd,CAAC;IAER,mCAAmC;IACnC,MAAM,UAAU,GAAQ;QACpB,GAAG,KAAK,CAAC,UAAU;QACnB,SAAS,EAAE,SAAS;KACvB,CAAC;IAEF,uEAAuE;IACvE,IACI,KAAK,CAAC,UAAU,CAAC,GAAG,KAAK,mBAAmB;QAC5C,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,mBAAmB,CAAC,EACzF;QACE,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC;KAC7B;IACD,OAAO,CACH,6CACQ,UAAU,EACV,aAAa,IACjB,SAAS,EAAE,yBAAyB,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,cAAc,CAAC,IAClG,CAAC,KAAK,CAAC,UAAU,CAAC,oBAAoB,IAAI,EAAE,CAAC,EACnD,CACL,CAAC;AACN,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport React from 'react';\nimport { placeholderImageUrl } from '../../components/image';\nimport { IAny, IGeneric } from '../../interfaces';\nimport { IEditableFieldProps } from './editable-field';\nimport { getEditableFieldClassName } from './utils';\n\nexport const ImageField = (props: IEditableFieldProps<IGeneric<IAny>>) => {\n    const onKeyPress = (event: React.KeyboardEvent<HTMLImageElement>) => {\n        // 'enter' key\n        if (event.charCode === 13 && props.onChange) {\n            event.preventDefault();\n            props.onChange(event);\n        }\n    };\n\n    const editableProps = props.disabled\n        ? {}\n        : {\n              onKeyPress: onKeyPress,\n              onDoubleClick: props.onChange,\n              onMouseOver: props.onMouseOver,\n              onFocus: props.onFocus,\n              onBlur: props.onBlur,\n              onMouseOut: props.onMouseOut,\n              tabIndex: 0\n          };\n\n    // tslint:disable-next-line: no-any\n    const fieldProps: any = {\n        ...props.fieldProps,\n        editProps: undefined\n    };\n\n    // If the image source is the placeholder image, set it's height to 1px\n    if (\n        props.fieldProps.src === placeholderImageUrl &&\n        (!props.fieldProps['data-src'] || props.fieldProps['data-src'] === placeholderImageUrl)\n    ) {\n        fieldProps.height = '1px';\n    }\n    return (\n        <img\n            {...fieldProps}\n            {...editableProps}\n            className={getEditableFieldClassName(props.disabled, props.fieldProps.className, props.requestContext)}\n            {...(props.fieldProps.additionalProperties || {})}\n        />\n    );\n};\n"]}