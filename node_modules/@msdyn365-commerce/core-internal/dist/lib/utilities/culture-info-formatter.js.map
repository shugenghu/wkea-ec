{"version":3,"file":"culture-info-formatter.js","sourceRoot":"","sources":["../../../src/utilities/culture-info-formatter.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n// tslint:disable:no-any\nimport { EXCEPTION_INVALID_ARGUMENT, NAME_CULTURE_INFO_FORMATTER_EXCEPTION } from '@msdyn365-commerce/telemetry-internal';\nimport memoizeFormatConstructor from 'intl-format-cache';\nimport areIntlLocalesSupported from 'intl-locales-supported';\nimport { ICultureInfoFormatter, IDateFormatOptions, INumberFormatOptions, ITimeFormatOptions } from '../interfaces';\n\nconst numericIdentifier = 'numeric';\n\n/**\n * CultureInfoFormatter provides functions that support the localized formatting\n * of currencies, numbers, dates and times.\n */\nexport class CultureInfoFormatter implements ICultureInfoFormatter {\n    private locale: string;\n    private numberFormatter: Intl.NumberFormat | undefined;\n    private dateFormatter: Intl.DateTimeFormat | undefined;\n    private timeFormatter: Intl.DateTimeFormat | undefined;\n    private currencyFormatter: Intl.NumberFormat | undefined;\n    private numFormatterConstructor: any;\n    private dateFormatterConstructor: any;\n    private currencyCode: string;\n\n    private static _validateInput(validation: boolean, methodName: string, argName: string): void {\n        if (validation) {\n            throw new Error(`${NAME_CULTURE_INFO_FORMATTER_EXCEPTION}: ${EXCEPTION_INVALID_ARGUMENT(methodName, argName)}`);\n        }\n    }\n\n    /**\n     * Constructs a new instance of this formatter using the given locale.\n     * Default value for locale is 'en-US'\n     *\n     * @param locale A string containing a BCP-47 locale tag e.g. 'en', 'en-us', 'fr-fr'. Default value of 'en-US'\n     * For more information see https://tools.ietf.org/html/bcp47\n     */\n    constructor(locale: string, currencyCode: string) {\n        CultureInfoFormatter._validateInput(!locale, 'CultureInfoFormatter', 'locale');\n        CultureInfoFormatter._validateInput(!currencyCode, 'CultureInfoFormatter', 'currencyCode');\n\n        this.locale = locale;\n        this.currencyCode = currencyCode;\n        // If we are running server side or the browser does not support the locale, use the polyfill for Intl\n        if (process.env.CURRENT_ENVIRONMENT === 'node' || !areIntlLocalesSupported(this.locale)) {\n            // Intl doesn't have the data we need, so load the\n            // polyfill and replace the constructors with need with the polyfill's.\n            // tslint:disable-next-line:no-require-imports\n            const IntlPolyfill = require('intl');\n\n            // make sure there is locale data for atleast one locale\n            // tslint:disable-next-line:no-require-imports\n            require('intl/locale-data/jsonp/en.js');\n            Intl.NumberFormat = IntlPolyfill.NumberFormat;\n            Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat;\n        }\n\n        // Create cached number, date and time formatter for basic formatting\n        this.numFormatterConstructor = memoizeFormatConstructor(Intl.NumberFormat);\n        this.dateFormatterConstructor = memoizeFormatConstructor(Intl.DateTimeFormat);\n    }\n\n    /**\n     * Returns a localized currency formatted version of a price.\n     *\n     * @param price Either a string or number representing the price that will be localized and formatted\n     * @param currencyCode Optional argument. The three letter currency code that will be used for formatting the currency.\n     * If the currency code is not provided the locale will be used to determine the best fit currency code.\n     */\n    public formatCurrency: (price: string | number, currencyCode?: string) => string = (\n        price: string | number,\n        currencyCode?: string\n    ): string => {\n        CultureInfoFormatter._validateInput(price === undefined, 'formatCurrency', 'price');\n        price = price || 0;\n\n        try {\n            if (!this.currencyFormatter) {\n                this.currencyFormatter = <Intl.NumberFormat>this.numFormatterConstructor(this.locale, {\n                    style: 'currency',\n                    currency: currencyCode || this.currencyCode\n                });\n            }\n            return !currencyCode\n                ? this.currencyFormatter.format(+price)\n                : this.formatNumber(+price, { style: 'currency', currency: currencyCode });\n        } catch (e) {\n            console.error('error in creating number formatter', e);\n            // return the same unformatted value\n            return price.toString();\n        }\n    };\n\n    /**\n     * Returns a localized formatted version of a number\n     *\n     * @param value The number that will be localized and formatted\n     * @param options An optional argument that controls the formatting.\n     */\n    public formatNumber = (value: number, options?: INumberFormatOptions): string => {\n        CultureInfoFormatter._validateInput(value === undefined, 'formatNumber', 'value');\n        value = value || 0;\n\n        try {\n            if (!this.numberFormatter) {\n                this.numberFormatter = <Intl.NumberFormat>this.numFormatterConstructor(this.locale);\n            }\n            // If no options are given to us, we can use the basic cached formatter\n            return options !== undefined\n                ? this.numFormatterConstructor(this.locale, options).format(value)\n                : this.numberFormatter.format(value);\n        } catch (e) {\n            console.error('error creating number formatter', e);\n            // return the same unformatted value\n            return value.toString();\n        }\n    };\n\n    /**\n     * Returns a localized formatted version of a date\n     *\n     * @param date Date object or valid date string representing the date that will be localized and formatted\n     * @param options An optional argument that controls the formatting.\n     */\n    public formatDate = (date: Date | string, options?: IDateFormatOptions): string => {\n        CultureInfoFormatter._validateInput(!date, 'formatDate', 'date');\n\n        try {\n            if (!this.dateFormatter) {\n                this.dateFormatter = <Intl.DateTimeFormat>this.dateFormatterConstructor(this.locale);\n            }\n\n            // Convert to date object if valid date string is passed instead\n            if (typeof date === 'string') {\n                date = new Date(date);\n            }\n\n            // If no options are given to us, we can use the basic cached formatter\n            return options !== undefined\n                ? this.dateFormatterConstructor(this.locale, options).format(date)\n                : this.dateFormatter.format(date);\n        } catch (e) {\n            console.error('error creating date formatter', e);\n            // return the same unformatted value\n            return date.toString();\n        }\n    };\n\n    /**\n     * Returns a localized formatted version of a time\n     *\n     * @param time Date object or valid date string representing the time that will be localized and formatted\n     * @param options An optional argument that controls the formatting\n     */\n    public formatTime = (time: Date | string, options?: ITimeFormatOptions): string => {\n        CultureInfoFormatter._validateInput(!time, 'formatTime', 'time');\n\n        try {\n            if (!this.timeFormatter) {\n                this.timeFormatter = <Intl.DateTimeFormat>(\n                    this.dateFormatterConstructor(this.locale, { hour: numericIdentifier, minute: numericIdentifier })\n                );\n            }\n\n            // Convert to date object if valid date string is passed instead\n            if (typeof time === 'string') {\n                time = new Date(time);\n            }\n\n            // If no options are given to us, we can use the basic cached formatter\n            if (options !== undefined) {\n                options.hour = 'numeric';\n                options.minute = 'numeric';\n                return this.dateFormatterConstructor(this.locale, options).format(time);\n            }\n            return this.timeFormatter.format(time);\n        } catch (e) {\n            console.error('error creating date formatter', e);\n            // return the same unformatted value\n            return time.toString();\n        }\n    };\n}\n"]}