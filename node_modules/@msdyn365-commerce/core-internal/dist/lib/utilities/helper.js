/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { getCurrency } from 'locale-currency';
// Helper function for parsing/normalizing json, exported
export const parsePayload = (content) => {
    try {
        return content.constructor === String ? JSON.parse(content) : content;
    }
    catch (error) {
        throw new Error(`JSON Parsing fails for content -- ${content}`);
    }
};
export const isEmptyOrNullObject = (obj) => {
    return !obj || Object.keys(obj).length <= 0;
};
export const returnEmptyPromise = () => {
    // tslint:disable:no-void-expression
    return new Promise((resolve) => resolve());
};
const UNSAFE_CHARS_REGEXP = /[<>\/\u2028\u2029]/g;
const ESCAPED_CHARS = {
    '<': '\\u003C',
    '>': '\\u003E',
    '/': '\\u002F',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
};
const escapeUnsafeChars = (unsafeChar) => {
    return ESCAPED_CHARS[unsafeChar];
};
export const sanitizeForXss = (str) => {
    return str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);
};
export const removeInstanceCache = (_key, value) => {
    if (value && value.instance === 'instance') {
        return undefined;
    }
    return value;
};
export const isAuthoringEditEnabled = (context) => {
    if (context) {
        if (context.features && context.features.authoring_inline_edit && context.params && !!context.params.isEditor) {
            return true;
        }
    }
    return false;
};
/**
 * Tries to parse a string value into an number and reurns this value. If the string is undefined
 * or if the string does not represent a valid number, undefined is returned
 *
 * @param value The string representing the number to be parsed
 */
export const tryParseInt = (value) => {
    if (value) {
        const parsedValue = parseInt(value, 10);
        return isNaN(parsedValue) ? undefined : parsedValue;
    }
    return undefined;
};
/**
 * Name of internal component fragment, must be all lower case
 */
export const SDK_FRAGMENT_NAME = 'platform.saferendermodule';
/**
 * Regex constant for capturing the internal fragment name with data-reactroot that is occasionally emitted
 */
export const SDK_FRAGMENT_NAME_REGEX = /<[/]?platform\.saferendermodule( data-reactroot=["].*["])?>/gi;
/**
 * Hepler function to build a URL to get the asset
 * @param assetPath the path to the asset
 */
export const getAsset = (assetPath, context) => {
    let assetUrl = '';
    if (context.url.staticCdnUrl) {
        assetUrl += context.url.staticCdnUrl;
    }
    if (assetPath.length > 0 && assetPath.charAt(0) === '/') {
        assetPath = assetPath.substr(1);
    }
    if (!process.env.SUBMISSIONID || process.env.SUBMISSIONID === 'undefined') {
        return `${assetUrl}${`${assetPath}`.replace(/\/+/g, '/')}`;
    }
    else {
        return `${assetUrl}${`${process.env.SUBMISSIONID}/${assetPath}`.replace(/\/+/g, '/')}`;
    }
};
export const CurrencyCodeIdentifier = 'cc';
export const getCurrencyCodeFromContext = (requestContext) => {
    return ((requestContext && requestContext.query && requestContext.query[CurrencyCodeIdentifier]) ||
        (requestContext.cookies && requestContext.cookies.get(CurrencyCodeIdentifier).value) ||
        (requestContext.channel && requestContext.channel.Currency) ||
        getCurrency(requestContext.locale));
};
export const isNonceEnabled = (requestCnotext) => {
    const contentSecurityPolicy = requestCnotext.app && requestCnotext.app.contentSecurityPolicy;
    const nonceToken = contentSecurityPolicy && contentSecurityPolicy.nonceToken;
    return contentSecurityPolicy && !contentSecurityPolicy.disableContentSecurityPolicy && contentSecurityPolicy.enableNonce && nonceToken;
};
//# sourceMappingURL=helper.js.map