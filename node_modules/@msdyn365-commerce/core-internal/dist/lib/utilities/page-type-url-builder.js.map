{"version":3,"file":"page-type-url-builder.js","sourceRoot":"","sources":["../../../src/utilities/page-type-url-builder.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation.\n * All rights reserved. See LICENSE in the project root for license information.\n */\n\nimport { TextValueTranslation } from '@msdyn365-commerce/retail-proxy';\nimport { IActionContext, IAny, IDictionary, IRequestContext } from '../interfaces';\nimport { ICategoryPath, ICategoryUrl } from '../interfaces/ICategoryPathInterfaces';\nimport { IParameterizeFeatureFlags, parameterize } from './parameterize';\n\nexport const enum PageType {\n    Product = 'product',\n    Category = 'category',\n    List = 'list',\n    Cart = 'cart',\n    Checkout = 'checkout',\n    Account = 'account',\n    OrderHistory = 'order-history',\n    OrderLookup = 'order-lookup',\n    Wishlist = 'wishlist',\n    GiftcardBalance = 'giftcard-balance',\n    FindStores = 'find-stores'\n}\n\n// Query params that must be appened to any URL generated when in preview mode\nconst PASSTHROUGH_QUERY_PARAMS = ['locale', 'market', 'sitepath', 'hostoverride', 'preview', 'domain'];\n\ntype segment = { Name: string; RecordId: string | number };\ntype categoryContext = { categories?: { Name: string; RecordId: string | number; NeutralizedName?: string }[] };\ntype categorySlugContext = { category?: { Slug: string; RecordId: string | number } };\ntype productContext = { product?: { Name: string; RecordId: string | number; NeutralizedName?: string } };\ntype listContext = { list?: { Name: string; NeutralizedName?: string } };\n\ntype pageTypeContext = categoryContext & productContext & listContext & productContext & { [property: string]: IAny };\ntype routeBuilder = (context?: pageTypeContext, ctx?: IActionContext) => string;\ntype IRouteDiconary = IDictionary<routeBuilder>;\n\nconst categorySegment = (context?: categoryContext & categorySlugContext, ctx?: IActionContext) => {\n    if (!context) {\n        return '';\n    }\n    if (context.categories) {\n        const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlagsWithRequestContext(\n            ctx && ctx.requestContext\n        );\n        return context.categories\n            .map(record => `/${parameterize(record.Name, undefined, parameterizeFeatureFlags, record.NeutralizedName)}`)\n            .join('');\n    } else if (context.category) {\n        return context.category.Slug;\n    }\n    return '';\n};\nconst categoryMoniker = (context?: categoryContext & categorySlugContext) => {\n    if (context) {\n        if (context.categories) {\n            return `/${context.categories[context.categories.length - 1].RecordId}.c`;\n        }\n        if (context.category) {\n            return `/${context.category.RecordId}.c`;\n        }\n    }\n    return '';\n};\n\nconst productMoniker = (context?: productContext, ctx?: IActionContext) => {\n    if (context) {\n        if (context.product && context.product.Name !== '') {\n            const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlagsWithRequestContext(\n                ctx && ctx.requestContext\n            );\n            return `/${parameterize(context.product.Name, undefined, parameterizeFeatureFlags, context.product.NeutralizedName)}/${\n                context.product.RecordId\n            }.p`;\n        } else if (context.product) {\n            return `/${context.product.RecordId}.p`;\n        }\n    }\n    return '';\n};\n\nconst listMoniker = (context?: listContext, ctx?: IActionContext) => {\n    const parameterizeFeatureFlags: IParameterizeFeatureFlags = getParameterizeFeatureFlagsWithRequestContext(ctx && ctx.requestContext);\n    return context && context.list\n        ? `/${parameterize(context.list.Name, undefined, parameterizeFeatureFlags, context.list.NeutralizedName)}.l`\n        : '';\n};\n\nconst platformRoutes: IRouteDiconary = {\n    category: (context, ctx?) => `${categorySegment(context, ctx)}${categoryMoniker(context)}`,\n    product: (context, ctx?) => `${categorySegment(context, ctx)}${productMoniker(context, ctx)}`,\n    list: listMoniker\n};\n\n/**\n * Forces strings to have a leading slash and no trailing slash\n */\nconst ensureSlashConsistency = (name: string) => {\n    if (name[0] !== '/') {\n        name = `/${name}`;\n    }\n    if (name[name.length - 1] === '/') {\n        name = name.slice(0, -1);\n    }\n    return name;\n};\n\n/**\n * Correctly appends site path if required in the context\n * @param route Current route\n * @param ctx Action Context\n */\nconst populateSitePath = (route: string[], ctx: IActionContext): string[] => {\n    const sitePath = ctx && ctx.requestContext && ctx.requestContext.sitePath;\n    sitePath && route.unshift(sitePath);\n    return route;\n};\n\n/**\n * Appends any query params that should be appended if preview mode is set to true\n * and returns the final result\n *\n * @param route The partially constructed destination url\n * @param queryParams The list of query params in the initial request\n */\nexport const appendQueryParams = (route: string | undefined, queryParams?: IDictionary<string>): string => {\n    if (route && queryParams && (queryParams.preview || queryParams.domain)) {\n        const query = Object.keys(queryParams)\n            .map(key => (PASSTHROUGH_QUERY_PARAMS.indexOf(key) !== -1 ? `${key}=${queryParams[key]}` : ''))\n            .filter(Boolean)\n            .join('&');\n\n        return query.length ? `${route}${route.indexOf('?') === -1 ? '?' : '&'}${query}` : route;\n    }\n\n    return route || '';\n};\n\nconst appendQueryString = (route: string | undefined, context: IActionContext) => {\n    return appendQueryParams(route, context && context.requestContext && context.requestContext.query);\n};\n\nfunction getRoutePath(route: string | routeBuilder | undefined, ctx: IActionContext, routeContext: pageTypeContext): string {\n    let returnUrl = '';\n    if (route) {\n        if (typeof route === 'function') {\n            route = route(routeContext, ctx);\n        }\n        returnUrl = populateSitePath([route], ctx)\n            .map(ensureSlashConsistency)\n            .join('');\n    }\n\n    return appendQueryString(returnUrl, ctx);\n}\n\n/**\n * Gets the corresponding route for the given page type\n * @param pageType the type of page that needs to be routed to.\n * @param ctx current action context.\n */\nexport const getUrlSync = (pageType: PageType | string, ctx: IActionContext, routeContext: pageTypeContext = {}): string | undefined => {\n    let route: string | routeBuilder | undefined;\n    if (platformRoutes[pageType]) {\n        return getRoutePath(platformRoutes[pageType], ctx, routeContext);\n    }\n\n    const requestContext: IRequestContext = ctx && ctx.requestContext;\n    if (requestContext) {\n        route = requestContext.query && requestContext.query[pageType];\n        if (route) {\n            return getRoutePath(route, ctx, routeContext);\n        }\n\n        const appRoutes = requestContext.app && requestContext.app.routes;\n        if (appRoutes) {\n            const pageRouteFromAppSettings = appRoutes[pageType];\n            if (pageRouteFromAppSettings && typeof pageRouteFromAppSettings === 'object') {\n                return appendQueryString(pageRouteFromAppSettings.destinationUrl, ctx);\n            } else if (pageRouteFromAppSettings && typeof pageRouteFromAppSettings === 'string') {\n                return getRoutePath(pageRouteFromAppSettings, ctx, routeContext);\n            }\n        }\n    }\n\n    return getRoutePath(pageType, ctx, routeContext);\n};\n\nexport const getCategoriesUrlSync = (categoriesPath: ICategoryPath, ctx: IActionContext): ICategoryUrl[] | undefined => {\n    const categoriesPathUrls: ICategoryUrl[] = [];\n    const tempSegments: segment[] = [];\n    if (categoriesPath && categoriesPath.Segments) {\n        categoriesPath.Segments.map(seg => {\n            tempSegments.push({\n                Name: seg.CategoryName || '',\n                RecordId: seg.CategoryId || ''\n            });\n            const context = {\n                categories: tempSegments\n            };\n            categoriesPathUrls.push({\n                Name: seg.CategoryName,\n                Url: getUrlSync(PageType.Category, ctx, context) || ''\n            });\n        });\n    }\n\n    return categoriesPathUrls;\n};\n\n/**\n * Gets localized friendlyName from category NameTranslations object based on the locale\n * @param locale Locale from current requestContext\n * @param nameTranslations LocalizedNames for a given category.\n */\nexport const getFriendlyName = (locale?: string, nameTranslations?: TextValueTranslation[]): string | undefined => {\n    let nameTranslation: TextValueTranslation | undefined;\n    if (locale && nameTranslations && nameTranslations.length > 0) {\n        nameTranslation = nameTranslations.find(item => item.Language!.toLowerCase() === locale.toLowerCase());\n    }\n\n    return nameTranslation && nameTranslation.Text;\n};\n\n/**\n * Return ParameterizedFeatureFlags based on requestContext\n * @param ctx Action Context\n */\nexport const getParameterizeFeatureFlags = (ctx?: IActionContext): IParameterizeFeatureFlags => {\n    return {\n        enableUrlEncoding: (ctx && ctx.requestContext.features && ctx.requestContext.features.enableUrlEncoding) || false,\n        enableUrlLocalization: (ctx && ctx.requestContext.features && ctx.requestContext.features.enableUrlLocalization) || false\n    };\n};\n\n/**\n * Return ParameterizedFeatureFlags based on requestContext\n * @param ctx Request Context\n */\nexport const getParameterizeFeatureFlagsWithRequestContext = (ctx?: IRequestContext): IParameterizeFeatureFlags => {\n    return {\n        enableUrlEncoding: (ctx && ctx.features && ctx.features.enableUrlEncoding) || false,\n        enableUrlLocalization: (ctx && ctx.features && ctx.features.enableUrlLocalization) || false\n    };\n};\n"]}