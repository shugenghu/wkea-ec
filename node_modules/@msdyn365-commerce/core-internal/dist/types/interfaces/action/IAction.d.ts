/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { AsyncResult } from '@msdyn365-commerce/retail-proxy';
import { ITelemetry } from '@msdyn365-commerce/telemetry-internal';
import { IRequestContext } from '../context';
import { IActionInput } from './IActionInput';
import { CacheType } from './ICache';
export declare type IActionPrototype = {
    id: string;
    inputFunc: Function;
    isBatched: boolean;
    isAction: true;
    [property: string]: unknown;
};
/**
 * Data Action interface
 */
export declare type IAction<TOut> = (input: IActionInput | IActionInput[], context: IActionContext) => Promise<TOut>;
/**
 * Interface for new observable AsyncResult based action
 */
export declare type IObservableAction<TOut> = (input: IActionInput | IActionInput[], context: IActionContext) => AsyncResult<TOut>;
export interface IDataActionOptions {
    cacheType?: CacheType;
}
export interface IActionContext {
    requestContext: IRequestContext;
    telemetry: ITelemetry;
    /**
     * DEPRECATED
     *
     * Actions can now chain automatically, so chainAction calls are unncessary
     *
     * @param action The action to be chained
     * @param input The input for the action that will be called
     * @deprecated
     */
    chainAction<T>(action: IAction<T>, input: IActionInput | IActionInput[], actionOption?: IDataActionOptions): Promise<T | (T | null)[] | null>;
    update<T>(input: IActionInput | IActionInput[], data: T): T;
    get<T>(cacheObjectType: string, cacheKey: string): T | T[] | null;
    getAll<T>(cacheObjectType: string): T[] | null;
    /**
     * DEPRECATED.
     *
     * This is deprecated in favor of using `telemetry` property directly on action context
     *
     * @param message The message to log with trace
     * @deprecated
     */
    trace(message: string): void;
    runAllActionsInQueue(): Promise<void>;
}
/**
 * Internal type that matches both IAction and IObservableAction
 * @internal
 */
declare type _IMergedAction<TOut> = (input: IActionInput | IActionInput[], context: IActionContext) => AsyncResult<TOut> | Promise<TOut>;
/**
 * Interface that matches IAction or IObservableAction with fully typed prototype
 * @internal
 */
export interface IAnyAction<TOut> extends _IMergedAction<TOut> {
    prototype: IActionPrototype;
}
export {};
