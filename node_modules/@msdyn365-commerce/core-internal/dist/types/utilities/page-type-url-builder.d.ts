/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { TextValueTranslation } from '@msdyn365-commerce/retail-proxy';
import { IActionContext, IAny, IDictionary, IRequestContext } from '../interfaces';
import { ICategoryPath, ICategoryUrl } from '../interfaces/ICategoryPathInterfaces';
import { IParameterizeFeatureFlags } from './parameterize';
export declare const enum PageType {
    Product = "product",
    Category = "category",
    List = "list",
    Cart = "cart",
    Checkout = "checkout",
    Account = "account",
    OrderHistory = "order-history",
    OrderLookup = "order-lookup",
    Wishlist = "wishlist",
    GiftcardBalance = "giftcard-balance",
    FindStores = "find-stores"
}
declare type categoryContext = {
    categories?: {
        Name: string;
        RecordId: string | number;
        NeutralizedName?: string;
    }[];
};
declare type productContext = {
    product?: {
        Name: string;
        RecordId: string | number;
        NeutralizedName?: string;
    };
};
declare type listContext = {
    list?: {
        Name: string;
        NeutralizedName?: string;
    };
};
declare type pageTypeContext = categoryContext & productContext & listContext & productContext & {
    [property: string]: IAny;
};
/**
 * Appends any query params that should be appended if preview mode is set to true
 * and returns the final result
 *
 * @param route The partially constructed destination url
 * @param queryParams The list of query params in the initial request
 */
export declare const appendQueryParams: (route: string | undefined, queryParams?: IDictionary<string> | undefined) => string;
/**
 * Gets the corresponding route for the given page type
 * @param pageType the type of page that needs to be routed to.
 * @param ctx current action context.
 */
export declare const getUrlSync: (pageType: string, ctx: IActionContext, routeContext?: pageTypeContext) => string | undefined;
export declare const getCategoriesUrlSync: (categoriesPath: ICategoryPath, ctx: IActionContext) => ICategoryUrl[] | undefined;
/**
 * Gets localized friendlyName from category NameTranslations object based on the locale
 * @param locale Locale from current requestContext
 * @param nameTranslations LocalizedNames for a given category.
 */
export declare const getFriendlyName: (locale?: string | undefined, nameTranslations?: TextValueTranslation[] | undefined) => string | undefined;
/**
 * Return ParameterizedFeatureFlags based on requestContext
 * @param ctx Action Context
 */
export declare const getParameterizeFeatureFlags: (ctx?: IActionContext | undefined) => IParameterizeFeatureFlags;
/**
 * Return ParameterizedFeatureFlags based on requestContext
 * @param ctx Request Context
 */
export declare const getParameterizeFeatureFlagsWithRequestContext: (ctx?: IRequestContext | undefined) => IParameterizeFeatureFlags;
export {};
