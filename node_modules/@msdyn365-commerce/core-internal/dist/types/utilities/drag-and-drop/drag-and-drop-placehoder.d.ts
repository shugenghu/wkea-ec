import { IRenderingHelper } from '../../interfaces/IRenderingHelper';
import { ElementDataInfo } from './drag-and-drop-utils';
export declare type PlaceHolderPlacement = {
    moduleId: string;
    parentId: string;
    slotId: string;
    index: number;
    relativeIndex: number;
    placeBottom: boolean;
};
/**
 * Provides the drag and drop events implementation
 */
export declare class DragAndDropPlaceholder {
    private placement;
    private moduleElement;
    private addModuleBoxes;
    private renderingHelper;
    constructor();
    /**
     * Return the placeholder information.
     */
    getPlaceholder: () => PlaceHolderPlacement | null;
    /**
     * Clear placeholder.
     */
    clear: () => void;
    /**
     * Clear placeholder on site builder and SDK.
     */
    clearAll: () => void;
    /**
     * Set rendering helper to be used when calling site builder APIs.
     * @param renderingHelper The rendring helper interface.
     */
    setRenderingHelper: (renderingHelper: IRenderingHelper) => void;
    /**
     * Move placeholder to a specific position inside a specific container.
     * @param parentId The module id where the module/container should to be dropped
     * @param index The index position for the module drop.
     * @param slotId The slot id where the module/container should to be dropped.
     * @param moduleId The module id of the element being dropped.
     */
    movePlaceholder: (parentId: string, index: number, slotId: string, moduleId?: string | undefined) => void;
    /**
     * Set placeholder on position.
     * @param dragModule The draggable module attributes and html element.
     * @param dropModule The droppable module attributes and html element.
     * @param y The position of the mouse cursor on the y-axis.
     */
    setPlaceHolderOnPosition: (dragModule: ElementDataInfo, dropModule: ElementDataInfo, y: number) => void;
    /**
     * Get a specific add module box html element.
     * @param parentId The parent data Id.
     * @param slotId The slot data Id.
     * @returns {HTMLElement | null} Returns the html module element if module exists. Otherwise, return null.
     */
    private _getAddModuleBox;
    /**
     * Update the targeted add module box to insert state.
     * @param parentId The parent data Id.
     * @param slotId The slot data Id.
     * @param isFragment True, if the module to be added is a fragment. Otherwise, false.
     */
    private _setAddModuleBoxToInsertState;
    /**
     * Update all add module boxes to its initial state.
     */
    private _setAllAddModuleBoxesToInitialState;
    /**
     * Returns whether or not the placeholder position has changed.
     */
    private _hasPlaceholderPositionChanged;
    /**
     * Get the information for the placeholder placement on modules.
     * @param dragModule The draggable module attributes and html element.
     * @param dropModule The droppable module attributes and html element.
     * @param y The position of the mouse cursor on the y-axis.
     */
    private _getPlaceholderPlacementInfo;
    /**
     * Add placeholder to the top or to the bottom of a module.
     * @param moduleElement The module element.
     * @param placeBottom If the placeholder should be placed at the bottom of the module.
     */
    private _movePlaceholder;
    /**
     * Remove placeholder.
     */
    private _removePlaceholderFromElement;
}
declare const dragAndDropPlaceholder: DragAndDropPlaceholder;
export default dragAndDropPlaceholder;
