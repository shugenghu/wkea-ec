/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IRenderingHelper } from '../../interfaces/IRenderingHelper';
export declare const DATA_ATTRIBUTE = "data-i";
export declare const FRAGMENT_ATTRIBUTE = "fragment";
export declare const FRAGMENT_MODULE_ATTRIBUTE = "fragmentmodule";
export declare const CONTAINER_TYPE = "containerModule";
export declare const EMPTY_SLOT_TYPE_NAME = "empty-slot";
export declare const ADD_CONTAINER_CLASS_NAME = "add-container-inner";
export declare const ADD_CONTAINER_CLASS_NAME_ON_DRAG_OVER = "ondrop";
export declare const ADD_CONTAINER_CLASS_NAME_ON_DRAGGING_MODULE = "drop-module";
export declare const ADD_CONTAINER_CLASS_NAME_ON_DRAGGING_FRAGMENT = "drop-fragment";
export declare const ADD_CONTAINER_CLASS_NAME_ON_DRAGGING_NOT_ALLOWED = "drop-error";
export declare const NO_POINTER_EVENTS_CLASS_NAME = "ms-no-pointer-events";
export declare type AddModuleBoxState = 'Initial' | 'InsertModule' | 'InsertFragment' | 'MoveNotAllowed';
export declare type ElementDataInfo = {
    dataInfo: DataInfo;
    element: HTMLElement | null;
};
declare type DataInfo = {
    id: string;
    parentId: string;
    slotId: string;
    typeName: string;
    friendlyName: string;
    moduleType: string;
    isFragment: boolean;
    isFragmentModule: boolean;
};
/**
 * Get the root module by selecting the first module with the data-i attibute.
 * @returns {HTMLElement | null} Returns the html module element if module exists. Otherwise, return null.
 */
export declare function getRootModule(): HTMLElement | null;
/**
 * Get the module html element by data Id.
 * @param moduleDataId The module data Id.
 * @returns {HTMLElement | null} Returns the html module element if module exists. Otherwise, return null.
 */
export declare function getModuleById(moduleDataId: string): HTMLElement | null;
/**
 * Get a list of all add module boxes.
 * @returns {ElementDataInfo[]} list of modules.
 */
export declare function getAllAddModuleBoxes(): ElementDataInfo[];
/**
 * Get a list of modules by parent data Id and slot data Id.
 * @param parentId The parent data Id.
 * @param slotId The slot Id.
 * @returns {Element[]} list of modules.
 */
export declare function getModulesByParentIdAndSlotId(parentId: string, slotId: string): Element[];
/**
 * Get the closest module to a specific html element target.
 * @param target The specific html element target.
 * @returns {HTMLElement | null} Returns the html module element if element exists. Otherwise, return null.
 */
export declare function getModuleByTarget(target: HTMLElement): HTMLElement | null;
/**
 * Get data info from the data-i element attribute.
 * @param element The html element.
 * @returns {ElementDataInfo} data info from the data-i element attribute.
 */
export declare function getElementDataInfo(element: HTMLElement | null): ElementDataInfo;
/**
 * Get the element data info by target.
 * @param target The target html element.
 * @returns {ElementDataInfo} data info from the data-i element attribute.
 */
export declare function getElementDataInfoByTarget(target: HTMLElement): ElementDataInfo;
/**
 * Get the element data info by module Id.
 * @param moduleId The module Id.
 * @returns {ElementDataInfo} data info from the data-i element attribute.
 */
export declare function getElementDataInfoById(moduleId: string): ElementDataInfo;
/**
 * clear the element data info object.
 */
export declare function cleanDataInfo(): ElementDataInfo;
/**
 * Get rendering helper.
 */
export declare function getRenderingHelper(): IRenderingHelper | undefined;
/**
 * Update the add module inner container class
 * @param addInnerContainer The add module inner container element.
 * @param state The state to where the element classes should be updated to.
 */
export declare function updateAddModuleInnerContainerClass(addInnerContainer: Element, state?: AddModuleBoxState): void;
export {};
