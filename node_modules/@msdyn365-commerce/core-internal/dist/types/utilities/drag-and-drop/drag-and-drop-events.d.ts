/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
/**
 * Provides the drag and drop events implementation
 */
export declare class DragAndDropEvents {
    private cache;
    private dragElement;
    private dropElement;
    private isCursorOnDroppableArea;
    private isDragging;
    private renderingHelper;
    constructor();
    /**
     * Set draggable events for a specific module.
     * @param sourceModuleId The module to be set as draggable.
     */
    setModuleAsDraggable: (sourceModuleId: string) => void;
    /**
     * Clear cache object.
     */
    private _clearCache;
    /**
     * Check if cache has the information whether or not a module can be dropped in parent container.
     * @param moduleId The module id.
     * @param parentId The parent container id.
     * @param slotId The slot id.
     * @returns {boolean} Returns true cache has the information whether or not a module can be dropped in parent container. Otherwise returns false.
     */
    private _cacheHasIsDroppableInfo;
    /**
     * Return whether or not a module can be dropped in parent container.
     * @param moduleId The module id.
     * @param parentId The parent container id.
     * @param slotId The slot id.
     * @returns {boolean | unknown} Returns whether or not a module can be dropped in parent container.
     */
    private _isModuleDroppable;
    /**
     * Set whether or not a module can be dropped in parent container.
     * @param moduleId The module id.
     * @param parentId The parent container id.
     * @param slotId The slot id.
     */
    private _setModuleIsDroppable;
    /**
     * Create a key to cache information whether or not a module is droppable in parent container.
     * @param moduleId The module id.
     * @param parentId The parent container id.
     * @param slotId The slot id.
     * @returns {string} Returns the cache key.
     */
    private _getCacheKey;
    /**
     * Check if module can be dropped in parent container and cache the information.
     * @param moduleId The module id.
     * @param parentId The parent container id.
     * @param slotId The slot id.
     */
    private _checkIsDroppableAndAddToCache;
    /**
     * Handles the on drag over event for containers.
     * @param e The react drag event.
     */
    private _onDragOver;
    /**
     * Handles the on drag enter event for containers.
     * @param e The react drag event.
     */
    private _onDragEnter;
    /**
     * Handles the on drag leave event for containers.
     * @param e The react drag event.
     */
    private _onDragLeave;
    /**
     * Handles the on drop event for containers.
     * @param e The react drag event.
     */
    private _onDrop;
    /**
     * Remove draggable attributes and events.
     * @param moduleId The module to have attributes removed.
     */
    private _removeDraggableEvents;
    /**
     * Handles the drag event.
     * @param e The drag event.
     */
    private _onDrag;
    /**
     * Handles the drag start event.
     * @param e The drag event.
     */
    private _onDragStart;
    /**
     * Handles the drag end event.
     * @param e The drag event.
     */
    private _onDragEnd;
    /**
     * Clear all cache information.
     */
    private _clearAllCache;
    /**
     * Set droppable events for the root module.
     */
    private _setRootModuleAsDroppable;
    /**
     * Remove droppable events.
     */
    private _removeDroppableEvents;
}
declare const dragAndDropEvents: DragAndDropEvents;
export default dragAndDropEvents;
