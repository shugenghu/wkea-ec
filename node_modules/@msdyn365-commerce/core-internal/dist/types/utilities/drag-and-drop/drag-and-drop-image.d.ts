/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ElementDataInfo } from './drag-and-drop-utils';
/**
 * Provides the drag and drop image control
 */
export declare class DragAndDropImage {
    private dragImage;
    private transparentImage;
    private iconType;
    constructor();
    /**
     * Update the drag image position.
     * @param x The position of the image on the x-axis.
     * @param y The position of the image on the y-axis.
     */
    updatePosition: (x: number, y: number) => void;
    /**
     * Hide image.
     */
    hide: () => void;
    /**
     * Set transparent image to be used as the data transfer image.
     * @returns {HTMLElement | null} The transparent image element.
     */
    setTransparentImage: () => HTMLElement;
    /**
     * Check if the status of the image is droppable.
     * @returns {boolean} If the current status of the image is droppable.
     */
    isStatusDroppable: () => boolean;
    /**
     * Check if the status of the image is not droppable.
     * @returns {boolean} If the current status of the image is not droppable.
     */
    isStatusNotDroppable: () => boolean;
    /**
     * Create or update the drop allowed image element if necessary.
     * @param dragElementDataInfo The drag element data info.
     * @param x The position of the image on the x-axis.
     * @param y The position of the image on the y-axis.
     */
    setDropAllowedImage: (dragElementDataInfo: ElementDataInfo, x: number, y: number) => void;
    /**
     * Create or update the drop not allowed image element if necessary.
     * @param x The position of the image on the x-axis.
     * @param y The position of the image on the y-axis.
     */
    setDropNotAllowedImage: (x: number, y: number) => void;
    /**
     * Clear the drag and drop image.
     */
    clear: () => void;
    /**
     * Get the name to be displayed on the drag image.
     * @param dragElementDataInfo The drag element data info.
     * @returns {string} The name to be displayed on the drag image.
     */
    private _getImageName;
    /**
     * Get the information about the icon to be used inside the drag image.
     * @param dragElementDataInfo The drag element data info.
     * @returns {IconInfo} The info about the icon to be used inside the drag image.
     */
    private _getIconInfo;
    /**
     * Create or update the drag image element if necessary.
     * @param iconInfo The info about the icon to be displayed in the drag image.
     * @param textContent The text content to be placed inside the text box.
     * @param x The position of the image on the x-axis.
     * @param y The position of the image on the y-axis.
     */
    private _setDragImage;
    /**
     * Create the drag image element.
     * @param iconInfo The info about the icon to be displayed in the drag image.
     * @param textContent The text content to be placed inside the text box.
     * @param x The position of the image on the x-axis.
     * @param y The position of the image on the y-axis.
     * @returns {HTMLElement} The drag image element.
     */
    private _createDragImage;
    /**
     * Create the icon box for the drag image element.
     * @param iconInfo The info about the icon to be displayed in the drag image.
     * @returns {HTMLElement} The drag icon element.
     */
    private _createDragIcon;
    /**
     * Create the drag image element.
     * @param textContent The text content to be placed inside the text box.
     * @param isDroppable If the textbox is for droppable elements.
     * @returns {HTMLElement} The drag text content.
     */
    private _createDragText;
}
declare const dragAndDropImage: DragAndDropImage;
export default dragAndDropImage;
