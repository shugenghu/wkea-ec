/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IRequestContext } from '../interfaces';
export interface IContentEditableInitEvent {
    type: string;
}
export declare const parsePayload: (content: string) => any;
export declare const isEmptyOrNullObject: (obj: object | null | undefined) => boolean;
export declare const returnEmptyPromise: () => Promise<{}>;
export declare const sanitizeForXss: (str: string) => string;
export declare const removeInstanceCache: (_key: string, value: {
    instance: string;
}) => unknown;
export declare const isAuthoringEditEnabled: (context: IRequestContext | undefined) => boolean;
/**
 * Tries to parse a string value into an number and reurns this value. If the string is undefined
 * or if the string does not represent a valid number, undefined is returned
 *
 * @param value The string representing the number to be parsed
 */
export declare const tryParseInt: (value: string | undefined) => number | undefined;
/**
 * Name of internal component fragment, must be all lower case
 */
export declare const SDK_FRAGMENT_NAME = "platform.saferendermodule";
/**
 * Regex constant for capturing the internal fragment name with data-reactroot that is occasionally emitted
 */
export declare const SDK_FRAGMENT_NAME_REGEX: RegExp;
/**
 * Hepler function to build a URL to get the asset
 * @param assetPath the path to the asset
 */
export declare const getAsset: (assetPath: string, context: IRequestContext) => string;
export declare const CurrencyCodeIdentifier = "cc";
export declare const getCurrencyCodeFromContext: (requestContext: IRequestContext) => string;
export declare const isNonceEnabled: (requestCnotext: IRequestContext) => any;
