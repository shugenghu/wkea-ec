import { ICultureInfoFormatter, IDateFormatOptions, INumberFormatOptions, ITimeFormatOptions } from '../interfaces';
/**
 * CultureInfoFormatter provides functions that support the localized formatting
 * of currencies, numbers, dates and times.
 */
export declare class CultureInfoFormatter implements ICultureInfoFormatter {
    private locale;
    private numberFormatter;
    private dateFormatter;
    private timeFormatter;
    private currencyFormatter;
    private numFormatterConstructor;
    private dateFormatterConstructor;
    private currencyCode;
    private static _validateInput;
    /**
     * Constructs a new instance of this formatter using the given locale.
     * Default value for locale is 'en-US'
     *
     * @param locale A string containing a BCP-47 locale tag e.g. 'en', 'en-us', 'fr-fr'. Default value of 'en-US'
     * For more information see https://tools.ietf.org/html/bcp47
     */
    constructor(locale: string, currencyCode: string);
    /**
     * Returns a localized currency formatted version of a price.
     *
     * @param price Either a string or number representing the price that will be localized and formatted
     * @param currencyCode Optional argument. The three letter currency code that will be used for formatting the currency.
     * If the currency code is not provided the locale will be used to determine the best fit currency code.
     */
    formatCurrency: (price: string | number, currencyCode?: string) => string;
    /**
     * Returns a localized formatted version of a number
     *
     * @param value The number that will be localized and formatted
     * @param options An optional argument that controls the formatting.
     */
    formatNumber: (value: number, options?: INumberFormatOptions | undefined) => string;
    /**
     * Returns a localized formatted version of a date
     *
     * @param date Date object or valid date string representing the date that will be localized and formatted
     * @param options An optional argument that controls the formatting.
     */
    formatDate: (date: string | Date, options?: IDateFormatOptions | undefined) => string;
    /**
     * Returns a localized formatted version of a time
     *
     * @param time Date object or valid date string representing the time that will be localized and formatted
     * @param options An optional argument that controls the formatting
     */
    formatTime: (time: string | Date, options?: ITimeFormatOptions | undefined) => string;
}
