/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { IActionContext, IHTTPRequestOptions, IHTTPResponse, IRequestContext } from '../interfaces';
/**
 * Helper class to call the commerce retail server
 */
export declare class CommerceRequest {
    private readonly apiSettings;
    private readonly requestContext;
    constructor(context: IActionContext);
    post: <T>(args: {
        requestUrl: string;
        body?: unknown;
        options?: IHTTPRequestOptions | undefined;
    }) => Promise<IHTTPResponse<T>>;
    get: <T>(args: {
        requestUrl: string;
        context: IRequestContext;
        options?: IHTTPRequestOptions | undefined;
    }) => Promise<IHTTPResponse<T>>;
    private parseOptions;
    /**
     * Creates a basic Axios Request Config that is shared across commerce and standard HTTP calls
     * @param requestUrl The url of the request
     * @param httpMethod The HTTP method of the request
     * @param body The body content of the request
     * @param options The options associated with the request
     */
    private createDefaultRequest;
    /**
     * Sets retail server specific headers needed for auth
     * @param requestConfig The current configuration settings of the request
     * @param apiSettings The retail server API configuration settings
     */
    private setRetailServerRequestHeaders;
    /**
     * Parses an OData Response and returns just the return type of the call without the extra OData Metadata
     */
    private parseODataResponse;
    /**
     * Send an retail server request
     * @param requestUrl The url of the request
     * @param httpMethod The HTTP method of the request
     * @param body The body content of the request
     * @param options The options associated with the request
     */
    private sendCommerceRequest;
}
