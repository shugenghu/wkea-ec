/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ITelemetry } from '@msdyn365-commerce/telemetry-internal';
import * as React from 'react';
import { ICommerceApiSettings, IModule } from '../contract';
import { IActionContext, ICoreContext, IRequestContext, ISessionStorageContext } from '../interfaces';
import { ICookieContext } from '../interfaces/context/ICookieContext';
/**
 * Creates a new mock telemetry object, takes a partial ITelemetry and fills in missing required properties
 * @param telemetry A partial or full implmentation of ITelemetry
 */
export declare const buildMockTelemetry: (telemetry?: Partial<ITelemetry> | undefined) => ITelemetry;
/**
 * Creates a mock CookieContext. Takes a partial ICookieContext and fills in required properties
 * @param context Partial action context.
 */
export declare const buildMockCookieContext: (context?: Partial<ICookieContext> | undefined) => ICookieContext;
export declare const buildMockSessionStorageContext: (context?: Partial<ISessionStorageContext> | undefined) => ISessionStorageContext;
/**
 * Creates a mock IRequestContext. Takes a partial IRequestContext and fills in required properties
 * @param requestContext Partial IRequestContext
 */
export declare const buildMockRequest: (requestContext?: Partial<IRequestContext> | undefined) => IRequestContext;
/**
 * Creates a mock IMSDyn365ActionContext. Takes a partial IActionContext and fills in required properties
 * @param context Partial action context.
 */
export declare const buildMockActionContext: (context?: Partial<IActionContext> | undefined) => IActionContext;
/**
 * Creates a mock Core Context
 * @param coreContext Partial core context
 */
export declare const buildMockCoreContext: <TApp extends {} = {}>(coreContext: Partial<ICoreContext<TApp>>) => ICoreContext<TApp>;
/**
 * Creates a mock MSDyn365 App with fake API settings for use in testing
 */
export declare const initializeMockApp: (mockSettings?: ICommerceApiSettings | undefined) => void;
/**
 * Generates a mock IModule<TData> prop
 * @param moduleData Mock TData that maps to props.data
 * @param dataActions Mock data actions that map to props.dataActions
 * @param moduleConfig Mock module configs that map to props.config
 * @param mockContext Mock ICoreContext that map to props.context
 * @param mockTelemetry Mock ITelemetry that map to props.telemetry. If no mock is provided a default will be passed that logs to console.
 */
export declare const buildMockModuleProps: <TData = {
    [x: string]: any;
}, TConfig = {
    [x: string]: any;
}>(moduleData: TData, dataActions: {
    [x: string]: any;
}, moduleConfig?: TConfig | undefined, mockContext?: ICoreContext<{}> | undefined, mockTelemetry?: ITelemetry | undefined, app?: {
    [x: string]: any;
} | undefined, view?: React.FC<{}> | undefined) => IModule<TData, {
    [x: string]: any;
}>;
