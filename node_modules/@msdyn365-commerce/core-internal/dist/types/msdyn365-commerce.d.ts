/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */
import { ICache } from '@msdyn365-commerce/retail-proxy';
import * as React from 'react';
import { ICommerceApiSettings, IExperimentationConnector, IGeoLocationConnector } from './contract';
import { ComponentType, IComponent, IComponentProps, IDictionary, ILocalCredentials, IMergedAppSettings, IPartnerImageSettings, IPartnerThemeSettings, IPlatformSettings, IResourceManager, ISecretManager, IThemeModule, IThemeRegistration } from './interfaces';
/**
 * App level const available to module/action developer
 */
export declare class MSDyn365Commerce {
    private _cartCookie;
    private _checkoutCartCookie;
    private _checkoutCartKeyPrefix;
    private _buildVersion;
    private _env;
    private _commerceApiSetting;
    private _themeRegistration;
    private _resourceManager;
    private _imageSettings;
    private _themeSettings;
    private _themeModules;
    private _connectorCache;
    private _secretManager;
    private _experimentationConnector;
    private _geoLookupConnector;
    private _platformSettings;
    private _initialLoadCompleted;
    private _localCredentials;
    private _appSettings;
    setInitialLoadCompleted: (initialLoadCompleted: boolean) => void;
    setThemeRegistration: (themeRegistration: IThemeRegistration) => void;
    /**
     * Sets list of theme module objects
     */
    setThemeModules: (themeModules: IThemeModule[]) => void;
    /**
     * Sets list of theme module objects
     */
    createComponent: <T extends IComponent<IComponentProps<any>>>(name: ComponentType, componentObj: T) => React.FC<IComponentProps<any>>;
    /**
     * Creates a component override
     */
    createComponentOverride: <T extends IComponent<IComponentProps<any>>>(name: ComponentType, componentObj: T) => React.FC<IComponentProps<any>>;
    /**
     * Check if its in postInitialLoading status
     */
    get initialLoadCompleted(): boolean;
    get CartCookie(): string;
    get cartCookieName(): string;
    /**
     * Get checkout cart cookie
     */
    get checkoutCartCookie(): string;
    /**
     * Get checkout cart cookie
     */
    get checkoutCartKeyPrefix(): string;
    get themes(): IThemeRegistration;
    /**
     * Gets theme modules with full layouts and segment objects
     */
    get themeModules(): IThemeModule[];
    /**
     * Gets the current build version
     */
    get buildVersion(): string;
    /**
     * Gets the current runtime environment
     */
    get env(): string;
    /**
     * Gets the commerce related API settings
     */
    get apiSettings(): ICommerceApiSettings;
    /**
     * Gets the commerce related image settings
     */
    get imageSettings(): IPartnerImageSettings;
    /**
     * Gets the commerce related theme settings
     */
    get themeSettings(): IDictionary<IPartnerThemeSettings>;
    /**
     * Gets the commerce related APP settings
     */
    get appSettings(): IMergedAppSettings;
    /**
     * Gets the experimentation connector object that contains the registered provider, listener and connector name
     * Returns undefined if an experimentation connector has not been registered
     */
    get experimentationConnector(): IExperimentationConnector | undefined;
    /**
     * Gets the geoLookup connector object that contains the registered provider and connector name
     * Returns undefined if a geo lookup connector has not been registered
     */
    get geoLookupConnector(): IGeoLocationConnector | undefined;
    /**
     * Gets the experimentation app cache
     */
    get connectorCache(): ICache | undefined;
    /**
     * Gets secret manager object
     */
    get secretManager(): ISecretManager | undefined;
    /**
     * Gets local credential details
     */
    get localCredentials(): ILocalCredentials | undefined;
    /**
     * Gets the platformSettings
     */
    get platformSettings(): IPlatformSettings | undefined;
    /**
     * Returns a boolean value indicating whether or not the current operating environment is browser or server
     */
    get isBrowser(): boolean;
    /**
     * Gets the resource manager instance
     */
    get resourceManager(): IResourceManager | undefined;
}
declare const msdyn365Commerce: MSDyn365Commerce;
export default msdyn365Commerce;
