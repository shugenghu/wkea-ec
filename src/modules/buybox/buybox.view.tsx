/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import { IBuyboxViewProps } from './';
import {
    IBuyboxAddToCartViewProps,
    IBuyboxAddToWishlistViewProps,
    // IBuyboxProductConfigureDropdownViewProps,
    // IBuyboxProductConfigureViewProps,
    IBuyboxProductQuantityViewProps
} from './components';

import {
    IBuyboxCallbacks,
    IBuyboxProps,
    IBuyboxData,
    IBuyboxState
} from '@msdyn365-commerce-modules/buybox';

import { IBuyboxProps as IBuyboxExtentionProps, IBuyboxResources as IBuyboxExtentionResources } from '../../themes/wkea/definition-extensions/buybox.ext.props.autogenerated';
import { Quantity } from '../../utilities/quantity/index';

const BuyboxView: React.FC<IBuyboxViewProps & IBuyboxExtentionProps<IBuyboxData>> = props => {
    const { ModuleProps, MediaGalleryContainerProps, ProductInfoContainerProps, addToCart, addToWishlist, quantity, price, title, callbacks, state, resources } = props;

    // let availableQuantity = 0;
    // if(props.data.productAvailableQuantity.result && props.data.productAvailableQuantity.result.length > 0)
    // {
    //     availableQuantity  = props.data.productAvailableQuantity.result[0].ProductAvailableQuantity.AvailableQuantity || 0;
    // }

    return (
        <Module {...ModuleProps}>
            <p className="product-catalog wk-nav-top"><a href="https://localhost:4000/?theme=wkea">首页</a>&gt;<span><a href="#">{props.data.product.result?.Name}{console.log(props.data.product)}</a></span></p>
            <Node {...MediaGalleryContainerProps}>
                {props.mediaGallery}
            </Node>
            <Node {...ProductInfoContainerProps}>
                <p>{title}</p>
                <p><label><span>维 嘉 价 格：</span><span>{price}</span></label></p>
                <p><label><span>维嘉订货号：</span><span>{props.data.product.result?.ItemId}</span> </label></p>
                <p><label><span>起 &nbsp;&nbsp;定 &nbsp;&nbsp;量：</span><span>1套</span> </label></p>
                <p><label><span>库 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;存：</span>
                    <span className="Inventory-quantity TitilliumWeb"></span>
                </label></p>
                <p><label><span>缺货出货日：</span><span>个工作日</span> </label></p>
                <p>
                    {quantity && _renderQuantity(quantity, callbacks, props, state, resources)}
                </p>
                <p>{_renderCartAndWishlistDiv(addToCart, addToWishlist)}</p>
            </Node>
        </Module>
    );
};

const _renderCartAndWishlistDiv = (addToCart?: IBuyboxAddToCartViewProps, addToWishlist?: IBuyboxAddToWishlistViewProps): JSX.Element | undefined => {
    if (!addToCart && !addToWishlist) {
        return undefined;
    }
    return (
        <div className='product-add-to-cart'>
            <div className='buttons'>
                {addToCart && addToCart.button}
                {addToWishlist && addToWishlist.button}
            </div>
        </div>
    );
};

// const _renderConfigure = (configure: IBuyboxProductConfigureViewProps): JSX.Element => {
//     const { ContainerProps, dropdowns } = configure;

//     return (
//         <Node {...ContainerProps}>
//             {dropdowns.map(_renderConfigureDropdown)}
//         </Node>
//     );
// };

// const _renderConfigureDropdown = (dropdown: IBuyboxProductConfigureDropdownViewProps): JSX.Element => {
//     const { ContainerProps, LabelContainerProps, heading, errors, select } = dropdown;

//     return (
//         <Node {...ContainerProps}>
//             <Node {...LabelContainerProps}>
//                 {heading}
//                 {errors}
//             </Node>
//             {select}
//         </Node>
//     );
// };

const _renderQuantity = (quantityComponent: IBuyboxProductQuantityViewProps, callbacks: IBuyboxCallbacks, props: IBuyboxProps<IBuyboxData>, state: IBuyboxState, extentionResources: IBuyboxExtentionResources): JSX.Element => {
    // const { ContainerProps, LabelContainerProps, heading, errors } = quantityComponent;
    const { ContainerProps } = quantityComponent;
    const {
        resources,
        context: {
            app: {
                config: {
                    maxQuantityForCartLineItem
                }
            }
        }
    } = props;
    const
        {
            quantity,
        } = state;
    const onChange = (newValue: number) => {
        if (callbacks.updateQuantity) {
            callbacks.updateQuantity(newValue);
        }
    };

    return (
        <Node {...ContainerProps}>
            {/* <Node {...LabelContainerProps}>
                {heading}
                {errors}
            </Node> */}
            购买数量:
            <Quantity
                id='ms-buybox__product-quantity-input'
                // @ts-ignore
                max={+props.data.product?.ExtensionProperties?.HIGHESTQTY?.StringValue || maxQuantityForCartLineItem}
                // @ts-ignore
                min={+props.data.product?.ExtensionProperties?.LOWESTQTY?.StringValue || 1}
                step={1}
                // @ts-ignore
                invent={+props.data.product?.InventQty?.LOWESTQTY?.StringValue || 0}
                // @ts-ignore
                leadtime={+props.data.product?.ExtensionProperties?.LEADTIME?.StringValue || 14}
                currentCount={quantity}
                onChange={onChange}
                inputQuantityAriaLabel={resources.inputQuantityAriaLabel}
                decrementButtonAriaLabel={extentionResources.decrementButtonAriaLabel}
                incrementButtonAriaLabel={extentionResources.incrementButtonAriaLabel}
            />

        </Node>
    );
};

export default BuyboxView;
