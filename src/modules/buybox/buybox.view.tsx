/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as React from 'react';

import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import { IBuyboxViewProps } from './';
import {
    IBuyboxAddToCartViewProps,
    IBuyboxAddToWishlistViewProps,
    IBuyboxProductQuantityViewProps
} from './components';
    // IBuyboxProductConfigureDropdownViewProps,
    // IBuyboxProductConfigureViewProps,

import {
    IBuyboxCallbacks,
    IBuyboxProps,
    IBuyboxData,
    IBuyboxState
} from '@msdyn365-commerce-modules/buybox';

import { IBuyboxProps as IBuyboxExtentionProps, IBuyboxResources as IBuyboxExtentionResources } from '../../themes/wkea/definition-extensions/buybox.ext.props.autogenerated';
import { Quantity } from '../../utilities/quantity/index';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const BuyboxView: React.FC<IBuyboxViewProps & IBuyboxExtentionProps<IBuyboxData>> = props => {
    const { ModuleProps, MediaGalleryContainerProps, ProductInfoContainerProps, addToCart, addToWishlist, quantity, title, callbacks, state, resources } = props;
    console.log(quantity)
    return (
        <Module {...ModuleProps}>
            <ToastContainer />
            <Node {...MediaGalleryContainerProps}>
                {props.mediaGallery}
            </Node>
            <Node {...ProductInfoContainerProps}>
                {title}
                <p><label className="text-justify" htmlFor="">维嘉价格</label><span>￥</span><span>{props.data.product.result?.Price}</span></p>
                <p><label className="text-justify" htmlFor="">维嘉订货号</label>{props.data.product.result?.ItemId}</p>
                {/* @ts-ignore */}
                {/* <p className="wkea-buybox-text wkea-buybox-remain">库存：{+props.data.product?.ExtensionProperties?.LOWESTQTY?.StringValue > 0 ? '有库存' : '暂无库存-扩展'}</p> */}
                <p><label className="text-justify" htmlFor="">库存</label>{props.availableQuantity ? props.availableQuantity : '暂无库存'}</p>
                {/* @ts-ignore */}
                <p><label className="text-justify" htmlFor="">最小订货量</label>{+props.data.product?.ExtensionProperties?.LOWESTQTY?.StringValue || 1}个</p>
                {/* @ts-ignore */}
                <p><label className="text-justify" htmlFor="">缺货出货日</label>{+props.data.product?.ExtensionProperties?.InventQty?.StringValue || 14}个工作日</p>
                <p>{quantity && _renderQuantity(quantity, callbacks, props, state, resources)}</p>
                <p>{_renderCartAndWishlistDiv(addToCart, addToWishlist)}</p>
            </Node>
        </Module>
    );
};

const _renderCartAndWishlistDiv = (addToCart?: IBuyboxAddToCartViewProps, addToWishlist?: IBuyboxAddToWishlistViewProps): JSX.Element | undefined => {
    if (!addToCart && !addToWishlist) {
        return undefined;
    }
    return (
        <div className='product-add-to-cart'>
            <div className='buttons'>
                {addToCart && addToCart.button}
                {addToWishlist && addToWishlist.button}
            </div>
        </div>
    );
};

// const _renderConfigure = (configure: IBuyboxProductConfigureViewProps): JSX.Element => {
//     const { ContainerProps, dropdowns } = configure;

//     return (
//         <Node {...ContainerProps}>
//             {dropdowns.map(_renderConfigureDropdown)}
//         </Node>
//     );
// };

// const _renderConfigureDropdown = (dropdown: IBuyboxProductConfigureDropdownViewProps): JSX.Element => {
//     const { ContainerProps, LabelContainerProps, heading, errors, select } = dropdown;

//     return (
//         <Node {...ContainerProps}>
//             <Node {...LabelContainerProps}>
//                 {heading}
//                 {errors}
//             </Node>
//             {select}
//         </Node>
//     );
// };

const _renderQuantity = (quantityComponent: IBuyboxProductQuantityViewProps, callbacks: IBuyboxCallbacks, props: IBuyboxProps<IBuyboxData>, state: IBuyboxState, extentionResources: IBuyboxExtentionResources): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, errors } = quantityComponent;
    const {
        resources,
        context: {
            app: {
                config: {
                    maxQuantityForCartLineItem
                }
            }
        }
    } = props;
    const
        {
            quantity,
        } = state;
    const onChange = (newValue: number) => {
        console.log(callbacks.updateQuantity(newValue))
        if (callbacks.updateQuantity) {
            callbacks.updateQuantity(newValue);
        }
    };

    return (
        <div className="wkea-buybox-info">
            <Node {...ContainerProps}>
                <Node {...LabelContainerProps}>
                    {heading}
                    {errors}
                </Node>
                <Quantity
                    id='ms-buybox__product-quantity-input'
                    // @ts-ignore
                    max={+props.data.product?.ExtensionProperties?.HIGHESTQTY?.StringValue || maxQuantityForCartLineItem}
                    // @ts-ignore
                    min={+props.data.product?.ExtensionProperties?.LOWESTQTY?.StringValue || 1}
                    step={1}
                    // @ts-ignore
                    invent={+props.data.product?.InventQty?.LOWESTQTY?.StringValue || 0}
                    // @ts-ignore
                    leadtime={+props.data.product?.ExtensionProperties?.LEADTIME?.StringValue || 14}
                    currentCount={quantity}
                    onChange={onChange}
                    inputQuantityAriaLabel={resources.inputQuantityAriaLabel}
                    decrementButtonAriaLabel={extentionResources.decrementButtonAriaLabel}
                    incrementButtonAriaLabel={extentionResources.incrementButtonAriaLabel}
                />
            </Node>
        </div>
    );
};

export default BuyboxView;
