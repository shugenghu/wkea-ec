/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { IModuleStateProps, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { IModuleProps } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { computed, when } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { ICheckoutGuestProfileData } from './checkout-guest-profile.data';
import { ICheckoutGuestProfileProps } from './checkout-guest-profile.props.autogenerated';
import getAddContactInfo, { IAddContactInfo } from './components/get-add-contact-info';
import getShowContactInfo, { IShowContactInfo } from './components/get-show-contact-info';

export * from './components/get-add-contact-info';
export * from './components/get-show-contact-info';

interface ICheckoutGuestProfileState {
    email: string;
}

export interface ICheckoutGuestProfileModuleProps extends ICheckoutGuestProfileProps<ICheckoutGuestProfileData>, IModuleStateProps { }

export interface ICheckoutGuestProfileViewProps extends ICheckoutGuestProfileProps<ICheckoutGuestProfileData>, ICheckoutGuestProfileState {
    moduleProps: IModuleProps;
    showContactInfo?: IShowContactInfo;
    addContactInfo?: IAddContactInfo;

    onChange?(email: string): void;
    onEdit?(): void;
    onSubmit?(): void;
    onCancel?(): void;
}

/**
 *
 * CheckoutGuestProfile component
 * @extends {React.PureComponent<ICheckoutGuestProfileProps<ICheckoutGuestProfileData>, ICheckoutGuestProfileState>}
 */
// @ts-ignore
@withModuleState
@observer
class CheckoutGuestProfile extends React.Component<ICheckoutGuestProfileModuleProps, ICheckoutGuestProfileState> {
    public state: ICheckoutGuestProfileState = {
        email:
            (this.props.context &&
                this.props.context.request &&
                this.props.context.request.user &&
                this.props.context.request.user.isAuthenticated &&
                this.props.context.request.user.emailAddress) ||
            ''
    };

    private inputRef: React.RefObject<HTMLInputElement> = React.createRef();

    @computed get isDataReady(): boolean {
        return (this.props.data.checkout.result && this.props.data.checkout.status) === 'SUCCESS';
    }

    public componentDidMount(): void {
        // @ts-ignore: Compiler not reconizing condition check for function params
        when(
            () => this.isDataReady,
            async () => {
                await this.init();
            }
        );
    }

    public render(): JSX.Element {
        const {
            config: { className },
            resources,
            moduleState: { isReady, hasError, hasExternalSubmitGroup }
        } = this.props;
        const email = (this.props.data.checkout.result && this.props.data.checkout.result.guestCheckoutEmail) || '';

        const viewProps: ICheckoutGuestProfileViewProps = {
            ...this.props,
            ...this.state,
            onChange: this.onChange,
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onSubmit: this.onSubmit,

            moduleProps: {
                moduleProps: this.props,
                className: classnames('ms-checkout-guest-profile', className, isReady ? 'show' : 'add')
            },
            showContactInfo: isReady
                ? getShowContactInfo({
                    canEdit: !hasExternalSubmitGroup,
                    email,
                    resources,
                    onEdit: this.onEdit
                })
                : undefined,
            addContactInfo: !isReady
                ? getAddContactInfo({
                    email: this.state.email,
                    hasError,
                    resources,
                    inputRef: this.inputRef,
                    onChange: this.onChange,
                    canSubmit: !hasExternalSubmitGroup,
                    onSubmit: this.onSubmit,
                    canCancel: !hasExternalSubmitGroup && !!email,
                    onCancel: this.onCancel
                })
                : undefined
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private init = async (): Promise<void> => {
        const emailOnCart = this.props.data.checkout.result?.checkoutCart.cart.ReceiptEmail;
        const email = emailOnCart || this.state.email;

        if (email) {
            await this.updateGuestProfile(email);
        }

        const isEmailValid = this.isEmailValid(email);
        this.props.moduleState.init({
            onEdit: this.onEdit,
            onCancel: this.onCancel,
            onSubmit: this.onSubmit,
            status: email && isEmailValid ? 'ready' : 'updating',
            hasError: !!email && !isEmailValid
        });
    };

    private onChange = (rowEmail: string): void => {
        const email = (rowEmail || '').replace(new RegExp('[<>]', 'gi'), '');
        this.setState({ email });
        if (this.props.moduleState.hasError) {
            // Clear error during user updating the email
            this.props.moduleState.setHasError(false);
        }
    };

    private isEmailValid = (email: string): boolean => {
        const regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return regex.test(email);
    };

    private updateGuestProfile = async (newGuestCheckoutEmail: string): Promise<void> => {
        if (this.props.data.checkout.result) {
            await this.props.data.checkout.result.updateGuestCheckoutEmail({ newGuestCheckoutEmail });
            this.setState({ email: newGuestCheckoutEmail });
        }
    };

    private onEdit = (): void => {
        this.props.moduleState.onUpdating();
    };

    private onSubmit = async (): Promise<void> => {
        const { email } = this.state;
        const isValid = this.isEmailValid(email);
        if (!isValid) {
            this.props.moduleState.setHasError(true);
            // Get error, focus back on the input field
            const input = this.inputRef && this.inputRef.current && this.inputRef.current.focus && (this.inputRef.current as HTMLElement);
            input && input.focus();
        } else {
            this.props.moduleState.onReady();
            await this.updateGuestProfile(email);
        }
    };

    private onCancel = (): void => {
        // Reset to the saved value
        if (!this.props.data.checkout.result) {
            return;
        }

        const email = this.props.data.checkout.result.guestCheckoutEmail;
        if (!email) {
            // It has no saved email, set to status updating and request user to fill the email form
            this.props.moduleState.onUpdating();
            return;
        } else {
            // It has saved email, set to status ready
            this.setState({
                email
            });
            this.props.moduleState.setHasError(false);
            this.props.moduleState.onReady();
        }
    };
}

export default CheckoutGuestProfile;