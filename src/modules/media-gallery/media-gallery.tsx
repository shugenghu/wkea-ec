/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import classnames from 'classnames';
import { reaction } from 'mobx';
import * as React from 'react';

import { Carousel, ICarouselProps } from '@msdyn365-commerce/components';

import {
    IComponentNodeProps,
    ImagefullView,
    IModalViewProps,
    IModuleProps,
    inlineZoomImageOnHover,
    inlineZoomImageOnMouseMove,
    inlineZoomImageOnMouseOut,
    inlineZoomInit,
    INodeProps,
    ISingleSlideCarouselProps,
    KeyCodes,
    NodeTag,
    onContainerZoomInit,
    onMouseMoveLensContainer,
    onMouseOutLensContainer,
    onMouseOverImageContainer,
    removeInlineZoomStyle,
    SingleSlideCarousel
} from '@msdyn365-commerce-modules/utilities';
import { IImageData, IImageSettings, Image } from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { imageSource, imageZoom, IMediaGalleryProps, thumbnailsOrientation } from '../media-gallery/media-gallery.props.autogenerated';
import { IMediaGalleryData } from '../media-gallery/media-gallery.data';
import { getValidProductImages, validateProductImages } from './utils';

export interface IMediaGalleryState {
    animating: boolean;
    activeIndex: number;
    mediaGalleryItems: IImageData[] | undefined;
    isImageZoomed: boolean;
    modalIsOpen: boolean;
}

export interface IMediaGalleryThumbnailsViewProps {
    ThumbnailsContainerProps: INodeProps;
    SingleSlideCarouselComponentProps: INodeProps;
    items?: IMediaGalleryThumbnailItemViewProps[];
}

export interface IMediaGalleryThumbnailItemViewProps {
    ThumbnailItemContainerProps: INodeProps;
    Picture: React.ReactElement;
}

export interface IMediaGalleryViewProps extends IMediaGalleryProps<IMediaGalleryData> {
    state: IMediaGalleryState;
    MediaGallery: IModuleProps;
    CarouselProps: INodeProps;
    Thumbnails: IMediaGalleryThumbnailsViewProps;
    Modal?:React.ReactElement|null;
}

/**
 * Media gallery component
 */
class MediaGallery extends React.Component<IMediaGalleryProps<IMediaGalleryData>, IMediaGalleryState> {
    private _inlineZoomDivRef: Map<number, HTMLDivElement> = new Map();
    private readonly defaultGalleryImageSettings: IImageSettings = {
        viewports: {
            xs: { q: 'w=767&h=767&m=8', w: 0, h: 0 },
            sm: { q: 'w=600&h=600&m=8', w: 0, h: 0 },
            md: { q: 'w=600&h=772&m=8', w: 0, h: 0 },
            lg: { q: 'h=772&m=8', w: 0, h: 0 }
        },
        lazyload: true
    };

    private readonly defaultThumbnailImageSettings: IImageSettings = {
        viewports: {
            xs: { q: 'w=100&m=8', w: 100, h: 0 },
            lg: { q: 'w=100&m=8', w: 100, h: 0 }
        },
        lazyload: true
    };

    constructor(props: IMediaGalleryProps<IMediaGalleryData>) {
        super(props);
        this._toggleModal = this._toggleModal.bind(this);
        this.state = { activeIndex: 0, animating: false, mediaGalleryItems: undefined, isImageZoomed: false, modalIsOpen:false };

        this._onImageMouseOut = this._onImageMouseOut.bind(this);
        this._inlineZoomImageOnHover = this._inlineZoomImageOnHover.bind(this);
        this._onInlineImageClick = this._onInlineImageClick.bind(this);
        this._onContainerZoomImageClick = this._onContainerZoomImageClick.bind(this);
        this._onMouseOutLensContainer = this._onMouseOutLensContainer.bind(this);
    }

    public async componentDidMount(): Promise<void> {
        const source = this.props.config.imageSource || imageSource.pageContext;
        const curatedImage = this.props.config.images || [];

        if (source === imageSource.pageContext) {
            reaction(
                () => (this.props.data.product.result ? this.props.data.product.result.RecordId : null),
                async () => {
                    if (this.props.data.product.result) {
                        const images = await getValidProductImages(
                            this.props.data.product.result.RecordId,
                            +this.props.context.request.apiSettings.channelId,
                            this.props.context.actionContext,
                            this.props.config.thumbnailImageSettings || this.defaultThumbnailImageSettings
                        );
                        this.setState({
                            mediaGalleryItems: [...images, ...curatedImage]
                        });
                    } else {
                        this.setState({
                            mediaGalleryItems: [...curatedImage]
                        });
                    }
                }
            );
        }

        if (source === imageSource.productId && this.props.data.mediaLocations.result) {
            const images = await validateProductImages(
                this.props.data.mediaLocations.result,
                this.props.context.actionContext,
                this.props.config.thumbnailImageSettings || this.defaultThumbnailImageSettings
            );
            this.setState({
                mediaGalleryItems: [...images, ...curatedImage]
            });
        } else if (source === imageSource.pageContext && this.props.data.product.result) {
            const images = await getValidProductImages(
                this.props.data.product.result.RecordId,
                +this.props.context.request.apiSettings.channelId,
                this.props.context.actionContext,
                this.props.config.thumbnailImageSettings || this.defaultThumbnailImageSettings
            );

            this.setState({
                mediaGalleryItems: [...images, ...curatedImage]
            });
        } else {
            this.setState({
                mediaGalleryItems: [...curatedImage]
            });
        }
    }

    public render(): JSX.Element {
        const {
            data: {
                product: { result: product },
            },
            id,
            config,
            resources
        } = this.props;

        const mediaGalleryItems = this.state.mediaGalleryItems;
        const { className, showPaginationTooltip } = config;
        const imgSource = config.imageSource || imageSource.pageContext;

        if (!mediaGalleryItems && imgSource === imageSource.pageContext && product) {
            this.setState({ mediaGalleryItems: [this._mapProductToImageData(product), ...config.images || []] });
        }

        const isVertical: boolean = config.thumbnailsOrientation === thumbnailsOrientation.vertical;
        const allowFullscreen:boolean = config.allowFullScreen || false;
        const zoomViewMode: string =
            config.imageZoom === imageZoom.inline
                ? imageZoom.inline
                : config.imageZoom === imageZoom.container
                ? imageZoom.container
                : '';
        const zoomView = allowFullscreen ? 'fullscreen': zoomViewMode;

        const viewProps: IMediaGalleryViewProps = {
            ...(this.props as IMediaGalleryProps<IMediaGalleryData>),
            state: this.state,
            MediaGallery: {
                moduleProps: this.props,
                className: classnames(`ms-media-gallery ${isVertical ? 'vertical' : ''}`, className)
            },
            Modal: allowFullscreen ? this.imageModalSlider(zoomViewMode): null,
            CarouselProps: {
                tag: Carousel,
                className: 'ms-media-gallery__carousel',
                items:
                    mediaGalleryItems &&
                    mediaGalleryItems.map((item: IImageData, index: number) => this._renderCarouselItemImageView(zoomView, item, index)),
                activeIndex: this.state.activeIndex,
                next: this.next,
                previous: this.previous,
                interval: false,
                directionTextPrev: resources.previousScreenshotFlipperText,
                directionTextNext: resources.nextScreenshotFlipperText,
                onIndicatorsClickHandler: this.goToIndex,
                showPaginationTooltip: showPaginationTooltip === true,
                handleOnExited: this.onExited,
                handleOnExiting: this.onExiting
            } as IComponentNodeProps<ICarouselProps>,
            Thumbnails: {
                ThumbnailsContainerProps: { className: 'ms-media-gallery__thumbnails-container' },
                SingleSlideCarouselComponentProps: {
                    tag: SingleSlideCarousel,
                    className: 'ms-media-gallery__thumbnails',
                    vertical: isVertical,
                    flipperPrevLabel: resources.previousScreenshotFlipperText,
                    flipperNextLabel: resources.nextScreenshotFlipperText,
                    parentId: id,
                    useTabList: true
                } as IComponentNodeProps<ISingleSlideCarouselProps>,
                items:
                    mediaGalleryItems &&
                    mediaGalleryItems.map((item: IImageData, index: number) => this._getThumbnailItem(item, index, this.state.activeIndex))
            }
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private onExiting = () => {
        this.setState({ animating: true });
    };

    private onExited = () => {
        this.setState({ animating: false });
    };

    private next = (): void => {
        if (this.isLastItem() === undefined) {
            return;
        }

        const nextIndex = this.isLastItem() ? 0 : this.state.activeIndex + 1;
        this.goToIndex(nextIndex);
    };

    private previous = (): void => {
        const nextIndex = this.isFirstItem()
            ? this.state.mediaGalleryItems
                ? this.state.mediaGalleryItems.length - 1
                : 0
            : this.state.activeIndex - 1;
        this.goToIndex(nextIndex);
    };

    private goToIndex = (index: number): void => {
        if (this.state.animating) {
            return;
        }
        this.setState({ activeIndex: index });
    };

    private _renderCarouselItemImageView(zoomView: string, image: IImageData, index: number): React.ReactNode {
        if (zoomView === 'container') {
            return this._renderImageInContainerOnZoom(image, index);
        } else if (zoomView === 'inline') {
            return this._renderImageInlineOnZoom(image, index);
        } else if (zoomView === 'fullscreen') {
            return this._renderImageFullScreenOnZoom(image, index);
        } else {
            return <React.Fragment>{this._getCarouselItem(image, index)}</React.Fragment>;
        }
    }

    private _getCarouselItem = (image: IImageData, index: number): React.ReactNode => (
        <Image
            className='ms-media-gallery__item'
            {...image}
            gridSettings={this.props.context.request.gridSettings!}
            imageSettings={this.props.config.galleryImageSettings || this.defaultGalleryImageSettings}
            loadFailureBehavior='default'
            role='tabpanel'
            id={`${this.props.id}__carousel-item__${index}`}
        />
    );

    private _getThumbnailItem = (image: IImageData, index: number, modifiedActiveIndex: number): IMediaGalleryThumbnailItemViewProps => {
        const classes = classnames(
            'ms-media-gallery__thumbnail-item',
            modifiedActiveIndex === index ? 'ms-media-gallery__thumbnail-item-active' : ''
        );

        return {
            ThumbnailItemContainerProps: {
                tag: 'li' as NodeTag,
                className: classes,
                role: 'tab',
                tabIndex: 0,
                key: index,
                'aria-label': image.altText,
                'aria-selected': modifiedActiveIndex === index,
                'aria-controls': `${this.props.id}__carousel-item__${index}`,
                onClick: this._generateOnThumbnailClick(index),
                onKeyDown: this._generateOnThumbnailKeyDown(index)
            },
            Picture: (
                <Image
                    className='ms-media-gallery__thumbnail'
                    {...image}
                    gridSettings={this.props.context.request.gridSettings!}
                    imageSettings={this.props.config.thumbnailImageSettings || this.defaultThumbnailImageSettings}
                    loadFailureBehavior='default'
                />
            )
        };
    };

    private _generateOnThumbnailKeyDown = (index: number) => {
        return (event: React.KeyboardEvent) => {
            if (event.which === KeyCodes.Enter || event.which === KeyCodes.Space) {
                event.preventDefault();

                this.goToIndex(index);
            }
        };
    };

    private _generateOnThumbnailClick = (index: number) => {
        return (event: React.MouseEvent<HTMLLIElement>) => {
            event.preventDefault();

            this.goToIndex(index);
        };
    };

    private _renderImageInlineOnZoom(image: IImageData, index: number): React.ReactNode {
        return (
            // tslint:disable-next-line: react-this-binding-issue
            <div className={`ms-inline-zoom ${this.state.isImageZoomed ? 'zoomed' : ''}`} ref={divRef => this._inlineZoomDivRef.set(index, divRef!)} data-scale={this.props.config.dataScale}>
                <Image
                    className='ms-media-gallery__item'
                    {...image}
                    gridSettings={this.props.context.request.gridSettings!}
                    imageSettings={this.props.config.galleryImageSettings || this.defaultGalleryImageSettings}
                    loadFailureBehavior='default'
                    role='tabpanel'
                    onClick={this._onInlineImageClick}
                    onMouseOver={this.state.isImageZoomed && this._inlineZoomImageOnHover || undefined}
                    id={`${this.props.id}__carousel-item__${index}`}
                />
                <Image
                    role='presentation'
                    className='ms-inline-zoom__zoomedImg'
                    {...image}
                    onClick={this._onImageMouseOut}
                    gridSettings={this.props.context.request.gridSettings!}
                    imageSettings={this.props.config.galleryImageSettings || this.defaultGalleryImageSettings}
                    loadFailureBehavior='default'
                    id={`${this.props.id}__zoom__${index}`}
                    onMouseMove={this.state.isImageZoomed && inlineZoomImageOnMouseMove || undefined}
                />
            </div>
        );
    }

    private _inlineZoomImageOnHover(event: React.MouseEvent<HTMLImageElement>): void {
        inlineZoomImageOnHover(event, this.props.config.dataScale);
    }

    private _onInlineImageClick(event: React.MouseEvent<HTMLImageElement>): void {
        if (window.innerWidth <= 768) { // $msv-breakpoint-m
            return;
        }

        inlineZoomInit(event, this.props.config.dataScale);
        this.setState({
            isImageZoomed: true
        });
    }

    private _onImageMouseOut(event: React.MouseEvent<HTMLImageElement, MouseEvent>): void {
        inlineZoomImageOnMouseOut(event);
        this.setState({
            isImageZoomed: false
        });

    }

    private _onContainerZoomImageClick(event: React.MouseEvent<HTMLImageElement>): void {
        if (window.innerWidth <= 768) { // $msv-breakpoint-m
            return;
        }

        onContainerZoomInit(event);

        this.setState({
            isImageZoomed: true
        });
    }

    private _onMouseOutLensContainer(event: React.MouseEvent<HTMLImageElement>): void {
        onMouseOutLensContainer(event);

        this.setState({
            isImageZoomed: false
        });
    }

    private _renderImageInContainerOnZoom(image: IImageData, index: number): React.ReactNode {
        return (
            <div className='ms-containerZoom__container'>
                <div className='ms-containerZoom__zoom-lens' role='presentation' onMouseOut={this._onMouseOutLensContainer} onClick={this._onMouseOutLensContainer} onMouseMove={this.state.isImageZoomed && onMouseMoveLensContainer || undefined} />
                <Image
                    className='ms-media-gallery__item'
                    {...image}
                    gridSettings={this.props.context.request.gridSettings!}
                    onClick={this._onContainerZoomImageClick}
                    imageSettings={this.props.config.galleryImageSettings || this.defaultGalleryImageSettings}
                    loadFailureBehavior='default'
                    onMouseOver={this.state.isImageZoomed && onMouseOverImageContainer || undefined}
                    id={`${this.props.id}__carousel-item__${index}`}
                />
            </div>
        );
    }

    private _renderImageFullScreenOnZoom(image: IImageData, index: number): React.ReactNode {
        return (
            <div className='ms-fullscreen-section'>
                <Image
                    className='ms-media-gallery__item'
                    {...image}
                    gridSettings={this.props.context.request.gridSettings!}
                    imageSettings={this.props.config.galleryImageSettings || this.defaultGalleryImageSettings}
                    loadFailureBehavior='default'
                    role='tabpanel'
                />
                <div className='ms-fullscreen-section__overlay'>
                    <a href='javascript:void(0);' title={this.props.resources.fullScreenTitleText} role='button' onClick={this.openModalDialog} className='ms-fullscreen-section__magnifying-glass-icon'/>
                </div>
            </div>
        );
    }

    private _mapProductToImageData(product: SimpleProduct): IImageData {
        return {
            src: product.PrimaryImageUrl || ''
        };
    }

    private isFirstItem = () => this.state.activeIndex === 0;

    private isLastItem = () => this.state.mediaGalleryItems && this.state.activeIndex === this.state.mediaGalleryItems.length - 1;

    private openModalDialog = (): void => {
        this._toggleModal();
    }

    private _toggleModal(): void {
        if (this.state.modalIsOpen) {
            const parentDiv = this._inlineZoomDivRef.get(this.state.activeIndex);
            if (parentDiv && parentDiv.children && parentDiv.children.length >= 2) {
                const image = parentDiv.children[1].querySelector('img');
                if (image) {
                    image.removeAttribute('style');
                }
            }
            this.setState({
                isImageZoomed: false
            });
        }
        this.setState({
            isImageZoomed: false,
            modalIsOpen: !this.state.modalIsOpen
        });
        removeInlineZoomStyle();
    }

    private imageModalSlider=(ZoomView:string):React.ReactElement => {
        const {
            data: {
                product: { result: product }
            },
            resources
        } = this.props;
        let mediaGalleryItems = this.state.mediaGalleryItems;

        if (!mediaGalleryItems && product) {
            mediaGalleryItems = [this._mapProductToImageData(product)];
        }

        const carouselprops = {
            tag: Carousel,
            className: 'ms-media-gallery__carousel',
            items:
                mediaGalleryItems &&
                mediaGalleryItems.map((item: IImageData, index: number) => this._renderCarouselItemImageView(ZoomView, item, index)),
            activeIndex: this.state.activeIndex,
            next: this.next,
            previous: this.previous,
            interval: false,
            directionTextPrev: resources.previousScreenshotFlipperText,
            directionTextNext: resources.nextScreenshotFlipperText,
            onIndicatorsClickHandler: this.goToIndex,
            showPaginationTooltip: true,
            hideIndicator: true,
            handleOnExited: this.onExited,
            handleOnExiting: this.onExiting,
        } as IComponentNodeProps<ICarouselProps>;

        const carousel = <Carousel  {...carouselprops} />;

        const imageModalSliderProps:IModalViewProps = {
            modalIsOpen:this.state.modalIsOpen,
            ontoggle:this._toggleModal,
            galleryCarousel: carousel
       };
        return ImagefullView(imageModalSliderProps) as React.ReactElement;
    }
}

export default MediaGallery;
